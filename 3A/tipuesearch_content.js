var tipuesearch = {"pages":[{"title":"2020年試験問題","text":"前半 ： 相澤先生 （問１） 蛍光灯や。 レンズ口径が同じで薄いレンズと厚いレンズがある。これらを用いたとき、先に焦げるのはどちらか。 \\(\\gamma\\) 補正について説明せよ。 （解答） カメラの ホワイトバランス 機能を用いずに撮影したためと考えられる。 照明とカメラの温度関係によって、画像に青みがかかったり（照明の温度がカメラよりも@高い@時）、赤みがかかったり（その逆）する。 （問２） 周波数領域において、原信号を \\(X(\\omega)\\) 、出力信号を \\(Y(\\omega)\\) 、ノイズを \\(N(\\omega)\\) 、フィルタを \\(H(\\omega)\\) と記述する。この時、これらの間には $$Y(\\omega) = H(\\omega)X(\\omega) + N(\\omega)$$ という関係性が成立している。 （解答） （問３） ハリスの SIFT特徴量 （解答） （問４） 次のような（人間うじゃうじゃ） ハリスの SIFT特徴量 （解答） 後半 ： 山崎先生 （問５） 下記手法について説明せよ。 アンサンブル学習 8点アルゴリズム （解答） （問６） Principle Component Analysis (PCA; 主成分分析法) について。 どのような用途で用いられるのか説明せよ。 具体的なアルゴリズムについて数式を用いて説明せよ。 （解答） （問７） ニューラルネットワークについて。 パーセプトロンの学習方法について数式を用いて説明せよ。 他の機械学習と比較してニューラルネットワークの学習アルゴリズムには特徴がある。その特徴と、それを生かした実用例を2つ答えよ。 （解答） if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2020.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2020.html"},{"title":"分子生命科学Ⅲ 試験問題H26","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 問6 痛覚と聴覚について、各々の感覚受容体の名称・局在・機能および、感覚受容体の活性化で生じるシグナル伝達系の反応、大脳皮質までの伝導路について簡単に述べなさい。 （例）嗅覚系では、感覚受容体は嗅細胞に存在するGタンパク質共役の嗅覚受容体である。嗅覚受容体に匂い物質が結合すると、細胞内で、アデニル酸シクラーぜの活性化に夜cAMPの産生が生じ、陽イオンチャンネルの開口、膜の脱分極が生じる。嗅細胞からのシグナルは、嗅球僧帽細胞を介して、一次嗅皮質へと伝導される。 解答 1. 痛覚 痛覚系では、感覚受容体（ 侵害受容器 ）は 分岐した無髄神経の自由神経終末 である 2. 聴覚 問7 前庭動眼反射 とは何か？ 解答 ¬前庭動眼反射(vestibulo-ocular reflex(VOR))¬とは、 「頭の回転運動で起こる眼球の反射運動。網膜上の視覚像の固定化に寄与する」 正確な視覚には、頭の運動に関わらず、網膜に安定した像が保たれる必要がある。それぞれの眼球は6つで一揃いの外眼筋(extraocular muscle)により動かされているが、VORは頭の回転を検知し、ただちに反対方向に眼の代償性の運動(compensatory movement)を指令する。この運動により、視線が視覚の目標物にしっかり固定される。VORは視覚入力よりも¬前庭(vestibular)¬の入力により引き起こされる反射なので、暗所や眼を閉じている時でも驚くほどよく働く。 問8 眼球優位円柱 とは何か？ 解答 ¬眼球優位円柱（コラム）(ocular dominance column)¬とは、 「主として片眼からの情報を受け取る有線皮質の部位」 のこと。 左右の別々の眼からの情報は¬外側膝状体(lateral geniculate nucleus; LGN)¬の別々の層が扱い、LGNの唯一の主要なシナプス標的である¬一次視覚野（有線皮質,V1野）¬の第ⅣC層に到達するが、この情報伝達に用いる軸索末端の分布がⅣC層では一様ではなく、むしろそれぞれ等間隔を保った約0.5mm幅の小断片に分かれている。これらの断片を¬眼球優位円柱（コラム）(ocular dominance column)¬と呼ぶ。 問9 アルツハイマー病 の発症機序について述べよ。 解答 ¬アルツハイマー病(Alzheimer's disease)¬は、認知機能にとって重要な脳の領域である大脳皮質のニューロンの細胞骨格の破壊によって生じる。 問10 体部位再現(局在)地図 とは何か？ 解答 皮膚上の隣接する受容体が、神経系の内部にある標的構造においても隣接するニューロンに情報を与えるという体性感覚経路の部位局在の機構を¬体部位局在（ソマトトピー）(somatotopy)¬と呼び、これに基づいて体部位を脳表に配置した図を¬体部位再現図¬と呼ぶ。カナダの脳外科医ワイルダー・ペンフィールドらによるホムンクルスが有名。 問11 副腎皮質刺激ホルモン(ACTH) の産生部位、作用部位、作用について述べよ。 解答 ¬副腎皮質刺激ホルモン(ACTH)¬は、 コルチコトロピン放出ホルモン(corticotropin-releasing hormone; CRH) に反応して下垂体前葉から放出されるホルモン。副腎からの¬コルチゾール(cortisol)¬放出を刺激する。 コルチゾール(cortisol) は、血中に放出されると全身に作用し、様々なストレスに耐えて生活するために、貯蔵庫からエネルギー源（グルコース）を動員し、また免疫系を抑制する。 問12 視床下部外側(lateral hypothalamus) と 視床下部腹内側(ventromedial hypothalamus) の摂食における役割について述べよ。 解答 ¬視床下部外側(lateral hypothalamus)¬の両側性の損傷は 食欲不振(anorexia) を引き起こす。対照的に、¬視床下部腹内側(ventromedial hypothalamus)¬の両側性の損傷は、過食と肥満を引き起こす。","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-H26.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-H26.html"},{"title":"試験問題","text":"問題 注意事項： 教科書、ノートは持ち込み不可 机の上には筆記用具以外は置かないこと 解答用紙は切り離さないこと 制限時間90分 （問１） \\(\\alpha,\\lambda > 0\\) をパラメータとするガンマ分布の確率密度関数を $$ \\begin{align} f(x;\\alpha,\\lambda) = \\begin{cases} \\dfrac{\\lambda&#94;\\alpha}{\\Gamma(\\alpha)} x&#94;{\\alpha-1} e&#94;{-\\lambda x} & (x \\geq 0) \\\\ 0 & (x < 0) \\end{cases} \\end{align} $$ とする。ここで、 $$\\Gamma(\\alpha) = \\int_0&#94;\\infty x&#94;{\\alpha-1} e&#94;{-x} dx$$ はガンマ関数である。 ガンマ関数の積率母関数を求め、期待値と分散を導出せよ。 （解答） → No.11: ガンマ分布の積率母関数を求め、期待値と分散を導出せよ （問２） 独立性と無相関性について説明せよ。 （解答） → No.06: 独立と無相関性について説明せよ （問３） ラグランジュ未定乗数法について説明せよ。 （解答） → No.35: ラグランジュ未定乗数法について説明せよ （問４） マルコフ決定問題および期待割引報酬和最大化について説明せよ。 （解答） → No.53: マルコフ決定問題および期待割引報酬和最大化について説明せよ （問５） 隠れマルコフモデルのビタビアルゴリズムを説明せよ。 （解答） → No.67: 隠れマルコフモデルのビタビアルゴリズムを説明せよ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-test.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-test.html"},{"title":"試験問題例","text":"導入 No.01: 汎化能力について説明せよ 学習した問題とその答えの情報などを用い、 未知の問題に対して 正しい答えを導く能力のこと。 確率統計 No.02: 確率統計外れ値がある場合の期待値の問題点と他の統計量との違いを具体例を交えて説明せよ 年収の平均値が400万円、中央値が350万円の合計50人の集団50人に、年収10億円の人が1人加わったとする。すると、その集団の平均年収は約2350万円となるが、一方の中央値はほとんど変わらない。 このように、外れ値がある場合、期待値はごく一部の外れ値に強く影響され、データを代表とする値とならないことがある。一方で、中央値や最頻値ではそのようなことが起こらない。このことを、 「外れ値に対してロバストである（頑健性がある）」 と呼ぶ。 No.03: ２つの確率変数の和の分散を各々の分散と共分散を用いて表せ $$ V(X+Y) = V(X)+V(Y)+2Cov(X,Y) $$ No.04: 分散共分散行列について説明せよ 分散の概念を多次元確率変数に拡張して行列としたもの。 N個の確率変数について、各確率変数同士の共分散を並べたN×N行列。 対角には分散が、非対角には共分散が並ぶ。 半正定値対称。 各確率変数が独立なら対角行列。 No.05: 相関係数及び正の相関・負の相関・無相関について説明せよ 2つの確率変数X,Yの相関係数は $$\\frac{Cov(X,Y)}{\\sqrt{V(X)}\\sqrt{V(Y)}}$$ で定義され、この値は \\(-1\\) 以上 \\(1\\) 以下となる。相関係数が正、負、 \\(0\\) のときそれぞれ正の相関がある、負の相関がある、無相関であるという。 No.06: 独立と無相関性について説明せよ 2つの連続型/離散型の確率変数 \\(X,Y\\) は同時確率密度/質量関数がそれぞれの周辺確率密度/質量関数の積で表されるとき独立であるという。 2つの確率変数 \\(X,Y\\) が独立な時、 積の期待値はそれぞれの期待値の積と一致する。（ \\(E[XY] = E[X]E[y]\\) ） 和の積率母関数はそれぞれの積率母関数の積と一致する。（ \\(M_{X+Y}(t) = M_X(t)M_Y(t)\\) ） 無相関である。 （逆は成り立たない。） No.07: 畳み込みについて説明せよ 2つの独立な確率変数 \\(X,Y\\) の周辺確率密度関数を \\(p_x,p_y\\) とすると \\(X\\) と \\(Y\\) の和 \\(Z\\) の確率密度関数は $$p_z(z) = \\int p_x(x) p_y(z-x) dx$$ と計算できる。このように、 関数 \\(g(=p_x)\\) を平行移動しながら関数 \\(f(=p_y)\\) に重ね足し合わせる二項演算（ \\(f\\ast g\\) ）のことを畳み込み(convolution) と呼ぶ。 No.08: ２項分布の積率母関数を求め、期待値と分散を導出せよ 成功する確率 \\(p\\) 、失敗する確率 \\(1-p\\) の実験を同じ条件で独立に繰り返すことを ベルヌーイ試行 という。このベルヌーイ試行を \\(n\\) 回行った時の成功回数を確率変数とする 離散確率分布 を 二項分布(binomial distribution) と呼ぶ。 $$ P(X=k)=\\left(\\begin{array}{l}{n} \\\\ {k}\\end{array}\\right) p&#94;{k}(1-p)&#94;{n-k} $$ 積率母関数 \\(M_X(t)\\) は、 $$ \\begin{align} M_X(t) &= E\\left(e&#94;{tX}\\right) \\\\ &= \\sum_{x=0}&#94;n e&#94;{tx} P(X=x)\\\\ &= \\sum_{x=0}&#94;n e&#94;{tx} \\left(\\begin{array}{l}{n} \\\\ {x}\\end{array}\\right) p&#94;{x}(1-p)&#94;{n-x}\\\\ &= \\sum_{x=0}&#94;n e&#94;{tx} \\left(\\begin{array}{l}{n} \\\\ {x}\\end{array}\\right) \\left(pe&#94;t\\right)&#94;{x}(1-p)&#94;{n-x}\\\\ &= (pe&#94;t+q)&#94;n \\quad (\\because \\text{ Binomial theorem}) \\end{align} $$ これを用いると、期待値 \\(E(X)\\) は $$ \\begin{aligned} E(X) &=\\left.\\frac{d M_{X}(t)}{d t}\\right|_{t=0} \\\\ &=\\left.n\\left(\\mathrm{e}&#94;{t} p+1-p\\right)&#94;{n-1} p \\mathrm{e}&#94;{t}\\right|_{t=0} \\\\ &=n(1-p+p)&#94;{n-1} p \\\\ &=n p \\end{aligned} $$ 同様にして、分散 \\(V(X)\\) は $$ \\begin{aligned} E\\left(X&#94;{2}\\right) &=\\left.\\frac{d&#94;{2} M_{x}(t)}{d t&#94;{2}}\\right|_{t=0} \\\\ &=\\left.\\left(n p\\left(\\mathrm{e}&#94;{t} p+1-p\\right)&#94;{n-1} \\mathrm{e}&#94;{t}\\right)&#94;{\\prime}\\right|_{t=0} \\\\ &=n(n-1) p\\left(\\mathrm{e}&#94;{t} p+1-p\\right)&#94;{n-2} p \\mathrm{e}&#94;{t}+n p\\left(\\mathrm{e}&#94;{t} p+1-p\\right)&#94;{n-1} \\mathrm{e}&#94;{t} \\\\ &=n(n-1) p&#94;{2}+n p \\\\ V\\left(X\\right) &=E\\left(X&#94;{2}\\right)-E\\left(X\\right)\\\\ &=np\\left(1-p\\right) \\end{aligned} $$ と求められる。 No.09: ポアソン分布の積率母関数を求め、期待値と分散を導出せよ ポアソン分布(Poisson distribution) は、単位時間中に平均 \\(\\lambda\\) 回起こる事象の生起回数の確率分布で、確率質量関数は \\(\\dfrac{e&#94;{-\\lambda} \\lambda&#94;x}{x!}\\) と表される。 ここで、積率母関数 \\(M_X(t)\\) とその微分が $$ \\begin{align} M_X(t) &= \\sum_{x=0}&#94;\\infty e&#94;{tx} \\cdot \\frac{e&#94;{-\\lambda} \\lambda&#94;x}{x!} \\\\ &= e&#94;{-\\lambda} \\sum_{x=0}&#94;\\infty \\frac{(\\lambda e&#94;t)&#94;x}{x!} \\\\ &= e&#94;{-\\lambda} e&#94;{\\lambda e&#94;t} \\quad \\left(\\because \\text{ McLaughlin expansion : } e&#94;t=\\sum_{x=0}&#94;\\infty \\frac{t&#94;x}{x!}\\right) \\\\ &= e&#94;{\\lambda (e&#94;t-1)}\\\\ M_X&#94;\\prime(t) &= \\lambda e&#94;t e&#94;{\\lambda (e&#94;t-1)} \\\\ M_X&#94;{\\prime\\prime}(t) &= \\lambda e&#94;t e&#94;{\\lambda (e&#94;t-1)} + \\lambda&#94;2 e&#94;{2t} e&#94;{\\lambda (e&#94;t-1)} \\end{align} $$ であるから、期待値 \\(E(X)\\) と分散 \\(V(X)\\) はそれぞれ以下で表される。 $$ \\begin{align} E(X) &= M_X&#94;\\prime(0) = \\lambda \\\\ V(X) &= M_X&#94;{\\prime\\prime}(0) - M_X&#94;\\prime(0)&#94;2 = \\lambda \\end{align} $$ No.10: 正規分布の積率母関数を求め、期待値と分散を導出せよ 正規分布(normal distribution) の確率密度関数は $$f(x) = \\dfrac{1}{\\sigma \\sqrt{2 \\pi}} \\exp \\left(-\\frac{(x-\\mu)&#94;2}{2\\sigma&#94;2}\\right)$$ で表されるので、積率母関数 \\(M_X(t)\\) は $$ \\begin{align} M_X(t) &= \\int_{-\\infty}&#94;\\infty e&#94;{tx} f(x) dx \\\\ &= \\exp \\left(\\mu t+\\frac{\\sigma&#94;2 t&#94;2}{2} \\right) \\underbrace{\\int_{-\\infty}&#94;{\\infty} \\frac{1}{\\sigma \\sqrt{2 \\pi}} \\exp \\left(- \\frac{\\{x-(\\mu+\\sigma&#94;2t)\\}&#94;2}{2\\sigma&#94;2} \\right) dx}_{=\\int_{-\\infty}&#94;{\\infty}\\mathcal{N}\\left(\\mu+\\sigma&#94;2 t, \\sigma&#94;2\\right) = 1} \\\\ &= \\exp \\left(\\mu t+ \\frac{\\sigma&#94;2 t&#94;2}{2} \\right) \\end{align} $$ 期待値は \\(\\mu\\) 、分散は \\(\\sigma&#94;2\\) となる。（導出は省略。） No.11: ガンマ分布の積率母関数を求め、期待値と分散を導出せよ ガンマ分布は、 ガンマ関数 \\(\\Gamma(\\alpha) = \\int_0&#94;\\infty x&#94;{\\alpha-1} e&#94;{-x} dx \\quad (>0)\\) を用いて $$ \\begin{align} f(x) = \\begin{cases} \\dfrac{\\lambda&#94;\\alpha}{\\Gamma(\\alpha)} x&#94;{\\alpha-1} e&#94;{-\\lambda x} & (x \\geq 0) \\\\ 0 & (x < 0) \\end{cases} \\end{align} $$ と表される。したがって、積率母関数は $$ \\begin{align} M_X(t) &= \\int_0&#94;\\infty e&#94;{tx} \\frac{\\lambda&#94;\\alpha}{\\Gamma(\\alpha)} x&#94;{\\alpha-1} e&#94;{-\\lambda x} dx \\\\ &= \\frac{\\lambda&#94;\\alpha}{\\Gamma(\\alpha)} \\int_0&#94;\\infty \\left(\\frac{y}{\\lambda - t} \\right)&#94;{\\alpha -1} \\exp(-y) \\frac{1}{\\lambda -t} dy \\quad \\left(\\because y = (\\lambda -t)x\\right) \\\\ &= \\frac{\\lambda&#94;{\\alpha}}{\\Gamma(\\alpha)}\\frac{1}{\\left(\\lambda-t\\right)&#94;{\\alpha}}\\int_0&#94;{\\infty}y&#94;{\\alpha-1}e&#94;{-y}dy\\\\ &= \\frac{\\lambda&#94;\\alpha}{\\Gamma(\\alpha)} \\frac{\\Gamma(\\alpha)}{(\\lambda -t)&#94;\\alpha}\\\\ &= \\lambda&#94;\\alpha (\\lambda -t)&#94;{-\\alpha} \\end{align} $$ となるので、 $$ \\begin{align} M_X(t)&#94;{\\prime} &= \\frac{\\alpha}{\\lambda-t}M_X(t)\\\\ &= \\frac{\\alpha\\lambda&#94;{\\alpha}}{\\left(\\lambda-t\\right)&#94;{\\alpha+1}}\\\\ M_X(t)&#94;{\\prime\\prime} &= \\frac{\\left(\\alpha + 1\\right)}{\\lambda-t}M_X(t)&#94;{\\prime}\\\\ &= \\frac{\\alpha\\left(\\alpha + 1\\right)\\lambda&#94;{\\alpha}}{\\left(\\lambda-t\\right)&#94;{\\alpha+2}} \\end{align} $$ から、 期待値は \\(\\dfrac{\\alpha}{\\lambda}\\) 、分散は \\(\\dfrac{\\alpha}{\\lambda&#94;2}\\) となる。 No.12: 独立同一分布について説明せよ \\(n\\) 個の確率変数 \\(X_1,\\cdots,X_n\\) が 「独立に」 、 「同じ分布に」 従うとき、 独立同一分布に従う という。 このとき、同時確率密度関数は、各標本の確率密度関数を \\(g(x)\\) とすると $$ f(x_1,x_2,\\cdots,x_n) = g(x_1)g(x_2)\\cdots g(x_n) $$ で表される。ここでこれらが期待値 \\(\\mu\\) 、分散 \\(\\sigma&#94;2\\) の独立同一分布に従う標本だとすると、標本平均 \\(\\overline{X}_n = \\displaystyle \\frac{1}{n} \\sum_{i=1}&#94;n X_i\\) の期待値と分散は、期待値が \\(\\mu\\) のままである一方、分散は \\(\\dfrac{\\sigma&#94;2}{n}\\) と減少する。 つまり 標本数を増やすことで、母集団の標本平均値が安定する ことが分かる。 No.13: チェビシェフの不等式について説明せよ 分散を持つ確率分布 に従う任意の確率変数に対して、 \\(k>0\\) のとき $$P(|X-E(X)| \\geq k) \\leq \\frac{V(X)}{k&#94;2}$$ が成り立つ。この不等式を使うことで、 「確率分布の具体的な形はわからないが、期待値と分散がわかる」 といった場合に、確率の上限を計算することが可能になる。 なお、この不等式は以下のように証明できる。 $$ \\begin{align} V(X) &= \\int_{-\\infty}&#94;{\\infty} (x-E(X))&#94;2 f(x) dx \\\\ &\\geq \\int_I (x-E(X))&#94;2 f(x) dx \\quad (I = \\{ x: |x-E(X)| \\geq k \\}) \\\\ &\\geq k&#94;2 \\int_I f(x) dx \\\\ &= k&#94;2 P(|X-E(X)| \\geq k) \\end{align} $$ No.14: 大数の弱法則について説明せよ 標本平均 \\(\\overline{X}_n\\) が期待値に確率収束するということ。 $$ \\forall \\varepsilon > 0 \\lim_{n \\to \\infty} P(|\\overline{X}_n - \\mu| \\geq \\varepsilon) = 0 $$ これより，標本を十分に多く取れば標本平均を真の期待値とみなしてよいことがわかる。これは各標本の期待値を \\(\\mu\\) 、分散を \\(\\dfrac{\\sigma&#94;2}{n}\\) とすると、チェビシェフの不等式より、 $$ \\left(0\\leq\\right)P(|\\overline{X}_n - \\mu| \\geq \\varepsilon) \\leq \\frac{\\sigma&#94;2/n}{\\varepsilon&#94;2} $$ であり、 \\(n \\to \\infty\\) のときに右辺が0に収束することから、左辺も0に収束することにより示される。 この法則は、 実際には分散が存在しなくても成り立つ。 No.15: 大数の強法則について説明せよ 標本平均が 概収束(almost sure convergence) するということ。つまり、無限列 \\(\\{X_n\\}\\) の確率分布が \\(\\mu\\) に収束する。 $$ \\overline{X}_n \\to \\mu \\quad \\textrm{with probability } 1 $$ これにより、 標本平均が母平均に収束する ことが分かる。 No.16: 確率収束と概収束の違いについて説明せよ 確率収束は \\(X_n\\) の確率分布を \\(n\\) ごとに考えるのに対し，概収束は無限列 \\(\\{ X_n \\}\\) の確率分布を考える。 $$ \\begin{align} X_n = \\begin{cases} 0 & \\textrm{with probability } 1-\\frac{1}{n} \\\\ 1 & \\textrm{with probability } \\frac{1}{n} \\end{cases} \\end{align} $$ となるような確率分布を考えると、 \\ $$ \\begin{align} \\lim_{n \\to \\infty} \\textrm{Pr}(|X_n| - 1 > \\varepsilon) &= 0 \\\\ \\sum_{n=1}&#94;\\infty \\textrm{Pr}(|X_n| = 1) &= \\infty \\end{align} $$ となり、0に 確率収束する が、 概収束はしない ことが分かる。厳密には 「ボレル・カンテリの補題」 を用いて示される。 No.17: 中心極限定理について説明せよ 標本平均を標準化する。 $$ \\overline{Z}_n = \\dfrac{\\overline{X}_n-\\mu}{\\sigma / \\sqrt{n}} $$ このとき、任意に固定した \\(a < b\\) に対して \\(n \\to \\infty\\) のとき、次式が成り立つ。 $$ P(a \\leq \\overline{Z}_n \\leq b) \\to \\int_a&#94;b \\dfrac{1}{\\sqrt{2\\pi}} e&#94;{-x&#94;2/2} dx $$ これを、 「 \\(\\overline{Z}_n\\) の分布が標準正規分布に弱収束（または分布収束）する」 と言ったり、 \\(\\overline{Z}_n\\) は漸近的に標準正規分布に従うと言ったりする。ここで、 $$ \\overline{Z}_n \\to Z (\\text{ weakly }) \\Longleftrightarrow \\lim_{n \\to \\infty} M_{\\overline{Z}_n}(t) = M_Z(t) $$ つまり、 「弱収束すること」と「積率母関数が各点収束すること」は同値 である。 まとめると、 \\(n\\) が大きいとき、 標本平均は期待値 \\(\\mu\\) 、分散 \\(\\frac{σ&#94;2}{n}\\) の正規分布にほぼ従う。 No.18: 弱収束・分布収束について説明せよ 弱収束・分布収束は $$ \\lim_{n \\to \\infty} M_{\\overline{Z}_n}(t) = M_Z(t) $$ と同値であり、積率母関数が各点収束することである。これは、 確率収束や概収束よりも弱い収束 である。 No.19: 仮説検定について説明し、社会・科学における利用例とその役割について自由に述べよ 仮説検定とは、 「母集団についての何らかの命題を標本に基づいて検証すること」 である。 帰無仮説の元で成り立つ確率が高々 \\(\\alpha\\) であるような事象を考える。ここで \\(\\alpha\\) は 有意水準 と呼ばれ、5%か1%に設定されることが多い。（検定を行う前に決める。） 次に、標本を観測してその事象が成り立っているかを調べる。 成り立っていれば、帰無仮説がほとんど起こらないことを証明しているので、 帰無仮説を棄却する。 成り立っていなければ、帰無仮説が現実と矛盾することを証明するだけの 「十分な根拠がない」 として帰無仮説を採択する。 社会においては、例えば新たに開発した薬に効能が本当にあるのかどうかを検証する時などに用いられる。プラセボに対する薬の試験を考える（「薬の効果を有意的に主張できるか」を調べる）と、 帰無仮説は、「薬の効果を主張できない」に当たり、「薬に対する反応の平均がプラセボに対するそれと等しい。」という仮説 対立仮説は、「薬の効果を主張できる」に当たり、「薬に対する反応の平均がプラセボに対するそれとは異なる。」という仮説 である。(Wikipedia より) No.20: 帰無仮説と対立仮説について説明せよ 帰無仮説は元の仮説で、何の関係もない、差異はみられない、仮説などそもそもなかった、などを意味する仮説で、対立仮説と排反な仮説である。 No.21: 有意水準について説明せよ 仮説検定において、帰無仮説を棄却する基準となる確率のこと。検定を行う前に決められ、通常1%か5%に設定される。なお、有意水準は 「帰無仮説が正しいのに、謝って棄却してしまう確率（第一種の過誤）」 でもある。 No.22: 正規分布の片側検定・両側検定について説明せよ # 検定方法 例 両側検定 あるパラメータが目標値と等しいかを調べる検定方法 ある装置の複製を作ったときに、元の装置と同じ性能が得られるかを調べるときなどに使用される。正規分布においては、有意水準 \\(\\alpha\\) に対して、確率分布の両端の面積が \\(\\frac{\\alpha}{2}\\) の領域を棄却域とし、現実の正規化標本平均 \\(Z\\) が棄却域に入ったら、帰無仮説を棄却する。 片側検定 あるパラメータが比較対象より大きいかどうかを調べる検定方法 新しく開発した装置の性能が従来の装置よりも良いかどうかを調べるときなどに使用される。正規分布においては、有意水準 \\(\\alpha\\) に対して、確率分布の右端の面積が \\(\\alpha\\) の領域を棄却域とし、現実の正規化標本平均 \\(Z\\) が棄却域に入ったら、帰無仮説を棄却する。 No.23: 二標本検定について例を交えて説明せよ 期待値がそれぞれ \\(\\mu_X, \\mu_Y\\) の二つの分布に従って取り出した独立同一分布に従う標本 $$ \\{X_i\\}_{i=1}&#94;{n_X}, \\{Y_i\\}_{i=1}&#94;{n_Y} $$ から帰無仮説 \\(\\mu_X = \\mu_Y\\) を検定するような手法。 例えば、ある反応での化合物の生成量を予測する問題を考える。 触媒Xと触媒Yでそれぞれ何度か実験を行い、それぞれの生成量を調べると、触媒Xの方が平均生成量が少なかった。このとき、触媒Yの方が優れていると結論付けてよいかはわからないので、 「触媒Xとの平均生成量の差が有意であるかどうか」 を二標本検定で調べる。 二つの標本はそれぞれ \\(\\mathcal{N}\\left(\\mu_X,\\sigma&#94;2\\right),\\mathcal{N}\\left(\\mu_Y,\\sigma&#94;2\\right)\\) に従うとすると、標本平均の差 \\(\\overline{X}-\\overline{Y}\\) は平均 \\(\\mu_X-\\mu_Y\\) 、分散 \\(\\frac{\\sigma&#94;2}{n_X}+\\frac{\\sigma&#94;2}{n_Y}\\) の正規分布に従う。 母分散が既知の時： 標本平均の差を標準化すると標準正規分布に従うので、棄却域を計算することができる。 母分散が未知の時： \\(t\\) 検定を行う。まず、分散 \\(\\sigma&#94;2\\) を標本から以下のように推定する。 $$ \\hat{\\sigma}&#94;2 = \\dfrac{\\sum_{i=1}&#94;{n_X} (X_i - \\overline{X})&#94;2 + \\sum_{i=1}&#94;{n_Y} (Y_i - \\overline{Y})&#94;2}{n_X + n_Y - 2} $$ このとき、 \\(\\hat{Z}\\) は自由度 \\(\\phi = n_X + n_Y - 2\\) の \\(t\\) 分布に従うので、その \\(t\\) 分布の棄却域を計算すればよい。 制約なし最適化 No.24: 制約なし最適化最適化問題における最適性条件について説明せよ 最適化問題の最適解であるための 必要条件 を最適性条件という。 No.25: 制約なし最適化問題の最適性条件について説明せよ \\(x&#94;{\\ast}\\) が(局所)最適解であるための必要条件は $$\\frac{\\partial}{\\partial x} f(x&#94;{\\ast}) = 0$$ である。 No.26: 凸関数の定義を述べよ 任意の \\(\\theta \\in [0, 1]\\) と \\(x, y \\in dom(f)\\) に対して $$f(\\theta x + (1 - \\theta) y) \\leq \\theta f(x) + (1 - \\theta)f(y)$$ が成立するとき、 \\(f\\) を凸関数という No.27: fが１階微分可能なときfが凸関数であるための必要十分条件について説明せよ 任意の \\(x, y\\) に対して $$f(x) \\ge f(y) + \\nabla f (x)&#94;T (x - y)$$ が成立することである。なお、このとき接線の方程式を \\(g\\) として \\(g \\leq f\\) が成立する No.28: fが２階微分可能なときfが凸関数であるための必要十分条件について説明せよ ヘッセ行列が半正定値であること。すなわち、任意の \\(x\\) に関して $$\\nabla&#94;2 f(x) \\ge 0$$ が成立することである。 No.29: 凸集合について説明せよ 任意の \\(\\theta \\in [0, 1]\\) と \\(x, y \\in S\\) に対して \\(\\theta x + (1 - \\theta) y \\in S\\) となるとき、 \\(S\\) を凸集合という。このとき、 \\(x\\) と \\(y\\) を結ぶ線分上の全ての点が \\(S\\) に属する。 No.30: 凸最適化問題における最適解の必要十分条件について説明せよ 凸関数 \\(f\\) において、 \\(x&#94;{\\ast}\\) が(局所)最適解であるための必要十分条件は $$\\frac{\\partial}{\\partial x} f(x&#94;{\\ast}) = 0$$ である。 No.31: 劣勾配と劣微分について説明せよ 任意の \\(x\\) に対して \\(f(x) \\ge f(x&#94;{\\prime}) + \\theta&#94;T (x - x&#94;{\\prime})\\) を満たすような \\(a\\) を(点 \\(x&#94;{\\prime}\\) における)劣勾配といい、劣勾配全体の集合を(点 \\(x&#94;{\\prime}\\) における)劣微分といい、 \\(\\partial f(x&#94;\\prime)\\) で表す。 なお、 \\(f\\) が微分可能であれば、劣勾配は \\(f\\) の微分に一致する。 No.32: ヘッセ行列とニュートン法について説明せよ 2回微分可能な関数 \\(f\\) に対して \\(H(x) = \\nabla&#94;2 f (x)\\) を点 \\(x\\) におけるヘッセ行列という。つまり、 $$ [\\nabla&#94;2 f(x)]_{j,j&#94;\\prime} = \\dfrac{\\partial&#94;2 f(x)}{\\partial x&#94;{(j)} \\partial x&#94;{(j&#94;\\prime)}} $$ である。ニュートン法は 、ステップ幅を \\(\\varepsilon_k \\in (0,1]\\) として、 $$x_{n+1} = x_n - \\varepsilon_k H(x_n)&#94;{-1} \\nabla f(x_n)$$ という更新式によって(最適性条件を満たす)最適解 \\(x&#94;{\\ast}\\) を求めるアルゴリズムである。一般の勾配降下法が一次微分の情報のみを用いるのに対し、二次微分の情報も用いるため、効率よく最適解に達することができるとされている。 No.33: 正割条件を導出し準ニュートン法との関係について説明せよ 目的関数 \\(f(x)\\) の \\(x_k\\) 周りでの二次近似 \\(f_k(x)\\) は $$ f_k(x) = f(x_k) + \\nabla f(x_k)&#94;T(x-x_k) + \\frac{1}{2}(x-x_k)&#94;T \\nabla &#94;2 f(x_k)(x-x_k) $$ であり、これを \\(x\\) で微分すると、その勾配 \\(\\nabla f_k(x)\\) は $$ \\nabla f_k(x) = \\nabla f(x_k)+\\nabla&#94;2 f(x_k)(x-x_k) $$ となる。 \\(x=x_{k-1}\\) とすると、 \\(\\nabla f(x_{k-1}) = \\nabla f_k(x_{k-1})\\) のとき、 $$ \\nabla&#94;2 f(x_k)(x_k-x_{k-1}) = \\nabla f(x_k) - \\nabla f(x_{k-1}) $$ を得る。これを 正割条件(secant condition) という。 なお、準ニュートン法では、正割条件を満たす \\(H_k\\) の中で性質の良いものを選ぶ。 制約付き最適化 No.34: 制約付き最適化等式制約付き最適化問題の最適性条件について説明せよ 等式制約付き最適化問題 $$ \\min_{x \\in dom(f)} f(x) \\quad \\textrm{subject} \\ \\textrm{to} \\ g(x) = 0 $$ の最適性条件は、 \\(x&#94;\\ast\\) が最適解のとき、 \\(\\nabla f(x&#94;\\ast)\\) と \\(\\nabla g(x&#94;\\ast)\\) が平行になること である。 No.35: ラグランジュ未定乗数法について説明せよ \\(\\min_x \\{ f(x) \\mid g(x)=0 \\}\\) という等式制約付き最適化問題があったときに、ラグランジュ関数 \\(L(x, \\lambda) = f(x) + \\lambda&#94;T g(x)\\) を最適化することでこの最適化問題を解く方法をラグランジュの未定乗数法という。 このとき、 \\(\\dfrac{\\partial }{\\partial x}L = 0, \\dfrac{\\partial}{\\partial \\lambda}L = 0\\) が最適性条件となる。 No.36: 双対上昇法について説明せよ 適当な初期値から ラグランジュ関数の最小化と双対変数の勾配上昇を交互に実行することで主変数を最適化する方法 である。このときに扱う問題はラグランジュ双対問題で、 $$ \\begin{align} f&#94;\\ast &= \\max_{\\lambda \\in \\mathbb{R}&#94;m} \\omega(\\lambda) \\\\ \\omega(\\lambda) &= \\inf_{x \\in \\chi} L(x,\\lambda) \\\\ L(x,\\lambda) &= f(x) + \\lambda&#94;T g(x) \\end{align} $$ 更新式は \\(\\varepsilon_k (>0)\\) をステップ幅として $$ \\begin{align} x_{k+1} &= \\textrm{argmin}_{x \\in \\chi} L(x,\\lambda_k) \\\\ \\lambda_{k+1} &= \\lambda_k + \\varepsilon_k g(x_{k+1}) \\end{align} $$ となる。 No.37: 射影勾配法について説明せよ 射影勾配法(gradient projection method)は、不等式制約付き最適化問題 $$ \\min_{x \\in \\chi} f(x) \\ \\textrm{subject} \\ \\textrm{to} \\ h(x) \\leq 0 $$ を解く手法の一つであり、 勾配降下 \\(\\tilde{x}_{k+1} = x_k - \\varepsilon_k \\nabla f(x_k)\\) 実行可能領域への射影 \\(x_{k+1}=P_k \\tilde{x}_{k+1}\\) を繰り返して最適化を行う。これらをまとめると、更新式は、 \\(x_{k+1}=P_k(x_k-\\varepsilon \\nabla f(x_k))\\) となる。射影が簡単に計算できる時には効率が良い。 No.38: KKT条件について説明せよ 不等式制約付き最適化問題における最適性条件である。一般には必要条件だが、凸最適化問題では必要十分条件となる。 \\(\\min_x \\{ f(x) \\mid g(x) = 0, h(x) \\le 0 \\}\\) なる最適化問題において、条件式は \\(\\nabla f(x&#94;{\\ast}) + \\nabla g(x&#94;{\\ast})&#94;T \\lambda&#94;{\\ast} + \\nabla h(x&#94;{\\ast})&#94;T \\mu&#94;{\\ast} = 0\\) \\(g(x&#94;{\\ast}) = 0\\) \\(h(x&#94;{\\ast}) \\le 0\\) \\(\\mu&#94;{\\ast} \\ge 0\\) \\(\\mu_i&#94;{\\ast} h_i(x&#94;{\\ast}) = 0 \\quad i = 1, \\dots, n\\) である。 教師あり学習 No.39: 教師あり学習教師あり学習について説明し、独自の応用例とその実現可能性・社会的影響について自由に述べよ 手持ちの正解付きデータを使って新たなデータに対する正解を予測するような機械学習の手法 のこと。 代表的な統計手法はとしては回帰と分類がある。前者は降水量の予測、後者は文字画像の認識などに使用される。 No.40: 最小二乗回帰について説明せよ 訓練出力との二乗誤差 $$E_D(\\mathbf{w}) = \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\|\\mathbf{t}_n-\\mathbf{y}\\left(\\mathbf{x}_n, \\mathbf{w}\\right)\\right\\|&#94;2$$ を最小にするモデルパラメータ \\(\\mathbf{w}\\) を求める手法。 ここで、 \\(y\\left(\\mathbf{x}_n, \\mathbf{w}\\right)\\) が \\(\\mathbf{w}\\) に関して線形な線形モデル \\(\\left(y\\left(\\mathbf{x}_n, \\mathbf{w}\\right) = \\mathbf{w}&#94;T\\boldsymbol{\\phi}(\\mathbf{x}_n)\\right)\\) のとき、 $$ \\begin{aligned} \\mathbf{w}_{\\text{ML}}&=\\left(\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi}\\right)&#94;{-1}\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\\\ \\boldsymbol{\\Phi}_{nj}&= \\phi_j(\\mathbf{x}_n) \\end{aligned} $$ と解が解析的に求まるという利点があるが、ノイズを含む訓練標本に過剰に適合する 過適合 という現象が起こるという欠点もある。 No.41: 正則化の役割と具体例について説明せよ モデルの複雑さに罰則を科すことで、不良設定問題を解いたり過学習を防いだりする手法のこと。理論的正当化はオッカムの剃刀にある。 具体的には正則化最小二乗回帰という手法があり、 $$ E_D(\\mathbf{w}) + \\lambda E_{\\mathbf{w}}(\\mathbf{w}) = \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\|\\mathbf{t}_n-\\mathbf{y}\\left(\\mathbf{x}_n, \\mathbf{w}\\right)\\right\\|&#94;2 + \\frac{\\lambda}{2}\\mathbf{w}&#94;T\\mathbf{w} $$ を計算する。最小二乗回帰と同様に解析的に解を求めると、 $$ \\mathbf{w}_{\\text{ML}} = \\left(\\lambda\\mathbf{I} + \\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi}\\right)&#94;{-1}\\boldsymbol{\\Phi}&#94;T\\mathbf{t} $$ となる。 No.42: 交差確認法の役割と具体例について説明せよ 採用した正則化パラメータ \\(\\lambda\\) やガウス幅 \\(h\\) などのハイパーパラメータの精度を判断するために交差確認法を行う。訓練データセットサイズが小さい場合でも適用することができる。 具体的には訓練標本 \\(Z = \\{(x_i,y_i)\\}_{i=1}&#94;n\\) を \\(k\\) 分割して、 \\(\\{Z_i\\}_{i=1}&#94;k\\) を作る。 \\(Z_i\\) 以外を使ってモデルを学習し、残った \\(Z_i\\) を使ってテスト誤差を確認する。これをすべての組み合わせに対して繰り返し、その平均を出力する。 最終的には、この平均が最も小さくなるようなハイパーパラメータを採用することにする。 No.43: マージンについて説明せよ サポートベクターマシンなどにおいて、 分類境界から最も近いデータ点までの距離 をマージンという。 データが線形分離できる場合： マージンの逆数の2乗であるハードマージンを最小化(マージンを最大化)するように分類境界を定める。 そうでない場合： ペナルティを加えたソフトマージンを最小化するように境界を定める。 マージンが大きい分類器は訓練データのずれに対して頑健であり、汎化誤差が小さくなりやすい。 No.44: 教師あり学習におけるカーネルトリックの役割と具体例を述べよ モデルの学習のための式中に現れる \\(\\phi(x)\\) などの特徴量を 直接 計算しなくても、その内積 \\(\\phi(x_i)&#94;T \\phi(x_j)(=K(x_i,x_j))\\) さえわかれば式を計算することができる。 そこで、カーネル関数を用いて式を書き直すと、標本数に対する計算量は悪化するが、 特徴空間が高次元の場合であっても(無限次元であっても)計算量は変わらない。 例えばカーネルトリックを使えば、非線形の基底を用いる分類問題 $$ \\min_\\theta [C\\sum_i \\max (0,1-f_\\theta (x_i) y_i) + \\theta&#94;T K \\theta ] $$ をステップ幅 \\(\\varepsilon (>0)\\) で、更新式を $$ \\theta \\leftarrow \\theta - \\varepsilon \\left( C\\sum_i \\partial_\\theta \\max (0,1-f_\\theta (x_i) y_i) + 2 K \\theta \\right) $$ とする劣勾配法を適用して解くことができる。 探索 No.45: 探索深さ優先探索について説明し、完全性・計算量・最適性に関して述べよ 行き止まりになるまで進み、ゴールが見つからなかったら直前の分岐に戻って別の道を探すアルゴリズム である。探索時のオープンリストをスタックにすることで実現できる。 最大分岐数を \\(b\\) 、最大の深さを \\(m\\) として、 完全性(必ず解が見つかるか): ( \\(m\\) が有限ならば)Yes 時間計算量: \\(O(b&#94;m)\\) 空間計算量: \\(O(bm)\\) 最適性(一番近くの解が見つかるか): No No.46: 幅優先探索について説明し、完全性・計算量・最適性に関して述べよ 分かれ道にきたらそれぞれの道を一歩ずつ進み、ゴールが見つからなかったらそれぞれの道をもう一歩ずつ進むアルゴリズム である。探索時のオープンリストを待ち行列にすることで実現できる。 最大分岐数を \\(b\\) ，一番浅い解の深さを \\(d\\) として， 完全性: Yes 時間計算量: \\(O(b&#94;d)\\) 空間計算量: \\(O(b&#94;d)\\) 最適性: Yes No.47: 反復深化探索について説明し、完全性・計算量・最適性に関して述べよ 深さに制限をつけて深さ優先探索を行い、徐々に深さを深くしていくアルゴリズム である。 最大分岐数を \\(b\\) ，一番浅い解の深さを \\(d\\) として， 完全性: Yes 時間計算量: \\(O(b&#94;d)\\) 空間計算量: \\(O(bd)\\) 最適性: Yes No.48: A*探索について説明せよ A*探索は、グラフ探索アルゴリズムの1つであり、あるノード \\(n\\) を経由する場合のコストを $$ f(n) \\equiv g(n) + h(n) $$ と分割する。ここで \\(g(n)\\) はスタートから \\(n\\) までに要するコストを表し、 \\(h(n)\\) は \\(n\\) からゴールまでに要するコストを表している。最適値については \\(\\ast\\) をつけて表すことにすれば $$ f&#94;{\\ast}(n) \\equiv g&#94;{\\ast}(n) + h&#94;{\\ast}(n) $$ となる。最適経路上の任意のノード \\(n&#94;{\\ast}\\) では \\(f(n&#94;{\\ast}) = f&#94;{\\ast}(n&#94;{\\ast})\\) であることを利用し、 \\(f&#94;{\\ast}(n)\\) の推定値 \\(\\hat{f}(n) \\equiv \\hat{g}(n) + \\hat{h}(n)\\) がより小さくなるノードを優先的に探索する。 ここで、 \\(\\hat{g}(n)\\) は探索済みノードから \\(n\\) に遷移する場合の最小値、 \\(\\hat{h}(n)\\) は \\(h(n)\\) のヒューリスティック推定値であり、8パズル問題などではマンハッタン距離などが使われる。 No.49: ミニマックス探索について説明せよ 想定される最大の損害が最小になるように決断を行う戦略 のことである。 ゲーム木のすべての局面のうち、 自分の手番では評価を最大化するような手 相手の手番では評価を最小化するような手 を選択するとして、最も評価を最大化できるような手を選ぶ探索手法を ミニマックス探索 という。 No.50: アルファ・ベータ探索について説明せよ max 計算の下界を \\(\\alpha\\) min 計算の上界を \\(\\beta\\) として、ミニマックス探索における不要な部分を枝刈りして探索効率を上げた探索手法をアルファ・ベータ法という。 No.51: モンテカルロ木探索について説明せよ 適当な深さ（一定回数以上試行した局面についてはより深く探索するようにする）まで その時点の評価値に基づいて 手を進め、それ以降はランダムにプレイ(ロールアウトを行う)して、勝敗判定を行い、勝率や試行回数などから計算される評価値を得る。 モンテカルロ木探索とは、これを繰り返すことで最適手順を探索する方法であり、UCBスコアを用いれば、無限回の試行で最適手順に収束することが知られている。 強化学習 No.52: 強化学習強化学習について説明し、独自の応用例とその実現可能性・社会的影響について自由に述べよ ある環境内におけるエージェントが、現在の状態を観測し、取るべき行動を決定する問題を扱う機械学習の一種。エージェントは行動を選択することで環境から報酬を得、それを基に方策(policy)を学習する。 具体的には、ロボットの障害物回避などに用いられる。 No.53: マルコフ決定問題および期待割引報酬和最大化について説明せよ 現在の状態 \\(s\\) を観測して行動 \\(a\\) を選択するマルコフ決定過程において、 得られる報酬が最大となるような方策を求める問題 をマルコフ決定問題という。よく用いられる指標として期待割引報酬和があり、次の式で表される。 $$ E\\left( \\sum_{t=0}&#94;\\infty \\gamma&#94;t R(s_t, a_t, s_{t+1}) \\right) $$ ここで \\(\\gamma\\) は0以上1未満の値をとり、割引率と呼ばれる。 \\(\\gamma\\) を大きくするとより長期的な視点で報酬を最大化し、 \\(\\gamma\\) を小さくするとより短期的な視点で報酬を最大化する。 No.54: ベルマン方程式について説明せよ 状態 \\(s\\) で行動 \\(a\\) をとり、その後政策 \\(\\pi\\) に従って行動を続けたときに得られる割引報酬の期待値を表す状態行動価値関数 \\(Q&#94;\\pi(s,a)\\) の定義式 $$ Q&#94;\\pi(s,a) = E \\left(\\sum_{t=0}&#94;\\infty \\gamma&#94;t R(s_t,a_t,s_{t+1}) | s_0=s,a_0=a \\right) $$ から導かれる方程式であり、具体的には「次に得られる報酬」と「その後に得られる報酬和」の期待値である。 $$ Q&#94;\\pi(s, a) = E\\left(R(s, a, s&#94;{\\prime}) + \\gamma Q&#94;\\pi(s&#94;{\\prime}, a&#94;{\\prime})\\right) $$ No.55: 政策反復法の欠点について説明せよ ベルマン方程式ではすべての状態 \\(s\\) 、行動 \\(a\\) に対して \\(Q&#94;\\pi(s,a)\\) を計算する必要があるため、計算量が大きくなってしまう。 特に状態や行動が連続値をとる場合には厳密に計算することができなかったり、ノイズを含む標本に過適合しやすかったりといった問題がある。 No.56: ベルマン二乗残差の最小化について説明せよ 状態行動価値関数 \\(Q&#94;\\pi\\) を何らかのモデルで近似し、ベルマン方程式の両辺の値の差(残差)を2乗したもの $$ [E(R(s, a, s') + \\gamma Q&#94;\\pi(s', a'))-Q&#94;\\pi(s, a)]&#94;2 $$ をベルマン二乗残差という。これを最小化する問題は通常の回帰問題になっている。 No.57: 逆強化学習について説明せよ 報酬関数も未知であるときに、それをデータから学習するような強化学習 を 逆強化学習(Inverse Reinforcement Learning; IRL) という。 報酬関数を \\(R_\\beta (s_t,a_t,s_{t+1})\\) のようにモデル化し、 \"良い\" 行動例をいくつか教えて良い行動に対する報酬が大きくなるようにパラメータ \\(\\beta\\) を学習する。 教師なし学習 No.58: 教師なし学習教師なし学習について説明し、独自の応用例とその実現可能性・社会的影響について自由に述べよ 正解の与えられていないデータのみから意味のある情報を取り出すような機械学習の手法の一つ。クラスタリングという手法がよく用いられる。音声信号の分離などに用いられる。 No.59: 主成分分析について説明せよ 射影誤差が最小となるような射影によって、高次元データを低次元データに圧縮する変換を 主成分分析(Principal component analysis; PCA) という。 \\(d\\) 次元のデータを \\(m\\) 次元に射影することを考える( \\(1 \\leq m \\ll d\\) )。 すると、射影誤差が最小となる射影 \\(T\\) が\"良い\"射影だと考えることができる。つまり、 $$ T_{PCA} = \\textrm{argmin}_{T \\in \\mathbb{R}&#94;{m \\times d}} \\left[ \\sum_i \\| T&#94;TTx_i-x_i\\|&#94;2\\right] \\quad \\textrm{subject to } T&#94;TT=I_m $$ が最も良い射影だと言える。このとき、 $$ \\sum_i \\| T&#94;TTx_i-x_i\\|&#94;2 = -\\textrm{tr} (TCT&#94;T) - \\textrm{tr} (C) \\quad (C = \\sum_i x_i x_i&#94;T) $$ となるので、 $$ T_{PCA} = \\textrm{argmax}_{T \\in \\mathbb{R}&#94;{m \\times d}} \\ \\textrm{tr}(TCT&#94;T) \\quad \\textrm{subject to } T&#94;TT=I_m $$ という関係が導ける。つまり、 \\(C\\) の固有ベクトルを正規化して固有値の大きいものから \\(\\xi_1,\\dots, \\xi_d\\) と選べば $$ T_{PCA} = (\\xi_1,\\dots, \\xi_m)&#94;T $$ が求められる。 No.60: 固有値問題について説明せよ 行列 \\(C\\) の固有値 \\(\\lambda_i\\) および固有ベクトル \\(\\xi_i\\) を求める問題を固有値問題という。これらは固有方程式 $$ C\\xi = \\lambda \\xi $$ の解として与えられる。固有ベクトルはすべて互いに直交し、内積はゼロになる。 No.61: ｋ-平均クラスタリングについて説明せよ クラスタ中心 \\(\\{\\mu_y\\}_{y=1}&#94;c\\) を適当に初期化した後、 各データ点が属するクラスの割当て $$ \\mu_y \\leftarrow \\dfrac{1}{n_y} \\sum_{i:y_i=y} x_i \\quad (i=1,\\dots,c) $$ 各クラスのクラスタ中心の更新 $$ y_i \\leftarrow \\textrm{argmin}_{y \\in \\{1,\\dots,c\\}} \\|x_i-\\mu_y\\|&#94;2 \\quad (i=1,\\dots c) $$ を交互に行うことで、ラベルなしのデータ点にクラスラベルをつけるアルゴリズム。 これはクラスタ内散布和の最小化問題の局所最適解を求めるアルゴリズムになっていて、k-平均クラスタリングによって得られたクラスタは凸になっている。 No.62: ｋ-平均クラスタリングにおけるカーネルトリックについて説明せよ 非線形な基底関数 \\(\\phi\\) によってデータ点 \\(x_i\\) を \\(\\phi(x_i)\\) に変換することで、非線形なクラスタの分類を行うことが可能になる。また、この \\(\\phi\\) の内積などをカーネル関数に置き換えることで、特徴量を直接計算することなくk-平均クラスタリングを適用できる。 自然言語処理 No.63: 自然言語処理について独自の応用例とその実現可能性・社会的影響について自由に述べよ No.64: 系列ラベリングが適用できる具体的な応用例を挙げ、定式化を与えよ 系列ラベリングの応用例として 形態素解析 固有名認識 DNA解析 音声解析 動作認識 などがある。このとき、 入力は記号列 で 出力はラベル列 である。 No.65: 隠れマルコフモデルの定義を与え、それを用いて品詞タグ付けを行う方法を説明せよ 隠れマルコフモデル(以下HMMとする)は、 状態集合 \\(S\\) 出力記号集合 \\(\\Sigma\\) 初期状態分布 \\(\\pi_i\\) 状態遷移確率 \\(a_{ij}\\) 出力確率 \\(b_{io}\\) の組で表現される。品詞タグ付けの例では、状態集合は品詞の集合、出力記号集合は単語の集合となっている。 パラメータ \\(\\pi_i, a_{ij}, b_{io}\\) が与えられたとき、生成確率 $$ p(s_{1:T}, o_{1:T}) = \\pi \\Pi_{t=T-1} a_{s_t,s_{t+1}} b_{s_t,o_t} $$ が最大となるような状態系列をビタビアルゴリズム等で求めることで品詞タグ付けを行う。 No.66: トレリス構造について説明し、品詞タグ付けとの関係を説明せよ トレリス構造は、 生成確率が最も高くなるような状態系列を求めるための枠組み である。縦軸は各状態、横軸は時刻に対応しており、トレリス上のパスは状態系列を表す。品詞タグ付けでは、縦軸は品詞、横軸は単語列となっている。 No.67: 隠れマルコフモデルのビタビアルゴリズムを説明せよ ビタビアルゴリズムとは、（観測データ系列の）生成確率が最大となるような状態系列を動的計画法によって求めるアルゴリズムである。時刻 \\(t\\) で状態 \\(s_t=k\\) にいたる状態系列の最大確率を $$ q_t(k) \\equiv \\max_{s_{1:t-1}} p(s_{1:t-1}, o_{1:t}, s_t=k) $$ と定義すると、 $$ q_{t+1}(k) = \\max_{i} [ q_t(i) a_{i, k} ] b_{k, o_{t+1}} $$ と書けるので、動的計画法によって \\(q_t(k)\\) を順に求めることができる。 状態数を \\(K\\) 、系列の長さを \\(T\\) とすると、素朴に計算すると計算量 \\(O(K&#94;T)\\) かかるが、ビタビアルゴリズムでは \\(O(TK&#94;2)\\) で済む。これは各系列位置で各状態への最適経路は一つ前の系列位置での各状態への最適経路とそこからの遷移確率を用いて \\(O(K)\\) で計算でき、これが状態数と系列の長さ分だけあるので、合計で \\(O(TK&#94;2)\\) の計算量になるからである。 No.68: 隠れマルコフモデルのパラメータの教師付き学習方法を説明せよ 訓練データの状態系列が既知であるときには人手で正解を付与したデータであるタグ付きコーパスなどから教師つき学習によってパラメータを推定することができる。パラメータの推定方法の1つに最尤推定法がある。最尤推定法では、学習データの尤度(生成確率)を最大化するようにパラメータを決定する。 HMMのパラメータ \\(\\pi_i,a_{i,j},b_{i,o}\\) を求めるためには $$ \\begin{align} p(o_{1:T},s_{1:T})&=p(s_1) \\prod_{t=1}&#94;T p(s_{t+1}|s_t)p(o_t|s_t)=\\pi_{s_1} \\prod_{t=1}&#94;T a_{s_t,s_{t+1}}b_{s_t,o_t} \\\\ &\\textrm{s.t. } \\sum_{i \\in S} \\pi_i = 1, \\sum_{j \\in S} a_{i,j} = 1, \\sum_{a \\in \\Sigma} b_{i,o} = 1 \\end{align} $$ を最大化すれば良いので、これを計算すると、結果は $$ \\begin{align} \\pi_i &= \\dfrac{C(s_1=i)}{\\sum_{i \\in S} C(s_1=i)} \\\\ a_{i,j} &= \\dfrac{C(i,j)}{\\sum_{j \\in S} C(i,j)} \\\\ b_{i,o} &= \\dfrac{C(i,o)}{\\sum_{o \\in \\Sigma} C(i,o)} \\end{align} $$ となる。 No.69: 前向き・後向き確率の定義を与え、効率的な計算方法を説明せよ 時刻 \\(t\\) ・状態 \\(i\\) にいたる全ての系列の確率の和を前向き確率 時刻 \\(t\\) ・状態 \\(i\\) から最後に至る全ての系列の確率の和を後ろ向き確率 という。それぞれ $$ \\begin{align} \\alpha_t(i) &\\equiv p(o_{1:t}, s_t=i | \\theta&#94;{old}) \\\\ \\beta_t(i) &\\equiv p(o_{t+1:T} | s_t=i, \\theta&#94;{old}) \\end{align} $$ で表される。これは動的計画法で再帰的に計算できて $$ \\begin{align} \\alpha_{t+1}(i) &= \\sum_{j \\in S} [a_{j,i} \\alpha_t(j)] b_{i, o_{t+1}} \\\\ \\beta_{t-1}(i) &= \\sum_{j \\in S} [a_{i,j} b_{j, o_t} \\beta_t(j)] \\end{align} $$ となる。 No.70: Baum-Welch アルゴリズムについて説明せよ 訓練データの状態列が未知であるときに、状態および状態遷移の期待値とパラメータを交互に推定していくアルゴリズムである。詳しく言えば、「現在のパラメータ \\(\\theta&#94;{old}\\) によって状態の期待値を計算する」「状態の期待値を使ってパラメータを更新する」を収束するまで繰り返す。ここで、状態の期待値は $$ \\begin{align} \\gamma_t(i) &\\equiv p(s_t=i| o_{1:T},\\theta&#94;{old}) \\\\ \\xi_t(i,j) &\\equiv p(s_t=i, s_{t+1}=j| o_{1:T},\\theta&#94;{old}) \\end{align} $$ と定義される。これらは前向き確率・後ろ向き確率を用いて効率的に計算できる。 No.71: ビタビアルゴリズムと前向き・後向きアルゴリズムの関係について説明せよ ビタビアルゴリズムは 「積の最大値」 前向き・後ろ向きアルゴリズムは 「積の和」 を順に求めている点で類似している。両方とも分配法則を利用しているので、半環なら同じアルゴリズムが適用できる。 No.72: ログ線形モデルによる品詞タグ付け方法について説明せよ ログ線形モデルでは、特徴ベクトルを \\(\\boldsymbol{\\phi}\\) として $$ p(y|x) \\propto exp(\\mathbf{w}&#94;T \\boldsymbol{\\phi}(\\mathbf{x}, y)) $$ という生成分布を考えて、パラメータ \\(\\mathbf{w}\\) を最尤推定する。ここで \\(\\mathbf{x}\\) はデータであり、 \\(y\\) はそのラベルである。 品詞タグ付けの場面では、 \\(\\mathbf{x}\\) は入力された単語列、 \\(y\\) はその品詞列(隠れ状態)であり、 \\(\\mathbf{w}&#94;T \\boldsymbol{\\phi}(\\mathbf{x}, y)\\) を最大化するような \\(y\\) を求める問題となる。 No.73: 条件付き確率場の定義を与え、隠れマルコフモデルに対する優位性を説明せよ 条件付き確率場とは、ログ線形モデルによる構造予測において用いられる枠組みである。 単純なログ線形モデルでは \\(\\mathbf{w}&#94;T \\phi(\\mathbf{x}, y)\\) を最大化するような \\(y\\) を求めるのが困難であるが、特徴ベクトルを状態・遷移に分解できると仮定することでHMMで行うような動的計画法のアルゴリズムが利用できる。 No.74: 条件付き確率場のビタビアルゴリズムを説明せよ HMMのビタビアルゴリズムとほぼ同様である。 No.75: 条件付き確率場のパラメータ推定アルゴリズムを説明せよ HMMのアルゴリズムとほぼ同様である。 No.76: CKY法について具体例（曖昧性のある文脈自由文法）を挙げて説明せよ Chomsky標準形(CNF)のCFGの構文解析アルゴリズム。 No.77: 確率文脈自由文法(PCFG)の定義を与え、それを用いて構文解析を行う方法を説明せよ CFG(文脈自由文法)に生成規則が適用される確率を導入したものをPCFGという。 入力された単語列に対して、それを生成するような構文木のうち確率が最大となるものを単語列に対応する構文木とする。確率を導入することで曖昧性が解消される。 No.78: 確率文脈自由文法(PCFG)による構文解析のビタビアルゴリズムを説明せよ 通常の(CFGにおける)のCKY法ではCKY表の各セルに 「生成される非終端記号」 を書き込んでいくが、PCFGにおけるCKY法では、各セルに 「非終端記号とそれを生成する確率の最大値」 を書き込んでいく。これによって、効率的に生成確率を求めることができる。 No.79: 確率文脈自由文法(PCFG)の学習方法について説明せよ 構文木のデータセット(ツリーバンク)を利用して学習を行う。ツリーバンクにおける品詞の出現頻度に基づいて生成規則の確率を推定する。 No.80: 確率文脈自由文法(PCFG)による自然言語構文解析の精度が低い原因を具体例を挙げて説明し、構文解析精度を上げる方法を議論せよ 同じ品詞列でも単語によって構文木の形が変わるから。例えば We applied the algorithm to parsing. と We selected the approach to parsing. がその一例である。そのため、品詞だけでなく単語の意味や熟語なども使って構文解析を行う必要がある。 No.81: 確率文脈自由文法(PCFG)の応用例(自然言語の構文解析以外)を挙げ、その実現可能性・社会的影響について自由に述べよ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-glossary.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-glossary.html"},{"title":"進化生態情報学 第7回","text":"講師： 岩崎渉 参考書： 分子系統学への統計的アプローチ -計算分子進化学-（共立出版、2009） 参考書： 進化ー分子・個体・生態系（メディカルサイエンスインターナショナル、2009） 参考書： 分子進化と分子系統学（培風館、2006） 参考書： Brock Biology of Microorganisms 14th Edition（Benjamin Cummings、2014） 参考書： ディジタル画像処理 改訂新版（CG-ARTS協会、2015） In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt from OpenCV.plot_img import cv2plot 生物学と画像処理 ※ 数字は参考書： ディジタル画像処理 改訂新版（CG-ARTS協会、2015） の章に基づいている。 2. ディジタル画像の撮影 2-4-1. グレースケール画像 2-4-2. 標本化と量子化 3. 画像の性質と色空間 3-1-1. 画像の統計量 3-1-2. コントラストとシャープネス 4. 画素ごとの濃淡変換 4-1. 明るさ・コントラストの変換 4-3-2. 疑似カラー 4-4-1. 画像間演算 5. 領域に基づく濃淡変換（空間変換） 5-1. 空間フィルタリング 5-2. 平滑化 5-3. エッジ抽出 5-4. 鮮鋭化 6. 周波数領域におけるフィルタリング 6-1. 画像のフーリエ変換 6-2. 周波数フィルタリング 9. 2値画像処理 9-1. 2値化 9-2-1. 連結性 9-2-2. 輪郭追跡 9-2-4. 収縮・膨張処理 9-2-6. ラベリング 9-3. 線画像のベクトル化 10. 領域処理 10-2-3. ミーンシフトを用いた領域分割処理 11. パターン・図形・特徴の検出とマッチング 11-3-1. コーナー検出 11-3-2. DoG画像を用いた特徴点とスケールの検出 11-4-1. スケールと回転に不変な特徴記述(SIFT) 13. 動画像処理 13-1. 差分画像を用いた移動物体検出 13-2. オプティカルフロー 16. 画像符号化 16-3-1. ハフマン符号化 16-5-1. ランレングス符号化 In [2]: img = cv2 . imread ( \"Lenna.png\" ) fig , ax = plt . subplots ( figsize = ( 6 , 6 )) ax = cv2plot ( img , ax = ax ) ax . set_title ( \"Sample Image: Lenna\" ) plt . show () 2. ディジタル画像の撮影 2-4-1. グレースケール画像 元々グレースケールの画像 カラー画像データはより多くの情報を含むが、カラー情報が必要ない事もある。 （生物分野だと必要ない事が多いらしい。） 単一チャネルでのアルゴリズムが既に確立している場合 計算時間を短縮したい場合 特定チャンネルのデータに興味がある場合（蛍光など） RGBの3チャネルの情報をまとめてグレースケール変換する手法 単純：(R+G+B)/2 人間の光受容を考慮：(2R+4G+B)/7 In [3]: opencv_ch = [ \"red\" , \"green\" , \"blue\" ] In [4]: fig , axes = plt . subplots ( ncols = 3 , nrows = 1 , figsize = ( 18 , 6 )) for i ,( ax , ch ) in enumerate ( zip ( axes , opencv_ch )): ax . imshow ( img [:,:, i ], cmap = 'gray' ) ax . set_title ( f \" { ch } channel.\" , fontsize = 20 , color = ch ) plt . tight_layout () plt . show () In [5]: cv2_gray = cv2 . cvtColor ( img , cv2 . COLOR_BGR2GRAY ) pure_gray = np . mean ( img , axis = 2 , dtype = np . int ) cie_gray = np . average ( img , axis = 2 , weights = [ 0.298912 , 0.586611 , 0.114478 ]) . astype ( np . int ) In [6]: grays = [ cv2_gray , pure_gray , cie_gray ] titles = [ \"OpenCV default\" , \"Average\" , \"Weighted Average\" ] In [7]: fig , axes = plt . subplots ( ncols = 3 , nrows = 1 , figsize = ( 18 , 6 )) for i , ax in enumerate ( axes ): ax . imshow ( grays [ i ], cmap = 'gray' ) ax . set_title ( titles [ i ], fontsize = 20 ) plt . tight_layout () plt . show () 2-4-2. 標本化と量子化 標本化(sampling) ：アナログ信号から、離散的な位置におけるアナログ値を取り出す処理。 量子化(quantization) ：標本値を有限分解能の数値に変換する処理。(ex.8ビット量子化→(0-255),1ビット量子化→2値画像) 標本化により画像は一般的に横 $M$ 個・縦 $N$ 個の 画素(pixel) で表現される。 原点 $(0,0)$ は \"左上\" である事が多い。 3次元ではさらに奥行き方向(voxel)にも標本化を行う。 動画ではさらに時間軸方向(temporal)にも標本化を行う。 画像の標本化では、2次元的な像(アナログ画像)の光強度に対して、縦横に等間隔の格子状に配置した 標本点(sampling point) における光強度を電圧値として取り出す。 標本点 の間隔を 標本化間隔(sampling interval) と呼び、 標本点 におけるアナログ値を 標本値(sampling value) と呼ぶ。 標本化間隔 が周波数成分の半分よりも大きいと、 エリアシングノイズ(aliasing noise) が発生する事がある。 3. 画像の性質と色空間 3-1-1. 画像の統計量 横軸に画素値、縦軸にそれぞれの画素値の頻度を取る 濃淡ヒストグラム（単にヒストグラム） が一般的。 その他、 平均値 ・ 分散 ・ 中央値(median) ・ 最頻値(mode) など。 ヒストグラムが詰まっている → コントラストが低い In [8]: fig , ( axgray , ax3ch ) = plt . subplots ( ncols = 2 , nrows = 1 , figsize = ( 12 , 4 ), sharey = True , sharex = True ) axgray . hist ( np . ravel ( cv2_gray ), bins = 256 , color = \"black\" , density = True ) for i , ch in enumerate ( opencv_ch ): ax3ch . hist ( np . ravel ( img [:,:, i ]), bins = 256 , color = ch , density = True , alpha = 0.3 ) axgray . set_ylabel ( \"Frequency\" , fontsize = 16 ) axgray . set_title ( \"Grayscale Image.\" ), ax3ch . set_title ( \"RGB 3ch Image.\" ) plt . show () 3-1-2. コントラストとシャープネス コントラスト は、画像のヒストグラムの分布の広がりを表す。画素値の最大値を $I_{\\max}$、最小値を $I_{\\min}$ とするとき、以下のような求め方がある。 $$ \\begin{aligned} C_1 &= I_{\\max} - I_{\\min}\\\\ C_2 &= \\left(I_{\\max} - I_{\\min}\\right) / \\left(I_{\\max} + I_{\\min}\\right)\\\\ C_3 &= I_{\\max} / I_{\\min} \\end{aligned} $$ どの求め方も外れ値に対して敏感である。そのため、頻度が一定値よりも小さな画素値を考慮しない、などの工夫が必要になる。 $C_2$ を使うと、$I_{\\min}=0$ のとき、$\\forall I_{\\max}C_2=1$ となるので注意が必要である。 シャープネス（鮮鋭度;sharpness） は、画像を見た時に感じる鮮鋭感を表す尺度である 鮮鋭度が 高い 画像：エッジ付近の画素値変化が急激で、画像中の細やかな部分まで鮮明に観察する事ができる。 鮮鋭度が 低い 画像：ピントが合ってないような印象を受け、エッジ付近の画素値変化が緩やかで、画像中の細やかな部分を読み取りにくい。 4. 画素ごとの濃淡変換 4-1. 明るさ・コントラストの変換 ディジタル画像の各画素は、その濃淡を表す値（画素値）を持っている。そこで、画像の濃淡を変化させるためには、 「入力画像のそれぞれの画素値」 に対し、 「出力画像の画素値」 をどのように対応づけるか指定すれば良い。 そのような対応関係を与える関数のことを 階調変換関数(gray-level transformation function) 、また、それをグラフで表したものを トーンカーブ(tone curve) と呼ぶ。 In [9]: pixels = np . arange ( 0 , 2 ** 8 , 1 ) colors = [ \"black\" , \"green\" , \"red\" , \"blue\" ] gammas = [ 1 , 1.5 , 2 , 3 ] In [10]: gamma_transform = lambda x , gamma : 255 * ( x / 255 ) ** gamma In [11]: plt . figure ( figsize = ( 6 , 6 )) for gamma , color in zip ( gammas , colors ): plt . plot ( pixels , gamma_transform ( pixels , 1 / gamma ), color = color , linestyle = \":\" , label = f \"$\\gamma= { 1 / gamma : .2f } $\" ) plt . plot ( pixels , gamma_transform ( pixels , gamma ), color = color , label = f \"$\\gamma= { gamma : .1f } $\" ) plt . legend (), plt . title ( \"Gamma tone Curve\" ) plt . show () 有名な トーンカーブ に、上図の ガンマ補正（ガンマ変換） がある。これは、以下の形で表される。 $$y = 255\\left(\\frac{x}{255}\\right)&#94;{\\gamma}$$ ここで、$y=x$ よりも下側（$\\gamma > 1$）だと出力画像が入力画像に比べて明るくなり、上側（$\\gamma < 1$）はその逆が起こる事がわかる。 また、コントラストが低い画像は S字トーンカーブ を用いて変換される事がある。これは、binの密度が高い部分を引き延ばす事で、コントラストを上げている。（ ヒストグラム平坦化(histogram equalization) と似ている。） 4-3-2. 疑似カラー R,G,B各チャンネルに対して 適当に異なるトーンカーブを用いる ことで、グレースケール画像に対して疑似的な色（ 疑似カラー(pseudo color) ）をつける事ができる。 グレースケール画像の解釈を容易にする。（区別のつきにくい微妙な濃淡の違いを 視覚的に 表現できる。） 正解画像データの作成時に利用する。 診断補助に用いる。 In [12]: def apply_pseudo_color ( x ): r = 255 if x >= 192 else 0 if x <= 128 else 4 * ( x - 128 ) g = 255 if 64 <= x <= 192 else 4 * x if x <= 64 else 4 * ( 255 - x ) b = 255 if x <= 64 else 0 if x >= 128 else 4 * ( 128 - x ) return ( r , g , b ) In [13]: R , G , B = np . vectorize ( apply_pseudo_color )( pixels ) In [14]: plt . plot ( R , color = \"red\" ) plt . plot ( G , color = \"green\" ) plt . plot ( B , color = \"blue\" ) plt . xlabel ( \"Input pixel\" , fontsize = 16 ), plt . ylabel ( \"Output pixel\" , fontsize = 16 ), plt . title ( \"Simple Pseudo Color Transformer.\" , fontsize = 14 ) plt . xticks ([ 0 , 255 ]), plt . yticks ([ 0 , 255 ]) plt . show () In [15]: pseudo_img = np . stack ( np . vectorize ( apply_pseudo_color )( cv2_gray ), axis =- 1 ) In [16]: fig , axes = plt . subplots ( ncols = 2 , nrows = 1 , figsize = ( 12 , 6 )) axes [ 0 ] . imshow ( cv2_gray , cmap = 'gray' ), axes [ 0 ] . set_title ( \"Grayscale\" , fontsize = 16 ) axes [ 1 ] . imshow ( pseudo_img ), axes [ 1 ] . set_title ( \"Pseudo Color\" , fontsize = 16 ) plt . tight_layout () plt . show () 4-4-1. 画像間演算 複数の入力画像（$f_1,f_2$）の同じ画素に対して AND , OR などの 論理演算(logic operation) や 四則演算(arithmetic operation) などの演算を用いて出力画像（$g$）を生成する。例としては、 アルファブレンディング(alpha blending) ： $$g = \\alpha f_1 + \\left(1-\\alpha\\right)f_2$$ ディゾルブ(dissolve) ・ オーバーラップ(overlap) ：$\\alpha$ の値を画素の位置で変化させる。 エンボス(emboss) ：濃淡を反転した画像（$\\bar{f_1}$）を平行移動させ（$\\bar{f_1}_{x+dx}$）元の画像と足し合わせる。 $$g = f_1 + \\bar{f_1}_{x+dx} - 128$$ In [17]: def emboss ( f1 , dx = 0.01 , constant_values = 0 ): \"\"\" @params f1: shape=(H,W) must be the grayscale image. @params dx: (int,float) distance of translation. \"\"\" H , W = f1 . shape if dx < 1 : dx = min ( H , W ) * dx dx = int ( dx ) f1_inv = 255 - f1 f2 = np . pad ( f1_inv , ( 0 , dx ), 'constant' , constant_values = constant_values )[ - H :, - W :] g = np . clip ( f1 + f2 - 128 , 0 , 255 ) . astype ( int ) return g In [18]: embossed_img = emboss ( cv2_gray , dx = 2 ) In [19]: fig , axes = plt . subplots ( ncols = 2 , nrows = 1 , figsize = ( 12 , 6 )) axes [ 0 ] . imshow ( cv2_gray , cmap = 'gray' ), axes [ 0 ] . set_title ( \"Grayscale\" , fontsize = 16 ) axes [ 1 ] . imshow ( embossed_img , cmap = 'gray' ), axes [ 1 ] . set_title ( \"Embossed\" , fontsize = 16 ) plt . tight_layout () plt . show () 5. 領域に基づく濃淡変換（空間変換） 5-1. 空間フィルタリング 「画素ごと(pixel-to-pixel operation)に」 画素値を変換するのではなく、 「周囲の画素の画素値も利用して(area-to-pixel operation)」 画素値を変換する。 大別すると、 「線形フィルタ(linear filter)」 と 「非線型フィルタ(nonlinear filter)」 がある。 線形フィルタは以下で表される。 $$g(i,j) = \\sum_{n=-W}&#94;W\\sum_{m=-W}&#94;Wf(i+m,j+n)h(m,n)$$ 非線型フィルタは、上記以外で表されるもの全てである。 In [20]: def apply_filter ( img , f ): \"\"\" @params img: (ndarray) Grayscale Image, shape=(W,H) @params f : (ndarray) Filter: shape=(FW,FH) @params out: (ndarray) Output Image, shape=(OW,OH) \"\"\" W , H = img . shape FW , FH = f . shape OW , OH = ( W - FW + 1 , H - FH + 1 ) out = np . zeros ( shape = ( OW , OH )) for i in range ( OW ): for j in range ( OH ): out [ i , j ] = np . sum ( f * img [ i : i + FW , j : j + FH ]) out = np . clip ( out , 0 , 255 ) . astype ( int ) return out 5-2. 平滑化 平滑化(smoothing) を行うと、画像の濃淡変化を滑らかにする事ができる。したがって、画像に含まれるノイズなどの不要な濃淡変化を軽減するために用いられる。 In [21]: def mk_average_filter ( filter_size ): \"\"\"filter_size: (int)\"\"\" if filter_size <= 0 : return np . ones ( shape = ( 1 , 1 )) return np . full ( shape = ( filter_size , filter_size ), fill_value = 1 / filter_size ** 2 ) In [22]: filter_sizes = [ 0 , 3 , 5 ] In [23]: fig , axes = plt . subplots ( ncols = 3 , nrows = 1 , figsize = ( 18 , 6 )) for ax , fs in zip ( axes , filter_sizes ): f = mk_average_filter ( fs ) ax . imshow ( apply_filter ( cv2_gray , f ), cmap = 'gray' ) ax . set_title ( f \"Filter Size: { fs } \" , fontsize = 20 ) plt . tight_layout () plt . show () ※ だんだんとボケているのがわかる。 他にも、 加重平均フィルタ(weighted average filter) ガウシアンフィルタ(gaussian filter) メディアンフィルタ(median filter) 特定方向の平滑化 などがある。 5-3. エッジ抽出 エッジ抽出(edge extraction) は、画像中で明るさが急激に変化するエッジ部分を取り出す事であり、 微分フィルタ ：連続関数の場合は $$f&#94;{\\prime}(x) = \\lim_{h\\rightarrow0}\\frac{f(x+h)-f(x)}{h}$$ で微分が計算できるが、デジタル画像の場合には、 注目画素とその隣接画素との差分 で置き換えられる。 プリューウィットフィルタ(Prewitt filter) ： 微分フィルタでは、エッジ部分を抽出すると同時に 「画像に含まれるノイズを強調する」 傾向がある。そこで、 ノイズを抑えながらエッジを強調する ために、 「 ある方向への微分」 と 「それに直交する方向に関する平滑化」 を施すことを考えたフィルタ。 ソーベルフィルタ(Sobel filter) ： プリューウィットフィルタ(Prewitt filter)における「縦方向への平滑化」のときに、中央に重みを付けた平均化を行う方法。 2次微分フィルタ(second derivative filter) : 上記の微分フィルタの概念を拡張し、微分を2回繰り返したフィルタ。 ラプラシアンフィルタ(Laplacian filter) ： 2次微分の値を用いてラプラシアンを $$\\frac{\\partial&#94;2}{\\partial x&#94;2}f(x,y) + \\frac{\\partial&#94;2}{\\partial y&#94;2}f(x,y)$$ 求める事ができるので、これを用いて 方向に依存しないエッジを直接得る。 LoGフィルタ ： 一般に、ラプラシアンは微分を繰り返すため、ノイズを強調してしまう。そこで、まずガウシアンフィルタを適用してある程度の平滑化を行ったのち、ラプラシアンフィルタを施す事がよく行われる。2次元ガウス分布のラプラシアンは $$h_{log}(x,y) = \\frac{x&#94;2+y&#94;2-2\\sigma&#94;2}{2\\pi\\sigma&#94;6}\\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)$$ で得られるので、この $h_{log}(x,y)$ を係数とするフィルタを用意すれば良い。 In [24]: prewitt_filter_h = 1 / 6 * np . array ([[ - 1 , 0 , 1 ],[ - 1 , 0 , 1 ],[ - 1 , 0 , 1 ]]) prewitt_filter_v = np . rot90 ( prewitt_filter_h ) sobel_filter_h = 1 / 8 * np . array ([[ - 1 , 0 , 1 ],[ - 2 , 0 , 2 ],[ - 1 , 0 , 1 ]]) sobel_filter_v = np . rot90 ( sobel_filter_h ) In [25]: filters = [ [ prewitt_filter_h , prewitt_filter_v ], [ sobel_filter_h , sobel_filter_v ] ] titles = [ [ \"Prewitt filter (Vertical)\" , \"Prewitt filter (Horizontal)\" ], [ \"Sobel filterr (Vertical)\" , \"Sobel filter (Horizontal)\" ], ] In [26]: fig , axes = plt . subplots ( ncols = 2 , nrows = 2 , figsize = ( 8 , 8 )) for i , ax_cols in enumerate ( axes ): for j , ax in enumerate ( ax_cols ): ax . imshow ( apply_filter ( cv2_gray , filters [ i ][ j ]), cmap = 'gray' ) ax . set_title ( f \"Filter: { titles [ i ][ j ] } \" ) plt . tight_layout () plt . show () In [27]: derivative_filter = np . array ([[ 0 , 0 , 0 ],[ - 1 / 2 , 0 , 1 / 2 ],[ 0 , 0 , 0 ]]) second_derivative_filter = np . array ([[ 0 , 0 , 0 ],[ 1 , - 2 , 1 ],[ 0 , 0 , 0 ]]) laplacian_filter = np . array ([[ 0 , 1 , 0 ],[ 1 , - 4 , 1 ],[ 0 , 1 , 0 ]]) In [28]: filters = [ derivative_filter , second_derivative_filter , laplacian_filter ] titles = [ \"Derivative Filter (Horizontal)\" , \"Second Derivative Filter (Horizontal)\" , \"Laplacian Filter\" ] In [29]: fig , axes = plt . subplots ( ncols = 3 , nrows = 1 , figsize = ( 18 , 6 )) for i , ax in enumerate ( axes ): ax . imshow ( apply_filter ( cv2_gray , filters [ i ]), cmap = 'gray' ) ax . set_title ( f \"Filter: { titles [ i ] } \" , fontsize = 20 ) plt . tight_layout () plt . show () 5-4. 鮮鋭化 上のフィルタは、画像のエッジ部分だけを取り出すようなものであった。ここでは、 元の画像の濃淡を残したまま エッジを強調する 、画像の 鮮鋭化(sharpening)処理 を考える。 入力画像に対して平滑化処理を施し、その結果を元の画像から引く → 元の画像のエッジ部分が取り出されたような画像が得られる。 それを元の入力画像と足し合わせることにより、画像のエッジが強調された（鮮鋭化された）画像が得られる。 このような処理を アンシャープマスキング(unsharp masking) と呼ぶ。 なお、この二段階の処理は上記のエッジ抽出のフィルター同様一つのフィルタ（ 鮮鋭化フィルタ(sharping filter) ）で表現する事ができる。 In [30]: def mk_sharpening_filter ( k , filter_size = 3 ): f = np . full ( shape = ( 3 , 3 ), fill_value =- k / 9 ) f [ 1 ][ 1 ] = 1 + 8 / 9 * k return f In [31]: ks = [ 4 , 9 , 18 ] In [32]: fig , axes = plt . subplots ( ncols = 3 , nrows = 1 , figsize = ( 18 , 6 )) for ax , k in zip ( axes , ks ): f = mk_sharpening_filter ( k ) ax . imshow ( apply_filter ( cv2_gray , f ), cmap = 'gray' ) ax . set_title ( f \"Filter Size: { fs } \" , fontsize = 20 ) plt . tight_layout () plt . show () 6. 周波数領域におけるフィルタリング 画像のフーリエ変換 2次元画像は、2次元空間で定義される関数 $f(x,y)$ として表されるので、 2次元フーリエ変換 を行う事で、 $x,y$ で表される 空間領域(spatial domain) $u,v$ で表される 周波数領域(frequency domain) を関連づける事ができる。 $$ \\begin{cases} \\begin{aligned} F(u,v) &= \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty} f(x,y)\\exp\\left\\{-j2\\pi\\left(ux+vy\\right)\\right\\}dxdy & \\left(\\text{Fourie transform}\\right)\\\\ f(x,y) &= \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty} F(u,v)\\exp\\left\\{-j2\\pi\\left(ux+vy\\right)\\right\\}dudv & \\left(\\text{inverse Fourie transform}\\right)\\\\ \\end{aligned} \\end{cases}\\\\ j = \\sqrt{-1} $$ なお、上は 連続関数のフーリエ変換 であるが、ディ 離散的フーリエ変換(discrete Fourier transform) ジタル画像を変換する場合には、 離散的逆フーリエ変換(inverse discrete Fourier transform) を用いる。 さらに、その計算を高速に実行する 高速フーリエ変換(Fast Fourier transform; FFT) があり、実用的によく用いられている。 なお、お気持ち的には、 「2次元の様々な周波数の三角関数（ex.$z = \\sin(ax)\\cdot\\sin(by)$）」 が入力にどの程度含まれているかを周波数ごとに分解する事で調べる。 周波数フィルタリング 画像はフーリエ変換により、 周波数領域における別の形で表現する事ができる。 フーリエ変換の結果は、 画像に含まれるそれぞれの周波数成分を示している。 フーリエ変換の 各周波数成分の大きさを各成分ごとに変える 事により、元の画像の性質を変化させる事ができる。 このような処理を 周波数フィルタリング(frequency filtering) と呼ぶ。 元の画像をフーリエ変換したものを $F(u,v)$ フィルタリングの出力を $G(u,v)$ 周波数フィルタを $H(u,v)$ とするとき、周波数フィルタリングは $$G(u,v) = F(u,v)H(u,v)$$ として表される。なお、周波数フィルタリングでは、 入力の各周波数成分 $F(u,v)$ が、周波数ごとにフィルタ $H(u,v)$ と掛け算され、出力 $G(u,v)$ となる。 周波数フィルタの具体例として、 「画像に含まれる空間周波数成分のうち、ある特定の範囲の周波数成分を残す」 ようなタイプのフィルタとして、 ローパスフィルタ(lowpass filter) ：低周波数成分のみ残す。 ハイパスフィルタ(highpass filter) ：高周波数成分のみ残す。 バンドパスフィルタ(bandpass filter) ：ある中間的な周波数の範囲を残す。 ガウス分布型のローパスフィルタ ：空間領域のガウシアンフィルタに対応。 などがある。一方、上記のハイパスフィルタでは、画像の直流成分を含む低周波数成分を除去してしまうため、画像の平均的な明るさが保たれないという問題がある。 そこで、画像の低周波数成分は そのまま保ち つつ、高周波数成分を 強調 するフィルタとして 高域強調フィルタ(high-emphasis filter) がある。 9. 2値画像処理 9-1. 2値化 目的に応じて具体的な手法は様々。 判別分析法(discriminant analysis method)（大津の2値化） が有名。 変数 意味 $$t$$ しきい値 $$m_1,\\sigma_1&#94;2,\\omega_1$$ 黒画素クラスの平均・分散・画素数 $$m_2,\\sigma_2&#94;2,\\omega_2$$ 白画素クラスの平均・分散・画素数 $$\\sigma_{\\omega}&#94;2 = \\frac{\\omega_1\\sigma_1&#94;2 + \\omega_2\\sigma_2&#94;2}{\\omega_1+\\omega_2}$$ クラス内分散(within-class variance) $$\\begin{aligned}\\sigma_b&#94;2 &= \\frac{\\omega_1(m_1-m_t)&#94;2 + \\omega_2(m_2-m_t)&#94;2}{\\omega_1 + \\omega_2}\\\\&= \\frac{\\omega_1\\omega_2(m_1-m_2)&#94;2}{(\\omega_1+\\omega_2)&#94;2}\\end{aligned}$$ クラス間分散(between-class variance) $$\\sigma_2&#94;2=\\sigma_b&#94;2 + \\sigma_{\\omega}&#94;2$$ 全分散(total variance) $$\\frac{\\sigma_b&#94;2}{\\sigma_w&#94;2} = \\frac{\\sigma_b&#94;2}{\\sigma_t&#94;2 - \\sigma_b&#94;2}$$ 分離度(separation metrics) この定義の下で、 分離度 を最大にするしきい値 $t$ を求めたいが、このとき、しきい値 $t$ に関係なく全分散 $\\sigma_t&#94;2$ は一定のため、クラス間分散 $\\sigma_b&#94;2$ が最大になるような $t$ を決めれば良い。 In [33]: def maximize_separation_metrics ( img ): thresholds = np . arange ( 0 , 256 , 1 ) between_class_variances = np . zeros_like ( thresholds ) N = len ( img ) for i , t in enumerate ( thresholds ): black_img = img [ img >= t ] white_img = img [ img < t ] Nb = len ( black_img ); Nw = len ( white_img ) if Nb == 0 or Nw == 0 : continue Mb = np . mean ( black_img ); Mw = np . mean ( white_img ); between_class_variances [ i ] = Nb * Nw * ( Mb - Mw ) ** 2 / ( N ) ** 2 return thresholds , between_class_variances In [34]: thre , bcv = maximize_separation_metrics ( cv2_gray ) In [35]: opt_i = np . argmax ( bcv ) opt_t = thre [ opt_i ] opt_bcv = bcv [ opt_i ] In [36]: plt . plot ( thre , bcv , color = \"black\" ) plt . scatter ( opt_t , opt_bcv , color = \"red\" , s = 100 , label = \"Optimal\" ) plt . title ( \"Discriminant Analysis Method\" ), plt . xlabel ( \"Thresholds\" ), plt . ylabel ( \"between-class variance\" ) plt . show () In [37]: binary_img = np . where ( cv2_gray >= opt_t , 255 , 0 ) fig , axes = plt . subplots ( ncols = 2 , nrows = 1 , figsize = ( 12 , 6 )) axes [ 0 ] . imshow ( cv2_gray , cmap = \"gray\" ), axes [ 0 ] . set_title ( \"Grayscale\" , fontsize = 16 ) axes [ 1 ] . imshow ( binary_img , cmap = \"gray\" ), axes [ 1 ] . set_title ( \"Optimal Binary Image.\" , fontsize = 16 ) plt . show () 9-2-1. 連結性 2値画像では、値1を持つひとまとまりの領域を定義するため、 連結(connection) という概念を用いる。 ディジタル画像では、注目画素に対して上下左右の画素を 4近傍(4-connected neighbor) と呼ぶ。 4近傍に斜め方向の近傍を加えたものを 8近傍(8-connected neighbor) と呼び、その近傍に対して注目の画素の連結を定義したものを 8連結(8-connection) と呼ぶ。 連結している画素の集合を 連結成分(connected component) と呼ぶ。 対象の連結成分の中にあり、背景に連結していない白画素の集合を 穴(hole) と呼ぶ。 9-2-2. 輪郭追跡 連結成分の境界を求めることを 輪郭追跡(contour tracking) と呼ぶ。 詳しいアルゴリズムに関しては 3S-Bioinformatics-Programming/c++/README.md に説明がある。 kadai16.cpp にC++のコードがある。 9-2-4. 収縮・膨張処理 背景または穴に接する対象の画素をひとまわりはぎとる処理を、 収縮(erosion) と呼ぶ。この処理は、 連結性を保存しない 。 背景または穴に接する対象の画素に、画素をひとまわり加える処理を、 膨張(dilation) と呼ぶ。この処理も 連結性を保存しない 。 同じ回数だけ、膨張して収縮する処理を クロージング(closing) と呼ぶ。これを施すことで 画像の小さな穴を除くことができる 。 同じ回数だけ、収縮したのち膨張する処理を オープニング(opening) と呼ぶ。これを施すことで 画像の小さな連結成分を除くことができる 。 9-2-6. ラベリング ラスタキャノンによるラベリング 輪郭追跡による距離変換画像(distance transform image) 9-3. 線画像のベクトル化 連結成分の 連結性を保存したまま 画素を削る処理を繰り返すことを 細線化(thinning) と呼ぶ。 しきい値処理をして得られた2値画像の線分は、一般に幅を持っており、 線分の特徴を抽出しにくい。 細線化を行い、線幅$1$の2値画像に変換する。細線化された2値画像の画素は、特徴点である以下の3種類に分けられる。 端点(end point) 分岐点(branch point) 通過点(passing point) 幾何学的特徴を見るために、「端点-端点」・「端点-分岐点」・「分岐点-分岐点」というように、細線を画素列に分割し、さらにその画素列を直線近似し、始点と終点の座標値で表現するベクトル型の数値データに変換する。 10. 領域処理 10-2-3. ミーンシフトを用いた領域分割処理 ミーンシフト(mean shift)法 は、画像処理の分割や対象画像の追跡に用いられる手法である。 カーネル密度推定法に求められる密度分布の勾配を計算することで重心の移動方向を決定する。 アルゴリズムは以下： カラー画像の$N$個の各画素の位置$\\mathbf{x}_i$とその画素値を$\\boldsymbol{\\nu}_i=(H_i,S_i,I_i)$とし、画素位置-画素値を結合した5次元空間内の点 $\\mathbf{z}_i=(\\mathbf{x}_i,\\boldsymbol{\\nu_i})$ を考えてみて、 ミーンシフト法 で各画素をクラスタリングする。 画素位置に関するバンド幅$h_s$、画素値に関するバンド幅$h_r$を与え、全ての$\\mathbf{z}_i$にミーンシフトを行い、収束位置$\\mathbf{z}&#94;c=(\\mathbf{x}&#94;c,\\boldsymbol{\\nu}&#94;c)$を計算する。 $\\mathbf{x}_i$ の画素値を、収束位置の値（$H&#94;c,S&#94;c,I&#94;c$）に置き換えることによって画像の平滑化ができる。 なお、ミーンシフトは、$\\mathbf{x}&#94;s,\\mathbf{x}&#94;r$ をそれぞれ5次元ベクトル（位置を表す2次元+色を表す3次元）の空間に対応するものとし、カーネル密度推定を以下の通り定義する。（$c$ は全体の積分値を$1$にするための係数である。） $$f(\\mathbf{x})= \\frac{c}{Nh_s&#94;2h_r&#94;3}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}&#94;s-\\mathbf{x}&#94;s_i}{h_s}\\right|&#94;2\\right)k\\left(\\left|\\frac{\\mathbf{x}&#94;r-\\mathbf{x}&#94;r_i}{h_r}\\right|&#94;2\\right)$$ 10-2-4. 対象物と背景の間のエッジを利用した領域分割処理 対象領域がエッジで囲まれているときは、エッジを閉曲線として抽出する スネーク(snakes) と呼ばれる手法によって領域分割が行える。 画像中の対象領域の多くは、背景との境界において画素値の差を生じ、それがエッジとなって現れる。 必然的に対象物体の領域は、 エッジを境界線とした閉領域になる。 対象物体を囲む閉曲線を初期値として与え、徐々に閉曲線が縮んでいき、エッジの境界に沿って貼り付くことによって、対象物体の領域を抽出する。 11. パターン・図形・特徴の検出とマッチング 11-3-1. コーナー検出 ハリスのコーナー検出(Harris corner detector) は、画像からコーナーを検出する代表的な手法である。 入力画像$I$に対して、$x$軸方向の勾配画像$I_{x}$、$y$軸方向の勾配画像$I_{y}$を生成する。ここでは、 ガウス関数$G(\\sigma)$を$x,y$の各方向で微分した$G_x(\\sigma),G_y(\\sigma)$を画像に畳み込むことで、勾配画像を求める。 $$I_x = G_x(\\sigma)\\ast I,\\quad I_y =G_y(\\sigma)\\ast I$$ 各勾配画像の積により、各方向における勾配の大きさを算出する。 $$I_{x2}=I_x\\cdot I_x,\\quad I_{2y}=I_y\\cdot I_y,\\quad I_{xy}=I_x\\cdot I_y$$ $I_{x2},I_{y2},I_{xy}$ の局所領域における勾配の総和$S_{x2},S_{xy},S_{y2}$を求める。$S_{x2},S_{y2},S_{xy}$ は局所領域における単純な総和でも良いが、以下に示すようなガウス関数$G(\\sigma&#94;{\\prime})$による重み付き和を用いることが多い $$S_{x2} = G(\\sigma&#94;{\\prime})\\ast I_{x2},\\quad S_{y2} = G(\\sigma&#94;{\\prime})\\ast I_{y2},\\quad S_{xy} = G(\\sigma&#94;{\\prime})\\ast I_{xy}$$ 画素$(x,y)$における局所領域の勾配の総和$S_{x2}(x,y),S_{y2}(x,y),S_{xy}(x,y)$を要素にもつ行列 $\\mathbf{M}(x,y)$ を定義する。 $$\\mathbf{M}(x,y)=\\left[\\begin{array}{rrr} S_{x2}(x,y) & S_{xy}(x,y) \\\\ S_{xy}(x,y) & S_{y2}(x,y) \\\\ \\end{array}\\right]$$ 画素$(x,y)$がコーナーである場合、行列$\\mathbf{M}$の固有値$\\lambda_1,\\lambda_2$は共に大きな値 となる。そこで、 コーナー関数 $R$ を以下のように定義する。なお、$k$は調整パラメータであり、$0.04\\sim0.06$ が最適値とされている。 $$\\begin{aligned} R&=\\operatorname{det}\\mathbf{M}-k\\left(\\operatorname{tr}\\mathbf{M}\\right)&#94;2\\\\ \\operatorname{det}\\mathbf{M} &= \\lambda_1\\cdot\\lambda_2,\\quad\\operatorname{tr}\\mathbf{M} = \\lambda_1+\\lambda_2 \\end{aligned}$$ 上式の値が局所的な最大値となる画素をコーナーとして検出する。実際には、画像中に非常に多くの局所的な最大値が存在するため、適当なしきい値を設け、有効なコーナーだけを選択する。また、 類似度補間手法 のように $2$次関数を当てはめる ことで、コーナーのサブピクセル位置を推定することもできる。 11-3-2. DoG画像を用いた特徴点とスケールの検出 画像中に 拡大縮小があると、画像間の特徴点領域の濃淡パターンが変化する ため、特徴点の対応づけができない。 そこで、 特徴点とその領域の大きさを表すスケールを検出する 必要があり、複数の DoG(Difference-of-Gaussian) 画像を用いて計算することができる。 DoGは LoG(Laplacian-of-Gaussian) を近似したものであり、スケールの異なるガウス関数$G(\\sigma)$と入力画像を畳み込んだ平滑化画像 $L$ の差分により、DoG画像 $D(\\sigma)$ を求める。 $$ \\begin{aligned} D(\\sigma) &= \\left(G(k\\sigma)-G(\\sigma)\\right)\\ast I\\\\&= L(k\\sigma)-L(\\sigma)\\\\ L(\\sigma) &= G(\\sigma)\\ast I \\end{aligned} $$ ここで、$k$は$\\sigma$の増加率であり、スケールを少しずつ大きくして複数のDoG画像を求める。 11-4-1. スケールと回転に不変な特徴記述(SIFT) SIFT特徴記述では、 回転に不変な特徴量を記述する ために オリエンテーション を求める。 特徴量記述の際にオリエンテーションにより向きの正規化をすることで、 回転に不変な特徴量を得ることができる。 13. 動画像処理 13-1. 差分画像を用いた移動物体検出 動画像の情報抽出処理では、異なる時間に撮影された$2$枚の画像の差を観察することによって、変化情報を得ることができる。 2毎の画像において同じ位置にある画素値の差の絶対値を画像としたものを 差分画像(subtraction image) と呼ぶ。 背景差分法(background subtraction method) 移動物体がない状態の画像を固定カメラで背景画像として取り込む。 移動物体が入った画像から1の画像を差分し、移動物体の領域が0以外の値を持った差分画像を得る。 得られた差分画像の画素値に対してしきい値処理を行い、2値画像を得る。 クロージング および オープニング を用いてこれらを取り除き、移動物体の領域を得る。 得られた2値画像を利用して対象物体の領域に位置する画素を取り出すことにより、移動物体の画像を得る。 移動物体がない 理想的な背景画像 を得ることができない場合、移動物体を撮影した異なる時間の3枚の画像を用いて、 フレーム間差分法(frame subtraction method) によって移動物体領域を取り出すことができる。 AとB、BとCの差分画像を作成し、しきい値処理を施し2値画像ABとBCを得る。 2値画像ABとBCの論理積処理(AND)を行い、ABとBCの共通領域を取り出す。 観測される対象シーンの中に樹木などの 定常的に変動している物体 が写り込んでしまう場合がある。そのような場合、今までの手法だと樹木の小枝も移動物体として検出されてしまう。そこで、画素値の定常的な変動を考慮して移動物体を検出する 統計的背景差分法(statistical background subtraction method) がある。 13-2. オプティカルフロー 異なる時間に撮影された2枚の画像を用いて、静止カメラで撮影した移動物体の運動を解析することができる。 異なる時間に撮影された2枚の画像間での対象の移動量をベクトルデータとして表現したものを オプティカルフロー(optical flow) と呼ぶ。 ブロックマッチング法(block matching method) は、 テンプレートマッチング を用いてオプティカルフローを求める方法である。 勾配法(gradient-based method) は、 連続する2枚の画像での対象物の移動量が微小であること を前提にオプティカルフローを求める手法である。 16. 画像符 16-3-1. ハフマン符号化 ハフマン符号化(Huffman coding) は、以下の手順によって処理される。 出現確率の最も小さい2つのシンボルを選択する。 出現確率の大きい方に符号0、小さい方に符号1を割り当て、部分木を作成する。 2つのシンボルにおける出現確率の和を出現確率とする新たなシンボルに結合する。 1~3を繰り返す。 16-5-1. ランレングス符号化 2値画像において、画素値を横方向にスキャンすると、0の連続と1の連続が繰り返すことがわかる。 これを、同じ画素値が連続したもの（ ラン ）と、その連続数（ レングス ）の組の並びで符号化することを ランレングス符号化(run-length coding) と呼ぶ。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"進化生態情報学","url":"https://iwasakishuto.github.io/University/3A/進化生態情報学-7.html","loc":"https://iwasakishuto.github.io/University/3A/進化生態情報学-7.html"},{"title":"分子生命科学Ⅲ 第13回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 神経変性疾患","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-13.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-13.html"},{"title":"7.クラスタリング","text":"In [1]: import numpy as np import matplotlib.pyplot as plt seed = 0 階層的クラスタリング(Hierarchical Clustering): 凝集型(agglomerative)：各データのみを含むクラスタを併合してゆくことでデータの階層構造を作成する。 最短距離法 最長距離砲 群平均法 ウォード法 分割型(divisive)：データ集合を分割することで階層を生成する。 非階層クラスタリング：分割の良さを評価する関数（ 同質性(homogeneity) と 分離性(separation) ）を定め、良い分割を探す。最適解はNP困難なので準最適解を探す。 クラスタの評価基準(Cluster validity Index) 教師なし クラスタ内誤差平方和 （ エルボー法 で極度にSSEが落ちるクラスタ数が良い。） $$\\operatorname{SSE} = \\sum_k\\sum_{x\\in C_k}\\|x-m_i\\|&#94;2$$ Calinski-Harabasz index $$\\operatorname{VRC} = \\frac{\\sum_k n_k\\|m_k-m_{all}\\|&#94;2}{\\sum_j\\sum_{x\\in C_k}\\|x-m_k\\|&#94;2}\\times\\frac{N-k}{k-1}$$ Dunn index $$\\operatorname{DI} = \\underset{i=1\\cdots n_C}{\\min}\\left\\{\\underset{j=i+1\\cdots n_C}{\\min}\\left\\{\\frac{\\underset{x\\in C_i,y\\in C_j}{\\min\\{d(x,y)\\}}}{\\underset{k=1\\cdots n_C}{\\max}\\left\\{\\underset{x,y\\in C_k}{\\max}\\{d(x,y)\\}\\right\\}}\\right\\}\\right\\}$$ Silhouette coefficient $$\\operatorname{Si} = \\frac{b_i-a_i}{\\max\\{a_i,b_i\\}}$$ $a_i$ はデータ $i$ と同一クラスタ内のデータとの 距離の平均 $b_i$ はデータ $i$ が含まれないクラスタのデータとの 距離の平均のうち最小値 高い値ほど含まれるクラスタに一致し、他のクラスタと離れていると判定。 シルエット分析 ：個々のデータのシルエット係数を計算し、各クラスタ別に高い順にプロットされたシルエット図を作成する。 Shilhouette index ：$\\operatorname{Sil} = 1/N\\sum_i\\operatorname{Si}$ アルゴリズムの例 $k$-means clustering ： $k$個のクラスタの重心との距離から各点を分類。 更新されたクラスタから再度重心を求める。 重心が収束するまで1,2を繰り返す。 DBSCAN：データを隣接点の数から3種に分類しクラスタリングする。 Mean-shift：密度分布の極大を探す。一定半径の球の中の平均値へ移動。 教師あり クラスタリング結果を $C = \\{C_1,C_2,\\cdots,C_k\\}$ 正解のクラスタを $A=\\{A_1,A_2,\\cdots,A_k\\}$ $C_i$ に含まれる $A_j$ の要素の個数を $X_ij=|C_i\\cap A_j|$ とする。 エントロピー ： $C_i$ のエントロピー $E_i$ は $$E_i = -\\sum_{k}\\operatorname{Prob}(A_k|C_i)\\log \\operatorname{Prob}(A_k|C_i)$$ 全体のエントロピーは以下で表される。低いほど良いと判定。 $$\\sum_k\\frac{|C_k|}{N}E_k$$ 純度 ：ある正解のクラスタをどの程度含むか？ $C_i$ の純度 $P_i$ は $$P_i = \\frac{1}{|C_i|}\\max_k|X_{ik}|$$ 全てのデータの純度は以下で表される。高いほど良いと判定。 $$\\sum_k\\frac{|C_k|}{N}P_k$$ F値 ： 再現度 $R_{hk}$ と精度 $P_{hk}$ を以下のように定義 $$R_{hk} = \\frac{\\left|A_h\\cap C_k\\right|}{|A_h|}\\quad P_{hk} = \\frac{\\left|A_h\\cap C_k\\right|}{|C_k|}$$ $A_h$ と $C_k$ のF値 $F_{hk}$ は $R_{hk}$ と $P_{hk}$ の調和平均 $$F_{hk} = \\frac{2R_{hk}P_{hk}}{R_{hk} + P_{hk}}$$ 全体のF値は $A_h$ に対して最大になる $k$ を求めて $$F = \\sum_{h=1}&#94;K\\frac{|A_h|}{N}\\max_kF_{hk}$$ $k$-means法 まずは、 $k$-means clustering の実装を行う。 長所： 原理がわかりやすい。 1ステップの計算量が $O(kN)$ 短所： 「次元の呪い」 高次元において点が疎になりやすい。 次元 $d$ が大きくなるほど、データは中心点から離れ、点の分布は疎になる。 半径 $r$ の $d$ 次元ユークリッド球面の体積は $$V_d(r) = \\frac{\\pi&#94;{d/2}}{\\Gamma\\left(\\frac{d}{2} + 1\\right)}r&#94;d$$ 各辺の長さが $2r$ の超立方体の体積は $$(2r)&#94;d$$ したがって、超球が超立方体に占める割合は $$V_d(r)/(2r)&#94;d = \\frac{\\pi&#94;{d/2}}{2&#94;d\\Gamma\\left(\\frac{d}{2} + 1\\right)}\\underset{d\\rightarrow\\infty}{\\longrightarrow}0$$ クラスタ数をあらかじめ与える必要がある。 データが超球状に分布することを仮定している。（ユークリッド二乗距離で測るのならば） 初期代表点の選び方に依存する。 KZZ法 (Katsavounidis 1994)：最も離れた点を選ぶ。 K-means++ (David Arthur 2007)：最近接の中心から遠いほど選ばれやすい。 ランダムに1点選び、中心とする。 各点 $x$ に対し、最近接の中心との距離を $D(x)$ とし点 $x_i$ を確率 $\\frac{D(x_i)&#94;2}{\\sum_i D(x_i)&#94;2}$ で新たな中心として選ぶ。 2を繰り返して $k$ 個の中心を初期値として選ぶ。 $k$-means法の亜種 kernel $k$-means：$k$-meansの評価関数をカーネルを使用して行う。非線形関数でデータを高次元に写像してクラスタを作成することが可能。 spectral clustering：データからグラフを作成し、グラフの行列表現の固有値を解き、固有ベクトルのクラスタリングをすることで分類する手法。（重み付きkernel $k$-meansとnormalized cutのspectral clusteringが等価であることが示されている → Kernel k-means, Spectral Clustering and Normalized Cuts ） Q.1 Lloydのk-means実装 $K$ 個のクラスタにデータを分類するプログラムの実装 入力：$K$ 個のクラスタにデータを分類する実数データ 出力：データの各クラスタへの分類結果 乱数データを生成し、 「データの性質（次元・データ数・クラスタ数）」 と 「計算時間・誤差二乗平均・ループ回数」 の関係性の測定 超球内に一様分布したデータをクラスタリングする。 ランダムに設定した複数の中心の、超球体により構成されたデータで計測 k-means++の実装 解答 1 # データの取得 ! wget https://mlab.cb.k.u-tokyo.ac.jp/~ichikawa/cluster/three_clusters.txt In [2]: with open ( \"three_clusters.txt\" , \"r\" ) as f : three_clusters_data = np . asarray ([ line . strip ( \" \\n \" ) . split ( \" \\t \" ) for line in f . readlines ()], dtype = float ) print ( f \"data.shape= { three_clusters_data . shape } \" ) data.shape=(300, 2) In [3]: from kerasy.ML.EM import KMeans In [4]: model = KMeans ( n_clusters = 3 , random_state = seed ) model . fit ( three_clusters_data ) model . silhouette ( three_clusters_data ) KMeans Lloyd 004/300 [--------------------] 1.33% - 0.000s average inertia: 6.578, center shift total: 0.000 2 ※ 超球体内部に一様分布する乱数は、 ギブスサンプリング により生成する。 なお、これから先の実行時間については、以下のプログラムファイルを用いた。 備忘録（ディレクトリ構造） # file 群を整える。 $ tree kadai07 kadai07/ ├── kadai07.py ├── kadai07.sh ├── kerasy (https://github.com/iwasakishuto/Kerasy) └── output ├── Elkan.txt ├── Hamerly.txt ├── Lloyd_Random.txt └── Lloyd_k + + .txt kadai07.py #coding: utf-8 import subprocess import argparse import numpy as np from kerasy . ML . sampling import GibbsMsphereSampler from kerasy . utils import measure_complexity from kerasy . ML . EM import KMeans , HamerlyKMeans , ElkanKMeans ModelHandler = { 'Lloyd_Random' : KMeans , 'Lloyd_k++' : KMeans , 'Hamerly' : HamerlyKMeans , 'Elkan' : ElkanKMeans , } dimensions = [ 2 , 10 , 100 ] sample_nums = [ 1000 , 10000 , 100000 ] cluster_nums = [ 10 , 100 , 1000 ] repetitions = 10 if __name__ == \"__main__\" : parser = argparse . ArgumentParser () parser . add_argument ( \"-m\" , \"--model\" , choices = [ 'Lloyd_Random' , 'Lloyd_k++' , 'Hamerly' , 'Elkan' ]) parser . add_argument ( \"-s\" , \"--seed\" , type = int , default = 0 ) args = parser . parse_args () init = \"random\" if 'Lloyd_Random' else 'k++' Model = ModelHandler [ args . model ] seed = args . seed def func ( data , n_clusters , random_state ): model = Model ( n_clusters , init = init , random_state = random_state ) model . fit ( data , verbose = - 1 ) inertia = model . inertia_ n_iter = model . iterations_ return ( inertia , n_iter ) print ( f\"#dimensions : { dimensions } \" ) print ( f\"#sample_nums : { sample_nums } \" ) print ( f\"#cluster_nums: { cluster_nums } \" ) print ( f\"#repetitions : { repetitions } \" ) print ( f\"#seed : { seed } \" ) print ( \"num_samples, dimensions, num_clusters, processing_time, num_iterations, MSE\" ) for d in dimensions : sampler = GibbsMsphereSampler ( d , r = 1 ) for n in sample_nums : data = sampler . sample ( n , random_state = seed , verbose = - 1 ) for k in cluster_nums : p_time , metrics = measure_complexity ( func , data = data , n_clusters = k , random_state = seed , repetitions_ = 10 ) inertia , n_iter = np . mean ( np . asarray ( metrics , dtype = float ), axis = 0 ) print ( f\" { n } , { d } , { k } , { p_time } , { n_iter } , { inertia / n } \" ) kadai07.sh #!/bin/bash # chmod +x kadai07.sh # sh ./kadai07.sh LOGDIR = \"output\" if [ -d $LOGDIR ]; then echo \"Deleted ${LOGDIR} \" rm -r $LOGDIR fi echo \"Created ${LOGDIR} \" mkdir $LOGDIR for Model in Lloyd_Random Lloyd_k + + Hamerly Elkan do python3 kadai07.py -m $Model -s 0 > output/ $Model .txt done In [5]: from kerasy.ML.sampling import GibbsMsphereSampler from kerasy.utils import measure_complexity from kerasy.ML.EM import KMeans In [6]: dimensions = [ 2 , 10 , 100 ] sample_nums = [ 1000 , 10000 , 100000 ] cluster_nums = [ 10 , 100 , 1000 ] repetitions = 10 In [7]: # init=\"random\" def func_1_2 ( data , n_clusters , random_state ): model = KMeans ( n_clusters , init = \"random\" , random_state = random_state ) model . fit ( data , verbose =- 1 ) inertia = model . inertia_ n_iter = model . iterations_ return ( inertia , n_iter ) In [8]: for d in dimensions : sampler = GibbsMsphereSampler ( d , r = 1 ) for n in sample_nums : data = sampler . sample ( n , random_state = 0 , verbose =- 1 ) for k in cluster_nums : p_time , metrics = measure_complexity ( func_1_2 , data = data , n_clusters = k , random_state = seed , repetitions_ = 10 ) inertia , n_iter = np . mean ( np . asarray ( metrics , dtype = float ), axis = 0 ) print ( f \"n= { int ( n ) : <6 } d= { d : <3 } k= { k : <4 } processing time: { p_time : .3f } [s], n_iter= { n_iter : .2f } , mse= { inertia / n : .3f } \" ) n=1000 d=2 k=10 processing time: 0.003[s], n_iter=17.10, mse=0.214 n=1000 d=2 k=100 processing time: 0.013[s], n_iter=13.70, mse=0.060 n=1000 d=2 k=1000 processing time: 0.087[s], n_iter=11.00, mse=0.000 n=10000 d=2 k=10 processing time: 0.019[s], n_iter=18.80, mse=0.217 n=10000 d=2 k=100 processing time: 0.214[s], n_iter=36.90, mse=0.067 n=10000 d=2 k=1000 processing time: 0.766[s], n_iter=16.70, mse=0.019 n=100000 d=2 k=10 processing time: 0.125[s], n_iter=15.40, mse=0.217 n=100000 d=2 k=100 processing time: 2.546[s], n_iter=54.60, mse=0.068 n=100000 d=2 k=1000 processing time: 23.783[s], n_iter=71.40, mse=0.021 n=1000 d=10 k=10 processing time: 0.005[s], n_iter=26.10, mse=0.750 n=1000 d=10 k=100 processing time: 0.018[s], n_iter=14.20, mse=0.542 n=1000 d=10 k=1000 processing time: 0.104[s], n_iter=11.00, mse=0.000 n=10000 d=10 k=10 processing time: 0.084[s], n_iter=56.00, mse=0.767 n=10000 d=10 k=100 processing time: 0.692[s], n_iter=70.00, mse=0.596 n=10000 d=10 k=1000 processing time: 1.661[s], n_iter=18.60, mse=0.423 n=100000 d=10 k=10 processing time: 0.570[s], n_iter=37.60, mse=0.771 n=100000 d=10 k=100 processing time: 20.520[s], n_iter=210.20, mse=0.611 n=100000 d=10 k=1000 processing time: 115.203[s], n_iter=129.90, mse=0.470 n=1000 d=100 k=10 processing time: 0.022[s], n_iter=17.30, mse=0.968 n=1000 d=100 k=100 processing time: 0.164[s], n_iter=15.60, mse=0.880 n=1000 d=100 k=1000 processing time: 0.823[s], n_iter=8.00, mse=0.000 n=10000 d=100 k=10 processing time: 0.374[s], n_iter=30.10, mse=0.974 n=10000 d=100 k=100 processing time: 4.506[s], n_iter=42.40, mse=0.949 n=10000 d=100 k=1000 processing time: 29.492[s], n_iter=28.90, mse=0.857 n=100000 d=100 k=10 processing time: 3.162[s], n_iter=25.40, mse=0.976 n=100000 d=100 k=100 processing time: 143.194[s], n_iter=136.40, mse=0.957 n=100000 d=100 k=1000 processing time: 944.928[s], n_iter=91.40, mse=0.933 ※ jupyter notebook上でプログラムを実装すると面倒なので、プログラムの実行結果をDataFrame で表示する。 In [9]: pd . read_csv ( \"path/to/Desktop/kadai07/output/Lloyd_Random.txt\" , header = 5 ) Out[9]: .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } num_samples dimensions num_clusters processing_time num_iterations MSE 0 1000 2 10 0.003000 17.1 0.214077 1 1000 2 100 0.008318 13.7 0.060291 2 1000 2 1000 0.058851 11.0 0.000000 3 10000 2 10 0.025715 18.8 0.217284 4 10000 2 100 0.188476 36.9 0.066868 5 10000 2 1000 0.801624 16.7 0.019371 6 100000 2 10 0.160234 15.4 0.216636 7 100000 2 100 2.854768 54.6 0.067740 8 100000 2 1000 28.435977 71.4 0.021463 9 1000 10 10 0.007561 26.1 0.750468 10 1000 10 100 0.017962 14.2 0.541632 11 1000 10 1000 0.125840 11.0 0.000000 12 10000 10 10 0.104764 56.0 0.767139 13 10000 10 100 0.821057 70.0 0.596278 14 10000 10 1000 1.857213 18.6 0.422616 15 100000 10 10 0.628574 37.6 0.770892 16 100000 10 100 24.182504 210.2 0.610780 17 100000 10 1000 132.526588 129.9 0.469519 18 1000 100 10 0.025806 17.3 0.967887 19 1000 100 100 0.181885 15.6 0.879964 20 1000 100 1000 0.927639 8.0 0.000000 21 10000 100 10 0.420188 30.1 0.974091 22 10000 100 100 5.110555 42.4 0.948616 23 10000 100 1000 33.450845 28.9 0.857024 24 100000 100 10 3.649111 25.4 0.976308 25 100000 100 100 161.841166 136.4 0.956602 26 100000 100 1000 1062.492614 91.4 0.932622 3 In [10]: # init=\"k++\" def func_1_3 ( data , n_clusters , random_state ): model = KMeans ( n_clusters , init = \"k++\" , random_state = random_state ) model . fit ( data , verbose =- 1 ) inertia = model . inertia_ n_iter = model . iterations_ return ( inertia , n_iter ) In [11]: pd . read_csv ( \"path/to/Desktop/kadai07/output/Lloyd_k++.txt\" , header = 5 ) Out[11]: .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } num_samples dimensions num_clusters processing_time num_iterations MSE 0 1000 2 10 0.002448 17.1 0.214077 1 1000 2 100 0.007464 13.7 0.060291 2 1000 2 1000 0.055270 11.0 0.000000 3 10000 2 10 0.017802 18.8 0.217284 4 10000 2 100 0.188478 36.9 0.066868 5 10000 2 1000 0.685685 16.7 0.019371 6 100000 2 10 0.142654 15.4 0.216636 7 100000 2 100 2.580266 54.6 0.067740 8 100000 2 1000 27.534592 71.4 0.021463 9 1000 10 10 0.005895 26.1 0.750468 10 1000 10 100 0.017444 14.2 0.541632 11 1000 10 1000 0.116181 11.0 0.000000 12 10000 10 10 0.098078 56.0 0.767139 13 10000 10 100 0.794802 70.0 0.596278 14 10000 10 1000 1.873039 18.6 0.422616 15 100000 10 10 0.633468 37.6 0.770892 16 100000 10 100 23.653552 210.2 0.610780 17 100000 10 1000 131.244952 129.9 0.469519 18 1000 100 10 0.025248 17.3 0.967887 19 1000 100 100 0.180452 15.6 0.879964 20 1000 100 1000 0.914976 8.0 0.000000 21 10000 100 10 0.412541 30.1 0.974091 22 10000 100 100 5.021165 42.4 0.948616 23 10000 100 1000 32.758777 28.9 0.857024 24 100000 100 10 3.649448 25.4 0.976308 25 100000 100 100 161.627738 136.4 0.956602 26 100000 100 1000 1092.051946 91.4 0.932622 $k$-means法の高速化 $k$-means clusteringにおいて、最も計算時間を取るのは各点と代表点との距離計算（$O(kN)$） 繰り返しステップが進むと代表点の移動距離は減り、 各点と最も近い代表点は変化しなくなる。 この不要な距離計算を行わないことで計算の高速化を行う → 三角不等式(Triangle Inequality) 「中心 $c$ の移動距離」 + 「移動前の中心 $c$ との距離」 >= 「移動後の中心 $c&#94;{\\prime}$ との距離」 より、$\\operatorname{dis}\\left(\\mathbf{c}_p&#94;{\\prime},\\mathbf{x}\\right) < \\operatorname{dis}\\left(\\mathbf{c}_q&#94;{\\prime},\\mathbf{x}\\right)$ の判断が $c&#94;{\\prime}$ との距離」**より、$\\operatorname{dis}\\left(\\mathbf{c}_p,\\mathbf{x}\\right) < \\operatorname{dis}\\left(\\mathbf{c}_q,\\mathbf{x}\\right)$ を用いることでできる。 $50$ 次元以上で高速（ Elkanの命題 ）： Charles Elkan. Using the triangle inequality to accelerate k-means. ICML, pages 147–153. AAAI Press, 2003. $50$ 次元以下で高速（ Hamerlyの命題 ）： Hamerly, G. Making k-means even faster. SDM (Symposium on Data Mining) 130-140, 2010. Hamerlyの命題 点 $x_i$ の 最近接の重心への距離の上界の一つを $u_i\\geq\\operatorname{d}\\left(x_i, c(\\operatorname{cls}(i))\\right)$ 2番目に近い重心への距離の下界の一つを $l_i\\leq\\min_{j\\neq \\operatorname{cls}(i)}\\operatorname{d}\\left(x_i, c(j)\\right)$ 所属するクラスターを $\\operatorname{cls}(i)$ $\\operatorname{cls}(i)$ の重心を $c\\left(\\operatorname{cls}(i)\\right)$ $c\\left(\\operatorname{cls}(i)\\right)$ と最も近い他のクラスタの重心との距離を $s\\left(\\operatorname{cls}(i)\\right) = \\min_{j\\neq \\operatorname{cls}(i)}\\left\\{\\operatorname{d}\\left(c\\left(\\operatorname{cls}(i)\\right), c\\left(j\\right)\\right)\\right\\}$ とする。この時、 $u_i\\leq l_i$ $u_i\\leq s\\left(\\operatorname{cls}(i)\\right)/2$ のどちらかが成立するならば、$x_i$ に最も近いクラスターは重心移動後も $\\operatorname{cls}(i)$ のまま。 証明 $u_i\\leq l_i$ が成立する時 ： $$ \\begin{aligned} \\operatorname{d}\\left(x_i, c\\left(\\operatorname{cls}(i)\\right)\\right)&\\leq u_i &\\left(\\because \\text{ definition.}\\right)\\\\ u_i&\\leq l_i & \\left(\\because \\text{ definition.}\\right)\\\\ l_i&\\leq\\min_{j\\neq \\operatorname{cls}(i)}\\operatorname{d}\\left(x_i, c(j)\\right) &\\left(\\because \\text{ hypothesis.}\\right) \\end{aligned} $$ $u_i\\leq s\\left(\\operatorname{cls}(i)\\right)/2$ が成立する時 ： $$ \\begin{aligned} 2u_i&\\leq s\\left(\\operatorname{cls}(i)\\right) &\\left(\\because \\text{ hypothesis.}\\right)\\\\ s\\left(\\operatorname{cls}(i)\\right)&\\leq\\operatorname{d}\\left(x_i,c\\left(\\operatorname{cls}(i)\\right)\\right) + \\min_{j\\neq \\operatorname{cls}(i)}\\operatorname{d}\\left(x_i,c(j)\\right) & \\left(\\because \\text{ Triangle Inequality.}\\right)\\\\ \\operatorname{d}\\left(x_i, c\\left(\\operatorname{cls}(i)\\right)\\right) &\\leq u_i & \\left(\\because \\text{ definition.}\\right)\\\\ \\therefore 2u_i&\\leq u_i + \\min_{j\\neq \\operatorname{cls}(i)}\\operatorname{d}\\left(x_i,c(j)\\right) \\end{aligned} $$ より、 どちらの場合でも以下が成立する。 $$\\operatorname{d}\\left(x_i,c\\left(\\operatorname{cls}(i)\\right)\\right)\\leq\\min_{j\\neq \\operatorname{cls}(i)}\\operatorname{d}\\left(x_i, c(j)\\right)$$ Q.2 高速化手法の実装 Hamerlyの高速化手法の実装 入力：$K$ 個のクラスタにデータを分類する実数データ 出力：データの各クラスタへの分類結果 初期代表点が同じ場合Lloydのアルゴリズムと等しいクラスタを出力することを確認。 乱数データを生成し、 「データの性質（次元・データ数・クラスタ数）」 と 「計算時間・誤差二乗平均・ループ回数」 の関係性の測定 Elkanの高速化手法の実装 解答 1 In [12]: from kerasy.ML.EM import HamerlyKMeans model = HamerlyKMeans ( n_clusters = 3 , random_state = seed ) model . fit ( three_clusters_data ) model . silhouette ( three_clusters_data ) KMeans Hamerly 004/300 [--------------------] 1.33% - 0.004s average inertia: 48.774, center shift total: 0.000 2 In [13]: def func_2_2 ( data , n_clusters , random_state ): model = HamerlyKMeans ( n_clusters , init = \"k++\" , random_state = random_state ) model . fit ( data , verbose =- 1 ) inertia = model . inertia_ n_iter = model . iterations_ return ( inertia , n_iter ) In [14]: for d in dimensions : sampler = GibbsMsphereSampler ( d , r = 1 ) for n in sample_nums : data = sampler . sample ( n , random_state = 0 , verbose =- 1 ) for k in cluster_nums : p_time , metrics = measure_complexity ( func_2_2 , data = data , n_clusters = k , random_state = seed , repetitions_ = 10 ) inertia , n_iter = np . mean ( np . asarray ( metrics , dtype = float ), axis = 0 ) print ( f \"n= { int ( n ) : <6 } d= { d : <3 } k= { k : <4 } processing time: { p_time : .3f } [s], n_iter= { n_iter : .2f } , mse= { inertia / n : .3f } \" ) In [15]: pd . read_csv ( \"path/to/Desktop/kadai07/output/Hamerly.txt\" , header = 5 ) Out[15]: .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } num_samples dimensions num_clusters processing_time num_iterations MSE 0 1000 2 10 0.023849 17.1 0.052717 1 1000 2 100 0.027358 13.7 0.004419 2 1000 2 1000 0.189211 4.3 0.000052 3 10000 2 10 0.227350 18.8 0.054107 4 10000 2 100 0.548283 36.9 0.005168 5 10000 2 1000 1.418466 17.0 0.000456 6 100000 2 10 1.800782 15.4 0.053838 7 100000 2 100 7.439619 54.6 0.005232 8 100000 2 1000 24.365071 71.4 0.000535 9 1000 10 10 0.038065 26.1 0.572297 10 1000 10 100 0.042575 15.6 0.301990 11 1000 10 1000 0.217259 4.4 0.029081 12 10000 10 10 0.737034 56.0 0.597806 13 10000 10 100 1.683053 70.0 0.362525 14 10000 10 1000 2.819311 18.1 0.184919 15 100000 10 10 5.201289 37.7 0.603486 16 100000 10 100 49.458843 216.3 0.379651 17 100000 10 1000 144.102286 128.6 0.224751 18 1000 100 10 0.053269 17.3 0.939033 19 1000 100 100 0.203089 15.8 0.830536 20 1000 100 1000 0.389724 3.4 0.085066 21 10000 100 10 1.070933 29.8 0.949124 22 10000 100 100 5.654799 41.5 0.903714 23 10000 100 1000 28.223907 27.2 0.799790 24 100000 100 10 9.533237 25.3 0.953361 25 100000 100 100 178.447388 135.1 0.915487 26 100000 100 1000 995.824564 93.5 0.875549 3 Elkanの命題 点 $x_i$ の 最近接の重心への距離の上界の一つを $u_i\\geq\\operatorname{d}\\left(x_i, c(\\operatorname{cls}(i))\\right)$ $j$ 番のクラスタの重心への距離 の下界を $l_{ij}\\leq\\operatorname{d}\\left(x_i, c(j)\\right)$ 所属するクラスターを $\\operatorname{cls}(i)$ $\\operatorname{cls}(i)$ の重心を $c\\left(\\operatorname{cls}(i)\\right)$ $A$ の、一つ前のイテレーション時の値を $A&#94;{\\prime}$ とする。この時、 $\\frac{1}{2}\\operatorname{d}\\left(c\\left(\\operatorname{cls}(i)\\right),c(j)\\right)\\geq u_i$ が成立する時、$\\operatorname{d}\\left(x_i,c(j)\\right)$ を計算する必要がない。 $l_{ij} = \\max\\left\\{0, l_{ij}&#94;{\\prime}-\\operatorname{d}\\left(c(j), c&#94;{\\prime}(j)\\right)\\right\\}$ と下界を計算できる。 ※ Hamerlyの手法 では、全てのクラスタ重心への距離の下界の一つ $l_i$ を使用する のに対し、ここでは それぞれのクラスタ重心に対して距離の下界 $l_{ij}$ を保持している 証明 $\\frac{1}{2}\\operatorname{d}\\left(c\\left(\\operatorname{cls}(i)\\right),c(j)\\right)\\geq u_i$ が成立する時 $\\left(j{\\neq\\operatorname{cls}(i)}\\right)$： $$ \\begin{aligned} \\frac{1}{2}\\operatorname{d}\\left(c\\left(\\operatorname{cls}(i)\\right),c(j)\\right)\\geq u_i&\\geq\\operatorname{d}\\left(x_i, c(\\operatorname{cls}(i))\\right) &\\left(\\because\\text{ definition.}\\right)\\\\ \\underset{-\\frac{1}{2}\\operatorname{d}\\left(x_i,c\\left(\\operatorname{cls}(i)\\right)\\right)}{\\Longleftrightarrow}\\frac{1}{2}\\operatorname{d}\\left(c\\left(\\operatorname{cls}(i)\\right),c(j)\\right) - \\frac{1}{2}\\operatorname{d}\\left(x_i,c\\left(\\operatorname{cls}(i)\\right)\\right)&\\geq\\frac{1}{2}\\operatorname{d}\\left(x_i,c\\left(\\operatorname{cls}(i)\\right)\\right)\\\\ \\operatorname{d}\\left(x_i,c(j)\\right)&\\geq\\operatorname{d}\\left(c\\left(\\operatorname{cls}(i)\\right),c(j)\\right) - \\operatorname{d}\\left(x_i,c\\left(\\operatorname{cls}(i)\\right)\\right)&\\left(\\because\\text{ Triangle Inequality.}\\right)\\\\ \\therefore\\operatorname{d}\\left(x_i,c(j)\\right) &\\geq\\operatorname{d}\\left(x_i,c\\left(\\operatorname{cls}(i)\\right)\\right) \\end{aligned} $$ この下界は、$l_{ij}&#94;{\\prime}$ が良い下界で、$j$ 番のクラスタの重心の移動距離が小さいほど良い推定となる。(trivial) $$ \\begin{cases} \\begin{aligned} \\operatorname{d}\\left(x_i,c(j)\\right) &\\geq \\operatorname{d}\\left(x_i,c&#94;{\\prime}(j)\\right) -\\operatorname{d}\\left(c(j), c&#94;{\\prime}(j)\\right) & \\left(\\because\\text{ Triangle Inequality.}\\right)\\\\ \\operatorname{d}\\left(x_i,c&#94;{\\prime}(j)\\right)&\\geq l_{ij}&#94;{\\prime} & \\left(\\because\\text{ definition.}\\right)\\\\ \\end{aligned} \\end{cases}\\\\ \\begin{aligned} \\operatorname{d}\\left(x_i,c(j)\\right) &\\geq\\max\\left\\{0, \\operatorname{d}\\left(x_i,c&#94;{\\prime}(j)\\right) -\\operatorname{d}\\left(c(j), c&#94;{\\prime}(j)\\right)\\right\\}\\\\ &\\geq\\max\\left\\{0,l_{ij}&#94;{\\prime} - \\operatorname{d}\\left(c(j), c&#94;{\\prime}(j)\\right)\\right\\} \\end{aligned} $$ In [16]: from kerasy.ML.EM import ElkanKMeans model = ElkanKMeans ( n_clusters = 3 , random_state = seed ) model . fit ( three_clusters_data ) model . silhouette ( three_clusters_data ) KMeans Elkan 004/300 [--------------------] 1.33% - 0.001s average inertia: 48.774, center shift total: 0.000 In [17]: def func_2_3 ( data , n_clusters , random_state ): model = ElkanKMeans ( n_clusters , init = \"k++\" , random_state = random_state ) model . fit ( data , verbose =- 1 ) inertia = model . inertia_ n_iter = model . iterations_ return ( inertia , n_iter ) In [18]: for d in dimensions : sampler = GibbsMsphereSampler ( d , r = 1 ) for n in sample_nums : data = sampler . sample ( n , random_state = 0 , verbose =- 1 ) for k in cluster_nums : p_time , metrics = measure_complexity ( func_2_3 , data = data , n_clusters = k , random_state = seed , repetitions_ = 10 ) inertia , n_iter = np . mean ( np . asarray ( metrics , dtype = float ), axis = 0 ) print ( f \"n= { int ( n ) : <6 } d= { d : <3 } k= { k : <4 } processing time: { p_time : .3f } [s], n_iter= { n_iter : .2f } , mse= { inertia / n : .3f } \" ) In [19]: pd . read_csv ( \"path/to/Desktop/kadai07/output/Elkan.txt\" , header = 5 ) Out[19]: .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } num_samples dimensions num_clusters processing_time num_iterations MSE 0 1000 2 10 0.008630 17.1 0.052717 1 1000 2 100 0.035841 13.7 0.004419 2 1000 2 1000 0.302168 4.3 0.000052 3 10000 2 10 0.030790 18.8 0.054107 4 10000 2 100 0.350015 36.9 0.005168 5 10000 2 1000 3.153855 17.0 0.000456 6 100000 2 10 0.262165 15.4 0.053838 7 100000 2 100 6.310825 54.6 0.005232 8 100000 2 1000 170.179370 71.4 0.000535 9 1000 10 10 0.008973 26.1 0.572297 10 1000 10 100 0.023564 15.6 0.301990 11 1000 10 1000 0.221342 4.4 0.029081 12 10000 10 10 0.096483 56.0 0.597806 13 10000 10 100 0.899312 70.0 0.362525 14 10000 10 1000 4.821373 18.1 0.184919 15 100000 10 10 1.058213 37.7 0.603486 16 100000 10 100 26.485513 216.3 0.379651 17 100000 10 1000 391.500860 128.6 0.224751 18 1000 100 10 0.033819 17.3 0.939033 19 1000 100 100 0.080545 15.8 0.830536 20 1000 100 1000 0.370563 3.4 0.085066 21 10000 100 10 0.620781 29.8 0.949124 22 10000 100 100 1.786801 40.5 0.903733 23 10000 100 1000 8.276154 27.2 0.799790 24 100000 100 10 5.763180 25.4 0.953359 25 100000 100 100 48.678868 133.5 0.915492 26 100000 100 1000 277.882119 93.5 0.875549 1細胞RNA-seq(scRNA-seq) 微量なサンプルからcDNAライブラリーを作成する技術の発展により、1細胞単位での遺伝子発現量データを得ることが可能となった。（ がん ・ メタゲノム ・ 細胞系譜 ・ 神経生物学 など。） 各細胞が数千~数万種類の遺伝子発現量のデータを持つscRNA-seq dataを解析するための手法として以下の手法がある。 2次元または3次元に次元削減することによる 可視化 次元削減されたデータをクラスタリングすることによる細胞集団や細胞系譜の 同定 例として、sc-RNAseqにより線虫(c.elegans)の原腸形成から最終分化細胞に至る発達段階の胚のトランスクリプトームを分析し、 「sc-RNAseqの結果から細胞が分化する過程の細胞系譜木の再構成」 をおこなったものがある（ \"A lineage-resolved molecular atlas of C.elegans embryogenesis at single-cell resolution\" ） workflow Single-cell RNA sequencing workflow Cell isolation Library Preparation Full-length RNA-seq from single cells using Smart-seq2 Highly Parallel Genome-wide Expression Profiling of Individual Cells Using Nanoliter Droplets 次元削減法 scRNA-seqの遺伝子発現マトリックスでは各Sampleが高次元の情報を持つためのクラスタリングを行う前に次元削減が必要 PCA: 「データの分散最大化」 or 「次元削減による誤差の最小化」 から主成分を求める。 線形変換 t-SNE: データ点間の類似度を確率で表し低次元に埋め込む 非線形変換 UMAP: 多様体学習を使用した非線型変換 ※ scRNA-seqでは、t-SNE, UMAPが可視化のためによく用いられる。 t-SNE t-distribution: 低次元へ変換したデータ間の類似度を表すために自由度1のt-分布を使用する。 Stochastic Neighbor Embedding: 高次元空間でのデータ間のユークリッド距離類似度を確率で表現し低次元に変換する。 「データ点間の類似度を表す確率分布」 と 「低次元に変換した点間の類似度を表す確率分布」 を求め、その間の Kullback-Leibler divergence が最小化するように 勾配法 によって変換後の点の座標を求める手法。 確率分布 高次元のデータ点 $x_i$ に対するデータ点 $x_j$ の類似度を対象化された結合確率(joint distribution)で表す。 $$p_{ij} = \\frac{p_{j|i} + p_{i|j}}{2n}$$ データ点 $x_j$ は点 $x_i$ を中心とする標準偏差 $\\sigma_i$ のガウス分布に比例して選び、条件付確率 $p_{j|i}$ は以下のように求める。 $$p_{j|i} = \\frac{\\exp\\left(-\\left\\|x_i-x_j\\right\\|/2\\sigma_i&#94;2\\right)}{\\sum_{k\\neq i}\\exp\\left(-\\left\\|x_i-x_k\\right\\|/2\\sigma_i&#94;2\\right)}$$ 低次元に変換した点 $y_i$ と点 $y_j$ の類似度を自由度$1$のt分布の同時確率で表す。 $$q_{ij} = \\frac{\\left(1 + \\left\\|y_i-y_j\\right\\|&#94;2\\right)&#94;{-1}}{\\sum_{k\\neq l} \\left(1 + \\left\\|y_k-y_l\\right\\|&#94;2\\right)&#94;{-1}}$$ の $p_{ij}$ と $q_{ij}$ のミスマッチを最小化する。 Perplexity 全ての点のガウス分布に対して同じ標準偏差 $\\sigma$ を使用するのではなく、 「密度の高い領域の点は小さい標準偏差」 を 「密度の低い領域では大きい標準偏差」 を用いる。 ここで、上記の条件を満たすために、データ点 $x_i$ 周辺のデータ密度を表現するPerplexityを以下のように定義する。 $$ \\begin{aligned} \\text{Perp}\\left(P_i\\right) &= 2&#94;{H\\left(P_i\\right)}\\\\ H\\left(P_i\\right) &= -\\sum_jp_{j|i}\\log_2p_{j|i} \\end{aligned} $$ ここで、 $\\text{Perp}(P_i)$ に対して $H(P_i)$ は単調増加 $H(P_i)$ に対して標準偏差 $\\sigma_i$ は単調増加 より、 ガウス分布の標準偏差 $\\sigma_i$ が大きいほど、距離が遠い点でも条件付き確率 $p_{j|i}$ が大きな値(negligibleでない)を取ることが多く なる。 Pros and Cons. 利点： Stochastic Neighbor Embeddingからの改善点であり、t-分布の裾が重いため低次元の空間において距離の遠いデータを遠くに配置できる。 データ間の近さに対称性がある 欠点： 2,3次元へのマッピング以外では計算コストが高い。 局所構造が次元の呪いの影響を受けやすい。 最適化アルゴリズムの収束性が保証されていない。 perplexityの選択により出力に大きな影響がある。 マッピング後のクラスタ間の距離関係は元の距離を必ずしも反映していない。 DBSCAN 空間の中で密集している点をクラスタとしてまとめ、疎な領域の点を外れ値とするクラスタリング手法。 半径 $\\varepsilon$、最小点数 $\\text{minPts}$ が与えられた時に、点を $3$ 種類（ 「コア点」 ・ 「到達可能」 ・ 「外れ値」 ）に分類してクラスタリングを行う。 コア点 ：点 $P$ を含め半径 $\\varepsilon$ 以内に $\\text{minPts}$ 個以上の点が存在する点。 直接到達可能 ：コア点 $P$ から $\\varepsilon$ 以内にある点 $q$ 到達可能 ：コア点 $P_i$ から直接到達可能なコア点 $P_{i+1}$ のパス $P_1P_2\\cdots P_nq$ が存在するとき、点 $q$ はコア点 $P_1$ から到達可能。 外れ値 ：どの点からも到達可能でない点 アルゴリズム def DBSCAN ( data , epsilon , minPts ): \"\"\" @params data : 点集合 @params epsilon: 半径`epsilon`以内の点を直接到達可能と定義する。 @params minPts : 半径`epsilon`以内に`minPts`個以上の点が存在する場合、コア点とする。 \"\"\" Clusters = [] while ( data ): # 未探索の点Pを選ぶ。 p = point_lists . pop () if p . searched : continue # 点pから半径ε以内にある点の個数。 Ps_NeighborPts = p . reacheable ( epsilon ) # minPts個以上の点が存在する場合 if minPts <= len ( Ps_NeighborPts ): # 点Pを新たなクラスタCに追加する。 cluster = [ p ] for q in Ps_NeighborPts : # 未探索の場合、探索済みにする。 if not q . searched : q . searched = True # 点qから半径ε以内にある点の個数。 Qs_NeighborPts = q . reacheable ( epsilon ) # minPts個以上の点が存在する場合 if minPts <= len ( Qs_NeighborPts ): # 点qから直接到達可能な点の集合を追加する。 Ps_NeighborPts += Qs_NeighborPts if q not in cluster : cluster . append ( q ) Clusters . append ( cluster ) # minPts個未満の点しか存在しない場合 else : # 探索済みとして終了。 p . searched = True return Clusters Pros and Cons. 利点： k-meansと異なり、あらかじめクラスタ数を与える必要がない。 クラスタが超球状であることを仮定していない。 欠点： クラスタ間で密度に大きな差がある場合正しくクラスタリングされない。 パラメータの選択により出力が影響を受ける。 高次元では次元の呪いにより半径 $\\varepsilon$ の選択が困難。 Q.3 t-SNE+DBSCAN 点の集合をDBSCANを用いてクラスタに分類するプログラムの実装 入力：データ集合・半径 $\\varepsilon$・最小の近接数 minPts 出力：クラスタへの分類結果 線虫の細胞系譜の論文 \"A lineage-resolved molecular atlas of C. elegans embryogenesis at single-cell resolution\" の gene expression matrix data のクラスタリング: https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE126954 GSE126954_cell_annotation.csv は、各細胞の情報（cell type, embryo time, lineage など。） GSE126954_gene_annotation.csv は、各遺伝子の情報（wormbase での ID と short name.） GSE126954_gene_by_cell_count_matrix.txt.gz は、遺伝子発現マトリックスのデータであり、疎な行列のため、圧縮した書き方をしている。 その他の細胞種のデータを使用してt-SNEを実行し、DBSCANでクラスタリングを行う。 GSE126954_gene_by_cell_count_matrix.txtから特定のcell typeのデータを取り出す PCAによる次元削減 t-SNEまたはUMAPによる次元削減 DBSCANによるクラスタリング 各細胞種での遺伝子発現量のヒートマップを作成する 解答 GSE126954_gene_by_cell_count_matrix.txt のデータをクラスタリングする。 細胞総数は$89701$個 遺伝子総数は$20222$個 celltype は$37$種類 embryo time のbinは$12$種類 In [20]: # 全てのデータを取得する場合。 with open ( 'GSE126954_gene_by_cell_count_matrix.txt' , mode = 'r' ) as f : header = f . readline () # １行目は説明 meta_data = f . readline () # ２行目は遺伝子総数・細胞総数・データの行数 lines = [ line . strip ( \" \\n \" ) . split ( \" \" ) for line in f ] # ３行目以降が (遺伝子番号)(細胞番号)(発現量)の形式のデータ。 gene_data = np . asarray ( lines , dtype = np . int ) print ( f \"data.shape= { gene_data . shape } \" ) data.shape=(82802059, 3) 特定の細胞種に絞って解析を行う。 In [21]: import pandas as pd num_gene = 20222 # 今回注目する細胞種 cell_type = [ \"Glia\" , \"Intestine\" , \"Seam_cell\" , \"Coelomocyte\" ] In [22]: # アノテーションファイルから、特定の細胞種の細胞idを調べる。 df_cell_anno = pd . read_csv ( \"GSE126954_cell_annotation.csv\" ) df_cell_used = df_cell_anno [ df_cell_anno [ \"cell.type\" ] . isin ( cell_type )] print ( f \"データ総数: { len ( df_cell_anno ) } \" ) print ( f \"利用するデータ数: { len ( df_cell_used ) } \" ) num_cell_type = len ( df_cell_used ) # Array の形で保持する。 use_cell_id = np . asarray ( df_cell_used . index + 1 ) use_cell_type = df_cell_used [ \"cell.type\" ] . to_numpy () cell_id2idx = dict ( zip ( use_cell_id , np . arange ( num_cell_type ))) データ総数: 89701 利用するデータ数: 7142 In [23]: # Cell type ごとの細胞数の分布。 df_cell_used . groupby ( \"cell.type\" ) . size () Out[23]: cell.type Coelomocyte 787 Glia 1857 Intestine 1732 Seam_cell 2766 dtype: int64 In [25]: # 取得したidを用いて、抽出。 # （この作業を↑のテキスト読み込み時に行った方が速い） gene_data_used = gene_data [ np . asarray ( list ( map ( lambda x : x in use_cell_id , gene_data [:, 1 ]) )) ] In [26]: # 圧縮されていたので、元の行列の形に直す。 gene_expression_matrix = np . zeros ( shape = ( num_cell_type , num_gene ), dtype = np . int ) for ( gene_id , cell_id , val ) in gene_data_used : row = cell_id2idx . get ( cell_id ) gene_expression_matrix [ row , gene_id - 1 ] = val In [27]: # 一度保存（不要） np . save ( \"GSE126954_gene_by_extracted_cell_count_matrix.npy\" , gene_expression_matrix ) Decomposition In [28]: # ロード（不要） gene_expression_matrix = np . load ( \"GSE126954_gene_by_extracted_cell_count_matrix.npy\" ) . astype ( float ) In [29]: num_cell , num_gene = gene_expression_matrix . shape print ( f \"データ数: { num_cell } \" ) print ( f \"特徴量数: { num_gene } \" ) データ数: 7142 特徴量数: 20222 In [30]: from kerasy.utils import CategoricalEncoder encoder = CategoricalEncoder () cell_color = encoder . to_categorical ( use_cell_type ) In [31]: def plot_result ( X , labels = cell_color , model = None , ax = None , cmap = \"jet\" ): if ax is None : fig , ax = plt . subplots ( figsize = ( 4 , 4 )) uni_labels = np . unique ( labels ) for i , label in enumerate ( uni_labels ): ax . scatter ( X [ labels == label , 0 ], X [ labels == label , 1 ], cmap = cmap , label = f \"cls { i + 1 } \" , s = 3 , alpha =. 7 ) ax . legend () mn = model . __class__ . __name__ ax . set_title ( f \" { mn } result \\n num cluster: { len ( uni_labels ) } \" , fontsize = 20 ) ax . set_xlabel ( \"$x_{\" + mn + \"1}$\" , fontsize = 16 ), ax . set_ylabel ( \"$x_{\" + mn + \"2}$\" , fontsize = 16 ) return ax PCA In [32]: from kerasy.ML.decomposition import PCA In [33]: model_pca = PCA ( n_components = 2 ) model_pca . fit ( gene_expression_matrix ) ge_matrix_pca = model_pca . transform ( gene_expression_matrix ) In [34]: plot_result ( ge_matrix_pca . real , model = model_pca ) plt . show () tSNE In [35]: from kerasy.ML.decomposition import tSNE In [36]: model_tsne = tSNE ( initial_momentum = 0.5 , final_momoentum = 0.8 , eta = 500 , random_state = seed ) In [37]: ge_matrix_tsne = model_tsne . fit_transform ( gene_expression_matrix , n_components = 2 , initial_dims = 50 , perplexity = 30.0 , verbose = 1 , epochs = 500 ) Preprocessing the data using PCA to reduce the dimentions 20222→50 Each conditional Gaussian has the same perplexity: 30.0 Mean value of sigma: 0.005 500/500 [####################] 100.00% - 2081.965s KL(P||Q): 0.6061920748571116 In [38]: plot_result ( ge_matrix_tsne , model = model_tsne ) plt . show () UMAP In [39]: from kerasy.ML.decomposition import UMAP In [40]: model_umap = UMAP ( min_dist = 0.1 , spread = 1.0 , sigma_iter = 40 , sigma_init = 1.0 , sigma_tol = 1e-5 , sigma_lower = 0 , sigma_upper = np . inf , ) In [41]: ge_matrix_umap = model_umap . fit_transform ( gene_expression_matrix , n_components = 2 , n_neighbors = 15 , init = \"random\" , epochs = 500 , init_lr = 1.0 , ) 500/500 [####################] 100.00% - 917.261s In [42]: plot_result ( ge_matrix_umap , model = model_umap ) plt . show () Results In [43]: fig , ( ax_pca , ax_tsne , ax_umap ) = plt . subplots ( 1 , 3 , figsize = ( 18 , 6 )) ax_pca = plot_result ( ge_matrix_pca . real , model = model_pca , ax = ax_pca ) ax_tsne = plot_result ( ge_matrix_tsne , model = model_tsne , ax = ax_tsne ) ax_umap = plot_result ( ge_matrix_umap , model = model_umap , ax = ax_umap ) plt . tight_layout () plt . show () Clustering In [44]: from kerasy.ML.cluster import DBSCAN tSNE In [45]: dbscan_tsne = DBSCAN ( eps = 0.8 , min_samples = 10 ) dbscan_labels_tsne = dbscan_tsne . fit_predict ( ge_matrix_tsne ) 7142/7142 [####################] 100.00% - 0.639s num cluster: 6 In [46]: fig , ( ax_tsne , ax_tsne_dbscan ) = plt . subplots ( 1 , 2 , figsize = ( 12 , 6 )) ax_tsne = plot_result ( ge_matrix_tsne , labels = cell_color , model = model_tsne , ax = ax_tsne ) ax_tsne_dbscan = plot_result ( ge_matrix_tsne , labels = dbscan_labels_tsne , model = dbscan_tsne , ax = ax_tsne_dbscan ) plt . tight_layout () plt . show () UMAP In [47]: dbscan_umap = DBSCAN ( eps = 0.5 , min_samples = 5 ) dbscan_labels_umap = dbscan_umap . fit_predict ( ge_matrix_umap ) 7142/7142 [####################] 100.00% - 1.140s num cluster: 7 In [48]: fig , ( ax_umap , ax_umap_dbscan ) = plt . subplots ( 1 , 2 , figsize = ( 12 , 6 )) ax_umap = plot_result ( ge_matrix_umap , labels = cell_color , model = model_umap , ax = ax_umap ) ax_tsne_dbscan = plot_result ( ge_matrix_umap , labels = dbscan_labels_umap , model = dbscan_umap , ax = ax_umap_dbscan ) plt . tight_layout () plt . show () Results In [49]: fig , (( ax_tsne , ax_tsne_dbscan ),( ax_umap , ax_umap_dbscan )) = plt . subplots ( 2 , 2 , figsize = ( 12 , 12 )) ax_tsne = plot_result ( ge_matrix_tsne , labels = cell_color , model = model_tsne , ax = ax_tsne ) ax_tsne_dbscan = plot_result ( ge_matrix_tsne , labels = dbscan_labels_tsne , model = dbscan_tsne , ax = ax_tsne_dbscan ) ax_umap = plot_result ( ge_matrix_umap , labels = cell_color , model = model_umap , ax = ax_umap ) ax_tsne_dbscan = plot_result ( ge_matrix_umap , labels = dbscan_labels_umap , model = dbscan_umap , ax = ax_umap_dbscan ) plt . tight_layout () plt . show () 紹介していただいた参考文献 サンガー研究所のscRNA-seq解析トレーニングコース シングルセル研究論文集Vol.2 –最近のシングルセル論文まとめ Barnes-Hut アルゴリズム-푂(푁log푁)に高速化したt-SNE How to Use t-SNE Effectively -t-SNEを使う際の注意点 UMAP: Uniform Manifold Approximation and Projection for Dimension Reduction if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(森下)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-7.html"},{"title":"分子生命科学Ⅲ 第12回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 脳と行動(4) 精神疾患","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-12.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-12.html"},{"title":"生命情報表現論 第7回","text":"グループ議論とプレゼンテーション システムバイオロジーで何ができるか","tags":"生命情報表現論","url":"https://iwasakishuto.github.io/University/3A/生命情報表現論-7.html","loc":"https://iwasakishuto.github.io/University/3A/生命情報表現論-7.html"},{"title":"生命情報表現論 第6回","text":"データの共有と結合","tags":"生命情報表現論","url":"https://iwasakishuto.github.io/University/3A/生命情報表現論-6.html","loc":"https://iwasakishuto.github.io/University/3A/生命情報表現論-6.html"},{"title":"6.統計遺伝学","text":"Homework.1 ある1つのSNPと表現型の関連を調べたい。 - $y_k(k=1,\\ldots,N)$: Sample $k$ の表現型（中心化: $\\mathbb{E}\\left[\\mathbf{y}\\right]=0$） - $x_k(k=1,\\ldots,N)$: Sample $k$ の注目する遺伝型（中心化: $\\mathbb{E}\\left[\\mathbf{x}\\right]=0$） - $\\varepsilon_k(k=1,\\ldots,N)$: 残差項、$\\varepsilon_k\\sim_{\\mathrm{i.i.d.}}\\mathcal{N}\\left(0, \\sigma&#94;2\\right)$ とし、 $$y_k = \\beta x_k + \\varepsilon_k$$ のモデルを立てる。 Q.1-1 （必須課題） $\\beta$ の最小二乗（OLS; Ordinary least squares）推定量 $\\hat{\\beta}$ の値を $\\varepsilon_k$ を⽤いて、$\\hat{\\beta}$ の分布を $\\sigma&#94;2$ を用いて求めてください。 $\\beta=0$ の帰無仮説の元で、$\\hat{\\beta}$ を線形変換して $z\\sim\\mathcal{N}(0,1)$ に従う確率変数 $z$ と $z&#94;2$ が従う分布を求めてください。 （ちなみに、OLS推定量は最尤推定量と一致する。） 解答 この問題では、データの真の分布が上記の方程式で表され、$\\varepsilon_k$ が誤差の実現値であるとみなす。したがって、求めるべきパラメータは $\\beta$ であるが、 観測されたデータは $(x,y)$ の一部であるため、観測されたデータから推定された $\\hat{\\beta}$ が真の値であるとは限らない。 よって、$\\hat{\\beta}$ が残差項 $\\varepsilon$ の確率分布の影響を受け、ある確率分布に従うと考える。 1 したがって、あるパラメータ $\\beta$ の下でSample $k$ の表現型（$x_k$）から推定される遺伝型（$\\hat{y_k}$）は、$\\hat{y_k}=\\beta x_k$ で表される。この推定値と観測値 $y_k$ の二乗誤差を最小にする $\\beta$ が 最小二乗推定量 $\\hat{\\beta}_{\\text{OLS}}$ なので、二乗誤差 $$S = \\sum_k\\left(y_k-\\hat{y_k}\\right)&#94;2 = \\left(y_k-\\beta x_k\\right)&#94;2$$ を最小にすることを考えれば良い。よって、$S$ を $\\beta$ について微分して、 $$ \\begin{aligned} \\left.\\frac{\\partial S}{\\partial\\beta}\\right|_{\\beta=\\hat{\\beta}_{\\text{OLS}}} &= \\sum_k\\left(y_k-\\beta x_k\\right)\\left(-x_k\\right)\\\\ &= \\sum_k\\beta x_k&#94;2 - \\sum_kx_ky_k = 0\\quad\\cdots(\\ast)\\\\ \\therefore\\hat{\\beta}_{\\text{OLS}} &=\\frac{\\sum_kx_ky_k}{\\sum_k x_k&#94;2}\\\\ \\end{aligned} $$ によって最小二乗推定量 $\\hat{\\beta}_{\\text{OLS}}$ が求まった。ここで、先述の通り $\\hat{\\beta}_{\\text{OLS}}$ は残差項 $\\varepsilon$ の影響を受けてある確率分布に従っているので、 $$ \\begin{aligned} \\hat{\\beta}_{\\text{OLS}} &=\\frac{\\sum_kx_ky_k}{\\sum_k x_k&#94;2}\\\\ &=\\frac{\\sum_kx_k\\left(\\beta x_k + \\varepsilon_k\\right)}{\\sum_k x_k&#94;2}\\\\ &=\\beta + \\frac{\\sum_kx_k\\varepsilon_k}{\\sum_k x_k&#94;2} \\end{aligned} $$ と表せる。 ここで、 $\\hat{\\beta}_{\\text{OLS}}$ の確率分布を求めるために、統計量を調べる。 まず、$(\\ast)$ の式から、 $$ \\begin{cases} \\begin{aligned} \\sum_k\\varepsilon_k &= y_k -\\beta x_k = 0\\\\ \\sum_kx_k\\varepsilon_k &= \\sum_kx_ky_k - \\sum_k\\beta x_k&#94;2 = 0\\\\ \\end{aligned} \\end{cases} $$ が成り立っていることがわかる。これは、 残差の平均が $0$ 、 残差と説明変数 $x_k$ が無相関 となるように $\\beta$ が推定されていることを表す。 これを用いて $\\hat{\\beta}_{\\text{OLS}}$ の統計量を求めると、 $$ \\begin{cases} \\begin{aligned} \\mathbb{E}\\left[\\hat{\\beta}_{\\text{OLS}}\\right] &= \\beta\\\\ \\mathbb{V}\\left[\\hat{\\beta}_{\\text{OLS}}\\right] &= \\mathbb{E}\\left[\\left(\\hat{\\beta}_{\\text{OLS}}-\\beta\\right)&#94;2\\right]\\\\ &= \\mathbb{E}\\left[\\sum_k\\varepsilon_k&#94;2\\right]\\mathbb{E}\\left[\\frac{\\sum_kx_k&#94;2}{\\left(\\sum_kx_k&#94;2\\right)&#94;2}\\right]\\\\ &=\\frac{\\sigma&#94;2}{\\sum_kx_k&#94;2} \\end{aligned} \\end{cases} $$ したがって、 $\\varepsilon_k\\sim_{\\mathrm{i.i.d.}}\\mathcal{N}\\left(0, \\sigma&#94;2\\right)$ より $\\hat{\\beta}_{\\text{OLS}}$ が正規分布に従うことは明らか なので、上記の統計量より、$\\hat{\\beta}_{\\text{OLS}}\\sim\\mathcal{N}\\left(\\beta, \\sigma&#94;2/\\sum_kx_k&#94;2\\right)$ 2 $\\beta=0$ の帰無仮説の元で、$\\mathcal{N}\\left(0,1\\right)$ に従うように $\\hat{\\beta}_{\\text{OLS}}$ を線形変換するには、$\\sqrt{\\mathbb{V}\\left[\\hat{\\beta}_{\\text{OLS}}\\right]}$ で $\\hat{\\beta}_{\\text{OLS}}$ を割ってスケーリングすれば良いので、 $$ \\begin{aligned} z &= \\frac{\\hat{\\beta}_{\\text{OLS}}}{\\sqrt{\\mathbb{V}\\left[\\hat{\\beta}_{\\text{OLS}}\\right]}}\\\\ &= \\frac{ \\sum_kx_k\\varepsilon_k / \\sum_kx_k&#94;2}{\\sqrt{\\sigma&#94;2 / \\sum_kx_k&#94;2}}\\\\ &= \\frac{\\sum_kx_k\\varepsilon_k}{\\sigma\\sqrt{\\sum_kx_k&#94;2}}\\sim\\mathcal{N}\\left(0, 1\\right) \\end{aligned} $$ したがって、 $z$ は平均 $0$、分散 $1$ の正規分布に従う。 ここで、標準正規分布の確率密度関数は $p(x) = \\frac{1}{\\sqrt{2\\pi}}\\exp\\left(-\\frac{x&#94;2}{2}\\right)$ とかけるので、$y = f(x) = x&#94;2$ と変数変換する。この時、 逆関数が多価関数となる ので、変換後の密度関数 $q(y)$ は、 $$q(y) = \\sum_ip_i\\left(f_i&#94;{-1}(y)\\right)\\left|\\frac{\\partial f_i&#94;{-1}(y)}{\\partial y}\\right|$$ と 全ての逆関数の和で表される。 したがって、 $$ \\begin{aligned} q(y)\\Delta y &= p(x)\\Delta x + p(-x)\\Delta x\\\\ &= 2p(x)\\Delta x\\quad (y\\geq0)\\\\ q(y) &= 2p\\left(\\sqrt{y}\\right)\\left|\\frac{\\partial \\left(\\sqrt{y}\\right)}{\\partial y}\\right|\\\\ &= 2\\cdot\\frac{1}{\\sqrt{2\\pi}}\\exp\\left(-\\frac{y}{2}\\right)\\frac{1}{2\\sqrt{y}}\\\\ &= \\frac{1}{2&#94;{\\frac{1}{2}}\\sqrt{\\pi}}y&#94;{-\\frac{1}{2}}\\exp\\left(-\\frac{y}{2}\\right) \\end{aligned} $$ 一方、自由度 $n$ のカイ二乗分布は、以下の確率密度関数 $(\\ast)$ で表される分布であるので、 $z&#94;2$ が自由度 $1$ のカイ二乗分布に従うことがわかる。 $$ \\begin{cases} \\begin{aligned} f_n(x) &= \\frac{1}{2&#94;{\\frac{n}{2}}\\Gamma\\left(\\frac{n}{2}\\right)}x&#94;{\\frac{n}{2}-1}\\exp\\left(-\\frac{x}{2}\\right)\\quad\\cdots\\left(\\ast\\right)\\\\ \\Gamma\\left(\\frac{1}{2}\\right) &= \\sqrt{\\pi} \\end{aligned} \\end{cases} $$ Q.1-2 （選択課題） $\\sigma&#94;2$ を不偏推定量 $\\hat{\\sigma}&#94;2=c\\sum_k\\left(y_k-\\hat{\\beta}x_k\\right)&#94;2$ （$c$ は定数）に置換するとき、$\\hat{\\sigma}&#94;2$ の値を求めて下さい。また、$\\beta=0$ の帰無仮説の元で $z_{\\hat{\\sigma}&#94;2}$ が自由度 $N-1$ のt分布に従うことを示して下さい。 解答 全 $N$ サンプルの不偏分散なので、$c=N-1$ であり、 $$ \\begin{aligned} \\hat{\\sigma}&#94;2 &= \\frac{1}{N-1}\\sum_{k=1}&#94;N\\left(y_k - \\hat{\\beta}_{\\text{OLS}}\\right)&#94;2\\\\ &= \\frac{1}{N-1}\\sum_{k=1}&#94;N\\left(y_k - \\left(\\beta + \\frac{\\sum_jx_j\\varepsilon_j}{\\sum_j x_j&#94;2}\\right)x_k\\right)&#94;2\\\\ &= \\frac{1}{N-1}\\sum_{k=1}&#94;N\\left(y_k - \\beta x_k - \\frac{\\sum_jx_j\\varepsilon_j}{\\sum_j x_j&#94;2}x_k\\right)&#94;2\\\\ &= \\frac{1}{N-1}\\sum_{k=1}&#94;N\\left(y_k-\\beta x_k\\right)&#94;2\\\\ &= \\frac{1}{N-1}\\sum_{k=1}&#94;N\\varepsilon_k&#94;2\\\\ &= \\frac{\\sigma&#94;2}{N-1}\\sum_{k=1}&#94;N\\left(\\frac{\\varepsilon_k}{\\sigma}\\right)&#94;2 \\end{aligned} $$ よって、$\\beta=0$ の帰無仮説の元で、$z$ は $$ \\begin{aligned} z_{\\hat{\\sigma}&#94;2} &= \\frac{\\sum_kx_k\\varepsilon_k}{\\hat{\\sigma}\\sqrt{\\sum_kx_k&#94;2}}\\\\ &= \\frac{\\sum_kx_k\\varepsilon_k}{\\sqrt{\\frac{\\sigma&#94;2}{N-1}\\sum_{k=1}&#94;N\\left(\\frac{\\varepsilon_k}{\\sigma}\\right)&#94;2}\\sqrt{\\sum_kx_k&#94;2}}\\\\ &= \\frac{\\sum_kx_k\\varepsilon_k}{\\sigma\\sqrt{\\sum_kx_k&#94;2}}/\\sqrt{\\sum_{k=1}&#94;N\\left(\\frac{\\varepsilon_k}{\\sigma}\\right)&#94;2/\\left(N-1\\right)} \\end{aligned} $$ ここで、 $$ \\begin{aligned} \\frac{\\sum_kx_k\\varepsilon_k}{\\sigma\\sqrt{\\sum_kx_k&#94;2}} &\\sim \\mathcal{N}(0,1)\\\\ \\sum_{k=1}&#94;N\\left(\\frac{\\varepsilon_k}{\\sigma}\\right)&#94;2&\\sim\\mathcal{\\chi}&#94;2_N \\end{aligned} $$ なので、 $z_{\\hat{\\sigma}&#94;2}$ が自由度 $N-1$ のt分布に従うことは示せなかった。 どのようにして自由度 $N-1$ のカイ二乗分布に従う確率変数を導くのかわかりませんでした。 Q.1-3 （選択課題） $\\beta\\neq0$ の仮定の元で、Q.1-1 の $z$ はどのような分布に従うかを $\\beta,\\sigma&#94;2$ を用いて求めてください。また、$z&#94;2$ はどのような分布に従うかを求めてください。 解答 $\\beta\\neq0$ の仮定のもとで Q.1-1 と同様の線形変換を行うと、 $$ \\begin{aligned} z &= \\frac{\\hat{\\beta}_{\\text{OLS}}}{\\sqrt{\\mathbb{V}\\left[\\hat{\\beta}_{\\text{OLS}}\\right]}}\\\\ &= \\frac{\\beta+\\left( \\sum_kx_k\\varepsilon_k / \\sum_kx_k&#94;2\\right)}{\\sqrt{\\sigma&#94;2 / \\sum_kx_k&#94;2}}\\\\ &= \\frac{\\beta}{\\sigma}\\sqrt{\\sum_kx_k&#94;2}+\\frac{\\sum_kx_k\\varepsilon_k}{\\sigma\\sqrt{\\sum_kx_k&#94;2}}\\sim\\mathcal{N}\\left(\\frac{\\beta}{\\sigma}\\sqrt{\\sum_kx_k&#94;2}, 1\\right) \\end{aligned} $$ したがって、 $z$ は平均 $\\frac{\\beta}{\\sigma}\\sqrt{\\sum_kx_k&#94;2}$ 分散 $1$ の正規分布に従う。 ここで、上記の正規分布は、$\\mu = \\frac{\\beta}{\\sigma}\\sqrt{\\sum_kx_k&#94;2}$ として $f(x)=\\frac{1}{\\sqrt{2\\pi}}\\exp\\left(-\\frac{(x-\\mu)&#94;2}{2}\\right)$ とかけるので、先ほどと同様に $y=x&#94;2$ と変数変換すると、 $$ \\begin{aligned} q(y) &= \\frac{1}{2\\sqrt{y}}\\frac{1}{\\sqrt{2\\pi}}\\left[\\exp\\left(-\\frac{\\left(y-2\\sqrt{y}\\mu+\\mu&#94;2\\right)}{2}\\right) + \\exp\\left(-\\frac{\\left(y+2\\sqrt{y}\\mu+\\mu&#94;2\\right)}{2}\\right)\\right]\\\\ &= \\frac{1}{2\\sqrt{y}}\\frac{1}{\\sqrt{2\\pi}}\\exp\\left(-\\frac{y + \\mu&#94;2}{2}\\right)\\left[\\exp\\left(\\sqrt{y}\\mu\\right) + \\exp\\left(-\\sqrt{y}\\mu\\right)\\right]\\\\ &= \\frac{1}{\\sqrt{2\\pi y}}\\exp\\left(-\\frac{y + \\lambda}{2}\\right)\\cosh\\left(\\sqrt{y\\lambda}\\right),\\quad\\left(\\lambda = \\mu&#94;2\\right)\\\\ &= \\frac{1}{\\sqrt{2\\pi y}}\\exp\\left(-\\frac{y + \\lambda}{2}\\right)\\sum_{n=0}&#94;{\\infty}\\frac{\\left(\\sqrt{y\\lambda}\\right)&#94;{2n}}{2n!}\\\\ &= \\frac{1}{\\sqrt{2\\pi y}}\\exp\\left(-\\frac{y + \\lambda}{2}\\right)\\sum_{n=0}&#94;{\\infty}\\frac{\\left(y\\lambda\\right)&#94;{n}}{2n!} \\end{aligned} $$ 一方、自由度 $k$、非心パラメータ $\\lambda$ の $\\chi&#94;2$ 分布の確率密度関数が $$f(x;k,\\lambda) = \\frac{1}{2}\\exp\\left(-\\frac{x + \\lambda}{2}\\right)\\left(\\frac{x}{2}\\right)&#94;{\\frac{k}{2}-1}\\sum_{n=0}&#94;{\\infty}\\frac{1}{n!\\Gamma\\left(\\frac{k}{2} + n\\right)}\\left(\\frac{\\lambda z}{4}\\right)&#94;n$$ と表される [Wiki] ことから、 $z&#94;2$ が自由度 $1$、非心パラメータ $\\lambda=\\mu&#94;2 = \\frac{\\beta&#94;2}{\\sigma&#94;2}\\sum_kx_k&#94;2$ の非心カイ二乗分布に従う ことがわかる。 $k=1$ とした時、非心カイ二乗分布は、 $$ \\begin{aligned} f(x;1,\\lambda) &= \\frac{1}{2}\\exp\\left(-\\frac{x+\\lambda}{2}\\right)\\left(\\frac{x}{2}\\right)&#94;{-\\frac{1}{2}}\\sum_{n=0}&#94;{\\infty}\\frac{1}{n!\\Gamma\\left(\\frac{1}{2} + n\\right)}\\left(\\frac{\\lambda x}{4}\\right)&#94;n\\\\ &= \\frac{1}{\\sqrt{2x}}\\exp\\left(-\\frac{x+\\lambda}{2}\\right)\\sum_{n=0}&#94;{\\infty}\\frac{1}{n!\\Gamma\\left(\\frac{1}{2} + n\\right)}\\left(\\frac{\\lambda x}{4}\\right)&#94;n \\end{aligned} $$ と書けるので、先ほどの式と比べると、 $$\\frac{1}{\\sqrt{\\pi}}\\sum_{n=0}&#94;{\\infty}\\frac{\\left(x\\lambda\\right)&#94;{n}}{2n!} = \\sum_{n=0}&#94;{\\infty}\\frac{1}{n!\\Gamma\\left(\\frac{1}{2} + n\\right)}\\left(\\frac{\\lambda x}{4}\\right)&#94;n$$ が言えれば良い。ここで、 $$ \\begin{aligned} \\frac{1}{n!\\Gamma\\left(\\frac{1}{2} + n\\right)}\\left(\\frac{\\lambda x}{4}\\right)&#94;n &= \\frac{1}{n!\\frac{\\left(2n - 1\\right)!!}{2&#94;n}\\sqrt{\\pi}}\\left(\\frac{\\lambda x}{4}\\right)&#94;n\\\\ &= \\frac{1}{\\sqrt{\\pi}}\\frac{1}{n!\\left(2n-1\\right)!!}\\left(\\frac{\\lambda x}{2}\\right)&#94;n\\\\ &= \\frac{1}{\\sqrt{\\pi}}\\frac{1}{n!\\frac{(2n)!}{2&#94;nn!}}\\left(\\frac{\\lambda x}{2}\\right)&#94;n\\\\ &= \\frac{1}{\\sqrt{\\pi}}\\frac{\\left(\\lambda x\\right)&#94;n}{2n!} \\end{aligned} $$ と変換できるので、正しさが確認された。 Q.1-4 （選択課題） 上記の解析 （全tag SNPに対して独立に、表現型との間に線形な関係があると仮定して線形回帰を行う） を全SNPについて行うとする。$i$ 番目のSNPの効果量を $\\beta_i$、$q_i:=\\mathrm{Var}\\left[\\beta_ix_i\\right]/\\mathrm{Var}[y]$ としたとき、Q.1-3で求めた非心パラメータ $\\lambda_i$ を $q_i&#94;2$ を用いて表してください。 解答 $i$ 番目のSNPに関するモデルは以下のように表される。 （$y_{ik}$ は、$i$ に依らず、Sample $k$ のみに依存） $$y_{ik} = \\beta_ix_{ik} + \\varepsilon_{ik}$$ したがって、誤差項が独立であることから分散の線型性を用いると、 $$ \\begin{aligned} \\mathbb{V}\\left[\\mathbf{y}_i\\right] &= \\mathbb{V}\\left[\\beta_i\\mathbf{x}_{ik}\\right] + \\mathbb{V}\\left[\\boldsymbol{\\varepsilon}_i\\right]\\\\ &= \\mathbb{V}\\left[\\beta_i\\mathbf{x}_{ik}\\right] + \\sigma_i&#94;2\\\\ \\end{aligned} $$ であるので、これを用いると、 $$ \\begin{aligned} 1/q_i&#94;2 &= \\mathbb{V}\\left[\\mathbf{y}_i\\right] / \\mathbb{V}\\left[\\beta_i\\mathbf{x}_{ik}\\right]\\\\ &= 1 + \\frac{\\sigma_i&#94;2}{\\mathbb{V}\\left[\\beta_i\\mathbf{x}_{ik}\\right]}\\\\ &= 1 + \\frac{\\sigma_i&#94;2}{\\beta_i&#94;2\\sum_kx_{ik}&#94;2} \\end{aligned} $$ という関係が導かれる。 以上より、非心パラメータ $\\lambda_i$ を $q_i&#94;2$ で表すと $$ \\lambda_i= \\frac{\\beta_i&#94;2}{\\sigma_i&#94;2}\\sum_kx_{ik}&#94;2 = \\frac{q_i&#94;2}{1-q_i&#94;2} $$ Q.1-5 （選択課題） 全 $M$ 個のSNPの $\\chi&#94;2$ 統計量(null仮説の時 $\\chi&#94;2$ 分布に従う統計量)のみからこの表現型の遺伝率 $h&#94;2$ を推定するためにはどうすれば良いか、ただし、 LD（連鎖不均衡） は存在しないものとし、causal variants は全て Genotyping されており、complex trait ($q_i\\ll1$) と仮定して良い。 解答 遺伝率は、 表現型の分散のうち遺伝型で説明される分散の割合 を表す。つまり、 $$\\underbrace{y_k}_{P\\text{: Phenotype}} = \\underbrace{\\sum_i&#94;M\\beta_ix_{ik}}_{G\\text{: Gene}} + \\underbrace{\\varepsilon_k}_{E\\text{: Environment}}$$ とおいた時に、$h&#94;2:=\\mathbb{V}\\left[G\\right]/\\mathbb{V}\\left[P\\right]$ として定義される。 ここで、complex diseaseでは、GWAS解析において少数の有意なSNPと、多数の弱い関連SNPがある。そこで、 $h_{\\text{GWAS}}$（表現型の分散のうち、GWASで有意なSNPのみで説明できる分散の割合） を求める。これは、各SNPの効果量のGWAS推定値 $\\hat{\\beta_i}$ を重みとし、線形和として表現型の推定値 $\\hat{\\phi_i}$ を $$\\hat{\\phi_i} = \\sum_{\\text{Significant SNP i}}\\hat{\\beta_i}x_{ik}$$ で求め、$h_{\\text{GWAS}}&#94;2 = r&#94;2\\left(\\hat{\\boldsymbol{\\phi}},\\mathbf{y}\\right)$ という関係を用いて求める。 Homework.2 与えられた身長のSimulation dataを見て、気が付いたことを答えてください。 PCAを行い、サンプル内にクラスタが存在するか確認せよ。 （必須課題） QQplotを書いてみよ。 （必須課題） 余裕があれば、後述のPrediction(Risk Score)も求めよ。 ※ 遺伝型は real data ですが、表現型は simulation data です。 解答 ファイル名 概要 カラムの説明 simu.legend SNPに関する情報が書いてあります。1行が1つのSNPに対応しています。 sid : SNPの名前 chrom : 染色体番号 position : 位置 minor : minor allele major : major allele simu.phe サンプルに関する情報が書いてあります。1行が1サンプルに対応しています。 id : サンプルid pop : population group : populationのグループ(EAS: east asian, EUR: european, AFR: african) simu.genot 遺伝型情報が書いてあります。1行が1サンプルに、1列が1SNPに対応しています。順番は simu.genot , simu.phe と同じです。 各要素はminor alleleの個数 In [1]: import numpy as np from scipy import stats import pandas as pd import matplotlib.pyplot as plt In [2]: df_legend = pd . read_csv ( \"simu/simu.legend\" ) df_phe = pd . read_csv ( \"simu/simu.phe\" ) df_genot = pd . read_csv ( \"simu/simu.genot\" , header = None , sep = \" \" ) In [3]: print ( f \"Total num of Samples (N): { len ( df_phe ) } \" ) print ( f \"Total num of SNPs (M): { len ( df_legend ) } \" ) print ( f \"(M,N) = { df_genot . shape } \" ) Total num of Samples (N): 1668 Total num of SNPs (M): 83440 (M,N) = (83440, 1668) In [4]: Y = df_phe . height X = np . asarray ( df_genot ) . T In [5]: # 標準化 X = ( X - np . average ( X , axis = 0 )) / np . std ( X , axis = 0 ) Y = ( Y - np . average ( Y )) / np . std ( Y ) PCAを行い、サンプル内にクラスタが存在するか確認せよ。 In [6]: from sklearn.decomposition import PCA In [7]: print ( f \"(N,M) = { X . shape } \" ) (N,M) = (1668, 83440) In [8]: pca = PCA ( n_components = 2 ) pca . fit ( X ) Out[8]: PCA(copy=True, iterated_power='auto', n_components=2, random_state=None, svd_solver='auto', tol=0.0, whiten=False) In [9]: X_transformed = pca . transform ( X ) In [10]: X_pc1 , X_pc2 = X_transformed . T In [11]: plt . figure ( figsize = ( 6 , 6 )) plt . scatter ( X_pc1 , X_pc2 , s = 10 ) plt . title ( \"PCA\" , fontsize = 16 ), plt . xlabel ( \"Principle Component 1\" ), plt . ylabel ( \"Principle Component 2\" ) plt . show () 上のプロットより、 サンプル内にクラスタが存在することが確認できた。 そこで、試しにKMeans法を用いてクラスを分割する In [12]: from kerasy.utils import findLowerUpper In [13]: from sklearn.cluster import KMeans model = KMeans ( n_clusters = 3 , random_state = 0 ) In [14]: model . fit ( X_transformed ) Out[14]: KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, n_clusters=3, n_init=10, n_jobs=1, precompute_distances='auto', random_state=0, tol=0.0001, verbose=0) In [15]: Xlus = findLowerUpper ( X_transformed , margin = 5e-2 , N = 100 ) X1lus , X2lus = np . meshgrid ( * Xlus ) Xs = np . c_ [ X1lus . ravel (), X2lus . ravel ()] Zs = model . predict ( Xs ) . reshape ( X1lus . shape ) In [16]: cls = model . predict ( X_transformed ) In [17]: plt . figure ( figsize = ( 6 , 6 )) plt . scatter ( X_pc1 , X_pc2 , s = 15 , c = cls , cmap = \"jet\" ) plt . pcolor ( X1lus , X2lus , Zs , alpha = 0.2 , cmap = \"jet\" ) plt . title ( \"PCA\" , fontsize = 16 ), plt . xlabel ( \"Principle Component 1\" ), plt . ylabel ( \"Principle Component 2\" ) plt . show () QQplotを書いてみよ。 各SNPと表現型の間に以下のモデルを立てる。 $$y_k = \\beta x_k + \\varepsilon_k$$ In [18]: def calc_uniform_order_statistic_medians ( sample_size ): v = np . zeros ( sample_size , dtype = np . float64 ) v [ - 1 ] = 0.5 ** ( 1.0 / sample_size ) v [ 0 ] = 1 - v [ - 1 ] i = np . arange ( 2 , sample_size ) v [ 1 : - 1 ] = ( i - 0.3175 ) / ( sample_size + 0.365 ) return v In [19]: betas = np . asarray ([ np . sum ( x * Y ) / np . sum ( x * x ) for x in X . T ]) In [20]: sample_size = len ( betas ) osm_uniform = calc_uniform_order_statistic_medians ( sample_size ) osm = stats . norm . ppf ( osm_uniform ) osr = np . sort ( betas ) In [21]: plt . scatter ( osm , osr , color = \"b\" , s = 10 ) plt . title ( \"QQ Plot\" ), plt . xlabel ( 'Theoretical quantiles' ), plt . ylabel ( \"Ordered Values\" ), plt . grid () plt . show () Homework.3 Q.1では、各SNPごとに単回帰を行い、$\\hat{\\beta}_i$ を推定していたが、ここでは、全SNPによる効果と表現型の関連を 同時に 考えたい。 - $\\mathbf{y} = \\left(y_k\\right)$: 従属変数ベクトル（表現型） - $\\boldsymbol{\\beta} = \\left(\\beta_i\\right)$: 効果量ベクトル - $\\mathbf{X} = \\left(x_{k,i}\\right)$: 独立変数行列 - $\\boldsymbol{\\varepsilon}=\\left(\\varepsilon_k\\right)$: 残差項ベクトル $\\left(\\sim_{\\text{i.i.d.}}\\mathcal{N}\\left(0,\\sigma&#94;2\\mathbf{I}_n\\right)\\right)$ $$ \\begin{aligned} y_{k} = \\sum_{i=1}&#94;M\\beta_ix_{ik} + \\varepsilon_{k}\\quad \\left(\\underbrace{\\mathbf{y}}_{(N)} = \\underbrace{\\mathbf{X}}_{(N\\times M)}\\underbrace{\\boldsymbol{\\beta}}_{(M)} + \\underbrace{\\boldsymbol{\\varepsilon}}_{(N)}\\right) \\end{aligned} $$ の多重線形モデルを考える。また、この時 $x_{ik},y_{k}$ は標準化されているものとする。 Q.3-1 （必須課題） 重回帰を用いて遺伝型 $\\mathbf{X}$ と表現型 $\\mathbf{y}$ から最小二乗推定値 $\\tilde{\\boldsymbol{\\beta}}$ を求めてください。また、LDがないとき、$\\tilde{\\beta_i}$ の分布を $\\beta_i$ を用いて求めてください。 解答 最小二乗推定量 $\\hat{\\boldsymbol{\\beta}}_{\\text{OLS}}$ は、残差平方和 $$s:= \\left\\|\\mathbf{y}-\\hat{\\mathbf{y}}\\right\\|&#94;2 = \\left(\\mathbf{y}-\\mathbf{X}\\boldsymbol{\\beta}\\right)&#94;T\\left(\\mathbf{y}-\\mathbf{X}\\boldsymbol{\\beta}\\right)$$ を最小化するので、 $$ \\begin{aligned} \\left.\\frac{\\partial s}{\\partial\\boldsymbol{\\beta}}\\right|_{\\boldsymbol{\\beta}=\\hat{\\boldsymbol{\\beta}}_{\\text{OLS}}} &= \\frac{\\partial}{\\partial\\boldsymbol{\\beta}}\\left(\\mathbf{y}&#94;T\\mathbf{y} - 2\\boldsymbol{\\beta}&#94;T\\mathbf{X}&#94;T\\mathbf{y} + \\boldsymbol{\\beta}&#94;T\\mathbf{X}&#94;T\\mathbf{X}\\boldsymbol{\\beta}\\right)\\\\ &= -2\\mathbf{X}&#94;T\\mathbf{y} + 2\\mathbf{X}&#94;T\\mathbf{X}\\boldsymbol{\\beta}\\quad\\cdots\\left(\\ast\\right)\\\\ &= \\mathbf{0}\\\\ \\therefore\\hat{\\boldsymbol{\\beta}}_{\\text{OLS}} &=\\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{y} \\end{aligned} $$ ここで、$D:=\\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)$ の各要素は、 $$ D_{ij} = \\mathbf{x}_i&#94;T\\mathbf{x}_j = \\begin{cases} N\\mathrm{Var}\\left[\\mathbf{x}_i\\right] = N & (i=j)\\\\ N\\mathrm{Cov}\\left[\\mathbf{x}_i,\\mathbf{x}_j\\right] & (i\\neq j) \\end{cases} $$ LDが存在しない時、つまり、SNP間に相関がない時 $\\left(\\mathrm{Cov}\\left[\\mathbf{x}_i,\\mathbf{x}_j\\right] = 0\\left(i\\neq j\\right)\\right)$ 、全てのSNPが独立なので、$\\hat{\\boldsymbol{\\beta}}_{\\text{OLS}}=\\mathbf{X}&#94;T\\mathbf{y}/N$ とかける。 これより、 $$ \\begin{aligned} \\hat{\\boldsymbol{\\beta}}_{\\text{OLS}_i} &= \\frac{1}{N}\\left(\\mathbf{X}&#94;T\\mathbf{y}\\right)_i\\\\ &= \\frac{1}{N}\\left(\\mathbf{X}&#94;T\\left(\\mathbf{X}\\boldsymbol{\\beta} + \\boldsymbol{\\varepsilon}\\right)\\right)_i\\\\ &= \\left(\\boldsymbol{\\beta} + \\frac{1}{N}\\mathbf{X}&#94;T\\boldsymbol{\\varepsilon}\\right)_i \\end{aligned} $$ と分解できるので、 $$ \\begin{cases} \\begin{aligned} \\mathbb{E}\\left[\\hat{\\boldsymbol{\\beta}}_{\\text{OLS}_i}\\right] &= \\boldsymbol{\\beta}_i\\quad \\left(\\because \\text{equation }(\\ast)\\right)\\\\ \\mathbb{V}\\left[\\hat{\\boldsymbol{\\beta}}_{\\text{OLS}_i}\\right] &= \\boldsymbol{\\varepsilon}&#94;T\\boldsymbol{\\varepsilon} = \\frac{1}{N}\\mathbb{V}\\left[\\boldsymbol{\\varepsilon}\\right] \\end{aligned} \\end{cases} $$ と $\\boldsymbol{\\beta}$ の統計量がわかる。この時、遺伝率が $$\\underbrace{y_k}_{P\\text{: Phenotype}} = \\underbrace{\\sum_i&#94;M\\beta_ix_{ik}}_{G\\text{: Gene}} + \\underbrace{\\varepsilon_k}_{E\\text{: Environment}}$$ において $h&#94;2:=\\mathbb{V}\\left[G\\right]/\\mathbb{V}\\left[P\\right]$ と表されていたことを考えれば、$\\mathbb{V}\\left[\\boldsymbol{\\varepsilon}\\right] = 1-h&#94;2$ であることがわかる。以上より、 $$\\hat{\\boldsymbol{\\beta}}_{\\text{OLS}_i}\\sim\\mathcal{N}\\left(\\beta_i,\\frac{1-h&#94;2}{N}\\right)$$ Q.3-2 （選択課題） LDがなく、Infinitesimal Modelの場合、$\\beta_i|\\tilde{\\beta_i}$ が従う事後分布を求めてください。 解答 Q.3-2,Q.3-3 では、ベイズの定理を用いて $\\beta_i$ の事後分布を求める。 $$p\\left(\\beta_i|\\hat{\\beta}_{\\text{OLS}_i}\\right)\\propto p(\\beta_i)p\\left(\\hat{\\beta}_{\\text{OLS}_i}|\\beta_i\\right)$$ Infinitensimal Model では、 全SNPが小さな効果量を持つ と仮定し、全SNPに等しく分散を割り当てる。 $$\\beta_i\\sim\\mathcal{N}\\left(0,\\frac{h&#94;2}{M}\\right)$$ したがって、 $$ \\begin{aligned} p\\left(\\beta_i|\\hat{\\beta}_{\\text{OLS}_i}\\right) &\\propto p(\\beta_i)p\\left(\\hat{\\beta}_{\\text{OLS}_i}|\\beta_i\\right)\\\\ &=\\mathcal{N}\\left(0,\\frac{h&#94;2}{M}\\right)\\mathcal{N}\\left(\\beta_i,\\frac{1-h&#94;2}{N}\\right)\\\\ &\\propto\\exp\\left(-\\frac{1}{2\\frac{h&#94;2}{M}}\\left(x-0\\right)&#94;2\\right)\\exp\\left(-\\frac{1}{2\\frac{1-h&#94;2}{N}}\\left(x-\\beta_i\\right)&#94;2\\right)\\\\ &=\\exp\\left(-\\frac{1}{2}\\left(\\frac{M}{h&#94;2}x&#94;2 + \\frac{N}{1-h&#94;2}\\left(x&#94;2-2\\beta_ix + \\beta_i&#94;2\\right)\\right)\\right)\\\\ &\\propto\\exp\\left(-\\frac{1}{2}\\left(\\frac{M(1-h)&#94;2+Nh&#94;2}{h&#94;2(1-h)&#94;2}\\right)\\left(x&#94;2 - 2\\frac{Nh&#94;2\\beta_i}{M(1-h)&#94;2+Nh&#94;2}\\right)x\\right)\\\\ &\\propto\\exp\\left(-\\frac{1}{2}\\left(\\frac{M(1-h)&#94;2+Nh&#94;2}{h&#94;2(1-h)&#94;2}\\right)\\left(x - \\frac{Nh&#94;2\\beta_i}{M(1-h)&#94;2+Nh&#94;2}\\right)&#94;2\\right)\\\\ &= \\mathcal{N}\\left(\\frac{Nh&#94;2\\beta_i}{M(1-h)&#94;2+Nh&#94;2},\\frac{h&#94;2(1-h)&#94;2}{M(1-h)&#94;2+Nh&#94;2}\\right) \\end{aligned} $$ Q.3-3 （選択課題） LDがなく、Non-infinitesimal Modelの場合、$\\beta_i|\\tilde{\\beta_i}$ が従う事後分布を求めてください。 解答 Non-infinitensimal Model では、 割合 $\\rho$ のSNPのみ効果量を持つ と仮定し、それらに等しく分散を割り当てる。 $$ \\beta_i\\sim \\begin{cases}\\begin{aligned} &\\mathcal{N}\\left(0,\\frac{h&#94;2}{M_{\\rho}}\\right) & \\left(\\text{with probability $\\rho$}\\right)\\\\ &0 & \\left(\\text{else}\\right) \\end{aligned}\\end{cases} $$ よって、Q.3-2と同様に考えて、 $$ p\\left(\\beta_i|\\hat{\\beta}_{\\text{OLS}_i}\\right)\\sim \\begin{cases}\\begin{aligned} &\\mathcal{N}\\left(\\frac{Nh&#94;2\\beta_i}{M_{\\rho}(1-h)&#94;2+Nh&#94;2},\\frac{h&#94;2(1-h)&#94;2}{M_{\\rho}(1-h)&#94;2+Nh&#94;2}\\right) & \\left(\\text{with probability $\\rho$}\\right)\\\\ &0 & \\left(\\text{else}\\right) \\end{aligned}\\end{cases} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(森下)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-6.html"},{"title":"分子生命科学Ⅲ 第11回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 脳と行動(3) 脳のリズムと睡眠","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-11.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-11.html"},{"title":"5.de Bruijn graphとその表現","text":"定義：ゲノムアセンブリ ※ インデックスは0-originである。 記号・用語 定義 $$\\Sigma=\\{A,C,G,T\\}$$ 塩基の集合 $$\\Sigma&#94;{\\ast}$$ 全ての配列 $$&#94;-:\\Sigma&#94;\\ast\\rightarrow\\Sigma&#94;\\ast$$ 配列の相補塩基対（通常のワトソンクリックの相補対）を取るという演算 $$\\mathbf{G}$$ ゲノム。塩基上の文字列 $$G=|\\mathbf{G}|$$ ゲノムの文字列長 $$r$$ リード。ゲノム $\\mathbf{G}$ からサンプリングされた、 長さ $l \\in \\mathbb{N},l < G$ の配列。 より正確には、$[0\\cdots G-1]$ 上の一様分布に従う確率変数 $X$ の関数 $\\mathbf{G}[X\\cdots X+l)$ なお、スライスがインデックスの範囲を超えた場合は、環状ゲノムのことを示していると考える。$$\\mathbf{G}[X\\cdots X+l] = \\mathbf{G}[X\\cdots G] + \\mathbf{G}[0\\cdots X-G+l] $$ $$R$$ 独立にサンプリングした $N\\in\\mathbb{N}$ 本のリードの集合 $\\{r_1,r_2,\\cdots,r_N\\}$ 各リードの長さは固定長 $l$ とする。 $$c=lN/G$$ 平均深度 （データサイズ/ゲノムサイズ） 。$\\times10.4$ などと記されている。ここで、$\\mathbf{G}$ がわかっていないにも関わらず $G$ がわかるのは、染色体の大きさから推定することができるからである。 深度 何回読まれたか 被覆度 どのくらいの割合が、最低1回読まれるか。 強連結成分 $V&#94;{\\prime}$ 頂点の部分集合で（$V&#94;{\\prime}\\subset V(G)$）、「$V&#94;{\\prime}$ の頂点の中では互いに行き来できる」が、「$V&#94;{\\prime}$ から外には行き来できない（行くだけ、来るだけは可能でも良い。）」もの。 Lemma 1 (Coverage) ゲノム中の任意の場所 $G[i]$ での深度 $C_i$ は、$l\\ll G$ かつ $G$ が十分に大きい時、パラメータ $\\lambda=-c$ のポアソン分布に従う。 Proof $i < G-l$ の時を考える。**ある位置 $i$ を覆うリードは、$i-l+1,\\cdots,i$ の部分から開始されたリード**なので、一様分布からサンプリングしていることと合わせると、位置 $i$ での深度 $C_i$ は、 $$ \\begin{aligned} \\operatorname{Pr}\\left\\{C_{i}=k\\right\\} &=\\left(\\begin{array}{l}{N} \\\\ {k}\\end{array}\\right)\\left(\\frac{l}{G}\\right)&#94;{k}\\left(1-\\frac{l}{G}\\right)&#94;{N-k}\\\\ \\end{aligned} $$ なる確率分布に従う。よって、仮定から**$\\lambda=lN/G$ を固定して $G\\rightarrow\\infty$ の極限を取る**ことで、与式を得る。 Lemma 2 リード長 $l$、ゲノムサイズ $G$、リード数 $N$ のシークエンシングをした際、$c=lN/G$ が一定で $G\\rightarrow\\infty$ とした時、ある位置が少なくとも $1$ つのリードで覆われる確率は $1-e&#94;{-c}$ である。 Proof Lemma1 より、$\\operatorname{Pr}\\left\\{C_{i}=k\\right\\}=\\frac{e&#94;k}{k!}\\exp(-c)$ であるから、求める確率は、 $$1-\\operatorname{Pr}\\left\\{C_{i}=0\\right\\} = 1-e&#94;{-c}$$ 以上より、 「十分多くのリードを読めば、全ての箇所が読まれる確率が1に近づく」 ことがわかる。 またここで、ゲノム $\\mathbf{G}$ がわかっていて、2つのリード $r_i,r_j$ が $l\\ast\\theta\\ (0<\\theta\\leq1)$ だけ重なっていれば、その2つは 「重なった部分から取ってこられた」 と検知できるとする。 Lemma 3 ある場所からリードが始まり、それから $l(1-\\theta)$ 回、新しくリードが始まらない確率を考えれば、連続して取ってこられる領域の長さの期待値が $$l\\ast\\left[\\frac{e&#94;{c(1-\\theta)}-1}{c} + \\theta\\right]$$ となる。 Proof $l\\left(1-\\theta\\right)$ 回、新しくリードが 「始まらない」 確率は、$1-\\theta=s$ とおけば、 $$ \\begin{aligned} \\left(1 - \\frac{N}{G}\\right) &#94; { l\\left(1-\\theta\\right)} &= \\left(\\underbrace{\\left(1 - \\frac{N}{G}\\right)&#94;\\left(-\\frac{G}{N}\\right)}_{\\underset{G\\rightarrow\\infty}{\\Longrightarrow} e}\\right)&#94;{\\left(-\\frac{N}{G}\\right)\\cdot l\\left(1-\\theta\\right)}\\\\ &= \\exp\\left(-cs\\right)\\\\ \\end{aligned} $$ とかける。したがって、 ある連続して取ってこられる領域にあるリードの個数 $J$ は、 失敗（新しく始まらない） 確率 $\\exp\\left(-cs\\right)$ でコイン投げをして、最初に失敗するまでの回数と考えることができる。（ 幾何分布(geometric distribution) ） さらに、ここで各リード $i=1,\\ldots,J$ が 次のリードに当たるまでの長さ を $X_i$ とすると、これは 失敗確率 $1-N/G$ の幾何分布 に従う。よって、求める値は $$\\mathbb{E}\\left[ X_1 + X_2 + \\cdots + X_{J-1} + l\\right]$$ となる。最後のリード開始点から固定長 $l$ の長さ分は確実に取ってこれるので、上式の形となる。また、$J$ 個のリードは 連続して取ってこられる領域内にある ため、 $0\\leq X_i \\leq ls$ となることがわかる。 （これより大きいと、$X_{i-1}$ と $X_i$ が重なったと判断できない。） ここで、 Wald's equation を用いると、 $$\\begin{aligned} &\\mathbb{E}\\left[ X_1 + X_2 + \\cdots + X_{J-1} + l\\right]\\\\ =& \\mathbb{E}\\left[ X_1 + X_2 + \\cdots + X_{J-1} + \\left(X_J - X_J\\right) + l\\right]\\\\ =& \\mathbb{E}\\left[J\\right]\\mathbb{E}\\left[X_1\\right] - \\mathbb{E}\\left[X_J\\right] + l\\\\ \\end{aligned} $$ と整理できる。また、 $$ \\begin{cases} \\mathbb{E}\\left[X_i\\right] &= l\\left[ \\frac{1-\\exp\\left(-cs\\right)}{c} - s\\exp\\left(-cs\\right)\\right]\\\\ \\mathbb{E}\\left[J\\right] &= \\exp\\left(cs\\right) \\end{cases} $$ を用いてこれを解くと、 $$ \\begin{aligned} &\\mathbb{E}\\left[J\\right]\\mathbb{E}\\left[X_1\\right] - \\mathbb{E}\\left[X_J\\right] + l\\\\ =& \\exp\\left(cs\\right) \\cdot l\\left[ \\frac{1-\\exp\\left(-cs\\right)}{c} - s\\exp\\left(-cs\\right)\\right] - l\\left[ \\frac{1-\\exp\\left(-cs\\right)}{c} - s\\exp\\left(-cs\\right)\\right] + l \\\\ =& l \\left[ \\frac{\\exp(cs) - 1}{c} + 1 - s + \\underbrace{s\\exp(-cs)}_{\\underset{c\\rightarrow\\infty}{\\longrightarrow} 0} - \\underbrace{\\frac{1-\\exp(-cs)}{c}}_{\\underset{c\\rightarrow\\infty}{\\longrightarrow} 0} \\right]\\\\ \\Longrightarrow & l \\left[ \\frac{\\exp(cs) - 1}{c} + 1 - s \\right]\\\\ =& l\\left[\\frac{e&#94;{c(1-\\theta)}-1}{c} + \\theta\\right] \\end{aligned} $$ なお、これはアセンブリが完全に実現できた場合の解析であり、 ある種のアセンブリの上界を与えている と捉えることができる。 ところで、ここにおける確証のためのパラメータ $\\theta$ はどのくらいだろうか？これはゲノムの構成に依存する。例えば、ゲノムの中に、長い $A$ の連続が2箇所以上あった場合、ポリAのリードに対しては、$\\theta=1$ でも、私達が思っている意味での確証はできないように思われる。敷衍して言えば、 このパラメータ $\\theta$ は、ゲノム配列とゲノム上の位置に依存するパラメータであって、どちらもアセンブリの前には手に入らないものだ。 さて、では 「これらのリード $R$ から、元のゲノム $\\mathbf{G}$ を復元する方法」 について考える。ここでは、以下の2つを挙げる。 OLC de Bruijn Graph OLC 最も愚直な手法は、以下の OLC である。 (Overlap) 各リード $r_i$ と $r_j$ が、ゲノム上で連続した領域にあるかを判断する。 (Layout) これらの情報を元に、リード $r_i$ を並べる。 (Consensus) 並んだリードにたいして、各位置で、何らかの手法（例えば多数決）で塩基を確定させる。 OLCは、ゲノムアセンブリ初期に行われ、現在でも、ロングリードシークエンサーの発達とともに再び日の目を見ている。しかし、 Overlapは計算が重い ： 「全リードvs.全リード」の計算を行う必要があり、Suffix Array等で前計算を行い（$O(n\\ast l)$）、 SIMD(Single Instruction Multiple Data) 等で並列にDPを行うことで $O(n\\ast l)$ で \"近似的に\" 実行することができるが、それでも重い。 Overlapが真であるかを確かめることが難しい： 「$r_i,r_j$ がアラインメントをすると良いスコアでアラインできる」からといって「$r_i,r_j$ がゲノム上で重複する部分から読まれている」とは言えない。 Layoutは、厳密解を求めるのが難しい： 「各リードをノードとして、overlapしている組をエッジで結んだグラフ」 において、 「全てのノードを一回だけ使って、全てのノードを回るパスを発見すること」 であるが、この問題はNP完全に属するハミルトン路問題と同一である。 といった問題から、 OLCのパラダイムに基づいて、ゲノムアセンブリを実行する際には、発見的方法、制約条件や作業仮説をつけることが必須になる。 de Bruijn Graph 定義：de Bruijn Graph 正の整数 $k$ に対して、$k$-de Bruijn Graphとは、次のような有向グラフ $G=(V,E)$ のことである。（文字に対しては半開区間でスライスを作ることに注意） $V\\subset\\Sigma&#94;k$ $(u,v)\\in E\\Longleftrightarrow u[1,\\ldots,k) = v[0,\\ldots,k-1)$ 簡単に言えば、$k$-mer の集合を、 『後ろ $k-1$ 文字と先頭 $k-1$ 文字が一致したら辺を引く』 というルールに基づいて辺を引けるだけ引いたグラフである。 ここで、リードの集合 $R$ から作られるde Bruijn Graphを、$R$ 中に出現する $k$-merをノードとするde Bruijn Graphだとする。つまり、 $k+1$ より長いリードに関しては、短い断片にバラバラにしてしまう。 （この時 $R$ 中に何回その $k$-merが現れたかを数えてノードに計数としてのせておく。） それでは、このde Bruijn Graphを用いてアセンブリを行う手法について考えるが、これは 「ある $k$ を固定して、与えられたリードから、全ての $k$-merを抽出してde Bruijn Graphを作り、 オイラー閉路 （環状ゲノム） / オイラーパス （線状ゲノム） を構築する」 ことに他ならない。また、このアルゴリズムは 明らかに $O(|E|)$ で計算できる。 一般に、グラフ $G=(V,E)$ のオイラー閉路/パスを探すアルゴリズムを実装する際は、次のようにパス $P$、開始頂点 $v$ を持っておいて、深さ優先探索を一度だけ、グラフ $G$ を破壊しながら、再帰呼び出して行う擬似コードが用いられることが多い。 1. For each nodes in {u | (v,u) ∈ E} 2. (a) Remove (v,u) from E (b) Call DFS(G,u) 3. Push v to P このプログラムは、 スタック数の上限にさえ気をつければ、辺の数に関して線形時間で解ける。 本来は難しいはずの問題が、辺の数に関して線形時間で解けるのは、どこかでおかしいことが起きているということだと思われる。 「ここまでの定式化のどこがおかしかったのだろうか？」 「現実世界で目にするインスタンスの中で、先程のオイラー閉路/オイラーパスとして解けないものには、どのようなものがあるだろうか？」 詳しく見ていく。 相補鎖 リピート（反復配列） シークエンシングエラー 相補鎖 シークエンシングを行う際に、 「相補鎖・鋳型鎖」 のどちらかを選択することは困難であり、またあるリードの対に対して、それらが同じ鎖から出てきたのか、それとも相補鎖から出てきたのかを知ることもできない。このとき、 2つの鎖が共通の $k$-merを持っていない：2つの弱連結成分からなり、オイラー閉路/パスが2つ獲得できる。 2つの鎖が共通の $k$-merを持っている：グラフを巡回する間に別の鎖に乗り移ってしまうことがあり、これに対処するために以下の面倒な実装が必要となる。 各ノードに $k$-merとその相補鎖を対応させる。 ノード間のエッジが必ず両方向に伸びる。 自分自身への多重ループができうる。 エッジに「鋳型鎖-相補鎖」というようなラベル付けをする。 リピート（反復配列） 2つの異なったゲノム上の位置を占める配列が、全く同じ $k$-merを持ってしまう場合（$\\ldots ARB\\ldots CRD\\ldots$）： ここから構築されるde Bruijn Graohから、グラフが「$\\ldots ARB\\ldots CRD\\ldots$」から読んだリードから構成されたものなのか、「$\\ldots ARD\\ldots CRB\\ldots$」から構成されたものなのかを判別することができない。 このようなグラフから、オイラー閉路/オイラーパスを構築できるかも定かではない。（パスが合流するところ（$R[0]$）では 「出次数<入次数」 となるが、分流する場所ではその逆となる。） paired endというシークエンシング法を使えば、元のリードの情報から、オイラー閉路を選んだり・ノードを複製したり・エッジを複製したりしてアセンブリ結果を良くすることができる。 タンデムリピートの場合（$\\ldots RRRR\\ldots RRRRR\\ldots$） ループ構造になり、$R$ の繰り返し回数を推定することが極めて難しい。 ※ これらの難しい問題に対処するために、現代的なアセンブラでは、リピートに関しては、解決できない部分は諦めて、確信が持てる– 必ず正しいような– 配列のみを出力するようになっている。 シークエンシングエラー de Bruijn Graphは、 「全てのリードが完全に正しいこと」 を要求しており、一塩基の誤りが、$k$ 個の誤った頂点と、$k − 1$ 個の誤った辺を誘導する。 （辺の重みを持たない）de Bruijn Graph そのものには、 このようなエラーを訂正する機能がない ため、オイラー閉路/パスを辿る過程でも、エラーかどうか判定できない。 被覆度を上げるためには十分な量のリードを読む （スループットを上げる） 必要があるが、これに伴って、エラーの総数が、リードの個数に線形に増えていってしまう。 対処法としては、以下が挙げられる。 Fastqファイルの信頼度を利用し、 何らかの閾値を用いて塩基の精度が低いものを取り除く。 ほとんど現れない $k$-merに関しては、単に無視する。 de Bruijn Graphの実装において、 ある頂点の近くだけで探索することによって、エラーを検知して、他の辺にマージする。 深さ優先探索をしていく中で、極端にすぐに行き止まる（本当は無い道を進んでしまった）場合は、直前の分岐までをなかったことにする。 実装における工夫：BloomFilter $k = 50$ 程度でde novo アセンブリを行うと、あり得る $k$-mer の数も多くなり、シークエンス深度によっては、数百ギガバイトものメモリを要求することもある。現在では、多数の実装が開発されており、その最適化の方法、実際の問題に対する性能もまちまちだが、今回は Bloom Filter を用いた確率的 de Bruijn Graph について記述する。 BloomFilterとは、1970 年にBloomらによって開発された、確率的データ構造である。このデータ構造は、ハッシュが計算できるような要素の集合に対する表現を与えるもので、空間効率が非常に高くなるほか、集合に対する所属、追加、そして集合同士の和を高速に計算できることが特徴である。 定義：Bloom Filter $M$ を正の整数、$U$ を任意の集合として、$U$ に対して、$p$ 個のハッシュ函数 $h_i:U\\rightarrow\\{1\\cdots M\\}$ があるとする。このとき、集合 $U$、ハッシュ関数 $\\{h_i\\}$ から構成されるBloomFilter $B$ とは、$M$ 長のBit列 $B\\in\\{t,f\\}&#94;M$ のことである。 演算 BloomFilter $B,B&#94;{\\prime}$、要素 $e\\in U$ に対して、次のように演算を定義する。 # 演算 Return 説明 1 add:(BloomFilter:B, U:e) → BloomFilter $$B&#94;{\\prime} \\text { such that } B&#94;{\\prime}[i]=B[i] \\wedge h_{1}(e) \\wedge h_{2}(e) \\cdots \\wedge h_{p}(e) \\text { for all } i \\in\\{1, \\cdots, M\\}$$ 各ハッシュ値を計算して、その番地に true を立てる。 2 has:(BloomFilter:B, U:e) → {t,f} $$B\\left[h_{1}(e)\\right] \\wedge B\\left[h_{2}(e)\\right] \\cdots \\wedge B\\left[h_{p}(e)\\right]$$ 各ハッシュ値を計算して、それらの番地の場所に全て true が立っているか返す。 3 union:(BloomFilter:B, BloomFilter:B′) → BloomFilter $$B\\mid B&#94;{\\prime}$$ 2つのBloomFilterのBitORを取って返す。 1つの要素 $e\\in U$ に対して、$p$ 個のハッシュ値を計算し、それらが 「全て true であれば含まれている」 / 「どれか一つでも false であれば含まれていない」 とする。 一度BloomFilter $B$ に要素 $e$ を挿入( B.add(e) すれば、以降、 この要素が存在するかどうかのクエリ( B.has(e) は、必ず正しい答え( true ) を返す。 union がBitORを取っていることから、 この条件は union 後も満たされる。 挿入していないある要素 $e&#94;{\\prime}$ については、 B.has(e′) は ほとんどの場合 false になる が、偶然、ハッシュ値 $h_1(e&#94;{\\prime})\\cdots h_p(e&#94;{\\prime})$ がすでに全て埋められているときには、間違えて true を返してしまう。 ※ つまり、 BloomFilterには偽陰性はないが、偽陽性はある。 直感的には、 ハッシュ函数が少なすぎると、同じハッシュ函数値の集合を持った要素がたくさん出てきてしまう ハッシュ函数が多すぎると、すぐにBitVectorがすべて true で埋まってしまう。 $N$ 個の要素を挿入した、$M$ 長のBitVectorと $p$ 個のハッシュ函数からなるBloomFilterの偽陽性は、簡単な計算から $\\left(1-e&#94;{-pN/M}\\right)&#94;p$ と近似できる。 この近似から、 最適なハッシュ函数の個数が $p=\\frac{N}{M}\\ln2$ の近くの整数になることがわかる。 このBloomFilterを用いた「ゆるい」de Bruijn Graohが probabilistic de Bruijn Graph である。 de Bruijn Graphにおいて、 「2つのノードに対してエッジが引かれること」 と 「それらの $k-1$ 長の接頭辞と接尾辞が同じこと」 は同値であるため、 ノードを確定すれば、エッジは自動的に決まる。 ゆえに、de Bruijn Graph を表現するためには、ある $k$-mer に対して、 「それが含まれるか否かを答えるメソッド」 が定義できればよいことになる。 このとき問題となるのは、 偽陽性 であり、そのうちの 「偽陽性であるとしてしまった $k$-merが、本当の $k$-mer間にパスを構成する時」 である。（ 小さな引き込み路しか作らないなら、リードに混入するエラーを取り除くアルゴリズムを流用すれば対処可能。 ） うその $k$-merの集合を予め全て列挙 （Black List） しておけば間違いは無くなるが、これだと 情報論理の観点から、一切の圧縮ができなくなる。 そこで、 偽陽性のうちの重大なもの（`B.has(e)`とクエリされる $e$ のみ） を列挙しようと考える。 定義：Critical False Positive 記号・用語 定義 definition $$\\mathcal{S}$$ リード中の $k$-merの集合 true positive nodes $$\\mathcal{E}$$ $\\mathcal{S}$ の要素と直接辺で結ばれている $k$-mer。言い換えれば、グラフを巡回する際に、クエリになる $k$-merの集合 extensions of nodes from $\\mathcal{S}$ $$\\mathcal{P}$$ $e\\in\\mathcal{E}$ で BloomFilter $B$ が B.has(e) = true を返す $k$-merの集合 all elements of $\\mathcal{E}$ for which the Bloom filter answers yes . ここで、我々が気をつけるべき偽陽性は、 『$\\mathcal{P}$ のうち、$\\mathcal{S}$ には無いようなもの』 である。このことを Critical False Positive と呼ぶ。$\\left(cFP = \\mathcal{P}\\setminus\\mathcal{S}\\right)$ 課題1: Bloom Filter(One of two) 次の三題から二題を選んで解け。 集合 $U$ から $N$ 個の要素をランダムにサンプリングして、$M$ 長の BitVector を使った BloomFilter で表現する時、偽陽性が最も小さくなるようなハッシュ関数の個数を求めよ。ハッシュ関数は $U$ の要素を、$\\{1,\\cdots,M\\}$ までの値に偏りなくマップすると考えてよい。 $M$ を $3$ 以上の素数とする。$A,B$ を、$\\{1,\\cdots,M\\}$ 上の一様分布に独立に従うものとする。確率変数 $Y_i=A\\ast i+B, i=1,\\cdots,t$ について、 『$i\\neq j\\Rightarrow\\text{$Y_i$ and $Y_j$ are independent.}$』 であることを示せ。 ただし、素数 $M$ の剰余類で、連立方程式 $y_i=a\\ast i+b, y_j=a\\ast j+b$ は、$a,b$ について必ず一意に解けることを用いてもよい。ここから、BloomFilter において、$p$ 個のハッシュ関数をどのように構築すればよいか示せ。ハッシュ函数についてより知りたい場合は \"Adam Kirsch and Michael Mitzenmacher. Less hashing, same performance: Building abetter Bloom filter.Random Structures and Algorithms, 33(2):187–218, sep 2008.\" などを参考にせよ。 k-merの集合 $S$ に対して、CriticalFalseNegative を $O(\\|S\\|k)$ で構成するアルゴリズムを与えよ。ランダムアクセスメモリを仮定してよく、メモリ空間は必要な分だけ好きに確保できるとしてよい。 解答 1 Bit Vectorの $i$ 番目の位置に true を立てるハッシュ値の数を $B[i]$ で表す。ここで、$Np$ 個のハッシュ値が一様分布に従っていると仮定すると、 $$ \\begin{aligned} \\operatorname{Pr}\\left\\{B[i]=k\\right\\} &=\\left(\\begin{array}{l}{pN} \\\\ {k}\\end{array}\\right)\\left(\\frac{1}{M}\\right)&#94;{k}\\left(1-\\frac{1}{M}\\right)&#94;{pN-k}\\\\ &=\\frac{(pN)!}{k!(pN-k)!}\\left(\\frac{\\lambda}{pN}\\right)&#94;k\\left(1-\\frac{\\lambda}{pN}\\right)&#94;{-k}\\left(1-\\frac{\\lambda}{pN}\\right)&#94;{pN}\\quad\\left(\\because \\lambda=pN/M\\right)\\\\ &=\\frac{\\lambda&#94;k}{k!} {\\underbrace{\\left(1-\\frac{\\lambda}{pN}\\right)}_{\\underset{pN\\rightarrow\\infty}{\\longrightarrow}e&#94;{-\\lambda}}}&#94;{pN} {\\underbrace{\\left(1-\\frac{\\lambda}{pN}\\right)}_{{\\underset{pN\\rightarrow\\infty}{\\longrightarrow1}}}}&#94;{-k} \\underbrace{\\frac{(pN)!}{(pN-k)!(pN)&#94;k}}_{\\underset{pN\\rightarrow\\infty}{\\longrightarrow1}}\\\\ &\\underset{pN\\rightarrow\\infty}{\\longrightarrow} e&#94;{-\\lambda}\\frac{\\lambda&#94;k}{k!} \\end{aligned} $$ なる確率分布に従う。従って、偽陽性となる確率(False Positive Rate; FPR)は、以下で 近似 できる。 $$ \\begin{aligned} \\operatorname{FPR}(p) &= \\left(1-\\operatorname{Pr}\\left\\{B[i]=0\\right\\}\\right)&#94;p\\\\ &= \\left(1-e&#94;{-\\lambda}\\right)&#94;p\\\\ &= \\left(1 - e&#94;{-pN/M}\\right)&#94;p \\end{aligned} $$ ここで、 $$ \\begin{aligned} \\frac{\\partial\\ln\\left(\\operatorname{FPR}(p)\\right)}{\\partial p} &= \\frac{\\partial}{\\partial p}\\left(p\\ln\\left(1 - e&#94;{-pN/M}\\right)\\right)\\\\ &=\\ln\\left(1 - e&#94;{-pN/M}\\right) + \\frac{pN}{M}\\frac{e&#94;{-pN/M}}{1 - e&#94;{-pN/M}}\\\\ \\therefore\\left.\\frac{\\partial\\ln\\left(\\operatorname{FPR}(p)\\right)}{\\partial p}\\right|_{p = \\frac{M}{N}\\ln2} &=\\ln\\left(1 - \\frac{1}{2}\\right) + \\ln2\\frac{1/2}{1 - 1/2}\\\\ &= -\\ln2 + \\ln2 \\\\ &= 0 \\end{aligned} $$ となるため、最適なハッシュ函数の個数は整数値であるから、 $p = \\frac{M}{N}\\ln2$ 付近の整数 2 素数 $M$ の剰余類で、連立方程式 $$\\begin{cases} y_i&=a\\ast i+b\\\\ y_j&=a\\ast j+b \\end{cases}$$ は、$a,b$ について必ず一意に解けることを用いれば、$y_i$ が与えられた時、 $$y_j = a\\ast \\left(j-i\\right) + y_i$$ となり、これは $i\\neq j$ の時、$y_i$ と独立になる。 従って、 $$h_i = A\\ast i + B\\quad\\operatorname{mod} M$$ というハッシュ関数を $p$ 個用意すれば良いことになる。 3 Critical False Positive は、「 『リード中のk-merの集合 $\\mathcal{S}$ の要素と直接辺で結ばれている $k$-merで、BloomFilter $B$ が B.has(e) = true を返すもの』 のうち、$\\mathcal{S}$ に無いようなもの」を指す。 したがって、以下のアルゴリズムで、$O(\\|S\\|k)$ によって Critical False Positive の構築が可能である。 cFP = [] P = [] for kmer in S : for e in kmer . extensions : if B . has ( e ): # O(1) # P.append(e) if e not in S : # O(k): Using Trie Tree cFP . append ( e ) 課題2: Information theory $n$ 通りのものから一つを選び、それを表現するときは、 $\\log n$ bit が必要になる（$n$ 個を『辞書式順序』で並べて、何番目かを伝えれば良い）。 $n$ 通り値を取り得るものから、重複無しに $m$ 個選んだ集合を表す（i.e, $V\\in U, |U|=n,|V|=m$ なる $V$ を表す）場合には、$\\Omega\\left(\\log \\left(\\begin{array}{c}{n} \\\\ {m}\\end{array}\\right)\\right)$ bit 必要になる。 ここで、$k$-de Bruijn Graph を表現するときは、頂点、すなわち $\\Sigma&#94;k$ の任意の部分集合を表現すれば良い。したがって、$k$-de Bruijn Graph を表現するには、$k$、ノードの個数 $n$ に続けて、どの $k$- mer を選んだかを伝えなければならず、最低でも以下のbitが必要になる（桁数を表すのに追加でbitが使われる）。 $$ \\Omega\\left(\\log k+\\log n+\\log \\left(\\begin{array}{l}{\\Sigma&#94;{k}} \\\\ {n}\\end{array}\\right)\\right) $$ 次の問いに答えよ。 一般に、$n$ 通りの値を取り得るものから、重複無しに $m$ 個選んだ集合を Bloom Filter で表現すると、上記で示した下界より小さくできる。これは下界を破っているように見えるが、そうではない理由を説明せよ（つまり、この BloomFilter は対象の集合を表せていないことを示せ） $k$-de Bruijn graph を、二つの BloomFilter を使って表現することを考える。このデータ構造は複数の BloomFilter からなり、さらに、de Bruijn graph をたどるようなクエリに対しては偽陽性はない。しかも、必要なbit数は上記の下界よりも小さい。一見、この状態は下界を破っているように見えるが、実はそうではない理由を説明せよ。 解答 In [1]: raise KeyboardInterrupt ( \"I didn't understand what the problem statement means.\" ) --------------------------------------------------------------------------- KeyboardInterrupt Traceback (most recent call last) in 1 raise KeyboardInterrupt( ----> 2 \"I didn't understand what the problem statement means.\" 3 ) KeyboardInterrupt : I didn't understand what the problem statement means. 課題3: de Bruijn Graph(Optional) Remark 以下で用いるデータセットは、人為的に作成されており、次のような性質を満たす。 カバレッジは十分量ある（被覆度は1になるように設計してある） 各リードは必ずゲノム中の位置からサンプリングされているし、エラーはない。 どちらか一方の鎖からしかリードはサンプリングされていない。つまり、相補鎖について考える必要はない。 あるkがあり、このkを用いて作った k-mer de Bruijn Graph は \"ほとんど\" リニアになっている。つまり、ほとんどのノードの入次数と出次数は1になる。 （確率的であれ、別のものであれ）de Bruijn Graph を実装し、 .fasta fileと整数 $k$ を入力として、何らかの .fasta fileを出力するようなプログラムを書け（注：頑張りすぎないこと。ノードを選んで探索すればよい）。 余裕がある人は、2つのデータセット tiny と large に対して、何か $k$ を決めて、リードから $k$-deBruijn Graph を構築して、その上で何かしらのパスを求めてみよ。 参考のために、リードをサンプリングした配列もデータセットに含めておいた。 解答 In [2]: from kerasy.utils import read_fastseq In [3]: true_seq = read_fastseq ( \"dataset/tiny/assumed_genome_size1K_readlength_100.fasta\" )[ 0 ] reads = read_fastseq ( \"dataset/tiny/tiny.fa\" ) In [4]: from kerasy.search.debruijn import kmer_deBruijnGraph k = 89 model = kmer_deBruijnGraph ( k = k ) model . build ( reads ) In [5]: print ( f \"num sequences : { model . num_reads } \" ) print ( f \"average length: { model . ave_read_length } \" ) num sequences : 150 average length: 100.0 model . export_graphviz ( f \"deBruijnGraph_ { k } mer.png\" ) In [6]: from kerasy.Bio.alignment import SmithWaterman score_model = SmithWaterman () score_model . load_params () Loading Parameters from /Users/iwasakishuto/Github/portfolio/Kerasy/kerasy/utils/default_params/SmithWaterman.json In [7]: print ( f \"length of the true sequence: { len ( true_seq ) } \" ) print ( true_seq ) length of the true sequence: 1000 GAAGACTGCACGTTGCATATTTGCCATCATCTATGGACCGTGCGAGAATTCAATACTAATCCTGTCCGCAGTTAGTTTAAATCCGACGGGCTCAGTTCGCTAGTAGAACCAACGCGCTCTCCAGGAATCTAACAATCAACTTCTTCATTGCCGGTAACCTTGTTCAATAACACTAACACCTTTCTAAGCCACCCGTAACAGTACTCCTTCCTGGGCTGTTCTACAACAAGGAGAGGTTTACGTTTGACCCGGTTTCCATTTATTTAACAGCGGCTTATTATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATCCCTAGGTAAACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTGAGTCAACGCGGGCCTAACCAGTAGGTCGGTGCAGTACTGAAGACAAGGCGATCAAGGCGTCCAAGAGCGCATGCCCCGACCGAAGGTACATCCCGTGCTGTAGACGGACAGATCTTGCCCATCGGGTTTCCATTTATTTAACAGCGGCTTATTATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATCCCTAGGTAAACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTACTTATCAAATTAAGTAGTCATCCGTCACACGAGACGGAAGCCTTGCCGGTGACCGTAACCTAGTTACTACGCAGAGGACACTTGTCACTCTCCTTCGAAACTCTACACCGGGGAAACTCGTCTCCATCCCCTTTGCATAGGTGTCTTCATTAAAAGTGTCATAGACTCAGACGTTCGCCTTCCTGAACCAACAGGATCAGCGGCTCCCGGCCACCACTTGGATTACCGCCAGAGGCCATCGCTGCGCGAGTTCTGGAAAAAGATTGAAACCAGCGTCTAACTTCTCTTACAGGCACAATCTCAGGTCGTTTATCCAGAATGACCACAAATCTCGGTAAAATCTTTCTCGGCCTCTTACTCGGTGTGGACGGCGC In [8]: for init in model . inits : result_trail = model . assemble ( init ) for result in result_trail : score_model . align ( true_seq , result , verbose =- 1 ) print () print ( \"*\" * 60 ) Model: SmithWaterman Alignment score: 102.000 ============================================================================= A: [0858] AGGCCATCGCTGCGCGAGTTCTGGAAAAAGATTGAAACCAGCGTCTAACTTCTCTTACAG [0918] B: [0000] AGGCCATCGCTGCGCGAGTTCTGGAAAAAGATTGAAACCAGCGTCTAACTTCTCTTACAG [0060] A: [0918] GCACAATCTCAGGTCGTTTATCCAGAATGACCACAAATCTCG [0959] B: [0060] GCACAATCTCAGGTCGTTTATCCAGAATGACCACAAATCTCG [0101] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 107.000 ============================================================================= A: [0785] CATAGACTCAGACGTTCGCCTTCCTGAACCAACAGGATCAGCGGCTCCCGGCCACCACTT [0845] B: [0000] CATAGACTCAGACGTTCGCCTTCCTGAACCAACAGGATCAGCGGCTCCCGGCCACCACTT [0060] A: [0845] GGATTACCGCCAGAGGCCATCGCTGCGCGAGTTCTGGAAAAAGATTG [0891] B: [0060] GGATTACCGCCAGAGGCCATCGCTGCGCGAGTTCTGGAAAAAGATTG [0106] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 63.000 ============================================================================= A: [0937] ATCCAGAATGACCACAAATCTCGGTAAAATCTTTCTCGGCCTCTTACTCGGTGTGGACGG [0997] B: [0000] ATCCAGAATGACCACAAATCTCGGTAAAATCTTTCTCGGCCTCTTACTCGGTGTGGACGG [0060] A: [0997] CGC [0999] B: [0060] CGC [0062] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 115.000 ============================================================================= A: [0580] GTAAACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTACTTATCAAATTAAG [0640] B: [0000] GTAAACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTACTTATCAAATTAAG [0060] A: [0640] TAGTCATCCGTCACACGAGACGGAAGCCTTGCCGGTGACCGTAACCTAGTTACTA [0694] B: [0060] TAGTCATCCGTCACACGAGACGGAAGCCTTGCCGGTGACCGTAACCTAGTTACTA [0114] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 102.000 ============================================================================= A: [0608] TATCTTATTGCACGCGTACTTATCAAATTAAGTAGTCATCCGTCACACGAGACGGAAGCC [0668] B: [0000] TATCTTATTGCACGCGTACTTATCAAATTAAGTAGTCATCCGTCACACGAGACGGAAGCC [0060] A: [0668] TTGCCGGTGACCGTAACCTAGTTACTACGCAGAGGACACTTG [0709] B: [0060] TTGCCGGTGACCGTAACCTAGTTACTACGCAGAGGACACTTG [0101] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 108.000 ============================================================================= A: [0818] AGGATCAGCGGCTCCCGGCCACCACTTGGATTACCGCCAGAGGCCATCGCTGCGCGAGTT [0878] B: [0000] AGGATCAGCGGCTCCCGGCCACCACTTGGATTACCGCCAGAGGCCATCGCTGCGCGAGTT [0060] A: [0878] CTGGAAAAAGATTGAAACCAGCGTCTAACTTCTCTTACAGGCACAATC [0925] B: [0060] CTGGAAAAAGATTGAAACCAGCGTCTAACTTCTCTTACAGGCACAATC [0107] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 117.000 ============================================================================= A: [0146] ATTGCCGGTAACCTTGTTCAATAACACTAACACCTTTCTAAGCCACCCGTAACAGTACTC [0206] B: [0000] ATTGCCGGTAACCTTGTTCAATAACACTAACACCTTTCTAAGCCACCCGTAACAGTACTC [0060] A: [0206] CTTCCTGGGCTGTTCTACAACAAGGAGAGGTTTACGTTTGACCCGGTTTCCATTTAT [0262] B: [0060] CTTCCTGGGCTGTTCTACAACAAGGAGAGGTTTACGTTTGACCCGGTTTCCATTTAT [0116] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 112.000 ============================================================================= A: [0873] GAGTTCTGGAAAAAGATTGAAACCAGCGTCTAACTTCTCTTACAGGCACAATCTCAGGTC [0933] B: [0000] GAGTTCTGGAAAAAGATTGAAACCAGCGTCTAACTTCTCTTACAGGCACAATCTCAGGTC [0060] A: [0933] GTTTATCCAGAATGACCACAAATCTCGGTAAAATCTTTCTCGGCCTCTTACT [0984] B: [0060] GTTTATCCAGAATGACCACAAATCTCGGTAAAATCTTTCTCGGCCTCTTACT [0111] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 106.000 ============================================================================= A: [0219] TCTACAACAAGGAGAGGTTTACGTTTGACCCGGTTTCCATTTATTTAACAGCGGCTTATT [0279] B: [0000] TCTACAACAAGGAGAGGTTTACGTTTGACCCGGTTTCCATTTATTTAACAGCGGCTTATT [0060] A: [0279] ATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATC [0324] B: [0060] ATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATC [0105] ============================================================================= ************************************************************ Model: SmithWaterman Alignment scoreodel: SmithWaterman Alignment score: 96.000 ============================================================================= A: [0000] GAAGACTGCACGTTGCATATTTGCCATCATCTATGGACCGTGCGAGAATTCAATACTAAT [0060] B: [0018] GAAGACTGCACGTTGCATATTTGCCATCATCTATGGACCGTGCGAGAATTCAATACTAAT [0078] A: [0060] CCTGTCCGCAGTTAGTTTAAATCCGACGGGCTCAGT [0095] B: [0078] CCTGTCCGCAGTTAGTTTAAATCCGACGGGCTCAGT [0113] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 101.000 ============================================================================= A: [0359] ATCTTATTGCACGCGTGAGTCAACGCGGGCCTAACCAGTAGGTCGGTGCAGTACTGAAGA [0419] B: [0000] ATCTTATTGCACGCGTGAGTCAACGCGGGCCTAACCAGTAGGTCGGTGCAGTACTGAAGA [0060] A: [0419] CAAGGCGATCAAGGCGTCCAAGAGCGCATGCCCCGACCGAA [0459] B: [0060] CAAGGCGATCAAGGCGTCCAAGAGCGCATGCCCCGACCGAA [0100] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 100.000 ============================================================================= A: [0549] TCACCTTTACGACTCTCTCATTAATCCCTAGGTAAACCTTGCATCCACGAACTAATTGCT [0609] B: [0000] TCACCTTTACGACTCTCTCATTAATCCCTAGGTAAACCTTGCATCCACGAACTAATTGCT [0060] A: [0609] ATCTTATTGCACGCGTACTTATCAAATTAAGTAGTCATCC [0648] B: [0060] ATCTTATTGCACGCGTACTTATCAAATTAAGTAGTCATCC [0099] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 69.000 ============================================================================= A: [0000] GAAGACTGCACGTTGCATATTTGCCATCATCTATGGACCGTGCGAGAATTCAATACTAAT [0060] B: [0039] GAAGACTGCACGTTGCATATTTGCCATCATCTATGGACCGTGCGAGAATTCAATACTAAT [0099] A: [0060] CCTGTCCGC [0068] B: [0099] CCTGTCCGC [0107] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 102.000 ============================================================================= A: [0898] GCGTCTAACTTCTCTTACAGGCACAATCTCAGGTCGTTTATCCAGAATGACCACAAATCT [0958] B: [0000] GCGTCTAACTTCTCTTACAGGCACAATCTCAGGTCGTTTATCCAGAATGACCACAAATCT [0060] A: [0958] CGGTAAAATCTTTCTCGGCCTCTTACTCGGTGTGGACGGCGC [0999] B: [0060] CGGTAAAATCTTTCTCGGCCTCTTACTCGGTGTGGACGGCGC [0101] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 210.000 ============================================================================= A: [0396] GTAGGTCGGTGCAGTACTGAAGACAAGGCGATCAAGGCGTCCAAGAGCGCATGCCCCGAC [0456] B: [0000] GTAGGTCGGTGCAGTACTGAAGACAAGGCGATCAAGGCGTCCAAGAGCGCATGCCCCGAC [0060] A: [0456] CGAAGGTACATCCCGTGCTGTAGACGGACAGATCTTGCCCATCGGGTTTCCATTTATTTA [0516] B: [0060] CGAAGGTACATCCCGTGCTGTAGACGGACAGATCTTGCCCATCGGGTTTCCATTTATTTA [0120] A: [0516] ACAGCGGCTTATTATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATCC [0576] B: [0120] ACAGCGGCTTATTATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATCC [0180] A: [0576] CTAGGTAAACCTTGCATCCACGAACTAATT [0605] B: [0180] CTAGGTAAACCTTGCATCCACGAACTAATT [0209] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 208.000 ============================================================================= A: [0025] ATCATCTATGGACCGTGCGAGAATTCAATACTAATCCTGTCCGCAGTTAGTTTAAATCCG [0085] B: [0000] ATCATCTATGGACCGTGCGAGAATTCAATACTAATCCTGTCCGCAGTTAGTTTAAATCCG [0060] A: [0085] ACGGGCTCAGTTCGCTAGTAGAACCAACGCGCTCTCCAGGAATCTAACAATCAACTTCTT [0145] B: [0060] ACGGGCTCAGTTCGCTAGTAGAACCAACGCGCTCTCCAGGAATCTAACAATCAACTTCTT [0120] A: [0145] CATTGCCGGTAACCTTGTTCAATAACACTAACACCTTTCTAAGCCACCCGTAACAGTACT [0205] B: [0120] CATTGCCGGTAACCTTGTTCAATAACACTAACACCTTTCTAAGCCACCCGTAACAGTACT [0180] A: [0205] CCTTCCTGGGCTGTTCTACAACAAGGAG [0232] B: [0180] CCTTCCTGGGCTGTTCTACAACAAGGAG [0207] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 100.000 ============================================================================= A: [0844] TGGATTACCGCCAGAGGCCATCGCTGCGCGAGTTCTGGAAAAAGATTGAAACCAGCGTCT [0904] B: [0000] TGGATTACCGCCAGAGGCCATCGCTGCGCGAGTTCTGGAAAAAGATTGAAACCAGCGTCT [0060] A: [0904] AACTTCTCTTACAGGCACAATCTCAGGTCGTTTATCCAGA [0943] B: [0060] AACTTCTCTTACAGGCACAATCTCAGGTCGTTTATCCAGA [0099] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 109.000 ============================================================================= A: [0373] GTGAGTCAACGCGGGCCTAACCAGTAGGTCGGTGCAGTACTGAAGACAAGGCGATCAAGG [0433] B: [0000] GTGAGTCAACGCGGGCCTAACCAGTAGGTCGGTGCAGTACTGAAGACAAGGCGATCAAGG [0060] A: [0433] CGTCCAAGAGCGCATGCCCCGACCGAAGGTACATCCCGTGCTGTAGACG [0481] B: [0060] CGTCCAAGAGCGCATGCCCCGACCGAAGGTACATCCCGTGCTGTAGACG [0108] ============================================================================= ************************************************************ Model: SmithWaterman Alignment scoreodel: SmithWaterman Alignment score: 151.000 ============================================================================= A: [0274] TTATTATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATCCCTAGGTAA [0334] B: [0000] TTATTATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATCCCTAGGTAA [0060] A: [0334] ACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTGAGTCAACGCGGGCCTAAC [0394] B: [0060] ACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTGAGTCAACGCGGGCCTAAC [0120] A: [0394] CAGTAGGTCGGTGCAGTACTGAAGACAAGGC [0424] B: [0120] CAGTAGGTCGGTGCAGTACTGAAGACAAGGC [0150] ============================================================================= Model: SmithWaterman Alignment score: 110.000 ============================================================================= A: [0524] TTATTATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATCCCTAGGTAA [0584] B: [0000] TTATTATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATCCCTAGGTAA [0060] A: [0584] ACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTACTTATCAA [0633] B: [0060] ACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTACTTATCAA [0109] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 110.000 ============================================================================= A: [0246] ACCCGGTTTCCATTTATTTAACAGCGGCTTATTATTAGCCATCGACTCTGAGTTCACCTT [0306] B: [0000] ACCCGGTTTCCATTTATTTAACAGCGGCTTATTATTAGCCATCGACTCTGAGTTCACCTT [0060] A: [0306] TACGACTCTCTCATTAATCCCTAGGTAAACCTTGCATCCACGAACTAATT [0355] B: [0060] TACGACTCTCTCATTAATCCCTAGGTAAACCTTGCATCCACGAACTAATT [0109] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 119.000 ============================================================================= A: [0185] AAGCCACCCGTAACAGTACTCCTTCCTGGGCTGTTCTACAACAAGGAGAGGTTTACGTTT [0245] B: [0000] AAGCCACCCGTAACAGTACTCCTTCCTGGGCTGTTCTACAACAAGGAGAGGTTTACGTTT [0060] A: [0245] GACCCGGTTTCCATTTATTTAACAGCGGCTTATTATTAGCCATCGACTCTGAGTTCACC [0303] B: [0060] GACCCGGTTTCCATTTATTTAACAGCGGCTTATTATTAGCCATCGACTCTGAGTTCACC [0118] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 105.000 ============================================================================= A: [0340] CATCCACGAACTAATTGCTATCTTATTGCACGCGTGAGTCAACGCGGGCCTAACCAGTAG [0400] B: [0000] CATCCACGAACTAATTGCTATCTTATTGCACGCGTGAGTCAACGCGGGCCTAACCAGTAG [0060] A: [0400] GTCGGTGCAGTACTGAAGACAAGGCGATCAAGGCGTCCAAGAGCG [0444] B: [0060] GTCGGTGCAGTACTGAAGACAAGGCGATCAAGGCGTCCAAGAGCG [0104] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 100.000 ============================================================================= A: [0567] CATTAATCCCTAGGTAAACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTAC [0627] B: [0000] CATTAATCCCTAGGTAAACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTAC [0060] A: [0627] TTATCAAATTAAGTAGTCATCCGTCACACGAGACGGAAGC [0666] B: [0060] TTATCAAATTAAGTAGTCATCCGTCACACGAGACGGAAGC [0099] ============================================================================= ************************************************************ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(森下)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-5.html"},{"title":"生命情報表現論 第5回","text":"生命科学におけるネットワークデータの表現法と知識抽出","tags":"生命情報表現論","url":"https://iwasakishuto.github.io/University/3A/生命情報表現論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生命情報表現論-5.html"},{"title":"4.Boosting","text":"統計的学習理論: PAC learning ここでは 二値分類(binary classification) の問題を考える。この問題の目標は、 「与えられた訓練データ $(\\mathbf{x}_i,y_i): \\mathbf{x}_i\\in\\mathcal{X},y_i\\in\\{+1,-1\\},1\\leq i\\leq N$ をもとに、良い分類器 $H:\\mathcal{X}\\rightarrow\\{+1,-1\\}$ を見つけること」 である。 理想的な状況として、 「$\\mathbf{x}_i$ が $y_i$ を完全に決定している」 すなわち 「$y_i = c(\\mathbf{x}_i)$ となる対応 $c$ が存在する」 ような設定を考える。ここで $c$ が任意の関数から選ばれる場合、有限個の学習データから $c$ の値を学習することは不可能となってしまう。つまり、学習が可能であるためには、 「$c$ が関数のより小さなクラス $\\mathcal{C}$（例えば、「滑らかな」関数）から選ばれている $(c\\in\\mathcal{C})$」 という設定が必要である。このように、 問題の学習可能性は、$\\mathcal{C}$ の性質として捉えることができる。 特に大事なのが、 Probably Approximately Correct (PCA) learnable の概念である。 strong learnability: 任意の $P$、正数 $\\epsilon,\\delta>0$ に対し、十分な訓練データが利用できれば、 汎化誤差 $\\epsilon$ 未満となるような分類器 を、$1-\\delta$ 以上の確率で返せる時、$\\mathcal{C}$ は strong PAC learnable であるという。 weak learnability: 任意の $P$、正数 $\\delta>0$ に対し、十分な訓練データが利用できれば、 汎化誤差 $0.5$ 未満となるような分類器 を、$1-\\delta$ 以上の確率で返せる時、$\\mathcal{C}$ は weakly PAC learnable であるという。 なお、AdaBoostは、 ブースティング(weakly PAC learnable → strongly PAC learnable) を達成できるアルゴリズムである。 ※ 学習データにノイズがある場合、 「$\\mathbf{x}_i$ が $y_i$ を完全に決定している」 という理想的な状況から外れてしまうが、 この場合に関しても拡張して論じられている。 一方で、この状況において学習で推定するべき $c$ に相当するのは条件付き確率 $P\\left(y|\\mathbf{x}\\right)$ であるとも考えられる。 AdaBoost weak learnability と類似の概念である empirical weak learnability のみ仮定し、AdaBoostが与えられた訓練データに対する訓練誤差をいくらでも小さくできる。 empirical weak learnability: 任意の訓練データと、任意の重み $w_i(0\\leq w_i\\leq1)$ に対して、重み付き訓練誤差 $\\sum_{i=1}&#94;Nw_i\\mathbb{1}\\{H(\\mathbf{x}_i)\\neq y_i\\}$ が $0.5$ 未満となる $H$ を選べる。 アルゴリズム 分類器 $h_t$ を、重み付き訓練誤差 $\\sum_{i=1}&#94;Nw_{i,t}\\mathbf{1}\\{h_t(\\mathbf{x}_i)\\neq y_i\\}$ が $0.5$ 未満となるように選ぶ。 重みを更新する：$w_{t+1,i} = w_{t,i}\\times\\exp\\{-\\alpha_ty_ih_t(\\mathbf{x}_i)\\}/Zt$ ただし、ここで $\\alpha_t = (1/2)\\times\\ln\\left((1-e_t)/e_t\\right)$ $Z_t$ は規格化定数で $\\sum_i&#94;Nw_{t+1,i} = 1$ が成り立つように決める。 $T$ 回の繰り返しが終了したら、最後に $H(\\mathbf{x}) = \\text{sign}\\left(\\sum_t&#94;T\\alpha_th_t(\\mathbf{x})\\right)$ を返して終了。 def AdaBoost ( N , data , T ): \"\"\" AdaBoost Algorithm. @params N : Total data num. @params data: Training data.| x in X, y in [+1,-1] @params T : Iteration count. \"\"\" # Initialization. W = [ 1 / N for _ in range ( N )] ALPHA = [ 0 for _ in range ( T )] H = [] # Iteration. for t in range ( T ): # select a classifier \"h\" whose Weighted training error \"e\" is smaller than 0.5 h , e = randomSelectClassifier ( W ) ALPHA [ t ] = ( 1 / 2 ) * log (( 1 - e ) / e ) W = W * [ exp ( - alpha [ t ] * y * h ( x )) for ( x , y ) in data ] Z = sum ( W ) # Normalized constant. W = [ w / Z for w in W ] H . append ( h ) def model ( x ): return 1 if sum ([ alpha * h ( x ) for ( alpha , h ) in zip ( ALPHA , H )]) >= 0 else - 1 return model ※ randomSelectClassifier がweak learner の仕事である。理論解析が成り立つためにこの関数が必ず成功して分類器を選ぶことが要求されるが、あくまで理論的保証を得るための要求であり、実際には厳密にこれを満たす weak learner が作れないこともある。その場合は、その時点で繰り返しから抜けて最後のモデルを返すのが一般的である。 問1 $Z_t$ を $e_t$ で表す式を導いて、$e_t<1/2$ の時、$Z_t<1$ であることを確かめよ。 解答 $$ \\begin{aligned} Z_t &= \\sum_i&#94;Nw_{t,i}\\times\\exp\\left(-\\alpha_ty_ih_t\\left(\\mathbf{x}_i\\right)\\right)\\\\ &= \\sum_i&#94;Nw_{t,i}\\times\\exp\\left(-\\alpha_ty_ih_t\\left(\\mathbf{x}_i\\right)\\right)\\left(\\mathbf{1}\\left\\{h_t(\\mathbf{x}_i)\\neq y_i\\right\\} + \\mathbf{1}\\left\\{h_t(\\mathbf{x}_i)= y_i\\right\\}\\right)\\\\ &= e_t\\times\\exp(\\alpha_t) + (1-e_t)\\times\\exp(-\\alpha_t)\\\\ &= e_t\\times\\left(\\frac{1-e_t}{e_t}\\right)&#94;{1/2} + \\left(1-e_t\\right)\\left(\\frac{1-e_t}{e_t}\\right)&#94;{-1/2}\\\\ &= 2\\sqrt{e_t\\left(1-e_t\\right)}\\\\ & < 2\\times\\sqrt{1/4} = 1\\qquad\\left(\\because0 < e_t < 1/2\\right) \\end{aligned}\\\\ $$ 訓練誤差の評価式 ここで、最終分類器 $H$ による訓練誤差は、 $$ \\begin{aligned} & \\sum_{i}&#94;{N}(1 / N) \\mathbf{1}\\left\\{H\\left(\\mathbf{x}_{i}\\right) \\neq y_{i}\\right\\} \\\\ =& \\sum_{i}&#94;{N} w_{1, i} \\mathbf{1}\\left\\{\\operatorname{sign}\\left(\\sum_{t=1}&#94;T\\alpha_th_t\\left(\\mathbf{x}_{i}\\right)\\right) \\neq y_{i}\\right\\} \\qquad\\left(\\because w_{1,i}=1/N\\right)\\\\ \\leq & \\sum_{i}&#94;{N} w_{1, i} \\underbrace{\\exp \\left(-y_{i} \\sum_{t=1}&#94;T\\alpha_th_t\\left(\\mathbf{x}_{i}\\right)\\right)}_{\\begin{cases}\\geq1 &\\text{ if $\\operatorname{sign}()\\neq y_i$ }\\\\ > 0 &\\text{otherwise.}\\end{cases}}\\\\ = & \\sum_i&#94;Nw_{1,i}\\prod_{t=1}&#94;T\\exp\\left(-\\alpha_ty_ih_t\\left(\\mathbf{x}_i\\right)\\right)\\\\ = & \\sum_i&#94;Nw_{T+1,i}\\prod_{t=1}&#94;TZ_t \\qquad\\left(\\because w_{t+1,i}Z_t = w_{t,i}\\times\\exp\\left(-y_i\\alpha_th_t\\left(\\mathbf{x}_i\\right)\\right)\\right)\\\\ = & \\prod_{t=1}&#94;TZ_t\\underset{T\\rightarrow\\infty}{\\longrightarrow}0\\qquad\\left(\\because Z_t < 1\\right) \\end{aligned} $$ となるので、最終分類器が、($T$ を十分大きくとれば) 任意の精度を実現できる(strong learnability) ことを確認できた。 期待損失最小化とAdaBoost ここで、一見唐突に出現したように見える $$\\alpha_t = (1/2)\\times\\ln\\left((1-e_t)/e_t\\right)$$ が、以下で定義する指数損失を最小化するという条件を考えると、 自然に 導かれることを示す。 $t$ ラウンドまで足し合わせた分類器 $H_t(\\mathbf{x}) = \\sum_{\\tau=1}&#94;t\\alpha_{\\tau}h_{\\tau}(\\mathbf{x})$ を考えて、$H_t$ の指数損失を $$l_t:=\\sum_i&#94;Nw_{1,i}\\exp\\left(-y_iH_t(\\mathbf{x}_i)\\right)$$ と定義する。 新しく選ばれる分類器 $h_t$ ではなく、計算途中の分類器 $H_t$ に対して考えられている。 訓練データごとの重み $w_{t,i}$ は、初期値のままである。 ことに注意する。 $$ \\begin{aligned} l_t &= \\sum_i&#94;Nw_{1,i}\\exp\\left(-y_iH_t(\\mathbf{x}_i)\\right)\\\\ &= \\sum_i&#94;Nw_{1,i}\\exp\\left(-y_i\\sum_{\\tau=1}&#94;t\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right)\\\\ &= \\sum_i&#94;Nw_{1,i}\\prod_{\\tau=1}&#94;t\\exp\\left(-y_i\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right)\\\\ &= \\sum_i&#94;Nw_{1,i}\\left(\\prod_{\\tau=1}&#94;{t-1}\\exp\\left(-y_i\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right)\\right)\\exp\\left(-\\alpha_ty_ih_t(\\mathbf{x}_i)\\right)\\\\ &= \\left(\\prod_{\\tau}&#94;{t-1}Z_{\\tau}\\right)\\sum_i&#94;Nw_{t,i}\\exp\\left(-\\alpha_ty_ih_t(\\mathbf{x}_i)\\right)\\quad \\left(\\because w_{t,i} = \\frac{w_{t-1,i}\\exp(-\\alpha_{t-1}y_ih_{t-1}(\\mathbf{x}_i))}{Z_{t-1}}\\right) \\end{aligned} $$ ここで、この式の $\\alpha_t$ に対する依存性を考えると、 $$ \\begin{aligned} l_t&\\propto\\sum_i&#94;Nw_{t,i}\\exp\\left(-\\alpha_ty_ih_t(\\mathbf{x}_i)\\right)\\\\ &= \\sum_i&#94;Nw_{t,i}\\times\\exp\\left(-\\alpha_ty_ih_t\\left(\\mathbf{x}_i\\right)\\right)\\left(\\mathbf{1}\\left\\{h_t(\\mathbf{x}_i)\\neq y_i\\right\\} + \\mathbf{1}\\left\\{h_t(\\mathbf{x}_i)= y_i\\right\\}\\right)\\\\ &= e_t\\exp(\\alpha_t) + (1-e_t)\\exp(-\\alpha_t)\\\\ \\end{aligned} $$ となるので、 $$Z(\\alpha_t) = e_t\\exp(\\alpha_t) + (1-e_t)\\exp(-\\alpha_t)$$ と定義する。 問2 $Z_t(\\alpha_t)$ を $\\alpha_t$ について微分して、$Z_t$ を最小にする $\\alpha_t$ とそのときの $Z_t$ の値を求めよ。 ただし、$e_t$ は $\\alpha_t$ からみて定数として考える。 解答 $$ \\begin{aligned} \\frac{\\partial Z_t(\\alpha_t)}{\\partial\\alpha_t} = e_t\\exp(\\alpha_t) - (1-e_t)\\exp(-\\alpha_t) &= 0\\\\ \\therefore\\exp(-\\alpha_t)\\left(e_t\\exp(2\\alpha_t) - (1-e_t)\\right) &= 0\\\\ \\exp\\left(2\\alpha_t\\right) &= \\frac{1-e_t}{e_t}\\\\ \\therefore\\alpha_t &= \\frac{1}{2}\\ln\\left(\\frac{1-e_t}{e_t}\\right) \\end{aligned}\\\\ $$ また、このとき $$ \\begin{aligned} Z(\\alpha_t) &= Z\\left( \\frac{1}{2}\\ln\\left(\\frac{1-e_t}{e_t}\\right)\\right)\\\\ &= e_t \\sqrt{\\frac{1-e_t}{e_t}} + (1-e_t)\\sqrt{\\frac{e_t}{1-e_t}}\\\\ &= 2\\sqrt{e_t(1-e_t)} \\end{aligned}\\\\ $$ したがって、$Z_t$ を最小化するように $\\alpha_t$ を選ぶと、$Z_t$ が 問1 で求めた規格化定数になっていることがわかる。また、$Z_t$ は $l_t$ に比例しているので、 AdaBoostが指数損失 $l_t$ を最小化する ように $\\alpha_t$ を選んでいることがわかる。 $L&#94;2$-Boosting: 回帰問題のためのBoosting AdaBoostの定式化を（ほぼ）同値に言い換えていくことで、回帰のためのBoostingアルゴリズム $L&#94;2$-Boosting が自然に得られることを見ていく。なお、最終的には $y_i\\in\\mathbb{R}$ として回帰問題を扱いたいが、分類問題の枠組みを維持して $y_i\\in\\{+1,-1\\}$ としておく。 Summary 手法 損失関数 補足 Coordinate Descent $$l = \\sum_i&#94;n\\exp\\left(-y_iH(\\mathbf{x}_i)\\right) = \\sum_i&#94;n\\exp\\left(-y_i\\sum_{\\lambda}\\beta_{\\lambda}h_{\\lambda}(\\mathbf{x}_i)\\right)$$ 各ラウンドで選ぶ $h_t$ が大きさ $L$ の有限集合 $\\{h_{\\lambda}\\}(1\\leq\\lambda\\leq L)$ から選ばれるとする。 Gradient descent algorithm $$l_t = \\sum_i&#94;N\\exp\\left(-y_i\\left(H_{t-1}(\\mathbf{x}_i) - \\alpha_t\\frac{\\partial l}{\\partial\\beta}(\\mathbf{x}_i)\\right)\\right)$$ 詳しくは https://mitpress.mit.edu/books/boosting Functional Gradient Descent $$\\mathcal{L}(H)$$ $\\mathcal{L}(H)$ を選択して、AnyBoostアルゴリズムの形に落とし込む。 AdaBoost $$\\mathcal{L}(H) = \\sum_i&#94;N\\exp\\left(-y_iH(\\mathbf{x}_i)\\right)$$ 分類問題の枠組み（$\\mathcal{Y} = \\{+1,-1\\}$） LogitBoost $$\\mathcal{L}(H) = \\sum_i&#94;N\\ln\\left(1 + \\exp\\left(-y_iH(\\mathbf{x}_i)\\right)\\right)$$ 分類問題の枠組み $L&#94;2$-Boosting $$\\mathcal{L}(H) = \\sum_i&#94;N\\left(y_i-H(\\mathbf{x}_i)\\right)&#94;2$$ 回帰問題の枠組み（$\\mathcal{Y} = \\mathbb{R}$） Coordinate Descent法としてのAdaBoost まずは、AdaBoostを Coordinate Descent(座標降下) 法という観点から見てみる。 簡単のため、各ラウンドで選ぶ $h_t$ が大きさ $L$ の有限集合 $\\{h_{\\lambda}\\}(1\\leq\\lambda\\leq L)$ から選ばれるとする。 途中までの分類器 $H_t$ や最終分類器 $H_T$ は $h_{\\lambda}$ の線形結合 $\\beta_{\\lambda}h_{\\lambda}$ として表されるので、$\\beta_{\\lambda}$ を指定すれば完全に定まることになる。 最小化すべき指数損失は、次のように表される。 $$l = \\sum_i&#94;n\\exp\\left(-y_iH(\\mathbf{x}_i)\\right) = \\sum_i&#94;n\\exp\\left(-y_i\\sum_{\\lambda}\\beta_{\\lambda}h_{\\lambda}(\\mathbf{x}_i)\\right)$$ この最小化は、結局 $L$ 個（有限個）のパラメタ $\\beta_{\\lambda}$ の最適化に帰着する。つまり、 各ラウンド $t$ で損失関数が最も減少するように1つのパラメタを選ぶことになる。 アルゴリズムは、以下のように書ける。なお、このアルゴリズムは、$h_t$ の候補が有限に絞られているという条件を別とすれば、AdaBoostと等価となる。（$h_t$ や $\\alpha_t$ として同じものが選ばれてくる。） 初期化：$H_0=0$ つまり、$\\forall\\lambda(\\beta_{\\lambda}=0)$ $t=1,\\ldots,T$ に関して、以下の処理を繰り返す。 exponential loss $$l_t = \\sum_i&#94;N\\exp\\left(-y_iH_t(\\mathbf{x}_i)\\right)$$ が最小になるように $\\lambda$ と $\\alpha_t$ を選ぶ。 つまり、更新すべき分類器 $h_{\\lambda}$ と、その係数 $\\beta_{\\lambda}$ の更新幅を決めるということ であり、数学的に表すと $$H_t(\\mathbf{x}):=H_{t-1}(\\mathbf{x}) + \\alpha_th_{\\lambda}(\\mathbf{x})$$ である。$\\beta_{\\lambda}\\leftarrow\\beta_{\\lambda} + \\alpha_t$ と更新したものが $H_t(\\mathbf{x})$ とも言える。 最後に、以下を返す。 $$H(\\mathbf{x}) = \\text{sign}\\left(H_T(\\mathbf{x})\\right) = \\text{sign}\\left(\\sum_{\\lambda}\\beta_{\\lambda}h_{\\lambda}(\\mathbf{x})\\right)$$ ※ ここまでの議論をまとめると、 $h_t$ が有限の候補から選ばれてくると仮定することで、合成された分類器 $H$ が $h_t$ の線形結合となった →「$H$ を決めること」が「 $L$ 個の実数値（$\\beta_{\\lambda}$）を指定すること」と等価であった。 → $H$ 自体を $L$ 次元の実ベクトル $H\\in\\mathbb{R}&#94;L$ と見なせた。 Functinal Gradient Descent法としてのAdaBoost ここでは、AdaBoostをFunctinal Gradient Descent(汎関数勾配降下)法という観点から定式化してみる。 $h_t$ の候補が有限という仮定を捨てて、$h_t:\\mathcal{X}\\rightarrow\\mathcal{Y}$ という 「関数」 を決めるのだという態度を明確にする。 （関数空間の中で、損失汎関数を最小化する要素を選ぶ。） $\\mathcal{Y}$ として $\\{+1,-1\\}$ を取れば分類問題になる。 $\\mathcal{Y}$ として $\\mathbb{R}$ を取れば回帰問題になる。 選ばれた関数 $H$ の良し悪しは、損失汎関数 $\\mathcal{L}(H)$ によって測る。この値は以下の形をとる。 $$\\mathcal{L}(H) = \\sum_i&#94;N\\text{loss}(\\mathbf{x}_i,y_i)$$ つまり、$H$ は $\\mathbf{x}_i$ で評価した $N$ 個の値 $\\left\\{H(\\mathbf{x}_i)\\right\\}_{1\\leq i\\leq N}$ にのみ依存していると考えることができる。そこで、 $\\mathcal{L}(H)$ を $\\mathbb{R}&#94;N$ 上で定義された関数とみなして勾配降下法の発想が適用する。 （$H(\\mathbf{x}_i) =: f_i$ とおいて、$\\mathcal{L}\\left(f_1,f_2,\\ldots,f_N\\right)$ の勾配ベクトルを計算できる。） ここで、一般の勾配法では $-\\nabla\\mathcal{L}$ の方向に $f_i$ を更新すれば良いので、 $$f_i\\leftarrow f_i - \\alpha\\nabla\\mathcal{L}_i$$ と更新する。よって、Boostingの場合では $$H_t(\\mathbf{x}_i)\\leftarrow H_{t-1}(\\mathbf{x}_i) + \\alpha_th_t(\\mathbf{x}_i)$$ と表せる。なお、ここでは $h_t$ を第 $i$ 成分が $h_t(\\mathbf{x}_i)$ の $N$ 次元ベクトルと考えて、 $H_{t-1}$ で評価した $\\nabla\\mathcal{L}$ と $h_t$ が平行となるように $h_t$ を選んでいる。 しかし、 $h_t$ としてそのようなものが存在するとは限らない。 そこで、次善の策として、 「$h_t$ の向きが $\\nabla\\mathcal{L}$ に最も近いもの」 を探す。ベクトルの向きの近さは内積を利用することで、 $$ (-\\nabla \\mathcal{L}) \\cdot \\frac{h_{t}}{\\left\\|h_{t}\\right\\|}=\\left.\\frac{-1}{\\left\\|h_{t}\\right\\|} \\sum_{i}&#94;{N} \\frac{\\partial \\mathcal{L}}{\\partial f_{i}}\\right|_{f_{i}=H_{t-1}(\\mathbf{x}_i)} h_{t}\\left(\\mathbf{x}_{i}\\right) $$ で測れるので、これの絶対値が最大となる $h_t$ を選び、実係数 $\\alpha_t$ を掛けて $H_{t-1}$ に足せば良い。このようにして更新に用いる $h_t$ を選んで得られるのが、 Functional Gradient DescentによるAnyBoostアルゴリズム である。 $(-\\nabla \\mathcal{L}) \\cdot \\frac{h_{t}}{\\left\\|h_{t}\\right\\|}$ の絶対値が最大となる $h_t$ を選ぶ。 $\\mathcal{L}\\left(H_{t-1} + \\alpha_th_t\\right)$ が最小となる $\\alpha_t$ を選ぶ。 $H_t = H_{t-1} + \\alpha_th_t$ と更新する。 最後に $H=H_T$ を返す。 $L&#94;2$-Boostingの導出 $L&#94;2$-Boostingとは、AnyBoostにおいて損失関数を $L&#94;2$ 損失（自乗誤差）としたものに他ならない。 $$ \\begin{cases} \\begin{aligned} \\mathcal{L}(H) &= \\sum_i&#94;N\\left(y_i - H(\\mathbf{x}_i)\\right)&#94;2\\\\ \\mathcal{L}(f_1,f_2,\\ldots,f_N) &= \\sum_i&#94;N\\left(y_i-f_i\\right)&#94;2\\quad \\left(f_i:=H(\\mathbf{x}_i)\\right) \\end{aligned} \\end{cases} $$ 問3 $\\mathcal{L}(f_1,f_2,\\ldots,f_N)$ と $f_i$ で偏微分した式 $\\frac{\\partial\\mathcal{L}(f_1,f_2,\\ldots,f_N)}{f_i}$ を求めよ（これが $\\nabla\\mathcal{L}$ の成分である）。その式に $f_i = H_{t-1}(\\mathbf{x}_i)$ を代入して、次に選択される $h_t$ の条件を $$\\mathbf{x}_i,y_i(1\\leq i\\leq N),\\alpha_{\\tau},h_{\\tau}(1\\leq\\tau\\leq t-1)$$ の式として表せ。 解答 $$ \\begin{aligned} \\frac{\\partial\\mathcal{L}(f_1,f_2,\\ldots,f_N)}{f_i} &= -2(y_i-f_i)\\\\ &= -2\\left(y_i - H_{t-1}(\\mathbf{x}_i)\\right)\\\\ &= -2\\left(y_i - \\sum_{\\tau=1}&#94;{t-1}\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right)\\\\ \\end{aligned} $$ したがって、 $$ \\begin{aligned} h_t &= \\text{argmax}_h\\left|(-\\nabla \\mathcal{L}) \\cdot \\frac{h}{\\left\\|h\\right\\|}\\right|\\\\ &= \\text{argmax}_h\\left|\\frac{-1}{\\|h\\|}\\sum_i&#94;N-2\\left(y_i - \\sum_{\\tau=1}&#94;{t-1}\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right)h\\left(\\mathbf{x}_{i}\\right)\\right|\\\\ &= \\text{argmax}_h\\left|\\frac{1}{\\|h\\|}\\sum_i&#94;N\\left(y_i - \\sum_{\\tau=1}&#94;{t-1}\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right)h\\left(\\mathbf{x}_{i}\\right)\\right|\\\\ \\end{aligned} $$ 問4 問3 の結果を残差 $\\hat{y}_i:=y_i - H_{t-1}(\\mathbf{x}_i)$ を用いて整理せよ。また、選択の条件を 「距離」 についてのものに書き換えることで、$L&#94;2$-Boostingが、ほとんど 「残差に対する繰り返しの線形回帰」 であることを確認せよ。 つまり、この状況では以下の二つの描像はだいたい等価である。 訓練データはそのまま で、途中の予測器 $H_t$ が更新されていく 訓練データ（の教師信号）を更新 していった $\\hat{y}_i(t)$ に対して $h_t$（と $\\alpha_t$）を選ぶ 解答 残差 $\\hat{y}_i$ を用いれば、 $$ \\begin{aligned} h_t &= \\text{argmax}_h\\left|\\frac{1}{\\|h\\|}\\sum_i&#94;N\\left(y_i - \\sum_{\\tau=1}&#94;{t-1}\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right)h\\left(\\mathbf{x}_{i}\\right)\\right|\\\\ &= \\text{argmax}_h\\left|\\frac{1}{\\|h\\|}\\sum_i&#94;N\\hat{y}_ih(\\mathbf{x}_i)\\right|\\\\ \\end{aligned} $$ と整理できる。また、選択の条件を 「距離」 についてのものに書き換えると、 $$ \\begin{aligned} h_t &= \\text{argmax}_h\\left|(-\\nabla \\mathcal{L}) \\cdot \\frac{h}{\\left\\|h\\right\\|}\\right|\\\\ &= \\text{argmin}_h\\left\\|(-\\nabla \\mathcal{L}) - \\frac{h}{\\left\\|h\\right\\|}\\right\\|\\qquad \\left(\\because \\text{$\\frac{h}{\\left\\|h\\right\\|}$ is const.}\\right)\\\\ &= \\text{argmin}_h\\sqrt{\\sum_{i=1}&#94;N\\left(2\\left(y_i - \\sum_{\\tau=1}&#94;{t-1}\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right) - \\frac{h(\\mathbf{x}_i)}{\\left\\|h\\right\\|} \\right)&#94;2}\\\\ &= \\text{argmin}_h\\sum_{i=1}&#94;N\\left(2\\hat{y}_i - \\frac{h(\\mathbf{x}_i)}{\\left\\|h\\right\\|} \\right)&#94;2\\\\ \\end{aligned} $$ よって、ほとんど 「残差に対する繰り返しの線形回帰」 であることが確認できた。 問5 ここまでで $L&#94;2$-Boostingの導出は完了であるが、 問3 ・ 問4 で一般論から導かれた条件は、$L&#94;2$ 損失の変化分を直接計算することでも出てくる。そこで、変化分 $\\Delta\\mathcal{L}:=\\mathcal{L}(H_t) - \\mathcal{L}(H_{t-1})$ を $\\alpha_t$ の関数と考えて、変化分 $\\Delta\\mathcal{L}$ が最大となる $\\alpha_t$ の値と、そのときの $\\Delta\\mathcal{L}$ の値を求めることで、この条件が 問3 ・ 問4 で求めた条件と同値であることを確かめよ。 解答 $$ \\begin{aligned} \\Delta\\mathcal{L} &= \\mathcal{L}(H_t) - \\mathcal{L}(H_{t-1})\\\\ &= \\sum_{i=1}&#94;N\\left(y_i - \\sum_{\\tau=1}&#94;{t}\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right)&#94;2 - \\sum_{i=1}&#94;N\\left(\\underbrace{y_i - \\sum_{\\tau=1}&#94;{t-1}\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)}_{\\hat{y}_i}\\right)&#94;2\\\\ &= \\sum_{i=1}&#94;N\\left(\\hat{y}_i - \\alpha_th_t\\left(\\mathbf{x}_i\\right)\\right)&#94;2 - \\hat{y}_i&#94;2\\\\ &= \\sum_{i=1}&#94;N\\alpha_t&#94;2h_t&#94;2(\\mathbf{x}_i) - 2\\alpha_th_t(\\mathbf{x}_i)\\hat{y}_i \\end{aligned} $$ ここで、$\\hat{y}_i$ は $\\alpha_t$ に依存していないので、 $$ \\begin{aligned} \\frac{\\partial\\left(\\Delta\\mathcal{L}\\right)}{\\partial\\alpha_t} &= \\sum_{i=1}&#94;N2\\alpha_th_t&#94;2(\\mathbf{x}_i) - 2h_t(\\mathbf{x}_i)\\hat{y}_i = 0\\\\ \\therefore \\alpha_t&=\\frac{\\sum_{i=1}&#94;Nh_t(\\mathbf{x}_i)\\hat{y}_i}{\\sum_{i=1}&#94;Nh_t&#94;2(\\mathbf{x}_i)} \\\\ &= \\frac{1}{\\|h_t\\|&#94;2}\\sum_{i=1}&#94;Nh_t(\\mathbf{x}_i)\\hat{y}_i\\\\ \\end{aligned} $$ をとる時変化分 $\\Delta\\mathcal{L}$ は最大となる。また、この時 $\\Delta\\mathcal{L}$ の値は、 $$ \\begin{aligned} \\Delta\\mathcal{L}\\left(\\alpha_t\\right) &= \\alpha_t\\left(\\alpha_t\\sum_{i=1}&#94;Nh_t&#94;2(\\mathbf{x}_i) - \\sum_{i=1}&#94;N 2h_t(\\mathbf{x}_i)\\hat{y}_i\\right)\\\\ &= \\alpha_t\\left(\\sum_{i=1}&#94;Nh_t(\\mathbf{x}_i)\\hat{y}_i - \\sum_{i=1}&#94;N 2h_t(\\mathbf{x}_i)\\hat{y}_i\\right)\\\\ &= - \\alpha_t\\sum_{i=1}&#94;N h_t(\\mathbf{x}_i)\\hat{y}_i\\\\ &= - \\left(\\frac{1}{\\|h_t\\|}\\sum_{i=1}&#94;Nh_t(\\mathbf{x}_i)\\hat{y}_i\\right)&#94;2 \\end{aligned} $$ となる。これは、 問3 の結果を残差 $\\hat{y}_i:=y_i - H_{t-1}(\\mathbf{x}_i)$ を用いて整理した結果と等しい。 演習 $L&#94;2$-Boostingを使ってKaggle のデータセット King County の住宅価格を予測してみる。[https://www.kaggle.com/harlfoxem/housesalesprediction](https://www.kaggle.com/harlfoxem/housesalesprediction) からCSVのデータセットを取得して、`price` を説明するモデルを学習する。k-fold cross validation を実施してテストデータに対する性能を単純な線形回帰のモデルと比較する。 In [1]: import numpy as np import pandas as pd import matplotlib.pyplot as plt In [2]: df = pd . read_csv ( \"kc_house_data.csv\" ) df . head ( 3 ) Out[2]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } id date price bedrooms bathrooms sqft_living sqft_lot floors waterfront view ... grade sqft_above sqft_basement yr_built yr_renovated zipcode lat long sqft_living15 sqft_lot15 0 7129300520 20141013T000000 221900.0 3 1.00 1180 5650 1.0 0 0 ... 7 1180 0 1955 0 98178 47.5112 -122.257 1340 5650 1 6414100192 20141209T000000 538000.0 3 2.25 2570 7242 2.0 0 0 ... 7 2170 400 1951 1991 98125 47.7210 -122.319 1690 7639 2 5631500400 20150225T000000 180000.0 2 1.00 770 10000 1.0 0 0 ... 6 770 0 1933 0 98028 47.7379 -122.233 2720 8062 3 rows × 21 columns 単純な線形モデルの構築 以下の形で表される最も簡単なモデルを構築する。なお、このとき最も相関が強い特徴量 $x$ を選択する。 $$h_{\\theta}(x) = \\theta_0 + \\theta_1x$$ In [3]: df . corr () . loc [ \"price\" ] . sort_values ( ascending = False ) Out[3]: price 1.000000 sqft_living 0.702035 grade 0.667434 sqft_above 0.605567 sqft_living15 0.585379 bathrooms 0.525138 view 0.397293 sqft_basement 0.323816 bedrooms 0.308350 lat 0.307003 waterfront 0.266369 floors 0.256794 yr_renovated 0.126434 sqft_lot 0.089661 sqft_lot15 0.082447 yr_built 0.054012 condition 0.036362 long 0.021626 id -0.016762 zipcode -0.053203 Name: price, dtype: float64 sqft_living が最も price と相関が強いことがわかる。そこで、 sqft_living を用いて 最も簡単なモデル を作成して、関係性をプロットする。 In [4]: from kerasy.ML.linear import LinearRegression from kerasy.utils import root_mean_squared_error , train_test_split In [5]: y = df [ \"price\" ] . values . reshape ( - 1 , 1 ) x = df [ \"sqft_living\" ] . values . reshape ( - 1 , 1 ) In [6]: ( x_train , x_test ),( y_train , y_test ) = train_test_split ( x , y , train_size = 0.8 , random_state = 0 ) In [7]: simple_lr = LinearRegression () simple_lr . fit ( x_train , y_train ) In [8]: y_pred = simple_lr . predict ( x_test ) rmse = root_mean_squared_error ( y_pred , y_test ) intercept , coef = simple_lr . w [:, 0 ] In [9]: print ( f \"Average Price for Test Data : { y_test . mean () } \" ) print ( f \"Root Mean Squared Error (RMSE): { rmse [ 0 ] } \" ) print ( f \"Intercept (theta_0) : { intercept } \" ) print ( f \"Coefficient (theta_1) : { coef } \" ) Average Price for Test Data : 537445.2153597039 Root Mean Squared Error (RMSE): 251670.11404872165 Intercept (theta_0) : -46927.77334565681 Coefficient (theta_1) : 282.34041948849676 In [10]: plt . figure ( figsize = ( 8 , 6 )) plt . scatter ( x_test , y_test , color = 'darkgreen' , label = \"Data\" , alpha =. 1 ) plt . plot ( x_test , y_pred , color = \"red\" , label = \"Predicted Regression Line\" ) plt . xlabel ( \"Living Space (sqft)\" , fontsize = 15 ) plt . ylabel ( \"Price ($)\" , fontsize = 15 ) plt . xticks ( fontsize = 13 ) plt . yticks ( fontsize = 13 ) plt . legend () plt . show () この図より、 sqft_living だけでもある程度の予測ができていることがわかる。 各種特徴量の可視化 In [11]: remove_cols = [ 'id' , 'date' ] feature_columns = [ col for col in df . columns if col not in remove_cols ] In [12]: print ( feature_columns ) ['price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] In [13]: hist = df [ feature_columns ] . hist ( bins = 25 , figsize = ( 16 , 16 ), xlabelsize = '10' , ylabelsize = '10' , xrot =- 15 ) [ x . title . set_size ( 18 ) for x in hist . ravel ()] plt . tight_layout () plt . show () ここで、離散的な特徴量と連続的な特徴量があることが見て取れる。全てを可視化することはしないが、それぞれ objVSexp で可視化が可能である。 In [14]: from kerasy.utils import objVSexp In [15]: fig = plt . figure ( figsize = ( 18 , 4 )) # 離散値 ax1 = fig . add_subplot ( 1 , 3 , 1 ) ax1 = objVSexp ( df [ \"price\" ], df [ \"grade\" ], var_type = \"discrete\" , ax = ax1 ) ax1 . set ( xlabel = 'Grade' , ylabel = 'Price' ) # 連続値(2次元) ax2 = fig . add_subplot ( 1 , 3 , 2 ) ax2 = objVSexp ( df [ \"price\" ], df [ \"sqft_living\" ], var_type = \"continuous\" , ax = ax2 ) ax2 . set ( xlabel = 'sqft Living' , ylabel = 'Price' ) # 連続値(3次元) ax3 = fig . add_subplot ( 1 , 3 , 3 , projection = \"3d\" ) ax3 = objVSexp ( df [ \"bedrooms\" ], df [ 'sqft_living' ], df [ 'sqft_lot' ], var_type = \"continuous\" , ax = ax3 ) ax3 . set ( xlabel = ' \\n sqft Living' , ylabel = ' \\n sqft Lot' , zlabel = 'Bedrooms' , ylim = [ 0 , 250000 ]) plt . tight_layout () plt . show () 特徴量の追加 date , yr_built , yr_renovated から、より意味のある特徴量 age (築年数), age_rnv （改築年数）を作成する。 In [16]: df [ 'sales_yr' ] = df [ 'date' ] . astype ( str ) . str [: 4 ] . astype ( int ) df [ \"age\" ] = df [ 'sales_yr' ] - df [ 'yr_built' ] df [ 'age_rnv' ] = df . apply ( lambda x : x . sales_yr - x . yr_renovated if x . yr_renovated != 0 else 0 , axis = 1 ) In [17]: ax = objVSexp ( df [ \"price\" ], df [ \"age\" ], var_type = \"discrete\" ) plt . show () このままでは利用しづらいので、Binningを行う。 In [18]: bins = [ - 2 , 0 , 5 , 10 , 25 , 50 , 75 , 100 , 100000 ] labels = [ '<1' , '1-5' , '6-10' , '11-25' , '26-50' , '51-75' , '76-100' , '>100' ] df [ 'age_binned' ] = pd . cut ( df [ 'age' ], bins = bins , labels = labels ) In [19]: age_rank = np . arange ( len ( labels )) age_encoder = dict ( zip ( labels , age_rank )) In [20]: fig = plt . figure ( figsize = ( 12 , 4 )) ax1 = fig . add_subplot ( 1 , 2 , 1 ) ax1 = objVSexp ( df [ \"price\" ], df [ \"age_binned\" ], var_type = \"discrete\" , ax = ax1 ) ax1 . set_title ( \"Age\" , fontsize = 18 ) ax2 = fig . add_subplot ( 1 , 2 , 2 ) ax2 = objVSexp ( df [ \"price\" ], df [ \"sales_yr\" ], var_type = \"discrete\" , ax = ax2 ) ax2 . set_title ( \"Sales Year\" , fontsize = 18 ) plt . tight_layout () plt . show () 意外なことに、築年数だけでは価格を予測できそうになかった。 線形回帰 In [21]: df [ \"age_binned\" ] = df [ \"age_binned\" ] . apply ( lambda x : age_encoder [ x ]) In [22]: remove_cols = [ 'id' , 'date' , 'age' , 'yr_built' , 'yr_renovated' , 'zipcode' ] feature_columns = [ col for col in df . columns if col not in remove_cols ] In [23]: Ycol = \"price\" Xcols = [ col for col in feature_columns if col != Ycol ] In [24]: print ( Xcols ) ['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'lat', 'long', 'sqft_living15', 'sqft_lot15', 'sales_yr', 'age_rnv', 'age_binned'] In [25]: X = df [ Xcols ] . values Y = df [ Ycol ] . values . reshape ( - 1 , 1 ) In [26]: ( X_train , X_test ),( Y_train , Y_test ) = train_test_split ( X , Y , train_size = 0.8 , random_state = 0 ) In [27]: from kerasy.utils import cross_validation In [28]: k_fold_seed = 134 単純な線形回帰のモデル 全ての特徴量について線形に足し合わせるた単純なモデルを考える。 $$h_{\\theta}(\\mathbf{x}) = \\theta_0 + \\theta_1x_1 + \\cdots + \\theta_Mx_M$$ In [29]: modelkwargs = { \"basis\" : \"none\" , \"add_bias\" : True , } In [30]: score = cross_validation ( k = 5 , x = X_train , y = Y_train , metrics = root_mean_squared_error , seed = k_fold_seed , modelcls = LinearRegression , modelkwargs = modelkwargs ) In [31]: lr = LinearRegression ( ** modelkwargs ) lr . fit ( X_train , Y_train ) In [32]: Y_pred = lr . predict ( X_test ) max_val = max ( np . concatenate ([ Y_pred , Y_test ]))[ 0 ] In [33]: plt . figure ( figsize = ( 8 , 6 )) plt . scatter ( Y_pred , Y_test , color = 'darkgreen' , label = \"Data\" , alpha =. 1 ) plt . plot (( 0 , max_val ), ( 0 , max_val ), color = \"red\" ) plt . xlabel ( \"Predicted\" , fontsize = 15 ), plt . ylabel ( \"Answer\" , fontsize = 15 ) plt . xticks ( fontsize = 13 ), plt . yticks ( fontsize = 13 ), plt . title ( f \"Simple Linear Regression (k-fold RMSE= { score [ 0 ] : .3f } )\" ) plt . legend () plt . show () 多項式の特徴量を追加した線形回帰のモデル 続いて、全ての特徴量について、多項式の影響も考えたモデルを考える。ここでは、$K=3$ で考える。 $$h_{\\theta}(\\mathbf{x}) = \\theta_0 + \\left(\\theta_{1,1}x_1 +\\cdots+ \\theta_{1,K}x_1&#94;K\\right) + \\cdots + \\left(\\theta_{M,1}x_M +\\cdots+ \\theta_{M,K}x_M&#94;K\\right)$$ In [34]: modelkwargs = { \"basis\" : \"polynomial\" , \"add_bias\" : True , \"exponent\" : np . arange ( 1 , 4 ) } In [35]: score = cross_validation ( k = 5 , x = X_train , y = Y_train , metrics = root_mean_squared_error , seed = k_fold_seed , modelcls = LinearRegression , modelkwargs = modelkwargs ) In [36]: lr = LinearRegression ( ** modelkwargs ) lr . fit ( X_train , Y_train ) In [37]: Y_pred = lr . predict ( X_test ) max_val = max ( np . concatenate ([ Y_pred , Y_test ]))[ 0 ] In [38]: plt . figure ( figsize = ( 8 , 6 )) plt . scatter ( Y_pred , Y_test , color = 'darkgreen' , label = \"Data\" , alpha =. 1 ) plt . plot (( 0 , max_val ), ( 0 , max_val ), color = \"red\" ) plt . xlabel ( \"Predicted\" , fontsize = 15 ), plt . ylabel ( \"Answer\" , fontsize = 15 ) plt . xticks ( fontsize = 13 ), plt . yticks ( fontsize = 13 ), plt . title ( f \"Simple Linear Regression (k-fold RMSE= { score [ 0 ] } )\" ) plt . legend () plt . show () Boosting Algorithm In [39]: from kerasy.ML.boosting import L2Boosting In [40]: num_iteration = 30 num_elements = 20 max_num_feature = 3 boosting_seed = 0 In [41]: N , D = X_train . shape idxes = np . arange ( D ) features = np . asarray ( Xcols ) In [42]: import itertools In [43]: AllModelComb = [] for num_feature in range ( 1 , max_num_feature + 1 ): AllModelComb += list ( itertools . combinations ( idxes , num_feature )) selected_idxes = np . random . RandomState ( boosting_seed ) . choice ( AllModelComb , num_elements , replace = False ) In [44]: Models = [] Masks = np . zeros ( shape = ( 0 , D ), dtype = bool ) print ( f \" { 'id' : &#94; { len ( str ( num_elements )) }} : features\" ) print ( \"-\" * 30 ) for i , idxcomb in enumerate ( selected_idxes ): idxes = np . asarray ( idxcomb ) mask = np . zeros ( shape = ( D ,), dtype = bool ) mask [ idxes ] = 1 X = X_train [:, mask ] # Weak Learners lr = LinearRegression ( \"polynomial\" , exponent = 1 ) lr . fit ( X , Y_train ) Models . append ( lr ) Masks = np . r_ [ Masks , mask . reshape ( 1 , D )] print ( f \" { i : >0 { len ( str ( num_elements )) }} : { ', ' . join ( features [ mask ]) } \" ) id: features ------------------------------ 00: waterfront, condition, grade 01: bedrooms, sqft_above, lat 02: bedrooms, sqft_basement 03: view, condition, age_binned 04: waterfront, long, sqft_lot15 05: sqft_living, sqft_living15, age_rnv 06: sqft_lot, sqft_above, lat 07: waterfront, sqft_basement, sales_yr 08: long, sqft_living15, age_rnv 09: view, sqft_living15, age_binned 10: bathrooms, sqft_lot, sqft_lot15 11: bedrooms, sqft_living15, sales_yr 12: sqft_lot, sqft_above, sqft_living15 13: sqft_living, floors, lat 14: floors, condition, sqft_lot15 15: sqft_lot15 16: sqft_above, sqft_basement, sqft_lot15 17: bathrooms, sqft_basement, sqft_lot15 18: bathrooms, sqft_living, age_rnv 19: waterfront, grade, lat 上記の特徴量を用いたモデルが作成できたので、これらを用いてBoostingを行う。 In [45]: modelkwargs = { \"Models\" : Models , \"Masks\" : Masks , } In [46]: trainkwargs = { \"T\" : num_iteration } In [47]: score = cross_validation ( k = 5 , x = X_train , y = Y_train , metrics = root_mean_squared_error , seed = k_fold_seed , modelcls = L2Boosting , modelkwargs = modelkwargs , trainkwargs = trainkwargs ) In [48]: boosting = L2Boosting ( ** modelkwargs ) In [49]: boosting . fit ( X_train , Y_train , ** trainkwargs ) In [50]: Y_pred = boosting . predict ( X_test ) max_val = max ( np . concatenate ([ Y_pred , Y_test ]))[ 0 ] In [51]: plt . figure ( figsize = ( 8 , 6 )) plt . scatter ( Y_pred , Y_test , color = 'darkgreen' , label = \"Data\" , alpha =. 1 ) plt . plot (( 0 , max_val ), ( 0 , max_val ), color = \"red\" ) plt . xlabel ( \"Predicted\" , fontsize = 15 ), plt . ylabel ( \"Answer\" , fontsize = 15 ) plt . xticks ( fontsize = 13 ), plt . yticks ( fontsize = 13 ), plt . title ( f \"L2-Boosting (k-fold RMSE= { score [ 0 ] } )\" ) plt . legend () plt . show () 単純な線形回帰のモデル 多項式の特徴量を追加した線形回帰のモデル Boosting Algorithm RMSE 210,425 2,966,244 244,652 プロット if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(森下)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-4.html"},{"title":"レポート課題10(12/12出題)","text":"jifxfTCG9+zBbjQzsXKp8g==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report10.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report10.html"},{"title":"分子生命科学Ⅲ 第10回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 脳と行動(2) 摂食行動","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-10.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-10.html"},{"title":"3.区間分割アルゴリズム","text":"In [1]: import numpy as np import pandas as pd import matplotlib.pyplot as plt 課題1 区間推定アルゴリズムを実装して、実際のデータに適用する。 データは、 http://egg2.wustl.edu/roadmap/data/byDataType/dnamethylation/WGBS/ からbigWig形式で取得できる。 bigWigはbigWigToWigでwigm形式に変換できる。 http://hgdownload.cse.ucsc.edu/admin/exe # 今回は、E003: ESC.H1 H1_Cell_Line を選択。 # メチル化率を求める。 $ wget https://egg2.wustl.edu/roadmap/data/byDataType/dnamethylation/WGBS/FractionalMethylation_bigwig/E003_WGBS_FractionalMethylation.bigwig $ bigWigToWig E003_WGBS_FractionalMethylation.bigwig E003_WGBS_FractionalMethylation.wig # リードの長さを求める。 $ wget https://egg2.wustl.edu/roadmap/data/byDataType/dnamethylation/WGBS/ReadCoverage_bigwig/E003_WGBS_ReadCoverage.bigwig $ bigWigToWig E003_WGBS_ReadCoverage.bigwig E003_WGBS_ReadCoverage.wig # データの前処理 with open ( \"E003_WGBS_2.wig\" ) as f : methylation = [ float ( line . split ( \" \\t \" )[ - 1 ] . rstrip ( \" \\n \" )) for line in f . readlines () if line [ 0 ] != \"#\" ] with open ( \"E003_WGBS_ReadCoverage.wig\" ) as f : readcoverage = [ int ( line . split ( \" \\t \" )[ - 1 ] . rstrip ( \" \\n \" )) for line in f . readlines () if line [ 0 ] != \"#\" ] print ( f \"Fractional Methylation Rate: { len ( methylation ) } \" ) print ( f \"Depth of Read Coverage : { len ( readcoverage ) } \" ) >>> Fractional Methylation Rate : 51328201 >>> Depth of Read Coverage : 51328201 converted = [ round ( l * r ) for l , r in zip ( readcoverage , methylation )] # u unconverted = [ t - u for t , u in zip ( readcoverage , converted )] # m ファイルが重いため、上記の一つ一つの操作にかなり時間がかかったので、メチル化されたリード数( converted )、されなかったリード数( unconverted )をまとめたファイル( E003_FractionalMethylatioLength.txt )を作成したので、それを用いる。 In [2]: df = pd . read_csv ( \"E003_FractionalMethylatioLength.txt\" ) In [3]: df . head () Out[3]: .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Chromosome begin end converted unconverted section 0 chr1 10468 10469 23 7 chr1:10468-527254 1 chr1 10469 10470 23 7 chr1:10468-527254 2 chr1 10470 10471 26 3 chr1:10468-527254 3 chr1 10471 10472 26 3 chr1:10468-527254 4 chr1 10483 10484 25 4 chr1:10468-527254 In [4]: R = ( df . unconverted - df . converted ) . values In [5]: print ( f \"データ数: { len ( R ) } \" ) データ数: 51328201 ここでは、 DNAメチル化状態 を考察する。微生物・植物・動物はCpG以外でもメチル化を 様々な用途（ Restriction-Modefication system (R-M system),トランスポゾンの活動抑制,転写制御（〜分化と発生）,環境への応答（〜老化・ガン化） ） で利用しているが、特に CpGメチル化 を考察し、機能的な領域を探索する。すると、 区間推定問題 は、以下のように定義できる。 入力：各CpG siteにおける、bisulfite-seqでの(unconverted C, converted C)を読んだリード数を表すペア $\\{m_i,u_i\\}$（ 補足：$\\left\\{m_i,u_i\\right\\}$ から実数列を $\\{r_i = u_i - m_i\\}$ で選ぶ。 ） 出力：検出できた低メチル化領域のリスト なお、メチル化計測データには以下のような種類がある。 bisulfite sequencing (MethylC-seq) : C -> T: bisulfite conversion methylation array: beta for selected CpG sites SMRT sequencing (PacBio): IPD (inter-pulse duration), IPD ratio for each base Nanopore sequencing (ONT) 参考論文 Peter A. Jones, Functions of DNA methylation: islands, start sites, gene bodies and beyond, Nature Reviews Genetics 13, 484-492 (July 2012) doi:10.1038/nrg3230: http://www.nature.com/nrg/journal/v13/n7/full/nrg3230.html Dirk Schübeler, Function and information content of DNA methylation, Nature 517, 321–326 (15 January 2015) doi:10.1038/nature14192: https://www.nature.com/articles/nature14192.html また、これを解くモデルは以下の2つが有名である。 課題 モデル 概要 特徴 1-1 MSS(maximal segment sum)問題 与えられた数列上で、その上での和が最大となる区間を見つける問題。つまり、所与の実数列 $r_1,\\ldots,r_n$ と正整数 $L$ に対し、次の式を満たす区間の集合 $S$ を求める。$$\\underset{S}{\\text{argmax}}\\sum_{I\\in S}\\sum_{i\\in I}r_i\\ \\text{ s.t. }\\ \\forall I\\in S, \\mid I\\mid\\geq L$$ 実数列の長さ $n$ に関する動的計画法を用いることで、線形時間で解くことが可能。また、区間の長さを直接制御することも可能。 1-2 HMM パラメタと出力確率の関数型を適当に決め、Viterbiアルゴリズムで隠れ状態列を推定する問題。 「高メチル化/低メチル化」の2つの隠れ状態を想定する。 隠れ状態列の推定（Viterbiアルゴリズム）は線形時間で可能だが、区間が細かく分割されすぎてしまうことがある。また、本来は 「マルコフ性」 や 「区間の長さが幾何分布に従う」 ことなどを吟味すべき。HSMMなどの拡張もある。 Q.1-1 （必須課題） 最小長制約付区間推定による低メチル化領域検出を実装して実際のデータに適用せよ。また、パラメタの選び方により、低メチル化領域の長さ（genomic distance or #CpGs）の分布はどう変わるか？平均・分散・中央値・90%分位点などを Lの関数として プロットせよ。 解答 Recursion 長さ $n$ の数列に対して、次のような量を計算することを考える。 記号 説明 再帰式 $$S_n&#94;0$$ 数列の末尾である $r_n$ を 含まない ような区間の集合で、その上の和が最大のもの。 $$S_n&#94;0 = \\max\\left\\{S_{n-1}&#94;0,S_{n-1}&#94;L\\right\\}$$ $$S_n&#94;k\\left(k=1,\\ldots,L-1\\right)$$ 最も右にある区間が $r_n$ を 含み 、かつその長さが $k$ である区間の集合で、その上の和が最大のもの。 $$S_n&#94;k = S_{n-1}&#94;{k-1} + \\underline{r_n}$$ $$S_n&#94;L$$ 最も右にある区間が $r_n$ を 含み 、かつその長さが $L$ 以上 である区間の集合で、その上の和が最大のもの。 $$S_n&#94;L = \\max\\left\\{S_{n-1}&#94;L,S_{n-1}&#94;{L-1}\\right\\}+\\underline{r_n}$$ となり、元の問題に対して $O(nL)$ のアルゴリズムが構築できた。ここで、さらに再帰式を使って式を簡潔にすると、 $$S_{n}&#94;{L-1} = S_{n-1}&#94;{L-2} + r_{n} = \\cdots = S_{n-(L-1)}&#94;0 + \\sum_{n-(L-1)+1}&#94;n r_i$$ という関係が導けるので、 $$ \\begin{aligned} S_{n}&#94;0 &= \\max\\left\\{S_{n-1}&#94;0,S_{n-1}&#94;L\\right\\}\\\\ S_{n}&#94;L &= \\max\\left\\{S_{n-1}&#94;L,S_{n-L}&#94;0 + \\sum_{n-L+1}&#94;{n-1}r_i\\right\\} + r_n \\end{aligned} $$ と変数の数を $L$ に関係になく $2$ 個に抑えることができるので、$O(n)$ のアルゴリズムが導けたことがわかる。なお、以下で初期化する。 $$ \\begin{cases} S_{0}&#94;0 &= 0\\\\ S_{0}&#94;L &= -\\infty\\\\ r_i &= -\\infty\\quad(2-L\\leq i\\leq0) \\end{cases} $$ TraceBack 次に、トレースバックについて考えると、メモリに関しては、$n$ 番目の値を考える時には $S_{n-L}&#94;0,S_{n-1}&#94;0,S_{n-1}&#94;L$ がどの要素を取得しているかのみが必要となるが、それらから $n+1$ 番目の値を考える際に必要となる $S_{\\left(n+1\\right)-L}&#94;0$ を再帰式無しで導くことができないので、実際には $S_{n-L}&#94;0,\\ldots,S_{n-1}&#94;0,S_{n-1}&#94;L$ の計 $L+1$ 個の集合がどの要素を保持していたか記憶する必要がある。 単純にトレースバックポインタを保持すれば良いことになる。 In [6]: from kerasy.Bio.maxsets import MSS In [7]: model = MSS () model . run ( R , limit = 5 , verbose = 1 ) np . save ( f \" { limit : >02 } .npy\" , model . cotinuous_area ) traceback 102/101 [####################] 100.99% - 0.006s ※ verbose=1 だとjupyter notebookのファイル容量制限を超えてしまうので、以下のプログラムファイルを作成して実行した。 kadai03_MSS.py ```python # coding: utf-8 import numpy as np import pandas as pd from kerasy.Bio.maxsets import MSS if __name__ == \"__main__\": df = pd.read_csv(\"E003_FractionalMethylatioLength.txt\") df.head(3) R = (df.unconverted - df.converted).values print(f\"データ数: {len(R)}\") for limit in range(5,11): model = MSS() model.run(R, limit=limit, verbose=1) np.save(f\"{limit:>02}.npy\", model.detected_area) ``` In [8]: def decorate_axes ( ax , stats , xlabel ): ax . set_xlabel ( xlabel , fontsize = 16 ) ax . set_title ( stats , fontsize = 18 ) ax . set_ylabel ( stats , fontsize = 16 ) return ax In [9]: fig , (( ax1 , ax2 ),( ax3 , ax4 ),( ax5 , ax6 )) = plt . subplots ( nrows = 3 , ncols = 2 , figsize = ( 15 , 18 ), sharex = \"all\" ) for limit in range ( 5 , 11 ): detected_area = np . load ( f \" { limit : >02 } .npy\" ) detected_length = detected_area [:, 1 ] median , tile90 = np . percentile ( a = detected_length , q = [ 50 , 90 ]) mean = np . mean ( detected_length ) var = np . var ( detected_length ) score = np . sum ( detected_length ) num = len ( detected_length ) ax1 . scatter ( limit , median , color = \"red\" , s = 100 ) ax2 . scatter ( limit , tile90 , color = \"blue\" , s = 100 ) ax3 . scatter ( limit , mean , color = \"green\" , s = 100 ) ax4 . scatter ( limit , var , color = \"orange\" , s = 100 ) ax5 . scatter ( limit , score , color = \"black\" , s = 100 ) ax6 . scatter ( limit , num , color = \"black\" , s = 100 ) ax1 = decorate_axes ( ax1 , stats = \"median\" , xlabel = \"limit\" ) ax2 = decorate_axes ( ax2 , stats = \"90%-tile\" , xlabel = \"limit\" ) ax3 = decorate_axes ( ax3 , stats = \"mean\" , xlabel = \"limit\" ) ax4 = decorate_axes ( ax4 , stats = \"variance\" , xlabel = \"limit\" ) ax5 = decorate_axes ( ax5 , stats = \"score\" , xlabel = \"limit\" ) ax6 = decorate_axes ( ax6 , stats = \"num detected area\" , xlabel = \"limit\" ) plt . suptitle ( \"The relationship between \\n limit length and Statistics.\" , fontsize = 20 ) # plt.tight_layout() plt . show () In [10]: plt . hist ( detected_length , bins = 30 ) plt . title ( f \"The histgram of detected length (limit= { limit } )\" ) plt . xlabel ( \"detected length\" ), plt . ylabel ( \"frequency\" ) plt . show () Q.1-2 （選択課題） HMMによる低メチル化領域検出を実装して実際のデータに適用せよ。また、パラメタの選び方により、低メチル化領域の長さ（genomic distance or #CpGs）の分布はどう変わるか？平均・分散・中央値・90%分位点などを $\\theta,t$ の関数として プロットせよ。 なお、この時簡単のためHMMは以下の条件を満たす。 2つの隠れ状態（ Hypermethylated , Hypomethylated ）を取る。 遷移確率は $p_1 = p_2 = t$ とする。（等しい） 出力確率は以下のように決める。 $$ \\begin{cases} P\\left(m | \\text{hyper} \\right) &= 1 - P\\left(u | \\text{hyper} \\right) &= \\theta\\\\ P\\left(u | \\text{hypo} \\right) &= 1 - P\\left(m | \\text{hypo} \\right) &= \\theta\\end{cases}\\\\ \\therefore P\\left(m_i,u_i | s_i = \\text{hyper} \\right) = \\theta&#94;{m_i}\\ast\\left(1-\\theta\\right)&#94;{u_i} $$ この時、 $$ \\begin{aligned} \\sum_{m_i}\\sum_{u_i}P\\left(m_i,u_i | s_i = \\text{hyper} \\right) &= \\sum_{m_i\\geq1}\\theta&#94;{m_i}\\ast\\sum_{u_i\\geq1}\\left(1-\\theta\\right)&#94;{u_i}\\\\ &= \\left(\\frac{\\theta}{1-\\theta}\\right)\\left(\\frac{1-\\theta}{\\theta}\\right)\\\\ &= 1 \\end{aligned} $$ となるので、この出力確率が確率の条件を満たすことがわかる。（$P\\left(m_i,u_i | s_i = \\text{hypo} \\right) $ も同様。） ※ ここで、題意の意図を汲み取って $m_i\\geq1,u_i\\geq1$ と定義しているが、正直この定義はよくわからない。 また、この確率分布では、単純なリード数が増えることにもペナルティがかかるため、あまり良い定義とは思えない。 （※問題文の解釈が間違っている可能性もある。） 例えば、全体で読んだリード数が $\\text{total}_i( = m_i + u_i)$ と与えられた状況で、 $$P\\left(m_i,u_i | s_i = \\text{hyper} \\right) = _{\\text{total}_i}C_{m_i} \\theta&#94;{m_i} \\ast \\left(1-\\theta\\right)&#94;{u_i}$$ という二項分布でモデル化を行うことも一つの手である。（この時、$\\text{total}_i$ は単純なマルコフモデルに従うと考えればサンプリングも行えるが、サンプリングを行う有用性があまり考えられなかったので今回は割愛する。） したがって、この条件で $Q$ 関数を表すと、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\ln \\phi_k\\left(m_n,u_n\\right) \\end{aligned}\\qquad (13.17) $$ となる。なお、ここで $$ \\phi_k\\left(m_n,u_n\\right) = \\begin{cases} \\theta&#94;{m_n}\\ast\\left(1-\\theta\\right)&#94;{u_n} & \\left(z_{nk} = \\text{hyper}\\right)\\\\ \\left(1-\\theta\\right)&#94;{m_n}\\ast\\theta&#94;{u_n} & \\left(z_{nk} = \\text{hypo}\\right)\\\\ \\end{cases} $$ 解答 ※ 先ほどと同様に、以下のプログラムファイルを作成して実行した。 kadai03_HMM.py ```python # coding: utf-8 import numpy as np import pandas as pd from kerasy.ML.HMM import MSSHMM from kerasy.clib._pyutils import extract_continuous_area if __name__ == \"__main__\": df = pd.read_csv(\"E003_FractionalMethylatioLength.txt\") X = df[[\"converted\", \"unconverted\"]].values model = MSSHMM(n_hstates=2, random_state=0) model._init_params(X, \"random\") for t in [0.3,0.5,0.7]: for theta in [0.2, 0.5, 0.8]: model.transit = np.asarray([ [t, 1-t], [1-t, t], ], dtype=float) model.theta = theta predictions = model.predict(X).astype(np.int32) detected_area = extract_continuous_area(predictions).astype(np.int32) np.save(f\"t:{t}_theta:{theta}.npy\", detected_area) ``` median $\\theta$ \\ $t$ 0.3 0.5 0.7 0.2 16.0 30.0 36.0 0.5 1.0 1.0 - 0.8 2.0 2.0 2.0 90% tile $\\theta$ \\ $t$ 0.3 0.5 0.7 0.2 123.0 164.0 196.0 0.5 1.0 1.0 - 0.8 4.0 6.0 6.0 mean $\\theta$ \\ $t$ 0.3 0.5 0.7 0.2 44.89 64.36 76.48 0.5 1.00 1.00 - 0.8 5.31 8.22 8.57 variance $\\theta$ \\ $t$ 0.3 0.5 0.7 0.2 5568.55 9178.02 13449.15 0.5 0.00 0.00 - 0.8 488.51 1020.93 1374.86 score $\\theta$ \\ $t$ 0.3 0.5 0.7 0.2 45792177 45854238 46085466 0.5 25664100 1 - 0.8 5411770 5123127 5167225 num $\\theta$ \\ $t$ 0.3 0.5 0.7 0.2 1020041 712421 602620 0.5 25664100 1 0 0.8 1020041 623326 602620 パラメータ学習 ※ ここでは、遷移確率がただ一つのパラメータ $t$ に依存し、出力確率もただ一つのパラメータ $\\theta$ に依存する kerasy.ML.HMM.MSSHMM ではなく、より一般化された Binomial HMM を利用することにする。 In [11]: from kerasy.ML.HMM import BinomialHMM from kerasy.clib._pyutils import extract_continuous_area In [12]: X = df [[ \"converted\" , \"unconverted\" ]] . values In [13]: model = BinomialHMM ( n_hstates = 2 ) In [14]: model . fit ( X ) BinomialHMM (Baum-Welch) 002/100 [--------------------] 2.00% - 378.288s log probability: -132606130.87920488 In [15]: # Not necessary model . save_params ( \"kadai03_HMM.json\" ) In [16]: # Not necessary model . load_params ( \"kadai03_HMM.json\" ) Loading Parameters from kadai03_HMM.json Converted model_params type from list to np.ndarray. Converted initial type from list to np.ndarray. Converted transit type from list to np.ndarray. Converted thetas type from list to np.ndarray. Set rnd the internal state of the generator. In [17]: predictions = model . predict ( X ) . astype ( np . int32 ) detected_area = np . asarray ( extract_continuous_area ( predictions ), dtype = np . int32 ) detected_length = detected_area [:, 1 ] In [18]: plt . hist ( detected_length , bins = 30 ) plt . title ( f \"The histgram of detected length (HMM)\" ) plt . xlabel ( \"detected length\" ), plt . ylabel ( \"frequency\" ) plt . show () In [19]: median , tile90 = np . percentile ( a = detected_length , q = [ 50 , 90 ]) print ( f \"- median : { median } \" ) print ( f \"- 90%-tile: { tile90 } \" ) print ( f \"- mean : { np . mean ( detected_length ) } \" ) print ( f \"- variance: { np . var ( detected_length ) } \" ) print ( f \"- score : { np . sum ( detected_length ) } \" ) print ( f \"- num : { len ( detected_length ) } \" ) - median : 32.0 - 90%-tile: 158.0 - mean : 63.31114068764987 - variance: 8260.976020518077 - score : 45332866 - num : 716033 課題2 以下のデータの関連を調べよ。例えば、「（プロモータ領域の）CpG islandsは低メチル化しているか」「高/低メチル化領域を伴う遺伝子は、それぞれ特徴があるか」など。 低メチル化領域：g;Profiler -> http://biit.cs.ut.ee/gprofiler/gost など。 CpG islands：hg38参照配列から検出を行う。この時、CpG islandsの定義は \"Gardiner-Garden, Frommer (1987) CpG islands in vertebrate genomes\" で定義されているものがよく参照される。 （CGIs are regions with >= 200 bp, O/E CpG >= 0.6, %GC >= 0.5） 遺伝子領域： GENCODE を利用する。 解答 In [20]: raise NotImplementedError ( \"Not Checked.\" ) --------------------------------------------------------------------------- NotImplementedError Traceback (most recent call last) in ----> 1 raise NotImplementedError ( \"Not Checked.\" ) NotImplementedError : Not Checked. 課題3 動的計画法（応用例題） 額面が $d_k\\left(1\\leq k\\leq K\\right)$ の $K$ 種類の硬貨が通用しているとする。 $T$ 単位をちょうど支払うのに必要な硬貨の最小枚数 $m(T)$ は？ ただし、額面 $d_1$ の硬貨は同時に $L$ 枚以下しか使えないものとする。 $m(T)$ と、具体的な支払方法を出力するアルゴリズムを実装する。この時の計算量を $K,T,L$ の式で表現し、実際に計測する。 解答 In [21]: # 内訳を整形して記述する関数 def breakdown ( combs ): \"\"\" display breakdowns \"\"\" use_coins = sorted ( set ( combs )) num_coins = [ combs . count ( coin ) for coin in use_coins ] total_pay = [ n * coin for n , coin in zip ( use_coins , num_coins )] width_coin = max ([ len ( str ( e )) for e in use_coins ] + [ len ( \"coins\" )]) width_num = max ([ len ( str ( e )) for e in num_coins ] + [ len ( \"number\" )]) width_total = max ([ len ( str ( e )) for e in total_pay ] + [ len ( \"pay\" ), len ( str ( sum ( total_pay )))]) width_line = width_coin + width_num + width_total + 2 print_func = lambda c , n , p : print ( f \" { c : &#94; { width_coin }} | { n : > { width_num }} | { p : > { width_total }} \" ) print_func ( 'coins' , 'number' , 'pay' ) print ( \"=\" * width_line ) for coin , num , t in zip ( use_coins , num_coins , total_pay ): print_func ( coin , num , t ) print ( \"-\" * width_line ) print_func ( 'total' , sum ( num_coins ), sum ( total_pay )) アルゴリズム 制約なし まず、 額面 $d_1$ の硬貨が $L$ 回しか使えない という制約式がないとして、上記の問題を考える。すると、この問題は 最適性の原理を満たす。 $$m\\left(T\\right) = \\min_k\\left\\{m\\left(T - d_k\\right)\\right\\} + 1$$ これは当然のことで、もしこの等号が成り立たなければ、$m\\left(T - d_k\\right)$ と $m\\left(T\\right)$ のどちらかが最小枚数でないことになってしまうので、 矛盾 が生じてしまう。ゆえに、 この再帰的関係の右辺を展開してゆけば、そのうち解が求まる。 In [22]: def not_restricted_smart_pay ( coins , total ): \"\"\" Find the minimum number of coin combinations by using Dynamic Programming. @params coins: (list) Coin Types. @params total: (int) Amount of Payment. \"\"\" total += 1 # because 0-origin. coins = np . asarray ( coins , dtype = int ) if len ( np . unique ( coins )) < len ( coins ): raise ValueError ( \"All elements of `coins` must be different integers.\" ) # Initialization. B = np . zeros ( shape = ( total ), dtype = int ) # Memory for Traceback. m = np . full ( fill_value = np . inf , shape = ( total )) m [ 0 ] = 0 for coin in coins : m [ coin ] = 1 # Recursion for t in range ( 1 , total ): cands = [ m [ t - coin ] if ( t - coin ) >= 0 else np . inf for coin in coins ] if np . all ( np . array ( cands ) == np . inf ): continue k = np . argmin ( cands ) m [ t ] = m [ t - coins [ k ]] + 1 B [ t ] = t - coins [ k ] # Trace Back. idx = total - 1 combs = [] while idx : last = B [ idx ] combs . append ( idx - last ) idx = last breakdown ( combs ) In [23]: not_restricted_smart_pay ([ 11 , 7 , 4 , 2 ], 100 ) coins|number|pay ================ 4 | 3| 12 11 | 8| 88 ---------------- total| 11|100 制約付き① 次に、 ただし、額面 $d_1$ の効果は同時に $L$ 枚以下しか使えないものとする。 という制約条件を考える。そこで、 「$d_1$ をちょうど $l$ 枚だけ使って $t$ 単位支払うのに必要な硬貨の枚数の最小枚数」 を表す $m_l(t)\\left(0\\leq l\\leq L\\right)$ を導入し、先ほどの 区間分割アルゴリズム の考え方を用いて、これらの効率的な求め方を考える。 まず、純粋に $L+1$ 個の状態を別々の変数として保持すると、以下のようになる。 $$ \\begin{cases} \\begin{aligned} m_0(t) &= \\min_{k\\neq1}\\left\\{m_0(t-d_k)\\right\\}\\\\ m_l(t) &= m_{l-1}\\left(t-d_1\\right) + 1\\qquad\\left(0 < l < L\\right)\\\\ m_L(t) &= \\min\\left\\{\\min_{k\\neq1}\\left\\{m_{L}(t-d_k)\\right\\}, m_{L-1}\\left(t-d_1\\right)\\right\\} + 1\\\\ \\end{aligned} \\end{cases} $$ ここで、 $$ \\begin{aligned} m_{L-1}(t) &= m_{L-2}(t-d_1)+1\\\\ &= \\cdots\\\\ &= m_0\\left(t - (L-1)d_1\\right) + \\left(L-1\\right) \\end{aligned} $$ という関係が導けるので、上記を用いて整理すると、 $$ \\begin{cases} \\begin{aligned} m_0(t) &= \\min_{k\\neq1}\\left\\{m_0(t-d_k)\\right\\}\\\\ m_l(t) &= m_{0}\\left(t-ld_1\\right) + l\\qquad\\left(0 < l < L\\right)\\\\ m_L(t) &= \\min\\left\\{\\min_{k\\neq1}\\left\\{m_{L}(t-d_k)\\right\\}+1, m_0\\left(t-Ld_1\\right) + L\\right\\}\\\\ \\end{aligned} \\end{cases} $$ となり、 $L$ に依存することなく、\"2つ\"の変数のみでこれを表せた。 In [24]: def restricted_smart_pay ( coins , total , L ): # Initialization. coins = np . asarray ( coins , dtype = int ) if len ( np . unique ( coins )) < len ( coins ): raise ValueError ( \"All elements of `coins` must be different integers.\" ) K = len ( coins ) total += 1 # because 0-origin. B = np . zeros ( shape = ( total * 2 ), dtype = int ) # Memory for Traceback. m = np . full ( fill_value = np . inf , shape = ( total , 2 )) m [ 0 , 0 ] = 0 for k in range ( 1 , K ): m [ coins [ k ], 0 ] = 1 # Recursion for t in range ( 1 , total ): # m0 cands = [ m [ t - coins [ k ], 0 ] if ( t - coins [ k ]) >= 0 else np . inf for k in range ( 1 , K )] if np . all ( np . array ( cands ) == np . inf ): continue k = np . argmin ( cands ) + 1 m [ t , 0 ] = m [ t - coins [ k ], 0 ] + 1 B [ t ] = t - coins [ k ] # mL cands = [ m [ t - coins [ k ], 1 ] if ( t - coins [ k ]) >= 0 else np . inf for k in range ( 1 , K )] k = np . argmin ( cands ) + 1 if t - L * coins [ 0 ] >= 0 and m [ t - L * coins [ 0 ], 0 ] + L < m [ t - coins [ k ], 1 ] + 1 : m [ t , 1 ] = m [ t - L * coins [ 0 ], 0 ] + L B [ t + total ] = t - L * coins [ 0 ] else : if np . all ( np . array ( cands ) == np . inf ): continue m [ t , 1 ] = m [ t - coins [ k ], 1 ] + 1 B [ t + total ] = t - coins [ k ] + total num_d1 = np . argmin ([ m [ - 1 - coins [ 0 ] * l , 0 ] + l for l in range ( L + 1 )]) idx = total - 1 - num_d1 * coins [ 0 ] if num_d1 != L else total * 2 - 1 combs = [ coins [ 0 ] for _ in range ( num_d1 )] while idx : last = B [ idx ] combs . append ( idx % total -last%total) idx = last if num_d1 == L : combs . pop ( - 1 ) breakdown ( combs ) In [25]: restricted_smart_pay ([ 11 , 7 , 4 , 2 ], 100 , 1 ) coins|number|pay ================ 2 | 1| 2 7 | 14| 98 ---------------- total| 15|100 制約付き② しかし、 $$ \\begin{aligned} m_L(t) &= \\min \\begin{cases} \\begin{aligned} &\\min_{k\\neq1}\\left\\{m_{L}(t-d_k)\\right\\}+1\\\\ &m;_0\\left(t-Ld_1\\right) + L \\end{aligned} \\end{cases}\\\\ &=\\min \\begin{cases} \\begin{aligned} &\\min_{k\\neq1}\\left\\{m_{0}\\left(\\left(t-Ld_1\\right)-d_k\\right)\\right\\}+\\left(L+1\\right)\\\\ &m;_0\\left(t-Ld_1\\right) + L \\end{aligned} \\end{cases}\\\\ \\end{aligned} $$ と変形でき、最終式の中身が等しくなることは明らか。したがって、 $$ \\begin{cases} \\begin{aligned} m_0(t) &= \\min_{k\\neq1}\\left\\{m_0(t-d_k)\\right\\}\\\\ m_l(t) &= m_{0}\\left(t-ld_1\\right) + l\\qquad\\left(0 < l \\leq L\\right)\\\\ \\end{aligned} \\end{cases} $$ となり、 $L$ に依存することなく、\"1つ\"の変数のみでこれを表せた。 In [26]: def smart_pay ( coins , total , limit = None , verbose = 1 ): \"\"\" Find the minimum number of coin combinations by using Dynamic Programming. @params coins: (int list) Coins. @params total: (int) Amount of Payment. @params limit: (int) Maximum number of times a restricted coin can be used. \"\"\" total += 1 # because 0-origin. if len ( set ( coins )) < len ( coins ): raise ValueError ( \"All elements of `coins` must be different integers.\" ) restricted = coins [ 0 ] free_coins = coins [ 1 :] if limit is None : limit = total // restricted + 1 elif verbose : print ( f ' { restricted } coin can only be used up to { limit } times at the same time.' ) # Initialization. B = [ 0 for _ in range ( total )] # Memory for Traceback. m = [ 0 if t == 0 else 1 if t in free_coins else float ( 'inf' ) for t in range ( total )] # Recursion for t in range ( 1 , total ): cands = [ m [ t - coin ] if ( t - coin ) >= 0 else float ( 'inf' ) for coin in free_coins ] if sum ([ e != float ( 'inf' ) for e in cands ]) == 0 : continue # B[t]=0; m[t]=float('inf') : default. minnum = min ( cands ) m [ t ], B [ t ] = [( e + 1 , t - coin ) for e , coin in zip ( cands , free_coins ) if e == minnum ][ 0 ] ms = [( l , m [ - 1 - restricted * l ] + l ) for l in range ( limit + 1 ) if restricted * l <= total ] num_restricted , num_total = min ( ms , key = lambda x : x [ 1 ]) idx = total - 1 - restricted * num_restricted combs = [ restricted for _ in range ( num_restricted )] while idx : last = B [ idx ] combs . append ( idx - last ) idx = last if verbose : breakdown ( combs ) In [27]: for l in range ( 0 , 9 , 2 ): smart_pay ([ 11 , 7 , 4 , 2 ], 100 , limit = l ) print () 11 coin can only be used up to 0 times at the same time. coins|number|pay ================ 2 | 1| 2 7 | 14| 98 ---------------- total| 15|100 11 coin can only be used up to 2 times at the same time. coins|number|pay ================ 4 | 2| 8 7 | 10| 70 11 | 2| 22 ---------------- total| 14|100 11 coin can only be used up to 4 times at the same time. coins|number|pay ================ 7 | 8| 56 11 | 4| 44 ---------------- total| 12|100 11 coin can only be used up to 6 times at the same time. coins|number|pay ================ 7 | 8| 56 11 | 4| 44 ---------------- total| 12|100 11 coin can only be used up to 8 times at the same time. coins|number|pay ================ 2 | 1| 2 7 | 3| 21 11 | 7| 77 ---------------- total| 11|100 計算量 $L$ に依存することなく、\"1つ\"の変数のみで再帰式を表せた ことから、アルゴリズムの計算量は $O\\left(KT\\right)$ となることがわかる。 実測 In [28]: from kerasy.utils import measure_complexity In [29]: seed = 0 coin_cands = np . arange ( 1 , 100 ) limit In [30]: total = 100000 K = 10 coins = np . random . RandomState ( seed ) . choice ( coin_cands , K , replace = False ) In [31]: for l in [ 10 , 50 , 100 ]: kwargs = { 'limit' : l , 'verbose' : 0 } time = measure_complexity ( smart_pay , coins , total , ** kwargs ) print ( f \"L: { l : >3 } , processing time: { time : >5.3f } \" ) L: 10, processing time: 2.267 L: 50, processing time: 2.236 L:100, processing time: 2.161 以上より、少し雑だが $L$ が計算量に関与しないことがわかる。続いて、$K$ と $T$ について調べる。 In [32]: kwargs = { 'limit' : 10 , 'verbose' : 0 } Tcands = [ 1000 , 10000 , 100000 , 1000000 ] Kcands = [ 3 , 30 , 300 ] coin_cands = np . arange ( 1 , 1000 ) In [33]: print_func = lambda K , T , time : print ( f \" { K : >5 } | { T : >7 } | { time : >7.3f } [s]\" ) In [34]: memory = [] print ( f \" { 'coins' : &#94;5 } | { 'total' : &#94;7 } | { 'time[s]' : >10 } \" ) print ( \"=\" * 24 ) for K in Kcands : coins = np . random . RandomState ( seed ) . choice ( coin_cands , K , replace = False ) for T in Tcands : time = measure_complexity ( smart_pay , coins , T , repetitions_ = 3 , ** kwargs ) print_func ( K , T , time ) memory . append ([ K , T , time ]) coins| total | time[s] ======================== 3| 1000| 0.011[s] 3| 10000| 0.080[s] 3| 100000| 0.920[s] 3|1000000| 9.394[s] 30| 1000| 0.043[s] 30| 10000| 0.470[s] 30| 100000| 4.822[s] 30|1000000| 59.325[s] 300| 1000| 0.438[s] 300| 10000| 5.137[s] 300| 100000| 51.688[s] 300|1000000|525.224[s] 上記より、$K,T$ に関しても線形に計算量が増えていることがわかる。プロットで確かめると、以下のようになる。 K In [35]: fig , axes = plt . subplots ( nrows = 1 , ncols = 3 , figsize = ( 18 , 6 )) for ax , k in zip ( axes , Kcands ): tmp = [( e [ 1 ], e [ 2 ]) for e in memory if e [ 0 ] == k ] for t , time in tmp : ax . scatter ( t , time , color = \"red\" ) ax . grid () ax . set_xscale ( \"log\" ), ax . set_yscale ( \"log\" ) ax . set_title ( f \"$K= { k } $\" ), ax . set_xlabel ( \"total amount\" ), ax . set_ylabel ( \"Processing time\" ) plt . show () T In [224]: fig , axes = plt . subplots ( nrows = 1 , ncols = 4 , figsize = ( 24 , 6 )) for ax , T in zip ( axes , Tcands ): tmp = [( e [ 0 ], e [ 2 ]) for e in memory if e [ 1 ] == t ] for k , time in tmp : ax . scatter ( k , time , color = \"blue\" ) ax . grid () ax . set_xscale ( \"log\" ), ax . set_yscale ( \"log\" ) ax . set_title ( f \"$T= { t } $\" ), ax . set_xlabel ( \"total amount\" ), ax . set_ylabel ( \"Processing time\" ) plt . show () こちらも、共に線形に増えているように見える。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(森下)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-3.html"},{"title":"生命情報表現論 第4回","text":"グループ議論とプレゼンテーション 述語論理","tags":"生命情報表現論","url":"https://iwasakishuto.github.io/University/3A/生命情報表現論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生命情報表現論-4.html"},{"title":"1.繰返し構造","text":"定義：タンデムリピート 記号の集合を $\\Sigma$（例えば $\\{A,C,G,T\\}$）、長さ1以上の記号列の集合を $\\Sigma&#94;{+}$ と表記する。記号列 $p\\in\\Sigma&#94;{+}$ が $k(\\geq1)$ 回連続して出現する記号列を、正確な タンデムリピート(tandem repeat) と呼び、$p&#94;k$ と表記する。ある記号列を正確なタンデムリピートとアラインメントした時に、ある閾値以上の配列類似度を持つ時、タンデムリピートと呼ぶ。 Ref: Kerasy Documentation: Tandem Repeats 演習問題1(必須) 記号列 $q$ が正確なタンデムリピート $p&#94;k$ を部分列として含むとする。$p$ と $k$ を検出するアルゴリズムを考えよ。 例題として $10$ 個の配列を与えるので、各配列から $p$ と $k$ を決定せよ。 解答 In [1]: import time import matplotlib.pyplot as plt In [2]: from kerasy.Bio.tandem import find_tandem from kerasy.Bio.string import StringSearch from kerasy.utils import readMultiSeq In [3]: sequences = readMultiSeq ( \"exact.fasta\" ) In [4]: len_sequences = [ len ( seq ) for seq in sequences ] Results In [8]: fig , ( ax_sais , ax_dp ) = plt . subplots ( 1 , 2 , figsize = ( 12 , 6 )) ax_sais . scatter ( len_sequences , pt_sais , color = \"r\" ) ax_sais . set_xlabel ( \"the length of sequence\" ), ax_sais . set_ylabel ( \"Processing time.\" ), ax_sais . set_title ( \"Suffix Array\" , fontsize = 18 ) ax_dp . scatter ( len_sequences , pt_dp , color = \"b\" ) ax_dp . set_xlabel ( \"the length of sequence\" ), ax_dp . set_ylabel ( \"Processing time.\" ), ax_dp . set_title ( \"Dynamic Programming\" , fontsize = 18 ) plt . tight_layout () plt . show () Suffix Array Dynamic Programming $$O(n)$$ $$O(n&#94;2)$$ find tandem repeat DP In [5]: pt_dp = [] for seq in sequences : s = time . time () score , tandems = find_tandem ( seq , method = \"DP\" ) pt_dp . append ( time . time () - s ) print ( f \"score : { score : <4 } \" ) print ( f \"tandem: \\n { tandems [ 0 ] } \" ) print () score : 33 tandem: TTG score : 259 tandem: TTTTGCC score : 493 tandem: ATCAGTTTAAATTACCA score : 3127 tandem: TCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGC score : 1001 tandem: ACTGGTATATGGAGAGTACCACGCCACAAAACGTTCTCGTGAACGGGCCGCATTAACAAGTTTTACTCATCTTGCAATTGGGACGTCCCTG score : 2369 tandem: CCCGGGTTAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCG score : 2869 tandem: CGTTCTGATTTTACTTGCCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAATCACGGAAGATTATGAGCACTTCGCGG score : 2223 tandem: TAAACACATTCACGGCATAGCATTTAAAGTGACCGCGGGCGGCAGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCGGGCGGGCCAGAACAGAGCACGCAACCCCACTACAATAGCTACCATCCGTCTGGCGTACCTGATGCATCACTGATTGATTGGAGAGC score : 8517 tandem: CATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGAC score : 7007 tandem: ATTAGTACCCCATCGGTTTTATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCTTCGGAGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTACCGTACTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTACTTCAACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCTGACCGAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGTAAAAGCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACGGGCGCTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGTGGGCTTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAGTTTGTTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCTGCAGTTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATTCTGTTCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTGATCCCTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTTGTATTTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGAACCAAGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAACACGGACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCCGGTCATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGTAAGATCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTCTGCTGGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCCGAACTATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAAGTGCTACAGTCTTACTCCCCCTATAGCTGGGTGACT find tandem repeat using Suffix Array In [6]: pt_sais = [] for seq in sequences : s = time . time () score , tandems = find_tandem ( seq , method = \"SAIS\" ) pt_sais . append ( time . time () - s ) print ( f \"score : { score : <4 } \" ) print ( f \"tandem: \\n { tandems [ 0 ] } \" ) print () score : 33 tandem: TGT score : 259 tandem: TTTGCCT score : 493 tandem: TCAGTTTAAATTACCAA score : 3127 tandem: TCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGC score : 1001 tandem: GTATATGGAGAGTACCACGCCACAAAACGTTCTCGTGAACGGGCCGCATTAACAAGTTTTACTCATCTTGCAATTGGGACGTCCCTGACTG score : 2369 tandem: CCCGGGTTAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCG score : 2869 tandem: GTTCTGATTTTACTTGCCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAATCACGGAAGATTATGAGCACTTCGCGGC score : 2223 tandem: TAAACACATTCACGGCATAGCATTTAAAGTGACCGCGGGCGGCAGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCGGGCGGGCCAGAACAGAGCACGCAACCCCACTACAATAGCTACCATCCGTCTGGCGTACCTGATGCATCACTGATTGATTGGAGAGC score : 8517 tandem: CATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGAC score : 7007 tandem: ATTAGTACCCCATCGGTTTTATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCTTCGGAGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTACCGTACTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTACTTCAACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCTGACCGAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGTAAAAGCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACGGGCGCTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGTGGGCTTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAGTTTGTTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCTGCAGTTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATTCTGTTCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTGATCCCTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTTGTATTTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGAACCAAGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAACACGGACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCCGGTCATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGTAAGATCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTCTGCTGGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCCGAACTATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAAGTGCTACAGTCTTACTCCCCCTATAGCTGGGTGACT display tandem repeat In [7]: for seq in sequences : db = StringSearch ( seq , verbose = 0 ) tandem = db . find_tandem () db . where ( tandem , width = 50 ) print ( \" \\n \" ) Model: Suffix Array Number of matches: 11 Query: TGT =============================================================== S: [00] GCCCCTGCACTCTCGAGTTGCGCAAAGTCTTGTTGTTGTTGTTGTTGTTG [50] : [00] <-><-><-><-><-><-><- [50] S: [50] TTGTTGTTGTTGTGGGAATTGGC [72] : [50] ><-><-><-><-> [72] =============================================================== Model: Suffix Array Number of matches: 37 Query: TTTGCCT ================================================================= S: [000] ATTACTATTCGCCGATGGTTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTT [050] : [000] <-----><-----><-----><-----><- [050] S: [050] TGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTT [100] : [050] ----><-----><-----><-----><-----><-----><-----><-- [100] S: [100] GCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTG [150] : [100] ---><-----><-----><-----><-----><-----><-----><--- [150] S: [150] CCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGC [200] : [150] --><-----><-----><-----><-----><-----><-----><---- [200] S: [200] CTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCC [250] : [200] -><-----><-----><-----><-----><-----><-----><----- [250] S: [250] TTTTGCCTTTTGCCTTTTGCCTTTTGCCTCAGTGTTTGCCCATGTAATG [298] : [250] ><-----><-----><-----><-----> [298] ================================================================= Model: Suffix Array Number of matches: 29 Query: TCAGTTTAAATTACCAA ================================================================= S: [000] GATAGACGGATCAGTTTAAATTACCAATCAGTTTAAATTACCAATCAGTT [050] : [000] <---------------><---------------><----- [050] S: [050] TAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTACCAATCAGT [100] : [050] ----------><---------------><---------------><---- [100] S: [100] TTAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTACCAATCAG [150] : [100] -----------><---------------><---------------><--- [150] S: [150] TTTAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTACCAATCA [200] : [150] ------------><---------------><---------------><-- [200] S: [200] GTTTAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTACCAATC [250] : [200] -------------><---------------><---------------><- [250] S: [250] AGTTTAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTACCAAT [300] : [250] --------------><---------------><--------------->< [300] S: [300] CAGTTTAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTACCAA [350] : [300] ---------------><---------------><---------------> [350] S: [350] TCAGTTTAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTACCA [400] : [350] <---------------><---------------><--------------- [400] S: [400] ATCAGTTTAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTACC [450] : [400] ><---------------><---------------><-------------- [450] S: [450] AATCAGTTTAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTAC [500] : [450] -><---------------><---------------><------------- [500] S: [500] CAACTATAGGAGCAAGGTTGGTTTCTAACTCCT [532] : [500] --> [532] ================================================================= Model: Suffix Array Number of matches: 53 Query: TCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGC =================================================================== S: [0000] ACCACTACGGTTTGATGAAAGTAGTCAAGGAGGTCGACGTGTAGGGCGTG [0050] : [0000] [0050] S: [0050] TCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCT [0100] : [0050] <------------------------------------------------- [0100] S: [0100] CCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTG [0150] : [0100] --------><---------------------------------------- [0150] S: [0150] ACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCC [0200] : [0150] -----------------><------------------------------- [0200] S: [0200] CGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAG [0250] : [0200] --------------------------><---------------------- [0250] S: [0250] GCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTA [0300] : [0250] -----------------------------------><------------- [0300] S: [0300] GGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCAC [0350] : [0300] --------------------------------------------><---- [0350] S: [0350] CCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATC [0400] : [0350] -------------------------------------------------- [0400] S: [0400] ATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTC [0450] : [0400] ---><--------------------------------------------- [0450] S: [0450] AGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGG [0500] : [0450] ------------><------------------------------------ [0500] S: [0500] CCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGC [0550] : [0500] ---------------------><--------------------------- [0550] S: [0550] AGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAAC [0600] : [0550] ------------------------------><------------------ [0600] S: [0600] GAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGA [0650] : [0600] ---------------------------------------><--------- [0650] S: [0650] CTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCT [0700] : [0650] ------------------------------------------------>< [0700] S: [0700] CCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTC [0750] : [0700] -------------------------------------------------- [0750] S: [0750] CATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGA [0800] : [0750] -------><----------------------------------------- [0800] S: [0800] CGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCC [0850] : [0800] ----------------><-------------------------------- [0850] S: [0850] GTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGG [0900] : [0850] -------------------------><----------------------- [0900] S: [0900] CAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAG [0950] : [0900] ----------------------------------><-------------- [0950] S: [0950] GAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACC [1000] : [0950] -------------------------------------------><----- [1000] S: [1000] CCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCA [1050] : [1000] -------------------------------------------------- [1050] S: [1050] TGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCA [1100] : [1050] --><---------------------------------------------- [1100] S: [1100] GCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGC [1150] : [1100] -----------><------------------------------------- [1150] S: [1150] CTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCA [1200] : [1150] --------------------><---------------------------- [1200] S: [1200] GCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACG [1250] : [1200] -----------------------------><------------------- [1250] S: [1250] AAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGAC [1300] : [1250] --------------------------------------><---------- [1300] S: [1300] TTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTC [1350] : [1300] -----------------------------------------------><- [1350] S: [1350] CACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCC [1400] : [1350] -------------------------------------------------- [1400] S: [1400] ATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGAC [1450] : [1400] ------><------------------------------------------ [1450] S: [1450] GTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCG [1500] : [1450] ---------------><--------------------------------- [1500] S: [1500] TGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGC [1550] : [1500] ------------------------><------------------------ [1550] S: [1550] AGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGG [1600] : [1550] ---------------------------------><--------------- [1600] S: [1600] AACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCC [1650] : [1600] ------------------------------------------><------ [1650] S: [1650] CGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCAT [1700] : [1650] -------------------------------------------------- [1700] S: [1700] GCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAG [1750] : [1700] -><----------------------------------------------- [1750] S: [1750] CTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCC [1800] : [1750] ----------><-------------------------------------- [1800] S: [1800] TGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAG [1850] : [1800] -------------------><----------------------------- [1850] S: [1850] CCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGA [1900] : [1850] ----------------------------><-------------------- [1900] S: [1900] AGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACT [1950] : [1900] -------------------------------------><----------- [1950] S: [1950] TAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCC [2000] : [1950] ----------------------------------------------><-- [2000] S: [2000] ACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCA [2050] : [2000] -------------------------------------------------- [2050] S: [2050] TCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACG [2100] : [2050] -----><------------------------------------------- [2100] S: [2100] TCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGT [2150] : [2100] --------------><---------------------------------- [2150] S: [2150] GGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCA [2200] : [2150] -----------------------><------------------------- [2200] S: [2200] GCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGA [2250] : [2200] --------------------------------><---------------- [2250] S: [2250] ACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCC [2300] : [2250] -----------------------------------------><------- [2300] S: [2300] GACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATG [2350] : [2300] -------------------------------------------------- [2350] S: [2350] CTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGC [2400] : [2350] ><------------------------------------------------ [2400] S: [2400] TCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCT [2450] : [2400] ---------><--------------------------------------- [2450] S: [2450] GACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGC [2500] : [2450] ------------------><------------------------------ [2500] S: [2500] CCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAA [2550] : [2500] ---------------------------><--------------------- [2550] S: [2550] GGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTT [2600] : [2550] ------------------------------------><------------ [2600] S: [2600] AGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCA [2650] : [2600] ---------------------------------------------><--- [2650] S: [2650] CCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCAT [2700] : [2650] -------------------------------------------------- [2700] S: [2700] CATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGT [2750] : [2700] ----><-------------------------------------------- [2750] S: [2750] CAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTG [2800] : [2750] -------------><----------------------------------- [2800] S: [2800] GCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAG [2850] : [2800] ----------------------><-------------------------- [2850] S: [2850] CAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAA [2900] : [2850] -------------------------------><----------------- [2900] S: [2900] CGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCG [2950] : [2900] ----------------------------------------><-------- [2950] S: [2950] ACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGC [3000] : [2950] -------------------------------------------------> [3000] S: [3000] TCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCT [3050] : [3000] <------------------------------------------------- [3050] S: [3050] CCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTG [3100] : [3050] --------><---------------------------------------- [3100] S: [3100] ACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCC [3150] : [3100] -----------------><------------------------------- [3150] S: [3150] CGTGGCCTGACGTCAGCTCCATCATGCATTGGCGACTTCGTTATTGCTAC [3200] : [3150] --------------------------> [3200] S: [3200] CACCTGTCTTACAGAGG [3216] : [3200] [3216] =================================================================== Model: Suffix Array Number of matches: 11 Query: GTATATGGAGAGTACCACGCCACAAAACGTTCTCGTGAACGGGCCGCATTAACAAGTTTTACTCATCTTGCAATTGGGACGTCCCTGACTG =================================================================== S: [0000] TATTCAATCAATCCGTCGTTTTAACAACACTCAGAAGCCAACTGGTATAT [0050] : [0000] <----- [0050] S: [0050] GGAGAGTACCACGCCACAAAACGTTCTCGTGAACGGGCCGCATTAACAAG [0100] : [0050] -------------------------------------------------- [0100] S: [0100] TTTTACTCATCTTGCAATTGGGACGTCCCTGACTGGTATATGGAGAGTAC [0150] : [0100] ----------------------------------><-------------- [0150] S: [0150] CACGCCACAAAACGTTCTCGTGAACGGGCCGCATTAACAAGTTTTACTCA [0200] : [0150] -------------------------------------------------- [0200] S: [0200] TCTTGCAATTGGGACGTCCCTGACTGGTATATGGAGAGTACCACGCCACA [0250] : [0200] -------------------------><----------------------- [0250] S: [0250] AAACGTTCTCGTGAACGGGCCGCATTAACAAGTTTTACTCATCTTGCAAT [0300] : [0250] -------------------------------------------------- [0300] S: [0300] TGGGACGTCCCTGACTGGTATATGGAGAGTACCACGCCACAAAACGTTCT [0350] : [0300] ----------------><-------------------------------- [0350] S: [0350] CGTGAACGGGCCGCATTAACAAGTTTTACTCATCTTGCAATTGGGACGTC [0400] : [0350] -------------------------------------------------- [0400] S: [0400] CCTGACTGGTATATGGAGAGTACCACGCCACAAAACGTTCTCGTGAACGG [0450] : [0400] -------><----------------------------------------- [0450] S: [0450] GCCGCATTAACAAGTTTTACTCATCTTGCAATTGGGACGTCCCTGACTGG [0500] : [0450] ------------------------------------------------>< [0500] S: [0500] TATATGGAGAGTACCACGCCACAAAACGTTCTCGTGAACGGGCCGCATTA [0550] : [0500] -------------------------------------------------- [0550] S: [0550] ACAAGTTTTACTCATCTTGCAATTGGGACGTCCCTGACTGGTATATGGAG [0600] : [0550] ---------------------------------------><--------- [0600] S: [0600] AGTACCACGCCACAAAACGTTCTCGTGAACGGGCCGCATTAACAAGTTTT [0650] : [0600] -------------------------------------------------- [0650] S: [0650] ACTCATCTTGCAATTGGGACGTCCCTGACTGGTATATGGAGAGTACCACG [0700] : [0650] ------------------------------><------------------ [0700] S: [0700] CCACAAAACGTTCTCGTGAACGGGCCGCATTAACAAGTTTTACTCATCTT [0750] : [0700] -------------------------------------------------- [0750] S: [0750] GCAATTGGGACGTCCCTGACTGGTATATGGAGAGTACCACGCCACAAAAC [0800] : [0750] ---------------------><--------------------------- [0800] S: [0800] GTTCTCGTGAACGGGCCGCATTAACAAGTTTTACTCATCTTGCAATTGGG [0850] : [0800] -------------------------------------------------- [0850] S: [0850] ACGTCCCTGACTGGTATATGGAGAGTACCACGCCACAAAACGTTCTCGTG [0900] : [0850] ------------><------------------------------------ [0900] S: [0900] AACGGGCCGCATTAACAAGTTTTACTCATCTTGCAATTGGGACGTCCCTG [0950] : [0900] -------------------------------------------------- [0950] S: [0950] ACTGGTATATGGAGAGTACCACGCCACAAAACGTTCTCGTGAACGGGCCG [1000] : [0950] ---><--------------------------------------------- [1000] S: [1000] CATTAACAAGTTTTACTCATCTTGCAATTGGGACGTCCCTGACTGCATAG [1050] : [1000] --------------------------------------------> [1050] S: [1050] AACAGACATACATCCGTATAA [1070] : [1050] [1070] =================================================================== Model: Suffix Array Number of matches: 23 Query: CCCGGGTTAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCG =================================================================== S: [0000] GTATAAAACTGAAGTAGTGAATCCAGTGATCCCGGGTTAAGTCATCATTC [0050] : [0000] <------------------- [0050] S: [0050] AACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGTT [0100] : [0050] -------------------------------------------------- [0100] S: [0100] CTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAAGTCATCA [0150] : [0100] --------------------------------><---------------- [0150] S: [0150] TTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAA [0200] : [0150] -------------------------------------------------- [0200] S: [0200] GTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAAGTCA [0250] : [0200] -----------------------------------><------------- [0250] S: [0250] TCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACG [0300] : [0250] -------------------------------------------------- [0300] S: [0300] AAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAAG [0350] : [0300] --------------------------------------><---------- [0350] S: [0350] TCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAG [0400] : [0350] -------------------------------------------------- [0400] S: [0400] ACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTT [0450] : [0400] -----------------------------------------><------- [0450] S: [0450] AAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACT [0500] : [0450] -------------------------------------------------- [0500] S: [0500] AAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGG [0550] : [0500] --------------------------------------------><---- [0550] S: [0550] GTTAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGC [0600] : [0550] -------------------------------------------------- [0600] S: [0600] ACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCC [0650] : [0600] -----------------------------------------------><- [0650] S: [0650] CGGGTTAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCT [0700] : [0650] -------------------------------------------------- [0700] S: [0700] CGCACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCC [0750] : [0700] -------------------------------------------------- [0750] S: [0750] GCCCGGGTTAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGAT [0800] : [0750] ><------------------------------------------------ [0800] S: [0800] CCTCGCACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCG [0850] : [0800] -------------------------------------------------- [0850] S: [0850] GCCGCCCGGGTTAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTG [0900] : [0850] ---><--------------------------------------------- [0900] S: [0900] GATCCTCGCACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAG [0950] : [0900] -------------------------------------------------- [0950] S: [0950] TCGGCCGCCCGGGTTAAGTCATCATTCAACCCGAGTAATACGCACGGTAT [1000] : [0950] ------><------------------------------------------ [1000] S: [1000] TTGGATCCTCGCACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGC [1050] : [1000] -------------------------------------------------- [1050] S: [1050] GAGTCGGCCGCCCGGGTTAAGTCATCATTCAACCCGAGTAATACGCACGG [1100] : [1050] ---------><--------------------------------------- [1100] S: [1100] TATTTGGATCCTCGCACTAAGACGAAAGTTCTTTTACAAGATACTGGAAC [1150] : [1100] -------------------------------------------------- [1150] S: [1150] TGCGAGTCGGCCGCCCGGGTTAAGTCATCATTCAACCCGAGTAATACGCA [1200] : [1150] ------------><------------------------------------ [1200] S: [1200] CGGTATTTGGATCCTCGCACTAAGACGAAAGTTCTTTTACAAGATACTGG [1250] : [1200] -------------------------------------------------- [1250] S: [1250] AACTGCGAGTCGGCCGCCCGGGTTAAGTCATCATTCAACCCGAGTAATAC [1300] : [1250] ---------------><--------------------------------- [1300] S: [1300] GCACGGTATTTGGATCCTCGCACTAAGACGAAAGTTCTTTTACAAGATAC [1350] : [1300] -------------------------------------------------- [1350] S: [1350] TGGAACTGCGAGTCGGCCGCCCGGGTTAAGTCATCATTCAACCCGAGTAA [1400] : [1350] ------------------><------------------------------ [1400] S: [1400] TACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGTTCTTTTACAAGA [1450] : [1400] -------------------------------------------------- [1450] S: [1450] TACTGGAACTGCGAGTCGGCCGCCCGGGTTAAGTCATCATTCAACCCGAG [1500] : [1450] ---------------------><--------------------------- [1500] S: [1500] TAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGTTCTTTTACA [1550] : [1500] -------------------------------------------------- [1550] S: [1550] AGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAAGTCATCATTCAACCC [1600] : [1550] ------------------------><------------------------ [1600] S: [1600] GAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGTTCTTTT [1650] : [1600] -------------------------------------------------- [1650] S: [1650] ACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAAGTCATCATTCAA [1700] : [1650] ---------------------------><--------------------- [1700] S: [1700] CCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGTTCT [1750] : [1700] -------------------------------------------------- [1750] S: [1750] TTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAAGTCATCATT [1800] : [1750] ------------------------------><------------------ [1800] S: [1800] CAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGT [1850] : [1800] -------------------------------------------------- [1850] S: [1850] TCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAAGTCATC [1900] : [1850] ---------------------------------><--------------- [1900] S: [1900] ATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAA [1950] : [1900] -------------------------------------------------- [1950] S: [1950] AGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAAGTC [2000] : [1950] ------------------------------------><------------ [2000] S: [2000] ATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGAC [2050] : [2000] -------------------------------------------------- [2050] S: [2050] GAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAA [2100] : [2050] ---------------------------------------><--------- [2100] S: [2100] GTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAA [2150] : [2100] -------------------------------------------------- [2150] S: [2150] GACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGT [2200] : [2150] ------------------------------------------><------ [2200] S: [2200] TAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCAC [2250] : [2200] -------------------------------------------------- [2250] S: [2250] TAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCG [2300] : [2250] ---------------------------------------------><--- [2300] S: [2300] GGTTAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCG [2350] : [2300] -------------------------------------------------- [2350] S: [2350] CACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGT [2400] : [2350] ------------------------------------------------> [2400] S: [2400] AGATTCAATTCTGTCTGAG [2418] : [2400] [2418] =================================================================== Model: Suffix Array Number of matches: 19 Query: GTTCTGATTTTACTTGCCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAATCACGGAAGATTATGAGCACTTCGCGGC =================================================================== S: [0000] TACTAGCGACATTACGCGTACGTTCTGATTTTACTTGCCATGCAACCACG [0050] : [0000] <---------------------------- [0050] S: [0050] CACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTTAGATT [0100] : [0050] -------------------------------------------------- [0100] S: [0100] TTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAATCACGG [0150] : [0100] -------------------------------------------------- [0150] S: [0150] AAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCATGCAACCAC [0200] : [0150] ---------------------><--------------------------- [0200] S: [0200] GCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTTAGAT [0250] : [0200] -------------------------------------------------- [0250] S: [0250] TTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAATCACG [0300] : [0250] -------------------------------------------------- [0300] S: [0300] GAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCATGCAACCA [0350] : [0300] ----------------------><-------------------------- [0350] S: [0350] CGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTTAGA [0400] : [0350] -------------------------------------------------- [0400] S: [0400] TTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAATCAC [0450] : [0400] -------------------------------------------------- [0450] S: [0450] GGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCATGCAACC [0500] : [0450] -----------------------><------------------------- [0500] S: [0500] ACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTTAG [0550] : [0500] -------------------------------------------------- [0550] S: [0550] ATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAATCA [0600] : [0550] -------------------------------------------------- [0600] S: [0600] CGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCATGCAAC [0650] : [0600] ------------------------><------------------------ [0650] S: [0650] CACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTTA [0700] : [0650] -------------------------------------------------- [0700] S: [0700] GATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAATC [0750] : [0700] -------------------------------------------------- [0750] S: [0750] ACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCATGCAA [0800] : [0750] -------------------------><----------------------- [0800] S: [0800] CCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTT [0850] : [0800] -------------------------------------------------- [0850] S: [0850] AGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAAT [0900] : [0850] -------------------------------------------------- [0900] S: [0900] CACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCATGCA [0950] : [0900] --------------------------><---------------------- [0950] S: [0950] ACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGT [1000] : [0950] -------------------------------------------------- [1000] S: [1000] TAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAA [1050] : [1000] -------------------------------------------------- [1050] S: [1050] TCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCATGC [1100] : [1050] ---------------------------><--------------------- [1100] S: [1100] AACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAG [1150] : [1100] -------------------------------------------------- [1150] S: [1150] TTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAA [1200] : [1150] -------------------------------------------------- [1200] S: [1200] ATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCATG [1250] : [1200] ----------------------------><-------------------- [1250] S: [1250] CAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAA [1300] : [1250] -------------------------------------------------- [1300] S: [1300] GTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGA [1350] : [1300] -------------------------------------------------- [1350] S: [1350] AATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCAT [1400] : [1350] -----------------------------><------------------- [1400] S: [1400] GCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTA [1450] : [1400] -------------------------------------------------- [1450] S: [1450] AGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATG [1500] : [1450] -------------------------------------------------- [1500] S: [1500] AAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCA [1550] : [1500] ------------------------------><------------------ [1550] S: [1550] TGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGT [1600] : [1550] -------------------------------------------------- [1600] S: [1600] AAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTAT [1650] : [1600] -------------------------------------------------- [1650] S: [1650] GAAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCC [1700] : [1650] -------------------------------><----------------- [1700] S: [1700] ATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAG [1750] : [1700] -------------------------------------------------- [1750] S: [1750] TAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTA [1800] : [1750] -------------------------------------------------- [1800] S: [1800] TGAAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGC [1850] : [1800] --------------------------------><---------------- [1850] S: [1850] CATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGA [1900] : [1850] -------------------------------------------------- [1900] S: [1900] GTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATT [1950] : [1900] -------------------------------------------------- [1950] S: [1950] ATGAAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTG [2000] : [1950] ---------------------------------><--------------- [2000] S: [2000] CCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAG [2050] : [2000] -------------------------------------------------- [2050] S: [2050] AGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACAT [2100] : [2050] -------------------------------------------------- [2100] S: [2100] TATGAAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTT [2150] : [2100] ----------------------------------><-------------- [2150] S: [2150] GCCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTA [2200] : [2150] -------------------------------------------------- [2200] S: [2200] GAGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACA [2250] : [2200] -------------------------------------------------- [2250] S: [2250] TTATGAAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACT [2300] : [2250] -----------------------------------><------------- [2300] S: [2300] TGCCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCT [2350] : [2300] -------------------------------------------------- [2350] S: [2350] AGAGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGAC [2400] : [2350] -------------------------------------------------- [2400] S: [2400] ATTATGAAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTAC [2450] : [2400] ------------------------------------><------------ [2450] S: [2450] TTGCCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCC [2500] : [2450] -------------------------------------------------- [2500] S: [2500] TAGAGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGA [2550] : [2500] -------------------------------------------------- [2550] S: [2550] CATTATGAAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTA [2600] : [2550] -------------------------------------><----------- [2600] S: [2600] CTTGCCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGC [2650] : [2600] -------------------------------------------------- [2650] S: [2650] CTAGAGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACG [2700] : [2650] -------------------------------------------------- [2700] S: [2700] ACATTATGAAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTT [2750] : [2700] --------------------------------------><---------- [2750] S: [2750] ACTTGCCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTG [2800] : [2750] -------------------------------------------------- [2800] S: [2800] CCTAGAGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTAC [2850] : [2800] -------------------------------------------------- [2850] S: [2850] GACATTATGAAATCACGGAAGATTATGAGCACTTCGCGGCTGCATGCCC [2898] : [2850] ---------------------------------------> [2898] =================================================================== Model: Suffix Array Number of matches: 13 Query: TAAACACATTCACGGCATAGCATTTAAAGTGACCGCGGGCGGCAGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCGGGCGGGCCAGAACAGAGCACGCAACCCCACTACAATAGCTACCATCCGTCTGGCGTACCTGATGCATCACTGATTGATTGGAGAGC =================================================================== S: [0000] GTCGCACCAATAAACACATTCACGGCATAGCATTTAAAGTGACCGCGGGC [0050] : [0000] <--------------------------------------- [0050] S: [0050] GGCAGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCGGGCGG [0100] : [0050] -------------------------------------------------- [0100] S: [0100] GCCAGAACAGAGCACGCAACCCCACTACAATAGCTACCATCCGTCTGGCG [0150] : [0100] -------------------------------------------------- [0150] S: [0150] TACCTGATGCATCACTGATTGATTGGAGAGCTAAACACATTCACGGCATA [0200] : [0150] ------------------------------><------------------ [0200] S: [0200] GCATTTAAAGTGACCGCGGGCGGCAGTAAGACTTGCCGCGCTTGCGTGCA [0250] : [0200] -------------------------------------------------- [0250] S: [0250] GGATGGTAGAAGACCGGGCGGGCCAGAACAGAGCACGCAACCCCACTACA [0300] : [0250] -------------------------------------------------- [0300] S: [0300] ATAGCTACCATCCGTCTGGCGTACCTGATGCATCACTGATTGATTGGAGA [0350] : [0300] -------------------------------------------------- [0350] S: [0350] GCTAAACACATTCACGGCATAGCATTTAAAGTGACCGCGGGCGGCAGTAA [0400] : [0350] -><----------------------------------------------- [0400] S: [0400] GACTTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCGGGCGGGCCAGAAC [0450] : [0400] -------------------------------------------------- [0450] S: [0450] AGAGCACGCAACCCCACTACAATAGCTACCATCCGTCTGGCGTACCTGAT [0500] : [0450] -------------------------------------------------- [0500] S: [0500] GCATCACTGATTGATTGGAGAGCTAAACACATTCACGGCATAGCATTTAA [0550] : [0500] ----------------------><-------------------------- [0550] S: [0550] AGTGACCGCGGGCGGCAGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTA [0600] : [0550] -------------------------------------------------- [0600] S: [0600] GAAGACCGGGCGGGCCAGAACAGAGCACGCAACCCCACTACAATAGCTAC [0650] : [0600] -------------------------------------------------- [0650] S: [0650] CATCCGTCTGGCGTACCTGATGCATCACTGATTGATTGGAGAGCTAAACA [0700] : [0650] -------------------------------------------><----- [0700] S: [0700] CATTCACGGCATAGCATTTAAAGTGACCGCGGGCGGCAGTAAGACTTGCC [0750] : [0700] -------------------------------------------------- [0750] S: [0750] GCGCTTGCGTGCAGGATGGTAGAAGACCGGGCGGGCCAGAACAGAGCACG [0800] : [0750] -------------------------------------------------- [0800] S: [0800] CAACCCCACTACAATAGCTACCATCCGTCTGGCGTACCTGATGCATCACT [0850] : [0800] -------------------------------------------------- [0850] S: [0850] GATTGATTGGAGAGCTAAACACATTCACGGCATAGCATTTAAAGTGACCG [0900] : [0850] --------------><---------------------------------- [0900] S: [0900] CGGGCGGCAGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCG [0950] : [0900] -------------------------------------------------- [0950] S: [0950] GGCGGGCCAGAACAGAGCACGCAACCCCACTACAATAGCTACCATCCGTC [1000] : [0950] -------------------------------------------------- [1000] S: [1000] TGGCGTACCTGATGCATCACTGATTGATTGGAGAGCTAAACACATTCACG [1050] : [1000] -----------------------------------><------------- [1050] S: [1050] GCATAGCATTTAAAGTGACCGCGGGCGGCAGTAAGACTTGCCGCGCTTGC [1100] : [1050] -------------------------------------------------- [1100] S: [1100] GTGCAGGATGGTAGAAGACCGGGCGGGCCAGAACAGAGCACGCAACCCCA [1150] : [1100] -------------------------------------------------- [1150] S: [1150] CTACAATAGCTACCATCCGTCTGGCGTACCTGATGCATCACTGATTGATT [1200] : [1150] -------------------------------------------------- [1200] S: [1200] GGAGAGCTAAACACATTCACGGCATAGCATTTAAAGTGACCGCGGGCGGC [1250] : [1200] ------><------------------------------------------ [1250] S: [1250] AGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCGGGCGGGCC [1300] : [1250] -------------------------------------------------- [1300] S: [1300] AGAACAGAGCACGCAACCCCACTACAATAGCTACCATCCGTCTGGCGTAC [1350] : [1300] -------------------------------------------------- [1350] S: [1350] CTGATGCATCACTGATTGATTGGAGAGCTAAACACATTCACGGCATAGCA [1400] : [1350] ---------------------------><--------------------- [1400] S: [1400] TTTAAAGTGACCGCGGGCGGCAGTAAGACTTGCCGCGCTTGCGTGCAGGA [1450] : [1400] -------------------------------------------------- [1450] S: [1450] TGGTAGAAGACCGGGCGGGCCAGAACAGAGCACGCAACCCCACTACAATA [1500] : [1450] -------------------------------------------------- [1500] S: [1500] GCTACCATCCGTCTGGCGTACCTGATGCATCACTGATTGATTGGAGAGCT [1550] : [1500] ------------------------------------------------>< [1550] S: [1550] AAACACATTCACGGCATAGCATTTAAAGTGACCGCGGGCGGCAGTAAGAC [1600] : [1550] -------------------------------------------------- [1600] S: [1600] TTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCGGGCGGGCCAGAACAGA [1650] : [1600] -------------------------------------------------- [1650] S: [1650] GCACGCAACCCCACTACAATAGCTACCATCCGTCTGGCGTACCTGATGCA [1700] : [1650] -------------------------------------------------- [1700] S: [1700] TCACTGATTGATTGGAGAGCTAAACACATTCACGGCATAGCATTTAAAGT [1750] : [1700] -------------------><----------------------------- [1750] S: [1750] GACCGCGGGCGGCAGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTAGAA [1800] : [1750] -------------------------------------------------- [1800] S: [1800] GACCGGGCGGGCCAGAACAGAGCACGCAACCCCACTACAATAGCTACCAT [1850] : [1800] -------------------------------------------------- [1850] S: [1850] CCGTCTGGCGTACCTGATGCATCACTGATTGATTGGAGAGCTAAACACAT [1900] : [1850] ----------------------------------------><-------- [1900] S: [1900] TCACGGCATAGCATTTAAAGTGACCGCGGGCGGCAGTAAGACTTGCCGCG [1950] : [1900] -------------------------------------------------- [1950] S: [1950] CTTGCGTGCAGGATGGTAGAAGACCGGGCGGGCCAGAACAGAGCACGCAA [2000] : [1950] -------------------------------------------------- [2000] S: [2000] CCCCACTACAATAGCTACCATCCGTCTGGCGTACCTGATGCATCACTGAT [2050] : [2000] -------------------------------------------------- [2050] S: [2050] TGATTGGAGAGCTAAACACATTCACGGCATAGCATTTAAAGTGACCGCGG [2100] : [2050] -----------><------------------------------------- [2100] S: [2100] GCGGCAGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCGGGC [2150] : [2100] -------------------------------------------------- [2150] S: [2150] GGGCCAGAACAGAGCACGCAACCCCACTACAATAGCTACCATCCGTCTGG [2200] : [2150] -------------------------------------------------- [2200] S: [2200] CGTACCTGATGCATCACTGATTGATTGGAGAGCCACAATACTCTTGCTAA [2250] : [2200] --------------------------------> [2250] S: [2250] GGA [2252] : [2250] [2252] =================================================================== Model: Suffix Array Number of matches: 17 Query: CATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGAC =================================================================== S: [0000] CGCGCATGCCTGGGCCTGAAGGCAGTCCCCATTTGGCTGACATGGAGCTT [0050] : [0000] <--------- [0050] S: [0050] GTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTGAGGCT [0100] : [0050] -------------------------------------------------- [0100] S: [0100] AACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACATCACA [0150] : [0100] -------------------------------------------------- [0150] S: [0150] AACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCAAGACC [0200] : [0150] -------------------------------------------------- [0200] S: [0200] CGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCTAATGC [0250] : [0200] -------------------------------------------------- [0250] S: [0250] CGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAACTCGGT [0300] : [0250] -------------------------------------------------- [0300] S: [0300] GCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGTTGACA [0350] : [0300] -------------------------------------------------- [0350] S: [0350] CGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGCTTCGT [0400] : [0350] -------------------------------------------------- [0400] S: [0400] AGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTATAAAG [0450] : [0400] -------------------------------------------------- [0450] S: [0450] ACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCCCTTCC [0500] : [0450] -------------------------------------------------- [0500] S: [0500] ATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACCATGGAGCT [0550] : [0500] ----------------------------------------><-------- [0550] S: [0550] TGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTGAGGC [0600] : [0550] -------------------------------------------------- [0600] S: [0600] TAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACATCAC [0650] : [0600] -------------------------------------------------- [0650] S: [0650] AAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCAAGAC [0700] : [0650] -------------------------------------------------- [0700] S: [0700] CCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCTAATG [0750] : [0700] -------------------------------------------------- [0750] S: [0750] CCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAACTCGG [0800] : [0750] -------------------------------------------------- [0800] S: [0800] TGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGTTGAC [0850] : [0800] -------------------------------------------------- [0850] S: [0850] ACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGCTTCG [0900] : [0850] -------------------------------------------------- [0900] S: [0900] TAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTATAAA [0950] : [0900] -------------------------------------------------- [0950] S: [0950] GACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCCCTTC [1000] : [0950] -------------------------------------------------- [1000] S: [1000] CATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACCATGGAGC [1050] : [1000] -----------------------------------------><------- [1050] S: [1050] TTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTGAGG [1100] : [1050] -------------------------------------------------- [1100] S: [1100] CTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACATCA [1150] : [1100] -------------------------------------------------- [1150] S: [1150] CAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCAAGA [1200] : [1150] -------------------------------------------------- [1200] S: [1200] CCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCTAAT [1250] : [1200] -------------------------------------------------- [1250] S: [1250] GCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAACTCG [1300] : [1250] -------------------------------------------------- [1300] S: [1300] GTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGTTGA [1350] : [1300] -------------------------------------------------- [1350] S: [1350] CACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGCTTC [1400] : [1350] -------------------------------------------------- [1400] S: [1400] GTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTATAA [1450] : [1400] -------------------------------------------------- [1450] S: [1450] AGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCCCTT [1500] : [1450] -------------------------------------------------- [1500] S: [1500] CCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACCATGGAG [1550] : [1500] ------------------------------------------><------ [1550] S: [1550] CTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTGAG [1600] : [1550] -------------------------------------------------- [1600] S: [1600] GCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACATC [1650] : [1600] -------------------------------------------------- [1650] S: [1650] ACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCAAG [1700] : [1650] -------------------------------------------------- [1700] S: [1700] ACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCTAA [1750] : [1700] -------------------------------------------------- [1750] S: [1750] TGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAACTC [1800] : [1750] -------------------------------------------------- [1800] S: [1800] GGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGTTG [1850] : [1800] -------------------------------------------------- [1850] S: [1850] ACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGCTT [1900] : [1850] -------------------------------------------------- [1900] S: [1900] CGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTATA [1950] : [1900] -------------------------------------------------- [1950] S: [1950] AAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCCCT [2000] : [1950] -------------------------------------------------- [2000] S: [2000] TCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACCATGGA [2050] : [2000] -------------------------------------------><----- [2050] S: [2050] GCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTGA [2100] : [2050] -------------------------------------------------- [2100] S: [2100] GGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACAT [2150] : [2100] -------------------------------------------------- [2150] S: [2150] CACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCAA [2200] : [2150] -------------------------------------------------- [2200] S: [2200] GACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCTA [2250] : [2200] -------------------------------------------------- [2250] S: [2250] ATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAACT [2300] : [2250] -------------------------------------------------- [2300] S: [2300] CGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGTT [2350] : [2300] -------------------------------------------------- [2350] S: [2350] GACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGCT [2400] : [2350] -------------------------------------------------- [2400] S: [2400] TCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTAT [2450] : [2400] -------------------------------------------------- [2450] S: [2450] AAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCCC [2500] : [2450] -------------------------------------------------- [2500] S: [2500] TTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACCATGG [2550] : [2500] --------------------------------------------><---- [2550] S: [2550] AGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTG [2600] : [2550] -------------------------------------------------- [2600] S: [2600] AGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACA [2650] : [2600] -------------------------------------------------- [2650] S: [2650] TCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCA [2700] : [2650] -------------------------------------------------- [2700] S: [2700] AGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCT [2750] : [2700] -------------------------------------------------- [2750] S: [2750] AATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAAC [2800] : [2750] -------------------------------------------------- [2800] S: [2800] TCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGT [2850] : [2800] -------------------------------------------------- [2850] S: [2850] TGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGC [2900] : [2850] -------------------------------------------------- [2900] S: [2900] TTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTA [2950] : [2900] -------------------------------------------------- [2950] S: [2950] TAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCC [3000] : [2950] -------------------------------------------------- [3000] S: [3000] CTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACCATG [3050] : [3000] ---------------------------------------------><--- [3050] S: [3050] GAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCT [3100] : [3050] -------------------------------------------------- [3100] S: [3100] GAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGAC [3150] : [3100] -------------------------------------------------- [3150] S: [3150] ATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGC [3200] : [3150] -------------------------------------------------- [3200] S: [3200] AAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACC [3250] : [3200] -------------------------------------------------- [3250] S: [3250] TAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAA [3300] : [3250] -------------------------------------------------- [3300] S: [3300] CTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGG [3350] : [3300] -------------------------------------------------- [3350] S: [3350] TTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGG [3400] : [3350] -------------------------------------------------- [3400] S: [3400] CTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGT [3450] : [3400] -------------------------------------------------- [3450] S: [3450] ATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGC [3500] : [3450] -------------------------------------------------- [3500] S: [3500] CCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACCAT [3550] : [3500] ----------------------------------------------><-- [3550] S: [3550] GGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTC [3600] : [3550] -------------------------------------------------- [3600] S: [3600] TGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGA [3650] : [3600] -------------------------------------------------- [3650] S: [3650] CATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCG [3700] : [3650] -------------------------------------------------- [3700] S: [3700] CAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGAC [3750] : [3700] -------------------------------------------------- [3750] S: [3750] CTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACA [3800] : [3750] -------------------------------------------------- [3800] S: [3800] ACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAG [3850] : [3800] -------------------------------------------------- [3850] S: [3850] GTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTG [3900] : [3850] -------------------------------------------------- [3900] S: [3900] GCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAG [3950] : [3900] -------------------------------------------------- [3950] S: [3950] TATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCG [4000] : [3950] -------------------------------------------------- [4000] S: [4000] CCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACCA [4050] : [4000] -----------------------------------------------><- [4050] S: [4050] TGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCT [4100] : [4050] -------------------------------------------------- [4100] S: [4100] CTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGG [4150] : [4100] -------------------------------------------------- [4150] S: [4150] ACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGC [4200] : [4150] -------------------------------------------------- [4200] S: [4200] GCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGA [4250] : [4200] -------------------------------------------------- [4250] S: [4250] CCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAAC [4300] : [4250] -------------------------------------------------- [4300] S: [4300] AACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCA [4350] : [4300] -------------------------------------------------- [4350] S: [4350] GGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCT [4400] : [4350] -------------------------------------------------- [4400] S: [4400] GGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAA [4450] : [4400] -------------------------------------------------- [4450] S: [4450] GTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTC [4500] : [4450] -------------------------------------------------- [4500] S: [4500] GCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACC [4550] : [4500] ------------------------------------------------>< [4550] S: [4550] ATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTC [4600] : [4550] -------------------------------------------------- [4600] S: [4600] TCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTG [4650] : [4600] -------------------------------------------------- [4650] S: [4650] GACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAG [4700] : [4650] -------------------------------------------------- [4700] S: [4700] CGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAG [4750] : [4700] -------------------------------------------------- [4750] S: [4750] ACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAA [4800] : [4750] -------------------------------------------------- [4800] S: [4800] CAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCC [4850] : [4800] -------------------------------------------------- [4850] S: [4850] AGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGC [4900] : [4850] -------------------------------------------------- [4900] S: [4900] TGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGA [4950] : [4900] -------------------------------------------------- [4950] S: [4950] AGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCT [5000] : [4950] -------------------------------------------------- [5000] S: [5000] CGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGAC [5050] : [5000] -------------------------------------------------> [5050] S: [5050] CATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTT [5100] : [5050] <------------------------------------------------- [5100] S: [5100] CTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCT [5150] : [5100] -------------------------------------------------- [5150] S: [5150] GGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAA [5200] : [5150] -------------------------------------------------- [5200] S: [5200] GCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCA [5250] : [5200] -------------------------------------------------- [5250] S: [5250] GACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACA [5300] : [5250] -------------------------------------------------- [5300] S: [5300] ACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCC [5350] : [5300] -------------------------------------------------- [5350] S: [5350] CAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAG [5400] : [5350] -------------------------------------------------- [5400] S: [5400] CTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACG [5450] : [5400] -------------------------------------------------- [5450] S: [5450] AAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGC [5500] : [5450] -------------------------------------------------- [5500] S: [5500] TCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGA [5550] : [5500] -------------------------------------------------- [5550] S: [5550] CCATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTT [5600] : [5550] ><------------------------------------------------ [5600] S: [5600] TCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTC [5650] : [5600] -------------------------------------------------- [5650] S: [5650] TGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAA [5700] : [5650] -------------------------------------------------- [5700] S: [5700] AGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCC [5750] : [5700] -------------------------------------------------- [5750] S: [5750] AGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGAC [5800] : [5750] -------------------------------------------------- [5800] S: [5800] AACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGC [5850] : [5800] -------------------------------------------------- [5850] S: [5850] CCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATA [5900] : [5850] -------------------------------------------------- [5900] S: [5900] GCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCAC [5950] : [5900] -------------------------------------------------- [5950] S: [5950] GAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCG [6000] : [5950] -------------------------------------------------- [6000] S: [6000] CTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTG [6050] : [6000] -------------------------------------------------- [6050] S: [6050] ACCATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGT [6100] : [6050] -><----------------------------------------------- [6100] S: [6100] TTCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTT [6150] : [6100] -------------------------------------------------- [6150] S: [6150] CTGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATA [6200] : [6150] -------------------------------------------------- [6200] S: [6200] AAGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGC [6250] : [6200] -------------------------------------------------- [6250] S: [6250] CAGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGA [6300] : [6250] -------------------------------------------------- [6300] S: [6300] CAACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAG [6350] : [6300] -------------------------------------------------- [6350] S: [6350] CCCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCAT [6400] : [6350] -------------------------------------------------- [6400] S: [6400] AGCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCA [6450] : [6400] -------------------------------------------------- [6450] S: [6450] CGAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGC [6500] : [6450] -------------------------------------------------- [6500] S: [6500] GCTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGT [6550] : [6500] -------------------------------------------------- [6550] S: [6550] GACCATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACG [6600] : [6550] --><---------------------------------------------- [6600] S: [6600] TTTCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGT [6650] : [6600] -------------------------------------------------- [6650] S: [6650] TCTGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAAT [6700] : [6650] -------------------------------------------------- [6700] S: [6700] AAAGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGG [6750] : [6700] -------------------------------------------------- [6750] S: [6750] CCAGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTG [6800] : [6750] -------------------------------------------------- [6800] S: [6800] ACAACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAA [6850] : [6800] -------------------------------------------------- [6850] S: [6850] GCCCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCA [6900] : [6850] -------------------------------------------------- [6900] S: [6900] TAGCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGC [6950] : [6900] -------------------------------------------------- [6950] S: [6950] ACGAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGG [7000] : [6950] -------------------------------------------------- [7000] S: [7000] CGCTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGG [7050] : [7000] -------------------------------------------------- [7050] S: [7050] TGACCATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACAC [7100] : [7050] ---><--------------------------------------------- [7100] S: [7100] GTTTCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGG [7150] : [7100] -------------------------------------------------- [7150] S: [7150] TTCTGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAA [7200] : [7150] -------------------------------------------------- [7200] S: [7200] TAAAGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTG [7250] : [7200] -------------------------------------------------- [7250] S: [7250] GCCAGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATT [7300] : [7250] -------------------------------------------------- [7300] S: [7300] GACAACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCA [7350] : [7300] -------------------------------------------------- [7350] S: [7350] AGCCCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATC [7400] : [7350] -------------------------------------------------- [7400] S: [7400] ATAGCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTG [7450] : [7400] -------------------------------------------------- [7450] S: [7450] CACGAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTG [7500] : [7450] -------------------------------------------------- [7500] S: [7500] GCGCTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAG [7550] : [7500] -------------------------------------------------- [7550] S: [7550] GTGACCATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACA [7600] : [7550] ----><-------------------------------------------- [7600] S: [7600] CGTTTCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACG [7650] : [7600] -------------------------------------------------- [7650] S: [7650] GTTCTGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGA [7700] : [7650] -------------------------------------------------- [7700] S: [7700] ATAAAGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTT [7750] : [7700] -------------------------------------------------- [7750] S: [7750] GGCCAGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAAT [7800] : [7750] -------------------------------------------------- [7800] S: [7800] TGACAACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGC [7850] : [7800] -------------------------------------------------- [7850] S: [7850] AAGCCCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGAT [7900] : [7850] -------------------------------------------------- [7900] S: [7900] CATAGCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTT [7950] : [7900] -------------------------------------------------- [7950] S: [7950] GCACGAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCT [8000] : [7950] -------------------------------------------------- [8000] S: [8000] GGCGCTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGA [8050] : [8000] -------------------------------------------------- [8050] S: [8050] GGTGACCATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAAC [8100] : [8050] -----><------------------------------------------- [8100] S: [8100] ACGTTTCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAAC [8150] : [8100] -------------------------------------------------- [8150] S: [8150] GGTTCTGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTG [8200] : [8150] -------------------------------------------------- [8200] S: [8200] AATAAAGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGT [8250] : [8200] -------------------------------------------------- [8250] S: [8250] TGGCCAGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAA [8300] : [8250] -------------------------------------------------- [8300] S: [8300] TTGACAACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCG [8350] : [8300] -------------------------------------------------- [8350] S: [8350] CAAGCCCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGA [8400] : [8350] -------------------------------------------------- [8400] S: [8400] TCATAGCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCT [8450] : [8400] -------------------------------------------------- [8450] S: [8450] TGCACGAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCC [8500] : [8450] -------------------------------------------------- [8500] S: [8500] TGGCGCTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGG [8550] : [8500] -------------------------------------------------- [8550] S: [8550] AGGTGACTACCGAAATGCTCGTAGGATCAAATGTGTG [8586] : [8550] ------> [8586] =================================================================== Model: Suffix Array Number of matches: 7 Query: ATTAGTACCCCATCGGTTTTATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCTTCGGAGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTACCGTACTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTACTTCAACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCTGACCGAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGTAAAAGCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACGGGCGCTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGTGGGCTTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAGTTTGTTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCTGCAGTTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATTCTGTTCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTGATCCCTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTTGTATTTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGAACCAAGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAACACGGACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCCGGTCATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGTAAGATCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTCTGCTGGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCCGAACTATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAAGTGCTACAGTCTTACTCCCCCTATAGCTGGGTGACT =================================================================== S: [0000] ATGGCAAATCTTGGGCAAGTAGCTGCGCGCATTAGTACCCCATCGGTTTT [0050] : [0000] <------------------- [0050] S: [0050] ATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCTTCGGA [0100] : [0050] -------------------------------------------------- [0100] S: [0100] GATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTACCGTAC [0150] : [0100] -------------------------------------------------- [0150] S: [0150] TAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTACTTCA [0200] : [0150] -------------------------------------------------- [0200] S: [0200] ACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCTGACCG [0250] : [0200] -------------------------------------------------- [0250] S: [0250] AGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGTAAAAG [0300] : [0250] -------------------------------------------------- [0300] S: [0300] CCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACGGGCGC [0350] : [0300] -------------------------------------------------- [0350] S: [0350] TATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGTGGGCT [0400] : [0350] -------------------------------------------------- [0400] S: [0400] TATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAGTTTGT [0450] : [0400] -------------------------------------------------- [0450] S: [0450] TAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCTGCAGT [0500] : [0450] -------------------------------------------------- [0500] S: [0500] TTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATTCTGTT [0550] : [0500] -------------------------------------------------- [0550] S: [0550] CAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTGATCCC [0600] : [0550] -------------------------------------------------- [0600] S: [0600] TTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTTGTATT [0650] : [0600] -------------------------------------------------- [0650] S: [0650] TGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGAACCAA [0700] : [0650] -------------------------------------------------- [0700] S: [0700] GGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAACACGG [0750] : [0700] -------------------------------------------------- [0750] S: [0750] ACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCCGGTCA [0800] : [0750] -------------------------------------------------- [0800] S: [0800] TTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGTAAGAT [0850] : [0800] -------------------------------------------------- [0850] S: [0850] CTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTCTGCTG [0900] : [0850] -------------------------------------------------- [0900] S: [0900] GCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCCGAACT [0950] : [0900] -------------------------------------------------- [0950] S: [0950] ATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAAGTGCT [1000] : [0950] -------------------------------------------------- [1000] S: [1000] ACAGTCTTACTCCCCCTATAGCTGGGTGACTATTAGTACCCCATCGGTTT [1050] : [1000] ------------------------------><------------------ [1050] S: [1050] TATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCTTCGG [1100] : [1050] -------------------------------------------------- [1100] S: [1100] AGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTACCGTA [1150] : [1100] -------------------------------------------------- [1150] S: [1150] CTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTACTTC [1200] : [1150] -------------------------------------------------- [1200] S: [1200] AACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCTGACC [1250] : [1200] -------------------------------------------------- [1250] S: [1250] GAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGTAAAA [1300] : [1250] -------------------------------------------------- [1300] S: [1300] GCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACGGGCG [1350] : [1300] -------------------------------------------------- [1350] S: [1350] CTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGTGGGC [1400] : [1350] -------------------------------------------------- [1400] S: [1400] TTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAGTTTG [1450] : [1400] -------------------------------------------------- [1450] S: [1450] TTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCTGCAG [1500] : [1450] -------------------------------------------------- [1500] S: [1500] TTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATTCTGT [1550] : [1500] -------------------------------------------------- [1550] S: [1550] TCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTGATCC [1600] : [1550] -------------------------------------------------- [1600] S: [1600] CTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTTGTAT [1650] : [1600] -------------------------------------------------- [1650] S: [1650] TTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGAACCA [1700] : [1650] -------------------------------------------------- [1700] S: [1700] AGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAACACG [1750] : [1700] -------------------------------------------------- [1750] S: [1750] GACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCCGGTC [1800] : [1750] -------------------------------------------------- [1800] S: [1800] ATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGTAAGA [1850] : [1800] -------------------------------------------------- [1850] S: [1850] TCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTCTGCT [1900] : [1850] -------------------------------------------------- [1900] S: [1900] GGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCCGAAC [1950] : [1900] -------------------------------------------------- [1950] S: [1950] TATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAAGTGC [2000] : [1950] -------------------------------------------------- [2000] S: [2000] TACAGTCTTACTCCCCCTATAGCTGGGTGACTATTAGTACCCCATCGGTT [2050] : [2000] -------------------------------><----------------- [2050] S: [2050] TTATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCTTCG [2100] : [2050] -------------------------------------------------- [2100] S: [2100] GAGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTACCGT [2150] : [2100] -------------------------------------------------- [2150] S: [2150] ACTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTACTT [2200] : [2150] -------------------------------------------------- [2200] S: [2200] CAACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCTGAC [2250] : [2200] -------------------------------------------------- [2250] S: [2250] CGAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGTAAA [2300] : [2250] -------------------------------------------------- [2300] S: [2300] AGCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACGGGC [2350] : [2300] -------------------------------------------------- [2350] S: [2350] GCTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGTGGG [2400] : [2350] -------------------------------------------------- [2400] S: [2400] CTTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAGTTT [2450] : [2400] -------------------------------------------------- [2450] S: [2450] GTTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCTGCA [2500] : [2450] -------------------------------------------------- [2500] S: [2500] GTTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATTCTG [2550] : [2500] -------------------------------------------------- [2550] S: [2550] TTCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTGATC [2600] : [2550] -------------------------------------------------- [2600] S: [2600] CCTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTTGTA [2650] : [2600] -------------------------------------------------- [2650] S: [2650] TTTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGAACC [2700] : [2650] -------------------------------------------------- [2700] S: [2700] AAGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAACAC [2750] : [2700] -------------------------------------------------- [2750] S: [2750] GGACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCCGGT [2800] : [2750] -------------------------------------------------- [2800] S: [2800] CATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGTAAG [2850] : [2800] -------------------------------------------------- [2850] S: [2850] ATCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTCTGC [2900] : [2850] -------------------------------------------------- [2900] S: [2900] TGGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCCGAA [2950] : [2900] -------------------------------------------------- [2950] S: [2950] CTATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAAGTG [3000] : [2950] -------------------------------------------------- [3000] S: [3000] CTACAGTCTTACTCCCCCTATAGCTGGGTGACTATTAGTACCCCATCGGT [3050] : [3000] --------------------------------><---------------- [3050] S: [3050] TTTATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCTTC [3100] : [3050] -------------------------------------------------- [3100] S: [3100] GGAGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTACCG [3150] : [3100] -------------------------------------------------- [3150] S: [3150] TACTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTACT [3200] : [3150] -------------------------------------------------- [3200] S: [3200] TCAACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCTGA [3250] : [3200] -------------------------------------------------- [3250] S: [3250] CCGAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGTAA [3300] : [3250] -------------------------------------------------- [3300] S: [3300] AAGCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACGGG [3350] : [3300] -------------------------------------------------- [3350] S: [3350] CGCTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGTGG [3400] : [3350] -------------------------------------------------- [3400] S: [3400] GCTTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAGTT [3450] : [3400] -------------------------------------------------- [3450] S: [3450] TGTTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCTGC [3500] : [3450] -------------------------------------------------- [3500] S: [3500] AGTTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATTCT [3550] : [3500] -------------------------------------------------- [3550] S: [3550] GTTCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTGAT [3600] : [3550] -------------------------------------------------- [3600] S: [3600] CCCTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTTGT [3650] : [3600] -------------------------------------------------- [3650] S: [3650] ATTTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGAAC [3700] : [3650] -------------------------------------------------- [3700] S: [3700] CAAGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAACA [3750] : [3700] -------------------------------------------------- [3750] S: [3750] CGGACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCCGG [3800] : [3750] -------------------------------------------------- [3800] S: [3800] TCATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGTAA [3850] : [3800] -------------------------------------------------- [3850] S: [3850] GATCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTCTG [3900] : [3850] -------------------------------------------------- [3900] S: [3900] CTGGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCCGA [3950] : [3900] -------------------------------------------------- [3950] S: [3950] ACTATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAAGT [4000] : [3950] -------------------------------------------------- [4000] S: [4000] GCTACAGTCTTACTCCCCCTATAGCTGGGTGACTATTAGTACCCCATCGG [4050] : [4000] ---------------------------------><--------------- [4050] S: [4050] TTTTATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCTT [4100] : [4050] -------------------------------------------------- [4100] S: [4100] CGGAGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTACC [4150] : [4100] -------------------------------------------------- [4150] S: [4150] GTACTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTAC [4200] : [4150] -------------------------------------------------- [4200] S: [4200] TTCAACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCTG [4250] : [4200] -------------------------------------------------- [4250] S: [4250] ACCGAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGTA [4300] : [4250] -------------------------------------------------- [4300] S: [4300] AAAGCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACGG [4350] : [4300] -------------------------------------------------- [4350] S: [4350] GCGCTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGTG [4400] : [4350] -------------------------------------------------- [4400] S: [4400] GGCTTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAGT [4450] : [4400] -------------------------------------------------- [4450] S: [4450] TTGTTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCTG [4500] : [4450] -------------------------------------------------- [4500] S: [4500] CAGTTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATTC [4550] : [4500] -------------------------------------------------- [4550] S: [4550] TGTTCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTGA [4600] : [4550] -------------------------------------------------- [4600] S: [4600] TCCCTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTTG [4650] : [4600] -------------------------------------------------- [4650] S: [4650] TATTTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGAA [4700] : [4650] -------------------------------------------------- [4700] S: [4700] CCAAGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAAC [4750] : [4700] -------------------------------------------------- [4750] S: [4750] ACGGACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCCG [4800] : [4750] -------------------------------------------------- [4800] S: [4800] GTCATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGTA [4850] : [4800] -------------------------------------------------- [4850] S: [4850] AGATCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTCT [4900] : [4850] -------------------------------------------------- [4900] S: [4900] GCTGGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCCG [4950] : [4900] -------------------------------------------------- [4950] S: [4950] AACTATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAAG [5000] : [4950] -------------------------------------------------- [5000] S: [5000] TGCTACAGTCTTACTCCCCCTATAGCTGGGTGACTATTAGTACCCCATCG [5050] : [5000] ----------------------------------><-------------- [5050] S: [5050] GTTTTATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCT [5100] : [5050] -------------------------------------------------- [5100] S: [5100] TCGGAGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTAC [5150] : [5100] -------------------------------------------------- [5150] S: [5150] CGTACTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTA [5200] : [5150] -------------------------------------------------- [5200] S: [5200] CTTCAACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCT [5250] : [5200] -------------------------------------------------- [5250] S: [5250] GACCGAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGT [5300] : [5250] -------------------------------------------------- [5300] S: [5300] AAAAGCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACG [5350] : [5300] -------------------------------------------------- [5350] S: [5350] GGCGCTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGT [5400] : [5350] -------------------------------------------------- [5400] S: [5400] GGGCTTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAG [5450] : [5400] -------------------------------------------------- [5450] S: [5450] TTTGTTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCT [5500] : [5450] -------------------------------------------------- [5500] S: [5500] GCAGTTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATT [5550] : [5500] -------------------------------------------------- [5550] S: [5550] CTGTTCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTG [5600] : [5550] -------------------------------------------------- [5600] S: [5600] ATCCCTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTT [5650] : [5600] -------------------------------------------------- [5650] S: [5650] GTATTTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGA [5700] : [5650] -------------------------------------------------- [5700] S: [5700] ACCAAGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAA [5750] : [5700] -------------------------------------------------- [5750] S: [5750] CACGGACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCC [5800] : [5750] -------------------------------------------------- [5800] S: [5800] GGTCATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGT [5850] : [5800] -------------------------------------------------- [5850] S: [5850] AAGATCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTC [5900] : [5850] -------------------------------------------------- [5900] S: [5900] TGCTGGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCC [5950] : [5900] -------------------------------------------------- [5950] S: [5950] GAACTATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAA [6000] : [5950] -------------------------------------------------- [6000] S: [6000] GTGCTACAGTCTTACTCCCCCTATAGCTGGGTGACTATTAGTACCCCATC [6050] : [6000] -----------------------------------><------------- [6050] S: [6050] GGTTTTATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGC [6100] : [6050] -------------------------------------------------- [6100] S: [6100] TTCGGAGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTA [6150] : [6100] -------------------------------------------------- [6150] S: [6150] CCGTACTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCT [6200] : [6150] -------------------------------------------------- [6200] S: [6200] ACTTCAACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTC [6250] : [6200] -------------------------------------------------- [6250] S: [6250] TGACCGAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCG [6300] : [6250] -------------------------------------------------- [6300] S: [6300] TAAAAGCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGAC [6350] : [6300] -------------------------------------------------- [6350] S: [6350] GGGCGCTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGG [6400] : [6350] -------------------------------------------------- [6400] S: [6400] TGGGCTTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGA [6450] : [6400] -------------------------------------------------- [6450] S: [6450] GTTTGTTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACC [6500] : [6450] -------------------------------------------------- [6500] S: [6500] TGCAGTTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAAT [6550] : [6500] -------------------------------------------------- [6550] S: [6550] TCTGTTCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGT [6600] : [6550] -------------------------------------------------- [6600] S: [6600] GATCCCTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCT [6650] : [6600] -------------------------------------------------- [6650] S: [6650] TGTATTTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAG [6700] : [6650] -------------------------------------------------- [6700] S: [6700] AACCAAGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCA [6750] : [6700] -------------------------------------------------- [6750] S: [6750] ACACGGACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGC [6800] : [6750] -------------------------------------------------- [6800] S: [6800] CGGTCATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGG [6850] : [6800] -------------------------------------------------- [6850] S: [6850] TAAGATCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCT [6900] : [6850] -------------------------------------------------- [6900] S: [6900] CTGCTGGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGC [6950] : [6900] -------------------------------------------------- [6950] S: [6950] CGAACTATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGA [7000] : [6950] -------------------------------------------------- [7000] S: [7000] AGTGCTACAGTCTTACTCCCCCTATAGCTGGGTGACTGTTCCACTCCTGA [7050] : [7000] ------------------------------------> [7050] S: [7050] AGTCAGAGGGATCCCAAGTCTGGTGAT [7076] : [7050] [7076] =================================================================== 演習問題2(オプション) 記号列 $q$ が正確なタンデムリピート $p&#94;k$ を部分列として含むとする。$q$ に対して、ランダムに1塩基の変異・挿入・削除を加えた配列を $q&#94;{\\prime}$ とする。$q&#94;{\\prime}$ から $p&#94;k$ を予測するアルゴリズムを考えよ。 例題として $10$ 個の配列を与えるので、各配列から $p$ と $k$ を決定せよ（$k$ を正確に予測するのは難しいので問わない） 解答 In [9]: raise NotImplementedError ( \"Not Implemented.\" ) --------------------------------------------------------------------------- NotImplementedError Traceback (most recent call last) in ----> 1 raise NotImplementedError ( \"Not Implemented.\" ) NotImplementedError : Not Implemented. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(森下)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-1.html"},{"title":"0.英語論文","text":"問題1 数学やアルゴリズムの論文では余計な表現を省いた簡潔な記述が好まれます。例えば： ⻑さ $n$ の⾃然数の列に対して、隣接する数 $a,b$ をその差の絶対値 $|a-b|$ で置き換える作業を繰返し、最終的に１つの数を計算する。異なる計算順序の総数 $P(n)$ は、列を分割し統治することで、漸化式 $$P(1) = 1,\\quad P(n) = \\sum_{k=1}&#94;{n-1}P(k)P(n-k)\\ (n\\geq2)$$ と表現できる。 これでは⾏間を補わないと理解できないと思います。⼀⽅、⽣命科学の論⽂では、数式やアルゴリズムに不慣れな読者を意識して丁寧に説明するのは親切だし、論⽂を読む読者層を広げることになります。たとえば下記の説明⽂のように書き換えられます。丁寧な英⽂を⼼がけるために、この⽂章を英語にしましょう。 ⾃然数の列 $x_1,x_2,\\ldots,x_n$ が与えられたとき、隣接する２つの数 $a,b$ の差の絶対値 $a-b$ を取り、$a,b$ を置き換える作業を繰返し、最終的に１つの数を計算することを考えよう。どの２つの数を選択するか、その順番で最終結果は異なる場合がある。そこで選択した２つの数 $a,b$ を $(a,b)$ で置き換え、計算の順序を表現しよう。たとえば列 $1, 2, 3, 4$ から以下のような計算過程を表現できる。 $$((1, 2), (3, 4)) = (1, 1) = 0 \\quad (1, ((2, 3), 4)) = (1, (1, 4))=(1, 3) =2$$ では $x_1,x_2,\\ldots,x_n$ から得られる異なる計算順序の総数 $P(n)$ はどのぐらいだろうか？まず $P(n)$ は⻑さ $n$ だけで決まり、その中⾝ $x_i$ には依存しないことに注意しよう。次に、$P(n)$ を計算するには⼊⼒列を２つに分割する考え⽅が有⽤である。いま $x_1,x_2,\\ldots,x_n$ を⻑さ $k$ の前半と残りの後半へ分割したとき、前半と後半の部分列の計算順序の総数は、$P(k)$ と $P(n-k)$ であるから、この分割を満たす計算順序の総数は $P(k)P(n-k)$ となる。したがって $k=1,\\ldots,n-1$ について $P(k)P(n-k)$ の和を計算すれば $P(n)$ になりそうだが、$P(1)$ の扱い⽅を考える必要がある。$1$ 個の要素しかない列では計算順序の総数は $0$ としたいところであるが、$P(1)P(n-1) = P(n-1)$ としたい。そこで便宜上 $P(1)=1$ と約束する。まとめると $P(n)$ は以下の漸化式で計算できる。 $$P(1) = 1,\\quad P(n) = \\sum_{k=1}&#94;{n-1}P(k)P(n-k)\\ (n\\geq2)$$ 解答 Given a sequence of Natural numbers $\\mathcal{D} = \\{x_1,x_2,\\ldots,x_n\\}$ , the goal is to calculate the value $x&#94;{\\ast}$ by repeatedly replacing adjacent number pairs $a,b$ to one value $|a-b|$. In this problem, $x&#94;{\\ast}$ depends on how to chose the consecutive two numbers $a$ and $b$, so by denoting $(a,b)$ as the selected numbers , we express the calculation process uniquely . For example, in the case of $\\mathcal{D} = \\{1,2,3,4\\}$ we can express following calculation processes $$\\left(\\left(1,2\\right), \\left(3,4\\right)\\right) = \\left(1,1\\right) = 0 \\quad \\left(1,\\left(\\left(2,3\\right)\\right), 4\\right) = \\left(1,\\left(1,4\\right)\\right) = \\left(1,3\\right) = 2$$ We now discuss $P(n)$, denoting the total number of calculation processes. Noting that $P(n)$ depends only the sequence length $n$, we take an approach to calculate $P(n)$ by using a recurrence formula. If we divide the sequence into $\\{x_1,x_2,\\ldots,x_k\\}$ and $\\{x_{k+1},\\ldots,x_n\\}$, the total number of calculation processes under this division is given by $P(k)P(n-k)$. Therefore, $P(n)$ can be obtained by summing it over $k$. In the case of $n=1$, we define $P(1)=1$ since expression $P(1)(n-1) = P(n-1)$ holds. To summarize, $P(n)$ is given by $$P(1) = 1,\\quad P(n) = \\sum_{k=1}&#94;{n-1}P(k)P(n-k)\\ (n\\geq2)\\ .$$ 問題2 ３年間の研究が実って以下のような研究成果が得られました。 （研究成果の要約）ゲノムのタンデムリピートは⻑くなるほど検出が難しく、どのような機能を持つか解明が待たれる。モデル⽣物 A のゲノムをロングリード・シーケンシングにより解読したところ、従来のショートリード・シーケンシングでは検出できなかったタンデムリピート X がゲノムの約 5%を占めることが分かった。X を含む転写物が神経細胞と⽣殖細胞に統計的に有意に発現しており、RNA ⼲渉でノックダウンしたところ雄の⽣殖能⼒が有意に低下した。タンデムリピート配列が機能することを⽰す注⽬すべき結果である。さらに、近縁種のゲノムと⽐較した結果、X はモデル⽣物 A の近縁種のゲノムでは殆ど存在せず、急速に進化し新しい機能を獲得したことを⽰唆している。 多くの⼈達にその成果を知ってほしいので、読者層の広い雑誌 SNC に投稿することにしました。雑誌 SNC では専属の編集者がいて、研究成果がどの程度広い読者層に関⼼を持たれるかを評価します。⾼評価であれば専⾨的な研究者に査読を依頼します。編集者に価値を理解してもらうため、通常はかなり苦労します。研究成果をアピールする以下の英⽂で、⻩⾊いマーカー部分を埋めてください。 Dear Editor of Scientific Nature of the Cell, We are pleased to submit a manuscript entitled \"要約の適切な題名を考えてください\" for consideration for publication in Scientific Nature of the Cell. 要約を魅力的に伝えるパラグラフ We believe that our findings should interest a broad readership of Scientific Nature of the Cell. Sincerely yours, \"あなたの名前\" Department of Bioinformatics and Systems BiologyFaculty of Science, The University of Tokyo 解答 Dear Editor of Scientific Nature of the Cell, We are pleased to submit a manuscript entitled \"Long-read sequencing reveals unexplored tandem repeats\" for consideration for publication in Scientific Nature of the Cell. Repetitive genome regions have been difficult to detect and remain unexplained, mainly because of the comparative small size of the fragments used in assembly. To address this issue, we used long-read sequencers for \"A\" and found that tandem repeat \"X\" accounts for 5% of the whole genome, which has not been detected by conventional short-read sequencing. \"X\"-related transcript is significantly expressed in nerve cell and germ cell, and male fertility is declined when it knocked down by RNA interference. This shows that detected tandem repeat actually works. Surprisingly, X was hardly detected in related species of \"A\", and this suggests that \"A\" evolved rapidly and acquire functions recently. We believe that our findings should interest a broad readership of Scientific Nature of the Cell. Sincerely yours, Shuto Iwasaki Department of Bioinformatics and Systems BiologyFaculty of Science, The University of Tokyo 問題3 論⽂は査読者に回わしてもらえたものの、以下のような厳しいコメントが返ってきました。 Reviewer 1: My major concern with this manuscript is the avoidance of showing actual data, and that trait is very consistent throughout the manuscript. The most prominent example is the repeats assembled by their software program. The authors only claim that their software works, but they do not show any evidence for that claim. そこで以下のような⽇本語の返答を考えてみました。査読者の懐に⼊れるような英⽂を 考えてみてください。 まず、とても貴重なコメントを頂きました Reviewer 1 に感謝いたします。コメントに従いまして本⽂を修正いたしました。リピート領域を解読することはとても難しい問題ですので、注意深くソフトウエアを設計しました。まず、正解領域が分かっているデータを現実のエラーパターンを考慮して⽣成し、そのデータを使って私達のソフトウエアの性能を評価しました。その結果、新しく追加した表１に⽰しますように、既存のソフトウエア⽐べて精度を10%以上改善できることが分かりました。⽣成データに加えて、現実のデータでもリピート領域を正しい⻑さでアセンブリしていることを、サザンブロットで確認しました。 解答 Thank you very much for your time and valuable feedback on our manuscript. Following the reviewer's suggestion, we confirm the correctness of our software and add the evidence. Validity check was conducted by the following steps: We generate ground truth according to a real observation. We compare the performance of various softwares in that data, and as shown in the Table 1, which is newly inserted, our software recorded more than 10% higher accuracy than the previous softwares. Our software also predicted the repeat regions for raw sequences, and its accuracy was confirmed by Southern blotting. 添削コメント：上手く書けています。一つ注意が必要なのは \"software\" は単数形です。複数形にしたい場合には \"software programs\" にしましょう。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(森下)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-0.html"},{"title":"レポート課題9(12/5出題)","text":"TYrZBkMAtspOJ7IVgJdZeA==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report9.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report9.html"},{"title":"Introduction","text":"講師： 森下 真一 （3Sで 生物情報ソフトウエア論 を担当されていた方） 資料： 講義HP 計算演習 # 担当者 課題名 0 森下真一 英語で論文を投稿して受理されるまで 1 森下真一 繰返し構造 O(n²), O(n log n) 2 森下真一 配列アラインメントの下界 Ω(n²) 3 鈴木裕太 中林亮 区間分割アルゴリズム 4 鈴木裕太 Boosting (2値クラス分類問題および連続値回帰問題) 5 舛谷万象 de Bruijn graphとその表現 データ 6 太田力文 統計遺伝学（GWAS, Risk Score） 7 市川和樹 クラスタリング １細胞データ","tags":"情報基礎実験(森下)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下).html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下).html"},{"title":"生命情報表現論 第3回","text":"ゲノム配列、ゲノムアノテーションと遺伝子進化","tags":"生命情報表現論","url":"https://iwasakishuto.github.io/University/3A/生命情報表現論-3.html","loc":"https://iwasakishuto.github.io/University/3A/生命情報表現論-3.html"},{"title":"進化生態情報学 第1回","text":"講師： 岩崎渉 参考書： 分子系統学への統計的アプローチ -計算分子進化学-（共立出版、2009） 参考書： 進化ー分子・個体・生態系（メディカルサイエンスインターナショナル、2009） 参考書： 分子進化と分子系統学（培風館、2006） 参考書： Brock Biology of Microorganisms 14th Edition（Benjamin Cummings、2014） 参考書： ディジタル画像処理 改訂新版（CG-ARTS協会、2015） In [1]: import numpy as np import matplotlib.pyplot as plt 塩基置換のマルコフモデル $$P(t)$$ $$Q$$ 離散 連続（に限りなく近づけた極限） 遷移確率行列 置換速度行列（遷移強度行列） 時間 $t$ 後に塩基 $i$ が $j$ になっている確率を $P_{ij}(t)=p_{ij}(t)$ とする。 間隔 $(t,t+\\Delta t)$ に起きた遷移 $i\\rightarrow j$ の確率が $q_{ij}\\Delta t$ 定義より、$t=0$ の遷移確率行列 $P(0)$ は 単位行列 $I$ $Q$ は積の形 $Qt$ のみで現れ、積のみが意味を持つ。（＝ 相対的 な置換速度しか表せない。 チャップマン-コルモゴロフの定理 以下が成立することは、定義から明らか。 $$ \\begin{aligned} &p;_{ij}(s+t) = \\sum_{k}p_{ik}(s)p_{kj}(t)\\\\ &\\Longleftrightarrow P(s+t) = P(s)P(t) \\end{aligned} $$ $P(t)$ と $Q$ の関係 $P(t)$ は微分可能であり、上式を用いて導関数を計算することができる。 $$\\begin{aligned} P(t+\\Delta t) &= P(t)P(\\Delta t) \\\\ &= P(t)P(0)(I + Q\\Delta t)\\\\ &= P(t) + P(t)Q\\Delta t\\\\ \\frac{P(t+\\Delta t) - P(t)}{(t+\\Delta t) - t}&= P(t)Q\\\\ \\underset{t\\rightarrow0}{\\Longrightarrow} \\frac{dP(t)}{dt} &= P(t)Q \\end{aligned}$$ ここで、この微分方程式は簡単に解くことができる。 一般の $n\\times n$ 行列 $A$ に対し、$e&#94;{tA} = \\sum_{k=0}&#94;{\\infty}\\frac{t&#94;k}{k!}A&#94;k$ 上の式で $t$ に対して微分すると、$\\frac{d}{dt}e&#94;{tA} = Ae&#94;{tA}$ 先の式と照らし合わせると、以下を得る。 $$P(t) = e&#94;{Qt}$$ 対角化と $P(t)$ の解 行列 $Q$ が 異なる固有値を $n(=4)$ 個持つ （対角化できる） とする と、正則行列 $U$ を用いて以下のように対角化できる。 $$\\Lambda = U&#94;{-1}QU\\Longleftrightarrow Q=U\\Lambda U&#94;{-1}$$ これを先の式に代入すると、 $$ \\begin{aligned} P(t) &=\\exp\\left(Qt\\right)\\\\ &= \\sum_{k=0}&#94;{\\infty}\\frac{t&#94;k}{k}Q&#94;k\\\\ &= \\sum_{k=0}&#94;{\\infty}\\frac{t&#94;k}{k}\\left(U\\Lambda U&#94;{-1}\\right)&#94;k\\\\ &= U\\left(\\sum_{k=0}&#94;{\\infty}\\frac{t&#94;k}{k}\\Lambda&#94;k\\right)U&#94;{-1}\\\\ &= U\\exp\\left(\\Lambda t\\right) U&#94;{-1}\\\\ &= U \\text{diag}\\left\\{\\exp(\\lambda_1t), \\exp(\\lambda_2t),\\cdots,\\exp(\\lambda_nt)\\right\\}U&#94;{-1} \\end{aligned} $$ よって、$\\Sigma$ が消えて簡単な形で表せるようになった。 各塩基の分布 $\\pi(t)$ 状態 $k$ の初期確率分布が $\\pi(0)$ で与えられる時、時刻 $t$ の分布は次式によって計算できる。 $$\\pi(t) = \\pi(0)P(t)$$ 定常分布 の時、 $$ \\begin{aligned} \\pi &= \\pi P(t)\\\\ &= \\pi P(0)(I + Qt)\\\\ &= \\pi + \\pi Qt\\\\ \\therefore \\pi Qt &= 0 \\end{aligned} $$ 最後の式は、$t$ の値に依存せずに成り立つので、$\\pi Q=0$ 提案されているモデル 基本的に $Q$ を定義して、以下の式から $P(t)$ を求める、というのが一般的。 $$ \\begin{cases} \\begin{aligned} P(t) &=\\exp\\left(Qt\\right) \\\\ &= U \\text{diag}\\left\\{\\exp(\\lambda_1t), \\exp(\\lambda_2t),\\cdots,\\exp(\\lambda_nt)\\right\\}U&#94;{-1} \\end{aligned}\\\\ Q=U\\Lambda U&#94;{-1} \\end{cases} $$ JC69モデル JC69 (Jukes and Cantor, 1969)は、最も単純な塩基モデルであり、以下の 置換速度行列 で表される。 $$ Q = \\{ q_{i,j} \\} = \\left[ \\begin{array}{rrrr} -3\\mu & \\mu & \\mu & \\mu \\\\ \\mu & -3\\mu & \\mu & \\mu \\\\ \\mu & \\mu & -3\\mu & \\mu \\\\ \\mu & \\mu & \\mu & -3\\mu \\end{array} \\right] $$ ここで、$Q$ の固有方程式を解くと、 $$ \\begin{aligned} \\det\\left(Q-\\lambda I\\right) &= \\mu\\left(x&#94;4 - 6x&#94;2 + 8x -3\\right), \\qquad \\left(x = (-3-\\lambda/\\mu)\\right)\\\\ &= (x-1)(x&#94;3 + x&#94;2 - 5x + 3)\\\\ &= (x-1)(x-1)(x&#94;2 + 2x -3)\\\\ &= (x-1)(x-1)(x-1)(x+3) \\end{aligned} $$ したがって、以下の対角化の結果（の一つ）が得られる。 $$ Q = \\left( \\begin{array}{rrrr} -1 & -1 & -1 & 1 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 1 & 0 & 1 \\\\ 0 & 0 & 0 & 1 \\end{array} \\right) \\left( \\begin{array}{rrrr} -4\\mu & 0 & 0 & 0 \\\\ 0 & -4\\mu & 0 & 0 \\\\ 0 & 0 & -4\\mu & 0 \\\\ 0 & 0 & 0 & 0 \\end{array} \\right) \\left(\\frac{1}{4} \\left( \\begin{array}{rrrr} -1 & -1 & -1 & 3 \\\\ -1 & -1 & 3 & -1 \\\\ -1 & 3 & -1 & -1 \\\\ 1 & 1 & 1 & 1 \\end{array} \\right) \\right) $$ In [2]: class JC69 (): def __init__ ( self ): self . substitution_rate_matrix = np . array ([ [ - 3 , 1 , 1 , 1 ], [ 1 , - 3 , 1 , 1 ], [ 1 , 1 , - 3 , 1 ], [ 1 , 1 , 1 , - 3 ], ]) self . eigvals , self . U = np . linalg . eig ( self . substitution_rate_matrix ) self . U_inv = np . linalg . inv ( self . U ) def Q ( self , lamda ): \"\"\" Substitution Rate Matrix \"\"\" return lamda * self . substitution_rate_matrix def P ( self , t , lamda ): Lambda = np . diag ( np . exp ( t * lamda * self . eigvals )) return np . dot ( self . U , np . dot ( Lambda , self . U_inv )) def p0 ( self , t , lamda ): return self . P ( t , lamda )[ 0 ][ 0 ] def p1 ( self , t , lamda ): return self . P ( t , lamda )[ 0 ][ 1 ] In [3]: time = np . linspace ( 0 , 2 , 10000 ) In [4]: model = JC69 () In [5]: plt . plot ( np . vectorize ( model . p0 )( time , lamda = 1 ), color = \"red\" , label = \"$p_0$\" ) plt . plot ( np . vectorize ( model . p1 )( time , lamda = 1 ), color = \"blue\" , label = \"$p_1$\" ) plt . axhline ( 1 / 4 , linestyle = \"--\" , color = \"black\" ) plt . legend (), plt . grid (), plt . xticks ([ 0 , 2500 , 5000 , 7500 , 10000 ], [ 0 , 0.5 , 1 , 1.5 , 2 ]) plt . show () if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"進化生態情報学","url":"https://iwasakishuto.github.io/University/3A/進化生態情報学-1.html","loc":"https://iwasakishuto.github.io/University/3A/進化生態情報学-1.html"},{"title":"レポート課題8(11/28出題)","text":"HMZZ6T7NkZy6jYBimgdxTw==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report8.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report8.html"},{"title":"機械学習(1)教師付き学習","text":"講師： 杉山将 講師： 本多淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 講義概要 回帰 モデル 最小二乗回帰 正則化最小二乗回帰 交差確認法 分類 超平面分類器 サポートベクトルマシン 非線形化 最適化 回帰 回帰の目標は、 「訓練標本から真の関数にできるだけ近い関数を求めること」 である。 モデル モデル：学習結果の関数を探す候補集合。パラメータ $\\boldsymbol{\\theta}$ の値を指定すると関数が一つ決まる。 $$\\left\\{f_{\\boldsymbol{\\theta}}(\\mathbf{x}) | \\boldsymbol{\\theta} = (\\theta_1,\\ldots,\\theta_b)&#94;T\\right\\}$$ 線形モデル：$f_{\\boldsymbol{\\theta}}(\\mathbf{x})$ が 「 $\\boldsymbol{\\theta}$ に関して」 線形 $$f_{\\boldsymbol{\\theta}}(\\mathbf{x}) = \\sum_{j=1}&#94;b\\theta_j\\phi_j(\\mathbf{x})\\quad \\mathbf{x}\\in\\mathbb{R}&#94;d$$ 非線形モデル：それ以外。 カーネルモデル $$f_{\\boldsymbol{\\theta}}\\mathbf{x}) = \\sum_{j=1}&#94;n\\theta_jK(\\mathbf{x},\\mathbf{x}_j)$$ 線形モデル の一種。 基底関数が入力に依存する。 $K(\\mathbf{x},\\mathbf{c})$ はカーネル関数であり、$\\phi_j(\\cdot) = K(\\cdot,\\mathbf{x}_j)$ に対応する。 （入力に依存している！！） カーネル関数として最も一般的なものは ガウスカーネル ガウス関数を各訓練入力標本の場所に配置 $$K(\\mathbf{x},\\mathbf{c}) = \\exp\\left(-\\frac{\\|\\mathbf{x}-\\mathbf{c}\\|&#94;2}{2h&#94;2}\\right),\\quad h(>0)$$ 訓練標本が入力空間上に偏って分布している時、ガウスカーネルモデルは 訓練入力標本が存在しない領域を無視する 関数が学習される。→ある種の 次元削減効果 が得られる（？） 最小二乗回帰 訓練出力との二乗誤差を最小にすることを目的とした回帰。 $$\\min_{\\boldsymbol{\\theta}}\\left[\\frac{1}{2}\\sum_{i=1}&#94;n\\left(y_i-f_{\\boldsymbol{\\theta}}(\\mathbf{x}_i)\\right)&#94;2\\right]$$ 正則化最小二乗回帰 過学習を抑えるため、 「回帰係数 $\\boldsymbol{\\theta}$ の各要素の絶対値が大きくなることに罰則を加えた」 最小二乗回帰。 $$\\min_{\\boldsymbol{\\theta}}\\left[\\frac{1}{2}\\sum_{i=1}&#94;n\\left(y_i-f_{\\boldsymbol{\\theta}}(\\mathbf{x}_i)\\right)&#94;2 + \\frac{\\lambda}{2}\\sum_{j=1}&#94;n\\theta_j&#94;2\\right]\\quad \\lambda>0$$ 交差確認法 正則化パラメータ $\\lambda$ や、ガウスカーネルのバンド幅 $h$ などは、設計者が 独断で決定する 。 より汎化性能の高いモデルを選択するため、 訓練標本を $k$ 分割し、「そのうち一つを検証用。残りを訓練用」に分ける 方法が一般的。この作業を $k$ 回繰り返して平均スコアを比較する。 分類 分類の目標は、 「クラス間の分離境界を求めること」 である。 超平面分類器 標本空間を超平面 $f_{\\mathbf{w},b} = \\mathbf{w}&#94;T\\mathbf{x} + b = 0$ で分離する。 サポートベクトルマシン 二つのクラスを分類する超平面はいくつかあるが、 「二つのクラス間の 隙間（マージン） の大きさが最大」 なものが汎化性能が高いという考えから マージン最大化 を目標とする手法。 標本が線形分離可能でない時には、マージンを定義することができないので、標本毎に少しの誤差 $\\xi_i$ を許す。 $$ \\begin{aligned} \\min_{\\mathbf{w},b,\\boldsymbol{\\xi}} \\quad&\\|\\mathbf{w}\\|&#94;2 + C\\sum_{i=1}&#94;n\\xi_i,\\quad f_{\\mathbf{w},b}(\\mathbf{x}) = \\mathbf{w}&#94;T\\mathbf{x} + b\\\\ \\text{subject to }\\quad&y;_if_{\\mathbf{w},b}(\\mathbf{x}_i)\\geq1-\\xi_i\\Longleftrightarrow\\xi_i\\geq1-y_if_{\\mathbf{w},b}(\\mathbf{x}_i)\\\\ &\\xi_i\\geq0\\quad\\text{for $i=1,\\ldots,n$} \\end{aligned} $$ $\\xi_i$ が小さいほど目的関数が減るので、結局必要な計算は $$\\min_{\\mathbf{w},b}\\left[\\|\\mathbf{w}\\|&#94;2 + C\\sum_{i=1}&#94;n\\max\\left\\{0,1-y_if_{\\mathbf{w},b}(\\mathbf{x}_i)\\right\\}\\right]$$ 非線形化 非線形関数 $\\phi(\\mathbf{x})$ で標本を特徴空間へ写像し、特徴空間内でマージン最大の超平面を求める。 $$f_{\\mathbf{w},b}(\\mathbf{x}) = \\mathbf{w}&#94;T\\mathbf{x} + b \\rightarrow f_{\\mathbf{w},b}(\\mathbf{x}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x}) + b$$ これをそのまま解く場合 $\\phi(\\mathbf{x})$ の次元が大きい場合は計算が大変なので、 カーネルトリック を用いる。 カーネルトリック 線形モデルにおける多くの回帰・分類手法では、特徴量 $\\phi(\\mathbf{x}_i)$ を 直接求めなくても、その内積 $\\phi(\\mathbf{x}_i)&#94;T\\phi(\\mathbf{x}_j)$ さえわかれば実装可能。 → 特徴空間上の内積を カーネル関数 で直接表現する。 計算量が特徴空間の次元によらない！ 【サポートベクターマシンの場合】 仮定 ： $$\\mathbf{w}=\\sum_{j=1}&#94;n\\theta_j\\phi(\\mathbf{x}_j),b=0$$ 最小化したい目的関数は、以下の形で表される。 $$ \\begin{cases} \\begin{aligned} &\\min_{\\mathbf{w},b}\\left[\\|\\mathbf{w}\\|&#94;2 + C\\sum_{i=1}&#94;n\\max\\left\\{0,1-y_if_{\\mathbf{w},b}(\\mathbf{x_i})\\right\\}\\right]\\\\ &f;_{\\mathbf{w},b}(\\mathbf{x}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x}) + b \\end{aligned} \\end{cases} \\rightarrow \\begin{cases} \\begin{aligned} &\\min_{\\boldsymbol{\\theta}}\\left[\\boldsymbol{\\theta}&#94;T\\mathbf{K}\\boldsymbol{\\theta} + C\\sum_{i=1}&#94;n\\max\\left\\{0,1-y_if_{\\mathbf{w},b}(\\mathbf{x_i})\\right\\}\\right]\\\\ &f;_{\\mathbf{w},b}(\\mathbf{x}) = \\sum_{j=1}&#94;n\\theta_jK(\\mathbf{x},\\mathbf{x}_j),\\quad\\phi(\\mathbf{x}_i)&#94;T\\phi(\\mathbf{x}_j) = K(\\mathbf{x}_i,\\mathbf{x}_j) \\end{aligned} \\end{cases} $$ 最適化 劣勾配 凸関数 $f$ の $\\mathbf{x}&#94;{\\prime}$ での 劣勾配(sub-gradient) とは、全ての $\\mathbf{x}\\in\\mathbb{R}&#94;d$ に対して次式を満たす $\\boldsymbol{\\xi}$： $$f(\\mathbf{x}) \\geq f(\\mathbf{x&#94;{\\prime}}) + \\boldsymbol{\\xi}&#94;T(\\mathbf{x}-\\mathbf{x}&#94;{\\prime})$$ $f$ が微分可能なとき、$\\boldsymbol{\\xi} = \\nabla f(\\mathbf{x}&#94;{\\prime})$ 上式を満たす $\\boldsymbol{\\xi}$ 全体を $\\partial f(\\mathbf{x}&#94;{\\prime})$ で表し、 劣微分(sub-differential) とよぶ。 劣勾配法：勾配法において、微分不可能な点では、劣微分のどれかの値を用いる。 【引用】 Qiita: 劣微分・劣勾配と共役関数の可視化 サポートベクトルマシン ※ 仮定：$\\mathbf{w}=\\sum_{j=1}&#94;n\\theta_j\\phi(\\mathbf{x}_j),b=0$ $$ \\begin{cases} \\begin{aligned} &\\min_{\\boldsymbol{\\theta}}\\left[\\boldsymbol{\\theta}&#94;T\\mathbf{K}\\boldsymbol{\\theta} + C\\sum_{i=1}&#94;n\\max\\left\\{0,1-y_if_{\\mathbf{w},b}(\\mathbf{x_i})\\right\\}\\right]\\\\ &f;_{\\mathbf{w},b}(\\mathbf{x}) = \\sum_{j=1}&#94;n\\theta_jK(\\mathbf{x},\\mathbf{x}_j),\\quad\\phi(\\mathbf{x}_i)&#94;T\\phi(\\mathbf{x}_j) = K(\\mathbf{x}_i,\\mathbf{x}_j) \\end{aligned} \\end{cases} $$ $\\min$ の中身を劣微分すれば、 $$ \\partial_{\\theta_j}\\max\\left(0, 1-f_{\\boldsymbol{\\theta}}(\\mathbf{x}_i)y_i\\right)= \\begin{cases} \\begin{aligned} &-y_iK(\\mathbf{x}_i,\\mathbf{x}_j) & \\left(\\text{if $1-f_{\\boldsymbol{\\theta}}(\\mathbf{x}_i)y_i > 0$ }\\right)\\\\ &0 & (\\text{otherwise.}) \\end{aligned} \\end{cases} $$ となるので、劣勾配法による実装時は以下で表せる。 $$\\boldsymbol{\\theta}\\longleftarrow\\boldsymbol{\\theta} - \\varepsilon\\left(C\\sum_{i=1}&#94;n\\partial_{\\boldsymbol{\\theta}}\\max\\left(0,1-f_{\\boldsymbol{\\theta}}(\\mathbf{x}_i)y_i\\right) + 2\\mathbf{K}\\boldsymbol{\\theta}\\right)$$ まとめ 教師付き学習 ：訓練データ（入出力の組）から、その背後に潜む関数を学習 回帰も分類も、 「損失*正則化(regularization)」の最小化 を目標としている。 $$\\min_{\\boldsymbol{\\theta}}\\left[\\sum_{i=1}&#94;n\\text{loss}\\left(f_{\\boldsymbol{\\theta}}(\\mathbf{x}_i),y_i\\right) + \\lambda\\text{Reg}(\\boldsymbol{\\theta})\\right]$$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-8.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-8.html"},{"title":"分子生命科学Ⅲ 第9回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 脳と行動(1) 脳と行動の化学的制御（総論） ホルモンによる性分化、性行動の制御（各論）","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-9.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-9.html"},{"title":"生命情報表現論 第2回","text":"非構造化知識の処理 〜情報検索から電子カルテまで〜 情報検索 情報検索 とは、 大量のデータ群から目的に合うものを取り出すこと であり、文書、画像、音声、映像など、検索の対象は多岐にわたる。 基本的な流れとしては、 データベースには、検索対象のデータが蓄積・管理されている。 検索対象のデータからメタデータ（索引語）が作成・管理されている。 検索の利用者は、ユーザインターフェースを通して検索質問をする。 検索アルゴリズムが、検索質問をメタデータに照合し、それに対応するデータをデータベースから選択する。 選択されたメタデータに対応する検索対象のデータをユーザインターフェイスを通して利用者に返答する。 となっている。（メタデータを使わない直接検索もありうる。） 検索技術に関しては 検索対象データの抽象度 直接検索（特に全文検索） 関節検索： データベースに蓄積されたデータからメタデータを生成して保管する。 検索時は、検索質問をメタデータの表現形式に変換する。 それをメタデータに対して照合、照合結果に紐づいたデータを取得。 検索入力の種類 単語：キーワードで検索 検索言語：システム特有の検索言語を使う。論理和・論理積など。 直接入力：例えば画像を入力し、類似した画像を検索する。 自然文：人が使う言葉そのもので検索する。後述の自然言語処理が必要。 文書：文書そのものを入力し、入力文書と類似する文書を検索する。 などの種類があり、主要なアルゴリズムは パターンマッチング ブール論理 ： パターンマッチングの検索に加え、メタデータの属性ごとの絞り込み条件を論理和・論理積などで組み合わせて併用する。 ベクトル空間モデル ： ユーザーからの検索質問やデータベース中の各データを高次元のベクトルで表現し、それらの類似度を元に関係の強さを計算する。 質疑応答システム 自然言語処理 テキストマイニング 電子カルテ ゲノム配列、ゲノムアノテーションと遺伝子進化 〜ゲノムデータの表現、系統樹、アノテーションまで〜 ゲノム配列データの表現と解析の概要 系統樹 系統樹 とは、 生物の類縁関係を表現する際に、分類群を樹枝状の線でつなぐ形で示したもの であり、枝分かれは系統の分岐を、枝の長さ・高さは進化の程度や時間経過を表す。 主な作成法としては、 近隣結合法(Neighbor-joining method) 複数のOTUの近隣を段階的に見いだし、最終的に無根系統樹を得る方法。 本法は各OTU間の距離行列を計算し、これを星状系統樹に配置した後、二つのOTUを結合したときにもっとも星状系統樹の枝長の総和を小さくするのに都合のよい系統樹を選択する。 この操作を段階的に繰り返すことによって最終的な系統樹を得る。 この方法は段階的クラスター法に属し、他の方法よりもはるかに短い計算時間で系統樹を作成できる利点がある。 進化速度を一定と仮定しないため、進化速度が異なる系統であっても、比較的正しく系統樹を作成することが可能である。 サイトごとに異なる進化速度は結果に反映されない。 最大節約法(Maximum parsimony method) 塩基配列上に有意な塩基置換の起こった座位を抽出し、これらがもっとも少ない置換回数で説明できる系統関係を選択する方法。 プリン塩基同士あるいはピリミジン塩基同士などの置換の起こりやすさを反映させることが可能。 系統学的に深い位置で分岐したもの同士を含む場合や特定の系統で進化速度が速くなっている場合には同じ座位で起こる多重置換を無視することができず、偏った推測をしてしまう可能性もある。 複数得られた系統関係の中からもっとも置換が少ない関係を選び出す目的には有用。 最尤法(Maximum likelihood method) 塩基置換における何らかのモデルを仮定し、そのモデルに基づいて、対象とする塩基配列が時間経過に伴って先祖配列から子孫配列へ塩基置換する確率を計算し、もっとも尤度（確率）の高い樹形を導く方法。 最尤法は網羅的探索法に属する。 探索のアルゴリズムやデータによってはきわめて計算時間がかかることがある。 ベイズ法 マルコム連鎖モンテカルロ法に基づいて大量の系統樹を作成し、単系統群の出現頻度（事後確率）を求める方法。 初期系統樹を攪乱し、得られた系統樹が初期系統樹の置換モデル・樹形・枝の長さから導かれる確率によって受理・棄却されるかを決定し、受理される場合は新たな系統樹に対してこの操作を繰り返す（棄却された場合はもとの系統樹に対して再度この操作を行う）。 このマルコフ連鎖を繰り返し、定常状態に達した時に単系統群の出現頻度が事後確率に相当する。 ベイズ法は比較的新しい系統解析法で今後に注目されているが、一方で計算時間がかかることや事後確率が過大評価されるなどの問題がある。 ゲノムアノテーション","tags":"生命情報表現論","url":"https://iwasakishuto.github.io/University/3A/生命情報表現論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生命情報表現論-2.html"},{"title":"レポート課題7(11/21出題)","text":"ZlmXMd7dkIOyX7g+vrOSog==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report7.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report7.html"},{"title":"確率と統計(3)確率不等式・大数の法則・中心極限定理・仮説検定","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 In [1]: import numpy as np import matplotlib.pyplot as plt from scipy import stats In [2]: seed = 0 N = 10000 trials = np . arange ( 1 , N + 1 ) 講義概要 確率不等式 ： 確率分布がわからなくても確率の上限・下限がわかる。 大数の法則 ： 標本平均は真の期待値に収束。 中心極限定理 ： 標本平均は漸近的に正規分布に従う。 仮説検定 ： 「帰無仮説と対立仮説」 ・ 「有意水準」 ・ 「両側検定と片側検定」 ・ 「二標本検定」 枠組み ： 両側検定 ： 二標本検定 ： 確率不等式 チェビシェフの不等式(Chebyshev's inequality) $$P\\left(\\left| X-\\mathbb{E}[X]\\right|\\geq k\\right) \\leq \\frac{\\mathbb{V}[X]}{k&#94;2},\\quad k>0$$ 確率分布の具体的な形がわからなくても良い。 確率分布の期待値と分散がわかる時、上式によって 確率の上限が計算できる 。 分散を持つ任意の確率変数 に対して成立する。 【証明】 $$ \\begin{aligned} \\mathbb{V}[X] &= \\int_{-\\infty}&#94;{\\infty}\\left(x - \\mathbb{E}[X]\\right)&#94;2f(x)dx\\\\ &\\geq \\int_{I}\\left(x - \\mathbb{E}[X]\\right)&#94;2f(x)dx\\quad I=\\left\\{x:|x-\\mathbb{E}[X]| \\geq k\\right\\}\\\\ &\\geq \\int_{I}k&#94;2f(x)dx\\\\ &= k&#94;2\\mathrm{P}\\left(|X-\\mathbb{E}[X]|\\geq k\\right) \\end{aligned} $$ その他の便利な不等式 マルコフの不等式(Markov's inequality)： $$P(X\\geq a)\\leq \\frac{1}{a}\\mathbb{E}[X]\\quad\\text{for any $a>0$}\\quad X\\geq0$$ イェンセンの不等式(Jensen's inequality)： $$\\mathbb{E}\\left[h(X)\\right]\\geq h\\left(\\mathbb{E}[X]\\right)\\quad h(x):\\text{Convex function}$$ ヘルダーの不等式(Hölder's inequality)： $$\\mathbb{E}[|XY|]\\leq\\left(\\mathbb{E}[|X|&#94;p]\\right)&#94;{1/p}\\left(\\mathbb{E}[|Y|&#94;q]\\right)&#94;{1/q}\\quad \\text{ for any $p,q>0$ such that $1/p+1/q=1$}$$ ※ ヘルダーの不等式において、特に $p=q=2$ の場合を コーシー・シュワルツの不等式(Cauchy-Schwarz's inequality) と呼ぶ。 大数の法則 独立同一分布 同じ分布から独立に $n$ 個の標本 $X_1,X_2,\\ldots,X_n$ を取り出したとき、これらは 独立同一分布に従う(independently and identically distributed, i.i.d) という。 $X_1,X_2,\\ldots,X_n$ の同時確率密度関数は $$f(x_1,x_2,\\ldots,x_n) = g(x_1)g(x_2),\\cdots,g(x_n)$$ 期待値 $\\mu$ 分散 $\\sigma&#94;2$ の i.i.d.標本 $X_1,X_2,\\ldots,X_n$ の標本平均 $\\bar{X_n}=\\frac{1}{n}\\sum_{i=1}&#94;nX_i$ を考える。 期待値 → 変化なし。 $$\\mathbb{E}\\left[\\frac{1}{n}\\sum_{i=1}&#94;nX_i\\right] = \\frac{1}{n}\\sum_{i=1}&#94;n\\mathbb{E}[X_i] = \\frac{1}{n}\\sum_{i=1}&#94;n\\mu = \\mu$$ 分散 → $1/n$ になり、標本平均を取ると値が安定する。 $$\\mathbb{V}\\left[\\frac{1}{n}\\sum_{i=1}&#94;nX_i\\right] = \\frac{1}{n&#94;2}\\sum_{i=1}&#94;n\\mathbb{V}[X_i] = \\frac{1}{n&#94;2}\\sum_{i=1}&#94;n\\sigma&#94;2 = \\frac{\\sigma&#94;2}{n}$$ 大数の弱法則 任意の正の定数 $\\varepsilon$ に対して、$n\\rightarrow\\infty$ のとき $$P\\left(|\\bar{X_n}-\\mu|\\geq\\varepsilon\\right)\\rightarrow0$$ 確率論の用語では、これを $\\bar{X_n}$ が $\\mu$ に 確率収束(convergence in probability)する と呼ぶ。 標本を十分たくさんとれば、 「標本平均を真の期待値とみなしても良い」 ということ。 チェビシェフの不等式を使って証明可能。 大数の強法則 $n\\rightarrow\\infty$ で、$\\bar{X_n}$ は $\\mu$ に 概収束(almost sure convergence) する。 In [3]: dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = N ) ave_dices = np . cumsum ( dices ) / trials In [4]: plt . axhline ( 3.5 , color = \"blue\" , label = \"Theoretical mean\" ) plt . plot ( trials , ave_dices , label = \"Observed average\" , color = \"green\" ) plt . ylim ( 1 , 6 ), plt . xlim ( - 1e1 , 1e3 ) plt . title ( \"Average dice roll by number of rolls\" ), plt . xlabel ( \"Number of trials $(n)$\" ), plt . ylabel ( \"Average\" ) plt . grid (), plt . legend () plt . show () 確率収束vs概収束 確率収束は 「$X_n$ の確率分布を $n$ ごとに考える」 のに対し、概収束では 「無限列 $\\{X_n\\}$ の確率分布」 を考える。 例えば，互いに独立な以下の確率変数列を考える。 $$X_n = \\begin{cases}0,&\\text{with probability $1-1/n$}\\\\1,&\\text{with probability $1/n$}\\end{cases}$$ $\\lim_{n\\rightarrow\\infty}\\mathrm{Pr}\\left(|X_n|>\\varepsilon\\right) = 0$：$X_n$ は $0$ に確率収束する。 $\\sum_{n=1}&#94;{\\infty}\\mathrm{Pr}\\left(|X_n|=\\varepsilon\\right) = \\infty$：$\\{X_n\\}$ は（確率1で）無限個の $n$ について値 $1$ を取る。→ 「概収束しない」 コーシー分布 $$f(x) = \\frac{\\alpha}{\\pi\\left(\\alpha&#94;2 + (x-\\lambda)&#94;2\\right)}\\quad\\alpha>0$$ 標準正規分布に独立に従う確率変数 $X,Y$ の比 $X/Y$ は、$\\alpha=1,\\lambda=0$ のコーシー分布に従う。 見た目は正規分布に似ている。 期待値と分散が存在しない → 大数の法則が適応できない In [5]: for k in range ( 3 ): samples = np . random . RandomState ( seed + k ) . standard_cauchy ( size = N ) ave_samples = np . cumsum ( samples ) / trials plt . plot ( trials , ave_samples , label = f \"Observation { k + 1 } \" ) plt . xlabel ( \"n\" ), plt . ylabel ( \"$(\\mathbf {X} _1+\\cdots+\\mathbf {X} _n)/n$\" ) plt . legend (), plt . grid () plt . show () 中心極限定理 大数の法則から、標本平均が真の期待値に近づいていくことがわかった。 大標本の極限の少し手前では、標本平均はどのように分布しているだろうか？ （任意に固定した $a < b$ に対して）$n\\rightarrow\\infty$ のとき $$P\\left(a\\leq Z_n \\leq b\\right)\\rightarrow\\int_a&#94;b\\frac{1}{\\sqrt{2\\pi}}e&#94;{-x&#94;2/2}dx,\\quad Z_n = \\frac{\\bar{X_n}-\\mu}{\\sigma/\\sqrt{n}}$$ $Z_n$ の分布が 標準正規分布に 「弱収束(weak convergence)」 する。 （$Z_n$ が $Z$ に弱収束 ↔︎ $\\lim_{n\\rightarrow\\infty}M_{Z_n}(t)=M_Z(t)$） 標準正規分布に 「分布収束(convergence in distribution)」 する。 「漸近的(asymptotically)」 に標準正規分布に従う。 【証明】 目標：「標準正規分布の積率母関数は $e&#94;{t&#94;2/2}$ なので、次式を示す。」 $$\\lim_{n\\rightarrow\\infty}M_{Z_n}(t) = e&#94;{t&#94;2/2}$$ $Y_i = \\frac{X_i-\\mu}{\\sigma}$ は期待値 $0$、分散 $1$ なので、積率母関数は $$M_{Y_i}(t) = \\mathbb{E}\\left[e&#94;{tY_i}\\right] = \\mathbb{E}\\left(1 + tY_i + \\frac{t&#94;2}{2!}Y_i&#94;2 + \\frac{t&#94;3}{3!}Y_i&#94;3 + \\cdots\\right) = 1 + \\frac{1}{2}t&#94;2 + \\sum_{n=3}&#94;{\\infty}\\frac{t&#94;n}{n!}Y_i&#94;n$$ ここで、 $$Z_n = \\frac{\\bar{X_n}-\\mu}{\\sigma/\\sqrt{n}} = \\frac{\\frac{1}{n}\\sum_{i=1}&#94;n X_i - \\mu}{\\sigma/\\sqrt{n}} = \\frac{1}{\\sqrt{n}}\\sum_{i=1}&#94;n Y_i$$ であり、積率母関数の性質 $$ \\begin{cases} M_{Y_1+Y_2}(t) = M_{Y_1}(t)M_{Y_2}(t)\\quad (\\text{$Y_1$ and $Y_2$ are independent.})\\\\ M_{aY}(t) = \\mathbb{E}\\left[e&#94;{taY}\\right] = M_Y(at) \\end{cases} $$ を利用すれば、$Z_n$ の積率母関数は $$ \\begin{aligned} M_{Z_n}(t) &= \\left[M_{Y_i/\\sqrt{n}}(t)\\right]&#94;n & \\left(\\because{Z_n = \\frac{1}{\\sqrt{n}}\\sum_{i=1}&#94;n Y_i}\\right)\\\\ &= \\left[M_{Y_i}\\left(\\frac{t}{\\sqrt{n}}\\right)\\right]&#94;n & \\left(\\because M_{aY}(t)=M_Y(at) \\right)\\\\ &= \\left[1 + \\frac{1}{2}\\left(\\frac{t}{\\sqrt{n}}\\right)&#94;2 + \\sum_{n=3}&#94;{\\infty}\\frac{Y_i&#94;n}{n!}\\left(\\frac{t}{\\sqrt{n}}\\right)&#94;n \\right]&#94;n & \\left(\\because M_{Y_i}(t) = 1 + \\frac{1}{2}t&#94;2 + \\sum_{n=3}&#94;{\\infty}\\frac{t&#94;n}{n!}Y_i&#94;n \\right)\\\\ &= \\left(1 + u_n\\right)&#94;n \\end{aligned} $$ （ここまでまとめ）主目標：「標準正規分布の積率母関数は $e&#94;{t&#94;2/2}$ なので、次式を示す。」 $$\\lim_{n\\rightarrow\\infty}M_{Z_n}(t) = e&#94;{t&#94;2/2}$$ $M_{Z_n}(t)$ は、以下のように示せた。 $$M_{Z_n}(t) = \\left(1 + u_n\\right)&#94;n\\quad \\left(u_n = \\frac{1}{2}\\left(\\frac{t}{\\sqrt{n}}\\right)&#94;2 + \\sum_{n=3}&#94;{\\infty}\\frac{Y_i&#94;n}{n!}\\left(\\frac{t}{\\sqrt{n}}\\right)&#94;n\\right)$$ 以下、 「$\\lim_{n\\rightarrow\\infty}\\log M_{Z_n}(t) = t&#94;2/2$ を示す。」 $n\\rightarrow\\infty$ のとき $|u_n| < 1$ なので、テーラー展開すると $$\\log(1 + u_n) = u_n - u_n&#94;2/2 + u_n&#94;3/3 - \\cdots$$ したがって、$\\log M_{Z_n}(t) = n\\log(1 + u_n) = n\\left(u_n - u_n&#94;2/2 + u_n&#94;3/3 - \\cdots\\right)$ 第1項目に注目すると $$\\lim_{n\\rightarrow\\infty}nu_n = \\lim_{n\\rightarrow\\infty}\\left(\\frac{t&#94;2}{2} + \\sum_{n=3}&#94;{\\infty}\\frac{Y_i&#94;n}{n!}\\frac{t&#94;n}{\\left(\\sqrt{n}\\right)&#94;{n-2}}\\right) = \\frac{t&#94;2}{2}$$ 第2項目以降に注目すると $$\\lim_{n\\rightarrow\\infty}n|-u_n&#94;2/2 + u_n&#94;3/3 - \\cdots | = 0$$ 以上より、 「$\\lim_{n\\rightarrow\\infty}\\log M_{Z_n}(t) = t&#94;2/2$」 $$P\\left(a\\leq Z_n \\leq b\\right)\\rightarrow\\int_a&#94;b\\frac{1}{\\sqrt{2\\pi}}e&#94;{-x&#94;2/2}dx,\\quad Z_n = \\frac{\\bar{X_n}-\\mu}{\\sigma/\\sqrt{n}}$$ 例①：一様分布 $\\mathrm{Uni}(0,1)$ In [6]: fig = plt . figure ( figsize = ( 16 , 4 )) for i , n in enumerate ( range ( 1 , 4 )): ax = fig . add_subplot ( 1 , 3 , i + 1 ) X = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = ( n , N * 10 )) X_ave = np . mean ( X , axis = 0 ) hist , bin_edges , _ = ax . hist ( X_ave , color = \"blue\" , bins = 30 , alpha = 0.5 ) bins = 1 / 2 * ( bin_edges [ 1 :] + bin_edges [: - 1 ]) ax . plot ( bins , hist , color = \"red\" ) ax . set_xlim ( 0 , 1 ), ax . grid (), ax . set_title ( f \"Uniform distribution [0,1] (n= { n } )\" ) plt . tight_layout () plt . show () 例②：指数分布 $f(x) = e&#94;{-x}$ ※ np.random.exponential(beta) は以下の分布から乱数を生成する $$f\\left(x; \\frac{1}{\\beta}\\right) = \\frac{1}{\\beta} \\exp\\left(-\\frac{x}{\\beta}\\right)$$ In [7]: fig = plt . figure ( figsize = ( 16 , 4 )) for i , n in enumerate ([ 1 , 3 , 30 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) X = np . random . RandomState ( seed ) . exponential ( size = ( n , N * 10 )) X_ave = np . mean ( X , axis = 0 ) hist , bin_edges , _ = ax . hist ( X_ave , color = \"blue\" , bins = 30 , alpha = 0.5 ) bins = 1 / 2 * ( bin_edges [ 1 :] + bin_edges [: - 1 ]) ax . plot ( bins , hist , color = \"red\" ) ax . set_xlim ( 0 , 5 ), ax . grid (), ax . set_title ( f \"Exponential distribution (n= { n } )\" ) plt . tight_layout () plt . show () 仮説検定 枠組み 語彙 説明 （例） 仮説検定(hypothesis testing) 母集団についての何らかの命題を、標本に基づいて検証すること コインを20回投げて表が17回出た。この結果から表が出やすいと言えるか？ 帰無仮説(null hypothesis) もとの仮説 コインは歪んでいない。（表が出る確率 $p=1/2$） 対立仮説(alternative hypothesis) 帰無仮説と対立する仮説 表が出やすい。（$p>1/2$） 有意水準(significance level) 検定において帰無仮説を設定したときに、その帰無仮説を棄却する基準となる確率。検定の前に決定する。 $5$% か $1$% のことが多い。 上の例であれば、 「コインは歪んでいない（ $p=1/2$ ） 」 と仮定すれば、 「コインを20回投げて表が17回出る」 という事象の確率は、 $$\\left( _{20}C_{17} + _{20}C_{18} + _{20}C_{19} + _{20}C_{20}\\right) \\times (1/2)&#94;{20} \\approx 0.0013$$ となり、有意水準 $1$ % よりも値が小さい。したがって、帰無仮説を棄却し、 「有意水準 $1$% ので表が出やすい（$p>1_2$）」 と結論づけられる。 注意 「帰無仮説を棄却するとき」 は 「帰無仮説がほとんど起こらないことを証明」 している 「帰無仮説を採択するとき」 は積極的に帰無仮説が起こることを証明しているの 「ではなく」 帰無仮説が現実と矛盾することを証明するだけの 「十分な根拠がない」 と言っているだけである。 両側検定 両側検定(two-sided test) ：あるパラメータが目標値と等しいかどうかを調べる。 片側検定(one-sided test) ：あるパラメータが比較対象より大きいかどうかを調べる。 二標本検定 二標本検定(two-sample test) ：期待値がそれぞれ $\\mu_X,\\mu_Y$ の二つの分布にしたがって取り出した i.i.d.標本（ $\\{X_i\\}_{i=1}&#94;{n_X},\\{Y_i\\}_{i=1}&#94;{n_Y}$ ）から、 「帰無仮説 $\\mu_X=\\mu_Y$ 」 を検定する。 例題 ある反応での化合物の生成量を予測する問題を考える。 触媒Aと触媒Bでそれぞれ何度か実験を行い、それぞれの生成量を調べてみると以下であった。 触媒Aでの平均生成量は16g 触媒Bでの平均生成量は18g 触媒Bのほうが平均生成量が大きいので，触媒A よりも優れていると単純に結論づけて良いか？ → 触媒Aとの 「平均生成量の差が有意(significant)かどうか」 を調べたい。 「仮定」 ：標本はそれぞれ正規分布に従う。 $$X_i\\overset{\\text{i.i.d.}}{\\approx}N(\\mu_X,\\sigma&#94;2),\\quad Y_i\\overset{\\text{i.i.d.}}{\\approx}N(\\mu_Y,\\sigma&#94;2)$$ このとき、 「標本平均の差」 は以下の正規分布に従う。 $$\\bar{X}-\\bar{Y} \\sim N\\left(\\mu_X-\\mu_Y, \\frac{\\sigma&#94;2}{n_X}+\\frac{\\sigma&#94;2}{n_Y}\\right)$$ 「母分散が既知かどうか」 によって、以下の2通りに場合分けされる。 「母分散が既知のとき」 ： 標本平均の差を標準化すると、標準正規分布に従う。 $$Z = \\frac{\\left(\\bar{X} - \\bar{Y}\\right) - \\left(\\mu_X-\\mu_Y\\right)}{\\sqrt{\\frac{\\sigma&#94;2}{n_X} + \\frac{\\sigma&#94;2}{n_Y}}}\\sim N(0,1)$$ 標準正規分布の棄却率は計算できるので、$\\hat{Z}$ が棄却域に入るかどうかを調べれば良い。 $$Z = \\frac{\\bar{X}-\\bar{Y}}{\\sqrt{\\frac{\\sigma&#94;2}{n_X} + \\frac{\\sigma&#94;2}{n_Y}}}$$ 「母分散が未知のとき」 ： 分散 $\\sigma&#94;2$ を標本から推定する。 $$\\hat{\\sigma}&#94;2 = \\frac{\\sum_{i=1}&#94;{n_X}\\left(X_i-\\bar{X}\\right)&#94;2 + \\sum_{i=1}&#94;{n_Y}\\left(Y_i-\\bar{Y}\\right)&#94;2}{n_X + n_Y - 2}$$ $\\hat{Z} = \\frac{\\bar{X} - \\bar{Y}}{\\sqrt{\\frac{\\hat{\\sigma}&#94;2}{n_X}} + \\sqrt{\\frac{\\hat{\\sigma}&#94;2}{n_Y}}}$ は自由度 $\\phi = n_X + n_Y - 2$ の t分布 に従う。 t分布の棄却率は計算できるので、$\\hat{Z}$ が棄却域に入るかどうかを調べれば良い。 t分布 $$f(x) = \\frac{1}{\\sqrt{\\phi}B\\left(\\frac{\\phi}{2},{\\frac{1}{2}}\\right)}\\left(1 + \\frac{x&#94;2}{\\phi}\\right)&#94;{-\\frac{\\phi + 1}{2}},\\quad \\phi = 1,2,\\ldots$$ $X$ を標準正規分布に従う確率変数、$Y$ を自由度 $\\phi$ のカイ二乗分布に従う独立な確率変数としたとき、 $$X/\\sqrt{Y/\\phi}$$ は自由度 $\\phi$ のｔ分布に従う。なお、発見者のペンネームにちなんで、 スチューデンのt分布(Student's t-distribution) と呼ぶこともある。 In [8]: x = np . linspace ( - 3 , 3 , N ) In [9]: fig = plt . figure ( figsize = ( 14 , 4 )) for i , phi in enumerate ([ 1 , 3 , 10 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax . plot ( x , stats . t . pdf ( x , phi ), color = \"r\" , alpha = 0.7 , label = f \"Student's t ($\\phi= { phi } $)\" ) ax . plot ( x , stats . norm . pdf ( x ), color = \"g\" , alpha = 0.5 , label = \"Normal\" ) ax . plot ( x , stats . cauchy . pdf ( x ), color = \"b\" , alpha = 0.5 , label = \"Cauchy\" ) ax . legend () plt . tight_layout () plt . show () 自由度 $\\phi$ が $1$ のとき、 「ｔ分布はコーシー分布になる」 自由度 $\\phi$ が $\\infty$ 限大のとき、ｔ分布は正規分布になる． 自由度 $\\phi$ が 「$2$ 以上」 のとき、期待値は $$\\mathbb{E}[X] = 0$$ 自由度 $\\phi$ が 「$3$ 以上」 のとき、分散は $$\\mathbb{V}[X] = \\frac{\\phi}{\\phi - 2}$$ まとめ 確率不等式 ： 確率分布がわからなくても確率の上限・下限がわかる。 大数の法則 ： 標本平均は真の期待値に収束。 中心極限定理 ： 標本平均は漸近的に正規分布に従う。 仮説検定 ： 「帰無仮説と対立仮説」 ・ 「有意水準」 ・ 「両側検定と片側検定」 ・ 「二標本検定」 枠組み ： 両側検定 ： 二標本検定 ： In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-7.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-7.html"},{"title":"分子生命科学Ⅲ 第8回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 運動系(2) 脳による運動制御 ¬中枢運動系(central motor system)¬には、上部は前頭葉から下部は脊髄まで、階層化された制御レベルの構成が見られる。この運動制御の階層性は、以下のような3段階に分けて考えるとわかりやすい。 高位レベル： 戦略(strategy) （企画・立案） ¬大脳新皮質の連合野¬と¬前脳の基底核¬が、戦略、動作の目標とその達成のための最良の運動方針を立てる。 中位レベル： 戦術(tactics) （実行計画・プログラミング） ¬大脳新皮質の連合野¬と¬小脳¬は、戦術、一連の筋の収縮により、限られた空間と時間で滑らかでかつ正確に目標を達成する計画を作製する。 下位レベル： 実行 ¬脳幹¬と¬脊髄¬は、実行、運動ニューロンと介在ニューロン群の発火により、目的とした運動を達成し、同時に必要な姿勢の調節を行う。 下行性脊髄路 脳は脊髄の運動ニューロンと連絡するが、脳からの軸索は、2つの主要な経路により脊髄を下行する。 @外側経路(lateral pathway)@は、遠位筋の随意運動に関わり、大脳皮質から直接的な制御を受けている。 最も重要な経路は、@皮質脊髄路(corticospinal tract)@である。この経路は、大脳新皮質から起こり、最も長く中枢神経系で最も大きな神経回路の一つで、約100万本の軸索を含む。 @腸内側経路(ventromedial pathway)@は、姿勢と歩行運動の制御に関わり、脳幹による制御を受けている。 @前提脊髄路(vestibulospinal tract)@は内耳の¬前庭迷路(vestibular labyrinth)¬からの感覚情報を受ける延髄の¬前庭神経核(vestibular nuclei)¬から始まる。頭部の動きに対する姿勢反射に関与する。 @視蓋脊髄路(tectospinal tract)@は、網膜からの直接入力を受ける中脳の上丘から始まる。感覚刺激に対する体位の指向運動に関与する。 網様体脊髄路 は橋および延髄網様体からの下行路で、体幹筋や近位四肢筋の運動を制御する。 運動野 大脳皮質の4野と6野は¬運動野(motor cortex)¬と呼ばれるが、随意運動の制御にはほぼ全ての大脳新皮質が関わっている。","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-8.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-8.html"},{"title":"デジタルカメラ系","text":"講師： 相澤清晴 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 講義内容（相澤先生） 入力・カメラ系：デジタルカメラでの撮像過程 表色系 フィルタリング・画像復元 特徴抽出(Global features, Local features, Deep features) 画像符号化 デジタルカメラ系 ポイントは、 「空間方向の標本化」 と 「色信号の量子化」 人間の眼と電子の眼の ダイナミックレンジ は、 人の視覚：8桁（星空〜太陽光下） フィルム：4桁 CCD,CMOS：3桁 デジタルカメラ構造 CMOSセンサー・CCDセンサー CMOS(Complementary Metal Oxide Semiconductor・相補性金属酸化膜半導体)センサー は、 CCD(Charge-Coupled Device)センサー と同じように、光を感じて電気信号に変える半導体センサーである。 CMOSセンサーには 受光素子と電気信号を増幅するアンプがたくさん並んでついている ため、CCDセンサーに比べて低い電圧で動作し、読み出しを高速化することが容易である。 More: キヤノン：技術のご紹介 | サイエンスラボ CMOSセンサー デモザイキング 単板式（↔︎3板式） カメラは画素ごとに 「 R ・ G ・ B 」 のどの色を読み取るかが決まっており、その並び方を ベイヤー配列 と呼ぶ。 この場合、欠損した画素値を補完する必要がある。 このような画素ごとに色チャネルが異なる1枚のグレースケール画像（モザイク状のカラー画像）から1枚のRGBカラー画像を再構成する処理を （カラー）デモザイキング と呼ぶ。 周囲の色情報から線形補完する バイリニア補間 や、エッジの方向を判別して、滑らかに変化する方向のが措置だけを用いて補完する エッジセンシング補完 などがある。 3板式 ダイクロイックプリズム を用いて入射光を3つの波長帯域に分解して、それぞれを専用の撮像素子で撮像する。 最初の反射面は青の波長帯域だけを反射して残りの波長帯域は通過、次の反射面は赤の波長帯域だけを反射して緑の波長帯域を通過、といった感じ。 高画質なカラー画像を撮影できるが、レンズ光学系と撮像素子の間にダイクロイックプリズムを配置する必要があることと、3つの撮像素子が必要なことから、コストやカメラサイズの面では不利な場合もある。 放送や取材などのための業務用のカメラではこちらが使われる。 コントラストAF コントラストは、 「画像のヒストグラムの分布の広がり」 のこと。画素値の最大値を \\(I_{\\max}\\) 、最小値を \\(I_{\\min}\\) とすると、以下のような求め方がある。 $$\\begin{cases}\\begin{aligned}C_1 &= I_{\\max}-I_{\\min}\\\\C_2 &= \\left(I_{\\max}-I_{\\min}\\right)/\\left(I_{\\max}+I_{\\min}\\right)\\end{aligned}\\end{cases}$$ いずれの求め方でも画像中に1画素でも極端に大きな（小さな）画素が含まれると、画像全体から受ける印象は同じにも関わらずコントラストが異なってしまう。このため、 頻度が一定値よりも小さな画素値を考慮しない などの工夫がある。 コントラストAF(Auto Focus) は、撮像素子に映った映像をもとに、ピントレンズを動かしながら 明暗差（コントラスト） が大きなところを探してピントを合わせる方式。 撮像素子とAF用センサーを兼用できるのでカメラ本体の 小型化が可能 となるため、コンパクトデジカメで広く使われる方式である。 （スマホでも使われている。） レンズを動かして （フォーカスを動かしながら） AFエリアの輝度を把握しないといけないので、後述の位相差AF方式に比べて、ピント検出に時間がかかる 位相差AF 位相差AF は、レンズから入った光を2つに分けて専用のセンサーへ導き、結像した2つの画像の間隔からピントの方向と量を判断する方式。 コントラストAFに比べると、レンズを動かしながらピントを探る必要がないので 高速にピント合わせを行うことができる。 専用センサーとレンズから入った光を撮像素子と専用センサーへ分岐させる仕組みが必要となるために カメラ本体の小型化が難しい。 AE&AGC AE: Auto Exposure.自動露出。露出（絞り値とシャッター速度の組み合わせ）を自動で決定する機能のこと。 AGC: オートゲインコントロール(Auto Gain Control)。撮影場所が薄暗い場合などに、光を増幅し、明るい映像に調整する機能。この値を大きくすればするほど、より暗い場所を明るく撮影できるが、その分ノイズが増える。 画像処理 \\(\\gamma\\) 補正 デジタル画像を表示する際、それぞれに色情報の伝送を行いますが各機器には固有の発色特性があり、入力された色情報をそのまま表示することが出来ない。 このとき生じる誤差を \\(\\gamma\\) 特性 と呼び、画像を自然の色に近くなるよう輝度や彩度の誤差を修正する機能を \\(\\gamma\\) 補正 と呼ぶ。 AWB（オートホワイトバランス） 異なる照明下でも、白が白に写るような色の調整、赤と青の利得調整をすることが多い。 照明とカメラの温度関係によって、画像に 青みがかかったり 、 赤みがかかったり する。 白い対象を写し、白と見えるようにバランス調整を行う。 あらかじめ、白熱灯、蛍光灯、太陽光などの何種類かの補正係数を求めておき、切り替えて使う。 心理学の世界では 灰色世界仮説 というものもある。 非常に難しい。綺麗に解決できれば有名になれるXD AS（オートスラビライゼーション） 手ぶれ補正 揺れの検出： 映像〜動きベクトル センサ〜角速度ベクトル 揺れの補正： 映像の切り出し 可変頂角プリズム（光軸の変化） 撮像デバイス駆動 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-8.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-8.html"},{"title":"表色系","text":"色を定量的に表す体系を¬表色系(color specification system)¬と呼ぶ。 表色系 には、人間が知覚した色を記号や 色票 などで 定性的 に扱う¬顕色系(color appearance system)¬と、実験に基づいて色を心理物理量として 定量的 に扱う¬混色系(color mixing system)¬がある。 色空間 ¬加法混色(additive colour mixing)¬と¬減法混色(subtractive colour mixing)¬。 表色系： RGB(CIE-RGB) CIE-XYZ表色系 CIE-L*a*b* HSV(HSI)表色系 マンセル表色系 YCbCr 加法混色と減法混色 波長が約 400~800nm の¬電磁波(electromagnetic wave)¬を人間の眼に入力すると、 電磁波の波長によって定まる色 の光として知覚する。したがって、ある色の光を作る際には、その色に対応する波長の電磁波を用意すれば良いことになる。 しかし、互いに 独立した3つの色の光 （¬原刺激(reference color stimuli)¬）を混ぜることでも、任意の色を再現できるという経験則が知られている。これは、人間の眼の波長に対する感度の異なる3種類の¬錐体¬の存在で説明できると考えられている。 ここで、複数の色の光を混ぜ合わせることで別の色の光をつくることを¬混色(colour mixing)¬と呼ぶが、これには以下の2つの方法がある。 # 加法混色(additive colour mixing) 減法混色(subtractive colour mixing) 画像 混色方法 白いスクリーン上に異なる色の光を重ねて投影する。 白い紙の上で絵の具を混ぜ合わせる。または、色付きフィルタを通して白色光を見る。 原色 赤(red) ・ 緑(green) ・ 青(blue) シアン(cyan) ・ マゼンタ(magenta) ・ 黄(yellow) 表色系 撮影対象の色を測定する際に、3種類の原刺激を用意して 加法混色 し、色が一致した際に両者は¬等色(color match)¬したという。 $$\\mathbf{C} \\underset{=}{\\text{color match}} R\\mathbf{R} + G\\mathbf{G} + B\\mathbf{B}$$ 測定対象からの反射光 \\(\\mathbf{C}\\) は一般に¬連続した分光強度分布を持つ¬が、右辺の3種類の原色光の混色と区別できない。 この方法で対象の光 \\(\\mathbf{C}\\) を表現するとき、三刺激値を調整する前に、原刺激それ自体の大きさを決める必要がある。これは、白色光 \\(\\mathbf{W}\\) （これを¬基礎刺激¬と呼ぶ）に等色するような原刺激の強度を求め、それを単位量とすることで達成されるが、波長 \\(\\lambda\\) に依存する。よって、単位放射量を発行する仮装光 \\(\\mathbf{U}(\\lambda)\\) （等エネルギー白色光）を用いて、 $$\\mathbf{U}(\\lambda) = \\bar{r}(\\lambda)\\mathbf{R} + \\bar{g}(\\lambda)\\mathbf{G} + \\bar{b}(\\lambda)\\mathbf{B}$$ の式が成り立つ三値刺激の分布（ \\(\\bar{r}(\\lambda), \\bar{g}(\\lambda), \\bar{b}(\\lambda)\\) ）を考える。なお、これらを用いれば、先ほどの反射光 \\(\\mathbf{C}\\) の分光エネルギー分布 \\(L(\\lambda)\\) から、次のように三値刺激（ \\(R,G,B\\) ）を計算できる。 $$ \\begin{cases} \\begin{aligned} R &= \\int_VL(\\lambda)\\bar{r}(\\lambda)d\\lambda\\\\ G &= \\int_VL(\\lambda)\\bar{g}(\\lambda)d\\lambda\\\\ B &= \\int_VL(\\lambda)\\bar{b}(\\lambda)d\\lambda \\end{aligned} \\end{cases} $$ ただし、積分範囲 \\(V\\) は可視光の波長範囲を表す。この \\(\\bar{r}(\\lambda), \\bar{g}(\\lambda), \\bar{b}(\\lambda)\\) を¬等色関数(color matching function)¬と呼ぶ。つまり、 原刺激 \\(\\mathbf{R},\\mathbf{G},\\mathbf{B}\\) 基礎刺激 \\(\\mathbf{W}\\) に等色する原刺激の強度 原刺激に対応した等色関数 \\(\\bar{r}(\\lambda), \\bar{g}(\\lambda), \\bar{b}(\\lambda)\\) がわかれば、任意の分光強度分布を持つ光の色彩を3つの数値で表すことができる。 CIE-RGB 原刺激を（R:700.0nm, G:546.1nm, B:435.8nm）として上記の等色関数を用いたもの。等色関数には一部に負の値の領域があるが、この領域では、左辺の反射光 \\(\\mathbf{C}\\) に一定量の原刺激を加えることで等色させる。 CIE-XYZ CIE-XYZ 表色系は、 CIE-RGB 表式系と同時に採用された標準表色系である。 CIE-RGB 表色系の等色関数は、部分的に負の値があり、扱いにくかったので、¬等色関数が非負となる¬ように仮想的な原刺激を設定し、¬CIE-RGB表式系の等色関数から線形変換によって¬求めた等色関数 \\(\\bar{x}(\\lambda),\\bar{y}(\\lambda),\\bar{z}(\\lambda)\\) を用いて三値刺激 \\(X,Y,Z\\) を求めて色を定量的に表現する。 $$ \\left[\\begin{array}{l}{X} \\\\ {Y} \\\\ {Z}\\end{array}\\right]=\\left[\\begin{array}{ccc}{2.7689} & {1.7518} & {1.1302} \\\\ {1.0000} & {4.5907} & {0.0601} \\\\ {0} & {0.0565} & {5.5943}\\end{array}\\right]\\left[\\begin{array}{l}{R} \\\\ {G} \\\\ {B}\\end{array}\\right] $$ ここで、 明るさを無視する と、任意の色は¬色度座標(trichromatic coodinates)¬で表現できる。さらに、 \\(X+Y+Z=1\\) の制約を用いてこれを平面表示することも可能である。 上図の \\(xy\\) 色度図中で釣鐘状の曲線を¬スペクトル軌跡(spectrum locus)¬と呼び、軌跡に沿って最も純度の高い単色光が並ぶ。人間が知覚できる全ての色は、380~780nmの点に至るスペクトル軌跡と、その両端を結ぶ直線（¬純紫軌跡(purple lines)¬）で囲まれた領域内にある。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-9.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-9.html"},{"title":"生命情報表現論 第1回","text":"講師： 角田達彦 講義概要 # タイトル 内容 コマ 1 生命情報表現論イントロダクション 生命情報の表現法と解析法・推論法の研究開発がなぜ必要か？ 1コマ目 2 人工知能研究と知識表現 関係代数とSQL、述語論理、フレーム、NoSQL、深層学習とその表現 3 非構造化知識の処理 テキストマイニング、電子カルテ、医療情報 2コマ目 脳と行動の化学的制御 4 ゲノム配列、ゲノムアノテーションと遺伝子進化 ゲノム配列データの表現と解析の概要、系統樹、ゲノムアノテーション GWAS、ゲノム多様性解析、eQTL、polygenic risk score 3コマ目 パラログ・オルソログ・インパラログ・次世代シークエンサー技術とデータの扱い がんゲノム・オミクス・がん免疫の解析 5 グループ議論とプレゼンテーション 「述語論理」を担当。 4コマ目 6 生命科学におけるネットワークデータの表現法と知識抽出 相互作用、遺伝子共発現、パスウェイ、システム生物学、分子から細胞へ 5コマ目 7 データの共有と結合 遺伝子機能アノテーション、オントロジー、統合解析 6コマ目 オープンデータ、オープンアクセス、CCライセンス 8 グループ議論とプレゼンテーション 「システムバイオロジーで何ができるか」 7コマ目 生命情報表現論イントロダクション 〜生命情報の表現法と解析法・推論法の研究開発がなぜ必要か？〜 生命現象の裏にある普遍法則を知りたい。 （還元論） ： 例）生物物理、分子生物学 全体を要素と要素間の関係に 分解 し、各要素を さらに分解する ことを繰り返す。 → 要素と要素間の関係で書き尽くしたい。 現象と説明に矛盾があるときは、さらなる要素との関係を探る。 これまでの多くの論文としての蓄積。 これまでの知識を再利用したい。 推論や予測をしたい。 （全体論） 要素間の関係を再統合し、全体としての挙動を解明し推論する。 因果・時間発展推論。 予測を行い、観測と合わない部分から科学的発見につなげる。 相互作用を扱う。 以上から、記述法と推論方法が必要。 計算機にやらせたい。（計算機が推論できる＝現象をよく理解した。） 計算機による科学的発見への期待。 しかし、生命現象はとんでもなく複雑である。 扱う現象の膨大さ。 階層性：分子、細胞、組織、臓器、全身、環境 個体差：個人差、集団（人種）差、種差 環境による影響：栄養、刺激（煙草、紫外線…）、運動… ストキャスティクス（≒確率的）：ゆらぎ。進化をドライブする原動力でもある。 人間の直感を超えている（ものも扱いたい）。 複雑すぎて追いきれない。予想がつかない。 ただし、根本原理が捉えられれば良い。 システムバイオロジー（例：鳥から飛行機の原理） 計算機で適切なレベルで再現・推論したい（機能・原理vs.複雑な現象、個々の分子・細胞など） 情報科学の、データ構造とアルゴリズムの関係 適切なデータの表現方法とデータのメモリ上の置き方。 アルゴリズム：データのアクセス、計算、書き込み チューリングマシンから深層ニューラルネット・深層学習まで まとめ ゲノム研究の進展により生命科学は仮説駆動型からデータ駆動型の科学に変貌しつつある。このような科学を推進するには、多種多様で複雑なデータや知識を計算機で うまく 扱えるようにすることが不可欠である。 〜計算機に推論させるのに必要十分な表現方法は何か？〜 人工知能研究と知識表現 〜関係代数とSQL、述語論理、フレーム、NoSQL、深層学習とその表現〜 いきなり生命現象の表現方法と推論方法を考え始めても、対象が複雑すぎて発散する。そこで、コンピュータサイエンスで開発された種々の知識表現法と推論をおさらいしてみる。 関係代数（関係モデル）とSQL 関係データベース（リレーショナルデータベース） において、集合論と一階述語論理に基づいて、関係（リレーション、表、テーブル）として表現されたデータを扱う、コンピュータ科学における 代数的な演算の体系 関係代数：和、差、交わり (交差) 、直積、制限 (選択) 、射影、結合、商の8種類が言及されることが多い。 （ただし属性名変更や拡張、要約などこの他の演算子も考案されている。） 関係論理：関係代数と等価。関係代数で表現された式は、等価な関係論理の式で表現することができる。 関係代数の演算子は、 閉包性(closure) をもつ。関係において閉包である。つまり次のことがいえる。 関係代数は、1つもしくは複数の関係を基にして演算を行う。 関係代数で演算を行って返される結果は、必ず関係である。 関係代数演算の結果として返された関係を基にして、さらに関係代数で演算することができる。入れ子になった関係代数演算を行うことができる。 関係代数を実装した データベース言語 としては、SQLが挙げられる。 述語論理 述語論理(predicate logic) とは、数理論理学における記号的形式体系群を指す用語で、 一階述語論理 、二階述語論理、多ソート論理、無限論理などが含まれる。 これらの形式体系は 命題論理(propositional logic) を拡張したものであり、論理式に含まれる変数を 量化 できるという特徴を持つ。 各アルファベットは 命題変数 を表す。これらは 原子式 である。 原始命題の真偽しか表すことができない。 結合子（または論理演算子）を表す記号は（一般的に） 「 \\(\\lnot, \\land, \\lor, \\rightarrow\\) 」 のみ。 一階述語論理(first-order predicate logic) とは、個体の 量化 のみを許す 述語論理(predicate logic) である。 全称量化記号(universal quantifier) \\(\\forall\\) や、 存在量化記号 (existential quantifier) \\(\\exist\\) を用いることができる。 オブジェクトの性質(property)や関係(relation)、オブジェクト間の関数(function)を命題として表現できる。 これにより、命題論理では導くことのできなかった 機械的な推論 が可能になる。 プロダクションシステム if-then 形式（「条件ー行動」）プロダクションルールを用い、プロダクションルールと外部から与えられた事実を元に、推論・問題解決を行うシステム。 外部世界や推論によって得られた事実を蓄積する場所を と呼ぶ。 プロダクションルールを蓄積しておく場所を と呼ぶ。 既知の事実とプロダクションルールから推論を行う機構を と呼ぶ。 フレーム 人工知能の大家、M.Minskyにより提唱された (1975年) 宣言的知識に関する知識表現 事柄を表すフレームは以下の３つの値からなる。 事柄の 名称 事柄の 属性 事柄の 属性の値 上位概念の持つ属性は、例外を指定しない限り、下位概念に継承される。 NoSQL 膨大、速い、多様というビッグデータに対応するために考え出された技術。 定義は明確化されていない。 様々なデータモデルがある キーバリュー型： キーと値の組み合わせ、それだけからなる。 テーブルとか関係性とか面倒なものは定義しない。 データが増えると縦に追加される。 カラム指向型 キーバリュー型に横方向のデータ追加も許す。 ドキュメント指向型 ドキュメント単位でデータを管理する。 グラフ型 データ間の関係も管理できる。 ノード、リレーションシップ、プロパティ ややこしい関係による検索もできる。 深層学習とその表現 深層方向 2層はパーセプトロン 3層以上はニューラルネットワーク 視神経を参考にした 各層から次の層へのコネクション 特徴抽出 ローカルなコネクション：階層構造表現とローカルなパタンの表現 DeepInsightの紹介： Issue.3: DeepInsight にまとめてある。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生命情報表現論","url":"https://iwasakishuto.github.io/University/3A/生命情報表現論-1.html","loc":"https://iwasakishuto.github.io/University/3A/生命情報表現論-1.html"},{"title":"レポート課題6(11/14出題)","text":"JsKUDjTGBhuBSSX+8YANUQ==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report6.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report6.html"},{"title":"確率と統計(2)確率分布の例","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 In [1]: import numpy as np import matplotlib.pyplot as plt from scipy import stats In [2]: seed = 0 N = 10000 講義概要 離散型確率分布の例 一様分布 ：さいころ投げ 二項分布 ：コイン投げ、復元抽出 超幾何分布 ：非復元抽出 ポアソン分布 ：二項分布の極限、ポアソン分布の少数の法則 連続型確率分布の例 正規分布 ：最も重要な連続型確率分布 ガンマ分布 ：様々な形状を表現可能 ベータ分布 ：様々な形状を表現可能 離散型の確率変数と確率関数 離散型(discrete type)確率変数 ：可算集合の中の値をとる確率変数 離散型の確率変数の確率分布＝ 「確率変数がそれぞれの値をとる確率」 $$P(X=x) = f(x)$$ ここで、$f(x)$ は 確率質量関数(probability mass function) と呼ばれるもので、以下の性質を満たす。 $$f(x)\\geq0,\\quad\\sum_xf(x) = 1$$ 積率母（モーメント）関数 は、以下で表される。 $$M_X(t) = \\mathbb{E}\\left[e&#94;{tX}\\right]$$ 一様分布 名前 値 確率質量関数 $$f(x) = \\frac{1}{N}\\text{ for $x=1,2,\\ldots,N$}$$ 平均 $$\\mathbb{E}(X) = \\frac{N+1}{2}$$ 分散 $$\\mathbb{V}(X) = \\frac{N&#94;2-1}{12}$$ In [3]: DiceEyes = np . arange ( 1 , 7 ) In [4]: plt . hist ( DiceEyes , bins = 6 , density = True , color = \"blue\" ) plt . ylim ( 0 , 1 ), plt . title ( \"Discrete Uniform Distribution\" ) plt . show () 二項分布 ベルヌーイ施行 に対して、実験が成功する回数 $X$ の確率分布 $x$ 回成功して $n-x$ 回失敗：$p&#94;x\\left(1-p\\right)&#94;{n-x}$ 順番を入れ替えた時の組み合わせの数：$_nC_x$ 名前 値 積率母（モーメント）関数 $$M_X(t) = \\left(pe&#94;t + (1-p)\\right)&#94;n$$ 確率質量関数 $$f(x) = _nC_xp&#94;x\\left(1-p\\right)&#94;{n-x}$$ 期待値 $$\\mathbb{E}(X) = np$$ 分散 $$\\mathbb{V}(X) = np(1-p)$$ In [5]: n = 10 In [6]: def plotBinomial ( p , n , N , ax = None , seed = None ): if ax == None : fig , ax = plt . subplots () counts = np . sum ( np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = ( n , N )) < p , axis = 0 ) ax . hist ( counts , density = True , color = \"blue\" ) ax . set_xlim ( 0 , n ), ax . set_ylim ( 0 , 1 ) ax . set_xlabel ( \"$x$\" , fontsize = 14 ), ax . set_ylabel ( \"Probability\" , fontsize = 14 ), ax . set_title ( f \"Binomial Distribution $p= { p } $\" , fontsize = 14 ), ax . grid () return ax In [7]: fig = plt . figure ( figsize = ( 14 , 4 )) for i , p in enumerate ([ 0.1 , 0.5 , 0.9 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) plotBinomial ( p , n , N , ax = ax , seed = seed ) plt . tight_layout () plt . show () 超幾何分布 $\\mathrm{A}$ が $M$ 個、$\\mathrm{B}$ が $N-M$ 個の合計 $N$ 個の玉が入っている袋から無作為に玉を $n$ 個取り出す。 非復元抽出(sampling without emplacement) したときに、$\\mathrm{A}$ が出てくる個数 $X$ の分布 確率の和や積率母関数などの統計量が 超幾何級数 によって表現されることが名前の由来。 名前 値 $X$ の最大値 $$\\min\\left\\{n,M\\right\\}$$ $X$ の最小値 $$\\max\\left\\{0,n-\\left(N-M\\right)\\right\\}$$ 確率質量関数 $$f(x) = \\frac{_MC_x\\times _{N-M}C_{n-x}}{_NC_n}$$ 期待値 $$\\mathbb{E}(X) = n\\frac{M}{N}$$ 分散 $$\\mathbb{V}(X) = n\\frac{M(N-M)}{N&#94;2}\\frac{N-n}{N-1}$$ In [8]: def plotHypergeometric ( n_tot , n_a , n , N , ax = None , seed = None ): if ax == None : fig , ax = plt . subplots () counts = np . asarray ([ np . count_nonzero ( np . random . choice ( n_tot , size = ( n ), replace = False ) < n_a ) for _ in range ( N )]) ax . hist ( counts , density = True , color = \"blue\" ) ax . set_xlim ( 0 , n ), ax . set_ylim ( 0 , 1 ) ax . set_xlabel ( \"$x$\" , fontsize = 14 ), ax . set_ylabel ( \"Probability\" , fontsize = 14 ), ax . set_title ( \"Hypergenometric Distribution \\n \" + f \"$N_A= { n_a } ,N_B= { n_tot - n_a } $\" , fontsize = 14 ), ax . grid () return ax In [9]: fig = plt . figure ( figsize = ( 14 , 4 )) for i , M in enumerate ([ 10 , 50 , 90 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plotHypergeometric ( n_tot = 100 , n_a = M , n = 10 , N = N , ax = ax , seed = seed ) plt . tight_layout () plt . show () ※ $N$ が十分に大きいとき、玉を袋に戻しても戻さなくても大して変わらない。 ポアソン分布 成功確率が低い事象を表現するのに長けている。 二項分布で、成功確率 $p$ が非常に小さい場合めったに成功しないが、いくら $p$ が小さくても、試行回数 $n$ が非常に大きい場合、ある程度の回数は成功する。 この時、例えば $p=0.00003,n=100000$ だった場合、期待値 $\\mathbb{E}(X) = np = 3$ となり、$x=3$ の生起確率はそれほど小さくはなさそう。 しかし、その確率の計算は非常に大変。 $$f(3) = _{100000}C_3\\left(0.00003\\right)&#94;3\\left(0.99997\\right)&#94;{99997}$$ そこで、 ポアソンの少数の法則(Poisson's law of small numbers) を用いる。$p=\\lambda/n$ に対して、 $$_nC_xp&#94;x\\left(1-p\\right)&#94;{n-x}\\longrightarrow\\frac{e&#94;{-\\lambda}\\lambda&#94;x}{x!}\\quad\\left(n\\rightarrow\\infty\\right)$$ In [10]: fig = plt . figure ( figsize = ( 14 , 4 )) for i , lam in enumerate ([ 1 , 10 , 25 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax . hist ( np . random . RandomState ( seed ) . poisson ( lam = lam , size = N * 100 ), density = True , color = \"blue\" ) ax . set_xlim ( 0 , 50 ), ax . set_ylim ( 0 , 1 ), ax . set_title ( f \"Poisson Distribution $\\lambda= { lam } $\" ), ax . grid () plt . tight_layout () plt . show () 【証明】 $$ \\begin{aligned} \\lim_{n\\rightarrow\\infty}&\\ _nC_x\\left(\\frac{\\lambda}{n}\\right)&#94;x\\left(1-\\frac{\\lambda}{n}\\right)&#94;{n-x}\\\\ &=\\lim_{n\\rightarrow\\infty}\\frac{n!}{x!\\left(n-x\\right)!}\\left(\\frac{\\lambda}{n}\\right)&#94;x\\left(1-\\frac{\\lambda}{n}\\right)&#94;{n-x}\\\\ &= \\frac{\\lambda&#94;x}{x!}\\lim_{n\\rightarrow\\infty}\\frac{n!}{\\left(n-x\\right)!n&#94;x}\\left(1-\\frac{\\lambda}{n}\\right)&#94;{n-x}\\\\ &=\\frac{\\lambda&#94;x}{x!}\\lim_{n\\rightarrow\\infty}\\left(\\frac{n}{n}\\times\\frac{n-1}{n}\\times\\cdots\\times\\frac{n-x+1}{n}\\right)\\left(1-\\frac{\\lambda}{n}\\right)&#94;{n}\\left(1-\\frac{\\lambda}{n}\\right)&#94;{-x}\\\\ &= \\frac{\\lambda&#94;x}{x!}\\cdot1\\cdot e&#94;{-\\lambda}\\cdot 1 \\quad\\left(\\because e=\\lim_{t\\rightarrow0}\\left(1+t\\right)&#94;{\\frac{1}{t}}\\right)\\\\ &= \\frac{e&#94;{-\\lambda}\\lambda&#94;x}{x!} \\end{aligned} $$ 名前 値 積率母関数 $$M_X(t) = \\mathbb{E}\\left[e&#94;{tX}\\right]=\\exp\\left\\{\\lambda\\left(e&#94;t-1\\right)\\right\\}$$ 確率質量関数 $$f(x) = \\frac{e&#94;{-\\lambda}\\lambda&#94;x}{x!}$$ 期待値 $$\\mathbb{E}(X) =\\lambda$$ 分散 $$\\mathbb{V}(X) = \\lambda$$ 連続型の確率変数と確率密度関数 連続型(continuous type)確率変数 ：連続値をとる確率変数 連続型の確率変数の確率分布＝ 「確率変数が $a$ 以上 $b$ 以下の値をとる確率」 $$P(a\\leq X\\leq b) = \\int_a&#94;b f(x)dx$$ ここで、$f(x)$ は 確率密度関数(probability mass function) と呼ばれるもので、以下の性質を満たす。 $$f(x)\\geq0,\\quad\\int f(x)dx = 1$$ ※ 連続型の確率変数がある値 $a$ をとる確率は、$0$ $$P(X=a) = \\int_a&#94;a f(x)dx = 0$$ 正規分布 名前 値 積率母関数 $$M_X(t) = \\mathbb{E}\\left[e&#94;{tX}\\right]=\\exp\\left(\\mu t + \\frac{\\sigma&#94;2t&#94;2}{2}\\right)$$ 確率密度関数 $$f(x) = \\frac{1}{\\sqrt{2\\pi\\sigma&#94;2}}\\exp\\left(-\\frac{(x-\\mu)&#94;2}{2\\sigma&#94;2}\\right)\\text{ for $x\\in(-\\infty,\\infty)$}$$ 期待値 $$\\mathbb{E}(X) =\\mu$$ 分散 $$\\mathbb{V}(X) = \\sigma&#94;2$$ In [11]: def NormalProb ( ax , mu , sigma ): \"\"\" Only [µ-3σ, µ+3σ] \"\"\" X = np . arange ( mu - 3.5 * sigma , mu + 3.5 * sigma , sigma / 50 ) Y = stats . norm . pdf ( X , mu , sigma ) ax . plot ( X , Y , color = \"red\" ) return ax In [12]: fig = plt . figure ( figsize = ( 14 , 4 )) for i , sigma in enumerate ([ 1 , 2 , 3 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = NormalProb ( ax , 0 , sigma ) ax . set_xlim ( - 8 , 8 ), ax . set_ylim ( 0 , 0.5 ), ax . set_title ( f \"Normal Distribution $\\sigma= { sigma } $\" ), ax . grid () plt . tight_layout () plt . show () 2次元正規分布 各要素が独立に標準正規分布に従う $\\mathbf{Z}$ を以下用いて $\\mathbf{W} = \\mathbf{TZ} + \\boldsymbol{\\mu}$ と変換する。 $2\\times2$ 正則行列 $T$ 2次元ベクトル $\\boldsymbol{\\mu}$ $$ \\begin{aligned} l(\\mathbf{w}) \\propto f(\\mathbf{z}) &= f\\left(\\mathbf{T}&#94;{-1}\\left(\\mathbf{w}-\\boldsymbol{\\mu}\\right)\\right)\\\\ &= \\frac{1}{2\\pi}\\exp\\left(-\\frac{1}{2}\\left(\\mathbf{w}-\\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{w}-\\boldsymbol{\\mu}\\right)\\right)\\\\ \\therefore l(\\mathbf{w}) &= \\frac{1}{2\\pi|\\boldsymbol{\\Sigma}|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(\\mathbf{w}-\\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{w}-\\boldsymbol{\\mu}\\right)\\right) \\end{aligned} $$ ガンマ分布 名前 値 積率母関数 $$M_X(t) = \\mathbb{E}\\left[e&#94;{tX}\\right]=\\left(\\frac{\\lambda}{\\lambda-t}\\right)&#94;{\\alpha}$$ 確率密度関数 $$f(x) = \\begin{cases}\\begin{aligned}&\\frac{\\lambda&#94;{\\alpha}}{\\Gamma(\\alpha)}x&#94;{\\alpha-1}e&#94;{-\\lambda x} & (0\\leq x)\\\\&0 & (0>x)\\end{aligned}\\end{cases}$$ 期待値 $$\\mathbb{E}(X) =\\alpha/\\lambda$$ 分散 $$\\mathbb{V}(X) = \\alpha/\\lambda&#94;2$$ なお、ガンマ関数は以下の性質を持つ。 $$ \\begin{aligned} \\Gamma(\\alpha) &= \\int_{0}&#94;{\\infty}x&#94;{\\alpha-1}e&#94;{-x}dx > 0\\\\ \\Gamma(\\alpha) &= (\\alpha-1)! \\end{aligned} $$ In [13]: fig = plt . figure ( figsize = ( 14 , 4 )) x = np . linspace ( 0 , 8 , N ) for i , alpha in enumerate ([ 1 , 2 , 3 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax . plot ( x , stats . gamma . pdf ( x , a = alpha ), color = \"red\" ) ax . set_xlim ( 0 , 8 ), ax . set_ylim ( 0 , 0.5 ), ax . set_title ( \"Gamma Distribution \\n \" + f \"$\\lambda=1, alpha= { alpha } $\" , fontsize = 14 ), ax . grid () plt . tight_layout () plt . show () 指数分布 $\\alpha=1$ のガンマ分布に対応 $$f(x) = \\begin{cases}\\begin{aligned} &\\frac{\\lambda&#94;{\\alpha}}{\\Gamma(\\alpha)}x&#94;{\\alpha-1}e&#94;{-\\lambda x} & (0\\leq x)\\\\ &0 & (0>x) \\end{aligned}\\end{cases}$$ 単位時間に平均 $\\lambda$ 回起こる事象が初めて起こるまでの時間 $X$ の分布 （ポアソン分布：単位時間に平均 $\\lambda$ 回起こる事象が単位時間中に起こる回数 $Y$ の分布） カイ二乗分布 確率変数 $X_i$ が独立に標準正規分布 $\\mathcal{N}(0,1)$ に従うとき、 $$\\chi&#94;2 = \\sum_{i=1}&#94;nX_i&#94;2$$ はガンマ分布 $\\mathrm{Ga}(n/2,1/2)$ に従う。 このガンマ分布 $\\mathrm{Ga}(n/2,1/2)$ を特に、 自由度 $n$ の $\\chi&#94;2$ 分布(chi-squared distribution) と呼ぶ。 $$f(x) = \\begin{cases}\\begin{aligned} &\\frac{\\left(\\frac{1}{2}\\right)&#94;{\\frac{n}{2}}}{\\Gamma\\left(\\frac{n}{2}\\right)}x&#94;{\\frac{n}{2}-1}e&#94;{-\\frac{1}{2}x} & (0\\leq x)\\\\ &0 & (0>x) \\end{aligned}\\end{cases}$$ ベータ分布 名前 値 確率密度関数 $$f(x) = \\begin{cases}\\begin{aligned}&\\frac{x&#94;{\\alpha-1}\\left(1-x\\right)&#94;{\\beta-1}}{B(\\alpha,\\beta)} & (1>x>0)\\\\&0 & (\\text{otherwise.})\\end{aligned}\\end{cases}$$ 期待値 $$\\mathbb{E}(X) =\\frac{\\alpha}{\\alpha+\\beta}$$ 分散 $$\\mathbb{V}(X) = \\frac{\\alpha\\beta}{\\left(\\alpha+\\beta\\right)&#94;2\\left(\\alpha+\\beta+1\\right)}$$ なお、 ベータ関数 $B(\\alpha,\\beta)$ は以下で表される。 $$B(\\alpha,\\beta) = \\int_0&#94;1x&#94;{\\alpha-1}(1-x)&#94;{\\beta-1}dx = \\frac{\\Gamma(\\alpha)\\Gamma(\\beta)}{\\Gamma(\\alpha+\\beta)}$$ In [14]: fig = plt . figure ( figsize = ( 14 , 12 )) x = np . linspace ( 0 , 1 , N ) for i , alpha in enumerate ([ 0.5 , 1 , 3 , 5 ]): for j , beta in enumerate ([ 0.5 , 1 , 3 , 5 ]): ax = fig . add_subplot ( 4 , 4 , i * 4 + j + 1 ) ax . plot ( x , stats . beta . pdf ( x , alpha , beta ), color = \"red\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( 0 , 3 ), ax . set_title ( \"Beta Distribution \\n \" + f \"$alpha= { alpha } , beta= { beta } $\" , fontsize = 14 ), ax . grid () plt . tight_layout () plt . show () $\\alpha=\\beta=1$ のとき、特に 連続一様分布(uniform distribution of continuous type) と呼び、$U(0,1)$ で表す。 $n$ 個の標本 $X_1,X_2,\\ldots,X_n$ があるとき、それらのうち $k$ 番目に小さい標本を 「第 $k$ 順序統計量」 と呼ぶ。 最小値：第 $1$ 順序統計量 最大値：第 $n$ 順序統計量 中央値：第 $(n+1)/2$ 順序統計量 $X_i$ がそれぞれ独立に $[0,1]$ 上の一様分布に従うとき、その第 $k$ 順序統計量は「ベータ分布 $Be\\left(k,n-k+1\\right)$」に従う。 まとめ 離散型確率分布の例 一様分布 ：さいころ投げ 二項分布 ：コイン投げ、復元抽出 超幾何分布 ：非復元抽出 ポアソン分布 ：二項分布の極限、ポアソン分布の少数の法則 連続型確率分布の例 正規分布 ：最も重要な連続型確率分布 ガンマ分布 ：様々な形状を表現可能 ベータ分布 ：様々な形状を表現可能 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-6.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-6.html"},{"title":"分子生命科学Ⅲ 第7回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 運動系(1) ¬運動系(motor system)¬は、約700個全ての筋とそれらを支配するニューロンによって構成されている。 脊髄による運動制御 \"Running around like a chicken with its head cut off\" という表現があるように、複雑な行動パターンが脳の関与なしでも引き起こされることは観察されている。 脊髄の中にはかなりの数の神経回路網があり、（特に歩行に関連した反復的な） 行動の制御 を行なっていることから、現代の見解では、 「脊髄には調和の取れた運動の発生を行う@運動プログラム(motor program)@があり、この@運動プログラム(motor program)@が脳から下行する命令によって呼び起こされ、実行され、そして修正される」 というものである。このように運動制御は、 脊髄による筋の収縮命令と個々の筋収縮を調和のとれたものにする制御機構 脳による脊髄内の@運動プログラム(motor program)@への命令と制御機構 の2つに分けることができる。 筋の種類 @横紋筋(striated muscle)@：収縮性の筋原線維の反復構造（サルコメア）を持ち、 横紋 と呼ばれる縞模様が観察される。 @骨格筋(skeletal muscle)@： 身体の大部分の筋を構成し、関節の周囲の骨や後頭部にある眼球を動かす。 体性運動神経に支配され、運動や姿勢の保持に働く。 体幹の運動を担う筋であり、姿勢の維持に重要である@体幹筋(axial muscle)@・肩や肘、骨盤、膝を動かす筋であり、歩行運動に重要である@近位筋(proximal muscle)@ / @肢帯筋(girdle muscle)@・手首や足首から先、そして手足の指を動かす筋であり、物を巧みに取り扱うのに重要となる@遠位筋(distal muscle)@など、様々な種類がある。 @心筋(cardiac muscle)@： 心臓の筋で神経支配がなくても律動的に収縮している。 自律神経系により心拍の上昇や低下をもたらす。 @平滑筋(smooth muscle)@： 筋原線維に横紋を持たない@平滑筋(smooth muscle)@細胞からなる。 消化管や動脈壁にあり、自律神経系の神経支配を受けている。 蠕動 （ぜんどう） 運動（腸管内の物の移動）や血圧の調節等に関与している。 下位運動ニューロン 体性筋（@骨格筋(skeletal muscle)@）線維は、脊髄の前角にある体性運動ニューロンにより、支配されている。このニューロンは、¬「下位運動ニューロン(lower motor neuron)」¬と呼ばれ、脊髄へ信号を送る脳の高次の¬「上位運動ニューロン(upper motor neuron)」¬と区別されている。 上位運動ニューロン(upper motor neuron)は、 グルタミン酸作動性 で、単シナプス性もしくは介在ニューロンを介して多シナプス性にグルタミン酸作動性である。 下位運動ニューロン(lower motor neuron)は、 コリン作動性 で、下位のみが筋収縮を引き起こす。 脊髄の下位運動ニューロンは2つに大別される。@α運動ニューロン(α-motor neuron)@と@γ運動ニューロン(γ-motor neuron)@である。@α運動ニューロン(α-motor neuron)@は、支配する筋を収縮させて、力を発生させる。 1個の@α運動ニューロン(α-motor neuron)@とそれに支配される全ての筋線維が集まって運動制御の単位を構成する。これを、@運動単位(motor unit)@と呼ぶ。また、単一の筋（ex.上腕二頭筋）を支配する@α運動ニューロン(α-motor neuron)@の全体を@運動ニューロンプール(motor neuron pool)@ 運動する際、筋は適切な強さの力を出すことが重要である。神経系が筋の収縮力の制御を行うには、2つの方法がある。 個々の運動ニューロンの発火頻度による筋の収縮力の制御 協同作用を持つ運動単位数の増加による筋の収縮力の制御 @α運動ニューロン(α-motor neuron)@の単一の活動電位は筋線維に単収縮(twitch)を起こす。入力する活動電位の数と頻度に従い、単収縮は加重し、持続的な筋肉収縮(tetanus)になる。 活性化した@運動単位(motor unit)@の増加により新たに起こる筋張力の程度は、@運動単位(motor unit)@に含まれている筋線維の数（神経支配比）に依存する。多くの筋では、神経支配比の小さな運動単位（小さな@α運動ニューロン(α-motor neuron)@を持つ）から活性化が起こる¬（サイズの原理）¬。この機構により、軽い負荷の時の方が、重い負荷の時よりも細かい運動制御が可能である。 運動単位(motor unit)の種類 1つの筋は複数の筋線維によって構成されるが、1つの@運動単位(motor unit)@は一種類の筋線維によって構成される。 遅い@運動単位(motor unit)@（slow: S型）： 小型の@α運動ニューロン(α-motor neuron)@により支配される発生張力の小さい@運動単位(motor unit)@は赤色の筋線維（赤筋）で構成されている。赤筋は多くのミトコンドリアと酸化的エネルギー代謝を行う酵素を持ち（Ⅰ型：有酸素系、TCA回路）、収縮がゆっくりだが、疲労を伴わず長時間収縮が可能である。脚の抗重力筋など。 速い@運動単位(motor unit)@（fast fatigable: FF型）： 大型の@α運動ニューロン(α-motor neuron)@により支配される発生張力の大きい@運動単位(motor unit)@は白色の筋線維（白筋）で構成されている。白筋はミトコンドリアをわずかにしか持たず、無酸素的な代謝に依存している。（ⅡB型：無酸素系、解糖系）収縮が速く力が強いがすぐに疲れる。ヒトでは、腕の筋など。 速く疲れにくい@運動単位(motor unit)@（fast fatigue-resistant: FR型）： 上記の2つの筋の中間的な@運動単位(motor unit)@。大型の@α運動ニューロン(α-motor neuron)@により支配され、中間の発生張力を持つ白筋（ⅡA型：有酸素系+無酸素系）で構成されている。速い@運動単位(motor unit)@ほど速くないが、遅い@運動単位(motor unit)@の2倍の力を持ち、持久力も中間である。 興奮-収縮連関 @α運動ニューロン(α-motor neuron)@の軸索末端から@アセチルコリン(ACh)@が放出されることで筋収縮が始まるが、ニコチン性@アセチルコリン(ACh)@作動性受容体の活性化の結果として、シナプス後膜に大きな@興奮性シナプス後電位(excitatory postsynaptic potential;EPSP)@が引き起こされる。 筋細胞の細胞膜には電位依存性 \\(\\mathrm{Na}&#94;{+}\\) チャネルがあるため、この@興奮性シナプス後電位(excitatory postsynaptic potential;EPSP)@は筋線維に活動電位を発生させるのに十分である。発生した活動電位は筋線維内にある細胞小器官からの \\(\\mathrm{Ca}&#94;{2+}\\) 放出の引き金となり、放出された \\(\\mathrm{Ca}&#94;{2+}\\) は筋線維を収縮させる。また、 \\(\\mathrm{Ca}&#94;{2+}\\) の細胞小器官への取り込みにより \\(\\mathrm{Ca}&#94;{2+}\\) 濃度が低下すると、筋線維の弛緩が起こる。 筋線維（筋細胞）の構造 画像 説明 筋線維は胎生期の初期に、中胚葉由来の筋芽細胞の融合により形成される。融合の結果、筋細胞は@多核(multinucleated)@であり、細胞は長くなる（線維）。 筋線維は、@筋細胞膜(sarcolemma)@と呼ばれる興奮性膜で包まれている。 筋線維の中にある多くの円柱構造は@筋原線維(myofibril)@と呼ばれ、Ca2+を貯蔵する大きな細胞内の復路である@筋小胞体(sarcoplasmic reticulum)@に取り囲まれている。 @T菅(T tube, T;transverse)@（横行小管）により、活動電位は筋細胞膜から深部に伝わる。 なお、筋肉は収縮弛緩を繰り返すので、@筋細胞膜(sarcolemma)@は大きな力に耐えなければならない。そこで、筋細胞膜タンパク質は、 細胞内では@ジストロフィン(dystrophin)@を介してアクチンと 細胞外では細胞外マトリックスの@ラミニン(laminin)@と 結合している。これらはそれぞれ網状構造を作っており、この網状構造を細胞膜タンパク質@ジストログリカン(dystroglycan)@が固定している。その破綻は@筋ジストロフィー(muscular dystrophy)@などの疾患に繋がる。これは、筋肉が萎縮し、次第に筋力が低下していく病気である。最も頻度が高いのはX染色体上のdystrophin遺伝子の欠損によるDuchenne型である。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-7.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-7.html"},{"title":"3次元空間情報の取得と処理","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 大きく分けて2種類ある。 アクティブ法 ：光やレーザーなど、エネルギーを当てて反応を観測。 パッシブ法 ：カメラなど、エネルギーを放出しないもののみを使う。 アクティブ法 手法 説明 特徴 time-of-flight法(ToF) 光を照射して戻るまでの時間から算出。直接は計算できないので、変調をかけて位相差等から計算する。 （計算可能な範囲が指定されるのはこの為。） 高精度だが、時間がかかる。そのため、動物体に弱い。 XBox2(Microsoft)のKinect2というコントローラや自動運転用のLIDARなどで使われている。 スリット光照射法 線状のレーザー光等を照射し、線の歪みから計算する。（→ エポピーラ幾何学 p.312 を参照） Structured light 法 細かさの異なる市松模様（チェッカーボードパターン）や、パターンが既知のランダムドット等を照射し、位置ずれから計算 XBoxのKinectで使われていた。 パッシブ法 手法 説明 ステレオ法 複数のカメラを用いて、見え方の違いから奥行推定 平行ステレオ法 近くのものは大きくズレ、遠くのものはズレない。正確には 以下 照度差ステレオ法 複数の見え方があれば良いので、カメラを1台にして照明を変化させても良い。詳細は 以下 Shape-from-motion(SfM) 首里城プロジェクトや \"Building Roma in a Day\" などで使用されている。詳細は 以下 ) 平行ステレオ法 物体の3次位置：$(X,Y,Z)$ 2カメラの距離：$b$ それぞれのカメラで点 $(X,Y,Z)$ が見えている画素位置 $(u,v),(u&#94;{\\prime},v&#94;{\\prime})$ イメージセンサのピクセル間隔：$\\delta$（縦・横とも） カメラの焦点距離：$f$ 画像面と光軸の交点が画像座標原点 このとき、視差（$=u-v$）がわかると、奥行き情報 $Z$ がわかる。なお、視差は ブロックマッチング法 等で見つける。 照度差ステレオ法 最も簡単な反射モデル （均等拡散反射のみ。鏡面反射なし。） で行う。 $$\\text{Lambert model: }I_x\\left(\\text{Brightness}\\right)=\\rho L\\mathbf{n}\\cdot\\mathbf{S} = \\rho L \\cos\\theta$$ $\\rho, \\mathbf{S},L$ は予め知ることができる。 未知なのは、$\\mathbf{n} = \\left(n_x,n_y,n_z\\right)$ の3変数のみ。（$n_z = \\sqrt{1-\\left(n_x&#94;2+n_y&#94;2\\right)}$ とすると2変数） 2~3通りの位置から観測すると、$\\mathbf{n}$ がわかる。 通常は20~100の位置に照明をおき、最小2乗法で解く。 Shape-from-motion(SfM) 2枚の視点の異なる画像があるとする。 3次元中の点 $p$ がそれぞれの画像中で点 $(u.v),(u&#94;{\\prime},v&#94;{\\prime})$ で見えていたとする。 2つの視点間には回転 $\\mathbf{R}(3\\times3)$ と平行移動 $\\mathbf{t}(3\\times1)$ から成る行列で次の関係がある。 $$ \\left(u&#94;{\\prime},v&#94;{\\prime},1\\right)\\begin{pmatrix} f_{11} & & \\\\ & \\ddots & \\\\&&f;_{33} \\end{pmatrix}\\begin{pmatrix} u\\\\v\\\\1 \\end{pmatrix} = \\mathbf{0} $$ 逆に $\\mathbf{F}$ がわかれば2枚の画像の全てのピクセルで対応がとれているはず。対応点がわかっている点が9点以上あると、最小2乗法で解ける。 しかし、実は $\\mathbf{F}$ は規格化できるので、$8$ パラメータが決まれば残り $1$ つは自動的に決定できる。 （自由度 $8$, eight-point algorithmと呼ぶ。） 今は five-point algorithm まで進化。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-7.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-7.html"},{"title":"動画像処理","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt 動画像は、静止画の集まり（パラパラ漫画） 10~15[fps]あると、人は動画だと感じる。 映画：24[fps] TV、インターネット動画：30~60[fps] ロボット制御に必要な速度（アクチュエーターの反応速度が~ms）：1,000[fps] 自動運転 ~ 10,000[fps] 10[fps] 25[fps] 50[fps] Start Stop → 何をするか？ 動物体の検出・解析 動画の編集 動画の理解・認識 動物体の検出・解析 背景差分・フレーム間差分 【問題】 照明変化（屋外では良く起こる）、背景の変化（木の揺れ等）に弱い。 背景画像をどうやって作るかもポイント。 【統計的背景差分】 各ピクセルで時間的に統計情報を取ってもう少しsmartに背景差分することを考える。背景クラスを $w_b$ 前景クラスを $w_f$ とすると、やることは、$\\left(p\\left(w_f | I(x,y)\\right), p\\left(w_b | I(x,y)\\right)\\right)$ のうち確率の高いクラスを採用する。 ここで、ベイズの定理より、 $$ \\begin{cases} \\begin{aligned} p\\left(w_f | I(x,y)\\right) &= \\frac{p(w_f)p(I\\left(x,y)|w_f\\right)}{p(I(x,y))}\\propto p(w_f)p\\left(I(x,y)|w_f\\right)\\\\ p\\left(w_b | I(x,y)\\right) &= \\frac{p(w_b)p(I\\left(x,y)|w_b\\right)}{p(I(x,y))}\\propto p(w_b)p\\left(I(x,y)|w_b\\right) \\end{aligned} \\end{cases} $$ $p(w_b, w_f)$：その画素が $w_b, w_f$ である事前確率（例：木の上に人や車はいないので、$p_b$ 大, $p_f$：小） $p(I|w_c)$：$w_c$ だった時に、どの程度の確率でその画素値が観測されるか。 動き量の計算 【ブロックマッチング(Block Matching)】 ある時刻 $t$ におけるある領域に最も似ている時刻 $t+1$ の領域を、以下の手法等を用いて探す。 SSD(Sum of Squared Difference) SAD(Sum of Absolute Difference) NCC(Normalized Cross Correlation) 動画像圧縮では、この動きベクトル(motion vector)と差分を符号化することで圧縮を実現。 【オプティカルフロー(optical flow)】 2枚の画像間で、変化が微小だとすると、 $$\\begin{aligned}I(x+\\Delta x, y+\\Delta y, t+\\Delta t) &\\simeq I(x,y,t) + \\frac{\\partial I}{\\partial x}\\Delta x + \\frac{\\partial I}{\\partial y} \\Delta y+ \\frac{\\partial I}{\\partial t} \\Delta t + \\cdots\\\\\\rightarrow I_x\\Delta x + I_y\\Delta y + I_t\\Delta t&\\simeq0\\\\ I_x\\frac{\\Delta x}{\\Delta t} + I_y\\frac{\\Delta y}{\\Delta t} + I_t &= 0\\\\\\left(\\Delta t\\rightarrow0\\right)\\qquad I_xu+I_yv+I &= 0\\\\(u,v) &= \\left(\\frac{dx}{dt},\\frac{dy}{dt}\\right)\\end{aligned}$$ これだけだと、自由度が高すぎて一意に決まらないので、微小領域では動きが滑らかという仮定を置く。（Lucas-Kanada法, 1981） $$\\mathbf{G} = \\left[\\begin{array}{c}I_{x_1} &I;_{y_1} \\\\\\vdots&\\vdots\\\\I_{x_m}&I;_{y_m}\\end{array}\\right],\\quad \\mathbf{f} = \\left[\\begin{array}{c}u \\\\v\\end{array}\\right],\\quad\\mathbf{b} = \\left[\\begin{array}{c}I_{t_1} \\\\\\vdots\\\\I_{t_m}\\end{array}\\right]$$ 上記のように定義し、滑らかさの条件を使うと、 $$\\begin{aligned}\\mathbf{Gf}+\\mathbf{b} &= \\mathbf{0}\\\\\\therefore\\mathbf{f}&#94;{\\ast}&=-\\left(\\mathbf{G}&#94;T\\mathbf{G}\\right)&#94;{-1}\\mathbf{G}&#94;T\\mathbf{b}\\quad \\left(\\because\\text{Least squares}\\right)\\end{aligned}$$ 【DNNによる映像処理】 (x,y,t)の3次元をどう扱うか？ 画像（2次元）と時間の情報を分ける。 3D Convolution：空間情報と時間情報を同時に畳み込む。 仮想3D Convolution：空間情報を畳み込んで、その後時間方向に畳み込む。 動画の編集 In [ ]: 動画の理解・認識 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-6.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-6.html"},{"title":"4.Guided NEST exercises (intermediate)","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Thomas Burns Lecture Material https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-4_Plasticity-and-Learning Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial4.py In [1]: import sys sys . path . append ( \"path/to/library/\" ) Part 1: STDP and its varities Part-2:-Unsupervised-pattern-detection-using-STDP Make a training data NEST-simulation Part 1: STDP and its varities STDP alters the weights of synapses depending on the relative spike timing between the postsynaptic neuron and the presynaptic neuron. _STDP overview (from Sjöström J, Gerstner W (2010) Spike-timing dependent plasticity. Scholarpedia )_ Within some time windows: if \"PRE before POST\" , we get Long-Term Potentiation (LTP) if \"POST before PRE\" , we get Long-Term Depression (LTD) The time windows for LTP and LTD are generally on the order of tens of milliseconds . The LTD window is generally longer than the LTP window. Implementation To implement STDP in spiking neural network models, different STDP rules can be used. In general, different rules result in different distributions of synaptic weights over the course of learning. Examples of such weight distributions are shown below. STDP rules (from Gilson M, Fukai T (2011) Stability versus Neuronal Specialization for STDP. PLoS ONE ) Additive STDP tends to produce competition between synapses but needs to have its weights bound to ensure network stability (e.g. to avoid over-excitation) Multiplicative STDP tends to produce less competition between synapses but owing to its weight-dependent manipulation of synaptic weights does not require artificial bounds. Logorithmic STDP attempts to reconcile the two. Additive STDP rule In the following exercise, we will use the additive STDP rule , sometimes also called the exponential STDP rule : $$ \\Delta w_j= \\begin{cases} a&#94;+ \\cdot e&#94;{\\big( \\dfrac{t_j-t_i}{\\tau&#94;+} \\big)} & \\text{if}\\ t_j \\leq t_i & \\text{(LTP)} \\\\ -a&#94;- \\cdot e&#94;{\\big( - \\dfrac{t_j-t_i}{\\tau&#94;-} \\big)} & \\text{if}\\ t_j > t_i & \\text{(LTD)} \\end{cases} $$ variable Meaning $a&#94;+$ learning rate for LTP $a&#94;-$ learning rate for LTD $t_j$ spike time of the presynaptic neuron $j$ $t_i$ spike time of the postsynaptic neuron $i$ $\\tau&#94;+$ time constant for LTP (ms) $\\tau&#94;-$ time constant for LTD (ms) Using pre-defined paramaters which we will use in the second part of this tutorial , let's plot **\"how the this STDP rule changes weights depending on the timing of presynaptic and postsynaptic spikes.\"** In [2]: import numpy as np import matplotlib.pyplot as plt In [3]: from OIST.tutorial4 import AddSTDP In [4]: add_STDP_paramaters = { 'a_LTP' : 0.03125 , 'a_LTD' : 0.85 * 0.03125 , 'tau_LTP' : 16.8 , 'tau_LTD' : 33.7 } In [5]: model = AddSTDP () model . load_params ( ** add_STDP_paramaters ) In [6]: time_differences = np . linspace ( - 125 , 125 , 1000 ) In [7]: model . simulate ( time_differences ) Exercise 1 What features do you notice in this STDP curve? Experiment with different values in add_STDP_paramaters . How do each of the values change the shape of the STDP curve? How, in a network of neurons, could this STDP rule lead to over-excitation or network instability? The closer the spike timing between the postsynaptic neuron and the presynaptic neuron are, the bigger the influence is. If a becomes larger, the STDP curve expand in the y-axis direction , and if tau becomes larger, the STDP curve shrink in the x-axis direction . When the time difference gets ver close to 0, weight changes will diverge and lead to over-excitation or network instability. Part 2: Unsupervised pattern-detection using STDP In this part of the tutorial we will be replicating the results from [Masquelier et al. (2008) Spike Timing Dependent Plasticity Finds the Start of Repeating Patterns in Continuous Spike Trains. PLoS ONE](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0001377) . (In fact, we already reproduced Figure 2 from their paper in the first part of this tutorial.) Masquelier et al. (2008) create a spiking neural network with 2,000 presynaptic neurons just one postsynpatic neuron. They implement additative STDP in this network, which allows the \"postsynaptic neuron\" to learn to detect the beginning of repeating patterns of spiking activity arriving from the 2,000 presynaptic neurons. Importantly, the presynaptic neurons also have periods of random , non-patterned activity and have additional noisy spiking activity at all times. Let's begin by constructing the spike trains of the 2,000 presynaptic neurons. We will run our simulations for 450s, so we will create 450s worth of spike trains for these neurons. The first step is construct random activity with the following properties: Each presynpatic neuron will emit spikes independently generated by a Poisson process with a variable instantaneous firing rate $r$ $r$ varies randomly beteen $0$ and $90$ Hz. The rate of change in $r$ is modified by $dr$ $dr$ starts at $0$ $dr$ is modified by $ds$, randomly picked from a uniform distribution over $[−360,+360]$ Hz/s. $dr$ is clipped to within $[-1800,1800]$ Hz/s we will also manually add some additional spikes to guarantee that \"in every 50ms time bin, each neuron spikes at least once\" Make a training data In [8]: from OIST.tutorial4 import PoissonProcessGenerator , plotPatternRaster In [9]: poisson_params = { \"min_span\" : 50 , # [ms] \"starting_Hz\" : 54 , # [Hz] \"min_r\" : 0 , # [Hz] \"max_r\" : 90 , # [Hz] \"min_ds\" : - 3.6e-1 , # [Hz/ms] \"max_ds\" : 3.6e-1 , # [Hz/ms] \"min_dr\" : - 1.8 , # [Hz/ms] \"max_dr\" : 1.8 , # [Hz/ms] \"segment_length\" : 50 , # [ms] Length of 1 Presynaptic spiking segment length. } In [10]: seed = 0 In [11]: num_presynaptic_neurons = 2000 # Number of the presynaptic neurons. simulation_length = 1000 # [ms] In [12]: poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) In [13]: spikes = poisson_generator . generate_spikes ( simulation_length , num_presynaptic_neurons , seed = seed ) Processing Time: 0.708[s] Now we will Divide the presynaptic spiking activity into segments of 50ms Select a random 50ms segment to be considered as the \"pattern\" Copy and paste this pattern across the raster plot in a certain proportion of segments. Add 10Hz Noises to all neurons at all times. Divide and Select \"Pattern\" In [14]: poisson_generator . select_segment ( seed = seed ) Spikes divided into 20 segments. 13-th segment was selected as a Pattern. In [15]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( spikes , ax = ax ) plt . tight_layout () plt . show () Copy and Paste this \"Pattern\" In [16]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [17]: pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) Number of spikes added: 250000.0 Spikes are saved as `self.pattern_repeated_spikes`. Add Poisson Noises In [18]: frequency = 10 # [Hz] In [19]: noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes are saved as `self.noise_added_spikes`. In [20]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) plt . tight_layout () plt . show () Firing Rates In [21]: from OIST.tutorial4 import plotFiringRates In [22]: fig = plt . figure ( figsize = ( 12 , 4 )) fig = plotFiringRates ( noise_added_spikes , fig = fig ) plt . show () Check the Repeated Position In [23]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) ax = plotPatternRaster ( output_identities , cmap = \"RdGy_r\" , ax = ax , alpha = 0.7 ) plt . tight_layout () plt . show () With these paramaters, we can embed a repeating pattern within some pseduo-random, spontaneous activity. However, learning takes time! And we have only been simulating 1s of activity. In this task, the authors reported they needed 13.5s of activity (or 700 pattern presentations) for the neuron to show signs of learning to recognise the pattern. Figure 4 from Masquelier et al. 2008: Overview of the 450 s simulation. Here we plotted the membrane potential as a function of simulation time, at the beginning, middle, and end of the simulation. Grey rectangles indicate pattern presentations. (a) At the beginning of the simulation the neuron is non-selective because the synaptic weights are all equal. It thus fires periodically, both inside and outside the pattern. (b) At t≈13.5 s, after about 70 pattern presentations and 700 discharges, selectivity to the pattern is emerging: gradually the neuron almost stops discharging outside the pattern (no false alarms), while it does discharge most of the time the pattern is present (high hit rate), here even twice (c) End of the simulation. The system has converged (by saturation). Postsynaptic spike latency is about 4 ms. Hit rate is 99.1% with no false alarms (estimated on the last 150 s). It is therefore necessary to use some pre-computed spontaneous activity prepared earlier, found in the file spont_100s_alt.npy . It contains 100s of pseduo-random, spontaneous activity for us to use in our simulations. Warning, it is a large file at ~1.6GB! $ wget --content-disposition https://www.dropbox.com/sh/p9ml6l402znbzmy/AAA2LP7W1bcvwSgYnmx9ahyga?dl = 0 & preview = spont_100s_alt.npy # Pattern1. Download pre-computed files. pre_spikes_wrepeats_100s = np . load ( \"path/to/spont_100s_alt.npy\" ) poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) poisson_generator . memorize ( pre_spikes_wrepeats_100s , repeated = False ) # Pattern2. Make by myself. simulation_length_100s = 100_000 num_presynaptic_neurons = 2_000 poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) pre_spikes_wrepeats_100s = poisson_generator . generate_spikes ( simulation_length_100s , num_presynaptic_neurons , seed = seed ) In [24]: # Pattern.1 pre_spikes_wrepeats_100s = np . load ( \"path/to/spont_100s_alt.npy\" ) poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) poisson_generator . memorize ( pre_spikes_wrepeats_100s , repeated = False ) [Before] simulation length: None Number of the presynaptic neurons: None Memorizing... [After] simulation length: 100000 Number of the presynaptic neurons: 2000 In [25]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [26]: # Repeat & Paste. poisson_generator . select_segment ( seed = seed ) pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes divided into 2000 segments. 685-th segment was selected as a Pattern. Number of spikes added: 25000000.0 Spikes are saved as `self.pattern_repeated_spikes`. Spikes are saved as `self.noise_added_spikes`. In [27]: repeated_idxes = np . any ( poisson_generator . repeated_position , axis = 1 ) In [28]: print ( f \"Pattern shape = { poisson_generator . pattern_spikes . shape } \" ) print ( f \"Poisson Process shape = { noise_added_spikes . shape } \" ) Pattern shape = (2000, 50) Poisson Process shape = (2000, 100000) Now we are ready to use these spike trains to train a postsynaptic neuron! ... or are we? Creating a model conceptually or mathematically is just the first step. Next we have to figure out how to simulate it computationally. NEST simulation In [29]: import nest NEST contains many STDP synapse rules. Which one should we use? We said earlier that we will use an additive/exponential STDP rule, however that is not the only parameter to consider. Another consideration is \"how to pair two continuous spikes trains\" such that we can apply STDP appropriately to all presynaptic spikes $j$ coming to the postsynaptic neuron $i$. A list of STDP models implemented in NEST can be found here: https://nest-simulator.readthedocs.io/en/latest/models/stdp.html The following models correspond to the below figure for pairing of spikes for STDP: stdp_nn_symm_synapse (panel A) stdp_nn_pre-centered_synapse (panel B) stdp_nn_restr_synapse (panel C) Figure 7 from Morrison et al. 2008 . Examples of nearest neighbor spike pairing schemes for a presynaptic neuron j and a postsynaptic neuron i. In each case, the dark gray indicate which pairings contribute toward depression of a synapse, and light gray indicate which pairings contribute toward potentiation. Symmetric interpretation : each presynaptic spike is paired with the last postsynaptic spike, and each postsynaptic spike is paired with the last presynaptic spike (Morrison et al. 2007). Presynaptic centered interpretation : each presynaptic spike is paired with the last postsynaptic spike and the next postsynaptic spike (Izhikevich and Desai 2003; Burkitt et al. 2004: Model II). Reduced symmetric interpretation : as in c but only for immediate pairings (Burkitt et al. 2004: Model IV, also implemented in hardware by Schemmel et al. 2006) [Masquelier et al. (2008)](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0001377) uses something akin to panel C In the (unreleased) NEST 3.0 there is a stdp_nn_restr_synapse model which is quite similar. (However, we are using NEST 2.X. now.) After going through the available STDP models, none appeared to be capable of replicating the paper due to this paper requiring a particular spike-pairing method which doesn't seem to be represented in any of the currently-implemented STDP models in NEST. Therefore, we need to make some changes to our experiment! But before we do that, let's simulate the current model using some different synapses which are available to us. Start with the static synapse and then experiment with some STDP synapse models to see what goes wrong and \"how different paramaters affect the results.\" # Check what model we can use. nest . Models ( 'synapses' ) In [30]: from OIST.tutorial4 import NeuronalNetwork In [31]: simulation_times = 1000 In [32]: spike_indicies = [ np . where ( is_spike )[ 0 ] for is_spike in noise_added_spikes == 1 ] In [33]: STDP_paramaters = { 'a_LTP' : 0.03125 , 'a_LTD' : 0.85 * 0.03125 , 'tau_LTP' : 16.8 , 'tau_LTD' : 33.7 , } In [34]: model = NeuronalNetwork ( ** STDP_paramaters ) In [35]: model . build ( spike_indicies ) Created 2000 spike generators. Created 2000 parrot neurons. Created 1 post_neuron. Created spike detector. Created voltmeter. In [36]: model . compile ( synapse_model = \"static\" , ex = 1 ) Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: static_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [37]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [38]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [39]: model . compile ( synapse_model = \"standard\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [40]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [41]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [42]: model . compile ( synapse_model = \"triplet\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_triplet_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [43]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [44]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [45]: model . compile ( synapse_model = \"FACETS\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_facetshw_synapse_hom Connected post neuron to spike detector Connected voltmeter to post neuron In [46]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [47]: ax = model . plotWeights ( repeated_idxes ) plt . show () Couldn't recognize the patterns. Exercise 2 What are some general problems with the STDP synapses? How do these synapse models cause failure of our model to replicate the original paper? What can we do to the task or the model which might help? In [48]: model = NeuronalNetwork ( ** STDP_paramaters ) model . build ( spike_indicies ) Created 2000 spike generators. Created 2000 parrot neurons. Created 1 post_neuron. Created spike detector. Created voltmeter. In [49]: gaussian_params = { \"simulation_length_pulses\" : 10000.0 , \"proportion_of_neurons_pulsing\" : 0.5 , \"number_of_pulses\" : 50 , \"spikes_per_pulse\" : 5 , \"std_spikes_per_pulse\" : 5.0 } In [50]: # Overwrite the spike generator. noise_rate = 35.0 # firing rate of Poisson neurons (Hz) model . spike_generator = nest . Create ( \"poisson_generator\" , model . num_presynaptic_neurons , params = { 'rate' : noise_rate }) In [51]: # Add the gaussian Packets as an additional input. model . addGaussianPackets ( ** gaussian_params ) In [52]: model . compile ( synapse_model = \"standard\" , ex = 2 ) Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [53]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [54]: ax = model . plotWeights ( repeated_idxes ) plt . show () Difficult to find a best parameter :( → How about using Bayesian optimization ?? 【Challenge Exercise】 Consider whether and how your network could learn multiple patterns, e.g. would you need to add more post-synaptic neurons to the network? Hint: see [Masquelier et al. (2009) Competitive STDP-Based Spike Pattern Learning. Neural Computation](https://www.ncbi.nlm.nih.gov/pubmed/19718815) . In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-4.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-4.html"},{"title":"3.Guided NEST exercises (basic)","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Milena Menezes Carvalho Lecture Material https://github.com/oist-ncbc/skill-pill-plus/blob/master/Tutorial-3_Synapses-and-Networks Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial3.py In [1]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Synapses Neuronal connectivity Neurons are connected at specific sites called synapses . Usually, the axon of a presynaptic neuron will make contact with the dendrite (or soma ) of a postsynaptic in what's called a chemical synapse : neurotransmitters are transferred via the tiny gap between the two neurons ( synaptic cleft ) thanks to biochemical processes. This generates a change in membrane potential at the postsynaptic site, called postsynaptic potential . Electrical synapses , also known as gap junctions , can also be present -- in this case, specialized proteins make a direct electrical connection between neurons. [1] from [2] In this tutorial we will connect two or more neurons in NEST to create our first neuronal networks. First, we will learn the basic commands following [3] and [4] Then apply these to a well-known balanced network known as the Brunel network . By the end of this tutorial, you should be able to understand that a network's stability and activity behavior is deeply influenced by its parametrization. Sources: [1] Wulfram Gerstner and Werner M. Kistler, \"Spiking Neuron Models\". Cambridge University Press, 2002 [2] Peter Dayan and L. F. Abbot, \"Theoretical Neuroscience: Computational and Mathematical Modeling of Neural Systems\". The MIT Press, 2001 [3] PyNEST tutorial: Part 2, Populations of Neurons [4] PyNEST tutorial: Part 3, Connecting Networks with Synapses Synapse types The simplest synapse type is the static_synapse . The synaptic weight , a measure of how strong is the influence of the presynaptic neuron on the postsynaptic neuron, is static , i.e. does not change over time. The synaptic transmission, however , is not instantaneous. The synaptic delay is defined as the \"time\" between the presynaptic neuron activation ( action potential ) and the moment the postsynaptic potential is generated. In NEST, we can check the default values for all parameters using the GetDefaults function: nest.GetDefaults('static_synapse') The common model which is more suit to real biological event is spike-time dependent plasticity . The synaptic weight changes according to the temporal order between pre and postsynaptic spike times. In NEST, the most common STDP mechanisms are implemented in stdp_synapse . The change for normalized synaptic weights is described by $$ \\begin{aligned} \\Delta w &= \\begin{cases} \\lambda f {-}(w) \\times K -(\\Delta t) & \\text{if $\\Delta t \\leq 0$,} \\ \\lambda f {+}(w) \\times K +(\\Delta t) & \\text{if $\\Delta t > 0$,} \\end{cases}\\ \\Delta t &\\equiv t {post} - t {pre}\\ K {(+,-)}(\\Delta t) &= \\exp(-|\\Delta t| / \\tau {(+,-)}) \\end{aligned} $$ The update functions $$f_{+}(w) = (1-w)&#94;{\\mu_{+}} \\text{ and } f_{-}(w) = \\alpha w&#94;{\\mu_{-}}$$ create synaptic potentiation (stronger weights) when causal spiking is detected ($\\Delta t > 0$), otherwise generating synaptic depression (weaker weights). This rule is also known as temporally asymmetric Hebbian plasticity and has been thoroughly studied under different parametrizations. (below) STDP Type Parametrization Ref. multiplicative STDP $\\mu_{+}=\\mu_{-}=1.0$ [6] additive STDP $\\mu_{+}=\\mu_{-}=0.0$ [7] Guetig STDP $\\mu_{+}=\\mu_{-}=[0.0, 1.0]$ [5] van Rossum STDP $\\mu_{+}=0.0, \\mu_{-} = 1.0$ [8] Sources: [5] Guetig et al. (2003). Learning input correlations through nonlinear temporally asymmetric hebbian plasticity. Journal of Neuroscience, 23:3697-3714 DOI: https://doi.org/10.1523/JNEUROSCI.23-09-03697.2003 [6] Rubin J, Lee D, Sompolinsky H (2001). Equilibrium properties of temporally asymmetric Hebbian plasticity. Physical Review Letters, 86:364-367. DOI: https://doi.org/10.1103/PhysRevLett.86.364 [7] Song S, Miller KD, Abbott LF (2000). Competitive Hebbian learning through spike-timing-dependent synaptic plasticity. Nature Neuroscience 3(9):919-926. DOI: https://doi.org/10.1038/78829 [8] van Rossum MCW, Bi G-Q, Turrigiano GG (2000). Stable Hebbian learning from spike timing-dependent plasticity. Journal of Neuroscience, 20(23):8812-8821. DOI: https://doi.org/10.1523/JNEUROSCI.20-23-08812.2000 Introduction: synapses in NEST Check the synapse types you can call Found in the following link: [9] NEST Docs: All synapse models Running the following command: import nest nest . Models ( 'synapses' ) For STDP synaptic models, the time constant of the depressing window of STDP ( tau_minus ) is exceptionally a parameter of the post-synaptic neuron. nest . Create ( \"iaf_psc_alpha\" , params = { \"tau_minus\" : 30.0 }) However, tau_plus is a synapse parameter. nest . SetDefaults ( \"stdp_synapse\" ,{ \"tau_plus\" : 15.0 }) Customized variants of a synapse model can be created using CopyModel() , and can be used anywhere that a built-in model name can be used. nest . CopyModel ( \"stdp_synapse\" , \"layer1_stdp_synapse\" ,{ \"Wmax\" : 90.0 }) Connectivity rules for multiple neurons can be defined. Please check [3] to learn more details about creating and connecting neuron populations. Synaptic parameters can also be randomly distributed by assigning a dictionary to the parameter. This should contain the target distribution and its optional parameters, as listed below: Distributions Keys normal mu , sigma lognormal mu , sigma uniform low , high uniform_int low , high binomial n , p exponential lambda gamma order , scale poisson lambda Synapse information can be retrieved from its origin, target and synapse model using GetConnections() : Example. num_nurons = 10 epop1 = nest . Create ( \"iaf_psc_delta\" , num_nurons , params = { \"tau_m\" : 30.0 }) epop2 = nest . Create ( \"iaf_psc_delta\" , num_nurons ) conn_dict = { \"rule\" : \"fixed_indegree\" , \"indegree\" : 5 } syn_dict = { \"model\" : \"stdp_synapse\" , \"alpha\" : 1.0 } nest . Connect ( epop1 , epop2 , conn_dict , syn_dict ) neuron = nest . Create ( \"iaf_psc_alpha\" ) syn_dict = { \"model\" : \"stdp_synapse\" , \"alpha\" : { \"distribution\" : \"uniform\" , \"low\" : 0.1 , \"high\" : 2. }, \"weight\" : { \"distribution\" : \"uniform\" , \"low\" : 0.5 , \"high\" : 5. }, \"delay\" : 1.0 } nest . Connect ( epop1 , neuron , \"all_to_all\" , syn_dict ) # Synapse information can be retrieved print ( nest . GetConnections ( epop1 , target = epop2 , synapse_model = \"stdp_synapse\" )) # We can then extract the data using `GetStatus()`. # Specific information can be retrieved by providing a list of desired parameters. conns = nest . GetConnections ( epop1 , synapse_model = \"stdp_synapse\" ) conn_vals = nest . GetStatus ( conns , [ \"target\" , \"weight\" ]) Networks Example1: connecting two neurons In this example, we will create and connect two neurons, A and B. Neuron A is of type iaf_psc_delta : Receives external current $I_e = 376.0 pA$. This current is sufficient to elicit a spike every $\\approx$ 50ms. Neuron B is solely connected to neuron A: Can only spike if the input from A is strong enough. Let's observe how B can be influenced by A. In [2]: import nest import matplotlib.pyplot as plt In [3]: from OIST.tutorial3 import NeuronA , NeuronB , plotMultipleNeurons In [4]: # First, verify the activity of neuron A. nest . ResetKernel () modelA = NeuronA () modelA . build () In [5]: ax = plotMultipleNeurons ( modelA ) plt . show () Now let's create neuron B as iaf_psc_delta with no external current: In [6]: modelB = NeuronB () modelB . build () In [7]: ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Neuron B is still inactive. We need to connect both neurons: In [8]: nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) In [9]: ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Q. Suggest at least 3 alterations we can make in this example to elicit spiking activity from B. Lower the threshold V_th : nest.SetStatus(neuron_B,{'V_th': -69.}) # default: -55 Higher thr current I_e Highre the weights between nuron_A and nuron_B In [10]: # Lower the threshold V_th. nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , V_th =- 69. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () In [11]: # Higher the current I_e. nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , I_e = 350. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () In [12]: # Highre the weights between \"nuron_A\" and \"nuron_B\" nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 14.9 }) nest . Simulate ( 300. ) nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 15. }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Because of the shape of B, and scale of observation, we couldn't find the spikes but neuron B also spikes after connection weight increased. Q. Check what happens if the neuron model is different: for example, change `iaf_psc_delta` to `hh_psc_alpha`. In [13]: # Lower the threshold V_th. nest . ResetKernel () modelA = NeuronA ( model_name = \"hh_psc_alpha\" ) modelA . set_params ( \"neuron\" , I_e = 250. ) modelA . build () modelB = NeuronB ( model_name = \"hh_psc_alpha\" ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Q. connect B to A reciprocally and check their dynamics. How can you describe their behavior? In [14]: nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , V_th =- 65. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 5. }) nest . Connect ( modelB . neuron , modelA . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 1 }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Example2: Random Balanced Network We will now simulate a network of integrate-and-fire (IAF) , excitatory and inhibitory spiking neurons connected randomly with fixed weights . This network (called Brunel Network ) was proposed and studied in [10]: The network is composed of excitatory neurons (80%) inhibitory neurons (20%) connection probability $\\epsilon = 10\\%$ ( epsilon ). All neuron types can be connected (E$\\rightarrow$E, E$\\rightarrow$I, I$\\rightarrow$E and I$\\rightarrow$I). Neurons receive external input from oustide the network modeled by a Poisson spike train generator [11] rate nu_ex , $\\nu_{ex} = \\eta * \\nu_{th}$ threshold rate $\\nu_{th}$ ( nu_th ) is calculated using $$\\nu_{th} = \\frac{\\theta}{J * \\text{CE} * \\tau_{m}}$$ In general, the interspike intervals drawn are exponentially distributed. The synaptic input current on each neuron is calculated as $$I_i(t) = \\tau \\sum_j J_j \\sum_k \\delta(t-\\delta-t_j&#94;k)$$ Sum over $j$ covers all synapses (internal and external to the network) Sum over $k$ covers all spikes arriving at times $t&#94;k_j$ with delay $\\delta$ ( delta ). This simple postsynaptic current model is called delta synapse , in which stimulation is applied in a single point in time for simplicity using the Dirac delta function . In biological systems, synaptic models are diverse and can vary within the same neuron depending on the function of the synapse, for example. In NEST, we will create a network of iaf_psc_delta neurons connected using static_synapse with weights $J_E$ and $J_I = -g*J_E$. We will study how this network changes its behavior depending on its parametrization. Sources: [10] Brunel N (2000). Dynamics of sparsely connected networks of excitatory and inhibitory spiking neurons. Journal of Computational Neuroscience 8, 183-208. [11] Poisson distribution m In [15]: from OIST.tutorial3 import BrunelNetwork In [16]: model = BrunelNetwork () In [17]: # Model parameters. model . __dict__ Out[17]: {'g': 5.0, 'eta': 2.0, 'delay': 1.5, 'dt': 0.1, 'epsilon': 0.1} $$ \\begin{aligned} \\begin{cases} \\epsilon &= 10\\%\\\\ v_{ex} &= \\eta v_{th}\\\\ \\delta\\\\ J_I &= -gJ_E \\end{cases} \\end{aligned} $$ In [18]: neuron_params = { \"C_m\" : 1.0 , \"tau_m\" : 20.0 , \"t_ref\" : 2.0 , \"E_L\" : 0.0 , \"V_reset\" : 0.0 , \"V_m\" : 0.0 , \"V_th\" : 20.0 } In [19]: model . build ( N_total_neuron = 12500 , N_rec_volt = 5 , N_rec = 50 , J = 0.1 , ** neuron_params ) Number of neurons : 12500 Excitatory: 10000 Inhibitory: 2500 Number of synapses: 15625000 Excitatory: 12500000 Inhibitory: 3125000 Building time : 4.58 s In [20]: model . simulate ( T = 900. ) Simulation time : 900.0 ms Processing time : 56.00 s Completed. Please use following methods to plot results. - `plotVoltageEx(n)`, `plotVoltageIn(n)` - `plotVoltageCompare(idx=0)` - `plotRaster()` Below we plot the voltage, raster, and activity rate of the excitatory and inhibitory populations. In [21]: model . plotVoltageEx () \u001b Membrane potential plots [Excitatory Neurons] In [22]: model . plotVoltageIn () \u001b Membrane potential plots [Inhibitory Neurons] In [23]: model . plotVoltageCompare ( 0 ) \u001b Membrane potential Compaison. In [24]: model . plotRaster () \u001b Raster Plot.(N=50) One of the main findings in Brunel's paper is the different activity states that can be observed in this network depending on $g$: the ratio between inhibitory and excitatory synaptic weights $\\eta$: the external excitation rate relative to the threshold rate $\\delta$: the synaptic delay $\\epsilon$: the connection probability . By altering these arguments, he observed different collective behaviors identified as asynchronous irregular (AI) asynchronous regular (AR) synchronous irregular (SI) synchronous regular (SR). These behaviors are exemplified in the images below. from [1] Q. Use the graphs as a starting point. Try to elaborate on how each of the four parameters affects the state of this network. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-3.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-3.html"},{"title":"2.Introduction to NEST Simulator","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Gastón Sivori Lecture Material https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-2_NEST-Introduction Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial2.py In [1]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Agenda Installation leaky integrate-and-fire (LIF) HH-neuron model Connecting nodes with different inputs F-I curve Installation Documentation: https://nest-simulator.readthedocs.io/en/latest/installation/ Github: https://github.com/nest/nest-simulator/tree/v2.18.0 Memo(What I did) pip $ pip install python-nest ※ This `nest` has lack of some module (ex. `nest.Create`) cmake # Install dependencies via Homebrew $ brew install gcc cmake gsl open-mpi libtool $ mkdir NEST $ cd NEST # Clone source files from Github. $ wget --content-disposition https://github.com/nest/nest-simulat or/archive/v2.16.0.tar.gz $ tar zxf nest-simulator-2.16.0.tar.gz $ mkir bld $ cd bld # Configure and build NEST inside the build directory # (replacing gcc-9 and g++-9 with the GCC compiler versions you installed with brew). # You can check it with `g++ -v` or `gcc -v` command. $ cmake -DCMAKE_INSTALL_PREFIX:PATH = . \\ -DCMAKE_C_COMPILER = gcc-9 \\ -DCMAKE_CXX_COMPILER = g++-9 \\ ../nest-simulator-2.16.0/ $ make -j4 $ make install $ make installcheck ※ This `nest` also has lack of some module (ex. `nest.Create`) Anacond # If you want to use jupyter notebook, please include \"jupyter\" $ conda create --name skill-pill-plus -c conda-forge nest-simulator python jupyter # path/to/activate is like \"/Users/iwasakishuto/.pyenv/versions/anaconda3-5.0.1/bin/activate\" $ source [ path/to/activate ] skill-pill-plus # Activated!! ( skill-pill-plus ) $ If you want to use this environment on the jupyter notebook, please follow this. $ pip install environment_kernels $ jupyter notebook --generate-config $ vi ~/.jupyter/jupyter_notebook_config.py # Add these line >>> c.NotebookApp.kernel_spec_manager_class = 'environment_kernels.EnvironmentKernelSpecManager' >>> c.EnvironmentKernelSpecManager.conda_env_dirs =[ '/Users/iwasakishuto/.pyenv/versions/anaconda3-5.0.1/env' ] $ jupyter notebook # If successful, you can chose your ideal environment at [Kernel → Change kernel] # NOTE: You should install `jupyter` in the environment. # If you not, please run `conda install --name \"Your Environment Name\" jupyter` ※ This `nest` has all modules :) In [2]: import nest import numpy as np import matplotlib.pyplot as plt # If you need to import other packages like scipy or scikit-learn # You should import these \"before\" nest!! For NEST to simulate different experiments, its kernel (core functionality) needs to be reseted ( nest.ResetKernel() ) for every new simulation. Please remember to run this code before running each simulation. About NEST Conceptually, neural networks consists of neurons and connections . Nodes can be neurons , sub-networks or devices inside the NEST framework. We will use devices to stimulate neurons and to measure their membrane potential. Sub-networks , on the other hand, are arrangements of neurons whose parameters may be modified as a group. We will look at sub-networks in the following lectures. leaky integrate-and-fire (LIF) For now, we will focus on constructing a leaky integrate-and-fire (LIF) neuron with delta-shaped synaptic currents: In this figure, a delta-shaped pulse $\\delta(t-t_j&#94;f)$ from neuron $j$ is being transmitted along its axon until it reaches neuron $i$'s dendrites through a synapse. Synapses are modelled as low-pass RC circuit filters which output a current $\\alpha(t-t_j&#94;f)$. These presynaptic currents reach the soma as an input current $I(t)$ which charges the capacitor $C$ (integration) while some of it leaks out through the resistance $R$. ($I(t) = I_R + I_C$) The electrical components here represent a circuit modelization of the biological mechanisms happening at the synapse and the soma. In this model, the membrane's potential is represented by capacitor $C$ such that when it has enough charge and reaches the threshold potential $\\vartheta$, a spike $\\delta(t-t_i&#94;f)$ is generated and transmitted. In [3]: from OIST.tutorial2 import LIFmodel In [4]: model = LIFmodel ( model_name = \"iaf_psc_alpha\" ) Create LIF neuron with alpha-function shaped synaptic currents. Created a spike_generator. Created a voltmeter. Created a spike detector. In [5]: # Check the neuron params. model . neuron_params () C_m : 250.0 pF E_L : -70.0 mV I_e : 0.0 pA V_m : -70.0 mV V_reset: -70.0 mV V_th : -55.0 mV t_ref : 2.0 ms tau_m : 10.0 ms Q1. You might have noticed that there is no parameter for the membrane resistance `R_m` as shown in the previous figure. Do you know why? The membrane time constant tau_m corresponds to the membrane capacitance C_m and membrane resistance R_m as observed in the electrical circuit above. Therefore it's possible to calculate what is the R_m value given the following formula: $$ \\tau_m = C_m R_m $$ In [6]: # Retrieve a particular set of parameters model . neuron_params ( \"V_reset\" , \"V_th\" ) Out[6]: ((-70.0, -55.0),) In [7]: # Modify spike generation to values 10 and 50 ms print ( f \"Before: { model . spike_params ( 'spike_times' ) } \" ) model . set_params ( node = \"spike_generator\" , spike_times = [ 10. , 50. ]) print ( f \"After : { model . spike_params ( 'spike_times' ) } \" ) Before: ((array([], dtype=float64),),) After : ((array([10., 50.]),),) In [8]: # Connect the spike generator and the voltmeter to the neuron. model . build ( weight = 1e3 ) Connect spike generator with a given synaptic specification ({'weight': 1000.0}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. Simulate for 100 ms and observe the results In [9]: ax = model . simulate ( ms = 100 ) plt . show () Q2. What can we observe here? Are these neuron spikes? We can observe the membrane trace of the LIF neuron model excited with alpha-function shaped spikes at times 10 ms and 50 ms. The observed peaks in the membrane trace are not spikes since the membrane threshold V_th is -55mV. If we modify the external current or lower the membrane's threshold potential we should be able to observe spikes. In [10]: # Modifying the threshold model = LIFmodel ( model_name = \"iaf_psc_alpha\" , display = False ) model . set_params ( \"neuron\" , V_th =- 58. ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . build ( weight = 1e3 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () In [11]: # modifying external current to LIF neuron model = LIFmodel ( model_name = \"iaf_psc_alpha\" , display = False ) model . set_params ( \"neuron\" , I_e = 300. ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e3 , display = False ) model . simulate ( ms = 100 ) plt . show () In this neuron model, the membrane potential does not follow the biologically observed dynamics that neurons have. Their use is limited to understand and experiment with network dynamics and spiking activity :( HH-neuron model For comparison, let's observe the membrane potential of a HH-neuron model (Hodgkin and Huxley, 1952). This model was the \"conclusion of a series of papers\" concerned with the flow of electric current through the surface membrane of the giant nerve fibre in the squid. Using voltage-clamp experiments and by varying extracellular sodium and potassium concentrations, Hodgkin and Huxley developed a model in which the properties of an excitable cell are described by a set of ordinary differential equations. For simplicity, we will not focus on these equations. NEST's framework integrates these equations to obtain the instantaneous membrane potential. The following figure represents an electric circuit model of the neuron's membrane. The HH-model (Hodgkin and Huxley, 1952) considers the ionic channels present on the cellular membrane. These channels allows the conduction of specific types of ions. Sodium channels (Na+) are scarce inside the cell , so that when sodium channel opens, positive charges rush into the cell to cause excitation. Potassium ions (K+) are rich inside the cell , so that when potassium channel opens, positive charges rush out of the cell to cause inhibition. The model assumes a leak current composed of all other remaining ionic currents (Cl, Mg, etc.) This model is based on careful data analysis and follows the following equation : $$C_m \\frac{dV}{dt} = \\bar{g_{Na}}m&#94;3h(E_{Na}-V) + \\bar{g_K}n&#94;4(E_K-V) + g_{Leak}(E_{Leak}-V) + I$$ Where the conductances $g_{Na}$ and $g_{K}$ are: $$ g_{Na} = \\bar{g_{Na}}m&#94;3h $$$$ g_{K} = \\bar{g_K}n&#94;4 $$ Let's see these parameters in NEST by creating a hh_psc_alpha neuron. A HH-model neuron with delta-shaped synaptic currents. In [12]: from OIST.tutorial2 import HHmodel In [13]: model = HHmodel () Create Hodgkin-Huxley neuron with alpha-function shaped synaptic currents. Created a spike_generator. Created a voltmeter. Created a spike detector. In [14]: model . neuron_params () C_m : 100.0 pF E_K : -77.0 mV E_L : -54.402 mV E_Na : 50.0 mV g_K : 3600.0 nS g_L : 30.0 nS g_Na : 12000.0 nS I_e : 0.0 pA V_m : -65.0 mV t_ref: 2.0 ms In [15]: model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e3 ) Connect spike generator with a given synaptic specification ({'weight': 1000.0}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. In [16]: ax = model . simulate ( ms = 100 ) plt . show () Q3. Modify the previous example to observe spikes. In [17]: # modifying the synaptic strength (w) to observe spikes model = HHmodel ( display = False ) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e4 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () In [18]: print ( f \"Number of spikes: { model . spikes } \" ) Number of spikes: 2 Could you observe the spikes? Just after a spike, the membrane potential resets to -77 mV and a short refractory period of 2 ms (check these parameter value t_ref from the parameter list shown above!). During this period, the neuron is unable to react to excitation. Q4. Can you try exciting the neuron during this period to observe this phenomena? In [19]: # In the following example the spike generator generates spikes at times 10ms, 11ms, 50ms and 52ms. model = HHmodel ( display = False ) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 11.0 , 50. , 52.0 ]) # Add!! model . build ( weight = 1e4 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () The figure is the same as before due to the refractory period of the neuron. Connecting nodes with different inputs To compare neurons with different inputs, let's see how the parameters of the input affect the neurons' output. In the following example, we will use constant input current and belows with the same mean strength as the constant input current. a Poisson spike train The probability density function and firing rates of neurons will be shaped given by these inputs. First, let us define the parameters of the simulation and input currents. In [20]: T = 1.2e3 # simulation time nu_ext = 15e3 # firing rate of external Poisson source J = 0.08 # synaptic weight d = 0.1 # delay C = 250.0 # membrane potential capacitance mu = J * 1e-3 * nu_ext * C # mean input in pAa I_ext = mu # external current In [21]: neuron_params = { 'C_m' : C , # (pF) 'E_L' : 0. , # (mV) 'I_e' : 0.0 , # (pA) 'V_m' : 0. , # (mV) 'V_reset' : 0. , # (mV) 'V_th' : 15. , # (mV) 't_ref' : 2.0 , # (ms) 'tau_m' : 10.0 , # (ms) } In [22]: plot_infos = { \"color\" : [ \"blue\" , \"red\" ], \"label\" : [ \"constant input\" , \"Poisson input\" ] } Then, make two types of models and compare them. In [23]: from OIST.tutorial2 import mkMultiDetectors , plotMultResults In [24]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) Create LIF neuron with delta-shaped synaptic currents. Created a voltmeter. Created a spike detector. In [25]: poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d ) Create LIF neuron with delta-shaped synaptic currents. Created a poisson_generator. Created a voltmeter. Created a spike detector. Connect spike generator with a given synaptic specification ({'weight': 0.08, 'delay': 0.1}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. In [26]: neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) Created 2 multimeter to record membrane potential of the neurons. Created 2 spike detectors to record spikes times and neuron identifiers, but not record from file. In [27]: nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axR . legend (), axR . set_xlim ( 0 , T ) plt . show () What!? There are no spikes?! Well, look at the figures and consider the threshold potential value V_th . Let's try increasing the synaptic strengh J . The neuron receiving Poisson input will be in different firing rate regimes! In [28]: print ( f \"poisson_model.neuron_params('V_th') = { poisson_model . neuron_params ( 'V_th' )[ 0 ][ 0 ] } \" ) print ( f \"const_model.neuron_params('V_th') = { const_model . neuron_params ( 'V_th' )[ 0 ][ 0 ] } \" ) poisson_model.neuron_params('V_th') = 15.0 const_model.neuron_params('V_th') = 15.0 Q5. Try to make the neuron fire at an irregular regime. In [29]: T = 1.2e3 # nu_ext = 15e3 # J = 0.09 # From 0.08 to 0.09. d = 0.1 # C = 250.0 # mu = J * 1e-3 * nu_ext * C # I_ext = mu # In [30]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axR . legend (), axR . set_xlim ( 0 , T ) plt . show () Q6. Try to make the neuron spike at a regular regime. In [31]: T = 1.2e3 # nu_ext = 15e3 # J = 0.11 # From 0.08 to 0.11. d = 0.1 # C = 250.0 # mu = J * 1e-3 * nu_ext * C # I_ext = mu # In [32]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axL . legend (), axR . legend (), axR . set_xlim ( 0 , T ) plt . show () Since we are using the LIF neuron model with a membrane threshold potential V_th at 15mV , you will not be able to see proper spikes. Instead, you will only see the after-spike dynamics (membrane potential reset and refractory period). Q7. Try to make HH neuron models spike at a regular regime for both input conditions. In [33]: T = 500.0 # simulation time nu_ext = 15e3 # firing rate of external Poisson source J = 0.08 # synaptic weight d = 0.1 # delay C = 100.0 # membrane potential capacitance mu = J * 1e-3 * nu_ext * C # mean input in pAa I_ext = mu # external current In [34]: neuron_params = { 'g_K' : 3000.0 , 'g_Na' : 16000.0 , 'g_L' : 60.0 } In [35]: const_model = HHmodel ( model_name = \"hh_psc_alpha\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = HHmodel ( model_name = \"hh_psc_alpha\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , ** plot_infos ) axL . legend (), axR . legend (), axR . set_xlim ( 0 , T ), axR . set_ylim ( - 80 , 40 ) plt . show () Rate of neuron stimulated with constant input input: 56.112 Rate of neuron stimulated with Poisson input input: 48.096 F-I curve As you have seen in the past figures, the firing rate of the neuron can change given different external current I_e . It's possible to plot this relationship and its usually referred to as the F-I curve . In [36]: from OIST.tutorial2 import FiringRate In [37]: neuron_params = { 'C_m' : 250.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [38]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () As you can observe from this figure, given the parameter setup, the neuron in a leaky-integrate-and-fire model starts to fire spikes at around 370 pA of external input current I_e . For this particular case, V_th was chosen to be low to observe the trend of the firing rate as external current is increasing. Modifying the value of the capacitance C_m moves this curve in the x-axis Modifying the refractory period t_ref slows down the firing rate i.e. more current is required for a given firing rate. Q8. Observe these changes in the F-I curve by modifying the neuron model parameters. In [39]: neuron_params = { 'C_m' : 150.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [40]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () In [41]: neuron_params = { 'C_m' : 350.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [42]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () In [43]: neuron_params = { 'C_m' : 250.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 1.0 , 'tau_m' : 10.0 , } In [44]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () Q10. Repeat these simulations with the HH neuron model hh_psc_alpha by modifying channel conductances. In [45]: neuron_params = { 'g_K' : 3600.0 , 'g_Na' : 12000.0 , 'g_L' : 30.0 } In [46]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [47]: neuron_params = { 'g_K' : 3600.0 , 'g_Na' : 13000.0 , 'g_L' : 30.0 } In [48]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [49]: neuron_params = { 'g_K' : 3800.0 , 'g_Na' : 12000.0 , 'g_L' : 30.0 } In [50]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-2.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-2.html"},{"title":"1.Mathematical Models and Numerical Methods of Computational Neuroscience","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Alan Func Lecture Materials https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-1_Ordinary-Differential-Equations Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial1.py In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Agenda Brief introduction of Differential Equations Neuronal Models Numerical Method to Simulate Neuronal Models How the Network can be trained Brief introduction of Differential Equations Ordinary Differential Equations A fundamental tool in theoretical Science The differential equation gives the dependence of derivatives $$F\\left[\\frac{d&#94;nx(t)}{dt&#94;n},\\cdots,\\frac{dx(t)}{dt},C\\right] = 0$$ As we can calculate the whole path ways if we know the velocity($v=dx(t)/dt$), by knowing the slopes, one may trace the whole curve!! Examples of Models and Theories Simple Harmonic Oscillator Heat Equation(1-D) An oscillator that is neither driven nor damped. How the distribution of some quantity (such as heat) evolves over time in a solid medium $$\\underset{\\text{Acceleration}}{\\frac{d&#94;2x(t)}{dt&#94;2}}+\\underset{\\text{Returning Force}}{\\omega&#94;2x(t)} = 0$$ $$\\underset{\\text{Rate of Heat}}{\\frac{\\partial u(x,t)}{\\partial t}}+\\underset{\\text{Returning Force}}{\\alpha\\frac{\\partial&#94;2u(x,t)}{\\partial x&#94;2}} = 0$$ Implementation by Numerical Method Euler Method Runge-Kutta Methods Euler Method Euler method has a relatively large error. There are some extensions of the Euler method(one of them are Mid-Point method. ) In [3]: X = np . arange ( - 1.0 , 6.5 , 0.5 ) Y = 1 / 6 * X ** 3 dYdX = 1 / 2 * X ** 2 In [4]: Euler_dYdX_bigger = ( Y [ 2 :] - Y [: - 2 ])[ 2 :] # step size=1 dY/dX(t) = X(t+1)-X(t) Euler_dYdX_smaller = ( Y [ 1 :] - Y [: - 1 ])[ 2 : - 1 ] / 0.5 # step size=0.5 dY/dX(t) = (X(t+0.5)-X(t))/0.5 MidPointEuler_dYdX = ( Y [ 2 :] - Y [: - 2 ])[ 1 : - 1 ] # step size=1 dY/dX(t) = X(t+0.5)-X(t-0.5) In [5]: def CompareNumerical ( ax , X , Y , label , marker , color ): ax . scatter ( X [ 2 : - 2 ], Y , label = label , marker = marker , color = color ) ax . plot ( X [ 2 : - 2 ], Y , color = color , alpha = 0.5 ) return ax In [6]: fig , ax = plt . subplots () ax = CompareNumerical ( ax , X , Euler_dYdX_bigger , \"Step = 1.0\" , \"s\" , \"b\" ) ax = CompareNumerical ( ax , X , Euler_dYdX_smaller , \"Step = 0.5\" , \"o\" , \"r\" ) ax = CompareNumerical ( ax , X , MidPointEuler_dYdX , \"Mid-point h=1.0\" , \"&#94;\" , \"g\" ) ax . plot ( X [ 2 : - 2 ], dYdX [ 2 : - 2 ], linestyle = \"--\" , label = \"Analytic\" , color = \"black\" ) ax . legend (), ax . grid (), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$y$\" ) plt . show () The mid-point method is surprisingly good!! Runge-Kutta Methods A family of implicit and explicit iterative methods. More: Wikipedia Neuronal Models To Model a Neuron... Neurons can be excited by current injection . If the membrance potential(Voltage) is larger than some thresholds , an action potential will be triggered. Membrance potential means the potential difference across the neuron membrance. → Relative can be controlled by concentrations of irons($\\mathrm{Na}&#94;+,\\mathrm{K}&#94;+,\\mathrm{Cl}&#94;-$) is maintained by their ion bumps , and at the resting state, it is around $65\\mathrm{mV}$. sometimes across the threshold , and when it occurs, the neuron fires works like a capacitor with a leaky current. Leaky Integrate-and-Fire(LIF) model In 1907, Lapicque proposed a simple model(which is just the time derivative of the law of capacitance ($Q=CV$) .) for neurons: $$I(t)-\\frac{V_m(t) - V_{rest}}{R_m} = C_m\\frac{dV_m(t)}{dt}$$ $I$: Input current (=const.) $V_m$: Membrance potential $V_{rest}$: Resting potential of the membrance $R_m$: Membrane resistance (we find it is not a perfect insulator as assumed previously) $C_m$: Capacity of the membrance. When an input current is applied, the membrane voltage increases with time until it reaches a constant threshold $V_{th}$ At the point, a delta function spike occurs and the voltage is reset to its resting potential($V_{rest}$). The LIF neuron fired more frequently as the input current increases. Leak Conductance Ion permeability at resting membrane potential, allowing a constant flow of current through the cell membrane due to channels that remain open at resting membrane potential (Ref: Encyclopedia of Neuroscience ) In [7]: from OIST.tutorial1 import LIFsimulation , LITSpikeFrequency In [8]: params = { 'V_rest' : - 65 , 'V_thre' : - 40 , 'V_reset' : - 70 , 'V_fire' : 20 , 'C' : 2e-4 , 'R' : 7.5e4 , 'I' : 5e-4 , 'dt' : 0.1 , 'T' : 100 , } In [9]: time , Vm = LIFsimulation ( ** params ) plt . plot ( time , Vm , color = \"black\" ) plt . xlabel ( \"time[ms]\" ), plt . ylabel ( \"V[mV]\" ), plt . grid () plt . show () In [10]: Is = [ 0.5e-3 , 1e-3 , 1.5e-3 , 2.0e-3 , 2.5e-3 , 3.0e-3 ] freqs = LITSpikeFrequency ( Is , ** params ) plt . plot ( Is , freqs , color = \"blue\" ), plt . scatter ( Is , freqs , color = \"blue\" , marker = \"s\" ) plt . title ( \"How Spiking Frequency Depends on Input Current\" ), plt . xlabel ( \"Input Current: I [uA]\" ), plt . ylabel ( \"Spiking Frequency [Hz]\" ), plt . grid () plt . show () ※ The LIF neuron fired more frequently as the input current increases. Hodgkin-Huxley model $$ I = C_m + \\frac{dV_m}{dt} + g_{\\mathrm{l}}\\left(V_m-V_{\\mathrm{l}}\\right) + g_{\\mathrm{K}}n&#94;4\\left(V_m-V_{\\mathrm{K}}\\right) + g_{\\mathrm{Na}}m&#94;3h\\left(V_m-V_{\\mathrm{Na}}\\right)\\\\ \\begin{cases} \\begin{aligned} \\frac{dn}{dt} &= \\alpha_n(V_m)(1-n) + \\beta_n(V_m)n\\\\ \\frac{dm}{dt} &= \\alpha_m(V_m)(1-m) + \\beta_m(V_m)m\\\\ \\frac{dh}{dt} &= \\alpha_h(V_m)(1-h) + \\beta_h(V_m)h\\\\ \\end{aligned} \\end{cases} $$ Proposed by Hodgkin and Huxley in 1952 (They received the 1963 Nobel Prize in Physiology or medicin for this work.) Like Leaky Integrate-and-Fire(LIF) model , the input current (const.) charges up the membrance capacitor. Leaky conductance This model considers also ion currents invoving potassium ion ($\\mathrm{K}&#94;+$) and Sodium ion ($\\mathrm{Na}&#94;{+}$) induced by the potential difference. Sodium ion : has a reversal potential depolarizing the membrance. The conductivity is voltage-gated. Potassium ion : has a reversal potential hyper-polarizing the membrance. The conductivity is voltage-gated. The individual gates act like a first order chemical reaction with two states: $$\\text{Shut}\\overset{\\alpha}{\\underset{\\beta}{\\rightleftarrows}}\\text{Open}$$ Propose that Each $\\mathrm{K}$ channel has $4$ identical activation gates.( $\\mathbb{P}_{\\text{open}}=n$ ) Each $Na$ channel has $3$ avtivation gates( $\\mathbb{P}_{\\text{open}}=m$ ), and $1$ inactivation gate( $\\mathbb{P}_{\\text{open}}=h$ ). Action Potential Stimulas raises the membrane potential. (Depolarization) If membrance potential over the Threshold , voltage-gated sodium channels will open, and due to the sodium concentration gradient (ex > in) , sodium ion flow into the cell. This process raises the membrance potential, and it gets further depolarized. As the membrance become **\"too large\"**, sodium ion channel closes , and after that ( there is a delay ), voltage-gated potassium channel will open. When the membrance potential return to the resting state, potassium channel closes, but as this response takes time, the membrance potential will be lower than the initial voltage. (Hyperpolarization) (※ Resting membrance potential means the equilibrium point between \"electrical gradient\" and \"concentration gradient\".) How the Network can be trained Long-term Synaptic Plasticity Stimulas are passed through a glutamate . Glutamate connects with AMPA receptor and it causes sodium channels opening. If Depolarization occurs, NMDA channel (which was closed by Magnesium) open, and Calcium flows into the cell. The amount of Calcium is Large : LTP(Long-term potentiation) occurs. Increase the AMPA. Small : LTD(Long-term depression) occurs. Decrease the AMPA. Spike-Timing-Depenent Plasticity (Classical) The change in $w_{ji}$ depends on the spike timings In order to perform STDP with differential equatins, an online implementation of STDP is proposed $$ \\begin{aligned} \\tau_+\\frac{dx}{dt} &= -x + a_+(x)\\sum_{t_f}\\delta(t-t_f)\\\\ \\tau_-\\frac{dy}{dt} &= -y + a_-(y)\\sum_{t_n}\\delta(t-t_n)\\\\ \\Longrightarrow \\frac{dw}{dt} &= A_+(w)x(t)\\sum_{t_n}\\delta(t-t_n) - A_-(w)y(t)\\sum_{t_f}\\delta(t-t_f) \\end{aligned} $$ In [11]: from OIST.tutorial1 import STDPsimulation In [12]: time , Results , Info = STDPsimulation ( pre = 10 , post = 30 ) In [13]: fig = plt . figure ( figsize = ( 14 , 6 )) for i , vals in enumerate ( Results ): ax = fig . add_subplot ( 3 , 2 , i + 1 ) ax . plot ( time , vals , color = Info . get ( \"color\" )[ i ]) ax . set_xlabel ( \"time\" ), ax . set_ylabel ( Info . get ( \"label\" )[ i ]), ax . set_title ( Info . get ( \"label\" )[ i ]) plt . tight_layout () plt . show () ※ As \"Pre - Post\" changes... In [14]: pre = 40 for diff in range ( - 40 , 40 ): _ , Results , _ = STDPsimulation ( pre = pre , post = pre - diff ) dws = Results [ - 1 ] dw = dws [ np . argmax ( np . abs ( dws ))] plt . scatter ( diff , dw , color = \"black\" , s = 10 ) plt . grid (), plt . xlabel ( \"$t_ {pre} - t_ {post} $\" , fontsize = 20 ), plt . ylabel ( \"$\\Delta w$\" , fontsize = 20 ) plt . show () Then, with an appropriate firing sequence, the network can be trained!! Take-Home Message Some neuronal behaviors can be mathematically modeled. Networks of neurons has the potential to do different computations. Those networks can be trained. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-1.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-1.html"},{"title":"生物物理学 第7回(小テスト)","text":"g/FLPcAxsXxehZyMhIlBTQ==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-7-quiz.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-7-quiz.html"},{"title":"Pro.4 Itemset mining algorithm","text":"Problem Setting Implement the \"Itemset mining algorithm (LCM)\" to find out the most frequent closed patterns. Frequent Itemset Mining Finding all \"frequent\" sets of elements (items) appearing $\\sigma$ times or more in a database. Terminology Name description Itemset $$I = \\left\\{1,\\ldots,M\\right\\}$$ Transaction $$t\\subset I$$ Transaction database $$\\mathcal{T}=\\left\\{t_1,\\ldots,t_N\\right\\}$$ Pattern $$P \\subset I$$ Occurrence $$P\\subset\\exists t\\in\\mathcal{T}$$ Denotation $$\\mathcal{T}(P) = \\left\\{t\\in\\mathcal{T}\\mid P\\subset t\\right\\}$$ Support/Frequency $$n_{\\mathcal{T}}(P) = \\mid\\mathcal{T}(P)\\mid$$ Implementation data In [1]: from kerasy.utils import flatten_dual In [2]: # retail_1based_500.txt with open ( \"itemset_mining/retail_1based_500.txt\" , mode = \"r\" ) as f : retail_500 = [ name . rstrip ( \" \\n \" ) . split ( \" \" ) for name in f . readlines ()] print ( f \"The number of transactions: { len ( retail_500 ) } \" ) print ( f \"The number of unique items: { len ( set ( flatten_dual ( retail_500 ))) } \" ) The number of transactions: 500 The number of unique items: 2058 In [3]: # retail_1based_1000.txt with open ( \"itemset_mining/retail_1based_1000.txt\" , mode = \"r\" ) as f : retail_1000 = [ name . rstrip ( \" \\n \" ) . split ( \" \" ) for name in f . readlines ()] print ( f \"The number of transactions: { len ( retail_1000 ) } \" ) print ( f \"The number of unique items: { len ( set ( flatten_dual ( retail_1000 ))) } \" ) The number of transactions: 1000 The number of unique items: 3182 In [4]: from kerasy.search.itemset import FrequentSet from kerasy.search.itemset import create_one_hot def mine ( method , data_name = \"500\" , threshold = 10 ): retail = { \"500\" : retail_500 , \"1000\" : retail_1000 , } . get ( data_name ) database , idx2data = create_one_hot ( retail ) model = FrequentSet ( threshold = threshold ) model . fit ( database , method = method ) print ( f \"num frequent sets: { len ( model . all ) - 1 } \" ) fn = f \"tree_structure-retail_ { data_name } - { method } .png\" ret = model . export_graphviz ( fn , class_names = idx2data ) if ret : print ( f \"Graph image was saved at: ` { fn } `\" ) else : raise ValueError ( \"Graph was not generated.\" ) print () itemset_mining / Algorithm In [5]: mine ( method = \"all\" , data_name = \"500\" , threshold = 10 ) num frequent sets: 68 Graph image was saved at: `tree_structure-retail_500-all.png` In [6]: mine ( method = \"all\" , data_name = \"1000\" , threshold = 10 ) num frequent sets: 217 Graph image was saved at: `tree_structure-retail_1000-all.png` Summary Itemset mining is the simplest of all mining algorithms. Need to maintain occurrence of each pattern in database. Tree by lexicographical order is (implicitly) used. Closed Itemset mining PROBLEM in Frequent Pattern Mining Huge Number of frequent itemsets Hard to analyze Most of them are similar SOLUTION in Frequent Pattern Mining Find only closed patterns Observation : Most frequent itemset $X$ can be extended without changing occurrence by adding new elements. definition : An itemset $X$ is a \"closed set\" iff there is no proper superset of $X$ with the same frequency (thus the same occurrence set). A closed itemset is the maximal set among all itemsets with the same occurrences. Equivalence class $[X] =\\left\\{Y | \\mathrm{Occ}(X)=\\mathrm{Occ}(Y)\\right\\}$ Implementation (LCM) In [7]: mine ( method = \"closed\" , data_name = \"500\" , threshold = 10 ) num frequent sets: 59 Graph image was saved at: `tree_structure-retail_500-closed.png` In [8]: mine ( method = \"closed\" , data_name = \"1000\" , threshold = 10 ) num frequent sets: 213 Graph image was saved at: `tree_structure-retail_1000-closed.png` Compare # all closed retail_1based_500.txt retail_1based_1000.txt Optimization [ ] Occurrence deliver when num_items large and sparse transaction. Exclude many potential children. database reduction [x] Create small transaction database in any iteration by removing. [ ] transaction not containing $C$. [ ] items of $C$. [x] items with frequency less than minimal support. [x] transaction id and item id re-indexing. [ ] duplicated transactions are merged with weight factor. [x] Bit matrix Reference LCM: An Efficient Algorithm for Enumerating Frequent Closed Item Sets Statistical significance of combinatorial regulations. A Fast Method of Statistical Assessment for Combinatorial Hypotheses Based on Frequent Itemset Enumeration In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-19.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-19.html"},{"title":"Pro.3 Gene Network Inference","text":"Problem Setting Implement the \"SCODE algorithm\" to find out the regulatory relationships of genes in single cells. SCODE Link: paper: SCODE: An efficient regulatory network inference algorithm from single-cell RNA-Seq during differentiation Github: SCODE developed the novel and efficient algorithm SCODE to infer regulatory networks, based on ordinary differential equations. The performance and runtimes of SCODE was SOTA. provides a promising approach for further single-cell differentiation analyses. Algorithms In the paper above, they focus on TFs and inferring TF regulatory networks. 1. Describing regulatory networks and expression dynamics with linear ODEs First, they describe TF expression dynamics throughout differentiation with linear ODEs: $$\\frac{d\\mathbf{x}_t}{dt} = \\mathbf{Ax}_t,\\quad \\mathbf{x}_t\\in\\mathbb{R}&#94;G,\\mathbf{A}\\in\\mathbb{R}&#94;{G\\times G}\\quad\\cdots (1)$$ where $G$ is the number of TFs. The observed expression data consist of a $G \\times C$ matrix $\\left(\\mathbf{⁠X}(e)\\right)$, where $C$ is the number of cells. In addition, the time parameter of a cell $c$ is given as $t_c$. 1.1. Deriving $\\mathbf{A}$ from a linear ODE transformation At first, they consider the following linear ODE: $$d\\mathbf{z} = \\mathbf{Bz}dt\\quad\\cdots (2)$$ where $\\mathbf{z}$ is a vector of length $G$ and $\\mathbf{B}$ is a known square matrix. If we know a matrix $\\mathbf{W}$ that satisfies $\\mathbf{x} = \\mathbf{Wz}$, we can derive the ODE of $\\mathbf{x}$ by transforming the ODE of $\\mathbf{z}$ as follows: $$d\\mathbf{z} = \\mathbf{Bz}dt\\quad\\cdots (3)$$$$ \\begin{aligned} d\\mathbf{z} &= \\mathbf{BW}&#94;{-1}\\mathbf{Wz}dt\\\\ \\mathbf{W}d\\mathbf{z} &= \\mathbf{WBW}&#94;{-1}\\mathbf{Wz}dt\\\\ d\\mathbf{x} &= \\underbrace{\\mathbf{WBW}&#94;{-1}}_{\\mathbf{A}}\\mathbf{x}dt \\end{aligned} $$ Therefore, if the parameter $\\mathbf{B}$ of $d\\mathbf{z} = \\mathbf{Bz}dt$ and the relationship $\\mathbf{x} = \\mathbf{Wz}$ are given, we can derive $\\mathbf{A}$ from $\\mathbf{WBW}&#94;{-1}$. 1.2. Estimating $\\mathbf{W}$ using linear regression They assume that the problem of $\\mathbf{W}$ inference can be regarded as a linear regression problem for each gene, as follows: $$\\mathbf{X}_{gc}&#94;{(e)} = \\sum_{i=1}&#94;G \\mathbf{W}_{gi}\\mathbf{Z}_{ic}&#94;{(e)} + \\boldsymbol{\\varepsilon}\\quad\\cdots (4)$$ where $\\boldsymbol{\\varepsilon}$ is a noise term. Therefore, $\\mathbf{W}$ can be optimized analytically and efficiently by linear regression for each TF. 1.3. Dimension reduction of $\\mathbf{z}$ The basic idea of reduction is that the patterns of expression dynamics are limited and expression dynamics can be reconstructed with a small number of patterns. For the next step, they consider a small vector $\\mathbf{z}$ to represent the original expression dynamics. Hereafter, $\\mathbf{z}$ is a vector of length $D$, with $D\\ll G$⁠. In this case, $\\mathbf{W}$ is a $G\\times D$ matrix, and hence we used a pseudo-inverse matrix $\\mathbf{W}&#94;{+}$ instead of the inverse matrix, and $\\mathbf{A}$ is derived from $\\mathbf{A}=\\mathbf{WBW}&#94;{+}$. The matrix $\\mathbf{W}$ is estimated as before, via linear regression. By using a small vector $\\mathbf{z}$, the time complexity of estimation of $\\mathbf{W}$ becomes much lower. 1.4 Optimizing $\\mathbf{B}$ Thus far, we have assumed $\\mathbf{B}$ is given. To represent the original expression dynamics with small values of $D$, we optimize $\\mathbf{B}$ for the next step. We suppose that the appropriate value of $\\mathbf{B}$ satisfes the condition that the $\\mathbf{Z}&#94;{(e)}$ generated from $d\\mathbf{z}=\\mathbf{Bz}dt$ can predict $\\mathbf{X}&#94;{(e)}$ with $\\mathbf{WZ}&#94;{(e)}$ accurately. $$\\frac{d\\mathbf{z}_t}{dt} = \\mathbf{Bz}_t\\longrightarrow \\mathbf{z}_t = \\left(e&#94;{b_1t},\\ldots,e&#94;{b_Dt}\\right)$$ Therefore, we evaluate the appropriateness of the matrix $\\mathbf{B}$ with the following residual sum of squares (RSS) : $$\\text{RSS}\\left(\\mathbf{B},\\mathbf{W}\\right) = \\sum_{g,c}\\left(\\mathbf{X}&#94;{(e)}_{gc} - \\sum_{i=1}&#94;D\\mathbf{W}_{gi}\\mathbf{Z}_{ic}&#94;{(e)}\\right)\\quad\\cdots (5)$$ In this research, they assume $\\mathbf{B}$ is a diagonal matrix and the elements $\\mathbf{B}_{ii}$ satisfy $b_{\\min}\\leq \\mathbf{B}_{ii}\\leq b_{\\max}$. This limitation is acceptable because large and small values of $\\mathbf{B}_{ii}$ represent a dynamics of sharp change and seem to be an inefficient basis for reconstructing the expression dynamics. They optimize $\\mathbf{B}$ by random sampling and iterative optimization so that the RSS decreases. The code is given from \"kerasy/Bio/scode.py\" , and the brief pseudocode is given below. B = initialize () for k in range ( iter_max ): # Generate from dz = B&#94;{(k)}zdt Z = generateZ ( B ) # Solution of linear regression (X&#94;{(e)}≃WZ&#94;{(e)}) W = optimize ( X , Z ) if RSS ( B , W ) < RSS ( B_best , W_best ): B_best = B W_best = W else : B = B_best # Uniform random value [1,D] i = np . random . randint ( D ) B [ i , i ] = np . random . uniform ( low = b_min , high = b_max , size = 1 ) 1.5. Regularized Least Square It is likely to over-fit especially when model is too complicated. For avoiding it, we introduce the idea of adding a regularization term to an error function. $$\\text{RSS}\\left(\\mathbf{W},\\mathbf{B}\\right) + \\lambda \\left\\|\\mathbf{W}\\right\\|&#94;2$$ Then, the total error function and Maximum likelihood estimated $\\mathbf{W}$ is expressed as $$ \\begin{aligned} E\\left(\\mathbf{W}\\right) &= \\text{RSS}\\left(\\mathbf{W},\\mathbf{B}\\right) + \\lambda \\left\\|\\mathbf{W}\\right\\|&#94;2\\\\ &= \\sum_{g=1}&#94;G\\sum_{c=1}&#94;C\\left(x_{gc}&#94;{\\text{obs}} - \\sum_{d=1}&#94;DW_{gd}z_{t_cd}\\right)&#94;2 + \\lambda\\sum_{g=1}&#94;G\\sum_{d=1}&#94;DW_{gd}&#94;2\\\\ &= \\text{Tr}\\left\\{\\left(\\mathbf{X}&#94;{\\text{obs}} - \\mathbf{WZ}&#94;T\\right)&#94;T\\left(\\mathbf{X}&#94;{\\text{obs}} - \\mathbf{WZ}&#94;T\\right) + \\lambda\\mathbf{W}&#94;T\\mathbf{W}\\right\\}\\\\ \\frac{\\partial E\\left(\\mathbf{W}\\right)}{\\partial W_{gd}}&= -2\\sum_{c=1}&#94;Cz_{t_cd}\\left(x_{gc}&#94;{\\text{obs}}\\ - \\sum_{d&#94;{\\prime}=1}&#94;DW_{gd}z_{t_cd&#94;{\\prime}}\\right) + 2\\lambda W_{gd} = 0\\\\ 0 &= -2\\left\\{\\sum_{c=1}&#94;Cx_{gc}&#94;{\\text{obs}}z_{t_cd} - \\sum_{d&#94;\\prime=1}&#94;DW_{gd&#94;{\\prime}}\\left(\\sum_{c=1}&#94;Cz_{t_cd&#94;{\\prime}}z_{t_cd} + \\lambda\\right)\\right\\}\\\\ &= -2 \\left\\{\\mathbf{X}&#94;{\\text{obs}}\\mathbf{Z} - \\mathbf{W}\\left(\\mathbf{Z}&#94;T\\mathbf{Z} + \\lambda \\mathbf{I}\\right)\\right\\}_{gd}\\\\ \\therefore\\mathbf{W}_{\\text{ML}} &= \\mathbf{X}&#94;{\\text{obs}}\\mathbf{Z}\\left(\\mathbf{Z}&#94;T\\mathbf{Z} + \\lambda \\mathbf{I}\\right)&#94;{-1} \\end{aligned} $$ Implementation data In [1]: import numpy as np In [2]: with open ( \"singlecell/tf.txt\" , mode = \"r\" ) as f : tf_names = [ name . rstrip ( \" \\n \" ) for name in f . readlines ()] print ( f \"TF Name types: { len ( tf_names ) } \" ) TF Name types: 100 In [3]: with open ( \"singlecell/expr.txt\" , mode = \"r\" ) as f : expressions = np . asarray ([ line . rstrip ( \" \\n \" ) . split ( \" \\t \" ) for line in f . readlines () ], dtype = float ) num_tf , num_cells = expressions . shape print ( f \"the number of tf : { num_tf } \" ) print ( f \"the number of cells: { num_cells } \" ) the number of tf : 100 the number of cells: 758 In [4]: with open ( \"singlecell/time_normalized.txt\" , mode = \"r\" ) as f : time_normalized = np . asarray ([ line . rstrip ( \" \\n \" ) . split ( \" \\t \" )[ - 1 ] for line in f . readlines () ], dtype = float ) print ( f \"the number of cells: { len ( time_normalized ) } \" ) the number of cells: 758 Algorithm In [5]: from kerasy.Bio.scode import SCODE In [6]: D = 4 lamda = 1e-2 b_min = - 10 b_max = 10 seed = 2020 max_iter = 1000 In [7]: model = SCODE ( lamda = lamda , b_min = b_min , b_max = b_max , random_state = seed ) In [8]: model . fit ( X = expressions , t = time_normalized , dimension = D , max_iter = max_iter , verbose = 1 ) 1000/1000 [####################] 100.00% - 0.909s RSS: 410.1052927893475 In [9]: model . show_corr ( 10 , gene_name = tf_names ) | # | Regulate | Regulated | Correlation | =================================== | 01 | NANOG | SMAD2 | +3.022 | | 02 | NANOG | PRDM1 | +2.941 | | 03 | TERF1 | SMAD2 | +2.500 | | 04 | TERF1 | PRDM1 | +2.457 | | 05 | KAT7 | SMAD2 | +2.368 | | 06 | POU5F1 | SMAD2 | +2.351 | | 07 | NANOG | BBX | +2.337 | | 08 | NANOG | MIER1 | +2.274 | | 09 | NANOG | OTX2 | +2.258 | | 10 | NANOG | AEBP2 | +2.235 | Observe how dimension affects the results In [10]: RSSs = [] dimensions = np . arange ( 1 , 10 ) for d in dimensions : print ( f \" \\n Dimension: { d } \" ) model = SCODE ( lamda = lamda , b_min = b_min , b_max = b_max , random_state = seed ) model . fit ( X = expressions , t = time_normalized , dimension = d , max_iter = max_iter , verbose =- 1 ) model . show_corr ( 5 , gene_name = tf_names ) RSSs . append ( model . RSS ) Dimension: 1 | # | Regulate | Regulated | Correlation | ================================== | 1 | SMAD2 | SMAD2 | +0.214 | | 2 | SOX11 | SMAD2 | +0.211 | | 3 | SMAD2 | SOX11 | +0.211 | | 4 | SOX11 | SOX11 | +0.209 | | 5 | TERF1 | SMAD2 | +0.207 | Dimension: 2 | # | Regulate | Regulated | Correlation | ================================== | 1 | NANOG | EOMES | +0.325 | | 2 | TERF1 | EOMES | +0.310 | | 3 | NANOG | GATA6 | +0.307 | | 4 | TERF1 | GATA6 | +0.294 | | 5 | NANOG | SMAD2 | +0.285 | Dimension: 3 | # | Regulate | Regulated | Correlation | ================================== | 1 | EOMES | ZNF516 | +1.017 | | 2 | EOMES | ID2 | -1.007 | | 3 | EOMES | MIER1 | +0.903 | | 4 | EOMES | SMAD2 | +0.889 | | 5 | EOMES | AEBP2 | +0.886 | Dimension: 4 | # | Regulate | Regulated | Correlation | ================================== | 1 | NANOG | SMAD2 | +3.022 | | 2 | NANOG | PRDM1 | +2.941 | | 3 | TERF1 | SMAD2 | +2.500 | | 4 | TERF1 | PRDM1 | +2.457 | | 5 | KAT7 | SMAD2 | +2.368 | Dimension: 5 | # | Regulate | Regulated | Correlation | ================================== | 1 | NANOG | HAND1 | -10.761 | | 2 | SOX11 | HAND1 | -10.228 | | 3 | POU5F1 | HAND1 | -10.041 | | 4 | SMAD2 | HAND1 | -9.692 | | 5 | NANOG | FOXF1 | -9.415 | Dimension: 6 | # | Regulate | Regulated | Correlation | ================================== | 1 | ZEB1 | HAND1 | -801.468 | | 2 | MAF | HAND1 | -755.309 | | 3 | SALL1 | HAND1 | -750.851 | | 4 | PRDM1 | HAND1 | +692.698 | | 5 | SMAD2 | HAND1 | +683.039 | Dimension: 7 | # | Regulate | Regulated | Correlation | ================================== | 1 | ZEB1 | HAND1 | +34.654 | | 2 | MAF | HAND1 | +28.955 | | 3 | SALL1 | HAND1 | +27.721 | | 4 | SMAD2 | HAND1 | -26.947 | | 5 | SOX11 | HAND1 | -26.131 | Dimension: 8 | # | Regulate | Regulated | Correlation | ================================== | 1 | OTX2 | GATA6 | -67023.987 | | 2 | ZEB1 | GATA6 | -64173.030 | | 3 | OTX2 | HAND1 | -62032.353 | | 4 | ZEB1 | HAND1 | -59377.698 | | 5 | MAF | GATA6 | -55372.882 | Dimension: 9 | # | Regulate | Regulated | Correlation | ================================== | 1 | MAF | HAND1 | -1363.145 | | 2 | ZEB1 | HAND1 | -1214.007 | | 3 | MAF | GATA6 | -1178.206 | | 4 | BAZ2B | HAND1 | -1062.895 | | 5 | ZEB1 | GATA6 | -1042.358 | In [11]: import matplotlib.pyplot as plt plt . plot ( dimensions , RSSs , color = \"red\" ) plt . title ( \"The relationship between \\n dimensions and RSS\" , fontsize = 16 ) plt . xlabel ( \"dimensions\" ) plt . ylabel ( \"RSS\" ) plt . grid () plt . show () According to Elbow Law, dimension=3 looks best. In [12]: best_dimension = 3 In [13]: model = SCODE ( lamda = lamda , b_min = b_min , b_max = b_max , random_state = seed ) model . fit ( X = expressions , t = time_normalized , dimension = best_dimension , max_iter = max_iter , verbose =- 1 ) In [14]: model . plot_corr () In [15]: reg , reged = model . top_pairs () time = sorted ( time_normalized ) expressions_pred = model . predict ( time ) model . show_corr ( 1 , gene_name = tf_names ) | # | Regulate | Regulated | Correlation | ================================== | 1 | EOMES | ZNF516 | +1.017 | In [16]: def plot_expression_level ( idx , text = \"\" ): plt . title ( f \"The relationship between \\n Predicted and Answer ( { tf_names [ idx ] }{ text } )\" ) plt . plot ( time , expressions_pred [ idx ], color = \"red\" , label = \"Pred expression level\" ) plt . scatter ( time_normalized , expressions [ idx ], color = \"blue\" , label = \"Ans expression level\" , s = 1 ) plt . legend () plt . show () In [17]: plot_expression_level ( reg , text = \", regulate\" ) In [18]: plot_expression_level ( reged , text = \", regulated\" ) Relationship between EOMES and ZNF516 EOMES This gene belongs to the TBR1 (T-box brain protein 1) sub-family of T-box genes that share the common DNA-binding T-box domain. The encoded protein is a transcription factor which is crucial for embryonic development of mesoderm and the central nervous system in vertebrates. The protein may also be necessary for the differentiation of effector CD8+ T cells which are involved in defense against viral infections. A similar gene disrupted in mice is shown to be essential during trophoblast development and gastrulation. Alternative splicing results in multiple transcript variants. [provided by RefSeq, May 2013] ZNF516 Zinc-finger proteins bind nucleic acids and play important roles in various cellular functions, including cell proliferation, differentiation, and apoptosis. This gene encodes a zinc-finger protein, and belongs to the krueppel C2H2-type zinc-finger protein family. It may be involved in transcriptional regulation. [provided by RefSeq, Sep 2012] In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-18.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-18.html"},{"title":"Pro.2 最適行動列アルゴリズム","text":"InDbm0ppztLtGqq4F0ozvw==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-17.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-17.html"},{"title":"Pro.1 配列モチーフ探索","text":"Problem Setting Identify the common sequencial features(sequence motif) from large amount of sequences data containing tf-binding regions. DeepBind Link: Paper Software tool \"Deep Learning\" techniques to ascertain the sequence specificities of DNA- and RNA-binding proteins from experimental data . outperforms other state-of-the-art methods. (Published: 27 July 2015) Results are readily visualized as a weighted ensemble of position weight matrices(PWMs) a mutation map that indicates how variations affect binding within a specific sequence. computes a binding score $f(s)$ using four stages: $$f(s) = \\text{Neural Network}_W\\left(\\text{pool}\\left(\\text{rect}_b\\left(\\text{conv}_M(s)\\right)\\right)\\right)$$ Convolution : Scan a set of motif detectors (length=$L$) with parameters $M&#94;{(j)}$ $$\\text{conv}_M(s)_{ij} = \\sum_{k=0}&#94;{K-1}\\sum_{l=0}&#94;{L-1}M&#94;{(j)}_{k,i+l}s_{ki}$$ Rectification : Extract some positions $$\\text{rect}_b(x_{ij}) =\\begin{cases} x_{ij} + b & (\\text{if }x_{ij} + b>0)\\\\0 & (\\text{otherwise})\\end{cases}$$ Pooling : Compute the maximum and average of each $\\text{rect}_b\\left(\\cdot\\right)$ across the sequence. Maximizing : identify the presence of longer motifs . Averaging : identify cumulative effects of short motifs $$\\text{pool}_{\\alpha}(x_{ij}) = \\alpha\\max_i\\left(x_{ij}\\right) + \\left(1-\\alpha\\right)\\underset{i}{\\text{ave}}\\left(x_{ij}\\right)$$ Neural Network : Combines the responses to produce a score. a: Five independent sequences being processed in parallel by single DeepBind model. b: The calibration, training and testing procedure. Implementation generate DataSets In [1]: import numpy as np from kerasy.utils import generateSeq_embedded_Motif ※ See kerasy/utils/generateSeq_embedded_Motif In [2]: # Types of Base (DNA) nuc = [ \"A\" , \"C\" , \"G\" , \"T\" ] num_class = len ( nuc ) nuc2code = dict ( zip ( nuc , np . identity ( num_class , dtype = np . int8 )[ range ( num_class )])) In [3]: nuc2code Out[3]: {'A': array([1, 0, 0, 0], dtype=int8), 'C': array([0, 1, 0, 0], dtype=int8), 'G': array([0, 0, 1, 0], dtype=int8), 'T': array([0, 0, 0, 1], dtype=int8)} In [4]: motif = np . asarray ([ [ 0.0 , 1.0 , 0.0 , 0.0 ], # C [ 0.5 , 0.0 , 0.0 , 0.5 ], # A/T [ 0.0 , 0.5 , 0.5 , 0.0 ], # C/G [ 0.0 , 0.0 , 1.0 , 0.0 ], # G [ 0.0 , 0.0 , 0.0 , 1.0 ], # T ]) len_motif , num_base_types = motif . shape In [5]: import matplotlib.pyplot as plt import seaborn as sns def visMotif_std ( motif , name , ax = None ): motif_std = ( motif - motif . min ()) / ( motif . max () - motif . min ()) if ax is None : fig , ax = plt . subplots ( figsize = ( 4 , 5 )) sns . heatmap ( motif_std , cbar = False , cmap = \"binary\" , ax = ax , fmt = \".3f\" , annot = True ) ax . set_xticklabels ( nuc ), ax . set_ylabel ( \"Motif position\" , fontsize = 14 ) ax . set_title ( name , fontsize = 18 ) return ax In [6]: visMotif_std ( motif , name = \"True\" ) plt . show () In [7]: len_sequence = 20 n_pos_train = 5000 n_neg_train = 5000 n_pos_test = 500 n_neg_test = 500 In [8]: seed_train = 2020 seed_test = seed_train + 1 In [9]: # Although DeepBind can be trained and tested on datasets containing varying-length sequences, # here, we fix the length for simplicity x_train , y_train = generateSeq_embedded_Motif ( n_pos_train , n_neg_train , len_sequence , motif , nuc , seed = seed_train ) x_test , y_test = generateSeq_embedded_Motif ( n_pos_test , n_neg_test , len_sequence , motif , nuc , seed = seed_test ) In [10]: x_train = np . asarray ([ np . vstack ([ nuc2code [ x ] for x in x_seq ]) for x_seq in x_train ]) x_test = np . asarray ([ np . vstack ([ nuc2code [ x ] for x in x_seq ]) for x_seq in x_test ]) y_train = np . asarray ( y_train ) . reshape ( - 1 , 1 ) y_test = np . asarray ( y_test ) . reshape ( - 1 , 1 ) In [11]: print ( f \"x_train.shape = { x_train . shape } \" ) print ( f \"y_train.shape = { y_train . shape } \" ) print ( f \"x_test.shape = { x_test . shape } \" ) print ( f \"y_test.shape = { y_test . shape } \" ) x_train.shape = (10000, 20, 4) y_train.shape = (10000, 1) x_test.shape = (1000, 20, 4) y_test.shape = (1000, 1) Building Network In [12]: import keras from keras.models import Sequential from keras.layers import Activation from keras.layers import Conv1D , GlobalAveragePooling1D from keras import backend as K Using TensorFlow backend. In [13]: # Single candidate motif is considered num_cand_mortif = 1 seed_weight = seed_train + seed_test batch_size = 32 epochs = 1000 In [14]: def prob_reg ( motif_matrix ): \"\"\" @params motif_matrix : shape=(len_motif, num_base_types, num_cand_mortif) \"\"\" # shape=(num_base_types,) probs = K . sum ( motif_matrix , axis = ( 1 , - 1 )) mean = K . mean ( probs ) return 0.001 * K . sqrt ( K . sum ( K . square ( probs - mean ))) In [15]: # Fixed the initial kernel weight. initial_kernel_weight = np . random . RandomState ( seed_weight ) . uniform ( size = ( len_motif , num_base_types , num_cand_mortif )) . astype ( np . float32 ) # initial_bias_weight = np.zeros(shape=1, dtype=np.float32) initial_conv_weights = [ initial_kernel_weight ] #, initial_bias_weight] In [16]: fig , ( ax_true , ax_ini ) = plt . subplots ( 1 , 2 , figsize = ( 8 , 5 ), sharey = True ) ax_true = visMotif_std ( motif , name = \"True\" , ax = ax_true ) ax_ini = visMotif_std ( initial_kernel_weight [:,:, 0 ], name = \"initial\" , ax = ax_ini ) plt . tight_layout () plt . show () simple model In [17]: # If there is a motif, indicate a high value. # # [Positive] [Negative] # ...... ========= .. .................... # ...... | Motif | .. .................... # ...... ========= .. .................... # \\\\\\\\ //// Convolution \\\\\\\\ //// # ____----___ ____________ # | | # | Global Average Pooling | # v v # High value (Positive!!) Low value (Negative!!) In [18]: model_simple = Sequential () model_simple . add ( Conv1D ( filters = num_cand_mortif , kernel_size = len_motif , kernel_initializer = \"TruncatedNormal\" , kernel_regularizer = prob_reg , input_shape = ( len_sequence , num_base_types ), activation = \"relu\" , padding = \"valid\" , use_bias = False )) model_simple . add ( GlobalAveragePooling1D ()) model_simple . add ( Activation ( \"sigmoid\" )) # Initialize to the same weights. model_simple . layers [ 0 ] . set_weights ( initial_conv_weights ) In [19]: model_simple . summary () _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= conv1d_1 (Conv1D) (None, 16, 1) 20 _________________________________________________________________ global_average_pooling1d_1 ( (None, 1) 0 _________________________________________________________________ activation_1 (Activation) (None, 1) 0 ================================================================= Total params: 20 Trainable params: 20 Non-trainable params: 0 _________________________________________________________________ Deeper Model In [20]: import keras from keras.models import Sequential from keras.layers import Dense , Dropout , Flatten from keras.layers import Conv1D , MaxPool1D In [21]: model_deeper = Sequential () model_deeper . add ( Conv1D ( filters = num_cand_mortif , kernel_size = len_motif , kernel_initializer = \"TruncatedNormal\" , input_shape = ( len_sequence , num_base_types ), activation = \"relu\" , padding = \"valid\" , use_bias = False )) model_deeper . add ( Conv1D ( filters = 1 , kernel_size = 2 , kernel_initializer = \"TruncatedNormal\" , bias_initializer = \"zero\" , activation = \"relu\" , padding = \"valid\" )) model_deeper . add ( MaxPool1D ( pool_size = 2 )) model_deeper . add ( Dropout ( 0.5 )) model_deeper . add ( Flatten ()) model_deeper . add ( Dense ( 4 , activation = \"relu\" )) model_deeper . add ( Dropout ( 0.5 )) model_deeper . add ( Dense ( 1 , activation = \"sigmoid\" )) # Initialize to the same weights. model_deeper . layers [ 0 ] . set_weights ( initial_conv_weights ) In [22]: model_deeper . summary () _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= conv1d_2 (Conv1D) (None, 16, 1) 20 _________________________________________________________________ conv1d_3 (Conv1D) (None, 15, 1) 3 _________________________________________________________________ max_pooling1d_1 (MaxPooling1 (None, 7, 1) 0 _________________________________________________________________ dropout_1 (Dropout) (None, 7, 1) 0 _________________________________________________________________ flatten_1 (Flatten) (None, 7) 0 _________________________________________________________________ dense_1 (Dense) (None, 4) 32 _________________________________________________________________ dropout_2 (Dropout) (None, 4) 0 _________________________________________________________________ dense_2 (Dense) (None, 1) 5 ================================================================= Total params: 60 Trainable params: 60 Non-trainable params: 0 _________________________________________________________________ Training In [23]: loss = keras . losses . binary_crossentropy optimizer = keras . optimizers . sgd () # es = keras.callbacks.EarlyStopping(monitor='val_loss', patience=int(epochs*0.3), verbose=0, mode='auto') # ms = keras.callbacks.ModelCheckpoint(filepath=\"{epoch}epochs.h5\", monitor='val_loss', verbose=0, save_best_only=True, save_weights_only=True, mode='auto', period=1) # callbacks = [es, ms] In [24]: model_simple . compile ( loss = loss , optimizer = optimizer , metrics = [ 'accuracy' ]) model_deeper . compile ( loss = loss , optimizer = optimizer , metrics = [ 'accuracy' ]) In [25]: history_simple = model_simple . fit ( x_train , y_train , batch_size = batch_size , epochs = epochs , verbose = 0 , # callbacks=callbacks, validation_data = ( x_test , y_test ) ) In [26]: history_deeper = model_deeper . fit ( x_train , y_train , batch_size = batch_size , epochs = epochs , verbose = 0 , # callbacks=callbacks, validation_data = ( x_test , y_test ) ) Results In [27]: def plot_hist ( history , axes , name ): epochs = history . epoch val_loss = history . history . get ( \"val_loss\" ) val_acc = history . history . get ( \"val_acc\" ) loss = history . history . get ( \"loss\" ) acc = history . history . get ( \"acc\" ) ax_acc , ax_loss = axes ax_acc . plot ( epochs , acc , \"r\" , label = \"training acc\" ) ax_acc . plot ( epochs , val_acc , \"b\" , label = \"validation acc\" ) ax_acc . set_title ( f \"Training and Validation acc ( { name } )\" ) ax_acc . set_xlabel ( \"Epochs\" ), ax_acc . set_ylabel ( \"Accuracy\" ) ax_acc . legend () # Loss Plot ax_loss . plot ( epochs , loss , \"r\" , label = \"training loss\" ) ax_loss . plot ( epochs , val_loss , \"b\" , label = \"validation loss\" ) ax_loss . set_title ( f \"Training and Validation loss ( { name } )\" ) ax_loss . set_xlabel ( \"Epochs\" ), ax_loss . set_ylabel ( \"Loss\" ) ax_loss . legend () return ( ax_acc , ax_loss ) In [28]: fig , ( ax_simpel , ax_deeper ) = plt . subplots ( 2 , 2 , figsize = ( 18 , 12 ), sharex = True ) ax_simple = plot_hist ( history_simple , ax_simpel , \"simlple\" ) ax_deeper = plot_hist ( history_deeper , ax_deeper , \"deeper\" ) Evaluation In [29]: def getKernel ( model ): conv_layer = [ l for l in model . layers if l . name . startswith ( \"conv1d\" )][ 0 ] conv_weight = conv_layer . get_weights ()[ 0 ][:,:, 0 ] return conv_weight In [30]: fig , (( ax_true , ax_ini ),( ax_simple , ax_deep )) = plt . subplots ( 2 , 2 , figsize = ( 8 , 10 ), sharex = \"all\" , sharey = \"all\" ) ax_true = visMotif_std ( motif , name = \"True\" , ax = ax_true ) ax_ini = visMotif_std ( initial_kernel_weight [:,:, 0 ], name = \"initial\" , ax = ax_ini ) ax_simple = visMotif_std ( getKernel ( model_simple ), name = \"simple\" , ax = ax_simple ) ax_deep = visMotif_std ( getKernel ( model_deeper ), name = \"deeper\" , ax = ax_deep ) plt . tight_layout () In [31]: def print_score ( model , x_test , y_test , data_type = \"Test\" ): loss , acc = model . evaluate ( x_test , y_test , verbose = 0 ) print ( f \" \\t - { data_type } loss : { loss : .3f } \" ) print ( f \" \\t - { data_type } accuracy: { acc * 100 : .1f } %\" ) In [32]: print ( \"- Model Simple\" ) print_score ( model_simple , x_test , y_test ) print ( \"- Model Deeper\" ) print_score ( model_deeper , x_test , y_test ) - Model Simple - Test loss : 0.474 - Test accuracy: 86.6% - Model Deeper - Test loss : 0.693 - Test accuracy: 50.0% Trained simple model in more epochs, but not using Regularization and use_bias=True In [33]: fig , ax_simpel = plt . subplots ( 1 , 2 , figsize = ( 18 , 6 )) ax_simple = plot_hist ( history_simple , ax_simpel , \"simlple\" ) plt . tight_layout () plt . show () In [34]: model_simple . load_weights ( \"simple_model_30000epochs.h5\" ) In [35]: model_simple . compile ( loss = loss , optimizer = optimizer , metrics = [ 'accuracy' ]) In [36]: print ( \"- Model Simple\" ) print_score ( model_simple , x_train , y_train , data_type = \"Train\" ) print_score ( model_simple , x_test , y_test ) - Model Simple - Train loss : 0.447 - Train accuracy: 96.9% - Test loss : 0.450 - Test accuracy: 96.9% In [37]: fig , ( ax_true , ax_simple ) = plt . subplots ( 1 , 2 , figsize = ( 8 , 5 ), sharey = True ) ax_true = visMotif_std ( motif , name = \"True\" , ax = ax_true ) ax_simple = visMotif_std ( getKernel ( model_simple ), name = \"simple\" , ax = ax_simple ) plt . tight_layout () plt . show () Motif is well captured!! Consideration In this case, the data was too simple without any noise, so it was easier to capture the motif with a simple model without adding additional layers. future work: DeeperBind As shown in this paper ( \"DeeperBind: Enhancing Prediction of Sequence Specificities of DNA Binding Proteins\" ), DeepBind was the first deep convolutional method ever designed to address the need for accurate characterization of motifs for protein targets. Despite its name , it employs only one convolution layer followed by a non-linear thresholding, a max-pooling layer and one/two fully connected layer(s) to estimate the intensity of input probes. Therefore, it is expected that its performance will be further enhanced by using various deep learning techniques like RNN, Attention, Metric Learning, and so on. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-16.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-16.html"},{"title":"Ex.15 Neural Network","text":"解答 $$ \\begin{aligned} h_{nj}&#94;{(1)} &= \\text{sigmoid}\\left(\\sum_{i=1}&#94;mx_{ni}w_{ji}&#94;{(1)} + b_j&#94;{(1)}\\right)\\\\ \\vdots\\\\ h_{nj}&#94;{(l)} &= \\text{sigmoid}\\left(\\sum_{i}h_{ni}&#94;{(l-1)}w_{ji}&#94;{(l-1)} + b_j&#94;{(l-1)}\\right)\\\\ y_{nj} &= \\text{softmax}_j\\left(\\right) \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-15.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-15.html"},{"title":"Ex.14 Brownian motion","text":"解答 1 \\(n=n\\) の時に以下が成立すると仮定する。 $$p\\left(x_n|x_0\\right) = \\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2n}}\\exp\\left(-\\frac{1}{2\\sigma_s&#94;2n}\\left(x_n-x_0\\right)&#94;2\\right)$$ すると、 $$ \\begin{aligned} p\\left(x_{n+1}|x_0\\right) &= \\int_{-\\infty}&#94;{\\infty}dx_np\\left(x_{n+1}|x_n\\right)p\\left(x_n|x_0\\right)\\\\ &= \\int_{-\\infty}&#94;{\\infty}dx_n\\left(\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2}}\\exp\\left(-\\frac{1}{2\\sigma_s&#94;2}\\left(x_{n+1}-x_n\\right)&#94;2\\right)\\right)\\left(\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2n}}\\exp\\left(-\\frac{1}{2\\sigma_s&#94;2n}\\left(x_n-x_0\\right)&#94;2\\right)\\right)\\\\ &= \\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2}}\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2n}}\\int_{-\\infty}&#94;{\\infty}dx_n\\exp\\left\\{-\\frac{1}{2\\sigma_s&#94;2}\\left(\\left(x_{n+1}-x_n\\right)&#94;2 +\\frac{1}{n}\\left(x_n-x_0\\right)&#94;2\\right)\\right\\}\\\\ \\end{aligned} $$ ここで、 \\(\\exp\\) の内部を \\(x_n\\) に注目すると、 $$ \\begin{aligned} &\\left(x_{n+1}-x_n\\right)&#94;2 +\\frac{1}{n}\\left(x_n-x_0\\right)&#94;2\\\\ &=\\frac{n+1}{n}x_n&#94;2 + 2\\left(x_{n+1}+\\frac{x_0}{n}\\right)x_n + \\left(x_{n+1}&#94;2 + \\frac{1}{n}x_0&#94;2\\right)\\\\ &=\\frac{n+1}{n}\\left(x_n-\\frac{n}{n+1}\\left(x_{n+1}+\\frac{x_0}{n}\\right)\\right)&#94;2 + \\frac{1}{n+1}\\left(x_{n+1}-x_0\\right)&#94;2 \\end{aligned} $$ と整理できる。また、ガウス積分より上式の第1項は、 $$ \\int_{-\\infty}&#94;{\\infty}dx_n\\exp\\left(-\\frac{1}{2\\sigma_s&#94;2}\\frac{n+1}{n}\\left(x_n-\\frac{n}{n+1}\\left(x_{n+1}+\\frac{x_0}{n}\\right)\\right)&#94;2\\right) = \\sqrt{2\\pi\\sigma_s&#94;2\\frac{n}{n+1}} $$ と積分できる。したがって、これらを代入して、 $$ \\begin{aligned} p\\left(x_{n+1}|x_0\\right) &= \\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2}}\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2n}}\\int_{-\\infty}&#94;{\\infty}dx_n\\exp\\left\\{-\\frac{1}{2\\sigma_s&#94;2}\\left(\\left(x_{n+1}-x_n\\right)&#94;2 +\\frac{1}{n}\\left(x_n-x_0\\right)&#94;2\\right)\\right\\}\\\\ &= \\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2}}\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2n}}\\left(\\sqrt{2\\pi\\sigma_s&#94;2\\frac{n}{n+1}}\\right)\\exp\\left\\{-\\frac{1}{2\\sigma_s&#94;2}\\frac{1}{n+1}\\left(x_{n+1}-x_0\\right)&#94;2\\right\\}\\\\ &=\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2\\left(n+1\\right)}}\\exp\\left(-\\frac{1}{2\\sigma_s&#94;2\\left(n+1\\right)}\\left(x_{n+1}-x_0\\right)&#94;2\\right) \\end{aligned} $$ 以上より、帰納法から題意が示せた。 2 $$ \\begin{aligned} \\frac{\\partial p}{\\partial t} &=\\frac{1}{\\sqrt{2\\pi\\sigma&#94;2}}\\left(-\\frac{1}{2}t&#94;{-\\frac{3}{2}} + \\frac{\\left(x-y\\right)&#94;2}{2\\sigma&#94;2}t&#94;{-\\frac{5}{2}}\\right)\\exp\\left(-\\frac{1}{2\\sigma&#94;2t}\\left(x-y\\right)&#94;2\\right)\\\\ \\frac{\\partial p}{\\partial x} &= \\frac{1}{\\sqrt{2\\pi\\sigma&#94;2t}}\\left(-\\frac{1}{\\sigma&#94;2t}\\left(x-y\\right)\\right)\\exp\\left(-\\frac{1}{2\\sigma&#94;2t}\\left(x-y\\right)&#94;2\\right)\\\\ \\frac{\\partial&#94;2 p}{\\partial x&#94;2} &= \\frac{1}{\\sqrt{2\\pi\\sigma&#94;2t}}\\left(-\\frac{1}{\\sigma&#94;2t}-\\frac{1}{\\sigma&#94;2t}\\left(x-y\\right)\\left(-\\frac{x-y}{\\sigma&#94;2t}\\right)\\right)\\exp\\left(-\\frac{1}{2\\sigma&#94;2t}\\left(x-y\\right)&#94;2\\right)\\\\ &=\\frac{1}{\\sqrt{2\\pi\\sigma&#94;2}}\\frac{1}{\\sqrt{t}}\\left(\\frac{1}{\\sigma&#94;2t}\\right)\\left(-1 + \\frac{\\left(x-y\\right)&#94;2}{\\sigma&#94;2t}\\right)\\exp\\left(-\\frac{1}{2\\sigma&#94;2t}\\left(x-y\\right)&#94;2\\right)\\\\ &=\\frac{1}{\\sqrt{2\\pi\\sigma&#94;2}}\\left(\\frac{1}{\\sigma&#94;2}\\right)\\left(-t&#94;{-\\frac{3}{2}} + \\frac{\\left(x-y\\right)&#94;2}{\\sigma&#94;2}t&#94;{-\\frac{5}{2}}\\right)\\exp\\left(-\\frac{1}{2\\sigma&#94;2t}\\left(x-y\\right)&#94;2\\right)\\\\ &=\\frac{2}{\\sigma&#94;2}\\frac{\\partial p}{\\partial t} \\end{aligned} $$ より、題意が示された。 これにより、 「ミクロスコピックな」 ブラウン運動から 「マクロスコピックな」 拡散方程式を導出できた。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-14.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-14.html"},{"title":"Ex.13 Sparse Modeling","text":"解答 1 $$ \\begin{aligned} \\frac{\\partial}{\\partial\\mathbf{w}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) &=\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\frac{1}{2}\\|\\mathbf{y}-\\mathbf{Xw}\\|_{\\text{L2}}&#94;2 + \\lambda\\|\\mathbf{z}\\|_{\\text{L1}} + \\boldsymbol{\\alpha}&#94;T\\left(\\mathbf{w}-\\mathbf{z}\\right) + \\frac{\\rho}{2}\\|\\mathbf{w}-\\mathbf{z}\\|&#94;2_{\\text{L2}}\\right)\\\\ &=\\left(-\\mathbf{X}&#94;T\\mathbf{y} + \\mathbf{X}&#94;T\\mathbf{Xw}\\right) + \\boldsymbol{\\alpha} + \\rho\\left(\\mathbf{w}-\\mathbf{z}\\right)\\\\ &= 0\\\\ \\therefore\\left(\\mathbf{X}&#94;T\\mathbf{X} + \\rho\\mathbf{I}\\right)\\mathbf{w} &= \\mathbf{X}&#94;T\\mathbf{y} - \\boldsymbol{\\alpha} + \\rho\\mathbf{z}\\\\ \\therefore\\underset{\\mathbf{w}}{\\text{argmin}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) &= \\left(\\mathbf{X}&#94;T\\mathbf{X} + \\rho\\mathbf{I}\\right)&#94;{-1}\\left(\\mathbf{X}&#94;T\\mathbf{y} - \\boldsymbol{\\alpha} + \\rho\\mathbf{z}\\right) \\end{aligned} $$ 2 $z$ の正負で場合分けをすれば、 $$ \\begin{aligned} \\underset{z}{\\text{argmin}}\\left\\{c|z| + \\frac{1}{2}\\left(z-z_0\\right)&#94;2\\right\\} &= \\begin{cases}z_0-c & \\left(z>0\\right)\\\\z_0+c & \\left(0>z\\right)\\\\0&\\left(\\text{otherwise.}\\right)\\\\\\end{cases}\\\\ &= \\begin{cases}z_0-c & \\left(z_0>c\\right)\\\\z_0+c & \\left(-c>z_0\\right)\\\\0&\\left(\\text{otherwise.}\\right)\\end{cases}\\\\ \\end{aligned} $$ 3 $$ \\begin{aligned} \\underset{z_i}{\\text{argmin}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) &= \\underset{z_i}{\\text{argmin}}\\left\\{\\lambda\\|z_i\\|_{\\text{L1}} - \\alpha_iz_i + \\frac{\\rho}{2}\\left(-2w_iz_i + z_i&#94;2\\right)\\right\\}\\\\ &= \\underset{z_i}{\\text{argmin}}\\left\\{\\lambda\\|z_i\\|_{\\text{L1}} + \\frac{\\rho}{2}\\left(z&#94;2_i - 2\\left(w_i + \\frac{\\alpha_i}{\\rho}\\right)z_i\\right)\\right\\}\\\\ &= \\underset{z_i}{\\text{argmin}}\\left\\{\\frac{\\lambda}{\\rho}\\|z_i\\|_{\\text{L1}} + \\frac{1}{2}\\left(z_i-\\left(w_i + \\frac{\\alpha_i}{\\rho}\\right)\\right)&#94;2\\right\\}\\\\ \\end{aligned} $$ これは、$2$ の式において $$ \\begin{cases} \\begin{aligned} c&\\longrightarrow\\frac{\\lambda}{\\rho}\\\\ z_0&\\longrightarrow w_i + \\frac{\\alpha_i}{\\rho} \\end{aligned} \\end{cases} $$ とした場合に対応する。以上より、 $$\\underset{\\mathbf{z}}{\\text{argmin}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) = \\text{prox}_{\\frac{\\lambda}{\\rho}|\\ast|}\\left(w_i + \\frac{\\alpha_i}{\\rho}\\right)$$ ここでは、 「L1正則化項の下での線形回帰問題」 を考えた。全体の流れは以下 二乗和誤差関数 $\\frac{1}{2}\\|\\mathbf{y}-\\mathbf{Xw}\\|&#94;2$ にL1正則化項を加えた誤差関数を定義する。（$\\lambda$ は手動で決定。） 解析的に最小解を求めるのが難しいので、新しい変数 $\\mathbf{z}$ を代入してそれぞれ独立の変数としてみる。 とはいえ $\\mathbf{z}=\\mathbf{w}$ という関係は成り立っているので、ラグランジュ乗数 $\\{\\alpha_i\\}$ を導入して、制約条件を付け加える。 $$L\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) = \\frac{1}{2}\\|\\mathbf{y}-\\mathbf{Xw}\\|_{\\text{L2}}&#94;2 + \\lambda\\|\\mathbf{z}\\|_{\\text{L1}} + \\boldsymbol{\\alpha}&#94;T\\left(\\mathbf{w}-\\mathbf{z}\\right)$$ このままでも良いが、凸性を増すために、制約条件を二次の形で加える。この式を 拡張ラグランジュ関数(Augmented Lagrangian) と呼ぶ。 [参考:知能システム論 第3回] $$L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) = \\frac{1}{2}\\|\\mathbf{y}-\\mathbf{Xw}\\|_{\\text{L2}}&#94;2 + \\lambda\\|\\mathbf{z}\\|_{\\text{L1}} + \\boldsymbol{\\alpha}&#94;T\\left(\\mathbf{w}-\\mathbf{z}\\right) + \\rho\\|\\mathbf{w}-\\mathbf{z}\\|_{\\text{L2}}&#94;2$$ 解析的に求めることができないので、拡張ラグランジュ関数の最小化と双対変数の勾配上昇を繰り返す。 拡張ラグランジュ関数の最小化 $$\\begin{aligned}\\mathbf{w}&\\longleftarrow \\underset{\\mathbf{w}}{\\text{argmin}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right)\\quad \\text{with fixed $\\mathbf{z},\\boldsymbol{\\alpha}$}\\\\\\mathbf{z}&\\longleftarrow \\underset{\\mathbf{z}}{\\text{argmin}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right)\\quad \\text{with fixed $\\mathbf{w},\\boldsymbol{\\alpha}$}\\\\\\end{aligned}$$ 双対変数の勾配上昇 $$\\boldsymbol{\\alpha}\\longleftarrow\\boldsymbol{\\alpha} + \\rho\\nabla\\omega\\left(\\boldsymbol{\\alpha}\\right) = \\boldsymbol{\\alpha} + \\rho\\left(\\mathbf{w}-\\mathbf{z}\\right)$$ 実装 以下では、実際に「線形回帰」「L1正則化項の下での線形回帰」「L2正則化項の下での線形回帰」のそれぞれを実装し、違いや特徴を調べる。 結論 以下のような違いが出た。 線形回帰 L1正則化項の下での線形回帰 L2正則化項の下での線形回帰 In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: from kerasy.utils.data_generator import generateSin , generateGausian sample data In [3]: N = 10 # data size xmin = 0 xmax = 1 seed = 0 In [4]: X_test_ori = np . linspace ( xmin , xmax , 1000 ) Y_test = np . sin ( 2 * np . pi * X_test_ori ) In [5]: X_train_ori , Y_train = generateSin ( N , xmin = xmin , xmax = xmax , seed = seed ) _ , Noise = generateGausian ( N , x = X_train_ori , seed = seed ) Y_train += Noise In [6]: plt . scatter ( X_train_ori , Y_train , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) plt . plot ( X_test_ori , Y_test , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) plt . legend (), plt . grid () plt . show () Training In [7]: from kerasy.utils.preprocessing import PolynomialBaseTransformer In [8]: Ms = [ 2 , 4 , 8 , 16 ] Linear Regression In [9]: fig = plt . figure ( figsize = ( 16 , 6 )) for i , M in enumerate ( Ms ): axT = fig . add_subplot ( 2 , 4 , i + 1 ) #=== Transform === phi = PolynomialBaseTransformer ( M ) X_train = phi . transform ( X_train_ori ) X_test = phi . transform ( X_test_ori ) #=== Training === w = np . linalg . solve ( X_train . T . dot ( X_train ), X_train . T . dot ( Y_train )) Y_pred = X_test . dot ( w ) #=== RSS === RSS = np . sqrt ( np . sum ( np . square ( X_train . dot ( w ) - Y_train ))) # Plot. axT . plot ( X_test_ori , Y_test , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) axT . plot ( X_test_ori , Y_pred , color = \"red\" , label = f \"prediction ($M= { M } $)\" ) axT . scatter ( X_train_ori , Y_train , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) axT . set_title ( f \"Results (RSS=$ { RSS : .3f } $,M=$ { M } $)\" ), axT . set_xlabel ( \"$x$\" ), axT . set_ylabel ( \"$t$\" ) axT . set_xlim ( 0 , 1 ), axT . set_ylim ( - 1.2 , 1.2 ), axT . legend () axB = fig . add_subplot ( 2 , 4 , i + 5 ) axB . barh ( np . arange ( len ( w )), w , color = \"black\" ) axB . set_ylim ( 0 , max ( Ms )) plt . tight_layout () plt . savefig ( f \"LinearRegression_seed { seed } .png\" ) plt . show () Linear Regression + L2 norm In [10]: lambda_ = 1e-4 In [11]: fig = plt . figure ( figsize = ( 16 , 6 )) for i , M in enumerate ( Ms ): axT = fig . add_subplot ( 2 , 4 , i + 1 ) #=== Transform === phi = PolynomialBaseTransformer ( M ) X_train = phi . transform ( X_train_ori ) X_test = phi . transform ( X_test_ori ) #=== Training === w = np . linalg . solve ( lambda_ * np . identity ( M + 1 ) + X_train . T . dot ( X_train ), X_train . T . dot ( Y_train )) Y_pred = X_test . dot ( w ) #=== RSS === RSS = np . sqrt ( np . sum ( np . square ( X_train . dot ( w ) - Y_train ))) # Plot. axT . plot ( X_test_ori , Y_test , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) axT . plot ( X_test_ori , Y_pred , color = \"red\" , label = f \"prediction ($M= { M } $)\" ) axT . scatter ( X_train_ori , Y_train , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) axT . set_title ( f \"Results (RSS=$ { RSS : .3f } $,M=$ { M } $)\" ), axT . set_xlabel ( \"$x$\" ), axT . set_ylabel ( \"$t$\" ) axT . set_xlim ( 0 , 1 ), axT . set_ylim ( - 1.2 , 1.2 ), axT . legend () axB = fig . add_subplot ( 2 , 4 , i + 5 ) axB . barh ( np . arange ( len ( w )), w , color = \"black\" ) axB . set_ylim ( 0 , max ( Ms )) plt . tight_layout () plt . savefig ( f \"LinearRegression_L2_seed { seed } .png\" ) plt . show () Linear Regression + L1 norm In [12]: lambda_ = 1e-3 rho = 1e-3 In [13]: def prox ( w , alpha , rho , lambda_ ): z0 = w + alpha / rho c = lambda_ / rho return z0 - c if c < z0 else z0 + c if z0 <- c else 0 In [14]: fig = plt . figure ( figsize = ( 16 , 6 )) for i , M in enumerate ( Ms ): axT = fig . add_subplot ( 2 , 4 , i + 1 ) #=== Transform === phi = PolynomialBaseTransformer ( M ) X_train = phi . transform ( X_train_ori ) X_test = phi . transform ( X_test_ori ) #=== Training === alpha = np . ones ( shape = ( M + 1 )) z = np . ones ( shape = ( M + 1 )) while True : w = np . linalg . solve ( X_train . T . dot ( X_train ) + rho * np . identity ( M + 1 ), X_train . T . dot ( Y_train ) - alpha + rho * z ) z = np . asarray ([ prox ( w_ , alpha_ , rho , lambda_ ) for w_ , alpha_ in zip ( w , alpha )]) alpha += rho * ( w - z ) if np . sqrt ( np . sum ( np . square ( w - z ))) < 1e-9 : break Y_pred = X_test . dot ( w ) #=== RSS === RSS = np . sqrt ( np . sum ( np . square ( X_train . dot ( w ) - Y_train ))) # Plot. axT . plot ( X_test_ori , Y_test , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) axT . plot ( X_test_ori , Y_pred , color = \"red\" , label = f \"prediction ($M= { M } $)\" ) axT . scatter ( X_train_ori , Y_train , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) axT . set_title ( f \"Results (RSS=$ { RSS : .3f } $,M=$ { M } $)\" ), axT . set_xlabel ( \"$x$\" ), axT . set_ylabel ( \"$t$\" ) axT . set_xlim ( 0 , 1 ), axT . set_ylim ( - 1.2 , 1.2 ), axT . legend () axB = fig . add_subplot ( 2 , 4 , i + 5 ) axB . barh ( np . arange ( len ( w )), w , color = \"black\" ) axB . set_ylim ( 0 , max ( Ms )) plt . tight_layout () plt . savefig ( f \"LinearRegression_L1_seed { seed } .png\" ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-13.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-13.html"},{"title":"Ex.12 Order Statistics","text":"解答 1 $$\\mathbb{F}_{X_h}(x)\\equiv\\mathbb{P}\\left(X_h\\leq x\\right) = \\int_0&#94;x1dx&#94;{\\prime} = x$$ 2 $$\\begin{aligned} \\mathbb{F}_{X_{\\max}}(x) &\\equiv\\mathbb{P}\\left(X_{\\max}\\leq x\\right) = \\mathbb{P}\\left(X_{(1)}\\leq x,X_{(2)}\\leq x,\\ldots,X_{(n)}\\leq x\\right)\\\\ &=\\int_0&#94;x1dx_{(1)}&#94;{\\prime}\\int_0&#94;x1dx_{(2)}&#94;{\\prime}\\cdots\\int_0&#94;x1dx_{(n)}&#94;{\\prime} = x&#94;n \\end{aligned}$$ 3 $$f_{X_{\\max}}(x) = \\frac{d\\mathbb{F}_{X_{\\max}}}{dx}(x) = \\frac{d}{dx}x&#94;n = nx&#94;{n-1}$$ 4 $$\\mathbb{E}\\left(X_{\\max}\\right) = \\int_0&#94;1xf_{X_{\\max}}(x)dx = \\int_0&#94;1nx&#94;ndx = \\frac{n}{n+1}\\left[x&#94;{n+1}\\right]_0&#94;1 = \\frac{n}{n+1}$$ 5 $$\\begin{aligned} \\mathbb{F}_{X_{\\min}}(x) &\\equiv\\mathbb{P}\\left(X_{\\min}\\leq x\\right) = 1 - \\mathbb{P}\\left(X_{(1)}> x,X_{(2)}> x,\\ldots,X_{(n)}> x\\right)\\\\ &=1 - \\int_x&#94;11dx_{(1)}&#94;{\\prime}\\int_x&#94;11dx_{(2)}&#94;{\\prime}\\cdots\\int_x&#94;11dx_{(n)}&#94;{\\prime} = 1 - \\left(1-x\\right)&#94;n \\end{aligned}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-12.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-12.html"},{"title":"Ex.11 Data Assimilation","text":"解答 1 最適性条件より、最適な \\(\\{x_i\\},\\{\\lambda_i\\},\\theta\\) の下では、 $$ \\begin{cases} \\begin{aligned} \\frac{\\partial L}{\\partial x_i} &= 0 & (i=1,\\ldots,n+1)\\\\ \\frac{\\partial L}{\\partial \\lambda_i} &= 0 & (i=1,\\ldots,n+1)\\\\ \\frac{\\partial L}{\\partial\\theta} &= 0 \\end{aligned} \\end{cases} $$ が成り立つので、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x_i} &= \\frac{\\partial J_D\\left(x_1,\\ldots,x_n\\right)}{\\partial x_i} - \\left(\\lambda_i - \\lambda_{i+1}\\frac{\\partial F\\left(x_i,\\theta\\right)}{\\partial x_i}\\right) = 0\\\\ \\therefore \\lambda_i &= \\lambda_{i+1}\\frac{\\partial F\\left(x_i,\\theta\\right)}{\\partial x_i} + \\frac{\\partial J_D\\left(x_1,\\ldots,x_n\\right)}{\\partial x_i} \\end{aligned} $$ となる。特に、 \\(i=n+1\\) に関しては、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x_{n+1}} &= \\frac{\\partial J_D\\left(x_1,\\ldots,x_n\\right)}{\\partial x_{n+1}} - \\lambda_{n+1} = -\\lambda_{n+1} = 0\\\\ \\therefore \\lambda_{n+1} &= 0 \\end{aligned} $$ が成り立つ。 2 $$ \\begin{aligned} x_{i+1} &= F\\left(x_i;\\theta\\right)\\\\ \\frac{\\partial x_{i+1}}{\\partial\\theta} &= \\frac{\\partial F\\left(x_i;\\theta\\right)}{\\partial\\theta}\\\\ &= \\frac{\\partial F}{\\partial x}\\left(x_i;\\theta\\right)\\frac{}{} \\end{aligned} $$ a if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-11.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-11.html"},{"title":"Ex.10 Expectation Maximization Algorithm","text":"解答 1 $$ \\begin{aligned} &\\mathcal{Q}_{\\text{EM}}\\left(\\theta|\\theta&#94;{\\prime}\\right) + H\\left(\\theta&#94;{\\prime}\\right) + \\mathrm{KL}\\left(\\theta&#94;{\\prime}\\|\\theta\\right)\\\\ =&\\sum_{h=1}&#94;n\\sum_{z_h}\\log\\left(p\\left(x_h,z_h|\\theta\\right)\\right)\\frac{p\\left(x_h,z_h|\\theta&#94;{\\prime}\\right)}{p\\left(x_h|\\theta&#94;{\\prime}\\right)} - \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\right)\\\\ &+ \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(\\frac{p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)}{p\\left(z_h|x_h,\\theta\\right)}\\right)\\\\ =&\\sum_{h=1}&#94;n\\sum_{z_h}\\log\\left(p\\left(x_h,z_h|\\theta\\right)\\right)\\frac{p\\left(x_h,z_h|\\theta&#94;{\\prime}\\right)}{p\\left(x_h|\\theta&#94;{\\prime}\\right)} - \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(p\\left(z_h|x_h,\\theta\\right)\\right)\\\\ =&\\sum_{h=1}&#94;n\\sum_{z_h}\\log\\left(p\\left(x_h,z_h|\\theta\\right)\\right)p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right) - \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(p\\left(z_h|x_h,\\theta\\right)\\right)\\quad\\left(\\because\\text{ Conditional probability}\\right)\\\\ =&\\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(p\\left(x_h|\\theta\\right)\\right)\\quad\\left(\\because\\text{ Conditional probability}\\right)\\\\ =&\\sum_{h=1}&#94;n\\log\\left(p\\left(x_h|\\theta\\right)\\right)\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\\\ =&\\sum_{h=1}&#94;n\\log\\left(p\\left(x_h|\\theta\\right)\\right)\\quad\\left(\\because\\text{ Marginalization}\\right)\\\\ =&l\\left(\\theta|D\\right) \\end{aligned} $$ 2 $$ \\begin{aligned} \\mathrm{KL}\\left(\\theta&#94;{\\prime}\\|\\theta\\right)|_{\\theta=\\theta&#94;{\\prime}} &= \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(\\frac{p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)}{p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)}\\right)\\\\ &= \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\cdot\\log(1) = 0\\\\ \\end{aligned} $$ より、 \\(\\theta=\\theta&#94;{\\prime}\\) で \\(l\\left(\\theta|D\\right) = \\mathcal{Q}_{\\text{EM}}\\left(\\theta|\\theta&#94;{\\prime}\\right)+H\\left(\\theta&#94;{\\prime}\\right)\\) また、 $$ \\begin{aligned} \\frac{\\partial}{\\partial\\theta}l\\left(\\theta|D\\right)|_{\\theta=\\theta&#94;{\\prime}} &= \\sum_{h=1}&#94;n\\frac{\\partial}{\\partial\\theta}\\left(\\log\\left(p\\left(x_h|\\theta\\right)\\right)\\right)|_{\\theta=\\theta&#94;{\\prime}}\\\\ &=\\sum_{h=1}&#94;n\\frac{1}{p\\left(x_h|\\theta&#94;{\\prime}\\right)}\\frac{\\partial}{\\partial\\theta}\\left(p\\left(x_h|\\theta\\right)\\right)|_{\\theta=\\theta&#94;{\\prime}}\\\\ \\frac{\\partial}{\\partial\\theta}\\left(\\mathcal{Q}_{\\text{EM}}\\left(\\theta|\\theta&#94;{\\prime}\\right) + H\\left(\\theta&#94;{\\prime}\\right)\\right)|_{\\theta=\\theta&#94;{\\prime}} &=\\sum_{h=1}&#94;n\\sum_{z_h}\\frac{\\frac{\\partial}{\\partial\\theta}\\left(p\\left(x_h,z_h|\\theta\\right)\\right)}{p\\left(x_h,z_h|\\theta\\right)}|_{\\theta=\\theta&#94;{\\prime}}\\frac{p\\left(x_h,z_h|\\theta&#94;{\\prime}\\right)}{p\\left(x_h|\\theta&#94;{\\prime}\\right)}\\\\ &= \\sum_{h=1}&#94;n\\frac{1}{p\\left(x_h|\\theta&#94;{\\prime}\\right)}\\sum_{z_h}\\frac{\\partial}{\\partial\\theta}\\left(p\\left(x_h,z_h|\\theta\\right)\\right)|_{\\theta=\\theta&#94;{\\prime}}\\\\ &=\\sum_{h=1}&#94;n\\frac{1}{p\\left(x_h|\\theta&#94;{\\prime}\\right)}\\frac{\\partial}{\\partial\\theta}\\left(p\\left(x_h|\\theta\\right)\\right)|_{\\theta=\\theta&#94;{\\prime}} \\end{aligned} $$ となるので、 \\(\\theta\\) に関する一階微分に関しても先の等式が成り立つ。 ゆえに、題意が成り立つ。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-10.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-10.html"},{"title":"Ex.9 Kullback-Leibler Divergence","text":"解答 1 $$ \\begin{cases} \\begin{aligned} g(1) &= 1-1=0 & g&#94;{\\prime}(1) &= 1-0 = 1\\\\ h(1) &= \\log(1)=0 &h;&#94;{\\prime}(1)&= \\frac{1}{1} = 1 \\end{aligned} \\end{cases} $$ より、接する。実際にグラフを描いて確かめてみる。 In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: g = lambda x : x - 1 h = lambda x : np . log ( x ) In [3]: X = np . linspace ( 1e-2 , 5 , 1000 ) In [4]: plt . plot ( X , g ( X ), color = \"red\" , label = \"$g(x)=x-1$\" ), plt . scatter ( 1 , g ( 1 ), color = \"red\" , s = 100 , alpha = 0.5 ) plt . plot ( X , h ( X ), color = \"blue\" , label = \"$h(x)=\\log(x)$\" ), plt . scatter ( 1 , h ( 1 ), color = \"blue\" , s = 100 , alpha = 0.5 ) plt . grid (), plt . xlabel ( \"$x$\" ), plt . ylabel ( \"$y$\" ), plt . legend () plt . show () 2 $d(x) = x-1-\\log(x)$ は、$1$ で調べたように $x=1$ で $d(1) = 0$ となる。 また、$d&#94;{\\prime}(x) = \\begin{cases}1-\\frac{1}{x} > 0 & (\\text{when $x>1$})\\\\1-\\frac{1}{x} \\leq 0 & (\\text{when $x\\leq1$})\\end{cases}$ となることから、$d$ は $1>x>0$ で単調減少し、$x>1$ で単調増加することがわかる。 以上より、題意が成立する。ついでにこのグラフも描いてみる。 In [5]: plt . plot ( X , g ( X ) - h ( X ), color = \"green\" , label = \"$d(x)=x-1-\\log(x)$\" ), plt . scatter ( 1 , g ( 1 ) - h ( 1 ), color = \"green\" , label = \"$x=1$\" , s = 100 ) plt . axvspan ( 1 , 5 , color = \"red\" , alpha = 0.2 ), plt . axvspan ( 0 , 1 , color = \"blue\" , alpha = 0.2 ) plt . grid (), plt . xlabel ( \"$x$\" ), plt . ylabel ( \"$y$\" ), plt . legend () plt . show () 3 $p_k>0$ だから、 $$ \\begin{aligned} p_kd\\left(\\frac{q_k}{p_k}\\right) &= p_k\\left(\\frac{q_k}{p_k} - 1 - \\log\\left(\\frac{q_k}{p_k}\\right)\\right)\\\\ &= q_k - p_k + p_k\\log\\left(\\frac{p_k}{q_k}\\right)\\\\ &\\geq0\\quad\\left(\\text{with equality if and only if $p_k=q_k$}\\right)\\\\ \\therefore p_k\\log\\left(\\frac{p_k}{q_k}\\right) &\\geq p_k-q_k\\\\ \\sum_{k=1}&#94;mp_k\\log\\left(\\frac{p_k}{q_k}\\right) &\\geq \\sum_{k=1}&#94;m\\left(p_k-q_k\\right)\\quad\\left(\\text{with equality if and only if $p_k=q_k$, giving $k=1,\\ldots,m$}\\right)\\\\ \\therefore \\mathrm{KL}\\left(p\\|q\\right) &\\geq 0 \\end{aligned} $$ 4 $$ \\begin{aligned} \\hat{\\boldsymbol{\\theta}} &= \\underset{\\boldsymbol{\\theta}}{\\text{argmin}} \\mathrm{KL}\\left(p_D\\|q_{\\boldsymbol{\\theta}}\\right)\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmin}} \\int p_D(x)\\log\\left(\\frac{p_D(x)}{q_{\\boldsymbol{\\theta}}(x)}\\right)dx\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmin}} \\sum_{k=1}&#94;np_D(x_k)\\log\\left(\\frac{p_D(x_k)}{q_{\\boldsymbol{\\theta}}(x_k)}\\right)\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmin}} \\left(-\\sum_{k=1}&#94;np_D(x_k)\\log\\left(q_{\\boldsymbol{\\theta}}(x_k)\\right)\\right)\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}} \\sum_{k=1}&#94;n\\frac{1}{n}\\log\\left(p\\left(x_k|\\boldsymbol{\\theta}\\right)\\right) \\end{aligned} $$ したがって、題意が成り立つ。 これは、 「経験分布 $p_D$ に対するモデル分布 $q_{\\boldsymbol{\\theta}}$ の Kullback-Leibler Divergence の 最小化 「経験分布 $p_D$ について平均をとったモデル分布 $q_{\\boldsymbol{\\theta}}$ の対数尤度 の 最大化 が等しいことを表す。 KL Divergence 以下では、問題と直接関係ないが、いくつかの確率分布で 実際にKL-Divergenceを求めてみる。 確率分布名 scipy クラス 正規分布 stats.norm ベータ分布 stats.beta $\\chi$ 二乗分布 stats.chi2 F分布 stats.f ガンマ分布 stats.gamma t分布 stats.t 一様分布 stat.uniform In [6]: from scipy import stats In [7]: N = 1000 xmin = - 3 xmax = 3 In [8]: x = np . linspace ( xmin , xmax , N ) y = stats . norm . pdf ( x ) dXs = np . arange ( - 1 , 0.2 , 0.2 ) In [9]: n_fig = len ( dXs ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 In [10]: def KL_diver ( P , Q ): return np . sum ([ q * np . log ( q / p ) for p , q in zip ( P , Q )]) In [11]: fig = plt . figure ( figsize = ( 6 * n_col , 4 * n_row )) for i , dx in enumerate ( dXs ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) y_ = stats . norm . pdf ( x + dx ) ax . plot ( x , y , \"b\" ), ax . fill_between ( x , 0 , y , color = \"b\" , alpha = 0.3 ) ax . plot ( x , y_ , \"r\" ), ax . fill_between ( x , 0 , y_ , color = \"r\" , alpha = 0.3 ) ax . set_title ( f \"KL Divergence: { KL_diver ( y , y_ ) : .2f } \" ) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-9.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-9.html"},{"title":"Ex.8 Multivariate Normal Distribution","text":"解答 1 $$ \\begin{aligned} \\int_{\\mathbb{R}&#94;m}f_X(\\mathbf{x})d&#94;mx &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|\\boldsymbol{\\Sigma}\\right|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}}\\exp\\left(-\\frac{1}{2}\\left(x_1&#94;2 + \\cdots + x_m&#94;2\\right)\\right)d&#94;mx\\\\ &=\\prod_{k=1}&#94;m\\int_{\\mathbb{R}}\\frac{1}{\\sqrt{2\\pi}}\\exp\\left(-\\frac{1}{2}x_k&#94;2\\right)dx_k\\\\ &=1 \\end{aligned} $$ 上では、以下の ガウス積分 を用いた。 $$I = \\int_{-\\infty}&#94;{\\infty}e&#94;{-ax&#94;2}dx = \\int_{-\\infty}&#94;{\\infty}e&#94;{-ay&#94;2}dy$$ を考える。ここで、 $$\\begin{aligned} I&#94;2 &= \\left(\\int_{-\\infty}&#94;{\\infty}e&#94;{-ax&#94;2}dx\\right)&#94;2\\\\ &= \\left(\\int_{-\\infty}&#94;{\\infty}e&#94;{-ax&#94;2}dx\\right)\\left(\\int_{-\\infty}&#94;{\\infty}e&#94;{-ay&#94;2}dy\\right)\\\\ &=\\int_{\\infty}&#94;{\\infty}dx\\int_{-\\infty}&#94;{\\infty}dye&#94;{-a(x&#94;2+y&#94;2)}\\\\ &= \\int_0&#94;{\\infty}rdr\\int_0&#94;{2\\pi}d\\theta e&#94;{-ar&#94;2}\\\\ &= 2\\pi\\left[-\\frac{1}{2a}e&#94;{-ar&#94;2}\\right]_0&#94;{\\infty}\\\\ &= \\frac{\\pi}{a}\\\\ \\therefore I&= \\sqrt{\\frac{\\pi}{a}} \\end{aligned}$$ 2 \\(\\Sigma\\) が実対称行列なので、実直交行列 \\(O\\) を用いて \\(\\Sigma = O\\Lambda O&#94;T\\) と対角化できる。（ \\(\\Lambda = \\left(\\lambda_1,\\ldots,\\lambda_m\\right)\\) ） したがって、 $$ \\begin{aligned} \\int_{\\mathbb{R}&#94;m}f_X(\\mathbf{x})d&#94;mx &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|\\Sigma\\right|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)&#94;T\\Sigma&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|O\\Lambda O&#94;T\\right|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)&#94;T\\left(O\\Lambda O&#94;T\\right)&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|\\Lambda\\right|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(O&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)&#94;T\\Lambda&#94;{-1}\\left(O&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|\\Lambda\\right|&#94;{1/2}}\\exp\\left(\\sum_{k=1}&#94;m-\\frac{1}{2}\\mathbf{o}_k&#94;{-1T}(x_k-\\mu_k)\\lambda_k&#94;{-1}\\mathbf{o}_k&#94;{-1}(x_k-\\mu_k)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\sum_{k=1}&#94;m\\lambda_k&#94;{1/2}}\\exp\\left(\\sum_{k=1}&#94;m-\\frac{1}{2}(x_k-\\mu_k)\\lambda_k&#94;{-1}(x_k-\\mu_k)\\right)d&#94;mx\\\\ &= \\prod_{k=1}&#94;m\\int_{\\mathbb{R}}\\frac{1}{(2\\pi)&#94;{1/2}\\lambda_k&#94;{(1/2)}}\\exp\\left(-\\frac{1}{2}\\lambda_k&#94;{-1}y_k&#94;2\\right)dy_k\\\\ &= \\prod_{k=1}&#94;m\\frac{1}{(2\\pi)&#94;{1/2}\\lambda_k&#94;{(1/2)}}\\sqrt{\\frac{2\\pi}{\\lambda_k&#94;{-1}}}\\\\ &= 1 \\end{aligned} $$ 3 \\(2\\) と同様に考えて、 $$ \\begin{aligned} \\mathbb{E}\\left(X_k\\right) &= \\int_{\\mathbb{R}&#94;m}x_kf_X(\\mathbf{x})d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\sum_{k=1}&#94;m\\lambda_k&#94;{1/2}}x_k\\exp\\left(\\sum_{k=1}&#94;m-\\frac{1}{2}(x_k-\\mu_k)\\lambda_k&#94;{-1}(x_k-\\mu_k)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\lambda_k&#94;{1/2}}x_k\\exp\\left(-\\frac{1}{2}\\left(x_k-\\mu_k\\right)\\lambda_k&#94;{-1}\\left(x_k-\\mu_k\\right)\\right)dx_k\\\\ &=\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\lambda_k&#94;{1/2}}\\int_{\\mathbb{R}&#94;m}\\left(y_k + \\mu_k\\right)\\exp\\left(-\\frac{1}{2}\\lambda_k&#94;{-1}y_k&#94;2\\right)dy_k\\\\ &= \\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\lambda_k&#94;{1/2}}\\left[-\\frac{1}{\\lambda_k&#94;{-1}}\\exp\\left(-\\frac{1}{2}\\lambda_k&#94;{-1}y_k&#94;2\\right)\\right]_{-\\infty}&#94;{\\infty} + \\mu_k\\\\ &=\\mu_k \\end{aligned} $$ 4 \\(2\\) と同様に考えて、 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-8.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-8.html"},{"title":"Ex.7 Positive Definite Symmetric Matrix","text":"解答 1 $$A = O\\Lambda O&#94;T\\Longleftrightarrow O&#94;TAO = \\Lambda$$ ここで、 \\(O=\\left(\\mathbf{u}_1,\\cdots\\mathbf{u}_m\\right)\\) と分解できるので、 \\(O\\) の第 \\(k\\) 列ベクトル \\(\\mathbf{u}_k\\) に注目すると、 $$\\lambda_k = \\mathbf{u}_k&#94;TA\\mathbf{u}_k > 0\\quad\\left(\\because\\text{positive definite}\\right)$$ 2 \\(k\\) 成分のみゼロではない次のベクトルを考える。 $$\\mathbf{e}_k = \\left(\\begin{array}{ccc}0\\\\\\vdots\\\\1\\\\\\vdots\\\\0\\end{array}\\right)$$ すると、 $$A_{kk} = \\mathbf{e}_k&#94;TA\\mathbf{e}_k > 0\\quad\\left(\\because\\text{positive definite}\\right)$$ 3 \\(k,l\\) 成分のみゼロではないベクトル \\(\\mathbf{v}\\) を考える。ここで、 $$v_k = x,v_l=y \\qquad \\forall x,y\\in\\mathbb{R},x.y\\neq0$$ とする。すると、 $$\\begin{aligned} \\mathbf{v}&#94;TA\\mathbf{v} &= x&#94;2A_{kk} + xyA_{kl} + yxA_{lk} + y&#94;2A_{ll}\\\\ &= \\left(\\begin{array}{ccc}x\\\\y\\end{array}\\right)&#94;T\\left(\\begin{array}{ccc}A_{kk} & A_{kl}\\\\A_{lk} & A_{ll}\\end{array}\\right)\\left(\\begin{array}{ccc}x\\\\y\\end{array}\\right) > 0 \\end{aligned}$$ したがって、行列 $$A&#94;{(kl)} = \\left(\\begin{array}{ccc}A_{kk} & A_{kl}\\\\A_{lk} & A_{ll}\\end{array}\\right)$$ は正定値行列であることがわかる。ゆえに、 \\((1)\\) より、行列 \\(A&#94;{(kl)}\\) の固有値（ \\(\\lambda&#94;{(kl)}_1,\\lambda&#94;{(kl)}_2\\) ）は全て非負。 一方、行列式は固有値の積でかけるので、以下の関係が成り立つ。 $$\\left|A&#94;{(kl)}\\right| = A_{kk}A_{ll} - A_{kl}A_{lk} = \\lambda&#94;{(kl)}_1\\lambda&#94;{(kl)}_2 > 0$$ また、 \\(A&#94;T=A\\) より \\(A_{kl} = A_{lk}\\) なので、上より、 $$A_{kk}A_{ll} - A_{kl}&#94;2 > 0\\Longleftrightarrow\\sqrt{A_{kk}A_{ll}} > \\left|A_{kl}\\right|$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-7.html"},{"title":"Ex.6 Multinomial Distribution","text":"解答 1 $$ \\begin{aligned} \\mathbb{E}\\left(N_k\\right) &= \\mathbb{E}\\left(\\sum_{h=1}&#94;{n_0}Y_k&#94;{(h)}\\right) = \\mathbb{E}\\left(\\sum_{h=1}&#94;{n_0}\\mathbb{I}\\left(X&#94;{(h)} = k\\right)\\right)\\\\ &= \\sum_{h=1}&#94;{n_0}\\mathbb{E}\\left(\\sum_{h=1}&#94;{n_0}\\mathbb{I}\\left(X&#94;{(h)} = k\\right)\\right)\\\\ &= n_0q_k \\end{aligned} $$ 2 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-6.html"},{"title":"Ex.5 Categorical Distribution","text":"解答 1 $$\\mathbb{E}\\left(1\\right) = \\sum_{k=1}&#94;m 1\\cdot q_k = 1$$ 2 $$\\mathbb{E}\\left(X\\right) = \\sum_{k=1}&#94;m k\\mathbb{P}\\left(X=k\\right) = \\sum_{k=1}&#94;mkq_k$$ 3 $$\\mathbb{E}\\left(Y_k\\right) = \\sum_{k&#94;{\\prime}=1}&#94;m \\mathbb{I}\\left(X=k\\right) \\mathbb{P}\\left(X=k&#94;{\\prime}\\right)=\\mathbb{P}\\left(X=k\\right) = q_k$$ 4 EX1. Covariance より、 $$ \\begin{aligned} \\mathrm{Cov}\\left(Y_k,Y_l\\right) &= \\mathbb{E}\\left(Y_kY_l\\right) - \\mathbb{E}\\left(Y_k\\right)\\mathbb{E}\\left(Y_l\\right)\\\\ &= \\sum_{k&#94;{\\prime},l&#94;{\\prime}}\\mathbb{I}\\left(X=k,X=l\\right)\\mathbb{P}\\left(X=k&#94;{\\prime},X=l&#94;{\\prime}\\right) - q_kq_l\\\\ &=\\delta_{kl}q_k - q_kq_l \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-5.html"},{"title":"Ex4. Exponential Distribution","text":"解答 1 $$ \\int_0&#94;{\\infty}f_X(x)dx = \\int_0&#94;{\\infty}\\lambda e&#94;{-\\lambda x}dx = \\left[-e&#94;{-\\lambda x}\\right]_0&#94;{\\infty} = 1 $$ 2 $$\\begin{aligned} \\mathbb{E}\\left(X\\right) &= \\int_0&#94;{\\infty}xf_X(x)dx = \\int_0&#94;{\\infty}x\\lambda e&#94;{-\\lambda x}dx\\\\ &= \\int_0&#94;{\\infty}x\\left(-e&#94;{-\\lambda x}\\right)&#94;{\\prime}dx\\\\ &= \\left[-xe&#94;{-\\lambda x}\\right]_0&#94;{\\infty} - \\int_0&#94;{\\infty}-e&#94;{-\\lambda x} dx\\\\ &= \\left[-\\frac{1}{\\lambda}e&#94;{-\\lambda x}\\right]_0&#94;{\\infty}\\\\ &= \\frac{1}{\\lambda} \\end{aligned}$$ 3 $$ \\mathbb{P}\\left(X>t\\right) = \\int_t&#94;{\\infty}f(x)dx = \\left[-e&#94;{-\\lambda x}\\right]_t&#94;{\\infty} = e&#94;{-\\lambda t} $$ 4 $$\\begin{aligned} \\mathbb{P}\\left(X>s+t|X>s\\right) &= \\frac{\\mathbb{P}\\left(X>s+t\\right)}{\\mathbb{P}\\left(X>s\\right)}\\\\ &= \\frac{\\int_{s+t}&#94;{\\infty}f_X(x)dx}{\\int_s&#94;{\\infty}f_X(x)dx}\\\\ &= \\frac{e&#94;{-\\lambda\\left(s+t\\right)}}{e&#94;{-\\lambda s}}\\\\ &= e&#94;{-\\lambda t} = \\mathbb{P}\\left(X>t\\right) \\end{aligned}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-4.html"},{"title":"EX3. Law of Large Numbers","text":"解答 1 $$ \\begin{aligned} \\varphi_{Z}(t) &= \\int_{-\\infty}&#94;{\\infty}e&#94;{itz}\\delta\\left(z-\\mu\\right)dz\\\\ &= e&#94;{it\\mu} \\end{aligned} $$ 2 $$ \\begin{aligned} \\varphi_{\\bar{X}&#94;{(n)}}(t) &= \\varphi_{\\frac{X_1 + \\cdots + X_n}{n}}(t)\\\\ &= \\varphi_X\\left(\\frac{X_1}{n}\\right)\\cdots\\varphi_X\\left(\\frac{X_n}{n}\\right)\\\\ &= \\left[\\varphi_X\\left(\\frac{X}{n}\\right)\\right]&#94;n\\\\ &= \\exp\\left(n\\log\\left(\\varphi_X\\left(\\frac{X}{n}\\right)\\right)\\right)\\\\ &= \\exp\\left(n\\log\\left(1 + \\mathbb{E}\\left(X\\right)\\frac{1}{1!}\\left(\\frac{it}{n}\\right)&#94;1 + \\mathcal{O}\\left(\\frac{1}{n&#94;2}\\right)\\right)\\right)\\\\ \\end{aligned} $$ ここで、 $$ \\begin{aligned} &\\log\\left(1 + \\mathbb{E}\\left(X\\right)\\frac{1}{1!}\\left(\\frac{it}{n}\\right)&#94;1 + \\mathcal{O}\\left(\\frac{1}{n&#94;2}\\right)\\right)\\\\ &= \\sum_{k=1}&#94;{\\infty}\\left(-1\\right)&#94;{k+1}\\cdot\\frac{\\left(\\mathbb{E}\\left(X\\right)\\frac{it}{n} + \\mathcal{O}\\left(\\frac{1}{n&#94;2}\\right)\\right)&#94;k}{k}\\\\ &= \\mathbb{E}\\left(X\\right)\\frac{it}{n} + \\mathcal{O}\\left(\\frac{1}{n&#94;2}\\right) \\end{aligned} $$ だから、 $$ \\begin{aligned} \\varphi_{\\bar{X}&#94;{(n)}}(t) &= \\exp\\left(n\\cdot\\mathbb{E}\\left(X\\right)\\frac{it}{n} + \\mathcal{O}\\left(\\frac{1}{n}\\right)\\right)\\\\ &= \\exp\\left(it\\mu + \\mathcal{O}\\left(\\frac{1}{n}\\right)\\right)\\\\ &\\underset{n\\rightarrow\\infty}{\\longrightarrow}e&#94;{it\\mu} = \\varphi_{\\bar{X}&#94;{(n)}}(t) \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-3.html"},{"title":"EX2. Characteristic function","text":"解答 1 $$\\varphi_{X}(0) = \\mathbb{E}\\left(e&#94;{i\\cdot0\\cdot X}\\right) = \\mathbb{E}(1) = 1$$ 2 $$ \\begin{aligned} \\frac{d&#94;m\\varphi_{X}}{dt&#94;m} &= \\underset{\\text{m個}}{0+\\cdots+0} + \\frac{m!\\cdot i&#94;m}{m!}\\mathbb{E}\\left(X&#94;m\\right) \\\\&+\\frac{\\left\\{(m+1)\\cdot m\\cdots 3\\cdot2\\right\\} i&#94;m\\cdot(it)}{(m+1)!}\\mathbb{E}\\left(X&#94;{m+1}\\right) + \\frac{\\left\\{(m+2)\\cdot (m+1)\\cdots 4\\cdot3\\right\\}i&#94;m\\cdot(it)&#94;2}{(m+2)!}\\mathbb{E}\\left(X&#94;{m+2}\\right)+\\cdots\\\\ &= \\frac{m!\\cdot i&#94;m}{m!}\\mathbb{E}\\left(X&#94;m\\right) + \\sum_{n}&#94;{\\infty}\\frac{i&#94;m(it)&#94;n}{n!}\\mathbb{E}\\left(m+n\\right)\\\\ \\therefore\\left.\\frac{d&#94;{m} \\varphi_{x}}{d t&#94;{m}}\\right|_{t=0} &= i&#94;m \\mathbb{E}\\left(X&#94;m\\right) + 0\\qquad \\\\ \\therefore \\frac{1}{i&#94;m}\\left.\\frac{d&#94;{m} \\varphi_{x}}{d t&#94;{m}}\\right|_{t=0} &=\\mathbb{E}\\left(X&#94;m\\right)\\\\ \\end{aligned} $$ 3 $$\\begin{aligned} \\varphi_X(t) &= \\sum_{n=0}&#94;{\\infty}\\frac{\\lambda&#94;k}{k!}e&#94;{-\\lambda}e&#94;{itk}\\\\ &=\\sum_{n=0}&#94;{\\infty}\\frac{\\left(\\lambda e&#94;{it}\\right)&#94;k}{k!}e&#94;{-\\lambda}\\\\ &= e&#94;{\\lambda e&#94;{it}}e&#94;{-\\lambda}\\\\ &= e&#94;{\\lambda\\left(e&#94;{it}-1\\right)} \\end{aligned}$$ 4 オイラーの公式より、 $$e&#94;{it} = \\cos t+i\\sin t$$ が成り立つので、 $$ \\begin{aligned} e&#94;{it\\left(aX+bY\\right)} =& e&#94;{itaX}e&#94;{itbY}\\\\ =& \\left(\\cos \\left(taX\\right) + i\\sin\\left(taX\\right)\\right)\\left(\\cos \\left(tbY\\right) + i\\sin\\left(tbY\\right)\\right)\\\\ =& \\left(\\cos\\left(taX\\right)\\cos\\left(tbY\\right) - \\sin\\left(taX\\right)\\sin\\left(tbY\\right)\\right) \\\\ &+ i\\left(\\cos \\left(taX\\right)\\sin\\left(tbY\\right) + \\sin\\left(taX\\right)\\cos \\left(tbY\\right)\\right) \\end{aligned} $$ と分解できる。したがって、 \\(X,Y\\) が独立なので、 $$ \\begin{aligned} \\varphi_{aX+bY}(t) =&\\mathbb{E}\\left(e&#94;{it\\left(aX+bY\\right)}\\right)\\\\ =& \\mathbb{E}\\left(\\cos\\left(taX\\right)\\right)\\mathbb{E}\\left(\\cos\\left(tbY\\right)\\right) - \\mathbb{E}\\left(\\sin\\left(taX\\right)\\right)\\mathbb{E}\\left(\\sin\\left(tbY\\right)\\right) \\\\ &+ i\\left(\\mathbb{E}\\left(\\cos \\left(taX\\right)\\right)\\mathbb{E}\\left(\\sin\\left(tbY\\right)\\right) + \\mathbb{E}\\left(\\sin\\left(taX\\right)\\right)\\mathbb{E}\\left(\\cos \\left(tbY\\right)\\right)\\right)\\\\ =& \\left(\\mathbb{E}\\left(\\cos taX\\right) + i\\mathbb{E}\\left(\\sin taX\\right)\\right)\\cdot\\left(\\mathbb{E}\\left(\\cos tbY\\right) + i\\mathbb{E}\\left(\\sin tbY\\right)\\right)\\\\ =&\\mathbb{E}\\left(e&#94;{itaX}\\right)\\cdot\\mathbb{E}\\left(e&#94;{itbY}\\right)\\\\ =&\\varphi_{X}(at)\\varphi_{Y}(bt) \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-2.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-2.html"},{"title":"EX1. Covariance","text":"解答 1 $$ \\begin{aligned} \\mathbb{E}\\left(\\left(X-\\mu_X\\right)\\left(Y-\\mu_Y\\right)\\right) &= \\mathbb{E}\\left(XY - \\mu_YX-\\mu_XY + \\mu_X\\mu_Y\\right)\\\\ &= \\mathbb{E}\\left(XY\\right) - \\mu_Y\\mathbb{E}(X) - \\mu_X\\mathbb{E}(Y) + \\mu_X\\mu_Y\\\\ &= \\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\quad (\\because\\mu_X=\\mathbb{E}(X),\\mu_Y=\\mathbb{E}(Y)) \\end{aligned} $$ 2 連続型確率変数の場合で証明する。（離散型は \\(\\int\\rightarrow\\sum\\) ） $$ \\begin{aligned} \\mathbb{E}(XY) &= \\int_{x}\\int_{y} xy\\mathbb{P}(X=x,Y=y)dxdy\\\\ &= \\int_{x}\\int_{y} xy\\mathbb{P}(X=x)\\mathbb{P}(Y=y)dxdy\\quad(\\because X,Y: \\text{independent})\\\\ &= \\int_{x} x\\mathbb{P}(X=x)dx\\int_{y}y\\mathbb{P}(Y=y)dy\\\\ &= \\mathbb{E}(X)\\mathbb{E}(Y) \\end{aligned} $$ となるので、 \\((1)\\) より、 $$ \\begin{aligned} \\mathrm{Cov}(X,Y) &= \\mathbb{E}\\left(\\left(X-\\mu_X\\right)\\left(Y-\\mu_Y\\right)\\right)\\\\ &=\\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\\\ &=0 \\end{aligned} $$ 3 $$ \\begin{aligned} \\mathrm{Var}(X+Y) &= \\mathbb{E}\\left((X+Y)&#94;2\\right) - \\left(\\mathbb{E}\\left(X+Y\\right)\\right)&#94;2\\\\ &= \\mathbb{E}\\left(X&#94;2 + 2XY + Y&#94;2\\right) - \\left(\\mathbb{E}(X) + \\mathbb{E}(Y)\\right)&#94;2 \\\\ &= \\left(\\mathbb{E}(X&#94;2) - \\mathbb{E}(X)&#94;2\\right) + \\left(\\mathbb{E}(Y&#94;2) - \\mathbb{E}(Y)&#94;2\\right) + 2\\left(\\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\right)\\\\ &= \\mathrm{Var}(X) + \\mathrm{Var}(Y) + 2\\mathrm{Cov}(X,Y) \\end{aligned} $$ 4 $$ \\begin{aligned} \\mathrm{Cov}\\left(aX+bY,cZ+dW\\right) &= \\mathbb{E}\\left(\\left(aX+bY\\right)\\left(cZ+dW\\right)\\right) - \\mathbb{E}\\left(aX+bY\\right)\\mathbb{E}\\left(cZ+dW\\right)\\\\ &= \\left(\\mathbb{E}\\left(aXcZ\\right) + \\cdots + \\mathbb{E}\\left(bYdW\\right)\\right) - \\left(\\mathbb{E}(aX)\\mathbb{E}(cZ) + \\cdots + \\mathbb{E}(bY)\\mathbb{E}(dW) \\right)\\\\ &= \\left\\{\\mathbb{E}\\left(aXcZ\\right) - \\mathbb{E}(aX)\\mathbb{E}(cZ) \\right\\} + \\cdots + \\left\\{\\mathbb{E}\\left(bYdW\\right) - \\mathbb{E}(bY)\\mathbb{E}(dW) \\right\\}\\\\ &= ac\\left\\{\\mathbb{E}\\left(XZ\\right) - \\mathbb{E}(X)\\mathbb{E}(Z)\\right\\} + \\cdots + bd\\left\\{\\mathbb{E}\\left(YW\\right) - \\mathbb{E}(Y)\\mathbb{E}(W)\\right\\}\\\\ &= ac\\mathrm{Cov}(X,Z) + ad\\mathrm{Cov}(X,W) + bc\\mathrm{Cov}(Y,Z) + bd\\mathrm{Cov}(Y,W) \\end{aligned} $$ 5 $$ \\begin{aligned} \\mathrm{Cov}\\left(X,Y\\right)&#94;2 &= \\left(\\sum_{x,y}(x-\\mu_X)(y-\\mu_Y)\\mathbb{P}(X=x,Y=y)\\right)&#94;2\\\\ &= \\left(\\sum_{z,w}zw\\mathbb{P}(X=x,Y=y)\\right)&#94;2\\\\ &= \\left(\\sum_{z,w}zwP_{zw}\\right)\\left(\\sum_{z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime}w&#94;{\\prime}P_{z&#94;{\\prime}w&#94;{\\prime}}\\right)\\\\ &=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}zwz&#94;{\\prime}w&#94;{\\prime}P_{zw}P_{z&#94;{\\prime}w&#94;{\\prime}}\\quad\\left(\\because\\text{expansion}\\right)\\\\ \\mathrm{Var}(X)\\mathrm{Var}(Y) &= \\left(\\sum_{x}\\left(x-\\mu_X\\right)&#94;2\\mathbb{P}(X=x)\\right)\\left(\\sum_{y}\\left(y-\\mu_Y\\right)&#94;2\\mathbb{P}(Y=y)\\right)\\\\ &= \\left(\\sum_{x,y}\\left(x-\\mu_X\\right)&#94;2\\mathbb{P}(X=x,Y=y)\\right)\\left(\\sum_{x,y}\\left(y-\\mu_Y\\right)&#94;2\\mathbb{P}(X=x,Y=y)\\right)\\\\ &= \\left(\\sum_{z,w}z&#94;2P_{x,y}\\right)\\left(\\sum_{z,w}w&#94;2P_{x,y}\\right)\\\\ &=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\left(=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\right)\\\\ &=\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}+\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}} \\end{aligned} $$ と変形できるので、 $$ \\begin{aligned} \\mathrm{Var}(X)\\mathrm{Var}(Y) - \\mathrm{Cov}\\left(X,Y\\right)&#94;2 &= \\left(\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}+\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\right) - \\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}zwz&#94;{\\prime}w&#94;{\\prime}P_{zw}P_{z&#94;{\\prime}w&#94;{\\prime}}\\\\ &= \\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}\\left(z&#94;2w&#94;{\\prime2} + z&#94;{\\prime2}w&#94;2 - 2zwz&#94;{\\prime}w&#94;{\\prime}\\right)P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\\\ &=\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}\\left(zw&#94;{\\prime} - z&#94;{\\prime}w\\right)&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\\\ &\\geq0\\\\ \\therefore\\mathrm{Var}(X)\\mathrm{Var}(Y) &\\geq \\mathrm{Cov}\\left(X,Y\\right)&#94;2 \\end{aligned} $$ memo ある定数 \\(k\\) について以下が成り立つ時 （ \\(X\\) と \\(Y\\) に以下の関係が成り立つ時） 等号条件が成立する。 $$Y = kX$$ \\(\\mathbb{P}\\left(X=x_n,Y=y_m\\right) = \\mathbb{P}\\left(X=x_n\\right)\\delta_{nm}\\) if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-1.html"},{"title":"Neural Networks","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開)","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-5.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-5.html"},{"title":"レポート課題5(10/31出題)","text":"JJgw8HpMnPC5pkkhel3bTQ==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report5.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report5.html"},{"title":"確率と統計(1)基礎概念","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 In [1]: import numpy as np import matplotlib.pyplot as plt 講義概要 確率変数と確率分布 確率分布の性質を表す指標 同時確率 条件付き確率 確率変数と確率分布 用語 意味 確率(probability) 事象の起こりやすさを定量的に示す $0$ から $1$ の値 確率変数(random variable) その変数に関する任意の事象に対して確率が定義されている変数 確率分布(probability distribution) 確率変数に関する各事象に対してその確率を与える関数 離散型(discrete type)確率変数 ある可算集合 $\\mathcal{X}$ の中のいずれかの値をとる確率変数 確率質量関数(probability mass function) $f(x)$ $$f(x)\\geq0,\\quad \\sum_{x\\in\\mathcal{X}}f(x) = 1$$ 連続型(continuous type)確率変数 連続値をとる確率変数 確率密度関数(probability density function) $f(x)$ $$f(x)\\geq0,\\quad\\int_{-\\infty}&#94;{\\infty}f(x)dx=1$$ 累積分布関数(cumulative distribution function) $F(x)$ $$F(x) = P(X\\leq x)=\\int_{-\\infty}&#94;{x}f(u)du\\ \\text{ or } \\sum_{i:i\\leq x}f(i)$$ 確率分布の性質を表す指標 用語 数式 説明 期待値(expectation) $$E(X) = \\sum_xxf(x)\\ \\text{ or }\\int xf(x)dx$$ 確率変数の値の平均（正確には確率による重み付きの平均） 確率変数を代表する値を表す指標 ※ 外れ値(outlier)に敏感 中央値(median) $P(X\\leq x)=1/2$ を満たす $x$ データを大きい順（または小さい順）に並べたときの真ん中の値。 最頻値(mode) $f(x)$ を最大にする $x$ データの中で最も頻度が高い値 分散(variance) $$\\begin{aligned}V(X) &= E\\left\\{(X-E[X])&#94;2\\right\\}\\\\&=E\\left\\{X&#94;2-2E[X]X+(E[X])&#94;2\\right\\}\\\\&=E[X&#94;2]-E\\left[2E[X]X\\right]+(E[X])&#94;2\\\\&=E[X&#94;2]-2E[X]E[X]+(E[X])&#94;2\\\\&=E[X&#94;2]-(E[X])&#94;2\\end{aligned}$$ 確率変数の散らばり具合を表す指標 標準偏差(standard devariation) $\\sqrt{V(X)}$ 分散の平方根 標準化(standardization) $$Z=\\frac{X-E(X)}{\\sqrt{V(X)}}$$ 任意の確率変数 $X$ に対して、期待値 $0$、分散 $1$ の確率変数 $Z$ が定義できる。 歪度(skewness) $$\\alpha_3 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;3\\right\\}}{\\left\\{V(X)\\right\\}&#94;{3/2}}$$ 確率変数の非対称性を表す。 劣度(kurtosis) $$\\beta_4 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;4\\right\\}}{\\left\\{V(X)\\right\\}&#94;{2}}-3$$ 確率分布の尖り具合を表す。 積率(moment) $$\\mu_r = E\\left[X&#94;r\\right]$$ 期待値・分散・歪度・劣度などを表すパラメータ。全ての次数の積率を指定すれば、確率分布を一位に決定することができる。（左は $r$ 次の積率） 積率母関数(moment generating function) $$M_X(t) = E[e&#94;{tX}]=\\begin{cases}\\sum_xe&#94;{tx}f(x)\\\\\\int e&#94;{tx}f(x)dx\\end{cases}\\\\ M_X&#94;{(r)}(0)=\\mu_r$$ 全ての次数の積率を生成する関数。存在しない（無限大に発散する）こともある。 In [2]: def computation_variance ( n = 10000 , mu = 0 , sigma = 1 , seed = None ): X = np . random . RandomState ( seed ) . normal ( loc = mu , scale = sigma , size = n ) EX = sum ( X ) / n EX2 = sum ( X ** 2 ) / n # Calculate variance in 3 ways. var1 = np . var ( X ) var2 = sum (( X - EX ) ** 2 ) / n var3 = EX2 - EX ** 2 print ( \"`np.var(X)` =\" , var1 ) print ( \"E{(X - E[X])&#94;2} =\" , var2 ) print ( \"E[X&#94;2] - (E[X])&#94;2 =\" , var3 ) In [3]: computation_variance ( mu = 100 , seed = 0 ) `np.var(X)` = 0.9752679753477969 E{(X - E[X])&#94;2} = 0.9752679753477979 E[X&#94;2] - (E[X])&#94;2 = 0.9752679752218683 In [4]: computation_variance ( mu = 1e8 , seed = 1 ) `np.var(X)` = 0.9975731614280597 E{(X - E[X])&#94;2} = 0.9975731614281662 E[X&#94;2] - (E[X])&#94;2 = -98.0 ※ 「二乗の平均 - 平均の二乗」は丸め誤差の影響を受けやすい 歪度(skewness) 確率変数の非対称性を表す。 $$\\alpha_3 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;3\\right\\}}{\\left\\{V(X)\\right\\}&#94;{3/2}}$$ In [5]: def plot_skewness ( ax = None , seed = None , n = 100 ): if ax == None : fig , ax = plt . subplots () X = np . random . RandomState ( seed ) . randint ( low = 1 , high = 7 , size = n ) ax . hist ( X , density = True , bins = 6 , color = \"blue\" , align = 'left' ) EX = np . mean ( X ) VX = np . var ( X ) skewness = np . mean (( X - EX ) ** 3 ) / VX ** ( 3 / 2 ) ax . set_title ( f \"skewness = { skewness : .3f } \" ) return ax In [6]: fig = plt . figure ( figsize = ( 12 , 3 )) for i , seed in enumerate ([ 44756 , 96331 , 76432 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plot_skewness ( ax = ax , seed = seed ) plt . show () 劣度(kurtosis) 確率分布の尖り具合を表す。 $$\\beta_4 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;4\\right\\}}{\\left\\{V(X)\\right\\}&#94;{2}}-3$$ In [7]: X = np . linspace ( - 5 , 5 , 10000 ) In [8]: f1 = lambda x : 1 / 1250 * ( 5 - abs ( x )) ** 4 f2 = lambda x , mu = 0 , sigma = 1 : 1 / np . sqrt ( 2 * np . pi * sigma ** 2 ) * np . exp ( - ( x - mu ) ** 2 / 2 * sigma ** 2 ) f3 = lambda x : 1 / 4 if abs ( x ) <= 2 else 0 In [9]: def plot_kurtosis ( X , func , ax = None ): if ax == None : fig , ax = plt . subplots () Y = np . array ([ func ( x ) for x in X ]) ax . plot ( X , Y , color = \"red\" ) Y /= sum ( Y ) EX = np . sum ( Y * X ) VX = np . sum ( Y * ( X - EX ) ** 2 ) kurtosis = np . sum ( Y * ( X - EX ) ** 4 ) / VX ** 2 - 3 ax . set_title ( f \"kurtosis = { kurtosis : .3f } \" ) return ax In [10]: fig = plt . figure ( figsize = ( 12 , 3 )) for i , func in enumerate ([ f1 , f2 , f3 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plot_kurtosis ( X = X , func = func , ax = ax ) ax . set_xlim ( - 5 , 5 ); ax . set_ylim ( 0 , 1 ) plt . show () 同時確率 用語 数式 説明 同時確率(joint probability) 複数の確率変数が関わる確率 同時確率質量関数 $$P(X=x,Y=y) = f(x,y)\\\\f(x,y)\\geq0,\\quad\\sum_{x\\in\\mathcal{X}}\\sum_{y\\in\\mathcal{Y}}f(x,y)=1$$ 離散型の同時確率 同時確率密度関数 $$P(a\\leq X\\leq b,c\\leq Y\\leq d) = \\int_c&#94;d\\int_a&#94;bf(x,y)dxdy\\\\f(x,y)\\geq0,\\quad\\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x,y)dxdy=1$$ 連続型の同時確率 共分散 $X$ と $X&#94;{\\prime}$ の 共分散(covariance) ： $$\\mathrm{Cov}(X,X&#94;{\\prime}) = E\\left[(X-E[X])(X&#94;{\\prime}-E[X&#94;{\\prime}])\\right]$$ $\\mathrm{Cov}(X,X&#94;{\\prime})>0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 同傾向 $\\mathrm{Cov}(X,X&#94;{\\prime})<0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 逆傾向 $\\mathrm{Cov}(X,X&#94;{\\prime})=0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 無関係 共分散は、以下の形でも表されるので、A社の株価を $X$、B社の株価を $X&#94;{\\prime}$ とすると、以下の解釈も可能 $$V(X+X&#94;{\\prime}) = V(X) + V(X&#94;{\\prime}) + 2\\mathrm{Cov}(X,X&#94;{\\prime})$$ $\\mathrm{Cov}(X,X&#94;{\\prime})>0\\Longleftrightarrow V(X+X&#94;{\\prime})>V(X)+V(X&#94;{\\prime})$ なので、A,B両者の株を買うと分散が 拡大 する → 変動リスクが増大し、資産価値は不安定 $0>\\mathrm{Cov}(X,X&#94;{\\prime})\\Longleftrightarrow V(X)+V(X&#94;{\\prime})>V(X+X&#94;{\\prime})$ なので、A,B両者の株を買うと分散が 縮小 する → 変動リスクが抑制され、資産価値は安定 独立性 全ての $(x,y)$ で $p_{X,Y}(x,y) = p_X(x)p_Y(y)$ の時、$X$ と $Y$ は互いに 独立(independent) 2つの確率変数が独立の時、 積の期待値は各々の期待値の積と一致 $$E[XY] = E[X]E[Y]$$ 和の積率母関数は各々の積率母関数の積と一致 $$M_{X+Y}(t) = M_X(t)M_Y(t)$$ ２つの確率変数は無相関 $$\\mathrm{Cov}(X,Y) = 0$$ 2つの確率変数が独立ならば無相関であるが、逆は一般には正しくない。 条件付き確率 ベイズの定理(Bayes' theorem) $$P(X|Y) = \\frac{P(Y|X)P(X)}{P(Y)}$$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-5.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-5.html"},{"title":"分子生命科学Ⅲ 第6回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 感覚神経系(4) 聴覚系(auditory system) によりもたらされている 聴覚(audition) と、 前庭系(vestibular system) による 平衡感覚(sense of balance) は、機能は全く異なるが、構造と機序においては驚くほど似ている。 また、 味（ 味覚(gustation) ） と におい（ 嗅覚(olfaction) ） に関しても、どちらも化学物質に反応性のある細胞、すなわち 1 を用いて 聴覚系 音の 2 とは、1秒毎に耳を通過する、圧縮あるいは希薄化された空気の数であり、 3 と呼ばれる単位で表されるが、ヒトは、20~20,000Hzの範囲の音を聞き取れる。 音の高さの感覚のことを 4 は 2 で決まる。 部屋を振動させるようなオルガンの低い音が 20Hz 耳を貫くようなピッコロの高い音が 10,000 Hz ヒトの音の強さの感受性は、1兆倍のレンジを持つ。 ヒトは水平面なら2°の正確さで音源の位置を特定できる。 音の 5 は圧縮された空気と希薄となった空気との圧力の差であるが、これは私たちが感知する 音の強さ（大きさ）(loudness) を決定する。 聴覚系の構造 耳は、外から見える部分は皮膚に覆われた軟骨からなり、 6 と呼ばれる一種の漏斗を形成し、広い領域から音を集めるのに役立っている。 6 の構造によって、後方より前方からの音に感受性がより強い。また、 6 の折り曲がった構造は音の発生源の位置を知ること、つまり 音源定位 に役立っている。ヒトではほとんど固定されているが、猫や馬では 6 の筋肉支配が発達しており、音源の方向に 6 を向けることができる。 耳の内部への入り口は 7 と呼ばれ、頭蓋骨の中を 8 に達するまで約2.5cm伸びている。 8 の内側表面に接するのは 9 であり、 9 は、 8 の振動を 10 と呼ばれる頭蓋骨の穴を覆っている2番目の膜の振動に伝える。 10 の奥には、液体に満たされた 11 があり、 11 には 10 の膜の物理的な振動をニューロンの反応へと変換する装置がある。 これらをまとめると、基本的な聴覚系の第一段階は、 音波が 8 を動かす。 8 が 9 を動かす。 9 が 10 の膜を動かす。 10 の膜の運動が 11 の液体を動かす。 11 内の液体の運動が感覚ニューロン（聴覚受容細胞）の反応を引き起こす。 なおここで、耳の構造は、 6 から 8 までの 12 8 から 9 までの 13 10 より内側の 14 というように3つの部位に分けるのが一般的である。 14 で音に対するニューロンの反応が生じると、信号は 脳幹 にある一連の神経核に伝えられ処理する。これらの神経核からの出力は視床の中継核、すなわち 15 に送られ、最終的には側頭葉の 16 （もしくは 17 ）に投射する。 感覚受容器から始まり、初期の統合機構（視覚では網膜であり、聴覚では脳幹）につながり、そして視床中継核を経て、感覚野に達するという意味で、聴覚系と視覚系は似かよっている。 前庭感覚系（平衡感覚系） 音楽を聴くこと （聴覚系） と自転車に乗ること （前庭感覚系） は、共に 18 による機械受容機構が関与する感覚に依存している。 前庭感覚系は、頭の位置と運動の情報を検知して、体のつり合いと平衡の感覚を伝え、そして頭と眼球の協調的な運動と体の姿勢の調節とを助けている。 前庭感覚系の機能が障害されると、乗り物酔いと表現される不快な感覚が起こる。 内耳の平衡感覚に関する部分は 19 （あるいは、 20 ）と呼ばれている。 19 には、異なった機能を持つ2種類の構造がある。 21 ：重力と頭の傾きを検知する。迷路の中心に 22 と 23 の一対の比較的大きな腔からなる。 24 ：頭の回転に感受性を持つ。３つの 24 は互いに直交するC字型の半管で、それぞれの基部に膨大部というふくらみが1つずつあり、内部に感覚装置である膨大部稜を入れる。 それぞれの構造の本質的な働きは、 頭の運動に由来する機械的なエネルギーを 18 に伝えること であり、 18 が存在しているそれぞれの構造の 特異性 によって、それぞれ異なった種類の動きに感受性を持つ。 味覚系 基本味 基本味は、 25 、 26 、 27 、 28 、 29 の5種類ある。また、食物の風味の近くの方法は以下の通りである。 食物はそれぞれに特有の基本味を持つ。 食物は味とにおいの両者が同時に生じることによって独特の風味を持つ。（→ 風邪を引くと味がわからなくなる。） 痛覚（ 辛味；カプサイシン受容体TRPV1 ）等の味覚や嗅覚以外の感覚が食物の味の近くに関与する。 味覚器 舌の表面には、 30 と呼ばれる小さな突起が点在する。 30 には 屋根の煉瓦状のもの： 31 小丘状のもの： 32 茸状のもの： 33 がある。舌の前と両脇には小さな丸い 30 を、奥の方には大きな 30 を容易に見ることができる。各々の 30 には、顕微鏡でしか観察できない 34 が百〜数百個存在し、それぞれの 34 の中には、50~150個の 35 が並んでいる他、味覚求心性線維と味細胞とのシナプス、基底細胞からなる。 35 の微絨毛は味孔へと突き出ており、ここで唾液に溶解している化学物質が直接 35 と反応する。 34 の細胞は約10日でターンオーバーを繰り返す。 味覚の刺激変換機構 環境からの刺激が感覚受容細胞で電気的反応を引き起こす過程を、 36 というが、いくつかの感覚系では1つの刺激変換機構を利用するために、基本的な受容細胞を1種類だけ持っていることが多い（ex.聴覚系）。 しかし、味覚の 36 には多くの機構が存在し、それぞれの基本味の近くには1つないしは複数のメカニズムが関与している。味刺激、すなわち 味刺激(tastant) は、 開いたイオンチャネルを直接通過する： 25 （ \\(\\mathrm{Na}&#94;{+}\\) ）、 26 （ \\(\\mathrm{H}&#94;{+}\\) ）は直接イオンチャネルに作用し、膜を脱分極させる。 イオンチャネルに結合してブロックする：（ 26 ） 膜受容体に結合し二次メッセンジャー系を活性化させることにより、イオンチャネルを開ける： 28 、 27 、 29 （アミノ酸）は、三量体Gタンパク質を活性化させる。 などの方法で最終的に味覚受容細胞の細胞内カルシウム濃度を上昇させ、神経伝達物質（ATPだと考えられている）を放出し、一次味覚神経に活動電位を生じさせている。 嗅覚系 自己と非自己、動物と植物に関する情報を検知する。 味覚系と協同して食物の同定に役立ち、有害物質を検知する。 ヒトは数十万の物質の匂いをかぐことができる。 嗅覚器 鼻腔の天井に位置する 37 で匂いを嗅ぐ。 37 には、主として3種類の細胞がある。 38 は、刺激情報の変換の場である。 35 と異なり、 38 は本来ニューロンであり、その軸索は中枢神経系に入っていく。ただ、 35 と同様に、約4~8習慣のサイクルで絶えず成長、死、再生を繰り返す。この性質は、神経系のニューロンとしては非常に珍しい。 39 は、グリア細胞に類似している。機能的には、粘液(mucus)の分泌を手助けすることも知られている。 40 は、新たな受容細胞の供給源となる。 嗅覚の刺激変換機構 味覚受容細胞はたくさんの刺激変換分子機構を使用するが、嗅覚受容細胞が使用しているのはおそらく1種類だけだと考えられる。刺激変換を担う全ての分子は細い線毛にあり、嗅覚の変換経路は におい物質(odorant) と呼ばれる空気中にある化学物質 膜上のにおい物質受容タンパクとの結合 Gタンパク質の刺激 cAMPの産生 cAMPと特異的陽イオンチャネルの結合 陽イオンチャネルの開口とNa+およびCA2+の流入 Ca2+作動性Cl-チャネルの開口 電流の流入による膜の脱分極（受容器電位） if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-6.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-6.html"},{"title":"生物物理学 第6回","text":"講師： 樋口秀男 エネルギー生産系の仕組み（細胞内小器官） 光関連の現象 細胞・器官 たんぱく質等 眼で見る 視細胞（桿体、錐体細胞） ロドプシン等 光合成 葉緑体 光システム（タンパク質複合体） 蛍の光 発色細胞 ルシフェリン+ルシフェラーゼ クラゲの光 発色細胞 エコーリン、GFP(green fluorescence protein) 日焼け 色素形成細胞（メラノサイト） メラニン（チロシンの重合体） 体内時計 目のメラノプシン発現網膜神経細胞 メラノプシン ATPを作るプロセス 光合成(photosynthesis) は、高等植物や緑藻（青色細菌）が 葉緑体（クロロプラスト） 内で行う、二酸化炭素の固定反応である。 この過程で水が酸素に酸化され、二酸化炭素は還元されて糖になる。 光合成は大きく2つの段階に区別される。 1つは 明反応 と呼ばれ、光のエネルギーを利用して水が酸素に酸化されるとともに、二酸化炭素の還元に必要な \\(\\mathrm{NADPH}_2&#94;+\\) と \\(\\mathrm{ATP}\\) をつくりだす。 もう1つの段階は 暗反応 と呼ばれ、 \\(\\mathrm{NADPH}_2&#94;+\\) と \\(\\mathrm{ATP}\\) を利用して二酸化炭素から種々の糖がつくられる。 クロロプラスト中の大部分のクロロフィルは 光を集めるアンテナ の役割を果たす。吸収された光子のエネルギーはアンテナクロロフィル間を励起エネルギーとして移動し、 アンテナクロロフィル よりも励起エネルギーの 低い 反応中心クロロフィル に集められる。 FRET(Fluorescence resonance energy transfer) $$\\text{Transfer Efficiency at two rates: } E= \\frac{k_T}{k_T+k_F} = \\frac{1}{1 + \\frac{k_F}{k_T}}$$ \\(k_T\\) ：Donor から Acceptor に移動する速度 \\(k_F\\) ：Donor が吸収する速度 Chl(from) Chl(to) 移動効率（移動距離） b(F) a(A) 高 b(F) b(A) 中 a(F) a(A) 中 a(F) b(A) 低 幅 \\(L\\) の中の電子のエネルギー準位： \\(E_n = \\frac{1}{8m}\\left(\\frac{nh}{L&#94;{\\prime}}\\right)&#94;2\\) フェミルの黄金律 時間的に変化しない弱い相互作用（摂動）のある電子系が、あるエネルギー固有状態から別のエネルギー固有状態へ移る際の単位時間あたりの遷移確率は、摂動法（時間で展開）の最低次数として近似計算できる。 遷移速度 \\(k_T\\) は、エネルギー固有状態の単位時間あたりの遷移確率である。 $$\\Psi_{\\mathrm{Da}}\\Psi_{\\mathrm{Ab}}\\underset{k_T}{\\longrightarrow}\\Psi_{\\mathrm{Db}}\\Psi_{\\mathrm{Aa}}$$ Da: Active state of Donor Ab: Ground state of Acceptor 光合成の概要 水を分解して、電子を膜間に入れる。 光を用いて電子の酸化還元電位を上げる。 酸化還元電位を利用してチラコイド外のプロトンを内側に輸送する。 内側のプロトンのケミカルポテンシャルを利用してATPを合成する。 まとめ 共役長が長くなる と吸収波長は長くなり、可視光の利用が可能となる。 分子間距離が近いと エネルギー移動や電子移動 が起こる。電子移動の方向は、酸化還元電位に依存する。 エネルギーを 酸化還元電位 に交換する（逆も） 生物は、 多数のタンパク質が 上記1-3の原理を巧みに利用して、光化学反応（葉緑体内の光合成）や電子伝達（ミトコンドリア内）の機能を行う。 ATP を合成するF1,F0は高効率でATPを合成する。特に、F1は仕事効率が約100%である。 .prompt { /* This is for jupyter blog.*/ min-width: 0; /* This padding is tuned to match the padding on the CodeMirror editor. */ padding: 0em 0.4em 0em 0em; margin: 0px; font-family: monaco; } /*蛍光ペン(pink)*/ .marker-pink { color: #c45a5a; background: linear-gradient(transparent 70%, #ff66ff 60%); font-weight: bold; } /*蛍光ペン(blue) & hover info*/ .marker-info { color: #5C7DC4; background: linear-gradient(transparent 70%, #66FFCC 60%); font-weight: bold; position: relative; cursor: pointer; } .marker-info:hover:before { opacity: 1; z-index: 2; } .marker-info:before { content: attr(aria-label); opacity: 0; position: absolute; top: 30px; right: -90px; font-size: 14px; width: 300px; padding: 10px; color: #fff; background-color: #555; border-radius: 3px; pointer-events: none; } /* 枠囲み */ .frame { border: solid 1.0px #000000; padding: 0.5em 1em; margin: 2em 0; } /* 暗記用 question box */ span .qbox{ display: none; } span.qbox-wrapper:hover .qbox-default{ display: none; } span.qbox-wrapper:hover .qbox{ display: inline; } .qbox-wrapper{ font-weight: bold; padding: 5px 10px; border-radius: 5px; border: solid 2px #000000; margin: 5px } .qbox-wrapper:hover{ text-shadow: 0px 0px 6px rgba(255, 255, 255, 1); -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); transition: all 0.4s ease 0s; } /* 画像吹き出し */ .balloon { display: table; width: 100%; } .balloon_img { display: table-cell; vertical-align: middle; width: 50%; padding-right: 10px; } .balloon_comment { border: #83274e solid 4px; position: relative; background: #fff; padding: 12px; border-radius: 13px; display: block } .balloon_comment::before { content: \"\"; position: absolute; border-right: 23px solid #83274e; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -23px; } .balloon_comment::after { content: \"\"; position: absolute; border-right: 24px solid #fff; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -17px; } if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-6.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-6.html"},{"title":"Introduction","text":"講師： 木立 尚孝 （ 生物データマイニング論 も担当されている方） 計算演習 # リンク 問題 1 Covariance 2 Characteristic function 3 Law of Large Numbers 4 Exponential Distribution 5 Categorical Distribution 6 Multinomial Distribution 7 Positive Definite Symmetric Matrix 8 Multivariate Normal Distribution 9 Kullback-Leibler Divergence 10 Expectation Maximization Algorithm 11 Data Assimilation 12 Order Statistics 13 Sparse Modeling 14 Brownian motion 15 Neural Network プログラミング演習 配列モチーフ探索 最適行動列アルゴリズム Gene Network Inference Itemset mining algorithm","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-0.html"},{"title":"頻度パターンマイニング","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 参考資料： 頻出パターン発見アルゴリズム入門 -アイテム集合からグラフまで- Data Mining A formal study of efficient methods for extracting interesting rules and patterns from massive data. Frequent itemset mining. Closed pattern mining. Structured data mining. Itemset Mining Frequent Itemset Mining Closed Itemset Mining Closure Extension LCM Itemset Mining Frequent Itemset Mining Finding all \"frequent\" sets of elements(items) appearing $\\sigma$ times or more in a database. Definitions Database A set $\\Sigma = \\{1,\\ldots,n\\}$ of items(elements). Tramsaction database A set $T=\\{t_1,\\ldots,t_m\\}$ of subsets of $\\Sigma$ Each subset $t\\subseteq\\Sigma$ is called a transaction Frequent sets Itemset $X$ appears in transaction t: $X\\subseteq t$ Occurrence of $X$ in database $T$: $$\\mathrm{Occ}(X,T) = \\left\\{t\\in T: X\\subseteq t\\right\\}$$ Frequency of $X$: $\\mathrm{Fr}(X,T) = |\\mathrm{Occ}(X,T)|$ Minimum support (minsup): $0\\leq\\sigma\\leq|T|$ $X$ is frequent in $T$ if $\\mathrm{Fr}(X,T)\\geq\\sigma$ Market Basket Data Popular application of itemset mining. Business and Market data analysis. ※ Visit \"The Instacart Online Grocery Shopping Dataset 2017\" and Download \"instacart_2017_05_01\" Folder. In [1]: ! tree instacart_2017_05_01 instacart_2017_05_01 ├── aisles.csv ├── departments.csv ├── order_products__prior.csv ├── order_products__train.csv ├── orders.csv └── products.csv 0 directories, 6 files In [2]: import numpy as np import pandas as pd products.csv In [3]: df_products = pd . read_csv ( \"./instacart_2017_05_01/products.csv\" ) df_products . head ( 3 ) Out[3]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } product_id product_name aisle_id department_id 0 1 Chocolate Sandwich Cookies 61 19 1 2 All-Seasons Salt 104 13 2 3 Robust Golden Unsweetened Oolong Tea 94 7 In [4]: print ( f \"`products.csv` data num: { len ( df_products ) } \" ) `products.csv` data num: 49688 In [5]: id2name = dict ( zip ( df_products . product_id , df_products . product_name )) order_products__train.csv In [6]: df_order_products = pd . read_csv ( \"./instacart_2017_05_01/order_products__train.csv\" ) df_order_products . head ( 3 ) Out[6]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } order_id product_id add_to_cart_order reordered 0 1 49302 1 1 1 1 11109 2 1 2 1 10246 3 0 In [7]: N_transactions_total = len ( df_order_products . groupby ( \"order_id\" )) print ( f \"Total number of transactions: { N_transactions_total } \" ) Total number of transactions: 131209 Extract Only N products In [8]: N = 10 In [9]: extracted_ids = df_order_products . groupby ( \"product_id\" ) . size () . reset_index () . sort_values ( by = 0 , ascending = False ) . product_id [: N ] . values In [10]: # Only focus on N products. df_order_products_extracted = df_order_products [ df_order_products . product_id . apply ( lambda x : x in extracted_ids )] In [11]: N_transactions_extracted = len ( df_order_products_extracted . groupby ( \"order_id\" )) print ( f \"Transactions: { N_transactions_extracted } / { N_transactions_total } \" ) Transactions: 59887/131209 In [12]: for i , extracted_id in enumerate ( extracted_ids ): print ( f \"No. { i + 1 : >0 { len ( str ( N )) }} : { id2name [ extracted_id ] } \" ) No.01: Banana No.02: Bag of Organic Bananas No.03: Organic Strawberries No.04: Organic Baby Spinach No.05: Large Lemon No.06: Organic Avocado No.07: Organic Hass Avocado No.08: Strawberries No.09: Limes No.10: Organic Raspberries In [13]: df_product_id_OneHot = pd . get_dummies ( df_order_products_extracted . product_id ) In [14]: df_order_OneHot = pd . concat ([ df_order_products_extracted . order_id , df_product_id_OneHot ], axis = 1 ) In [15]: df = df_order_OneHot . groupby ( \"order_id\" ) . sum () . reset_index () In [16]: df . head ( 3 ) Out[16]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } order_id 13176 16797 21137 21903 24852 26209 27966 47209 47626 47766 0 1 1 0 0 0 0 0 0 1 0 0 1 96 0 0 0 0 0 0 1 0 0 0 2 98 1 0 0 0 0 0 1 0 0 0 In [17]: database = np . array ( df [ df . columns [ 1 :]]) In [18]: database Out[18]: array([[1, 0, 0, ..., 1, 0, 0], [0, 0, 0, ..., 0, 0, 0], [1, 0, 0, ..., 0, 0, 0], ..., [0, 0, 1, ..., 0, 0, 0], [0, 0, 0, ..., 0, 0, 0], [0, 0, 1, ..., 0, 0, 0]], dtype=uint8) In [19]: N , M = database . shape In [20]: print ( f \"n_samples: { N } \" ) print ( f \"n_features: { M } \" ) n_samples: 59887 n_features: 10 In [21]: from kerasy.search.itemset import FrequentSet In [22]: model = FrequentSet ( threshold = 100 ) In [23]: model . fit ( database ) In [24]: # Frequent Itemset. (frq >= threshold) model . all Out[24]: [None, array([0]), array([0, 1]), array([0, 1, 3]), array([0, 2]), array([0, 2, 3]), array([0, 2, 3, 6]), array([0, 2, 3, 7]), array([0, 2, 5]), array([0, 2, 6]), array([0, 2, 6, 7]), array([0, 2, 7]), array([0, 2, 8]), array([0, 2, 9]), array([0, 3]), array([0, 3, 5]), array([0, 3, 6]), array([0, 3, 6, 7]), array([0, 3, 7]), array([0, 3, 8]), array([0, 3, 9]), array([0, 5]), array([0, 5, 6]), array([0, 5, 7]), array([0, 5, 8]), array([0, 5, 9]), array([0, 6]), array([0, 6, 7]), array([0, 6, 8]), array([0, 6, 9]), array([0, 7]), array([0, 7, 8]), array([0, 8]), array([0, 8, 9]), array([0, 9]), array([1]), array([1, 3]), array([1, 3, 4]), array([1, 3, 9]), array([1, 4]), array([1, 4, 5]), array([1, 4, 8]), array([1, 4, 9]), array([1, 5]), array([1, 5, 8]), array([1, 6]), array([1, 7]), array([1, 8]), array([1, 8, 9]), array([1, 9]), array([2]), array([2, 3]), array([2, 3, 4]), array([2, 3, 5]), array([2, 3, 6]), array([2, 3, 7]), array([2, 3, 8]), array([2, 3, 9]), array([2, 4]), array([2, 4, 5]), array([2, 4, 6]), array([2, 4, 7]), array([2, 4, 8]), array([2, 4, 9]), array([2, 5]), array([2, 5, 6]), array([2, 5, 7]), array([2, 5, 8]), array([2, 5, 9]), array([2, 6]), array([2, 6, 7]), array([2, 6, 8]), array([2, 6, 9]), array([2, 7]), array([2, 7, 8]), array([2, 8]), array([2, 8, 9]), array([2, 9]), array([3]), array([3, 4]), array([3, 4, 5]), array([3, 4, 5, 8]), array([3, 4, 6]), array([3, 4, 7]), array([3, 4, 8]), array([3, 4, 8, 9]), array([3, 4, 9]), array([3, 5]), array([3, 5, 7]), array([3, 5, 8]), array([3, 5, 8, 9]), array([3, 5, 9]), array([3, 6]), array([3, 6, 7]), array([3, 6, 8]), array([3, 6, 9]), array([3, 7]), array([3, 7, 8]), array([3, 8]), array([3, 8, 9]), array([3, 9]), array([4]), array([4, 5]), array([4, 5, 7]), array([4, 5, 8]), array([4, 5, 8, 9]), array([4, 5, 9]), array([4, 6]), array([4, 6, 8]), array([4, 6, 9]), array([4, 7]), array([4, 7, 8]), array([4, 8]), array([4, 8, 9]), array([4, 9]), array([5]), array([5, 6]), array([5, 6, 7]), array([5, 6, 8]), array([5, 7]), array([5, 7, 8]), array([5, 8]), array([5, 8, 9]), array([5, 9]), array([6]), array([6, 7]), array([6, 8]), array([6, 8, 9]), array([6, 9]), array([7]), array([7, 8]), array([8]), array([8, 9]), array([9])] Association Rule Mining Confidence : $\\mathrm{Supp}(A\\text{ and }B)/\\mathrm{Supp}(A)$ (Probability of $B$, Given $A$) What item is likely to be bought when $A$ is bought. Search: large support, confidence large Post-processing of itemset mining Summary Itemset mining is the simplest of all mining algorithms. Need to maintain occurrence of each pattern in database. Tree by lexicographical order is (implicitly) used. Closed Itemset Mining [Problem] in Frequent Pattern Mining Huge Number of frequent itemsets Hard to analyze Most of them are similar [Solution] Closed Pattern Mining Find only closed patterns Observation : Most frequent itemset $X$ can be extended without changing occurrence by adding new elements. definition : An itemset $X$ is a \"closed set\" if and only if there is no proper superset of $X$ with the same frequency (thus the same occurrence set). A closed itemset is the maximal set among all itemsets with the same occurrences. Equivalence class $[X] =\\left\\{Y | \\mathrm{Occ}(X)=\\mathrm{Occ}(Y)\\right\\}$ Implementation. Brute-force: Stupid Baseline ALGORITHM: Bruteforcel First, generate all frequent itemsets. Check them one by one via maximality test Finally, extract all closed sets Maximality test for each candidate frequent set $X$ Add some element $e$ in $\\Sigma$ to $X$ If $\\mathrm{Freq}(X U \\{e\\})$ is properly less than $\\mathrm{Freq}(X)$ then reject $X$. ※ Number of patterns usually exponential to input size, so Brute-force is exponential delay w.r.t. pattern size. Reverse Search A general mathematical framework to design enumeration algorithms. Can be used to prove the correctness of the algorithm. Popular in computational geometry. Data mining algorithms can be explained in remarkable simplicity. How to do reverse Search? Native Backtracking → Duplication Duplication chack by Marking → Exponential Memory. Reduction Map : Mapping from a children to the parent. LCM(Linear Time Closed Sets Miner) Key Algorithm: Prefix Preserving Closure Extension = Children generation from the reduction map. 飽和集合列挙アルゴリズムを用いた大規模データベースからのルール発見手法 Python Implementation: I'm doing now XD Summary Closure Extension: Jump from closed set to closed set. LCM: Linear Delay. Very fast in practice, too (Winner of FIMI'04(Frequent Itemset Mining Implementation Workshop)). Relation to clique enumeration. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-5.html"},{"title":"機械学習概論","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 教師付き学習(Supervised learning) 大量の教師データがあれば、DNNですごい性能を出せるので、今の研究の主流は以下。 transfer learning (転移学習) few-shot learning (一枚だけで汎化性能を得る。) zero-shot learning (文字の情報を用いて画像の識別を行う。) メタ学習 (どうやって学習すれば良いかを学ぶ。) Nearest Neighbor法 決定木(decision tree) Support Vector Machine(SVM) アンサンブル学習 Neural Network Nearest Neighbor法 In [2]: N = 150 ; K = 3 In [3]: data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 1 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [4]: cls = np . concatenate ([ np . full ( shape = int ( N / 3 ), fill_value = 0 ), np . full ( shape = int ( N / 3 ), fill_value = 1 ), np . full ( shape = int ( N / 3 ), fill_value = 2 ), ]) In [5]: xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [6]: # Nearest Neighbor Zs = np . asarray ([ cls [ np . argmin ( np . sum ( np . square ( xy - data ), axis = 1 ))] for xy in XYs ], dtype = int ) . reshape ( Xs . shape ) In [7]: plt . figure ( figsize = ( 8 , 6 )) plt . scatter ( x , y , c = cls , s = 50 ) plt . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) plt . title ( \"Nearest Neighbor\" ), plt . xlim ( xmin , xmax ), plt . ylim ( ymin , ymax ) plt . xticks ([]), plt . yticks ([]) plt . show () 決定木(decision tree) $M$ 個のクラスに分割したとして、 $$\\text{Information gain} = \\text{Entropy}(S) - \\left\\{\\text{Entropy}(S_1) + \\cdots + \\text{Entropy}(S_M)\\right\\}$$ が最大になるように条件を設定する。 In [8]: from kerasy.ML.tree import DecisionTreeClassifier In [9]: N = 150 ; K = 3 In [10]: data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 1 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [11]: cls = np . concatenate ([ np . full ( shape = int ( N / 3 ), fill_value = 0 ), np . full ( shape = int ( N / 3 ), fill_value = 1 ), np . full ( shape = int ( N / 3 ), fill_value = 2 ), ]) In [12]: xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [13]: model = DecisionTreeClassifier ( criterion = \"gini\" , max_depth = 3 , random_state = 0 ) model . fit ( data , cls ) predictions = model . predict ( data ) In [14]: # Decision Tree Zs = model . predict ( XYs ) . reshape ( Xs . shape ) In [15]: fig = plt . figure ( figsize = ( 18 , 4 )) for i , seed in enumerate ([ 0 , 1 , 5 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) model = DecisionTreeClassifier ( criterion = \"gini\" , max_depth = 3 , random_state = seed ) model . fit ( data , cls ) predictions = model . predict ( data ) Zs = model . predict ( XYs ) . reshape ( Xs . shape ) ax . scatter ( x , y , c = predictions , s = 50 ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_title ( f \"Decision Tree seed= { seed } \" ), ax . set_xlim ( xmin , xmax ), ax . set_ylim ( ymin , ymax ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () Support Vector Machine(SVM) $$f(\\mathbf{x}) = \\mathbf{w}\\cdot\\mathbf{x} + \\mathbf{b} = \\mathbf{0}$$ $\\|\\mathbf{w}\\|$ を決定するためには、黄色の線上にある点(support vector)のみ寄与。SVMの重要なところは、通常 $$\\mathrm{Error}_{\\text{世の中全体}}>\\mathrm{Error}_{\\text{見たことのある世界}}$$ であるが、発明者 Vapnic が $$\\mathrm{Error}_{\\text{世の中全体}}\\leq\\mathrm{Error}_{\\text{見たことのある世界}} + \\alpha$$ を証明してしまった。なお、$\\alpha$ も $\\|\\mathbf{w}\\|$ の最小化で最小化できるため、$\\|\\mathbf{w}\\|$ の最小化をひたすら頑張るだけで良い。 ※ 実装は ここ アンサンブル学習 名前 説明 強学習器 bagging トレーニングデータをランダムにサンプリングして学習器 $f&#94;b(\\mathbf{x}),(b=1,2,\\ldots,B)$ を作る。 $$f(\\mathbf{x}) = \\frac{1}{B}\\sum_b&#94;Bf&#94;b(\\mathbf{x})$$ Random Forest (RF) 決定木 $f&#94;r(\\mathbf{x}),(r=1,2,\\ldots,R)$ をランダムに作る。木がたくさんあるので森(forest)になる。 $$f(\\mathbf{x}) = \\frac{1}{R}\\sum_r&#94;Rf&#94;r(\\mathbf{x})$$ boosting 弱学習器 $f&#94;t(\\mathbf{x})$ の精度に応じた重み付き多数決を行う。なお、$\\alpha$ の決め方はadaboostやXGboostなど様々ある。 $$f(\\mathbf{x}) = \\frac{1}{T}\\sum_t&#94;T\\alpha&#94;tf&#94;t(\\mathbf{x})$$ Neural Network パーセプトロン $\\mathbf{w}$ を法線と考えると、超平面のあっちとこっちを判定しているだけ＝SVMと同じ。 perceptronの学習アルゴリズムは、下記の流れで収束することが知られている。 重み（法線）ベクトルをランダムに設定 2クラス $0,1$ があったとして、training dataから順に取り出して、$y$ を出力してみる（平面のどちら側か） 合っていたら何もしない。間違っていたら $$ \\begin{cases} \\mathbf{w}\\longleftarrow\\mathbf{w} +\\rho \\mathbf{x} & (\\text{クラス1を0と誤判定した時})\\\\ \\mathbf{w}\\longleftarrow\\mathbf{w} -\\rho \\mathbf{x} & (\\text{クラス0を1と誤判定した時}) \\end{cases}$$ 2,3を全てのtraining dataに対して行う。 全てのtraining dataに対して正解が規定回数に達したら終了。それ以外の場合、2に戻る。 # Pythonでプログラム化すると以下。 while True : n_true = 0 for x , c in zip ( data , cls ): if c == 1 and sum ( w * x ) < 0 : w += rho * x elif c == 0 and sum ( w * x ) >= 0 : w -= rho * x else : n_true += 1 if n_true > N * true_rate : break In [16]: n_cls0 = 30 ; n_cls1 = 40 N = n_cls0 + n_cls1 In [17]: w = np . random . RandomState ( 0 ) . uniform ( size = 2 ) # Initialization. rho = 1e-3 # step size. true_rate = 0.9 In [18]: # train_x data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 2 , 4 ], cov = np . eye ( 2 ), size = n_cls0 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 1 ], cov = np . eye ( 2 ), size = n_cls1 ), ]) X1 , X2 = data . T # train_t cls = np . concatenate ([ np . zeros ( shape = ( n_cls0 ), dtype = int ), np . ones ( shape = ( n_cls1 ), dtype = int ) ]) In [19]: while True : n_true = 0 for x , c in zip ( data , cls ): if c == 1 and sum ( w * x ) < 0 : w += rho * x elif c == 0 and sum ( w * x ) >= 0 : w -= rho * x else : n_true += 1 if n_true > N * true_rate : break In [20]: X = np . linspace ( min ( X1 ), max ( X2 ), 1000 ) Y = ( - w [ 0 ] / w [ 1 ]) * X In [21]: plt . scatter ( X1 , X2 , c = cls ) plt . plot ( X , Y , color = \"red\" ) plt . xlabel ( \"$x_1$\" , fontsize = 18 ), plt . ylabel ( \"$x_2$\" , fontsize = 18 ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-4.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-4.html"},{"title":"生物統計論 第5回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section5.1 Bayesian Model Comparison Overfitting In [2]: N = 15 Ms = [ 2 , 4 , 8 , 16 ] seed = 0 In [3]: # Training data. x = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = N ) Noise = np . random . RandomState ( seed ) . normal ( loc = 0 , scale = 0.1 , size = N ) t = np . sin ( 2 * np . pi * x ) + Noise In [4]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= { M } $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ { RSS : .3f } $,M=$ { M } $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Varying Component Number In [5]: from kerasy.ML.MixedDistribution import MixedGaussian from kerasy.utils.data_generator import generateMultivariateNormal In [6]: N = 200 cls = 6 seed = 123 In [7]: data , means = generateMultivariateNormal ( cls = cls , N = N , scale = 8e-3 , same = False , seed = seed ) x , y = data . T mux , muy = means . T In [8]: # Background Color xmin , ymin = np . min ( data , axis = 0 ); xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [9]: Nfig = cls col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col fig = plt . figure ( figsize = ( 6 * col , 4 * row )) Likelihoods = [] for i , K in enumerate ( range ( 1 , cls + 1 )): ax = fig . add_subplot ( row , col , i + 1 ) model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data , span = 20 ) Z = model . predict ( XYs ) idx = np . argmax ( model . predict ( data ), axis = 1 ) Zs = np . sum ( Z , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. likelihood = np . sum ( Z ) ax . scatter ( x , y , c = idx ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( xmin , xmax ) ax . set_ylim ( ymin , ymax ) ax . set_title ( f \"K= { K } , { np . sum ( Z ) : .1f } \" ) Likelihoods . append ( likelihood ) plt . tight_layout () plt . show () In [10]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . scatter ( x , y , label = \"data\" ) axL . scatter ( mux , muy , label = \"mean\" , marker = \"*\" , color = \"red\" , s = 150 ) axL . set_title ( \"Training Data.\" ) axL . legend () axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( np . arange ( cls ) + 1 , Likelihoods ) axR . scatter ( np . arange ( cls ) + 1 , Likelihoods ) axR . set_xlabel ( \"num comp\" ) axR . set_ylabel ( \"likelihoods\" ) axR . set_title ( \"Log likelihood vs num comp\" , fontsize = 18 ) plt . tight_layout () plt . show () Cross Validation ※ Not Bayesian estimate the skill of a machine learning model on unseen data. use a limited sample in order to estimate how the model is expected to perform in general when used to make predictions on data not used during the training of the model. In [11]: n_fold = 5 size = N // n_fold Kmax = 30 In [12]: Likelihoods = [] CrossValidationLikelihoods = [] for i , K in enumerate ( range ( 1 , Kmax + 1 )): H = 0 for h in range ( n_fold ): mask = np . ones ( shape = N , dtype = bool ) mask [ h * size :( h + 1 ) * size ] = False model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data [ mask ], span = 20 ) Z = model . predict ( data [ np . logical_not ( mask )]) H += np . sum ( Z ) model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data , span = 20 ) Z = model . predict ( data ) Likelihoods . append ( np . sum ( Z )) CrossValidationLikelihoods . append ( H ) In [13]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . plot ( np . arange ( Kmax ) + 1 , CrossValidationLikelihoods ) axL . scatter ( np . arange ( Kmax ) + 1 , CrossValidationLikelihoods ) axL . set_xlabel ( \"num comp\" ), axL . set_ylabel ( \"Cross Validation likelihoods\" ), axL . set_title ( \"Cross Validation Log likelihood vs num comp\" , fontsize = 18 ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( np . arange ( Kmax ) + 1 , Likelihoods ) axR . scatter ( np . arange ( Kmax ) + 1 , Likelihoods ) axR . set_xlabel ( \"num comp\" ), axR . set_ylabel ( \"likelihoods\" ), axR . set_title ( \"Log likelihood vs num comp\" , fontsize = 18 ) plt . tight_layout () plt . show () Cross Entropy of Prediction ※ Not Bayesian empirical distribution $D = \\left\\{\\mathbf{x}&#94;{(h)}|h=1,\\ldots,n\\right\\}$ $x\\sim\\mathrm{Emp}(D)$ $f_X(\\mathbf{X}) = \\frac{1}{n}\\sum_{h=1}&#94;n\\delta\\left(\\mathbf{x}-\\mathbf{x}&#94;{(h)}\\right)$ $\\mathbb{E}\\left(g(\\mathbf{x})\\right) = \\frac{1}{n}\\sum_{h=1}&#94;n\\int d\\mathbf{x}g(\\mathbf{x})\\delta\\left(\\mathbf{x}-\\mathbf{x}&#94;{(h)}\\right) = \\frac{1}{n}\\sum_{h=1}&#94;ng\\left(\\mathbf{x}&#94;{(h)}\\right)$ In [14]: seed = 0 N = 1000 In [15]: data = np . random . RandomState ( seed ) . normal ( size = N ) In [16]: Emp = dict ( zip ( data , np . zeros ( N ))) for x in data : Emp [ x ] += 1 / N In [17]: for X , Y in sorted ( Emp . items ()): plt . plot (( X , X ),( 0 , Y ), color = \"black\" , alpha = 0.1 ) plt . title ( \"Empirical distribution (Normal)\" ) plt . xlabel ( \"x\" ) plt . show () We can assume Empirical distribution as a true distribution . Cross Entropy $$ \\begin{aligned} H(D,\\boldsymbol{\\theta}) &= \\text{Cross Entropy between }f_{\\text{Emp}(D)} \\text{ and }f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)\\\\ &= \\mathbb{E}_{\\text{Emp}(D)}\\left(-\\log f\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right)\\right)\\\\ &= -\\int f_{\\text{Emp}(D)}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &= -\\frac{1}{n}\\sum_{h=1}&#94;n\\log f\\left(\\mathbf{x}&#94;{(h)}|\\boldsymbol{\\theta}\\right)\\\\ &= -\\bar{l}&#94;{(n)}\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right) \\end{aligned} $$ We can also say that: $$ \\begin{aligned} H(D,\\boldsymbol{\\theta}) &= -\\int f_{\\text{Emp}}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &\\Rightarrow \\int f_{\\text{Emp}}(\\mathbf{x})\\log f_{\\text{Emp}}(\\mathbf{x})d\\mathbf{x} -\\int f_{\\text{Emp}}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &= -\\int f_{\\text{Emp}}(\\mathbf{x})\\log\\left\\{\\frac{f_{\\text{Emp}}(\\mathbf{x})}{f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)}\\right\\}d\\mathbf{x}\\\\ &= \\mathrm{KL}\\left(f_{\\text{Emp}}\\|f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)\\right)\\\\ &= \\text{Kullback-Leibler divergence between}f_{\\text{Emp}(D)} \\text{ and }f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right) \\end{aligned} $$ Evidence Approximation ※ Yes Bayesian In a fully Bayesian treatment of the linear basis function model, we would introduce prior distributions over the hyperparameters $\\alpha$, and $\\beta$. $$ \\begin{aligned} p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x},\\alpha,\\beta) &= \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)d\\mathbf{w}& (3.57)\\\\ &\\Rightarrow \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)p(\\alpha,\\beta|\\mathbf{t},\\mathbf{X})d\\mathbf{w}d\\alpha d\\beta& (3.74) \\end{aligned} $$ Marginalize with respect to these hyperparameters as well as with respect to the parameters $\\mathbf{w}$ to make predictions. Complete marginalization over all of these variables is analytically intractable. We will maximize $(3.74)$ in line with the framework of empirical Bayes (or type 2 maximum likelihood , generalized maximum likelihood , evidence approximation ) Obtain the marginal likelihoo function by first integrating over the parameters $\\mathbf{w}$ $$p(\\mathbf{t}|\\alpha,\\beta) = \\int p(\\mathbf{t}|\\mathbf{w},\\mathbf{X},\\beta)p(\\mathbf{w}|\\alpha)d\\mathbf{w}\\qquad (3.77)$$ Maximize $p(\\mathbf{t}|\\alpha,\\beta)$ with respect to $\\alpha$ and $\\beta$. In [18]: from kerasy.utils.preprocessing import PolynomialBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian from kerasy.ML.linear import EvidenceApproxBayesianRegression In [19]: N = 20 Ms = np . arange ( 10 ) xmin = 0 ; xmax = 1 seed = 0 In [20]: x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 0.15 , seed = seed ) y_train += 1 + y_noise In [21]: alpha = 100 beta = 100 In [22]: evidences = [] history = [] for M in Ms : phi = PolynomialBaseTransformer ( M = M ) x_train_features = phi . transform ( x_train ) model = EvidenceApproxBayesianRegression ( alpha = alpha , beta = beta , iter_max = 10000 ) model . fit ( x_train_features , y_train ) evidences . append ( model . evidence ( x_train_features , y_train )) history . append ( model ) best_M = np . argmax ( evidences [ 1 :]) + 1 best_model = history [ best_M ] In [23]: x_test = np . linspace ( xmin , xmax , 1000 ) phi = PolynomialBaseTransformer ( M = best_M ) x_test_features = phi . transform ( x_test ) y_test = 1 + np . sin ( 2 * np . pi * x_test ) y_pred , y_std = best_model . predict ( x_test_features ) In [24]: fig = plt . figure ( figsize = ( 12 , 4 )) axEVI = fig . add_subplot ( 1 , 2 , 1 ) axEVI . plot ( Ms , evidences ) axEVI . scatter ( Ms , evidences ) axEVI . set_title ( \"The relationship between 'model evidence' and $M$\" ), axEVI . set_xlabel ( \"$M$\" ), axEVI . set_ylabel ( \"$\\log({model\\ evidence})$\" , fontsize = 16 ) axBest = fig . add_subplot ( 1 , 2 , 2 ) axBest . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) axBest . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) axBest . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) axBest . scatter ( x_train , y_train , s = 50 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) axBest . set_ylim ( - 0.5 , 2.5 ), axBest . legend (), axBest . set_title ( f \"Bayesian Linear Regression (M= { best_M } )\" ) plt . tight_layout () plt . show () In [25]: print ( \"[Best Parameter]\" ) print ( f \"M = { best_M } \" ) print ( f \"alpha = { best_model . alpha } \" ) print ( f \"beta = { best_model . beta } \" ) [Best Parameter] M = 3 alpha = 0.0025750535934692723 beta = 56.07833727501231 Section5.2 Markov Process Biological Diversity Single Origin of Life \"Nothing in Biology Makes Sense Except in the Light of Evolution\" C.T. Dobzhansky Stochastic Transcription (Stochasticity vs Regulation) Stochasticity in Development Stochastic Process Mathematical description of stochastic behaviors. data: $\\left\\{\\mathbf{X}_t|t=1,\\ldots,n\\right\\}$ Probability: $\\mathbb{P}\\left(\\mathbf{X}_{t_m} = \\mathbf{x}_{t_m},\\ldots,\\mathbf{X}_{t_2} = \\mathbf{x}_{t_2},\\mathbf{X}_{t_1} = \\mathbf{x}_{t_1}\\right)$ $\\omega$ is one of the random paths. $\\mathbf{X}_t$ is a map indicats which state random paths $\\omega$ is in at time $t$ Events $E$ is a constraint on the value of $\\mathbf{X}_t$ at some times. $P(E)$ is the probability if the random paths satisfy the constraint $E$. markov Process $$\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t|\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right) = \\mathbb{P}\\left(\\mathbf{X}_t=\\mathbf{x}_t|\\mathbf{X}_{t-1}=\\mathbf{x_{t-1}}\\right)$$ Decomposition of Joint Distribution $$ \\begin{aligned} &\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t,\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &=\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &=\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1} | \\mathbf{X}_{t-2} = \\mathbf{x}_{t-2},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_{t-2} = \\mathbf{x}_{t-2},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &= \\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\cdots \\times\\mathbb{P}\\left(\\mathbf{X}_2=\\mathbf{x}_2|\\mathbf{X}_1=\\mathbf{x}_1,\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_1=\\mathbf{x}_1|\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_0=\\mathbf{x}_0\\right)\\\\ &= \\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1}\\right) \\times \\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1} | \\mathbf{X}_{t-2} = \\mathbf{x}_{t-2}\\right)\\times \\cdots\\times\\mathbb{P}\\left(\\mathbf{X}_1=\\mathbf{x}_1|\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_0=\\mathbf{x}_0\\right)\\quad\\left(\\because \\text{Markov Process}\\right) \\end{aligned} $$ Transition Matrix (Assume Time Independence ): $$P = \\left\\{P_{ij}\\right\\} = \\left\\{\\mathbb{P}\\left(\\mathbf{X}_t=i|\\mathbf{X}_{t-1}=j\\right)\\right\\},\\quad P_{ij}\\geq0,\\sum_i P_{ij}=1$$ Computing transition probability Birth and Death process $$ P= \\left(\\begin{matrix}1-\\lambda_0&\\mu_1&0&0\\\\\\lambda_0&1-\\lambda_1-\\mu_1&\\mu_2&0\\\\0&\\lambda_1&1-\\lambda_2-\\mu_2&\\mu_3\\\\0&0&\\lambda_2&1-\\mu_3\\end{matrix}\\right) $$ $P = U\\Lambda U&#94;{-1}$: Eigen decomposition $P&#94;n = U\\Lambda&#94;n U&#94;{-1}$ In [26]: def makeRandomP ( N , seed = 123 ): lambdas = np . r_ [ np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 / N , size = N - 1 ), np . zeros ( shape = 1 )] mus = np . r_ [ np . zeros ( shape = 1 ), np . random . RandomState ( seed + 1 ) . uniform ( low = 0 , high = 1 / N , size = N - 1 )] P = np . zeros ( shape = ( N , N )) for i in range ( N ): P [ i , - 1 + i ] = mus [ i ]; P [ i , i ] = 1 - mus [ i ] - lambdas [ i ]; P [ i , 1 + i if 1 + i < N else 1 + i - N ] = lambdas [ i ] return P In [27]: def LongTimeBehaviors ( P , even = True ): inf = 50 if even else 51 eigenvals , eigenvecs = np . linalg . eig ( P ) Lambda = np . diag ( eigenvals ) eigenvecs_inv = np . linalg . inv ( eigenvecs ) Pn = np . dot ( eigenvecs , np . dot ( Lambda ** inf , eigenvecs_inv )) Pn = np . where ( Pn < 1e-5 , 0 , Pn ) return Pn example Periodic In [28]: P = np . array ([ [ 0 , 1 , 0 ], [ 1 / 2 , 0 , 1 / 2 ], [ 0 , 1 , 0 ] ]) In [29]: print ( f \"P&#94;2n: \\n { LongTimeBehaviors ( P , even = True ) } \\n \" ) print ( f \"P&#94;2n+1: \\n { LongTimeBehaviors ( P , even = False ) } \" ) P&#94;2n: [[0.5 0. 0.5] [0. 1. 0. ] [0.5 0. 0.5]] P&#94;2n+1: [[0. 1. 0. ] [0.5 0. 0.5] [0. 1. 0. ]] Reducible In [30]: P = np . array ([ [ 1 / 3 , 3 / 4 , 0 , 0 ], [ 2 / 3 , 1 / 4 , 0 , 0 ], [ 0 , 0 , 1 / 3 , 3 / 4 ], [ 0 , 0 , 2 / 3 , 1 / 4 ] ]) In [31]: LongTimeBehaviors ( P ) Out[31]: array([[0.52941176, 0.52941176, 0. , 0. ], [0.47058824, 0.47058824, 0. , 0. ], [0. , 0. , 0.52941176, 0.52941176], [0. , 0. , 0.47058824, 0.47058824]]) Absorbing In [32]: P = np . array ([ [ 1 , 1 / 2 , 0 , 0 ], [ 0 , 0 , 1 / 2 , 0 ], [ 0 , 1 / 2 , 0 , 0 ], [ 0 , 0 , 1 / 2 , 1 ] ]) In [33]: LongTimeBehaviors ( P ) Out[33]: array([[1. , 0.66666667, 0.33333333, 0. ], [0. , 0. , 0. , 0. ], [0. , 0. , 0. , 0. ], [0. , 0.33333333, 0.66666667, 1. ]]) Irreducible, Aperiodic In [34]: P = np . array ([ [ 2 / 3 , 1 / 12 , 0 ], [ 1 / 3 , 5 / 8 , 1 / 8 ], [ 0 , 7 / 24 , 7 / 8 ], ]) In [35]: LongTimeBehaviors ( P ) Out[35]: array([[0.06976762, 0.06976748, 0.06976741], [0.27906992, 0.2790698 , 0.27906974], [0.65116246, 0.65116272, 0.65116286]]) In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-5.html"},{"title":"レポート課題4(10/24出題)","text":"gPK57PXgRQe+tqjrYliIWw==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report4.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report4.html"},{"title":"探索","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 講義概要 状態空間 15パズル 迷路 コスト無しグラフの探索 コスト付きグラフの探索 ゲーム木の探索 状態空間 ありうる局面の１つ１つを 状態 と言う。 状態全体からなる集合を 状態空間 と言う。 目的： 初期状態から出発して、許される 状態遷移 を繰り返し、最終状態へたどり着くこと。 これは、 グラフ(graph) の 探索(search) 問題と等価 （ノードが状態に、エッジが状態遷移にそれぞれ対応する。） 15パズル ルール： 一度に動かせるのは1パネルのみ。 飽きますに隣のパネルをずらす操作のみ可能 目標： 「できるだけ少ない手数で」 与えられた配置から元の配置に戻すこと。 元に戻すことが不可能な問題を識別する。 迷路 目的：スタートからゴールまで誘導する。 状態(state) $s$：移動できる場所 行動(action) $a$：進む方向 コスト無しグラフの探索 用語 意味 オープンリスト(open list) これから探索するノードの候補リスト クローズドリスト(closed list) 探索が終わったノードのリスト キュー(queue) 先入れ先出し スタック(stack) 後入れ先出し 探索の基本アルゴリズム open_list = [ initial_state ] # オープンリストは初期化状態のみ closed_list = [] # クローズドリストは空 while ( open_list ): # オープンリストが空になるまで以下を繰り返す。 state = getOptimalState ( open_list ) # オープンリストから（何らかの基準で）状態sを取り出す。 closed_list . append ( state ) # sをクローズドリストに追加する。 if state == last_state : break # sが最終状態ならば探索終了 open_list += [ s for s in state . transibles () if s not in closed_list ] # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストに追加する。 深さ優先探索 行き止まりに当たるまで進み、ゴールが見つからなかったら直近の分岐に戻って別の道を探す探索法。 メモリ使用量が少ない ゴールが近くにあっても、他の深い別れ道に迷い込むと時間がかかる ゴールが複数ある時、一番近くのものが見つかるとは限らない オープンリストは スタック （後入れ先出し） にする。 open_list = [ initial_state ] closed_list = [] while ( open_list ): state = open_list . pop ( 0 ) # オープンリストの先頭の状態sを取り出す。 closed_list . append ( state ) if state == last_state : break open_list . push ([ s for s in state . transibles () if s not in closed_list ]) # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストの\"先頭に\"追加する。 幅優先探索 分かれ道に来たらそれぞれの道を一歩ずつ進み，ゴールが見つからなかったらそれぞれの道をもう一歩ずつ進む探索法。 ゴールが近くにある時、早く見つかる。 ゴールが複数ある時、一番近くのものが見つかる。 分かれ道での分岐数が多いとメモリ使用量が多い。 オープンリストは キュー （先入れ後出し） にする。 open_list = [ initial_state ] closed_list = [] while ( open_list ): state = open_list . pop ( - 1 ) # オープンリストの\"末尾\"の状態sを取り出す。 closed_list . append ( state ) if state == last_state : break open_list . push ([ s for s in state . transibles () if s not in closed_list ]) # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストの\"先頭に\"追加する。 反復深化探索 深さに制限をつけて深さ優先探索を行い、徐々に深さを深くしていく探索法 ゴールが近くにある時、早く見つかる ゴールが複数ある時、一番近くのものが見つかる 同じノードを何度も訪れる（分岐が多いと影響小） まとめ 深さ優先探索・幅優先探索・反復深化探索は、グラフに関する特別な知識を使わずにオープンリストから状態を選択することから、 ブラインド探索(blined search) と呼ばれる。 # 探さ優先探索 幅優先探索 反復深化探索 完全性（必ず解が見つかるか） (completeness) $m$ が有限なら Yes Yes Yes 時間計算量 (time complexity) $\\mathrm{O}(b&#94;m)$ $\\mathrm{O}(b&#94;d)$ $\\mathrm{O}(b&#94;d)$ 空間計算量(space complexity) $\\mathrm{O}(bm)$ $\\mathrm{O}(b&#94;d)$ $\\mathrm{O}(bd)$ 最適性（一番近くの解が見つかるか） (optimality) Yes Yes Yes $b$：最大分岐数 $d$：一番浅い解の深さ $m$：最大の深さ コスト付きグラフの探索 各エッジに 遷移コスト が割り当てられている場合の最適遷移パス探索問題。 ブラインド探索 ：グラフに関する特別な知識を使わずにオープンリストから状態を選択。 貪欲探索(greedy search)：現在の状態からの遷移コストが最小の状態を選ぶ。 （深さ優先探索に対応） 最適探索(optimal search)：初期状態からの遷移コスト和が最小の状態を選ぶ。 （各コストが1だと幅優先探索になる。ダイクストラ法とも。） ヒューリスティック探索（最良優先探索, best-first search） ：グラフに関する何らかの知識を使ってオープンリストから適切と思われる状態を選択。 貪欲最良優先探索 $A&#94;{\\ast}$ 探索 貪欲最良優先探索 $\\hat{h}(s)$ を最小にする状態を選ぶ $h(s)$：$s$ から最終状態までの遷移コスト和の最小値 $\\hat{h}(s)$：$h(s)$ の推定（ヒューリスティック関数） 一度オープンリストに入ったの評価値更新は不要 ヒューリスティック関数の選び方： ユーザが 事前知識 により構築（例：直線距離） データから 機械学習 により自動構築 一般には完全性も最適性もないが、実用上は（そこそこ）うまくいくことが（それなりに）多い。 $A&#94;{\\ast}$ 探索(A-start search) $s$ を経由する場合の遷移コスト和の推定値 $\\left(\\hat{g}(s)+\\hat{h}(s)\\right)$ を最小にする状態を選ぶ。 $g(s)$：初期状態から $s$ までの遷移コスト和の最小値 $\\hat{g}(s)$：探索済みノードから $s$ に遷移する場合の最小値（ダイクストラ法と同じ） ノード $s$ を訪れると隣接ノードの $\\hat{g}(s&#94;{\\prime})$ が更新される。 $h(s)$：$s$ から最終状態までの遷移コスト和の最小値 $\\hat{h}(s)$：$h(s)$ のヒューリスティック推定値 最適経路上の $s$ ではいずれも $g(s)+h(s)$ が最小、経路外の点ではそれより大きい値をとることを利用 $\\forall s, 0\\leq\\hat{h}(s)\\leq h(s)$ が成り立つ時、$\\hat{h}(s)$ は 許容的(admissible) であるといい、この場合には $A&#94;{\\ast}$ 探索は最適性を持つ。 ※ 実装等は、 レポート課題 に記載。 In [1]: from kerasy.search.Astar import OptimalTransit In [2]: n = 3 m = 3 initial_str = \"2,-1,6,1,3,4,7,5,8\" last_str = \"1,2,3,4,5,6,7,8,-1\" In [3]: OptimalTransit ( n , m , initial_str , last_str , heuristic_method = \"Manhattan_distance\" , n_row = 5 ) n_transition = 9 ゲーム木の探索 2人のプレイヤーが交互に遷移先を決めるゲーム（ex. 将棋・囲碁・リバーシ・◯×など）における最適遷移探索問題 ミニマックス探索 自分は一番良い（点数を最大化する）手を選ぶ 相手は一番悪い（点数を最小化する）手を選ぶ アルファ・ベータ探索 ミニ・マックス探索では、全ての局面に対する点数を求める必要があり、時間がかかる。 不要な点数計算を省略することで効率化 $\\alpha$：max計算の際の下界値 $\\beta$：min計算の際の上界値 モンテカルロ木探索 アルファ・ベータ法を用いても、ゲーム木を深く探索するのは困難（$b&#94;d$ が $b&#94;{d/2}$ になる程度。） そこで、 ランダムに 手を打つ。 囲碁やスケジューリングなどで活用されている。 まとめ 広大な状態空間を効率よく探索したい コスト無しグラフの探索 コスト付きグラフの探索 ゲーム木の探索 膨大な状態空間の探索には，近似的な手法が有用 事前知識や機械学習によるヒューリスティック関数の構築 モンテカル 木探索 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-4.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-4.html"},{"title":"分子生命科学Ⅲ 第5回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 感覚神経系(3) 視覚系 末梢視覚系(眼) 網膜神経節細胞(retinal granule cell; RGC) 1 の受容野は、光によって 1 の発火パターンが変化する視野の領域または、それに相当する 網膜領域 である。 1 のそばに細胞外電極をおいて、単一のニューロンの発火パターンを測定できる。（ 2 ） 下図にあるスポット光を網膜上で動かし、 1 の発火パターンを調べることで、2種類の 1 があることが分かった。 実験結果 説明 （最上段） どちらの 1 も視覚刺激が無い状態で発火があった。 （2段目） 中心ON型 1 では中心部への明るい小さなスポット光で最もよく興奮した。 （3段目） スポットの直径を大きくすると、発火頻度は減少した。 これは、中心ON型 1 では、周辺部の光刺激が細胞を抑制するからである。中心OFF型 1 では、これと反対の性質を持つ。このように、 1 は、 単純に光に応答するのではなく、網膜内の狭い領域の明暗の対比を認識している ことがわかる。 では、続いて 受容野に照射した光の明暗境界に対する 神経節細胞の出力を調べる。 実験結果 説明 中心OFF神経節細胞は、全面が均等に照射された時は、中心部と周辺部が相殺して低レベルの反応を示す。 影が周辺部から入って中心部に達するまでは神経節細胞は過分極し、さらに反応が低下する。 影が中心部に入り始めると、中心部からの活性化が周辺部からの抑制を圧倒し、反応が増加する。 影が全面を覆うと中心部からの反応は再び相殺される。 これより、神経節細胞の反応は、 主に受容野内に明暗の境界があるかないか によって調節されることがわかる。 これらの実験から、視覚系は網膜上に当たる光の絶対的な強さよりも、むしろ空間の局所変化を感知するよう特殊化していると考えられる。 明暗知覚に関するコントラストの影響 このことは、視覚における 錯覚（錯視） が多くあることでもわかる。例えば、明暗知覚に関するコントラストの影響を考えると、以下の二つの画像は 中心の四角形の灰色の明度は同じ だが、左の方が 明るい ために、左の四角形の方が 暗く 見える。 中心ON型受容野は、左側では右側よりも周辺部に強い光を受けている。これより、左側の神経節細胞の反応は小さくなる。その結果、左の四角はより暗くなると考えられる。 網膜神経節細胞(retinal granule cell; RGC) 哺乳動物の網膜の神経節細胞は、その大半が中心ON型か、中心OFF型の中心-周辺受容野の仕組みを持つ。これらは細胞の 形態 ・ 接続様式 ・ 電気生理学的特性 に基づいてさらに分類されている。 マカグザルとヒトの網膜では、主要な2タイプの神経節細胞が際立っている。大きな 3 と、それよりは小さい 4 である。 4 は神経節細胞の約90%を締め、これは色（赤-緑対立）や形の識別に関与する。この細胞は、 刺激が与えられている間は持続的に放電し続ける 反応を示す。 3 は神経節細胞の約5%を締め、これは動きの検出に関与する。 4 に比べて より大きな受容野 を持ち、視神経内の活動電位を より速く伝達 し、光のコントラストが 小さい刺激に対してもより高い感受性 を持つ。また、 受容野中心部の刺激に対して一過性で群発性の活動電位で反応 する。 残りの5%は、特性がはっきりしない 5 からなる。 他にも、色（青-黄対立）や暗時には桿体からの情報を集める 6 など、網膜神経節細胞は全部で約20種類に分類されており、それぞれの種類の神経節細胞が網膜全体をタイルのように覆っている。 中枢視覚系 網膜（末梢視覚系）によって検出された情報から中枢視覚系が、物体の色・位置・動き等を抽出し、認知する。 視神経に始まる神経経路は、しばしば 7 と呼ばれる。 なお、 -fugal という接尾語は 遠ざかる という意のラテン語に由来しており、神経解剖学では一般的に、ある構造から離れていく経路を示すのに用いられる。 網膜から \"遠ざかる\" 神経節細胞の軸索は、3つの部位を通過した後、脳幹内でシナプスを形成する。網膜からのこの遠心路の3つの部位は、順に 8 、 9 、 10 である。 8 は視神経円板（視神経乳頭ともいう）の位置で左右の眼から出て、眼球背部の眼窩内にある脂肪組織をくぐり抜けた後、頭蓋底の孔（ 11 ）を通り頭蓋腔に入る。 左右の眼からの 8 は合流し、下垂体のすぐ前方の脳底部で 9 を形成する。 9 において、鼻側網膜からの軸索は互いに対側に交叉する。一側から他側への対をなす線維束の交叉は 12 と呼ばれる。（鼻側網膜から出る軸索だけが交叉するため、視交叉では網膜からの投射が半交叉することになる。） 網膜から出た軸索は、視交叉における半交叉を経て 10 を構成し、間脳の外側表面に沿って軟膜直下を走行する。 網膜の神経節細胞の軸索である視神経線維の一部は、中脳の 13 や視蓋前野にも投射する。 13 は、周囲で生じた感覚刺激に対して目と頭を向ける反射に関与している。 視蓋前野は、瞳孔の大きさやある種の眼球運動を制御する。また、日内リズムの振動体である視床下部の視交叉上核へも投射し、日内リズムの光同調に関与する。 脳機能の頭端移動の法則 いかなる動物においても 13 （ 14 ）は発達している。特に下等生物では 13 （ 14 ）はあらゆる感覚入力を統合し、延髄や脊髄に出力する重要な統合中枢である。 しかし、哺乳類になると、視覚の最高中枢は大脳皮質視覚野に移動する。 13 は視覚の面で言えば、 眼球運動（サッケード） の調節や頭の位置の制御を分担する。このように、 進化の過程で、下位脳の機能が大脳に代替されていくこと を、 「脳機能の頭端移動の法則」 という。 外側膝状体 視床背側に位置する左右の 15 は、2本の 10 の主要な投射部位である。横断面で見ると、それぞれの 15 では細胞が明瞭な6層構造をなして並んでいる。 15 15 の各層への網膜からの入力 左右の眼と各タイプの神経節細胞からの入力の分離 腹側の1,2層の細胞体は大きいので 大細胞層 と呼ばれる。 背側の4層は 小細胞層 と呼ばれる。 半交叉の結果、 15 には左右の眼球から、対側視野の視覚情報が届けられる。2,3,5層は同側の網膜から、1,4,6層は反対側の網膜からの投射を受ける。層が異なっても、それぞれの層の対応する部位は、視野の同じ部位から投射を受ける。 左右網膜の 3 ・ 4 ・ 5 も、それぞれ異なる層の細胞にシナプス結合する。 一次視覚野 15 の唯一の主要なシナプス標的は 一次視覚野 である。一次視覚野はブロードマンBrodmann17野で、霊長類の脳の後頭葉に位置する。この17野は、後頭葉内側面の鳥距離溝 （ちょうきょこう） を挟む領域で、その第4層に有髄線維が観察されるため、 16 とも呼ばれる。一次視覚野を指す用語としては、他に 17 などがある。 網膜で隣接する部位は、隣接する 15 に投射する。この網膜部位局在関係は、一次視覚野に投射する 15 でも保存されている。 一次視覚野の下部は、視野の上半分の情報を再現し、上部は視野の下半分の情報を再現する。中心視野の分析により多くの皮質が対応している。 視覚野では、特性の類似した細胞が垂直に並んでおり、以下の3つの視覚野の円柱構造（カラム, column）構造がある。 18 は、同側もしくは反対側網膜からの視覚入力を受けて発達する構造で、成熟動物ではこのカラム内のⅣ層ニューロンは単眼性の投射を受ける。 19 は、特定の方位を持つ単純な棒状刺激に反応するニューロンのカラム構造のこと。 20 は、Ⅱ層とⅢ層に見られる色刺激に感受性の高いニューロン集団で、ミトコンドリア代謝酵素活性の高いブロッブ(blob)領域と一致する。","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-5.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-5.html"},{"title":"ガウシアンプロセスとベイズ最適化","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt import seaborn as sns データ駆動科学とベイズ最適化 データ駆動科学では、データに基づいて、新たな知見・事柄を発見することが求められる 単に予測を行うだけでなく、それに基づいて「行動」を設計することが必要 これらは、「ベイズ最適化」の枠組みに乗ることが多い 概要 ベイズ線形回帰 ガウシアンプロセス ベイズ最適化 ベイズ線形回帰 線形回帰モデルのパラメータを 最尤推定 によって決める場合、 解こうとしている問題に合わせてモデルの複雑さを適切に決めることが必要 ↑は、単純に尤度を最大化するだけでは 過学習 を引き起こしてしまう。 データの一部を独立なテスト用データとして取っておく ことでモデルの汎化性能を評価できるが、この方法は 計算量が大きく 、 データの無駄遣い となり得る。 これらの問題に対処するため、線形回帰モデルをベイズ的に取り扱うことで最尤推定の過学習を回避するとともに 「訓練データだけからモデルの複雑さを自動的に決定する。」 概要 解こうとしている問題に沿った 尤度関数(likelihood function) （ $p(\\mathbf{t}|\\mathbf{X},\\mathbf{w})$ ） を定義する。 モデルパラメータの 事前分布(prior distribution) （ $p(\\mathbf{w})$ ） を、 尤度関数 の 共役事前分布(conjugate prior) の形で定義する。 ベイズの公式より、 事後分布(posterior distribution) は 事前分布 と 尤度関数 の積に比例する。 （ $p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})\\propto p(\\mathbf{t}|\\mathbf{X},\\mathbf{w})\\cdot p(\\mathbf{w})$ ） あるパラメータ （ $\\mathbf{w}$ ） 下で入力 $\\mathbf{x}$ が与えられた時の確率分布 （ $p(t|\\mathbf{w},\\mathbf{x})$ ） を、3で求めた 事後分布 （ $p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})$ ） で重み付けしながら 周辺化(marginalization) する （ $p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x}) = \\int p(t|\\mathbf{w},\\mathbf{x})p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})d\\mathbf{w}$ ） ことで、 予測分布(predivtive distribution) （ $p(t|\\mathbf{w},\\mathbf{x})$ ） を得る。 具体例 ※ $D$ 次元の説明変数 $\\mathbf{x}$ で一次元の目標変数 $t$ を線形回帰するモデルをベイズ的に取り扱う。 目標変数 $t$ が決定論的な関数 $y(\\mathbf{x},\\mathbf{w})$ と加法性のガウスノイズの和で与えられる場合を考える。 $$t = y(\\mathbf{x},\\mathbf{w}) + \\epsilon\\qquad (3.7)$$ ここで、$\\epsilon$ は期待値が $0$ で精度が $\\beta$ のガウス確率変数である。すなわち、以下で表すことができる。 $$p(t|\\mathbf{x},\\mathbf{w},\\beta) = \\mathcal{N}\\left(t|y(\\mathbf{x},\\mathbf{w}),\\beta&#94;{-1}\\right)\\qquad (3.8)$$ データ点が $(3.8)$ の分布から 独立に生成された と仮定すると、尤度関数を次のように表せる。 $$p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) = \\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)\\qquad (3.10)$$ モデルパラメータ $\\mathbf{w}$ の事前分布を導入する。 ここで、 $\\beta$ が既知 と仮定すると、上記の尤度関数の共役事前分布である、期待値 $\\mathbf{m}_0$ 共分散 $\\mathbf{S}_0$ を持つガウス分布で表すのが適当である。 $$p(\\mathbf{w}) = \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)\\qquad (3.48)$$ ※ なお、$\\mathbf{w},\\beta$ の両方が未知である場合、共役事前分布は ガウス-ガンマ分布 隣、予測分布は スチューデントのt分布 となる。 ベイズの公式より、 事後分布は事前分布と尤度関数の積に比例する ので、これを解くことで事後分布を次の形で書き出すことができる。 （導出） $$ p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) = \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N) \\qquad (3.49)\\\\ \\begin{cases} \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51) \\end{cases} $$ $\\mathbf{w}$ で周辺化することで、予測分布を求めるが、議論の簡単のために、 「モデルパラメータ $\\mathbf{w}$ の事前分布 $p(\\mathbf{w})$ が、単一の制度パラメータ $\\alpha$ で記述される期待値が $0$ の等方的ガウス分布である」 とする。 $$p(\\mathbf{w}|\\alpha) = \\mathcal{N}\\left(\\mathbf{w}|\\mathbf{0},\\alpha&#94;{-1}\\mathbf{I}\\right)\\qquad (3.52)$$ この時、上記の $\\mathbf{w}$ の事後分布 $(3.49)$ の形は変わらず、$\\mathbf{m}_N,\\mathbf{S}_N$ の値が $$ \\begin{cases} \\mathbf{m}_N &= \\beta\\mathbf{S}_N\\boldsymbol{\\Phi}&#94;T\\mathbf{t} & (3.53)\\\\ \\mathbf{S}_N&#94;{-1} &= \\alpha\\mathbf{I} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.54) \\end{cases} $$ となる。この条件下で周辺化すると、以下の結果を得る。 （導出） $$ \\begin{aligned} p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x},\\alpha,\\beta) &= \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)d\\mathbf{w}& (3.57)\\\\ &= \\mathcal{N}\\left(t|\\mathbf{m}_N&#94;T\\phi(\\mathbf{x}),\\sigma_N&#94;2(\\mathbf{x})\\right) & (3.58)\\\\ \\sigma_N&#94;2(\\mathbf{x}) &= \\frac{1}{\\beta} + \\phi(\\mathbf{x})&#94;T\\mathbf{S}\\phi(\\mathbf{x}) & (3.59) \\end{aligned} $$ ※ ここで、$(3.59)$ の第1項はデータに含まれるノイズを、第2項は $\\mathbf{w}$ に関する不確かさを反映している。 事後分布の計算の導出過程 $$ \\begin{aligned} \\text{likelihood function : } p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) &= \\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)& (3.10)\\\\ \\text{prior distribution : } p(\\mathbf{w}) &= \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)& (3.48)\\\\ \\text{posterior distribution : } p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) &= \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N) & (3.49)\\\\ \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51)\\\\ \\mathcal{N}(x|\\mu,\\sigma&#94;2) &= \\frac{1}{\\left(2\\pi\\sigma&#94;2\\right)&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2\\sigma&#94;2}(x-\\mu)&#94;2\\right\\} & (2.42)\\\\ \\mathcal{N}(\\mathbf{x}|\\boldsymbol{\\mu},\\boldsymbol{\\Sigma}) &= \\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}|&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)\\right\\} & (2.43) \\end{aligned} $$ $$ \\begin{aligned} p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) &\\propto p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) p(\\mathbf{w}) \\\\ &=\\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)\\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)\\\\ &\\propto\\prod_{n=1}&#94;N\\exp\\left\\{-\\frac{\\beta}{2}\\left(t_n-\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\right)&#94;2\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &=\\exp\\left\\{-\\frac{\\beta}{2}\\sum_{n=1}&#94;N\\left(t_n-\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\right)&#94;2\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &= \\exp\\left\\{-\\frac{\\beta}{2}\\left( \\begin{array}{c}t_1 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_1)\\\\ t_2 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_2) \\\\ \\vdots \\\\ t_N - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_N) \\end{array} \\right)&#94;T\\left( \\begin{array}{c}t_1 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_1)\\\\ t_2 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_2) \\\\ \\vdots \\\\ t_N - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_N) \\end{array} \\right) \\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &= \\exp\\left\\{-\\frac{\\beta}{2}\\left(\\mathbf{t}-\\boldsymbol{\\Phi}\\mathbf{w}\\right)&#94;T\\left(\\mathbf{t}-\\boldsymbol{\\Phi}\\mathbf{w}\\right)\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\}\\\\ &= \\exp\\left\\{ -\\frac{1}{2} \\left(\\beta\\mathbf{t}&#94;T\\mathbf{t} - \\beta\\mathbf{t}&#94;T\\boldsymbol{\\Phi}\\mathbf{w} - \\beta\\mathbf{w}&#94;T\\boldsymbol{\\Phi}&#94;T\\mathbf{t} + \\beta\\mathbf{w}&#94;T\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi}\\mathbf{w} + \\mathbf{w}&#94;T\\mathbf{S}_0&#94;{-1}\\mathbf{w} - \\mathbf{w}&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0 - \\mathbf{m}_0&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{w} + \\mathbf{m}_0&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right)\\right\\}\\\\ &= \\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}&#94;T\\left(\\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} + \\mathbf{S}&#94;{-1}_0\\right)\\mathbf{w} - \\mathbf{w}&#94;T\\left(\\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t} + \\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right) - \\left(\\beta\\mathbf{t}&#94;T\\boldsymbol{\\Phi} + \\mathbf{m}_0\\mathbf{S}&#94;{-1}_0\\right)\\mathbf{w} + \\left(\\beta\\mathbf{t}&#94;T\\mathbf{t} + \\mathbf{m_0}&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right)\\right)\\right\\} \\\\ &=\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w} - \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right)\\right)&#94;T\\mathbf{S}_N&#94;{-1}\\left(\\mathbf{w} - \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right)\\right) + \\mathrm{C} \\right\\}\\\\ &\\propto\\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N)\\\\ &\\begin{cases} \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51)\\\\\\end{cases} \\end{aligned}\\\\ $$ 周辺化計算の導出過程 以下の「ガウス分布の周辺分布と条件付き分布の関係」の $(2.115)$ の結果を用いる。 $\\mathbf{x}$ の周辺ガウス分布と、$\\mathbf{x}$ が与えられた時の $\\mathbf{y}$ の条件付きガウス分布が次式で与えられたとする。 $$ \\begin{aligned} p(\\mathbf{x}) &=\\mathcal{N}\\left(\\mathbf{x} | \\boldsymbol{\\mu}, \\mathbf{\\Lambda}&#94;{-1}\\right) & (2.113)\\\\ p(\\mathbf{y} | \\mathbf{x}) &=\\mathcal{N}\\left(\\mathbf{y} | \\mathbf{A} \\mathbf{x}+\\mathbf{b}, \\mathbf{L}&#94;{-1}\\right) & (2.114)\\end{aligned} $$ この時、$\\mathbf{y}$ の周辺分布と、$\\mathbf{y}$ が与えられた時の $\\mathbf{x}$ の条件付き分布は $$ \\begin{aligned} p(\\mathbf{y}) &=\\mathcal{N}\\left(\\mathbf{y} | \\mathbf{A} \\boldsymbol{\\mu}+\\mathbf{b}, \\mathbf{L}&#94;{-1}+\\mathbf{A} \\mathbf{\\Lambda}&#94;{-1} \\mathbf{A}&#94;{\\mathrm{T}}\\right) & (2.115)\\\\ p(\\mathbf{x} | \\mathbf{y}) &=\\mathcal{N}\\left(\\mathbf{x} | \\mathbf{\\Sigma}\\left\\{\\mathbf{A}&#94;{\\mathrm{T}} \\mathbf{L}(\\mathbf{y}-\\mathbf{b})+\\mathbf{\\Lambda} \\boldsymbol{\\mu}\\right\\}, \\mathbf{\\Sigma}\\right) & (2.116) \\end{aligned} $$ で与えられる。ただし、 $$\\mathbf{\\Sigma} = \\left(\\mathbf{\\Lambda} + \\mathbf{A}&#94;T\\mathbf{LA}\\right)&#94;{-1}\\qquad (2.117)$$ である。 実装 In [2]: from kerasy.ML.linear import BayesianLinearRegression from kerasy.utils.preprocessing import GaussianBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian In [3]: N = 25 ; D = 1 ; M = 25 xmin = 0 ; xmax = 1 seed = 10 In [4]: alpha = 1 beta = 25 In [5]: x_test = np . linspace ( xmin , xmax , 1000 ) y_test = np . sin ( 2 * np . pi * x_test ) x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 1 / beta , seed = seed ) y_train += y_noise In [6]: # transform mu = np . linspace ( xmin , xmax , M ); sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) x_train_features = phi . transform ( x_train ) x_test_features = phi . transform ( x_test ) In [7]: random_idx = np . random . RandomState ( seed ) . choice ( N , N ) In [8]: fig = plt . figure ( figsize = ( 16 , 8 )) for i , n in enumerate ([ 1 , 2 , 4 , 25 ]): ax = fig . add_subplot ( 2 , 2 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( x_train_features [ random_idx [: n ]], y_train [ random_idx [: n ]]) y_pred , y_std = model . predict ( x_test_features ) ax . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) ax . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( x_train [ random_idx [: n ]], y_train [ random_idx [: n ]], s = 150 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) ax . set_ylim ( - 1.5 , 1.5 ), ax . legend (), ax . set_title ( f \"Bayesian Linear Regression (N= { n } )\" ) plt . tight_layout () plt . show () ガウシアンプロセス 回帰分析のための カーネル法 テストサンプルに対して、 予測値だけでなく、予測分散も与えることができる。 線形回帰のモデルは、以下で表されていた。 $$y(\\mathbf{x},\\mathbf{w}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x})\\qquad (3.3)$$ この結果に、ベイズ線形回帰の結果 $(3.53)$ を代入すると、 $$ \\begin{aligned} y(\\mathbf{x},\\mathbf{m}_N) &= \\mathbf{m}_N\\phi(\\mathbf{x}) = \\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\boldsymbol{\\Phi}&#94;T\\mathbf{t} \\\\ &= \\sum_{n=1}&#94;N\\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}_n)t_n & (3.60)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51) \\end{aligned} $$ したがって、点 $\\mathbf{x}$ での予測分布の平均は訓練データの目標変数 $t_n$ の線型結合で与えられるので、 $$ \\begin{aligned} y(\\mathbf{x},\\mathbf{m}_N) &= \\sum_{n=1}&#94;Nk(\\mathbf{x}, \\mathbf{x}_n)t_n & (3.61)\\\\ k(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}) &= \\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}&#94;{\\prime}) & (3.62)\\\\ &= \\left(\\beta&#94;{1/2}\\mathbf{S}_N&#94;{1/2}\\phi(\\mathbf{x})\\right)&#94;T\\left(\\beta&#94;{1/2}\\mathbf{S}_N&#94;{1/2}\\phi(\\mathbf{x})\\right) & (3.65) \\end{aligned} $$ とかける。なお、$k(\\mathbf{x}, \\mathbf{x}&#94;{\\prime})$ を 平滑化行列(smoother matrix) 、または 等価カーネル(equivalent kernel) と呼ぶ。（$(3.65)$ から、等価カーネルが通常のカーネル関数が満たすべき性質を満たしていることがわかる。） また、訓練データの目標値の線型結合を取ることで予測を行う上記のような回帰関数を 線形平滑器(linear smoother) と呼ぶ。 In [9]: from kerasy.utils.preprocessing import GaussianBaseTransformer , SigmoidBaseTransformer , PolynomialBaseTransformer In [10]: X = np . linspace ( - 1 , 1 , 200 ) M = 15 mu = np . linspace ( - 0.9 , 0.9 , M ); sigma = 0.1 gausian_phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) In [11]: def mkSmootherMatrix ( X , phi , alpha = 1 , beta = 25 ): X_feature = phi . transform ( X ) N , M = X_feature . shape SN = np . linalg . inv ( alpha * np . eye ( M ) + beta * X_feature . T . dot ( X_feature )) K = beta * np . dot ( X_feature , np . dot ( SN , X_feature . T )) return K In [12]: K = mkSmootherMatrix ( X , gausian_phi ) In [13]: SP = [ 30 , 120 , 150 ] colors = [ \"red\" , \"salmon\" , \"pink\" ] In [14]: fig = plt . figure ( figsize = ( 12 , 6 )) axKernel = plt . subplot2grid (( 3 , 2 ), ( 0 , 1 ), rowspan = 3 ) axKernel = sns . heatmap ( K , vmin = np . min ( K ), vmax = np . max ( K ), cmap = \"jet\" , cbar = False , square = True , ax = axKernel ) axKernel . set_xticks ([]), axKernel . set_yticks ([]) axKernel . set_xlabel ( \"$x$\" , fontsize = 18 ), axKernel . set_ylabel ( \"$x&#94;{\\prime}$\" , fontsize = 18 ) for i in range ( 3 ): axL = plt . subplot2grid (( 3 , 2 ), ( i , 0 )) axL . set_facecolor ( 'lightcyan' ) axL . plot ( K [ SP [ i ]], color = colors [ i ], linewidth = 4 ) axL . set_xticks ([]), axL . set_yticks ([]) axKernel . axhline ( SP [ i ], color = colors [ i ], linewidth = 10 , alpha = 0.7 ) plt . tight_layout () plt . show () In [15]: Transformers = [ ( GaussianBaseTransformer , mu ), ( SigmoidBaseTransformer , mu ), ( PolynomialBaseTransformer , 10 ), ] In [16]: fig = plt . figure ( figsize = ( 12 , 4 )) for i ,( phi_func , param ) in enumerate ( Transformers ): ax = fig . add_subplot ( 1 , 3 , i + 1 ) phi = phi_func ( param ) K = mkSmootherMatrix ( X , phi ) ax . plot ( K [ 100 ], color = \"blue\" ) ax . scatter ( 100 , 0 , color = \"red\" , marker = \"x\" , s = 150 , label = \"$x&#94;{\\prime}$\" ) ax . set_xticks ([]), ax . set_yticks ([]), ax . set_title ( f \"$k(x,x')$: { phi . __name__ } \" , fontsize = 16 ) ax . set_xlabel ( \"$x$\" , fontsize = 18 ), ax . legend () plt . tight_layout () plt . show () カーネル関数の例 を見ればわかるよう、 対応する基底関数が局所的でないにも関わらず、等価カーネルは $x&#94;{\\prime}$ に関して局所的な関数となっていることがわかる！！ また、$y(\\mathbf{x})$ と $y(\\mathbf{x}&#94;{\\prime})$ の共分散を考えると、 $$ \\begin{aligned} \\mathrm{cov}\\left[y(\\mathbf{x}),y(\\mathbf{x}&#94;{\\prime})\\right] &= \\mathrm{cov}\\left[\\phi(\\mathbf{x})&#94;T\\mathbf{w}, \\mathbf{w}&#94;T\\phi(\\mathbf{x})\\right]\\\\ &= \\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}&#94;{\\prime}) = \\beta&#94;{-1}k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})\\quad(3.63) \\end{aligned} $$ となる。ここで、上述の等価カーネルの形状を考えると、 近接での予測平均は互いに強い相関を持っている一方で、より離れた点の組では相関は小さくなることがわかる。 ベイズ線形回帰 のように基底関数の集合を明示的に定義するのではなく、局所的なカーネルを直接定義し、観測された訓練集合が与えられた時、この局所的なカーネルを用いて新たな入力ベクトル $\\mathbf{x}$ に対する予測値を求めることができる。 この定式化から、回帰（と分類）に対する実用的な枠組みである ガウス過程(Gaussian process) が得られる。 ベイズ最適化 $M$ 個の候補点があり、この中から最大の観測値を持つものを探したい。 できるだけ実験数を少なくしたい。 $N$ 個の候補点に対する実験が終わった。$M-N$ 個の候補点が残っている。 次の $N+1$ 個目の候補点を最適に選びたい。 $N$ 個の化合物から予測モデルを学習し、それを用いて、残りの候補点を スコアリング し決定。 Maximum Probability of Improvement: Current Maxを超える確率。 Maximum Expected Improvement: (観測値-Current Max)の期待値。 Thompson Sampling: 残りのM-N個候補点に対して、条件つき結合確率からサンプリングを行い、そのサンプリング値をスコアとする。 In [17]: xmin = 0 ; xmax = 1 N = 1000 ; M = 25 seed = 1 In [18]: alpha = 1 beta = 25 In [19]: X = np . linspace ( xmin , xmax , N ) Y = 5e1 * X * ( X - 0.2 ) * ( X - 0.3 ) * ( X - 0.7 ) * ( X - 1 ) _ , noise = generateGausian ( size = 1000 , x = X , loc = 0 , scale = 1 / beta , seed = seed ) Y_ob = Y + noise In [20]: mu = np . linspace ( xmin , xmax , M ) sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) In [21]: X_features = phi . transform ( X ) In [22]: fig = plt . figure ( figsize = ( 18 , 8 )) idx = np . random . RandomState ( seed ) . choice ( N , 2 ) # Initialization. next_idx = idx for i , _ in enumerate ( range ( 12 )): ax = fig . add_subplot ( 3 , 4 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( X_features [ idx ], Y_ob [ idx ]) y_pred , y_std = model . predict ( X_features ) current_max = np . max ( Y_ob [ idx ]) max_improve_id = np . argmax ( y_pred ) ax . plot ( X , Y , color = \"black\" , label = \"True distribution\" ) ax . plot ( X , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( X , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( X [ idx ], Y_ob [ idx ], s = 50 , edgecolors = 'black' , facecolor = \"white\" , label = \"Observation\" ) ax . scatter ( X [ next_idx ], Y_ob [ next_idx ], s = 150 , edgecolors = 'black' , facecolor = \"black\" , label = \"New Obsevation\" ) ax . set_xlabel ( \"Explanatory Variable\" ), ax . set_ylabel ( \"Measured Value\" ), ax . set_title ( f \"N= { len ( idx ) } , Max= { current_max : .3f } \" ) ax . set_ylim ( - 0.5 , 0.3 ), ax . set_xticks ([]), ax . set_yticks ([]) ax . axhline ( current_max , color = \"green\" , label = \"Current Maximum\" ) ax . axvline ( np . max ( X [ max_improve_id ]), color = \"blue\" , label = \"Maximum Probability of Improvement\" ) next_idx = max_improve_id if np . random . uniform () > 0.5 else np . random . choice ( N , 1 ) idx = np . r_ [ idx , next_idx ] ax . legend () plt . tight_layout () plt . show () おわりに（データ駆動科学） データ駆動科学では、データに基づいて、新たな知見・事柄を発見することが求められる。 単に予測を行うだけでなく、それに基づいて次の「行動」を設計することが必要 これらは、ベイズ最適化の枠組みに乗ることが多い。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-4.html"},{"title":"特徴選択","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 主成分分析(PCA) In [2]: N = 20 seed = 0 In [3]: X = np . linspace ( 0 , 1 , N ) Y = X + np . random . RandomState ( N ) . normal ( loc = 0 , scale = 5e-2 , size = N ) data = np . vstack (( X , Y )) In [4]: def Rotate ( x , radian ): A = np . array ([ [ np . cos ( radian ), - np . sin ( radian )], [ np . sin ( radian ), np . cos ( radian )] ]) return np . dot ( A , data ) In [5]: fig = plt . figure ( figsize = ( 10 , 4 )) ax = fig . add_subplot ( 1 , 2 , 1 ) ax . scatter ( X , Y , color = \"black\" ), ax . set_title ( \"Original\" ) X_tra , Y_tra = Rotate ( data , radian =- 1 / 4 * np . pi ) ax = fig . add_subplot ( 1 , 2 , 2 ) ax . scatter ( X_tra , Y_tra , color = \"red\" ), ax . set_title ( \"Rotated\" ), ax . set_ylim ( - 1 / 2 * np . sqrt ( 2 ), 1 / 2 * np . sqrt ( 2 )) plt . tight_layout () plt . show () $2$ 次元空間で左上図のようなデータがあったとする。この時、このデータを表現するのに $(x,y)$ の二次元が必要だろうか？ データ全体を右に $1/4\\pi$ 回転させると、右上図のようなデータれるとなる。この場合、$y&#94;{\\prime}$ 軸方向はノイズとみなせ、$x&#94;{\\prime}$ 軸のみでデータを表現していると言える。 この例のように、$K$ 次元のデータであっても、で０他の偏りによって $M( こういった場合に、 「$M$ 方向の軸をどのように決めるか？」 、 「$M$ をどうやって決めるか？」 などが問題となる。 ※ 詳しくは 主成分分析(PCA) に記載。 線形判別分析(LDA) 入力ベクトル $\\mathbf{x}$ を $K$ クラスの一つ $C_k$ に割り当てる関数である識別（決定面が超平面となるとき、 線形識別(linear discriminant) ）を、 「次元の削減」 という観点から捉えることができる。 2クラス分類 $D$ 次元入力ベクトルを得て、それを以下の式で $1$ 次元に射影するとする。 $$y = \\mathbf{w}&#94;T\\mathbf{x}\\qquad (4.20)$$ ある閾値を設定し、$y\\geq-w_0$ の場合クラス $C_1$、そうでない場合クラス $C_2$ であるとすると、 標準的な線形分類器が得られる。 一般に、$D$ 次元から $1$ 次元へ射影することによって相当量の情報量の損失を発生させる。 重みベクトル $\\mathbf{w}$ の要素を調整することで、 クラスの分離を最大にする射影を選択したい。 $\\mathbf{w}$ 上へ射影された際のクラス分離度の最も簡単な測定法は、 射影されたクラスの平均の分離度（以下の式） を見ることである。 $$m_2-m_1 = \\mathbf{w}&#94;T\\left(\\mathbf{m}_2-\\mathbf{m}_1\\right) = \\mathbf{w}&#94;T\\left(\\frac{1}{N_2}\\sum_{n\\in C_2}\\mathbf{x}_n -\\frac{1}{N_1}\\sum_{n\\in C_1}\\mathbf{x}_n\\right)\\qquad (4.21)\\ \\&\\ (4.22)$$ 上の式は $\\mathbf{w}$ の値を大きくすればいくらでも大きな値にすることができるので、 $\\mathbf{w}$ が単位長である（$\\sum_i w_i&#94;2 = 1$）という制約を加える。 ラグランジュ乗数を用いてこれを解くと、$\\mathbf{w}\\propto(\\mathbf{m}_2-\\mathbf{m}_1)$ が得られる。 クラス分布の非対角な共分散が強い場合など、一般に、 各クラスの平均値だけを見ていても上手く判別する事ができない。 そこでフィッシャーが提案した方法が、 「射影されたクラス平均間の分離度を大きくすると同時に、各クラス内では小さな分散を与える関数を最大化する」 クラス $C_k$ から射影されたデータのクラス内分散は以下で与えられる。 $$s_k&#94;2 = \\sum_{n\\in C_k}(y_n-m_k)&#94;2\\qquad (4.2)$$ 全データ集合に対する総クラス内分散が $s_1&#94;2+s_2&#94;2$ であると定義する。 フィッシャーの判別基準は、 クラス間分離度 と クラス内分散 の比率で表される。 $$ \\begin{aligned} J(\\mathbf{w}) &= \\frac{(m_2-m_1)&#94;2}{s_1&#94;2 + s_2&#94;2} & (4.25)\\\\ &= \\frac{\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}}{\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}} & (4.27)\\\\ \\mathbf{S}_{\\mathrm{B}} &= (\\mathbf{m}_2-\\mathbf{m}_1)(\\mathbf{m}_2-\\mathbf{m}_1)&#94;T & (4.27)\\\\ \\mathbf{S}_{\\mathrm{W}} &= \\sum_{n\\in C_1}(\\mathbf{x}_n-\\mathbf{m}_1)(\\mathbf{x}_n-\\mathbf{m}_1)&#94;T + \\sum_{n\\in C_2}(\\mathbf{x}_n-\\mathbf{m}_2)(\\mathbf{x}_n-\\mathbf{m}_2)&#94;T& (4.27)\\\\ \\end{aligned} $$ $\\mathbf{S}_{\\mathrm{B}}$ を クラス間共分散行列(between-class covariance matrix) と呼ぶ。 $\\mathbf{S}_{\\mathrm{W}}$ を (総)クラス内共分散行列(within-class covariance matrix) と呼ぶ。 $J(\\mathbf{w})$ を $\\mathbf{w}$ に関して微分すると、以下の式が満たされる場合に $J(\\mathbf{w})$ が最大となる事がわかる。 $$ \\begin{aligned} \\frac{dJ(\\mathbf{w})}{d\\mathbf{w}} &= \\frac{\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}} + \\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right) - \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}} + \\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)}{\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)&#94;2}\\\\ \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}} + \\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right) &= \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}} + \\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)\\\\ \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}&= \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\qquad (4.29) \\end{aligned} $$ $(4.27)$ から、 $\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}$ は常に $(\\mathbf{m}_2-\\mathbf{m}_1)$ と同じ方向を持つ。 $\\mathbf{w}$ の方向だけが重要で、 大きさは考慮する必要がないので、スカラーファクタ $\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)$ と $\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)$ を無視できる。 $(4.29)$ の両辺に $\\mathbf{S}_{\\mathrm{W}}&#94;{-1}$ を左からかけて、 フィッシャーの線形判別(Fisher's linear discriminant) が得られる。 $$\\mathbf{w}\\propto\\mathbf{S}_{\\mathrm{W}}&#94;{-1}(\\mathbf{m}_2-\\mathbf{m}_1)\\qquad (4.30)$$ フィッシャーの線形判別(Fisher's linear discriminant) は、厳密には識別子ではなく、 むしろ $1$ 次元へ削減する際のデータの射影方向の選択を行なっている。 In [6]: from kerasy.ML.decomposition import LDA In [7]: N1 = 100 ; N2 = 100 cov = [[ 10 , 1 ],[ 1 , 3 ]] In [8]: x1 = np . random . RandomState ( seed ) . multivariate_normal ([ 0 , 7 ], cov , N1 ) x2 = np . random . RandomState ( seed + 1 ) . multivariate_normal ([ 8 , 6 ], cov , N2 ) x1min = np . min ( x1 ); x1max = np . max ( x1 ) x2min = np . min ( x2 ); x2max = np . max ( x2 ) m1 = np . mean ( x1 , axis = 0 ); m2 = np . mean ( x2 , axis = 0 ) m = ( m1 + m2 ) / 2 data = np . r_ [ x1 , x2 ] In [9]: X = np . linspace ( - 100 , 100 , 1000 ) In [10]: fig = plt . figure ( figsize = ( 12 , 6 )) for i , tf in enumerate ([ True , False ]): model = LDA () model . fit ( x1 , x2 , mean_only = tf ) w1 , w2 = model . w alpha = - w2 / w1 beta = m [ 1 ] - alpha * m [ 0 ] x_features = model . transform ( data ) axT = fig . add_subplot ( 2 , 2 , i + 1 ) axT . plot ( X , X * ( - w2 / w1 ) + beta , color = \"black\" , label = \"linear discriminant\" ) axT . scatter ( x1 [:, 0 ], x1 [:, 1 ], color = \"blue\" , label = \"class1\" ) axT . scatter ( x2 [:, 0 ], x2 [:, 1 ], color = \"red\" , label = \"class2\" ) axT . scatter ( m1 [ 0 ], m1 [ 1 ], color = \"green\" , marker = \"*\" , s = 200 ), axT . scatter ( m2 [ 0 ], m2 [ 1 ], color = \"green\" , marker = \"*\" , s = 200 , label = \"mean\" ) axT . set_xlim ( x1min , x1max ), axT . set_ylim ( x2min , x2max ) axT . set_xticks ([]), axT . set_yticks ([]), axT . legend (), axT . set_title ( \"Only Mean\" if tf else \"Fisher's linear discriminant\" ) axB = fig . add_subplot ( 2 , 2 , 3 + i ) axB . hist ( x_features [: N1 ], alpha = 0.3 , color = \"blue\" , label = \"class1\" ) axB . hist ( x_features [ N1 :], alpha = 0.3 , color = \"red\" , label = \"class2\" ) axB . set_xticks ([]), axB . set_yticks ([]), axB . legend () plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-3.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-3.html"},{"title":"生物統計論 第4回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section4.1 Expectation Maximization Algorithm The expectation maximization algorithm, or EM algorithm, is a general technique for finding maximum likelihood solutions for probabilistic models having latent variable. Consider a probabilistic model in which we collectively denote all of the observed variables by $\\mathbf{X}$ all of the hidden variables by $\\mathbf{Z}$ (assuming discrete, but discussion is identical if continuous) joint distribution by $p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)$ Goal is to maximize the likelihood function that is given by $$p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) = \\sum_{\\mathbf{Z}}p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)\\qquad (9.69)$$ Properties Guaranteed to terminate Likelihood always increases Solving M-step is often easy No need to traverse the data Separation of parameter dependency $\\log(pq)=\\log(p)+\\log(q)$ Sometimes solved exactly Often a few times faster than gradient descent (if stopping condition is not too stringent) Expectation values characterize the optimized model Lower Bound of Likelihood $\\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right)$ and $\\mathrm{KL}\\left(q\\|p\\right)$ We shall suppose that direct optimization of $p(\\mathbf{X}|\\boldsymbol{\\theta})$ is difficult the optimization of the complete-data likelihood function $p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)$ is significantly easier We introduce a distribution $q\\left(\\mathbf{Z}\\right)$ defined over the latent variables. For any choice of $q\\left(\\mathbf{Z}\\right)$, the following decomposition holds $$ \\begin{aligned} \\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) &= \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) + \\mathrm{KL}\\left(q\\|p\\right) &(9.70)\\\\ \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.71)\\\\ \\mathrm{KL}\\left(q\\|p\\right) &= -\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.72) \\end{aligned} $$ NOTE : $\\mathcal{L}(q,\\boldsymbol{\\theta})$ is a functional of the distribution $q(\\mathbf{Z})$, and a function of the parameters $\\boldsymbol{\\theta}$ $$ \\begin{aligned} \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) + \\mathrm{KL}\\left(q\\|p\\right) &=\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} -\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\}\\\\ &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}\\right\\}\\\\ &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right)\\\\ &= \\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) \\end{aligned}$$ From $(9.72)$, we see that $\\mathrm{KL}(q\\|p)$ is the Kullback-Leibler divergence between $q(\\mathbf{Z})$ and the posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta})$ Kullback-Leibler divergence satisfies $\\mathrm{KL}(q\\|p)\\geq0$ with eqyality if, and only if, $q(\\mathbf{Z})=p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta})$. Therefore, $\\mathcal{L}(q,\\boldsymbol{\\theta})\\leq\\ln p(\\mathbf{X}|\\boldsymbol{\\theta})$, in other words that $\\mathcal{L}(q,\\boldsymbol{\\theta})$ is a lower bound on $\\ln p(\\mathbf{X}|\\boldsymbol{\\theta})$ E step In the E step, the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ is maximized with respect to $q(\\mathbf{Z})$ while holding $\\boldsymbol{\\theta}&#94;{\\text{old}}$ fixed. $\\ln p(\\mathbf{X}|\\boldsymbol{\\theta}&#94;{\\text{old}})$ does not depend on $q(\\mathbf{Z})$ the largest value of $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ will occur when the Kullback-Leibler divergence vanishes. ∴ When $q(\\mathbf{Z})$ is equal to the posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}})$, $\\mathrm{KL}(q\\|p)=0$ and the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ will be maximized. M step In the M step, the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ is maximized with respect to $\\boldsymbol{\\theta}$ to give some new value $\\boldsymbol{\\theta}&#94;{\\text{new}}$ while holding $q(\\mathbf{Z})$ fixed. This will cause the lower bound $\\mathcal{L}$ to increase This will necessarily cause the corrresponding log likelihood function to increase. Because $q$ is held fixed during the M step, it will not equal the new posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}})$ $\\left(\\mathrm{KL}(q\\|p)\\neq0\\right)$ $\\mathcal{Q}(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}})$ $$ \\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)=\\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right) \\qquad (9.33)\\\\ $$ If we substitute $q(\\mathbf{Z}) = p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)$ into $(9.71)$, $$ \\begin{aligned} \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.71)\\\\ &= \\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right) - \\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\\\ &= \\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right) + \\text{const.} \\end{aligned} $$ ∴ \"Maximizing $\\mathcal{L}(q,\\boldsymbol{\\theta})$\" is equal to \"Maximizing $\\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)$\". In [2]: from kerasy.ML.MixedDistribution import MixedGaussian In [3]: # Train Data. data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = 50 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 5 ], cov = np . eye ( 2 ), size = 50 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = 50 ), ]) X , Y = data . T K = 3 In [4]: # Back Ground Color xmin , ymin = np . min ( data , axis = 0 ) - 0.3 xmax , ymax = np . max ( data , axis = 0 ) + 0.3 Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [5]: model = MixedGaussian ( K = 3 , random_state = 1234 ) model . fit ( data , memo_span = 1 ) ll_hist = [ ll for _ , _ , _ , ll in model . history ] mu_hist = [ mu for _ , _ ,( mu , _ , _ ), _ in model . history ] In [6]: plt_model = MixedGaussian ( K = 3 ) plt_model . N , plt_model . M = data . shape L_old = min ( ll_hist ) - 300 for epoch , idx ,( mu , S , pi ), ll in model . history [: - 1 ]: fig = plt . figure ( figsize = ( 12 , 8 )) ll_old = ll_hist [ epoch ]; ll_new = ll_hist [ epoch + 1 ] mu_old = mu_hist [ epoch ]; mu_new = mu_hist [ epoch + 1 ] L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 dL_old = ll_old - L_old ; dL_new = L_new - ll_old ; dll_old = ll_new - ll_old ax1 = fig . add_subplot ( 2 , 2 , 1 ) plt_model . mu = mu ; plt_model . S = S ; plt_model . pi = pi gammas = plt_model . predict ( XYs ) Zs = np . sum ( gammas , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. ax1 . pcolor ( Xs , Ys , Zs , alpha =. 5 , cmap = \"jet\" ) ax1 . scatter ( X , Y , c = idx , cmap = \"prism\" ) ax1 . set_xlim ( xmin , xmax ), ax1 . set_ylim ( ymin , ymax ), ax1 . set_title ( f \"epochs: { epoch : >02 } \" , fontsize = 18 ) ax2 = fig . add_subplot ( 2 , 2 , 2 ) ax2 . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf {X} ,θold)$\" , linewidth = 3 ) ax2 . axhline ( L_old , color = \"black\" , label = \"$L(q,θold)$\" , linestyle = \":\" ) ax2 . arrow ( x = 0.3 , y = L_old , dx = 0 , dy = dL_old , head_width = dL_old / 6000 , head_length = dL_old * 0.1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax2 . set_title ( f \"E step (Epoch= { epoch } )\" , fontsize = 18 ), ax2 . legend (), ax2 . set_xticks ([]), ax2 . set_ylim ( - 600 , - 570 ) ax3 = fig . add_subplot ( 2 , 2 , 3 ) for k in range ( K ): xb , yb = mu_old [ k ]; xa , ya = mu_new [ k ] ax3 . plot (( xb , xa ),( yb , ya ), color = \"black\" ) ax3 . scatter ( xb , yb , color = \"black\" , s = 50 ) ax3 . scatter ( xa , ya , color = \"red\" , marker = \"*\" , s = 150 ) ax3 . set_xlim ( xmin , xmax ), ax3 . set_ylim ( ymin , ymax ), ax3 . set_title ( \"θ → θnew\" ) ax3 . grid () ax4 = fig . add_subplot ( 2 , 2 , 4 ) L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 ax4 . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf {X} ,θold)$\" , linestyle = \"--\" ) ax4 . axhline ( ll_new , color = \"black\" , label = \"$\\ln p(\\mathbf {X} ,θnew)$\" , linewidth = 3 ) ax4 . axhline ( L_new , color = \"black\" , label = \"$L(q,θnew)$\" , linestyle = \":\" ) ax4 . arrow ( x = 0.7 , y = ll_old , dx = 0 , dy = dll_old , head_width = dll_old / 6000 , head_length = dll_old * 0.1 , fc = 'k' , ec = 'k' , length_includes_head = True ) ax4 . arrow ( x = 0.3 , y = ll_old , dx = 0 , dy = dL_new , head_width = dL_new / 6000 , head_length = dL_new * 0.1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax4 . set_title ( f \"M step (Epoch= { epoch } )\" , fontsize = 18 ), ax4 . legend (), ax4 . set_xticks ([]), ax4 . set_ylim ( - 600 , - 570 ) plt . tight_layout () plt . savefig ( f \"img/img { epoch : >02 } \" ) L_old = L_new fig_no = 0 L_old = min ( ll_hist ) - 300 for epoch in range ( len ( model . history ) - 1 ): ll_old = ll_hist [ epoch ]; ll_new = ll_hist [ epoch + 1 ] L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 dL_old = ll_old - L_old ; dL_new = L_new - ll_old ; dll_old = ll_new - ll_old # Estep fig = plt . figure ( figsize = ( 3 , 10 )) ax = fig . add_subplot ( 1 , 1 , 1 ) ax . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf {X} ,θold)$\" , linewidth = 3 ) ax . axhline ( L_old , color = \"black\" , label = \"$L(q,θold)$\" , linestyle = \":\" ) ax . arrow ( x = 0.3 , y = L_old , dx = 0 , dy = dL_old , head_width = dL_old / 60 , head_length = dL_old * 2e-1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax . set_title ( f \"E step (Epoch= { epoch } )\" , fontsize = 18 ), ax . legend (), ax . set_xticks ([]), ax . set_ylim ( - 600 , - 570 ) plt . savefig ( f \"img/img { fig_no : >02 } \" ); fig_no += 1 plt . clf () # Mstep fig = plt . figure ( figsize = ( 3 , 10 )) ax = fig . add_subplot ( 1 , 1 , 1 ) L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 ax . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf {X} ,θold)$\" , linestyle = \"--\" ) ax . axhline ( ll_new , color = \"black\" , label = \"$\\ln p(\\mathbf {X} ,θnew)$\" , linewidth = 3 ) ax . axhline ( L_new , color = \"black\" , label = \"$L(q,θnew)$\" , linestyle = \":\" ) ax . arrow ( x = 0.7 , y = ll_old , dx = 0 , dy = dll_old , head_width = dll_old / 60 , head_length = dll_old * 2e-1 , fc = 'k' , ec = 'k' , length_includes_head = True ) ax . arrow ( x = 0.3 , y = ll_old , dx = 0 , dy = dL_new , head_width = dL_new / 60 , head_length = dL_new * 2e-1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax . set_title ( f \"M step (Epoch= { epoch } )\" , fontsize = 18 ), ax . legend (), ax . set_xticks ([]), ax . set_ylim ( - 600 , - 570 ) plt . savefig ( f \"img/img { fig_no : >02 } \" ); fig_no += 1 plt . clf () L_old = L_new Section4.2 Mixture Model Implementation Gaussian Mixture Distribution k-means clustering Section4.3 Linear Regression Least Squares polynomial function we observe a real-value input variable $x$ and we wish to use this observation to predict the value of a real-valued target variable $t$. In the most simplest approach based on curve fitting, we shall fit the data using a polynomial function of the form : $$y(x,\\mathbf{w}) = w_0+w_1x+w_2x&#94;2+\\cdots+w_Mx&#94;M=\\sum_{j=0}&#94;Mw_jx&#94;j\\qquad (1.1)$$ data we are given a training set comprising $N$ observation of $x$, written $\\mathbf{X}\\equiv(\\mathbf{x_1},\\ldots,\\mathbf{x}_N)&#94;T$ with corresponding observation of the values of $t$, denoted $\\mathbf{t}\\equiv(t_1\\ldots,t_N)&#94;T$ we can difine $M$, which is the order of the polynomial. The values of the coefficients($w_j$) will be determined by fitting the polynomial to the training data. This can be done by minimizing an error function that measures the misfit between the function $y(x,\\mathbf{w})$ and the training set data points. One simple choice of error function, which is widely used, is given by the sum of the squares of the errors $$E(\\mathbf{w}) = \\frac{1}{2}\\mathrm{RSS} = \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\{y(\\mathbf{x}_n,\\mathbf{w}) - t_n\\right\\}&#94;2\\qquad (1.2)$$ (the factor of $1/2$ is included for later convenience.) Trainig Aim: find the best $\\mathbf{w}&#94;{\\star}=\\underset{w\\in\\mathbb{R}}{\\mathrm{argmin}}\\left\\{\\mathrm{RSS}(\\mathbf{w})\\right\\}$ $\\mathbf{t} = \\left(\\begin{matrix}t_1\\\\\\vdots\\\\t_N\\end{matrix}\\right),\\quad\\mathbf{X} = \\left(\\begin{matrix}x_1&#94;0&x;_1&#94;1&\\cdots&x;_1&#94;M\\\\x_2&#94;0&x;_2&#94;1&\\cdots&x;_2&#94;M\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\x_N&#94;0&x;_N&#94;1&\\cdots&x;_N&#94;M\\end{matrix}\\right),\\quad\\mathbf{w}=\\left(\\begin{matrix}w_1\\\\\\vdots\\\\w_M\\end{matrix}\\right)$ $\\mathrm{RSS}(\\mathbf{w}) = \\left(\\mathbf{t} - \\mathbf{Xw}\\right)&#94;T\\left(\\mathbf{t} - \\mathbf{Xw}\\right)$ Solution: $$ \\begin{aligned} \\frac{\\partial E(\\mathbf{w})}{\\partial\\mathbf{w}} &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\|\\mathbf{t}-\\mathbf{Xw}\\|&#94;2\\\\ &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\|\\mathbf{t}\\|&#94;2 - 2\\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{t} + \\|\\mathbf{Xw}\\|&#94;2\\right)\\\\ &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\|\\mathbf{t}\\|&#94;2 - 2\\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{t} + \\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{Xw}\\right)\\\\ &=\\frac{1}{2} \\left(-2\\mathbf{X}&#94;T\\mathbf{t} + \\left(\\mathbf{X}&#94;T\\mathbf{X} + \\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;T\\right)\\mathbf{w}\\right)\\\\ &= -\\mathbf{X}&#94;T\\mathbf{t}+\\mathbf{X}&#94;T\\mathbf{Xw}=\\mathbf{0}\\\\ \\therefore\\mathbf{w}&#94;{\\star} &= \\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{t} \\end{aligned}$$ ※ In the following programs, I use np.linalg.solve to calcurate $\\mathbf{w}&#94;{\\ast}$ equation program $$\\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)\\mathbf{w}&#94;{\\star} = \\mathbf{X}&#94;T\\mathbf{t}$$ w = np.linalg.solve(X.T.dot(X), X.T.dot(t)) In [7]: N = 15 Ms = [ 2 , 4 , 8 , 16 ] seed = 0 In [8]: # Training data. x = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = N ) Noise = np . random . RandomState ( seed ) . normal ( loc = 0 , scale = 0.1 , size = N ) t = np . sin ( 2 * np . pi * x ) + Noise In [9]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= { M } $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ { RSS : .3f } $,M=$ { M } $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Regularized Least Square $$ \\begin{aligned} E(\\mathbf{w}) &= E_{D}(\\mathbf{w}) + \\lambda E_W(\\mathbf{w}) & (3.24)\\\\ &= \\frac{1}{2}\\mathrm{RSS} + \\lambda\\frac{1}{2}\\mathbf{w}&#94;T\\mathbf{w}\\\\ &= \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\{y(\\mathbf{x}_n,\\mathbf{w}) - t_n\\right\\}&#94;2+\\frac{1}{2}\\mathbf{w}&#94;T\\mathbf{w} & (3.27)\\\\ \\therefore\\mathbf{w}&#94;{\\star} &= \\left(\\lambda\\mathbf{I} + \\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{t} & (3.28) \\end{aligned} $$ In [10]: lambda_ = 1e-4 In [11]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( lambda_ * np . identity ( M + 1 ) + X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= { M } $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ { RSS : .3f } $,M=$ { M } $,$\\lambda= { lambda_ } $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Section4.4 Bayesian Inference Maximal Likelihood Estimate $$ l(\\boldsymbol{\\theta}|D) = \\log L(\\boldsymbol{\\theta}|D) = \\log\\mathbb{P}(D|\\boldsymbol{\\theta})\\\\ \\hat{\\boldsymbol{\\theta}}_{\\text{ML}} = \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}l(\\boldsymbol{\\theta}|D) $$ ※ $l$: large → High probability of observing $D$ from the model $\\boldsymbol{\\theta}$ Maximum a Posteriori Estimate Maximum a posteriori estimate $$ \\begin{aligned} \\hat{\\boldsymbol{\\theta}_{\\text{MAP}}} &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}f(\\boldsymbol{\\theta}|D)\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}f(D|\\boldsymbol{\\theta})f(\\boldsymbol{\\theta})\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}\\left\\{l(\\boldsymbol{\\theta}|D) L \\log f(\\boldsymbol{\\theta})\\right\\}\\\\ \\end{aligned} $$ Posterior mean estimate $$ \\hat{\\boldsymbol{\\theta}_{\\text{PME}}} = \\int\\boldsymbol{\\theta}f(\\boldsymbol{\\theta}|D)d\\boldsymbol{\\theta} $$ Implementation of Gaussian Prior for Regression. In [12]: seed = 123 In [13]: from kerasy.ML.linear import BayesianLinearRegression from kerasy.utils.preprocessing import GaussianBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian In [14]: N = 25 ; D = 1 ; M = 25 xmin = 0 ; xmax = 1 In [15]: alpha = 1 beta = 25 In [16]: x_test = np . linspace ( xmin , xmax , 1000 ) y_test = np . sin ( 2 * np . pi * x_test ) x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 1 / beta , seed = seed ) y_train += y_noise In [17]: # transform mu = np . linspace ( xmin , xmax , M ); sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) x_train_features = phi . transform ( x_train ) x_test_features = phi . transform ( x_test ) In [18]: random_idx = np . random . RandomState ( seed ) . choice ( N , N ) In [19]: fig = plt . figure ( figsize = ( 16 , 8 )) for i , n in enumerate ([ 1 , 2 , 4 , 25 ]): ax = fig . add_subplot ( 2 , 2 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( x_train_features [ random_idx [: n ]], y_train [ random_idx [: n ]]) y_pred , y_std = model . predict ( x_test_features ) ax . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) ax . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( x_train [ random_idx [: n ]], y_train [ random_idx [: n ]], s = 150 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) ax . set_ylim ( - 1.5 , 1.5 ), ax . legend (), ax . set_title ( f \"Bayesian Linear Regression (N= { n } )\" ) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-4.html"},{"title":"レポート課題3(10/17出題)","text":"TCNfosJnDOHAAK4OGpNu7g==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report3.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report3.html"},{"title":"連続最適化(2)制約付き最適化","text":"講師： 佐藤一誠 参考書： 最適化手法 参考書： 機械学習のための連続最適化 講義概要 等式制約付き最適化問題 ラグランジュ未定乗数法 ラグランジュ双対問題 双対変数の最適化 不等式制約付き最適化問題 制約なし最適化問題への変換 双対問題 まとめ 制約付き最適化問題(constrained optimization problem) \\(\\mathcal{X}\\subset\\mathbb{R}&#94;d\\) 上に定義される関数 \\(f:\\mathcal{X}\\rightarrow\\mathbb{R}\\) の最小値を求める。 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ &h(\\mathbf{x})\\leq\\mathbf{0} \\end{aligned} $$ \"subject to\"は、 「…を条件として」 という意味。 \\(g_i,h_i\\) は互いに 一次独立(linearly independent) であると仮定。 実行可能解(feasible solution) ：全ての制約条件を満たす \\(\\mathbf{x}\\) 凸最適化問題(convex optimization problem) ：関数 \\(f\\) が凸、集合 \\(\\mathcal{X}\\) が凸、制約条件 \\(\\mathbf{g},\\mathbf{h}\\) が凸であれば、最適値が一意に定まる。 ※ 以下、凸最適化問題を考える。 等式制約付き最適化問題 等式制約付き最適化問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ \\end{aligned} $$ \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) + c_k\\|\\mathbf{g}(x)\\|&#94;2$$ \\(c_k\\) の値を徐々に増やしていく。 $$0 < c_1 < c_2 < \\cdots$$ ラグランジュ未定乗数法 詳しくは ラグランジュ未定乗数法 に記載されているので、ここでは具体例を紹介する。 問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{min : }}&3x&#94;2 + 2y&#94;2\\\\ \\text{subject to : }&x+y=1\\\\ \\end{aligned} $$ 解答 ラグランジュ関数は、 $$L(x,y,\\lambda) = 3x&#94;2 + 2y&#94;2 + \\lambda(x+y-1)$$ となるから、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x} &= 6x+\\lambda=0 &\\therefore x = -\\frac{1}{6}\\lambda\\\\ \\frac{\\partial L}{\\partial y} &= 4y+\\lambda=0 &\\therefore y = -\\frac{1}{4}\\lambda\\\\ \\frac{\\partial L}{\\partial \\lambda} &= x+y-1=0 &\\therefore \\lambda = -\\frac{12}{5}\\\\ \\end{aligned} $$ よって、 \\((x,y) = (0.4,0.6)\\) ラグランジュ双対問題 これも、詳しくは ラグランジュ双対問題 に記載されているので、ここでは具体例を紹介する。 問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{min : }}&3x&#94;2 + 2y&#94;2\\\\ \\text{subject to : }&x+y=1\\\\ \\end{aligned} $$ 解答 ラグランジュ関数は、 $$L(x,y,\\lambda) = 3x&#94;2 + 2y&#94;2 + \\lambda(x+y-1)$$ となるから、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x} &= 6x+\\lambda=0 &\\therefore x = -\\frac{1}{6}\\lambda\\\\ \\frac{\\partial L}{\\partial y} &= 4y+\\lambda=0 &\\therefore y = -\\frac{1}{4}\\lambda \\end{aligned} $$ よって、これらを \\(L(x,y,\\lambda)\\) に代入して、 $$\\omega(\\lambda) = \\underset{x,y\\in\\mathbb{R}}{\\inf}L(x,y,\\lambda) = -\\frac{5}{24}\\lambda&#94;2-\\lambda$$ したがって、 \\(\\underset{\\lambda\\in\\mathbb{R}}{\\text{argmax}}\\omega(\\lambda) = -\\frac{12}{5}\\Longrightarrow(x,y) = (0.4,0.6)\\) 双対変数の最適化 上の問題では、双対変数 \\(\\lambda\\) の最適化問題を解析的に解けたが、解析的に解くことができない問題もある。その場合に使うのが 双対上昇法 や 乗数法 と呼ばれる 双対変数の勾配上昇 を行う手法である。 手法 数式 解説 双対上昇法 $$\\begin{aligned}\\mathbf{x}_{k+1} &= \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}L(\\mathbf{x},\\boldsymbol{\\lambda}_{k})\\\\\\boldsymbol{\\lambda}_{k+1} &= \\boldsymbol{\\lambda}_k + \\varepsilon_k\\nabla\\omega(\\mathbf{\\boldsymbol{\\lambda}}_k) \\\\&= \\boldsymbol{\\lambda}_k + \\varepsilon_k\\mathbf{g}(\\mathbf{x}_{k+1})\\end{aligned}$$ 適当な初期値から，ラグランジュ関数の最小化と双対変数の勾配上昇を交互に実行 乗数法 $$\\begin{aligned}\\mathbf{x}_{k+1} &= \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}L_c(\\mathbf{x},\\boldsymbol{\\lambda}_{k})\\\\\\boldsymbol{\\lambda}_{k+1} &= \\boldsymbol{\\lambda}_k + c\\nabla\\omega(\\mathbf{\\boldsymbol{\\lambda}}_k) \\\\&= \\boldsymbol{\\lambda}_k + c\\mathbf{g}(\\mathbf{x}_{k+1})\\end{aligned}$$ 適当な初期値から， 拡張ラグランジュ関数 の最小化と双対変数の勾配上昇を交互に実行 なお、 拡張ラグランジュ関数(augmented Lagrangian) は、以下で表される関数で、二次の項を加えることで凸性を増している。 $$L_c(\\mathbf{x},\\boldsymbol{\\lambda}) = f(\\mathbf{x}) + \\boldsymbol{\\lambda}&#94;T\\mathbf{g}(\\mathbf{x}) + \\frac{c}{2}\\|\\mathbf{g}(\\mathbf{x})\\|&#94;2$$ ※実装は レポート課題3 に記載。 不等式制約付き最適化問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&h(\\mathbf{x})\\leq\\mathbf{0}\\\\ \\end{aligned} $$ 実行可能解 \\(\\mathbf{x}\\) において \\(h_i(\\mathbf{x}) = 0\\) の時、この制約を 有効制約(active constraint) と呼ぶ。 実行可能解 \\(\\mathbf{x}\\) においてそれ以外の時、この制約を 無効制約(inactive constraint) と呼ぶ。 制約なし最適化問題への変換 障壁法(barrier method) 初期値を \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の制約なし最適化問題を解く。 $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) - c_k\\log(-h(\\mathbf{x}))$$ \\(c_k\\) の値を徐々に減らしていく。 途中の解 \\(\\mathbf{x}_{k+1}\\) が常に \\(h(\\mathbf{x}_{k+1})\\leq0\\) を満たす （つまり、実行可能領域の内側にある） ことから、 内点法(interior-point method) ともよばれる。 \\(c_k\\) の決め方が難しい。 罰則法(penalty method) 初期値を \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の制約なし最適化問題を解く。 $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) + c_k\\max(0,h(\\mathbf{x}))&#94;2$$ \\(c_k\\) の値を徐々に増やしていく。 途中の解 \\(\\mathbf{x}_{k+1}\\) が一般に \\(h(\\mathbf{x}_{k+1})>0\\) を満たす （つまり、実行可能領域の外側にある） ことから、 外点法(exterior-point method) ともよばれる。 \\(c_k\\) の決め方が難しい。 射影勾配法(projected gradient method) 勾配降下（ \\(\\tilde{\\mathbf{x}}_{k+1} = \\mathbf{x}_k-\\varepsilon_k\\nabla f(\\mathbf{x}_k)\\) ）と実行可能領域への射影（ \\(\\mathbf{x}_{k+1} = \\mathbf{P}_k\\tilde{\\mathbf{x}}_{k+1}\\) ）を繰り返す。 まとめると $$\\mathbf{x}_{k+1} = \\mathbf{P}_k\\left(\\mathbf{x}_k - \\varepsilon_k\\nabla f(\\mathbf{x}_k)\\right)$$ 射影が簡単に計算できる時、効率が良い。 双対問題 詳しくは ラグランジュ未定乗数法 に記載。 まとめ 制約付き最適化問題： $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ &h(\\mathbf{x})\\leq\\mathbf{0} \\end{aligned} $$ ラグランジュ関数： $$L\\left(\\mathbf{x},\\boldsymbol{\\lambda},\\boldsymbol{\\mu}\\right) = f(\\mathbf{x}) + \\boldsymbol{\\lambda}&#94;Tg(\\mathbf{x}) + \\boldsymbol{\\mu}&#94;Th(\\mathbf{x})$$ 双対問題： $$ \\begin{aligned} \\underset{\\boldsymbol{\\lambda,\\mu},\\ \\mathbf{x}\\in\\mathcal{X}}{\\text{maximization : }}&L\\left(\\mathbf{x},\\boldsymbol{\\lambda},\\boldsymbol{\\mu}\\right)\\\\ \\text{subject to : }&\\boldsymbol{\\mu}\\geq\\mathbf{0}\\\\ \\end{aligned} $$ KKT条件： $$ \\begin{aligned} \\begin{cases} \\nabla_{\\mathbf{x}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) = \\mathbf{0}\\\\ \\nabla_{\\boldsymbol{\\lambda}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) = \\mathbf{0} & \\boldsymbol{\\mu}&#94;{\\ast}\\geq\\mathbf{0}\\\\ \\nabla_{\\boldsymbol{\\mu}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) \\leq \\mathbf{0} & \\mu_i&#94;{\\ast}h_i(\\mathbf{x}&#94;{\\ast}) = 0,\\ \\forall i \\end{cases} \\end{aligned} $$ .prompt { /* This is for jupyter blog.*/ min-width: 0; /* This padding is tuned to match the padding on the CodeMirror editor. */ padding: 0em 0.4em 0em 0em; margin: 0px; font-family: monaco; } /*蛍光ペン(pink)*/ .marker-pink { color: #c45a5a; background: linear-gradient(transparent 70%, #ff66ff 60%); font-weight: bold; } /*蛍光ペン(blue) & hover info*/ .marker-info { color: #5C7DC4; background: linear-gradient(transparent 70%, #66FFCC 60%); font-weight: bold; position: relative; cursor: pointer; } .marker-info:hover:before { opacity: 1; z-index: 2; } .marker-info:before { content: attr(aria-label); opacity: 0; position: absolute; top: 30px; right: -90px; font-size: 14px; width: 300px; padding: 10px; color: #fff; background-color: #555; border-radius: 3px; pointer-events: none; } /* 枠囲み */ .frame { border: solid 1.0px #000000; padding: 0.5em 1em; margin: 2em 0; } /* 暗記用 question box */ span .qbox{ display: none; } span.qbox-wrapper:hover .qbox-default{ display: none; } span.qbox-wrapper:hover .qbox{ display: inline; } .qbox-wrapper{ font-weight: bold; padding: 5px 10px; border-radius: 5px; border: solid 2px #000000; margin: 5px } .qbox-wrapper:hover{ text-shadow: 0px 0px 6px rgba(255, 255, 255, 1); -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); transition: all 0.4s ease 0s; } /* 画像吹き出し */ .balloon { display: table; width: 100%; } .balloon_img { display: table-cell; vertical-align: middle; width: 50%; padding-right: 10px; } .balloon_comment { border: #83274e solid 4px; position: relative; background: #fff; padding: 12px; border-radius: 13px; display: block } .balloon_comment::before { content: \"\"; position: absolute; border-right: 23px solid #83274e; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -23px; } .balloon_comment::after { content: \"\"; position: absolute; border-right: 24px solid #fff; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -17px; } if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-3.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-3.html"},{"title":"分子生命科学Ⅲ 第4回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 感覚神経系(2) 体性感覚 痛覚 機械受容器に加え、体性感覚は 1 に強く依存している。 1 は無髄神経である \\(C\\) 線維と薄いエミリンを持つ \\(A\\delta\\) 線維の自由神経終末で、体の組織を受けていることや損傷される危険にあることを伝える。 しかし、侵害受容と痛みは常に同じものではなく、 2 は 主観的 に感じること。あるいは知覚することである。 3 は、痛みを引き起こす信号についての感覚系の処理過程を指す。 したがって、 1 が活性化（発火）しても 2 は起こる時も起こらない時もある。 痛覚受容体は、侵害刺激によって活性化するイオンチャネル型受容体で、温度に反応する 4 受容体(TRPV1)が代表例である。他にも、プロトン感受性カチオンチャンネルのASIC(acid-sensing ion channel)等がある。 4 は、多くの種類の唐辛子の中にある活性成分で、 3 の \\(C\\) 線維\">5 および \\(A\\delta\\) 線維\">6 にあるリガンド結合性イオンチャネルTRPV1を活性化し、 \\(\\mathrm{Na}&#94;{+}\\) と \\(\\mathrm{Ca}&#94;{2+}\\) の流入を引き起こし、ニューロンを発火させる。また、 4 や酸は、TRPV1の活性化温度域を43℃から体温以下にまで下げる可能性があり、そのような条件では体温すら熱い刺激になることになる。 （これによって、辛いとhotが結びつく） 一次痛覚と二次痛覚 皮膚の 1 の刺激は、すばやく鋭い一次痛覚（ \\(A\\delta\\) 線維\">6 ）と、それに引き続く、鈍く長く持続する二次痛覚（ \\(C\\) 線維\">5 ）を生み出す。 \\(A\\delta\\) 線維\">6 は、危険な強度の機械刺激と熱に応答し、急性で局所的な痛みを仲介している。 無髄の \\(C\\) 線維\">5 は熱や寒冷の他、傷害や組織の炎症によって放出される内因性化学物質によって活性化され、局在していない遅い痛みや慢性炎症性質を仲介している。 痛みの制御 痛み知覚が変化に富んでいることは昔からよく知られている。同時に起こっている痛覚以外の入力の程度や行動している状況に応じて、同じレベルでの痛覚受容器の活性化が、時には強い、時には弱い痛みを生ずる。この痛みの調節に関する理解は、 慢性疼痛 の治療に対する新しい戦略を勘案するために重要である。 慢性疼痛 は、20%にも及ぶ成人を悩ませている。 現象 例 説明 求心経路 での痛みの制御 向う脛を痛めた時、その周囲の皮膚をさすることによって、痛みが和らぐ感じがする。 向う脛を痛めた時、 \\(C\\) 線維を通して脊髄後角にあるニューロンを活性化し、侵害情報が伝えられる。一方で、痛みではない触覚刺激は \\(A\\beta\\) 線維を活性化し、脊髄後角にあるニューロンを不活性化し、侵害情報の伝達を 抑制 する。 下行経路 での痛みの制御 兵士や運動選手が、傷を受けながらも明らかに痛みを感じていない。 強い情動・ストレス等により、脳が痛みの感覚を抑制。その一つは中脳にある細胞集団で、脳室周囲および 7 である。ここへの電気刺激は、脊髄後角にあるニューロンを不活性化し、強い無痛覚を引き起こす。 アヘンの活性化成分モルヒネ モルヒネ（オピエート）は癌性疼痛等の激しい痛みに対して劇的な鎮痛作用をもたらす。 オピオイド受容体が \\(A\\beta,C\\) 線維終末からの神経伝達物質グルタミンの放出阻害を行う。 温度感覚 温度感受性ニューロン(temperature-sensitive neuron)は 8 と 9 に集まっていて、これは体温を一定に保つ生理学的な反応に重要である。 しかし、温度知覚に関与するのは、実際にところは皮膚にある 10 である。 10 は温度に対して敏感で、2-5℃の皮膚の温度差を検知できる。 温度に関する感受性は皮膚の部位で一定ではなく、温と冷の感覚の部位が異なっている。このことは、別々の受容器が温度情報を変換していることを示している。 （辛いトウガラシの活性化成分が\"温hot\"覚の受容器にあるTRPV1と呼ばれるタンパク質の同定に使われたように、） ミントに含まれる活性成分である 11 が\"冷cold\"覚を引き起こすことから、メンソールがTRPM8と呼ばれる受容体を刺激しており、一方でこの受容体は温度を25℃以下にすることによっても非痛覚性に活性化される。 視覚系 外界で起こっている状況を把握する上で、ヒトにとって視覚機能はその質と量において最も重要な感覚系。ヒトの大脳皮質の約半分が視覚世界の分析に関わっている。 末梢視覚系(眼) ： 網膜上には1億2500万個の視細胞があり、光子エネルギーを膜電位に変換する。網膜は、網膜の異なる部位に入射する光の強さの 差異 を感知する。 中枢視覚系 ： 視細胞からの情報を分析・解釈し、物体の色、形、位置、動き等を抽出する。（ex.色：物理的観点からいえば、この世に色は存在しない。ただ周囲の物体が反射する可視光線の異なった波長スペクトルがあるだけである。脳は、3つのタイプの錐体が検出した情報に基づいて多彩な色を作り出している。） 末梢視覚系(眼) 目の断面解剖 角膜 には血管はなく、背後にある液体、 12 により養われている。 虹彩の背後にある透明な 13 は、 14 に付着した毛様体小体となってこれにより支えられている。 13 の形が変化することにより、眼は異なる距離の対象物に焦点を合わせることができる。 13 はまた、眼の内部を多少異なる液体を含む2つの区域に分けている。前述の 12 は、 角膜 と 13 の間にある水のような液体である。 13 と 網膜 の間にある 15 はそれより粘性が高く、その圧力によって眼球は球状に保たれている。 検眼鏡による眼底像 瞳孔を通して網膜を覗き見る装置、すなわち 検眼鏡(ophthalmoscope) を用いれば、眼を別の視点から観察できる。 検眼鏡(ophthalmoscope)で見る網膜で最も際立った特徴は、網膜表面を走行する血管である。これらの血管は 16 と呼ばれる淡い色の円形部から出ている。この円形部は、視神経線維の網膜からの出口でもある。 16 は、視神経が結合する部位で、ここから網膜の栄養に重要な血管が出入りする。この部位は視細胞を欠き、 盲点 となる。 網膜の中心部には、周囲に明るい黄色の色調を伴った暗い領域がある。これが 17 であり、中心視覚を担当する網膜部位である。 17 には大きな血管が周囲より少なく、中央部に 18 （くぼみ）があり、ここに視野の中心が焦点を結ぶ。解像度の最も高い視覚像が得られる部位でもある。 網膜情報処理の基本構造 視覚の神経科学、つまり光エネルギーの神経活動への変換についての話に移る。 網膜の情報処理の基本形は以下の図で示されている。 19 から 20 を経て 21 に至るまでが、視覚信号の流れの最も直接的な経路である。 21 が光に反応して活動電位を発すると、これらの インパルス（活動電位） は視神経を経て脳に伝えられる。視細胞から脳までの直接経路にあるこれら細胞群は、さらに2つのタイプの補助的な細胞の影響も受けている。 22 は、視細胞からの入力を受けると神経突起を側方に伸ばして周囲の 20 や 21 に伝える。 23 は、 20 から入力を受けて周囲の 21 ・ 21 ・別の 23 に信号を側方に伝達する。 視細胞の構造：桿体細胞と錐体細胞 桿体と錐体 説明 電磁波からニューロンのシグナルへの変換は、網膜の最外側にある一億2500万個の視細胞が行う。 24 は長い円筒形の外節を持ち、その中に多くの円板を含む。 24 は光に対する感受性が 25 よりも1000倍も高く、夜間の弱い明かり（暗所視）では 24 だけが視覚にかかわる。また、 24 は網膜周辺で割合が高く、視細胞の密度が高いので高い光感受性を持つ。 25 は短く先細りした外節を持ち、内部の円板の数は少ない。 25 は日中の光（明所視）で働く。また、 25 は 18 の付近に集中しており、神経節細胞に対する視細胞の数が少なく、高い解像能を持つ。したがって、 18 は色覚に富むが、感度で劣る。 24 は1種類のオプシン(500nm(青緑)にピーク)、 25 は3種類のオプシン(430nm(青)、530nm（緑）、560nm(赤)にピーク)を持つ。 我々が知覚する色は、網膜に当たる光信号に対する各 25 の相対的な貢献度で概ね決定される。したがって、正常な場合は3種類の 25 オプシンを持つが、2種類の 25 オプシンしか持たない場合、赤と緑の区別がつかない。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-4.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-4.html"},{"title":"RNA-seqデータ解析（バッチスクリプト版）","text":"今回は、 RNA-seqデータ解析（対話モード版） で行なった処理を毎回対話モードで行うのは面倒なので、バッチスクリプトを作成して一括で行います。 以下のパラメタファイル（ params.json ）を読み込んで各種操作を行います。 { \"qsub_q\": \"u-debug\", \"n_node\": 1, \"n_cpus\": 1, \"n_MPIprocs\": 1, \"n_OMPthreads\": 8, \"walltime\": \"0:30:00\", \"group_list\": \"gj29\", \"ID\": \"ERR315326\", \"RNAseqData\": \"ftp://ftp.ddbj.nig.ac.jp/ddbj_database/dra/sralite/ByExp/litesra/ERX/ERX288/ERX288491/ERR315326/ERR315326.sra\", \"MappingRefGenome\": \"https://cloud.biohpc.swmed.edu/index.php/s/grch38/download\", \"GeneAnnotation\": \"ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_32/gencode.v32.annotation.gtf.gz\" } 各変数は、 jq コマンド を使って以下のように読み込みます。 [変数名]=$(cat [パラメタファイルへのパス] | jq -r .[key名]) [変数名]=`jq -r .[key名] [パラメタファイルへのパス]` 成果物 make_batch_u_qsub.sh という以下のシェルスクリプトを叩くことで、 params.json の内容を踏まえたバッチスクリプト batch_u_qsub.sh を作成します。 make_batch_u_qsub.sh [download] #!/bin/bash Ssymbol=\"[\" Esymbol=\"]\" function AssignParams () { << COMMENTOUT @params params.json {\"qsub_q\": \"u-debug\"} @params templates.sh PBS -q [${n_node}] @return batch_u_qsub.sh PBS -q u-debug COMMENTOUT line=\"${1}\" while true do Spos=`echo \"${line}\" | awk -v pattern=${Ssymbol} '{print index($0, pattern)}'` Epos=`echo \"${line}\" | awk -v pattern=${Esymbol} '{print index($0, pattern)}'` if [ ${Spos} -ne 0 -a ${Epos} -ne 0 -a ${Spos} -lt ${Epos} ]; then PREFIX=`echo \"${line:0:$(($Spos-1))}\"` VARIABLE=`echo \"${line}\" | cut -c \"$(($Spos+1))-$(($Epos-1))\"` CONTENT=`eval echo ${VARIABLE}` SUFFIX=`echo \"${line:$Epos}\"` line=\"${PREFIX}${CONTENT}${SUFFIX}\" else break fi done echo \"${line}\" >> $OUTPUT_FILE } echo -n \"Path to params file (.json): \" read PARAMS_FILE # Convert each element of json to a variable. KEYS=`jq -r 'keys[]' $PARAMS_FILE` for key in $KEYS; do eval $key=`jq -r .${key} $PARAMS_FILE` done OUTPUT_FILE=\"${ID}/batch_u_qsub.sh\" if [ ! -d ${ID} ]; then mkdir ${ID} fi echo -n \"Path to templates file (.sh): \" read TEMPLATES_FILE PRE_IFS=$IFS IFS=$'\\n' for line in `cat ${TEMPLATES_FILE}` do AssignParams ${line} done IFS=$PRE_IFS templates.sh [download] #!/bin/sh #PBS -q [${n_node}] #PBS -l select=[${n_node}]:ncpus=[${n_cpus}]:mpiprocs=[${n_MPIprocs}]:ompthreads=[${n_OMPthreads}] #PBS -l walltime=[${walltime}] #PBS -W group_list=[${group_list}] DB_DIR=\"db\" RNA_DIR=\"RNAseq\" function DecompressHandler() { : ' @params ${1} Extension 1 @params ${2} Extension 2 @params ${3} File Name (hoge.${1}.${2}) ' n_compressed_fn=${#3} if [ ${2} = \"zip\" ]; then unzip ${3} n_extension=4 elif [ ${2} = \"tar\" ]; then tar ${3} n_extension=4 elif [ ${2} = \"gz\" ]; then gunzip ${3} n_extension=3 elif [ ${2} = \"bz2\" ]; then bzip2 -d ${3} n_extension=4 elif [ ${2} = \"lha\" -o ${2} = \"lzh\"]; then lha x ${3} n_extension=4 elif [ ${1} = \"tar\" ]; then tar ${3} n_extension=$((${#2}+5)) else n_extension=0 fi de_compressed_fn=${3:0:$(($n_compressed_fn-$n_extension))} mv $de_compressed_fn \"../${DB_DIR}/\" if [ ${n_extension} -ne 0 ]; then rm ${3} fi echo \"${de_compressed_fn}\" } # Download, Decompress, Dispose function D3() { : ' @params ${1} URL ' fn=`wget -nv --content-disposition $1 2>&1 |cut -d\\\" -f2` extensions=( `echo $fn | tr -s '.' ' '`) n_extensions=${#extensions[@]} ext1=${extensions[$(($n_extensions-2))]} ext2=${extensions[$(($n_extensions-1))]} DecompressHandler $ext1 $ext2 $fn } #=== START === cd $PBS_O_WORKDIR/$RNA_DIR} if [ ! -d $DB_DIR ]; then mkdir $DB_DIR fi if [ ! -d $RNA_DIR ]; then mkdir $RNA_DIR fi # 1.データの取得 SRA_FILE=`D3 [$RNAseqData]` mv \"../${DB_DIR}/$SRA_FILE\" . fasterq-dump $SRA_FILE -v --threads [$n_OMPthreads] --split-files -O ./ # 2.品質チェック fastqc -t [$n_OMPthreads] \"${SRA_FILE}_1.fastq\" \"${SRA_FILE}_2.fastq\" # 3.マッピング REF_GENOME_FILE=`D3 [$MappingRefGenome]` time hisat2 -x \"../${DB_DIR}/${REF_GENOME_FILE}/genome\" -1 \"${SRA_FILE}_1.fastq\" -2 \"${SRA_FILE}_2.fastq\" -p [$n_OMPthreads] -S \"hisat_output_[${ID}].sam\" # 4. IGVに必要なインデックスファイル作成 samtools view --threads [$n_OMPthreads] -b \"hisat_output_[${ID}].sam\" -o \"hisat_output_[${ID}].bam\" samtools sort --threads [$n_OMPthreads] \"hisat_output_[${ID}].bam\" -o \"hisat_output_[${ID}].sorted.bam\" # 6. リード数のカウント GENE_ANNO_FILE=`D3 [$GeneAnnotation]` featureCounts hisat_output_ERR315326.bam -p -t exon -g gene_id -s 0 -T [$n_OMPthreads] -BC -a \"../${DB_DIR}/${GENE_ANNO_FILE}\" -o \"Counts_BC_[${ID}].txt\" featureCounts hisat_output_ERR315326.bam -p -t exon -g gene_id -s 0 -T [$n_OMPthreads] -MOBC -a \"../${DB_DIR}/${GENE_ANNO_FILE}\" -o \"Counts_MOBC_[${ID}].txt\" batch_u_qsub.sh [download] #!/bin/sh #PBS -q 1 #PBS -l select=1:ncpus=1:mpiprocs=1:ompthreads=8 #PBS -l walltime=0:30:00 #PBS -W group_list=gj29 DB_DIR=\"db\" RNA_DIR=\"RNAseq\" function DecompressHandler() { : ' @params ${1} Extension 1 @params ${2} Extension 2 @params ${3} File Name (hoge.${1}.${2}) ' n_compressed_fn=${#3} if [ ${2} = \"zip\" ]; then unzip ${3} n_extension=4 elif [ ${2} = \"tar\" ]; then tar ${3} n_extension=4 elif [ ${2} = \"gz\" ]; then gunzip ${3} n_extension=3 elif [ ${2} = \"bz2\" ]; then bzip2 -d ${3} n_extension=4 elif [ ${2} = \"lha\" -o ${2} = \"lzh\"]; then lha x ${3} n_extension=4 elif [ ${1} = \"tar\" ]; then tar ${3} n_extension=$((${#2}+5)) else n_extension=0 fi de_compressed_fn=${3:0:$(($n_compressed_fn-$n_extension))} mv $de_compressed_fn \"../${DB_DIR}/\" if [ ${n_extension} -ne 0 ]; then rm ${3} fi echo \"${de_compressed_fn}\" } # Download, Decompress, Dispose function D3() { : ' @params ${1} URL ' fn=`wget -nv --content-disposition $1 2>&1 |cut -d\\\" -f2` extensions=( `echo $fn | tr -s '.' ' '`) n_extensions=${#extensions[@]} ext1=${extensions-2} ext2=${extensions-1} DecompressHandler $ext1 $ext2 $fn } #=== START === cd $PBS_O_WORKDIR/$RNA_DIR} if [ ! -d $DB_DIR ]; then mkdir $DB_DIR fi if [ ! -d $RNA_DIR ]; then mkdir $RNA_DIR fi # 1.データの取得 SRA_FILE=`D3 ftp://ftp.ddbj.nig.ac.jp/ddbj_database/dra/sralite/ByExp/litesra/ERX/ERX288/ERX288491/ERR315326/ERR315326.sra` mv \"../${DB_DIR}/$SRA_FILE\" . fasterq-dump $SRA_FILE -v --threads 8 --split-files -O ./ # 2.品質チェック fastqc -t 8 \"${SRA_FILE}_1.fastq\" \"${SRA_FILE}_2.fastq\" # 3.マッピング REF_GENOME_FILE=`D3 https://cloud.biohpc.swmed.edu/index.php/s/grch38/download` time hisat2 -x \"../${DB_DIR}/${REF_GENOME_FILE}/genome\" -1 \"${SRA_FILE}_1.fastq\" -2 \"${SRA_FILE}_2.fastq\" -p 8 -S \"hisat_output_ERR315326.sam\" # 4. IGVに必要なインデックスファイル作成 samtools view --threads 8 -b \"hisat_output_ERR315326.sam\" -o \"hisat_output_ERR315326.bam\" samtools sort --threads 8 \"hisat_output_ERR315326.bam\" -o \"hisat_output_ERR315326.sorted.bam\" # 6. リード数のカウント GENE_ANNO_FILE=`D3 ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_32/gencode.v32.annotation.gtf.gz` featureCounts hisat_output_ERR315326.bam -p -t exon -g gene_id -s 0 -T 8 -BC -a \"../${DB_DIR}/${GENE_ANNO_FILE}\" -o \"Counts_BC_ERR315326.txt\" featureCounts hisat_output_ERR315326.bam -p -t exon -g gene_id -s 0 -T 8 -MOBC -a \"../${DB_DIR}/${GENE_ANNO_FILE}\" -o \"Counts_MOBC_ERR315326.txt\"","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-12.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-12.html"},{"title":"RNA-seqデータ解析（対話モード版）","text":"ゲノム解析ツールの環境構築 で必要なツールを揃えたので、実際に The Human Protein Atlas からデータを取得して、解析を行います。 なお、今回は \" Uhlen M, Fagerberg L, Hallstrom BM, et al. Proteomics. Tissue-based map of the human proteome. Science. 2015;347(6220):1260419. doi:10.1126/science.1260419 \" でヒトの32種類の組織でRNA-seqを行なっていたため、そのデータを利用します。 解析の流れ # 内容 利用するツール 0 計算ノードを使用する準備 1 データの取得 SRA Toolkit 2 品質チェック FastQC 3 マッピング HISAT2 4 IGVに必要なインデックスファイル作成 samtools 5 マッピング結果の可視化 IGV 6 リード数のカウント featureCounts 0. 計算ノードを使用する準備 qsub コマンドで、対話モードで計算ノードを使用したいので、以下のバッチスクリプトを作成します。 [j29XXX@reedbush-h1 j29XXX]$ mkdir qsub_sh [j29XXX@reedbush-h1 j29XXX]$ cd qsub_sh/ [j29XXX@reedbush-h1 qsub_sh]$ vi interactive_h_qsub.sh \"\"\"interactive_h_qsub.sh #!bin/sh #PBS -q h-interactive (使用する計算資源キュー名：h-interactiveはGPUあり。u-interactiveはGPUなし。) #PBS -l select=1:ncpus=1:mpiprocs=1:ompthreads=8 (ノード数1、ノードあたりのMPIプロセス数1、プロセスあたりのスレッド数8) #PBS -l walltime=2:00:00 (使用上限時間：2時間、u-interactiveの場合：30分) #PBS -W group_list=gj29 (グループ名) #PBS -I (対話型のジョブ) \"\"\" ※ なお、実際にツールを実行する際には、これと同じ値を引数として設定する。 1. データの取得 データの形式として、以下のものが主要ですが、ここではDRAから sra ファイルを取得し、これを SRA Toolkit を使って fastq ファイルに変換します。 DRA : 日本のデータベース。地理的な理由から、ダウンロード速度が最も速い。 SRA : アメリカのデータベース。実験に関するメタデータが多い。 ERA: ヨーロッパのデータベース [j29XXX@reedbush-h1 j29XXX]$ mkdir RNA [j29XXX@reedbush-h1 j29XXX]$ cd RNAseq/ # id: ERR315326のデータを取得する。 [j29XXX@reedbush-h1 RNAseq]$ wget ftp://ftp.ddbj.nig.ac.jp/ddbj_database/dra/sralite/ByExp/litesra/ERX/ERX288/ERX288491/ERR315326/ERR315326.sra [j29XXX@reedbush-h1 RNAseq]$ ls ERR315326.sra # これが見えていれば良い。 [j29XXX@reedbush-h1 RNAseq]$ qsub ../qsub_sh/interactive_h_qsub.sh qsub: waiting for job 1804938.reedbush-pbsadmin0 to start qsub: job 1804938.reedbush-pbsadmin0 ready [j29XXX@a089 RNAseq]$ fasterq-dump ERR315326.sra -v --threads 8 --split-files -O ./ spots read : 8,782,257 reads read : 17,564,514 reads written : 17,564,514 [j29XXX@a089 RNAseq]$ ls ERR315326.sra ERR315326.sra_1.fastq ERR315326.sra_2.fastq なお、ここで fasterq-dump のオプションは以下を表します。 オプション 説明 -v 履歴の表示 --threads 使用するスレッド数（バッチスクリプトに記載した値に合わせる。） --split-files paired-endのリードを別々のファイルに出力する。 -O 出力先のディレクトリ また、作成されたfastq形式のファイルは以下のように4行で1つの配列データを表しています。 データのID シーケンサの機械・フローセル等の情報/リードペアの番号 シーケンサーから得られた塩基配列 ＋（1行目と同じ文字列が入っていることもある） 2行目の塩基配列の各塩基のクオリティスコア（ \\(Q=-10\\log_{10}P_{\\text{error}}\\) ） @ERR315326.sra.1 HWI-ST1362:39:H07R5ADXX:2:1101:1520:2188 length=101 CACTGAAGCAGGACAACGGACGTCTCCAATGCACCGCACAGGAACGGGCCCCCAGAGCTCGCACCCTCCGCCACACAGCACGCCCGGCAGCCTTTGGTGTC +ERR315326.sra.1 HWI-ST1362:39:H07R5ADXX:2:1101:1520:2188 length=101 BBBFFFFFFFFFFFIIIIIFFIIIFFFFIIFBFIFIFIIIFBFFFFIFFBFBBBBBBBBBBBBFBBBBFFBBBBBFFBBBB<<BBBFFFFFFFFFBB7BBB 2. 品質チェック シーケンス実験がどの程度正しく行われたかを調べるため、 FastQC を用いてシーケンスの品質チェックを行います。 [j29XXX@a089 RNAseq]$ fastqc -t 8 ERR315326.sra_1.fastq ERR315326.sra_2.fastq Started analysis of ERR315326.sra_1.fastq Started analysis of ERR315326.sra_2.fastq Approx 5% complete for ERR315326.sra_1.fastq Approx 5% complete for ERR315326.sra_2.fastq Approx 10% complete for ERR315326.sra_1.fastq Approx 10% complete for ERR315326.sra_2.fastq : Approx 90% complete for ERR315326.sra_1.fastq Approx 90% complete for ERR315326.sra_2.fastq Approx 95% complete for ERR315326.sra_1.fastq Approx 95% complete for ERR315326.sra_2.fastq Analysis complete for ERR315326.sra_1.fastq Analysis complete for ERR315326.sra_2.fastq [j29XXX@a089 RNAseq]$ ls ERR315326.sra_2_fastqc.html ERR315326.sra_1_fastqc.html これ作成できたhtmlファイルをブラウザで開くことで品質チェックが行えます。 なお、ここで sftp コマンドを使うと楽にファイルの移動が行なえます。 [iwasakioshuto@shuto-MacBook-Pro]$ sftp j29XXX@reedbush.cc.u-tokyo.ac.jp sftp> get /lustre/gj29/j29XXX/RNAseq/ERR315326.sra_*_fastqc.html sftp> exit [iwasakioshuto@shuto-MacBook-Pro]$ ls ERR315326.sra_2_fastqc.html ERR315326.sra_1_fastqc.html 出力結果は以下のようになりました。 ERR315326.sra_1_fastqc.html ERR315326.sra_2_fastqc.html 3. マッピング マッピングをする際には、まずリファレンスゲノムを取得する必要があります。これは、 ~~ wget https://cloud.biohpc.swmed.edu/index.php/s/grch38/download とやってもうまくいかなかったので、~~ wget --content-disposition https://cloud.biohpc.swmed.edu/index.php/s/grch38/download とやればおそらくうまくいきます。 https://cloud.biohpc.swmed.edu/index.php/s/grch38/download を直接ローカル環境でクリックしてダウンロードし、 sftp で転送するという形をとりました。 [iwasakioshuto@shuto-MacBook-Pro]$ tar -zxvf grch38.tar.gz [iwasakioshuto@shuto-MacBook-Pro]$ sftp j29XXX@reedbush.cc.u-tokyo.ac.jp sftp> put -r grch38 /lustre/gj29/j29XXX/grch38 Uploading grch38/ to /lustre/gj29/j29XXX/grch38 sftp> exit これでデータの転送ができたので、reedbush側でマッピングを行います。 [j29XXX@reedbush-h1 j29XXX]$ mkdir db [j29XXX@reedbush-h1 j29XXX]$ mv /lustre/gj29/j29XXX/grch38 /lustre/gj29/j29XXX/db/grch38 [j29XXX@reedbush-h1 j29XXX]$ cd qsub_sh [j29XXX@reedbush-h1 qsub_sh]$ qsub ./interactive_h_qsub.sh qsub: waiting for job 1805079.reedbush-pbsadmin0 to start [j29XXX@a091 ~]$ cd RNAseq/ [j29XXX@a091 RNAseq]$ time hisat2 -x ../db/grch38/genome -1 ERR315326.sra_1.fastq -2 ERR315326.sra_2.fastq -p 8 -S hisat_output_ERR315326.sam 8782257 reads; of these: 8782257 (100.00%) were paired; of these: 2765587 (31.49%) aligned concordantly 0 times 5647701 (64.31%) aligned concordantly exactly 1 time 368969 (4.20%) aligned concordantly >1 times ---- 2765587 pairs aligned concordantly 0 times; of these: 345148 (12.48%) aligned discordantly 1 time ---- 2420439 pairs aligned 0 times concordantly or discordantly; of these: 4840878 mates make up the pairs; of these: 3942560 (81.44%) aligned 0 times 807875 (16.69%) aligned exactly 1 time 90443 (1.87%) aligned >1 times 77.55% overall alignment rate real 2m24.673s user 16m27.784s sys 1m9.225s [j29XXX@a091 RNAseq]$ ls hisat_output_ERR315326.sam hisat_output_ERR315326.bam 4. IGVに必要なインデックスファイル作成 ここでは、以下の操作を行い、マッピング結果（.sam,.bam）をIGVで取り扱える形に変換します。 SAMの詳しい定義: http://samtools.github.io/hts-specs/SAMv1.pdf HISAT2のSAM形式の説明: https://ccb.jhu.edu/software/hisat2/manual.shtml#sam-output ※Bamはバイナリ形式、samはテキスト形式 [j29XXX@a091 RNAseq]$ samtools view --threads 8 -b hisat_output_ERR315326.sam -o hisat_output_ERR315326.bam [j29XXX@a091 RNAseq]$ samtools sort --threads 8 hisat_output_ERR315326.bam -o hisat_output_ERR315326.sorted.bam [bam_sort_core] merging from 0 files and 8 in-memory blocks... [j29XXX@a091 RNAseq]$ samtools index -@ 8 hisat_output_ERR315326.sorted.bam [j29XXX@a091 RNAseq]$ ls hisat_output_ERR315326.sorted.bam hisat_output_ERR315326.sorted.bam.bai samtools view ：SAM形式（テキスト）をBAM形式（バイナリ）に変換（-b: bam形式で出力 –o:出力先） samtools sort ：BAM形式のマッピング結果をゲノム上の位置でソートする（–o:出力先） samtools index ：IGV（ビューワ）用のインデックスファイル（.bai）を作成 目的のファイルが作成できたので、ローカル環境にファイルを転送します。 [iwasakioshuto@shuto-MacBook-Pro]$ sftp j29XXX@reedbush.cc.u-tokyo.ac.jp sftp> get /lustre/gj29/j29XXX/RNAseq/hisat_output_ERR315326.sorted.* sftp> exit 5. マッピング結果の可視化 IGVでゲノムをhg38に設定し、bamファイルをロードすれば、以下のようなマッピング結果が確認できます。 actin beta (ACTB) MALAT1 6. リード数のカウント マッピング で作成した、マップされたリードの位置情報が記載されたSAMファイル（ソートされる前のbamファイル） ゲノム上の遺伝子の位置情報（GTF形式。今回はヒトの遺伝子アノテーションを GENCODE から取得） の２つを、featureCountsを使って比較し、リード数のカウントを行い、遺伝子の発言量算出に繋げます。なお、featureCountsでは、 feature領域（exonがデフォルト）をカウントの対象とし、meta-feature（gene_idがデフォルト）ごとにカウント集計を行う。 isoform は、遺伝子レベルであれば、最低１つのisoformでexonである領域でカウントする。 overlap ・ Multi-mapped reads に関しては、 カウントしない デフォルトの動作。 開発者曰く \"multi-mapping reads should be excluded from read counting\" 各遺伝子で1カウントとする -M ：multi-mapを許可 -O ：overlapを許可 1カウントを等分配する --fraction 上記の -M や -O とセットで使用する EMアルゴリズムに基づいてリードを分配する featureCountsではできないのでRSEM等を用いる。 となっており、各オプションは以下を表します。 オプション 説明 -p paired-endのデータ※リード2本で1カウント（1fragment） -t feature領域の指定 -g meta-feature領域の指定 -s ストランド情報の有無 -T スレッド数 -B pairの両リードがマップ -C pairが同じ染色体にマップ -O overlapを許可 -M multi-mapを許可 -a アノテーションファイル -O 出力ファイル（テキスト形式） [j29XXX@reedbush-u3 j29XXX]$ wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_32/gencode.v32.annotation.gtf.gz [j29XXX@reedbush-u3 j29XXX]$ gunzip gencode.v32.annotation.gtf.gz [j29XXX@reedbush-u3 j29XXX]$ ls gencode.v32.annotation.gtf [j29XXX@reedbush-u3 j29XXX]$ mv gencode.v32.annotation.gtf db/ [j29XXX@reedbush-u3 j29XXX]$ cd RNAseq/ # overlap, multi-map をカウントしない場合 [j29XXX@reedbush-u3 RNAseq]$ featureCounts hisat_output_ERR315326.bam -p -t exon -g gene_id -s 0 -T 8 -BC -a ../db/gencode.v32.annotation.gtf -o Counts_BC_ERR315326.txt # overlap, multi-map をそれぞれ1カウント [j29XXX@reedbush-u3 RNAseq]$ featureCounts hisat_output_ERR315326.bam -p -t exon -g gene_id -s 0 -T 8 -MOBC -a ../db/gencode.v32.annotation.gtf -o Counts_MOBC_ERR315326.txt カウントが行えたので、 TPM(Transcripts Per Million) の算出します。なお、TPMの算出方法は 3S ゲノム配列解析論Ⅱ 第4回の講義内容 に記載してあります。 [iwasakioshuto@shuto-MacBook-Pro]$ sftp j29XXX@reedbush.cc.u-tokyo.ac.jp sftp> get /lustre/gj29/j29XXX/RNAseq/Counts_*BC_ERR315326.txt sftp> exit [iwasakioshuto@shuto-MacBook-Pro]$ ls Counts_BC_ERR315326.txt Counts_MOBC_ERR315326.txt [iwasakioshuto@shuto-MacBook-Pro]$ python CalcuTPM.py -i Counts_BC_ERR315326.txt -c hisat_output_ERR315326.bam -l Length [iwasakioshuto@shuto-MacBook-Pro]$ python CalcuTPM.py -i Counts_MOBC_ERR315326.txt -c hisat_output_ERR315326.bam -l Length [iwasakioshuto@shuto-MacBook-Pro]$ ls Counts_BC_ERR315326.txt Counts_BC_ERR315326_with_TPM.txt Counts_MOBC_ERR315326.txt Counts_MOBC_ERR315326_with_TPM.tx なお、ここで使用した CalcuTPM.py の中身は以下です。（ヘッダーの内容まで含めて形式を変えたくなかったので、少し余計な操作があります。） #coding:utf-8 import argparse import pandas as pd if __name__ == \"__main__\": parser = argparse.ArgumentParser() parser.add_argument(\"-i\", \"--input\", type=str, help=\"Please specify where the Counts file is.\") parser.add_argument(\"-c\", \"--absolute\", type=str, help=\"Which column indicates absolute counts.\", default=\"hisat_output_ERR315326.bam\",) parser.add_argument(\"-l\", \"--length\", type=str, help=\"Which column indicates length\", default=\"Length\") args = parser.parse_args() output_path = \"_with_TPM.\".join(args.input.split(\".\")) with open(args.input, mode=\"r\") as inputFile: header = inputFile.readline() # TPMの計算はここだけで完結 df = pd.read_csv(args.input, sep=\"\\t\", header=1) df[\"RPKM\"] = 1e6*df[args.absolute]/(df[args.length]*df[args.absolute].sum()) df[\"TPM\"] = 1e6*df[\"RPKM\"]/df[\"RPKM\"].sum() df.to_csv(output_path, index=False, sep=\"\\t\") with open(output_path) as outputFile: lines = outputFile.readlines() lines.insert(0, header) with open(output_path, mode='w') as f: f.writelines(lines) if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-11.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-11.html"},{"title":"ゲノム解析ツールの環境構築","text":"今回から、Reedbushスーパーコンピュータシステムを利用するので、様々な解析ツールのインストールを行い、解析環境を整えます。 備忘録 # sshでログインノードにアクセスする。 $ ssh j29XXX@reedbush.cc.u-tokyo.ac.jp # qsubコマンドで処理を実行するための計算機（計算ノード）にアクセスする。 [j29XXX@reedbush-h1 ~]$ qsub ... # ログインノードのみアクセス可能な記憶領域。ssh等のログインに必要な設定ファイルなど、容量の比較的小さいファイルのみ置いてある。 [j29XXX@rreedbush-h1 ~]$ cd /home/gj29/j29XXX # 学科全体で利用可能な高速アクセス領域。計算ノードのホームディレクトリ、ログインノードからアクセス可能。 [j29XXX@rreedbush-h1 ~]$ cd /lustre/gj29/j29XXX OSの確認 ディストリビューションの確認 [j29XXX@reedbush-u4 j29XXX]$ cat /etc/redhat-release Red Hat Enterprise Linux Server release 7.4 (Maipo) Red Hat は CentOS 系（正確には、 CentOS は Red Hat ）なので、 今回は CentOS 系統のものをダウンロードします。 ちなみに、以下のコマンドを打てば、LinuxOSのどのディストリビューションを使っているか調べることができます。 $ cat /etc/*release # Ubuntu: /etc/lsb-release # Fedora: /etc/fedora-release $ cat /etc/*version # Debin: /etc/debian_version # CentOS / RedHat Enterprise: /etc/redhat-release その他カーネル情報の確認 [j29XXX@reedbush-u4 j29XXX]$ uname -a Linux reedbush-u4 3.10.0-693.11.6.el7.x86_64 #1 SMP Thu Dec 28 14:23:39 EST 2017 x86_64 x86_64 x86_64 GNU/Linux 64-bit バージョンの x86 instruction set であることがわかります。 各種ツールのダウンロード 今回は、以下のツールをダウンロードします。 ツール名 説明 ウェブサイト SRA Toolkit sra形式の実験データの取得、fastq形式の塩基配列データへの変換など https://www.ncbi.nlm.nih.gov/sra/docs/toolkitsoft/ FASTQC 配列データの品質チェック https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ HISAT2 スプライシングを考慮した高速な配列マッピング https://ccb.jhu.edu/software/hisat2/index.shtml Samtools マッピング結果ファイルの各種操作 http://www.htslib.org/download/ IGV マッピング結果をグラフィカルに表示するビューワ（自分のPCにインストールして使用） http://software.broadinstitute.org/software/igv/download Subread リードの高速カウントを行う featureCounts などを含むパッケージ http://subread.sourceforge.net/ SRA Toolkit sra形式の実験データの取得、fastq形式の塩基配列データへの変換などを行うツール。 [j29XXX@reedbush-u4 j29XXX]$ wget https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-centos_linux64.tar.gz [j29XXX@reedbush-u4 j29XXX]$ tar -zxvf sratoolkit.current-centos_linux64.tar.gz [j29XXX@reedbush-u4 j29XXX]$ ls sratoolkit.2.9.6-1-centos_linux64 sratoolkit.current-centos_linux64.tar.gz [j29XXX@reedbush-u4 j29XXX]$ cd sratoolkit.2.9.6-1-centos_linux64/bin # 以下のコマンドで動けば成功です。 [j29XXX@reedbush-u4 bin]$ ./fasterq-dump --version # fastqファイルを取得する時に使うコマンドです。 FASTQC 配列データの品質チェックを行うツール。 [j29XXX@reedbush-u4 j29XXX]$ wget https://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.8.zip [j29XXX@reedbush-u4 j29XXX]$ unzip fastqc_v0.11.8.zip [j29XXX@reedbush-u4 j29XXX]$ ls FastQC fastqc_v0.11.8.zip # 実行ファイルに変更する。 [j29XXX@reedbush-u4 j29XXX]$ cd FastQC [j29XXX@reedbush-u4 FastQC]$ chmod 755 fastqc # 以下のコマンドで動けば成功です。 [j29XXX@reedbush-u4 FastQC]$ ./fastqc --version # もし動かなければ、Javaがインストールされていないのかもしれません。以下コマンドで確認できます。 # (FastQC is a java application. In order to run it needs your system to have a suitable Java Runtime Environment (JRE) installed.) [j29XXX@reedbush-u4 j29XXX]$ java -version HISAT2 スプライシングを考慮した高速な配列マッピングをするツール。 [j29XXX@reedbush-u4 j29XXX]$ wget ftp://ftp.ccb.jhu.edu/pub/infphilo/hisat2/downloads/hisat2-2.1.0-Linux_x86_64.zip [j29XXX@reedbush-u4 j29XXX]$ unzip hisat2-2.1.0-Linux_x86_64.zip [j29XXX@reedbush-u4 j29XXX]$ ls hisat2-2.1.0 hisat2-2.1.0-Linux_x86_64.zip [j29XXX@reedbush-u4 j29XXX]$ cd hisat2-2.1.0 # 以下のコマンドで動けば成功です。 [j29XXX@reedbush-u4 hisat2-2.1.0]$ ./hista2 --version Samtools マッピング結果ファイルの各種操作を行うツール。 [j29XXX@reedbush-u4 j29XXX]$ wget https://github.com/samtools/samtools/releases/download/1.9/samtools-1.9.tar.bz2 [j29XXX@reedbush-u4 j29XXX]$ tar -jxvf samtools-1.9.tar.bz2 [j29XXX@reedbush-u4 j29XXX]$ ls samtools-1.9 samtools-1.9.tar.bz2 [j29XXX@reedbush-u4 j29XXX]$ cd samtools-1.9 [j29XXX@reedbush-u4 samtools-1.9]$ ./configure --prefix=/lustre/gjXX/j29XXX [j29XXX@reedbush-u4 samtools-1.9]$ make [j29XXX@reedbush-u4 samtools-1.9]$ make install # 以下のコマンドで動けば成功です。 [j29XXX@reedbush-u4 samtools-1.9]$ ./samtools --version IGV マッピング結果をグラフィカルに表示するビューワ。 ※このツールはGUIツールなので、ここでは割愛します。 Subread リードの高速カウントを行う featureCounts などを含むパッケージ [j29XXX@reedbush-u4 j29XXX]$ wget --content-disposition https://sourceforge.net/projects/subread/files/subread-2.0.0/subread-2.0.0-Linux-x86_64.tar.gz/download [j29XXX@reedbush-u4 j29XXX]$ tar -zxvf subread-2.0.0-Linux-x86_64.tar.gz [j29XXX@reedbush-u4 j29XXX]$ ls subread-2.0.0-Linux-x86_64 subread-2.0.0-Linux-x86_64.tar.gz [j29XXX@reedbush-u4 j29XXX]$ cd subread-2.0.0-Linux-x86_64/bin # 以下のコマンドで動けば成功です。 [j29XXX@reedbush-u4 bin]$ ./featureCounts パスを通す いちいちパスを通すのが面倒なので、 .bashrc の環境変数にパスを書き込みます。 [j29XXX@reedbush-u4 j29XXX]$ vi .bashrc # エディタはなんでも良いので以下を書き込む \"\"\".bashrc PATH=$PATH:/lustre/gjXX/j29XXX/sratoolkit.2.9.6-1-centos_linux64/bin PATH=$PATH:/lustre/gjXX/j29XXX/FastQC PATH=$PATH:/lustre/gjXX/j29XXX/hisat2-2.1.0 PATH=$PATH:/lustre/gjXX/j29XXX/samtools-1.9 PATH=$PATH:/lustre/gjXX/j29XXX/subread-2.0.0-Linux-x86_64/bin \"\"\" [j29XXX@reedbush-u4 j29XXX]$ source .bashrc # shellの更新 もしくは、以下のコマンドを打ちます。 [j29XXX@reedbush-u4 j29XXX]$ export PATH=$PATH:/lustre/gjXX/j29XXX/sratoolkit.2.9.6-1-centos_linux64/bin [j29XXX@reedbush-u4 j29XXX]$ export PATH=$PATH:/lustre/gjXX/j29XXX/FastQC [j29XXX@reedbush-u4 j29XXX]$ export PATH=$PATH:/lustre/gjXX/j29XXX/hisat2-2.1.0 [j29XXX@reedbush-u4 j29XXX]$ export PATH=$PATH:/lustre/gjXX/j29XXX/samtools-1.9 [j29XXX@reedbush-u4 j29XXX]$ export PATH=$PATH:/lustre/gjXX/j29XXX/subread-2.0.0-Linux-x86_64/bin これにより、どこからでも各種解析ツールを呼び出すことができました。試しに samtools を呼び出してみます。 # 以下のコマンドで動けば成功です。 [j29XXX@reedbush-u4 j29XXX]$ samtools --version","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-10.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-10.html"},{"title":"逐次最小問題最適化法(SMO)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt 二次計画問題を解くアルゴリズム概観 アルゴリズム 説明 伝統的な二次計画法のアルゴリズム 計算コスト及びメモリ使用量の面で現実的には厳しい。 チャンキング(chunking) カーネル行列からラグランジュ乗数が $0$ となるデータに対応する行および列を取り除いても、ラグランジュ関数が不変であることを利用し、元々の二次計画問題は、より次元数の小さな問題を順番に解くことで、最終的には $0$ とならないラグランジュ乗数だけを残す、という問題に帰着する。 射影共役勾配法(projected conjugate gradient method) チャンキングを実装する手法 分解法(decomposition method) チャンキングと同様 サイズの小さな二次計画問題を繰り返し解く という手法だが、ここの部分問題の大きさが一定であるため、任意の大きさのデータに対応できる。 逐次最小問題最適化法(SMO;sequential minimal optimization) 分解法の計算コストを削減した手法。たった２つのラグランジュ乗数を含む部分問題を逐次解いていくことで最終的な解を得る。 逐次最小問題最適化法(SMO;sequential minimal optimization) ラグランジュ双対問題 を以下のように定義する。 $$ \\begin{aligned} \\tilde{L}(\\mathbf{a}) &=\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)& (7.10)\\\\ a_n & \\geq 0,\\quad n=1,\\ldots,N & (7.11)\\\\ \\sum_{n=1}&#94;Na_nt_n &= 0 & (7.12) \\end{aligned} $$ 逐次最小問題最適化法(SMO;sequential minimal optimization) は反復法である。 適当な初期値 $\\mathbf{a}&#94;{(0)}$ から出発して、更新 $\\mathbf{a}&#94;{(k)} \\rightarrow \\mathbf{a}&#94;{(k+1)}$ を繰り返す。 この際、 １度には2つの成分しか動かさない。 ここで、$a_p$ と $a_q$ だけ動かすことを考える。 （他の $a_n$ は定数とみなす） この時、制約条件より $$ a_pt_p + a_qt_q = 0-\\sum_{n\\neq p,q} a_nt_n = \\mathrm{const.}$$ が成立する。したがって、 $$ \\frac{\\partial a_q}{\\partial a_p} = -\\frac{t_p}{t_q} =-t_pt_q \\cdots (\\ast)$$ と解析的に偏微分を求めることが可能である。 目的関数 $\\tilde{L}$ の変化量 以下、$K_{ij} = k\\left(\\mathrm{x}_i,\\mathrm{x}_j\\right)$ とおく。ここで、 $$a_p\\mapsto a_p+\\Delta_p, \\quad a_q\\mapsto a_q+\\Delta_q$$ と更新した時、目的関数 $\\tilde{L}$ の変化量 $\\Delta\\tilde{L}$ は、 $$ \\begin{aligned} \\Delta\\tilde{L} &= \\Delta_p + \\Delta_q - \\Delta_pt_p\\sum_{n=1}&#94;Na_nt_nk(\\mathbf{x}_p,\\mathbf{x}_n) - \\Delta_qt_q\\sum_{n=1}&#94;Na_nt_nk(\\mathbf{x}_q,\\mathbf{x}_n)\\\\ &-\\frac{1}{2}\\left[\\Delta_p&#94;2k(\\mathbf{x}_p,\\mathbf{x}_p) + 2\\Delta_p\\Delta_qt_pt_qk(\\mathbf{x}_p,\\mathbf{x}_q) + \\Delta_q&#94;2k(\\mathbf{x}_q,\\mathbf{x}_q)\\right] \\end{aligned} $$ となる。 $(\\ast)$ より $\\Delta_q = -t_pt_q\\Delta_p$ である。 $t_p=t_q(\\Longleftrightarrow\\Delta_q=-\\Delta_p)$ の時と $t_p\\neq t_q$ の時に場合分けをし、それぞれ $\\Delta_p$ で変化量を偏微分して $0$ とおく。 結果は共に等しく、以下で表される。 $$ \\begin{aligned} \\Delta_p &= \\frac{1-t_pt_q + t_p\\left(\\sum_{n=1}&#94;Na_nt_nK_{qn} - \\sum_{n=1}&#94;Na_nt_nK_{pn}\\right)}{K_{pp} - 2K_{pq} + K_{qq}}\\\\ &= \\frac{1-t_pt_q + t_p\\left(y(\\mathbf{x_q}) - y(\\mathbf{x}_q)\\right)}{K_{pp} - 2K_{pq} + K_{qq}}\\\\ \\end{aligned} $$ クリッピング この時、 $t_pa_p+t_qa_q=c$ $a_p\\geq0$ $a_q\\geq0$ が成立していなければならないので、以下を満たすように $\\Delta_p$ の クリッピング を行う必要がある。 $t_p=t_q$ のときは $ 0 \\leq a_p + \\Delta_p \\leq c/t_p$ $t_p=-t_q$ のときは $ \\mathrm{max}\\{0,c/t_p\\}\\leq a_p+\\Delta_p$ 変数の選択方法 最後に、動かす $\\mu_p,\\mu_q$ の選択基準であるが、SMO法の発見者である $John C. Platt$ の論文に従うならば以下の様になる。 $KTT$条件を破る$a_p$を$1$つ目に選ぶ。 続いて、$\\left|y\\left(\\mathbf{x_q}\\right)-y\\left(\\mathbf{x_p}\\right)\\right|$ が最大となる$a_p$を次に選ぶ。 これは、$\\left|y\\left(\\mathbf{x_q}\\right)-y\\left(\\mathbf{x_p}\\right)\\right|$ が大きければそれだけステップ幅も大きくなるため収束が早くなるというヒューリスティックス（直感）である。 これを繰り返して、$\\tilde{L}$ が収束するまで反復を繰り返せば学習完了である。 実装例 kerasy.ML.svm.BaseSVM に記載。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-5.html"},{"title":"ラグランジュ双対問題","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) はじめに このノートは、 Qiita記事『ラグランジュ双対問題について解説』 を引用しています。 ラグランジュ双対関数 ラグランジアン 次の最小化問題を考える. $$ \\begin{aligned} \\min_{x\\in\\mathbb{R}&#94;n} &~ f_0(x)\\\\ \\mathrm{s.t.} &~ f_i(x)\\le 0,~ i=1,\\ldots,m\\\\ &~ h_i(x)=0, ~i=1,\\ldots, p \\end{aligned} $$ 実行可能領域は 空でない とする この最適化問題の 最適値 を \\(p&#94;\\star\\) と書く 凸性は特に仮定しない 主問題 という ラグランジアンは次のように定義される。 $$L(x, \\lambda, \\nu):=f_0(x)+\\sum_{i=1}&#94;m\\lambda_i f_i(x)+\\sum_{i=1}&#94;p\\nu_i h_i(x)$$ \\(\\lambda_i, \\nu_i\\) はラグランジュ未定乗数 ラグランジュ双対関数 ラグランジュ双対関数は次のように定義される. $$ \\begin{aligned} g(\\lambda,\\nu)&:=\\inf_{x\\in D} L(x, \\lambda, \\nu)\\\\ &=\\inf_{x\\in D} \\left(f_0(x)+\\sum_{i=1}&#94;m\\lambda_i f_i(x)+\\sum_{i=1}&#94;p\\nu_i h_i(x)\\right) \\end{aligned} $$ \\(D:=\\bigcap_{i=0}&#94;m \\mathrm{dom}(f_i) \\cap \\bigcap_{i=1}&#94;p \\mathrm{dom}(h_i)\\) 双対関数は, \\((\\lambda,\\nu)\\) のアフィン関数の各点でのinfになっているため, 必ずconcave(上に凸)となる (もとの問題が凸でなくても) 証明してみた: $$ \\begin{aligned} & g(t\\lambda_a+(1-t)\\lambda_b, t\\nu_a+(1-t)\\nu_b)\\\\ =&\\inf_{x\\in\\mathcal{D}}\\left(tL(x,\\lambda_a,\\nu_a)+(1-t)L(x,\\lambda_b,\\nu_b)\\right)\\\\ \\ge& t\\inf_{x\\in\\mathcal{D}}L(x,\\lambda_a,\\nu_a)+(1-t)L(x,\\lambda_b,\\nu_b)\\\\ =& tg(\\lambda_a,\\nu_a)+(1-t)g(\\lambda_b,\\nu_b) \\end{aligned} $$ 最適値の下限 任意の \\(\\lambda\\ge0, \\nu\\) に対して, 次が成り立つ. \\($g(\\lambda,\\nu)\\le p&#94;\\star\\) 証明: \\(\\tilde{x}\\) を実行可能解とする: \\(f_i(\\tilde{x})\\le 0, h_i(\\tilde{x}) = 0\\) \\(\\lambda\\ge 0\\) を仮定 このとき, \\(L(\\tilde{x},\\lambda,\\nu)\\) の値は, \\(f_0(\\tilde{x})\\) でおさえられる: $$ L(\\tilde{x},\\lambda,\\nu)=f_0(\\tilde{x})+\\underbrace{\\sum_{i=1}&#94;{m}\\lambda_if_i(\\tilde{x})}_{\\le0}+\\underbrace{\\sum_{i=1}&#94;{p}\\nu_ih_i(\\tilde{x})}_{=0}\\le f_0(\\tilde{x}) $$ ゆえに, \\(g(\\lambda, \\nu)\\) は \\(f_0(\\tilde{x})\\) でおさえられる: $$ \\therefore~g(\\lambda, \\nu)=\\inf_{x\\in\\mathcal{D}}L(x,\\lambda,\\nu)\\le L(\\tilde{x},\\lambda,\\nu)\\le f_0(\\tilde{x}) $$ 任意の \\(\\tilde{x}\\) に対して, \\(g(\\lambda, \\nu)\\le f_0(\\tilde{x})\\) が成り立つため, \\(g(\\lambda, \\nu)\\le p&#94;\\star\\) が成り立つ. 結論: 双対関数の値は, 主問題の最適値を超えない 線形近似による解釈 元の主問題と等価な次の最小化問題を考える. $$ \\min_{x}~f_0(x)+\\sum_{i=1}&#94;{m}I_-(f_i(x))+\\sum_{i=1}&#94;{p}I_0(h_i(x)) $$ ただし, \\(I_{-},I_{0}\\) は 指示関数 : $$ I_-(u):=\\begin{cases} 0&u\\le 0\\\\ \\infty& u>0 \\end{cases},~~~ I_0(u):=\\begin{cases} 0&u = 0\\\\ \\infty& u\\ne 0 \\end{cases} $$ 最小化するのが目的であるが, 指示関数は制約を満たさないと無限大になってしまう. この指示関数は, 制約違反に対する不満度 を表していると解釈できる. ここで, \\(I_-(u)\\) を \\(\\lambda_i u (\\lambda_i\\ge 0)\\) \\(I_0(u)\\) を \\(\\nu_iu\\) というように指示関数を近似する. $$ \\min_{x}~L(x,\\lambda,\\nu)=f_0(x)+\\sum_{i=1}&#94;{m}\\lambda_i f_i(x)+\\sum_{i=1}&#94;{p}\\nu_i h_i(x) $$ これは制約違反をソフトに近似したものと考えられる もちろん, 制約を違反するほど不満度は上昇するようになっている 不等式制約に関して, 違反しているとき \\(f_i(x)>0\\) であり, \\(\\lambda_if_i(x)\\ge0\\) 任意の \\(u\\) に関して, \\(\\lambda_iu \\le I_-(u)\\) と \\(\\nu_iu \\le I_0(u)\\) が成り立つため, 双対関数が元の主問題の下限を与えることがわかる 共役関数 \\(f\\) の共役関数 \\(f&#94;\\ast\\) は次で定義される. $$ f&#94;*(y)=\\sup_{x\\in\\mathrm{dom} f}(y&#94;\\top x-f(x)). $$ 共役関数と双対問題には密接な関係がある. ( フェンシェル双対定理 ) たとえば, 機械学習のよくある形 $$ \\min_{w\\in\\mathbb{R}&#94;d} f(Xw)+g(w) $$ の双対問題は, $$ \\max_{\\alpha\\in\\mathbb{R}&#94;n} -f&#94;\\ast(-\\alpha)-g&#94;\\ast(X&#94;\\top\\alpha) $$ というように共役関数を使って表現できる. そのため, 凸共役 を覚えておけば, 形式的に双対問題を導出できる. 証明は簡単で, ラグランジアン \\(L(w,z,\\alpha)=f(z)+g(w)+\\alpha&#94;\\top(z-Xw)\\) を考えて, 双対関数の定義にしたがって \\(w\\in\\mathbb{R}&#94;d,z\\in\\mathbb{R}&#94;n\\) に関して最小化するだけだ. ちなみに, このとき最適解 \\(w&#94;\\star,\\alpha&#94;\\star\\) に関して $$ w&#94;\\star \\in \\partial g&#94;\\ast(X&#94;\\top \\alpha&#94;\\star), \\quad \\alpha&#94;\\star \\in -\\partial f(Xw&#94;\\star) $$ が成立する (KKT条件). ラグランジュ双対問題 双対関数から双対問題へ. ラグランジュ双対問題 ここまでで, 双対関数が主問題の下限を与えることを示した. 自然な疑問は, 「ラグランジュ双対関数から得られる最も良い下限はどれくらいなのか?」ということだ. 最も良い下限は次の最大化問題を解くことで得られる. $$ \\begin{aligned} \\max_{\\lambda,\\nu}~&g(\\lambda,\\nu)\\\\ \\mathrm{s.t.} ~&\\lambda\\ge0 \\end{aligned} $$ $ これは, ラグランジュ双対問題 と呼ばれる 双対実行可能領域: \\((\\lambda,\\nu)\\) に関して, \\(\\lambda\\ge0\\) かつ \\(g(\\lambda,\\nu)>-\\infty\\) \\((\\lambda&#94;\\star,\\nu&#94;\\star)\\) : 双対問題の最適解 \\(d&#94;\\star\\) : 双対問題の最適値 双対問題は必ず凸最適化問題 目的関数が必ずconcaveで, 制約が凸であるため これは, 主問題が凸最適化でなくても成り立つ 弱双対性 $$ d&#94;\\star\\le p&#94;\\star $$ 主問題の凸性にかかわらず, 成り立つ この不等式は, \\(p&#94;\\star, d&#94;\\star\\) が発散しないときに成り立つ \\(p&#94;\\star - d&#94;\\star\\) を 双対ギャップ という よく最適化アルゴリズムの停止条件に使われる \\(p&#94;\\star\\) を求めるのことが難しいときに \\(d&#94;\\star\\) を求めることで, \\(p&#94;\\star\\) の下限を知ることができる 双対問題は必ず凸であるため, 多くの場合効率的に解ける 強双対性 $$ d&#94;\\star=p&#94;\\star $$ 主問題の最適値が双対問題の最適値と一致するという性質 強双対性は常には成り立たない もし主問題が凸, すなわち: $$ \\begin{aligned} \\min_{x\\in\\mathbb{R}&#94;n} &~ f_0(x)\\\\ \\mathrm{s.t.} &~ f_i(x)\\le 0, ~i=1,\\ldots,m\\\\ &~ Ax=b \\end{aligned} $$ で \\(f_0,\\ldots,f_m\\) が 凸なら, たいていは(いつもではない)強双対性が成り立つ. たとえば, SVMの最適化問題は凸であり, 強双対性が成り立つため, 主問題/双対問題のどちらを解いてもよい. スレーター条件 次を満たすような \\(x\\in\\mathrm{relint}(D)\\) が存在することをいう. $$ f_i(x)<0,~i=1,\\ldots,m,~~~Ax=b $$ $ 主問題が凸でスレーター条件を満たすとき, 強双対性が成り立つ スレーター条件は強双対性の十分条件である (必要十分ではない) もし, \\(f_1,\\ldots,f_k\\) がアフィンなら, より弱い条件が成り立てばよい: $$ f_i(x)\\le 0,~i=1,\\ldots,k,~~~f_i(x)<0,~i=k+1,\\ldots,m,~~~Ax=b $$ 言い換えれば, アフィンの不等式制約は等号を含んでもよい 補足: int(内部)とrelint(相対的内部) \\(\\mathrm{int}(S)\\) : Sに含まれる最大開集合 Sから境界上の点を取り除いたもの \\(\\mathrm{relint}(S)\\) : Sによって拘束される線形空間上で, Sから境界上の点を取り除いたもの. intとrelintの違いのイメージとしては, まっすぐな下敷きのような平面を考えたとき, intは下敷きの平面ごと取り除いてしまい空集合になるのに対して, relintは下敷きの縁を削って残った部分. Example1 \\(S=\\lbrace(x_1,x_2)\\mid 0\\le x_1\\le 1,x_2=0\\rbrace\\) $$ \\mathrm{int}(S)=\\emptyset, \\mathrm{relint}(S)=\\{(x_1,x_2)\\mid 0 < x_1 < 1,x_2=0\\}, (\\mathrm{aff}(S)=\\{(x_1,x_2)\\in\\mathbb{R}&#94;2\\mid x_2=0\\}) $$ Example2 \\(S= \\lbrace (x_1,x_2)\\mid 0\\le x_1\\le 1,0\\le x_2\\le 1\\rbrace\\) $$ \\mathrm{int}(S)=\\mathrm{relint}(S)=\\{(x_1,x_2)\\mid 0 < x_1 < 1,0<x_2<1\\}, (\\mathrm{aff}(S)=\\{(x_1,x_2)\\in\\mathbb{R}&#94;2\\}) $$ 最適性条件 特に主問題の凸性を仮定しない. 相補性条件 特に, 強双対性条件を満たすと仮定すると, $$ \\begin{aligned} f_0(x&#94;\\star)&=g(\\lambda&#94;\\star,\\nu&#94;\\star)\\\\ &=\\inf_{x\\in D} \\left(f_0(x)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star h_i(x)\\right)\\\\ &\\le f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star h_i(x&#94;\\star)\\\\ &\\le f_0(x&#94;\\star) \\end{aligned} $$ 1行目: 強双対性 2行目: 双対関数の定義 3行目: \\(\\inf\\) の定義 4行目: \\(\\lambda_i&#94;\\star\\ge0, f_i(x&#94;\\star)\\le0, ~i=1,\\ldots,m\\) と \\(h_i(x&#94;\\star)=0, ~i=1,\\ldots,p\\) 1,3行目と3,4行目を考慮すると, $$ \\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x&#94;\\star)=0. $$ 和の各項は非負であるため, $$ \\lambda_i&#94;\\star f_i(x&#94;\\star)=0,~~~i=1,\\ldots,m. $$ これを相補性条件という もし \\(\\lambda_i&#94;\\star>0\\) なら, \\(f_i(x&#94;\\star)=0\\) もし \\(f_i(x&#94;\\star)<0\\) なら, \\(\\lambda_i&#94;\\star=0\\) KKT条件 (Karush-Kuhn-Tucker条件) 強双対性を仮定すると, \\(x&#94;\\star\\) は \\(L(x,\\lambda&#94;\\star,\\nu&#94;\\star)\\) を最小化するため, \\(x&#94;\\star\\) における勾配は0である: $$ \\nabla f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star \\nabla f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star\\nabla h_i(x&#94;\\star)=0 $$ ゆえに, 最適解で成り立つ式を列挙すると: \\(f_i(x&#94;\\star)\\le 0,~i=1,\\ldots,m\\) \\(h_i(x&#94;\\star)= 0,~i=1,\\ldots,p\\) \\(\\lambda_i\\ge0,~i=1,\\ldots,m\\) \\(\\lambda_i f_i(x&#94;\\star)= 0,~i=1,\\ldots,m\\) \\(\\nabla f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star \\nabla f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star\\nabla h_i(x&#94;\\star)=0\\) これがいわゆる KKT条件 である. (必要条件) まとめると, 強双対性を満たすなら, 最適解において主変数と双対変数はKKT条件を満たさなければならない. 主問題が凸であるとき, KKT条件は十分条件にもなる. つまり, ある点 \\(\\tilde{x},\\tilde{\\lambda}, \\tilde{\\nu}\\) がKKT条件を満たすなら, \\(\\tilde{x}=x&#94;\\star, \\tilde{\\lambda}=\\lambda&#94;\\star, \\tilde{\\nu}=\\nu&#94;\\star\\) . 十分条件の証明: $$ \\begin{aligned} g(\\tilde{\\lambda},\\tilde{\\nu})&=L(\\tilde{x},\\tilde{\\lambda},\\tilde{\\nu})\\\\ &= f_0(\\tilde{x})+\\sum_{i=1}&#94;m\\tilde{\\lambda}_i f_i(\\tilde{x})+\\sum_{i=1}&#94;p\\tilde{\\nu}_i h_i(\\tilde{x})\\\\ &= f_0(\\tilde{x}) \\end{aligned} $$ 1行目: \\(\\tilde{x}\\) がKKT条件の最後の条件を満たすため 主問題が凸であるため, \\(L(x,\\tilde{\\lambda},\\tilde{\\nu})\\) は \\(x\\) に関して凸である ( \\(\\because\\tilde{\\lambda}_i\\ge0\\) ) \\(\\therefore~L\\) を最小化する \\(x\\) は, 勾配が0である 2行目: ラグランジアンの定義 3行目: \\(\\tilde{x}\\) がKKT条件の2つ目と4つ目を満たすため この式は, 双対ギャップが0であることを意味するため, \\(\\tilde{x},\\tilde{\\lambda}, \\tilde{\\nu}\\) は最適解である. 結論: スレーター条件を満たすとき, KKT条件は最適性の必要十分条件となる if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-4.html"},{"title":"サポートベクターマシーン(SVM)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: seed = 0 サポートベクターマシーン(SVM) マージン最大化 に基づく線形識別器 カーネル関数と組み合わせることによって非線形な識別も可能 サンプル間の類似度にしか依存しない （→非ベクトルデータの分類にも適用可能 ） まとめ マージン最大化 という方針で誤差関数を定義する。 汎化性能を高めるために、 スラック変数 を導入して ソフトなマージン最大化に緩和 する ラグランジュ未定乗数法 を用いてラグランジュ関数を得る。 各パラメータについて微分する。 ラグランジュ関数に代入して 双対問題 を得る。 SMO法 などを用いて二次計画問題である双対問題を解く。 無効制約のデータ点は識別関数に影響しなくなる。 （SVMが疎になる。） マージン最大化 「個々のデータに関して確率計算をし、何らかの識別面を求める」 のではなく、 「汎化性能の最も高い識別面を直接考える」 そこで、 「マージン最大化」 という方針で識別面を最適化する。（正則化理論・VC理論により正当化されている。） 最も近いデータ $\\phi(\\mathbf{x}_n)$ までの距離（ マージン ）が最大となるような識別面を選ぶ。（ここでは、距離＝ユークリッド距離とする。） 識別面からちょうどマージンの分だけ離れた面上に乗る特徴ベクトル（一般に複数）を、(広義の) サポートベクトル (support vector) と呼ぶ。 学習法の定式化（2クラス分類） ※ 二クラスが線形分離可能であると仮定する。 線形識別関数が $y(\\mathbf{x}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x})+b$ で表され、$y(\\mathbf{x})$ の正負でクラスを識別するとする。 $y(\\mathbf{x})>0$ の時 $t=1$ $y(\\mathbf{x})<0$ の時 $t=-1$ したがって、 $t_ny(\\mathbf{x}_n)>0$ が全てのデータ $(\\mathbf{x}_n,t_n)$ に対して成り立つ （∵特徴空間で線形分離可能） 学習の目的は「パラメータ $\\mathbf{w}$ と $b$ を決定すること」。 データと識別面の最小距離は $1 / \\|\\mathbf{w}\\|$ で表される。（理由は以下） ※ 記述を簡単にするために線形識別問題の場合で考えるが、非線形写像 $\\phi$ を通しても同様の議論が成り立つ。 点 $\\mathbf{x}_n$ から識別面に下ろした垂線の足を $\\mathbf{x}_{n\\perp}$ 点 $\\mathbf{x}_n$ から識別面までの符号付き距離を $d_n$ と定義すると、 $\\mathbf{w}$ が識別面の法ベクトルであるから、 $\\mathbf{x}_{n\\perp} = \\mathbf{x}_n - d_n\\frac{\\mathbf{w}}{\\|\\mathbf{w}\\|}$ と表せる。 $\\mathbf{x}_{n\\perp}$ は識別面上にあるので、$\\mathbf{w}&#94;T\\mathbf{x}_{n\\perp} + b = 0$ が成り立つ。 したがって、 $$\\mathbf{w}&#94;T\\left(\\mathbf{x}_n - d_n\\frac{\\mathbf{w}}{\\|\\mathbf{w}\\|}\\right) + b = 0\\qquad \\therefore d_n = \\frac{\\mathbf{w}&#94;T\\mathbf{x}_n + b}{\\|\\mathbf{w}\\|}$$ として距離 $d_n$ が定義できる。ここで、$(\\mathbf{w},b)\\rightarrow(k\\mathbf{w},kb)$ としても $d_n$ の値は不変なので、 $$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n + b \\right)= 1\\qquad (7.4)$$ とスケーリングしても一般性を失わない。 なお、 このスケーリング下では、全てのデータ $\\mathbf{x}_n$ に対して $$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n + b \\right) \\geq 1\\qquad (7.5)$$ が成り立つ。 ここまでをまとめると、 マージン最大 は、 『$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n+b\\right)\\geq1\\quad(i=1,\\ldots,n)$ という条件下で、$\\frac{1}{2}||\\mathbf{w}||&#94;2$ を最小化する問題』 であると言える。 この制約付き最適化問題を解くために、$(7.5)$ の各制約式ごとにラグランジュ乗数 $a_n\\geq0$ を導入すると、次のラグランジュ関数が得られる。 $$L(\\mathbf{w},b,\\mathbf{a}) = \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2 - \\sum_{n=1}&#94;{N}a_n\\left\\{t_n\\left(\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n) + b\\right) - 1\\right\\}\\qquad (7.7)$$ よって、$\\mathbf{w},b$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) =0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) & (7.8)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_nt_n = 0 \\quad\\therefore\\sum_{n=1}&#94;Na_n&#94;{\\ast}t_n = 0 & (7.9)\\\\ \\end{aligned} $$ が得られる。これらの結果を $(7.7)$ に代入して $\\mathbf{w},b$ を消去すると、元の問題は以下の 双対問題 に変換される。 $$ \\tilde{L}(\\mathbf{a}) =\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.10)$$ なお、$\\mathbf{a}$ は以下の制約を満たす。 $$ \\begin{aligned} a_n & \\geq 0,\\quad n=1,\\ldots,N & (7.11)\\\\ \\sum_{n=1}&#94;Na_nt_n &= 0 & (7.12) \\end{aligned} $$ また、カーネル関数 $k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ は、$k(\\mathbf{x},\\mathbf{x}&#94;{\\prime}) = \\phi(\\mathbf{x})&#94;T\\phi(\\mathbf{x})$ と定義される。 この双対問題は二次計画問題であり、 逐次最小問題最適化法(SMO;sequential minimal optimization) などで解くことができる。 なお、今回の場合、 制約条件が全て線形 であることから 実行可能域が凸領域 であることがわかるので、 任意の局所解が大局解になる。 一旦最適な $\\mathbf{a}$ が求まると、識別関数 $y(\\mathbf{x})$ は、 $$y(\\mathbf{x}) = \\mathbf{w}&#94;{\\ast T}\\phi(\\mathbf{x})+b = \\sum_{n=1}&#94;N a_nt_nk(\\mathbf{x},\\mathbf{x}_n) + b \\qquad (7.13)$$ として表すことができる。ここで、 KKT条件より $a_n=0\\Leftrightarrow t_ny(\\mathbf{x}_n)-1>0$ のデータは識別関数に影響しないので、計算から除外することができる。（SVMが疎になる理由） なお、バイアスパタメータ $b$ は、任意のサポートベクトル $\\mathbf{x}_n$ が $t_ny(\\mathbf{x}_n) = 1$ を満たすことから、 $$ \\begin{aligned} &t;_n\\left(\\sum_{m\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m) + b\\right) = 1 & (7.17)\\\\ &\\therefore b&#94;{\\ast}= \\frac{1}{N_{\\mathcal{S}}}\\sum_{n\\in\\mathcal{S}}\\left(t_n-\\sum_{n\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\right)&(7.18) \\end{aligned} $$ として求めることができる。（数値計算の誤差の影響を小さくするため、$(7.17)$ の両辺に $t_n$ をかけ、全てのサポートベクトルで平均をとった。 In [3]: from kerasy.ML.svm import hardSVC In [4]: n_cls1 = 20 ; n_cls2 = 20 N = n_cls1 + n_cls2 In [5]: train_x = np . concatenate ([ np . random . RandomState ( seed ) . normal ( loc = [ 0.5 , 0 ], scale = [ 0.2 , 0.4 ], size = ( n_cls1 , 2 )), np . random . RandomState ( seed ) . normal ( loc = [ - 0.5 , 0 ], scale = [ 0.2 , 0.4 ], size = ( n_cls2 , 2 )) ]) train_y = np . concatenate ([ np . ones ( shape = n_cls1 ), - np . ones ( shape = n_cls2 ) ]) In [6]: X , Y = np . meshgrid ( np . linspace ( - 1 , 1 , 100 ), np . linspace ( - 1 , 1 , 100 )) In [7]: kernels = [ \"linear\" , \"polynomial\" , \"gaussian\" , \"sigmoid\" , \"laplacian\" , \"inverse_multiquadric\" ] In [8]: n_fig = len ( kernels ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i , kernel in enumerate ( kernels ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) model = hardSVC ( kernel = kernel ) model . fit ( train_x , train_y , max_iter = 1500 , sparse_memorize = False ) Z = np . vectorize ( lambda x , y : model . predict ( np . array ([ x , y ]) . reshape ( 1 , - 1 )))( X , Y ) == 1 ax . pcolor ( X , Y , Z , alpha = 0.3 ) for i in range ( N ): alpha = 1 if i in model . isSV () else 0.3 color = \"red\" if train_y [ i ] == 1 else \"blue\" ax . plot ( train_x [ i , 0 ], train_x [ i , 1 ], marker = \"o\" , color = color , markersize = 10 , alpha = alpha ) ax . set_title ( f \" { kernel } kernel\" ) ax . set_xlim ( - 1 , 1 ), ax . set_ylim ( - 1 , 1 ) plt . tight_layout () plt . show () ソフトマージン ここまで、 「二クラスが線形分離可能である」 という仮定を置いていたが、実際の問題では クラスの分布が重なる場合 があり、そのような場合訓練データを完全に分離する解が汎化能力に優れるとは限らない（というより、過学習する。） そこで、各学習データ $(\\mathbf{x}_n,t_n)$ に対して、 スラック変数 (slack variable) $\\xi_n\\geq 0$ を導入して、 $$ t_ny(\\mathbf{x}_n) \\geq 1 \\Longrightarrow t_ny(\\mathbf{x}_n) \\geq 1 - \\xi_n \\qquad (7.20)$$ と条件を緩める。 （ハードマージンの制約のソフトマージンへの緩和） つまり、 $\\xi_n > 1$ となるデータは誤識別している事になる。 ここでの目標は 『マージンよりも内側（$\\xi_n>0$）のデータ $n$ に対してソフトにペナルティを与えつつマージンを最大化する』 ことである。したがって、次の目的関数を最小化する。 $$C\\sum_{n=1}&#94;N\\xi_n + \\frac{1}{2}\\|\\mathbf{w}\\| \\qquad (7.21)$$ なお、$C>0$ は スラック変数を用いて表されるペナルティとマージンの大きさの間の トレードオフを制御するパラメータ である。 したがって、この最小化問題のラグランジュ関数は、新たにラグランジュ乗数 $\\{\\mu_n\\}$ を導入して以下のようになる。 $$L(\\mathbf{w},b,\\boldsymbol{\\xi},\\mathbf{a},\\boldsymbol{\\mu}) = \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2 + C\\sum_{n=1}&#94;N\\xi_n - \\sum_{n=1}&#94;{N}a_n\\left\\{t_n\\left(\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n) + b\\right) - 1 + \\xi_n\\right\\} - \\sum_{n=1}&#94;N\\mu_n\\xi_n\\qquad (7.22)$$ 先程同様 $\\mathbf{w},b,\\xi_n$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) =0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) & (7.29)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_nt_n = 0 \\quad\\therefore\\sum_{n=1}&#94;Na_n&#94;{\\ast}t_n = 0 & (7.30)\\\\ \\frac{\\partial L}{\\partial \\xi_n} &= C-a_n-\\mu_n \\quad\\therefore a_n = C-\\mu_n & (7.31) \\end{aligned} $$ が得られる。これらの結果を $(7.22)$ に代入すると、以下の 双対形のラグランジュ関数 が得られる。 $$ \\tilde{L}(\\mathbf{a}) =\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.32)$$ これは、先程の $(7.10)$ と同様の形である。なお、制約式は $$ \\begin{aligned} &a;_n \\geq 0,\\mu_n\\geq 0 \\quad n=1,\\ldots,N\\\\ &\\therefore 0\\leq a_n \\leq C & (7.33)\\\\ &\\sum_{n=1}&#94;Na_nt_n = 0 & (7.34) \\end{aligned} $$ である。 なお、バイアスパタメータ $b$ は、サポートベクトルは $a_n>0$ を満たすが、KKT条件より $a_n$ $\\mu_n$ $\\xi_n$ 説明 $a_n=0$ 識別関数に影響を及ぼさない。 $0 < a_n < C$ $\\mu_n>0$ $\\xi_n=0$ ちょうどマージン境界上ある。 $a_n=C$ $\\mu_n=0$ $\\xi_n>0$ マージン内に侵入している。 となることから、$0 < a_n < C$ となるサポートベクトルについては $t_ny(\\mathbf{x}_n) = 1$ が成立するので、 $$ \\begin{aligned} &t;_n\\left(\\sum_{m\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m) + b\\right) = 1 & (7.36)\\\\ &\\therefore b&#94;{\\ast}= \\frac{1}{N_{\\mathcal{M}}}\\sum_{n\\in\\mathcal{M}}\\left(t_n-\\sum_{n\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\right)&(7.37) \\end{aligned} $$ として求めることができる。 In [9]: from kerasy.ML.svm import SVC In [10]: train_x = np . concatenate ([ np . random . RandomState ( seed ) . normal ( loc = [ 0.2 , 0.2 ], scale = [ 0.2 , 0.4 ], size = ( n_cls1 , 2 )), np . random . RandomState ( seed ) . normal ( loc = [ - 0.2 , - 0.2 ], scale = [ 0.3 , 0.2 ], size = ( n_cls2 , 2 )) ]) train_y = np . concatenate ([ np . ones ( shape = n_cls1 ), - np . ones ( shape = n_cls2 ) ]) In [11]: params = [ ( 1e-2 , 1e-2 ),( 1e-2 , 1e0 ),( 1e-2 , 1e2 ), ( 1e1 , 1e-2 ),( 1e1 , 1e0 ),( 1e1 , 1e2 ), ( 1e4 , 1e-2 ),( 1e4 , 1e0 ),( 1e4 , 1e2 ), ] In [12]: n_fig = len ( params ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i ,( C , sigma ) in enumerate ( params ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) model = SVC ( kernel = \"gaussian\" , C = C , sigma = sigma ) model . fit ( train_x , train_y , max_iter = 1500 , sparse_memorize = False ) Z = np . vectorize ( lambda x , y : model . predict ( np . array ([ x , y ]) . reshape ( 1 , - 1 )))( X , Y ) == 1 ax . pcolor ( X , Y , Z , alpha = 0.3 ) for i in range ( N ): alpha = 1 if i in model . isSV () else 0.3 color = \"red\" if train_y [ i ] == 1 else \"blue\" ax . plot ( train_x [ i , 0 ], train_x [ i , 1 ], marker = \"o\" , color = color , markersize = 10 , alpha = alpha ) ax . set_title ( f \"gaussian kernel (C= { C } , $\\sigma= { sigma } $)\" ) ax . set_xlim ( - 1 , 1 ), ax . set_ylim ( - 1 , 1 ) plt . tight_layout () plt . show () 多クラスSVM SVMは本来2クラス識別の為の分類器であるが、これを複数組み合わせるなどの方法によって $K>2$クラスの識別に利用する事が出来る。最もよく用いられる方法は、 one-versus-the-rest方式 と呼ばれる方法であり、「データ $\\mathbf{x}$ が クラス $k$ かそれ以外であるか を識別するSVM $y_k(\\mathbf{x})$ を $K$ クラスそれぞれについて構築し、$ y(\\mathbf{x}) = \\mathop{\\rm arg~max}\\limits_{k}y_k(\\mathbf{x})$ によって $\\mathbf{x}$ のクラスを決定する」 SVM回帰 単純な線形回帰問題においては、次の式で定義される正則化された誤差関数を最小化する。 $$\\frac{1}{2}\\sum_{n=1}&#94;N\\{y_n-t_n\\}&#94;2 + \\frac{\\lambda}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.50)$$ 疎な解を得るために、二条誤差関数を $\\epsilon$ 許容誤差関数($\\epsilon$-insentive error function) で置き換える。つまり、予測値 $y(\\mathbf{x})$ と観測値 $t$ の差が $\\epsilon(>0)$ 未満のときは、$\\epsilon$ 許容誤差関数の値は $0$ となる。$\\epsilon$ 許容誤差関数の簡単な例は、 「許容範囲外の値に関しては線形のコストを生じさせる」 ものである。 $$ \\begin{aligned} E_{\\epsilon}\\left(y(\\mathbf{x})-t\\right) = \\begin{cases} 0 & (\\text{ when }|y(\\mathbf{x} - t)| < \\epsilon)\\\\ |y(\\mathbf{x} - t)| - \\epsilon & (\\text{ otherwise }) \\end{cases}\\qquad (7.51) \\end{aligned} $$ In [13]: squareError = lambda x , y_true : 1 / 2 * ( x - y_true ) ** 2 # Sum of Squares Error function epsilonError = lambda x , y_true , epsilon = 1 : 0 if abs ( x - y_true ) < epsilon else abs ( x - y_true ) - epsilon In [14]: X = np . linspace ( - 2 , 2 , 1000 ) plt . plot ( X ,[ squareError ( x , y_true = 0 ) for x in X ], color = \"black\" , label = \"sum of squares error function\" , linestyle = \"--\" ) plt . plot ( X ,[ epsilonError ( x , y_true = 0 ) for x in X ], color = \"black\" , label = \"$\\epsilon$-insentive error function\" ) plt . scatter ( 0 , 0 , marker = \"x\" , color = \"red\" , label = \"y_true\" ) plt . title ( \"Error function comparison\" , fontsize = 16 ), plt . xlim ( - 2 , 2 ), plt . ylim ( -. 1 , 2 ) plt . xlabel ( \"$x$\" , fontsize = 16 ), plt . ylabel ( \"$E(x)$\" , fontsize = 16 ) plt . legend () plt . show () この $\\epsilon$ 許容誤差関数を用いると、結局次の正則化された誤差関数を最小化することになる。 $$C\\sum_{n=1}&#94;NE_{\\epsilon}\\left(y(\\mathbf{x}_n)-t_n\\right) + \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.52)$$ 分類問題と同様、この最適化問題をスラック変数 $\\xi_n,\\hat{\\xi}_n$ を導入して表現する。 $\\epsilon$ チューブの中に位置するという条件は $y_n-\\epsilon\\leq t_n \\leq y_n+\\epsilon$ と表せるので、チューブの外側にデータ点が存在することを許すような制約条件は以下のようにかける。 $$ \\begin{aligned} t_n&\\leq y(\\mathbf{x}_n) + \\epsilon + \\xi_n & (7.53)\\\\ t_n&\\geq y(\\mathbf{x}_n) - \\epsilon - \\xi_n & (7.54)\\\\ \\end{aligned} $$ よって、スラック変数を用いると、SVM回帰の誤差関数は次のようにかける。 $$C\\sum_{n=1}&#94;N\\left(\\xi_n + \\hat{\\xi}_n\\right) + \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.55)$$ したがって、この最小化問題のラグランジュ関数は、ラグランジュ乗数 $a_n,\\hat{a}_n,\\mu_n,\\hat{\\mu}_n$ を導入して以下のようになる。（$y(\\mathbf{x}_n)= \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)+b$） $$ \\begin{aligned} L &=C\\sum_{n=1}&#94;N\\left(\\xi_n+\\hat{\\xi}_n\\right)+\\frac{1}{2}\\|\\mathbf{w}\\|&#94;2-\\sum_{n=1}&#94;N\\left(\\mu_n\\xi_n+\\hat{\\mu}_n\\hat{\\xi}_n\\right)\\\\ &-\\sum_{n=1}&#94;Na_n\\left(\\epsilon + \\xi_n + y_n - t_n \\right)-\\sum_{n=1}&#94;N\\hat{a}_n\\left(\\epsilon + \\hat{\\xi}_n - y_n + t_n\\right) \\qquad (7.56)\\\\ \\end{aligned} $$ これまで同様 $\\mathbf{w},b,\\xi_n,\\hat{\\xi}_n$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;Na_n\\phi(\\mathbf{x}_n)-\\sum_{n=1}&#94;N\\hat{a}_n\\phi(\\mathbf{x}_n)=0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N \\left(a_n-\\hat{a}_n\\right)\\phi(\\mathbf{x}_n) & (7.57)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_n + \\sum_{n=1}&#94;N\\hat{a}_n = 0 \\quad\\therefore\\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right) = 0 & (7.58)\\\\ \\frac{\\partial L}{\\partial \\xi_n} &= C-a_n-\\mu_n \\quad\\therefore a_n + \\mu_n = C & (7.59)\\\\ \\frac{\\partial L}{\\partial \\hat{\\xi}_n} &= C-\\hat{a}_n-\\hat{\\mu}_n \\quad\\therefore \\hat{a}_n + \\hat{\\mu}_n = C & (7.60)\\\\ \\end{aligned} $$ が得られる。これらの結果を $(7.56)$ に代入すると、以下の 双対形のラグランジュ関数 が得られる。 $$ \\begin{aligned} \\tilde{L}(\\mathbf{a},\\hat{\\mathbf{a}}) &= -\\frac{1}{2}\\sum_{n=1}&#94;N\\sum_{m=1}&#94;N\\left(a_n-\\hat{a}_n\\right)\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\\\ &- \\epsilon\\sum_{n=1}&#94;N\\left(a_n + \\hat{a}_n\\right) + \\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right)t_n \\end{aligned} \\qquad (7.61) $$ なお、制約式は $$ \\begin{aligned} 0 \\leq a_n &\\leq C & (7.62)\\\\ 0 \\leq \\hat{a}_n &\\leq C & (7.63) \\end{aligned} $$ である。したがって、新しい入力に対する予測値は $$y(\\mathbf{x}) = \\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right)k(\\mathbf{x},\\mathbf{x}_n) + b\\qquad (7.64)$$ とカーネル関数のみを用いて計算できることがわかる。 なお、バイアスパタメータ $b$ は次のように計算できる。 $C>a_n>0$ が成り立つデータ点についてはKKT条件より $\\xi_n = 0 \\quad \\therefore \\epsilon+y_n-t_n=0$ が成り立つ。よって、 $$ \\begin{aligned} b &= t_n - \\epsilon - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\\\ &= t_n - \\epsilon - \\sum_{m=1}&#94;N\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.69) \\end{aligned} $$ $C>\\hat{a}_n>0$ が成り立つデータ点についてはKKT条件より $\\hat{\\xi}_n = 0 \\quad \\therefore \\epsilon+y_n-t_n=0$ が成り立つ。よって、 $$ \\begin{aligned} b &= t_n - \\epsilon - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\\\ &= t_n - \\epsilon - \\sum_{m=1}&#94;N\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.69) \\end{aligned} $$ なお、このようにして得られた $b$ の値を全て平均した結果を用いると数値誤差の影響を小さくできる。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-3.html"},{"title":"ラグランジュ未定乗数法","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 条件なし最適化 ある関数 \\(f\\) が与えられた時、それが最小値を取る点を見つけ出す。 $$\\text{min : } f(\\mathbf{x})$$ したがって、微分をとって \\(0\\) になる点を見つければ良い。 $$\\frac{\\partial}{\\partial x}f(x) = 0\\Longrightarrow x&#94;{\\ast}$$ 等式制約付き最適化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g(\\mathbf{x})=0\\\\ \\end{aligned} $$ ラグランジュ乗数(Lagrangian multiplier) と呼ばれるパラメータ \\(\\lambda\\) を導入した ラグランジュ関数(Lagrangian function) $$L(\\mathbf{x},\\lambda) \\equiv f(\\mathbf{x})+\\lambda g(\\mathbf{x})\\qquad (E.4)$$ の \\(\\mathbf{x}\\) と \\(\\lambda\\) の両方に対する停留点（鞍点）を見つければ、制約付き問題の最適解が得られる。 理由 以下２つの理由より、 \\(\\nabla f\\) と \\(\\nabla g\\) は、 向きが逆の場合も含めて 平行なベクトルとなる。したがって、 あるパラメータ \\(\\lambda\\neq0\\) が存在して、 $$\\nabla f + \\lambda\\nabla g = 0\\qquad (E.3)$$ が成立しなければならない。これは、 \\(\\nabla_{\\mathbf{x}}L=0\\) と表されることがわかる。また、 \\(\\partial L/\\partial\\lambda = 0\\) より、制約式 \\(g(\\mathbf{x})=0\\) も導かれる。 1) \\(\\nabla g(\\mathbf{x})\\) が制約面 \\(g(\\mathbf{x})=0\\) に対して常に垂直 制約面 \\(g(\\mathbf{x})\\) 上の点 \\(\\mathbf{x}\\) と \\(\\mathbf{x}+\\boldsymbol{\\varepsilon}\\) を考える。 すると、 \\(\\mathbf{x}\\) の周りでの \\(g(\\mathbf{x})\\) のテイラー展開より、 $$g(\\mathbf{x} + \\boldsymbol{\\varepsilon}) \\sim g(\\mathbf{x}) + \\boldsymbol{\\varepsilon}&#94;T\\nabla g(\\mathbf{x})\\qquad (E.2)$$ いま、 \\(\\mathbf{x}\\) と \\(\\mathbf{x}+\\boldsymbol{\\varepsilon}\\) は共に制約面上に存在するので $$g(\\mathbf{x})=g(\\mathbf{x}+\\boldsymbol{\\varepsilon})=0$$ が成り立つ。ゆえに、 \\(\\|\\boldsymbol{\\varepsilon}\\|\\rightarrow0\\) の極限では \\(\\boldsymbol{\\varepsilon}&#94;T\\nabla g(\\mathbf{x})\\sim0\\) が成り立つ。 \\(\\boldsymbol{\\varepsilon}&#94;T\\) は制約面上の接線である。 より、ベクトル \\(\\nabla g(\\mathbf{x})\\) は制約面 \\(g(\\mathbf{x})=0\\) に対して垂直である。 2) \\(\\nabla f(\\mathbf{x}&#94;{\\ast})\\) も制約面に対して垂直 もし \\(\\nabla f(\\mathbf{x}&#94;{\\ast})\\) が制約面に対して垂直でないとすると、制約面にそって \\(f(\\mathbf{x})\\) の値がさらに大きくなるように点を動かすことができるはずである。 したがって、制約面上の点で \\(f(\\mathbf{x})\\) を最大化する点 \\(\\mathbf{x}&#94;{\\ast}\\) においては、ベクトル \\(\\nabla f(\\mathbf{x})\\) も制約面に対して垂直でなければならない。 不等式制約付き最適化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g(\\mathbf{x})\\leq0\\\\ \\end{aligned} $$ ここで、解 \\(\\mathbf{x}&#94;{\\ast}\\in\\Omega\\) には、 無効制約(inactive constraint) \\(\\overset{\\text{def}}{\\Longleftrightarrow}g(\\mathbf{x}&#94;{\\ast}) < 0\\) 有効制約(active constraint) \\(\\overset{\\text{def}}{\\Longleftrightarrow}g(\\mathbf{x}&#94;{\\ast}) = 0\\) の2つの可能性がある。 $$ \\Omega:= \\left\\{\\mathbf{x}\\in\\mathbb{R}&#94;D: g(\\mathbf{x})<0 \\right\\} $$ 無効制約の場合 無効制約 \\(\\left(g(\\mathbf{x})<0\\right)\\) の場合、関数 \\(g(\\mathbf{x})\\) は何も制約を課していないのと同様なので、停留条件は単に \\(\\nabla f(\\mathbf{x}) = 0\\) となる。 なお、これは上記の 等式制約におけるラグランジュ関数 \\((E.4)\\) において \\(\\lambda=0\\) とした場合の停留条件に等しい。 有効制約の場合 有効制約 \\(\\left(g(\\mathbf{x})=0\\right)\\) の場合、 等式制約におけるラグランジュ関数 \\((E.4)\\) において \\(\\lambda\\neq0\\) とした場合の停留条件に等しい。 ただし、 \\(-\\nabla f(\\mathbf{x}&#94;{\\ast})\\) は \\(g(\\mathbf{x})<0\\) の外側へと向かうはず だから、 あるパラメータ \\(\\lambda>0\\) が存在して、 $$\\nabla f(\\mathbf{x}) = -\\lambda\\nabla g (\\mathbf{x})$$ が成立しなければならない。 勾配 意味 最適化問題における問題における意味 \\(\\nabla f(\\mathbf{x})\\) \\(f\\) が大きくなる方向 目的とは別の方向 \\(\\nabla g(\\mathbf{x})\\) \\(g\\) が大きくなる方向 \\(g(\\mathbf{x})<0\\) の外側へと向かう方向 KKT条件 上記の無効制約・有効制約のどちらの場合にせよ、 \\(\\lambda g(\\mathbf{x})=0\\) が成立することがわかる。 したがって、 \\(g(\\mathbf{x})\\leq0\\) という制約の下で \\(f(\\mathbf{x})\\) を最小化するには、以下の Karush-Kuhn-Tucker(KKT)条件 のもとで、 \\(\\mathbf{x},\\lambda\\) に関して ラグランジュ関数 \\((E.4)\\) の停留点を求めれば良い。 $$ \\begin{aligned} \\begin{cases} \\text{Primal feasibility} &g(\\mathbf{x})\\leq0 & (E.9)\\\\ \\text{Dual feasibility} &\\lambda \\geq 0 & (E.10)\\\\ \\text{Complementary slackness} &\\lambda g(\\mathbf{x}) = 0 & (E.11) \\end{cases} \\end{aligned} $$ なお、当然ではあるが、「制約条件の符号の向き」と「目的関数の最大化・最小化」には以下の関係がある。（ \\(\\lambda\\geq0\\) ） 目的関数 \\(f(\\mathbf{x})\\) 制約条件 \\(g(\\mathbf{x})\\) ラグランジュ関数 \\(L(\\mathbf{x},\\lambda)\\) \\(\\min f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\leq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) + \\lambda g(\\mathbf{x})\\) \\(\\min f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\geq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) - \\lambda g(\\mathbf{x})\\) \\(\\max f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\leq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) - \\lambda g(\\mathbf{x})\\) \\(\\max f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\geq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) + \\lambda g(\\mathbf{x})\\) 一般化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g_j(\\mathbf{x})=0 & (j=1,\\ldots,J)\\\\ & h_k(\\mathbf{x})\\leq0 & (k=1,\\ldots,K)\\\\ \\end{aligned} $$ 以下のラグランジュ関数を最適化する。 $$L\\left(\\mathbf{x},\\{\\lambda_j\\},\\{\\mu_k\\}\\right) = f(\\mathbf{x}) + \\sum_{j=1}&#94;J\\lambda_jg_j(\\mathbf{x}) + \\sum_{k=1}&#94;K\\mu_kh_k(\\mathbf{x})\\qquad (E.12)$$ ここで、KKT条件は、以下となる。 $$ \\begin{aligned} \\begin{cases} \\text{Primal feasibility} &g_j(\\mathbf{x})=0,h_k(\\mathbf{x})\\leq0 \\\\ \\text{Dual feasibility} &\\mu_k \\geq 0\\\\ \\text{Complementary slackness} &\\mu_kh_k(\\mathbf{x}) = 0 \\end{cases} \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-2.html"},{"title":"カーネル法","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt 講義の構成 パターン認識 カーネル法の紹介 最適化理論の復習 サポートベクターマシーン パターン認識 対象を識別するルールを訓練データより、自動的に取得する。 各対象を全データ共通次元のベクトルで表現すれば、識別関数 $f(\\mathbf{x})$ は、特徴空間上に定義される。 元の空間 （入力空間） を非線形に写像すれば、写像先 （特徴空間） で線形識別することで非線形識別が達成される。 $$\\phi:\\mathbf{X}\\rightarrow\\mathbb{R}&#94;m$$ どのように写像を定めるかは難しい問題。 カーネル法の紹介 上で紹介した写像を、 類似度関数（カーネル関数） に基づいて決める手法。（例：ガウシアンカーネル $K(\\mathbf{x},\\mathbf{x}&#94;{\\prime}) = \\exp\\left(-\\frac{\\|\\mathbf{x}-\\mathbf{x}&#94;{\\prime}\\|}{\\sigma}\\right)$） 類似度さえ定義できればどのような対象（例：生物学的ネットワーク上のタンパク質の分類）にでも適用できる。 複雑な問題になると非常に高い次元に写像する必要があるが、カーネル関数さえ求められれば写像 $\\phi$ を陽に求める必要はない （カーネルトリック） 。 $k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ が有効なカーネル関数であるための必要十分条件は、任意の $\\{\\mathbf{x}_n\\}$ に対して、要素が $k(\\mathbf{x}_n,\\mathbf{x}_m)$ で与えられるグラム行列 $\\mathbf{K}$ が半正定値であること。 新しいカーネル関数を定義してそれが有効な関数かを確認するのは大変なので、次の性質を用いて新たな関数を定義することが多い。 新たなカーネル関数を構築するための方法 有効なカーネルとして $k_1(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ と $k_2(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ が与えられた時、次の関数もやはりカーネル関数として有効である。 $$\\begin{aligned} k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=c k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) & (6.13)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=f(\\mathbf{x}) k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) f\\left(\\mathbf{x}&#94;{\\prime}\\right) & (6.14)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=q\\left(k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.15)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=\\exp \\left(k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.16)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)+k_{2}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)& (6.17)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) k_{2}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) & (6.18)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{3}\\left(\\phi(\\mathbf{x}), \\phi\\left(\\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.19)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=\\mathbf{x}&#94;{\\mathrm{T}} \\mathbf{A} \\mathbf{x}&#94;{\\prime}& (6.20) \\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{a}\\left(\\mathbf{x}_{a}, \\mathbf{x}_{a}&#94;{\\prime}\\right)+k_{b}\\left(\\mathbf{x}_{b}, \\mathbf{x}_{b}&#94;{\\prime}\\right) & (6.21)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{a}\\left(\\mathbf{x}_{a}, \\mathbf{x}_{a}&#94;{\\prime}\\right) k_{b}\\left(\\mathbf{x}_{b}, \\mathbf{x}_{b}&#94;{\\prime}\\right) & (6.22) \\end{aligned}$$ ※ ここで、それぞれの変数は以下の意味を持つ。 変数 説明 $c>0$ 定数 $f(\\cdot)$ 任意の関数 $q(\\cdot)$ 非負の係数を持つ多項式 $\\phi(\\mathbf{x})$ $\\mathbf{x}$ から $\\mathbb{R}&#94;{M}$ への関数 $k_3(\\cdot,\\cdot)$ $\\mathbb{R}&#94;{M}$ で定義された有効なカーネル $\\mathbf{A}$ 対象な半正定値行列 $\\mathbf{x}_a,\\mathbf{x}_b$ $\\mathbf{x}=(\\mathbf{x}_a,\\mathbf{x}_b)$ であるような変数（必ずしも互いに素である必要はない） $k_a,k_b$ それぞれの特徴空間において有効なカーネル関数 カーネル関数の例 $$k(x,x&#94;{\\prime}) = \\boldsymbol{\\phi}(x)&#94;T\\boldsymbol{\\phi}(x&#94;{\\prime}) = \\sum_{i=1}&#94;M\\phi_i(x)\\phi_i(x&#94;{\\prime})\\qquad (6.10)$$ # 多項式 ガウス シグモイド 基底関数 $$\\phi_j(x) = cx&#94;j$$ $$\\phi_j(x) = \\exp\\left\\{-\\frac{(x-\\mu_j)&#94;2}{2s&#94;2}\\right\\}\\qquad(3.4)$$ $$\\begin{aligned}\\phi_j(x) &= \\sigma\\left(\\frac{x-\\mu_j}{s}\\right) & (3.5)\\\\\\sigma(a) &=\\frac{1}{1+\\exp(-a)} & (3.6)\\end{aligned}$$ In [2]: # mapping function def polynomial ( x , d , c = 1 ): return c * x ** d def gaussian ( x , mu , s = 0.1 ): return np . exp ( - (( x - mu ) ** 2 ) / ( 2 * s ** 2 ) ) def logistic ( x , mu , s = 0.1 ): return 1 / ( 1 + np . exp ( - ( x - mu ) / s )) In [3]: # mapping function kernel = lambda phi , x_prime , X , key = None , ** params : np . array ([ sum ([ phi ( x_prime , ** { key : val }) * phi ( x , ** { key : val }) for val in params [ key ]]) for x in X ]) In [4]: params = [ ( polynomial , - 0.5 , \"d\" , np . linspace ( 1 , 11 , 11 )), ( gaussian , 0 , \"mu\" , np . linspace ( - 1 , 1 , 11 )), ( logistic , 0 , \"mu\" , np . linspace ( - 1 , 1 , 11 )), ] In [5]: X = np . linspace ( - 1 , 1 , 1000 ) In [6]: ncol = len ( params ) fig = plt . figure ( figsize = ( 12 , 6 )) for i , param in enumerate ( params ): phi , x_prime , key , vals = param ax_base = plt . subplot2grid (( 5 , ncol ),( 0 , i ), rowspan = 3 ) for val in vals : Y = phi ( X , ** { key : val }) ax_base . plot ( X , Y ) ax_base . set_title ( phi . __name__ ) ax_kernel = plt . subplot2grid (( 5 , ncol ),( 3 , i ), rowspan = 2 ) ax_kernel . plot ( X , kernel ( phi , x_prime , X , key , ** { key : vals })) ax_kernel . scatter ( x_prime , min ( ax_kernel . get_ylim ()), marker = \"x\" , color = \"black\" , label = \"$x&#94;{\\prime}$\" ) ax_kernel . set_xlabel ( \"$x$\" ), ax_kernel . set_title ( \"$k(x,x&#94;{\\prime})$\" ), ax_kernel . legend () plt . tight_layout () plt . show () 様々なカーネル 生物学的配列のカーネル Spectrum kernel (Leslie et al., 2002) Marginalized kernel (Tsuda et al., 2002) Profile kernel (Kuang et al., 2004) Local alignment kernel (Saigo et al., 2004) 木構造に関するカーネル Kernel for phylogenetic profiles (Vert, 2002) Kernel for natural language (Suzuki et al., 2003) Kernel for RNA sequences (Kin et al., 2002) ※ 詳しくは、 Kernel Methods in Computational Biology, MIT Press, 2004 を参照 最適化理論の復習 ラグランジュ未定乗数法 に記載。 サポートベクターマシーン マージン最大化 に基づく線形識別器 カーネル関数と組み合わせることによって非線形な識別も可能 サンプル間の類似度にしか依存しない （→非ベクトルデータの分類にも適用可能） 詳しくは サポートベクターマシン(SVM) に記載。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-1.html"},{"title":"生物統計論 第3回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section3.1 Multiple Test Correction \"The more inferences are made, the more likely erroneous inferences are to occur.\" (ex. Even if the type1 error rate is 1% for each data, 10 out of 1000 sample will be rejected on average.) Terminology FWER(Family-wise error rate) : the probability of making at least one type I error (FP) in the family. FDR(False discovery rate) : the expected type I error (FP) rate in rejected data. FDR(False discovery rate) Null hypotheses: $H_1,\\ldots,H_{g_j}$ Alternative hypotheses: $H_{g_j+1},\\ldots,H_g$ Procedure to reject hypotheses : $d_{\\alpha}: \\left(P_1,P_2,\\ldots,P_g\\right)\\rightarrow\\left\\{H_{i_1},\\ldots,H_{i_K}\\right\\}$ Expected ratio of FP in rejected hypotheses: $\\mathrm{FP}=\\sum_{k=1}&#94;K\\mathbb{I}(1\\leq i_k\\leq g_j),\\quad \\mathrm{TP}=K-\\mathrm{FP}$ $\\mathcal{Q} = \\begin{cases}0 & \\text{if }K=(\\mathrm{FP+TP})=0\\\\\\frac{\\mathrm{FP}}{\\mathrm{FP}+\\mathrm{TP}} & \\text{if }K>0\\end{cases}$ $$\\mathrm{FDR}(d_{\\alpha})=\\mathbb{E}\\left(\\mathcal{Q}|H_1,\\ldots,H_g\\right)$$ Methods to counteract this problem Bonferroni Correction Set $\\alpha\\left(=s_{\\alpha}\\leq S_h|H_0\\right)\\leftarrow 1/g\\cdot\\alpha_{\\mathrm{FWER}}$ ($g$: sample size) Therefore, we have: $$\\mathbb{P}\\left(\\{s_{\\alpha}\\leq S_1\\}\\cup\\cdots\\cup\\{s_{\\alpha}\\leq S_g\\}|H_0\\right)\\leq\\sum_{h=1}&#94;g\\mathbb{P}\\left(s_{\\alpha}\\leq S_h|H_0\\right) = g\\cdot\\left(\\frac{1}{g}\\alpha_{\\mathrm{FWER}}\\right) = \\alpha_{\\mathrm{FWER}}$$ Benjamini-Hochberg Procedure (B-H Procedure) If we assume data are distributed independently, we have: $$\\left(P_1,\\ldots,P_g\\right)\\sim\\mathrm{Unif}\\left(0,1\\right)&#94;{\\times g_j}\\times\\mathbb{P}\\left(P|H_{\\text{alternative}}\\right)&#94;{\\times\\left(g-g_j\\right)}$$ We sort the p-value as $p_1\\leq\\cdots\\leq p_g$ Then, $$ \\begin{aligned} d_{\\alpha_{\\mathrm{FDR}}}&#94;{\\mathrm{B-H}}(p_1,\\cdots,p_g) &:=\\mathrm{Reject}\\left\\{H_i|1\\leq i\\max\\left\\{n|p_n\\leq\\left(\\frac{n}{g}\\alpha_{\\mathrm{FDR}}\\right)\\right\\}\\right\\}\\\\ &\\Rightarrow \\mathrm{FDR}\\left(d_{\\alpha_{\\mathrm{FDR}}&#94;{\\mathrm{B-H}}}\\right)\\leq\\alpha_{\\mathrm{FDR}} \\end{aligned} $$ Example. $H_i$ $G_1$ $G_2$ $G_3$ $G_4$ $G_5$ $G_6$ $G_7$ $G_8$ $G_9$ $G_{10}$ $p_i$ $0.1$ $0.4$ $0.8$ $0.035$ $0.9$ $0.04$ $0.001$ $0.002$ $0.6$ $0.7$ In [2]: alpha_FDR = 0.1 g = 10 In [3]: idx = np . array ([ i + 1 for i in range ( g )]) p_value = data = np . array ([ 0.1 , 0.4 , 0.8 , 0.035 , 0.9 , 0.04 , 0.001 , 0.002 , 0.6 , 0.7 ]) q = np . array ([( i + 1 ) / g * alpha_FDR for i in range ( g )]) In [4]: p_value_rank = np . argsort ( p_value ) In [5]: for i in reversed ( range ( g )): if q [ i ] >= p_value [ p_value_rank [ i ]]: break In [6]: print ( f \"Reject: { [ f 'G { idx } ' for idx in idx [ p_value_rank [: i + 1 ]]] } \" ) Reject: ['G7', 'G8', 'G4', 'G6'] Quantile-Quantile plot In [7]: x = - np . log10 ( np . array ([( i + 1 ) / g for i in range ( g )])) y = - np . log10 ( p_value [ p_value_rank ]) In [8]: plt . plot ( x , y , color = \"red\" , label = \"observed\" ) plt . plot (( 0 , min ( x [ 0 ], y [ 0 ])),( 0 , min ( x [ 0 ], y [ 0 ])), color = \"black\" , label = \"$y=x$\" ) plt . title ( \"Quantile-Quantile plot\" ) plt . xlabel ( \"$-\\log_ {10} $ expected P-value\" ) plt . ylabel ( \"$-\\log_ {10} $ observed P-value\" ) plt . legend () plt . grid () plt . show () Section3.2 Probabilistic Models Hypothesis Testing Probabilistic Modeling Models data generation processes in uninteresting scenarios $H_0$ Models data generation processes under interesting biological scenario $H_1$ (possibly as well as $H_0$) Show inconsistency with $H_0$ Check fit of the model to the data Problems of Hypothesis Testing Approaches Difficult to model satisfactory, uninteresting scenarios Does not model interesting biological scenarios A rejected hypothesis does not necessarily tell anything interesting Still useful for many small parts of a full analysis probabilistic Modeling Strong regularity from the probability condition Can include various biological knowledge Adjustable to the quality, amount, randomness of the data Conditional probability makes it easy to integrate multiple models Once a satisfactory model is obtained, we can extract various information from expectation values Powerful general tools are available Maximal Likelihood EM algorithms Bayesian inference MCMC sampling etc... Section3.3 Likelihood Q. How to adjust parameters?? A. Maximize the Likelihood likelihood observed data: $\\mathbf{D} = \\left\\{x&#94;{(h)}|h=1,\\cdots,n\\right\\}$ parametrized model distribution: $\\mathbb{P}(x|\\theta)$ Likelihood: $L(\\theta|D) = \\mathbb{P}(D|\\theta) = \\prod_{h=1}&#94;n\\mathbb{P}\\left(x&#94;{(h)}|\\theta\\right)$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html"},{"title":"レポート課題2(10/10出題)","text":"tJshAzfT6UB2Kikj+muwbQ==;ljYevLgch/xy7VL1UVWWrJpUQCzlJe+k+Z6fSIHfZ5YJhf3MLJXjLPr8+Zg31FiM9A7H+go9zr1B09UUmO9Xbb791jsCE995J3aDjpg47HOTBdSZS5d5iOEVqozPTXYoGXkl1d+ohoO1gBlZwYny7jW1ggXNAfVaFKrub8QL6s5SFUCG1yU6kgTVV9wkXXoMNzDy38kRGvoKyyHR0WGB6P72pft+HNyy+gLg2AEO0P0QGez2SHt+JHmiD7rrseNHFLcHD8v7fRwZjUt0t4UhVV9dRH+35AXDlEIVlNX4KZTib/VMt6ARCQsKZZlb6lZuDFzwverl7pKntwwF728xSIb9+0ipNwVchfhiwH9+NzzklHYb3MvucXvoQP7GLYxf3dd5WpBcBiXhIKapAx6QS2cmVVYDu8OYJTbqxWKKzRTHCj9u6iIGKJjIcRc9rIERlnSuwvulHxyI6tCJJhjcG86PsmTs2qykp04DVtcdFAMj+oC43av3ZR0BR5wDJTFM+7MXK37FrOUHNkMlWfjVNimbxth9iB4cyeB5cDUGNQYQUs5vG3qhUzLdxNvibTECF7XdUbxkpXw/QjPKbPEdSNJros3muDPaij/kctKt0RExdhefnCdUiPt4x2BpqdY1fgqhs/ttCngRPgZajzhGrlXBnIFu6IpsNseamwddZWqITqamLSkmFjsIM8+WUXW9DSYAAuP1TDewZyL4kEFjQ3ZY4Hob1jPCmkpbg89zDUrVCt2fndFTFwUqejVePROLWT6jsCA9Ynn2GZZt+3Wsyv8fdsT9wNzR+TXzeVE/NID3dp78tpn00/ZfDWHM82CEMrqT82B1Q8g7Z1qd6sC5V0G+kE7g1FFr1/dZ+Bzb0jLOWHFJUiJ1a+uHUyLbS0eeHUI/0f5pz8hOvUfstmkIDk4Pcse8SG4gAFqRvbyAOKgqnNEPkDvF6px5+L6MsG9kd46va1+gXBkjblZA1crU/kIe1UWcMlwaEfD7EyyfNCQP8HeCF+Gl2XPPC/ZdfAmr+Zhu+BwfulZwnRoI/jolG3GEm3F14vXlYsT1jOYda/zChrVfuD71DGJ1TcetpyIxzgfEUPbdP14tB8cEo10HU/Od5AILrOwvHbYUmZ39fLFvnBtQG2OY+1jwAEEiadrd/WGIF2ND0Vj0mmuFZJG8UDWVmwJ4zM4N4WYAGT37uZYTKvpWnFziHbKEKdx+1iXpeQ1OBxinbfAPxVtqdaIvM+fJlpcuzwT+k7TXWy1QT4l9kb62ywXcc5w/4uzrrK8rZg4fw/u2eUUKobUhparIHajT9qryuBHR5NVDt0fqr0pht/aZ971yuhi7ufuoT9hUEGekUsaxusZ/d4VwpY1NZzmygdWImZdNYFh+oVQDJWGrod6gUHJyBnHuZ+qyjdAEPyzK9z50fhxwOYiG+Y3bNJoUMiKZbR8PT/NYS7KOZECGdniVWHVMZO3i5Du2kfiZyxhx6TnPf5ionhLEE9Vu4wmf8X15wnGZvCdFBn354ZJ7ALrhyuYJnlXjqiP3Et1C7iOskg5yZhQ1so/fINefOXRfklk/hLtDcVkGx58G/zM3MY9Y1lXa8CHlmS2EX+TypR3ZvAFanL9pHUUpG9G6s8FuLbUzbXRoJnMb9LkqIqBVUAS6XWcrG0ndqIiNkysWp175OL27ayZtcFP2ByzAz7FLUellsDKPaPYDcjk8dSIENER7T3T7rFQZkbHL1szngVg2E7+TPP3MgHfyezVKItNcdftHo7t1XOzIVYm6cGNCMCdpDsYexmvD7VpReEzZuPVGTAQG5oH/bWLxAVsCE+434HRdb3C8VwVou8H2K5qm+dIOUT3qgd6A/qh9j6NBpGevWtnvQIXiV/jG8tS5mHmpaodlKAYCJEOFASIm4ljToJNA+QYu6p6HO5Tqwf4H7syOY8mLJ43nC69sEgrl95N8Qcvmb+LxY3UV9+4SHbLP87f6wvXmy0L4kLW+u5p4yu7lfdi6uVI8ydomNfitgn9oXmW5H9nDXwDxN0cG7HW9S9JGdEPpWmEKjoe/Hire73C25F1z4PrFbGWRqhlIeUw8TAitWgIovbHS6C58Jx5GvQnqtYdFYCgMLFT2PTSpU/pYMYm7j+Vgb/l3TriV5iqpOQmtNm33+Dp/byXZEDJbnsKBqY30h8g4PDNsyTSQNlV73I8pxCsacJCSgp1rZQcWiYcxh5hm9k7NxnKnFYRa7m96jBP/WF4PUU9JPb88RvwkaZmVUdAKXqKWMy/v+icLFCfeWB6T0iUAxm9ALGws4748nv673z66cnkk0W9MgrCAo3jbIedwgrAGc0UIiUlr5Sk1XYmtljj03tVD2wgXUNGb4rKWtqW4mx+qzWS6di6JAjdEet+q3cp4a51pymlchd+a+Ww08Nv3EwY2ve6WV3TZPrWHp7igjJjdg6yKrSgsWInNvUMbUJVFfRcJ4ForwXLrG85z45xXau0jRTbTV5Pwtm1A2PfIw7aGB5MovPsoSZ4ZjU/LMELvYLxhrGW5ApsXYnfsqUfEaXKhDWWduAAbxCVzRqxznONo7woE8LE/5vMEKpcn+Zq9fxLlo9IhPtrX9mmNUqdHB6wvHXdOJ92dqkGAXSL/C/JoS9H+Y2MXyiuzzClpKOpOahsTaUYeVgRd9JOyUu2FOq/jCs3JFY8ewshysD4jrg+lT2Gea0dMiPgj/nZMrUwEdv8PutPn03kEuSmvA09N60anKnObHwSGzBQ7Wfxad5F/fdDBIr2cjWrflNrqpHo4TWBI1Vv4WdLD+eAimjUdDJamMw/olYdu/s6K6+ltjAb5cOwPd+0yt4/pxshacfwzyHzOnS9RbzLdBiaw+4FcAZd7xxGlVllXZ7Z+dz3bBE9s5jmN8gHyINHSW4NUaZMzlsr0Vw7YNY5p5wy8U//WoEoDXDTQG0sx0hif7jjjKX2fHhYbJyhMy+Osz4H83Htdcgf3Ivo8moy8Puu+co7taMeYOzwFb4pYiW3oqxbxMZTzNkxmp3PGScJNOsVWmWH6loxCPB2y8fk2OIFXEPwZrcWTpkkhJRErccDXGNf57fK6KZrl4QHZv1r86wJlczYrHYpv4Wc+adJohyEjgiLgwbDS7fOCsBlKQQVwLFWbg6kRS7sAE+kObL1u3SAhxXg8jWPlsPGhb1HkZymwLK8C7u7oDHkS8br3tzm6M+Me0AJuFqM2ryaMjZaQUTWICvH3Slm6CwXqcACtHijD38GfjYG8XtY7D1rz/5+6e6kHPecbUe9MhOMnLSLDVWGgKbrig+TjARCXz0uwU22Cl6u7OK0WvUh/jDbRzQD0K9rjaAd5sVargTugIRXx+esto/JXbYyBDl/z0MxT9oc7SvooyY+3qrEgYIlhAIeiUuyZRsy8jMwX292NI7uxDfsfzj29SGNfqpHGarKkUkbDc0HWYfGNOKX/eCugyiUXSb9cdk5IlIMTnW3E9lIX2l3MenvQ+el2knwm+BgddmTFhSrGrcFYiyiE+qWa+sSSR9jBL+C074QF0Yo3FyE1r1/GCKv6QA8W8Z51OWryKi6ukFKf3/mHQ+pNeXseFNziRyer0XHtdVbnKd18i+N3lzrQ0iq205KgmeK0LpzwEXglHNFWm9OWsUGWheiFVh1IrFjNHO4eageXkJ0Wyb6nCYluF928Aik/zCs3kMm6wp12I5g+UbBmfQDopbWWamI359HDzaWPb+2s8hBhlEiOXPay1IVhXi06HPmntqXKCx6zwtH43yjTCAcyX7HisLkKJ4NTljRb563WYxMBNUg6MCd+fqKEhxrzmVgAdhnIgSJR4fZbw5T8lyAvthE3xytg4rDA6BtsKtOxAIj2iua5Qp/66ONT3sSgp1xG8aPPCnPvu+SxYQSQf5azSOYKUXVv7xIXlyo2tCqMYcal6wIYE3Z9jZ31Qxxpw54qY6brNLYdWN8vBu326CYY01++jTtDAyxaH6UKY320n8GJgnW2nIIcxIJm6waBaf1A8bcRwJEkDz2FvtiijY6XZezJbxRwW5xGSARPMExwPA6DTtE1Qj3so61Lmi4elZcPFEnAP0AooWQVYpPsZ7sd+PqtxBRNrNausuZdq3mBB7JINIWbqMMMDU2F+Ppy26vusexRV8nnS1YYWvld23jdnepWOQZpjUX7M7UXUEnBOBrPjM6+dKgToD1iVhDJHgJJjAfmfxHTos2eXfp1VfLI216yMlKdegYuDzQ99f8m2WQbEfvou266CJGes52QsYt7K/JWDyX0EPVz2OZH1AMt6myYBO5vPRy51hGIAzM+aG21NVdZAHjqxR7gR1wVjVnBTMRUxU/vWn7Sgu/mSSSQPr94LqCNUiJSuFLfraCT92yv7rdCbxE04UfvPiwunvfoMJv3vPB8gKbpnf3PDZUp31hQHMnduWWAZ3aoSHJlfxWlVaisp+U2gajtwQyEPE8ZmtjGD0z2bV50MjvSoZ2b4RMDNT3qKvpHvgJIPn2oMxwaUH6zllrTp8qJ5MreMEN1BSNrCs+j6cQhqzpxfDBvYE6xKpJ/3NJJGpGaU8/FZmfyOvzmcxWW10F4I5V7M6JLbhpB3ChwoA9D0JUlmJpv0ugb4SEDmmu7zRpTLBlda4Ly3IZmmz0r6YfZgmwUdXONaIs48zi9TAchQI8aI7Xmsw97s5ibn0zzbvs5EnJXethA9hoRqNoCmkJHcb7P4CKYT+zrqz4jacl4Ll/Jwc9BJVDBInxvcV0viU/dzoyA10GiO/gYLRowe54xve/VoAlY4Is8TFQ7N0TlQnuECPh95ggddkz8NDn7VXBZwHmmt1G1U5Yz2Jl6HFUg43+evV0xQooeBZ7jb8HABjodd3WhlTFHroSZ/cfwSg8gaMMJeWV6B69TieEa1f2ncPb2TH63kjxNWcPSSm0tiK0x8y3Q0BjEK2kMROpA3vVEYn4YNpJhBoR0xpQw9EcnUEAJifMf0jHZIIFGFxboP+grH/J8rWYChy3PuDCYZnTIw4Ch+sTQul3Z410IAfthwRMT9kErCdVuOaxeHWcExUVQX/EXJDi0D5qRuOJuLyWaFyBF3kh2Tq8sYXqwFQ4+/BKBVSO7R2PeqV+ld+jaLGxnkKn0M2P8nECa+2DaUeQfvbuI7i8oueFnbLiwu3ZygERG2Yon0CCGRzlyTzD/9lndmnj+wFBtKsIsAnifTZnb3r2dt4+pJqHl8kJ51alxHXklqxTePF8nVweexkjzzW7+Rpoi2xfeABSX2hCnmpa2AjymKWUtQsU0bPwgK4d9r4g1SILu+/PBeF0+MOYBUqrpSg7Kur30yuGHKB6QjX9yvyDyw3rqQJ5LoPwg2nHnY5kmCXgqzz56Bh8LGryyXm6TqN7Is/cT12bZ1tXCxVOtAbii0EXwTBhQo3Xlasohwuvi6m9Rve3pWBmRLe80GCcFZCF2dne7LQe8kTzklQQOaUCP6f4x/aNpVKaG1QcTjq+4p6w8a/FC55M+IeDmyIYLDR56OB/mGdmb9qrEWMq9lZxZgU9s5YdTDB8T7/LLQ15Rs95XoiYo4m8Pmcw3kNo3okc9iS3DYobVRyzpXcsAyfY2Jl9nmOyeDRsR8cOZQC+fzQlc9XPvUh9keiGOyEHlxOjYtDN9LpHLrlBLsgclxhNtYwbXyyG4nwiQt24u+bb8JsDuqpLikUQrJW3weL2cSykrVITncc/CgVDGMkp517xi5iy3cX2RGanWJbrnZHgtFl0ADC9elCddBJEi4ZM0HnEXJVLxwQ0MiMBY0dKDBTugoCpoNlUbSDfxyrbLcv4yOQaYswr6UYKslfvVvUztyURpFrVEBTuqQlZwwnNrDZBFP/+DogEqdhfwALj/y9+7YyXVhpJLcsZyuoNen0BLjqo19T7SH66U9JVGe0p07bY6iNU7aS7MMGi7YlpgZTWGpU5EY9rYXP4IIxIiAl8J1d2odxyoOY8MdqbxlfzWXFHhgRJqPcTj33t8s0Ak4D/bnVynQ3J4s4+TeeywkfPnNkl8PxPNFK/waPG12TGGlGcAs/GbrUvq3zBDWO9yW7qAKW/Y0ZdVNITr/3l2jMGtJQdgfiLNNfQcgURkhxvZIQ/uNo9daSO7iGEpC8nRblbm94XHtwUTAsKTNMHhINEtPqGnFZpC7BG3ZaeXjEzknqxVgbihnkmO6s8cVmLS8Sh0CO35aqJ+Xf2Bc/6bYUZSpXNkaHGZm3Jg1a1l7INtcsnsnqUcC6Ujtb60DI3S05bffZ1D6UBPnvkkoFWk2EYt23z8m3yVCjir1N95zPj3kpkUIW8kEKsjWtFItKZ+S8JOzUxVq+3w2ry9DBJZDVQw/cnhBh6I8e10cWfS+kAR+0Tb7CRTEPR/zzHvp0X1fQ/dWSpooxIRWTBLhYwVrlvBlM40tQTnpVQWbW3f0ex2Pnbt0n2taQ7yzHZyPaV1EBTchzBt6wNNJm+aGgBRK5vDu8kxiBKenJHBvNB2cQq92CPp8dCUcjY1ZbSxPFJvOEuTkToiurjjIh06jPGV0K4DX5Ns5uURZRtGUmilljjwUlCqYL7VcVuf+dgXFcuJiIReU5J/i+xiG7R9gM6muS1tYUXD1+2C43AG7TOn/OZTFiwnjM6VgRP8SlmidHkK8kFwhh0ig/JDoWgDVT8NIIDomwl82JbCkAnznoyKwYHY8tE1hDgjpAVpsQBEPnELpbvIvvN9IHCdV57ha9jw9TcfKIJwzc5ziQ3MT8dRp4/EpBpcfl0ifBVMqBaiD0kUjIHSaGoJG/4M0TnC9zxwVow6lLubH8nbIRilbxxMcJlStKKIOQWF/uj3607fzTzopoNyJ0FpWwq/wYUExceP6FzL1h6qrkXc3J7agMLywGEbYp25OSdtXAS537sVhDd8/i+/aorGyghyHQ7IXEOmEm40DmDnt+MQWNAefmmbJ/4axWzgykEJrHzR9VrCg8oAYlS1rmHExSK+Ovqj54flu0p+Oi/nGozPmQvQVTkJvg1ma8BXHImHYgBef9tHmdvo2Wa1kftD45wLvR7PaEYa4XNVDbxMQxNy9JDatMdHUH63BFbMjHFwIcQnTXZ/Mimadp32wd4ah7kX1EOIAGqVzATxa5aPCP7geKAJtCxb9ZVmCWd4D/XTYTU4IGsmHYLE0GlVnkVHTliQMMriaCNcJuLj3c89KJWfd/IGOjmN/1dGJFejMpXLsxYULJFyugEU3RQkjj4dIFmPk5MX7FvCUkQTd0KQ/9rHuOw7M8h3GXD/ESK3dVPd18QV9kyTRhbsNVHhFPR7UgOhwx3tPjaujFyUFB/Y43AVpQTqSO6xxUGxUngxVnA5ICoxbSoJQzRetG2aa+JPLJwHOyU3i0QzZfo9ZMgbaIvWEn/h2mcytjB9Ft8pIY+QO8YeFR0PVey6oW/tQVhCk33Z3AKezORmNZVghr9tajMcK0V8jjuglGaEvby04tBGIzGeAkmBUrWq/6gd1ALi6fB888bjqzatLhPJIGROZMfTMhZ0H31WXjOf6jsZ79AZlnHUuP+eP09WHmOarv2JXnh99IxbAgEUQtTs6CpyTRhiRqknNF2mHVbQM1IOhDWgMxRl/JP/uMZ7sVLWVt4mUSkScmluqfQMsGTfldkx53TKf3hl1rouBIH8wWlabSIjaBQQmsMPoKZil6lfR3S1aHyEnPDSP/7PGQZ/TcxpB5U/fyztE2NSnp4QHwtNBktfdlLqb/GBgC4iBCIYukBbz3ZsA8BZre79sxNwtGgGvbu55mITlqKAKHBQn9ige3uUaqQSfSOjeEYE+OSIt7/ab9X7cpWYkQrD9GBJx5vcRSiNk61mdI+9BUrirBuNdysovZP/NQ0bfcrAeaSKZSOK5fPN17XwOHqP987KCmNrju6F2zcNcZBmHtz4hF6jjY2NhM74zk7eKPxM7c7apB8Av8jYZ8tQowcK1+UV+z4yX0hh4gLUl2CC1s1T4hVbUDfA6rz3IYHXyDZSb2L9Fa4DZQ+PHSKsWkp1Mhsejj4Q5WxcleMItiawXM3q6cma54zoU4ctCKhK4JioztX2+OERO3d6qfrf1IfRTM//KlBdtMvwQ9jQE34Ch+zVMai4J+n2CcaOhZcPCCtcP1d5suNYezsiZQkY/6JG/Lj0W38dYPBGfFoQT2kxtQlNARx12ESRIlGECJ5DA5bFWKhTlPCEN+q7VuQrWP1aREHXKZw+I5bDDC4wGmmiclWue4cRLkr6zSFhCokrv1j5aei95mmNf+RR5gRkAq3VcB0gRd09cCNnBpMbVRZdrWf7NoYXqr9wo1mV1EJroF9XDbVmR6iYJzE/qPkoftI5UBNglAo27Utywrn91T8IoiHisoGjFFVp5ogAZ8BA9vNOe/NQ4YQUTqIx+XYr6Caa74NBSXWwEQzDnv56PjfZmFxWC5Iexg6ypTvwpKcue8gV6eSPevX/gNZnxW7UrluJ5r4Gr2b5rJRMhLTKx/EjQoUZWaSjwm5DYS+mBnj8i4PWfhffclhtT3JT6r8GLBuFspAdz85KpInLE5AXQEU3D+a4BbtYEuSMiwVIxAtWU0wr5FY2nTK8kwRcKhIM7pKGS9+u5sbXaN35/n4Ep4SOMZ7QQm4eIW9SiwmFTb880NijIbtVS9SUYEEvkRVKaeNy6gv/P/X84U3igDQCdi012Oz7QW9OeVhrkYb/HgGCz88fXPxh7mwSYaRMsK9/P+/5+VsTDZusN4g3V+r4tLhdix1klFWK28sFnhxvjKFD9zV1Qz6UXP/oz55f4+uMK2EnYIM8wrGJ/t4XIqbpXE4+e0KlwdMvt5oy+hWyOTUXWgby9alPq62msm+aQuJi4jq5lgLC4pDv707qBVd9/VSQ15JytMpIIzuf/DfubB1j23Wg+r63yjbtdMBmYNBLyCNhJGlVTTUH9URSQnHAtgXrE/fzmQrIgntGG9Q7iDiBR9x8JoD1Dt+TwKpkbWwbZDfF8V60gZb2xWlkY5F89RZD/7M2Ed6JHxv4JZn/Rs7MmLuKZ0IKP3VgCE3nYH+SMTAagSPDBCty/BleyqoGaDk/G1MljwCxftEs/KJgUtDeAlQbfsVhsyrTRyLM6lc2TYXjQ4nyoa/xGNhoRj9R2EXfUmsZ+OjrIxXBK52I7vjtYxaek5tQ2IYw2DpiqGQm6ttjbvD3GP0nYRGnZXWa6P5FkdfaMUZkGOf5lCz2xL+h6TOVuYgfX03El1p0mDjjzTCs24dl/LHPzZoFMt+K6GO+7qc8Yv8Ro3akP+PXDXvK1fK3LCoSM3oQORQJkZ+GIAr5t6GRhtncpx7xtZr5Tsbcpz+yWHGkT4NxA5j7Yg+XRnaT4EGfdk2PqlXnhm0p+fUX1Nc3XI+Vep+6nfQ6avDZAmYSJQKzCnSI/3xF5EgfImSducLyjvR090Wxfpn6fAPuuwQtMd14kJciXL1NIMFCDJoCRl6Zy7I1bwcnupxrzRPOoGhSBANaafsSANXmy/uLoHEcbaSuGlKt90ousuJec23uvoFuEfOIB4I0y3UCLV+up1cBiaJdF+2rSJGOmxuxPzp1Y17FPEIDwAwq2Y3wsjSYe0B3H4emOmACBK1XeEFvjdYVk6GW86MvMNp/Df6kzk35VLN9BSitncmMgoVl5TZKMMvNTf3bg0RYu0TSMCE75yL2bM/6+wziBXVimogWCP7PodF+wGtYIV052Gx/T1teWrBllw3tN4apPGSJwKIrzex3RjmIaKeeh3H63nb1iCaId+PLzQ1hcJ7cAQa3MTJoZ+oC+dJYjkSmejQddJB1lQaOyPhk2dW/MP4ztDreGuPKMZNCwM3Csc54Q+xZf9Wqd2M+ENVJdj2ALsTN8Z1RFByaog9REuFkY/amU2diGC0MrKoGevo918T5z31yDmQhl5ctIJl+9NW+B9vYCC5IHAC7MscxllxPfzNri14howPXjDFOPBdK/UZNAoNyvOa2M5v+oYrYxsa5q7vKqvnfga1AFFFm8I0gk8SUuhxIm8sB5YV8XiqgJZO3YsN7Iw+gXG/CZVjT6/3Ax54Ps9XPjcB41NjhQBpuZTRo+dDyOaaHby31njI6AnJe8MJ63FwFh5ug/PFUGYk5PUJ6d2O5rVPmgqEga9K8eChvSiEmUNUHP+vqCROjvlL0cJGmKlY2JXZHIC4VOqPz58tiEt/E1/A4l1uzzFyjBwNfSrlHPcmAvjhK+odI/Kwt7lJlugFQ0bZcealRjo+9wvtjKIFz7gXEQip+mkJgQsQA8d8ptFrRA6+pgWxwEBnRiRlNMTNSs/+949MyrGADCPyY4CcQr6RHzvHw2l4eiPheWCG9rQbEMRnjWxdkbi4avO0sz/COshTPg/4lCkbHvJtneaI7MTaquuvKU6IsvFCi/b+cwslEpTpJFzH+84a8AmJwsTcpJ4Ou4f+VUt5rTmYh4gO9iMmsKOMq2KMOUGBb16q4QvzxPxZ7FbfbmuVdmarzbhv1b2V1Eg/D+qYRrwaKS/PvUNwq2xjbeLDbuQSwCDsanAJ/eB6Oc/GtQWAIjlWZeFyMGke7UTWO6huYgVnBWNKJa3nk1Q1rtPQ/+sclUbCnfTCPnvw7GaWCF8Xhsb7jBV5+wJIYTrlIfoW9+ZWmj1lezCxqGqhU6CUnbqefXLhDfT5YCCnD+ZwrB0vd6OR/383w4QUsZv1Cu+t+D4sCBK+D7Z/ZNgMjppwvrpgoRm42y/3puys7pxdzLRjr4cFZpR1I2+Y9COEdimHhFPq6yWs+ewACT1JKioXCGbZct/pVy/nOJ0RkbnL+QJ6Mf0JeE/qIBPqgghlDS1EDijW/8eYLs1XHtKBb6fDRezzAFFXV6EhnqpeKEOnyZV3vi343R3DTydmPncIQa2+2oXNcfw0TJeqOhZ0/HQ+GsTTk1m3t0Iiy/EGHomSnJpM+D4etzqGLo5IOJfbOHNGke8Fnn5AD9GWGqgpGNbcgHzUeV/7YYPtpVKY0aju9wUt7z5WQn3lO4UHFEzK+h2pQmnv0qqe8nmGXUu1hfrASbHtnln64xSKC61Uq/l1Z00mAX7Ik/9VQa1Qmj7NVZR63CAmDIk3TiEmGFu0mDmbyBSDgcU9+qc922U0yf4kgfMyvtBEZRUsLMKzmJEL6y4AmXBDNog6/onUF2RnxUlxyVNTiRQCxBaSmtCFzC57B8ukr/b+KeTe9Pb/irppv9isXxLy3rt/S6l6L8/d2XP5gNrazu5VofyeCnlSSBGKxidkv1v1Es8OIU8XmvROxSmt/R+u/CXpiZeLpdlupXukkXY3bEhmhAglpTI1t6Jx1snu8G5aXf/64KlyyPVb3p+ilmOpup4vTdxXhYQ+EzHPWJZIugKmzT2+U+L29YXq5dGcoD/hT++KVghGq2hGFGNHvSpY3E7maIxdOjPQ4mDfg0IvSaGfEJODsBYDllv5dp8oR36x2/LNIhm3/cCaxn9RLtWbJ4PfX7O9HWEb6es3ShRHhz5R4am1+2dY5REpAhttnfHPZbLA9OJRd8r7ZWSnGtAnZ/uw9lEJeud6ytgp/tL45tr9yZoAXjfLezihxCCGLie8SiMmm7gdK8m5zHg7MtaLznAHRjN1hiyEYxT2cJprCfN7jRgv0s8gfr8ZK68q55x6jCtUS0CSxq6f9FSd+iOMR9fGsooU//N+naOQ1TxORJvL9FuoJSUr4peSSldqanc5v5DY3Z4mwamAC+f0o68tGTCCEgfdgnINRiwLUggsRUWuli5FpMUaYxTdDNvtAd1aTkdVOcyNo8KiMXj2LS5qR9n2Np5KBfhP7FSUuz9qmCEZg4Qvm2w4KnovChtQeWvRrBHW1kvVmxzeMTH1S0XIkpnE7JGxUc2mK8nfJDxZhnueldt4ErKmc6AjiiOKAGJccl83AkgPyuEVpCxtM2mWbzae34JBUdqKnSJhVvHxx/9M6VSwlQsGrUn15ReDwdWg7E0VmyW4NG94SRhesWUXVye6p3g1IC4vk9M4Di5tffC2GBXcMtrOwO2RBQJd/nn+DTq9YydINtUhSj4js+4gHQw/MQIBAqii49WFVVDUfujyAYwL0kJrtFiuSLoMu8LpLN5cPSGicZFCSxPSrCInbdvGwnWLW/bippZL51iaQVWedqrISxyeoo7NkzWiWRIv3Nea2yZdFfogow5621C/L5NbSeGc2vJhWDE7ieZJeUWdBSSf49kyMyQnEpERqcWvcxxoRtpBmv+t8g2mNuWvDJ9BUkVSvd1gSuMe0jybre94ohUigmrUw/P2PbvIDjIFYI8QaZZzHqHa3mgKw46XASFsokJMvkW3ebQ+n5rzcZfpKDEXGIRhMgMHJJsrt5zLUFQ+1tVtVva6dWBjW+sh03Z/E8A4z04LprIkJom2rpQx9mrYACO30xlOTCsPGQLiZwBnmyfcu+T7YZvHWOlqhAxYY4Eq5tzPnJqK/1dg+Ex46MQr2vQ532vuEEt3FwLFTkv5Lg9zK/Qu/HpuuyhtSnmrwvh0bIhcVEusLfllW+bU+b9RAshjHRevZ2dO4CP59ypBJPWEA8zPojVVcS1TZSpbMuZCOhLck8brElWGLNKTy1kvJ23PLjNGuxir7Or/mEdBz7hjNQaNlp5b5z+EvedtaggNhF/5+ufARrtcmrJ3hRNFfpleYD5HNk1QNjSGgWieOXgbRmkZq1qxHr9/5ReNXESVD+LqDzSVAGQmvNm0X4pZkqxVkcXgS/TkLDHG63RZSqICuHjWzr2cB7Lg9uxi4hgp/jZGBzRFDfeWafsrcjKBqgwQMM++58gfJ03uYll1/lLVGqk0rs4fMOawr+1rUz4cm/Xxv4B3DxOU37gm64BK8YnZdzKIW4Qh2tQOyxq64Vx2AbuWJ4/8tE37iGt8BRjhHoDwrAjPke8e1JG4kXYiL+DgB6/vJ6KdjUm8rxkt9lypmVVGD5HTcTnXdVVnAf97tdgnWBUrwGeI2loRDmuF+lgwuqnaFbj21Bo8zmDD/hWPsFKQ9IoO69ppdsn3WfhOIzdF7XCHj6YNlBGzklgMWe4v0Q3jw0bVQSHNWALbQfhj2ev86T4HCERtF1jGxMasMT44pg6FNdylaX3t7v6+B3rHMnuOSVv2qsMuowXsesrhohRGqyzwBmvjKQjtl5rOniqhr2lCNAjSnpb+lIt0SnqPgXKVXlOcz18R1aS8rH52URWs0Gh3QZEE7z1OBYxqWKU9qXBzzhGCS7tbKUF2AuqmqWbTsknGecRiGUgBqmPaSmei8yLAgjDDlKIi8h51QDU2ZxACIAIiPqRhBn5Uxj6f1F3D/wRyhCGXt+KpDoYLM4gmmTBDsscTlL3+OmTLfB9gKROYBBjqWRX/nhgVg3sigqnt/pf8tO3V3sk5FOuMS3NWkFF7qxJxYOwVs8OYChYanRvrgbWCkzHc5S68wccZ3ruU+yDJJAebMolPSPzZ3+EThag1hz/avVJXKKkaw4Mf57oFuXeHyTm99nyyySJL56wZ83v4qPhqxsl9Cmt1URFGpARjD9T6DPr4ZAYSj5awMj6XftbiXjdELtfSQeFZgiaJcJO0jwrWA63i+Cp7yIYfmg6kpojgQPm2B3q35xGlwaMsAbxVo8zcxBKrmhXUtSUYaEG2dwy5gAru5SWdULfx/KFMvcTvGr71qJ/bkC5xFsFNaUHprw3BGDuOrwC3xRxnMscsammXCJHu1Ry0nRupgUVKGwJ7dwivhH+Hl/nPhVEP69VJ1J90dUK0823lJHIMUnsaldwufZwkjeMq53sSsAO3blP4ymMwC2ymDy7yExR1zqkicm2VCSxexBoWR9zTAL1mo+Y6FU95loiors4TAvCZJMfEffqCvQ2boQbbckiz90FWV3zo+FYGgPBwmPqDq3vqUmDnPCABznWfd51uQgYDPEVlBhLRm4dgfCFpiBK28Jm7OwGBOTsFV9z5gHYRObhVI5whvSbCE7CVxWlYQ3SlfzExp5pE0QPIBqIgbS8qzq475b6bJR1UWf8hqtOft1MqTthTcLivNul4+/G9ym58/FIreeTXlVo73w6TSLSqbKRGzQmNrqERg3V1TZgsoBCZ7KCwA0ezDBaxttYar1RmbJysx77+2pAivpIBnvMSrKo43ammlVcm70kRkir8lOiSnd2quJOf8VicC+JHNChLw4sMovOSR93Dx6L3PnsFAMjYwjDhr9zw66v/y7qs2ycOvBGBRhazwmg4XFO3ysK38XRljEo/CQ9GJkOW3T2dDWsB9kns3XNjbPTBVrwH7nyF+UVT4T+zmj58SSXSBSaBxTk5IbFPSyP+ZcN+Gthjx+cvNRPucH/4KCyY6Xr/ylQsFYh4/buTZ2O2fvb/m/GgZPKeLmxAO8tI3RRwVgstulBIj/Ruu8Jy0LXeR6Sp/fEaOxA+VqKzfO7EwAdOCURuIbFNK+UcNTmQgjMafOP7POxCSiYHtnT63GMBGbnbznJ00ZHrha+2FuP1LmW2P8PtoKZ4YgObAbOo8xikSfBhSKyWE/f4PEVwVdt56f+LtkJDYXojUaiZ95wjIsKrBYpXyPVQCavd5PATc02KtS6JBEluhbfjKH1yCL9M6pxdrihUOr6OOaKFzq+0hNPL2I/AMVI/0Q9VvVncV0m9jA38jRgfuXUFp4sBrADkcVEdtps883UCx8uXBuRZ6+OzYsvakV7d2KQzCa0bZWtLM2WG0n4Xac0lq+bQxMtw8HkaeBj7lsD7IFS8s0qapTP/osPFSk1gi8CIERqgI1s9j7+eoBxKN8g2gSy67EXioEfA328CFateAtDJMoOHBkYM/K6wjlSLVsMnKxDfHJbNv2qvSTLt75fTaCdeQ+T/8EjKI//GvIsNJXHZJkuKjMuwHI8o58pe8wbrhRoaPi3UYC07NA4LQ9d8bSXJzi2PUtsGHShcZ9dBtgDZ77Ff3Mih10aiZtxB7wciqoKAJuc9qH1YzolEnQlECa/ihOYBhlQA3xZXHq+JVKwVwLy7w4Z5EjG9FVJ1WFvVaj8hWrJtLEGOKsOqojAuXHJ9oE3LQQsf+mhNlwzaMcnQ0n8XQHVBcgM3jLaPHBv9ObRsMuclhhnwQyo32DzurbdVWPH0FS7CQuUrF4N0HbrmsSi/YY4VS7LlQEOORUUq/sZfFpGrLNVeOqKuzRdAIw6/yRlwu39C5Xq9Sa8WbFIYQgkAm0Y286UOKsYPczqUMN2J+f1jqtAzDcQEBm28XsKjIqiksk6zImjLmWDgIkO/C7FNI5U8lZBizqC2CwpaxWM/fHtc0pwVQGYJwWlsrl/Uy1dW3/rVwtu8AstKjrnA8k1PPFo7ZTSBtDYX5uViVDFHJhPWtKr6YhdoR5Xwfi0SGaeAHOri0rAsSqA/+/8BeVIgPewvAZ+hiDf57+uXVSuV3PqiF51S/OG0J6SG5TRWqQ2dDucJU7lLqR6HOPAfh4urlEaS4Qa62hEG39Y/5kV3SQeIC9CRcBUE1db4Axs8Tecav1HYjXqFaEpBp12cFIW1Ow1/BGN2cApQkWZkMwh7PaNSV8G00Nxb0OmjoLzT/PcgGRDiDKkwLLZ/6Goc5++SgKcfIzUwXrYZ10ghZp2eZ1pLkSTBIPwAahsSuGAkd6Gn1oeXaT65IOg99VhpVkUx/JRHi5iKS9+mNprqlY4qbx4W/QM5K/4gbLboe8GvwskBkeYkT4CFuuG1tU+bYsGjyy8y/r++i9ZB1kKO59VC/nFbYvZ/EhJQacnqjaJ1Ys99yq49C2dKUNXasusXfpOObpdeiu4Z5gWIChs/kNIaVIKxvahOuZv8VIPNMjUgSX0zrO1KxgezBe4ieWt28U30CHdCIRdgYoFkRJhSj6w27WuCpRz+eX1gKbRET5g17iA+tRAJ+oXtmMNU3PTl65M6hXOk8r+OSDbCpmlAmnXecxyRONyC2jpUr0qDep/0tKd14XGZHQ4nKShoG9UCvRCFWVthOLV89VnXoYUlIdun0m6t5Zam8nVNMD4jUFRtBRBcP4OUll95bLZSUgswD+btjmZyiw3BUEyuIzcPPzrpZRY9RL+awhWQoGP0rShIWBLfdKgejZq5CiPtrd9GupqZpc4Kx8lSDdIMCybDqm9+/mkq69rrWpKIxBqKIb0Xf9Dwdli3LzB0NwicUBZQCgb/ezBZJAiWkYIQPD6FPbWZ8bjEffJygjOLHB2OoR3Rh59rCfxABuQHI7OcUpkHCysLWJsU1KYdyLYQMaMs2Q1RUiz7UvtPhZPIC+VVcHZE7JYqPhkxbUKDH+k7qTP0BCVYFs2LjJbpzKP5uT9eNqj7M7IJWLcxKxs8GYiiM9R6XJxsh8sbboCNiUvHnroflFXW1JQou8q2X0+yKipK+MRB/VXKCiUCDEAz6JD4B5x6ULNvzOcJnHXaSTNyBTq2kErCZbXKSo201mLXFCxRYrCnHmCDsigSVU1Z7oXqeR/PXkd+lktIqD6l5S2vi2VcaD5lkaEg7AMTmmJ4RGyEIo+VzESaaYO/lDMwe/fZ7winyZEWo9B1fqAhl3BWE+A22oSYlbyQmEhVidvRVh8J4Za0ndeLCWRu5ZyoIVEs1Eddjrdje2zLGgDKrQM9X/cpyirhr1xl7SO0r0TeFLRNSVznKn+AxVTBVnNXhr7TvvUI4TbQVlKG6uBK4jO6L2lYHJm1D9XA/XPSEDWei7lXxKsvHgJhzIeDXerstmLUvfzpiP2tcKnwyPNNDD0odyYwVVOv2W67/QftjqMHz6JBNr+FPB/6c8tNdOpfR4au8IFrs5j4aWpA49+9jn/NRj4cU4EakYw1A6h+WK5wqxRPH1y75Mjp4n+ZbhzyfN4w5LHlrhezNlP51RisWqvXzQtX7F0N7m83M9T002I/IljDbwpe/gbDcZOpF/2K3W+71RPvgIRTJACdZCMWHtDeR4jVnhWPZZSZY98sxZyYjjZA1P3zWubzkGb497I88k3URAv6m6HVBwLtnxtMvG0JGUAlsTDGMkL0zye62F4PApfpy75uXdTsrvPx9dg6yeQNsbi1I9+hg1Sm7/RzuldSLhi4CRL+KR6n3fnAVIfgwn9OJtqkIeEJsmKIVgZ9ncFYhUhH1KZ/qhVeqbkXx+4R3/AOWgJxzC+ieiUrPBCFf2x72TViUKdJqdsFh0mgmJsV8+Fwnfcszj5cJ4NEJsSIzuAcax+GvOnmqzBZ+V4mW2CSqX62IIaRCiHk993QnQ3byw+WQeCn89P49D8apAmU+UkSOGy0qAqBU7bsJHOPPw4qNM5EtRrxh/UX+YW35DYxijo4O1uYmJJmA2zCJKi8uC5QW9g8pOKc40z8li3nwAGQ8F0sM1ecK5GaQJPJRji9eOeWYr+fTI1uJZ7cDAAd2iICQOo9WPLpJ/Z3KNCjQAInUdhbgIw1Nojp+rYx5wy1n2G0csTw5ap+ahjF/zXKj4MfDnUGpKMPVYIMnK8FpdrRevlfnl3so/Ha9BpNYKTXrgfHuKF4hszzuzVabmyip+FCgY1Ak8CQ9s/E07aDo3yS69K6Zn+PvjNCNADP4bs5hyA6JXBsmO38bARrPCxrpXnc7/XXsc7MX87wuwp1kAMBQqFwaDpMx7f9OcIKFSI9rcqh16de58tbGYXWhhYwqu8LSIfL8nr88dtKaMqvQwdJnQ8EdevcReiN9lMlw9G2eM2GFIQnub861Tbnd3rHCCiewePR25yQ4WUyKFmI30x0pbNEQ5dgvN/5B/HEnx6Cn4FpdY58rriBcB1u3EtbFl5xCIOFu2RZuWjJCHc3F7E8RMrr/S/0J652598qp3y4bcswnFeD5JifLaMuuwYqb5laZlTuPNwlsCFBA2MkbPA5qofSr7ZMHGnR5QREw1Gh8kHRSXuk4I6QaLj9ewSkZsQjz6iLeeOlITW8dOQldAekCON96BxUjlfBRCNXCxDWCC2Ug73i+iokI0Arh79KNPR+Rg5RlvIDoyzczXKAFem46TfzlHxAj2g18U8JiX9MpbQ8lXrQnKH9zhjjGNLw3bzf3n8h1PAJZ4GwFW28Y7qPvdyOVSBOuUhc9P6qukLLgvqVwBSjEfDGTT1AJrWIVfdReTtBOGbE50rqPgz0sL01owm8cSTY8NKI/nIWxSCDJBEQ/FiYO16z6QVttvAG8bgFmRl5hjhijt9+ednAar4rnrngh0TrzLoIVcODF4T7Jvd+fe9LXfYP0/tkd/Qq/w4/H9nvaa/Ol75fVGvQzoxOtHAJMKl3R2GumDxzv4xHKEZsaHBCx1nviZF3oAOxHUNOrbUbd5sbnEikJVSzEysstLtT1sp8G8Db3tlefbGVW5UArimV1rlkUQ+40FR0QaBu0ncg0gRLDZQpeADtJKNvtaeoVzqprJFNL7IQxPnHdp6ilLHvwfMwbUeBYT55VVUmFFy+hVD7Sp387k5ta2q76UklCc0gx4rt62IQDctO3NKVQ/zYQIU2ltu6U1TOFQ+dQLlNV9ZmjP3jMdmlFXMX5IWzi1xEJR33w5O5ApnlCU3DF2dpAQisRjdTrKpfuBix7ejjNDeolc/d7NlXgJ0FxMKLJfWv13wzBWRHYpwpjr5PEMzw7srZB3NznHQrYpVGhA+GlWm835aloN4Rf8t89oYhMG3+/Goucw9LYQXsrUflLuWZge8IoB2R+/zEfpQtm3btRseOEMtkRrsvtQ637a1CPj/gKjTHeWDaxzvjrRf7wNT/QXYsMfH2uf7CDDc6cVa8d/uvSDfvNh1xSwOXf7JByFRP4EjsSvvNi6JfWU8VLsLFl25XZclqfNUVC52hXhxstzBIdroQigTz32TUcCOoMnMVpSuySqlyOXaQ2uNJqxpvzxsK7gFA6o58xyRlpn7/WywYQ/xt2jQD5HU5Y847TVrYK0FNF/bHqTMZxRXD/GQTtJVd+BlnicocjIvBPT9zuR5RsVPOCu3BNdM64GrUDsM2RmpbBoU5bRfxS+ZuFfkT+5HxEXvVIMI+zL7EAlIykyVG1PSHDsowl67ZIRKQxIcg9ETMdDXiCU+7XaGL1oU5f4ZL+dgCq6YLdXzyxGDHPJfmRSeUWrKa4dDxxr7Zu4ylNFPG4vnpvu2nDwzz9+AMitx628m2cQ0+5KNJXkD98hvVlPKEDiaHhR12THj4bk/5J+g6UjarSyvFnBvqqc4sLETAlB/6AUM3jTgQuH0U8k/gQ9bNfxmjKzi0SctzdVUohsaEsi5gClTwbcvVNo1fFvBiMcjB/6mH18EFaDFED2jTT/Q/yOcYJbt97Ig3SbUrEqaAmzYFrnVfcKO6PjlmBWAUuMx5ys9J2TsTd5vhPKjlepdHDX/BZ8jOj9wOHppwLZoqjCu3clTAUtU844UMH0+94AIZ6SZQvGr4bXcN/ofeE7jkocvaTPTPEIpCUGgltfpS2NUKoHdRG3la1DRw9e4VJ3M57UIh5vfnwg/MC5JiexYFQ3N01f24sk8cq1OyLJM9eGV7P2qrCiPeoS0uYf195+20ch+gfBHhl1k8TQhg8orXBtEtb4DWLnjxv8YzelxeN3f4TkIBWwDx4OV/CU73JODhfkeEe2+C3jqwFYvWbXLLfiMAckUsyw3Xj1wQOO9b/RuRD3D1oI0DJhGvCjISeTSVthAaiScyqz/nK/SCRnVQEI3DwHS05AhaDhMGuQPLs1xY50XHHMBNl/enH4RpLcdR5JP9bGVz2tnFosvudPbhwJSgC4oxHTVAvng8xjhiUuqlp6s0XKTfrDleLw2E/g/24J5q6RrdBcThwLHHn+Pp9i6aIeXAeylDncwiUosmYdJnJV+NwNGvWpFUl7VWLy8HdZfAGfWff1w7WguASlg4E0fkNGoqDOgNTvZrO/1QCSL8MdggjYwHf90T1r3yIGvqLni9oKQezsEVg/85KpKuMCALw1fjhkGFMnolVyTT7uZvUhY2DHmycHSsc1AqrYXjU1ODhexZqPjxPGvDgVsjdsvSt886Q0tipwK0pHr40JhIoZOgNzZTO/NHzX5haj5qUvj7q/f3U8QpJRDK7r8PZg2AEn9LcZSQBDnDG/10vyhVVa5mzFHWRHhM0KgVhO+5Qhgb4iVhsncrFAXvkanZGj71vUCIISYavoGHEq4fLFc2q3BVeesX48EKrypUxAwcCyDRnHo5It6wK484n8HEjFg+saN2leF8p0YODjWlQ+w8Xj6xSAfYUGSS54++cd6+vNvv5PJ7QxfD50llpX32ynQMijhZQ0BDQ27g7uanZXlq5v2aFS/Rg0lUEgh+fcQDkQOffE/1hyBxg+aIY56RXzywJ54gzAs2ly8EzpyW5ASNTh38eFJGBXPQR5pIteKnhICiGDkKpJIQCO+TT2hU59LXMpuoCuE/fBSaZEZ8Pp9sfvK6FdfoGbq0f6Ox6LsEWOkhmL6imEF73xE8aT+hrGcwd7L6EcuNNYct2Icnu2Mb6bpgV5XBCCcH2o7rGn5bSCjBElIgjBsvLOtxjpM1pOOFLBMfSbKf8Kq9H0LKAfA3ckYBliAtRvh872cF88Uwg88gsxDwNmeh2dMfbLb4R0dotyRoNCFjrt2I8h/4HwaAwS1KfMaAU+fONW5rnHUAUIIKq/Rn6+LWm2am2w6Cd6M96Br5+DxruyJApqCaRu3YtcEhr2QrmnYnnOIz2OAqi4dvfHDQP03Wac3T4F1c9Qio+5+tb4AJegbCexbPbz5ptSPMY3bj0GoPxQPnCaXfjvcKFc/l46IJcDRM5Wokv0LI1sqr4//m4aO3sksLHHu64/Hr6YW6oePiWyjy3BRKyaviH0hBAIuhayfdh4h50q8gzjrs1C3XNLmQNSeP1Hc3IcVQHsVy44s7OLYV3nr7AepOCEADizHR8GqPcVGWyenitTmV1eW4n56xR2Wf/xcJx6rjif6qjVG8Y3Os9ULkn0+a59jV7CqRvFoT8WSY3cp1tTjTrSjPG6vM0iAgJP2JKn3mxLIqEwhhD+IAUNrpzZt2B2KngALCuP852/1Et5JAngazR9rKaPiRZxUk06QVv6WUsKXhbndwtkO4Qm485jFtUq6BBs6TWcQUs5cbN39ELoliRaWjEGu12ZHOHQ5h4z5YI7mrfglSFhIVWWSeLnBIks5H62utlVFLmdG50zCzf/o9bBUqpLc/S2pgKxHIUWy8w5Uv9lb6vPKEFRl17RRnvDtxORMFrqRHfTUEjLiWVOWOzFJdHhG0BFWuUJNaPphHKnZ1hEWdMif+LwoaUV7xqSUEJtioFNFQr3jqrhoXEUV9T39Zak+pzL0EW8ztZoQB5EWXll2wXWDObocynBFnq8ty/I9ravxXT4V2VcdWf5FVR0NFrlk+Ek/LfYhbPEIzwBwrNVEFNyGZJPc0CQz36+QloAyCF/K5CQk19S6iyBYmxasH1hkaOfONbZhm6VBZ3JfeFlJHez3OeDEg0g+uwGR0FMkZJF8UCEPL6DwkNDm1rgp8OSDYe4kjpKb9P+dF3+Fbs51PsbknNAezbTPrz1wz5b7I0Y9uL7ACLueNDB6jWnMDsQTEe+6DVPO/knM//TsjsS3fh1tggxRCb2mZpxccdFAHSGtlUr2sgIqK51xzgUVCt+ZHGtRy390vCP3lzlZ9tFQfojEOkqzanRQjns5Nh+pPKDCCuzDeYUMJsspeir6m/0jbqORkBAsZiftNYdDpyeVr9bdas7wI1R/W8EQQ89EJH40IBwGxQAfvXpBQu1W4uk/XNN9+wk3pftO2uOeu9MZ99NfPetvEnVbPKCkgGJx+1sAQyoL8Qkad+XhVCe/kvmxrH2XvjE+fl7M4UG4NKkf68yqI9h0SnEneaa99HFWotjLJH5VNM695T/Q1HgQVxr8NsYQWMZxrp0rvWTuY9BvfeTTyfY+114LpBMqNIhtuf6lfee92i5VQMmoeoQE41Fzbd25mR9uAnWtUVCBs/igK6ssZkQUaSc7TKlfvRv6on5XIR+xOPAkd/l9w2RZj3T+bJXC9fNwRoRnh+ZiacCluyB9DDbbhFzHki2PrOfbhQXHRbUYGe6r5OJJ5i1n4beoqd2khIuRdYhtLoz2PXNDAFe9V8BTmRQvIGZwXsQTXBOmbk6N2I/MtYrYPYJGbprYlWkDEygdBQXTjf9D49XoFZ8LZKZPN//eS899Zk/axlXC98gv2W0RjckWUblwHMA6vbhWfatarqwm3UuttnGuFkTIlqVFBjHlVGAaSz7psZSJchLoTXx1TcZ2dal/0AD9HhOl6jxy5vixDJbunuJn15pYwstrM4/2Hujh08FB+Kp1VEXKNnajfupv6UHEomewW8H2O4rEQKVw8odyx8FPnmv9tN/Gv24K/Y4g8kJlHcuxU3Igd7Mm9YC3dyQWP0TAxNLTAoKwbwb+P3JeouvrWnMDAD5453YzbvTo7Ww36b41xg72o+90fh7Ja4sKoDcr62kt+J9s4i7eOotNIt5ya2otpSFVqmqHnXlH0aDhpn5PUD4CHe9+sRmNPpA2Vu1aTTTYCABbdTrf3qGWH93ia9vLuPxSYaSl24A4/aPmUTX3Xm9d4rt5wj97jKZc0q6+xJV5Fhyi3JC+MRhH3vdqzJwjuwfFaOHk8phAV6UwO2CCGgHRje8p2X2f3m6m5BwPUBxKD+SmeXqBcEEPwpKKCcCo2jMZq3x8WH5Mxd0/MtqiXFL72wtO524uvm9D9MTgJ+/42BR/DwUYe0lWuuMiFS3MmHReft2EMvrUdlc6nR9vAbLpkCknirq9O5746UUFIm7XVnPc9dqjK2PrhRDNDwFoR82YYtFJ10fc3tn3AfS/iK25ktPD9vwZuheOYmNjIZm/qeu9ICBiJUXoeL+u67Ky5miJl1IOzvRs2EnfGidCt1bEQly4DGO7/osSTqY/aOZbWUXwMdihpKa9annXLuS5MXGak3wgbdspJG9CmvaFRpYLgG2HlSSwP9/9xcdGhDQtC5YkgjeW0ocClSyv/cvjsm5SnIbdZcwxhHsSN2p103dn89fFZhv4bnc/mTBZCFYAlPZbd1hBJzDAxbaMndk5HvoDGB/HRRDmNUu2QovG3wR8PjC9ZtS5a8lFUKRu2+xN/JB3n259kTNetVkmupRiV6d2p/c9KWCCVVAnDe+HD4VFF/bsbKyWfEsbtScqsilhjkbxQ2ioose+TG2NprHJLZ0bQURgi4tpYXySMFDup6AEKZpQjQCffVCfi7Vc7GKrBhBGyDmEuk9hDilDN0A/cbIl9nrcs0hS+Tcsqe/GDH0tpaqFjCAAYMyZDpCbhK9jOs8LXK30rfAuvwSu100lxXouEdZO8vILRPQeHUXsK3F0rUguLF3Ujt0baOeeMCCaNMgBxXoOmRlr8oiEJ/WRLuvwZ9jaQp2R7bgc4dmxHRsli0SFKIjGFAjqGM5s9Us8ziaNpW4urHeG2hJoHhDSXkJZIrxcMt1+CzSSndWOnV/xrxV7EfdqgnDa8KqoPrbuGZdVAxCrEnOCXFwrdCztEhR3tXKF2jN9OZzCtOqYxSCcxPgZAda21iv7J3wAH1is15hJ+exTCElEeZKLiJFq8+70MC6S+zPvygW72PvRMgbyxgvGoH838W1Tt+9JQ3rqOLuwlYjcvlqzPBGGjvs4aw71wQpmJR7zZEgg7a+CQ7AXxGQw+mZD2sQyk0qJbYcp1J5YfCStH7O+25mR2oCuvyvrTm4yxCnVjTC+C89fQAZSptFKYPdfaZXOJfP1t1Jch5LqI/7j62SNa4iVcgcOlsbf+RLNQhqiS6O3B2UA+bHzreRfImCVoU/ox7eZU1r91KpWEDx7e6X61CNJhCDFR7HolHkgUgu4N+PHlB3Ym7VekThnnCd6PRC7OUqgnEuNZQD4FKPwAYg464u+r0gBqwwBmD478VNLUqPW5IQCNX53EeOGyNDMLc+PPXcB53j9xUSO7ZLhx4UT+xIOu3F8JFsANydySth5K6TQtDmluHK3DxhhBEb3mLcw8kIE9/82abwCdwvhXPH39uCwSaLJVnjRHoIvENNXOFQfzHZ0qLnDOjMtkviR+Vz10/57AqQ9xcOK12HwoxnO7VUB0kfLHBjaxp4EcwyEGaVjhlpOblfeokDGRuxCIgi0K+Y2iOpXbTwLhyRXn0oMFVzkg1YqTq7OwpKwmrWCIFi75dwGOZgDNa9rhc7NFaABOTEsVnWtKdmDtwNKAyJ9fh2PyGt076r96e8P5PDIYILlPN3VuHx48ObtFCFoba3UnnnDbBXHMgDHeSBqBMYDSRbAvIKVEtIO+IDWuGnBdqnH0I+dGbGAcK3cgX29FkJTSpJ4iOztEM8EJATcsMUYoBDA8SV3IIreVU70cHV6oSKRYQv9LlskdE5PWAn4FmGz4AQp0d0nz09o9sFK5EE1jjBxuWL6oMBcoaiP1/IRBvL1O2KcbCWhe9pUltH83oB/GgXaYg9FXFKa/RuRvolDhniKBmwExpItODlGaJ/6/DygZj4lmBFwm4O76/EABcdmRtnVq8oDzQq6REnq0KFH2y+X3QA2esKUA+6LdMeLYiGZZS3/6u5o9kK+mjho8UEf0ogMuFmn4svRSYWAs0bvY9P9P0ZVvHEwKadvJnCZ5FRQ7QFfdQkopfcf5z7imH2vkj5mjIcdhZABS+Dwl6Mt3+AHKP7AfzWedbttM06usQuGQYB60m1nTjJrPyjx0lmHIFR/M3Khq5KI/Aj4hO7xxM0Q4yCSbhQ00+2ruyxyajyY18oieXdoetywd/xHy6ve62Eagp8knO9mKX3RWdjZYEDIkh8bJTRHdP821QevOKeZ0ykTrp71gGL695dwBZO9bB7dZclkKg4PC8FTV48ez/CVbMfkftsbjU2pP2z+zAKCUfbkFW6SuVUdwZGahrVJEFW0weFiiYSc5ABq6NEsSM7ODnDiE5285wDeTpM8E0UmzbNZbpn4483rYjK22Gni/qTjGmgWEn3vAuCQL9ats8lz3ySElYuk3BmKOaJ+jnIw0GyEVDy61OOsB8w3MBjJCbhNJdCSQ34Z5EfTwpt+U/spALmHROBWVyh5L6sukdePoOoa4CsTp4IlaxEDGPSt2kRA5GAX1nYIZZnHQLW68QbH8hkSgFdPxKUxFj7wm088gjJZvq3gfc7HvLqZEju3ktXR/eyh7zT6unRRVRRoLkwb9GorUzOjTh2dL63k/TICumWp8ekjK3Oeq9seoh163aDb+rQ3dz/gw+jwjBBQ7d384KkbStzEJ4hTnfybGsc6QPQyNdyhznpPcSKhxqYQ/V74JaYZgkV7B/bN5wKp9Dp9e12AndYNEZng/e1/kwI8mwolsbn/c+6XxXYo4KIqCXu1SXVO6kUkNf1dJgA32CBRGyk5vbA9etUp/idYLWtpM2XgaTybq+VdXwt+9eC+oZz7H71OyokI4FPa7j1e9E886sGv5kWUPx6sV1kmXlyMUr3uslUT0OpJ/rFipN1hMZzGAEsLZWa4nmmPbJ2yNpg214j8OtfOOAzzShBh2419a2flVQuaY9T0uL6VE+cR3e6GlhtonH6PGUfU26CSM/0RF2hyJaAR6ab+8WgosMIxpK6m2qj56i74dg5HyH6b+CvFYHhXLdPyk0eNuT5jd6xova8su8K1trdXkboZygDCXqZY3ws8tpAK2gn1uC/l2LvAZO/wrEAU8crrt3pBVSWZH5fSlg6AnmQ+v13peF+U9s9vBLEDcqEQT2X2olb/i/E4LOdcN79/B00/6eeAr4Dl1rdHHgOythfMMXdE4JQKtwn1rBKtOtH0LQgjD/yZFJRk8fROkiWlQMpeW8kNLsVhFs4IeOK6t/SvRQk7Dsx4MV1Ur581/d7JHDLVnrcGAejGovLlcVceRyfuSePAl9TqxKT0QLk5oD75Y3CO7gezJPqUwak4KPFw6fwlvodbaV+4ePBw2yZWckB9PYfr19ec+9Zvj3i1QU6nDNRhsR1Tdu0bwoRCbmj1XryXKy4uxsxLyivblAPCHhrXl2u8hWShIrBeuyF6t054POgx3vaJsrLHw5vTMQ35MOwexD3AIytGHFi6kRPD73jv5tMN1MrGZNK+9y32cYgFzWvY4geD77UhSgqT7/u0muhyVxe/0ROA/gmAJE/n+3eiun2G6FWWH/M5LztKiUk7p/5uplsccqx13K7NXX528n+0QV5t4o9+C1PKkuwUM2hAxXRMtSvCXz3kojEH1P08VRMzAftwDXS+lFLhS4D6HtWcpX6iRXd4bpvgf9u7Aco0prmBYFPfwmqsNLPJ27Jzvip6LycDfsoqOEmVS+YCTfYcFkbRMiuoEv7kvNc5Sofmtxot42kk5gulZEqsYCGiKrHlfhHzYs3H8TmYLiDGdXyeXFP+9lS04AEBSz1VITdLkoTHOY0hdajisH9X+4peZmGi4zEXNwktS4k2dLJxmEcWDuYWnsO8V0JCBN3dH0Y8SHkyaCPCOTB+JE77PTQvQrJ9OeNZ8P4lNGWS9bFg9FYpXz2FtdDJrSw3hdTfFNP9Us0jfnUn0/0t6VL1NbXY507+4HrBtmbom9pyxhAfPSEfIIImF0ZTMeWvgplbFBlmt2NviSAlYjJH2oep7mUd5PT2wjwupxt4xq3YDUu0LJYebk3kdnL7jtM0IqOu7GuwDE4AFxKrM5dW+6MsHzVlAi7nhd8sk6u0N4ZZyLSBwdnRP740QDbNGJIPdImWVIEJD4yU8qDMpiRsXY6p0ViObsd97/2csyvGUjeo2yuXnOF5rGK+9lUzytQrZh9F9KCSepbErd+jixw1f5r5re3y0r43AuikTqOSjAq193eE00UGzF50rEV+7jmV+MIQMquOPDl8w4qGkj3Ui1z5+T9yLlwrGgM8a2nZKYsLBW2kJ32OFINV8DF5Ieoid9LQzDgexDi/OADugMDPXtnapVysLPa1TDVTIvks/rTu0KgZb/iwb3auLr/x2FCR+yrDY1io1kYoFvYrGpzTUiqT9paaygGNEkYmnEdp6p+6gB3qP2rAsX/rdzoW6GP2avWwnU82XQuw9MaAayjiP9j5JEchxksNEuhi6NsNIsmmRI24LW0D5EIWrPvNblqxKUE+am6lrVtdRjg4SYdYM3uMpOaWAM/RTCwts0ga4tS9ApZ758ThUdafdEMCKtAs9qq8berZcc5w9cL7cf1tQJGHLF0kT40v+6FybBCuO0+NJ1ffYw8dC4kZA6XfZa7lSbyaghsMhMh9TShSNvyGIfrsuZgl3XHZMsk5Q6YmFRRMm9MdU20q30yFbetk6xROLT8565Zx0PDllUjCU+7awmi/oeasmqygsVcM1zt9SB7DUqLgnLKKxSSkFSv8Zgma3PpSP4SjLjbFqVY3LBdfNL/0rVg6QIf2s05lK9I88rboKQn5sg/+7LwKQcqWPg+qJToIg8JK1Cfc0Ci20Lfog92Ka9xN+O75sX1Dt4ZJdDz+xkBqgPJGhUM7b/hBiGuNyK0SFkYC4vtPAsiCIKXuna2gnzI0pvxes/Lep2AO+KZFFdyKNao5zeT2o889hP74he8fGQpiDkm6CSDm6gv1eW/oJ+/sEJTsflpz/E/cqGHcCsS0/jFYpTX4KkR/tLJ7EoDuhIsEl6ySovCW84BXgGDhd6mEYbHpdpluh+0CQP1mrMsalhiCLaXtgNOFtTdgroCZ+fqfy8Eiqy5YC3k3qKkMMh+KLqp2rmg262nO+ZQdDcWE0a8kbrO+6iRP37UPl0dp7lMd6EXv6FKEDwFcaolBkOPiJ/GV8zCoDV9G9+3oZb4oBx1lO86R42edeT/u5+LW06iUnjMKSy7wkU/IXRWctSd67TTE0/iYj1R2zLpncaOTyTQnEGRE6ZCD2Y3hvhH5jFU//dgTvqA7EOszfmVSeznB1M8ibhcNKUh/NI/JFMK4sGkdaxJJKik1OaVSJ4sRC5zP3AcgHhLOY00BI0ueXUi54p5n1JSp9NUwpw4mIIHhvY07mQ7wzttcYLcU4UHY/6Kx0OCD1gMei5pVCAY2L/qj186DXqyZHZnwtRZyHq9dkPXjXEM5f6zzG3iXedIa9ws/mv92Ng94ungseEFct6p8W/UZwuGlGvI+2zPZ7wmpr9R2Cztxc/FMBq6j3CXdCcJ8QTsbpxNOs4hhQH6vl5rVDBO7DM5gKCDgr/NEr+JoRHjdCmM3Krce1Vhz9J2JBnLMZd2Wll88128DaDGCwH5fx08NEryWPbebVAQcNs08avuVdIcz1aW1D8K9iNHeSU6uPCoW8o/TzPSgMBdIckffrkW4XRpjlvnmJFC9Nzx+oT2/r8k9hhJ/WfdgXdoYmNhKDwW68zU1z7f2cRWZwSdix/uCPWeSQVyfq3GvhwJJymCcBw8GZcHCWw3tmovH10iIGEKTWAkoWhd/7UnxS2iiQtVGjIv1MpIXS9Rna4Yd/G7TIp1PwlFIRx2CFqn5exFWbx0ejZoxTtN6AGJRA5CPzd8Fzniw4MP6cGYYhLvRrqTw0OsyyiTKhKMLPRjst2aa0cw1Y3XL7SEC8WPf5oviPBgF0wmMdSw81GjUOKzganA3ulyot2VCbcTuS13K+ej8AXJ8ezm42UoxDbuW58/gilSkeoy/UfByNuBU8IBLVUt4GLstFqzlzQFN9br9YCIPtwFTXh3P92ZucDZIJJ9GG8X/ccS5330lWO/gB8iOiHy4IUvvToPo2RDHI8GS9z6KPCXdZWn0dlTuCrarQpkUgpsIL15QLWnZ9fENqpvvOfXHiV02fzFC44nBr9huukZDm1AzO/+RMvKvO7xB7uedK2zNaepjVU4Sr8rsjSJINqFysQ0ngvq7uAN3vqQN+Cb3UG+RNcTDspdqCJ2qqqM3qPgOwRG7ehAl135zPozZceADmubUH+O92hlJfOUQRjf7/5RCQ8BMy+U8RymKELgLOu7r/CvIQnNxPQPhWNyqRoLuTkoaJA2RSSFZNFjkO2WRDEPZM74NYKc3Nkgdwfuvwr8GZjVx3rLWqwjwITRsD9LuTvK4e713++XEysaU2qi/H3sxjBIi0e5a5+AsvT133sy42V1CXjNxGsae/Gdr/Kc2G80YSmHwSgtbwhMnuLeRa9vY3uOdQYxSN26SUItKjDYYS1npUCU79QtwsBzHZWz7D/aZfJTvV2GcEO2IHFBZ6SJOYBI6RKTYPNxW5YC5RPcC3OAL1CO1tbbSIgw3DATrfeS0Sot2pl12oQLitKssODsebd7c6MCDYtUUo7wAtErhznOKx4gqPO6BEeOSJFEFf03rRSvrkzIXuEBiwf/1n+VUcXOes1MFuexLOqug54OI0ZqQfDRiv9pp6i2TZ1ab4iGxhJWBRIcXAORmD0/POoDKKSl0FMa1RAADEybKOZ5sgnqC5gsfQ2r6Tc3DMnoYhH+QjPqjLEM5JxznXEWSJ8ekbztVO6sJ8zYF/tkWJ6ym/JWnravJXz9pq+Xn6wcs36oNcYHadRc0aEUyCV2mb/1YFONq/GyfaEBNTUvd0+I6D6lkQe8WYOvk0yTeeAtlfn0BaRQLX/Y0f0zcPm/WN05Ph0e2VoerSiLDZOLUv6tkVMQJGjIYwuQQ/p+0wWcmXve//Sc+ELYOZGK5hlrAyVkDpJbcDdVoaqGa7VIZSN8NaneWU0ikvMPOfjU0SSKLgpf+4kp0AAitzNT2PhuxW9yQ87f4UcJ+SMS6jANeOmbtYE/nyBofcXsVjooSziLTOrPy+iM5BBcjmX1yj8XB6fybIXFeKY50klXuwSh/xVnxpEWnjj1s5wgRkr91kMF49T25WqD69BHiIuId9LHOXADhdAX5N/Nr5O01FSjlEglVxK5j5YonHSbhTcfOP/f+lsUZ3JmByLZ5PzPErFtGF730wVg1HvGpFiZyBVp5D/LADaZN1zulBYR+RD2ujdG8XgvcJILwWAZPtKT5+HfWBHRYHVjfZfHGCds7Td53FoYxvvu4Fv23QUziZWStsxKxG12p1SIp25Z1Obaf/1JOwhQBwaK3QruLtkM0M4DXBRLh/XQWuofdicUYm3ADa+P8TZBrGaavRb8F2putsPzdco9XG7loGLxyDvpKnLZMw/DZjQ5IYsOWG4yatOCJXkF48Ik5g8OnZfi0Hqmd2plnOGUtuYiNYSGOFVdRikJYOHvpgd1jvVOmhuHQ7UpLCvyU38meX3yR7usc/94hYddgw74d94t9OdTBYEJpB0qfe08daBaBAi5ZIaTu0hDUiOToy1TEY5UAFvBYg+Gjb5jCacNRS2HoDBpFRituzBUYNn68XduSSiFJGDYvW7rlZyAKIaQ1JVjzqbpeXshUqF4JrgypfDui8ZA89Hh2qC+dv5JF+8XoU8n5AMPExxNrv6MM7Hn8Te17QArfJneOP2iZTwVgtgEWzuxeQ+IgcSusecW5y84Ft9UtuYUlC2CZo0zSh7FZMfceqD5uWFMtDf4D6P9o6uZxm9qCjKUyMI7mpGq45Gw3EwVj5HxXNqtAqGS7Az7I5LKsgPSr2FcZ8F+Tr3KQPg9Jy6dX9+erw2WTwk5TipdHZq3SucjUmst7bJBjD2b5H1Sh6PewZtu2jh9Q2Bn042Dkeroq5gh+b86xgaElfTUpWA1oeNidQUuDLlmIMyeHGGT9mU2kKlOWvFQFo24KhUgwBQYGqZT2nUhlfUoe5UaLEmNgp7sHE+ThBS2Vi3g1ca9KiGzeWz2eTZHzMdn1suyiNAD6nsGGKXw27yC8tgeNXU1+qQKNhgT3iWr6eSDg2lZGC3g433mK/3mlFbzhHuNuc3x0sRA+hqwKFCJP3Kp8wEFuqIEvU2QIL604UNzxuAzEsaXIpCOHXesd1Nb2oc5R/X8g5LzJV/Etu+Po2G608mOB2AxNrIousdLAbb0pvTlfbJu1ALbicPwz+kydpnelaSbEVcbyJ+uKgoqFzG1EnxYMeYhIKCFfXSEDswr42E34/3YVnQNjKbNBPQZhpcAFp1EfEgV2HhN12zvsyUyYPc5BqHznkBto1Syim+BNVgTxXenrABNOOnt0WK0Pk051nwZ9fsux+AxRI7Ie/gUkxMo2aEuCCheLYw6QJJrxgVAAdk0iy/syzcD80UUqOHw2pBP0EDFXRwdBO23YSuxIT+v7QfqLll38kVjlPVWVbWPz1V0XhGO6NMUGd1a3Un+oE/nydx/VmWSr8VmSHb+WoD4R+rWLjr2ck/vnENGWEFMXbjxtA4air7mp08rfBzJ8qDg0XwmdGoL8vhwHmXWxTB0E4ZNuWTkFdr6shDBucFESur3xKTOG2cKAfWRoxwJpDFRwAw1ZFLp2E9OLkcHjTz9bQZxFjAsIT2LyKUgeUzQQ7r5L44R3aj7AQSc94fVch5CEmyLhRZ33F+J2e/4v9XR+dZFF607yrfM2QmLGFRK494UGZf+B8dgNVxLKNcT2CN9hC7vhuzZOVxx+jV9/8auMTc4gOfZjY5RUhqBno7ZbTLABfFeWFLlYyJq9FkJ3+Rtdfsx7FPjP3zAHTUFjyR0v9TvOJ/9cn1TGiQA/mGMvGe0b9ZiFcobZ5ksmMKl5F97iWvM5gtYWgAwPL0FEs6oZQYbqBh1BfdNrpxNk1tBsmYjHiltflu1y9z8eiHxcw7czq3WkVraKgDtdG/ztzJ4pvfTA9P9FnLmlBE3J15JXwUac2kUqYRT5sdp75/cJ3k4G8o3m0l9vfhCyBP5n9phKGz+4ldDmop/Cbs6qlwaS42KFyYmDZskEgyWvSd1T2UBzii0iI/ckAC7Suso2pnKTpmevN4t6ZXhGUPf1vfrTyc7Zr4/pbounHKrEDJlbm4EepJLgT0wpW9Ay4aOtEOeWwhIJ/qIbG493KaYtKq42kvQH4eFgiVuYzlOo9XXJ2moBBSkQ33Z0i85lq2ONtqbWDdIA08AcrSqc6SXT8U5Zo62KGG43XBdxe2Qx9KXgwj4F+nL2OpwZWi7ZPmbEWF0q2R+NgjswR1cIQ6Lmk7Zt845RGtLgUWuAwPYkv1DcCF+COwxrjLt5pe3+cyJULN6u8g0ichU9OoPw7ge2ZHByOmXxzaWEhpBwzdYbsMp/4OWOktsa5Mud4x2pEkjgeTFcY/RSrUz3MZAm3kBQoMA9FO7NXn8KvOB4ybzh3RryMOeWcvUv8f6NvQjRXzL9ue5LJqfpJoxv/OQMFg6QIlxO+zS+xhFX4Q/Th2qbpL2i/0sSqYeNBnoMJrcYdpLupeSPU+eSTNlCoNNsW/Y/iU7+iiaR7Ie8KXaVmH4qQy/PJ7rJx3oTKEMqd82EP+0UJEeTR7McyGCNBdCB9CQPe63O7+KWJNU2fZQCr/qtzIBvAHEx9OmOVnh8LPikr8Z08M66mPjU7l4r/9oVP3KTKQBhlS0xJ1QcTFaEYKMtntmfZyHqrvsBUUMOCGc6slqKM70vU+u0/iXSO0FGH/8bMi1ghzmZ3yiN3pnor1TN9nMaxzhYxb1Ms2zgUN8tqmvUDXSX3NBKzftI1mfz4RiKFFt2VtLpZZwlLrb/lh/HWwZzfxlQwplW9dgynoo9DrjIuVbEh15fspQKElzCutLTzQquLwf8wh32tLCmTHYqRgfoPsdkLC9dme8VbL7KNdvSPnlP3LXjpdLQRrqUrpXpjc7lSDu8el99Yf4ALMBZP+4w9MgC+CbFNXhQsi/QSTQvcH19MFnAnfVavmyhULfuM37IBsVWH+GUx4QQv/hDIp2bqHBTyH1HpN4fz0nICuAdvfy258wMV4rUWgFStlmMG0S+F7Mx+2+85oreaArCKjgrTjYKDHaXRDtckCroKkB4lhJ7Ly+GaIt3Nk+jLugP98VLqf3JF00JmTTbSB9tB33wMhcYGn7IQgVWahiNbXXW41aSpmfzymIF4yBmxU6Cn1IY4OaCnGHcJgJb/ZAvIl4PYmRalH4080FWJhdGNJnlFWxGU4EQZfNUy2KaMudq6gnONJt9qSSw8O4KMDyi3/dRZARHwmvDvAeK82bAMbiyo8/9cRFQU4LM3jxvmgpU92661dwFXr/Rrlg8GG2lgoI2cfdbSPEAXHipf3tzdMZICrP/f1n79vQxrjm9+vxpuZ1he29hrQUKMYxwih+gGZ8J+Y8aLxTi/M5gdFsPACrE3U3ItUdbp4BSlmjlcR8L6UCm+TWFzwcNIfzBPYg5UAZu34X1w71WvQ/TKZOOjCkY9LgbrAToSW0XXWYUoCEutP+FC9b+xEQJqd7mQi0bmP3cQFJCZKh8ghuiNuwvtLHQ2vHAL/b8PxYgVj6i8m/S9lthgi1m7JVOpzAXOm3OAwBIgnkSHsqvV8atPzT5PUINxOsoRTJyUL9/jhuomwRFNbREBFJAVGcjN7fyGjy7yzzDh/LO4+i3NdAj3zSBKHZRGO0RL9uSks+RCaiDBWYEDSJJq1IjTDL8X0qr5kMSmbIC4M0kLwOILXoteIii7gtykAk6uycCvaeY206Bljtuh4hsTbCuKKuwIq57CVjDw2IbVyDniCmUOoVx2/4hSv1hfjDKmgf+4oFWT/RHTv15Mmep2P+zTBFNT3t27qw0N6BVJNthUbxaXiKPBVHMSWc8cc2ZPguX83OgGdTaZgNxMdOCnYxx9RNqRuW4AtcS/dulvnZ5BeDy5yetGZt2GM/3VCnppXcIGKLVP/YGNc1UkBkrKPUBIYvM32LwmUy0EyFAHVmd/2jFPtVuBjt74mPXjEPB035zs07XZ/HJSvjfh4KWht/I1nUaxY6IGFvlG0kHi4x6domL/r3HGiDVtvc811QsJcCXRihH0byKgb/6hsMSBMwudiF8WkUg7OlfJPL6Vw8PU/bnrD7dm82SNopc29rM9w9WZZyiABi6crY1/4y2RBgz7L+2yHl9fIFCY0vYIrhGuF4ltGEepAZxpgEV2qBV9Yd6hpBG8pcUpnLPgqlA7LVONxyGSRx68U0RD24wT7xNfH4RWZyHu96ze7i0tZUSZEO45/EnVr2dSn/KuDZfo3Zr9AKgdpgPAZSJGhfJeeiUUnFO77CRyTQ9EgWuOsXk9XvN/mRYyW0cW5BurxOks2YhlsO6gga0D34EFcAmLkJP95CQeboJ+sDPMnCq7GY4Vgg72xCKjkJzRpxseh2eonV3SL/gCEWfGfuEXtq+OZ8hLNqYSvDg+QIoZQZ3x/bFFSBO9GY6gUO1rY4MndN5l6NEMaBr+tBFJHN/0aFgSPuh6sP9yMzMH6JH0x2dEaUDJtJh3MdHy34XyB00+gOV9GyARo7LoghXyuVpAYRyFzLPtQKUTZFdcQM6M4umBdlvJFJ1sHfcCGIejEaCCpFtuEAh+J6HfpdWcfifmypzz8J+hSXJ14D1pLsHujgGazckLCF/3l081fAJkJW0NKQTNd3C0KtKm2rXnjiUyGafAcWgD/2JJy1ZUfbQ2xl+r3EGQL9s9rFJlWkI04GmgPZm2/xaNfD7w9lM1D8hsXgvbccbEMLjt7u5qc+yHEjBl2t42BPYIh9WpfH9pjYDUDo6xfODjPvHm3RjPPjReyOU54nrNq0ouVLKZ/oab8bnrQPmq8EIneQ01FHAOklNkP9pzfZf2JoZkpaK+DQH6YpqjBnv1A28fw0FjYF3PlAi5i16q3qwF5TFYw3BT3oXmfc5tbjm19Vc65FEdk3dt2g/LTabH6ZVEE/onqeQ1x6LojL8Dx67Qe4hfPZU7zFdKKYTjYkY7fWU5hhMX7JzfGZJOf9hJvwhgBZxLzVdLjFeBtpDtZ3xXV6NjMhL3A5fCtAjNGbZN90xnCUoe/c2MFmFHNz2+krkxxDx5ovtYliqNOBEmDQVYrgIlWqsOpTB3VcVYNQKdUG6LbANd2hUQqDsSWtZk4kcbX3nYELkMokF17YNpu0z9CvjOzj8gJ89UCw1TJL0vl9ZqiGX+/fTIDluIqT9p3YQN8LEYT79KS4/ngTuNDcRdFmxa8xDoafXpqfLnjLL+gMoUPzG8Gp6hywW2bHFJwNqSNj5Dj06GzoeK+XsRpUMzO+m6Sl/BJRWmECGldfRoVB3SbGlxN4drMi3CCr/isH3YBis407Bjg2I/VlTSgSeF9luOJTI+lhIRsbbR+qVGYcJdD4esf903PoOmBrfA+Wm7hBtXHPmbqMTXgF78feORRZxV+rwcyPVOM3RfWJvZPO/XgXyYa2JwOQKNGbnrFb6v24sV+gtbN82Bi2P1Z0xR05YD+ZiAlNFUWpjkBRg55OS2jJOz2QX/R/hXpX6CvOyHs4EA2+AvWBaKQH0ASCD9qFLIUF0jqf0V5iyEgOzKYF6lFUOzabZjiJEcVBW3uDb1oys/DTyuVRLD+5H4xTCb2ydta8JOpqCt+wKJbUzElaZteSc8R1kKbwKOCHk2xBm9NxwKkC12BoEZbLsvZO1mhBAPTIw9+ZImPtPG4LRrtj8KRsEoOjns6LggXftUTB6QRHaK7QiI1V6sW9U1ipGeOxZ0SHXrw0KPvAy4vdK5/d/CEepaVAA7v6IJg6LzJXONpMMCVEzvSCGdd1eVb8yiSewKnIQOQamyLyT4dF+cqqGRtLCFoczsRLF7yvVOkke7HKcsCdJG2qm7NOKzKhg5xhmkkizbwwPx5/Zv18wKI4LUnfHo766Kqycwv6BlkbXMtsFCwP9OtuGax36JopKuPR7Gglt9pZf8rpuin3quHOfU3P5PZN3SFRUNYgGFRy0jrpyvErOHIzMdkz09zsCK5hlZ1fCUlTx88I0WHUpd8dCKmGqE/y1h9BxxwG+kqnCtt3MrENM30bGwxqUsm5YztYo2niTry39c7x3axZ5S1Tk5PADIQvXOZBHt6ULHWR0Gs4KNlY+l7ecOGEfR5sGgoKHczyu0d8ja5DTdx4LpXraVciljt1/Ckl5IXLtkYmBRs75LdDioG/qpi97qYKqkd8h1aBF90BlN1Vt1958nIYu/v9RyWPQrQEgK9TsOxGYdOQSLsx2JG8D2Vl7Q8+B6t1Bq08AnZYf+G5WFmQsmlUO6Scr/l7IqaUoT7S/91LOb5BkcdpUxSX6zYW38Y13GSILhcPAwlD/RZzI5aGdf6QCY0eHJUwQ0fyHo8fncfcAzaverwrD2u9avVxYOhD3OnckEv2qpWtXxrIuiRwipksWDMie6J0aXhD+HEzgcMtSkEbIO7rGXOlqMxSuq5MxrXGFhiwRjo/QUsuBoKpx+Kee5mgfGACeqYWg2+6hTYg08JKGhby4heYbSZMimEq8zOJuFpjqLYMdE3CSOIrAslhcmLEniAKCwcZbMFuQm9ytIZXEdYwNY8WDiujjsbb3uMh+0ZDO/Fp03i8kFxfrEnXb+PfTljIZ+of3L/J3CflqtiuUdvguknGz7uxOvUJqi1QTvhZGPs1ut/3Tl9O2Wn5frEfGEXEvP+PHvEHraJWfHUGTH5lRxr/e2VA9PR4thJIGPaQ0l0/azM2wjC6GZ9/DDDylh+XYxgc30L+8XPNUHLhYn23tku2EihzoQzdT0THZSL6snwrxTPRZhCKpVFf8Dcp7NvgrDTopxAng0mpZ+wp/VAP9+5EvuTEMI+wsD+quRFQzozrSqHWpsqCruwd2uYdnYKMrORcAwSdNUPn5Z7ysKMdfD3/ouGrvOGeHaOvVdkdw3vkklFelrzJ6e0CuDWCiH6voWxLTqU4zz8GNerJI2fNvAmNzoUDz9K03EPt/KOkRvegN4nbDiMsABoryGR3V21gFFmHHPQ9EsZYtPLnnjXTp8yVl/YYw10zfq+Io/5qBk9dTvHNDLwqGX7/qFpGaHiD7hpjKtI/8NLzRnFfrk/MPXuWSX44H55r1k+x3ljvXVbGbPrvHXGOk0xtjfdJ35b2seO8HC+e1rYXjtrCem82X183ZugDUFQJk3/t6WuZdIeEVS+osEfzAourfEJBO3ouOK1YeCCcyEgIiMLevBA3sywFdjpf2OCGnE5YVhHJfIRBA1P1x8wFpPAFQbLnaL3/oVI3EbfMOCa8zc6rXyAp+aZ9zdBG2T94RnVkTS0ErEoA3FlNaUCrS6KLvYqtfpmQZNh0Bo2koNe36b0kcQ9XQdRd1Q7rSYbeBA0hhtt/0OhmR1FSpx39hgGWA50w1N+nSyGrkPGS8hEJ4thf+5sSAW1uVh6xi2GE/hmJZXzSM6KFd8DvAeIfidN+m+saCnC0pYWJAVlxaMfHIxXnehUv4Aemv0sTz31/woHZrrLyPK8mo0pGQ4AVWc2zbCn3okPHYNAAcwkJVHsxiVmoSW0jOsIPsMo4UGGKOeKEXfGxvOthniBBbvkkfsec2oYAXyCUs2GGzBSAcWktNzJGUmOUujhlmBpOISE1vy8H65maSOEqHUpTXXgqRv52sc26xue7qrzZYVip9YrYf82kRwIHWY2/zCTOcspEA0LKh6yA+uOWiBipJ4XzR4HJfdffH3H75S4NwCitP6n9kXIqJOJnWtDClTtUmEfUFUGJYXCv9FddyvKTpTfEB551wbqKAaTJeIEF02hiTfRiatmsSEOC+gdUEm10DuS0SziNHP3WenqtPk6tC1znlXLXecu6ZRpSZSGG1i4+oEadNKMs6wRZwjpbl6owAlOoC2Ol4MIidYDnQIj1PbN5FcZ/1/n09L18jpWs3LEssaIGNtnkoMQGIrleegg/zudJfQP4rs2xdJDqWm+9CUMOwQbyAuMqtcX9HP73CBduUyqhfQr138rFMqvz7PPZaORayvUV4QqetQfaNKFG4dTbNmS+9SlanfuG90d0PG6SGyf6dFAf++0dfyHWwQZmODq5tiLbHN/EO/hIsU/tiM9UOz5h0THHYuXqGZTOEMEJ91h6/buP1Ieno5d4urjNbnUlXkK8EGsQDMTLCL1I9zNdIpz1chwhtObXizNaGbf3riDfsvHZdywXFsrduInJS4WAWVxs2CstwYbcSc8mj0H4RJ18kIaq1UOQb+6FdKlxGm2ibbs1KOkGQdR1h5JG2HDoHvSVL1jF1+6WhJHNiEtDIScsIR4PDgA2hRtXB/ZByAchqxAcoJ398W7g5+9UedF8n2xCus3XmjVXnaeCi2uaNos7Omyg4S0KIwkULyu0o7P+HUJWzZFSqouGFOB4ZxkpJGU1OdDhopFo9+6gfJh9QcjFeaVpL0dM9DiwgI8nYSOcbm+h9/Ss2QA3wuitBOpEzQeZsUVWj2K6s64ft43IGleKHhzXcmFh/WXjLzNsrJfHuV+rZOe7vXvt5pS5L0QZtbpad9UidKIx9Dj4WJQBZmSJR7USAHofppqI2M2/WhyX8GXq4VXfn1oap6Cv9IbEO2vQe6TMGmqnt9yrgIuhW8JitMfymUjeZokkCDlmKOi2EiiS0qXZJ/RMgu8jPGdHX5s2GwILV2k4SvwZ66HM7evwKgW7OBO3Q1xzmxgE5GX+rvqoj1WmscABXPVX2Xg5h/MMiRTfCqFnj4tjkr8BxggbdMTmgyic6Pxuh23smYFNJf40Y0oS6c8Fa6zuyxb4i4j/3a8idt42K4IMZoaWIgzUbKW+/UrhZq2MoQvJaLr9A4fHHjMMvWp8dVsh7IBUYZm7r9fvTQDoNX/H28q9+KxKr39K52I/GEBRjkiTqb0018jyCxC12cPPf4I7MrI2B3AecMHzuDc0BCkI29FLFkdH6pi3+ijLJ9/P4MKjtcVWY2utnIcNeMDjxeaHE6wEA2bPKaq5mUkYBeRCDTC9c7Zgl5SdhKz95RE5CRZXhCno5o87Y3S0h1TAlDspzljb41SCkVRtX3M7o7gL7P9QjEEeRfS86X/AyPHKhc4BLU/ojJMPOmtTdhFbo2bpQLzv6+mOGtSUVNSvsoP/TU8cK0qWQm+R5AMu0Zys0RhsKBeOx37/8+TEKycvxdaC7/m7zy3sDPS5d+xWK2QCcU+ZBieDAbuGmd7tqFfehOYT8NxekC6OdjkRSHeUY22XhZjaHjYGObPxBt9IxLzRMMccYW3Xvo7LZwqNI5ugGKItvI9F4zxj7aigykUQSgiAUTltyq9kytdxIcs7vGVyPVn2QKsPOQdfh729s7ovL0OKHbZjpUp5j8N2a4gYhbvkeInZKbD3Xuk40alZk43Ph3GwzWbjSZizYV0ukwiR+LY4MIGxU5C1m4mBGFdsBgb9z8EUtaB2xTfzspk5j9pqoP82utGAR7/8ylV/Q2ZR27eMhsrIbL71u8ocEqyQBbkOOMhOPLdm/uCLLtl1Duely2DntgMov8vBATOmvR7BWEYvzl7mhbqNLJbOvvvuGQNSnCBlW/WjRvVh0vF218IQu8adqM9ipw2HuylaqnZYOkctfoV2i3yyIWEDRMSCINDNqHtMfHyhbvPSqLNC7U4+sHQgbj5Vi/vRx8dUprtIr1D3LcJBQhnL6xzjeGU2sBz6faozTUyCuf0eBqEQZcF2QAIwwqg6DyuwtrOVM2guhJY3F+XM4w+GaeNZLqCHk4EMV9wG86nPl/+oas7hJW4A4yubv+FCewOdU8emgDdOvchmzC+Qu4I6mH19MegtXm0TAlmZGAMSlNLtwerOAreD8IUG8SFLdI7gaI4xcT8VgpTPBfckpheeHM8ifQG2s1FC40v4KEr9pgvW6KYHQqCrWVHZNchXPHKV6ds3Pm84UBZJagpX0+RjT2VEOi2pvm4p5uv8HXfAy852RS8PC0bnhev64LG5HPFC5+1a3YU7RNdsrZhrJdAtBlEcmCI81u2NgITXYgc7yLv4aaVq68d60l4cNumR4RF5gatfb5T62ZpPBB+OQ4Ly/H/J/NawAgWYP4ZYLGuROqQn13TlnPh0R89OuPcUG4S8zpt2GvkhfZ8+TlAf/tp3CQTMzsRjfie41xgyaA3zcNNs+h+JlAVqJmQgV4CFuBgBOL6rCaxff27O3rTtihjF3Z7vvZQZwWalGWJM2VEP3d/i8Xcnv7pLKPbe7dSBBwTB1ouT6neMwmte2ti47NcYWQ5qYYQ7QJIl7/0ftEBioIltlxt6iGxKMqOPcXVcJTbG0aW8liytMTwa9t9AwGhSQn71231BQb7l/byLnFk6Fi/50Q09W562wZDJC9KaygGESj/tJVZnh8h6OHL/MfdrBU/RNndB5CauQsbyHW28DBTtW/8HXMhMvD1SVF8ZNm+LgWzTYs5qI0Al2gb0vMmQEVP/aobyQjnPh8Fujp7xgfcj00GvpBbN/gphCq1QLFp0kr1+JvBgz3CfnQwb3iXmVZEOpFvGrrw0MiIZXuS35fYimeLTrgHTReiXdkgVUxI3lTMmDtB4P/++MUW80r9E2cwnIteuJQKXtEBVAK7ky+Hz5T/FkxYFPXQApbil78tb6DuAmAIWThIxjYA7I2y4QGTzO3hMfqpZrvR45L9wBwm6COk3tsasabcBUQ02To+bQwAhIn9kdzKczEUhN4hMHYEYWgZ6b+81tNZdKllERLq5xLYmzf3tJZqnDxQg7ZROdQAt6pKVZTsngmd8AivBNAF/parQVBlX8CfVuLpVPioCO17ILyNxh0qPKAUorAbWbnogrgLUHRmlltR7twO1b6D0evtcLd8MSGLqAscuynAKXDlpSbRnUAaBvAmcnims3sq3eWiIN8o4iLSGopB8xegpG9lyUOUud6IhSl8HOSF3lVkHk/mNdXoA0NgcId9Vu1BhAbSCplVPm8L8amCdw+OrZcR1jLPful8vVia3TXYL77SRH5NBUtQgjnfqEIeq/fAEnuu5kdbOqtzHqASxlQZZU9RDSnDwhzlr7aTrb3ji1XjkNTILosx3DglZykpfxCKihDpdaarJGnS9fYQXf9QuXpe6DHPbdQKqvHZh2rmdkmO5LXLne/48Xhkv8JtEGD67FcrCWHd2w0GEE8tRIJ41UARHMaoUZLiaYo9xYbZAHYCdhHuvUZEkJ6DesFim/zwwCg+x1BiGyBm9ei6hKgatoFMXODPQJvw5jX49UsPpuXNbPGtZuqZvKyU6shc0zvwVgbOMsc3U9hFvOFIl+2S2l462CgfZMQ3XMtABj9TZuCGuC2j5ackjqZL1v2d3PnYetPUhi6oQIjodStPGaq38aDT/3IDPxWW5bQnLPL3j3poX/FWri95UUngZmbjy4P3/xD5G4myoOshpEW2MWU2Y0Ph8HrE6EbwxxK6mfAybK3w3nOY9KeMwk2DJQht8sjFlVFM2TdJe1F/+TrbFUS5w+i2I5OmT9AfzLN6wufuQghMcJnHxQYgYWRoVOoDAU7YPR+zWcDD3aaZRGXJWr2ZNr8Ta8Dw/mhgMM5B6979utOr8J3KM8HVxpTOpSL254zAQ3vejvFSX3xsiCBTubFelSTKlxTT17eZe5UQIQVKR2m/tr5nfkMIUesPLPJjZFhCkDRQLvicRkfDoFplXDe/hBsjTFjvlRQaOuF3Mp22S850jPoBbkiJTjp7babpUUA/hCQ5g16XuyOhPLyOXTi2CbPR8XWdOrFxQIh0c0yXB+GAQoLpGl5ynELO+bFJUPGE5nPmAw2ssjnTwK4+1ly5mjaiuk5SQ6huM3hVjDpSJ6gQXMSHCbgbtZ8C4gMIqipq54ZFp9p8omkjjZeYJPZPEeONd/sDjzBVVdvPgyUEeQK56ksqwirTmMzS/i4b3szme1N7u9ftNtckN37Lvxa+E1qU5yyIQHiSOpBWP8Sw1Nvp5R02a0ScLfSgvlfacsEd8jlf0m9z3O6eWwXiiPyFI1GV4eR9cbXk0U4U4agcYgjme70G7t7oVgKFoXTjbcjDEdcs4pB+H1r+qd9peTIIncDfywubTzuSG2kEt5qmg2MufjgNGnrQMa4GJVJ5VTuSWS6tZWxCr6Y7wz2RHyRCkfcpiq+6CRaD6yOz17U3LB3ja0sfrwzVKD/erATIQ61U07wxgVqbTd9TRdd/MzvQczhoBv4/9hEGgYL7sqtyOFk7OWI5FXFR2e0+ZEWlrfU0O4nc1bzMjKYLdIWHHc4peBIKk8+uOv3sjJvUVT9eStGqdU2XHt3JlhHXf4DRO3cuycSKHhSO5XUCJ2dzlvNx7CSe6ma4dRPKv9vSOY510xnlp+2gi39Lng2P0tyWVHqxVZWn/e1kfgDaUHSjBbw8auH66s6pKMXnEgukSMau16gRR2RJF7EOhlo01+1DUHUYWVOi/cKXrmt54jjY7ca/Dv0AVh0CrzMl4rwJ0dtjdcUVgQaDncu2QEy2luEpzO05d23hnUe4QUqotwIirIXmdT2IC0ZnkKefj1ALoHDRWjLePx4tuDIfoGj402kw7jh282FjCHaqcakpTt7DURsD5VCWOmnXk7e1cLLrZddHikvXwkVYXURSBn5rHILZO9c7p0qTbt2ku7/FrM3Li3XE+w2x213hNsUZz+zE6Md4tyBXDvUXw5DGF3/9youZAZTSMqMTM12mHIggXq+7rNz8npPLIdSrSR18lxANni/q/tv9vgN/boxBiJ08BzX291ze6pkmK9wewkELi6HKXNem6RbLOAuHKuCau+piUtpM8C5x+tZ+HIPL92YQ6Gqvbmzo/DG0SJ7GD3lh6zg9+GPHzTsC5SwcGsB9MXeQrZijVuYBdWMYh2lR7hjmHhS1dgWaH3CSR5UGYVMRP4JDvJtLdPXEGZyAYcJxLm5ro7u6Mz9uRahy/VE/G6nQJv2JERaxaXY0Bol5wJon2/5g15sNtbDnFYYpm7wPA61kp+inw+XZuojQrEti/Z916HkD5MabpeuH1vzNYjDMz31r0KNDFLSc5FMiFEqfMV8Fu/X5+feG0BOX0fEw/Jv1SGiH97pMQvBorFhTLGEbTcFjEcQxCeVnhR/i0MWfB4eWusk7p5O752gnsSH1PoZeta5/9fX20jDiIbLAYPYx3pT8ol1O0LtoNxUgpl4mkZQUqq7v33Heepc7Qn3ynrOapJqXSuIJQLL/Qen6VW0U2RB4Mjz5eXD+gZ1VBKDRym0MWi003OrzuX8JOWUUbrnxC5CKUzryZ+8ThyBDndzzLdKUjW/vzK0AXVq6qxTQ4JrA2ZMHBtQR4bJVIIrlr4JV/fwQySBRB4KNK0cxjlJHTkbrHPEATLgnLaBh+qDxELxw2nwF9n+ecqGyAJkEMLlSK5OeCTejsOGhwo/sFIo9tmcqFE/av1gfywypA6dedSVvowWKR0/dsmB+nyM6ISk7oYMgpn00A9KHfblXXn4NrY8aCbHixFH1xsrvjrfdmdtlIQnlancwpme8qwQ0lO9ZwCYE3t1KlAehutNOjTLc8bzs4HF/2PDYcCOUHZVarOxbSlw6KxLM+rVBnR+ljLjaH+raGCic4d807NW6oDBVQQSRe4N+zFtLZmeenFugwGk9EODv18xnRb79ZTdF8SKiT3265pVpx6wjJIstj3bEe5/jEExGU70c7yo3luQnKtRcYm6p8unTa4wrJMThxI+VOvg5zxLwoHFF1QP5486ZRYxdVVZEleKCNeA08lo8b20KPOwb+0NaB7GURNN1C5SPFMLPlOHlNY/x4M7tX7LoIBv7UX650k/PWZdwmw0Ufagm26B/7kk4XmaMoBaggmbpN/sit1J1pz1l4yujbuVagzRvHLb/idE78n462x2QDxX2Tr6mn9RM4ZiQzh35iU/FlY6soiEu7N1pKejHnP63bzLERSv6ikK36abmHVz+eT/Hpgm9rhCy9a8YXQtFoW8VeM+NscBI0GyNqBCFrBbP6PAysTXEcC6HVAE1o8ha/IJ8K8LJ02oRlq+eJ3jF0BZk6nObTRweTgiFartjp9mGRkhYZNMg1kFpx36aKDbaz0hV+ho0Fr8t0+7D3/ky7XQz1k36XN/7kS31dV//8Qg9h0Q+248/sVoHo7l1V1VaIj/Vquzs17gIrqpyDJnW4ijZe0ZFBCPkEpBcY6j+Eb8/5HnYdP4i+1AGJG1+fl4BqNxSbEJ5Cuc2qBSzNfg+cfL+bi6bP/Ge8tkE9SCUmKF4dNBx//xG2kWyQa0MV5ul2zfcgSt3EPguSuPii7BQ1gB9AjGK3CUDO2if7jjSAyxObbl2O95J1xShrCrgzshfkfe2F99iJNbA4xttAHANdbxT/tdEmNnCcMRmcoLJZ8W4NuW3lOIOAJKtx1Wwg/y2vF6j7XRxkzR5UF/xMw+5kjR51Pbq2oVmj6rLrcHWDmfxysIXPwjJY+KoM0nE4cXP7e7bMMVTsMkc2xTNpsKKuqmZzBpRll978p9K7bfNO1lr9T3NOqWMj93za5ifh326n/os3uaUN3tokGIe+AOZJm5zDtqr2IAVY1q8ihXcRxUWmZAfiXsID0Ma6964hdJfBa0zyBQVMlZcAbYeaHPcXqZDNEkqd2TgMBMGH7NPQAWxIh8hLRO6d0/gh+E7OFKndZBUvC94GQz2+GjYZk9gOEax48N6+tQJZGZpdbNXKTo7PShycwFlVKkm18S9udMaSYbBoUS50PvbxPda+aWGgFtWdzouMcguBo7wrc9ozzf3fHvWZa0VOeGDL2hWqVoU/327l7VpFjnwCwCT3I0DqqLMqslUzF0uwudXtsagITeWvOvZA6AcN9czyId0g/DWwosOkt4xuNFGLcJS12CT10SV0KhUvLbohBTnxosh7bjmIy9RZgsXjVZ3/ZNxJBoJcFCQqV8J24urmZbsX+Q7da2CWH12cutSlmHC1oq1o1Txb3ar025ENJFf87JiNcpgY/BWlC87nz4LI9qb+SlEVl7kfelhPTXiAiU2fTr+AX3V+VUsPv2PYPrGtRi4deGugGqfxSWHF9pp3dtTVEaX31WfPpCjDxiFodVWXCjiYyZoBXeWikiMlNOt54+WRLPYVebQRqb5AwDGp/AUqJsCnSfSnEGSFWWQ8tG5gCVpG2rvdXIi9pikJ6aH/a0o9/FUlpZFcbAI1G7Vt3s/QWnIkdLUq8+0SVBN0GYDzq6qbBgfG4Z2zseeX15ko6MqhcBSYPzSQfhBJpCyUAleWUDkLVj8hYX0+laDxMyN5tF43Ed7EHAAOOQk/q1tjqbVOA7i1yc3AXpyC4MbnMs5INkkmUY/f0AU9k8x0DkEzG0TBG680sf7to6Puz1wsNsvR+Ao76qWA1wSTTNkb9zw/GgLGMZGAvDEISPlaW00nB29XD/C8resg1YgCyjfukQ+SECWbtuOe+zlQmtsT4PSGB7cvhQd7PHeTryQLvnkpi61aKNYiBa6X8T19fiJIknHpe4ZwSPtbaQO8UrhNlym02kn40xQj9rDd/B1gW1cWN1uTtxmcnjw/nrwAwOEn5m0BWau3Owxe/FwjKecshRVoVQQAvjMLtb0fV+k4V5TXMTQb5t6LFKuPOv2L0Ysk3hTSde2m3VsJ16H7uPyHjsWPnkpLfSxKGH+7A/AtfW+GQs2mYn4fDNknQLH++8LdkVd4+XtSPg2y0jfqT9mKk3xz512lVkaT92eQWt16KR7a2ibdFK9aHtcQWYcRV8nH4/IK+P5J6JjjlPBKWosmwCMD/I9wqtE0Ce58BT+7t/WTiQDkEJazVfOeuck62SCC1jGj82X7Q1izc0zv08cqIi0Gm5UT7ryOoHYCPxTgq5mBWATGp1ZkTkL7ipmlWPmPQmOJOGX+kEtuPXtG6bHtGEfTmdwsk2idIF9hX7mePFPogfxopga8csMIWH4i6F8Mpf9qaGhPf6c87Yfc+jDp5K58bfcwuWHC2cve+JLeoRJFoTel18G0Ss9lCC/Kep+N6IogAcN9VikfS47zrB795xNS6oREd4y9T/6hk87KFquNTedhry+32M/gtN8KLZAMcV+vxfyYlZ8zBi2us7McBZ+ppGGqgV6y9lHdo2p4MygSO6xAnLj2fDI5DlbRtGfYlKhyclJeAzAg1Hng8b2bN1oz7U006eMhq+rPIJx6+O5okMBh2JSoj8p/wO7Oqegq8kwmNncHIaeiXGnw76AxVUDSbSFCL1+y6rLBj/NhSD84dk6SL/54Vyss1hX3lVXy5B2VMoLSnBHaINCchCECUK3IYRKRnIGDU6v2ytxtbK2JYBqJE+uCXWXAnfQjH190dzjD63R59AKuWqW6SAi04x9n5utZBG+3hwfWdf70o7g8yDxX1Dog5INxoE273gjusf78gyTNS7SH6L/6MEM0PrRf+DApG1pB/VqcX/VEAgOhr8Z7jHtj+ExBeftyRtvT6salYpN6cdy4isIZSTJcHS+2xWMvCejWC2xLAQMxrLMev+82mL9cb1Ys8KKyga1ef1h/5onTEpNtxSbHjN/f8RseubvtMLRraFRxbQWjKdEUvmDC2V3I3UWU3OD8EnAv2npDqi+u4kkVUOdMsXjRmgeFdeJD+H4V1VR2m5Bas6yyxrMeuRCNwHi6lvz5WPC+fk2Jo3GwkflNrC+osvTGf6OBcLYuKjpG2BJVKeEHzV4TFcMLJtY1d1cXzfGP2XGu6Flmt0FnC6BmDACNlcNRYYh1guLn6s4We8xPZsgBw9OaGJPHBlVWIVDbnKllx26LH+HAsyw3z0JkNaxG5xaePdQpgzJHUJRFMZaAqZA72utRmCIdFs/qw33e3fe24G79D98iUaCOD+/w18zEtU1EE3/fIwDy5WkraOT+BxbnvygDAUwx/vKahpF5hI0TsYLAfv4/bmx2NzCvXyM3JutSDTfKBskr4dsmZcT7NRdWWzoAIHefb/snsUE9PqceDHLhznDLXo253HL/qaat/1No0huW996AR0ApCtFO9ExRXY4amNsEBD4rYUj7EsuJIEhkBFo7RzejZhxDiv/mrJ2g5XZoi04FQ5bmUucRBeR1692U3x/kMFYtTG98PcVNcyoKkvv6H2vAX+CXE7R/VAE3xaBUIPiWXZw7vAjAIfH+AF7/B/vZksdDit5buRUisMVRlZAuDmrdgfwY+LoOJULkLvH2JRM64jWPI7izPwJqkyhSPujbgBvr8q4cVutw+1sAXDLiak+/Sd4k3jce94i1IUSYU5IQL2NGkgahLU3+nb1mD6bNqaN+hTbvLs1fRZTfIyo1zR+lb4zY5O+Z0M6iP7gWjsLtqh0MrZ2DzG6JjWvThHhvuIBVtQt9JWgtb9PAzCLTt06luI2yHyb054geaafUl9mkoNCn9szMWE/H8pafohcNPQguFsu/u34ldWUkeizYXv4MA2CnjFPdmQDJBEQ1TLFxo6CFABvUxpVynuqyyAG9cJFaDGFVdQ6jFb1Vhr3dIOuuo6dlbYEPy6Yt/LFIYLmb3gTK4PIGMJKaAOnT4vXpnVppUKCpr25lQlSLF0KrESdvtshkexNYc3LqKtaotVp/GsXJ6V4YBfiMsliOBk76Nw/5cSWGruLIf/oO1B5W4YYqTMZ1Q4X1Wj5nvzqdxibhog7gONi2TD9CyxqdTmF/AXQPdMcobbgv0RZz0p65oUWYs45sYln6UekXQNMFlx5FDFgwC9XP2f97sZYBMfyVsORkSX+RdQcx2L3fg9VTZTbafkGEkJZ/sTVrRLNiTaklPlLFuktLVFaIf16q1655IIB3lD34v84+YGQvYzE+woj9ohc5Wm8xQ2tgwP6wdfIwJ0E5Syyh+QDSHBLv4WC1b7MX/IqvyhN0QtoHetOcD6kohgqa1BnmFiecC9QHrWW/AqNhkC2HK09xw4XK98v07jFzSoBuAk4njjkVICekOVG1xiOTu+m7wW3UjRWCk4zYAym2DQOBonE4COdC3QVexG9Pz4FCHoKCgxCfJrBy9jRM/fQ4veKWtwmiOpRa2zDPCLR9f0noOgHrKxMt81RUcdYS97POiy+Lui1gWBhU65IYR5PFwHWRPzCD10AJntwUBoqAFGn55kvr67lpCgrK+TMKEml3EWgdtg3OToAIMjzsfx/y/KuJ+RrgRUszh51H1jlnZF93hs/NtmVlUR2lEVE7YeDneK1tcD19k+2NZvyXgJTp73XxH4uixRf25ZPuTRiISwcJ1Lm2MuBk8ljtzobLq9D0M66d4ZIdyUjLyrg19zg1JbtUD4Hq+P/ZtJOk5KnZPoIDAZ8jjdOH2g0QjUDf4h6A1HYReBpyDSxja1J+VvDl0/HTH6IJlkAR2iLE0tFKvv4fdxKXaQiwfM//DmYOyGeMJCJjH6OrWN03pMFhCUa90eec85pyRtYebfTUQWLf13Qlj1c28WCAOp72VZqZE09UjfRV2v5aD02nFsbvQ7R3LJbQRzX3uFBmwqAd5g1YYSJNNRlPM2vL59SMOBiCBO9x7ViOO6UK8jPpDhR8nLTzOF1Qdl7JigAoNMXP6NCqyHHg4TAecoNlfeL/YB+0OigDEBG5vYVNkBk70mw/VEidFbvOYGCZoo/WjJ5Odwdz3PQV/IOQn9b8BeyTdjZmL5z4nwEBOLWnkvd8xP8Wa2uB5V5aCQAvlXu9S1LiGhpCCCJ/pi9tZDaD0bfJ9ObiFCH/OOUQzwPTc6WEX/YUtSNYEQZ2iIdsazR2ilJyIdw5D5Yq9Q3V6VAJq7wYWpYenw+CE4id3/pJr5oxZkjrRGnBEsiwhueVVVO1z5g6RI6wAfi7ZL1tuAiMl5vsIEsqM3L1wLxl8XOf1W4vRQz9r93axE5Tmeeprua52hatsxLSKF+sSx13keRF5bpkbvOfs7wNumVXsOohKzGp7ABSOkSfUyO7gqIizCOtxsNtUNmcp2CntMqJTaQqfk5S3rgwzUg7+Y7W+fLhDKTkz+JmDaGB3YB0OisnYtore8VJ7wNfYNyyxye4rDmXDSPhHQejLQXIeyrE92jYue63exSgNm+yWoUEPlVgwBaPRhBYq+QemIfQ8AjWjeVfyVbCD0pWwN17EmLp9ebEDOLj+9Qk+UwRItFy8clrleGylE71NYgHvJRuk5gyWyvIvG05ohmD8XLm+NZGO1FCM+aar7wPMZgThApRSUwAsmHzSx4M+bS3AL87YLsymWsDgcZWmRhdVchNdMPKoS6tFGqylpbKq+O65ELR5LWRFDore61u/6FBzQ+7UoG+vJnfMAnFvuYwEKPNMghV/oqj+q99nemNwbTl5qicVf0Nu6+hlFB/TkHhau0xY1B6a0T3Ka3TKVSPsvm33ANIvoyNUoA9OIBtarrTioDkVWGqLfMgg71LLDFdPI8bAa/JWNzk6bUFYDJaWqR/d31Q1beyTpoXbbiYS1BaNVwMFGzHURrxRUBGBo+nVVbUzQ0xXDQ9zBkSOTuLC0oR6Z40yOO/urhply5uTtr2hThto05DXwvoENIra5oyxtmj+A/PhV0WWcCwdY7rJKZxghiq4ZDfhvxykR0yjvdG34AzJKbWE0g3SdTlnJVjziB/JdKlToJkQ18xEv1QmIyqpltBiE10uSeDhL2B+OfNAWHl1n3vfV4bMcYiHXwOMF+fSbYO6pac4Ex7af/h1UQi9owC7jvZghGUE99t9I6jjvsGcqXUNcAWVJ4AH7bRVzJV0VG89bTYzXVD2OfakJ4+NIaxrLB+72qW0l3VSQRKW35Vry3CpRlYeZJj6Zzos2RgsHm3ymT869qKM6zGGHl6tm/ZIa98SKame0VZ7b7JgHgg+y0zjhdHuhl0VSNDVd53fNpER9UoIoansctyejgFsHw5q5mBlrhoD7YWO11JLYUycz3H/FWt649AwaYYoIjdyJVAqpYcMVnS24asiK45j5GJ0+1hku8x0LHKOI+iCVQ9xl5wA3rAG2NDb2fleajkyry2kywaYrgrRuezhaso1U2l3qaJExvCNhpIkeCcpiSrIaTF3f86dRU0ksyy4kZjO9/ZSrJyO0JtqfpPxidHp0uGWruA69cPzDleA9wvI6CpxutjAAcTAmR3Dgpp+yBGqLfCTOsxCIR/FowBd6g3qhxwB83+aWPFHbSqmMZ+pT6po1G3fF7ItCnYbbT13YnoBJWR/+zW3QtCpNQNyEQ/GTymIqWhogTxvCBabbPaE1ZCaBh7eZbBk89/g5SXDebdr1HNZ2MqL+LlnzNxtuREnSl+Uf7GNscAqEtj6FBMXV2muvqpFcozXP3uMm2mEAH4I8rqvEE/08iXOH14dHo8//ZtLlMDnYhNM7qshLTqpI1ioHERwOwgLVDHahNznWn1NAVkQojInAOkCa+lQcN7Zj4kuNJGM7zyW88zDBxiR0fqXRGxV/hzcAirULaKzso3UNHYihfxE/pPmj1L9Mg8bKszpFT4wT6CU28TQ2qHiI8ALIpGM3ENAqpSBSGOgF6h8ZKihkjA+IokvtGp9+miY2EQmDWjTRA5xjm+V0heqX3MAOJe806Pug7CNZhkfMVwkHjENv0eH1Zj9WWO95FyvG+V6VoiqT5xrjgFDsQQtdLEQmMvT7YC3G1HscMzJKd0ZtGtTdnqEfn7t5rnbm27uwL6rx/d3uPS2Ax/Kr24dyuKrS+cosneDWAWh1CW9jz0S1/ykRhjsB9ZqadBiFqQeqnrzbGJErQLf5CDkZGSzBDKtBF2HvZPLVc7qkSjmnnMXg+trDd1j8Fo8FNF3+VNfAj/1nfjjwxOZUknuh8Kd+ryIBbD8H5QeQaZLAyescEhErWPpyr4jj8dU70degSokDUgcT8vTaHpBG9B5sZIj+Ho6L2SUxetjro2D44Wj1hOSrk8RWP3RDZpQTPof5rOcQtoRRx0zA0PEbzb4yVCRuRsUQEH/TVxEMgEhKVR4dOSNTZ6CpThsLyxzdh44NW0zXIXEcEMfyM3SyCQxCM2vX8LwEaVgTmKIFXRNHD49URLrmce0GKRb0DEQ4F57bKv9D52xoGgGnFgvfMtKAdmTDEuVIOgyC/SWuzG+XW30GfWC6AO+gUb2zRe2Rv5kcXr7bDY1uIAc28mJLgxaNicYXoqlhTY5QW+j/FK+5aqUZHyU9MNYAvkEhAfY/b+pI792VZsRoDf8DNx1QyZvqUoYRvWmNwzHl9ovRGuQc36wcnFsoJ75naoTJW7AM8dKB0Vta5G8DV/9cuSPU9VeNExI1e4J+3KAE7HTifmNgSHyRpiq4Y5L9La+uut0KgNJdxDp44mCTC+VBFnfv5pWdS5nCAm/C77u/NN3qGbaqUCIpRy7vcaBBfuAy4vyRCuxDwMVPszBr6ho2Iizixw2U9c8u0MCTkOy7OymxMXTsHStHpcln6Ho+E5q+yuHGh1dE+5GssZ8VqDQBT0sIEYgsQ8bosun7kqPyfRDHrC+QgDlirKxtTn+Nmg4h3SA0TDo60kVXW2/K7CROjJQkMBQrDnp5Du7ty/Ak5YIOMEd/JXPYSS2a6KCNwkvp6UM1xD28vajOA3+/B7vW60mR1SWO3KhD102UO0zoUYB9TxJhokpbTn1Gjvpl9Eov2zJq26lssxNjwREUQBd4kqhFH/r4A3N0NU0ecjLUmIX4GJXhDayZSmDveKtDglpRGjotkI1z5SM0oAlKgpu/79BYzIZkkPwN6Jzl0rtlT9caaNLOSfVFCMUGA9h5X0d49shTYUTjXu38g/lBk5J9tOQ3qkOPQzhT2irfYKNCulGZuIWZWNI6CPhm6cuISUOOquF2BGltUIUseKWLN1A/nYVK2xYi2oPWVZoZrMP6zk+yC37t1KAatoUtYyIyAY81Op4xGTsYJtK5FKCzMIxqqRWC25nzy0pKutRjp5+a6eJ9fLfIkGz7PUNUfO3NJw0NMJQvzmUeXVWyBf0YzmRQNwnoUopAbkp6bJVa7rnCd+5w86GdCNwoyZLzK+uCoalyfn3dWKIk+DtJrUvC0PN+qzVqIhGRJyXGTugDbXUk+KCFw89UmqB6WrM7D9xkaPKrEk1Iz1xUyfHwCuUQoqVI6ES4YFyTyc6+X4STmaP3K6IENP4KeLSIwIubUv0Epmhn4LavsXCxs5pySSP6CT/hIwWN/K/KRdteBlSSHod7x3YlQVdzWUA8KylEX1vlDcN/P6vyceFeFe9LXYQBuheS/gWIdi3w8glw75l7Cp9jOnKIDOFVRXbzz2WsntRAOAKZq9es5gX3aZiyj716mCran6VKv+1ElcYVoYe2OzCEMjSSuE9AyTjS88ETsmVnyHpWz9j9qHJwxpbvY+e7RZlU8Al11Zn+/+jQcRJ1ExS3gUsyakXFSpDp1mzucPyQde/2Y4oLFHw53g8YgRO3uevhveGETI4zpdU4w8hnHfOxUVX1u4K84T0F5Ggj1WM5bTRru52gnTz1g/XYyWY6QxlQ988ai/PbYJfwXe+feL/+9aV8DnvwAEd6OZCbYvdKsSOfoVf3mCHhPOWNPwtauP4PakWdaMnZLimLx2eVq6wybumunHrbTfhpWSichD9n7gZ4QQPCifFto7Bh6mHZwiZd0iXwGqTZsY4UOGgTlkHZ5/tUnhNGj0y5JdtC8uCCDiSyCR1vUSPGs8hjRi/iW2owhDaAcxlp2cMaVxlbGvMMIaNGFTQex8Xht3ZLlg4UtrVTnYGLKU6JJyTwDnJhwVs7cddh7J+3LxBH1LyArmUL8BEBhu1Hi+5VV81Xc45eWZY3xPgORV9MA31Z/muZ94HfPU+sqRkJWXdkwoHisF9QPKoOpuBQK5cYm0ZmYS530jFQW9FaazGCNeFcMREcmbFCR75f+EDUhyV6oUZq6e+lXP+0p7voS+ywwDzB3KvT7eYodU1djffYCZHzkNVyIlj7O54y0yd8kuc281EY9c3WtURhp1IEaFGk9gV0rOFP7gCfDeuIblz+8jllEUf8Py9woX2IHj4b6LyYK88Lg+5NRaY0ONYINZfczb1YEUkp/HkWkijvnSv7wy2G+mfAK0eW/DAi4WP+cWYxxyM//Wy3bjFqPxDuYPne2B7kZPQN5gXGj3i8vCvmgYaD+2DE9awOelK9k3kM3ajq80fQ7AK4KILNsPKsKHLlG1FQ+P9dgZVnJkP4TcRA7skmkbmTqzDf4NRDSd5RjcASHhjnSYstD9dbd0P+sQSFUsx8Bppo4bCeZlrjmrcGkTPFZv6YKOcz2/NXLbxx0NAy9P8mK+B8CxQeG8eJBT9C92nxBwoP9c2utlXMGZ0x4DndjyI5oQuaAkl12nMDNkAiiTwKrO9ta52/rgzQLTdSq0FcUQ37ACGu6rW7jhKT/szHKnaZ5n1LGUBb3g/8KkWzijOPsjFLheGDJeedjVJ/8fODf5onsYnOVgqD6D0wM28Iv3DvQG9Wo/SseQUr2BkHMDpmsQBoktyEpSh1SlxSo3PJzgCxbrjpEDo0Sx4QsUSVWYDCYJ7e75euze/+LTeD26uydhHr4CQP7sj6wPatCl3Jg24PWCLjgkRIdpUGuLU028IWsVnI2LkFsc2XL5+8LtYmKKGqvh1m3z9kyZEVSwSqgvszKkicopmAmhhLATo5PENwLJmwOk5Kvr6PBDi7nYx4nUWcRKKZniyY3t5Bo8+4OswpXU2eEFt4NccQMBsO/1/OEGXR3syaHQ8RYLaIK2dz00kzGwhyBSc1NTO0qg2wIWGKR5LI5NBO+LtHztAWarFdMz0eP5DXkX0A5Bi7lpkGfseG73c8bP2NYLBRFvIFEmwM4y3sOFfk30eR4gjrSIT8CP63cG5GwT5PbksZtPevUXyjZMBKCbJw0D13K+0L2MZPEANP/ty5tv36igX4H2PBGzqZe+UIckYlgTmGp2daKIbJQ8cDVHFfQg5C5QfHrbuOk/xKK3BEFVdDE+H7HvzR0Tlj9E7YE8gI/xref5BvNB5R2DC3GOHHG3YhTzrZUq1Uy1j54/4XJMMVPL3f8mPD1k0L18UjY0RcV/7RlaX6dQTWoo6m4R1/O+IJ2lNiv8GB6Xar8dQ/AOYy0Nu8kIf4llFDxu7K99wFWSgMK/4PlKTZPZkwmqovNfGhxlKhPsHqPmMi3fd0h2m0ZfklZSTpGFncJfozvMHNHVBU7ybyJneye5fRmJILF8JHuDagt2e3XzGHkYr76oUNL87kt5stuonuSt3TMKDawe3IeTX7HBJpms7yiSg711rVeFnZNzS3eLgUOHSZ5jahveRbSw888wAkwKP/XYRMjVo4Gq9SAnLHCdoD7iKzzl4gtusWTvqLy66Hnpi1EPV6ycGWwJhdJ9s6iJ4b2z5Lx9MgWIlWoPDMQMRrBotEAfBrsM7Idvo3Bgm0G26aFECUZuIoL/cj6wansisGZ+9NvXit59vHxwkPEL4mipm5qs9vQlAL26+L1XUWyCwW/H0wXl6PoexCCNJwDNru85wMtMYI4mustd+4b4v7jxkgibxIuvX8OAt26+aHQUkb/wqjvXtBg1wQtBChNxv4wXVcZVr6BEpDCd3AD6fg6lMmx/ShSrYnAiIKyFncy3kX9rpD1g0bvLKKHlFPusTlLu66hcJAV9jR33YcsRFzdYG65gs8gz8ZNcjFI+e6WbVChr6+CfZ8lKum8KAac5AP2jnUysCu8D7w9edKJix0y7YB7QAWBrQGgJcptDhtxY7n+0B8K8TFiMG62PYgewwhikZ26hnBaBu8Gsd6AuodZI2xxcnBYcnu5bAPVMKOtwmtWuXvMjsHQGtg+cJZWbNlKDV2ikpyPtuJquI6zAlNXriCCqsR4MADLLmgt+O/jMppb7GFhjHWGqN8YiAGJ0ydpaiXb4/zkY318MYgREZcY9GFBLuKpzZTPKTHk8mHXoy70CQbOQDiMe6IfzBGLpB1c+YuAQQdZMDvKjiGSxfIWq6wfJ9HM8pLKDR8yw1Qc9uEJl76AFmtw2WV5wMshi3rZz2JjUOq91ZHq2BkiIoDL5HWjElAay/hiJ7nONMduk/Z+ZjP6vC+htvWhyIMm1yPX59XoShbit91fwVk0IzLJmwyTs4LXOU2824LnNgX4i9wXOSg0hln5VMTrhTF07ZUPLT1oIFvFsjMqrXbBcbd68zoGK2KnRze52S/u502lKG8T9mOjT6i5vGx2GsGTQGYIo4u3Vxj8hcFvp08yolrEdr/nJ1tYWowKXOoUiWrjUwhg5gttT+Xyey88SmMyDYW8FbvktOZyt1sJ9Ln9OKpRscOaNOgGf26iWWcyRfvCkalcmb9nnfZEjGlLycIu6bw/UupjtZtLY7+Mbdsd7AtijKQ1psROIWgyaXBB+jT5CYP6JsuWXFl5UfSSO94yXMMBVhP7W6zEe8R5fNYRmq/lDU9i1rX6Q7QPXElrBAGUOxNFo2fOUKZPmQVMLIabhNoeI1D0HHw/49yjVYABPNLpSggMfwrZvXMivKT0PiQeNgMew9/jOcLjuqO2PDCUB9l1q8fd+uQbdf/JzDHFhgQt5Kb0duJIZzYULEVTtiNLmpiA8755JWYsQ7XNR/I4lFJDe9PzYX0qx7+lm3uuWQt1t4wpwiigCcQc4CbaY0KXcyN/DL5SeRwoS04HhUTcjIGzq5OMwibGN99/+o4SxqmtQU91w/DX4uUnkjBYEc0Ha4ndP0ApkvQB35YwHWSY8HVLaZvZvAU2yopvAxUbVuKFq69xwoJ8YuaEI6+HPdskg6gADLYsG9Xt0LShcatPJUx9JUoyDos66m32qLZj934mtnC2OK62JzonGcmS0ZfcuvzAFJwfOJHoAqDbc3EnEmCInSlihvMTtb987ge8Hgp//rOo1cLtqGg+ITKIF6wWnxE1mD+z1L4ZPoDOUBSVH1Zj4eM/zzAqbnA+JBRasrFDrIRFnsQpq3+e4gUATcjIPcPFWJ/u96g5EG30tA+mlU5w1u5wKj7qDx5/0kxq7CB7v2oJmAygzBQxu/voscrwYBWhc/c2xYBXsT+HCxyaINzl4nf/bWuai3mjilct+4cnVnsl7n3EJPPkR4Pwnt0PrfwKb10Bz4wkgGbty3BhqSNo7XNnbAY44qh/FjKj0p3SS6Bd7Ku29ckXz02jA6FJX8wJC9Kd36L7RhhVQpcWdgYfBgg516QVA2gfV63yx4naS9oZtTlGUemYudmJnau0Cy6PpMXL5Tij7c7fJy07MSnBcIw7+u74KqsWFWa4ltS2wYloW6HhhPGpEDPTZ8ZPrfBZiX+mZXUBpehgv2BnjcahQmwVq/vcyJqru1dMVe0zKbZWgYccwDlWtHsdbpIYHcnLCvIr6vlHrmHyAr1sDmNPRKwPwsrcd4zxNWfgRsV6dD9PIv8Tlo6ydBbYO8P3uJurPdceM2djpX+gcMLLp1Pcn5DuNw7YHcsIttluijCf0rRFlQBLs85mMbkv13pBbAcJF67wNNSM/tfQlUiXD1eufKwBvkgNgCQmPgfsMZTpymXyXLMR5QeeUhYJq7ILHBaDaYpH1fywTPeQGpZ1zUaassDw0ysJXBNrbuEanp+zmtwo0effyn99HgsOcf1f2UVRg8uyZx6omYpUMoAgQKeo2Y0onasoSxt5f2CXrkjg5C9bEFDLU0s81ZBU8QhiTQjcVIyU2O0cuj8XXKlD1Av4QYWzK2FFF+gh1cTc7y/UkmVAA+lLRarYFEIssMSnHoyD1KzduE0jpQSUPYHsaReTs9THwKjPheSHrk3Q6DjtTjtnURHefiAla5xJlIA7OM4DneTVZHUPwbu20PUek3MH1uuhNw+UrL3RrIeFCeSdFLofLmNrJclaMXYCoz3gnLF8/MycVAmXP9pLs+vYHiEwq30tdN77YJOO1oPnft4z9WgRIDkWDaER5kB2HjpD2sPiqKAlB6thAyy2eKgMGiVHZ8b0bQq4LLXbZMRTtNWRS5Zgfi02LUKn67rrjDXnfg/hfviwLO0j/njCpqaKc/Wcb2OMmGGVPQ+0LMwjkmL7TiMC8BdeDAZ/jr5UUrqo1w5PjOfwBHHK1vILSdOvDZjcokJtS9rTO3YsyNbM5VATtyKkVxTziKM0cz9J1acWOf1j5cv+QoNqMnizbpH3yg09ANq1D6hPJfMN/15ZepZ2GHVjfFsuxNVLg7CdXh0wif0sYhNUwEa3ZvW48NoceBgMdq6RZ6T9XrH2wFmV03Nerz/gDcK741yFpY0inRKTsdWDbBYh8mN5XwNo/rOCsq66hJWsVLdr8WS9RPqZZNaktCUALgifq35DQWpaSYxXYIhBk0gIMLm9hR0r7GYOAI5boLds6zqLRAxAMcG43d9LunpTmXvpJF8EMn2/5ujmfSaf5VbUF3ruv9UtZ8SdC2tmUMSimMChnobzbnLY0rP/jX9WYsB4iGf5o6cmlV+yF6YvJ4YeqrC7KyFT4DgeM7TPqdOZZYxtRSnBlexYS4A+Y3KHG6A3WS+84asyibX+384CGoSUaCmcIEfosrEIphBVVLunpq8OK+oDky+K7+/ypYVpSlLcUObVzbM9WTne6DE4Vy9/Tup+1cGdoPgn/h3Z3U+c75ZJtdONvxK10fr6Ro41tF4KkVJ8RaTx5zGgBbTmQbuukxoW1MnUJ2EW7uZ1PvbmWAGKQXmoGAdCiqHy8jGSC8TTXlGVq9zxpjhJQZLN590Te02p1x4vOvMRtmrwIa58VBgIApnjiHPonSFrOBlACbH6Tnu9j/L0bZdUbL95HAXQhSzynBYxO3Y6MyRkz2MP52kWB7XWuh/8XTInWAurVmFtC7gE3U8fN/DpFFZs2hh+hYjxjeQEboJiVT/mezjwQqKrfoy06ni9Qx4yj7ekb0SEKfNCdqFu5/NlVoEU/CHedOPO7sP3wsekInTnzW/PJyzfpGj4h0qxZITXYCwLyZOKAjQZtBXHTcaU7GqoCP+4ujws9GAlS0m7t6A/v8ykSc7PXlqphJYQa2csTEgKYeYpOX/zZvsRRQfJB6wRfCTKxji/ROB1674n+PppRYFtVnhED7qVQU0JQW6DXpRCoqnudj0c4wjlvQt5YvCp/oLBbVlypPVnGBxFQbPKz1V6YBjOE1XeJmGgT9Z6FhrMs9c0skIWYNJwHVljs7SKG9e59JeP4NaqrWGxkzXIVibK9H1lrvEwKZlsOAI/z+J3PvWJt0C5LOMoHfeZo5lz7iiHo1F/5niZECpFJhXcvgk+J0W0qA8AIhNC7mI3veRvezq6wlKFOf5fTc93qUOqrXdWYFFcMpcJd/GFhbbFlx0pbJA0MBO5KG077nAufx5mfUZjkCExfumkiw2og96ewZ+wFip2/hZQbeP7Jf71rrkQnIJoocNTbh6vevAKLitB5r2N0wIiJMcSQ6mrqbSBSkzM4RAuGEStqsKYdD3BHsTqkxDSY3O8lyqWCtGYfndobh91E7T0C4X6adcTBlVAp2eA5R0HjdAbNVBx7GZGb5VnpkNwu5JmpWtrqz4QK8Ahidk1LNdp7Rgj7aH59MGkszOrPonMk4INGkTaFmpcWmhBzFhye1WmJaRdJIgCTwtB6Ifkz9PXQdQPjQdP5ZZtzkQYa5kH7UTnReB2JyzX7iLu1dD0DYrK+SSpi325zjxDDyWEIIAPc7F8yEPZ4vxZkONmP72AJDpi2kZPhYy8Cb484npO8hZSi/3esFRRrVtR40po3j3alZ/SbNYHBJi84YViMDRdGHbfi4K4kInArZKTryZunih4zXbpnQEvRS7st5kLhWHjZkY0hpk75lMVIUS1h3Io25LZfO6KqiLGuPOtli4LpBdEgst9XnAWU5tbynLI30jTl4aJeKm3XbWAdfFTvLou94jtuJ5jpYg6A9oGE/LHROMuN6YnYaqBounNGaDkiG5WdPvsrr53qc+ahKMU4xLf2ov4h1b+1sgFdTvfl0dITc9RARsuIw7f/aCjklTdkvQ2KHrZRda+gwxhHG/EuHi80uBfWbTHPPUOGlAPV8dXnLH1B4kHtK9wBgUzuaGCgh/JTMdLJ4cpUprRJD/oo+tcp7YkPgc/cpG+dFvCBLk87X8lGmANOSgUBoxFM1edLbxksOPQXgxcNQJQEv9AyOoa7MtoaAMNzur885xhlr6q8k95VqOYVSkxdBZLyTSz1DwZrXltr4yZP3cq6VKCOZhXCuoaSptgqIvQx2VRXBrHHaBfZBv4kVMa5UWaf1CcSZbrYayNlrUD4t0nEcooVWJmIoF4Y9cmGjYwSv0C+5nb8thFy5Df6aETbm1TwdX4e8Oz8OfESDkgv7OCn66UumoYMYAfskfBOk1hKsygxwtj1cFJZcD08WQVJqncsPfeivHQsM3sCY3r3ZmH9OWQPVSo549ALNbSGQhd4zShDtpHqfR81fmF07CynO3QaLpfL/TZS1eQFJrv8QKb5YW0omXr76Km/P/adDAhvm6nhLYf0HWYKmKcQsIfD08+pG0Xgb/ZDPkbkEJ5gg+1mFEGEdjKuWW4QGuKWmqTTJjmyICjGpGJIGGnrOZkF+7/9tIg75FSdK9/7BsZZ7/RM22aSLQ7n3YvGE/ZhZJ3TBreB2UM4G87Z4nEWEj2r1lpEq4rdCKr+y3eRNBOsCYt5pkjatvORwlLQ2Hg6o7giCvpfZkYkTfCjtO7JacRwSd1F9B/7YD3yZJ6mo6Gb2SoJmd1RomQHxq91uU/Acrq45hTvL+lLeo9KegCAcA6MpWfmAhVfwJ1ktI5XYm6C0UtJYJi4sx9WZfK3vNAPNVjJ8mvhNg0JjEP7Jqx2viuP1dxzT8aYgn6i4aNB9WsR2DtgzWzQGJSYYqiQwJqQKqKANWON65eTBYszUktqjMo3jeippw47WciY/OaqYseqxMU8OZ68lX6Lo0eigJATIES8OxuEcXm3agJHdsxL3v2QDklitzbe7yrLYfMIAGml7sKsAf8IongGrN26eEFpKPrilNHAdTW/3IgpRhd5VmPR2sCZxrFYAbWVrimwySIGOjEhb2B1ZCSOGCJ8RO7629aS+6jtnY7szvdgV08Jc+b/zSld79wk5nyhoBp5ojfkZvuAuOrmorrrlABpsJJrzbaGkl5NjQcXOgeVfmvnAQ59otqG85pf7gukbktov5uhTsvPG3dMXGSysER6CJrvXPqtLrqkWeT669UhpSQG7pvLSEBJxhDMdG1qXKBMNEuxHHc+D6STweKPUj2b97GfoN03gc+HYXeBEbMAuM5vdYPca5rQR8DgAatfhPhMOMHmV59c7uW8VDX3kpwOy9CPE+XbVwvFaasRESSCkSwrBrb0ZqY2Mtu/EjGosVD+SdoxH3titT/taann9ELcu6Ud78/9pATjzEkQkbc1ecTVvTbv6Ang5dsGF2L9cBMM0xSGadWofMvdd3r03tKPAEKqfcIhR5xq66JJTentQwPbrXp/QKZVBHtbCU0AAbMt+8SvcFlBxugzJZHtCnyxKjX7pe8UTJaUTh2EmljJJFGmrwVG7Olgw76U8VryyxztNXtKUbEaYeuyO0n8Cbg/xy9OBj2gGxw1qgb3zxW4oV0aCb639UMG0b1gGgO56YmXpQxx0PpF8n6QVsoaAOcIntaBa3lxMklyoT42vuAlXth53srpMwHSeYikAPiIq2a+KVWeGYAoW42z3t3UVcdhkI9j6XIJUBLDCCGVWafMnaO0rAl9QlQfv64gX2Eyy++M/vlcIUDRTLjY0Ff+V0LchKJpnhp+4LJfzdF5moQhb5Fz3nm5925JjtZ7B9qeho1oEEWo/exHyLLG+PsFu501ZO46rm7yVwf165G+/4ZD2yT7ciDSi54UhuqdvPHmLllSXOltzj+cNZrNL8P6wau0yCme30Sl/rInJCzhurBWCAOtG4pptpwtvdkdEtwVZDGVq0s6z0i9HnrEva0ec1dMuiwXGQGo+0KBZP0fT0XMHlEkR5CNWkoi+jfTiMpteS6KxUpL8BDsj6NEbCivhMGrd3t0QoSVCZ0jcPomUp1FCxssMLYKo99Zsoj40+4r2qYuwIoyhKW0GplSEenP5i2XqntzCd4G9qmSs9A9ZSJ3fEt7Uga5BTLAdbnIoR3rWWnh2/TPvRapQhKNp/vRbfpQxvNlNQ+haEZVcw4oy75gpaMffWZBtgJvbxRIK+0Cad17TDc8KBiH4ONS48BZ5Eyq4YWzJBwn50ET4zwrp4gssRXH66+XpgiSnrEH0EKK7jkr5JzsNf6b5McPK3YNPJfnIankNA8t661Amw/RIorWn0Fm6VbwzQxGpy4wV33aF7r8fn6NsHxUZfupKQEsknUdJ/1o+AlBKH59FE++1Ku4UyGfJ98Q9k04aSQOJepBInBTlKkl2/sD/NWTLEA+vhkf4nyDGuQHkGYD8qB3EIuq8O62Fmfju+Znx2QTXJamBDcEJrt01IofbiB+HelWGlOjeRlufY4uBNHXnJSpzm06mprwhNdXLe7W4SMkkFNbD/4EQ4/h7lCpJGVD6XkKh+9Om8u7Y+1+gl4sQOcmrEmEFC1tAqwMAPU71gNgc6HeA6Me7MH6PPltgCEUKvHAgjyhHLSeH4cSb6lpEPDiGJsZkGweKO64CUweYAv0m6V48nm1cF9evn99xZojycg9xfMkEzgVPsiugK+qHbmVwIy8iq5gfKoQise6jzjyv73xPaIwTLDWdtBvi/fbV7pJ3xLe/um9YEIMRTAmGGDOJclPgrFJhyED6QctLTA7fxGM5RjEJK8pPUCfuKsVtb6tZFUF9TPbVQGwRXc3+uxsSit9fUQ8RltYiR64Kzt7YF3ClyNIdPJ2u2oS+P4Z8UcA3xBo87pa5HKq5px0s39KudSz1kTxW6WY/d9QrwB2OxwObgrdSILhETD8DhkKe1jg6slRjsHbdmk9w5tZiCrf4ABmwgAmb/R6ZEBnIQc7yBWrMMvFytx0rgb2+HnpNKe9s/7cdvkAPq2J6Srkb+9mBKhCO4NQs3moV4mPP8y5PhZcdxg04frRXjH1ZdUq34PpIRc46IXk9aGSQOETifJLWcZDfOmcP43Ks6oFHZo9qk1hRkJ9AWPqcQ8qJjkd5xaoqBm3Z+aI5Mnn2vAQWcmDzMdiYBLe6/jhNdEkomSo3uhDynntiiWzPq7ukSWvTcefs23hoTbfqPW01zr5bLDNm2F/yC+Tc+rOf3JT10DQkxmSsdDCuCFg7HThxiOgWH6JP8UpZvpTq7V1e6eUhXllc2oLgKoeYMt2jFowpCo4gDyuA4atdRiMDsro3yVOLivce5m6KGPh4ppJJF/84PgHUxgEWYPsYV08abBZiKbUozqJ6rKXNKldBz4dAXeikbgtOkQGxGER4ThZI97jSUgrXB/KEc3zBV1aWb4F66oxaYiulzLE1sD+J27piw052NNJ8vOP/uNfgo1bbnZ31PktM3FgFoUIPN64MvC/wak8h9WqC48W9UGYSN64GOCo56mA3jYgFNgRC2GiXI7Yh/9+MDEPuJVo5njt4/St6zh4EPCcOkNnG1+V3DwcxhQEembkyvoeoTsUX3LfhNOYrGsXSOzqRJuSqwGL73lQq9GXIzGZMeiSKBw+L23D7njv6V448y7Apwh2Ys/IPCxf3Z+z6dGztYrLXIm/BrL2+Kekxmbf5dxHXZw9cmSzyRvfxJIHNlQtqNxv+Sh6cEGdk0S9enCs8v3KcDazQt5bkkk0Dm4G+hZTqmZvkaKxKGf+j4+XlnAcs0CyUV6aApIxx+qMlhpCYrahijgN/thThKOD0t7DaH1bgfI4eS50pXscVbqkUywykc9bhaLiYfv0jyKVEqlzuYi5JJxlLJQWKIvdSfJPYlkxn70AOAs+cJLQMnwOmKqF1/muXVzk4oPvIXACHjWZwksMZETis6XSDHSsOTjdUdSAc3Q9GDyA0EJxjcA9pLrhbQdOw7qMCfJtFCWrmoePOjG4894kfOOjSl3XlfdRgQzpsf3WnyzTr8o0dmQcYwAteY8tgy5htRGxoNp+ln5oA5ff2fJqRskc3ICakf79NY3+oedHGgteHXylJXIx0etkqD/AjSPUamGRYT4+X7Ap60t+xMPPuwJJP0qIkQsCzMy/2PDdVJkn9i77tX/EKX5gzEtpS004aPN3ddkBeUU7YMCYOZghYeVv0DuBwO67rsitVB3tHjepderGP7NEGtr2IXa+ABJSaZSXy/WGYLJxgsBPlOly51YCvK+8p4MEOUCFLljMVrBOk6PTD0fpaepodkUeHUBpnCueU+aOHg/5Bc8km1vz6qUAJQu0XgcnXX6ZrLYM+6h3UhbHlTIDkzm2FAX0pS2vf6Vw2dY0zwfXBRMhahpqOuBdCjlmhMI6DCl+NAZ2gYOcfMSxKkoShxNoGEEqGctWwD/f/70MgB6Fhqv2g2HmeHOhxpseQt5Li5OKq4wJZg3BWHT3QmbvqIDsF+G3JEbkFQn+Se3nfWgRth53pbUIA/zP2yC6+s94UPAaT8KTVo/2BOKXokgG4kLxBL3bIE67cVcwvitBWsE7FftTS3ju0v/93I1OSqTbxFLML3Ws2Z07YpbacOZmuS5k1B3eumJYobgHHFKJsMoDtGuwlMBgSDIpYv6v3FyORyAoIMXHQ+yJ+mCJae0I9C+iCVuVNkqqQ/duEHMSPqptBLGUg5MVEK9B6MpZ6YPsdI8S+yEYj7c8EPhs0kM08JL+2Q11fNV1YGNd+5cvqauy8zwsVSlHXo7ZSthTgl3pCXaL0S/a9iMVQK5uK17oOBBBA5hGJk/RZSAevNj7iQuQEMXUSnQoRTSHpuhKXGMjcuBpjlXcG07jsz2RI2qnCjgGL4KT5Y6mVabIcXZruAjwzFq/5JT6vNovJg2XUl5CQf4Bbs8URZSA+0mI0053YTb0o++CMOh+ZEEzX2Kx7WY/t7PDFUD4S7Bx6EbpMEbjKm4hBbPf9+CetO3k8x3akw81BFVvQY7Yt5Hg/5Xi9L8QCmcFuFrnk7pAzGSSeKFFzkL1tI6Qig5GXf8Ja/O4K06Y7kX9/IsW7KpqFFEfEK1GibbCUWHWWGZh4xzo3N7Sxi+RuOlsezEgFi45RAN6WEgvl98taWAaMGtqKpnFnRo8UX4MzTh8xKHMWjx0zCTIAmpTC5MdGZkRbS+LFmVXoQASzHAfqmGwZhu12qmhm2PL4GnUAdyBikUBulZiKuy+abN785vciB8JXD8ESwJDikHQVikWdxcOzAkrR7+fRIQTga5ulmPcxBCtMu9Gn1hVVodM80zwMEp4P3wEsIl2rE+vg1TGaGiw0xsl2eyGsNE2n0Cxq1nPuBvNk502cbazFOSRZVlnfCu6j+fmF6c+nMhPz2LkLw8uswZNHzJdcuvg7VXq+CBqIou3lQEF9esD0d18ik2Mf5FXHqi9JR/FViYefEkiKqX1o5r14pVXgGRqSckRVEOw9ikrlWWVp2IjqcXiFWXkoFm7VIR94d1qztgdoMTctPBA6pSgHuC8gr2tBI+50lVrvSKZRM1lc27PvhH3DiIkxJx6HvtbcNIZI7Eh1SrzTrSomcKfptroUuONXfbYEN1fcORIZTSfY+af+AocSvmCfWyZIJ1DztV/K58Ok+e0u1d+vexDyLewMZLBoHYgdF2V2PI9/18U0QjJZjZg4O+IrThXo4Ry52ehkq8gKxHUbzpVLs5qDoYWbYAfPfdvdwVHNLpxVGWSM+mbT7LjtFx11gikXA+ipS+CeaiWWVtGgwziR8uNZQfUiP0CeiH31YKouvcoIX5PQQguOVmdk8omYGnZ9q+yvaYes7rWfE1wIyIg7CHgYcQ0/UszCdNQr6HzqIYBTtn7rJj04kKy677fEiEipxeI1ypFufirqeFH+pIVwz8uzu33CfvRSnS1muT1Vr93zWmXmUVeb16k54S5/vCdXI+Rc7cXXGkrUzcCy+NJzrxFO1tdhvdlDnfbptr1DF1qkwjHafrP/tZPWhYftCmgJp/MILlRAUB34iSsh73u4+9Aj8Ek5wPDa/mF2eTRqrSYdeLUndeRI2RouI30WrT+Im7Dp4nnyb2skbtbZ4cxmzsnnZSf8BFvH0Ll4SP4eVjivVlrU1vlllezhmFeOWurAWlo3/MjECn+CCEkJCCqO4TtCQDC9Vv4z/jquZbS/Z7TSEH7PA6R5lUUKtUUoUAjcOg1xVuMSR4WNGCaHlCWReq6PfL5K0Dr/Mr4m6fNFS8IsDVTRpwztBmkCJhi5YdV0gG/Niox7ZiS0KwArQLmsEj+84OiyfDzfflRpATuODG9Rf3bNoaxct4L0pJO8HbthyYPSimoa+v35I13j8C44fsXuGONUohTAPEgrISxMFcexK5kmr7afRuZefestoOT7os2e6Nyn8Ro7nike1YsuUlbNkNNMAOaANyI57cPjjqzZLoEDkRTed8V7H2VWgOhabU5s2Yd45Lvjx1rdk3o6Bf4/40fSBaSq5PPHTASMSidTaylQG2R6DqXYzbIQXFEbzq14yPODOaL0pZLT7nf5RxzQQEu7tmBa85i0kDWsZ36/KEyIIbM7bkCy0uf88UJk25cCwteCc0uzWQUy7sNZIsdW30wFYpQHweTgCRccqAI8U1LZeM34KTlWpk3OLRFBGilJqeShbQ8J6s23NKimU0YO8qZBrNe7ab3lCDzZtnjdFj+2uR9h5G0BnL32EWyBFEkZFSqsfNz5xub17f89KVtXNvpW7lydtm/FDjKQD2aeI7BbMux8kmir7+8KXKZlk0WVJKn9vrIXeXALc4xqy32Caug0td6mbwaaVZ2Hda3f8/4AmsOtWlIqk13xyaFndMeru5zPPAh5K04NC7iaM0arSIx8qX+XpHYySXETvvkGfssh2MH7VpGb+qvihq0BZ8Yz7k43j8Xled/F3jf9Z5CQb8IZVelYoCiRe3r4PzQowtlIQ7tqpMMv3ywH1EmyXd+W0WVnEOfy/mNNmfL5zpmCMSH3YRXPfeCCiEjbXPF4fsQ5MtakMxqEyNf0lcuvfxs0IwzWzpeJyV1L9YOq8WtqG9lwwrIZ/ElbxxFuqg4IlvekrXT131/ypz5QgFUg0XNDReqnWtZ4nul+mFUoN1FRh52fHbkqAKYxlxLFzEI9rFz306bBQiH3OnX3w8YilQpRq47lfQYNNvjvnpVvwQQFSeGYVGJNs697z2fcVEWeJRDtR1XuC1SFzu/HjoY0qGL9X/9aGpoJw90pAQoQHgRLkJLinmHgcPYufDcpXuS4Z6rrGOyb7Ar46Y2ce0KjolRBtKUiyoA/5tpRynqlePYlHoS9lcKE6aeUqCFbGngx+LfEGduhOSnQ31xfjJJy4RJogYgggWUlS6dfp0QyNIaXHnddiM3cBmNleiY3ANt5tX9D8mkrINKI2EauBCbL1a/Kcz61JD8sVVNaSpkFkshiH9ctk4asm0rySY2XdcwxeIrdGxzPywOJ/d7MlNr3ZrfaT87Flm984LpWUqVkAYmOkdqXgXH/CyL2bnt3Ggdm/yG7Jy+NtMqLH+KS4gJLh0E/Xq50/3a4T0SQPC781ys7Xwej4wqIRkYxztkEmPrsI9aZ+r9mCfBDFIYmJNmd+RBw4TTdLv8HObkBwNvwayK3Iw0lsZa4UkR+OyqWrWBNdN6ef92DoMtXlXZSo9x3gjqv0hAzw+N7YVtUeaJRxGHnMdskt9QODOJXN/WFoQ5RahuxRCzwBK5Mzd4iufnv4+Da6AEWtx2Y72zbCPBnLDd50bymE2SsYd+RglfmvZpyZIhra1YTDn+dy16az0rYzc6z774Gdmj92AIGCGd0hHba3oYsXpV6+pyv/TjOevfbz4ThBeYG2YwfWKAOJrO43wZSw4GzDi12NRxgkbmBdF0Xg/+jcipKlPi3wp+mwThNhPZaLMjr7fOO03NAFriwvcrhPpP5wjzw29EVVHeVlIdFAp9L92EAwUBn0dcormcKMcdJVI7vbndGgy2/b5to2WoQjy0jznwOnmVk3P9yhhoD9SFtvV38/dGlcUE/8iSILzms61qIyPwLpE2JiTAYtOtmUk7+xJxPbgwCuihU+Hm7KLLSZTc50Z2ORk3sIcWN4JRhdiD7wUbvioHC1PROws6pZ693XJ35FrppBp3rXqOT6bO1H1ChsTybqj0x+RwvNcqfEcp7Awdj4PNPAPHD1IMjIkjY7YFohh6m4GIduhCfTlK21Fcpz5Q/ti148TtggIN4bXMvG6v0/7fA/hq8cENmj2XEDYHZqDggNv81O0MBLQ1NZvER6GSqQRlagRYrMWfWDrxzyvWqgyz06MVaW9H56Go5VkHFjHjhSxkbctOwLv0329HN5fZT9lSSGKg/aNZprXJjYDlhLelr2Hcs3HcFj95iVIhpwB11zOavMoOT2gvoQeGp9UzCEYHvXLYOB+BKwUJB1YV6ecFLdE03idw9nUlfdl4YQNBAPTZt2WpbB87mpoFLdJl6ztCx0YXdI0xaSbm8jFV6+SrzQ0+XKGjZAeYsYxUTKa57uw7/D+b3GM3ZrsEeJKUehSCiVLwJeIlAxZ9YkpBwO4ULKlUGo+GuYD5eyDCp/Zy0M7wwoiAnkGpJ1WPi6sjh3oY1FBoD3f66D3MQswk9ybvaQCbjnS0tcymzYiEQ/wkCHxn4w0YYIIz95ewQM5W6Dp8x7Bash/BEBXnwsbRAhLlXjaRzq3f4PqGvZFqeY07dg+1JIY5rQ3JPQDhue+BfF8hEe5VKBp2Trz3pQMbJkMfPQ9YpVoVeXHAmHKxEBEbGccZwUdsPCmMlszfXg29y8gpmm3I4U7Xnf3H+yRDj4Ag+MAkIsgbk38a4+U3Dym7uZK0zQFQw94pzuMWh6xYxMnnN83oLIxbcsAyg4i0KXuDpV/IEwYObRv7FtuX3Gocv0pciRNaDxqtx0ghjAaow4ZvxIO2P6OOxjcZnZqUymdb0vgDT+ZjwCV7YcBO4DsiI4ECQjT/YTcAj2Z4ql7J+cUNRZfZFZNVahCXIkhxXhPOkKPRwvO5DiwWdTZLz4e5gUkuGPYDK5r5xlVK/aYkhAKtSKpyIJrNZOM+BQdHnNLkmhq+gOQVlOiMxrmnQs57TiJBQcWE40/lUPAQy2uDsJBbC97j+n8aszeNn1yWdEzK8cOepmhOPpM2dwWNp1+gUbwJDL48tjz8dH2YSJ4FUnGfIVx+xIhbfRyGtGu2UVD/K+nwGcyRR/47tXZObIvmdfIaXWpjn3SOQiM/zEIvftFX2r3GhPPNWxHnE1q+gVJvTOsJ7vZ9VO8IU/lUmMH3CiZDIHhWXpFkLuoB/K7RUVzn0h4GliWPAn5mjvdXaR/EXSBYk1vZQEm3UP6AfFgagltpCzFz02Hu2jGVAcWHoQIZ46X4nLkvw1/bn2IlvU5sKVpAhRGuJwkdrKxRmHqQWE91fDpXoW0paMSkuXbu/VNg1XPmWiIK+ZMy35SqQckpZ0xGghicuPvL2Fmp0AOBpUvlEd2wb6d9SZ2agShnHWt13fjH0f9ve57gxZuNkvxyO2popZMNV0MpcVZK0vbzVHzc341gMyeknnmqfqcuk2HeQCWLtXprLait+4Mydn4XM0fxagQ6ApnorFy/0Sp7WAgtWUr2fE9A6BrJnf5wSjZP9SQJk0M4a0RgQAnNDhbe6YJrKur8rJlKZPR4NHD83yAb+GvjhMucimi5lUQLYs1u+WDFIXOp1QphJKlfue/dJ6kD4Y/Lqq9+OJWHuB9VHBVgQBW+FUKe2c63ORlCfdWp7r0D4C+ewybSWK0jHybuzXQeiK3YUK059AuD6IJdHIAdDfW01VOCuDNOho2YvPMQLV2vnsUYv+etSh8x+fpZDaznhaDgGqEx9X3ohRvTnkJ/PWWAfIaULd2LvQauBmyYh7AFXbrrVUo915ua/rb11T+4P2ucenufGluKfYyiRsvn3ezHvLPoZ2yaQKjXJn7wSCu2h49ndjRfdKzPbe3TK4XBNltMtZtG9WuXLesiJnRpxpN63Lu2QJqxVhq3YrBYxbgHsFERaBB2rQQ1AMDXTs2hS+CsdDwSPbEYeAmSafwPq7Nc9jNCcH4jEOe888zaxB8OhVekTSN4iYJMwbv8rS5qug3AV5PH8if8m8HiKh3wZ7fI+v+eBw8em9itXnCchEKcWCG86EyGzb72D3ew29p9h1RXMevQ+4Oqp8QtsQs66KlOTg4QUCtwK9M4tK3ZG92BwAiK2lRiA2jIWx5OUQUWLdmB/PekxAFmfkMjDq/GC1BKSlnW3dAslo1ixWoIHoilfCM1VWyxjmmfWfpExaqWM+uKPf3bpZLqS69gViqLFLVC0L8MGALOjilm7vSF7KdOdnvlgVavVtTHi2/f5+lDDVx12A2qtW7bqEjOHMdfaZ1MAofnFW/qkWW68giJDlayyOaFKIRpgU5BWMwdCMMxmO7WqOwonrhtRQ68vwkMOSIOb2fvz9My5CPgWlk12oVMs49oAXktAvMtPGttWTcmJgFcyJRawBHU0gu3Aa1QAyjM7YfWGj0qVdB2pKH8PHkOXNyMXecGJajsW7Da3Vno+nG6aMJL+kKTa429TFhWSqxZtDnkH2jfsNn0tuCAp82Cvj2LtMSo93gyVpeXQeq+ABN6o/uj/nrfPWi9zJTryTO9j0g+uIq8UsEXOP6r8R2T65+IIYOrg7uQtDS4XFHZ8Ae8lO/P1e+5T5KzMNqISNOkKd1qE5ueBOUhzF9b0a618e3wxopqsxyIAZARaENTIMgKoEkhmztepukyZTrWqBLmLRDrhvmXrObReCU3viKJHkSAFv1MALTs7liaeyI/CMCP9bKdCcxX6iDqs/p7b8FMcaYK1xzVBKT53hsQ686LIY0SojHlzE3U8jdwj9WXsVw/Q5yD3tVGzZF71/JYPTT5THh2x/5V4tLUusP2bP6ogkglYgs+4jhIa2uSwNDSVrHrc1momUAx0N+UH9TuDjmZczDISGQOK6ZB7fgjgot2hgMdal4Uyf6Wxj4V4zURYZEVP697WshwencqBOubsmOFzdZ5VnUYDJOoe05qLUc2nzWAXSEdBTC0PJf0TluJm/KohRhV7AIb7aKF2xYr8K6yjBrRRVv9A+jW1YouXahIdgHzc1TVuSIvLbRQ8n+JFl0AT9wT2q+hSfrnY3vx6nbn5ERgIoBD4crdUJVbOw6+QqZGsVncUyiV5zQfNahaIagdvT5oATx94B9uQsaT3JdBCsoYxqwx7iR7UBYCRnz6KjtLBP/oCsChy03XAHHcdzS++C5G/66qc+RyxEKZxRYUo3eEMcVcoYHKv9KxlgP8hhpErYnKlSuYKFirNNFO1ttflb8ttKxcls03P1Rub/AldpHfYn7D8HsQeyAMk3fx2UcK1QvDmzSR+aaKKVcPGbfwgEqAlw4qx3kHSpf4zwAHGSt6QWJ9bzxZBGKaTuiIYWna1O/fFBLksjJYic0jVo3ISmGMW6hB0buyRZWYrrxCqThFgpsVzsNtvQHjyrA7u5rRnDKkyatxaCJ6tBWaBBvLbA67V1OElDcSlsdCRqXbsxAxBWLOTEVXYfAq+EKZhBOVVJKXh1YzTb86+k2TlER3SWOC3APWf76OWV2SJ8rUABT9gMZQzF6EVWumFa1P0gD1qBxHCIHCziA+ulK42Lb+HlcHu7H4vwbIFcvjcwuYWTcfYzbnHTHj3dHQHKwroeaFUaFX4b6Im2g2gBfEY3AYdAX7Z4JPgODMAf3oWOX7WRRNQsVZOtOqHAcoPdwGQ2Oyt7sHtvuEPQketC8s+YN018KNDjkMqe4nDBD1bQf3Cs1O/jzrEWRFzkuWMy/FDTKQpdI0MKCh+5Yha7hIm83OtP7y6zRLKzHU0I0xOkDGD7u364eD41D6tqrI1U0vzvnF18y8GjAf6YqhteUOner4FeSEVOymBZLCnLmP2HIAeG2UVYsMI7NvnKaeEm97eR+zM8aG8IbpipAwMHT8V/ggANgH9up8KVOIsmqvgaMIoltakf2xp4UwbEpH0Hp2V9IXBaNvegCyg7iM1ea458rEbaBqI3HWmAp7ZEjImMPYHvfIy4Fq7xANsakY8IxJ5zj+Rhzz0n8TBp7GeUPdygFwiXfClZiMDfgWZdazAMJPE7Owb4+29KqM7/lXgVnZ/k+HOr9DYCh6nmi99HxHlsPfX2ddBAx11iytTsJGQntn9lbvSJVPYu7bZLXeGDzuQyoYYvN9SiC3+cth0BHSB5WNDaM+JwFDuzHnE4D+G5RjwsGzfDhAZVkTLL8ScWHBrbiKjAwBtq92/8Vn81VrmhomQiwXw+pbE/oKCzR+3TviWVDd0kVaJht9clZVlN8F57zxJ8K82OEqPSG58+Wn56hSSX26nraRwy32afIZoqeWXlJvA/CljuawOTKJW/YXOBsfTIREQD8mbiDNXLDzbKm/O6wHU3b3BJZFEk0K90BNdxEzawY5GZV1ioFvZBSigRjCJWluC9ObWNdMg2RyyK4cVLFl5NIj4dpDNsg3odXfXVweqlwDaYYyr+XiMZXh7Fi23i7LjRKm1CEfEqIBRzWfGlmUvsxC5lGwluA7AcLxjv1i4VeVvQg/VIiUFGg2J2bXyHKVQFThpSWRpZmPlRyJNDz6tIXGfEi37tuYa7OvpwC2kKdHFZwAa6uAxUi/ZuMha1Kjati7FEeMUtKrJZMa3hy+EajfdO8YUGjdweFYqPRlWU6//MvR8tUaThosGTI1r6oCuLRFrQxEYnWiwcKsM5zAZ/gOe386U7U7IYxvC/0MpA2UXJYfJmuJ/b8Hjlc63Y/hPUQJEzdOp9SvVDWQZeAKNu3gaLOvxZtLd3ytDNiV/yXsYC5wDSdpcz3Y8HBDFpAu9Nvts1qXqp82xlpcOkeSEDp6560W8KAC+HCwrt28mSLBrn43TtnYvFAlu+apGjm8UyK0SfMZgUogUoa/oxqkBAiy79BiVlMy54qFgR0HhvulH0Jljo+EX0zAcDXZ+W+NqgJnv1gfwIskuN+c2769U83l6aF9ZEer8bxna7992+A4LOn+5oQ/I3xCEQ8Nv+0VKhy3lHWgrn6iQ9otPftuFkgFsQYsliLFIGKP+Cv8JdT/Z9mks6aP4/ZiZW4sEPqP981jlfPljwuUl8ka7w+8DbAhrjjsDdJXSTkH0ytzqS6Yhqf/E5cKLGKx9DN6yb1PnU3Q9yGjojtftp7xzuDE3UiFyE8csLrrbjbAINpAiBCkH+9PyI0bdfyX7li9y28hqBDG8Yk7YUP5kB8/G3TMijgcQ1KkpHy09qAs8iPLPCQcRtfpfHrMbcL5qO+l80UzK30NtBdyNHiHXdAqejHCpocOLI/Ji3yePEEDFrpuiiP5KGf/tc0OABmSl9Sg4fcMhq7kHFUOdtf6VZpQzQ7u6IDLSkyMaVNLFw4N+GkNLlzou9tWCIqvku/h0vjLa+tOZJrsrrUGWdMno4AuPm238sNx98LXuhpbIVejx9ohTBxPZKuGLCEbWg55jyehh9Jx9MwrNnoYv8e+nf2w25BX4m09xyYRAfnMUK8bS7OsptCEpAjuidFHNBB33xj/oVPLYY9Hr5Q4QpfBx0rf4LghlEL+xLyisy0ReVofrQE+6vqLK20rWMc5xNvjk4whHga4xxEz4Ax0CKpSVYs/wVnW6vdXYZ+xPwcDD7vCJTSriQSqwFWzpiEVtX+fjtO2bO1lCFyB0q8RX4XMhGpvxZ/TUo7zexgO3Pjjov3dThYbCL/3OHgXOYs4aUFOhNKt98eTmDetmU7Hf/h6/fNhdFGVocNHNnqvEfZh+dithJDil6u9poNNL0ytINZYwq6AVjMEzi1pC30IThbmSseUHBu+dykBi2mo1KJKFi/u/EPVyT3Hx3zmhzPFKnDB73T3R/m1/rAh7pOBUipH0+LfehYwYH4A7/CitTrOJjLy/CMzW9m0j+exX7V3MaWuKxawSxkl0Z6ghiKJrVmekav6wjQZt4JoSWIApfPLGT2pbIrJLoMRhLzOh5pEAp+o00jqm08jP8sPGpMwpIpT+IGYGCaSlgh797fR5skspvz5iBug/TwTORiEpk2G2H3iV1SpfoZNr5hXb6KsNk9enoTJAlbNu2GGraEj7eB5DQLSGyNZgV/YGWVAyYGAxgqQ3wKDa9VQltY80D/s+BjCUVDIHV2rm6EC631MYlG0Nlk722SfwRCQ3jIb56edboxF1Q2QPW/7cFZ1nnqe5/WaR1KSYYXMVQ3juGy2qOCXdMuaLwOgvRqxoJ3wr6d/k4eVUbI+L7GMKQDTPcDmAi8es1IwE29CaAHM6YNbYwjOSwz2TS9q8kK3k8r9GyTzE3toMBeHRHt553ogeLc0pSVCEtsZm6Dp7K3E3xnljtBcNbdQX5G0vHqppdXcr64Es2OLptSTbPDuZNhRpGuums2DGLevKyrGik2z8uBV65R2F9Ebi2hAQ+7TfTrKTpxJX3lSTgA+QVOBXWe7WfxhCRpCVAEkVgnWIOcn/iaHYw2e2nCpG1sRAFp0nVheowjib66MckOpFoh/r2KnEWrakZUcZ1Z/ytEIMeKQUFNssGpny+i6KW66lmgVTB8XOyuytgh7VtXIRdMQ+e68WWp8dyy1c6ro7oqOrhlEv7VdlurS+CvRrE6sh+Vk66R4lmRkTLPhON2wk+9RFLuJ6pIGImiRUA+FCfD3dqcz4MamNiQTKlvib3eqN5fIwNbMsiiJTbNU4Y4WV35Y0iu1i/MF2qsBjiVHQR+r7m2YrB4c4NUlkFpd4xY6geU5hWtuXaS+FraTG5+Z/yfcSJ3BIXPqgDx6HmYhmJ2ZGLhGsyDDgSFkY/aKCfVQ86EFG8p8KqMrsbEhi4dR8hhS6blX64kpeRzE+uCLmpaJ0Uqhj00aYMaXdZVhwYY8jzN86o+XPJgIPQ+vzZMUEN9NeChXTgjZM6fC6vuUMKFU+g0rJx3tp5V1MlSNY+5XEs6xk8FDnVgqw1cf6GXqCIl5XBGspR5UaVjM0y91lZBAJklndwoRRObhJf2WqT+s71nTssSmsJ++J6uSt/50U4+Qayzxw0LPTBXLadNL7DUOJbn4jtB28OuT+utrxAghgpQ1HAj+vmHukTpduCnW6r+MIXYDJyRTN0r36F8hvCScQLScp9OPSzj3hXIplAJQl1zFD9BWbDWduF07yXgq1CSWJwtMdf90TQ+n9uUn2ZBQTen2Szs4ZD5y4j86Dfe5RavZELNcOJxW68lq8og098MFOv4w6RNbuncjZVbMvagkXNHgjv8KdPW+oNgQD+l3r/svhZ8L2bHZYkZKdHsIg16MGPvFCP3LVpM6Q3WHfQ83sFLARvvq0+DKGvrscZESTVUGMWh4ShW3KbXeQffDENRex7awFjTekQOIJ12om5vMcw18yam7473UTpL5nekINDaL2ovamcJEBSYsYQBrICZVEiANJdq5sK6A7EItUJ4vzHcb+0AZRTR3I3++UpUUFZGtTTb0SIrK4bhMu9HRmTZxayEg8EK9b968C6WYsxzfm0sVHjCPrd36yY7cIMe1o1JtezW18Rb8K1r7GSuvHxvVUyrxVf4TbmoBjTt33bUog6hlTwAoadTM0nhvJ/3n1Jgt4B3LfajW3qYojwhuDGvihYzs4yXgI7Kkz2fTfKac7bVvgjvsmQJAHv3FAIWqoSDm+QyRRYWUIpOqBDjn+SB8OATIUldQH2kMQ2w9vBEVSNBYnJjSU/7FgQCvqa4Sa3IYyKzYxfCkm0l1ztuwhimqY14lvWRqLGBRoONGmoo97+U3XxcfE3Udyw+Alv8WmaJLqgOt/0ICaTv2EOkjnrTQNe0NKxbx2shq0yzoyRPK7gRHAGyasyl6fAqsATepGPASWMXqAx5ah6xz/H403Dmusj51TPexkKjWdtqReYPu9sI02FR43M+FWdr5HXI8l/m67Rl3uAqLFF96/oXYeV1M9gPL+OgcwwWxt+ko+1+q1e2444F0RL+fEfrF4M9sFLH8rIBo0y205OxHiWqQgKc8iWfqvf0GkltMWhJ176t8N//a7UmNgpNaG6AXFCIJzfQcLG5MiSk814F++jGeiYlQEWgiVnkvSZM5VDdnNOo4YqbkzOofVnFfz1Og2darrMAoqje08u4U9CX1a8YR3w92vLFtLdwxk3bJ5dV+2gQVzXloiSR254a5W+VYBB4uDDOwnvQGI57emKlWIoqAOylci8ejfbWCXrPdwczqwnuyyzBERc2Lxb0foP57esbmRUyudoI5RPgdQBqTMTWtd53nd0Yg6i/nhGg17kipYXvo9z8Ik1ld2Jwkx++ZszHNMKmXGi2I1TkBafsOVS6FMAygEM9dWxyKjE1PwTvtXNNS8rZbWvNpCaBeAqu5UDHGwQ4qsD1WDXGxU6bkGyyAzCz0+k9YdgR1fw2gHrJgGHlvDTZiXZXyNH3Q41vhMmGlJbvnSatCQ1Frwp4DqPpRKu8dh7bT+G15sS6R5Y67XrjFb6DFMmOvXA9hcMxWAa9t22H2pzqspcAiYcJzthkacB2CCbqtwROC+kNeLCCIP2tJ6b2B+w6l1wEYLgNsT3/7RvQYUx3gUK7t8x5FhJmqK3Lu7PY41IKSO8JfJLKNj/PdbGjX4WEHz4WxcJA5aR1r4LaHnbpgp6tK6JGMXk1I7j53FJ2eWBshaQCEvAAoVa82UW74gsrZmH3eUtVAnyAIbD06cKSHiAtCu2asx5d90cIVjwu7+lbiY3noM62IsG+bzbpaUQw8Ei24Fjm48kP3XXHES4wtVSZkY25KvI6cWdyD3p5896mjhSQEXioO17NM9shahJKPFJH4Ny9E4xD8UxwRojxmNs1bfOtWH0cKpjsJfcDuXnHQ18sODS/nMruNm9ocRASm4eI4/dVbSH5Td9Jnoz8/L8JFaraXcOxOuN5gesYSFvWOXyDIgp+KAyQkjR0XyryiRC5ErgiDrXHoTYKlGShoP35w0WuLPNOBQbPCVrh0c4FH/PfaWkLOuOoVjKMosJwDacB3vZv0IE8B3LAHTUaDJHBvuH4/NoDZ2BQydpZa5imVaMi697Iw4hxMC5uIg9tm8mxkrWDUL9lp0xR8Zp20qPzpJ0IlFJxggTiWuMuN4fFUHOy1BE23S5cSfzFD36OjktD+hRYBWuHpMZ0Nopn57GgrtdwG4nD5wNpRzPtA/kZ+q5HorjSaz2co+z88q07GvJqp9QanpOp5euOy/Bcd8eEh1l7oAG0LturG7h/bJYz8Daph6Ms7SrfCEzws8oNNZtgx18qeeztVJWabO5kciQF4x+WSw0+72k7HjvSEQ36KtnAfofH/KxTRmE5ACX3NPqHq6fMBEG0s6Tobq2EZFnDVF5gZkVkTZN0K+q9QcRfNnZMahuI9e9/t2kM02N4trjZy8jzwcgneA60mU7onwovU85BWkcc9nKwaWmy1O2BsG0chNAGD+ZVnlRANEqQZQp7j2hr49WUQjXOBRyANssYQekImjO+aIv24BBdVoOv7HxsBEdue+4rZgG0y/OhE3jB9B8s2eQx2i5ZHuQSOypL+ECZ1Egqx4EhoXClP7G045s0wwTxFgjm69QE2V+yOozCPcy88f3Q1TN9YhZSBeAQZMcyC+cVSMVlI1IoV1e9UeGeSTWf0dQczx6pp8nGJg5KLi0hfTDwK9lPy9J/ct+e+9RbegT5UwVIYleQ18RGMFLKqo4YqE7HFAvmOsde7e1l8P0TAdYXrFnMREPXOrB/pkOfW9AAHs6WeU+AmOxK+Mrdx5Zs/ihjpDEQ+PwxjW7p4h26kFjIQ1PyghqDH4nuPo6LNVtnBI1TSUWs2neCxVGJvWU2HVxgzHo78EucC+qSr5OJtFu34obSfQZploSws/6uZljYsZG6bqMrA8v8huAkVIk93J8Kb+nMua/pP6ovBHxirKN5ZIlK4ni7HTsbd8lXyzYqprJYhFvL7fJODEHV0WCSxUutWAFIjfQU/Tzuy9uA4ZrN7OL18C0p2vAkeubn6v99o2ssfhIHpQJGzg2ZSNHNMxgWTjlDoZ9n+wkA9ZKLjAoMBPK3Ir+qedPOuiMpnMr/RAX6ooAn84mPb7sf0H6KeeRtK5kcsh+bV07MFJE3yfAopRIKlQgOYji4yIBpbP9TZM+K39q+HRRi4DkxsRmG2y3JAkIe16Rn3ddJxRChtzBwjjh35VFjm4v9fDsY6mtCa9bw48Lof6JhrRL3DqHbhnWcnZtei6ryMSKWKytExcUoTpVKLatWvkeGfz48ME4EQHSfDWJPmluHTfHHk9u7vJ4cUOwfJik4pm+zarDiu1ShJ1KDUxA11jz7QEfA79Ce4nMoCGWmBB8Nj2bg2ozxn+sSdeFyzHqSKlX7XWPj3OKbWpdaz2zUuE4GchasJ4FgCl8XtB5NSKPK0bmY6PbnuuWiXgSOTLAFZsEDhfitnnRooegr1PHbAx1SIvhaywpjPVDhHM+Bv43PxeLJrRxkTjsL62U+ETKSTiHOT1cETVcKpqx2IAUYGYOGPp1R8XJ5WbQIDOLb1QLtjPWaIYDmmh5z8HcNqSY7GA+CP05/ZptK9e6f3eebE43xs2zPC/Y4XENvRB6tveYvhSYzGUVSSW8MeaaBiaO3Odc/ao+Aq1ibsaxik4afgX6WJFcNYzNL+nF7nxzkeLaVuqbbzutpZ9PLTIqJna/cV64kuIwlVa9+lzRCr9PeiDjtcsWdeoEaJ3lFZnnEiHd/MEpl7Krtum32r02+cOOLo/ER5ghpYge83FZAwjL0MjHKu3nra/Q8GX5SkfCaNJhiexC3ybGt5ZwwTaMg2Z0sAqDZ69GWH0+HkhAnWyFmQy3x3vYAURjYaVlS0sA4WNwGhXOGidRL1T4kOMyyb9waIElzTso0zqhQaaFhxaISViNsvdHdBYPigYxea85B59FbOup8H9Xqx40zmNNb6TGxHdmOjRoRDoubFUBmCC8SEgusBLdBS+Q6DrRCiJvkPA2Bsreiar8/YUrFMh2ogcfiVUTXKQSTPKABo1ByeDb5T3m284xv8YuLXM1Zt5DCKot51xaqKVXFln3AeX62gtuZUTF1M8OwWoGR2u3asuJPQBNaJxxlQdtDNT6adiPtCCEEAjPkQWc+N+cZxQISmePp5hpqJSJucuDHUeErCvWNOl3NhXeJ1CvlZze3E/4F9GLMdsROPE3D3Sv2RSpoMKlC9JZeQyJqapzLzYPs09KTnxEnQ8G8utv8N59lvrssvc9S9PpgPggBw23+ON/D9KF+jlmThDATXjZplyu4oipzN6QE4t1RZDFMrZr/Isr+L99NBrvXCBzXaupIIfVJON/E+aXJ2DkCp+xoB1gZD4No0sc2fWgl72qtsTMDzSYGaJ1ISx83xPthsXg7vRTkIpm9Ax8d/18o3QEcS8HQHbYI5sbEH2dkYf+xZ2nZ22tislWHsBYcbjb5x5u2l2e3u3lhGorQr1unHsu4JWG5j9PozakwPhPRvHjZgn3NmdQXUVOxqvM0l0yW44snfR1myMFjNxRed5UDS9hK17HZnrPZm7B0ErDy9xlc4RVKy6nhyWAeZIqit+k13mm9jOjdPzfQm2tt5JF+SQB+kt8xZoKEgkLElSNGGTqYgD1If2lBPza5G8+m9wl+fd3NJxn6TGNQM5MB8zKtk1pirIU+PgRe/36zWgoGrVS2zfb0NdU67pYTw/+VIEQXDfSXLz0US/KBQScQlm7jnSHJpjmpCvWyhrvzKGwRDvQoMnvz98CGsb5ZaC/RiXqBb1P1oSuKBTSobgg6ARzC8rBLHJx7sz5J82AztS0A5l4hceL6gQv+K8gGyTZjTSh+VeOV4WtWnuTlx6xHvTW1Qy745lx7+XGzOq63gjMZ7I+/Q6dZwbEkf4p3/FDijg+pHXi2zVoMJL27RmcN2HsnRWZfKUA3Eau5aZvPMOvBq7rVLAD09YbGqxex8XwShn34ewmUPUjAwLDiG0qbXxl2kWQ+9ErFrOYf1zdpHOLfwXTFeWYH5ichhqb1IfYsE2K7APkWqL+5bqbWzDYZe4upjbWO5MEz5Y4i+rIf9Sw0t8LSGXRT4eJSyruclyGrJTMCckWxxgbrMTrYtdB9Yiair08QWi+yZdmOs7/DIxGZWgqd61R7z8eWVUUMyLlohueEKOLJRxHnGdeAXvp74wKRGjsMzKlSPgz4U9SgoG04fJHzG+xFMknYK4z/oRNL+SZHZKA4wHp6CCccGtTE2fBW7j7N28hFFv3WOndWRrA6q7tfn2NkNDNoDmkNpX8Xy1goy0FEaQWt9b2efeMucFVzpI1+/8wGXUxbv2KHNO/Ni2MsFlTUBrxBB0Ep3ptuSAIMNU4Xa4aC1bXrTFbNtDqIYixXIoQ3NJx5j/Ai+3tdwFoE09gGzVLkY6GqdmlalP8zT0XmDtJnxSCZa7/d84G0PikIaZw0dMECVn+YzJe/6ZOT8lCLTmkYNCJhsXuHLTT26YBfrJI6aD75XmDLKaiUJVzY2YseP3YxtuCbD4pmvI3uoLtwwe6/wGQThbFAcofOLuwH9vsolOBZg9vCEhVC8emPtypnZJyO400ncCkKNKSJ40dbiayvdtpdSSUNAjXLRQdKsWvRutl9aejfmjFT85yaiPWSmn8Yp9DtPbyzz/yxzuCoYFAh6sjJT5r2sCkvTH/R2cWzVQF0PQBuEwUvlJnniLcjnirMrh/X/26y7u9D05wVmirhM2K3NJREi3dz5DiMkDlsFFk0KHWYnKSJLZ3I/Bj1DS9f1p8jZeBXOtgDH3p7pWXH/hCLBBihrHphYGeYag6cbPLV+rbkUUUmmrFVg7/7FSsiMhSBxj0nY69ZlsZF83WKC3HvCZohkt4X5M5ERiU5rjORvC/WU3NDJ1CXOGfmLfxwUMGrYGR3nyOUg7X+u1xnybWeH/B1D8bB/EBdDP1Cb1bwU2+R2YSZh/8Hke7X0DIFxSTA/5PdmC+gs5JWBFRabf6Mauew+MoD5CW5odxQl0k3QHuCItCDpzXYyI1gYWCjUVP4vFYGOdzkgi7x5ltABFx6tUmkHnEeF8ubPD7ThsblhU+SWDDq9cOpS80WGCPQreAk023kwG0BXXjlFGwkkgQTiqaFM1kt9wsjOF8rtqPsZSgRCgesTJ/3uo+dVaylyYSsaXtRTua14u3bYmwnmcxRwfPiKNf7ApU83Lb6udjEopR7kXMpPjLMAblbcoBEMWZa3QOTdASjR07uljSAb+d0Bv26CA4JvmZcHU1MY/ZKdu6MTzNqaX1TVRwbd2GihJdViHLrpdjvQ8uneNZ1yyqepwsnmHGTl3tSTskXoT3z4/EKvoAe2W/bbXBotwKGNTC9aMXYL1+sdWwNN3evs/+8WswP+M0z3RTLCHHMy7zDKBadpK9qAx8Ipvh1A5r9R05NdYRSRDwf7LbcPDE9sfKESBLZIEa/cjHjtgknZp+N4PkcJm1ESqXMhtM7IBMb3Z+dv/NmHoF/x12plZX7p/3WtuyLNLdFpjuabqHB8w1Gk4tNByfygI3EawTtkgeQTTvxOvOYfYl8mZReurHwMeiHnFyPIeUA0tXEVrRAQd/kABmWaRRTpyfd5+mnLt9M9WB1NTKNwGBb5uGvbPhi2xiZoF1mKHnGTMx3ZtXcLgcdiCpgi0wD4VMgzfvl7VPx4UVc5WK6+yd8sMPUpFo3HGRV4wh7vpRB4b1j+OLdG/ZB4N6bwmc0AeHYyNERBYe9eMu26Ldv1qug56GiiAlVO9yYRWKq2yTqJMmAQk6duWmJGZ1TxSClq9fjB7ZJ8n4JEAhRchu+gFu3Fs5yBlazEQSaHIjVJ+bzQ6KB052RWPVR1poSbvymPxOghhtSfAgNPklCmEoLIiQLLMDHJfkZdX7uMrtKm8s+lMGVjmd0bKNOVwvYVgXnK2YSlW7bgxlUiZJld8eYQsjlkqVMXiu2k6pxjX4+lX7dlvzd6u/Nwua0q/jPby8aTl1M2hUB6/5DQiQ1CQzJQbNM/2pNFOV+VmJ7MlGEg9E4bFdhCZeOUEhLL7iwn5SQ55syQxI/krqPkfDIpW2yqCN5oNL+cGr9Z8NTDU4ONZShBMHjfwWhW8YjNo27/uDngaoV9NFlhW0dzou7u6F6ukUMJwpluzF5rGfr6UDywfB7SiphkbzzA3E3xzbAhd5Ld2dxkaUV7mDp+PvU5+EDIssqxovDxNKnxQAmkdHQpCt6i/CRjOom0AOaLQt7GsnUJ1oTSbnd5u7y3CyiG91xevkif4diLXuNHzkKnW+MjW5HcAFzIzOMED2aS+oJindwvdas5ezirdCWw8lQ04iIISUjBfaqFH/R5iSiSx44Rf+Rr1oDSyrt71x0jeYIalG0jrM1UJW+X/llhVekyb1aCuu0YD2MoQb6Q+NBorkSglKOBCuTKDyxky0X55IEdTqW4lqc00OzL0j5fK2AE2gA1IcX8GfrM7Mf7QciHBZON4555Xj50Dc+i8e6NYbkeU3NH1IzHxMCG3Bz7Jlfh8DxsrBOU3zIPloYZEICTjXMFU1e8TC4KWUxLZKEnluKPwXcbpDZrVQtqIX58r2sbkLYQeuv2TylQ9+VXHfPy6y/UIqLmOsLeB0NWJLb0qf2ofkQkyQrGKW9o4i8W08j0T01CQujvoukyD/Td8RNEYyDBrLCAnu726vtBfoa8nmSDGvfLZurmu7FiJb7MinSpE/CbgXa6N9M/DXbxIORqLCY13pyIEpHYUVgr4OdC76WMbiksT4lgwiMK5t4h6g6Ljg1uDJy1j7pMrOm6dmJDQ1YZSf9f2lWc0M88ndnuH4tLoGbhycSeHutp8SrdVNHHm4byoOTSBc4vOYMgyJQ06eZ4/E5LRcGlzNyKwIZGptVMD/1OILJD4p2vihl8NO+b3lI2NmKPPUUxjIggMpw7Pkhhf24Tf2rCQOHBW1PGx5Ybqw1bXvub7neZFzTzS0+q3luvtNM39I1PWBvrd5Foj8SKPVgkgfKzbatLogAqSuEQsfxspEEL0MoUH6ieaEnoL0S9a/uKCjziEVH1YhOCwMUb0ZcehUo+STPeBH6hyoQlhf0Jua3lxFHRCZxYeDBUx3Bzwk2GuAXnHDes5ZdkQno7K9xY2Z0Ffl76f4XtE7Mhu0I31KME/vr1DOKdL82TAkCFBCaPKDasP/UtMfwez/Ml0li2dwEzKG+WhwiYTritndHBqoK8XefR5RIJ5Ej0vyjlpXSny1a55nm3igqhiYUNNEQlBafcOdBtpM3YblrvxgLgNJtyZv4AMy2Km0cz2Gzw6OiGAE1p/Vx9zUR+qIVuyPXWGwIYNrcXiJwS2NjcCNJPfx8eovtFK+m49OUdLbi/vG0c6VTB4HwCFQkXMUSLgnkb07xtUP/c3QESe82BWPY6yULsV9pVXdpUrkB1/v7H/q1f01GQLGQsfr8APbgabV33rKGVnsvU66liTdKs5+wCompvkn5vSaeg/DG1JrQpK2B4V1dse9dXcLkMd/bfRKAQp+1SMGFrAzNNapNMjXkC+eHHc6VZ1DCx9FiLA1DqoCKNu/nAETKh5W9gbQINoixE8LfWcSdsJsxxHn0Z9bvVW06KNS9j4HDL4XVKNGnzCdz8afGGrcq/XM7FcBbW0UGpHAmntL7MUynMaeqgyuxuX33EHlLUTAOSyk5r4VlX2wnMUkg/hpgsvhGa2uGa4IwTQBtqvJeRT9eYEZsHP69xJFFilu/7eDOqG4kjYWjbQjZw8LMSIgijXxEzaB37i6asTl0WvC8dK4AS6NSWtOQyCnYK5yZfhBMEQOKmQXXMHUFW98wZwKlsTwPmIUNOw09cJGdHn7bW7HAhbT08Y5srsLHDHkN1pWdQHv2j/lIb8YlpZFxKF7u8Px2HYzPs2w4OQHr0hWw4DcHZlIPX88j40d4MaIlmRfa1RFfBU5e3lno31J/tF9Y3SXuiVIiacLNW3qfJtqPDumUtNmU2Auj6jnP5yuZShuKGx4Bwlb/hqRbYjz6gpA03qW9dV8P3RAO4YBbEnabO90RMjYFrKHcZyE4g/DPmV0VNBLsYOLoGo+kxmXRrXr+Z6gwdy5wMCftGcX08VKl1ROXxYjEJ3pgDvDFfJQp3hF2UC8yvaTR4w94xFtb8ixAtDagAnnzdUZSBdcshiy2ENBQjxsJbDaTTqrR7zQDyuCEzq/xhYWBl9I/OdAimvAR2rYK4iBrU63+Ifsezxk56PXbUdsbB5LhjHtxCS+zUHpk9GINMPBX9ZNV2zRxKgmNEQmIbfNapoyyGcms+OXGULR79ZGiX1AZI/l8zlB7mpPY8JZIw4aXBBSdVUVAqfzCWmDaNeHWPH3DO2EXtL/BwZRgZVJz9NueOr6RhzyV+EQRdb2eryZUHc54arTYZ75Zskhv4OhhkYSStsVW1YvrvqU7lCk2CzpcpuOK6ZKNfzJEExRRhoPYTkoNYF1rbdkc9TzFp+btrzs8UMnklTSBRVEzHXG3gMKbjKXNsKaFktKfHPVEJxwn08B8Nje6yIqA6v/NsOROfodvigvZk7vuWaCwRPQpcmGGZyTpBk9xSXe7yTyJJdenUVl3StDgiowCDFS+jIQor6M+xRGfSWanowoMHe3yiYwA/mze2luYuC6UbBlKXkbANQjQNZyGAtR1Ee5Ez2EfApKTDtIL5AvDpsUphFnRAm2H/iXptHIiGfunMdZPQQ3B7zNfsUD3mTfyJiN2yz20mc8P+07rqtWjDqhfbPnvn0/+3u8Lwld/lLzs35ve0wsoKiiN8M1FP4PW3SgJQRhJywWX5+hfKlD2OhNPH+sV5SNGULcBtiobzkfo69RNHHp6jdH4jtd3KA8D1Y6GTtoZxhn8s8BFF2RnDywNkErtyOmYpe+TVkYfrUC4z2557z/Laocngx+9uZL/Y5foEUsb/at1zH39yfR358+h7ljlAEbhA1DLKxnnO2fH9lMzAqfGEny1+uyGFLVtJk5oTdFT6DwMNGyQjmwK6QZdh8IwoZEHgMeBYm2l1BZbiC7+dCT7ujwY4WAgTfNjn0uUrsNELF0f7rTAnx+md6YuRRqb62tiyn+Gx8gOakzgqIrVnphVLS6SnJUNMyZEHvW7ZQUu+uOlo2gdb5Z2yKu2T5fNeso52WVYKKJ7PvAi66IWKi4tWR+Uw1+JnYM9FaFlL8X5VjMGMoKaZvtDPwBhI3wYn1CJWaIzSvrJX+OMaVLBYmiJKPCgTzezg1gv3vykotBsTRvTfwza8Dx8FTCnNEbM6En65iVAu6mIAc+LRm6GYrHkj76mWCAU+0h5QFjd1wU6n9D9Jtywg99AmrNQGDpGFWkkFTtUmu5MMgraBUSZcI6Oawaf2fgnloh8UICYxNRsrSsNLzIAqHOlNCRTf+thbXle896sL2QzXB6h1Dw+abc02Pwh89eCZFwFTTWPT2ziPaGI4y5dgMhNYHZnZPT5833k2ecc313I2ILqTKvwAFWtDAetQK5whd1IY4E6Qcc+B1WbTOaHaAQPFiV2u6UArvyBcPROn7HSWyDDEpqZe8YLwafCiBKUYPbhaIv1/ZwXl+jFsEuEyy40vjdH5BFMRJeyQ+Rp+AV/OqXhaMkNaYXK8a4rzbwlCMtyhJITAnenADgpGbQomxZB34kHAEJBjjazmSGsZ3EDzR/1+T7pQ5QjQp4SKfcqckDxOYbVNqRee3ENuwXnUFjEBEf3vbVc8QBjFmvDLzETUhkvAqvs7mqMKTdoBBHHSA1NLn2ioPi/LCwavJ/l0saYtMkRH3NTYgFjUqg5vT+VZZ+tZ4zq23SIl7GOhZJaTBmSujKbGBl2bOyQ8RM2Y0cx0bgxlkr4nsjh614RPXXtX6tZEV41h3DfbXE2mms5q5hm5la6oWnnPtITDcpT4J+ALV3TKF7994EWHS90gtI6KtzF2Mvh60vTf2z3Ple8EMWlKvHnkAxrw9po8TeKFdhTqb8QYF+XvD9TqUus+1pNOJ+oIi6F6RusmuE5TXA6iKgPZ7TElXguMaSCSFu8+UWyp5epTi73WavozLdz5ymsouJtAPv5heU+BYGzXexNla9NxPfGDoQZxot6WSslNvZufgZkYwO9d505Pyw/vTH9LYlblQlaCi8u8LQIghwKfUxARSNsZY9Z7RWtNz4xfU3pVbJJici00T+ug3m+72aedYMGb/HOoMJgb+fUIL1jK7kOayMAQcZF7dcpyfx+nSzZGNn+O/zaoIq/oD4hx8x6Ajhy9rjPdtk6kM4ZtNWqSwETGQIC6FII5shFQb/DDMu6y8thUf6Eszv4g5X8QZ1GuqH7jGTRhR0YN05DWHP+DtxQIReNOujjZtB+BzZGkhS0vVvQKMn6ccot3TayoywifK6gH27bbXhMyeNP1wQVsE1+cT+T8XTrtG939nta8YdLrkzltpzRdsw4TFDwwMQ9LPqINyUZnNQEnRkrfpOiVvqX+WDhIEdLZ8RNggQwueCsa55YItfSikkUayrOGVwbtDRc1qy2sZp9vB1u4XTMiZlPS6SWMMTgQwBcGiqlfpnmtBGOoIX6YE0lJNTG0dH8L4GDC6cqIKY4xrDqzIj4Tie8pnu2nqcrz7gWPH/LglaojX8CK1ucOLxZSD9O+8kQfvJlGLcHTl7TGCh7tn7VQxdpttLXbgo+bfivfvkKgQfCIl+Nf1BxE6H0mWGMiOVqK7cq0Auv0WLbjo8mU2V6oQIrvTljopRtIm9tsWtji5C6tbIk6vyRKIljMNXyapTJyq50jXjrmRU8nzIO+/Ed7mfQY8BXyM2zazNHaFSaaH2ePk1Sq7FJzY5Y0GGM8TJ42WBGo40LD8B8Ab8O7O4JMLzhKdgKrQy3f9Xn6vWuzE0wI3wkWt0NLzRQ+Cq+6k2lN4PA4R9fMdVxqdaBHaKzKHa4K2GaD+iZJoS2v/iyr4I5YoOQkL/B8wjspPT9IGG10tZhA91LzxTuXw/WR67lmHYee2AtrDyCH8a6umyrGTRhIzsSJGptolpJepm1i33JXdMFJghZcNFTDZ3ZGIXSJ0DI/wE9wS1zAxrkfT9cRZhU8bRvhXid7iXrll/gn4beZnHeG6Xlls/m3tktJiFH9p42BW1RS5IsI3AwHF890ejWYumDzJT4YVV7RA/j5nTw2AX1bJDPLZioLOF3oD2LfnoiMlFh2NeReJr+cPhlB7d+kRU741lryTSGZZP4gjpYNXM3EnpLkIEF06Yj8l5IZ8viKllDAlQ0VrF8fDGlWF62SjGoVt8KRLMOv70yl8okXch7q/wivsBRBmKKQiHPBp+/Jxgo+rm0bLiYHY7KYyp8lMgGh9sDk8IwOQm2pU55n7czQohxZ4bTLfrzPnMZB+8dGdoUYnVFsugUlQef/vjLZMrDsRixKSaCA8HOZHlkVfFrCWNWnI1GNujh26XbHG525FvcKPd0d42UPJ5SxOLUeTsraootBPiuXUib67T3kJz7BU50i9/ajAX1rAK38736cEQjVsqPUdZoEz6VnHWvvKgcSV9AEMsbjswGmNzL9w8gkNaCiGX10sQ0HrwESC7UWinpwTZpkI+wqfpsB9xagWMC7qtB0DIFrM3wzI3mrbt0y3CjpOjQBPAtgaxVdCnIF8A7snwjiefY70vjeSkmm9dndUqdugVuPkOCIfBFHMs5tLxmxBDjY1JjpOdixXWrzdi7BvtGYbwHY2Ffn3VqqXsT9tkD5Ubo2zZFAxv1xoiM7JzqHXvF++pNxup/P6j3J7huLTHH4yHh0bBXu4U66Vx8Q2D0SAfzUCQxxnPd/XpU4eLtjoNDY2fOv90HYjWhg+mLweIPnUEjj7vkMIWfLRcHi+ryYKW9+Pdj7cfOX5fbvVNupNQLP7Z4UMQwusuNOic7+XXQTdXERuRDI9kzvMOYB84XNYo9cW5lQNPmI4lrE7Zq5pjBxqXQgXoE2OGU8Y6owIH0rWgik+seLJMFxPbqcJESSsp494L5CUtaeyMpf1vVZkGHp0KOeMvCWV3lsukjPuZ3pTS+UUs2jM3edQV+yMCnNE60+/4Psrz+H2TUfPYoIQr3+q9EoSwNmzIw0yoXCdMAKsLuLXVL4NTyzhZwVP9Zm6c0+VDlmAlifG9/JI7Ih7svPdQtUpF9sr3yH3f5pemdM0TKztbduxVQPKfN7Ssiq4SYbj+jZrmOONxSFRBljI6SHalQTooUBOVQfo3au11idRMrC+uWnZ0mqbimdsz+8Xc0CpyOLUfqdaQdPzFtPy3jhKnIqEKPQ6q3520qthhHA+K0+cOEJ10Sb6m88NdgxAHLWqFrT5YQ/O8nwYBp3ItGYFaTT+IeXc4C6oXDQZ0B8SbmoJwzMu3l/Ss+w0oWSEb8ygZLyBOWtAHHN8H5aXBWGQju/bkiC6YlJ3k6nw54yQdAC5wgJtBQOv4V5g7lR/A7GVzBWJGMSrHk/63FApQmczq+bP8FyECUWdIg+w6vwpHTTUqI51321y9sm2KuBRC8jnFsrsEL3Z3cSb1CYIGEesJMyQHTbSn9jayPeX6IqY5EMK5LIYKVwPlyoLYtAydBDJ7SAlVResZRXvocOoQOOyag5VKZo/jrqE6KH56m6ZMDj41Ba7dJTNEe7ShR8Kld4vtttZZp/CMqSc5W0GbeU9bLoDhA7y+vTbRiFo3KxeH15zBPFEIE6RNG3wcezkrCsKXtaUVoTg+1g/Nxhxc7VDEU6Ha0NPQE0exeftQL0vMDccOKnrHE+aEUpBd8Vcku/qKQXEHGClxDxSeHQvKO/8ErUr1gmWuCTI/osXHfrcJP0IbPPH3+3fH9nEGVqiwJv3ktTE7Tx4BGKIhb4VSo6ISMvXBjK5nC1AKg5sB353mQiUcZbnUtO6vi6dUsoi/syVj96Ha1kzU0xB8fzFSUn3T1yGzw7c6BFDlbWZx4I+0CWwdzJjmNYaozHuj/CD0HJEp2gbRuIwA8QzeZs/B1GOAj4mRoviIZkW6Sz1izCl/F8OyJZDMXWlzZVrt7NVlszuTwmDAvIz72QR62s1EP3B35aIi7ndwM5WVhyCIvQpa+z6WAKXgHV1fodwULN2N0JL3BW1DtUMhQmRpkVY9dKPsKdDREWY7Q6D8/N2ND5+WUqeDA0k2upD1sM3Heh6JMpJGxjsHsrl5DgYjMKEIAA44BLyFkv9deHO33Jj9FEv1TRsOyFAhrFtzxnhAsZgczBOwMXJv/SnAqGFiObhj+qOSeko3FF+Yn+gj0hYszzL8JFPZI6JUOgqyusoqOKlJKZiXDa8aY42bKdpOv+7bkyGv99Ttd0RwnW2U+Ee6sujP51FgYn3hE1EXs+/OC3OX/nFzOwdEkA7u0ENRi2ErCr47Z0j+LglUQOELdmMKxUyUd1q9NUT3xsQkixiu6F/D7splDfOzoKNuddz4+ZS9KgBteS3jJ/K/DLfcvd12Zc+IxVl4usXOj1p/cSPKkgSjVaqdcUF1/O4cJC4ybP7ta08SAR6KZmYJp06tpgwKPpXfKOd8rRst+thKupCoojS607YJp2RRRm1TCe/Jepn7ajaabhqbpBaFyO5N6tdBo3dO+MVp1nM+x6NUMu8YXxx19dOHm970nC1dzBOdeHFFf/jYJgx+wY5LAUAg6ZCXvlrYhfEdLD9GwPM6D6UxRhmSHB0lzfwZY/YuDFZkohU4/mcukAoDOABDstHqv2K6meGrHWlE2r0xIzYOzl084F1gnPCXPL9Z3Bh0YMJlGc65QfzZKJ4AMI9s74opUMwwksA+lD0/IxYMtUv+8+qj0lfDwULeFSdg8RVMHlWKt4E5IeYsP8roAJ4+OyGodSWvjoK66/LpKxt77qFyyf8v/1MHtMlfMp2cdks429ld6rtKURh4VtCRWZPpoyZx15LKqURB0XM2e557ato8dk+FbmVKWP3xgAYzz3PckldcJaj8dOUtd7qGWsMelRn8MZt5fHodxrmyfx/ePzhJkk9X/IRP43C4hPDoRlzFBPvWhTq9FU+j052Val0yJhyocMvbZc0/aJumGB9C1gA9JHFjx4swBayw2k8W7Z9hjBlc86Rr7QM5HnoxfEkGbijm1xDPDIiPS3aO6q2RUws/N593THhP+sAaomE1jO/1N4AYWcSRONvkMCGsDE2EibegfmJv/M7rS1hsGtUV0fc9QH6E3pyA/tXYu3WG2EP5KZvWbcDYTgN6yzO4MM0EPJVbPaBh9Yrvt9e2Rq67vNfmeYoWowjQGKVgNAtSMX2exrZpHZhUhX+Phyk4xqx0z+PcwCm+KiKY8eWgbT72Sw2TH/bRVg+a+dwZ/vaRzYyZDmpRhU8WdCB/Ia2HmEsZyL00Eboi0jkqN86UlWxKPFSBnSgPxbDBZMrAGSA30+lFQGeiLM0Yn56L9XxFTdG3ZvMlgxRlZMDky2ifMsKQxOMm5OGhJErvj/AM9WDFPh8BnPKyJKBubb/f99ld5cKUB49EtnSR4NOq6OnL9HUZAtlo1ndHuM/2S7iiM6kroqREcyjNGPfjv854kqpHo7s7p0lqHqdn64KU8vhM7jP51S4YLpsn4sTg70LPpje0bJ+CfwL6BZxvjmDeIr3KOcAZqLx3Avro/4ZWIEOa6Ez9QqXoWnD2HqfhnqYZvqwBbDNj2eLD8Nmj9bBe3ZemlI5gMmxMcOvOOwbwjnuMo8NnaohlqPLDjWKTpO/fXoP8x+7CAsmQTTU3mtnQWBfgicEgp5W6erg6MhrmTzGsJLAjqJh0L07NivLUO1sHJVOgRtUYm7AXD+WYIYmBNqtetTznvmSO9BqzBr0npKHKD4YdDj/e/KxZVFTImRAvlhEuPeMkoMXrXzAGCdmlwsOPAlTiyTg0l1ipBf2yg1bkD9U73HOqwSsxDQ+x2AlCQLAskAnfxhddkZSMGIAZzIRhg3SvRmThIhUMuDtGVCNkWQgc/aNdprMqy3ZMhNOk2y+MNSNmGA0eBhRPOvngfRUzM/qS8EJJDKX0PWkLaD5IgBO8RhNuYTpxUihIWwTDuiSDxYyKkrkSXTgebtWbp6ftNKIAQ8trYt6hodYC/zsLoA3c+Sjhj/xeoHgLblN81tC0eu0AXkZBH0TV8Ut3o9qmblLBKoUkW/2NofTHkADSL5cdwqgpJVmAzVVy6oaxsEMjYWbKTWIf5ec3R/OLK5WxNHWyIL+w7qXOlWtpdefANQLe6iI4XRXb95QnA/5r3VG0fV5sPJjg+F268c/oMHIpF7xRsyCEq6EUHsUm7J4e8yGsZ1vSWUmGav2hS+eK07lrEIRORCC3uWxjU8zUzRZY1Rf0HW03gPpPf2cxJOtgkXB2sJK+WLRFDkOAjgtzzpUWiOAaTjt1W0VJAUPsa1tehOFzrIfmFAeSMlT1yLYIiy8B0H3mgo1iVPFCermZX7g3xuqCiVWwL0wC664eSPN+zyUA+jC5aNMmUo3Jeo2u2B44F+VKwOxU08gG2L+WYkL4G+z48c2gX97TgnlsElUH+hhQSE4qCUcSV8tvzLsvBP6pa28CBHluImd/sgd5PCmlKS/HHryYiEmTNsEFOOJHIA9y6dH3XFjmBW6eS4Lc2rk7+lfV74/VVh+6tCI0Viuno9QQmC1pDrfKUW6HGpMfFYhEBXHiBgwq+0PiJ/Lm294EVp+8scvC76oSlqUsvH96fZCYX2ryMeVpEd5eoiEuIxNjUqpIbrhL7npmOjUOtE/XFR6TJtC3HUkvqhbNOhTMYg4LhiDfm3XDOzEfe5/HmnWfB+P/UIHPviYczmgnbDrqmrAjlr/uZZYsVuJoPflliqVC+D0OVm2zOaaLWTKEv74MTWwkELkey+3D0eLATKlWasTo/YkU6qgMpibdSicFlMjaryOWOtisghduz6Ekmnyssam1dTIjCdrEZteTKT24W1B2HUdfAhvPpLs4yJyqEhbTQ/9c/SnEoFroUPT+x1mAccbhm7Hz+wG1ZEl8OVFM0EziiOBn2DTC5C7wD7tF8YzfFWLtWsP10RRQTdRURiB/swDiJGqRD7VJ36k3vBjN/Qz54v/NcO3GxbTr5rQ5ZZJgtiwso7DmLBPzacLCkx5J7cKOdl0nnaQWhSMj2WBOq0wWdjlLIYR+2DDIC0fzJT8xi4puzclpsMs9rZibdD7y+EgIVrHv+PGL0S1shvivbTeS5Petx5puY6H6z12h1fEUTBsP19MpLH4En1SwQyS1Ny+/w2Qzg8GAs4/VyulMb+3GrvcTcM8WBxY6Cw6cLXFUnh/PcQcFxXsan+L7V2LfR9E1rRRvFPYhj0D3kGNGuyAKtSRP8pI9cGC/XTv2uuS2WkJPbKZKFZ0+j8C6FXkxbErEYgxYyGmvJPougH7JfQyQH59xhxKtodJglE4M6YH6h16+6EopMC860ozfaxnkeJJyQyKNFYMClzz0GGYXCG6WiWgK8ZjxpaUi9wFLiqEgkjv16EUwsGxpFaHYFXteg7KQ7o9RwYRp3dkWyGQVEbPZp+DKObClJ6F9l7x3rrTt+UNKsjt2KsDxg2AF2SteyBvDBrUrg0mp9Rb6JKy+SUAqG/LON7vy5VpEQJ1qb1CrQUVmT0aJQM7F6pZMZef0ta1jcteh6DoKJ+VsL3NMNaKH75V8ZMtv9YPX9HMcB+nupfx7wrTUNcS79Y2MuHA3s/kQgQxsWaelACqizkMDNPP0cl3jNZ76StMC2Ltase8z4BRx1hwnL4rcLauKV4TlLf8mvo5lDdcisC/PCe5YRYkZVnrEWgZdvHF9OyuMLjpbsYT10jC60XrHzI026/C8YnwevGUWMkFiou9CCr0Hc3b7sgIMSEPWrvrVgFuRgNWbCV/ECPPK3BeqVU17vYFjloUunza71yxTrXT9Pk0a4XrMPTxLPNufQawcWtfSwNhVK4rV2t4WG/ei4VRLq/6dbbbDapdG0N2B9gXEWjqnK8DlKtydiBe9DHpTTS9j2P5ES70gx6ERK13fMI7LyxDsdeIDigG9319ydFhNPglHRAE9DGyelHYIYgJD049dDTuAppLRtyJDF1SET/YCzvsU8yunpnJTJ6G1/8HynpucwMvNK6it2CXuoy3H7usB+FOVmycuMJjnyaThNQ79YW085sWcdK8kHOBMYfVwqG4VbegU/rNh8VFm4pLEOV4JPXf1X4m7qBC4Plg4Mlwxq9lXCQXFfFg6yraJmLD7Tt7BjSIt3wOLmr7/tua8h+glji6zWn10+qBSPy0193vXGIySK1gsmTYLIfcscbsLdz6A1fmtchSvKbNZAk8NE4Nb/m+kh+w9ZmRGPhhC7IkCdt0YGXU7AYd+99pJnb2Uy2cOo2148j3j+FPYvFi2kbs2+8ej6TSIw7akcvt1DCwMZ7pvRFntHp6xrZn9bU08UQ0WkfRnUAeC8uMgiWjtujex6QamTgn/dbT+uPqeM5xtidP5gnHAPxNDoJ+688CvOT9RyHrgtvNVIoxXhgvrmIWo3OGD2B+YOYTTujxXFFRXgzcjzFWK9qVgX2rOm+X2Zb8E1K/qoemAN2wPifYb+Jgay4jSvA9EDfg63Q7O9Q7nz329V14G3cBHMTjFaZmAooOq+G+km4iVfT7geKN3XZZSCCwRldLndryjWET3z9n7aajtllKq3BHv5n6V3Gkdra5etIlilw23lPRR06NjB027O44OufIeZIu7qbKUWCIw8TGAoGrps/EHZyJ5lmxua1QuHpRwiA35e5oEx3ePAD3C9t+utJWKKmbyqdoZEVERHEj/udtlm8VyNFy+wkCCRM6AaL8WGAbE9dOd0HSCCDh16YA8DnnILV1UvT//+4K+fdYBqU1ai3DvVx2Ia4OPKrMHKjxBfVxbY5R99X6Gy4hl/U7+gp3z33wLULFFBU60mvRkSclG+J9YPJcqyOQfvdRTaMhDGIL4jiCzN2yXmtY+Em7nislcHGWgfMqJaJLu5ooTKgo3Jer6oCBb9g89dQ/heoRpcdcOGdiex9brWocd2Os0s7eI5+oTjjRuhgJzuZHq4s0QYfHmlU174TsUkFvqEQSPRJmN/8VUq0tF1ITV0nGYDpl9sqUa73iaFVeg8NcwaLH6O4W38qbnrgYTgUCXsRQaHSlfA6nPFFXQlFE9KxPkiJMtSJUOsVMobPvLWjUUyMi7keJNTdDs+pNgtZT4A/FhIpTI5XKCTM7nscEmkx4v9hxbuVd4LN/YX5Iv1fTT5KWu2Hw7EuhvBCmD13Zz8/sZ0ZmBMbLvL3L2zxVna0aBHnwjBYF1eqDm+IX4v6NfZ5XuqsULo/oAC7pIqKH0u7Z/pwF1+59EFU/bd/7kwBPH4o/aFIQ+nRmtTESQcuzJ2i/qb36wYNqxsHdsYXFVes6brAZ37oxxcKB7Ps+xgIAXH53FznAsEJT8rfZOeN8HrZKlUAhb2M2EpPz0fxTzkv6SWauXBKSW9sNBSoZWUaKLfJ1QaUmBcaGoIR7Gn9P/93ZKKYgwffNg1vEx7MijRTWV+rsBpO5e55ASzFu3mFg+kWUleGTbIQm61z8/fr8qHLGFN5wD+0DrVPyPS/IS6RxtqNxHgmBK4A8UHx/0oD6cfdcbIxaEt6ko1EoXxLe0USZY3TCuA0T1/iH0PSyEiwU9V60bekX/KSalm8vYzupryviXVrfNNLRffNjdm9xj7BW76JL68TeKMmH7H/YZ0RKo4nQxgaI9/xuX259uUAtu43eW01gFZ04wAYBfy13gvVxP63JXzbwvIKMR6dlg+xNyKTgAmqDVaFoCVwL/JY3OtLVpu4UwLs9qRXIEQ8h/MgMN2njdsw5MsIwWMYMhlFOOltOVsfzz3L7NPL67trLcLS5ZNB0NQWIsEyVEPD0z2QnfInWDHm18uUFw9XSTfUyeKsmRTyYYbRyFsw1j0/goRlxKIi/JCRdF8N2BNw2yNKZs00K8Xuav/ewbL/OSuiPRCzURG4HpdhgwUiGi04/BglqQc0GGBcR6boI8r+uA1h8MNUKk5Nkg/hoxN0Co0b57LTWs6zP8OyAKP7z/x/pWRJKvDXZtXPr9Dg7X3aMHN12h3Bs/3pGA5xEus0UgGD/MqZ5hTotONWKBzk7daK6rL8OogaR7Wveg+NgpHar8D+gNOZIaonbqdVXpZ2H9VCHQ430h3H44pKTJnCEKbvzrXJbAHCsXHkyBk2aWiss3mldfU6lwYYErcO0cVeh19QE2lWkyKTHAbwZSxGBZSGCPxInGf3xk2ggM8bUD8no+h4YQFi4i5qKl2lSXvAqm6UBsIWpsRhQwyhr8Z/CBFQmgNfWOAJprui1w13KO/CMMW8UBZWEYzSeq6T58482Dq1lBPmKpJTe1TtHeE4v7G2gxc0EWVL1m5u2HI8pLRQGiRs3Zz88gyVsCSi/V/hYMkvlgRpvzNbKc5wVVKhK1AC3jxm6GE4YB/a36G7NZMdAJp+MePu9mVpFf3jz2cqUt9u0q5L3vtIAanE+owIGXEcI+gYAcYTdErLL82lvtNOLhJv86MsAu+5Ec/9Omd763cct9xqSE8bA23SGykrT7+9tAgUscp0naZUO+vIfawDOmT0rByr/VqZNcCMLPIAEiddTL0X1Iqg2JFIFcvFthOrlxscvJantkJM3+eHR+Nm72QDG12CTLeKW46GsaSEc/m1qmBLzPdObjukkjIzDFRdrAiJGind5+A/09clr9WIIw8DBCBLTRtY8Cc/0T2l8HFU4SojoYJ9dbw94Xf639DEYJ+fP3aPztMFHP4Nf/00hQnr4GsSYqCMYTZN2lotUsnlJWDJED7As/2fnEUXh6HToGYz9SFJh5RWa7VQi6zQFQZJa1xrBwLdNSPawugpUPj1IgE6ifmApYDXyZsGFY2ferEBV6uoz7GjC/rB/+/49KyVciuMX8ZzejtI5SV/yEk6xJKX9TwUmQIN+Wg0+LDpqqyroAF58pB+F5NQ5SyCR3DeZG8/F//sDHw7ByOjpWNYT20TBYZyv5DJTKnQ5nFxg6X4/yrFwMci4oUVetweB2Lrq2ux0p0gCK4BbtPb7G/zWcUBZuD+s2Mg1J3HghD/v42zfMQEDcZN7p39kprZOpdFAGZCAqJALNOq4C+X7ZUKItMh0qsuUYO1hbUcWUDrn2TUQI42NEw0EukV6pfOHHFyUQOvYKUh+1aTWFtsgAhmYADWYH0TQa+OTciXaIUW/TyJ3jULT+b0QnDxsJfMOzVOllvvvr6uSK7I6anEn1wlxh6Y3PYcSza7hmevyVM2AXcszb1uzSn1+sBklSjtaG8E/z9XHbpYDJXnD6z0RiE1gE6M78/N/tWKEvdSmJBPgbHHQO8wQumHNXiAsRLGvcTQrPtdM2ji5prnqeVMaynmMDRX3cXrHy4mp2UvZl2MPLxShRkiWmhyNTgvNAzo63FeEn6XeszmhTYdbyxU5dUzcxaiPrF7I+LrkR7gsE/yhi6q990Orey0KlZQ3dJcUCwrlCqhU7/oE25iYD/rvcer5H2NJ5Y3u/M6jxTgxgTlZDrFuGXlGpmRQM3z6Aa8fo5qKCKo7XcZWOLP+0NS4hrZlagO6a+i3XTV44XSHH0DLp6G93ylZErqEbiuOLk2Hq5kGQPptlea29w1rEnBNSuAb0L7nAA+LWlV/IDyIVIavCu7+wkiAVn6gtWurK0ww0qtWSMOPLI9ASKRv3Pk26YsUG6Ts+zY4DmGV7Aa6GrzRR/fYy+Uj1eVUq04s3RtE56brMZoO0NzzGX7kb3dXdUWW6lBbfVNzPoiYIvghAILg9zvVMhCtClW9wAkLhSFlINvHU+4mQ8rZqVEENyKND8Uc7/WyCyVYz+6XJrMJoXDSpp0C4ud2bM9as5UV3XPpO380uUfb8jfuXq6ljjAhGjL+6XKx7+Ibu97JgN5cZGumDG7QJauF47QrD3B3RYwthLMbb0ul/Bbp/e8UjFByrvihtfu5tYF8cIVYsgOwOk66utlmn+kQZYyMU77drRB9ZR1VE+OT8yx/PtSxQuMdwXkZXgw4X8OpPOHSSmSMHjcpqMhSCmyTLypSQlkntUhxbjB10nmsvryXY22GfGb7qOreCEOgTWlJcdujRPRIh37/uAI3jCJqybXHPKcQahuuh3xq6fmp6dYoQN01pdbzWE5SAYU4y06LfIT7G5uz7xiEGxijiIAwIgqLtvAR8sw8+KoAiNINIo1vEs0Q4/uzVrVbIGP2MWoc3UN5eD2SOIYDWqVSiVmEjj7Nod52i0a+n+p3BXrJWbm+SnDxRO6z/9aL+B8MPhjgFwT8loR9gls4Tx+kgmKSLMa81uIaaG+S/C8eW61PpqqIoZLaMYDU4+AqPzngOhAH7LEcd7p+csxE47Wq3z5dhqQygQTPEV5+IyTV4iWIDoHHnZyVWlls9sZBsvkBcpc7oTw860HuT4oHxB4FrtTaj51JY4AuSE8iV/vUBxEwN123A6BfEX7vPYkV/fMRbuhst9CEv6p5ayE+P3fLPO1TDgVscKOGiOh2hTz8fYsun9u9/V5KOetgm7jVYg1D5Fk4GU/2BsMzy73REgZJBql2TYy08dC7UgARM5nGd0GVYih7M7NW9NHv5z8cWTlqls4QH1aHVCBDDkK5aKGNrpdGlg+v2RkrNTouLtq7YuOcOA/aYnrIHo+DAoZe0BTcAqubvOX8hNc5vCLOunMAVmwmPY+YVU/b2uMQRjQjxlEbFhWadLM44KU8rGiTFPiN9wsvWcrOMi8YvbNqiTXd1mNpK5Mgz/lGvdcW1ksjUz43qLjZ8xAfDz67IPyUmdeLwFzwEPG1QB3JI+ZjhBxHFJfeh43Ief67XZUywsX3fjqzIPFBbYE0xZYzQ3zCwBquCsSoiAA+ZPwC0Fr8hrJGA2gIn/mveOcimmSAyOBErqs97U7dv6wIVgnbQnJ/dV8AegQwFSNuM4f3RuVGCEBfSto26QNbHZMal//u6tbqtkBj8YQPIweT0agBQ3I+nPKXWIoou2t2CJnDiTlrGqzJDPuF3WFFi0ZNpFp4m4aot4PFcsriA/kp00nToIKrd3u0c6YaqCxjFhvaT/Xu94+bOXRjeXKWw6mZFIaFhXI/Rk9EucWKf1o+w1MISrZzoRaiR5oRcgbEYyuW+rQrGuE0q9aBg18JV+JgyCWnSxMQhjfMr8Y56HmHvleZQQLqlbv7efz/aTRBG3pxL3+mFL1pbUZqB0bxBAnOs7Dkh2zSUn0ic3BCvxxQPzN5pfkitF8LKas1rUR97Msim0Db2twCSb0f/7RkDSEi2ix/9wy1vBX3qttEQziPws6zdkdFvXsllLTKw8slIMa4Mw0rHtBZSFC56ZK/Fahuo4eRREGR1fGUzKBImqRpNFMlJBIJyhqOZlw0pw/ya+xR+ZyPfrHxM5Jug7FHeMtRjBd06nZdDTFlf415/gT8aiDQBts53fkP2e5omo1angwPk9N9AZg8lTdq+zaIxm5M6VnrpC9Eou0SFLtZAul8PejkNaL+usFYGk9atU48hYQFnrTeTbabIBIQY2EtQTOdrVad030wGursO/MzZcexCb1G0TF1RMqFLy0D6FuAfVJ6XIEk5XHJy5clcPWljMPVuI5Ofcz86O9oDINF/LV7qXIY3nJC+LtLfLtcoYhATW8nr1niJqI5ZXcVZMwdIj288pMja2JaUrrPwByy0sSsy0674TqfZB8HXJQbRTK9quVO6duLqac8I0QG7kBMIYNdmfG7+fA1OafxQr2i22fwufNsRno+iqM0dYovzCpVC3huQ0R03T7H/n/3QoOji2M+Ruj/hFphx4ssooswIXAOcL6i9c9Du24KmUmA1vMBFBD3lM3f/jgrW9/04/sKSWzrwZbVtx6JI6f2Q8cBgAx28n23G6GkZnv7E7NcgL7sbiK3szeP8iPWxNFeiXdzhZpv1SpDmsmLwquTQ0gPVJUmay4rMfMX+Ws5qJf76eBnJlttaEUnVyWzqvLSLOyBxQuk9nzHJzfuUla8djTxEVwpU7pJcH7As9iYN0BaLyDUl2c+dvYwzD5kvZ0R64M+LcjqynQ/IiL3ksrIQxN26dFc1NnY+rv0VDcbTLBtg5Tqw9M27MbCW9YWXNCulP1yiX76VIC5WZRbM7f7NrbrZIjXUo3LxJ3H6mg240JMJpQPClavRp9V9A1eft+N3Y8wCaTpkWxrE1L87mkew4nBjiwbZ+C8GbwnGgmF50ggaAfUMtKmr+su2Hb4Qex7rYop8RJjAf3SQykzgwt0xLrA/n75A2IMTu8z2poqihn9E27UIKTjw5zTAdL9nw2UbJAj4HewDkxNxSysjmruET8n+cjrsEIlIL/Opp6s8FPJh/WMJjqoARgsmLIFAP8+Fsq1k1PTkLl5Pl9VHaXZK+bgLIM8EpHNjiA1B68ZS7/Gwml+8hduAUG4QG/ZciTCP41i5Ub+QV8xNdT5OH2DNZjRmAmW0k4P4QG64/v5XAckMCn99Ds23rvJeKaWFs2QVwjwc5U1h/nQ2qygXYe3YOP7KVy2n93aNe67pUOabgZi5Pd9HH//gjQNjZSIfGkTi+xX4NaC2L1e3n817MdReBRKGzamXaIRhO8/cPXitnsqNy9MIMQ6ZqwVIOkcinzQewdXxFkou4q0aXmgzF9vkFlB690Gn+h8JXXCGUcJDX4NJn+PZLXb7dFJKYH2zeuM6SE+xpLXUEKB8BmzeIGC0LYO3tAuwBlSNrck2bWkClz36brjNvgyWhkWyBtcQOPk6VdpRHfmfymkCxfHZihCuo9huxpokmIRv+no3JrmEvvWDgXqsL5ykb76C2rPTyQyVPLlGEOO7i1gfzQ09sdHj9t8XRUzG2SOww1SVvMxXjrsJvqAtPwZp2oa7+kelWZXBZAPteaUXYD8JrZ5DJKGg7LJXuSbFWT6GwUhR4h84FirqKe9f7BG+/0oTeS2/Kmcay2aKHCre93gcwZQcsihgAwklMk0up1HxqYJjFtE14oR9DizyS0A6kYctxpsvtSdaCPHU5jPbueptOFH9OZEVShAW418aY0K5FMSj6UH8EREOxMbJpU+UdQr5TlJkA/NNYDdjciE0uyNOPoDEPBabZkJEh7rsB5rlDD4ZIAL8YWieKqqY8n+DxnrQ9kPVeVL4hdw6snnExMXc4Oj0IWH+U2pM+38krmvmj+FsqMizhVwuSneERLmskdM3StT+nXEbHepPgAMBzj1/tQ5UCBULrMtFEw91AQ61ZuakzMOnOne8fdJOug8n92S7N+2mbUmyjE17YuPJDsnIsb7s1HtwRRAgEAzXjI3QI3q9Ww9bquOQ0XGJXdQD3mHavJiKsSYYTO+r1Dj/jMia4MuE/QY2qwuwtJACnH04MrwSpo2UV5dizEde8FXwmeUG29dIy1fRUTIX/bSLMeY8InHXuSrKMvKhCKc47wK+Eo+4R47bYO+VPCCFtv0CjhAu4lcNKOP/v7mzd3XKn78O2SRRplSQSAK/TEtstIeG9cGk1ErWF/wkxHDRIVShrefbIpUz6yGYR/6VAfVqhog1CSSLj4RXcZUSWSlpYwpBWxKa1htAF1uL64GgEHv/QmVtoEVy01HPVKd6x+DVAm7Kwm81fOQj+zjdGxDD/7bgRSRnIM2PR9OysR7ykpShFyOhxmPHv/0Mk0tTfxxenp9sdqRdYoTRp70TIzLC4pV7dUyHhKTpmcMS/pxIX+lWEvFYLZN0Pr4NMfKfHk2EyYRezNKKTNIEDxUYHN1ROoIfQ/QGhUKtenK8DN9xpgV9l/ygsqgI7s7Vz26sIG0lslBkvQS2cCDHnzcA4vEwBHAzGoT2NBSMkUhIvetOrd+1GJg4UyH83qkTEWRJQRJrv6bMZ1hfdrvIzYEWHdi+E4DhImz+6LkmxyVt1DbYF23DVwx1sFZPcqooG70J8NAAqm65YgYHDEF+WG5KimlhSSn6OK6eJeT3s5AUqseIa+UbQeZBpcEvzkPx4U2c+y1gBLY/Lbis2G6A216qnCEoU7q6UfePfG1eijGdOLDbnv6mGkN+FoWZjlITtKgv7y2mId7n6Umt5ydYBrAZk2DmQjl0/rViSo7756zDvi9p1CSPe3A7UKHU3UUAqJy/C0/HplVk5lE+XazI6mp5U5phzyM5Cu8VmTTzzlr6/D0lmwzjJ7t3t62vqVVLLkxHiYh0mmlRXReiLAVEcWI9u7SCDzKwb3RemnCXoZ1X1Nh+DKKKoPaFNQ7wTKTamvTjAaJjctyiAgpk+bhzjqgjmJd0upD6+oafIF7ugtIrNU/PmvaaEMQqc6egwH11+wIWIn8XXYUH7UJvKl9JuOb8UCs1jDJa2KEvNZGxvAscdHWUNJOto6KLvIoPp60mvDGg/CBmbKqQc9+O5R4IDtgRr2OcaDkJO+NjqQJAF37NnEAqYyjV2dmkbSPtYhyHX4rn+9U4JzabKNbuLp4ywbDrfX5ELeaxTqqLFdp8Vy/2hPz7IJ5cxeSoLOdAvJ+fh6W98Uj7e2YOYWmwQZGvbfojf7n/3jFNls/Llshe3xJtBH84nA3sBmT+XLef+Baqvm1dJI1zInEHEGS7orwtSqrQUYkZJu38F+VycdfLKVJvSDgql6fi+tTy6y7OfL9OcexDMcCANC9mK0h9HD8y026OGoanY9xmyInZ1G9d3zEHuHHbH9tL6sNkxL31+nHM44zW9AZNZqTuW4zKlDX8SYQT+dKHyEbNYq8xLDTDGd3Xz0yzVGlIz/UOl6DxGTI7sRNTmxLMJot8srM/J0Um4MnbLnpTKWdogzuiv0N6NP1jCoC8tTZKMOCb9WnX38QvRRj7BBttcjil5XNuRj79lm7YOaEtiC5urTOYWKevYHm3uSFTFNxUEYlzOswCp3IYE441tHDvnVAf3dk+2RRFYRbfXRSrXGRqJDEtNIPIwtwFQWeETOdi6Ur5OCRExp41IJShnRY8ZMRhvFgb4TBjuUZg9n+QFVJmWzHAYeYfPjCZJjWJvyqxhbcdNV199oOv3v223Ef6VcA6dd1LtxTMdwp6J9Doyyq2/6criTx1BHGi7vmGAoCreYULVWo2NqUuNDOCmC7jRr6UQFa8dIxvqPX6EzM6C+RZ1kcgv/45IKvTM8bY2tKuncefxrmAZdiCuKfXUuf5gqSXGR/i0FiOcg2y/k/vrHjajHE3y37UUnx55F+NOLKXkMCJZZ96x+SthvgmaSYjIHta6nnLrCkQkioi9zmzeTuCjuX2U17lbpPTMo0h/ScM0DOMueohW32K8H6mtTDohQff11pSEAgWbtr5f9itmIr0858WZbaIryMKUKFk05AiB/g7PkytIiP899cVxHT1DwDaOaz1T1SbYa9ojaja9Qar+X+qx529Yu6AavKVMZ04EotGFzp3HoPFPFCsPfLut4PrLFYpvhPXXh+LffTImIyMY1HpCTtdSkEnt1WT34FUnRSt0xDVI/XWDz67y6OJ+vs79bHyJVg4w1eAzmVsANgkOg3+R0yU3vfros+kDlHcBnvahVcn5LuXVBRnCt3mrlCFufNtuo4dy6S/jIohy1atC9uNpuufTzQGdgsoXVXeqlHZPgovCTAekPwqY/y3eSEotPJ4Bug+sycS2Qjb5Tk4VCp/cTx5vmED9jX21jCd8MLIERZxHPHpX8BFVXoQzEEvSxNh3oAMHe9io5txmZ4qlIbJe7Gczs1IgzRVmsVtNxug8dO2Qmq+FkuSAF02P29v3rWohxFWZ5ftQDrHpYb/AqXwIH2jVTZFQa+RoWm3mWQ5+olPVcMfrwDAILywMUE47etkozwLj3XX4ND4gii6RHSLyf1NuWqpCo4rZ09AwFXJigN+z60y/r4IHTvYnWhcIX1LAUfox9bsGXtMPqg6nrg5eXaa5ZDFunRFEMloTUCiDkK28ij34de/KfVAFFyUYivbxkcDC8Bo+Vf8fwDlWrfKCiJPP4C0hu3nss+JMooTOitemRmFok+cr/gmsA17e24odhXfgoprnFVm+d7ZKkSEK8bJaXWJFO9VGmYQ/rIgReo8LfQ9Ku4lF25oqjAWCYHsqj+3Vbue3KgAfbHq7COftMdQk1P88TaDmRzQhTFithYYvq58DqQPTOwpNgdR3eCQ8BtfyaYPTLWM87/jsV7al1oLGOzazxg37U168FSctKdDtPdcSluQQgsfeNZAjpMN3OVnO8UAATPv0Q8AWvd8yFhZDlaNPHB6KfLICv1MfBw0KUILZkIROsOQNNtHxa0tFw3E57/SZ+AQra6dP7YC39Ovs7dU4fQCy31q3Dyf8KQW9S1gqDEirRbGhPQXwHRO+k2ecFDE246/9aj0PYyl0J9vCfM+mDGTlRoVfoDNplXzqIDthuZnG0T2l1AWGM7bX/OE0fJM9nNxUyBUKoznemsO+nt3gZPwDX3zHRuja5SnPZW5u3D09nV1rZeWrSuYDDOVx+p51yjzrH1tOMi3TjMb+5EEnVRSXxcTHiLgpHvVdO4BoUfaVqaTtqyxvAqHL9nv1pPXLSkY7UEcYvoCRnA4Q8RhAM9w3UX73w4F6o/LQli/PwmzRkssXrk4mvIuTc/jlHzyZrviWVcv3ls/0OAtD7Bi2T7bYhsTIUw63NFrpqRcAbkPU52HXoD8c1fqqrJlZ1d70bc3TFm7AZZK6EEPEGE9l7X5B2nUmNjFp27LN8r4rCRLYsws2nSUmXe33/10SjXnltScl8PwolNg7kBE8XloAtDYxklZ8mWiCTb7E9ctMSCoP6bGzSXGPdxpKAd7cz2by7DgvhNmUMZ8ceiG2VU4sp0phsb0+Twi5GfpKT/vZCUPQIMmimkPFcIQrRV4kbVALuSMgcFbLw19aV3Vk/L2Wp3L1KktDPP9KgefeIyV3x7bJ08OqV/7rf+lynVBpc3f+4UQ9PkhQERxiGYHHHAab0yByOty+uc9t03q1EPKGz1WZ/TJJj9CtdB0WRdaDBIeYx8XjW+G5Dtespe70m0YkV8GnEp6xZj7tM2Z/3ntiC19yg7UOECGppNsudgjB+PSC6euK+urK46Ed/kLOZ/X06aygIXMK+TMcd/Pws1rmVM9M9ohS2wXpIgE8pXzn3zztGyBTCCEol0IzVUi6IaoR8vPQy0MJSFfTo9BiYm9PNgvHbP1qkccW/sPT52ozxT/n5JCh4PY6++/r5MT+kcSSeLuj7XzypMslztZzefb0M7uMDyC5hqp5oLzPBNfKYpIBRsR8oDaocT9XqjhOPvEKcxLO/lz62QDwfn7NnsB+6Sdnmej5637xxcTS4mjQ1CYITDcJplMj0Cxqz/fH0im2pwMKqwFZ1fBdMlDO5GPtvGosrlnEPI7ncndvWZr6lHdATBKpaPRvJl3AqxYNtLpBmcsIcYRnS70yeDPFoxz8nAq298KWoWZCn+G9RbNi7eVgZjpLEezUSgvJkaWcekwWHib4pd704J2G3ThhlBFOjK00PPYzPIhsow8TQYfkP5QACDKpNfAVxsj3JGPka794M1+Mts0bEypC1VxXNQn3UpOTFguT0FABnoM314jRsOagcbj+uCN8fS4TATiAR59ANQS5x9rMmWdCH1IWC4/iusFd9UAT8xAgCUh/qZyolqwabIiOJQwEzoOMelDF0KnaQ6e4AQzwvvcRYyWA/ZY8L5V++3ksj44IhtNtwhmmGtPaHOGu3pfF0kOfOyX9EkVzY+N9h0ZyvyHR+0DYMfhnJWegtvpQnfy0zpOAl6iDrFbuuPP/Ecem1Dxi1D7mw8YHfovzJjjKodxQYdKMrySGYoO5RJGmY2tUj+VoOrHrlgrV/WBGIgles7yN0rN5vt/kmNtC9SGcPpq++MzsdPyib0YMQHJbhutPTc7stG3X+f6iotbRCsz6jaXz5p7YM9JdvmsN61bMWQIXZf3ZeRIjF8nA2DswUoSw6BokHKpZSL9xZjaFYCJ4/4mZmHDjnDeyI0GF00AOSHmXfdvuYVz8PCmd54M9BG9voO6Id1bSOoAvEMSRxbKMgmxgVZPFhbf5RA5o01Fj86k9ibSU4BKinHafD9mdIF5xTr/aqq9utrlMIgALFx9hu/W6Z9yaU4HwZ+hl9UVd9BXxDK8+4q4xxbOyDd3ezR5MhiChYOM4OXraEaYcwjg+vbqTzByA0x48Z8cYBvPGmm7qC8BdIYgDIfChggxcNtJIh8x0lajpFOgjYbAfgwSKjylHXQxpMWcvtn2dspK9KOxasyNOyPQVgwSlh87DCQdcbxC58fT5bnw53Z7ORGsCaCba7xZmQRegNvkK5d84zWX59c8WtqhL6QrBCFe0juWA9AO5F61m4EJhIsurztNIMEiK4qDkJEBngF1qJ4uzmhqG9Z45BvB+DVo2z0ZSTsISEPmxeT98Ugfc+on2VaiVkc1hy4TZto0UWo62sNlTWwjssvqRUpQ15fwMlCrZrFDsNYExY1szNbQEqRIt83mMS+41YS5CSf3i+dh00xa5OA3rgtvRbzgRB7TMUT120TSZrWywUU1EbK3N7997AH1ijWnJBNUlCyg0NDY+QKPN2q4KC9lgVHBqaDuIrBoI5Ah0647Ky9ekyjicDuIqr7+Bm/w1MCaOOZfHBnRl7L5h/GspIK385fHToQFC4j1nwKVDoLdItb6RUtrBqxHoqsjG44DlwEydSM2vKYj3SefzvewVkGVl8j4wc9Ck8Kikzn7yqY1oTpC7uyAI/9BThzADzAinT7QzoVG1GBhy6PFfWQchJZUYhc11BskpZS0svD5+6UdHGpU+3EwCwhKDNmIPu9FQhztsMl5/ZhG/WRNFZw0pMafQpIHlqz5Zg8T7QDrnH87DD41pqveHGeLs1N0akCGjkoxSc/9XzLIMiWyC0A/r0LBDOpXdsv0HK3mRjLlRKiPCrkxuCFXPyTbqPv0nNNlnqGNVuscJ3ctAk1Lv23M6miN2uOQ4LvG8eqvcctt9ys9LQBkDAJIRFMFiyWpuZL6LQ8fxMd+rV+tGKLLS8PXxXlvNdbwW36r3+sJ/EW9p8w4hzz/tRdBMuFCZq1S1Ej8lWFaiIzPWKb/in2b6g51ZCkCL5JA7JNAlG7R8OlM/eWyzQTl5w91BBU2CvKHmxrAzDwl6aRIemihuB/q8T8HPggRcIcpDgqoVch2PJngaF/CWFi1QSXEcIVk61FEnPzYKdHSx0AcMJh2H7FahCeDTJUaP+sW2bYeirXKr93k1hV/jVG8n9QHIQHpUGDt7u6jG4Qaz3tN0Uy47Qsj4s0oPU5Y+b9+pJCH4tyDfGGWnzsvByWh8E9QLjJ78VPP8KoGtGku+ErQ3dTr+2nQl9OGy/mQz38kHvZklYX60TuPgAXm2GdYtZy1ZZ3iQGhNEbqt4DGIgXaz3YOS0cw6Q9Lj6S+0Dr0LKrdDjuVflowqWI8qWNRFwapHW4Nugv4kv1byz6odBMZRWzwgzi6I905S0J45fLMzRjxEM640QsDQeo6NEn1mfd7VS045sehqtYQ7Z552mcx5bBjAdoqSCadoQSpLu6tANv58iePldSGPnWZ5AS1R3n5nmsfVnRz1O1JK1xZq336rT7qaDhR98t1/Kpl67zKI9Z8lyQ20RkDKJqUFyz8Rhj5YAlpFGH4nv0Ai658I6DuAP5ApzBgXFDqzY5625V13nKNze0j91wjUv8tal0aQEBmmPxRcHqTvydIJroJ/6Wdpk+QHkKN8lnN3Ct51kMx9FCuHv/BcYcEX04Z/E/UDtdoJ7U0IQmWQNmNe7LpsSRA1+0MyWHvWVgv0QWGYQeG/NF0tOGhnaXcU9Z+rH04mjMNMq6N4YNtO0rVWlHtxOxmc0JWA/tGL7ftvNUJn4qsGWjoOjcjOnFzqTmrE1eKq2o0eHcqSzUyXFwPiDZw9fbKMHHt5G3ClxOtrj04j1fXDr48B1Q90b+rK7cLybnTKuo0A8PWXXBgoFjjbN3h6+sNVKrXjSWSY+lwko/SoipR/t4Ghi7Nm7jL6zUiqqka5q/1Bm9PNfgg379M3yboRpgAYuXUyR25Y4+TqTxc56yIFVA23Wi1wB2fpFYxD4CJdOy+GcGCiZ3z1zQfIw7kP9p4f64v7NanXgtZ5sagIHzcNZUgANuF9qj4Wt3fU4WHpFpHek/vgbsf4OcTH3GOxce3HJnCZttpyM2eJ5nwvPRmf6fzNHp+/oHHogf20LlIUuSw4TClep6ofE5Nc1Pxy1mwEvWnHOrI6+wcMIAyI01J0U+HofvbC3EmA4DpwK/ko9NMR5raKj1OVMX9zwK1u+2ajwf+urkimYmFYutb4PqiWC9nEqW3hq3RKVJaeW+11J6qScs776X1vzKreGDa7kTTfeTGUQ40pedbG4jTtlBb7h+mco5nahszxieQ8izqectkCSCnIeUgEpDr0BHB1wPO4hcQw6h2v2uFOH8sKQC/H/FF3EXUQVBEbptp7KnDqKCEDf/+yR+D3lNcg0bn8loJVgvnOZom3oyI2DNYakSo8XdEjIbyhL6cniaiyn8WsFQiHQaAtB9vP1+Fq/c605iRdcUW9F2/pmYkH4BqMDlMlkEXp2470p5KfLwlpsgFNIutUS3sKBZuesmm0u4xAmJdCU4g5IM2rRsbtdcDTeQNLkAsj5zDk7JGQVBZYc3h5xMpJ0CEkISSiXImf7cV3qPhemIXAMHHUmVPFRXEgLaWBV3ySUG1uLW9z2ydUHl8VidEuWP2KEdDOPSJpH+TYlcP2mlF1v7XRjVrdJzZV165Xqejq3KxzYp3E3wFEwntdT3ighYUS25/HU0I2MtgCe0L06UmVwzLd67HOVpnLO2ouz3Reyj5h0151e9owlujnFsRlYrTfVow/+h2ZG2H/K2gPzIMRicFWzBI4gktqlQ+R01D1XevEm5XpDhqBUP0eofuJcogOblpPk7wKi08rZO54Qhi5si9uZNe5tBLpwrmSDP5m2tSTvMlWJ9HWmqx0PTWn3MDoYNhzqQddPVAoKFIrgX41JohuA+eazMGC4hrPfkV5ol2e1la1/tnOQwOVMKEwI7ok52FGHY8rKUTSqlEhU5RJkkNWTcXfwFWDd67cbkNJRklgFSXE7Nl438iQ12gChAuoKcn+08GwpWhVkwgl5r6h5SbyA+VMyo9WvIfH+cZiLFNtBDl8iOCuN4S1AkCp5MOSZzps5l0pwe9KMCm8Axve/94yvlPvRHG06G2uLU44DizvAPsp9SUTWwGw2/FrX/QulomsnqCJIPvDnobjpYBVg+q5Q5cGlIvcKw6EPzRNiTRfldst1qmODqn2jBl9EpxzM7citLfwjFLdYeYEV/6/GZ6VfUlFmDLijbLrmQawu9GdGqgb+wRXYr3U5SR6cguYI1diAOgm4G5RFVVur28N2qvi4lIpMzyQOpvtj7UmyHBCzLS3JKhf1Unm6qplvUqh2N7kPil/ntDXMQL+v43omsp0QL3wwZSxQxL/PSD4W0PUD9pvigqCjX6ZVBj0braJTbEYqcCAF/x1izKXwBo0mj3DGxlLOtUbTY15XHu9TmmP7GXrcQupKdVBh/LnQI3KrcKlRBwEJAasIOh6Dpr0QiK2R/F5VPupvsoIOk3qzTrtFCcfvyNW/NTAptoIkdAbiijLnmJipQPSU5JF1tZ8T+CBmeCBFDL4/cbrO8Qtu9hs4cgf4NL7G31Izr3J2ZMmUc2ApXIlZajOu8iOB29mhSQoeQ60tZcxuHUWhuNhPGD3cvWABfXbLGDMIhZBWKN/cE+JEbVjiN1xFrnL7efGy432tTizqq+xgRkeJ9RgGwBqBlMXjcTvahj4BTm0sZUIqh/aYO694jBtvclHtBzWAM/0zZv6vEZim1DjXsHz/DuiWAcdRUqrzXxt/s3F0mHEZAxe+D72xKIcJJ0kmOgV7kot8Z9CauoQOb9+PtyswQrgPWrNIZyeSnxmKA70apw3prdw8vgIv3L5aqnvLk1gtjtv+ARirgYqnvTFNNIh4JgmyuZZ7nJzrgsEr81P4qxFkuley6S3nS8KalNIMdW9aPnWCVffPo2DjZIOuIgc68VXip0ZT8CGcab1Sh/aUnstI+BaYY5Z97J4Q2urRw140DsVj4NB21ddxHThZJPdpTJkAxxEv0rNR1gO0m5ppr3E4fWj1aCHEsxuBFANLVLPdPC3fiGBNouXWr2YRgVGIjKhKDdIpStNbYJH7npsFFa3BHaa3D+fqxcgD48vQo9OQ4qRNwg5/k80ZAZw2PFWifPPYdSGkpZU2bmXtasTxE54V8ozCotwyE4khjJDaQnqnmnWtPWu9IMnDY+jg8AyOdvcgdWw+kwIdrLtytEiRJkS0UtX48P01MifAAkBk1AN2EBIE+FY89Z4BdQHtBcoHt41Ld2ysoYKARkUY30eFBUyZzoY3Z/KdLtvlVnsyehI0yJXqQPdmyM25pM/yI2GUajggqjns4SfVx+AoTO5uSZiGxdm5A8DL3/1EZhuUFG/Tt5UUI5yTfrIopnoBPfQx8B5MjwCzrQCxp7S6JW7IYznQh/+kNNPeZmbsn9CQyE2xBl7vrKCybzUYvEzrvZnEJxtxo8tCB6qUiPX9WRG6EiPHQqG2WQK3f8YimY8wv2oILKN02UO3nc+vzB9WOueU30PE0vpqN0pmcvCoW3/g/QK+8vKhnGfUD8iu/JLarYUXV+0digVUM6Q0GafH2IDuSy5/wKao5clmluR+azMntIlmjxA/11orJ+o/lRnMmHo3aZuJXuR/mlxQtXQKIdvb13QjMc0x05yRrC/W8V0JVIrx+fOS+Kmp/Uk43vxRSk8JVNa047rOtZqpiYzFhq9kA62tHVEuJX/N2SLnaZbB338XllvwuVj6M9q/SAsQBYDptG9MkDntc0/1Cf93H4KpTcHr/vSmodPJweS9Fq27+D+UxRdEjM/fh976MYTAZ10paqAfTEIFNr5yqzylEMxv9MrHVlSMgW9E8+k8PcDuqSrwv9vVDbuOahKvzVO/f8UQnzR+tVXx2k96wWvbn9G4XBZ7uuJeVL3yBBNkJUK/El0BhF/JJqGF2FvjOcv2VejgmnSAFeALOIfU8Q5SYcNNVW0t0kKqOLlxbHjFEwlm1jmmn8JITv98dukgWdLR4atnZdXcKtTtIR0iiibrdCahPyWwFHqcCShZJzxDfzrcAR9lx/NR3sANAuSxkSWnKQSitXXb6iEZgM206aiL0kPOqTlNfUIYrlq0xh83F6yTrJHNQ6em3vWEF0AOYjR1PNpdF/E7Orr6tnC0BhTkyFUIDmgq/KLBcJToxKq/QBmJChpbgnMABM1LWBndP2p5hgGhiRCMQq34E2ZtifOTIzzfOjeXpRQgvzGwDYUrsx2oHsia6e5FIZ57RXGsrYJiQFKh+YjlBlv8CNk7vwtuV7uCA1kx6P5/fwwzDv70has3YkffSij86RQxbcaL8WDrh3F1QEzQkXv7/bZVCFvv0qR/LYfZKvxAa44Eobhm/dKCck974kc/aUDR34ZiQravJ2w5MhLeJwVdQ/DUT/YI0W3Gfkmk9ynxAT25RLtLDIWdjcrt9af5HxZNaX9j77pQG+rk6nXuUpDfbLHWb7oPid3Pcd0fWvw8Y1oMfes3UVmRxYl3YL8vTg89QYGPTiWi5VjaX3eyj7BFs9l4/xDNmOqD4iitzF1V9fXfpQb3mVmutuFxCKxb3cnacxPNa1r7EOzhBoellm0puIUYK3BHRRtlduxddSbn8kQH0YmBnlIbUaJ9MC9Pz8RBaPsuKp2eKwG0Zl+8ZdVmaDvIeQzO/GUGvazi7mkCHt+X5NeVsXJ4J9ko5n+tbaYMi8uLhoa86r3xXxWqJkGq3y6/uptjY51JfpvPqyIhmV+83fCwqCLMHWhLJ5/0fD/WEIP3+EHCmOtgt3rCaZnMIUPI1BtyOkyjUJhTnNJA9rWNTNVcZ5xRooaNg2LexKQRX5oGRESTxkh2M693s6LH2sZx53YQ96myeIfIl3ExWtAOOfIRdLnXwgqV/fS38PVakBqiIep8NL2X8tgCIprcXUsBDmU2rClGGevv8pk4hmP6dGIip/M35g9THmc1wRhjh2IuDi3niwb6Q89M06xalS9kv8Vf2XyQLVTR39HJyLhfM/aut6UrVYqlECoMqYPYd3osjrraW7slJwTFUjJnyuWwEGkm+BoLKPen9DDzVPRRxKu8e8G4g+tw5R/AMaot9D/kXVf6InoUgUYAVOd/oz+dqAtG7ezHHW2uxItVxJagb4Bin3AWumGqhBeNbkfRIrrAg+yzTL4Z+hNXb6dXguiPZLV34iN9DWySPAjD7Ez2BWcHx+ttRi6bhGVh7mWB9YWkX4aJPjyd0G90ezYN0R9ZPY22LeLN+pOnrEmzl4ajkC9K3Fjo0lxqrs3AOC6caSg+vcrKg560fHJnmIvEcY/+ZJGsGd+4b6OJo67CfV/cg2T1Jl9hSiKaH44wVtFMSD4X8372tgg1iBeuyM07+6zjpIJsRR9mTOeY1W4ZXiXSzxPb4dsapQdAMjm4VrYav12j6rRvH57JnQNU2bvWkg8VmL0g6YejqbF+QZSz2sjFny3InzFtrDDALgJDnhxXp6BNJyqLWAkQhojQmZ+uDu5gl0LwNOybQ4jWJTsYkSq1b68QdOes8WXiGbokzd17WyTptJsyQ9Rm84DAvMS6xtFMfUX0CW51Y7Icf77IwDK5RBAsblfvBPdTOND2wIbJqtVJ5U1cxHBeVIU5Kigv+itM6+wsYTUZx2S592y3RcVl7cNJnZFFeLvYmDhKK9+4w0+cH7obfUIZp5lQ4E+B2nm6PcQxzu/8WSABf8Cm1tBqypK9Afna9di8vjLqtsr0nmYWVbbGMehFBzaY6RW/9RC+dUqrMPkXTyveYQVqyKsgwpiVMwNr99W4/sfjJyzTTsMJF9J38uXy5WkVSNNB4Vk8yX0+LkS+4Fkt7rWrt70F0CFoeVRNxUk/Mxmv846dyS2/T2sOQvOO3kejRyVgPNnu9Q2eqn2ImL73EzUGnhxN8SZGZQnUT5603S9+0MXdUi57OVMQ0ttEH65LXjOJJMBOLnj70i4gY/XxIQl6JxPzxo+bPqJKdCZYdOVp7FJcEEK/yCzf0h5/U9brSGFc9HAvwdIkeoC+1Np6WtEOu9U4wWqyIlU4lz9ArL67z5hqt1z7eJnFRIlGwnEWBAlUIDH1d/Rowcv+DhD38205fNhYwcE/zctqdPJW8CAmYIHfI065dnYMXdhKxYSp29WYFHailI+cxe2pSIFGNINXJ5wyaHLSXx536fluRWICboawFwQQvGjvXyOSBY3NwnZ/bfzqwOL4ESQK3sEtDksiQqpGeszK/R0Pj3el4iJhoPZ0oKXjef9VeNIKp2eOmC9i+N6AFijwdaK7rCQPh2wQG72AEj2vQWrnmFMn2AHpdOWCZ9of2JWyK2dwknI1AfdrIOombDu1X1X/E+DJPVqyYE1IMH2D4ce6DJJStp+QX1+zZ99RANcD9A8xeyATDseXJcvB39M22DarqGXH8QrM8Pjgi7REaNl++6D+wPIN5DBM5N5IV5Jm5CU13VnLsQf4UMzymYN/tGUN4Gg1CmOp+tuciUB8Scez7EndyavR0o5+i3If+Rgmx8jkLG47c2OkcJm/mHE8OrL6iGO+5S4wgYxgGNJwIJESr1SOmz3XZB+cYIlEpGtRuMX9pxmZMe7fh7lDnT3LtwC0tsQDRV6kmxwwE5vW1RRV8hWNiEuD9boXfHNR7QU1mjw/EArH5pQ4EDBfb3xZrxQ7RkuwMpK29+qz6aaUWr6Eknkkkiz317CwANK7NZVDB2OOkodSDW4awpvnKpvD8ZJiHon8jHx0dSbXrFGJMiYntPqIU8MIaa0LpZR9JbWi4beVNL5hXr3PUJO0EJnK465BqIEXD0rNKyLQ+f6gEEtJuzBJGHQHGDZckqTXlrj2krWUQosxr/XdEI8KNaAp8bzF1VsSzpFJ3NxWXXpb95fRpJHLAnUjqCZ5pJrKMzbC7ax3iw0eMy+oU3gB9GHCoHrCuxG3tMFKCIebhiLliUQtrJsdsEPZ5YLziNCR87yIC0Ezu9T5IBY7Nv0j4uuDsJAEYsgpMg46CpPpAhFIaIFmA89k8U2HBjRpYLH+xmWaWGguyCCI2UMHOGlZBh/l3AH2otpZhKe+5AZaH3XQ/bHr8sf/IVrfIAB/w2AFADLcvGmuOhPtuxX0/dLiZJF1K7RPSSpfhPuZHMyMMGaxtvak82ylexJMCaReclEqVXqnpy8i8bizyMUI1UbCZ1xl7gBY8i9olhgP8B2D46b3aYj//PRhCS8g5Jmle+ZeipCWxrj8suZkaUYkAcIVI1tvLdMEAKtToh0iD9QFeJIc+nqY9Z4HIiimhR6aSGPj3Z/FGfuenUxtdYTlLN3vmElL/uQp1kz63G1lCq39MS9+i5HjbEwxcRPXgKxcxzWc98AOw+ee4joaTjcrONYb7SqzBPGEVPBTpJHZdf4SJjllPltAstRLfYZT4MIg5mmx/Jduq+oaxKNjdkX3UJ98KePwxXNE3OYgRx6ce2vRBDt1vbFnZLxKiMETP9o/TyIfxJyWvzNHCdNmUzvv+JdBucfaXtW/Xvy0NlhsFBBCkdFvj6Q7L/2NZHfc6VAEDcx6rbRK/7BM5zGa0C83lCf3fDcPgLSgEw30Y52Ace/Os5F6pCgO5/DTyd/SDc5YhszjIPnZmIFNRxLY37KTO1xiLcZ/GqZ6ylXd24gNPX4Gxz71r5y5IcmzumFOg8gywYS+JnSb1RjmMSNBJLLSVmIL3LXepaFrVkxEEyM7IEIUJ99KxVP4NiyzhsvPS498GlGWuI3S7/hE/+Wx9OuJiWTKibxwC+Bj+VCshGPZmn+2wxDLSMYIR7cbby+ZnLIizw9nB6j4Jn2jZM5qrBT1JWdtem0DE2YDljxAtini+MpMkWdWgE4WiLZAdcy0zRuDagdb8jPP1iUGZzsYD2Wr1bgFfhM/mJLTbueHgEPOGbjJ+QnzFLHCi9KemHCBw2Var16nrfJFPy5/7S4U4+MmtInWHwvVLaSisuucPCSjki3h08xkffGS0p/i4rbv4PiLtRZAntCX9eHetJ5Z5NsDzORLlgQif5yXgA1dDYGav36CIre8VXLQ6pwyFQ4OTUGXA4zUNstygi4XGP2zZhdxoCEocQQPKXU7IjQgHGhcLNFgYwhzK5rqkOIN8hlr6uYIOsPLBtFQbBphRqdag1qAwBNRHQwE+Y+/JJamk4mbiQXjl2nYmwmWiYDvSf4tj8G1fX/w3qG/GkYqxy/pQzlUW7GMT1sJpL954hsghTYrE2fKXiiQh7qs5SwbNRYGNqElSBwEN4yXOOpAo5lqmUh9uoBRyou+dOknyPBVCn9qM7NRhSJMDnrF7Z6etI9dK96WTKg4IoBXZp81jJVKDVuKLCFrGfx0yeEyzvqGuykHCb7tuDk7IiHXr7RuFsU6zqKbyYuoj+YsMKEKa/a68TW/0ifqy0phflucqg65/RH8CwJlxMjQmZYiu3yxPqygwe5i7hW19iyEJwA+jW4ovBOkLNMgjOnVBvAyw3RTU4u63dENCmcZE0ZCQ0amP3yDMQjwIdJJ6F+UZfduPunpgp04Blqty/2i1sCR81s4EFw/PkKOsK1h/0dbBIcZO4CtLW9+bobkAV8Kw8fAU05zqWBTjZUX2anKdlFxtvJSuG1vLY9jbN0Pe4hJU6oZXBjMzYgeR+Mx7A8vO5K6F+zG9PbKm03R2hX43JYu1ccGo4k2oJ0BkCKnW8dQ3XRHyKlhHES6d34VNazEqwDYIfuml+iuvIinabPLrhzfqGcnFVs+h508JmboRCA/BHw/kioM89AFFJgRL3PPMjvDjHIH00qn+d6KWGHth59129Nm/JegIn/NFt+MctBheMzSUArTc41Wulf3qHHyr5t+eXuRktRKagPjPRcdP/F2/OiwbttOtKyBdl3eGCuG3HHPXLn3NscUSAX8dKrc0qCUCzyot1YaikHz8lwQyYUwywRHNmMO5XCOyU+x2Dv5A7fw9rGgFi0Fj8g4DQl3aiFqwiYepxFcA1yDPZB61D9nHMIrEoIDPHgrwK0wCcmZhRgzc5K8Q0o+2iLPqB788R++l/S8XwvXTmnzniArkWME7915zt1XeBn0defBD2V8mkJLQGgmMB/xPOQxuDYDSuZRaZcGKVsUMjqoRCslZTgvxHJDU1zrlglfI2ljquyFFk41nnj8zDLEJ46MRjD9a8OFLfciPmlzmq2xuGBo7xnhYUlyJ5xA2iLVT7J4YzckurF9M5mEHM9SvnbbD5RonaZ31VSJnOzOZzb62gtTShdQwF0tlKBm/vvLmiwt/MFcGTeFSjG+O+WIE6zZm+5M7VKa8k+6pvXgTI9iN0WWmMwH9vAYPyzu+k9UoW1LgPFFlEm9uui+Zxv4NiFFILb0TXG7FEu4bHBEWQFhfe8ZY/UStMWEbzLV18/m57NuPaY4ITcxlHRgD03UBxJLXP8ZODYoCozGss6XvM++3nCGikz3ipTBDMIzRVWPPkgUFcmJFfyDZeJGz1oN7RlJGmnoW/ZkjPxi9czkloXpRT79goj25oEoz3WpHt00pnUXcuylFD1B8WF2gblp9voZYkrQDdipf2Hzj4lzhdfO2uM6PxVKaOFN88GQyheYknCwhRYkTtrpx3Uj/Dnt5tkCJhCtytMQP43Zt/eiSZzXZBwKhCXmw9vK6MOvknfj7PaJiXTIy342TZF4Z6jcZZTL8R+hl2PceDkT6lsnG9FCfd1EwWcqnzgV0CDS3sI/W5ym2scAKOfPLpIlJhOPdLpO40sMr7Tivqj8hNlP7GYCYubLA1SixVv39rGB+F2mvpuWC0f7N55aR/k2HI3ODE7qnp2gGwNObdIFwBDk936PVnmZjnbphtuaTBYL+AcPpNVH97t1ibwZatZsv8E1NG5+PhDhVszNfpJma+c13U305C4ASSy0MccoeavpA4dqRU2lTqHCVUPq+oaQyPAsoJ83pSBvNmePNjt/oAGRHxr9hTU7CVzAvtUNWyb60GRd+mG3vOiKGv39qkwr3zxE3jDEAWnkX/7kgYzBTDAhil2uEF7ihx4IS1TYj/mlLxwjyuNW6j86yXYW0m9i1nyKnwtrIJ5BaFX35EHS5haXiEwdJ03FuruHD25PXcpij+aYMs3Zyk4dSY0pvaNohszX0jqXCFckBiYzK34y4+ftlrLVXWINa7byFWZKojxPxIH2qfFUxTdqKxD1ZTzNX5kk3KScGR8FeVQOhBuV9mJeM5nQhnvoXwRezkyl9iX/HkNy9rueXjGolLBhUnzEVxEZ2l231EkZeYc6vnolYT0cH8FCQWQZLdKgqKr7KSfsJ06vbxFmALP4nbRxhUsexV+URzs1Vl5CjxvClsVBnJOHj1l73mbJg8sO6lW2czV9bZ6pKLCaRtYqofccB0ZVQOJt2eyhsPRi9H/x8/sQx/+018vzovnoDVjQ1GMSi1JuBPfNJ3cSkgViqPVstSiufjc2GzQfzRI7j8IYyRUmCArOOKiG3Q2z7WVzEpF3DIa5+uF2KFXpd7vJpMU0TVKfl7j06CDZZn/qVptgTx+p4xVvUl4VKwBN9ilP61SBjbs5RyFrYPaPoWoZuf0yFRRN3J0RTMxq49KC2KZyNCXAHNewvVqMbxF6nK45ozt/v2YoVbOBfIAZDSNjM7OScuAPkZJeQdb/bYwHeDtoAUKFBy57nE9XUm32CCSEVTXXQkvS4uR0HWU5O3nsOOBWruD24hmCGo8896/8kIOTGd395IYSAwhPaCef3AJHJzDDrKxs5mM7cxEm/Gw3nUG+y2gbI9ZE7c0VyusnIp992XsNXTXrEz27Kc9+HN4ZnMghg4jzuOMzqQ3hBt8NDBD1fchpwAu1SshoXy8WHk4tLJQ9E9lSeWg++UVczdeR3LSDnOmMNtew3/CK//vaMEVo6vAxRO3gKamhj1Fr3xQWXi1lcs4/Nw1g84N6SKVCKu0zjHqpTz5zO3bx35yks3t8ce77C/Eta6yhD8VR30T/l974ppMjj78fM3jP/1XPWW1L1+y8pGqM0gLhJ17zh8HgEcxrqkpGTAlktwCcQ4A5xrO++/KUBr0M9f/t4bLM1PGqtEA5i914VO7fq0rBrEx1GejPno/qEOekM4u9n0nWRM+wnPhP8wAQ5hewmCTiOms9CCnCrkpSxTvCzDw9v9JYUhcQ4dMiizqR2xqSalCCxljR3GHRSCatXwqGJIX5q0olOn4sSarbFvF0LrkCMeFX8zJEalz9q+1YO03wq6VnrR2NQoX/0Spi8BhrYQQBfFjQQXwTLi63ispSnCiFnPUEv6xPymuFxXmmlaAHmBEnvcpb83brwJC6Xn569B1awr/HWYDQNQwNsy4OM0sTxmeQYAHgDlPCg2OJFoJ8tsskJH+S/W67fdRrueX3FcrBbwfu6k93cCA+dL+Do5ybs/0wr2b88VtW6JCBYMnrpPIQy/MrBDM+eGrHibWCopjU1avAuQLc91pXRtizU22Fu+5fQNCaOyPpac2FUCvwWfspC+3TyVn6N557G+ZQ0Yvbg4XVHxox+R7dUTRfPzR/RnLD5aHNfX7NQKSWQNE0affk0AWBSzxHoovo3XLCY1n1d8LHRxgiAGVNp54TPTX7QPTG65+HxZxormy0bdcLXEJXQ5j1hZsg4pN87dGSr5z+9UuWBWijotpUQJHyf6zNyqsyv76KTD9xUHzb2SBP9+WH9ct3oQyByn0gWsWQvV5sdtWHr6TWKxXIarqkSl02GEh69q6Bmcox2b691na/ygLlAqs4IuMHLzU4dn+lwRCCwmJuMuFcOfOobxxy6wu8iW/7oQiSrhBIhhxwX1ZM44PPvOFak5wypmojr1GLOrRoNZUUA1iJhjZ1ce4VLjQ7bl4AZUbY4uabeg06ULZVmpGubOsFyPTBMJO+A9GUnF7evhtSs0rbxgq2lQR4fXzDwQrGceIP0DWYFBbJZBmugXf+X0D+p8Hco6v7/dGM5UW3NXa4Q3nwLf4u0GBbwH4lX0Aac4nMo+vtFEAGJ2W1VQpKYkCe4l3t092RZVBQe0PU/OiSIK7diytuegb6xw9B7Ui7b19HG6aB8QuR9Uh1I91kx6VzRk2ULC1qSOGg0JSYhULPBzNDpSlErdma/mQJNeVJJOgEolijJc7hyjpTxVFyQVOrQQ+2X2Sk6Am1dueVew5yH9IQujAFBm4MDOxxMsBPS0nbDBX7gCl+QChR6RSUeTAgptVTrt29p9adpJVy847Vz5gjN1Q7UU/IwYzEI7OSoHDw5yYCRG2FMZ+eUOrQxEV1yOW/m+DnoI7QBvAbd5bjM8qQYkV6rQt96QRp+WID1yd8MLvD7ii6+8wABdbDg0+zppj2KI0gdiziLmwfirqrdscea+LFFMC9uB+6B79pabt5mH/N3mxijCIhahC72pWUxGST2dCglZ9yxY49pMh+GmWWsNElHAF7ssQzDdsR8ptioAo1UYwhifsc5rvxd2u/jZuv/Yn1btBp52j7riZuTSqsycPhxVTG2o77tLcXQzKADIV7HsComqE7rQN2squwuuNnWFxIbBWkPz/Rbo71k46dIZcTHKLNfq6kllS6QobIKlFlvqP3PHYuJIZKPzKJUlw+C0l5GuOU3riMVAq/maUjh5GvaRZx+n3m8Y3wRLXuOQifX36e3mD3z4KJ1RPXnmBkb2RPLspq/F9yuacDV4ytumivVlZVbCbo8EUM7dofSo8SWdQnl5/IKy8kaoVVH4a7qACuxaF6Ff8Fa3VwByB/LOLloFwT4bVH+JqUvjsqDmgOoR9FAL7XB6RcB5Z4sFIEY9tI/cdJ2ixt6nPhSViD1ZFM8x+yIlvn1kgqn+7LQnVRMg97qRftAwToWrCJo5BegBx85zeAu1YzyLjbAFx0fvYYTDjug4XG3KOhWGizkbaMITQQplCT4MlLtrIt0JTp3c6DVmdj9M528zBbEfMq2TrGFkH2fxI7P0VDXwJIMaP4Xf9G9+Ke9fXbZsJW4vtFG2TujGSklDkLer4Kr2L0nX7EPnAfrRoI8h2/UtJ+prlUM+CCm4F1TyLWuZsnY9N+A/DN5DxQZkspGvO0oEAlABUOrTxmS3jMok27MdBIv/vgvThPmTWWjyT7s8ykU2hxTQd3qFNMClqaZBOFSiMW8GdEvRKGgv2hffSiKcWntGvKnsvr+7r/oPGtXYXtRGg/p7zu+bNNjyKYiPfdoILiftK6AD1yk9PgVxL+FObc9muK/Krm9XYUQRdvfvM4192XxlxH/THj1FjXYMSJEHDMV4jxDr3YSysjlQwAVi+fU/7i/9QsQ4qzLQXK7V2+IXBCV9RKPtTI4pTyK3J59AYHP6iOklsODuwMGXNGKicvnI57P9XH76AFwUPVbdqI8rZlFGVOIgEFYs+GXr+H5gmj7+e1SY/Co0oP04Jh7ilCjIA6imokDDAUTJxUKG55clXM9ejsV77w+/QOrb3+9TJjd3ZgBfb0WvAWQCa5Qve2vmg7XcS9A0xSOEypaiq3Nl1cvY2NZoMJ+ojbNYF/oLaEVOMg8fq3sbxNJAQKzXHGaLRwQxh0raPIa/E4/YczgMZ2F5Evf5ZpoL5b32biVgDea9Q0nkkhOB3kZyYBOSncKTUqzesPYbIc6GThiOwy+wwW2t1axc0HNg14oxjemBS2LdUeWOH9M0A7CyTDMgYdHHyi5BKj/2UhFHmt7uhw5BXdG3MExatahMBOjjYhLwnQbse+4lxztpeFd3UFQWUNFChNp1n9sF+3TRau/f3mE7AwBaOHSXnUxbuCtJvZaDqgK3BAMw7YZgJalEDb2uM402ekUr5vvP/pKiS1ERUV5HJ/KnJkzbcFQtJTPp72Q9RceTR0wA4DbejENJUcBix6//7SUwS1m01bweqg20Wz9fnuj7ENvK7naqIo/9W/Nfkix0aH2EXY8IJlo4PVrsZHCzWqn5Pb549XNK7KlChHSjWG8aMbmRDKwCN/Sx1brhlub1Nia/0Q21GxRF8sr6+PPmfGLEPXtbdstaJ/YvnyZfajtOipoif+E3Pp8BkcF43ciDccf7sZxWIyCeAAwrEAYGiNCYSgrIp0pPvI787xMi0oH5cM6l8UjfmRYTSdgZjouw+A/2OZW7zD5nQN7Kx+xHVi+ZtTy6SOIHUnrq9ubQTQhu3MPRsHWxR/QxatQ2HH/SXA8sloiUmVNJ0ukwjYuhiLOrvQKAE3qiduGUg6qiOXxyI5bjxWB/O1LhQ/nvtptiy6ZtP6uGAUJe/IWnV37IBCl1sTlIcndqqR9lpMMw91NqaMdJgSvVosJLT48CDFCqhdrKMGn2xuLWAFwTR/XFsWDguU4OcwDNBbcLNDtjtj1hLkLOnCFkC3zU26BSyHySkVXqMzbx6kLkTinExNGUXCaBypj1tcXRvwnb6Dor0NM9cdLcX+RdykCMbpsjwMvNq6HK9HGigqH7mN013QijjyszwnnzE0JtCoQsz3NuNMEIAkv/K5jnW73tXFkjDV6uzf3FdvFp5SB/cILLM/m9HMdoVpxQgQLAoyLrXFN+9WRTwx+PO+asGdl5kCDuOmll+OMG9cyVXvPUoISPwWwaF/1d7LPGeszidTS5GoM+PDjaay8Njh9sevhOVCY8rOkWq2WfT4X+02Lku6lRacxJxgBL0GGhoICVyTC4KkUwH/RlRChUBRapF3BkWzgbEB9kkIKygNKudz0A5Pr+hiNM4XQPteHa7hRuQZzkXXB1PMNvOGjRfMdF9ZCooXeBJtRyEPE8JaaKMQTd5kZ6xA6zNVGCTbilDrAqdUU4e9y06Sivepsk+mFHq5Rkj63A7lHbd2sGaXeNfiweAvDT4Qo0sQdInIEFt0ESrXcnwdFSauOHCfPl9DBVwchqTG0c1zCVblKW9F0/r5FdaYXzjX7sbLwpdFcYu7CFcvGjHPvlcA2MPxgtmxnqThls4d9Olc1nv7xWnUuuvDIKhXpw+Y42IXGDeWGlEnhnwCH4HBTag4fQ7KO+lDaI/gEYwLjFDBlFOg/WuGqdfXNpbP1W7r2QsIl9LDWJdJARZ3VNBrTlIZpenudeBlxpCx91ITrYhWgEY2JT4zWY+DnA98qJMCGQb9x4XlN+4md718JupehCAS5WtlX9Ne1MLkiN1uXlSzf2zu+SAjDbd4NHQahjXYFJufSrSpHQWYBLOchpZqwa9AKHR0kx/PVC+iHvRbMlgSkFq8lynd8aF6AWGZNEVMzsIul2AeGw4mCb84TTrH9JujYNac5QyK8dOfiugqGvKBFYG0PIN5P6uwGCZ3WnGVzI1bl2c030YVdSixkSrVa384Ga6YNdDifmfitXv3xRlSVjdCEgOFu7eurZ0iGdj3GMl7uok3BEdz4VtCQKDp6aZnf5wgRNUfD9NcTNwpFg4YP8YQtlz4eeIPfiBzBaJUDPv0no/89e99OpR03QmPOv3EBJRVyALPsNnLDQ0tKLcr/l96BDitR3BkSXSO3W3j3NdQ7DQ9n4J2NBokmsDr/my+BvSKQ/QB59T6SwZSosJurfGWv94s1XUBsjSYwd1be0IPs9oO0+YlgWczuYQ/rb55pTi6nKPkqwLuOfGapKWhftoKrKRZAL+ctCYUd4M7NucFU7MUDc+zRGTT6c8v91nwaFkDZrhI7QwQ3OGHhnZNZPNXPsVq793HCGgJbLfdj2DjQao2OXrpN5gfMYvAkF1CXoJtYX+9yqxPj0cN+y1nW6zMOz5clUoS5sUOFY2JdI0xSTxyWjORLOdo1xeif51bn9P0C1FBeNHw4iCYH28SRo2c0Q6UBMh05Hnbj+F/dTXYhAn3w5hikMGo3L6SH7bo+rQ0047ERokzDF2MEed5M764hjLUBBELCRS0o5fxdKRJCPuufFIRXQjgux+IK2Hd+mRW3T3MA90jptUcYXRpjP06g0Dw9YXGmeSWWFbwe3GYdWLICCKiaG5Fb0tM6kctGNNwCvyVbCyDtVQh2Ql9uySVn7PIdUMXmZNsv+HVlkI2j3zFyX786BiVYDe7fyjvzXctvArlsTkE3uXxvCkRm1pdej7I5gu0YI8t6X1jWzgB1nuFRWrw57CObAzBmIpcUcs5eMPG8jIWj33Tbi880lKcBlDLjtIQ62NS+NgdtltTZtyEkur3/lzIw3eHxpUDgUosk19UvWvx9CJOeofA0fY3nMII/u2LEC+CfF8MorPCbgt0Ks6v5or7d84fGTVX3HipdMUZSRju6pi50Ms7JAx3WHc3j2t1He8mRKUQvo98shFux7IpwE5T8yyYoi/S0+kbUg6wfP+bzFfUWWt3RunTuSViazVLZiUKgik/nUvurT1kTeLi0mrh3OpIhoFxwgT7uGF9xdL+ZTquR3EOn4iSVSasYN9WZYSvcMH8u9glUDj/xNAQY69nHSZIGf4sCqK+wZf+yC1VS5wO6mfamoN1n/Vmm4r/vgJtQcrb3IxYfr4egtdaIJPXDvV/TFx+O7N2bwqYF18AD0LHksKttbw3TY5P5wpImYexrkHsNSasjarEac0CeKQLMHJBMSia2dIQLKrzfKfTdhe67l18fTEVC7MGF6cYvKAMXIEhyfjwPNDw4FPBHnzfE68VWKIsxLq+IEkWhU55FqhZaT3byJQvaPD6MP91urN6aYLEDj/N56S+6VpSdtfzSkvEACINmffWieePB7xjkPu9vh1Ih+pkekTV0cbpRXrhA1n9IQLetJEa6Mz9iJCWBFF91TMzQqghPxO9U+4OresW38Qv9siTo7HNlHchRG1kVmjRNeX+rlqa7n9BS4EjtSChPiFG+vxzmTm7+QJvtpyLlP9Op+puuNftJAM4xiMh8uyaWX3jtPqHRnt1HStoSIvN/IEPSAXw4ypgPlTEw8YCiJtTtldWkMZxRx4JdM2tWgovk9042WQMjcU6g06uEZ7ZzCFs8sLAhV4RL/gnQ9nG0wCFgQGSHoZjexHWG8aWzhf86Oc6MA3+Ltx+Wz4srjM9cYEumre7oLjl6rbo4Ggxuo+5UOhodvdyQ8zxcdDLhiV0taYCZJcCZ6I3RFx4+cBKIiHMLFXbP1vzOZFfcWlaXVPeAisvvaxV2dhK+qccNJ2SOhry/T1nQBJgj1VCoYECB/Ffzod+4PfCF+v1cyHuWmWZXCRIE/HVH35E7VEvKFOd32GWkwYpeu9DyGOkgHmjSL3xsATbT/lkp/G0FpIaqKsDhuq56NCR6T+wazIUsr7dTeKbxgWTj+GKvOHFv6FmeXDkyX0ADp6wiKSMOZ9QrzWgQNLjpRTrkOwbLcW0Ym/eOIazapa1LyAZV0p/b2gB/F689C0UJvrdmlt4rDV8IGzKEj7QJWEJWqAy3D9bq4n+Dzt7sCaGSDNNPmgfnrQy8BZYM8SGbxY/PvXCv2Tv9RAE6wFMcorTlZNGv1B6uyZl0XwUH+c31Z/xaCRKoHhgNdg5dJrIAtndwt0iXtFJJyxPY3LHEJ5XNnwASyFldEM6D1uhlEgy7DYdOBHKNPpQDgtJdB7TuqDtpxjpdXvQsqSdSvPPa98/8+36yA53GADiQMfczaCRvlrwVCuXpRj6DCxsKPcIaJgwd5AWIqTDZH5i6ChHAqi64opbBx9mRw1SaE8mT7mty8hvXk6kqB+zPgpzidfILTCFLPhV1yIa+lvorAL30tkkygTC1HFGQFFCqBd89fwaXSO/L3SCeFZjPjeFE6aYohkydSKeqAWJQ045CeFAcJXbR10c1biNSLF5CdfS0Bk7XhqZKb+Pb/qSE9nS/2D2UczGRXsKINb88GAZ7YMRS0JrFDZZEeMTaLqvg8GPVysOx2ECXlWGx8XmHFyhczTb46qKA0bH6Ew1Vf5majIxtxEETUBv4X68Bt97+UcBC7WJeDoxKjGat40UFRzY0i4lKGdw9MKrNRNCkrVdKaDCpQx8URUvZk+3krMkmCzNvv7cXCy2DNMgH7pP10DY13WLsn7nwmAI4hJVS2SBzP6RiIFuR09MPF2CkcUaFQSskUgnk2194x1mv1nc/30zzmPO7r8fD5cAj00uJDZMwjhDhu1iyaFH1/qjkE/xV0a11bZEiTtEUyfpg0zc2Uoqo+5qTcyUm9Grh/A4SJflo1e28kEZ6bFQmUBOcSYy98XJCTUBg3vvtEBsUHM2MR63FP+7IoGmxxXnlU58M/sy5W8YuUYYdPSPXmMMRBhkwuLeUGdSBEESCVMouyMmR3MsSSjnkIy9CvlmXXPUiO6V0NcPQyzZsE7HojPlntCiLebJ++fhLJYOUhYE9O6qxjFC7d8QDetbjk/H8ltzZjLuVAfdFuhXtM5p0v+4N6N5fFQdP/azlGdRHKlQVy4mGCUblAg5K2qgQokrIGcnA4fk9sOSC9hDsMHulI5VnpukInty5WWpKAw48ERhWHg7rI+jL6r5lUP9oPwtvFe0pkOk3/XD+9294fzD//6A+1qQiB/WwYlTFAKtLLavVCdSojnCBhJhkCaKUIi8UGFSUJRBuoRuQTG/RF3eFFqZGQ7Q0atXkqp41E4jwCbuTCu97wa7iQbGjO+4pZ85joME2NxZ1Cc+wn8rDA3l1TO3Pq9sHiRFPt3amXg7hfVDzplV6+3TORg6pOUaSOYE9YUO7CcnhS1M6hzYg1JTbNkmpjpAEHSYDR+K+qi/fY056XKlU4YIR85yH0pDc4thndE+e/XPkxLKvMimf1gltqiOr4tQLiRZiO87/NEUJCtEUAD7ZDcDQ1hQK6nj5R9yybXVPIUh2xcH0rmqrGgBb5FtSx7yu6gxFd/yCMN1mEbKjk1kKcORyAZAPc/vw8KtM5lSemmQ6T8EEwAWHmL/NvozvYLJFDlFpyLXcgokh7hpFSb7pFOh/JrO5bnVF2SQXH80pL1Tp+4PNnNeO3Dv+5lg1FSFeROwvCBqvB890obqaZ5ZrTFXJ+525316Ov696iKeTh0l3fMhmgB26sdFjlK2GJBCvLVmnVkgUUUBQvgURBkPm54Zw6FD2Q7H63ZebqMn4EybVc5dOl3UbHx9AJoMAgqQGh6D/VIJko7NGEqXaUu+0HEEZBO/mUFsOGMEHyNufFHzwnEhR4bRDBcLHeuAEFVpXv97G3fZ2eyFFByTCzuO62rb3/Tje+bJWU95VzGGs3K1mgpziiFVQsBtMXBBVD12BzAOgxlJNdlHxGnV/hv3TIEUcTofmZfu+uAsVEYW4qMB4pw1BLnxXvYT/Sxrssezk9uK2RUdEq06bsDQ72IsXSxSZL0jByrebUT9i0is/CUoQN8zFRRBAVtEM0jLKUg3zM4S3D/at0XhDua3ONkBarn9LJkydvd64UI3suZuadmhD2vkCdZM8wRSMKb0luV2xWYtWY2P0H5QKFMXBdnL8IqBwDtVseG2+s0HtgaQySAxQ0eAKkscOmdg5RNLw9JHMY342n79Hp8CWmmE46R8Tl89IHo2kgVtLNWWX+QBZM6zwVsJdBxDtsc3T438WV/3uQTuhguXWoCiFGDb3wce1cOINHVo/gDS+LUal+v0q9mFQXrrVL9WHZhaYbwh1mdDVk4cKZ7hKI/3lklR4wftr3eesXsNZKZ8dxnEWHIoh+6A4JApqfJzAXngsgMh5tO6GfZHdDRPqmcYOgFD76M71/7bXUXnfhdYgsqJD/cy41x1DZWE8M6Ri7TZfhqUwAY/VR/DuzhbJ5F5SKkKUOvRao7iFwNasfRbTUj7jbg5xlEJle3SZ9X+VZUuS257OO0unMoucNnf7sITx3/mXAMLfvzhoJLhyr/3uGHI09iRNDNoAefNIFd1dAL2IaVXD2ojeGxzmAI9e2UvXRSuP+GsSmUGdfsDBMMGKr6rEFQQzYQjTHanoRiG5stNQHWyM/LaUnOHarnas0yttZM1xN281owQixsZHTqFfdMsVJNe9r387KVx1403KFxaffznQJJRiUfCwjiIV+b1/jgsvtD4m3rsK0+yoiAFCDB7TM8d/TSuoTW2OwKJ9hcBQzJlPQk2UIiNYROc0Q7IawUSvSgy1x0i1H/e3sFfWpaVSr0cjI3ar0eq4KYwHQJVWvzQjdRTMnqg9WKuqKzI013b5rlLNsSMTFzt02C6htkXy81VRPITLTpdzcb3HPFRcrySxPQnQTGtAK1NcXRs+5KMYPy0+fcdMnL2ESnaAxYF7eXrUSd3MHDCjG1fgr8uC2Jszl4qBiMOCipfQ/a3hMXWQeG89ukxNsHrwW3Uft/TnGhrKi0BNbRE3TSzqMvWAMQSpi4JjYb4Ui6kxfoLgecVkjHmPZQhJQLk2NZr+kKD7ux+DHJMRM7snFDr3R/j7zoGCpbpzU2AT3BECpqaulK5J/oqT5cj4EB+XYX3/oRoyWUv2xG6AsaWaZ2b2+Y9oNVdV2qZ0kOBVH+zczVrOxFyh7p7zKF/V50dJOWUMpJFLklJgDNiM9OVlazQ6ji4Bhl9a457HSLO8otXKgLvK7wzWBf853qQpCHXvLDTei5rAkrnER1d9FZ2FU3h7YYBMuDvbR6SsGRwqmJ7gM/rFMjGIm1bS17uOIEHDzWegW/pAoP/xt4Z8z6QqUGfV/fiHDza/l/HfgnaHY+RFRbvXHF+wB8Ty2CoyxxpSiREAQAm0bx1fRvhVTMIzrtJ3Ovss5jIo6xThHichayUCvpgU/QoklVYLAcP94tTt93dPYwHj2xkX7wu7s/iQb9r8TI3eineau8Yweoi9WRSwEw8zkRVYLKHPeRwo7zCAu/TMqQBRxLfDyne4KsIZ+UvJaDw7KMh6HoRRpUpxFprL/M6HblGYojYEesAbY6V137oi/3G+4cjJJgsg5aim68EcnFvgd3H2x2GNqmn4eerS4WhitKkSRefIafKmv1HVRMDWiHbDd+J1M9UKwpXp/b+tWUqYfekUJNMANtz1nJVT4zq+gfPtuGtX9M7ZqHreVpLknXu8ytwqcLSngAoAwqTFQcDVc0pW0zKBxkvWRrS+QQXgSMW5P/HMgwbi6kLwQakdpLNCeMSGgIrIv8b0Lrhkbax0s62Tp8xdIaqmNmxyyPjyc63jwMIfxcKmAp/VSbROjZZ6BpGHPHYGAA9pW3/BNzUNwu+/EDqftKmPBQYxhVcyspvv6Kqc8OcdjV965bpVMFHXaW7FVzKaXTFkMAw2cOGQ/lphCsAJInlonAJb5db9KiXXBQVu6EXpmiqjGs25MSutmx/k2fXtNCt4S9sKXTgu+NErwByM/ph6epOqh/7DH7al7UkjDPmey1LzvrcMBWbVxo959BFqjEGTUyPRXKR2rjURqetX0Og9bi8agcmGgRmka4B2GEkPaLpX5SipFYtYSoGneLlc/m19/Yy7Pj3iZQGHPGuuLDhOj7xL0f6aZ+72TutsORQHECWvoWdmUBgpMTRiAiA6QOBkHyZ7Tk8x8d6CzpdD3sDaaAW73Gcr1fZ/MlKiJutZFarhwQkLVTzD33Dn0xP/KAoBHhF6iTeHszUPB+fosv+wmDJOmOaLz510waP1ov82cunsvzaNwFFh1a5ZyePeJH46aVEAYAIEx2u22b4V//Z8SAMt1frEqobw1N2orGWoSlAqHNgwMkaNg9UgNdOT8MUHok4CvbMEsPVonEQNc0gxlPZTjdZZPd5bIsT3ZwSVx5iJBWVf2/NNQH4qDLNQPTcTbYlEesccu2GiTG4NM1oDKkoEOS7wVAsPJTA0JAiOBftRjRWZPv1U33cALDy6C0LCWTTybK0XlkBzJBvkrYj4KbuKthmlf4Jp6vwpanfYu72+bh+AeLZGxGzV1Unj+0w3dy1PZk1JHtpg88cWLWteXLVFZcwRF+S8jsMYhNHPuu09x/rfNaNHLOjnYqZRId5Q6sAdSYCl6N3xOfh7zklUvq0/TvlDSJfrzBuVB+tbvUJKObKIjuC2Fo7ytOfOzHrnj/6O2sR6YfiGTJTAVf/94YgfvGhWH6+ZBwlzsFj6EBbX9MOK8r2zo4VGzLDVFH0CdNifDjQHk0oQ0pB9vUGdbrCOQqg3+JgV9Bk+rJaR9Ac+Z4jMeRbPMQrjF8Lahq2JPF/oyM8QtAXO9Bgs/XENcbrFZFqXyu910QO2VpsrU2sP3nECTrqy36TmhiCu69qN72+oB+oFQgrRr0iulmuQSTi8XahV2vu9dJQl+45UzacVSYxgRqn6vPf13ugmsCERIp9qxAUvQXoOXHzjmJ7WGyWj3RuNCwEKUSk04/7X0F1tAFCqGMySR9uCjpTNLCL6258RJa+SUWHF5kKJS430zRuF7vvnToqpV2BulorcEWtUEp/o/zsaSqo5t9pSTPFjzD0YdFNCLO5Bl8Q1C1Ekmr467cwcSQ6HcyIUOyJUxQCu5lUkc3Qj/tGv2IZoHahvwjHJSVly2EbsFNmlut1WC4RrgFVXFlV+W5dxZ6uB2emsDHHNqzK5hbxM4b7t0eT4ZFZK6grqKcMWpGhLXcwxqmom8oxkdpZdNhciPesfi1z4of24ZogR6Sh8j51qkMhE/Xharwuuodxa6vpXPyywtYKmzoLvcm0KatDFad3Hv1G/gEKaDKozfm9AQImw3QpWU1TVw1g0adq0SI3PHzOFEqcpPgl8iTYB0iJX92ga7b2v0iVYY8OCLybCBiadm5cvlIUQRCMO4NjHJCjISHvJFBEIG4aQu7HuY6LbP+gmm9PhsHHZFflTejSS1eO+c0imHzL9mDmAZr/CyHrQ1G0kxi1RB7yE+A807+LvTj7rZ2Jkt3fyl/A3132liJh6nNPds8ornRB2l/HQ13EixIMO1+Bow4dUMObj/E9D5CY6KA2IcaDmJAiWPp+3D2SRx/0ulahr8mDPWHkIyDDVw6qXQAwTmoGzvA4QsurjCv7oPXjyp291AjD9sFz7kdS6sBZWq0OfskRsEevuC90t6/BRD+xijq3SNLnYLzBuHHiUNEsHzdRjm1JOdFK+KdCEvz6yBO0ecLixfUBKbwkoqvnAKNJSGlHf3WHqIyajQu18jyCeIrofvWGK8uphgWNEFv/il5MacnamRm7NtFum7mbFa9bL3IgbCNF1cs/mWBoCnPMEVsNhaW8y2db8rScipTMykJtoZWtl8aRl6ExpZMZeT0KWkZR6B0MyiwqOPuJjGu4v7qyIVgihEcMtlYBkt7H2hnSZUu62hVDVi1+yLRVRJzpJwlFJeTVfxWEzAQwgTgRHKIMDrCRoR/V3zSm9kg+vB9VV/lcwFuvcA2Tmqq4EXrzN0zhdH2MkKomqEEUGJWSSgF7i+OZ80Omf6pdzKpsuWklxOVsrAq2Y+ePAgfv1bBTecq3MvCmloVM4nIhvjY5fkZHjJ+h/vs2jIdq6tAtcB53uI9KkSPER/aZuyE/q2eb/cl+lHOKOjEdOBszETRXTj3SeeE51Xr6WsI9oYi1MS0DITtbMqr3AMYfk12CIp9LV1u3sKIK70JB00cajmkeSlSDVjav8y1cuuaXiDw0I0fg9WzovNg1nAsW4Sc3esLx/SAWE2cixvx6dK+TRCCKWrTYaiEjF9j5xkx6AFGdDZT+aKiHnA98UdkHVN+f/Z13RyRfA61WinmZoI8OszdNvv8g94bL7ufKpYz4fd6WZkYFtS+15S36x/Jh1zNGUkOp6MDpGFmTZbjQIS2bs++2K2/ZDZWrMWnk+Ckw1+GqIjqrbxNHqTKKgfz27ILB93Hovzf7IU9HNfFsxBP7kOnU+86WP1VmYjc3Uc/o4VAfADyanYTB2A00cXWbdMmuLHHwXFja/dEzT09Om7oTsIvjM2WCA75flBjZ0YdkoooG/DE/63qQRnKZxCrXFXg3LgXMUwPB9xwmaYtJj240Xh/GBg/X4/m+jEtbGstLsWt7aiQWO+JhziN/X75jRAZG7jYyQSq/sD+0lS2CJnxcL12Tm2lWo65Q+3ZVRZDQaipEC2EdwScEy+21E4+an2/Ewwfd994BZ4OjbEOZHZaG+18Who3slGR/4XeIWOwUxWFoU3rQkPvovNVbfyu3XmGCBiZSWBrryzD0I2pv72ATusuqPIFWJ/G8ZvQ0OqQdlIHFVqWCFM+a8QyPlveTSrjT1D8pHrLbprkxZzO/eRWZSUInodjVfvRKdbpC5OAGL0IkfoYL7mPG/DImvzFSTXnWOXfggXUNfa+0a/i6bPPTXBUCXyPZcWhHc3KqELDHcg/NXX/Kkd3lYOEHoKbWVlGcvWNDQsoQNyRu7iTBj2soG2RENY2cG8paou8YCqbrDCiob/XdPrCLheTscRVIxfVe1pKL/CpL9qoFtuCeIdHkAtoHZCHt/RRUj508XBB10Qs4xHMZH9IHPZ/HINyajl6UxxWLvbOkInY6DIYtKzUu2L0OjX7QyH/WiTCb8yF1c5NhzksLHa7VK+gPT6XkerBu+B7jUlkQ3/u2cUgOBLudKgrp2H6eQFyidunXNpAs+PrNnPLlfatzS1w58FRW7EEHI3haOql9lMsLDGIMA1+OM5lRwJ6y2VQMsxTx/gVpKGBnGN16YRVf0ylGeyCrKoESW7XIgbRL9aMcyXblXlWwVRtQ8LrAd7lH+Ul606Gcro/QRY/QKg6zr+Yk/vGXoIYUxxyk5rID+A76xvZleei1jEm8gRGCQehXqlmCcf7ZKQwG4+MqHgle1BwVFyp/o0cFuN0y2gisM3l+T+/DYCsdUSjEKiVfgbNqK4J9gww3MIAHkVMoITkvX4g/B6tDMK31YFd0EQo5TWX+g/urpNZWlziCMgZzKqWIDaQ9On+C2HLPATKJj3YLJsoarFMIHNrhRfVdlo5cIzfjWdKWcfV5QjMxiWY5RYUPVbl5XNj3NIsm6grxj39dtYY4Lcj2IIjZiBVnaeEpWbVDbI77XzfzIYwSQ+klOt1Inu9MAOt/3zeNTo/ICNq4g2crywxKllsi0vVaYjwAUzvQ8Z0L64bVbhoHyHZ6WVUQpAqckFAI8vOm8elfQFdkUEFD7ou17mnV1J9n9cR4HdM8wvOERyhty2fQpp1wSKaRw7tdlBT7sk8GHoPojbO6dyfojAEpK/nNDZPGTFNiYnnDrzjz85ZAwxWc+QZMQBRl4UJ4AGRKhG8G52LtyOOjB+QVMue4lSs9SdFb2zZLmu0uckoEAm+AlcgojdxwjOQQ/qFNHJ82/vE0z1yOXz9v9EpzBfmHJgFWR3kox9FgBmeRM3mrILQv3bwBL6+Bx3MFdhIKxEFoXBkv0xpol7+yaNPwFyCjraDQRi0ricOtlGMubBM5/EAEJEZC8xERUNwOTTuqKIfkYTuZnruFO4a6W0x1PYQqSTuQErR7UO5Sd6qziexmTz4K6+KpfmLppEIxO82rTCOWpEE+oiYs6bQyPKWb5k79DQPPx/djnTk8zFz2vuxyQuvHN7+nUUnNjvx/wb/zDxgTPXmk37lrgQwaQMKIiguVNsu5IHQKFrR1FYfmzex5r+cX3jX0SPa986zx4f2oT0POf4RKVOs3cY49AIhIDTqvJRFmFPonIkRpRRISmAqVAvZVO4KV9Bw7V/aN4pQqLbd0G9v+f7ALV1KmQJ8Vq6GO296EIm/lMuzHWgyA2mm5lLFOKvnAyGcefy0Sp5RNX+CSKpJ66hP/66YbT+QOdThCljH1w4cA3US/PGFsrRrV7NPJlk75ipmt0kkOF5tXpcAM1BybBX5G69LDqj2PSHwcJFJahipt3IZAIuMuE7mJQGRJR8x6PnjNtTaKja+OtnXTC4R/UR2Ijhalp/M9ABbrPE2NM9xuC15J68ujCiJtqG8y7XIlSfOWuBn13/G2mVzC2wNjP+UYDnYXHswous3b9vZqB2jPKN1KloJ6T59kt6nooLr/Ca7k2U5ZW3ovX4ZROZ6TmvDkXgiOm9l2MSS4MrQBh7hYnOgHZxTw3X+rP5tUdNKwjcunZaoUsj6zWOgzqI9h+1b2ZYS7ukslpTcY6aX8162p0pO8qQzKjrTL425dmoGPjcQRwuHlXPtUULkAsb1YCuyyc+0jUEZE3D+FqHnoK87sC9wA1VmqtjNpTfbmR+99E2v/l22IJBiBcaRa+NzwEFhAkWf+3HF+eFsCAwbBxGdnOrfJ4qmVmJbTy7lSCsFM/BVNGjl3JL6iXYXkA5ROAsGp9uSYynRrHUBFm9zIYB/4InzAd5k4wXdAhA3l+gCHVlV6igkWNXtqjBPtCsQrzfhzl2xAagix+egyhrrmgE8JYKA876t5rKyGGENY+UBeJCPalygyozn7Vy7e3qDq8fnr6r/e0La7uADGrXBjtf84IzIPxmdvFtqSlL17e1aHOs1wyLuYN7+pzZqfkWNxB08c29OHGpadoE3AdKD2cvte6DIHlplVtV+ZaXSt83j2fP0sdlrrLXtKU5WKNuvskkt/21U57lq3W8lRjJ4UNuTp6CCUwhnN6ahBUyHIYVDxUckqYD9etxlDoOynpLTKw8hFfIH+K1Yq8UV6SdTwPpEe5l40eYTcpVo2Yub09RG6Q7L9Mk5+PM/hKalRg8pJmW8O48dyVnMFWlrphmER8xKXaPwofOcOZA861/J+Uv2ahfanVoU9c2N5PPxcwl+o3ZhgPdDEi+ijF7371bEjfQrYL+4bcJcEm0kb5r3uxEbJb19nVeeDZfFvOoIJQtzq9anyaE8wUiig8zVWHK92ap0RZKmcXxuFcpkdtj+fM37pjbx7ScIZ3CmVhefRFbOPv1BJJeA0wR+cjJxRHIzWHwkRl+gEbt0vokFL/7LRixyhLBraJ2DTwhI70P8FIq6Yr3UEceX0HBmyGzZpXvEH3XzEspjm59G7ftop/0VDyLJbHzqljgvkR2j6ZjbAgWv6aI5bCfcXTweDYRLo9F2ONIQVuZTQfDMh8RISE7oiWgXsXG8P8OMTD21A5t0S8Z5v9ju6QfGhvt4Bk4QZwGzSNrrorbg0kwAR8LxmrKZY+CbovvMRu2wCyvlB0/dRPuW6Bi/BpWSSWvJce0Op6De/dz/rn0vP+Y0MN/HlMyrNUzIyUx0JLc9Kp92TBiAatSX81mbMOCh6RNwTOdQ4hRbxJI4j4EAy9LY5Fp1yHxp9I2yRTkhx0j8GatYUedIqDTDaGo9ybp9EynCIkvD4St29/lQxKZVtT8D+IE5CLQoPTaDWZHLb0GJJG72uGj3zXGuC8jK2mFalFakC1JollUvzvwmEEmu8aD2WqQ+UueX1Tp1SbyDCvibt07W4+IzsA8dZ3m8kLfjSI7hPOGiKDyjuAVdj3kZ1Di5PBGVHlujBMYvXaX8JDedrE2OSIKFWCYNTTjDzS01qVeTknQnZbvsNnHgcm5LpyuYSCl63VkCRuAlwxOeNqBNuFLS8MSyU3KGx+qnysAZ73mYOV2lDmOczyg5HAkVu2QwlmOy2hguSKnXYb5XF2q4wXjmFv167pL21n4bRXjEYu4brnAEP832O+8yWs4ruVeJZqlEOa5S/aGo96f6N/+9+5XYWX5PfiuFAkGUeDqKFRCzT7fAn1rYQ6wfOz8KHrIbkRu7Chs7CBTuZNXc0qMsHZmysy68JG1YVQPRNJTXjiD80pfWf+bLh/HHeu/AcHzYsmTBsNVZrwyl5+Dt5UkTOsoSpjBOIv7UI8KXnM2ElXicKNhEm/lGmik9RvYctlIs8Eq1jwTjXYvAw5ASBuelPClbq2jJ25jfcH4OlcV8OYxnILjN7yQ2l9m5YIIifn6cbnWT/xzRhp0zMKqw6pLNaAun9BEtysrQhTbEskpckb1R7WNjiwNCke+7DZ0sn1UymxwY1ASKCZZQpEx0jSU3uFVfvabMTTsaZxdXJS+kY1Z4nIYUrd/itY+xTCUh01bV7kETQ67dWa1c7CrdzTe3HaDctDNphOM3mktTqFaVg7B60/OrA9g9KLC5+hb8kKay9eLMJnjKF9s7sohC/+9cIKCjp0R0bkc8Z6U2BLM0cisMMIIE7KeVQo1Y1AqcI7l+kGPzHDVjRBgx3BKCpGX23OJTVSjJIbAybl8GRZdW9WvdavQkruYFN3IjAMzdIC+SrcK4L7jdz3czOZOrDJ0jkYUbS1e9dYOhT3KMlgCCVEoRiISQP5YYjKOMiA0wCUfjMMT/Rbkv14KZPcTSk82eveaLVUGawX57C7b6X/oP2B04eLvL3V1ScJumz+RhTCR+cUbk2F6nG5P3jJZOQ4FlZTiPfkg/UzvRlrJeMYrb/R6OLIpIzJjYNL76tv0qFmisZFgkGICDuLF4W9dFnAIYQC/RlEV0/bHXieM8lo9eqHq79XxhhVfAKPs2mcCeo6qNw6cvGTw0nRC18t2XvImyJX8xkdrpCCs4ilOK29nBcG30tX30Lks49S00Y1wo9quESpZJIwKj58GbSfvVc3/S4tWbtLyk9TfXYl29WAbR2aRVdw78JcDNX9fwAgVnSadaM/nyUJgbA3Eaut6tuBh5smy3mCS8UdNJFsUDspLKE3NM72ceUdnlHHbYNn17bXNDbD5bKOUu7dPp4ZtmjHF2Ko5o3rSFsXe1sBTHXN0pwzlVFu6h5zXPqRsm66hKiZLSE/84cDCYfjMELlSNKQ4qiXYMlGP0R9A5SuCPHT5D/+Ov8rgQs20UZkswF3jnodp56Zqoi4DQ5gRe026KsuCuyci+UuvRQdoE/UROmHR3O+djMCbB8N52X5Ti0IRFbHFTcaH38jNc7lnGyjKn2uYgaUuo36lQPCve2YMv9HNF8xQvGcONkybwtIboboJ0p+d+zz9Qwww2lNckUxts+6VSx6hEPrYfYUoT7VHCIA7ZwIOOxe3txTUa7oetzfc6B1oElKtv3aCjC/38FyDuqmfwhlDXY+IoEKnkNQA9tjGbgclm/RA1NbAkt10uAP+L0kVBa29CWV0fVyK9kt5GKkW9ji6VUBW8Pfj/Tu/zcEO3xgXnzEDQTsGw9tCNBGOim4y7XKiDmmSqkf2cPc/m5ITd/OZhiYyG0HPtuiaHfpsMk+SNn0ACueiS30Ekm0vP0CkLPhVEmmBbWS8BSPj6Xxr+fuS8TR2d3NqKbaSUcMAZvLxu7sTgEYSoKlG8BvyzEBPRj+VXUn5a9ocCzZOM/LO1PWHn0az+31HK3Y8jBDvgek+rfedLzYmYnHX129dv/UpaJL3+7rJk2mqIMZYjEhs3+9deELeNJvK3L+lUqd8BkZtORevgNLs0/Fj5VxAvQPdeeNJS6TZF4CfKxUCBOqrNRfqmfpMmWKDoO7hvu6KSZcsQTJMVVprs77Bo2TKuMXFDWLqtYM65Fd0UxYNs0FliXml/nASLwYAz/e6QjYTNndoluFLTfuphnMb5I+qC3gtabj2L8kyCuEfaSHZgLUaoXbw/lNj3TkHBp/YXsz2YjvoACnTF+rWpZL0oSuisIwRrF4GGiA4DBwpn+txlpXTbRJEZQcarv2vGtWurzorN+cJbePVfsEcQO/Q0uIkehHSExXDbEv5o+VuAdIvGJh5eT4YX/Ko/eAcM5KfdCQG1hsm+As544au9tt3pUCZghpgVfEdWto0evnfrhr28xon4oowzpJdUSIrhKWn9+MVUsj1xiuIudnmvliUlemEH92gtL49j5ItmJRxYtgJBSurgwJi6cKUbUPrYfQ6Fy/J62mPFNAPAD08KGUB8inyh6llX8/uG1/5ZVbno0cNN6LWw8/7mdW7dhuDdS11BcHOiQkX1slWhUvJN/ubhXTsJsqnj2GNyCnVYebVtKezFxwtZmqVQfK5kAIwdwYhB/KpWbHoSKEZD2+HSP/bBCp7baQGmotgFJussWJz1/KtqJzIFXXUKA2yyZOjMdw7XSjl/Wez7BuW+56oApT5wC1DfGHcoNP0ZsE4lNd1F2r1kRID9cdYx7gegaD1x4iOiylSTBGTqYSRO/sK3PcP3x8x1qofbE6uAv/Qii9F7bBwJhcQtigMBfclh0Iao8XzeSnFayQasAo09Q8IXAW0H9ONoFZIzrgjnOjrzzDsrjm9HFdDOpHJrcH0/67tpW7VXv32uu1+MT8DxqkPddh18+3ycJTaqBjCYN5LBuOMWE/1AZArvDpNRlWqUdiOzeiiXKx7nOxrjHBf3r1rod+l1RRPz5U/RuZg5y/ZvK2lUwXA2G2GW3yhPz/JdPQ7ftqDVzv+dm1Hbi3eC/iPRZN0eekLTXtovlcqBiwOmYt9jd2j6ZnlOTJPscEjUABtTqNSbhdLSTdd6G9QYrwVLczsyNvHQkw6uIMFC5iolFEQ/DQ36V2ZIgGm0xanXEzACGakLpKZSht4kbeilH5JmB6tr+m6YgXyQNA30xrdGUvR0T4gIWvkzDgiyWg2IxqeH9v0dScrtw/3PVJuNaSvG2pMYsRmf42bdnsSh9HHlWwg325cX5xMc+aLn5JE/aV9a+HzkMK8cS/2y7wrBZ/N5PJh8JNgfriGf4Sg1CIFoso9AozzL2m+gmdM292Drrz2if0j6MDxY/lzgcX7mbyp+4KyrBn1jQp5lZQ5DtXGAmw2BKQAEOWJS9jxmLe9xhjY99PXlmCjGMNDSdbLjnRsd76JHKmcyBW+Gp7i3vb3PTNRb9AkpgjDGYVchvTU0rdZHsJLALNRR0UoAKG4bV8THPiuhptJLM9hu5kC2qVgQaXLb9W20bXc4PwpOSNFGN01hVQ8jgswczn+X2xtjmyNN2BOQtLANSNB/LDZDEEWHqWB+6cYF7M0u51oAJUwv7SFKfzJNZWBLYzVgQ0HJlhl7kHKJdDnqScEq18N2zSzffhXxZ0qrzqFjBHpJJLhFv/FzTwGQuQRLk0Ux3+gewZW2Pk/VpSi1GvZTOvJ+h4ic2RKzbek2o7nyUPplUMzStdVwtVUDtcreqUus6jAqGhR9c1TRn46pRpbvi8sr6NRoxOIw4xFi9RNvCwid7il67ityqMMsp3pypETne8brZbOSHW4pVsGf4viDxqXqsmkWYPKcs8UmfxTw7D7WI5Q4JqdDsVGe4BS+18NqThHCCt88WdkkVU5O/nj2tIdE31Ili0YtSw8yDQ5oqLcptYonYhMuIZeTro+hNcFLC/TwmQqixfHnU0sF30gBg0eKqzj7Q1eHpDECK3f5Un2eIuLHOgSJuNquXBMBBvW+fq+gvu7pUlJn0IlP4Izi+9cGktei/Gt0FBGvW7Emq9z6cUXVHWOdclaU6F9cynsTuALcqrhUY7Ra03J/oF5qO3Dpt3JhXpY58m5U+AOUZGPap1QX1yLENFIa2NPj5KGOc3y0cGj3ibc7KGfEjdqFavNgF0TlEofafNBpeRjmfZ8fgWak81wgL0JxHDL5giJL2M4MLvbPA9bf9YyN2cGJnqnOkemBHpT1oGo5ZqhHDYx4TTUP4Wz6GWnzpuXQOVNhQmyxi8XtYkcfFEiisECHP60KgEOj28GvpwR7cWe9S44kv3UoCeBP3/fB9l9yzPzvnHfkIphjck4hFpoFcQUe+ntQ7mOhfUNkU32eB3Iw1hAaq0mq+Lkzi42Dje4JIhjtME+1vyfAbPGgskPP4R7kt02YSiE4jaCaZmHX8WcbNAYlJWqk3yoScACjaF79gp1F2xq3kSDATJxWuu6k7mN20scw6JUZld7qOGbZcp9lQlxEvwpaRKhfyIjrxwBqwKTQZU4qOGVnnP8HXJYA70s62kJpdpfTfTF/3he3EqpZA1LNcczcsf6vcPJow5PyeXdkNAETqni71x8sJf2EQClT03l4NAA11MT6gnfnsHSRgWivRex3E9KB8Xf/WbO/jIgFFxnioOzNV8qwZxRS77aewDVGg5WFPEVZZqQvNPMJ/psYGVDs+u6g9rukP6d9WIW3QlX4qUPD5fNG6nYf82kj5hmsvTGoQcG5ydUwQNxu5+pj96MbNEBp276HNXtV3hUAQeyYdTu3WNWx5YXu0lPdMZt9VytXsm8L88OlztYLS86W2cGmXg2QiPJI2UgMlnQbGIbrkxv0j9rtUsxnJcp1ObkIMhOURY/D+n82w7qThWWI4j9sQnXpEc6kVJrSHoTdyn82rgmo0qOPr18rzAMGrdoJ8lEpSLDlRvlzDXNka0Fivtd2WO/qzsz4koNXm39oax3i/9wb8kaqg2XVUq84b/50848HA7mf/7z/MwRHbTVgyVuHQ+9KsykQ3F5hEzmKRn2Qo4IWhMDjEmaXYSElyCQv/amWMr1EZnvbNsOUTFd1DiSYpBx5ztd5i/2vhJce87hbLHMe3LJp70vXqpNvTCVUUrpXJoXU/EC8ujnP/2B7ZBWehZnV156Z6Eyd7ZF9FfHgKtA61nY6vuqAi+1AzegpfGtZ03KCQskEXrR95CJIv5oxE9iXvCxq9Qolsjy1fmswdllJZRnXlgojR4oqpqRbCDdqfq9EXPieRm0evkX75XMxLhXFt64zPMDmrs9xIXC7RB9t8yERX4fvN1izY1Ev/8e/ExCU9famygY2km1j15+yQqcX1TviQDXPPXX6Mb1UVFovi7jyagPZZfvA+D51U9y5dfpOOC+aCLYCqEXA2d5n9dFae+t9tzeew43HyD5/9tIA56r4gb5xBqZpjqqFpg+yHZSjF3TzZSbLVbpvQ8qZBCb9qIIfYx0d5gx+3FDMiFUKDs8LyvqAO9zavXA0SuQtEiqqWr099XyPAmN/tBs2PtC98jQDezQrDVpsg46MGWtSLpvTtZzSJQZm/LhfbZwVsRjvErtktK4kMJqkDlcwCvxgM9aZ2rE/eQo02TGcSyhKakOuUfw7BOJiJk0KU9EWv8DnP0KjWyeR/k9uLWeiDEPpfcbIlLWPwOyFkwWZYpExUO+qUfvC8VhOaEZ7jlT0J4NbFrHxVtMiYJTgT6h/6c+i6I8KjH8SRjHMPUoRmb3gpmdklmWM0AN6bRh92o5FBzPwec/tXu9fnimqOLOod/5+AZLnbbIGU2cOBGTi8iHr+cUXTt0Z9SEfoInznxtbluiT2Lmh2wGRSBaMtevVJ57VVEzadBuo8L7rb6xF75udJHlp7e0kQ2cqaURrbvwxFCaXtKXSeQLzAef9Lf2t+Q4ukWyJtLTDMvtIRGTvSu44/zejN8F2g5WwplqRDo+OMlAhBgHFXpdGqEQi53Igsd1MN1fBOVWbj0dpFjzSwFeNGwp3aJcRhnHDPEvYMUkTt7LRbdkWw/AW/CfDc8o5D/LPW0Zrzx0DstSkzyvaVWquWn/r6YYVwDpcave3rZoFXRj9Q5GY133g6IzDqFq2kjHkOrDTUvBxC4IcHJ3UtsYa2m70JYwoZYI4cwDGri1B6lXnGMhULtd7d2We8ciAUtxLvhX7LyjeaJjv/ThDqPl+hVP192vdGbrrajyYbKV6iWK9N5rLBbcSHkfFsAzs+BCB0EH0+rsUESJDKYESfNAwx1n09wrPk7cb2FVduYJZHeBNge958Ibe+RvTxQE1QJDM5lPJ0+Z9wslc1DRpToAUOsdZMBIopKuooiOgJJojhcMlL/L8vwhs2VLjSOfK9gLxnyNCy7opSn8gVwFz+y9Sdoj5uWn5/fsvMeqJMnDTToFlrciximXO7uRrnnhBolm+n0eEHnsP3v++hYlPNcu4YLZp+nYkItcg4CtrAf04VXwMsXZIO8wrgyaMyn5q2AUdCZfP94VRublYuJF5Z432fwRu8vS+okifUJ1ZzbFoiMZnaSvTNBybx3NA1D0u6EnVJHkjrtTqT2rqKoqbZU5Oh2QV5zV726MoXudg+a/wyIgOk4H9nkvSCFM03Kwvef2Zzb+Jja6MvrgClXwvJyHbDU5RT00s6DHeh8CSeR8/nVrhgF5Q9TUkj8YL/84kOdjUWmm2ifI5bpn1ogEbAbYQObdV5OsKcTO67eIuDHX36hFZBC7nMwrrzqpKS3j+IcMmV6F0Dg01O567PgTHhr75PQBWxfIu8d9WL6NlB7sfx2Ft8YT6pGtJ86ZqcGpYi6UR3nHt/Ukq9QbAkRNeYdk+ZScAdKON1KQ+Ybcyk1ZoZp0gyq63JsS662DYaEht49JdKSyaftVQdccqLtiVh6IUAMNP+Zk9VN1VHOSOrlMfbQFLbN9P51Zt5/GPyYQ2hB/aGkArfssy5ES32KVb7wFtrLOAVCrVZBSRCHOJtOdwvni1xYCZ3anzkHH7Hnkedwg+zhIa02UKTtK2EEDFPx2Og98G0j4DFTcD0n39T6wcuhw7X7KFGtLo+j2wCtAov/5plxYCn/3jAVTHYhNQqP0ojYAGyUsDXDK6spfkXmZzCH0S8n4lXAgFIV7GzCIDFP6cl1JKh/8OCYvnwz4A+Z1GvM+jsrKPC+doci+6DCDAAhYHeukvih5yet3dp9v8fTNkZ77v1wvJiYa0KT6oJidQrCIBfG8/Ha1sVNn3vuQKA+lgOLdevwXJn/kjgNQhJrQOka7cn2CQWgdTkOPHnkIm5es0fNDDU8yqmCT2hgXaNiZHt+C5SfWx/sjiWZU8NPta1i9hvXifm0dCS/RhXPKJp05tDXTPsKKpT2tRkQqJmPX4hfHD9VX/nRSYLZmTIOPzxiEW3P+rhZPu1P87g8rmrsyB5Aj4lUDofBPxoWdUJSMwJwMO1lB2WTpWzHpzaZX+L1xkDXy+mF1Vcj5D819buw+7sDH0815Up/Ou3jZQKHOwoYNJQUrNvHISvL5PgX2zftcdI3WEOEHidc668C8D7on1dS6Rp1KsACXLpFrtYX8OYJ3COvBNncdMamhSfxIbGOBdDChYURf8rXu7sIJvDMlHF3fWcNk/xw8lyyoa2ST6j/gYy86Iby573nAGHgPvqvDjbbJaTgIaP8TnjoLM5KbWEOShHvpZzZKIzLZq8hQj0vVvI+vEJt3t9omZT8A+VB7qmflcSlY/CZQpZCsb/Xbbwj4Cvanffgg0SaRKfdXWiZN7SHWC90k255gE/7FP3uDgV2PonIUP9ItNzzi2FuLakuW9QbBDKx35aYs9U/qjR9uYTBZ2vZEFiLzT0lrY2xWkif5ftgYR0hW+jjjYSgMZrQ6HsG7S15qtzkk/m7JOhMoHAp1o+ZUJ6P88BqcAXHV93YVkpraZ1wHbJKJE0sE/ej4ylLpVGdtIWkwWg137fxByIRZfvxczZnjS0v3o7LfUtkbE11mArgWLoOMWCmJZQlziLWT8OJRs1FklNOig6L5uBjn88W2gzvGXKxIStsauWNayD0EsopeAymTtd/wzluXwlm9liJcQ87IWtDfaWIqcblbplghYql6c4lqaOnLXhDE12HWzclwLXtxJUbFx0sv9k8YDbO6yX5P8KQ94SOYf4hKy9uepcH+VT9KsS/5JV28CSl6pu2bhsfdxk4TyaEH0FZ2dQBbHI62q1C8zieI1vqqSmHlvRvUrMTxx71+/oWki7WkGhuIlvfB066ONEDDoYWnMRcxOsP5wIbr+7WFKtwxjIMZJkXPK46TzJARIWv8uOGW6FGmFYde4K3/oL4bDKcPCcyysckHJRBz1lE1C6Xm+3ccHqTNm+IUe/6dWK74jqU5VrC7NaRk/oLhcLgJmeO3kdR24UEJYJxqkVGvMkm+DGxQyTeJJeAfxar1QkunWnWvSjQZH39Xs6FTRTSQX3kIYvRIzby1O8tzx/jqHKLYuChqSCdTywLSSe5t/VRUEOVfw9xQ6Zb8fwDr92q1AP3CSukSRvxXJlnJaIOrfmncbDheebvH6qZYz2T4z+5PHswLwH24bL8Q7FnxTfbRvE7txW6uwzXc3b3LnmYVye94uFizNQHGn/7iSkqR/c7fAaIJtIe0jfJsLdfWO1hzEWOPQPgnoQbHmxRrkz6DkRZfwuKBK9GzplM+wlsiSO5xgg4uqOkwEVVkvW93T9J9KORKFDFn4CJ0TPS2Ttc0w+OZ32P9RPEMJBoQ+fNiahMM4yHhlNC1N0jILpK0J+wtGBVXwjeS3o5NBv/c/eaN/lRAJu7QvALFvvJbTOV4P/YNrFl5eSLLlRIUImfTA1k9BMbmxgaPv6B+D5af/BgP22E9ghzoceGRRRpfTjSFFOeCT1vv437LBKh4I5BRRCu9KOUJOY1YSJj8pq3N5uSt4cjB+ekK1Aqjaheg4blPJRGQDwk9+sGb5V5aMYU5yDsx6B9TU2PhUtWraTnI+2mc5zd/CzCzxitm7oleVk0T4GpdqFfc7fcXtHc0OiSTmmfZn7YZRdOWLDin9Zg7d2iEs6YCGu1u/aTxOUD7infvbdivppd7t+dT1pzRe4CO6tnCqI7WfhMOf0TyARGrHbaG8XOa4PWgsEvQRAcLmVdiDsXDr5tZI3bT8eA8gEz48/3nRnjUSx6uVHrvXJKbCCYrtul6AGq78BW1+eD+fR7asRgMzYqiPOnFqQe8XGFLw09WqURk8nWqhqzTZwpbS7P3blF0XjLtXOyhpI9AV92F+yrPPGIUpOqphyty3mC4TB3ChnqhBJZ1ShioEG24fK+pj6wgLVoF70hL0+N9qan/Y7zqe8oJVMFgi817kA0l3P+RwHzsg+M8leUdBgekX8hLa4Mwz7ZeOeLDWarvV0ZI4JDzRnzN+fE9syitYmVgvKgFimqH7Qh8gofzVX73BtbxtXbLMHXc0KFrJI8TEUezXTr6QKm2gTYDfefYufa1jOaUJjB/i2tfBI6WQ4T3sfJKrLcQZyJUVF308rD9TZZUIEbvqzQAhh7Z3ouGuJAsMborBq63CLuYgzF10aIYaD1lObG8KPa8jkEQfCrBUdbjPO0md/OiLIL8F61Pkk1zjZgan9RS4WbPmlCbuG2h9ySi6ooJMlF+FeWG7N67dwo35Ye8F2zMia6QBrQVynZDcKaQtxPOOeDJIn2dCULbK1mccfK0e5B4MAM4bKW5/9BAZETtsGunrT38vzdUTxeaUZnkBvbXZODEp34JXBOuvdWYAbxyPv+9n1n6jFr2AgU5Fe+D1gRP0W9knl3KTA/wEBuwm+Qu59o43dd98ne0NOgAukPpDZnU5B0n6UMWWaLpqdRJjEZrRUc92s6mdyNWjiirLb7ytwKQovF9LB03AKXdSTSdO2PNDhN4ouJPdUIpuOyCQoFkm9q5qF9jEudXBYgNleiPXJh2KEddd/LPwQPIHNEqhVkvFhc4CszxvNDT76HxJTLzmMAeAaPc9yxN7XCSe4clqh3lEjsVlSEVzUrHEpmZxm4SQdh0L+5reTVfUKK3jLffWiGK+bJTKLqbU3sC9ZKJjPweK87CGonXGvbYW9EvDn2GsymjkT8rx2CzbJN/01yqt1MpIPDbo6mWjIXcTBaUxmBcXkFTRiXBX3WsuzUiHMg6AVkfpUUCxcHwbTyGGWicX8Os6s+nEo2ECzb+R+GVGHS7fOllQEXJgAakg08mt9kD4SQ2b1v8mpuzZ3XcwWanFVOl+25AOBhE3C1V11Qby2TA5o3g5/q0MGerh4P0BMc0QKwDQ+A5OQzrbb52IEl6U+BxwkPQu+NyV2qtmHZt1dg2acfsAIUtdQnN1UyQXQ9cPaltLKL5h82UQ6/BJOgSc6059NYrwqjhyoTAkeWOpkWAH08pHQu7l+/djdrIVDyGCFbWwCeFnQ51t23wWWNmmdpWkuujc3rWH904TIt2jIETD/ioJsdnKtdudXSAaamP8LBjR5VagHR/0663gLeBTPcutackYDUBZBntguuK3DyS5imyYuobvn+bdhIBFVFbOaJgSLS1tJupzOzTx56syPVTMVl89dcvpTkrrTgh/QXpliNqAZ89xzjAwdwtmFSfrA1LBSUpSfbQHpeqjeYY2TO6XUzMwbKee5NfhQRDXu14dn4alSXoHJe9m+LH2nyEA95ybO3ScZotMWi/IvJdm81wm4V6QKrwjapwEcfdPsMDAt1PYcK3p0uGOk+PrSqNyOXNef+q25UL/2QroUt3rtMSroRdvkkHGUmOS1dNFA5SXX2JQNyA33d+P6nauC5G7HQkYdJmGTIqJaq1jmMv+xbOtpCjzCOOPCiLKVlYi1DOzgwFgMhthMhQ53vwVI2BnspDTNZpzQjBj4Vh8ZrmXYI4UdSlw0g6PwKtspC7WusjEIkiOe+Kd2v+2UTLu/uRTHsRPISTNn/lqbb08BN7HKsXqDyM1+V7/1OyPk7+FaMFG+K++ooh4irLjRKny7kZqmayj+ooXdU7q3JVywUAwYVkjPdgntkSfA//ReIJvJlhS1KB8+MncC3b3IT9IAqU5xLfVOglvQCa/hsvQOTR59m/soPnyVvc5oQJoRH2aWT/WXv34mKaZ+CrwCsOLq2V9ksO4Netip/iXyOlyRXqs73GfRiQ3BOg22jmlsTEB9/SPW8fZIF0REuaFkZQCeqaYgZLw9VU3DkWEWjakORFdaF1SD2id+EIihAyuo8pyX6Jlt56hqeLbBi8Brrbt4Nj0UlbO5SnTO7FOsnuejnXJtfZsKxeak50DflN0UyY5wLj27OWGDQhTwd2bsAfA3N3pG8bLKfuDjieGA5PL7bFxA7ykIfdLuAVuDQLew0cu02Z99IMErTqbXwpBZoienEKWrrz38lcCkkkuxXbI996EUePeBKSbz7xUhzFO02EmdQQ82+nR1nBXoYkuH0v4CLtGL3wovPkiiXvZFmzI4HHOJpsfdv+yVSpATQK3R9WOpNZpFa3zt2eFObPvElJoJ0mD/lJyXDu7IY14v2L1nemgjb32a10u4HOZId3L0epmDkFFxGI9t0tUR1/5puGYEchmqbGItR31CLUTCDoGLmMffLnxABA9l6u8OlkkoMqxKYRCb3JDkEzRvnbr2rGj+GkkgarFWoBDopyYNPgGq5tyA+Yw70As7bRxBsUDsj2Y/gTEh608uuQY2O0mTTcTtn1dANbw6/sya52wCYJaV42Om/dw5lHQ+TQAcYJT+VXHUhusuVCXuMTJpezfGd4XGWy/bXLLLd/lX4jpz0Sn1Vc0l8RyWeZS/nUjYL+cPorT3P/nRrZdIt8+B7gOIUvkdjMGb5BjB4l3tsdRREdeuBlbBPQSd8rmPptjSz8C7y+1N2taaCl6MbcKiAtPsp1XIok5VoospgcOOiMXdiEVOMENjET6lmCH1zrRLrKHecmWpdIzKl2p1d/eVp+j07JzExJbkncfnAxX1RwW71WeqmQ4dh+kcGT6SVL+z6thJgmHK+sQ19WXd6J2xFklp4+bRn/e9glLyA0vQBSuVazCjOEL7sI4lE+5fMaYsDail6u5yEhkAXUZUqFAOEttt3gTI/mm5UZc0KLfbSGbbCPzLSB7q2EBzFaLSEKPWWXxl7xRLk3+8oY+LtSX2oHoHuuUmB+h00KND4CxOWS4Cm3bRGE8q4CS5TINMSRbyB9xW0H6XCLR+eBSjwBpcVpJqzDPcV1n9j7FiM3hBGCvkVi8aDRTBE26PKvqtNunnVuFIj2Q/DaugbpLV6rbofu+LOlTSkBEppxqawL0X6LW/KFA+GZDZ/OfUJxkS38lVCJGBxtkETSqzt3j4XVRYceqG9CCg78Z11Oa4Y6J4k9H7nlTDEcivi4AA3T3jYmWbygLGXR5Bv4zaaTg9+LVCiLRIIGjC709CbTrCHoF9Anuk9qXlhIR39pxuKSb/46nHVrABAnmX7p2qTBvkddY4lzQU/dl9mQGPthQ3Q0nELU2SgtNXYjfAynzIx/6nnEQjSL90TmOJ4hAcBUp9gNQVuoE13nVfrfI7h6Bc+4g2tmMkVsfDqM6RAq3gA/thEgmduGMydoXHhoJNj/ZhznkENMrGoO8YP7qID0pmtWC5oJzakKbOpxWVypsjbkYLAdyOPHgjBUTi/pPOpqNFl+DViYe2Qr9O3FllDuCa9g56oB9/KY2SbkJZUqf15vq/Jd3vMfYx+WiODyO2rWleXPAe9IOZzig7/F69YgVdV6VTixcEfmJ4/6/nVwCVhs/hWf5lP/gRIPIRr+7SiLMlAwB91OKWDtFG5HWF0OsO1sGmXQSmgucrhLCqWUCGBBvppLVjO85Aau9O3qPkkaXMNdqzf+/MTKe+ffU9PxaUB1FTpHNHWp1Q3EYgHTDgxNd0DDx4xB+eZ47ornItJjzGWADsoxfUS97HSKHChghdVPl+E550OZzrtaD0pjWRLEoFaDE33PIeD9d39QP1t8uGJU6WeGKBgicd3qoIQePMlo6Rc7LOZeWghp3WCyzVdl9reYxxoz4mMz6yzKxFIxlQx053CUH9k2mk9p2htwDbdkRls/tomj1XF56usIdvW/Q1qet5ASHBlzpS77R8gxrWpp8N+sIwzadYaEOGZnJUmVSpXTg6xbTDf+NDLbew0FWa4NLg1LprS0G1boVtxQLgnGvlMoE/H43KDyeCMoY3QFHqJ50NB0RU7gPKR7X6ATfQSoeaTviqnJ2DWVnec9ryE3888RYKR9V+vMY3/zwojRqxv3XjlaajmVy/zJLZTiMXFN+5ja76OCzWsOj9Is9Doy0IUrAivaVHnbgFUcRIRURVioMUTjrjb/AP/cq4EINPYSrheXITEbsC7sAef74x1rhu2wrjcUXbs0ZGwzT6xHG8aKr/2l19gRNSfXq+XI2aBIZ6sHbRepo1J7t2XObhOwspUNcvUtbfCGExCYKDKiMND54Mne/Xs5n0ZS3xsJ+iE+ThmS/Sr+DoiEZm681wU6oGeQWIfzKw9fA52iuikqDlbZSqiMi+7slMIKNcSDcUUq0Y8VMKfGmvUEKUPj3e1Pdv0nGbYBhrqNkpa1nyCYyIWWoe9JFyo6OllddxcjnMC7u13wmr5aFAhX5iv9uUQ9InTgghoG9PtN0TQ/fWqjnGuQK6Tcj8gHonVowpCiZRczP+8n5q6Gplf8qs4nElOj+7apPRuu1f/9Di9StfyX7o0oZRYziU7qlN41ilfICxD9x00Abn+XLerPyEl38y3FxYVqCrvVcmk7riZE0LyQSxNckXP9ea0nCM9jY5oRilBWYvziMm7+hkSSpclJoHZT1NC9rtPaS2PH8xeikjslaHWX5PTa4CNZkhJ8Ygq6coGNZ9l/VXP8AP/3k7qw2tiLBmPn8jgmSH/MM+y6KBtoS5UVKutjn1PlDF72ruxr8QdfM54c1GJZutbepLYx0uFzO9Dxp0Wnjn2z+TgAl2vTyfjK7nQqp5X79HkHG3hgDs2YolvehFgNxi1URlknlfxwn0n/MliONU6zl7jF42l8IosjxDFrMKNVopuV83xrU/nXMUjd0kOfwwVKQbWmvkKXP9tTAzzNT8wQTemD94Eph9apJMmuDBVOHosLegSfOrrbJbQ05QhGc9mMYGS/HKPU+lvwnPCGkcIl5zl0DQ3OkTvhz8kxZtYyyPQNGl4MD6eVPnb117P2BQpZgqWtl+fYJkCDYgYiWkgBEk+F50Nu0uaI1c9SEqkmK8anvQrwYFStr+6dqbjcR5sf+PHsGe4ghHQPTFLo8aonsAmh9PNPUkpuMOE9SsN9tRFYTFQJ0YMleGiXOBwivm3tl1sfkQNTjnPmfudZ0nqLudXGUm7HJVVm8VjfhVd45UJTtDbEtYxT+WwAdgX2H2zjS2c42QoY3UUW7axDrftxMG1T1/w+LZcAnEQI1SyK7/HcM5Vp1chGwbD8n5zYacEVy5iZpjY2V5e/LMxWHlI8syx5JIeJcgs0OWrckN20LfPurvYmqbcH7kSGzhRC8WlnIjBtLtXNWLWBHcrGq63EGpsSpg2CmIXRzbwIAneRHrBm+rSup3MTQ/RGhbVxlbk9h5kwCbpz9zflWpqF7eevnZ6GUxrZqKdvES/ZKXI0aeMbKqhzmr8ERUZFmEdb8QTALvrCpTufhdQJzSTHrz5/jZeAhyCcjkrMTJMN6PgLl4vkn2ZVnzmhUN4nHZt9XkjaqgD16DyjGLN3gk5GQQr7N5IK2dTyv2R/ohcSIaGIpGvluNsDnQoqcY/NGac5lG/RrBZcBjA9EtC5T9tl/zZyYYFQp26f7pdWYnvbc5NAY4acORRrilzX1HMkiA+UkRF4LtG4OGU7ihbnqqs0FnF+hPk0hKD5/LmflWR+gsnyRlTm+4M86CwBr+ZzcdmbZ6yNTlwlllEklZPeRFSLkTKO+ByJMMRghZIrrM1a4jYZxePZjw2SaPfchVFcfapxj1pyjp+t0jsQoMGkPzQzT1HFiFbZ0uahDGflhMi+91skENfXNhPI+1R36Lj6PnZunpuA7dbKmhuNGL9Mps2T7Ht2WFVyigHesvWys6qkVQEGY4Uf/bm6FtvHyndgcERozyQx/xGFqaPnoLjVkXHDrJt7ZpC6EJXmtVZP+kamh8kft0WDzURVE9LNzlDcsRuR7nPNCsue0LABJObmashygKuTRORDXAzyru3Bi9UaMgiigmWMPiDoRV8NRk9thgxOnyhnpKJdTeMTqb/IjkXLevqWGZMMuPj2IOZXw7RKMSxxbPvmnDr78n2UoAQZAipCmOE7XejaUJc5ta1H+W9MAcauysQGdamC9WQMey22D7YxladUAeXcQibFF/FzStBrpbT8DmRO8doGP+QUpcHQiLis2VFnWYXOH0+QhL5/t9PfNbLb1zy00LCYXrZM/q8k1GQcFBb6PMMDEIM1THR/Y5mzvnaBBIlhK1RsYCfNykpx8VSreyB1B+l30WUThodY9fUBRXRVRcAA6PjIZQEWc5/zoVAebyzDZ1rKrjmszG0qFpd6NVuDakE6lVlC8oI4PiKPLmRavQvhtCtIYbGvFC8jCf56gJZcz7nq+BooJAljeLksf6co/BV/lpI9auCiRYeurElICaEjxXTv8PiFxTAQRyHSND4e/lmJhYvfwF52141/r/d5+fKTPZ/VcBRhJcGTcrZbsTc1Yl09S/04gz3eNtPOXRl6Yj1hB9CJl3lefjx4sZZyKGDyd+D+bo25EYfC2/O9cI6dtyZZoK+Z2fbYslnaF5OwFZih1BIiytG+7xSNxY6H4j0XfQhvm/46Lk6eW0FYO0WHpjpu+78bYaOu3e4t4ZM2oqFa2UCTHycKfsER8lapLlUof2cpRb2JzpFi0G6rEfeSidWTCkRGfYvJQPM4v82cS/ueGKop+19ULcsrc1ph5qtWG0WfRfsa7OX4OpqAaYFBe+423MyFzFNygMd04oXmbHQoCQbRjzqur/HoEvDEZgNxxCjLa8CJfR2vNNew1T5w3ofhBOvAHBX1umT2IZBcpgJ/8Cd5YSXrZeqy/xdT+QtsbNMNjfcjbvPZggNWev0SUlL15Klji3YkKrpU6zS1qDac+houw6MnGFaNkXAXsYgO7ESa9G5RqBYJVA8BtffpDs23WujdlI6Y0xJnkOA0odBXogfTvqjaqcUlVe4vZGfwekt4fCYqWD4E7obO5lMuAZU9YlsBeefcosny3cP8W9ElGHpUyswSPaH1QpWcQvVsYMouzVqnXV2+8Ucqauftp269io2Ebg19Tz5cqweXCWqXMOM3cDRd01qsTERdAjuHcKrNyMWEaRhUp89agsELlsjtqeXOl7vPd6OO0UPKpG0qlAd7I3BNWBtCN+8fgSIw32SFzayhqkY0s3BODJSMXgXDXQ3x3LlwKA0AlbLzS/aEmnXR5Rj1BgDSidnA0dLP33OqpZx99zwGiQSs6MfWEfXlmQeVlM5Mv2Wsk8lMVSZh8GIpEsiv8co/p8BeRzBrdcnvtaYR2GQy6+7hz3i4NUh2YYX0e58iITdisKdNnZs+evkwvezC/zKokIo3Njfw0/5+u8zvSIjuCTZLt3KB6fhiaowSDr024Mty86j9YepTyCVQaqedFBelerJDXCGpC4xxYegau3Nmga5FHB8EYwB+KLPH+oKDVqFCAhmhZo+1CB6o9PTtaDuKC2RFTcmy2LemNqbWa3fPqSpHZ4aGcDxRjdxHjX1Cjm/lBZ8+5K5UIm4AtO2dMN/Ly+lUHzqIYBBNHTyy+CCuwOMccNFZ8vDogYAw1esrnXbkfsliHrYC/Z0Z/qa2KUL2MNdvj/rGBNkvc6/oTUkn2pICZcckE4+oIrE/CQkd01r6tzhEaTa6hAn/v7StfXuIvONzkbdtfzrdG86MR8hARBPUs4EcW9MX/5cQOpVI/q+TJ5OIOzlxINd8++L1iqmQS5mCg4Em5foLb8Nwqn9eGA6TJKvY/CqjW5dmtE/NkSUdd6RMUAFR8vjtLvv7qQehyIkg8KvGciqsiZLBIMuh3gi4h3x24ROmAjvFqBfpAI4ECs+gxA7BR4aC1433lLGVMnLEuH03SJceDXqA64JBLSwxcYfbe63sU+x2bW7Kzef6uAQwKu4A5vy4222q6xWqFoakaaEbownfr0ULC0sxQGMF+w8aHcciRFkFviEK6wH+OYRo6dAtY8TXrrJ7vOGReQXjiwggX+a/jWtbC3F40CAMVCQu8FsuR2nIwfs4gpGqE7xLSejn8oM7q5PwKyJvBhtnEqfQBCwwJOzFlKieJL/6njMSVcKjz6gQVieG/cBGftt/pQ4IvfVd1WYDynIR9S84xZUYvvRjLtVt/VyCy/RvWnxCoz2OpbH1dcAn1z4/EL9haBT0dXWmemfkb4IyxjkR8goqFqciPQ7z3HtTGoja1PxCq4sCEq1OJzmO2b5fyl9qdboqcFeoq4na+Bn1Uyw7vqVYVvgR0aM0TE6PPJFJQYc1tzYiDXuHm0B+9IiqAMkIfqXp4S+WbALevbzxmngZL75gsezHqXPrJ5PwuDGAA+ageXCOc8tVNEiEEFcq7jnGe/oS3CFgUZMIuvrFxZB4AWhIKvWajhGIcYQpn59mJzpZvTftiy7oUZiO4SEr7HFIpWW7wHGwIS9AF2TaA36LTlQwZ0PAmsrveziyHSWRDiR/OI22k5qwzBqFMV+W7ajdMFabX/liFL3FoPW5aO9auWnQ3wCu+CtVOpeCKfXpXg7FBYwcIGQ21ytiYXsHANnu8JrclCPrOxQs0r7KoMyvTHyEUsNXHZBQKkMQNyVkdfLALc6HN7TwsnaOM5o1+i4DivGkivCHL6Z/mjEUXPyPSI2EZAONpYlvDSOjIG591jRrgW/rWs3aTm4f+zLSYqM1G4zSPZ4l/FhtVeGAyiJSTwQFNYnX8bGiUWxujNCQ0GO8WyEmBr9DQhBkoIRAoDC+tfAKgDanG5vkrUl5TBNxi97vzwpr6kRbn9Snbjs5Yr+5605x9UwZdcEYC9bTBHK1QjoG6nbgd/Rfap62VhK9HS4LHpFU20aOHh4jEYQ2Eko3hoV8W5ABPg7Rs69BGlHh4dvOWYG1IciOpay908FCyY+JxLMjkTFEYfSLYHmXGsunCthK6nyGSvao01smfRG+WrrM7IBbYCxvsonD5im8EULtgB/bqCVAnFAOrY2h+BklKJLGDkOkcRC80DioFrwYuNZXmt901JB+qvJDZMh2y1LxP6f1dHOAIaRMy4s7MBfEjy82sZjuU93OtOIpNhfNvwBgQ7sndmozyft1II3lLP2/V1y1hUN95f8ddGNVO8A9Ql/WNKDCqCHUaaBAfh5NlwgH/fbEOIuOKfV7PrSueBkIzXTIlV/6neAkXb4fHUl+9OC7ynrpO+3PEujL8OcZHNoohJTudh55jc4DGy2zMeSJELFcUXg9XJ7/iqGyERNJ9a0jZj4d6xm1cjpiheEdXAWzDqzJLPGz3A4//GeYTw+v5sHjMr8+6hc4YL2S6m9B4doNhsk+v0lKBerELDxpO2E7DPKlhVWM38cO94bzZKs05xA3kt47sqzWIlca1CdoT1ydtONzwMB86KJ6VwEWCgp6l5QTujVcEijGuIHpcnYMGMkYkT7uriZuNvl7FPNYsnXLnDO4IFY5mj7A2ZJoVSHLNbUapV0J4WFBPuIjBmd1eoZv5lgHJdJLhPqj7ujV7PY4l9XA74Tc1JaZxoXelw/woBSdZr1h+WDdPefwmSBIdtw92/cdN3uwSmpMUZM9ElXRJAI6ZAfdQ7Sn3qM7mHTf6vNFaRlpqk5/tUnboh1XCPqiP6sdvLnEnU33pUOBnU8BWMW1BjSU44pWWTXY+OUqM0ZSFME9KDqqqkw6rD8Pu0x989c5le3zeLaOFm6NH6OlWJ+Qs6MyRONH0/DDwVG4SmQCUxCjZVsoR5R6jbi1fHGKp0MPexCj2Sv/toYNVw5px5UF8oIELDSCSwIYrLICm13ReHfwuFPF9DJ3zkKrNspCfHCXDDtCir6e5o/Z+DvMfKM6zObJe23wlBbhLAYMUVOg8212umPMvw0LSkum+xMN46rJAmCnk0KoVlkS84XIcKKtkJkYJC6bWqC72/bZONuFk+tRM9mLOLJT9wcLlxNDX67MNyknXeJZJD4Y+L17/IH5SeoY0nHKHg4h91k65rw/QJbqEZffXZwfWC2v4gfKYHJEbT/8PAFm0gbXtGWfITA0eITDWigkuPM+XE7xYrC51BvM01rUddrWFAlx5n0eP2+gm2Uu2VD5iXaCodszOobirEyAKecAGaoGQpsDSSFHfgRrMZngRD+jnooUlICoQdN74+j3sbufKYeJhh4gEg1MMoJ2X7unZ1EbnRZg13WXn7gJWq3aF5AKyrjK6fDgqw7qIOqLFf6G5X33bKZJ4yrewTPBsoimozqwgohmnCbG9EONYNC/1Y4lOC/2kTju8bB2visZLddWh1c7ZXWEUG6XmXyT+MdXeHUMC2a9sNnGk9dMH+LQnHtrEtU6jYyQUq3ljHid6Guirb9I+AePwJAKZF9dvUF9SaB5o9NHzssPghWCDjRjuEur1Yxg3mFacuBDBsqrKMiGt0IGX2zyZdwSVlXZmfBuomoJ1ei1a8FChstAmqlsK+Oti+iwdhuk3/mpC4zGItOUfr2MZp6Bj7Ce9RXSkb0O+t8mTxMqbhTQAW0sL/gPk9MgB52ZuWj87pb+pc2jwPvwQcM3+ffrngPeBDYy0tfxw7kCblhk8vuXRftBpgcp5CcIQoHtPsokhEYjvSUyZg/ug7ecamnpiaF9FHunTuVFdLzUi70osCy/BHc5849+M0unWhvxnQ0I4LWDBJ78YoCfx9yvfyxtfDjcN16G5eQy/0BXbaKA1w0kfkYsO/s58w8qZVH+tDgO/i6Gg9vxD3/rzjRKG2CPl0mjiSJnASaNlBEeoN+kI7018s8Y6TPB4NT8qdJEb09ib9IVZc2nwqCTuj5MYhlj+SuAQ3oWH+T+d2G0OrsDDo6r/GORuf26AFQFzRSKPlMUZB1h0mKIzh7MaJl5XrOv6wTUqjeEAR9NyfAghF9U+ilvxZ3XYTrMAzOOJoA09Sh0SZNEZq8jYNuuvuQrnUKfNImRMeYCIezP/g/q9EvrgXCKP5XkQU8o65qWpMl3hY7FEOHUt25NvdwFm+7E9nYSiAZ+uPLgrxRJdCTiYDJkDT9nlodAXXJkuSAN0FpBsOVKhuJUa7td/uvHlpQApo7vTEfZQsrUUjs+VVnr53AoV0h8lzW2NKMxsHr56mabFu6C9yHa2g6zjTk5Y0PXyURfOhI4+xSz0TriwVX5B6d/l8wePrcfBiIXGBF59JCkoIWwufSDsIpUmNW64OHqfwGkxbFn+ajmtihfw/ny2ZJvcWNbk2EEF/NB62aN9tkWZB3QLl+0uzJaV/bAKd264L0+F69FMrCiocgFRVgD6HWjKLHkgIXeoS7hjF7o1ElR4YASWxJ0Tj03+yxFkhq9tgZpClZV8G0i4pLPIbR4mMW+0rXrrC3WM20FZheOGXqhBEoEFRBIXWNmyY53tT/MduvdXeyIidxXTiXI5sk5UrwkKwNEik7aGmJWw06nIlkVZw3YcysozmlJefLftrHZWpDWKlwiULwNZRwgFZKif53zbiKFqfnWZezRsIz7AEJKkkrLTPFlOllEsbqZGw168L/XUi7EWjBRNem9qAHV6lY1dQ4g4qMp9EytuWey85G4PxTkWIojqE3eQyrP2TOCveh23wDTPg4tCDlsa9Tojr9aAFot3uQUUpv1RojUnahAQyjDtvSW/96vznz+HrutO2kJjgfDiL92gTOYdqzbXePUt0vLy/FfzQChM0U7qXHM9DVVj+f+7Ra+zSA0wFbsIXYYp70mAgbiFB3SZNpj02QMfg21sAjJPAK9X7EE9GT32Risxl36bZZ9gxTCrJfPJFiIEg2oX51RQ7upucuVYawRTLy1nUQpQdbwCXpe2tAKxPuTuf73FWfAwYjzvaFPgTNy4WPmnTP1a2qkwGRqIZDIHtpfMBd8pyRsMYutBUz0XkhKrOrup28LzbeLR8Zanv1Q1N0y+we56ux733jjsaP0i8qHIQOBfYFClFWZ7GqHeYBD+aAptKHQghBkPD1sQ+B5c8DabVRlgIrePmjINCLQtlh9EaKa5GLqXPVRHdoYIeplGDHqnnomYF6QVsJfC+kAE1V1LkMHRLDyCRehFCx60Kt0UWrvQ38Is7LBRUXUzmWCczgSYG12KWwWLvtzcgN+sKhfRYDWH6N3frCU/XUdthyiqkN7dysQZV/vTmDYUyPubnwSKnFjgYBYuEWQkXckyNvrin/3LTrcozOo2fFoZeTHQoIDSLH42HX/nUIVf2hVOS2gKn+WW+To9z6knTWAtFu+z9D0cJ0TJkaPhVEO3qXi2jZ6oLV5gyisRyy3lh/LSkpJKN1t8jLJhfYrnm6S38+XVKUr/ypOmwVPBc+mTVCZJR2lHTCWy491DemAUL/gi+Av9a5eYc1E8T5k+0DzghUYSBJY2gUHRjTWi/t3R7/TNUBfjGgO/7JrrhnTlhhcf6vuUEc2EvPYnsvUhWmcNBUtjmDhQlpO33BNDjhZHl71mZTH2/lQIOkyXHVHGdWvkayf/Ac+MDN5JBXXNorcge12bETHPVZ2sSgheYh3Z8H8fEk3w+s53EWd33hk2u56C5S0EC1ejVJR5QCBkHep4BSO1gQlZTKKbwpOWxj5Yh4qrpCGT7LnATaR2PruMf3Tdkerdsv0XOBB8QfNECt+fS3uyGg+eGtbZR2m0AhscCh94corDZmmgREgEJR0j3oOZiaMGx1WG9+Y1wAHfGWLm6KEUOHbnbDumeJ5M+QjnjaKNptsacben7ml5MAB0gyXLMHQR/GAcGtnSr7ldTjIuDMkqlVlmr4c8dMEig51thZIJSlOmSgmy1VgzRSEyKdRVbi5yCBcRVoEeLvNp/VgVscuA7hRAiLmy5e10v7FftcClJm2JntqI6VzxOO4sEtxrJBxDdpk5aFmHdPOs3uNk2y46clJllKRq3nKkO/lMktdLRji86QucdRTjD/y4f77K7Mn6zgDJoqtu3un89aF7LKFtFrVk6RpO37U8ieMuOHS9hfIZMwrLM+kv3V5UUCRKjZbMNCPFBqtZcePM0yetQvVNTmcJEaEEtNom8gbB8F0QV7fVrNYzKEjhtq19BOOSUZ2k5ktoYTgo50oZ+p7iqerYKXL+YnyJPr/TW1HiK+HfosuD36nmqlxaIMSrhVnA12HRzofEWs53cTdGCATk602TLUYdHHt0L7AOCuoqSiNHXNuuvZAmU4hGFU/Cm6it12QytpQT5WerIa92zRr6Wkbac1jSHSgKOHCuHNPHYRfjUps02AZlA/SDcmUDOHy36uLmu6okjiMVq0xVJyYZry0nEyRQ98IYRpPzz97njXIjr7THvdfhi48srVxdjvqthtCeZcZ5bzzwplfC5TGq1n5yhwwzMhuL00wJvsEWqDSXO0NO0+7j9BGnfBYOozOehvApArAOuWv3n4pIkwXxFIgDWctajcAnAd7Us0cJfLwA0s9ggogoXONzu5UI3rog67KQWjuI4Nidb9Sg2E577PrbayQts+AxA/xZ2fzH8Nv8LYSjMee8JYL1KNHIkYJYDZTvRJwjZ4fyDMTUa0CSsXX+Ab99z8OzbC12DOhHubTEYGV1uKrweA6Uwa2as3EpPzxZQqwhFkELryeHERb4dDzO/nbjc+3xldg36r/lZ/9nq1uCh4h+D9xdCrwHd5qt2LPhawfY+Vy25NjpKzYtlMeycdowK0JER0QDd7n8fad2va6QRVhabIlSJU3IO+XU2K+rAd3pfymrgRPgK1p6lwksKM+5Am7ItoVjptBhs7fGTAAh8c28x6S+nbdwupnyoILgM2Du5JtkZQ88Ndh7r5+BSy81IjIkSeNqo4eePSKfYo9mBsSpizpkZTzClXR1AOUFCuR9gXJ7T3SnoozUsl6rk7COCUDYf48NXpixfKyG9x2TBY9Stb0Ls9ZMzJp0BLv75DwwS1wE/kFp1PcjD+Ne6EUPHpDSjTm3JedJhx3YdVJFNGOrUXOOw23583FxbtbftQaxATUz7PTe3rvONYz7Xq11IRIA830d9f1yjgOXMGC1E/enoxA/bl254wGuLIqhiqIQFrD7ArC2cWyfqM6BNK9HU2nTKXn/FyQbZhcTkqVQcERRPqeUJohx+AxONANGHFSnWwLFu74oDigw/pdSc9xPlWJMI1TcmK1EKCUm7eaj5qxcbxMN4+hDjXpEpJyMnOfsktxoZzzupLG4lFRnO+nmqHlCJ1KhIITJQfdle/5NT2wR+pnOhsXl9ko2m7kmiLh5kOTMZLt2P4YswSPwretURTgUcjRXw2BS3Wgm5QW6bSUH80NlVCgR1u8yg9GPzri7SMnvPlMPoaF9HugzMgkUu8W6C9faCCtyAmWJGPAGSFEkYFzdW5tBofWhi72pRj1lC86I+zIkxvdlPPJ1kmkF2AddOOjugxcL3TYFiiSqOBPfCyNjpYn8ge6QaaMdr8nRvC9COZPm7aqr+0N7HXzNtZQZN3ZM9f4KK2w6Jp9tKRhXYzytiBJKkb7620ouka28w6g8i8+3IdJLQn1zcgLCgl8FQmadQLjry86yYAY/O7ewjzHLqPmuDoGbM6UpjQcCqNT5iW6llflgyIGlS34VUjJQY8lg0Eb9YZqD9dg+63T/lW8ZeAv4hDctw9gxbgQKur9MG8O9RkE7zMVU1Kv6gNeE9+/mJwbOR7y1W99fw6xcppBxPvEhLhsEf/mu4unlf1sspI3wpTlk+WEld1ARQvX1QzDdy45nx2Rs9OLU+/ax7Usx7/OTh7KoRWw7N1rbO/kM1VumQQClptn8RkIdZ9NbAjNPyLeHJVxH3dES8RfYjUCvp0XmkkOcxnoV2q8fS71jeC1dAcXDS0QhmLrDQzcsIcqmwI5a5SxFvXlUtGzDKPQ8IE9FutTzF0D0MCv4cmwO0kw8cnUS6xAOOlc3TxpRVuxpY6zkAsMFQOg4AUdYZhUZCTvlSWlRtciAJi8h2MqqjQ3wMG18C6jxeQOXDeskkyDCfUZBKpb7BqY/d+vKBQ46rOWwM9n4NVXZ1Fe1SQ7GrsMXYPm0Yxlk1mKXKzKWWpgq1rCagAcYCA8IxyXaSMftAIisbkErPE00422e9s45GVM/SX7gs/rDvAaNHnYGHZ34SkLwsP4gMUPY3OiK6BkqhnxR6A7Vs09dYwURSb1E5yn4GpU8jbOUNpHht0o1Zlg74kAFQ4DhD3F/KjBF8Oa8Yebuhx5qXfgthnU+6LvvbsvGc24v7tT7NKXDrknENv8Ob6S9lK6SBDawOahpbsMOevLWqZfqOMTxe4H2yu8pBkBMZsH5n+cRXOoCGxLxFXVbNDVSnuXxO33EdbJ+qFmouYAFpw30wJIRtROwvkWjNU82mtSath1YO/xrWLh+V6+fG1pW1ciQKNE0oT9tHt+ekh8OTqi+NBpRgsFJQ4bLbLqjqUMJpXkeFbZB1YRzFpib3M/J1U4fEBkRILhImENxem/pPJwalGr7/w5XWnauIjiHlX43i33SNzaF+gDCSKO8csDQRxpDVVC9QqBOR3+AEwnxNVNrdTx0kzVO8BVVVfvWWoBHIbaTsl1Ud4Jezwy9wes93mdKBhUOwJkfaLFhd/37zjPmrgD26+QjZDC3YA7tKAyAMlcwdr82k4bT9oLEZKOHI3OkDfef1MHGuPm4YSK5kN67cgC++SkkkxBxTq0RR2FojVq09MsH63hZb4aJLNzb/v01VwKp4MS0Au2ozmXeNlAt+SPNekm8qdLqciAkxlbR2oUgaAqNqoFN+6ufY0sH70UBiZKP82ic83mSAB56xefe3wlmSHUAIbWyoQ4MWMALaAr3J2gLiP3bCACdrqOyQ02QhgJFW+zlO6CSEPGUmN/TkIYwbh7jAveLYFivnw/y5oEsPDt80wOdlPAV3bpgNcYUjQb7UJ8RDgof2tWdQe+1kW6h5lA0oJC/fVx2+9e3TYQg/9CQwTAZbFYQZyiJlV7hcZvlNrqJatwCmsPmsihGi3ETZT2tlv0q9uHmc1/3oj0Q1KAxBN/Oww26/+cjzYaUbCC5ebE6l2HC7tePEr0cFjgvTvyhbGM9AcSnlLianFO76nLltA8U89EJcNU64TXU31pjYzzsBjNxzkvZAeV+WT+5oUj8M71CP2semZx2dGsSVxoI4QEdqF0LsuOQ4O2pfpwLFGZ2GNFjLXugTF2GpjgQw6VvfoNbD8yX0dXf3CFCQGv1035UCJ4oF/Qp2Jcxng5eHPKtErpOcr+5nCoG63OhB6Z4mn+b+2xPYHQWc1qNVi2c3Ct4ncw/Ow4y3+US3/QEclvxd0htH6x6mrNgmvAzeEzFi/FKQZxHigqcqOwMX78emte6G4VZt+lwiuczrgPB+N0uXQdXC1aGSg4v4XmRFZCnkHKIVEbImFhQyvgz9XjQtPQ90evNP9ou9tipKWPZ7hYwuOSZd+Rnh8vmAol63hK0HzSkbUpPQ6P1DmrACFOlJGLVBAGRqW46eQW0RswIlq+a9Td9FNLjcrTZYzrabtKGPSdWFFHPGWIyZL+s4m7GBU9SdhKxnQFcB1i+3N/i3Wi0xE0ksAEQUu4gQMa+6J3EHClJ25rpSDgkHCwukW44N705rqAfk2DW4BO02UcYBYs9sDNzQKoM59GM2LVBF/hV435eZC5bNXAfLCGJ6GxCQV4ikin6LiP0RMQoQ/RvTnF7ESanfS/KRf21GLmQV+3uDyoFmW+npVli2xhTIvL13ogvqtTLGCQTo1HYCrLklGsyv1MImS3vjRxRProcP8Uu61wzc4MViURV1tA3sentAjpCoGTeJh7PfQ7hR7O6W3VblSTlryjiFnjoLgfBVl1EETVvCtS+v5WVC+/QdO1Mc9ps5HMGpO0QZH8MImyX8DKHu5pxrrC3R+ePRsb9aNzDNZ9EWCPyI+FrRM8c3ASZT33069/wsDto2X6L5hPcp9R0tiLSrC48nt715ICFEFB8GPDCEY2RkuH/EvitFwur52UvWW8wj0TFAQN9BQmmEiPs7JsNGpoTh5jbiClYHeQvenKJViTDOgqRwXmYr7nqvGF3oLCmpX5TyU7IddczF7O63SZmu0IWoE+aA2jau2pCGwCKM+HleMP7jnHt+qM5oKoGl2GIyAlmuj26p3Llt7qoYTzbklzyXIuzSVMVhablHbkxgVGYDTxTt3JxtGs23ut1ZDkvx2/BSL83IildtgCjFRuwC6DpLSNmSzp1nXHTpzpdqGzUwn6xNVyUh7rft7OEbotegXGteaD6x5K4GWvBfPJP4FUSyqJnjQSXKVaejcYmT34WkFtLj4g91VM9ILO2dKOLgn/nHHSlS8QOrLCPIp+YqHaY+ZdaZuFFNxM+k0PTkCAAQrgAndBzzs6WpV3yz+Wzzv+T0s/0q5lyI2x5aQhqNlnPhYnRP/l3lp10uwmYlLNMb1iTzOiZV+K9GiioGw1XPuJTCKekXlhQ3IkJxjbHnSZfje+IvV7P4PnHVN5xX4RpCqTOYXmtg30ZDDeAxcXBYfGMHAkQvqe6Q0m/LBATG66PfWb6m9EzI0EG5DNGD6LP7WI4L1dDOBCkLjXXIrj8Tv+WOuZWNR1aVpBM3nPPOm6WsrSsagADde1qzeZGEL2mSBD4aIaRucGUUNO942cKBckL6wTuPM84TPEdncjfHN9xyxVH6nqCxhVRT1JGDc7dTZpDOOXY8srOZXNrkFrdM6mPNpCyCdB1Dq5IQxZLiQ008mBqshSrMHpzq3hLrW2HnXyj6H5/rYZkP2AL2EKsIPGtCSJOnqbdReOJswgTOfxC90I1tYX2BhnRE7lWLVUZoNJUvu/CXQ5WbCI1w5fZCKzSwigxEuHSzuu0d+4Owk1nMD8BeS2wGnCUfxyxzBdPj7bZGQjg8yGXrxQ/s9ev4q9UqdMwVwZgNxmA3IzLemb2lxHpHi5Qt/m8Bf7XXkGFmeURuJSHy5jMa0GmUYZn0Ifp7xw8336/Qx+LKRhdE5Nnx8TCpWzD+hpKU90ngEOwJE25ka/dOYZ9nnNgCx+MJtSI4Ni7Ii4aAiJ7OAnUk4QC4QzRUABKDQDpHaHmwFOWagS7GssI/XHDH+NDm6tFprXI43ePuH3vm+vYhvxmN0bTs630HmTobIh1qa6PIZKxzi1LHIzJh78KfrqEXfHqQmBoBgsF7hjjs8IT5W2nZ8aawbhNi5e8FlHWhCzovsMH8iyA3weGVDzv6Niv1UkL3l3DUGBGygAjjOqI8//Vr2D4ExMFmP1PGG04/ytmRwQRb+uCAvkhKdVIStfmVzaqFGyNBPsxvFOJmiI295BvNqe6EgMcUdwaW5AsqisHsPtutHfr22olhpeVlcrk35gcovtUwvUuTIdZyY0eLGWLf/OSTdf+NH5EU8otrKRqx8Iw1Zxy6/dEBw8lPTVWbKH89aMLWPObx4XHh7VSYrBu6d0NRVF45PIamZjc+uZRa3lj2FL/ROvGwed0Qd2XE+ptp63HGtasgsA8tr3c/s87D/1ivcVDudyD/Kd0DZ+nmgESPbaQsmrApl6qttu7Dwo7TScKQ+d59ucXnjNtvUNSYdTTcRFMSRt2d8b0aeapo0+z28olxFC8/Qvxc03k2vlXSb9MTm2Z5UTKTKrf/5VrDTLBSwOc5FoLUBoeti+Hw9jpqcVOd0gh6xhMmi/WxY2B0Py6dPxH1mAbCkMSpJ2xRuOZeePJjiIPkwVUFqQIlm53RMNZYYYR47X57qrXIr2JBzkMNNVgQp0RjWfG3Hm1GouYBq1AZHnsK0LCrlRXpgzJmfjq0e90m94vlOMk86Kjo+hU3L/DjgcPqlb2tewMqwVPhiYK12gps4DmIoAr5SEdUzye+azex0RcXT4/2Jrl6j6wP5Y9kXLis/aanj2dhpacCobHrszrr6EQTT1PSkR49/Xs4wvIbGCIe5Qepe2IK6LS2eSUo4m7dez0SQlVCYUVmeeAhc9yzmkgJR8ATsT2u7CPl17CrRW2pVetctUv+VTXbl1Q/H0d+qmdQAIIMW+0iBZj42/z/RFS0cKYFmHh95/j3ASechbSHNaA8EvwfI+uE8udZwqL6rZlCMbsgNBQaEKkba8pvBxjIRFqwyGV1YCGsN+jWN6VfgLearaUTsxI5XyVRjWNA1L7tZ3yyRi2zBGRNQ1xWGb2zbCAt34sOxTYNBkVAwSoosGu5r7BEdDMdRVonJf+imwezaVWKuGnEFfebhyyP16PSvIlm4Ah7fYfc3tNfish2nK0lhsUYUDY+psSZgnZh1R2Jdur+MFCNjc+G0zC7SwifPSvkefQnYckHb3dwG3nc9ZIaLXOKiVo0kA1ZpwVG+8RXGD9w7+z6PvQgWDer4TTzzCIK0Lj2JfjEf/58ciBcx7v4DPYX7L/B75nypzF4vHwQcPiSZnUsjYZdUFTngFVSZXKWiDcr5DRJaOLv5L8v1YQIPILCZ6zWhfnzmovFd+7HaxL+OmOuD4oktYvvNsiNNptodgE6tPEjqDwRm92jfN1+SANVE9yYo7CqffGx88qulUnLvYZFTyAMAkyKtp5YNMc3bScbIh57Q5sKULqLyOiqiVHlUx/yzJMazCXe4cczlMtbWhj2rUo1ADk7kniP/4C82XvQ+Ar3b60SCEmVf6fqYDDG8yKiYAA7F/tizRe30OUmov2xa6sHfyJT5QcHV+hNYxf4FRb5wCeD0ssGf/rtbfNNuDJ4F5l+/CcHOwVP02/HlXusuvnfihyYwpoSIM1kgnfNhaRWnqYduQywuX/u5ltJdsfVbiDKiLrTj36qmERpVOBzWFU4WLZA4W6kqY1cry/bM5EeSBNBhJApjbg7ZG47+IAfinW3P6shY6uEdFqIwyGR7bIcPV1I1K8wY/nkRIwco8n/ARTUd/4+bmmhj8ecLRibRF6zuFrSXVeHLQhTyrXT6Vp2XnyoOJmYbQgh9VLip4t07T+esgECbaz2Tx6T9go1w6Lph+1ARGYWy8VmElM6tGb651/kXBNQ1hYkqNiM1Yw6xAcMXUdFY8Gl5IsTY9U4JTv614e5fOf4oVbfbnxhlEW+nlFDWKA6SkZBLLXLiCdV0X1BtGMky0bG0pRFil9rra+dsNDCLn2f//nccUeLQw6nLOyZaVsD7a+YJiHUZOPg1+FkKCGtqWHnOU3PHtJdagrPW/kYtiYMxgzNDkC+7O1fAgk/h9PUjyf/mmwEM9a2Fhmxdhbt22gaum+TmxvdAlF2C/rGOTI5PMqRO2y6rlPwRs+27BQzCVpKwu16NIT9CZg3s5AlY1BObgZhQSWBzwDM6eQ7Y8yY4MG/WvDQ9nvwbmJPrv3pznUzlZEfg403LLh2/3XAj0PhfGBITmRzpi87iCARymYjrgpTxUjbWDP5SCRLBKkhE0YAJGoPIJOR4NVv2PcCJnSMwfslTCbzJ/mUUlDmnJB3fAGWkduGH3YrKSgB1o3UaHJJ8lebcjvZ/onJc+3FsLhIXItSbN5rRJg6zBqGU22duMFQK33GkJ9Avv1aK5Jpw1/1XmsnWl8VTvbDENjIIz2QUNpPN4So4YcEnWioKBDlAHbjYWCl+c74Ti9h7cV9IKT+ZwDRDKFMB6qIrnpt9uI1Xai5jcVZ9hsk4Rpp0E046Uq1Z+EdSmRABg1/WItaCIEpmBt2Oj2ITNfnhqq8CHTRVm0Y8Y9CwNAdQt4rlUEQRsg+x7JTk1KeOwzIEstlrcUA/cJXBV3XKhr8cvKqjjTkR4SPuYT5vcCG2KeGT/29D27dJxNrwm0hRNSxGEgxUFq80yMMa3zu3gqfHd5tKX3VxhdfD22LGMGGaric7zQLBsgkpghe2WTItpIFcOCMmT3wdcrSzvV6TgE36Yreyk3lvTsesPGWJGR+SFvZkvZzosLkWtmYNiyNLtNyhYSKHnjDBb9fEPAgu06gYjEbcTqt7OasPni1K2YL+N9jM9UO0JG4l2Wv62zUIyC5Iqohr/lxwzzU50nw6OkERuRhY+ALOnHbh5t9phrFqdIcMSev2EIxuGftzBfFf1llzHkJ/sH0Yji00laFiEJ3LOTUNPwkYFnGWOGaC+7YzzKygg1TZpFPzN5uBJtFY9oVzqW2PkedD9feYf4i3PMx6uMh03KcfhXNV1b2mnwNLo/y+bMQA4aHM4wJznRe/ZMxUGc8Pi/lT8jF1Pr5F8/rHnaIE84ClG2CRLFPBHESFnKJpYQC496ygZEv9AnUeU21RQ0YjcFLFyqXNQ1Y5H+nbbztLqmYtJBCu4z2+Xl6m7XzEkPZtqrszrVG/mwKuYYPnRmSx++mluIHNmEiscttS2R7lNQvYzh11RpCvWJbrhgJ5EBv17A/8vCH8CyuuKGh7JW/CfuG5MrsqIJXMXOk8MduWbM5VZWRFa+WUk6UA/Tbi6W5xcvvxTeFVDYVkd7iklawqr4h6Gg4SoJK+TeR/lsTIQASBgVIIE+MRXDjvyUgBiFwIPe6vOaKxm0ACczsLAzN2NVTEOpvNiUkPq8+SGxB/xuAX3Q4YNkneeKsanT86edlfPlrzAeeL2u413sIMfs47REDvoMkavKgWjhl2H2ZHUhxBWkjRRphobjnieKw1izefZxbwgkIVKfT/VZ3OE7RZohPj84GOOUfcf/Vt3Ibz/hX2SVMy6Dgk5YcFe31KgM2H9hJvpWERmSbDVvLRHZOSyGCq/dfY4UXzigpjPJsYNlbh/I/Co9BkFzW1miizf7Qf5EGhEanuGxpFFb2rO/hUuW0mG4TdakGZ+tcSqFYb9TWEKYh04Mj1r2H8PC7EJxDBsNthDQLinwPBRQyWXHjDkiWq7EqjgMQ6brspD4/NSXuA5FTEGMFwTVkRXEJXnx3yo77TdyADLTpYnSVE5DKvvjcpBfPopS7IzC0lUIfOfR1xPg/Q8P6NmQYZGHeF3FYbmOk80X0K+0muxY86xWXmK03PZKI37YYmcTAJHQu+Sbb2xFBBqZMbH3kuCSTz9RjW2PSiKp/xPWeBSphu8b87VgqtHRUFU4WFiBOZDnV3PDu/0K0JxFJPP5F2AIZiXq3NnakrWABwqlfQWuMFElCxSZh/FOTMQaT6d6ECfpCmhH2h8AC3t+21F2qOdb4+9p6EKy+rs1Aep5Phb4KfpEnAdsBuTysTQx8x8/sUh5S7FphBYUQ1tjj/mFpKWG9eVQvxx9zrQbDKkcut1GHxzogSdC/dBBMTgO7pmgdSF/zMqmCJgsoCjUmM2ppjF4sZmjF0jNrclagFaXCNaD8vMwy5S9tHIWUqleouBNjwSpUxJIvxWPaEAxgRLj0fI/ud62otjHyYkegy1HrN2t06QBwgruncG8J8oqdEnngZZYlsd2LNiIUCB/Q6yJdKO2PLOBumyiAraMtQDUnjdr0u3r1WFrQPKwMonaId9nO544vj7vVvKTWxecbRav2898zhB3T0pvP+b8Q8c/yr6MtQJw1G8PV9FhgaZkMLeT95GZhL99XXW2sOVvAbzQdjvFdCq8rHA5mEGSVsgpP5hs64g94/88J0uLsORV+PwhebmlyUC6NpBnwEntRGZfKLi3juStdEW0LqJZv2X6yk7LckZFFJzrfu94CLJdg+NWxlxjH35+3Nq4eolUwDT5kxC7if0rJyw7g2R1v36CdaqQ1pJbrXn4SBRZVz52AS4mni5YZVPrY2kp9mZMwmfeZJtJSqsdXLRnf5GlNb73Gtr5mdYbWlo+CRVxdmTc62PmfUeV984jfPaZwB9/GcS4jxtMILvMwlHaTVJnfQxR2rdQ0QeJdtXVFUagM3srdq6C3OG1kX0pA9yX+YhLMPFqDLtOIwLipNoyu7Y929x9sLN7s7e7aaGt9bXrvYmx8qm+nor6X12mcjThlGucu+/SEUQvnNstqZhQic/zXVFxSvHD+gAy1GP04bALOKmvyoz7r71/D0XLAtlZ5LbTazxS89VwGEVAHZbsrBvOcwQwlR5YXnS4Gd+rtrRc684g9gbrQoaFf/IhUPbaxt8/shU+EaZeRWaEp9zWFxoqIIDuF+u0VvkAPSun4mEm2VPewTiQ+NiWR80LQWepps0Bz544sGok+qyP7LLKbedEUGHdgDJWOnSXoh1slWfMOz6tRXlhpAl46Uhqt9DjcMXdf3X4lFqAXN3XP8BNE39XO8H0CN3WWocLGsI07l7MR+Gf+mCelIW/7ifRnf0IqVUPSXp3CPB+1Ppc/vWXwT0n3RM9wWP9PVTmYNnOlateU0fPTDemu933etrXLBq4AFSk8TUXgwnEIfRHsN8lAbdJKBXHFiG8dCWhJm5ev0/yJo2Qcj9fryXs8RBiER8ar6mnG+s2i9CKkz2tV0js2ZoVasV2KDCs3Q25RlorqgL4UaF9r/XsPTV9lwAqEvkIo1QBzTF/KkjAz7BEqXiHn3SpU5unszeP3dtLd7NPefWMqeV2x0CsIbPWdljYqjql5Pn5pqDMmkWhf8vD8nFE63aWOn+BljYXwfqEsfdWFgi+usyI8StZxq6JH7AxmWPmGPu0im3sZeapdZ/uRtZM5e9at1CL/wRBoxYwB7un/qTqhhTz9oEPK9KsTeKVjqRrI9H2FtZNaYjHNJxE97jWrafYjHMTDKjt+UFqv6hD8WKk1mrlz3ynnk0l6mP1qTAZ1j9T+rIz7kzwl9IMEI9AmfhvXuBWpeYyIookZOMLbksZ7pUm3dU7yxRyzTZeArcWPKple4uolIFiAq3tIdNc2SdhrJhe/XXlYgULzhijXLNhb8xh6BHqVvWFarbOUjswIdtNX1rD1rBGRzeAP4gV/Rj1LGe/xl4Q30NmdhLpzDoV/Ilz13YMgGgUCTvzbUShS9LJRR5GaB9DkiS5tfpUT/z7tu9k4pVhgY66gwK7YkJRVCmBIq/NUefPGFRewOWNoWACArRezNhQM78uKtNkgeerph8m3vXZKgmKxPoTATy1hqJx7p0Cw19Gp0Es1eqOiCxAKla51PKpj2OwbsBc+c7ebaBKiJ9iXzFf6dGZJ7eIzr6gTrF2LlJsGnmv675MUBVdyumb80k5jUfpyKTVk01yRT6PkfC9LjhnZeGuoe5olR09Wvh4YntzpiDAzZvTN3X0exBWKhawOVbD8EjPFg8FyWTPdfQ//EuAQHevV428GObYC/QhlrkELO0FcBSSLzrsSYd5cgNf7XSWj0DbfMEnCpWbF+OtebmVRjeLZu4tHsvJdnMPEipaT7+PcZXM5FQ2huxHPmcAHfHmYBB4UTigQqKA+qQKB4YEjsGsBVlkq0aXN4P68O51IlTbKuYrdzVPQI00B/4ZZrhTDLIEXcY+K9WX5ZENcEeA8uOhPaBw+pQ1hy/UQLaMPgqkUusYbJEByZxZS1nrzNH8Tmt0RX+4w3PfjWl0XVMDLA9bFklaHQwQBYQE8C7nMmuZyhWor7TruxHimG1ag/zFfilZmxOlLM2QoUg8hUMAS66VRFmafKRNchrqUI7TDhNwxm+imJIcwqRgR9fYOnUrz0PllbJvg5ZaC121PLn9p4bF6x2GVTsmbY80ygzXnTYGs+zLz4tGIW46ndYouZCR/LpFKW7RIylQ9t3wPGCHcevD8FzYXgVjsmerKF/Olz5ytYkKdvKQ3+HYwkQr94R3KbExl3uS/0C4NN74Z1Q708VK3HpukFcwd93FqEUBiySsMNenyl+yKyShOQsO2R0bKsy4i9WgQGoDvetMc9L2JPlg1jOJgaguhUIUCemDiuoYpVZKJdbtGOvW+Rb0RITdyaYilznSf0L1jgZfvs2TilX15S2UTJs7zWCoF4AaFg64DY7HzUaCH4A207FWaDD4w6xWiBMWkO1+3cOxojX77eCl2GQ3WvLPz7nAFzye9RN/H6jcrG7pWSiTkH0fPt8eGnbzoXzltycGL8zpPRgJ5s3BYD+PU6AtELlbMukkGG46OC3cLBxftssZJ4ZK9BPpmcptKQz6tZDVXBiTM9M1zOHwFEfj9ByhPw5bME839Ul1zzRIfTFGjCFYlJZPBOIGIjwYRFqCo73rcLZnpXcQuAf8bolL3O+xhH1+cQXq1MjeZW1KmHYeia+2TMoNXf9HInFha75mhm4B+Qnm7rvBsRUe28RWYJr8YgDo3PAPxNi354hC7EvXGFk16I5P6cLqCviRvWWuWeiTAPalIdv72y9aBYH5GocsoX5oL7fI/tUYju3gVo2Krwmrjhos7JsguXUJVx1qCd433WMTSDFeGkeqizbSLklpjZPonzTP04uV+rdph5l3qjsrQtFiMzAVmnuBDHESiWRTC48A5BXLT3DgRHyDN94m3A7lgXwaBOj+01aF80gBLKm0P1/8DpQmLr87TztWKN76HRSQ9Hlodlc2/c47343okzY6qEFnfaIyZBjmpHwcgZOXkd+Cg4ER0bGOQO6Bg8JO4iu9NcxZelOprMAoPXNSzEE6wwcHbpoimQ9fwfajGKKEBS8Zv6UP4y2NG3wLKAXp6UbvAybaJLKIvtpXGaZQnrzf0zd+M2czxsupRXV7099GgkgiI3CMBUSakCKA1zD4ptBVdn9iKmNTK0rXXCOLEginarlR6tR9eZgttkFLemSuHOa4G5Xx44XIHrJPYVcfL7/9yp4KUvqa7wyabweZaHN1aG2tfe9MJf+crRc8vmEHP5ETIH6P9HTurVM5Afl1TVeFSn307xkZlRZBoSgzk1IUlG2dIjBcIXmD2iFTomkQ/y6Bf1YZ+nbOraockV1ECCzpNUS8QELtXy7SvcjwTnqfOeopqy05QBLzdElXthnPMfoUThRtyOHGCQAoPWVx7Xu6/3WeUk/du20gM9EU3iD8dGy5tQgmPydJyDaFAIQIz9cRnq5EpzZf5N8XEyN3eegWbc88eqM9LRAe4/yg2z/VYK0blskZoV3QzsNgYEOEngvFTDqSpSptgl+Rp2GjsGx7VhkgYevOYv0iGrOCUfD5RDXHopUtr40zql2HNYtLp6vpf1pWd+ZwzL1LwAVS9WxXroh8z/4oyaL7N4b4FU2tgL5K9KMGilaC4mkY2cwF7Mf6xMlcXPBwHzoTpS9xFmnnxOKyOvO3j2hhjNk4+S9TBs4wjTDXAj5DmOwtAtQ9qunWrrWtI79GuLl8tlBrwqyCJ5EG9qZRuzMzMkASi8cbBFc7iBMIvfO+D83GXJrl7MdXHMdupfB7TgBOQHSF75RxXGINv+RIq3AXwTda1pbp0gv+lmyylOYeD8fLDdtBGRaPDf04b4C6n3wAKbh+8tYJFWPitICZ2bsn6RN7cPEx0mL4zvjdGHXwiPx2pOxYxjdHFAte0wVghu+67R0hLCs91aUkhwfBFXMvlgvi4bw5/E/kLGu4ShQdMqbOzhdBS++JxWBWT6U4s4ZLaP49EbAi46G73oprpcAaAcqCZUwzCOKvyOMziknnitNrh/aVOkHulM5QhPyVHlfPWCjHz8fJit5RKBRI9Dpj8B/1ylWZCpCkv+qAAkHBRjWgV8ZcjEyRQ99bx67ZisC4oygFgeCm7ZL3kP8Ul06r3LlJ9gvX0CVhEWNbLOmv3mOuihCc3w5noT92KZIkF1yxmD/tyTfMV148+aDHRTLVsNzxqjZPhoS63Ex4XtvCDaKTzLKJDwlVpCbc7Hu5DCgJYHnnNREpNJYGMRVsld4dkJSZOgjoGq7H2Jb/JE9/zLTxJMM1LNabNQnB/+dk1t/MDOqNjEhmQ0Kbln8L00sVHagNGQ6Lo4QBoUwB987PAGRwbUHj8+bNXkcN1MwSSdjO1w38MC8JC1nN/8Z2+hTgXuzCIM+Me8eLkr7gySVJQLGHMJqxUDp/cz+LuBBi8MROgVop5TnZj84SvPuANtjCb8Vae/Nf29SJca3L4TP9P1cDs2WcJ6WM9wspHKcfLCNuegvJK/G+0Sfo5g+uH5PKWvrA6u7+QxgKMpsQHo01IhR4fgfiiY9/OdPtoiFjaD6PPn13JEm8hu1Gqhb8+jDQC4BLynyVWD2uctInqH8bIo77P0d5AFpCRsvbBiA9dIFwq0DoEMUoSyi6Vj/HStSSie8ZXRv6uFlTgHB+zPv3+Kl6xvHLm2xeSXP/squdUJnxsydDpGIzn/I6iKg8OcUa38tK9Cc0bHJWurztAMZtJA4tdet/waGBjBhnIKoQaMZzizLZRts5Un4cee/sXxiShCrg41BmAfxwXENwpqK6BWin+pFJOuxbjNAXm8uk3NwfUN4rYcHF1o9Gz87qziZ+Q8Ok2kdbAIHsTjQtWrU1RkeceFuXyqEpRObL2VRbNBJWgGmNjd6w7Vz6yBFLaiXlrSnw0UstQNQKUHdhZVI6h3uYewW/+fpaMf6CYKYSQ9feDAHj41vNoFCr4jOdnTyuJkSki0+ioxza5H7c2HdzVsxQeed0ksPA+X4EZDsh8RwKxSY81kQQaJVrpEz1pJrDR1TEvCl0qnY4Gz4fsPMtYt1uQy2GdS/yDmgGxOcO64MxiUMUOQtgXDDRJzvkciVK85o1lZX5TdBwRyerREXmpwF2D0zxXXRGJNYkX9F1qcdlpSAvqXErwKAS3DeKPtHqOCb5BVaKjK6w7rw+4NTglwGH7HL/m+H5FSYELvvieUhZO9wdtJIBqOsDcf5130UbJUNqTvmvHnQk0Ykd57Qo+bjHxT8lXeAmD08rAA9voJTXSC0/PnGh7dE1XwypxK+ZdBgroClwAx1Dnp9xb0KwY8zaRDyjojsTVsH/NaNt8kShifU2oMZfhACkeaDkAopw/iG8zbQvzUYEAFLaYvICGh4yZ6nVjXqFTgG7oXMT7es/kCslMwnVJVxO7PR0/lDALeBU4ig7iX+cFLIwNiN4B34uPbfWbRzw9sZ3Mm1y4mL2XI4c7B8/RrGYm9IVsZgeJwlzximEYgoOCNNfie8NgWlCB8zWh4fQYofC6qO5kWzH62mC+yT0pFIxVvCRS9Dd4QGLqbNakEE6dRugGp0Jgc01ixcmTTE7lOFu82tQ4i/Nhtz2182UaSWM6pbkxVsIYs8gUc78K7dRwJhv7WJm97/k0FwoXbShumBXlz5pzY11AkIYJ6Y/XR1HwJ6EZ7cFEHU9i3dve6UIGt2Jj/Z5WPEG74Z90pzeRiMntdsgwI4BXarXAlLEM843SMw9L/e6/OnNsgRGAwdM1igUyupLw3KvB+jy79zSWmY8dofH4YpLG6DVxkq+SsMdo+duMFOouMu8nILv4wyv+qaVJpQQzNkH9AbeDKVo1g/MRqIkVV/1R1AR/hejyI9M2rrVwwNkFJEEqB1SMK+roKDe3ZDU1Ssl1tr2KHUQhKm7f/k14yoL7KC9WYdCgT5mSwN8fpC6ml56yDI5BTJKpAK36vFLL3qY+Co1nvbUvWs4yzdaxiOo3wj5V0jxvY9pJWMnS2Gk9d2Fn+6vEUA/q4pJNo/o94qa7WKb09xbaaTF5YuRZKygtnDmBE0S5M8vx/105O3HQ21pmlejfGfKnbVJx61k3ggWWZqWDp3hFJQLTS74FP1CXURygviIiacc2FQkK+UetKQvC5YvPCdzwI4lokefksdMEch5iblZE2LcYGAQdTnqIoV6JJ1lFh14cp8DNIRFEc4eGMG7EyS8tMCGDnn7SgXSQpmFA5AF9njJ9jdlHlXk/CnPenp8bt6QC9+GiqLSTQ8nhJisnz8BGSNLp2UTNcVd8wdbe99U64OACavazInCcHte68qOIkB+je+hiv9aZVsP8TYl1Tn1C4ONWFwxrYBsUU9ps6sfI6XUuklKbVL7gSRr3wQHTRlr+kj865ah3QMR00BNIVd2e3yuga7Es1+HkqYZg9mKsFeA8NHOGl4CEeGmYkq85ZH3vGOkpTjcOA0H41zI6XuhCjCCaXCBYJygSGdkJ/ZM0izvw+Tf5gD423yJ2g8WS4p4DeRNWO3tqvJFL2h9ks7TXwfcB9+vmYubFIocA1wLy6J09pzdZykrEY4cXbjcE3GOb6Tp5lU8rCeZfrqbNgyj+mXT6yM2sO8/jq1E30ccsRDVqR9i3YqTKkCqf77RFyJJWZM0vtX/1hGmmRUiKGNyWwQ67muxm88BxtFJTefTM6JkA54p8/7ZCJBgajMCTHKWCD2yD6+AlKepyuxql934X4KCAmk01K1IPuhU14hGDmKd/IUniBwjrzX/G7TCFQWdvnuKbvAh2pN15WCWSoUOW7Q2hBDK2jTaTCltZhuk2/KyFEnZOHtvbLoC3Ty8P5Zct4D0Y3Qvbd5a3mWHmGxL/UAOJOCqRg5QB+0JpII9xQ/X2o8LnhmN+MLt3yir90eQ8rxIVs7XoChUemnN0K/Quc1JKORnUV1Vp8H/Ac8y1jHLbUPWA64rrWncTZYqSkFISBDQCsLJd+Pkl/RYaCspu0tzESJa3bFBJlLdysI1wnB6zWCz/fMXZGb+vUerCh04INlCG6K9pA18mY+hZvXWhFgHLDrINFr9KbyiV9+gpxELuu49YfrVPNdkkNRO2g6CE9phVxmnTk4o1gvmiDXC2kklXGQLYCSaHlZgKLY2RECp2eD/3WrIU+FhJA5Y1W+kWvim+x7z1g5dyvkNuLG3AgJXYReMW5g4a/rL1awGekG4+1qAWK3y7s6YDKNpQ+60fwGZiuHBvPXmWEw33Di5Y4x3/pKF78T0z5D8QnYfmiXGyQuxbsY8GdpUnb1yUhcWVHWmhcO/mM9GRkMiHa6tm7AMkizxyhdFX9hHN6G0ncDNO9PPvoAEDpHfkjeMYSiMamKN6DhAhghKrNCypycg6EEu0GZiVBQ8xvqwfCJnOHqaoBBsnM2CXfWTlREz+fcFnU4NDRc3cXS/pmGQN9D9/+S+1e/JmWev00DZiHzhGP4GLJc6mhyLjt/gdr9U6eNUYhVrvuugr90gAWvEwkS2W8e/+W93RMapBa5nNFAYEbLVsBuWz8EOzNW5D6t6bHsorPnV50bGMdB/CHvX93VmEOPyTAS3fRFUYuE56+LB770MrEJhLvzQibL6/TPFj/DsrF65PRs1hobFC5Z8Vv+wxdXE+jCjwKHl39gixm9kvdAwSyUG1C/y/OMINyAExmql+23ooUlPt1tEpcWjjSlFAmuNk0YB1aVe7jkuCCIWmB70zaHtHQCJ8oXh8eVl6VYfni6Cod/FZDmf4PFlM8ghJH3YNAzY4CK24K94Ry6tiHFNqOVYXh9jATkw9xN1kVq0XXwjmMzOLdo6AbsEvo0euLx/cLH649q2n6NRAGlFPUTcixzR+9k3FP5R4QOtvLs+FbPZHDvX88zaH4IzXIPeviCONnabzRq1jzw0Uzbi0ch+bY0wCt9p6Z6CuaHZfN12JoNcGcZi7JWObISiXjl2GqpiJ1VsL6TrM0517DrFiB6tyeom63FdnJwbrIJ77v8nNIki/jSyT99dTAGgrcjbyyj1bRSx98aY79eUtkFb65XOuChGqecPCgIuy3RZx5/e1NC7ExEdf8hZvozN0v/fONFwTvf3/JrSvm7LF8o3FAiwaZcTBKnvGTphVYz2PxCfJpG94YdBlwyi9Yvhe1Rl0bI3xXbnB8CwR+Y4XCXhUTwXlRep0CaueoQxZ2xFmXdqvwes6Rn7dsw9NUKVkEI0qoaMwDLDrUXhmifO/Cyaig8Usv+TXZ6bmxlrLokXLhUTVTUt+G/rx1i6ILoY6S8Ms25yPXDTduZNa9cRlNJ3ugpXmjmaG/t1oSpCVfJA65meVF7Ys4s1uhM1rezHVR6j7vFqZc8Vulsl5XfP+eJwY5oXbL7Aj3yhTP4UrGA2+jQL7ks25pHYEiwZLYJldSUEF2VSWkEMbfHXcERXYrUUlcqBKSjsOtBabKDT9YXigRDDzX43mteSISZatpnqJ1K23ZeLHF1SFsCHbwY7QUb8zgG9WXxAlg4qZuCIxaabsllVLFsS6Klya69ijU3WcACjgUUhu/vVlLjwQtGwBjtw5kL29VdzojuQLtYdVO1jZKFOaLItLTEIkSFCESCDLiXU5KQn4dqhjFz3GlLcmPMqFjSLGpI4jZUBXmYNR85u5sroIGiWc/wnN4JGNpI0R4V9RIsegpzwTfaNbu/VSYm8GHzIoEN7OK/OMEPrGqAAuw3bLdTpgduup/ZpBB+mE3PFfTZx5J/MX0md/xVH5ZRGDlVFZAcTAPr9M5fD6x51uunP94ozcQ+rXkuh1WjENzym2ZzXs5uEKuC4oDy+3CfY66twCthJhpjtnMZmXvoHf50vsAAtIS17T5vihuzYPlhdPiLfCHFSpS2mWWL3xD+rWVU6f4+dk6gc3wqP+dSj8/rxitN3lMc2pLSz7//s9rjYeNCU8jCZxL+fa29bLrv4fXWOcWQQHqlz69ykxCzaFM60/XYIxyDgu/8oy9162ON/8GS/YdEa4vwPqxd/tS0O0w09rHeBtr3MJCmBDSbnHahgavVLg3/AA/DXXaNXnu41cbamJJyoVXh6XQKCTL9J4TCp4U4NRkl7FV6RorZJUpMtAs6MrYycF4VUjjM5j0ROce2l9e+6VdJX6CllPLifiDDyzMEhc8jDyIdDKmFvCux4nGNIahWJqoqvqN0nT4GMvcsxTo9ZyoDpckuk4SYN/XloaV0pglsuvGHjiqzzDLBPi4IGdM50QyYQecPHI7q7W0xGOKV/wbhY9aSw8DZ69NLMCpKCAksx0PY3YHHknVk4yH5XPDhhycNMA4YzElem7MVona2j4VJqWScEJZBxXJ29Ogu0NZcc72gy62XF3DqDh2vXUYpqF6lyQEQEM6Ut9zO+KJwotHexJhKAzGOHRtuOFolvcvmMFqemhs4AUnX+AmtvTHXoHzNjq3ZJBUQRiEo8sM4RSZ1oIrMgRqIf1dR+Leiz4cvcu60bQ0aottzPJOP/GbcXhba/rXCwD8dTrb03Rtk84rE3Tj2hbTDCQh+yPffE687KCUvQrDEsWbN0Sw3+9Tu/yFqEBNL44nX0pnPDHpr38WqsU4Xtm8twBzxMx7knRCOb8sYFEZWFi+A6Vr7apf7KnpgnHtwpnm9p1wEZVSx8PI4+idnw+KVqZrq879TwlaNhLsKOg+ySH+Vupi0jt8PyPt9u3gCOvgcguR8Ds2H+SR28k+ibNVNrwfvPH0Z0dcUD1Hk+SK6E2p2xCrLN49n9g3IcEbrJ5IYDib63oK2HMidPbfbw9v4dDEUdOdI3S+liuZHMSkSoBskvB7KBEQbqESTvZbk7bj7Ay5NyeTm79AZDR29GZlHYl6cqcf/dxk/0JmeTKqVGjXizZ+Om/C2XhSc8E/qjohMfHJz3a0Z7NregpEiJDjkOWErhyK3+369KNjpNkMrr4tCT5Hzgeg29fd9BwtaQaQyi7FA8srJm6+0YM5lAiff+BTlT4GlhCIEGO/qZtYxjAon4YW4b+opKLdu9JqJsuD+Bkl4IXf4qHaA2kX/ZmegU0gB8kQbX+EI8rhwE17Wt1tOK9XR7FU4Mm63zCM8Z6cthSTv2uOP99aw60KNNuBFyoezRl9P4W/1Or58MeNdU2I2XsWf2DgtmGwPDqiw4SJYrM+uPgmSQwQqAEUgnvYxsp8KijGu5hz6qltT591lLob51DZt9RHFnQWibDvanrdvou7tHk4OKVXlO200tVuMB+rr0mVpX1b/0HzvV5LAwoeiCy7zEIRXSJ2Di9CaOPjS+k3B8jEEK8eePxk0HnXy8rKjl/DoMLCywqBO/Z3fn/ZNxHlieJAU5r08ABvSfqCOFcGBj8ueWCf8DuiiZRXRMAWiH2DPkkCSECygDwsJVnYblQjlOPBDApoBDza1lyAgvpiOw5MtuymxLThuTOGVRibzrkPDTExJxA2dWXb1PZs7mOwAjiezzp8EJvh58X9vQ6qW0VqZe0xxVIojxJ6nQmAo6RXi4NCQG4wHjqfzqRiERunKri6t31I+UH1u82KlrDggllRYX2EH/griE5oWgt6pqoOA2a11UzUXrBeQa3ri9+uEPdFj6E2IVbZvlwKbkLdI4H1W+pLtAnE2j9zwa8Glcu4BuVRDLTGzBA+lfzE7F+VKzLNGvyKgNsw9fAi55y63o9MS5YKClYDtLjEuuwxytdsjvCsVdWRfDw5NrKMuLbJGBQm3GyZB7zR+Kuc/AnVqrBrQpGYjPXOZYpHa1dtT/b+e2idsol6wI1j5INKKAlWhR6EEEymcRo7IKzPJVaYip/V/rgvkPsm4S6b2yDsX5a19cqGqV2qXYflpBUQNyMhxEVWe7l3ebQhGoOb070WQnZ1JRzmNwhFdPqUSj1PVOqVCta0CODXuoia6yslkcNLoigetvTGzF87BrX4kCSpr0jIyq7dO8oPgkew/tkmdknS8Gzt2GOpZBQQbKElqsHR3HrCtWMktC2lT2Kf4Z+ljKxrECgSINGQSTgwttutgjiK1/t7XooX2JYUJyg0En3vetTessVakrAL3VdbLEXtwuUDeTO3l0SsvOI2PFs2083+w6FmTFnnXa+pgGb+HLECLMOKn5Ftveahk9zViaiXkXDsELFR18ZxETGdK20gMkEz+Y3ew0do3zB6iE7adMIAIqzodfTLH+4gqaQ0+3WczopdLyNH4wMHdUtsOAbZqPsv2uTXaEKzsomvdtSN4cQeWqln1aF56voc6Z8CceM6nBwXpXDKbksG+DSsIFKVJwKxTwbtSc/DzXTEw+wUHUq3/hVIEggwICpCtgV1RRhdLf133mzMHTnvlYTPww/Jwtx3gL8CYduFwhVO4yHX5T5jeDNS5AIaQFeg04Qiw50iXwIBaZb45PjpubfPkokm1neRcBOMx2xHAGWhEVpNhBeOZTL989zF8gMWQaX8h2F9gHSpktKoiNhiuGGJf2qbWkPdSaLcGFPjMuU7LGcUCmrR6l3n5EuOoCpaKXkSi01i/1oUWIo26jwJZHBHu27JHjcaOU8kaLMXh3cLhp2kDhwmUy3cBTuUDuEkkdAVSLvIScADePgbizUpDpVAFrKV2Iv30JNx+w7YYzC0IosfaQJVr0WGsUBz1Y2BqZEENVRUBDFcHshO1j8Z6IVyC9ZCkcb6OvTBzz8hc9lByRv+haS0PJDNpH8eB3stCnJorVQBar+ktkfCFT8lES2fIvkqvsTTVnPZllFee+H4pUCljNIGF+U2WPxJyCGQaUUS2Sl7t8fVIPCtREk+cuzf9Myv9AxGx1A2VN6cecUY06+Cq1Of/LpWEVbiqIyaOQoasZnhSmDXlgAt4lYacqPY3Bvvd8FFgB04twyXoTSo//whc7s9nJP55woClvXKwgE/W7xrIDVtGIeMIPFprya6XowUZjQIyn4Bz4KA6/U5hfjR9MJMSSm0Lw2iLTFwP5rAVaH+XdUGeTd1OdmajoLMbqm6a21HIRlhNTrZM65G5bSu9plvuFQQxoXU3z7SfLFYv1WBhPUFfSuaXCyfyJoC3ojW9GvGNqu+xViMdT1+sa0vEpP3kAW4AE53eN9wmYU/5qun3+kdKju8qs7ff0qViTWpxvdZSArerQjprDNShA0tCtyfF5UQJMcu+WMEEAG0M61ATxyfwAbT1NGtcqBv31p8hPzF5yTIZ65yeOZ3tNg8CutbU52oCMJck36qCiGUG6ibV9pgTXFml9aYyv6z5vWPa9qzt0LlyCSrDsHsbXmVtbAY2pcrk4QAZu7+NxqWgCrhJsuW5GYO3rAZEdxTzdwow6M3XJ6hLlIuCLNgAm4xwQbhFkN2zNY8bTuHyoN2xeYuuTVCWYCVQolyzadjzK2DPcNTR/a/cOLNbTldF22Jp+SWCQpvtCIbGGgq+/gfyflfukElZ3IW/z44bZpv1niTcLlkJH27vvb6ZMQbCfxyUVGMK4vgErHcpTv0Y208pVf4Hnflb0utswhc+g7lE54FT4BdkM+wSIcTeDaa+FkeoB4lb0K5CstixwMflXm7oP2F2t35whs2MHWsVoFtof2CNDbq3yngrJsCBaCxxorb7bI0ynf9nZEF/12GhVlU0muznA7j+ypauP13TKi7fxVnvOTak6bDS67AzWAT4CS85g8v3bygz3cApQxSavd2zj8GpGar/qNZjkeOfVOjqkysMJyWT9+SeMqEhDo1stnFYDT45MCkfYHrevnuvivDNlDEsZABb+3NGbkxcOvMAX54OEDjh6D0ktbkrpxYrgW2tQW93vpcMZAhMvHOGs768+rl1pxIBYwQUV92TlMp0xEhrk09k3MeIxIpFCpCmmCAVIIJZsucAGA1nRi3pI+gzFI3dEut55+5wKXVVdfg+suvAcuumQucLDZVTTPBAl/2jk8ZRrtrd7+FQHKZNkGW4hEsnlBkihIvmUS43rE8d0zctxuuFCsJ7nQVJFy61z9/ionM7Z+p0N2GqwUe31cR0HwbN5yd00ezK9ETW9ngO67gqMRat4J04tix+KvmBq85B0kRGPWsLGaY2rAcwGi0DroAnPbd9qyOMdM3lT1a3/3uABFwz94F/wpMx1Qm6lyT/kbgXXvR6yLrGdiGjZ5l/2rntMmV0uHekTS3RVaa1/yRQYUzNI7utm7JUlHBVtcUvHM69kh3Ylp89XURpQrye0LDUBwZcT7eEx/RwlG1rMeFfWc41ZKauoIyIFiUBfcyDwlsaoGmQvK+cWZWxIo8AvhN1064k3qQu5MHdqAeOaxa6U0Fa4FTcQO9eDZ7LrLxWSXsmrplsAdi3nCyd9DvXjh7N7lePj1u0sI1VaP9GhrcvhshMHK7XudbNGDUJ8GEurQ1PXO7eltQa2SmALKe8Zdg3e3Y+9L1eJ8kBaKYxqWZo2lzMYudAircjZHqgnyfFZl5cSfkeevPE6QyW3L+muxEAAteI8nHMwN4Zg+kEOL2rhPsLCBS+bUpJO3NYKLQu03GtcZ9GH4uuEFYgTdreVidqbgZJikepT0qXrErM5NCTyB0jxvh2It4ufejMKCKyAiXK4twEwsn71+9BzmmhNNb+vDsq7R7m3gzDHOXeuSY8cueZkt/c8jPyhDMHKBYEah+tz2MEM1J+CZfmkztA1QrKslWMuC8t3neDh1rSqIYxQzdxgeIhaOkYG30hYttGKTuabgaIFVMeofboMFf08oIh8YgVyhGXAlp3Ry+Tb/nFkPTfytUCLk1yfU1iStmRt8ESwsr96u8hkKxOP125gsqcoXy/qZ3voECX3EXDbbf839yuuHPat5urovQITaWj6ZsuhKWoOeiKTTRM6/wN5WHxZ6uEYIdl8dQgQ81qLaSSH3kvVJbKXKrC2UgXKpehZn+Xp2FOoj7ZxsG5MBCaEh0vSB12vGlEuE8DpKRRjh2mPgXHStLWOg/5OStHzNFRyhVeSP9ZwWgeWEWx/KTz8cDZQZxRcNOG5cBMdqiTZKpjtt6uf2c8BvFotTR0oTgSh+HFvkDxb5WiZerVg+hgs/uE/ePQhNSzrn9YlsyjWXP5/7Tp1YnWGJqlcmISfym4wnnS5T07SPgjDWWsrTedG/86g3XIhjIpNLMIrU0xqdpwRVm7ky/xA0AVkQUwEsOANiQzxsssG3pPsT14W8l9q4xZPjHnO50cFXuP88p6zgg5Fh55fH/BYkskfQSKMEwHYGBp1h9LHzOu7QEJs54cvgqNHxQKaPIQUgqdR1oo/e0Eypbc7HnpNzJLVilRX/txEe38oOihvH/yq+eSvZh59kiT3+5SP1tS3yntU70icdJPrSCSUbTYa41A6jInZhPZezusjFOGfkZWPUi3Ig/ypOOvv6nmJLi1etraKUE2sQtrILxucu1+U5WW20++7BvBwRkQY21vINIeTzMgR3wvMRnXLtDbvUZ+CD+YBJl9fkZEctG6Kfzj0tYANxXOFCRNi57iEVC5qEyY6YVDncT49rVJC52pidtg+5H2kFS8mYqJQxOMHW8fjcY8rx+eWleziGLrVY9Mq1Ly/7aRSJn47sWHL4Y7bYp2vFvLsHLksPzTu9pHk3jesYO0ld/S9JUDTJMUCQvJZKEp5h47AuL0M3+4OOGKObbslGelU+vHU8e0VCDZamrRgYjG9Lra19FycZW96fY1r812A/R0zf4MFm1b9R+SGn+qWmJwjUgRkFYhwpboDn7rUnREORzmekKp73te0DUshao3tnC/wpHoCa3Wz915eHj4ZSMUgDZI1VgkD3FuFDA+WKG+yT4fQBFWh6M2hNTmLIppPbwAraoBN+uiAjdAOBgSTrjX6ai/26uQM7nZ4x8ICn1ikqjsJ9ZZPpsOAIVc4XEePSTd+Mt2xqeAK4lqXmO25OhNu/PpJjZhpIcoV9cVgHlf4lkiGECH5N2FMy89qwrMf1sZJJTH7zR8JCov0gdo68RKRtXp9Wbml18xvG0KRT/Sv6Us36E/Sg+uw9chk+z7nl496jXWfvZN6E6u0byt3Qt5N4eFlNgyvtHyrrrRokYayHhglGm+14F9Qu96RjczSKbwaL3UY1A4Pfuv+2gmm5qhzl1x4SE7gMQ8uu0ce/w6c8sDa/DWlDXpvndLhOUkOkAoJkgaQf0hKJ5mBmNjNiVhMcOJnKBGkL+hepwzS1aDIP4RK8zr3BliuKcuLWRoSd4oEBGujKWQNX2yIhnbE7TC2QdMnvtl3zW4xK/WSvc3TWjOAEHNFKsn4BuQ8Poh9FWGruPMXpJXJ4dCMFB9PsYCxZNojyq4sqtbd1j2ZIQvtCKlRM1Q2RjJmnr2OTuZ93QXm5THqIqADYFitVhKaIiibvmX7qH5cODARzpiPed8CIRVcDlRUzAMYGWQU7nJEa/Zi1+CBwNjcHShQBreXqkI1eNyM2iPJnAZ0EGFiGbxPDJYlf24jz8g6ceoVqB25dMY7Xf9BL6L57cDCXpJdL9zB/p660lBxdqh2AKXi7suGJJmVZyyP0y5n0qp62JWRmm7omcsGLwCoIb/jnoPDffVyJfPRxg+4kij6IcSmn90zsE5u2btPaSI7wtK/QdqjgKCCAjthd0p77F4pfVS/iPj+O6DfeegfdLO247XuM2jVdTzkRCf/ZMo5z8/AAR6qnqmC/2SeUxMVHuvdawM0PYrneeWiN3fhZCEO4kvSG/jY74fheohNRiKFeO04gYPUM5jNK3rNhWGX0RfZJ7c8naOltE1SpGSSPrKC1MOqw3M0qtNSoNazFrsRYy8qWy6YR+3ZEjMnpuf7i/ky2wIm0F8E9ACaMH0cZaHE9M8fnNZYfBTnvlhhbGAvAfblMPsh+CsTxmKxdfEf/+ITglfxdRWrONYgBNpL9/2HSBPN9VGGpraH3EFxt79GxaoY99/wIZNs3FhU4b+9GSsb19hcWXGksj/Sj4CHwL/Kn8rL6C4y67004ak+6Vd5e27W+u7MwpOF32/9+n2MKwGLgdIVAlGwU8ZXLJCgWw6f2Jl9bRik/9dWC5sTBvF2b/ZIq5OlwzxzPnCD8hXKBDPIhP5xLtoilosgUGSsODgB/7Kfv7Sr8BHusCv99wyhMNDq6K5T4CH8unTk1vgvmuhIFg5RuwJuSm4ylyrRSKVVRIVjkyr6hxTP/h14xMNNx2Ddigz0BgNx/HVr35W8yY6fAqGAQOd0sssSYV/sNugpe8hTtv/+7kyX3QLjDHi1dMSOgchNxjtysxufiElcI47MsPuFN0NULDrbngJqtwumv7kq2+mT3HbKZGmK7yx6K+tirZV1CTkyyaZ68/awO08pxIfvdIg6NlpI6oE104jK3KwqlNVnX3V5r3e/777WKJuO6UaHJ/twXpInbKZg7JLxBS9FD/+84zCiJuPAh+3lPAWf6u7+6AY2WCLXER50U80PwxqsBNRthHyQGdXg1C3VQIPkPd5D2qxcSUtyo0AzZr0P8aCVLlR6wlTARLvFgVxFGONj0g0BPGrxgwJ2jYY2zq+lPn2DVLvK7e91CcQREhKVGPnbgc5xOwIYakBiwxis60WOG3wF8inbCf/oAP4rEdhhoXCTvV7nk7hoy2PZv6GMEhocU9RsJKtGAxNd9OSvKnK4JGfNuFiU6+gi5KVBucMxqtuaAIXuL2wCnpUdqqrWVtrIYfWWoI1QQebJwgX9QoUm0TMb8ND/qGACTkAgmBkIM/xPB7sxI739dekbiG5bwPi9wenNE+qv41KTYTExjR9qyD65jcwGue5kRCvFfmxPXGL01rj9GJlaqJZdq/4FfPCqotXRJFKhx0zScNu52d/TRg0BgysXsywsgn6NHQGuPDoUcz+PcYo+n1RiY+OuADb6frEvV+Zm4mfg8CavoCfqKIP/1/fmhfObb6AExaq0J56frtKN4SxuHbqNwe8yAQ8Pb3b+k6w1nyUgdhpZm7VImvn05PqnKyFGJUtOiOrFdsFwHQzQdee6NDnmhMBv/iIXszuHGe2DRsCNJSCUFAw0tnp0C94OXCMQnAm7g3hbeIPYeul1V00BwB2OAHIqw5bqtsjoF8Xfh8yCxEUjpgnXQnhYg21W/kkKkbPmzYAtpXQHUs1uK5iSkDjFL2wiamchS+L5AWzDqbgDUieV3WmlRcUUuQ2/IPJ0EkYdth8znSteekRCYYSHlUQL3QzJTBxbRHWnnlLEXZo3lhszvigGryrxstB4RpEnmi324OV7lb/vQqYgdRsztUf8Lp9ESvTveu+IIRaztz+lsuk9OmdD4z1sTsHoMKW0P0iWEjCyXT5Nh7C5SLz8H3890Fp5WTlWDFp1XV9+ft6fb6VATPjXanN5kLcLBM/KtIq83rb+twV5XlYFLbLfJ4MFT+cfguOxRsVUN5erCdXWOkiVZgH37uV4+SKT+SZMKRGAMnE7+X4n7WfHYydTfch/LeHEP82hCETEaH0T/Ru5uf+rC5BQe6c4iOivIbA83t+zu+lJ/+pGf3XLPWFengbCteMPHMv0ilt4Z8fbtKvoWim2bdgj6NKHVt/CLsq1tIyA25/RBK6P5VmFySID0f0cP0GR8zu9/dgM53SFVeyuXUD2zTUJveRK9Bm1WO5nxwR8g+FnrRz1cHfpNtEq26+CNlpCFKsGuU75/ISkGZr7nUzByG96Yql/z2tA3cpnnVtXqoCsu1oGLb/s8QukcpnkI83Dpo6a6PxBHPB6fKLFkwFasL3sZsDEJ2UEAUu3eLIA+gwP+SRBST7cPZbrXCpFPdJnaEumXIWx7LODDtYJhc9WiYSHTbFzeNkbp1KLIuYZvDBrD0vugRTy6KOMh5lDCs3JpxORIYLr6yRw4rx9pUY5v9qPEj1FkjOPF6WHH1AbiVyvDYWlk+9Xgt0nF1S5/RdCZIPHEVs+9M0dxa9+5wyX6fGRQR3zAtcUHGBee8AhqUlVkjlIr6XVp5uRm+5UA43Ev0G74nssYgZqbG9mYvr1TJRsKkJGztR5rmSSQWICR9ZcaTTfqo8NRi8wSjpH8ByDp9x/jElf8XPdI6i+MOt6LIzqdKy6P9AW/dXlxEozDzbvl6MCG6wbt3gGV7p4mQuAQCMQZEemdnfuQZwJ3RuPDmpzUSk+eMM5qiZMEJCtsksS8mZ5uaDod6bbAR0JV7lTHyym+1vEHQJCoFdu2a3ypSPAf9Ib493tYYb+mE/v13LUGvy5W6w6wOtWqpnYwVfE8ZMnDseuYNvKsLgkolRiFxLtGIdMj5yzaS/1HJ0QCvHC3DKWksS8lMH55zEtgdMh9j+rYoIyFjG9PYpYFBY3EhJ9gmO4fXNC4hvFv5ZAkQADArKOEZeu4JQAweegNuPxBnhcqZ//zkLcAF5OFftwTQZ8SyzKkBCbbn1nLcxgk7U8W6/gbIB/MHAb19ewbk2LCDUKHXNKxu5whh/YiXFObLBXmBxpZsjDJV2bwRPlPbacq2PTAEfclLLU16dootjGt6lt8OAgLUnMVCYMcAX8gNCLE8HxIUbXhvHmpBYjVy2e4wntqXvcx59tLUMfY2H/WFkBwEMXhEYoqQkwjp8KRc1M3/FqGNJlTsesjK9TS4jJBc99UG+txVuYee8rsw8cPQmixq/kL52/W5Hd2fkdhB8PXPn5B5vDuVpnLucbexutZGZ5WhHRvhbAdmTPVsS1R2PjEM4Y5OIGofkEjcQW+N9LDYGo9qOPXralkpp+Aym6MePUpQUxA0M97XO8lmOp8EmL8PWP8yWvT/3Ez4Cnx7Gf8I/KZX3y8IK39tdDDbbP7IFrfrRd8tgFyb08Ft2mdKSbypJ3D/9t8RYCOGKiow6Bo+yMLxpSSQRvY3+2coJsDl2XTTkAz8U7BkO+ROLISazQUq2CEUSl0jqwp+I1bTxo9sf4pYbfWPhrpSZ+OP+WBX+60uht/nbmWyQQc05TZLjNl9rRrjnm+RdEY57AfMucrgNtdmOY1Pgs1mQoUJyKbqaLT+FsmuZ5MKw82adPu4VoZ3WuCBqMVbBx032I4XvROL7MYcBqWMjl73OeghDtlCvSmmYKqUNn2i5udf9Mrr4MbhkJ1QT8vfca3/uqYr7utH4rul8apLE8syvF8thfFlioD65V4lvqQoaIWeu/LttDqUFCrOIyoP27MWqbKseMuY8lN1f4QWEvMcN8pyOsTyqr2kwtxMbqczf73WdaLGYd24Zmd3aGpuM9ZJKmn268msFK0N8YRlIezK60zm1equAg/fX0vlUBPjKahJs2fJchTwMPOo1XliRHfWgnKvB/2rVPEnEeXjeFt7A/wTu7FIh9R80x9xQK5kL7iYrAGoLwx5T16OIzukR4xBHR+708j2xkZsaiKqww2iTDi4nM8uO/sOFREVoQij9pXzX3UblaLS9fgeXgXVdGOAcZBfBihuhpsG2hSnS9EkkrNQ8E+5S0Aw5kAybufLYvwG/4aRIcMm0QApLezOm01WyOn/Za17rChflvdMeq5lh04vNuinv/yqkix6h/4z0LnB8npupivXzG5uAsvtyhLf+J/P/1oCFsTBLDNSKXhVQ3GnwLhZvnit74GmZLlEAYPTSvkdz6ytx3bcybW6M6pG6tbHXywh4uFyH2B6tWe+ykTUCEVedmN5koQJu4fkBRFpHahzzqWJlNH/j7EsEMF5V2CtkG7ffqRzFRtUFHgvcrHHwr955jjiWHRJyVe1CXQbyNZQYD8rUQ06H1XhZkEOwqIGzL/IrjC2h2pMIYlz/t+reujYUR10FIh2yWZk0paPh76op/LZ9rb2LsSLJFBYBPQqzuHPcSA7mKK49mg1PCrpNf6Srom/530KEwkZoImsXv17Wdm2+zR/Fg0wYpcJrz1vVA0xJ1ZL8SlWphZuo3D4kyDD+LK4D3PdCruBzyUifXwHLx7ukeGOLdLiSJtYa9XGIA6M9/L48tjhY/gO8EG6oCqYZTMdCZxJ6XNbwIjNM4vJNvUaUwukMSthrnaYlAAhOAZpqrlptC8I0RfQWNpCvFy9h08Af4bPLCX+kpIwpOpENSpwwYkA4OVdQoTL21djMHrvth9pKo6qdjILWYbrbV6FaoiLKwkOtXNEVdKQXingbuUVyBUASiRNeLPttKtwT/Jse7h7+b+kaHZtIrkPsHh2ToLO6p14acBIeAbr+VF9SbzIRHUSlAs15d9s+gcSq0mRAb1+4a42B/0Nw2EeCC8eBDGJwgZL+0qU4WlH6j/RMF07PA1EaFEly3Wpc1PwUqufQXQvkn64lI2c5HE+1CCfc8oOhLJP/LL/n9pMQdTRVzgPzz63BI3sWIeMnL6NHhR7EIfeZO9XHIaWI1rXasNtZykodH2Nij3rTjQH7afGBh0dU4yocyAwQzIgmN13HUsOLga/pBdLsu05BriAgYiqPxP2BHqOxduX7MCgvFy9t6J44PlM23+BbuZ3Ukr1UE3M8tnevXA/LDeVlh+XxE8TNN0lJSfQTf9vmyD9TKAhfwUTPg3pPkVaeSdU+t5D0IP1VZbn3TrTatcFUe0kbjxbeRKJg/EjQF84R1eM5sefg6hXLpR4p/abyrFkoYe2izIze6kvzASTCwX7a0LXOmgIBwcr3cWrnuKHppKNLu3Nd8RzK+FAtD2NKZIBVN9p0wqzD2U3vMos+QNVAb9g1zfq6UG+E5wvlEaOFA876hW5fC0Sb1tny9sIqEqiSsi5PhRQ4xeY3OAuY1Sv/0Q0fRWMmPR24WDtoHl6FZhBGf661RqUslwLdQ7B6Zy/Ehs10FHK6oaO9zgP4kHf5BERQRwpJJGl+ZrAS3CucvRdHe92E7p9GJ0ZUd8098Ch8N7jg8wc4MoEwn0LsfhqifUt5xYchb3vtS3GvwlWzYKHPZ72cz4dSmQEDZ6dciitWyoudVDVnoSqwLGRI/kVTBc1mTexThab478IbFo1FZuW61HmTm698jAbEROfigQ1GJmeLdNUN/Qmsh7Iujy9Epj6vma8o5t4P3PgCKwm+if8C2Rm0MFRKnoq3QTGUix2kv2w1EPA1MDjqZJkxtfqhlu7hFG9cy68O4K1FohQ5z79vICOZkKkNgMZkxdwRNSZsuW6HAG4b23CNFXJx7iaOU9Hj7O+kmdCpn/rumeQilHJH75/15JUUWhgKM5UZvwp4icPL7xtXAzGsSgWP9LrRCh4wk0DL6U6KFi9fKuAoGCJVxZau14VAx3KQ6BPGdc7ulLaBikaulkeqE2dKGBRj3+CaN1Iac6rHTtl2C6RR4Lp3Fp082MfhGNmA2j62tjC55ZUiscOHt9/q64lmzelIiv2vZHbQ2OUXCcQeh/8eXR148QwRwQUD1pQM8JqdswEFrgd3OadoRZCypo1TmS+IGN/HlKambfjPJRSx8Uw49XYmmjTG49+SUzEZGO25crmtYHPoYmJ1QTeOlcFrZD6Uv2cIw0qmz4LxZktHB62T5WDVrRx9lJ+cni/PRSq+lqCnPu5Vy9EFAXEK5W3gjmkOflwlLXQesvvchBYwgGls66VYLDf6tjKABuWeRLaP3zJN1xmY1ptOOXdjUViG9rv0HWvvT8aGBWAIaaLt3WitbG87SvB6Q4ouog2duHAkFAFun/vPPLMQa7NntRU4g0bEGRXvR4O3A+pWYRMB5uf9zqmyKvtQakrivseNnxI859R/HPJ0pAZVGBbH9n//QXKyUxQQQa+aaBAeJtM++eoJ/X14kCNVqJrocmuDUSOKEkX07w3N/3R+2TBenEwwnP5lysPev2Xdw1vr8xJYB0/gb2rHziPDKmPMuYzpzBS+dNTApVNDOAQFCBXN96G8AeS4TlFdMwqQx5kmgsOXOhay+KfhdGDeO4gvpkzTY9t75fWID02uZMvJTk/Vz95RmNeDO6rebpUorQSIicMgmQ4pYgul0NCkotHYe05j2Ea3AWpTkicT9ulNMuwc8+FWSlo8+2CRb5lRFAEvaYAQCP2EOywWYl5Pfu+K5+cq6I/7B7Um1oA0kz2kiXhMQQ28O0uUXh47omC9XzLv1ghk0ABBAsWOQPHQxIwNrOryb8mTw7mPOjBCclnJDzfh14UkWzc2zkhT1FQ68ejEapK95kZ+JrKPuWCfyPLxhEhKWPYKKdzGu7wUjb1HGz7tCCRlaZUAaeddDYiFtiPCWqqajYRx/WvG9pEy3zjcVjr1Y2hz9/qqRTbNNcBaagu1jSyNWth6M2Ccb4aP4pNr5V7Ked7hpfo9+s19NQBgZsCbN2BzXxlP5aNo7bb2eEcGe6SoOvhDlZiAlGqqQ6By3XEt49sXsDqpeZ/tTR7JMjyW7IjDuiWOkHInxXkYt9Ood0M9ePioi+AtJ1Ukt6VLq/nWC+i3qR6IdITgQl/dQp6wEWXpmX648YMkiuwoCJLcCDLM6lAMqgS06wqYOGNP4vG3nP6MVOAZbrWjiePXk4O9r7xTgc8qZE88/EizTzp7PMV6fLdv4uRFNMX1Pn2RJ4xODTuVnl5/DXd/MHsMZJ85dhmcQNPyJWVzjGG1Y9EFvzKDt7T/IITSOrx7GbJNDpiIguWLbXT1z9aH0jQD4tfLO9PZ6BvQadBjJS8NjzFifisEzSwzGen7rew4CiSyyrmePOwTVImMfNIKdOEzsoy6GjOL7eeOzfY3/wtNNL2bh7NfIhNbxrWgACHcTWcbw1GhOuZZpNs9C+q/js9c3kyBICnH+nHbnKxovINPqkZxR6knx+niI9fScKLhTM9LPQkl/DaAeSwqVxko/QOJGv4b6C+BZAMmmrPLedpcaZJlFeBQ+6z0hajhGkFThSgB81Ty/R6F9k5Ykl4FSXD4gmN60cb4DrYr3a1aueU2VQQNpvpw49AGeICa6spGr8zMG4TRe9H3G7D2a7psmY5nUhVEHy6m2P6XgyKtKcQilX6YNVP15clBNPWzsRj5eYWfZda8UOfBxL536DFgSe5qnOurMZUQkNCpQR+6W6YIHB0WKYwLf947pUWFwZzHsUyTAJ8gBr/rvKtjCw7gxlJVLck7G//yn9ioajve9F9w9cVL7+TrWRh/ZPryhR+P/FksDn2yjgjj6XhNI1aWJmvAqoK60MDbto3j/TKoLjnPjnWKWh5oPdCkkEruzS++PKPfeVCuRP0SuLKbXzbqDzJvbmdJ4OfjJ8tGu9vUCZXRGbzoa/0DR32mRC6djZj/2u5o2xZkGoR6TT0n4xL9y6OTW86XzBRA8KQkfDpCzJ4sEQF/BrOXzu0mE+626e5Rndwl7xMAa6qq6kFV+jkGh+9H8XtP+MWWW0vpfCTmKtAjrxD4L+1uF/DbgiuhMTdmBtYLfJ9uFNQKHsTFkjoLyWVTcQGwcBQHf4tIwI+y+CAocb5ouMqplO1JNLBvsOlF+GW7MthzVh+XTSPkj44ymmRbrlkjWWn1XpRxQzfN6TBqYzrCzWNiVsLOFepHq+op1my99wbvKK6Z2fDWTnDL6PIuCriyh0VuCnvWyHiAihmOvipiW1/z/svdNGeu5zJS/4bGW4a7XZQLgjwqU/oGaknaJcDUmGcawy2s0myEkZCHVtga9GSziFaS5VJPuDxb6Ti8shkWDOB2wveEvVqdXEM5wOEy2b8MLtpv8owBO18beIvV6aeUG7rF8MPkjX0csF9wb9Y14qiMCjazkL2aX4yr2I58h4fDQxGmjzPqxfIvYxhaFDYFNbTFV7cKUFOCmzNAvLJuWTMBOsq6tl2amrJs74AhRQM6DKcgVrfyNZ7adk4DAoXXPMaOI/HtQ3iNh59A9fZU6x2b+aFxBXCQkdSEBrer1cRTN26u4Qj7DVH5EKVK5gdrVCts9nEdZP1oKMB6u85IAveZHjlA5Hu95bMMahEZsaOgoifvzI0dAqLEpbtziPRirOtdwsPdNJm7J5jV1rh4tYBm18v5cKU5LbdJzLNo79VzsoyyBDaSANR3tcnuBERn3aUbvoXxaL1vNFXs3QdX9Ft9TEy4aN2/WSxPP+CupIOFyo+KEUG0Xb0X3N3qXmB/CR+aOtPerdUloBtUCkwzk775e1v6Rgf5GLJeCN/VIMTQeGVcTjRzDWxfR7Ny+hsCavtSizmD9cf3/ht/sESft/8d8XBVnQ5bB6QMGhuSFMAKojXWczgkwG08SUwkPYmQhzuqyTx1tL11etiJ7R+fOZuSv9Hpn2THXDC7dRlgVDHHkJszCZnfZIldLmzj6EuGyvm8deOAyRRkpQgDgPXp8qNy8kj4BYjHsJAzv65MiEYJ4MjHemGNH1BSbGAdZibnMrXxKVQ7eDxMkaloF5x3TTmzlrx6safBfV+kQiBvs2BH01qj9Cg9TzGMbQ2a6NGjtdjxA4ULl3suO65FC12bBtEgPCxkQLJcU9+EWjI8GMvfMEK/eodozWDDgkBIyQZMY4NTrS8CreEFkBXM8Nhfc4a/xggbtiqk3GhBcRTz3MeGdqeSZ2NsNOcila4q9dS7pwDosVPLUEltXoWnvps0TCW89KW2Qpk/LWvCiKXm1n0D1tODn3zs6tkiJW37d/XkRD1c4ptF7mCGr525L9Z/Gad+LuP9Hw7qZzCAc5JHzOZ2m64KfCG/1wdsn2BOQ6DOYtY+2BkLWG/QMXWx7q9V3yjxvd5hWed6meMerCz+cJ+NEA800ocwqREWq8NINKL973QRft1NAMF7Su+gG0bH2bf9xaR7a+gOay3ZWs8pWSC01IimX8cYlz0Zk4AstNw6n4vAAmLNDwqm9Yz/mBG/nxqOioJJj5TG4Pq8Bd//0cr8H+wXctdTo0X2K66Sq3e1EjAh2QMULR3epIQaZLH8MDlYmtDT3TgZEhvJm1tctk/xQprMNeI9lMP3rA1tyZGhqY34d90fzZkOwSkc/nZylDDlD9bORu9Y20aDuERD6iRZcfHwo4laT5upVj6DeMDluk8j1+G6pLSedPvJKJov7a/uQnpYKuw2CYSkATTuIF4fhIKn0lD7fiRABb6odeoQSQYATnohZ08X+Jc2O5JbvCSqrR9aUvvURoUdFRkjP2yY7NUjFwZcUj4eZDTBiRWXDO+lezD7EcdDgnTokVa7tCUy8kZDviT+Yjv1VZFglJUdVslgon/AeS+M3lO+Q0OEpbJx/qWhmCUTCiWdEapFQjj5WLS2B5pMNzTrwPKzoJ902e2ji6nHcfHhwnZtnInoomwmdqCAJMetvFu0F+gy7+pYM67FAP6QryDDtCXFd9yHz3O0HYN7WYOtVHmGDOMg3RLUzGX+82psPczEFHxe69QrM6DA3iGcZRS2NiRHN5nCB7xIw9hZiU76NOoq/EoA7BSliju+m+iaEucj+9/cQskAGVq6VU7kOXh88DRw0ml02Z39LlUioRO56JP+9xCOrfH/gPgB3TxdmV0T+d9Qa7fjFTqODWOayUYq9uHhNznyEv0BgwrfAkX3yhGcpEfIrKBpRj1qBnXSs/zBseuoRluT9yQOjrMNw1N8wK0HCM9OMf/xf1Tr9Eo8IykWVAA0UJ9A/8ViFY2pDzh2byenw1gkV9wF7S+fNqrN24Cl9rTcmfd9E8ac937cifmG1vfiA6wEif1dyOsteqiy5h4x8oPiiGm304RTEjij2b7TrYIvRwyEMrSU4vDQViGKIVtpJviRYYEsyKlxEwyyFZbd1v9Ej4JrL4yN2aLYtmi5aHPnWkkBi5aXwq35pI+4hyLpzdM2KLrSsxn7ZQOdq+M9t+hnjEaV28yIFMEO5bc919wDJ7m7I40L2IPMwZxs2IQDyz7RD1B6cY4k/B+DS+TPmGQqOGks+4nMxYwlVe7ZgDVXEYSQSqo5jv5xIKMgtNby/2VTmp1gNYk2Pj8tA+3F6fQigjhXogp950SYRtYZGC4wmEDTOyy1F94gHwX5EaEl1f0QiFdRhPgfQGdI064z8l5jo6POAsdpx6L9KHECZE6ZlkVb5eda+VXLKnKh1vkllFwjFKdhglxkGCoTT+Apl0acKc2n42IsfGdFG6DlBNnJP6OY3pLoxAB2zcxlfcrLi1O35Q/C8v2KrEa5FYhKB+xPAR+A/Kh/mDKJ+/+mU+WP7eTecj6vj6xtPS7bHeJDQ9rfRsZcFyrnQB0RofJ8Rfw9ePylttK+KtL/lnkyM+RBQSQkID8vvSQFsviFjuJaZUcHJ5Cnr+SMDtqZ8TLD7J7c4/eHE9fEVuGTTGeJZM4lDoUuVXtU0vHC7/ijv4Ac8MS4FZvopLpnzOqFiDdlhRRabuBNclaM8P24ouDM/OQhZzuR+zM96JT2SrngHUARsQvSWtUvGjVrQh33Sz9pebzLlFSy+YIrGVitarTR9dTKK3/dp3r0Wn/yj9OceRPvoAmBiSgUrmh11ogyJrSUw3+qtl3I1heOytUzfINu+sQ/3CmqFGlfjCcI65XidU8Klr5T8wkJ67iCRPcQ+VV6QTl1nijY4sbjPXSB7d+Tov5SrHBC9QwObstMuaTrXaSYEijdDJgQOf4qZLoZ1u+Uo1XHU6KqfXRJf7MyOTes7LVKnTXUTLK9b3xUGWBgY74fXc8V8p29tCbiGvK60XY/XqQ6Jedv7xkyuOaVGOFwZhHP0icnyHmBKO5frvu45g9BTii/ZKWV0lCy4KdoVivDqgaCTJXfCZu1FCSRXwOuyxy2Dmw+E+8EEEgC/A3t4olQ++D5H5U3M872MM0MrfiqrHNx7TteJrxJgYtRUmocliLHTqQDJQ7Edhg/cOWZZ+z8krEfSlVzV0QL4LWL5BEo5DAEjV3CCIgSNVJobTkLCrjeN1jj8TL+7fAnrFLXkeALmLE6vxXqDqKq8kVOeHh3M2JX88IR8rQ+FoCJ5xGfNiYEPcV5i9SuVRy34RVswK++G+j6domCiwSWEW/0yHbAA7nHXBdrjJ9/DBX43izvJ0kMa2lGwo/daCUNQaUfXavSql6fEfm0PE5Fw48Ruh4lpLJWNbC02aSDsEeRz8dVv4nEdFI/frpUO55an0aiLEjesjj4RkbI1N1jQFinwh6xu8t9+NxpCvXNsEAp8dlmzke/0XAZ7qfKk/aIozsTs5+WMg7XQtYN6ALw+CCPz4wWJu/8WGs/uqOgnUBhfUtICqDQrsh/hPHA4MqJ+yGFcPMcQASCTb6uNe14DB6LnLDQfLgCZCML7jWays3UmBMY4hGkMD5kXc0OX2E9ONw40uvjvYWioov3FI0tO88HyPcp6oadhc1f9pTy6FiuprMe4bjceeAeoDw+WaU3rli375cQ/YO9FDq4AwkPMmZV5AilvkggksLVXI4Ya9e1cpv4hAsUkRyBXXvMmGEW+/9Enald35EUUiQXi5qrgwYAnlzphvbp2RgTP34SUWuqgqPZFPqR3qHNgUq+r74Gr9iJD0SqDHK/QVRbpqF2iDeoRxuYxT8Bi7h8w1DjHWcV+hUkgHjue/14EYyim5b65nDi1Rta37+E84ZgtCNgKUGq9SabCWCj/dc8g1V98S6Zdn1UpH8oDcNXU+ed1kwpJ5/N9r1oE+DPN70AHomcYd+nM9ey8ZREWj0Uye8L819s8tht+hZsuxonags4px0V0VX+F8sY9Si2gkp77tMW4Z/KiYB90/b+SpCeMZdoghRCleu9J4FHII8sz6YwKt01aEI/FBpkzBxUz8Ug6n9Qrjquxvd49qE3eS11NZsABRCNkauYa0mIWt1iHJ9cST4LPl61IQVl4q1GDEYWk4GKvrIuQEcS6TOs/36WnWj0wimn5ljdQJNLBOq79HOwkY/A3NUjoTRFRonF6bOeKod2ggMwcCKcTy0hLcUlsx/l8zNtDUQVFpicp9lIk0x0CdS2RF6/xwBJK4tGCRO9wR7QeMT0rPSyylowH9n6SIYgjwz7fuz9rLXqORGv+fAuL3j4Q/8ITCtNPkeo9GenpL0Mceg8u6o4wcZw4Lp68PD3caErhgdlRhgd1f/M4ucnJrU6tCdP91R27sEMOlRdsOzE07a85sWybv6+6xbzdsS+ukWqOXCml3z9pMMV5jZNItaAL1ES+FnvHNAbOU2II23IWWVIWFVix5x69tY4s1KaeHGlO3jIC4tBm/C7MURt5Z8hIqGlrkqfh0Hxh6pBRF6GSkoauREp+VcxNSbFuenxhpXk9LzvSKtF0jf0zYnjxo8BSR7abNLosnsbVUvdUIKflmKCxQoZpD14HuscVTy7/RPE43LNt3g40ZB3rR6iOphA9uOBMHSKbk2EZqUXZEeeB2xMHCW5UYPQR8wsLw+nxqoeNHwOuNlQMPDmSiTtsCbh7cC+1jIRlft+HnmCB+iN+tw/f16Yb1hw/19tC3cnL46WibgYUe17Mt7e5SQbpc/ui45tVMb1ImkAIvNta2cB+fChsSjTtaYa9IDAMlfwbbaGBnCpI+6reVTAD4G1ruTIhcsD791NhjMZus3QxMvD3/WCx6tCZ5GikxJRDTrrSkEPNMaEEMagZmwy7njF9uAZFE7Gb1e9Qs8SHUb8VEMouZ1oFiU15abPw7dwTbW1GwEIDkBQZ4joBAapFmJMXWsREu3vkBynY6rKB8h8vZNtQ3im9PnGuIVSv6annl34JLnIyuHcJGXboSR5tXayjdApIr+lTL+0hMNRTFXLdN52IqEjL8J35LZv9a/LbK6AJuyXq4shHS4u0tSIPCrJHb8WRtYqNHHwGgvJamNjlN8zL34hWw4BkhfZlk0gssF7ztn9Y6c1nB7Dr4thPy1UXYHg0x9tuRl1/ACBOV/RKRF9IuOFXj3aNcbq6zuaG1F/ysJfRk77apmjiIFNa29x2YjVdiXmr8vdiAT54NI0HZial7SLz73BW3jRZibui2mJ3CPpzOTCRFbW1YQEKakNpvEp2zFPOkoc6tjF/SF8CFt7uSraUX+1A2PVKwaoL9oA5YRuz8byTQYsTy7xoVEoa6O+K7R8o7v7Pedf3Es9N8ktaWc4srAusa3u/1lKFRfQ0Boc9Nb7Tk9sEg0sat0CizBlkduLw1WmCSjfbb6nBt2YPKmUSBTcMXpc3E4RPkkMNVdOnRwzRtDfxJSOiZJVYLt7aANblLCV8sQrio1xLzSF0dni8PQDnzyK1TjDQgRTHfOA0eL8oCAvkyZPz3YsGdu6/SIxnJ798dP8fAglWiJNZoS/KdKGxY89byAf/7I668MPEkpEOUp0wXmnqsp0qJfPDJ/wjtWuiIq9SMQ+QVP5cjJ6EHpk9yK67p6jIitNR+M6cL1CmspYImnbRPeuLftehFI4E8nhC0Q0mHujpVF4ECINPXdGUl7W2LtwKQ9l1ZL/MZopM3pTss0x4DrQGiMc8XfKmM3gplqY850lrZ+it52ZdIKd3O3D0h7GkTx1eicjD3D3Ifqhk492JqZTf3vt92+8Q3NtjCqBwxWSfMxSch7BfyfjChR4zsXJKU2XDD1eqh0LjCJM3EU5b+vOA8BpUufPMVhUNYsfoJUtee1df4LAZscmkTjUZOGA5HiIwmDfXZpjQQF7YWNm4dxqf+ffMtI7nAX/L579FF5skLqs5GPU6YhtG+RqVGCkGslyp27/xCNdm3fmMLd/u94dwsk8W9aN2GRgPN8lCfISfCn2SY5LDKff58eKl1A+QtbWOhcQoQPcAzSmVc9xhhBPRKneC8j/lSD4lsUl6o5U0wktEe7RgltChlO2r4h1JTJq9UvQELn08+jwTfvHhfyDHXkJX5oz52NvQDYktQHdkEp5anhJwytlvSUscdVf4kStsViWmokm5hd3BQYhuY4duzM8/itAMybDK1vPgo+OsgbXxoem3+t3wMUUPa36gDnnDwU5yxPTRD8YsPCi30ia7X0UC+Vtc/r5VIkYaWyCS+px+J6SoyjA58Zwwcgqh+Mi1isuR5qmjBzcR04W39aSPaW1zoJRv1n6hVRuoZCuwz/KdVHjMU7k4r5TJlR4HlPfHUmVpM9rL7UcD1yxr84xk+sYl9YtVDjI7y16PckC6x8xrzYBCBRz+D2h3HJxN10y4+y19I8lY2k+zKLbioog0nP2yzWUvpMjBR/vUdL4g43GTmmicNeCy3J2DO/eSbwXcdW41OMqJ3NRZMgMe0y5Xn72mgQ39Q93U9SaKCvF/lAYXe8UIXyB6SvRKkVfmtabeVOzcrpEqls9OnKufRCLjLE42/UP2jZF8VjV2FwPUMimTqbq6tdPT0y9MTLxlrQInwYWWTTuwKaMNvl5tBo1Mq5LBbOu86pt91SfHSmjUeE9hnDrSZnz+AEkJVH8KRe64qVw3S6t9ZGDchOdgxgh+gJy+/JwiERpv2PsSG+mr01FEZ0tbsFE+C9xM3XT8loFaoie6/l21gfFyDQJ+UdkEUVwF3utcR9ZMeqz3MGvN1T4vkNxxq7j1IxgpItbH1VeTr6NF2IiGLNqO269Qlm/y0ZGHxIknwK2P8ZCeixcR4BHxplYYtVMICqhd3alBIW5SpR7uZYnbpQ63L9VfC3LgB/K8HilanOscHjLbOeCRsE5DskRY0nyvlSpKD2v7b+ZKRIAlwaWjbz8rZb3HFI8Py/Xl5Q00BTQOrm0v+uRUcISkAvlS/SqNd3K0ErL2ggGCY6EwHqfOulaA3UlGPOfQBul+vYMIjbQohnu196JQSSl7W3SMpWLjmUEwbdDSU51vQtSVMRllOiJ59+smgL9aPM3jdr8FeJlxff1seFfdk1c866imZztN2BSdl58zfo6vgzfScxDR23ksKDH2a/qeaoNgTax0MIKUD5g2QZx8Iaglrr6qI8bSpkCa4eyj+j/iMVEnfNf3QRkDqZ7RmvboU/54za+8KYguTEEyKqogqi/QDegJoiZ4e0TRgHzCRNmiU3tzEqYoT3ntMxIUpISSdNwA/JJA0qzJ3PjWuBLyDg7QTQcd9GVRa1oK5TlvwNGfx+J5Aq8t/1pV7Euov0tKUosMYVHHxx8h8miJF9IMMjzRP4yD3bMpZsNQjLX9O+CfvLbqbSIxhJ8BafdcqEfiW2TGP9GKyr0DRT3UvUiodoQTvvvXcnjeYB1aDC7HSCVkf9wUF5/7TuK6TqaHOrH+I9Fuf87MIRp0t2jCkhbaQ/7YuROZll4jgxDc9H2mxYaBpasO+6SaY8H/Gh6wu5gvUJUuMuqXIasb6lAueaUsDpmo1SMfWMegCuGevcdB+G5RmP+Hn6PALw8wbtTnCxfAp88xLm0LRVfOPRrpnncYvbu9tH23vD7D1eWDEZRgN5REuo+naQcuvpwtaz1V0PjMHLSIoF1USfXcedHULKP14CExninsGDnTHfF1Ligf5BSGVsl2esbTdbuha4m+b6HlGMLWujtIMv3GokUO+YojtLM6mRCkgsOqTeAb2Q1u0J/Q/O3QxkTfgiyJhHCvm/vBMaQm2jNlMI6hCNMHLnfC3BtE8WTUu35KueFyoFDlFnNCxQwA+TGi5UYygLVHM2o5frHUDtbNcHZIj1kfB6sUoghNIkC3dDiWEsF2yz44DwNkxAA1Ib23tzWggAyt34WMowyTxhKzXRWwRBdC70P3qpAcDCIeEP/NnvQzcZ5IXYQDWPhLOJnfVITZeBN5J3LpHEv+vqcy5uxachoFd8vjHtB1HCp6MOzTFhO+m8bliA6Lz7mIlacsczWX+wmC0T8+OxzfkSO/OcwMnjlBBmpph+j5PiRCS4Zaq2bXQQR1CKs+qK0R9NJN0KFdONKMd9rJfrb+UujeRLTg6fvPQ6S/47F3Y76GOEf3Dxt6PYyxKsKF224hApPPrHUlCahWPxu1d7Brh/CK1beJw8BWe/dbniNLbzT5MKJvscQTFMgm4DmGQ7AT/d+/rgA2cMIASicLPI4wPl5vhRPOqghNQouAeVtIvHzdVMtskfPtkY5KdbREpTzg5vWes6zhDcDLTofemRRUfdSr5ejMSaz1B8TuhzF4jBRh3KObW75988gpag1rjrQVPCECsUF1tDgor5/HEW2gnOgxdyD9XstKNelYxvKfqbDnQvLMZEXFFHFsxKK7Nlohl4PDkz3EMb7IoNlTxUxBQGm3iRvANm8JNSrbKPzE9EnYsvPu5SuBzSt8S7Bzr2vNFuriJyAi2l9GnLCIoL05rdJ85ajEtjBGVInbEAyB37Qd6zlrWShQuaTqWlcz+/NJodss9Wth3QzLfIqgAl5qDJPw1oBebg0UjlXT8r2xUgxXE+TYcwHqCcNcFdF1jaoRsOTX5eUqTpm36VvbT72xr6cZBF4QWX4+u1lhRCOQo5zFH9gvjwqoxBHnAP7DGCuQMmgJo9cgCPrhpXR2BRwtGKZXf+mHBUchV2v1PItILT6p8W+B+IBWh5uGqn1UkVzgWRJGvAbIOvyG7uFR2/1pNzUp09+3UToRHch+WSMCo1VXF3T794p1+PQHGpzzqEgkg9iFs9ro/h7FqPvC5aUGBYF5Yf4QbBDTC72pE8i4XlXTSOAC7mGRUB/Ib1hLPtDIe7iHZMsPY6TeTPHewCYrqrj0xYkL7AVEzV93E7+Un0diAhJf1Vp6Ye4zcMd0VuQSNnr05+96IVHK0xO+2CzmfI1H7TRtNlHfs1eK4jsq+jQvqTkifLYKoYKjzvr3yvHf4fEDd1eNhFlgEBU4v8c6sB6yjUmfr3pl5UY5ksLlBd8E1geYbMJW8id64wJl6E9rH8c68U8grGZituc0vhunKsN+i324gk3Pc/S7gB3xWE9aZ7Gxqrm/5o/ZzkJa+SPy77sZIhJuJM28KjNfX4IATLmvh1Cg23oytkdjJhyauVQUL5umG77+nrVm21Fkhv21nHRXW4GbPS9uaLP3U36VnDDdbKVi5856I3ui9xLLx/K7Hn64hj6afMVPJMxF2UPrntvwzPI+/6fNQMs3X1H+U6JWKpue0ZELPfq/CEsEdZ1l1qyRJna720jWXMvbXC5w16xuXX4ZxyEJdeLVLiD4+62kyLgyM5kT+T0/gF5Y6KMisSAIoB73wZceZl3444o380s0u5c5Uj1W8c7hPqBk186dvQy7jOqJBtrQV9BgEn7qYk5IvU5VeewZzGk189rFJq/pimkiUedVPiDsSwHnHi5NRptvnwd0wX8uKmbcHBYLcBkSp9QRiYoAA9i1xNrn2PK8AvdF7p4RVDbU+U/MVaFSZ5pM7CxEVxwd9VJoLZmSGv5UO0jnCx8cK9S9cqawuHQE0O/VjNaDbNhGai8IaN26nZ+Uk8Y5Ug8epMqZ4MFupF46uwaWPACQy+qBYeVbW0hojrfCBAExXhDlT/iDtEO8wIB1pYsQYclkOYM/2KEdnm0ajO1QN20MkzDEw1+IR4nWNYmJAgiDZB9XTpQ6eVmUJofVoMvX3+Z6nsxRY6z1HBEKrefWWdcxfNxUBew2CnjXqnzzC/Z4YN2NeTpLaQkuKKrqcq+/YYRsozQcG0/C5PcZNd7PFZScTCmjto7NGBDyqTqx+hJzdZ3YkgYSCWPu5itghB3m8JgLx1nV8oGuCbOMCZs90VonU55/r25yF1xYVXlphyNQmOQC43pciTdyG6WEj8TDldH4GKQbBIFr0ueVV9yPSOBuDObmvlNke4t1+keTq32QwaqZizrfUthAZ899f88yytiixVICl4PJ9BZkH/wfIDaeyRYdoK+hz1NG/Y1KFK5/UJgj/g8B9wkp1je67TvAsm1mDVlljFdjmjJEScSFTN3yQ0TZ/7d428Guoh3VahOhY5G9SVX5xSnBiNIngM9iEKT6ePPp3+dbMgouyIiPJz3ZBMVt2us1ztYznNlk6VrEXBZbUErJrOH7sMuwzhwUOdNO/mcP/ueiHImVrgqVGFAWw5B5nhj4tR/63Jzrq9iFy93594py6q1ISlsRLTFl+MfUEldtBdZK1Xvm5j/gepbUaXFTwEKfI3dypIBoh/GyG/cFis4HMzrEqM+jhpxFqiDG49An+2qnGU8Zv6kQOq9Ypa5M5PUhPNHI+HuQFYxKMl47IuE3nZvOF8A7ofqp5DKkbxZPa4fu1P+Z8sK7tsvhcbdkNXZGgAKeNDIJRpJL0o1lqwDEVkWDFwCNm87mt31dP0fp0ZQ6U+2vj/pcBmOsl5qaH1WFlH+7r0viE+OdOzn1QNFOQ/PBIsr2Swbi8rXMQtAzCHZsOBACncgaW7aK2avAkMV/0yGWx5a+FFG42HkX/DxoM1tPDOFEJYxYVxUOIiZpHnRC8StpLxi4XPsoGcvhm5zmr4xjsnTuMuUzXbPbgkr9Xb46EoNMwt5ukYRBHApY3BOjNfm2eEkVCE32nSEFDXSI90HdsdU6Uhrwxn7FrMaRezBekI+Ppm0lgZCT+IcnlF9jkukM2P8Hz2Wo54DMpy0tuPS6RVkkSQmBKCa8zbv93fI4ivByPXFOX/DZrC3SUSvzx3nsCtnMr3BOnYCqiV8jOUdKegaX0e3XxZdrSRUcbcdvmcfHT7Xpcc2aMrHm+mhOdSw+g24vtdBGjWc5qUCvbTvW0AqsQfisEVGZE63GfvOsxPcqxiM5r3oaJrefgmkqdUh3SJhNtfVW1EdrYPZShHsVSZrF2NhLdTPsyCuha4bbmpC9RKWSg/DXTdGSt3wrgnsBMlcB651lk8d5PXb4UrvlzZCHIen2qGIkmuQjO2CNt1l8zNzVe95oBos2ou0aDAiyvQX0ca5aA4+5MbePUpNYWLlehgP6TVpdk0bIz9lbLFhaqiXQANeJ5T821mHPthgt876h4j9lND3b6RVB7GBRhra/V3FgMaHDYR4uzBkllERQ4k4ZEgDMpKz+/pR6T2cJ+HybXZeIs6sF0lJ/Hhx5DwQnrkB5S16Zxboz+YcQrtXG9kqDRgv7PNyNHYI/ausVTcV1L2rBIQRHdPR0EBcOgRRg1oGWtJZC292zrDT9bDNk5Fj/ZTPs6cjUoMGeKzkqKno1Da3o5/au17EHVoWln1ptszjf1SkoIOixGBXmmxOoBkGAIxwWpRS65AhsO91n9uQSKaO+P9LgfVMT9bjFDujB2xcnHW/EwxZbouKll3ZGv3Vzdla8eVZBLjHU9B1p7zSB9MJnnIdp9cqLDf7bVs05nKVxHvwdXX+lo7YApjibf73JGYRztn/fThoWoWSma8gvDarC49PQB7T3b3hyU/arHFq3pGHd3YGUu0wkBN+MFWHBcTl2ByZ1TZFQvpz8OIETsqLrHCVSUxFgUDdNv8hjneXGiYvpK6bi0UYCb5WFGOFV72i7lVaDIdwk5jXqq8BzkgsYKdbb2w54yDxPJ6kKO1SUhkmVLoWw9LT6TRYpik5hzkraCkRyKjcoHMmXehvl/pL7JYT8crQzDK/ky49FlFja35IF0ZiJWNh+FH7/Sw3G94jS5OO4bA/OlC2Q7BfIlsbgw/oOJRK34UDJKDKmXqzogjBAbI/HUOBjlz+3u3C67hGnTne9bhrub8aQopR9xRsSVzQd92Wl0kCGcK8+bmzb6r3zitZoFQEzEBfX5dT0Wk7A3gT16e77JPmoPhkhQTgXN/luh0H2oNfY0VIqqHCpoRGx5j2gWAlsys4OmMkIjjSc0UkSruSSutTkgKoKD52sY7E55qvUmR5B4hUe1m9U2hZxvu2x93BvkVesWLdR0S+2OLvN2JqI+TUn6kpdYsloeR/I0iqP3qOXvTxAgIPAv06hzP0HpLwGWanELO4ITjD2ku5LW8ejV8qo7pqQGucyu8gS+ySBUmskXkwrW0M6rjwnKiqfpAzj6ETH2rwG5QcSmUCTDZE2E2+LSnaOYTVgbQTZdpN0y1RiljBhyptyJIsWT0dzFyF85mNc2ydo+GrMl21deI1c8gmVgHknKGvbSyWoy8P99+ShMAd9cPXyujlhgoBXNrmU5ye/b8DkxAAAa2d/03kN8BnmOub5mAaMtyHSSfkmodmppLdQmquW6qr15AhCQovzDnsAolxsFjN3vO5qex9reMFqrCSR9tOw3i7NwXrbeKifFrU+tUUFBu9SpLV1TVGSI0/zVU1OprMxeCIevjcL+88y1wcvat0rkRsj2hC8YAwuTgHRPFfGCs8MQafFVA4mmxqrAfoYam6txQjRmAjNFzF2zISkLof7zw+8qNj9/MwLrcn1St5GcTbvvIYEMHvUGdRNjwqF7/BtXB09wzcUfWgIY8fA6PTw2GjyEOs/miIs2YnZiGn1+MA96tCHb9zlMlMlWwEtgjJAm5WTzCCBb2Xgw0I3AkvzAV3okFUoIUV9sZeW+aUnuBZLI64/ZkHjkI1EMvqkeGnve1nmar/1P1xKoNBCOFTgDAN9EFlrNYcpuLWsZYaJK1RL0UC8I7kRDOzfFZr7CR8HYbCFxLAngGVpM6b116utdh0UJFPqs/L87lv6Z1EA5pviYhQ7Tld4JcRIDxFasWXifJve/rhR1gd9i0MgQ7dPs/uzJphtvFTsc/Ob2aOxc1dV4mX1Di6O0Ef8NK9D8Odx57LcXmThN/BeBonlrL6OszZVKFN7Zt/19G2XlAZol8dO9tBIreI5NBiqsYDaGUH5Y3m049XjOObD6Z7/X3gM0NxD6+xfVO/WkNcHq5AUh6GatLmdm1wmZfD3iejQrXC5pCmTsVBQOx+bqIuWi98jLQMpHp0iWFl/fg+Llkn8iYozcGmLqtBhwv5YviiLfVhPJaSULfTcisUEos1PFEoS9vzSX4hdNHt3r8AAEalgkyNWfwGESPVBCZ0Xn6Tk1jMrQN1iMwGK1SdvGEz8NSIb4RjHgBR95UjUFmW0ohRFerKc+WaNal+6MwkMfrNIU8/sbCuzgvJW4hcyoZiKGQ9/eK6l9fzNIkcrcFzNM88+fX/PBiNqNsRdVO9WKBWMVgNTPNFwXtL0o7G/4FvLx3cQSufWUS0ves/JYvL3OmRJCsiFqF5fgpkK+1S/FPCYNpTCRnsFyx4qZ1g4kMYwyiREGsayZJ6jnUY3Rgv6N+DCds8nAzCrjP2WvdZKUO1wYRLaawx9i8EAMOeV8fadB3jsQvQeqrSeaE5SBhXYGnPAcHuFi3ukxW8ElUDpIjzRsMeag4z3klX40ES3i1GmGfTgw+ANeOo7k2hWUmqVGzY37LS5kCMH9CnoCnNYblYiOHLP5kpALcpuqH/+GJTSAGP+rlY8uJkygQFCeLVVC5Iy7G20Sk5cb+IsjygtQpJyTLQatgNZvKGAmZP2Ug8xwY9qnSQrrg4KDv+TQLO1ZeMMRvfiRWOGraTlvmuYXD4YCOk2bXl9OA6JrQN42RTZ0de4f/iVKJg1oBN+kZd/SDD4yorStvcAc+9ZYPvv0kLNPUPU2Bs/Y6TN+7m+MAxQ0vNDRAbuSoSrYvHKPIe+nYrd+ilI2IwyGGFApwKk+mqFld8YRGw0/NvwuU1l2r5ErGJIzb5i1XmG5MBFYx+JtLKiPJv8xc2BNjQ0q5FTnJdraboQJsbozIHCBUlFWqcYGz5yqGIk5WrUvo3mHygUTFaCbHjHMaRsWfGotGsCthvGciwHF+5ESEnIvoMJnvl+W5FyUs+PPbvvlCHBJkJmwQ7ifnr/PSWX2M17Kji7nCj4HwJ8UlKK7/krxiwuTNqHPSd+e4fO2Tfx8cEIzHR6h3bcOwqGJtRMw9Vk2RMRBGBDkbUg6PXT1C4aCaTJ1ZVwnSaosWDIJI/owltex4UMSJyML0Gey1ZE+BOAPt+xW0D7S1P0vdQb4Y9lU/90ZgR7Kdk5R2bCzmEoSgy7WhR/Nn4FA53aa1rSnj4ZAz6lxItNYkvxI/XMS2dl7fNLXLmHvVafnV5G2M3SzRik8pWvHZqJVDJt2nvPN4pTXYT9J3LooJH8TPe5YVO5Ah3+jytuCNS1RMHUot1HFEbJBOmjo6n8pQmOFdxa0xNYHXCERsSv60MKy3Jjir1H0IHn08Ut7H7xd5x3ORvZoTgxmNNqRZlNXSv5pL481287qkoE2R7KZwtQqsRAhxw6ytV6x/g8k5WlsHNoKCBAIBCdLxXl9dn9J6k+o/Q7Q+woaIrL+vLdylSdhhZf/qee9Boqcjk5UBliUVZxGwTQGcqELtn1JgfQZmzp92SO+m0rGZISoRMIWU7eUGfAO+81y/dn7LapCot2PAe2Mn2yC+Awrdyte56hKSWwWf3XEtjZT+SFPMIwoBTmGHxs0PbkkR44JU3RKS3MBhwJcf07F97th3H1k9EBuNNP4Q4Ur5mBMQzLzumzmL6M5SXEUmtTjUY03lixMJJUfiOF5aGYLoUp7JXbfOtsVVZZr0YkoBvv6nOzs00P5WYt/jndl/MKoeNqTGT+7QOfMelYI0RJUkq5netTlYjTuqhBYunoReWKe/6MOTSdLBrfiFdf4yiv3EhfoulnBe+o++ixXlYFuI0l7o2MqaHlFA5O6T6+wGFE1UMVEPL2fjEVLi1Cgbns3uCMb99uy2Ar/AzfRneyTMVi0QS1jt1eubqZjsXdxnvmWP2aGacOR1DE4lHQlaCGe+ZicSysB3uPZtGH9a2jbH/siYX68aDpEasfOjQorC3kcVset/3nLb+2jPWbFC8KDzR74omyQJYa6GEXrUs9heQf/ifpFirLPpjuGXi7fr1M8jb9u5Jh0sJmIicdT/tYWoX9JG6WCKc7iVGq6zqGN5z7ku+95AzkoRSJu+hJapW0IIZsM/VGGJohaYND20fZAbN/fRZy0NgokzTWwome5JXQp82k+pSYkmyfs93w7q1pk5FSOL2lCgh0M6S5PFvpybwJz3FMlVJ/2VFP9t+fKu2/sdpsS0npWwE415+/1hmNPov93+gEgzt7qn2WP9wjBi+Xqz7xImgDkqu2uv9oSJAT8bJqVScinc56c2tjXXv8EwvDbwE4mSQY2nLzo3p3qMrAJ5jm1/4n5ovpjoePdqJv+0LvMh3GSYup1fB+GTsfFL4xtykRyuhBdR6AvvkpqtNX431j+Zl2+k+2XEN/OJPbpuQD5kRHQTDwptl9GxxtYkVhRkeXIbo6zYZXIvwYHuoozMrkTYZvzrgRhjyIkjtZXE0+eM6z/aacWgurqlAvSTrsdRoKWtQawOVFEZYJUknohHffUcOopAXZGAqh0Y4Arq89YgNioLlUQpOJDq/ylFyhn5UkkSSpMCeYMzveuG/7MmIp8/WlkE9YTowYl1kA8KnyYs5gLGKL4gqI0SX7mbBY3DugZ6BB5S17t7VEEIY99N/5QBYu81f5WclZUoHmBs+mAVz3g+TgBUOJX2o+Gbtg3LJySEvB8fAvojZGgzmp7gJJU+RWYyhgMOq+LtJbD8AmLRtkYKesf2jJHJ72wUfHd3BHsqhS4kX1siZhd04uBqe90UqHQpkJdBMD9ku/oZ5hJ1+Iox6ixEsavkW/cS8aS6sdry7CR5MXnSe2kNCxsN8/y47VJPO2zD3q2bClWpBi1el9ZgTyYSFZocaynZBDrMvOTV4pFY11fEjwsAzYjjUCA352GIE+t/hnJQl48ZN5QAd/TOwukTrTZWy2LW4wjVPq7oiRs9ZPR4iUhVCoDOOoQXPhdUPgR0vcG9lGnQtCS3LB6D380+FMdCAyd53lkv4inVlHff058Kw/p/La09etAMQCbxEIs3XkDiWkiCPOGYvoQOvt/JY3/UWsxEnEfLlAi9mLhKF5Awyfmbts2gw97xhEVKejq3AVRL/RBznC3vJqSycl41gMgv093XsPhvZb365KUua4mxwLlaDIescgUmc3rVIEVUcfUVEKRmXXfgfUzRc0oxV05qcRVO9HsnrgtWmye5uCZyjHkGq4nqTrf18K22M8lmBHayza2O89mzECOJPZmRKBRCgx4L4ANG5ncMgf3pQ4h2gC7Zd9DvsKYGWDY9eCviRlJbT1OUp8Wt/DG35IQicfM8XuE4GWYl8imy9WuOivlrT2Zr93iJ58HAiqPRvrcS5+T9MVY0f4Io1ehESL856LI5GI2rhoVbuBU6RLtr7n3ded/Au1CSZKvpA8Rw7BnrE6JO3RBSfUn/Os9ZFC1xcR4LkBv59G7G961Aqi06LcqYXJbpQu5cilrUR54Vapb2o2bYGb/6CXIMwd3Q8RPxLDy96tUgp70NLtwprWeMffTqXITVKFfFJ8uKhWMWG2dqmUzzbjgneTdh64gZ9cIzT/EZCzBafV63lR+He8TUggVUKn6upjwA9p29wHh9c8P8q7S5OMBd30zWI+FRyeNgpLV2H+6NV2Ole6PDJAVDQ+XeKuQqF4a936cl3JoEETNLQXRd5S78Xr8svwg1mGNcFeWHCSb1doLv5I3S1xfcTbNTd5bB++djGBP7/z/J01xo4UceGKgPr86qAJSw8fFYejRzvvnXlAbS1rWMEkMgaiB51/F/MEtEJ0nskIjEmKyqFIEB+eFNpMuHhiXj+kvJ2AXT09NE9u/kVS1fwsOdA1u+lrEsTV2L4dIyiNhmSr5ITGHi1nfiv8tj6bcDTYAo0kxLsUOhMUGmsPZX1mx8w+V56p6pTIzvHaTi1kc6gObcCzEXPYlZs/YjutS6/LNSk2GIk3piRa/MlvzF9PcwSnUdh+20csKdFD4QNhJexEfCdFy3LMzSpMeVGaVVrRwpjQW0rJ4QlsKfnj9mShcBXwBFaxUPFWNPQqXq7TZTSoEk45kT0e9GzOuqMUzGpFP7gogkFGsk1aPU/IdfeRRXlP5Hal2yeB30nHGePtTGLFDNrBRpwsQDDZi7WdxTRO/2AuE+3tyqPqx3LCeg//hY4Y7YHOueR9oQ5UYG2zWP4CZRdtVN7UhtaiXJVN6V5f4kcgWzZRZN/pqUM41rqUK0idl2ViluOfHh3n5gb3K/mhOvde1iZy1lsuCMPphZ+0dgle4o2nMZtBwRMe5xucETnKbXS6iSWgspDVC8jiXLzjgs+EmMkIxT4t+6RH8vYhGOLvyKECjJiIf0co/ChpCz54yVpTfkm1OXgzKaws51INkEluM97RYBC4MPROJ8HQGUUzW3/EV5tuqMHzXmNv0vU9I4JnWqyEJN7WJG4EqKa7p4FcHv3RKPL3n6Szgy0xSNaTQM/DWDFtilps98mEbyAbN7O629FQMcL+7n5qbzo+IyEP7A2V7RgCfzoCK52wZhhx04uu51f4D4oXOiP5GcyolwmQ8F8oSor4TkC1HfbxjeD1Q+BMxhOflDc/jesQ+SyXKgWrSHHBPRDU3LJ34+GSmcVgAEJTRhRsdBgkHVs426mEASNyQJiyEvYSMUEF90s1zkUpbwarCDoAd1b6eX+DAIiaBMt7RfmfK1yXuEOJ4972bZ0L8dMbvfqE2q/FQsJb9z++djIE9ljnF98n0Rl6x6PwOYKIlKfLE67ZsAO8jBz4UhSaiDFm2bzKBSbJyVjopJwyElrJwJzyw4pH1/92mxSFmkrUhs2yI4eAJXwrT59vXhGMndcwF/92mlzgCaLQtoruJx6kj+tejSK6xyetmSZ5sznlLT+JbBcep/FXlhCwMYxTkXLGbn1C3GLaO7GQEg8xrzHU1ytOYT0mFQvEbV3CWw0CGOt5UU5Ydsmlpnidbmya4RrRPqEcyoGdTplg6w1mrz+Ni+qurwjc2JVSeUFNg07goSuH0OGW9dnoJHXJsxP9tEeeqS/GjHM+5TUtbHVjqXGfRhRDvB8XQw3GMeir4egpagp2j3+mRb2NcB7p4vjH6E5XO48Vfy2ab8USVirTMlLF3RR0F08p8E3nsoc+AtuZ/3KT6kl2AXkmavd/4ndI+P7pEY0kXV7QsFE7bEbsznjEE0QfgpYn0Hz9DMgHwhAZf6YdfmKK97uCikX7XYs16cPyw4VdfOqjdrg3sX51y8mj2zjW/xmj6tL3jInZpaiRgCtgCDVH28LoRwSeJhCnCr9xnQYaGKSegOqp2JGBMrLIpcRyfiuriYcawFtRI79K5yItO+CqjUDdlrNOvVa4VWA0i6eekRI4qMEm5PuCNt5HGSsdQ4D69p9BOcm6jZ4MEttRqJLZy31iRXTE9vPJ4OaXG/EURlwss6q3LXEe9Qa21dO8/M/Nb1RkvAbig6fh9xPRdDiSyDmeN9OL8HmtAPf3Cxok/pgXbf9ZKXHZdDg3+K23F0pcchIeawpqz29U4IPiXTklUewSJGHkXvOX44oDDPGl0S/PKiFjxrfseAhAu32QafUsT+dCj8tajaGUazgW6URcbn9Ya+J8rFya/HUwnln0bhjhuf6BXrh1f81AdPMnCdO+uZz1pC3dhWYmr5hysX3E3o2g5Vn1AzeKOGzUck9qhpwLjslt/9IxsIG2RVx5ViqiAVmd1cNlHZsPUUyY76A86kQzTtzquRs7HaG2uSNl6CPE3WK48IiKtqMC0LuPn2qtUQMXSqn0qhVMLR+8PXDgltaaoenZxVTBstwl3kjiGu5xCM1B6owc/BtAvG1t3H9mO91DF19Efx+EvugvHE96dswXSxYZiBdl6xP84qPiTfgbR15Mkt4jrvMXgQz6RGl28dCcUJ0LWavwJJHITiEpSrHByQlXe6MVtNGiImP+Z+j9cB9LeYRyh0KQVYVcey/nz9NDibpRfLIV/fCJXyktu2buEzPQnGeodF6hjkOMnqsGEX5CVs0UbUP9cdn2zKEtIgx1FEfjD3bSGw6n7tfTqtJtjOoGleq98btFiOiSJu8r4WWZKMxgAOpjo9tT20a1dF6uWVA/ZpWKPMLLvMo28H5lNaI5P0SZJaMpQp0ckdQQSQbZ/Xgqnw692xrtkkhhApulOWxXYbR4b1gpw5AkMcT9aqp2Fr2lzIX41vSpQRh0R/dEDt8uvB2G+FKKFFdK4THx9skFwJd484Kmr5F4OtQvwINN6EpDtN7RydrlCze4WbU6TLrhp15RssRrgsLvQsnhddtJHtj8s+qDKOsgz4GcXihYYGQhZ6sTaW6JV1sGK0WJZWd6Ru43FE6XLdExPaH/G/WzhlE8BgUp6d4iCqvQS5t0Hz0ovH3NPlWM4kHzEHZrsnL9quyvvouYFXrZL0zRhalstfVy20K4LBGc4CrNgH7PJfemn9GL6flD2S86m0ylVqD5o4nwuCuO15cD3I/dkcov2r7TtG74iKKEsuS8VvMFWxHvN13J9fu+imLA6LTV4fPHSBzmPG6htwA6lWtbCbop0+aX9BsGqqXPYb2diORURG+MxanEuDWh/GzGv1Lwx3eHsJHU8mcNQObw2UPLAwysWMLdb69cv2u5TOD03M2KKP3a6XjyoZK2LoTwfgVgNFhPasHRmvAJh71cOTbveC3KKPOKpbz4Dx0BhuMDxTD/UCCI68b9FNAWlmimzuYmrMqEjwNixzK4XP8xpeQ2EsNOn9ifVhM5he6F/uiOxe/RcjcnA3Mshw/9K+4S1pnu789y96/8kqSWHzGbOglOfhXu0s//7//JCKk341EdqoszJr7qLYbVou15seIDwIeJMpOFBv9TSkn7RwmCJr1/YHp7pnNF8mQALzA08hCEIQIyPuMLv7g+VcuM5scTcY8TsiurwRgYP7B0j41mWpoJzOfzG/gFZjWmhwkyxEV+Cj8wf/ZBemUsyqx+byLC0Mv90PGH6fm9dxKfkPT4vi9ZszLwQU9zRO18AlueJgRLjqvm3AOhsvFn1xCLVELGBjhSfnpPUMmdeMK+t+1eVkOPRPjJF6PM/SK5nw+5F3B1wuNViXL9MN7XtVOsWKIYTbcM8uxWewbPZjK101/L/5dXCgQbwSC0zzGEc/KIuBcopOS5OA/Bc0K0KJ4L6fjNhOkimEI8IoL2+9EWy17lMwuKCZSVq94TLEJbdsnQ7V80Wq1Boh72+RRPTtfEmeD9652nbbF3ufZ/6hiZ5KiTJcfvfhzsoJbQ0La/x8QQ1dQu1RXXIY4gzp0T+urwb9ACAiffQA2E6C0iHWbZqx/1D5B9/VQYP1UzMmhtNNIaiTpCR3F8Upvd8Qsqkp0uFH/K3w6Q1y3C9AH2nguCzU6QFypUZBhXlRHHuX1nha3i+RQ+MbZXPADo+1lBJFWRpj3+0XnuDlJLr6mBD2sz5yU8SPZPXs63veMn8Qr50XCyeh9DmzXqHpTwBheRuqf0M1wbOaZfmGP8WNOMVSIp4H9gzbZ5U6RhU/10RC3oKJBIGO9J2K74sUVyCb16/Lfi7AeJeiO84oBgcBhx4psM5YNo3cp3j1UkzMsnkexMB9PjDrlQMaj/MWjUlPgo8Vn5MRmaDzr+CUv0cUEba8BJaZd+MkWsF0TWzQHd5QgYU2VJxK+hw+Y9bGkuCpBbOxzq4ZcBHrLo+fl28tBNjyl0n7O22v1VU5pDsqOcee23MkKci/T/IXh50V+J2V/v89MoE7xe5m2Xd+WI0kobVcfHASQqQHw9KR8L+d6HZ6TYi4CmFkkywPFloJo8UWsy0mV6Qr8Gqmv9Bqo1rpvw+qxLC409X/crSREOro0Y+tJbHpYXJG3FYTZPub9ewyqkOC2PiawU+7xVhP1JmUbPWnspgIdtcPqrLr+ThUZW3gPOiCKE36eew8+j5Yzcf3z5bEcqaoW7eFzVWOCoQgowfS2Y0fmtC3OKHA2wcGkJ4yDTdl0mhejmVyFqy1D68pbtwi0pNv/CKMcDvCpVyOIvus+QEerXDPjfVNZSvr+QGeUqZ46ha7r9a1TgN9LGzJ4nc6lL1wbF3AYeq7Mj162He+h7WsW7yUPiWf7dBHehNzeV4Z/xidOyUgjGbaNFsrcmHAC+y50uO86JpnPDHWH28lCPz5BJ1iYoHtYuSapUm+u2zEgXZ2KdNghEjrp9BALYoD7XxCBgEHtOdtrU/tkYUmX2hKLH48A3J4LF1UAL01rne5NAVF2QMwAQQr0cSwqThlZzvVOP54oVB1xdNUsbzqw7EwiYAR8eMwUPu2MPt/k1iGCL3g8Cq7fJ4TxsBsvbRsZSLEyHgOE7QTiY8HBFojzz96ByzLhoPdVI+S2qtSyuBeP+02K89UjvyUJ4TT2LwGZ16Giz/mjuCtzXql9NOtONIW/THhgHzlM/0EXzYTDzZUcbz4aNSBzXpE+VUlXl40cwr6brmaypPlAYD9/duc5pLAqHv02yq/5b2pMvlxl5z6JadAOnUFgQuE2obZAvu/yO9xvvrSXV0vIuDpjnf9g4YR8TjisqNa+YtJvDycvl5sFYlCZVR4k6yvQjSURdzCZM+PnoD+gOpWlnhj6PhSXUCnTRGFyaRF1lCgXE4Lvbv2E+caKuGGZhT4gb/RONKsxvOZwIbTvwHls6bjrCoK4AwQhICPKSH7P4+08iWdViUeKwZcHvWkq+1fmz3huOlGtm9za+XzPtAv91qLdC0HCoVPEabakxdTo5kEeZuZb0sLMfAc+fSvcX4jpg0O6PvA4jHyooa44M6QkxCsO+fCB7chTAWzDp4tyyOa2SuA0QypWmQihVw40AxdsQTJhVWvPpsz0rTSXTbTDMh1B/pqLB2ucbEUTGc6FnIlU0opM3i6j0uHv2DQX70CGWZ7K5zUbS6bH1pI537XtSYi+SY/0WB/DOjPL9SaVTZEBrtEoOB40MZgKovmWPCIUXsROi36Jxx1KQWqzcnRGrgQv6cuOs7BAVZTyiOf5yOiCMyUBLZwu8BcQ8oU5G/FNdOqFAK2QBLvsPfMruZxcngHSTnwh3axaKY+hKga5GXqnfWpwAodk3qWNtwiJqEGKa63I3cKXY9e58IZEzbLsZTPQ5N1v7HyDBnuY/WD2mwwHLFlNa3MAg4B1ylXcE70ZgNMTST8YVhsqejQFZjbc1rcm7fVLTq6NNFpgutD4CWydHBFXgH5KhFTY+hinU/K3OkMFYD8P0gBPEw+PNXMaNb2t0WK7vs3REUjyVXi+ZWi6KQ5SLxayKpU9BQ7G+7xgwtWZ5p1aUUdOAooOXqk6+SNK7fWRoZZlD8rCK2nbxQ7e2BXzNzb3N0bXA5qfaMksaU9DuyIljiPqTguAw+SPK9ZkIRFOynhyoUvAnqWt0k2IaJKuvDrwLsPuENuP3URERFDxIJJUafEvwywSc+Brv+1zeaVRJehKCAerbyZG19QXbT6tXrxMos8UTZF+3BmwyEFiB06rwWbjgcryNN4SqNacJfqVo9FuvwCR9hOlmDXQ6td06iCp0CG2vwq086dlLqofcnNVkriO3H9s6thdTgluO4LqV2iwuUxCdH33z04HVnXl/Vb7yZm3Ms0XGQVB5HAfQUX/9nRblER9kdqW4MIammsDn9ryFXmKRYc9DrWGenF8zXkrO8wsc1LsKLZYb94pXbRpZv0SBQYKpruwcQPYNz+iMIgnpoKALnVnYYxkVs4yqjaXJtllHuFqiuaRKO9zHeOIjrwcwe8XChPf9kQN6JaHv8YLxdjwG9vMO+WzXkOIv6DTs9Y3Kk4soddtaS7gMF7479dUqnioitoK8TMyP563/N3bMMqQ2fgQxj2bJNWjSvP5P177AXvQSQszlC/qAv6VdxsiYBGS1O109ZpDp7f5vi8W8GJI4HPpZZAJr3twJKcdVoWf7hsYpZoojxCbwJNU2bTrs+Iw+/101hY6X6Rrlr3FWqzpIVFS5XqIWNoIOsGbq68mZlCuCyq3leb+qygseYHQBRBhRUnb4/LW3NIkwT6L4NG+qqeFF8S170A2YcHGFreQCuNcDIvh32CW6zoUXXqITJ3rP1KVxkhIUotY1O0eG9b+dVKltoUXo5YP5jPMhKe9cGdHaug6LLg6gi4nItmLbRS9EFEmZhb0+1le/Kbbc+tyunTEPIht/b3/9HfdrWQeFEv3ugsA5HXHxTXcePBpc6UQ6j3igQIHqQlfgQufh508YAx5HUT/z3Y4uowqJyCoT7gD+oGqaH+jpVGvHYpSwPekon/uf7KfdTPdgxm1ijLGowOKFeb6/vt/ZcOAxP3BGqOstx7gUuTtkR/j+dX+5AjRG5HDReFCdijRbfhX9JwFCuFYPp6S7hQuAy/dcQCbMwX63FWf31BufIGBr1I8PqyZlgqHvlkhKS+4KFLQmhBu/B7WOegJcTJXwWYpa67NLVwViPiX93pMiNEFSJMu9czuWqpHN+3Ylb4yqSALu2+nVBnlv1yuH47JTL68nZT0dIc+ehm/dwVkHq1kqYCC4jBjh+oDGuZ1Tw69bvcE7sNUYDsf6ZVlhmbnQ5kM48xlHblXIHLkINR1FULq7aYXfAsfswijnb7w/DVHo2Jb5rrCNAcBiEXFPEweaTjdyGtp4o9/PCRwE3sy1nYpGnlqJK+o+6nfFCnvZM/Ak+sRKG9S+M9BHVtpE9paON2YViFoXVPZyi5KmzfxktSSFNT4Og8+vnU5sV2y0s2Yx7XvEXiZU4je/8rjlQg5wcE6bbqHsiw80Uf4V0Ci3/w2hieUV9/fPhDN80+v8R6+lPEcoLoCHAuCKj6xA3+M/H/ilROt4v+LleTez12vp5Mn5qEdRbPubsR3596U2A4QpbTXdNt8sfb+trGZMT+nDUNaaU9k109WFoPO2ioZDE/2H7yzf6BuimrKsvHOG68dYkF395Oa8PbNIsMztbwAOrAjczBDVuuy8xPFxubKFy9VdL/JZYWCtsyKK3aUUa/hCALaUgZX6jC06Oha08/ti6HJdzDmdXoEQq3GJXtb2S8g4naxwyjhkI/Nj8R+1IG15cC773LCgG/EWAa6p/g3mq0TufyUrnomFres1b3KCuwSQCOoy3rNK5CuohkkG4MqMekci5saHiD3/Ka40k2BeQxTCccOATTuREQ3WyII4pP3ZwsCnRXdXZd7sorWMIhMQicWwVSle7tjuknqEZWADFgdhr9KnVJDRIkyncKw/qWsNrJI9KHyWXO762GdF8CuqM/Cn4OngrvyezvqbsG5xRyhL+i1m6w22CFBF5DzYzI8f2f2TTtUHOvzVBaAdQpEsWTZtD36N+IQ/iV0HeZ29ftcMK6Hucnz/pN3MZvu41hrkWqEDN4Sr5FUAhoNn+OCDaFBAPJvI5EMW5votvt2soEDKHeYt2WVuXYuHPE2Rr0rkDUfQb5SdNXW0vCrXBQA4WXxtMYxdQvzX71MF8Bd7Wv5KFShZS1/B/kcVxIg5c3hSFsegWTOg7/FmLyK+42bg53qs86A9eRICknuwgdt3CoJmNkJChr0EKRgJ+HyTd7BTF8VQGA39YNb4yi8kYaXnOzecX9BKkSAflCRD8m07EDIKi+kVUAemkq01g4wPItVSbXT1zoloTGjEOCjWjaNqgVrRMFazV18KOtOaKq4ztXd8q1dgcWfCZc9A2EOcsLY3D7tZCaGpKURzS6doy53bw7mH7EKJFe286sDeruNvKkfsBMPGvue0NvVLtpuPIavB35+sNcnK3zr2jCFo2n8f8qP/3ybKILjL0f7TPXOEsLM3osjF/h/0jIdoz1GY5SgSF35n2SMoe8TJg1/pnorMYkx2KVI5JOHx1g1qo2ng/B3G3BhmTROdTBf0HpjiZK0XVoyZanRt/SVUwwpykLQtN1r61fSjJudaHpSB8JazUagymJl7QPDF/AQ34WmDwjGXG9vIl/QTzhOYgFtwUr+S9OvyIOSlYAaJuXH80tkbuISFkZKjomQJVhhNyzM5t4qCe6h5g4aKvvb5SWi0bUVCsFXH5E5R84bBAlqfJbCeWFAV5xpfQkVFtTiJlR4kKMt6byuIrlhLEudihgu4GDUhirX0Bk5DbJb5veSleGGqjrSDKY85QV1vx3sQA2tHBBZDZITeTVNbpBPVA7WQy06GjXiTYdDO/r1olEgX8BKwDSHMQuAArC2+9z0Dyamwg6ndnjvpL1v4bucHtpLqkFOI/IDbqsUsjsabljbHux/qhzgQj6WifXKwSv1PpwWrtccEJe3z3J5Lv8zS4NPUtcpfa9ehZjZAQp9C3tBbA9HQ2n3FvCsEXtRJY2rCXEvSyKWqZVnOPiOTqqiI9Rn+FweyeFUU5moc+oJpiwnEFIghaI9+Bhw3+TtwLXvHcrlQJG3jMAUsWzf4buk6nL7fUkq2o+zy+1O1SP9lOWSPHJeCUbW5yIr4iMPGY56huJhQca4CxTsIVlg+3oUbNdkfig5HYCwz2IRFbJS57MJhxXSDvjGczHIKCbxj4g/WgHLcNhuHdtRuj6d+CaVrUnaEoGeghPxaVmwdlzOBpZJmtewLh8dfyfVy5fMX2/n07dOXTPTBucH/3M4CntNZnF6712+tKT4HY5XCh95CdyPGMLVKr0HgQo2Og5SJAxvelr0uHII5MHdUFuSia+YO9Tzr9OjrlOa2fkV/AydU1qWoiKiMvmki2+31h864Eq6fgLs+mi4h84EIRbUct8uGXhlClXUjZuDX5eB8ilkFJeJEV1YdCaVigJo8frCm2WvUKptZ/exRvRzdLDQ//OhMbHtgjx01H9ETr0srIzV7udIyPm+9RESNFpdzeAQBpLnpai2rgBggJADJW6+f5jZOxN05P2G/EYn87u7c8J/PctD532kJ2FuMmxCv5t2NO3GASjG4ORYCW1Nlb8S/ClcBfXblU0hnzAjAquvGvYRmnvG+w9A5eAKOJKpIJSeRJ2Okwz7ZSbQS15yUpoeA+vXEY0m1JMC9g/DaXoIik4nQmY0GQERxkaGhaIO/t7R7kZoLUkUtsC0rH1FNxMDqnh92uy8m/mtRi9wzCXQNlZffZPONjMs1tG+osrLRo5EwJaGunKn6MzBXK/zKYK6LepW2aRSNheMBhj5hcU+acPzzI1rzSFZCq9GxLOYLbp3OilOMR4GM5n23WyFZRD69mihrlhJEXIZTjAQxDP9B49vx/491DyG6SH9J7Iz3aBn7LEgjOotfbopcW+mwclGjzmzRmzmFp03jrbHbIV9381bwcQ6F5PzKi2wXhPpZBpNMmiKXR07ducbrFF5XsgRI50NP2jMEfhHMX0yoL3M6NXSMXXmq0iYl0jC2KRNtTB1FCa59lJ0efsfGfk7Cj3u0UekQVsemhZmxKWHqVXoKol8vCnR1+HncydCFhv1duFaROdD9j2z50IsxvLVSx4fA1afrp9k+5Yle5/bp8d/h/3+9UcCp9+pQplTB/7lUB2ZZWwCc/dBJLaUk8/aDefciFWGM4Z+5ppaXK/kA6oCecybfCUgPBQ2mDqdodcxEr+hcfMsMFjw75PTY7vhTMXJvYuR6RjGr6X0k51U54dCrUB+8+u7DvQXG8xW1TE8HoWBB3FHHZV/UPiOf77I0ltDDeQgJ+nWMeYhUSOF08lHzQCfdg8S/pFNFFwL+d0xryVD4kgm6sO+zJelsLKDvaEucdzAuep38l8lCisQnYbUuy2AIwzUiqI37UJhnDK6UjeTjaGzYi4k3GJhV3i3g/+nUZS+fbR8DD0h4aAVkWtSsgYYSL+7dwoZOL7IlI0WtmxGZ3t7hcVM3geXK8Q8HBRMFsqEluWXTkQ340YKRGBs5HdBOTQbALkusbGyLZ1Hct1Ccmu9Uzscfb64jD1hyYCi/Wrh7FK48jSuT/dJsRxpbax92aCE5vJfNMWtXCuLJPpnonOJxHSt4MC/SzoIkzJQmf+9/cTvWJH14Ju+0Mnsu3FKLpSM7v08xXt806ZrMqOZXrciXaVfTqBgoNXCkdLSmqn0kj2O1zS9N2LINFeXLvfkgQbCB6RhJ6zabex68vbtevrsdKI6oSfcZERh4Mc/IFzuxTqP8Wr6yIsbAwYqclYfU9GrMGzJmhhG/m5gMFFeO5N+n+N7yT26sMH+mjmU3JN3716ufx7ff6jXMXcEEEDyHt3Xx8sxDbbz8XsYB9IhSJ/7oXW631YiK0B+5ScOCaJwAlAhO1Jae2BTn3B0yVMqp1Jpd3BV0s7d1AODzOxped4B3F22Al8mKh558oomPfn7d1d+ca6SIpnTfM1Zue9m0xUIKnbdvJTlXFsyXrFc+HST0ihhI0EKY6aC8FkA9nPTdkTcBRKSA+4GFscL5ZQScxcLBCAW7r+kavn36BfkuliY9GnpC6oBiX02OKPlACGYu3s3N6qPyemI2+ygz9jfS1hF9bg2luA5Ss5pfJKLmzT3oAJZuEmq0gb5e4bdcGvTKrYfu70KWPZ9dqiGBCmTqcQvud0laKksHH+ME8tP865CiChwrL1MYKLN5Y1GeOtjffLns1HPZS9o3QaZRFwqUhvr6JhvvVUJHhC/qBlXLwaegR+3YWiVq2o45l94EgdB91sV2YxtKdzhFJ7z1e6lxchSIRCrWeKP33pekjGuBLmTIlechw243XE61IeS+o6lo5pugJj0J0Gpj7K2nkZifRV7p4Sxus86V5c1GOYh17YHONCZAjfvc8gI5I9ouftEUfOuU+lK70xgYUUQPRZf5ptgtHwrma/o1IQuSR5G8HKk0aUont4Zi4UZpCzsfzm0us0hPnC+st/gD9hWkWi8IecvTUi0dbBZMyQObQXGz2wpdIFHKxSw5gPmHm+pdTJkWrnQT8QHGMktIkFN1OZjix+e0QVE06KbaJ6LAKVqh1hCmwscAZOv5/aaL9SZlunuX02khc7KHHVEhVQmUHo3NIDkEZPNkNzvty9Xokfa8yWfyNGpSNF4JJrWWimDINc45NATYNXhbX2ygXl6bw4pJXCbIPUcu+A6IRw2zwCklMlM8Jt92Yq6kb/UXSIHJZ40MTfRo9vz/YKhYk2KKV5wf9JZ/ZE+B/VMhL/zL9U7tRNsMxS4P1nVisEcx06ukFuW5nVfK2xO2vTbZWdm4My5hz/R/kAsfIlKNBSMVRNOjSItTM8LGgsSfaBaNXhqC9HEhDVR4seZsnsz4DtnMqbVkvYCbVk9z/MsSHMbmir9IDnNxcSC8hJHRIZKhTYsb03aPGRbvpF7ZUVPFyFVbVeNMSHJsWu3Snc/BgNp6iu8SPs4voRqZhSjyPbwL5BJ+Ha391ifVMBvYJYjY2YlEw7BG+pLZrYRuI20hVg+Qo9w+Zv1mdMHleJRqWe4SC/ered5P+Oq05B10sNeXY5SGmZr0KVfMsnRKxbHf9eMIx8nu5CxM2EteFsUv2eKjEZEsZpIuaQ6eXT80KqGHi80qlbd8FPAdvOihAKAjq+CyXJCcr4NGGCuGTsAfM+hgsIukIPChwYaWx7Mt62y38qFQomJ4a+XMxZ6wQmFhccFaS8g5yaIHq+h4B7K+WnSg9b0VbkmJJTEuTP0cNkp0uVbMnA1W/1kBTgrX3ge8zpgZfpgwjEl9K9DK2g6LxLllOEMKC9/ZCjzZg9UwKtcb0SoTOn5HZENC1PFV+yuJlZc5MpmkiyZOJrab7er9t4A8iQ8u4cOhFQOsfQu++CQXIA1lWdgYeaeLgcWo6Yqbq6eYgf/li2fz9vjPvqBzq7BobKpjalXqQtTeZQbm+HDgTKCKaLEo9oipDjHi2UWJmSbITblQAXHzIC3xrhzutzRpmJ25lg4qeLdWMM/AzQjICKz3ns5X41ff1wyp5lXNAzR/AfI1tsh3QN5iHEBcjAVjmx+lLRQ8oQyYxBjTjNfZZNTM2ZLU5fbRt0srgHcYgClA1xtZb7IXJg6BbdgS7lIMRmK7jirLLSnhNoV8HWaWJxskRRrBEC/fkKQq2SXs533OOZ7PVNAlF5PI31B5vxx+3Zr7Kgpn2lsIALUPe7prIZ44CfvAgFd9B9EwqHzLqXsXC9U5U+0MVbhl1LRpXUj31zAMnN822K1UwIMvmz8q//vEDXdslWhN0gRACvvBpQuVJx9Z+aJg4+1+VBY8Sd6VhpCQcr/LA+kDXFgu1etzwdXEoGobOvGrKt0eor/i2L5HNlkLhGgnhGrYgI/4SifHOdBTlWc8sML7yg8mYXv14YQWU/cPvGSXlyQh1fHWOzNBBT6PyPh2XwnQoxlsrV4lguffnyeCld/4yFIRquqXR5K/Rv6NQcG/EJyaHfV+YRuCkPoYzak65ETm3RC4ktZlDxFZeZbtNihJPBk7EgAF75qacPd+3WTlYtTSdIWS5LRugM189z1VCcSaUEkU4/uItGNEhSkYkqI2RXtbJ1KsxMKlzX1AhKe0FSsTdcQPxG2ksVj0sz1TR6gj05CA7cHUHGsp7SEM2iwS3nxAOKNgLYbgehQ85b3jdFYzEIC2B1t0DEezPUCnj5ui960NSkpXEJmf2hvl+yzlle5v77g9dXsaBItyk83lfr73knNwz+wblr1FXUa20lK07HhG2FjKU6LxC0Eipslml39gkx2Rl3hIVWsblCqdD7yXrwC3PVsUwPNexUVGc40+eqBDerZqB6vINiD60xDnNvdneDJLb8N4OY6af1r0uG41hPm1WkZGZ+hlxeKHZ+gFaT8TB9Ijepa33XBqdGpqk4FSQ8jYXkPBu1OgWI501rfhB7n5UUFdy36sZd9qzIDiIXOD/oXj5U6kONCslk7KV/q603i57A3E8RokNGSTgtpHGlywoWBfH9GluyERIfpXDRZrH95S/3xOLkdAMUeOlxrLMYl3HgkpbnnaVmtVWNe7ivVp2tqo7CO9tO+KNm35cwoxq8rE42tdD1Bu+8HD7/IrVh+1c9Sb818qZtnH+0lPOfSU+VSR+39RToBjupnyQJG1VAkVNzduYcEH/5NJE6RaBWf9ip/YpwUcNGKRtDxu/hVgX4fwIY6LYNcnbPJ+5SPUIxJz21x2QmdTYrUmPd4/1YKbPBYbGsQgMx/2p9epLNy5GLYo7WClQ9NZI8309xTB8EE9tv8WUEStvh7mH5QtOQz/rqh7h5dw9ztRPZdmQQxlXGqiqmWTrrSEQy6kFyRqCraByf0D5D3m36fsj2vei3tsQw/5yLoqUimpN3IzyWIZETS03pHxcJRkLEGsKa1DiezyppFQRIc2PYTbDcoQ5owJ7XcN10deYCIWeoKdpux8zrH52tB6KUjau3LTdC/RztBVnhlA7uZT6t0r6BpeqrADgR6kfGisQ6uGCfstLQh679EJpOjUNP29M1AMeaxP3sepNxbMll/IUwXahJLvtzOZ7iJbzesdmyEJfmYjuud7P5gWgKL3UCii4IWHabVfSjvKx97xlFONu4s8R6h/X6zFI6R7+hDrcHbFylxA+YJgq0+GaPupuL/+SknnDBEIs2R87QzZ0MLiSDVavs4UeXuC8jU77RHOn2y9m9ea3w5LPQTlLTH5EFvjNv++NYO76NxfW/lPLF7IyWfqluQD/pDLM+WLgd0mIkHDBHT4Md2m0t2zQaAuHzLm2VP10aPx/R3o+f7uQErk6uR+K/VJIv959rbiV5BPh4cmBMcxXiAnYvdKuAAID14wn7SxcoSeI1iPbdUZ/KzfhjNd3Qr4J1U+5wNf//pICyUzVQbqYQgWbWlF3h7UlPnewi1ljUu2xoxSRZcJ+8AkpLAhKNSQXl7M+gUQQ4RADg4hdVdAtiYyrmSH/JygSw+PW8yJlWeU/32Azy77CPOlwqCF8+KJqPqYgZaUG2lycCvzYWSxjGKGSq7Gw7fnBQmue7XS1DdCgf/CNqceQoUNCf8FTH4tMF/Wg+X0JGwsisvpQ/7ng1i6jJQDFed3rqHUC79g66FojGRvpMSfGwRhARBHYgdBb41Hi1GAf0oLZBEx1KA55MY0t3GPgfxS5hS10di3ImszRGcGG5XmSMhjv+biP0x/8FxPxbxGKfp8FwhwL2QuLJ9o4oJsDKzGniqpUHtOju0yTMOMzEPl4YB9pRahEJ67L7Uu7FLZa80KEcro7lTxd3ixnGF/DJJeGSPdR55m/dsS+zJJB5xijBebYbibdOId505lrxsmgXhn9Kw2MTWXvVZoXG2p43plN0JWHmRzVIJBlqwXxKU3MWxI1SN2DUCesnSHo/Nmyjuy0VTUrBXRd5tsGRIbG3HGgl0b9K4qdgGgTOvaI5MEydLyw3I60SpbVUFeXf/0dTdpMkeybNwxW/GBQl8xo3/EKZtrN7zaTSrhpOubOVR6eLvuoYZc05HKQ2GFj+7An09rIIfEkaHTpstpEDJ9RGXpFTLigkkm4R1n0ps/0uPoevsABnWu2vKqR0+hYR+QYHM3V1mTgXo1KSta6aRjX1LaAA+3FNwr+C+JP/Zy58SQKvvDxugN5R84EWEi5YTL8fGeX7ihlLmeB5nGLGfuOiFgYZUzD8PC85RHbOGWL4OrikQ25MHcerZxE4TLDqEnmddjqTQLXP8u6+n7Q3R8i2qRvH0P0AT3Dfbk3Q/oYtDsBTCXW5V9NZyNedM7KyzhoNA1GKjWEHw4Jc3hHqhOGVJnZZn0r1g2/X8FzIniZB4DUTQ3ZNHxTkLXDV1nm+N5tFjWLHHh6G6slTKdBGafzHReUjPtuj2b/N2jl/b0IFaYO0gB2NyNaPISWEe5rmbfwHEAZifx/IARovo0KCIf4e3PxG8Q3jFkZc4Ls5TlorsGJWBEWnyw/46HfmuVVsCEHHbWgO8pLHx/mrT+R43YO2mOgf6dbuR7xDzYRzcigbw1HsjKRgM5vOVL8g562kGAFt6pmUoxCNeNYXalSVgSPr4sUuULfOWg2VXXt+U7Jnjek2rIfpyLdMqTF6D6aBqdpoKAc6P7eguyMnLD0xX/rdo7dpWgLHS6DzraV1BIgN8TkXn47mIVWHwnVj8pvXOP5uEGgEC173A3KVRLQiLl7jfheKxs6Ubg21PH/a7b4A9uYYw4tCCgOJ8v89Q1MamESbSfb7AHUDOYxbX5ZuJ9PiOC+nGJdhocvqq8yoTtiBScfRmooQAXYQF+ZzNUgJkCxKqiytO9ryu0xJeqQcR8zS9bbpWkoojfYysrUjw1cezJBGJv8f5CQp6bMub06/3mC3niokHOLxduCQ5JqnRvidw0w3AScE+aseoUEtTCgTY+mA4GuU8Q1c3Xq9NljrnyCnlmhT0yvmO58YqKwFA5i/eKzFF9EUPb7qUwSAZKLIkIffDcnOb0Lcdsz3JKKTyGBYKl7IEhRfpirguubJuosueo2h+bx7fryheqYtyn7LxGqvd5QFIU34N8fpWhdTixHcmdXdk9SAZf77BHCdLuoPv2qXHjs9oz9/1bCpe2lcFidclSMuJNS0bSYnAzLhGoGgJIGaTJrRAHMT9z768Xbb4hs6z+bXCaPOof2sBvrLPJFPDW5Xc2a6AqKis50wePRyo8ZCEbIoqE4FhQMSymoQnSWXxvdnNV24VC8iA6aLJuCIuF+Iyvo/1OF4Ickq8LA7pXzheVig+zA4temW1oci9/tImeDr740YA28XarU/nOKzIkj/3YVVR/pcI0K0yS4UCpBYuPSA/vBB8XNJ1wNx4VrO0L52lZ6jKxzIxbq/zNc+++qCvniNTsE+f3nEW6p3bDbs1b/1wYVF8tDGedNnB4yq511yHdPb2cIB4cx8FlSWNBzF/FblW2JM//lAEWXO9nuSy3MA/EPmz203LnrsBqkhAyjfEs241d80hWJIil3GVz93JEF0KEzCwzf6pBDQFSCJu6PqSuKbOfW9J0fWd+vFDw2JFtekSaoiHyARJxNXi+FY6WUyiAsXUOaFtF+U2Nz9e2uB8gD21Ri0I7bHUmv1UPaZxhA/7FdeYFlQx9ZySTuhmmWnFEaaz1aozfp2qeRRZqcwdJOlDT1nPAb/kNDJOANCBZw1AQmKrMx+uF+h/tMWrzYw2zwwmOQmRgQLHchUKNmzhYXjcHQIqUGrAfB7pRpgfGBV6xUw+tgBIq3//LtFxeviZ/PkiZ/FALFpUuV205/3mMiOwNtEQiQGZajuQabLazkqbc9gTmljYAbLsR6TIqUEa0jB//UV6ERqjisr7Dwt+fAzIEjb2cc78eHq5KPZOAseTOkPILNx/cyjlKdcEhRjo3l2ZdO00amAe5mVeRsqcUkWPzaW1zZT81UYZug8tTV6lJRLhEs1rgUPq7Ja1HAkud+onJTd/e2s/Dd4cdUBMDJX4Gri8BGc37aRS0NMYS0rk7hy9AtWEor2fUze8pPF4imdgUb6r0TwUyusnOFn/csSreneKPLtKNRVbm+xIbHt1XPhzb7ZpPFDMg4SnQtlCBfSr2knMQh/N+C5JQ8JXRP05qNyufhVS5NtwS+02EondOulsqsAnUmdhUP2A6JF3bsRzUI+R+c1bOtruSptxUiETTSVVjUWC/N/sob5ZbvgTZ6MSrZVqPdD3fkQJxnoJMzPX5uIHT8jHXDSlXnmlYRGz0mZX8OdzOHpN7e/i0bOSoarJ1x94SnlsX6tFh7cJgifa7HbKeTyfyNQuphdFWxQWCSApZ0TYevaYhuxN86uXOlp/R+QzBmZEwxnKzkZsvw4VRG58crRNpPARtFT6yw/Wl0iBr9L+l+3o+mNOC42a4n3/KC8kvLYOSuxTZ5niitaXqOWip8H5bopJUWIUzyftjQw2QcusS/+/2ZCk0EdvasbIW2XZWZloaxeChKT/SY1xL1VqEoIAzJjjI03FjkBFVi5agVMtDpZg+zmIRx64096mfM5N1F2m28tTuZuToiy2G5Jd1m1SiiFsuP3YY9VnvD799adttr3ueVVSMA+MVbEHR4/oDvh2PIYMq663nXQ4vbu94gOKkJxB4NhV7U3Qk3L3dXSuiaUiFWa0X3HFaacS3aSqnXm7Mkuj2ktqqnArFYITTqz8oubM8SyPxjNW7mvXAMNLtFlIHMMNs03eDCMRtQQEnEcING2QyP2F6l7Yx+UBRWrkqsjNo0Jf4BrUHX0Ide+ho0zU4QI9arXd2RNC2Dn4GmKfdTqtAdIfELeT4ZDXvQ9wJtGN6EMnAr476b3yznlQlK6272Aq3iptfWS9XXTt4cnRTx9JU4v2Yo3WTCLJbe+/QJHMFiJC7B9YZpWER9LQJ1GGYJnKpk52F596WTlIh2QbvNIeKdLRVYsgrS74erZmsbEA9cFCN9AsMqzCBOlfN8vlaEoNVK6rSvMP4vJ6FHZsRMlSLd4eooBezQV39nDzxQWuOe79VLzDWvY58Dz1w9AckzxBbkmB03XoW5xuWMaAiRDgfQMYb1sx6QjQFAcvYdhsqcl9d4F0DwEPDpLKfLcw5+EbO3XqUbguuJcpgHxXXwQTtn3cGZX/gIsmZNKrvOGbHXHYmnLpPpl9vJmgGmwu3mYqMipiP4T87KUkg+5w5HLK5QwIoFor2CpsXalDF2fL+lqqGhjxG+Cc9r8wWCxJJnq5T0xmfVoqwwCFJdDMHwaQiwvoAssdUX4wR170/jF8obEXE2B/KKDGJ9/+XzlgRj62viB2TEAVxw85vleUKsT3bvZA3LnLJSB+vW3XZt1WO7iS2LmZMBH0xuoyxhbgnZdVwtqS/BUIrQUJsvQmyiR4B5jiZhH3QspfgxTauKhU/+mEUJY2WGwpPvy1mSzuc1mr0KjCW5KCVPNjrrNhz/UYWOOgCZU1uhxjVt8/bTHNQcADBO3MC+LZ8nPIpPQdwreOJqKU/6WnGIwJ41ZTwhqp4AW5WyxR1dwcbuS6X1QiqdyetQnb51m+SB72ZjxefW7XeaBeaTXVoPV2zF+OBGfxpLM78CY3Ufc75+0ZxXohvoYgzLaj7REg8TO/v4uwLBU0FCoZmsQyAlgljm4cZ/FWsMzaGchlPPWA3+H+kumygcHEe49x6tGuakMwIv7EHYgZfa/StwXqp3rUwXl8BQVqinZCO4lY2xPcAJthzWB1lng4L6gHi/hQji7VpQjKItRwjgdJO8MB7NV+qvmJoFBwp/lVAiHIJVVocWAkvYKcsWvJ7DkWqFbIaExCqZjW39KgIsjgoaomfJOX43Z50p1BXC6/gdcd1FbSZ76u1Q3TYYNvVAseLkpIEBHHV2obB4ghsoi+siNvdwKMEPZSSYZ9Z5OPfTqGwi0VcNGddYUBAdFtZOE7rnb7K32muIPwx+d2NVNBnpAD5GOJLjsh/UJ9H4yXkuuprqTgRspd0Dd5UQnyf0ICQDBbw/NNcNdQFzYU08eBpakYDs9IcZTVWm9kEZyxXUBT7iMlPbx2VgcImhTzfVuPABZW6jit5/vmzvAgwdW+jA5l9SZmqlfSxUpEbrQNw8KeIMrCUJ3dJUp/XUsmB/5NPqQtcvO4VpIACvqXAPr3yEuLtFEkaY8J+N1qicCLf395iZLxuONUMMsM17Rg2KD29oH0SHbMB2w4Rbh7G9ZqoojZZSCJciAf6BlyGodfx96ENc0L7NBiK8u3ZV3zxZRz9WzYFPwt9DMnfJYyKOuS39EG0HSDO1ZKe/FSzPCvky1BXRqe4uBAlAat6AQouYax/J9h8VjweW9cfIlLPIoVhmRWlkVkQlKEOD1wayQ3xsvGTE/1ADKIJzaS/EnXQ2zeD+TzMmd6ulMPFNNdb8G+K6NWBWhVbMgT2c1UGDihax7jRyU5MlPfne4SHCQQ/bHgcXCMt1Og6ZpGzvbnRceaJTFHtvyMbSniNRrLshNItVgtFGRmy3ze8eM/VE1bD9zlJG9KAWOhDAkNEZyVqA4cAbWQUrV/PPTdnuesSH/8TdSjwoUXaBiDgN8c3Fq1BRVQd8Uof3/WepMi9nPoZpmJpOjzXOGfzWRWaRaQ1l+lpACrCFiz08qiKgPn6fJgHKjsfH8qUOm3zXxTyL1BhBWJLSSODKDOzPtNFcdH54r7q60vHOFWJTgNSEi7Tape1foZTMGY1IkOM37Oe9e3b/6qlWv17D6wYdPavplNA3Ks+1LT2u8KoIOXlhk8lbuSJ0rbxNunI/3UbxeM2AqjdRnoE7XHNhJKJFo5ekFaRNZ0j+34YNmy8oDvaHFmTBNIucacADUtDQFWUWvbI59wYZRk5Co27GkyVUoNZYrty3ia4x6vGYLyGPYebUxldFukjzzef795gqO75kSLfdZpBI/XU/8xhqwvLt9HEfuAUiHGj4YYp4b6gCvguL7gElpqpk3dWy28OirEiLfUrZDWVz6t/VQRf73ppJQl9kgnRuXJvPrQaQI0fuh6AdobJoNBWol4OaL3NdssK3Z08jNZMbzd5Y/U4BLJmGymvoT8YIVKWbITNukl82O/IleCK7B3EjKODo4hvwn0bYL6k40Hz5I/JNuBtoCWYTF8mq9TeWjOPEtsqHMtHByyqB7dteRlibnjnDVHfDYTGQ1mM0zmrGp0muDo4i9UkkwHee0NQNF48pAu40tGf2+toa9ol34LZY0DUU8T7yNswnnbJhz1KP3HhxBoUCRE8aSIVbOHQiXzglbInL24U+sd2eZTP9iblGSRjBGj5Zsjz53ZXDJ2RtIK66VfTI6XjqPEl1oR4oSDi7nN/ic9mgSauHU6h1MHt7VDsf6jkDyVRVfW7iOlAi6C9ShhWTVTQ/EAzdvxbq+tI3ys4cfiELJT1CaApwI+ePD9HBdARks3AEXnLiOQOtFmIgUSW5UxsgZu5mZj9srl5ZoZFq3yKyAMll7gBsTjgAmAVahSa9PPzBnhkSCEBPiROacagPxUwQsjLQ0SUIr0oLRi6pX8dkv8KEisOXwCgc0BJt5KNW1+I9EV8y/JdqHDPA2TPMj2np3x8OovWV0JK+JMQ2Q0FEv/9qbrhFpBoAXCxGl+Y0vslEVR7JW6yb2EknEyIUDkb7pGvp/BvJbAfeKm/Y8SI3Pt86TkHgMMlt+35VUTspeiw77HQMPz/mpA/7zDRpLZgeANDzvP5R5rO9TonfTkedwYj9aK5BMcPuGTrDdUVyxSPiRbhEjF6OWt0d20fKFSjIBzuuamHAgtjo2InalJF+VZggK1o5HCpSWFzChRQiNxhA6dIegOTAMjA9mA3eTJaX8LHbSuJgKEenM3FHoHcpLB074sdGKvcZUwc3y5o7mBS3RbvCKlbg1HiS8QbmdIyB9opG33juKHWKPiUISa2qbytZ/jF8Ob74KP6Z1i6hf+R9YeFdv/ajMNMxfp79YGQDbtNcC6Z3FI+Zi/Pn6u4zxYi8V/hA9RgumWq9R+Ldk0nomH4svp+NE43MqVH4QZDWnewWwssqD99cQpHXKqR7E+8Mpek43Ip4kuLA4cG4DWzG9mIwWZqvSExCx/s0T6eaFHgVdYXjBBATtKLnLtt6/XcUlrlXCapLMgldilAE0He1+8lS3oq72OvnG8m3L3aym94AOeoj8GLPoWjZV1wnrxzuRfoIMG7oDn+QpdK1K4TJ0WxZMWHu/Qm9P+z0kB8i3sKJ0N+x9q+u5Kp6A844lqO+UhkDvN6yMhHqbg82ZAxMOPIPTZ+L0dvvFs4Mn3XYWPBwHb88cZtE7ezivR9M4/e4yc4AfO6UbkRlPTNLkGTjZ22SxT983qegBYyJrmBuO+7cUKdnTR2Br1F/t0sMN9IYelRGFfwjwAImUIcG1Xi0DXe22/AgiXBswx6AACV5YFNqg7bKd99qrY09A5W71oxeCSv4mMnxkI0VbdIEEZXxDqzoBJ1Y6t0I9FVGopdmq+acxjfhc3kcHt957TEKaCFXvYl4nC82/yFV/5xqt6AO8R38AMld1nRxe/4Xy7QX4KjTRiDU/WyqIdl/ZCkW0vaMWYWYvDX6qfIF6YfKOdrv1dFFyVQfevbMItpnarjmIoUC2TS+lBSXcD/jB6uIfCMHHEk1jn2gzk04izpkvXIAx031YLBIbLwpAuTnvz5ctRSq5+Hzn1ceWNHjmzbKo23h3nSry9bIWcLaEfu0zwKWs42nwEv+CDvPCXNtMrlYJm+jqZHLsPyFZtXPJMNDctkzp3fO2pbresQdcrpvxS5PnwGOkLq9W8HPHkMoSXFcypQfuVxJX5zaB+jyjz8AyP35+NTPEnPJeoVfbGph4pGTbUwc0CuEfx2SBDwZiiXOC5o01mBwqgM9DKbjijDun7rwCdGVEmefSS3az4KM52mbDFK7Ql/ISNkOGtiUFMWyj4L7h2FSGUiHjr9JcAQGkQ23JzpCQr8rEe2Hg8IyxKIlF5W6xQcNZQnBZDzg57aPTA/Ds2MuOx4+wQhtWwnanOWe+C5K45fUfZkQe/+PFAp6ldIU4lLisvX5wwHO9j9rmDCHO+cJ1rPJbfPQilS/M7HbnImtmg1mYuQRiFVg4+VcmVBpo/oT8wBITljSkyU35nuLi0AzV09gZNQqS7d2IFgwBaIRBC0kvJOc3ib4D1DHUBnB6qcIVxWRtsq+WXqlaEz6Bfzg/rzFbGJcmTUTAtyopLSqEYdvB2Ct7grrGfF3K1+VTHUjPpDYwGF3Y8reII3NNjGYg7ZWND0ZBpK0X6mVzuc6B9NANuN5Y7tgYuKxKIPykqXtLfhN4DQ+XlaJAz4Os7R5P1u4tml/Av8Jw/9QSvWnW/kAyVrcFO11NQD4CGUbbs8zWpDPEjq1KV53YibgLAg7/uDO+KakrTZSjj5Q9uRckm5PULXXOsr9qKvXSC2+DGn5wypvNYVZkidybD2Hv4E7Vqf9b4VjYjDkOafCKFmdsBNTTLl/mTXUw3ZN4jy/xm17t4fgsi08PvJz6Zsv2a6FPxXwll1a+Ve5GIHLDc5nXtszc4SFhIA/SZ7SNdNoxYMBnXkNHuR37G1yrdtp40lerJyA3dUezbXbVlh84BQ4v7ZTDh2DngD32KbxLWxrnXcwUVVnc9DWq7PRhGCofuwHQjaZhRJVsgWofSj3EimUbgL5fLWZ7q+6d39/1399alJLciW6EKa8I1W/lPJCCV4eRyBoOZ9UroxeQt3C2AMoWWBVnHo7dFPqKpUG/qsHsif5rmsnz3jRZ6rJ71rrtzAMZZXbNYvRqvcCr6IU+nwNtBZ0Wsxl2WMiALw/mQEGEO8aDap7qvzXkatWoMXPWB09+YmsQj0uijB7XEogKjEAQRj+7JmcQYq4Dy+t2G1fBMx1ENiUaDa5ooE0mTFEspy6im4RnlmGwuF9DrINOizVePHu34KfTAO/KZfLAItr0y9vPTx3qC63oZDC0yvbuPWcnYll5YCz0dvhd/d4B1e/6Faw9xzXgAAPXmNc+zcvXbPZWvBZeQuPvULGeQQWwcGuqgaWTr5cNqSTnJ1l3iWHOdNaOapU2FL1dqDtKSP1tLQWpClyS20xx8XhGGeXp+tozyqwsPiWbpG5ftibiHZEriDsSVcZ6bVNDFVQtwFW9Xn7ztCF9jLO7vpJla+zPBnnQ5SMHUAHJMb2uFq0MD5ettaBTCgBWqZc7C+8OurbcOgQAoVKTf6U+hqiJOPBVD7NnTFjOKvSI2VoATKACDtfKfG1BUGZV+k5kEZVcjVHW34TmXBmG8rw3HtBy23zgpVTiFVxMixho4ZxQ8k+/9Cc08WnZ03O194clwYFuJXg7MGtZCoWJmUHLd6FAWpkqRtrxiKBH4+r/MtuI/p94S7UAUUcer6YirhtHZgvkJDrmWwD00Xr90b9qWF7OI/25j7P2cdg+YkIr24jbNaMhunf75+ziQIhmX3OZMkojd+IHEdbtGx4JoRN+WfZ1DFEHv+pI2gWB599+yMNk7sOsj+n/SPg81d3pPUrUBEAD/J6SiyE0Nbxl94xlN1cF+641MM4LiVkw/XpJEhKij7lVI7I50xa2PHAoo6c4xfSUr7MRYT70WX5z6Q4TP0yDqELPpO7OMvLiG+oJm04qJvOzhHJsrpU0aBIyAaaP/pDKk6SerTA0aRRDyRPhgjvyF4xLkUI3k2xLrTYCU0SqWdH1j/lqvF9PXl/SRlEVjEbwWi3ZOwXWOA/HzGhAmRx7Ik6c6nb9qmb4fyQmvLMGaPMFuRLJYPN5/bICEIk1QfAzrswuMRxLoiyGGK0xP6JFK9eB10bmUsYyaMKvz04GVKAGF9pkBryIt6/6d4GQr8Z4NA7hFQr7kY5Ceik5X9B5vAnCQdUKzDU7LCz9gHqSbCyODz4h6jX6kyl/eBR9jDnAQuDkHfwMVYqYGh1ydvX/0PrJ6PtRNIqty5bTsJ1PL/LZzI/Pn1nVkfFM9UjUAabjC1CFfJ+yAfL5tayp3YG7HDEtLy5QvJ73m2wdqnmMMHoFOplxFmpp3aGAMwQMJQ+0+brjyZQUYwptuHTnBIXFY3qYl4lzsK9GSvOtj38g47KuKh6s2BwZQAZ/kUBpAHru62SzH5gUSOUlyC6YEfWqH4+SfgJp3MCjiEwCWatD0Rl5ulNqufabxZDjbyQZyuGZ/FFakOHHF6jGWvPetVL6rSQ7qGWMlI1G7Q/31nEaaRmwZO5OlfHN/Gyk/Fibk70oXfxtLvIkPShz4UUs4B147uFd9un9nDrrDCh+UhK6LR2ZVJFgt99snEPT2fuFnAQzKDpLQ/kWcsz+p4YmtkBgMFvVur3Gbm/hHnMAbQdtSucQf9RTWHS9XlwkylBe+2ZhpwXqFPrSnhQ8dgMeOIJ8I5gWP3zGNkcaxyMaA6kgkKzcmRg7LjyaI7vSz6kUxzVG05c1nJrkPEL1SK80Yw+oHE1VJ8EXYU80uoh65KjE36oZqqjXtqR3J6eNGLXrPN9qcyMRcA1DHwLzpkARCvy2WXyUUlde7bnEkYPaajYPsSiAadlGLKTsRFT6kJH9U8CFAACpAiluwM5W4a1RloldIgRO7QTrwMK5FuuxsCcAO/JjCkYYMtk6WBIBhKjLRSHTEO7o82fjsSVDkNK/+kSIEpG895BPyYa8jT2M5WOfgQjpglsOrJ+AZiSNgbBF/bj8Bgcs312Pc5n6JucGs4MhbCofQorsSVy2Iq8vJw3zpkT7l1RIDEgCmA4N/akkUO2cCKoMUed+/I0FrBiP5tvnr+w897H9BGKeE9yXDIjKeBMroCz/72UP6NTMVTCkhKvL2hMHjf/hujjmW/IHbNSHo49yqmCeGjDTyqyhdfDFb2asr69t0sbvXpGBdqoaZPoeQPx7oVgSTN0LEIfRWnC82SHruo0wJ7UcM7WqTbTQ8V62I5VSvghyCDceXiqtzS0LZLn+18E85DjIvybQDnyp5sbMhZ+I8Yb9bIPGnhZ/vq9GHcu0vqnNms+l/zGtts+R16KdEy8PFQPXn4yxwOJozMJ25QxNg+OhXJ7RMrZnpoLsC3AGF1x9fg2FrBOJBQTwv3c2GQYije4+ESNcOV3iq2mNgxu8NhfT/I3k0An9/rzyaAz0W4NNZUE5bZ0onUU3GwisI6e4VbVx/o1Lz8vmCNNpkmKPcmvTzDjVQnoqAxkBT8OowE5LJU1sOPDLCw+Wx1RVqAiaL6o+tSb04nKj40DPEsczQTr41xDIyDGSeTODofkbrdk7UsjM+NcbUbfsn+3NU+0BLa6wVp2pTcZPyeF9teQCqovGHNsTdudKdm3CD9mTV9FSS06iEDi1HRQHJ6EAX6leRmoTDMvtyh5wT29W1KKN3ypeSTWS/fZwNgLWlQT4k4RFTaB21JF+bMxamvGT4m5BgRPLHVIKalrgI8ISGLNSKixMkt5H5MDJLml4bIAFdVf/cmI0IuPQg4UEP/4k1kXMcrLptZ1K1PAR0tdMf3NH6tP/sFaAOUwgOo2FQFjtv/8WMFm3UMm4U9yJTdK1rZJeTcnnUP26doCJZVOis3vjbMbvj10qp57w/jY6NMx9kay628XwHDZM24hmfgviqJ69zVvS64dVImaaik9i4oDJ9qnSP1m7plczCUCqCJsauAGIc7+l4ZS9c6uykvWaZsl2sgRaBVuZNNuHf8U0XBhTPEBN+GkLc7BhnavRD14y7aRn5Qg67f0B5MY2Pb6sf5fP2/pTs4iS4angosNI/P+qvsLr7p8Vv4byDR76AcsJ2YO2S4xNw4bSb7LJrvx5SoAuktabVL6XKSkpZn2Z5ZH1leSEZb4/KQ2TClLZMh0Sg+nV8CfBwx6FeeG3+CAuhjqZaAcgQCPZbH4e/r8k2gODv9HB2MGrNnZzP5joflLspKe9WGVbLF4nDGwlklMuDS6g4om+lzEWUBYDijm2Vywth4MFkWhiqK0Pd4ERXomvPr3gvDmzPxnJcBubNfcy8iXnwBwM0bj7ZHpvtP2xTny1n3glvlWnPsa6zPV2Qg3+q5QvYAbHxdVUMK4WGezJAwX87aS77lrlFPHJJ6zfLqyiqIRoCOregU4vbARe8IMqA5v2i3LigupzBVRWTH/cY23lEQIJdKUENGR/lBzpLkmFCdMbsPH92PBd6SSOvg9QvXVfSmpzVonuiT1b3ucttGPI/K/2trguaZZv6x7TGF3Aaw59NQKTcuqdiHed1Bcr1XLrTnv9Gbavc5oDt+MfEKue2kxhTTIH07PhZcXCVBDiotDxaPiUa4jQiF0imEGD4KZwxBNAhOxq6jAoN37bgKqtZDBZG5DVCPeKtTy7XJG4lBdD4k93872WLJ0hmaPA3E4an+hiCfJBXujSoMa7/bL5bx8LfU4Nmw7H1s6bo46pCgLqTXUSkT14JW2T37PdNXst/xUQQ0S30Tf1WH2Z/jg52THoCQumohJ2JPoxrUcOq98cseH4xYNK1R9X1Oz9521FkcbQYMRoGGoM0r6RS1u+GR+xdC9e8uJDfzWnFZXCTf4crGKMVlg5bsYBGPIAuUlP4qyK4GK+OeUXTx2VapTAGKqk6vSAkyzw2MR7c8gCOv3Z3iGRMFUvlouURUNnM0v4zApsnN9RXUn9oTJKX9XLo2p/WvzNGQ4XPe/aOZ62ltyBebNZYaFOyhglGBmm+EMWA1CAIpRt1+CvItaF6njKyocl5PXAzLaZBV1c/c4uGEtfbLSQsfd5ClQhpjfP8+WYegig39/fW7A7G38SV4Op0PsdWeaJGZjNHcg8F1U1BmNZr5DhAMNf4+BdByp940IMbjhBuWpfdjneTd5sqa1iIXQVdOoTJKdBoknTxEvXFu8R9xJ0+Lruxj26vXfmqyJhkhBzfRQgBWeldwm/POp4SLBp+Osc/oT4yWpi3UQho9OnHHu4LY+JAawJf14SlHRorS4SfTvWJjJ7g1wbUqoltU9ADT0wCN06P3vzCRZ3KEwThQ86Y9/N61gWoO7ZeD37ShD0T475wF5rNVzUOt+o96CRQnjPMzlH5pJ+85NyXR6oGnEpy3bfi27G3/b39mBsvnWGvoXozEagJ+3MA44dgchtAPSeWMUo8kVkk7SFTMyM/N7/GMrUpcrqnLcWfd2V/woKnZwyORiU2k/Ms65hh124Q8diPHBtwprnW/uWadX4rjoGBznna1J7q3mhOImfSGrI0peNuUjMZo7QRmunyyNzgg3WrNWmCYyo1YbkmEWcTy4wTbB9FyEwC3GvGaPWOnV9BQYEKbqSE/D3BCB7x4jvSMLSpaVHEqrAPOoYcf6RRMwMpkHmV/ilXRAe59e55MUjaEaPPLCGb2C2B21glM1Cwk4Uo+2ogr2ux8UKXdiN5Q806kRU0oUkN44vTtYsZjpvEv6+Ucv7Xd/lrHG6qVknI8EHfNEGM0dGI4876NcYyLiGtD4zJu9ExBjD4vXyyUdMA+LD6n0F2HS90DZO2Suij42zLfsvDcvnI4DwbDukaLDjtyMBFT6E8BVfKS2/leBrKwz0A1CCOLzht7zVrlZtyjnyhQYxj9jv6GXL+p8g1GOryOHF1uUzop04n12uGgyzmfU+eWKXPg1VxL0FJy9x3ThII5/wdBjMhRezIIbu0SYnb8E5/WgAy4LK9vjpZ4W3w930lTx4wNQbqjoCW8PvnUnuKsqgOZUCDFLZf2/vQz42EVli0Sz/pI9UPuw1yC/O9Huf1sy3nVosQj9KWdwaFW8Sc0NBQjw1aR0q0x+/9pUiC8HpyGwMTFWSiqmHEgmUXGzzIatclX0rik3LGl1rfGeX7hjD4zjLyzI6+9Je+mr1OzDUneNTcdhopmqfAbCnwm2N3nE8RhZNvZovp/2F839qhOBpjUQE1iH9Hl99g3jTs33Ru3YJ4tsll+oWsZOACzpLh+lyVYNl33BmcPg16U8SEQbFFULWfvBK0ZYhsxkxIuk2/d7yI/bs/HojWZwjtbiAozDf3/ZboFblfJVEa7uyGJ4VjWBrni/mjPqyFrl+3/8e8QR3Sg9Ghu/s5jJ6caKJH9X7zk9sRtsWJ5qM/63uTJseZYPJ0nItr3A2cY3A7OUBHkLK54LypnS5aViEgQqiUK5Hdm4CPAyXnkvwhsooY7xmgxYaQ4LIODjVai7QrNBO81J+Vigghpn2bMUMYCh84J6VT2e18kLofmw1B6I7GamRSs6mqScknioH5l6tIgilvSn1rSiRVswI4Dmgr1dgpUfRkh4v6ny83LUL5L0O10u5iJpwdy92OavdsnITxdRdEMJpr7Al5o4cDhVrh10uJk8a055qEhB7EAp7iXMxqtOGjcDo4Lcqeb+OenK6ZYf3XAR9LmQCO6uTeVtVd32QiZjFgeB1eNSMqMiQPDEEvR/pnrgLaB91wOtFUY+4Ah5sueQjPxDhkH9dvY9kFJtw2IwEerdHmkAWFvNWABSbQt01CehfcNULbBddPMPUrqUqvWkT9POXpsPWsnJ4yTRka/akHmxEFfHWRNWVrrn7fBnYwQ/Q6TYvZsyRvdVCogk8iwjGuYkLMLrFj2PR6R8tVC2LPx4ayTlkCJXMr9yBI2lVDPWmJ74/gO96D2wfIktwfYnqtyoEubHaJfy2ip8gFuJ90757E4v0rDZJbCpJCIuFO5qwtP7YRaLmQYmP+/FkxjyyftXgU8XXSFyNKNrQfoJ75IN/EeTYyLK6aKLd+v7N5snr27z4F2dgc4E3oEYA5Z2DS8SInlQ8o/xgntja13dZPBGqJXNm9Aqi2ZOooHE/OPcmTeQC/PnFmTvuG5RW6kRmys4+utpPa5n9LTsqQi9Wsb8AISNB1FArAC3k8KAK88zUPFbw+Lh1JG4qZiI+sZoE79D6KfcrZeSZRrpeBwZ7aSejgQwGx0K0pJF05AFpZTfQ5nn61ADcE43k0gKfJfD75Dbr3R/qVjZAJpRq3l4Q2QAuVPVZaBtpeQR//qvOEh/Ou/hDWqIYIhAdQQkPy0iFe+boGa31Kub5t5XKuZyiWwiWrpkNjpFMTmqW/2U0TK15TSbVa5WZtG2rCoBoeDFEZPNsZ3QlXVtxVamJ8oOZWRLGHePUYtXd71h0QfoHOa/7Rv6u92DxxAp+Rmq1hof0zAxIQ6Oj3H4HMKHIAXjUrd8noXTeZ+oCKsLWAgxgAI76adF2sDK/v0BtRUcTf4CHkRXUoFpBYWPqm5fCH+ojIp6iYBBPBlVSGWnVfJNBfKG51bX/IK2pNc7N9wT4q4O+USSR608igi9SD+EvbJzOh6S43hXqeABv5N1Fj+CF02xqYdlEIwU8h2UTlRg/xE0R/ZNT3s5xTiJc/Ex1oazV6yQD8Hwr9m/hqlK5HdJaJKT4Q0KnZkIkZU5cLJXmdVMAhFGU3O5duSuR+bx5gp7duJyktN5MKVvdObA6iZ2tedbcT+uWlvsGtGZSKYf2lEEasm/0HIRhfJ2O6qtYmEd9A+4g8R/Cb1EnWtvaI65F2G4r2q0ydscqQLYNDAec931kAxNmcrlwqci31Zdf9UredcJN/Spw/O5/60/veZCOomTyZaFDaF2hkGnUwsm9VBQTusDaVBJmp2O3b3Ut2gJThRijphb1oPhJCrqwFU+YS+/GAPPI6ACfruultUtVE8o2xxj4Vb8OzkmkFHKvQpf6IGIAioUJJRlZYSQJvJJzdTrLM7+sJKVBiYhabJU+DnFCd3F1ZUsYxcLoyqXVL3H+UgVhdHQdr+GpgU+F8WFHXUG4mEj8P/FNQXNOzUNsh7eC6Dfirmt9i8ESwq/BDhEgQ2hEs8Uao1slDLRzU7anLUYgIuaMy2vy5oObWkYSBaqjef5c+ZzZQPYbG9018Us0TUYw4rfdfOtN6U5f1AWJ0h/pbwdWnrwDVlPvKv7865DcAML7ySyhHUQbBovSEE9V6r6lopGXa1BOAnG/bRFdnm3LY/oP1uZodLRdYBdRwCtg2W/8eBu9NtpBLYPH5mqryqjwpKIS4QJw1pLftzTAmfXdok1l8Llx+edQ/AasbFIHHP5gNR6LcCZI2op0Bn1I4KKDIKAmlWrn10BhL2YA1ky2k/uRiPScE2UkeBe6chpJGT9JLFbLHu2vXUfQgILpVAdqUkucjwqpzy98KcR1MTR4F1ROtN1XZ7EMkAaA259N/YCU/Jr5JVafG8HHJvSqNIjR3UNUhopo9pYdLfWwQAF/uBPfmCZbq5mE51E8KWzny/ePWrlxu1q7KsuLVueDPfjwgGKkHJiLmDUdADxcoPcYywoVNG12LrUQMTG8i4RDgSuTDWdxhEKuwN+1hh8miFMSVq3vN754kDEng3zWQF1OTJG00JiBcvj476rH3rqDdahjNMOZu8UKt5uQZ5dogjQjWFLRlKE3BmEPX5+T9DthfIQK/jJHGSqaHXeabhRuJVW4NkwkB0bu7dW0R9ppAs0tGVr2S180dRFt9dtM2UKPRH9ucTdtthPZjNnHXrWN5ldQeY0X2DTMu2SVlKF//QK3eGgPzjxbYei1d2aKr51zmGIP/RUFlxX6yFuD0EnqUjAm+ZwsS/gSYt6TXv8GCcWVfBHUUIAHq8zrH/cThqRp51AT5sPXF7e6bMrhPWPT4kvItj0TSWdztFGq7M+TeF4tl1H9+C3HZOEhG6bXaVUrQYuoQoUAld58c/Jc5hNEN+xBuIyU4U2ciXzZXb+ntagKKphJH3QkwB+OK4PBeBySIxps0RZgSRToz6sfM3LjsCKhbW4AN3cAE+6Q9M0s3Fm4G+C0KIRWgQtftjedO/vNaM028ik8CP1u9IFuEmFMhYuDE08kpBW35G6aXLEM4Kph3bGl90D25FNUWPfVAn3aM5PTzvK3Cbm5IEbCEsSs9BlmcKOjR0Fd7bEe8Nyr5Ys5lfCB01cZPwkmfKIXkQQyZ5HXD1LTmnLOycVUtofa0NGMbQIuOH+3LYDaPl6XMwJHg9mDfLaqU2g9tYqP01gVyJNNEmQHPzOABy6D2+2zDuWu3xqTNoUoW6581h14VW7AIYgPe/nqxGmRTAs4dxYwoFg2fmI6YehBzJ45JQdMvcCDX/PrgwpkuT4UDEfK9//sGKFxB2/N2a3NDds5Xl5Buq0/eBJT3+O8S6JCxusPFeQahQB4qHoZaV8qwxNvglXS09K1Sw2019gzbRQyh9bqJBYvmKD7yrfqYtWk+KDUi5noKu9KObsfYoyUYkiFZ1nwMVeNv0RRX+tp1OpB4j/KS/yrVqbCeyESi5OKavG+gxc01uVJLBquTyjMJYXkhU5txHj4qPWJSqHG2nhMN3a2/j4uF7g9Rby7/RJ85Ytybr7Ps6AsxmuDuuhdRMvZwxUSy6klIsFnbpd8WSq/4iBBIHlrcoVEgOQuLwZvmOC1QbJt+qkAjO6t47kMtwYnkW0w9gzYv+qitS8y/fDes4MxVVYZ0HNUclNIQrzBsbs4wGKwKuojP2tCK1k/c1hXGUxz9kGbT+UMLCcvf/wft5BF3AGRI+7o517fO5O88h+M0EuAzM7GYEAjrJPlGtN+pHQF7SvLBV/VWqyoUmGPpkgsfDqByK+U6FGuVIfnzM5k8g5SeMIOzVxqK/S2PRb6pl9csv4op8rHU3hh7DqLgRXTyo1AUAuRML5bHxT8G/w+vBxqzimNVn3HaIh7fBEPFA2ELpz1AjIg7fICcrRCmkAQosM2DWWAFUAON9e9/D5BNZAR0lrYFyuLuUzC0poYZQaf6KRq8YXGLse+Sw1REMnrJgYHUAfPqa2QEUyVt7ABnxNeyacU/G/RcVcVxUti2ZvyCBJnZIuf5SwMDX0OGsz8qBjkIl/ds/FmFq1E0wBOZch+jtI06Crpu8JVTENKQ8bC/wD5MnUxwQMXm2DlvYb3VB2wxlsKoh+KfZH8CTb8PWX6g3GewF/zNUrPq811S1f++1S9dwGcDkqit3XhvhQk9XbmlzMcOhKQ581RW46ZreG2FMhVYLWZtX9CeSc6JlnJgQCT7oGnKqoKTNjpyD5c+hlpK8XVkFHp1Cw7lrh2XPEYi0gAS5FC6ZKn8hvFfrmN5L4nk85svJRpzmF1cUFgOkXGrQs//rTp8l/D7AxmSzv5TyJs3vbpkvYu7qo3AONHK3Wk2kHp9NXkwdQu/CvdlesyYOtBQnLpV2Gpmtzawz0Csh66klSbQG/8PeOH6B+9BGQf/+cs6Bf+nAkQaeDEdL/Qf+74X6hhnCcaTaRHlaJ60RRE0kCQoiT+OrMb3yiI5D9OsqG5F0aPhBJRfUWFSy4x6rAb1NbU8/yDzjjHfbA6XZ4A6eK+aSReolf1Pv4sv26LYgzQs4tsOnS+9N0OMqK+LFhe0rseN5oHL0i/TmIylcDAbhPxqzKuEkzitdnQVtG0CG3kWCkqxGlmmbA3sZJTz0HYxp+sZMVCqrmcsE0SCwHwEjwhVLmzX/b+oGwKxoiqUzcQWBnkDdcj7Aj7z976qbjtPHEWT02tlkCFyosPiu7uPkdsyFCzJGJY5R0u4Sqshes4s7YBom/a3zkma7Vo19HYb6bPnW+IrzfAXyuwWmbKz6TziwF3HVUSWgZKwcXGZbOcvjokC9HMoEeNSnRRpaPTWSVv1yu5rqguPbcYqxlARypHKU3MIjuCtOgt3ZkK7PT0xkDQxaP503v2rR0twYtbRh6cxxZlSAit9I5iG0K+QVLnM7+fVm7A3UDXUhF43vjYrrG8bzJOTtkoKp5NNk3k+MhweQCRlRhVUnUCYTKQocR2+PXIFHKudU7C3O6p4V3RXQPyxa5SPoRjXT64b8uwPImGU2F7m9TAlUanipr7zqIWxhVqrZgXbkijLakZ4A3cNtKv/rRTh0Qxg7prubrsYxuDELu3jaWaq3Ej0BIDo0l2UXsnWvf9RfzqYZ3oIOBa2izzQ5kjYYyVZnv/VR+PbhQM1abGr9016WLmFfxyPOzjMRLRHgEnuGXjJypohlZLBv68RBm57Fmd0blB+/CQ4rZ75jxPkcK/XLpo40I9X0aX5fLO30FXubCnyiMQ+qwtagN0vyJHlJ3XFb0x1irBfbkwQstbDZp2Uu4s8p2IbX9NdJmum+q1Yva9VSHCvXTNAskV1Q7qFYhVlpwSgcUNRX75lWJWAEMWRxlL5UE6bprxnC6uVl4iSwyOOJgw4LOdBW14zRD8hr4WqMDV0kcmjsyNV2QXZvEdwLMMyci491joyuQagrjOstgt13UXBKNjrPh6ftPIblj8xqGC/bR6Pp7KwCrnNzyG+pH3aGSb4jyCI4M4q3MRinwykZtYTJ9/4cgKZlvEZtdNZfY1Dh7cUGuxGNcMCeQCUwD1NvlpRYExvWsBq+uor6hk/q4jF+jxEwsE7Dz9EWuJDjNXwsem7Yk+7mjzm+vFWo09TA9DumPD8Mbmam0f3M2OwRsqsTsOdLHXBQIhi0yqO7kgWzGt2AqkmTeBTRqe8KZpAY21WcdTrI5CsZgjHnxmyw8Zb5b9ngKwhlAfgln+HGmYCc0bFmK7GoWcQLRxaN+iRyRZNFJOALUd48pvKn4liq71t13u3hlKQYdt1eT3lxJKbFsI0XOthvO37wx//t/S5mQoLYyqdbarivr6AOWwVbMehydH2tJS4wZEWf/5FPr6SUHMR9CGmZKsxmk/EsQEFTsou0GuX5EHPE12S18+3n2lo/nDvLCaptbgSR7IXOVLNruifmDn3WYfAuCypzxs1Ez6YzKF3slho5H37+vlQMYAyV7riNv0LixS6nU3i4KH3rg5KEVnylcFGQUJIznFZQcavUNJ1/7VcrX9z6Hs42TayHZyPaDneCf//XXx/OL2hNR1EaganWouUFvkKeHfTGrSO3mTQL9m23jqpgsgunGLQqtuFsIjuHzk9ldgFvh5aa/wF3iYKhlPWl3pUQbjOZMatertLJR/qDgr9+aCyfpLzRwOKs0kKPhkeZ+oqkbQaI5j8ivkIiuIJkes022D+gaaNltbcl1otN8tkywc4yp6U31AhALxxOCDmJ/laGo1pM6X/sg/Zz/Qoico7R2d9CEwO3jvZ+pz7xgwINf0aMuS/eJ/JiU0DXG9NVK3acEGkk2t4ONem88Hsj6UjnTjS7i6nt2N3Iekqm+oGb5XLMj/NMcwtOMr8YCt5ybUL+hm0kvnVY32R4botoJ/A8FOFsqcg1KwPyATXBG6uXOQy4yWHlJhNPgl9QTBBfndT/+g1vGLYYrRXAe4WBdiESWAp2fIv0JVuACVgMQbzpklxut2O2ldrVPmITVB0FLeU8697G2b2gf8iZgp9U98vmhkXMpZaafeWMnlLL20Bbs71P2C0WmLAodBWRd8C/ySmaDe5uCGAnnHktqVRcUOSLvvVI62Gm1g4PUhqH/OqCNYXFDuLfvG6+YfbMyhJ1fxZFwxdA1RyfEutmiJKLc12SQTzrboQKWuO7gD1doHeTZuPXt4jSWMmDXlYoSv5vJxg9jBy8/rhKWMPNnFHf8He8mDoZJsaYK/BqZZpcjZ0w25es7pnhpqdZ7FTbgHWq9aeDZJDUOJCyf071FZxUb56zNOvXwDtm4vGZW0y6irmGmYbfLblgGaEnsyUNYJAtgOXlf3o0LmaeUpWqln41DBJEF1ttupGb2MWBSjAJzz5NLpioIf4Hl3mFQOPoXM2MR0dJrHox/TTYHneZ6cDFYRw6+5ixsl4DUV8pnYTyR137Tmc+l1Y6n6XVHFYUKbhQ/NSluBiXCspfAQzJpR8lnBxAPUQ0wAWlaC25HnHY4DCswLrd7/K7p9t4B9FiSrdj5/1OKwu/MAMc5I4rXaGJ0wZCnNJF+4OHwrD6QARRIOUmOqkP7/g6ggzMK2UrTUGjKMmw1ASdTmTbrX80oswc8kWGBI7wtCz8X8dnUa9LPWBkQ9Z8gMvIshX6F9VqeWNR8Rm8VA7aeALM+6znz6N829nc+pYXBWSCFev02Mt4cIuk5k2sLB5dJsitOTbjXuWTzm6rRWWrGnjRufryKZV7ByGM1xVwCzGqivq1FYy6tqin7/LxgA+gf1fkpSpTVAzK6AZFE1rCu3RNiAYpwl5DH684AQUN7CNkgORzkeNar9PkMFmzS+JZLCSbjIFjcYyPNQHoBnhiQXUEy7aBm8dXpIs0PY9NatLbzT2Unsn9iWGfZNUCi5WY+Xxq8mn8qxo2X6kl9JfY//QxkEjudlhMwi3TSwQ/YaDNKx7t/mSoAsuC5WJzps8yxWCgZp+L7Db9+Uds1hpP1alN6IX/lkSVz6AZVxyOqlx2JUpyXF5iazQ/MSpnEx18vM3bEQfqjZjj4nDbcpkhg0gPc4jSxL4Xrq5bK0F+qniY84sV224mdIyTU3LGIoKjvXBa/OS1iFphkd8O05Ftgmxg3X3lPhkVx9GEgh8jOkk9cOCsFutmbsjan96H6XI3wNlAxow0gbtqmkNlzxgVJUcYoUGaYugOlttj3cxWxH/OibUs0RIPYCHtzYrqLXrKmdf94NnKgMr4sxItunNaK54E/tihWtdqyiJOaRB7pg5vLfGn/VeefMyLHh1SvEvJsOi+VoF5CTPl6y3zWrLw3apuhtD7OHAXcXYsUei4pjmi0yMXuvy2uw8u2xC1+B520mF+NaGzj2UoX58oAErySA+RZd553xiQ0edCtGhObXtFnQYy/MQV7uTsrW4xRmjZUZvlXEiMIFP6mg8bAqOzUPyNGONW+gl/+g+7H2n/h4lxkUoYAFLg9NeDxoMI1gt9B1pqjHEbN1BPebM9SveMcFNI0EunS4XIsib1Qq/yJ+GiymCg6UHWRxfgGvszj4Ug09RhOP2DSOnCInE3mY67eynt+ScaUBBhqxnEuRLyuqlpPWqEUWKDW2eEa6zgY7/S6jjML1nLBTwT+YeM/Bfc/JpZwKXF5VzjrroTpKMIFetfJ3vTLfEdAgw1mnMZYT6AC5n6irv6iVXiyil/cMSwPghGmB2AhTBj7ihBl0oUL/dHHb+VzX0Pe0tN6gbkxElD2/YB6EytwfMaIb9jdtqfFZUsSCbBoGbZm3RHp7gJAa7F07yLmZSOIAYcgpTWgAkVF8rQxOOoGSJxYJlf3HVgpif2o7hlniNB43HBckYCJlRlYfiF3Y9b7Bhq8JhRa+SWLqIuVm37N/R7TJjycDLtMGX56SDF1omAaWF0hD3PFfORw4Qh40uOkP/eHHAmmssT0J8bd1LgTD7G7ZZAAyrOk63sfMg8maH4a0hTZD1Hi1MJsJuwevkZUkDLoiITb1cgG13SEbIB5dxQwx0FkSz8pMWU+q+az6Bk7jAG8HG1KXJIGF7/EZKPM9HzBeWt9eavUxxuLC3xNOgMWn1VuGpkC+pXfGX3wgImvErjMmtJtUejCUSE3keRPIab3A68epNG1sT81wfhSG28lkWz/gVqA+Tga1T9D5vblKmfAJ0oEdYVoX+SYbSgcgA6knwTul586AJKbun/dN/+vpsoe4FS3Cd+ehsjL/OuCQ/C+Y59Tvrq86birVB7v+mT/mMrc1MzPmBSIDOi2xv1ErxkXXY0fdgvQscl13794g3PtwhVw4E1GaAGYpxcecayE2MWrgxytgmgIEXoOCr1UbI5duV2Iu9Svrflr+Xi0PHJ3IVy1DkxD7JL2a5XZe/kAukan0xVPUMKIXSgINQAlMQ7j//echzKkXrgbOlQ7j2bBvxvY4KWrTN3A9NAkZOUvRp68YmNAIDv0FjzRLxEBhcsEDaa22MDMbYym7+FZuAao10q4U6Inhqy8ww5GkRVwOot9O8zwMXvq0go6aQVYkibOtLELyB+D/32AHHQ8spJZLRw0BFUwmY5cvlALUHrNcsLUaeSap4x3mG8cSYhG48sC/WSouUEII7jWeSc9HT47dC7KM/QmKXqu9XHRzL0UdFzxZadx1OSulk2uWquB+WjpE7C3PrLj6VvOVugRz+DEaob9++yTmzobz3f/gax2zJVoZMT/yAzkoTTC+afsPYxDopP5KlOTrMxXdogGoqz/igonN7dWgbUellRcX6JUu5rDi9rT+NE71HgdUUtxRfs6w7x+1qMWrASmyvkvKyfGhresvzwZBBaNsklFPwwwYKF/LyjSnsPeR2eQbDnBcfXJ3y9v2EKLXuYVQeGI+uwPCedSuIlsRlcKomsvB5YaPj6TX4AsWG+gSTtJDiSr8EeDSTd02vdRHEwyRe8YBh/n90jNbOkhCpSW/Y8uD/33dvwXBttNc9lxZJNZHOUkburrCfGve+ugnWCMGOrntA07oI+cArvIB6RBYq4EDNA8QRiVlqjfI7MJktvKJwr+SiA7YU9W6kcgFbu2G/HMOojUL08oukh9W3xpNibleTiGqly3RG/k68ukntkG99EqHh+otgl129Iys+ty8Lk6WG5AS1tMumvmAzTVfbs3YFXpExOFz8LXzH0HaPlgRDR/Ls+e7hjyo6KcppPFXywraAcBz2uikalMQUOeHK1fpQe04MXxz4d92LhxEJDNOi0aBLvq1pFk+tsOG4aK7SLrmCc2yi2VvZVzGmqmzoDRRN+9dpljmdfPmsWEXB7Yrg/B51C3hS7EfyX/gzVbgSFvbBltl+aWVs3l7RC0gQ70K42k6hkaDu7reVx55Mg5qQ8qgqIGTaM4kp1tUrF7Q+9XOEQzbNdW7O5KHxtzz4SgITlurgRDpNQY2c+MTV2+xi6r6wbGT1rUzNaCUb4QQkL6MwZ2xiph2X/RRfYQmX4OJO2DGBZBIsAIsM28+dK3NcaRu1RUn9JnB44dmfVp/g0FeBPY1s/jrFE4BGZ/pLUFM3YID4kVM9BCTWRJYIATxkaE4EzDSjrHXhDUd2PsRXsofov5LmyouqjmKlllE6spXmYvafsY+hk0Ve5DwbCqTZBAY86UbHCotR930Hnk8bHWDG6/cLr7yIpJVbLXC3vMtMPdLdxKb3Ef8lHkGbDPWRSd9ZZU3aHQt2bw5aBtlLgHOVIRYaLB+Wz2xAdVyv5deawfi0UbC1m6G6Gn95/z9tgaABzrlXux596BiRQtXhkcfMQVioVkivirTD45ZvAqdA5ep4pZ2iyHN7PcUqIaBx2QmQ+Go6ldndHobXg0aY9pf26c51mF8Zwk6FOFiNbpaWneLrO7cS2I4hwP5CHtVdqhGhOqRumbiyYjuh+oj3oN34e3ldTe+kVCqO789Wdr25sJKWZ9PJVBDQ9ab/MGjJhsHCejqLcS8bDGZps8pqtgV5lp5lGn3WNdQncXKsji1VN54P6oxZR1jlHKvh1OlszghkXcYaSmGae1F0yknlV8dW2nTg4O2R2kyQoEPXSfv6lDqQFapZ0/Orfj7cUNFomVGPTXlpiUOFuCpFoxkgo2NgMZhaLfhL3xOGwXljYbXbb/74bAYlNR4u2M3X9v6wGbDZbqv5ctif+uIj5TyzJXWDKfWOPUwjMb1nctTMJBMqfOL6jaic8Qw+A8M5k2zbrcv0DINpWpdTec1zrm+zDsYbWeZRtPFyftOHblP6m5JHOFS9SpfkaqCRGmWhQCtdsCiLPCkVfOn6tcamwDqxCM+NvBhVu24vWr8ZJHJUj6KvEsTSPRALxwidcd93dMgj8Z5u1/4XTMfCCTJn9EE/AAvw4xjtawdsmc9Xaq0pba7XGXB7SoVREpnmYGep7/5YadcsOMSNsqn7Ru6AU3WneiEcI4/J0wcuvdE5mmhM9SFjVcJZkaheaona+B8ZRb58sA8l9rAuKFK6TizWQWoImu4Gx6OTK/zIKSh+iQTWD33q1br72KvMCE614fWvG47gKFlHSCdbtJy0oD0W9n75RsIezIHk3Hl4Zi7jNJthZHvvfHe7LPmQPnvpprcadl8cQuHp/Y/Gdn+FNGVk+jfs4CneFern/d9KatGgKZA9kvM6uVaIqz7ZWcLJ7tpiR27zdNjd6lfw+SFaSUDi0/4fi7rSs7avx24Aej2z4DuDww6Nh9PdIwal+jTFAnk8XqemztUcAXHCtuONMtneqqTfu4XoVPcv+7fH9SP/1fkDsby92+BfOg84COuvdfiy6toLwAcYm/AsLLRKeVFtL5eAtmgzLfuceey3b5qPnb4nQKZZQBgyK42X5leo903G1fnb/ovJzCxHb97JGQhWGHTFyEgZ8Y5asv1Dsiet0O4Fh47omaWMIifBn9TaLUHuQrIdQaXLtZRFjRo5uQgcPOVqrfnQlPdqZf9AE6mQddjiqERktp84ohK+QbvgWWo2bX8Iu6v9seuliwQalt5wLOMcxMjlx3SERfFQzLsY4rJhzrBe4JYS9OtW2uAtXt1izhnLmWrVnBfXXu0YjEqRG1FR4HuYBcgwa5F20pUaONAVtEfNd5bCKPiDtVpUhJmQ88bYkzELvmMOrbTmnEHIQ+c8D6PVwPf7ducdTYHfzEa8W1xEAKe43ojJ1RZO5vC+KiAChDavBMmL4vWpW3zYZgELJLHHHOcDYYlqNdRdMjtMJ6JvG+9SouMbtS8/nssiaQnkw22GseirRzsMOioKCXV8xD4wRWZWnMn1XFDcqq4QJZ6pS0lG8X5cL2IAJKHs/7GoaJiOK1EuQyOykFdxc8HCrk+s7BA6DLRoZ9h2k+1J8l4mOnj5s+pr6fgCq8SNzn0HhmWDAenWRXtGTYGD6IsrlQG7vWDVgwzIAl/2y53FcqwWlWHFSqyKfcXTrz3gaLrO9FWlprCvF6F1g3WYemG+dfw2gxssaNjkqR/VQx67xr4aKOZAsFEAJFJFsJn8+hCCJQESBy3D1wbAqIHj6/Hk9uS9DndBeQHyNGIrFkHPmjWGuWfNhIErmbMW+yHHfNe3yXsQZB+KEDa7EdpyAsJEDlGKI0IdVqNZXeVuG7yK3gnVkA32kauJmYKbShqj1TIHHq1Yi3YldsXXqkEaqRDdbX87AO+Ip7/C3eit8Y0IIhe/wvSMID+10C3NUprQLE117cbIWkkbDCoBRetnJZnOUKcz2z3oM7WjLLgnBMaMZ9xOs69/x3eyiUonR1A0ZrlYw4kZQCCmaSJniEh2PMIk1nXk3vo6iuyAYizzOXnDtEnxIfTzYRPs3XvlU+7rmyuq8oP4pbOWIoT/dmlQyYBZ0uEn4WGomWXOBJHAsV/6MNBn9+274XBeMZQcim383plYh9LWbK8oXuKJEwlpQ6SMDzIgeJUB/OTW4MtUK1vYC0BH3VWZEq8vL9kfCzWVkGyeavEVkZe/0r958DdSWSIxdy1HExqmAgp+ojqIMwwQ1235AIZWdtSFx1itSFwodI3ypjSAjcJldHcx+3gLToynQjbFsimeinfQ8Z0XlHddyNQFH9p80TVGjNgZkhct2nabXbudTkdU+KBTIfQVkN2Te1QLV2ogUJI1ra8OZlMHdlkAC3owVsLzk87HkV4jz+k/jqfvCSaxKxvTY5HwGgZnakPQez01Pc/Y0uG1TaaA/nML19p/bPJJhavlLfCuJj0qKNVEID76y8b3OhiI0r9eaayGTLGxhTNmNqVfPITzLPOnWDmkOCrpnAQTWxVXnEsgmA6WMJtj+leT2HgHxiGs8x+b06GWgCdH60x6PpULdagp4AzO8yfeUmjksnATsEr4fI+mqGU6FEsJV997tItoRUv3296FWLhWt8jBar+T0zWHhG90wGIKr0Qp9YnO58QQX5YqkcbM7fIbVLq6lpyLOGX7i805KMnzFyDTiMVTWF2bPVCWTktth+ZGAbCOA8vBuVUJPUndS3rvbZGbkc0Jy77wIYr27f85N8BBLTQJMNvK/Ps3CkXdgFbxRNOpGO7PLF5zGYcXtf1VqImoOgbaMuKmtpWtP/1l6H74tO2z0cVY3vd6WZUpW31or+Psqd7QqjR22SAYC/OEd1WbaXapAXfGzIOEPK+pJUe6GFgL0x+DvguIogp3pW+zlSA06yS0x76pjdvhzrNfPiOEcQL+HuPA8J+sEKlWuK8rluqiRgIhB/ePHhJlgI4+KGxC4fkE3box9pEIsmepzt5VWtCwUxB8bE0nDp/qZUDlxBU0q77Ldw6UWaY21OzdYXNDMFFc4jZyMsemRmT5xzsT9JvaEdyNQH24kLwlVWqd+hwi/10NPnTQHi4fN9opcfpyDDvpJdHeYAcsViX8Y8rZXJVAaN/wLDXlUWQZIZRBFtXohnXSIn4gwWi76IYhDRweK21JubgQSUxfQmg3WD3xyUUaS3Lb0hfCQ9eIuPNYteqgpm1cqiP/yh8Nag2uG/IvVM6DgXB0KQ6Brjv2xV8nEBG4bTrSWHrDPZBrIBpy4lRIIjCL+ce2xoj3YdfWITKncW4vyZTradA2P/I4NYhC7iYagzQ/oHW0g0CclQCYSonvUkfjEupb8S756NDuuswcZ8Tznev7kIs6Lc3mQR4h4cK96MBx5Iko0e3RPYWq6u+qGT6S+k2GBWY7Z3sTQwFcJJ9W0Yl101WKkhFtoXLRQuHPSJoSwN5zRmcsyo9pAmJhnESQ6pCPePmK56CWfLDNYquVO4gAa6goV5KjZztTdH1Ko0aa+/bCFg+16TXYYcBysBIuAufGn1IQKHCig1wXr7bJibafUluAnm1e3SqMd2stKJU9tlpsGY7dLZ9ShkfxV4cByPHR7HRIWWWX5QX4qt+U0VkHKem37OJUNIDvD0H2Xac0ev9dMnj6g5zj9M5MsBGbeK/c3e/eRK4VQtWCvKo3ColgOoYPYr1uK5NGY0te8uCji77Z1Fdx9+OXy5j5is3a1KQlt1j/6dZQz69Tw4j1L+5YMNRWrcayIfLrnKiCazHqDJzo3glzXajMIgfYgOEHfBjWDBtXYCkfFAMDSns8StR6Agm0PYqJEA2BPQ87EeBv+HB54i7dzEWj9igcAC4xo8WbBOH+WU/4Z+ZHjT0oOHHQNYtqml8ZoEQ2Gdhq5LakwsGpnMkpmd3AXnVMrcQ4lq6G/Rxb5sHNr7hahgJKFIgB/buoP0tG54AjOXxHdA2DWjOTasQBZrKBB3jlol+rGytvzW7zEKldNwRoVgEeunDfzzruzsAbK/PaYU14/H2p8PiOuLDOLsW/NzbzRNr8A/KU6iqMNIqWaWCkkhMhdizeM1HPMvbmYfJSlFQ9i+yIiaGyazv82DV412IzL+kPQ5LLQI0gvx0NqX2FAn2XuChtbAZWSK9j3E+In0alpr2IygjSuaMZA1E3KuHcK7IdlGRjZE4Hcg1wVwrrlE601TEqST6dViTeb9Q4gdU5kn3XR893VlO7f/kRKdadgGJmbaeU3oJd6nCW8cKeT2+XHl+asfKRvToLI7cZf+NzvSddsdRK4SFLp+MHPHP63f68/J/MbxvXjD8HqxgUbJorZbPZXhnU5/JnHhTBa5Nh8AMU8lXiHnYH8qe97u0i/2fL+tOrCTS13EMZQVvjM8QPgR2nZ7i1hPcWeVjztFqYiLBxohzvkimTAl/OtOsslI6PQulRy6SmRW+DecL0AmRC2016IfB8WbN/Lzg88WND4dmClHEGaXg49qubiqA8ExMiJUSZnElI3DmTEvYPYQ3sK2f6EFR18sBut+eFF6jlavn7KMrR6hGTzR01g3JwUi3hQkmccnSucPCnOKPRgxUP6murowWyfzeYn4Wna1VX7mHjFI9yUOrmeqhtueSlX4g03LLxl0ZIqaDf3z9i6oscmsqKgN9Xh8YSMYQvUdgUB4b6aRithIsRa1dSgCSWLHGR/75+o5Qip7rwXix893pUDQwGOLMOE+ePL5USC/YuJeKl6bgh0RhZRqe/8vSzMZ70+c3UZ65rnGCM3NIKBj4uqTRDc6zk9YuS1PkelrntNC27FQWPFoGFrW0Y4FM5MaryKVCCc4qmefycGCcDI12bvz15xM/o32dmE9/N+Dlx+HVbV2IZ1WrtS6tumZU2fF4mkhNzyNN6NFdBOHrKWT1ywrFv4g3p8RkENMz/uVYMcV7AVJtuLT0B7UAA2KB8kxPUr6JOf0hrLdfYy3Gx5xFNwCCiVbRAm4Lr8Xu+NwL6TH1zqeTu1/d9uq+a9Wk6bSTlGWzJkvEYHkWapcNDyevbKi0Cb/0GqTTmMX3R1RHyz+5UE5U8cexDYgLWZ9kUKLLnpMBeGkxJ1w74DySmG6KH4CDmRRI4S6iMuKrVBoSfJA9EM0YvaEAb3Q+eB7Rqe5T9G0+62seZAP7nb+7w22cYYFwNfRkfbuMBZRgv5ifJ91lFa4n8q784pVcK7rJatX25focWDeR7LH2Vc/Lza9scgKn9z1gBRfikyWq8bv2ZrUnGxSJMNDletObPYosNyJ7YYBREBnUArxphilmv+I65zaa70couEgBzHqav5Fy8d8rOJWj4mqgJCNs9yZY4MM33XAY5kZ7a+PCvOXCdT3s5dtfeFvGBj5wXWkafRUaIl3/wi7zoRGtTaE4hCjZ0yzo6nsI8smp11biJ85pqHP8ZmO1IGdS44adWyIMuw5VBym2lZJsCnjfv9UkmpiB7IfrMIO1cdnfEEd5o4ypwFvrv9g89QKVxjPTXD5agCbXTNjM188TgBeoM+UA8kE4751nbjusUjXff6NpgVy71Qx9QfGHdyMTxa0b+9SjA0TVE9f/d8eVfbU22auEw0MFJA/08BYfjiUOONS4vB0NaMw5l32l8yYCLI5GrdbQhtqTW4czixzfSVcXS9glzOwVzTy3OGXEON+bIpoWRY3osYI9rgXSRP3U0x7vWeKdfGOZMfYT3xBt3aPS9+U/ymnSCL6HbnKeNeP7JTqO5Y22mphY5UxN+7rxigHSqz1JpBUYQATmJ5v4kcGtsSbWQDAlyqLccCC8cbJ0XU1c8bkWho6uq8iZkTVSfRuyr6JyCLEZVeeDlplvJZV96GjNu5URobikEEiO3+8ou8Vr54iksGc9CU1YtASJrUBBNwPvgz/NQFXew3653+kYgM4swkaEBUij+Y9FBtKEKKfVw91ht8nk4XcLDKPw0znndIZ52lu3TtyMRP1g0KaPO5oI2wgAt9mf5GmHIyGPEKBS7Bu0hqLQKvBh+FyPzvDydHvBNoXYZa9i/b7JUH8W+pIbRePE31viF0r0dR4rWNZCDAygMmwsnUX6EAfiKSaIcuqlcvCRHB8ebDZoB2wsNo0coZKolxi4nUKfPUiGMnrY6HPVb/QqNijZDBTrjLgfSmUlBHPJ8se9P3JEhT5UEZ6jLhZJsXUA7DxMNCxZhsEa0U9q1xrzjbJN1dB5j0dJXjnYSAQ6Kn9Z4ZAYl8UP3l98fPWyskQNATtG4wfnz0EmmknuicALYG675kskfkY0W0T+pYR7ERH8Y0UsrDca8kUxB8+YYhJnQLnRx5JDT0u+1LVhKEx27kCFNKADMCyROoRmPOtC02iTMrT7TqFN1/Y8nFqS0x97iibkp9TnABpTvKNTj9i6uUBlCLCdHdYQdCYrJi/EGXUyK0mtzUrq9qIs1ABL9EcGWUoUC8mO3kALO1bedWQA0x6V2ZYF39Lr0Ov4tD5ifJr3LTh9r8pkUjYM4wHKy2qPPj1BZVPKv9Cu7iHkgKUTabaxq9crJbCQ2KL+0bcex9or43J3grZsGEkSqFz64BxaJu+MZy30Gb5KRxolX/X4YgWr9BzFuWUVCncwL60IZLeVXyt/0nqoVQTp5p1rvOPonSfLuTwvkopjxDZqxrsVk2CYE3F77ZADo+WdslHdl4b2vnFX+fSMXu6dghTToWdoUgvvwiP5qVQQi+oqRVxh1spjkVwVjds0mweAfTfiFH5Bn/7BPREOnkaf2hhO46USpkBCEF4fdGgh1MkwBdPSWcV7U9S0pwgDKy4ja8VjTUBcZ6l800zLWkm+3wqnmPZPAiT3egljyXk5sUdvsnoBg55KBSGoPd0MNUyZ1fQ3/LmD76l8Tdp3JObU6hf8iMfzbaivgNIs7Y5GPT8zr1bhBC3iEHMOsfRbL064a2OSJQY6/qrG6CTJVWhM9H1yNMGvUlvzVjkugBZ394RiopdOiuhP8w6wMhmA0Te7Kti3ewZy8UiFUrNQ5xWYfAFd6DuSl9ykbqfsxUaQfxCaBCkAF4cKUMqHEdPs7o3yDny1/Zzyll7dei075NdY13YKyGVxR65tVcPhizNltkHfoIJhcKiEcAH1c4BJhF88wL3IBw+hsT+mDa0rt3PPN3rzIoXjRYk7m1PlOMX1NLyzsKWI/fIbF2Qx2pc51F2osWIw2Z2vZxiIumP97EIlx7M/RotPI8Bm9cdBO0E24+c/mhFxuC7+v+x3BM9P8ZWPSTWhm9OGML2w1XLi0OAF15JReALVzJ+FqwtW9xAQ9lVaunFpUIsTXpO8gVm8NogerKT2ECev+5ld7ZdREHA2uPcy9Y4jqtvR8ABZLjnAlp7VF7solaw36m2pA3CIPgHXLDNYXdr8ZaDqZAo9eEH8VxXuEjaac4kwKBVriz6F/rk+blVCVJXong4BLGVm70QAvqZyJ3b6ooAB7MIpka6tsmfQEYjkKGOQTt4dKBhNypz0lhscQHS4UkgauvpevgyaIgWx1mQvwJvlO25WhWoH1KL0oGo9Y+SFNuj5OKWrxqXOCzW7R593TG9Aj1ZTZNFDJ9F9mHP3xSkoJ1qH7tZRCl/kQkya8D3HOBqZ/F8YRzjpTjKKTevKS51Mov2aMn/Sp2f4W4SDHa9vb3/1QbRLGR3duNIXHB2OOttVunmibo9ddLds62DfUBtVRmOEASWfAFLyvhskRpdlkmyDkxrRp2pfVevg3FJRTAX4FanMrZ14o7uehX5qcCNTN3+4vGrj1fDq0YfdOZtshDhvin8e2GieryLJe0eJQcUFisFqvlvU1qhJegnRhNe/xh35/ZRiktu11sE968K/0vWFsRTwQ+KtgQw80J8zlf2ylpY2Ycg9caN/1mEaowC//aBVacTS9IZ8TftOzP6mC8XzEp9VwG8dwgfYduHSByNIFErG5hm/YO//eqxdgA63/UM7ei3Gh+B0XXWZdQVtvLdffOGbdwratcTDuMfvjIkxHV2rJ2pfAHOrK0NKBUlSOI26/DmZgTQzd/5xd1A29NDzSwBCd/zMZlzk36551jPgj8Y9zdVz8sn9Zvw7J/0imnhsoXxydR7vSLbqN5NcG2JnOnWQV8AO84XJ/aB7VVj7des9AgZyyTnWwjV9P0GlwWjvA6OXzWmq+5A3hfZn56C6/txDAsyjPklG0HcGcb3gz+sbU2uCrPrpZzkjL7WfV3MphztaQdbP/5nA443NGRIVefAon4NwFt6z3Mi/BSmuMvgFhDarEi/AQ036bWliMZNYZdJHiWjzjyxB8FkKNUI8D8qr/oth9vL0v/S0Uan+zDswTKsxF8vNQfmaIiXX19dMANeQClHXXN0OC80MqP8BuaNBMQy55Sy9CnwrMqVnXeaqaR7js8fIm0NIF29lAfH9mZeNO56RpVgOWUcFCi+6xAWhT2dW8opDiGgAACgZkCNGdktVvs5UqkYkYXaxSEvnTVAecabL7/ct0D2TU3MvqsNHYPyTZD/jkNaicmrdsgoKVl2ePiTBscqu/69AfclOAg1Qf63x4E3KO+HUQqHudxMKljsuuF26LWC1+JvsIk9n+EtX3iqv71R+NfCVbIHagw2MtoZtIbiA9HPk0LVtkcB9Jdl61dWHe42VmRRUQtJ3xFgD6dS6xeAtQifQIFkSHZ3Jq3Wkby7RoaxUoGR2XoGMRHBRCWmPfRRqUgJfdJikeZfpg4rKet3eRbfsZdUojgkV7BqU1Y4Wt0Y45x+Rt/2pdplbwGD1RBDeewSNDR9eOaJURccSWJN66An3znIdnUFbvbD9pGaNo9Ct8m4tDbioCK9SoPk3XWwfrnwwvXoc5u2NRGSxSIcWoJRxeiie/KE8S73EQLNRJ/Iof0XpahvW6/o0nEtW0j6pKDLl5E2F3B89RBiMEHA2EiR0ANe7FEYpJP58f5/VTjn5Jq4sz4XPm8bKz3ef9h5gqDRFna76PHOfDmx+dvsWMQz5UYmqLW9KqVeco1+4pc3VmWyDPGTUtdtsE94rka6qE0B0KC9m3AfnMv+Uo9XIs2K+gQw/dC5ReFlumSQFIntu00QaVeqCn2iFLrJj4/jxI4PRoGSEiMvlEppBR0aH6SEwmxntabH0xXXw5Q2zDETiT0kMK7HsgWokX7t1U5ZQAlzLi7gKgYvFP3MHBOgPYE1r77kR968gvxviMUQ2gGOO+6jZhTvD5DK80fEmRz2nxUyZI1336xZj5rkbGf9PxitnIhPxJvRke2MnqZg8e+g8wc0u7xBa3UwciBEdNq7923a3JljH5I6PLPcI7/Dk5bXqXDSJWzDkKC4Mw4mEMHnXpHs+K++ANRNOKekd3XtYXoCH49ZvF/nrW9LypsYDj6cMwXbTIPV/+P5oz0UwwFkq4gCc8f77sL1yA6kuumjupmr9fM9osI70fI4YYHn4e/4oaoaberf8OxG7zwH4aBzwt/T4461KySrfVN+C6Ujj92eIrtaA218KASeisLqMDRgGfNz1NrKvb7FP/5FN3WUPf3QbvtiFb2gxShIftNgN1LyfpwilE+Sq0aq+kNCV4ZpI8Qzu9gd29cKzZqSAA7A0p2P8nb/008NcoMrIUe9IK4n5ZPSd7MoF2U6nGBtyhCvv0T0YdHw3EQn0PwHLSBR2QTIChPRByD0/GDzRSgpMou8yqbsyDuf0fhGeww8P9ezq8yu1wJEAGKNstMrzA9tGGH1vRWEV1xLK5fPbqYU3sc1+0WxXP2jECTD3ohIhcYVM/o6D4fmXTWxpzI+ozA3k3U9dyphQFfTzqplSAM2j8008hX0dprjEkybN1Amv07q6HSwXlzCPKVPECPhosZDX2MTHTdVfHC26it3RN4SnU7frysFdbTPqep/oo6n6Ha6OCmqOUmK+kgBC0YFThSb9S7Jm4NW0siHvhrVaEMI2Zp3NxN7xnxPoe3CzgxxcahQEU7BmFOh0eTydYJPgaGITjxRUwf3etqWbJQEzC7Dj11OJesF4qa/useKOA9qSHO3XsRKf/qtCNjAzrOgrIEpP7uBxNXmBVBYPyOlXNmfc2+idbLYEdoYkjIzRHrivCqSvpdwN0Eis1A4pZDACFElgCX0uWwmFPorAKVI8m4ajYj/+yDA0439iZU/YRhpTUsZ2JUKfXt4mQ/z6SKbHt+NvvAvWyMerssBllWpQ5uKCLNO336HwFb+MdLCZC5tUkuEJzAwE8UPBvN8Lc4FjvyN2+NbjphFiWPPp8N7weP/h2ycooI92bg0BtsLsnV50LWZ74QKG1MMeiP7PkZBOXyu9Vmi4wfa2aqruhk8cXexcme3VVhZAh41ze58s5CKMzggW2BkZ/5Kpiqd/8RlBLa7OZLpHo17N6uq0s5WUKB1JIBaeCWUIr8vozmiS8L/TikzDu6gYTc018REpgxU0K+n2A4k54GJf1qMTgYbAnky4nw2fM2QqBHi+iXazwEPSBLWo9l0fGNPaB/avswP+47wKdHzFiCTuCF56LkEwkGs/ZmKdQt26Xm2LBUi+eZaNXsdfEfKyIxKq71qlltFqtx6BRAgkVfvu4Hd2JfddAVTAmUyGDI4AIoWdhVlqqaXaupibAlFatjb2TnaYsA3tSH91/xYl14yZ/ij86bgdQsVFsSL6bnh1pqdJ+KEoKSS5CFy0UPGuhDxWvu/pixJ3nj3ZNIX1XaczGpYjCLrEbeeMXORi2wDxh9b0thg4b+z1r6xZTe6kPhVSo6TANRd6rukuWO/PFMigIKJN9EhifBlfk+xBSyKORSYzUnj8CWAz1efuOo5VqI6RZNc/FwpaLvCnagmEoDM9QPe+qpgQFMzvMOSuawRdi6FXiFXuCpzODmcXo/vAPMd3T0zV4tk7DlY2iPhq3PP95bk5GQqmL+tDqQv2Gf1h70VnAT242IAAiflx9Xb0XD4jxtYIrn+ydckJwKsD/nu4HpHvO8cSToqqoYlz043F1zOvmUSBrLkbh1VrxpPTPeeAux3sTXOvu1hpCjwZyhNXiS8XQGrV5QvhRzT6pA2au085BWEJYFTPdfikkP9Zdr1496gJ+Kr8OVgusewtP3HF5D97m3rwD5G96wM5sk2cAdZfOhXDMF9cniOuqSRZ2io5dC3JvQUgflkwQewtcBfwOEA47tGXgbwWf3c+gfKTxCOzQyI1Wbk9QXySCkMqURG0dM26w7imS+Z9JJwI9l2s+6X5CGsZzEVFj5xp9d7L0WUKp0+lVXyjBZCHqOMEn+iSQZAzdpvHkOp+K15kSyeQ8lBgIFJx784HJqSZBJPKe5eRSmkrhqRqXhnohILvuNprLXnPhyq7UrmiKop6go9ILR/ei8QjSVHphR4bW2BteDy2vNAui5A/erxgDdhk1f/cYNuTSCov1p2eSC/8hKwJEcGG0S7yXRSON5yUox9IaotjYvZfGqeR5sVckR4wlkO3V9A95hm6sx9BcFfLWhjZ42Vo5xr3Z4JEQGHMWb2DafjwwJOkWgFb3Qu521qzOveco8xvFqdqCq1kOf6fGbud7sZuynOGN+TT232Dt4c9FL32dj8ma4I8bnZz17ig4zB2BNA2Yg/z110Spb7Qg8LIzOBW5tJnEvP0+g/O4iZhKjibG2G1yJBcqGPRVVbJEpijOvwa0l9teghEnJjQ7a1GO2stUSOhSac7LP0BKKaoy+HmiKGveVRmSVihiC+t6rxLGTkzFK+pvkKgRhAF0KGJSQDPeIAiCjU5R1YQ61W5rh/jAnWxDhKFJ01Fr16lrqJu5J7c6juVEKLjQDeVR3rvleN6Ep0jRV3R/J9zQu9KeKBM8d9ni+zE3MhV+JfYBc8O5N2hVnVV/WOHonUGTAPaSz75sfLWbPTrkqSlTC5PCJL+LZDUfagwItDzxmPTUc1BkGrmcyKtAoA9izzeQhbLSlVVM6ElMSlXdJYeEIDAYIaqn0RivES8OQEyrPiPMi7oJ1yZYK5SCjQ9c6ELaisaLUHUOfos9w2rPmtGNgSeucL3WimyIAoEkiruCRe8C+GUN3ppM8qyhKhFB2rKv2e+q7u/SDLY8BEpNpCsP97m6z6fgd+ol+56qyMrZvQC9ZQqTHG1rTQfRXiY/Gn5P24yMHcn3meFjHDYUk/Fpq5zdpGPvztmAw1FxhgoJ5ccs+DcGu6CnsBrhKvkR0LYRxmvhGwHe9F5bQ47J781AI4ER2JxNN4lTdfYhCyAgCK+4y74hXpnqYxrEjAhJ3qi4yFGnilvFLd+WGjCEkrMpd1RzCxqam6jR4xbUNncQeyaPOmyWiQPVIK8qsbJTo6f2rj7ukVodi8iRwl5xrlFTwKw5NXy3e4io/n/GQ1ELMQlgDA03gvYHoEkGL92ZN8I/Rpy0krCZDJHXm2r3sm1tvGquYcY8djMREh2Thh/EKtoFtUtEQwszPsIO9++WdtnUYCIMd4og9YdR6aIQmpri+2jZyBWPIa0X0sS/ha9KiE4sd6yGVHAleWv9BNIFIYJ4WrCAh/NIJe4HPoW15nYASENkNpWHMCQ8ePxCrSzzwApG5tSqO8hP+eq0Eok5NlLmFAHhMebyD3HnuXB/mBkIu7uUcQArascIZCyETRJFETCrdAM17RBCSjeJJ3rMrGVZqmqCeA2vXZCBHe/bPPBXUUdIomxRojbYk/tZHSplI8gETrq4kl5HMbCA8nXPoyb4w6DBCmOhwdGOtZQ5+saduY9r9Wk6TcnHRYYye59l/iF1S2rS3ldB0xsIPCFQalw0LfEMZI+naDVmQV6vFi1DjadH5fXZc1ULdC/LUd600dlodumQBNbSFhXZPes/VQmqExI+R8jfKF9cfp5bXImNmrMbWGIBUjKvI7CFhkGy0H2wpL54U0IK3YcmeIQRkrGg6kNYOtcDsKVKoz/om/p0QOFq71ak2P6ViScb1EgNpmO5mPaGvtLzS1naC2hHBEiqmPcFQb78HT6MgPMQpSQcuOsc4+V2qRhpqUhBP1CVIZxLeaV/D0HhNGZ1AucQpsfTn7+JbLspr4u6UBaoySIWCP2Go6a4H4TAOInafp7xkBKqiSN3PUfF4EUooo361P+IHzI933gIKoL98yRvuaIYLOrq9u5ZpNKEc1ol5JTaXPP0It8wvOAF3Xzr2faNjsBRjpFYOfmAe08ipQsH6BWVlxsEnc8GJy4+8KPN4haWyhu9y1crHKvARQFAACIbTq6EAowTXSmOgwKgUuB8BxcZwLkcv8nCCgM7sg4IwkSl6huETwnc3/S6bXJ2bDx0tWKmrSkMdnRuYcpw31BZV1l7TZRcuvYqRgp6WdkupCP6MhP4amL9J08tVnCSZwFJGarjG9QPuaGOB6gWeurGZM9QwMReNgLaltTdXP61tg0peA4V8u+7KcHfLJK3zEKFI/1CK7YM6gxOJ9mEaT0TylDkxfN+0p9t6EcddIX7m7XU7n1yQqVaZiI5XMkaobqaDy4iqEsWIlWM0vx6ZJcpi783EdS3aVFvyEsJ+qCPBSlkMS73QpDf4tgqElY3aUFg/hs+5w4DN9eFgN2BWnGLqyeXI9tJL4Cu0o/dg8lL4+4IPWRLPROHy1vh+t2bgwcCQa9fondpF177+9Hn0TBKC1NIuV1tLQN5wPCpORcgt+mhEnT4z1YBhFeyjekE2YUEUyJJnh3oJEZfBVFTSsjAKchoUpj9BAPfdyb3+sQ/4GvjdJMZeJEC6RDDynu3IAdoFmcHMeR0LkXYswxrh9pqCcxkEX2vsvv+v7mcMLjx2NLZ5siUX1Vj25lIlHDcEaTSKt7Aebns5Bjp7B7WlEgi9LJHUQP5fk9/JuzdbTLNk5OVCmRGgtmJ9iZ0vmhtBk9/E4kmwojJW3PuV3Gph/bNScJ/S1F5TfWAUydiS7Nd70PMZCXYC9idDtCTjKO9z1TBGbe1m2ix/2kUMd/VLrDOLQzu6rPL6SltrePyEiWPsX7cL3/ooTewq2D+cb7lpD4LIlHomQPcQmDkKCUM/tAduq56ewGUHm7ZpSvxT+b+nr9VXLoBjSRQoHjvztsYU/I/kVQTFu7COVoczPg27eidBnUnDKAELrQp13rRdcGVke9J7khak+/QXDA5x/1Bav7ISELsDOEsMWQahll3BlBCjS3u021pjOeklBvlkhVcB5aOsDx6uihdrcbWCD0EVeOTxpI0EGe8mHc3AaSbhTDmcgpZ+uRQpf/+BvESdXkxnVdgAs0gRs17YCMOp0gTc4RbP8od+0p9cJoxJ1djZmOaNChjTxmsLbCdFB+4I5XNIz7BXBgMiHtXtwOE+fQnWfEZdWwtG1hViWjdiPvwtuKG711gZh8q2SlVr+23z20QOkejN3nsDyoktjQ+SJv3obMxt/KCFrIefHgD5790JBxDmxWyrM8H+YWatQk30JGNwW0JMvreCpvv2B+kP3ZXDBwK+BJHUm/IDad/lqdlhmk/X1F/SR8zTmf+PV9k0He1/GZFtXOvpHs51b/Nwd4wPDoy5gqDoN1lMxxEK8lNlXh3ehZRLAzeV7hnOkAJEfszxb+JRMEh2oh2NLYW4301UIOIA6TxoF0hwfPN82sw2vl1HCkXnt1lfXyGUIyiQd8ZnY/TEMSLMdye78WT3uY1SBD94sIy1A9zWosn1ecUN0vPuOPV+EV6iLJ178oSNKLrY5AFKNWO8XIMfGyTd/iNsKacsPluCUwHfpT9ZSQLoqqcJPx2vdt5/6iDswVBhw7toLS4RX0HkdvWFHu3dtjqLtLjZZzX5egGnLHUstmZ30j2rCzcLcgbTkU8mcLJ44Z1t/X+OABxjFyQ1HwgQE50aPTQizPFb5KoxjRstDkTShJferGmi7OOofM6z3Haw/QyO0ejEMGhJOLoCih8uczbal+MsdkKXrpIPjBBXPNZg99vu15XPgZTJNyTHHQ+2exdWNkCba0bS/QVsrJAsmfIG/AMUQn0CGbHYUkOgo+g2wATtBLSFWAdB4gY+3YlENOKVbmgmmbjGdG7+JCqa40HR93SZRIbwej4UFdKqY/PW1JTeyNXx8PhtqDlf9bPfT8bnCW/fY9VOIXA4eO/Xh7mm37a5Ku5cVbX9nqU553gP4ozLDkiKzsqrXuhywvqM0T82HzyyaDj+ODD6JKnjy75TqGn8k/jKv6h30OVIJVCyrb1gCH7xiZsu4aSUW1YRInsXBgIW0kOQfrTMrhIysjtzIFnys6CMSDJG55F01oMxBBANaraCwyPfb1HTqx5NmCRq1CzeYTigJHuPHYBP0LuHCBsHQdjEwHSKjKwbum0URIyntcD+PlpM/ppwG1peM0ArOzfQmNBq92PZeP+37aWQHygE68Y7On74VxZHms1MZKTS1gOypQKtHTCYyReAUasL+6zV2Gw1+qjmiiRefdQ7Cksq08sJKkanmJGp4pz6jLeHwmWScNdUmS/qdqKUDkLZHshZLld6oIBxj8G48O25gLvR+RHougJ7YnetFz9YndAPbo0xYHhZPEZIgIoc0DRo3UYz5Za0S+O7r2OSAJNxp4hMgTaOfOqA6QQRPITR1+Gy3AK1hf7lH6HWJvobyfcT48Lgovw/yp5/Rr1wpjvWssNe3tMAkYkX+eL/8TurKuIXHIIez9kyESQ3FmlYeY7zlx76Zvb1Wb66kg1NlFNKzoZhA6jDL+bGBBDiYdkZMYYKvIMvGXFWfpHYyzIoI4HPSZPRTaWQxKQRQ8TLdPnsi8koddmPDlBKcpP9cD+z+McFFTAXu2uj6rzEcLh4azH1Bqmc2ic1lcNrZQy7iGLiTwgsn7vb57sYMFV2jmRelXse72EpUFZ6xXrbvWdC6A3f/mBuzty+JLyyB53DHkpxqCrd3cV6f7tIQ76FC8hXI91CaKsGFSBdDZgi6Fg9qmbs5DUOY9RRBev24aUG+5tDNd8uYDR8gKSPlhshHjkhTBbGoBS/uB4Y2YwbEJ51QKaN9QmUkaFuyWwvCt6f99v8PzTsjbqPoB8VsI6riUeg5HoZHARvaKdKD+kcsw7TIgznrFt0d8vBy9Nv9dHV6Bf1E53seSvpsW6d0HontGAFwKYXZxByvEySE955db4U6/ym6P5CaUjt8Ev0v/b2mb9VtkeceTUV5VR8jN6qALmCDytE/vCMpdXZKEdSNMme+pL09SKOcTGqxxzfP8znIkqSJsrBgTNPzKHsGBdIgpNCCmV1nMh5zjWwSDAahQj7eDZmJ/NqqJQ4fkL2GmIrt9H+16RzBF9YOcpXlOrkN7RJi6jk2YorWPiXDrJU1W8RYBEODtoGw7SXy2rMP7szG3tq8YGw1CrluxbA+LhxuKE41Cd/REbrpILTCAdvLQMELzwevyTTTASsTlO7AnmU7SnfTI7IZvcINBIdQB1NM+c79bAScJDn4vDluQK5iBys4dF5V8J2iugTJsbqmplMU7/7Mr8JdSpYTZL/qb6dKkbnuFgk6pmEmkbYmJdY9l74ff70rp3/8UQBNW8uHINK1GGpUYxtnVNz6Tm+3vvGfw+nUAioRhhzglJUogVKAotZgLtacMJ8D9pp1/jIEreE5u868itrmnTgrRuNQHDowfgKBvDIBjp00mGQwjxxgZ3VjxANp6iLMKYBAADo25KZEsWy/YEUADjjhRKMxT9yVL2cU4OUbiu7tZMvOx8YjLyttTFvKcXYv5Scm3jEFzK230ZsM3/rJ6z05bmWFdoTky2QJM5SjVHlg7CQ6yhbacGvu5WghRnEbLAo7G5GkTXBvNk2pS0Pf0Myj4XBwwqJSdDM7+glQJ38ISqUD5oKCLHXPcZWKl/mtSj/0/8fmYk75k/AIp00gNitdgAafNRtatpu5/GAyQdrkwGABvWSMaydKLnsCvfqgusfNVfogzPnJNQMhw3PAUbC5R9GeR1D0bcxoXBABRjRuRH3b4Ha74DMa87GFrI4NUEzVP3fB/SPhN8DiRndMB1OW4b8Su1Td6zphbHk8jvdPDSuzaiRPQF/MJuSLbtSnuS9lWM3XFPmuVAab9HbUNi8SQkpFbfB1aGzF7SIlPkSA4CeWHXHHVY15hmuHZ8fAdonRZ4N2qSGjqjXk5Sei8qHnTayBc/PDEPW0x9m7P7uu3Qi1rjzwLb+f+gH01DTjlnKJgXaVKcBIopK1VlY8Ctad5ARuQW3jFCu1LZpUCIE9srpwvmrT6BtU3GaTy2PpHH6isyLIcS5nkOuABqUntmHAbwMbHNF+0c8kqN31Ge46gWwpqeLzyrQpTuQASWXnvBDFETZ+j3kxkl893htZyRCx5cVOauB1PHDqtEJ88p2NMY8COWJ6IAaCfmhI7q4c3igZdGBftG57fUfePWNztryrD44kLff6Nl0aZWjAHHIkWHId02EaQbqiKvln5eR7LBRBSOV47At54ssFHX88UzqFx3KwERl3oBg3Y1sQp5MUU1Yrl1y2x+rktnIfclnywAV8K8p3rJ0SjM+WfVK6p2EzoGRrp2FBGI94PHR32gLxGTWXrJgYznMMOLFebrYziop6dCvHcfsMVWD1J0/yFvbH881gImLzHNHu00xTsdfLs6s/H0jhUTLodbq6R1C2yH/MsEDvHTYL2mx7bqWEzHHonjeedUEqrYnk3sGJt/55vVFt5satT5dwylT7RufaL5pfYzTYyYiCZel2CPvDL1F9KM34OkcIQlRup37IlGDTpg4+jm+tXQysM3uyHBUNaY2+krODr81czHxgksmILlAP1L6ekicNjbwcOHoaU9G3IhwZIvE+5GUlYH55zFJ/1xXKh5VnO2fq63f+Hcm2J8Ko/wMivhxsEIyZ10jwl7ykaI4zUeq43OKmyL385FhXgolWHTGT3XVsmyaNcGgpH7UvyxRcCtELCVF936cUVoi5fYsS68wzD4+CqdJqH27Q3Zuue34/1+2CC0HUF4r24ZVwS6+Kq4JWxpzwyDfvp6Q9Hy9IUplm2npPJuunH/zGAUgVeiWIAtbQy8F5yoXRnLWlcjzyl+CQtdYces5YU3QSi+IOjgBfnDwfERdgwE/gUSwzZoHDME3ukMFe0LmjenMGKW+F2Hw75hPftwCVH2f3IQYwDCwx4gJIaY68Ndc0ScdTN5Z/uU+fftSm7GnvugbvXu4HJP670qSfGQUgLQLDcMLX5bkoA/C4LH0wlkarTFca95/okxEUVfLbM9MXOnZdsLg5rqPL73POYBGVhvawpc1L8Q503q5ENs/yHYkorOuiAJX+k+x28l4ovq8DgOxtMTgl+3jDaysFPQ6ZRv4H1Tk1P/5oN33SHNol7K6B+d6KaPNgDB7kC1naJFbtAKAkBXZ8oJVlVvFffzfYy/mqAOXyBfQDzD9axhCqYVZV1aef2YtoBpbQ5/7pE054VFkGDgf9BbM5N08qEQctghgY5Jj0cLVp+X3ruwfPlJMGC6QLW+ttWDtvAAjsnrlCyqDxfAo6yM53h8nW9Q3/OfG8LVAt+DJyO/++BDeASJArqEev6YRW9zpzPKA0MP2QqmysYZpYdGpGfq1sUFNpqF0/7Ya944p4oEtxjPq8pP3snkukbpDuDdLp6XfetQvEDBGRzD+84WmovfAm3GpLfWCV5noSXp00RMALJ2vmZBte95kHMCDTa9DVVUnOy3Qs2J/zS3xLSZCNhICFmaHVDRMDHmcNl86aOR96fAZliRzZlWeseRaEjl68bNUbL09h06gMzVHWZmHZgc64ObK940+tbTnDyPv/0V/xm28KU6hk2eKIOS7lKjQC9AIZvTam8ORkwCphed0tyUdukapjekqD3iqjKXL/wvuH9Y1P+vwkdnTfsy13AmuCiLUi6LAyqczQArpvxFB/HnFlpc4YC3H5itVRvuyauHI92UH78+VghSw5BcjKjVT+WyCB2/GygJAHbIvWaG7494lv5ZcvPND3B84aN2L8NY2I0SmOhxM84WtdCg8zfr5l3A00juA/5/xmm40NgafN+nICDfLPzLn9X9aTCUE+46eBkghXtvbPP2ZPxDwN5mnA3ybF4kOkoH5TFFEyYexwHWKepu0IBAxjOpbysrCdPJbnSqFw8tbvWWxnt8UpKoG0Xl+xeHCB1sF10ox1ahx4cFtI6ah48gPa1PnNnllwPqkcFBXdGjuxp+SNqIe5dPCklWTXIcv5hrj4x0Cq8WQ1M3YD5PBBiKoDwdOEh8dlJJUWnK4ogXNdqEtH85kzXBfTm1TRJ+pKOLgefJk/0iA1b/dzSJODNeBMuo1ccY3QLgWG/pU26XJupsEAHYAsDKZ8zF8tYs5rAKC//5wOFv4ApPseD+/se7CNpTRXGksil/thvCR9Ywp6EByHGp5cJO9J8VVrKoKcjLHKFmxu4MhYTQ7g2upPY00m5ix7n4B0263nFxnA/FyZoQOxObLvDf7ndk6ToqOshGxY4ePrgSdu8RtTx/ThLxgNDLDKjCIqtxQkaqRrgFN+Rt8kPad+uBMi1Pnq9dOpsvNEa4xY4vcVQqPsZQEKW+YMnIDyuHjZrICiOZKgGFg1I4xZiBO3teg1G3ce+D2QIVbngxp2D6WnruPt0BPGRONWih1HCTwPbdgQEdeom53zD2nbFvFilEeY7WtTJidreeu7SyJWXYTdGwnmCwS4WfxDgzamGuWE6Qytk9PQUIL1po6X8YkkPvtjkznhKsRTRycs/fuj/V5y6d/8ZDY5gjSiD/7dpSO1HbiH8L8sokrPKwY2oJH2r4rBPJ0ln1skiXuktihKVlf7zaAn66UVZSj4KYKprs4JUCsJbT83qhcnAL9OI3YV6Yy1G9B8eaF4DQukYc3G/vCH/MLcu4KfOJ34+AIW4xWhJN8hKXadNhLMTyK5muYpJHeBgXu/IiKJL98ZJmemz9pV4zs4gCZ57TFzxYv9WpLjKaZScVfsQ/eVFdLhB5MS2J4UiVCsQY7YTAIqExdOq40BoMWJr7JcN1I+IeK2SFwncsRDOBO9tF4iOa8c1/LE+hnMJw1eooOfXmHDeheT1KXj8pVAz/XXXXilkSPRwWZQsGyxoa9rFeVqUSC+DO+D8dz1vrDFV27pgMcIjibSLXBpbFnm3L+b5UQ5T1ihY12kpE1yMU40OhXlQwdKXzGJCqtS+o0bZOV5AS/cu5bQ9zlbUtnmKQqJc1fjuXo2RYVaxm70BYI0/KUZVevutENthwgB1YO5peBbGrUzosR+Gk1yTSwOQxwH6P7CXfnXza6D0UI1f8Y0Vi3swXp9HUSiGsBDkZOgFdu3wPNRk+9/FsWmkYY0Rw00xrnxTsY9rUy3+wYUwztZJidNC7fKyQpEyvosRLALym9xkpRJqClhdGq5NPflOofE6UVhtOEXrbATfryN1og61Rwqhzu/ZwuaAObKg7upWJs5Wn0qycxU9ux99S4qG9gRXAl+2mRfoJdIscHA1WlfRd6iQZoIB+jhRGvyo4dYgy16DdnZB4HQSyp6hGQD9QY2vuM/aaGQFAvjFb1GVVsApjn+PXFtQldQm5peQp/gmXvyEJ8S93Mwc8a3W0sbDGXkkYuWbEMST9SfzhpAZ8wUvkWpzzm4AS3WdYcsUrUyg9WtCzO+zm99BgQrnO5ZdLQDCFJnhtmqObwyQWm0OaL7flJPX1QJ3FKjl/LmNAU5INsnb5wIZKW++zkZWqPfn1cexgWSETIeCdwBLQUJy7jSbzMy19FO/ut7XHjxzR8GFDvQHvuox6T/GG1cwsrbng+uozQiIJYE4wMXwUeR0eUHdP1lzJvq3m3/hJkO7S1tJTo7rvM+mwUSJiUY6tHZdfnRWWApG4yVODG85ZxDlCumx+XmKPXVSwj229GED/niYyuOTacwPmS5GTSN52zRI5NojPad/xTLeCEsv/bVl8ZrKJPvi9fRsctj2tvrXeJpdfU2/J+fqi83AaKsd/YnQWdFkyrpYOlA2Ct6jO8xRGW20okgJvGKbQbIqNGn14w/Uoq3jg32JX0mj8DPFCgA/t9OJuKO67xUGEOW9j9/V8pMdiR4pqDaZvZE8lrD1YHwaqfAabQYqa/YFiB2Hh3XxfqwLcGbGFaGboz0EntsO+gqDU+tLqkkFIZnu0alonyNAGU5SmM9+EIpf6SxvPCXKbXjaWvinlQTR2TjUNqZAbjzR41f2HFNM2waZmHeGqcKN9tLMImAi54b0B/qbL0nsAcqt3ZlYjJkcHW0jY4BG43UrKX2DDJmoNUZ+CAskOlYBjLr4TNbwF3I1U8olKFVCP0kniHIZgGvGmHZXdn6MkHtOUdfMc6o40z7mCLiI1D/KO0QDJmfxBPE7CKJj/MFFlgn5vkd2CEefjWqk2m/IoRTGzot3qcYSZ76JpekGjfkaumu7kP1/oOV3FTqI7eiC51XrAYFQ4/a8Er6I5+4/+GKv9iGBTOTEAkC5pL9IWcg4CTyU+Q1iepS6areXi4yLXRPEl8RO2MIFXIbY2MKtA2IqQuUVgL01EZzh7E9/bvLy/FRyBnfachcKGclGfRg04CXZ2sl9pGqszzh4EdyS4xXENaPHAsX2AP57YrXslWlkjACtq7X48oeb+p/RGdefSz9MNrP/6En7Vjhg/MJE9ZmdaGYrcgD5KGo47+XZ0G3SzbiM3gBWvkwpjDzm7jU0Cm9aY5guBzFzKcHm3UBDokECwjh0K8lBOdtzrPwrXTHrTfL/XvRDgbJN5HyeGSsKMsHxpnRwdCg63d6mX7cjg0SY05TTCgujHTn7p94vY+SSEmS24qTgP3OiCtXPvxIMV0xxZXd0LRXX0kJOmPa4dDPK9JLDbHP/iNhaAPQOdfQJsp1gwJynRnNurL9L8ZgcY0loN0f3fgEkPOvsDTZaZipdPFAcrsXuML2g2G7/R4EEj4r4y0TAJpgHyjDtHxMbTogzQy+XHhHI2yu4kD6+OXxFt/kDacQVk34xui3xm2gIm3ZahuLO4H5ttRSqckEXLk5BIDBZXbXhqLuy+T0naeMp1kwZJxLZ1KFAVv37ahfPqc3Tc5wfJ0YKr5LMSLD3XgmA1PC/K7vbUxnW1vmaKOCa0d34l3PvTWuJ6vCenQUcLHvvhN3L1nn7A3Mo9xNZguPd+o3fDXG5yQLLizRycoaQz4xJhlB16ir4K1B4VI9Zagzl0dEKfprcOUn/IDc1DCDPlzCR8GT1tJ83ocYuwbgrfzS83/A26svJYzIx3MmfObG8hExc2aNtzfKz7DIOAxricsG67kJaoZMpNIrhV9xUvxQzE/a9eVgA1HCf4Rg9g+1JS7ZnzAXxkacawcqJxeHphmyKJSYgDX9AjEhRk6UMTwIzW8jBnz/m3CL+cRZ0R2M1R8n1oW6wtNuQpKda5SrXt+Da6P4x//S5hKsocQYFspVkzl0Uw91ir26Xl9U2tHQ1cvYSfVC2+10BeeFBA6RGX2hZcdR7rW46kgSFmQkZKu1/+wYRLbye9iwITCDnvCyKXIiCuJDW+53ZGYvn1K9pJdxpDecpH8ph7uK+5CopOaz/WLei7OdkHG7C2E5PXI36UXT7k9sO5hCNf1P5hn3yB/5/RcDHXeRLbG6TYPL+2UqOyd/m+q9zD+be9U+hJKTnN6MqACskYzohWUW0AoX3MLCGwVFoMDeetXq06V7G9eTTRDBe1+bs7qVSMJYtZoQe5wNp2jMV6KJpBHGc0CW0/vhIXVSTAhvsVx+dQKfEBICWPBCgd0pfyazvbRsMNNOMIqSRg+YY8D2L1iNAK9iMV3cDB2FNNzKHGRNZjnsigZm7RFvRuvOJn2D/lmFJCQ6zidmf8O1incKL8Kz+7UyqNurhl3UYoHu2ZVsbSEtDMxGsA1IZHP2UvWSmP3de0fMuMEbLiKXKs51wxgwCNgMh90Jkm5EQQsPGmtZ5ynW7ThkyOtTC6aOvDxLKnOnyoqewFesLS70ZqaFNhO+PIbALf0s1UzRvjq5VHEtYo4WBxibm3URp3icMiDxtHshptuqgWqWlruzvHMl+kXqRwm8gaPIMc6Zcdb3BOHmStPX/YJfn4eZHwwmR6vEG/78flaTM+md0QQPugIePFgFwlHAZpF6cvAEOcSyU10SjwT3ojl8GNKU5K+EnRzPWQN90chgy+dr8X0ytR1B8PjKanzGlt7P69T2SGjkDSIV1oUvbc5UqtUPRzfW+OMwjR/5nR9B31Z5hfA8Vd+BeMcpiHKNgU/orJJsI6NCxpV/FkDqOqQyVknvSvFEwMrKB/fRrQ9RSySQ7WACmGC7JkR7dltcVTBzLz2gBo/p0o0F8cv+GMuzjo5I3oLfwrqI2/kgicln0ClwHr3nZ4TfT46HoMpAky9wN99ng9HkkzTnXjEndOkrbZdMA/U4fJnTA+SU8lxG0A+gusFv1EzZ3nA+eK0Xsj2c03xreyqyvoG8EoOXvcua1Qv0M84cLdfo4J3iDbauxoGZLQbcsrwGYe3m+mGmGGLg6MXKPrOdbiRlRID4P0PGMcL4iSjZeRFUaF8bcJncuJpgMKDOSygRYrEQrVuivouKEwzpfHPUMlzD39mIEWCiAI5elpu+ohDfe7H8WnXhsDZmTDq+MpaWhJwSTY1ibeq2SlpvgCuTc0eKeYO5QjqyMKZ4K8Pv96pHhRpfeZ2nFweNgxL2NuHn/9pRWOfMEo/OHhWdmL3KkO0bwcPaDOBaa7hWzW2eRoaMV0z4Q+F8YttVuDBnRRsdjpyJfdeof5VpC+Afka23AaqBW/N5OoDX1T/9B0YJPjV6hh+8Y2ADYfqXo4AU5+GbhrRTTmSPQp3HsU0hrHhhq0Yu9ZwWAB95ORpjFLgZN6Mrzf8zubSBWfu3Q/Y48OXsLm4ysAdnVVNlob9q1RiUwm+2t8rTrACuIM57FO7DTcmnB2Jg8Dm7SLKYkvVZS9/pzhy0DGpzavFj8r4BsBdtyFvTdMN3uhTmMb5r6A4jcCLnRWgd98TK8hp1MMdbjxnm1bhuh3Ilk9OyQzwLZ5fAtyu+4nm/NGX/tz1+opMuC8Mcw+DmdJgnmfgNfMHWVa37euIS4ve83Ddq/8GqchFQfcCLyXuwfXLseCGGKAesrgPRj10uTr9Bh8jTA0L4Xc2XnGNPGY+hc2/BwZmMR03YDs4EzvU3pbqnOR86VwbTjeAoQb9Q+m3ZgUEgjQlJP1fcldFSeFR/yc4CBG1yWOu5s/sjOl6wSIJZOU63FuRYOS92Q494cz8SyzysGIyI6kDBozRtOx3cMgxGYyzznl3TVHFsclBaywrw7cOxYIfy1eygHzG0nRImcmmdi9ZHjrVVTwm4xU4NsSMd3ayHO8rurHQiqU/P1u2mS5xiAcFF+ZhXfpexHqImGc8A0YjinE2naBsCvwYJ/LrIu6OaQ5LCmYUbBMUjm7t1cRVVwbcnLGxwFh5XIa5R4XzPKHYpX+c8b9++DcfJZTuiXLFVbjx8ZHnV+F6FXt1tUJLjv63CrSePOtk/FDaKePAVceH7KPe14aI2shaeXmzRxZbJiko9BKSLt2/h5DGJi2QquIZ+PInskitxzPnF7mjOf+Jurmis1tQSFMWlZY1CwRIzCAcfXJ5Gajf+jRqFRXWz7nqgcLpLkAi9XuAaUgzR83q8z3p6OiIRxV1GSSmaRRJPjUpyLz4M8D2oWjLqw/ZMOVi9SepSSdMEKAy+P4SLXWTvrAKNUXZVV0/AmdEBa5KmnLt5QtgRnIJoERPm37uZ+u3mLRfPcLXnDxBq79WoOLAtyGWNNA0epi1nlHP7xIAAg5PtJeyK1Jbmz9e2+iyx/Lw8eaTFPuqqedJc4SX8o87RZ1aOKOXr57IVw5qzaffCkfSq7pjZGgXNEomBCPqXYXuD8wghcbMwjn362p3QwsjFcCysyvZfXKVFqCdwu/4EIrt33FMRwaEjSw3d0fl3IChpSRp43gbDLvI2zTvUawwNJt3NthUWLXIJE87Lpaf0At9RH9Kz88i20zjerkeniTgtCBcUd40Ls6NnLRNEMAMj8XMFEMKEPcq++NqakedLkIcoqmhGF5ODVgLWj1VMLmG/TY8Qrk8N2UlehwhH9zOazOUkR6ywUO7NzRjfR61AfqI9PcLNhDdrjXwyq9IpP50VBn7Y5vos3unvGhcrqM0KFrW7pHhhy5fCgo7eU2AaBuWtcvkCUMnuVKspHXEyq+CoysrfPl6EWV1bm4Cj3DKxMopXa9GnDFNyAfE+kxX8crzhhcwHZLbLuo74pQ9/+mVQq9oCIbZojG+Uz8UhfiR/pv8fJyC9QhqkadmfSkV2LWwTnejfRxrWhdXloX2L5KETvRtz0LiCd5vZpUauoNaXoMpZGZGfOKSfDVg7NJmkZ6aG+iQXJid2AP+crMzpz5kUVsZrN5kXHjoOgQV+A6hgnDCNO8oD9kn+yx6LK48MKkThOkCEFAMGsh3tkqxfXihLIaef1bkt/sC/N+PA7mi3MOSjSWx/L8vBMTolkGmDMrkApLfB+mgXSgkzwbGhph/JY4beH8tzMGkZi6NiqDUBAFsh7WiA1KXEIH/G90WKCmCSPfhv78qaCUMXvVv66P4ntu6+yfsqAhBrZfkoMNc1EgMn4rsEuFE/gMMlC77ciN6g8Yhahepd6AQLAHAEC8dbyq2Asm0dYWcSwW2YXoWn7pEagArjJaSi7rosinPMiOECwCvjBmjUAAY9x4DzhUSQr5mNBDBNtvOE0BVigXA7paXM1he+QcTKZGi+AC6iJ+jRKvODD45ZA4Hr8dxsXlEp5lxvj++gCyJhwGM2AxgOfodBT+kI1RCGOixk+P9dQ31/ii9vv1ZsExf49iCU0Ppsl4SxACgwbLUeZ/6oiQtH+3LfPqT5j6vs8nTIAOFvlCtVr/HtSQe8335x12xkyasmSPY7BmcGuxEPH/nQcPerJcnLsWp+MZIUxfmV+zCSXmt7NMyQOhkyk6LlnglhmqkEFjNeeCbjuZ19k3VH/EzxYNUnB4blJGcbyRkFvTD6XtT1SnvGCoWWDt65bHH269R5Y8KeDE3WZ+Ry3TTSfwSN6jdhiHp6CGMHTKSDenLOL5Xy+R9KlpJyYrVlMIOK+AROwyumdUlthAHO+cAvbDt6Wt7wAZz88dHB4TgC5W+X4Qkxx45vyzDbCOiEVLlWlMj/jHsa45YMenyNhx45/74PrfExEmLO4pnG+GeBia4WBvUpsCCt36DfcQCYKn7a2aS/Pl6IKVwGlIwJOtRKfNsFzrfDi8Dj3DoSeDqkxrXH28GQt8wmjnXy0ppjtV+dvrYwhlIY4nwAtJGmfdS9SiS+irWyEpqOhTBzbrBTUUqxJsFVaCAm7VcbSAuiw0LApd2J6dVLsY/NAjbBIpYCkfOOlFkrpeWATIKDPk0NOp3mVtMOskw1WaxUpuAmthDCPI7gJqVGEURxfmWxQIvpZZ0s4Bk03kayAFzH8qKcMl9g4muqhACJ7MKKeVzUEdSGN9VZq2MQnVK/Knl3UjHg9pNqSiMHl2u4EUvgE3ys0sspOtNt7MmZjMQoaS1B/HBa4FBrCCJm3aPDRTALVG9WiD/6oiATePv55+5DBCIpiBSgF68QOGCnfypVIzueaMFUswldJ5yD63K/hcCR1PyeLpljce1vu93T8OJ/l4Fa6IFov1xl3fB90hfFrQ70ut0NQuzZQV1f883fEnVrqeIN1w7YIai7iOQLRXOI53qtVcRTYY5Nb3IfQHOuMV6PFjqevpUNA+6CFqprgCR8H9XNV9JQ4tG6yM/MTikPyjg12f6of1Ht9GiKYmJCpJIFgyagR9uXoAnAE4J0vKWGV5KfNTrfqTDvs3zQk24IbgKZBeNth/id7NGsSPVFeQnoneNihH/+57Q4HG/saqjczgnvXCJQ2VH8sCVOTAIq0sxynj+zDcNVA/OAJEFqdyw15JMKQYl/v4ITri4E63kzzmn75nJq2Ul80N/byLBKdld/zrYBudx9hT5BtKWKuUnedYe1UGlgbrc9cWPj61BP3oAjE06pKDbguUOqAPe2IHr+deaQTYixCBn6zosamEwOKx7W7YM9w/zW8O3ed03UINkexRzc/FXjHRXsq9gTkAQOYvdhvxKF41D5jg/FfAMb78Ci8tAIeA4mu7MFsPi9JwPD7QZQ2C5SfenNjxNmEaGrQmZUmMggO+5JblT5T7h2LXsyjyR1bEMpXlY4HkLjnBv45V3KB2aMnCfIzQFGEJpKz8QzlJHHiQ4Ya4YpKqOK+f0dtIBoNRkgq4f1xaEvlpcSa9S2LkRmMD3a25sUL3Xhfbb44+JZsOPvc3FZ53/gkatbxRRdhqSydHnwQUNyF6yPcWPqnbB6YbBbzI1yZBOqt5VVaVdPty6yk0tf8GyHNGVSKXO9W6zF2r/zDKAWNnYXzIX56nr1LtxTQw3iHgF8jgNYnl570DLgjapR5I6+I8zkl+eU5eL0Igw2UhtvXe8ADOtP3HkzUQORONFi+2cA8034GDkuCvU2SnOmKX3i74hhu+Cokf8dgJh8kjI5qKVN+AaITgs3gpSHPNnDiFHgnH8HH3CwNclyNyKYsrcWA9GBJjn1kig2E8e2nvtDXZsv3CG0t7Cbgm5A56srzyzJf1KSkOTFBdtgo0TJ5xyGJ2CZqWRxdq4eAJ4dfaDQvzmRjlHIXgpkwG6NbGcEmBYaCqHVJaJ0Uv67pJIDO5a3fLsRdiYAakCsmIkPOA2QoSjs9Nkxebf4x/b/5W9Q72edo6AeKSPBKNYKJSnQ3X1Qs6pdsUNTLKR5z+BOA/YQcBvKDf/TYTV5KgzLQgpxWhzEESMeKSjDrFfz9ofxwIvWWR9CCOkSKeZFFnoBFa6qQvjUmoTDFadCiWztXycNqx6VsoHgJb1eWhZImKUvvWSvL/eSPpir4H6U4cHtFfnQp6Ls7ytxY2PI1j/hMIf+Tl0xNSIhTGkaQjfJ9vMVGpVWbMaMcm3yyNaW22JSoAu2uleGl2FlFos1JbxczsqlGEFRAPGJxE4r+/D9b9tzNAx3nbNKnwGoS9KN4v9AMBGiCKPNukrCkofwAraYtF6to2n7z5spv6UwpyegKAs2sfwHkuMpy7UXjj735zZNHoerAaZuZSIKkgxfLu9xLZ9S/LAByCUOWUPbhIMmnUq8I7UeCJLhEnOU5h1cWVqFrQt3KEMooqu//UMTNBbZ0nOJJ2nNaIefSAK0aJGIeypYqU4LQbC3ONysIS4PxCtyh+rDiVJh6T5b8mil60758tm6mX/HSdoVyRF+2nzH9Og6tmGTIxHzRgJHGUd/tMMXcax7ZhTDDzxc7Ete+zMciajicIM0vKZghbS7NcAIJUTGG25d9DegzuEPwPZ+vVlr/LElDF/E2J/A05L6F5ZErqV1oNhwOpl3NLq3uRz1Fwxi9fUZoh5yiUPyvptRFOuPbhRXFAi7xsm1/9FbLAX//5N3NBmeP5afJK6hKjCf00nPkMWLIT845SU4lvYT00Yh3JXRxDRw8hk7e7An5rY+8Aig47zJNCX8MPjrDClh3uUm2pk3RBuqpyLYJV8nANusn1cFWPu+xbGRSKdEbPCqZW2Rg2mWsok1cSShfk9Wo8iNHQRu327Mwqi/vFf6K54hbUmgNPQE58EOZmuVPxkOykX1aju/7j9c2yfAnjf14L747fbKhMIM7+fRQ/opX//jmZeXF/ZwwglLryTo39qHWExvrg5DoK4ISqNRcUnRDLo9pxxwhh0BpU2XfHWRyQdl5M/PKMr5JkShzgWQ4PnlRTnAZbVCfZ/7Vs0UVKKV8X4NdRir+RtPp4OBwWn4i6Wsjxe6BIO7ZrB/uNB1Il/shjGLDgjCXiIsYMeFMlcO1d27WhHxVxOkwiOC6xP6Yh0iLHvTVpLWjGGPS4yTrg7MT9ZRYRcUHLlKqNFXXctVy9sKKRJdWH2e5bq6xD+O0ysWpH/yUZaDFgMYkiZzuWh++A3ky6WmSRkBWLzD7fBLsY9XY6tUXJzHI5SeKOPWF8FIYjJt8U/2nIB67atNohdF4CGtqr+A1tbQnFHmiHcpZJEx5ekr/4SDpGmttjWLZe9c7rJlpWOPvtqolsYoaoSfgj5cDhRPKMFmZdih09U44+egYW+3VKdChBVDTGE2OSzf7o8+r8tgAUYvYiMEQH58r2ayawuAhOqHoTGM0wUmDIW38dgsS6y/T0mxA24qGL68hTJg7Z3baa+L8zv3LaeHAQ6emPplMxTyS4HyxqJ8f41SftmyJGgvhpCTV1s7qaG9s8M7Xv8qJbGWketFgGelZw7ipjsQPgZTHvAJtlHNyYbs9yk50ZA490lLTIhVeLO5sm+mJlkYNdxLNU0MfHQu6kUM6TBxmnMlWkOB+8fWdjlImHFHNSf8eGev9VqaZu7Von5At/IH6T4yERAyw+FWP6+1WfIMf4EQKnR7GJ1snKoF9GqmLpO+GxM3GEvgnexsx7NRj/qlzKw7PFJht07rxPoV3MA/eeMNxG06y8BwkjCQWjFYbA7jfUr+2gJvjuOtfyTEEB9IvC/JsRTI7gHaRe6rweYQgYAoRFb6OXd+5QtrDBroeQVUH49tuM9Av/1AZEH5KHlzOrPzGcurWSXdHpQTcm9z7ktRR0/xhE43YoNPSSejb6KUFAY7P/3zi3B8582qnV820aBTc+Sx35gnfo7GrZZ1kJscrR+cgCGGKpcFGy35qGV1FjC5g+JO4p2V+yr9xYPWsCpBJCxUDxVGOXRLI4wd0ujNYJYpfM0qEdweJsRage0lc2WPZ3V5W3ZSMYriBpNS9vQOl9Xusex1m/nEBHvggwbQIPfs61ZNgjfxFMcyzlectcw46IeM473tvGqauthbTFf7Yy/WVLUXIJTNsmwOzU1B8N8XKUtj5MuEN5s6B8UNU/JLBvdXKuks93Hof9Ex4UcW+FSVF3GfFhBdezzdrL9wR7jUo7bwmocZIdvmjnD/4yWdHyCvfwtlzMN0xQAfyqZ+A4Tv4k3cvDBzuutmZAeeJUAftcH/5YZF+522vc/vVrR+LaEw3fWFfqBhOkmwEwZkmp5N2NmImASoB+2NZbCIz72rLigeoB9xr/qyu3bu4wCV+pU8zX8vssJdyCjywXejRZZUVvo3qAYNvXEziOQCThZggf5OZdXA2rk3sM700ddq5CIK3U2cYwnXCOOTU98Qdjrw/rjhp37wA6QjIe4BUJUiN0HKUn/7E7/R1J14dNjb1R/D9ErSIz+eJcaS51Oxkfr8yzwrYStT1x7HVQ21ROlVTgHyjKexcoKhPXpaY7GftKmlnMeQgPGsNm08R7bhKYB1PQkBUjahRRjMherdU+GJSkjag4HHjvy9sldtgFMeKgOVvwSIJo6vXC0sX/hs/U51uqdBlNF5TU3I9yem2qcyj3aHLnvakVao4fwhtaUYjjnNsgTAE1JmD6zzGmjTzADp5DB5iHGosGSX3xdPdR+rvK7tdgunMdv9EtpzDbzFMRjj2EeXoT+sVln1HA7vSLELaH0smm9eQq0ClZgSmCLfA6eqA3/9Ras6z6jcowW8i1cdwZ9Ds3U0dasxJjz7s9EfiHrWSPiDgHHxMDyf9Ax5vnaIZa6B2yyvT1MQrXtr98iLEHd5ie6h9fzIO5bAfdc7rwV2QyUhjGM3dGccTThL2o1liZFhnYNmdpjyAfMklZVOLee7MOph8ZmsSICNXUXVFq2PYKCAasas8f0eiMqLRaUHi8TcmoPde6fCjohnH8xck5UfRo1ecBjaEG21Xzvt9LOdB/jH2jFJqGc4c1udsHd7Nijmg4z9zXC7PV8BjNJypMUhmF5sxbFkkZgqBL8nTjFq1ppxFJxIJFGXr5XZsFQ01Gbq8BHETA6+X2PNxL7/ciyZWmGp4iyQy76F8vg3XI2BDM5e3nwM6+hiap+yfOtUe9AjNYRFAZANGWB1X2PQKspeHbYe4t1JLJsXCffw9a1RapHHpcG2gvO36JQZq12jZHTQ9uTEa1YN6wbbsdKy9HeLOV2733fpW7AmhacQVlCLjUJgp7YHg4YGsh4sL6oVQKKB7ZvwnSmsXw445964zglceO6cQFOD36JhUPDtZ4rcdEF9W0hts/ubK8vc/GUxAnRTtnVhVnrEsU7smH6YyK0OGRmDKVYjA5W41sKDawdxgTV8Clg2j3I3nDa+t/j5pkZTKwjqnStvWS3pMqgtF9T8HqwMsdA3asl0h5p/xra+kAASIk/zeCXvlK9SorAbGSIyQzQlQd00/1OVpfl/WqaBFA+Z1JKQOq44PAQkXPQ/e+kNuGCUltgUKURqWzc0UFW5RFhYtJ54ggSRI3mJkNSDzHyAoUFxrxMSzsw0ER1Tr7WftFuVWGH7idF57A5LjuPc0OlIsETvApjHJGOGLBJAg8OqGu4D80I8lI8U0Eagm8IKv+sc+hjoxfxVIJM5fqF7BS736CsOhOkmRkSQKHgOc+iVs+rgZRBMCR6vKbIo0p47tijGvruZ0OTa6p9WOLISkAnhwIt5hPHhkfmEVJFCRMJl8FR3IBZeXKz4rVvL4KSp94056b5YeXMWk3of2rIf1Ib2tKjC4q/hlFEKo/c+kGbbgf84trgLvVtDgLSwhwn2dfA0QmX4zEuKa2hLWhAcDFvXckropX+RqelfA7w44lTETNQ68xx5IYs0fHNShOaP8a2oLXAuXKK3m9H6XT5GyYErJZ6yyhaZrHDZmAuSVGTrHedcVsNKr8womDv/nHcF+2+73joKzLv5lOi5hOzaPpmaY+/vLNNBKzeWELiT4KN1cQsCIT5mUhWFzcUxqR3LBLkvlnoZ3ZdiadVP5R+5tEPflgasQrAw+ESDAmUnCrH0JA6NqgqDPhdpA+exwea58WhgafYiXoemFIdw64jPpWmpNmk+2G+zjpDjWUrhIhICVxToGXi6ne2hQDc8zhqiGqd2SVyznIL/DNCLc30pz/Ux0bHSXnOprZ0/3QDGsN77uUlZoNxxfs+el8BHDJaYhUBU0fnZYRnPKwcCsqgPDeSv4F4eJUFmiy5ol9+LfTjLxCrctNvyKqQ565MDa3dyzEe02WhQSFAX3/mB77u3t5wNCHQdc5ofY3TrN8SywtAP4xrv6C3EoOE7xBz1gO3Gm388yFAAv+tz6xSVC5mUGoNBCpU/Sp9iyut+65nusAAQFilMxdiKzeSkzPQVruqxEqGTmdUcuU4sB6YQGXnPypQBySjtT5lunLPP9+Ocwtms6Yavraxx5RZLepAa5pthH31Jr3DIc7CsjzTFCd8fE5rHYo6iohTDzQPNzl/Lk2JOveJrQ2gO9h279XATJeNFFM2f0onFkVAdPdN0hWEmc4XfwDbZc84FNzAqkKxbA0kRvJsz+8YiFZ3t4xM8u6ZXYxaOGDr4kiR7TlfgGyatP5mW4fVCQXMkeK1g7F2R0mavwOy6nXOK/SrDCt3Nz9sD50XyLKxVwsW4Mhnuo/K24RP8SIt/pJPF2apVgD5auLhS49fTh1Z6tUj6kPxcf8nTqLHKTfioVWS+RSxZZLShg9UnZh2zlFpvL0yFCwpuApI3JXLlHvFzmAY97Y2+0Fg4dUp6uKtJFeGnMMHIy8B5VoVEhe34cC3ioCFU/SJhj2fmY6GS4Yh/H8+D/pTc/Yb7vq7fArHg1rvN9Wm7RKmx8Hj2nUlcic/oJi/0appso8A/8idvAXvlvxzSkL/dym+AKHSVdIFUSofNt/6JJMd0dEl5kikHxE3oO/5S5iPbCiWqD+hmmNxENsbhAixxKuWCT5JKKvgCmrygV0/ycKeXnQkIv1fsRXxaRbNBmGsKtX9UHmP8CaoiPzhO9xd6S0w3kp2b5Pu/Lsj+3Wjrwkmj8vFnsvUWH5no17eJ+BXDzzjYyY24Cl1O0xep16Hrm0uYCA5X2AGYKmF8Bu4Crudqwd3WNUsBRv11tgZ10D4EukndH3LG3Jn6x0w7y9vSsZkEhkqFYhMeu2hI26YMWYqCrI4DmlVgePbdJmz0FFpoSI9Cr/DRoMPEB0Sj+144BjJv2GyJymEoHmHyxkvXyuN1zS0F1ExvqDWluJr2+UptW6IGXmUS0e4gtH8lw6JzsRYeNH34n49rP5Gp7+7aSOS/ZapwfReW9teMbFJYHgw8QNYmZePlnN5SWqtCYyOaJ8CklwcN+Mi1ZIwLJB2gBqkSDwZ8SOczySfDHgMWOM+bpz/GN0upZUDaDGTGv7gc5oIF0vnx0M18voNDYkv98SZDZ2CUiy/2o1FZn46fHFyxVgC4kp1Ynna0RFLkdzWf6+/V2T1+kfSV/RpgwsIDykGx1XjImjEWEb7HbffZ0A64Cob1UYr3VozV5skDFPgGbycH8OPtVv7Ejc2yLcrijDxUu9kVagGY4ogYw4b+An8qw/0fTkahh+D0UbOCGDVTDj1PY9iTocJI6T3leihjz0lAcG+co9DSux3vrWd3h9LrWvUJzclrkotoO7KsLCQaUXJRmL0ogXCRBpC216okNe8ADf5geQZcraJzRmGYJ21SNJedd5jTBfDGIBzY+ZILIvfeN/KLk8Uku4mFusS6jIMQAjOkUK0pWFd3EMBwwDQy3obpWnnR8q1sQPAUukqbZcY1Wg8FNdn2G2yJ9yWT7s9tY/PTeX9PvDmNUEYpn8TgOtW4I64k7tcRCV68+nKAYc6jqRR9VMDxhA4UbINgzXgCBz6ed6SUuxol7nTdOWhX3IwLprKW73eFpA9iQURvDlxdCpYMKLGMECbMx89JZ71f9cWc2d6jzB6sRd8QL8vlIGxuE6OMfb4EaNZHovQhTESuHey6aJeA3yNbTrLgqgA7AOam0K75PkFdcbR6aQkN4FKkdvu7NWSOLoOmwH+ycBaaShq7uGuuQxNdDQAF7lkuazJlbm6oJCIE6G8RBy0iqQYDpQP+6z4fwBNuC9XNxXp4HzpFNQnYTQYKFSFuMA5C/zEPrrLDg29YqE4ckPstL+k3KwQs3MBQZDnPEECoibqQ8480kxMXF9s/mTucuqthJ0h8ThdEe0ajKtMrbMD3R8RkKgN65Z0Ks+NnZszHTy/P7ToZKFPtBjWrv1+F0hmQ485731HOBJXADxZbyGHiCvYz3TuOmuRPeTsAh/72pTaHK5XeQ86cfBF0I+/qEBdM7lWp8iN0JGkYHR+3XPTawZu7uzQpRMVKP5i6Eutl1cDfTdrLsd0SRCdSxcNGKomZYlPijxm9p+i5adoBFHUJnsmm4CZx3YOgzOsTTFZa7RpbZfcJ2zCYzME5VK+M+EtQW+DuqCKsbSDTz6fyeuyxIlMTqnF547kNTZ67ok6sPiXZN9NskIlKjZjubjM8LOOyKtuOKunhxzR2jtpAe7CAArsPGUDAUHs48RYtDjElEhcikVjORP2NFSIEIM/ZYMO0WU9BzZj88bd7XDqzbTsZ9rGvI4HXhioutP2UcJ1yaODU2wMXIeEBYJZLECVVkNcDQqHx2QrOgy/d1m5qsiJfD1aVNSjaQKnNeJ8vkVj5cS47H21nuCU/nMNoXdoulD8oEcC+l/NfBfpkKJN9A8l783RpwDAmuEa/SQcr9FwwY6tLiWQYRiXT5Q/+apE70RBAvM7npYNj0ZT2mOADu+m6HaXt/5Pefnp8WfYLiI77MUeWlnvqpS6b8Hnd2KIuojVk4Ym3fBqn19c/DQMvGSkSodoNHBRgTzG89rcMeom+FLUyaX3Vr0hZVrvlMPiKlhhpPvzOnoAMFqtp9MYqVJT3CRL3gqsI+GRHSiSMdkRsLraAIbjS/mvPCOTbq8o0m0o3B/JcVwfZ+b76pekv4ldxAhMSmjpzUx9d8iiSZMjtJ54YUXGTk7JHT6fQSyPt+0CkJNiH5DPRcvvXJdIBK8199Ygs7UwiVZl6ZUx8WJMedwwOWEZWCfJD6bScXZoRJs4zuB/7hk6kXmG3NwptqWAgQ8lIjkA62yTrMOr2Piq6xjLMyElk8hTlLMu0jSXlCyqkSCMPyZVTQCBKf9hBiRwJ42IcRHK37Rhd958ESHP6f/SYJJbEYuNS1cKo0KUV6g8qXNaYtppmVm0TrVE6HezP9WDOxxwMa5Zmrx8eJhV3D2Ct8WSeMlUpWzIJRq+lMdnU5LNY2N22NKMYtNeALeiu8L9paoJVuUlT8voms5xYiJ7Y41lvhd6ynlU3HQ/Eq8uGgYcyrZsTOYJ+dIHyEXvoQ7WHlmBsVy6m4JDP0JI+aQ7Bb2sh1FwH2TYiT6knWm0sHG2uWNcKkFwex7IrbJd3f6fJUvEGjHPE498uai/UzRAn4K5fIBIiW5qxPLyMKHAv1EustktJD6QKlw2LFg5Eyr9CrxyvKG7DYeZO70hq7IC9FiMhPsmT2gURPf8SSw/q4xZIPo8rwXmuRwStfsCLKjiG2u9lLfrk7pPvxio7fW/S4K/sNKwa8FGWP+Sui8Z3bBcUsE6l9RCbgGtU33cIeqrB8cltZdNoPpxo+UzaTvfRZZx7SGNNXMHpdzwdoa6xPA93pTbKlKqyFQ+EU6eJEEwKsXCuXOwqvAuXC0DTnSPIBFJGSrSIr5e6Xu5eD7c8JjfZmGGBO/kzw1kiZo206nKldNKB7r5bBxGmkuktulRMcbtLmUFixBymDluDf3RCfQTx7OpRaeFoy0V3gJpSQKPGjFkHaTUByf9JDWcDm1LGQNdpIbDi8EKGh5k9HlHvb1vfPVFYN8k+lR+wvlSz7oKxZPWx7LpQeWjsVwrKqj21KtDoThRXuaJrpPWj4qXPEszGQTH5SC9Wwr5HertSwk+RTS2hi4h8JauYpgh0lmqEbwG4tdiib0rZtzwov3onPQe0XAOaFtq8nUFmyUzQBxxItiOo2h1T5mj2VQzsgSisM4WnhbnwERgjAAGz88/M5UCQYHbCtrU+nCJCvqTpuevdlBYlXPE5GmvZ9EWQchLL8L12hZPi4M+CPv6uKqtJkVsp77uF55jFA/WXWV8U+9k1QIhmHSJPolMAcsF/eR9rZh8xV2XAnFPTwf8GiAoj/dtLs9y56B2wyprHBZqbPTj/0d/LkobmXkD7juDj8U5xOYC6ISIX16YNYBA0PBawLEzFeo4REIqoK3xqKRJaaRM6FLi+ofNoKW4o6P35J/B3IDJuS3K0bCJc4HuVPXIj7cdeDsI3Q+1EyG+l7P91PwFO1CYksOCCFfPEQQGCfYyO1Ta2+H0oVAD8JWD8SaDbuJhBTexv/6Z1h7d9vYeDNEYuX0ZRs6cgoy/Y/gwIWmnQljXyrmuGdaoSTt7EJGFPh4mb25Acq1MSvZSC0QTXBSRqgRRD2zwfpxSa+w5hNOZDyACJgfLG8bLAChUJxPk9wmQ/5xuPrXRP8B9Pm6JuDMAIfbxMMay2VAdaCOgL3W9GFn9QP2YH+05/k4NNx8IYD/vLiT6MNYmKwKjBCs+c2aRCY3LqqxaZbbAMPiCuzYc8RsztAr7NWu9l/r3uIu8MyF0OV5TzRT+aLD0gEj6GpyvaL4jaBl8w/LeeiItVz4XeuXV9GRFY1ZujgWL/iaik3BD5nbszB+uO2dDoEVDI68ulW8wONnhD2opLPQHyqCYNQxT3KrTNJOfUfzUBInFEYEF+hGf+3K/Wl4eJEEAc6hlOntM2BkBmmn2cTg36h8fdbiJ2D7nj413w4Ecj/rh8TVcMNMVUNm31PuKYjbvTQEvxfUfpywSSFG++4hdBLUhuN8PQGSDhK1a4i6deW5onNOsfzWwZHyH0yGqgXHdQcuoLiE0E279/Ozj4UZ23VKAgH4W7fdTaeq9wAgNptqooGRQPuhJUCGRgO+ezwLcAiXCb79PO6pO3CKytOR9ffyGspQXd2kriChI/ezDtXvPLe6PhjVbT1DJvT3bZUFZnfINZfcCsZWIhHqn+QoMe7wgmKAw5CHLMcNf7aAVI9bbjhtFWpCfYp6C4yxJP1er8lnTrImTxzIGEnDzCwHApJp2BSz/3U4+3bq3ClFfWY2z/gnKLMZ6CyOiNieNAg5NWc4XWpSoutVb32Vtk2ZQRVzHB09+pkg7BSl5uDvZxsRw94L9nxbo+vXFgnEgXRuobzeYQxyxQ15GJqlCyHQ66DajITvmtmVEyaPrE9QTaCidge5Sw1jVT86lHnSM7chbHQwwgkbmETdhfU8MibOvfacQZlV72nGaCL79fShhytLMzXP76oT1oF4uhxdOjBLxrbRSm7bxdVsb/1bbHsfm6L3Bu38jaKTfSUqSYsm+4RxfZEo6LbWOlj9Ro5vICbBXtEDj7DEAfgfTl3rUW4RY/xUA48MJ+foGiMDZU8X7tNpDIL6tXvvQ58Mlocw182gWsLJ8i3i/59J5oiu6IdZiFJuzKBlaxzgPeUePeIG3UBim7/Eu0gQCCyknS8MKjDjvL5ASzjDLB/Pbi7helNIlPU7ytoLKdWb+B7e78/CYWt/Ij27m22zT0yO1Mt12mOICoIK064EwRSl6T3APFx0KEacZEyLW2xTe011eDzzc/l1TfTWQHQNAJuyBrdw++tbgwr6jCqkbadMRhkpnDTyVoAe24/EJXYn6x00rQ0nfQWddkugd9z4aQwrXbCiHCrgnqZBl79quCPoy8CAvCBmXXdhFBYAitpAiKtnyHRLERLXCveGbuuwZKEL7mCo+TN2XYScnOUcByM2Leli8+MtmgoJpU5rDJYWcfxUJPOzaQYVNr7nAwOgfnYJhbGFATnpJDyO74RiKPlYBRwUXY4eu6NWaZAIcd7RrdeAlFzMn8csY7+LCRg4XhtZb/kzLHwmwWNimxG5+NA9WysptY9jFAiAuPhDPvaDB53owZnuw3fHLVk+4us4P/6rkOHtOUWHgDqhi0nNmOTXttWzwRRBrMrFJpKJ7X1o1tiWHSE+wWDi8t4d2J4WzqOsWDoo7nxA2saPq29bXndBrYWEALv+CVTB9mQG8pJrIdDkcvi1qUXDcbrxd70ua9d6VEA+QOc82DSH1JnYBfDWtF4y+EDcp+mYhO1sp9Omx9qagaa7AA+X3FLKkILh7idUkQtP1qAk1AI1yLIrd/gXYBlr8eiGHfkiRoLkaQ8408ManyQVL9RO9hJBurlZ6QLL9jhTp+OYut/ukzlRdEjs4AiNN0kTg9K1NXaUq1nelIyerzz+9i3fcTIYeXrL943CxVmnVQJ/eT4o6tYtRXk1BHroi0/DDu2dwRnAhAYaz4kr2CWIRTz1LcnXULZIFngoSs0SChhTyDOPu88TUvwdRVpv63FF7UBOUwMiVfNFKt7wbEQGxEob6aRpg5O9/o+C5XUiXYJgogpELsGOuHhuI0MoHgmoaiQVcIcyn2apBjacKFBMyVyFQH7Rlo3eSsUq8HnPlD0L7Pt7jhWf6GV7NPzECXCFavBk5g9oSlkIKD2gXMsZE4NfXQNbjHE/BWmnO+ZUn1h8ytbziyHCwU0ahNH0qXYscMO7yan9hy0Rw/h3kh+QYsTXXf6lhBGhEpxk0lP+FOlHmcquQbTj0H1pl31KdY3+rHFtQID62OfM4uw0rf4dOFVME9Dr0hjWD+lTPKud3/MfHe9ZNnVnsfT6Iy8u8pHdZpQMSU8kDQ3nulh0QB2IWLSxIk74g4vjTBlrY6cfIC8pBujB4FKF7TDML6HYYzsYFlpe7YHuTFUHX0ceDbbkvQi7dneDQVxIJTqJrBTH1Mll3A6sZKePJYTYXLNlMAtiKASixpDOKnBHuygjwl3fEA/qi8QWMj54EU0KOkw+aDwk8rH8reWsibIfvCHjms65v+OtBqGEU8CTErUJefj4+acEAIeG4R67/iTok9VnoJjdW4r+i8R3esnpkEciOKGFwjl1he2u4ggdKgCzl8J3Pg84vHL5nabEZf33a2nSACdZ1ErtQMnccX+BCeGn28P1cRp+aBhgdg3OxjGjKIe7e1Tb7H9LoK7neOVf+8FuVx7ihipTbQH87un2v9iPlQ4Oz2pIg2BqyLG/0tQ0pDCQ73MfRlyZbtuhC+AvQeAiBRnQOpyYrQ8EMwo9bLhCAxb8KwTNK1Qt+vZPmCe3wPvBF1jgwouTVVO/gr1m0AgQgbwFoFueJEAstX0NpnIi01onR4uCNvMbJdgZ9kQTBpi85doW8OcG6RpRzdW9oP6j8D6a4Z7cQNMn9yJsuhVPF6vJ9JRWqEatze1reOAWD1pS55RUNEKWaLvZNP+r2IO4TvmTmczLOG1oCiNA8TZTeCOcH9JmStJGAdah2we1tNYh2TQVur7Ukz6sX6FOxNipB4krdQ7H5xgOAcyVtl1sZIFJCbYbgOhveG/ZRNofmLrrFMNeQcu9j84MeW/rBTHvw0AzWdsfZ43ipJJvg7Ankl6LyyBgJEHfAvhTKrKNgFfvt/oNmyvJBKEdF/FC0FhoxOm5ASG5Vf/9NIvK60pW7XuBoB1Ud+8AFlhNK/5B1RtL3Vb8HTtH50xB6xmjrnl9dxN1rFL4V+Xf8FPpaKhAnWRNJ//FUj4smwFq7OnVJ638pQ84MfyUZXX1Y2Jg5iZVDLM/fg6hOtG69rAMm+curZ5Q/cvUPM797HoAfrTYduWmIXtL7N9pIbb48whR2wvbTvcd/PWbxNBbwQQ4DVnbDcTbgKE4ETF1eJyO4a3hY5aZkceRy0LoQ3PUFdF9h1ev6gtBCYeYzbqJLEwH9t8mLlbhH1UC0XSLD+OxqOFNEm4lVrrarZGMrZVz3YghppDPZ/LzIEXMFviCS2z5s27D6BicwGnZV+cS8VVPnhiYHgGuxUXuSyKSfcxub5IwCinEPfqqfZs7J8YrCDOaN8HENvnSBNK4XHf/QhQEAWwh6ECAGWpi3MTc7pfRpZahddLsC1LWdrcpbiw76IDhLP6Hmym+eclU7K8M8AayZDttcXKuQ0g67x3CZJD5OVLSRC2/OSi6fVX3YXQvBgGYaxP5tP5SzfcEo4LQtAjhysPIWRzcdDpGIYi0btvm3znzAhPC/BxoZk6tDfUh4iDOixfvaFpVV7v5h/ekNZa2vnkfdM3Hl2UDI+jppKfWMawOJv52zAj18lWl0sT73TtvUmfiPciTdO75tVifCYYk4tMb/zuRme8HxUy7zbV6n9Q16SBefAOiaIouS/JB9Jj5QdCzfCnfMVvQetVJYXpSMzF0kHvtdqmhGrWhAafoRxiCHetaUYikAH+OZ+Uh9nQ8gisSr+fogTRr2Nl2w7yj5pgBTLXV7BAqDZyHbDqBV8JIrJJ+uioMqh9jo2YDt0mGalAmfmNwPfMjw0EBm93gfEi0m7Y4X12DGkGxr5HmgNBwkMIb5TIgIHPEVTxhLNUfLs4A+ipONxbnp0+YcblJV+DE0NkWM3vtggedjehMmp7srRI7/rGQ9xQihd98t1bnoG6+U5jnjHDPgUqwpVtyRp+INAePuXUvAjS20hJ6w9Nx+QZkXPpDXV4EAxHI/RKurJtsTMwL9ZYmAfZxnbty+JaC6P7UyLJmXbOCvTAJXWjE0DX0+gKT5OjCuOBRozVfBFYx3DLkf/cnyhqlpOoEaRwClFNKfm/AjzKFZRjCn3LdmRq2PPVNPxeAXU8gppIG4BUngmTymfdJX7Tlnq23lzWgdCtLSfoIURId8F9hg5BsLbhyo4Lie8jL75xz3Vgkd5OoBvBbR5REYLNjWl8WZ+3iS1mFJ99SdQXuvo2EY5H3u0yDXbxuz7XNREf+/gPGNdiJPctejQ9/5X44/emwZvyaTNkZSLzbPjitHN7z8OK80PttgqEhUW91Z2eldIix2x5za5SVgn0Ics8Ezprj4s3gUpw2gz8i4VwwzfgJQR+RtItg+C9+jftQQ08O7dRVlaNYhg1OWJOcv19r1LoJdjgtAuHRvC4OjEkkRBH99GO9NBKB/Aaeaxu2E4/YDz04UfDIsu6YEUP4hmTlr8V/sWj8IICRucxac2eHeb6aF1pQoPV2PYjI8julNE+wrczDmX8RN+Q4bqM+6Q7UyTD2rFgi845EZJ24DLkDyD+JfMyOnpwfqR11AULHZQwmCdRKLfhURhtupqP+3h1LpfRmwvW59/FrmaLjGEf5cBd6wsx8W1LGmWmvC6N5z4y30F0w6M/sH+Wd6OYjwZhM0wq3K6uAY5Iv1ZI+vlBxBkBqgb+wbPLJ8CeBCrEYnlxa34PQ8T2SnpntxzXdjcINAjWVxXJ6fGybP05h2WnXbusVwHjkGD7hPAyJ9rsZHxvBVfPVMaBy7GqVpWnzFjj1UyLZHOOsvNKwnoB8TN+Bq8qh9DkfDoR0BNDjK9UekwP4+4nzXgksfmNYvICDhqiYKMIPdxu8H0ECtF7oRqwlEXoz2ZaW98yanfHhCfOvEH0OXdwytKgVWJKRIfyojLF24Wgj99deVYkn1aIdUf/BtZlV/h/WXrpPz7NT1p26cWVyV/A+EyYryKZWOYvV2O3UxFIqAQYD3NmAyi+8Kf1EiGO5R+6uhOOEP69JfOKcT3tuqdZTDbnMoT26IXOFBN4qS9oX3zw2byDOFOJf/R2nLwQbLptAal5WDQ6Yx8LFWmvmvR/1NSCVsu9fKiPv1Q3E1oNvpwmWT7+b7ewuY65w2y5Ik0Nf7Sq9HamWEQVeJpTgCc9cngfT+shQtsYQ3uc8oNhl15ZxmDPxc/bHK7Vw34blZNNK9mK161j8PvRk9my8Gn4KjKrKEKzAXp3prn9awEiwDSoTwKAIUcnKb8fPCn1W9WlFpZ8PXJoVOP66VmNSIbPGogvhQW+ZVFHtsJuB9UITb9hnGO0DqFiZjLOz1XKnY5urTTMSwMsCwCLHyJa4nLdPhYfPX5j9VnZeVifMbaUz1ZHXhdoKADqG9Al+FrX3MJf1m0FinlpzGz15lFlG+2lEZ2H2195wv+nspaFmQwKW/qx0Tf88R+6OLeGFf31c1dJUikRLa9w8yNNDmz30Yyi62C7kyRyohU/MT6VSXILQX5YjUG/eO4UJjlAzRg/pDIdUzaFT8G8NqWUk4NRkG/bjtwo9MadJa2RbfvGz++AxJPw+ckghT/QTO4+WRqYe9c2qUi5wNnHc9p00rNfP0Xe1XCwtra47sJ8YyHUCUAKI+zybzRNR0NwD94nj13/8svlmTlfjprNA/WQS8opdf0NYd+AAGgqRCxWIrVDIlHAWOtT80jzMyeKswIWO1+PJsttqELZ0yKcoWHqRTZgPFVGnsppDsvh9EyGIEwVimywNa5RieSrgNtEaanobS5NIFZXakhz0xpmh3kyDNH5hKpu8yeiE2AFv8e9nB5XT0xZ9ZY99xp/unAaLCOm0U+XKdL+DkHyq3z3Rb8jMrxf6L/oW92c81/Qhz4hLVmkXvH+r7m5eM49dLiOK7KB0Q/0FtQJAUKMfdI/tjCxIWMNYd2sIXWeyyIFK/g9H3pxtXdbJIALH7ltemkIhvR6ARqB0vRgF5Bc6f1jk9KcDoqzeXwcwYr6kK1HkhsKTxaOBvampb7F7SzzcNoitkeoUXlL3ff6RAeMljtK6LaU/VrSQ1gzoH6ifS7+EaJiAmWqab1NwPZo/zPB+EpT1OPLFEpgIShmMVgf2kO7+LSLDhtGK3V71krzFUhJcYByugvXs+2nHL+GhDaTwAKRUj7Lyqg5/gUwbFLHsafKjrUsa1KRnW6f5RZ07RNmVQLaQSTxzHO+jWnwteWSR/4srePF3WKkzm/frqzp0Oz2NHAzgTIhx//KuqhW0DVK339k1Wj5vBKcwwShc+1R+2+EB3WGZjKKPwfNC9896xxqiKWwXq9RrgxbCD0RUJIzh1DNk4snkbUPaCVhjVstrjz995onmiT6Vy4wwHYfFisVdsZBBjE90Z4zIZ/D4dDmulQVp5sizCn5RupJEuYUaWePOFc5LOVhuGSON8QTBIIY7FGVzi+OPZ9a9Nuo2ucgmVKHqyZOCHQu3MBNsRceTBO86XOCeQyCsRdj2ZMz0fry0Ql6ia0Yfq+RNm1Ez14ygfJsE6EBehUzNTMUeVGjb27c0ogFudbN+zM4mAgQYoKO36xRzcklH9S9LlzfHCEaZC36bUY/d9bsWXLCGEvCMBeO12A3Cf4gOfe/EMgzKB7VHSeafs0bxFjMxi4U2mw9fksm0NvDBfVBLyosq0Zc+4OW2yGoSUox4hMhue2NUZ/5FGd/fMuGc9ETnaO0dPrSDcpn6C+Nbpma7bKOVkSYUg3udY6SdPzgBPm+GpAGcajz4CqTMCrYWw+8U+Pd4sHdyus9RlpAPQWQtV4m5QpRj6kmsfVTqiZC9dyKGMJ1w6fnxR1O6BxjJoK3S4Mc5eHKP4Wg9mJr/JFW2M8sJJG4WPaubGb93bQexgzUVYslmlzL3oQv+p23mUAbIuOT/LkNJvZfSQ+j6ug/0Gmt/4Nfw0q4StE1mWNU5NHX9VcgRj4VCK4iuFrnZvwVrNpYXyzcAYVOAPwKwuq00itVgosPZbE0tnimpivpfHno8i6S4XKKKwrz1pZgIK/L6p9Fz6x76bS4pBGZzYz89ssJe2nWd689njWXGb/18/S0V5JAj1l1c6/0g4qE7uV3aFfod8V5Jow64Q+jbl+ch94PxvKuJVJLWqatS5gipCCE4ldHr+sj0NdHhrO6ts1IyiMLHrQqmsfkuUQCGi5nHSgxq5lUyntkQmlNYGWN5BWpq62mK/Z8qeFLvYLXd2OrevBwnSGMQ0vlK8nWOUWh6T2dTJ0KtVc7B97YLVEjunUcHLczTpz6dJpYUF/y2hH3g8Ll3RRn7x3hrB1F4Esa53Qlt6KawcQMmBDAXHjj9FCJEbf8pZdmB1qpC9+HObo6LAjam2Lr3ZzSb7yeMmi5JSB+XIZI+y1sKnOY9sxcsvA8sjMEe2ym+PAMfR0nEC6bYUpjfUjI9CMBOvXoXitdXZ6nQlLsRcC9BNigGbEaykuX2NYhsFFDTjHYajwYpkt1B+cc6nCCIwaQ4BynxIGUerXBByjyBSN+xKBr/i9RcgDqx7xZRNEmMtf17bG/eoMNEUNVvpHftfj0bnHdUKdbvXL7lL3CS33YZrmTaT2jiU8xb3B6qYn+vHCpcitBXWndXOo1iDlvBXhrdXqzY5bumaKwPFBppxaE1/ZPkLfrEa/H3MIs/YiqDLSjvfpU70ziH1v/evafA1N+AvOVHxlLTWv0oZ8V2lY2XTnJAc0vqRThPfxV4JrcAxmjM5Z6qApYOQDrlJUW5VZZ2N7g7V1WQBV/7OChTeT5Hm1V/VWAAAlfkSTJEPhh/AzHU8+2Nx+3rHkRRkWRdZwu5UYgXBkIwCz59nCSkym8OLXoWnWFQO4gWSqTIoEJNQt9aLkbEzBcMsa3/VSpXkMO8Cy4pDRp88HTjHOQMCJyVp5EDieBIyu7j8UJzChVfAa/mAMA9qXcqQXA6eIe6mQ5dhxcqD2AlxZ7iV6hHw/uGFBnD9FXfEJoCS/xmIv9l5yRep1hxukpXL7lbCcMmqCoI+jEdLuYSiwVg/qZ17ZOmxYuHgev407w/xkxX+8LJ9/HjsTlyyPAxXEhfhLZvB3W5bV+SFrVWzEyz4OeKqs/O0xqZ39J7KI2y79eaYFur0lbFDth5eOuGZqHQJQR/1aUiBTQKr+fq8r4V2S5Doj665zeuJgnCsZj0+3aZhmoqtpOIQYTMPv908p5WKPPyyYplhdsKI/ga1MqHhtni4XMzIo1+Kx2YQMD64bj0ZOv/MOEdy7U4LN+2N+6UGObs48BE7pRUZT8CFwIFAHqOqNPmTbG3f/GL+EeorX5XIud/7TmjYBIUSokncj+nlSZ0tcKrxFtJZLKsVIQOFv8ztw9pKoSwRij2/gXjPBouh6ZBW5E2Wpgr6KUJryIeRWDgOo1/pR0haBipPVykW3fEWTAO1WuXfIY5U45A9+QzIPWc5eSErSBc1VwfTkCZvOPDFnYJYusHzjU4rp0MJZp74SJvM7DqZX/q/jR+5N9dj6ghadINUElMO89IT/kIpBAc9p1wTetsH3Ndo0JVSC7zxQ2tAKySZQl5+SAMWoZcbvWpdW+UVRQoL1ebyYGzbOoYxV+wj4/gg+kyTAgs+ZpnjGqIc7GoMG6WOpm+UjZfOPIBhnQoC1XjWadpuHBh14mHvL/g1gE/YvkmkeRlsnNY7quPBlmekdt/b8Ikpm+MQ/7rMWEeTX04FLiyXQyTZQqLuOSbxfkftAbK+MPRZRZBmVkKnshNdKUWqvsudxHj4yUZuB7DF8etc7lsYk4YVcyda165f8JwiyVOeNwwl0nsoNbQcVlFhiXJCWklE6vgdPzuSEeBK9mzV3MNQzjs+tvFzlMPlZW4/sm7WJd+B2MCh9/yuBo9d0vOCK8cmKgQieaJs9vqjl5wndohbKfnIBXMhzx9mEs+mIKqshbaInrErU7m3SkYCEQU8lZaf28bqWZ7mumTMk7+5hkriZI9/wEOOVxhuSRHntU6QVvtBGauGGeW3x/iYTXiXRKik4koTgcpTUw74nwS7ztrY0pzzscC7YC6435anlyel52ypM26dJPo9jJGOHyoJw9HxVeSPIDNQaoG2ZzyhEYbQtxX4c6qJMrl+bXyya123wid9OxPcA1L0NhL360/iydg2kZpb96tOI+nyQTxYhBphX7MaPfdiBh3n+CTPgKhEHW9hl/ug393mg7J9yRlOwrD/fM5WQChgoP3eLCSv3qRBSL+boD1bPfmUfTDRGPWY5P+rjG0ZnPesO9W3OZsr6fBUhoFpU30POkP58NjENJytJG5v41UeI6rmVo7JjduCkUrIyd3bZ9+ZoqmbXGvolqQXtR6aqU9jEKjYE18ew9qGphdYvSDfyU25JVTrkPdBFsvifwG3TmDcunTR3RI1emnjBOPbkBo/s+4fOp+QIvx6OYSHjOMOCpVD4CypK4DebBiJJpoIHo/lbpUobZUmuSQmbFun3ebDlc+HVJa4hm/nOxs79KMMn58216aNjpmlzR1ZhGGxel+b29vpqfFNTaentzFs7zMLAQHye+FhkzE8Be8nXNRaN3fCBHT8bpQtoc7uoNuvp3t5TjkJqH2HvxBvpOFdv7YbJyxAscnQcP3Ty1u6N28pwvVVQbRoq0OikOtXESDnPw4p7eI0w7YcWY267Ix1bGtMu5w7FLP8zAmdEwb6y6hUIaJ1u6S1pefJM7Dvzx9jmPUw1IOZ9mSNFJLDgbbsNmb5qvjBd7Yw/0YUdbpPm+TK4KAQ7+SEA2je85O9+AKiL/oynIOceRSGcpI7InKs5QPeGTcBP4M1oG7TtNDsQ0orwUpiW9AJkuWfH65XvGt7pd4xoNNi2KPXM5xG4RJRUpsrw5MGKawhs+i4OInQwK236ZbCUaIXF33nRVza4ulTCJD9I0GETn7dl32vTMJlIddlx8kSL+sCXnpWmPovp4pMzmpgpdLwkub5oI41QYaWtcrKQdaCTOwghr6juyuJhhROM4JmUTmW8DMxQVOytWZvvT3Q2x+M6LfKskC6sePEASInvC3+6dCJzH2FpvW6vAX6hVNX0+BSNLfI1fU9cX4AeNK1dbc14eKvZI3z4qPWRKF5od/bjxsLOVvHqgMuzhqyZczVLQ/0p+O6v8WNlsZ7szhlRleiQBJCnGvkZsREsuTDXiTsxh4XbVjHHXCm2XLnW1cZ/Iu6HD3skNucCPHl2lOlTeSCr13Bttj7xyClKnVL8WofWIv3FJrUqyXmyfF91S+/wAIElg5LYrTK9Wws49DKOkjmBSHkUGArTkhFX1Qgk3YUCCrQqeunr0DaKtBy0htnUZ1B/QehsokTjb9cq42m/MHRCyMu/jeKGbkRl3Viu6Oz2u1FDLOEvObxuRUcsVAF3RJ4GphZrW1QVSU3bR2LDkJ1S6PPjxr9+dIclXd9DEHfU1IERkAn+V1OVkgMRWoQqvJoR3FA1Wi2bhhXMtE4lr23i+NF1vQcPybTj1x6L+itBZVw0Agkq0IJ7hmAb3EwbRx4NuRZVwvzJl7hbdWlue7tPcdETXrxgc0ctQSWVc0TV1LXS6de9WY2n7CYR3PT0eb7svd+jhQZq3piJ5UvI1Urf2Zv0+0YnxvS/ZvJ9xAi8yPIU/dq6maMjOadqBBlTAp8BWpCBgLNOdh+RerMekAOzYQgKH9W/hDwHgdrqKNgZlOEHEi6zgLWiGfkzhjl7yIEC9/9HX3tYaxF9rVqy5m6tM5ET76LJfK/tsrRxqs0kmFGhUWGzwm5srDlEDADzn4bs4X8cfrfJXTeAdp6LRgjSSCtrLGOTaJ1ZHrYckb/aSGQ7OB9xvqr8Mextbwi2MQxDAXJeWHuFehDw+NUNdAFxxSN8leGSzweSTIQhVI+dz40KJrm3KuYR2Tdi6OijtpDMn3fmOymbNm0brd4JesClNCkUYmBx32CyGBpORBkGbZ6Auu4tbcIP3DuP3xZxT6xpcCnL+VOhAKs9C94bjY8cRf14eXGvrOCxNLtDhAtPGfk+QFup0mr8OCmUPBuQgEX5DzgXofPO1GRU2RO1wCoPsS60/42Bl0XRv5PCzDGZHr/dZLzSjYWwYO7CUHabD9jF6RGx/l7exSt5XYMi7LslpVXGBDhwuMw0ZheLnl1JA+loeyuIBvtV+K9HgS4q15nvgXqpAPKXpqTKtZQoviEpf+gOrDK6W6kmVFAqDEcJHkPdTXI1CT+bpWDg09Xdrw6oLiY9K7lAuJEuHgOciDbE9tfo4pYFY+me491qDp5tRa5wL9cjFvdDT9MGzo+bvrJMynz+x0gthCo+Cq8c7zCsMku1AN4nQJ6RZZY+M7az/XoVnpYyFUioJMnE1eaEXgnOgUGWsYDpQ9At3rmVE+zMv6plER4dRJSLAknYTXPFT30GpRcjjCgEaGf3VYiaufMzwXebrASJBSNA0dT0eVM/fM0Gbr/dAvZOHsazw0NmrP+nrF4+AduKE/LZe9IMRZSF10dl1RAsgQRMLWm4kbmxOGpvVXpns0yo3Q5x/XoBF4588lk8QxdAo0zK1MwbqVJ9S28rMrN1lMylz1eiEC/XHBXHRuxsJFHbiopilAc1LEyDeSbmT6PEWMwYIcwiqy7KxMMSrfS8Cwj35loF6Skuz+Na0DSydPmPvnpTynyeycLTWTGkzC0zr1gVYzp7GRj0EG1r2i8gZW1zJ1EVkSQYcrMkYKuBQ7ai7t9jaSLa4sFwpF7a9iXoM21oojok8UsxM2ZjDevtU5CEepdc85ecsVMOqVr8W+8gwHZrgwTdg/Zfabj9chpoz7PRQERTp5iyOqpT6wUJXwYRFo8iwEJ55C0nAAOk3kQ8/gJurHWlNR+By0hzkYAiEjwq2VsPOwuoDr/U5NSW18Q8j4yyFeGTL01xnVsO4AaYDTEgIPUD/fMlAd2osCDU5C9a9Lq1ylpPyetX0OsqDEJxmLrIlxRnOc8ylg+0SbRR7jhvtg5L1TFqA2LMDjOtmeAyEBCK5MprOiXq9cvRlS0IwKCZCBp+aMckuedQ99eeWuh7Yn26GWwwdSiVY0JwP90w50MnZiDHp226m6kzGr9po7MAIVk6SAsdc1JaEbY+G+1y8aNWAOMfDosWKXQhSUliJOgV5DFcKvVx6ouCQ+UEUMhQmPxqZL6M2B2tRnfzPt5wOapfbmZ5WtjCiHm9t7dvnrjoOSrqcZJhjO4rJlt1xIlJapcqv5ttWQFw0Dy1inp9cPvnYB9J5ESCzhoWHjOV0qtqVyX0wyMPKSTDJ1fhycEWaiICaUL4oSRC4kuofnU92BPpZ5sj4dFMVy8vCoxs0TPsCT2DbiiekFV8B0RLX1RFC/lp3ZzXKNCN0wxEVNvxyr0r8QNhaUe7CY9Sins+8KVykoGEg3yKZDRwPosPV1om5o3B6HBCOKsbX1hVyC3aFrRzwpKc1M9xensjJgcO+R1XwXKhii0wfav4fLqVD3+m9vKmnqasINi2iMe1k1f2YYnXYPQcoKA02irHAfpqOhWut4rnJlZXeHf+kgd5J5ioofi2h/pNp2CX1XH4MFN909BigMAXURyI8OFc+Edao7mQKDffpOzvRvcIcvLs/OqoVjZ0fVzTt3douZ4nNZbuPTxdZyHxCr2Nh5yLJqrEIN63Yfew2SL9gaBAJMXKDbjRSe0p5RziZ2WC7KkfRddAtWRSkFcXNpzep6I+hCRoUlj4PJW76/cbE8B0cJRlh7cR4iWRN1emtePZHsVcot9pwHLFUJ/8SS4fZErJ9Fhyd9Cnri/ZhFRBNuMtrwriNMTSdUfFR+Rfn4zFYVR7x0m/vVRk2dp2VNwYTXBZjbxUTw3u2oWWyA3pcnFvbu9zsQ6ixb8+131xYVorQPYzAVPlhgLUnIiA56yRBSewhEUDb5VZ+3jFGxljC/sEQk2W7nCzXXdimyYLk3m9m9XUx29y3oaqpQtJM8AUx/tCwwenBDjZ2uifc9RlGQ2hpnYa22QUAf6XNVV19DeEXlwfPWPSkJ/xdfu3ue/BV+MbzfqxkhQRKjTsc3xzNWtUXrgbWldVfG57fTHiGZFqekdP2BcS9dBfMP3GH5pGRcnwYe0YKX+6FtRYydSDWER/kBLis5uADPOqE/ALbd6jyUN5enol/2epZjbiCTvxFkSRuEFmhuaqnuWucaudIWT/Pjd/W+Bu1BFx+CH91TidtNRzZFoi81widIohnGt9l2bzIr4tzPr2rtLj9QZI96BeOxdNt8dMalkn8ehoz5Ww49OsiEmwOHDGkaJ/j3JmcOYSW7w9AWjsVnRH9kJgQo9aj1oMr43hU1woR46ZwTUIokzp7dwmZJEMv8m+fKZjrgqt1fFFw5SLl/mBuZARXWqODpLxc4pOeSrngTsA42yr+mKbrRugKLCPih9CMKo1LmgYgHNe3AlUEFUT8DONh0qB1V8HicQ/iowQZzLFBX1U2+CDwLDQ56sS5Ug8f03ExJelUv3ibKqSjJXbV2Ki6szqblK1U8C3Uiq/ggFpWRxHEmvXASXzaFU88ZuiJgqUTucQWLBpbV+hrtlm9dVPxvs6S0ykL5rYBaX6sUrAm4s3fwdpSxodfXVSCbFgAGfRqDuly3k+6+9vsl7nOqYl3fk7iScLlpY3T4yI3BUi2BpwV1KoNTA+nx0nb9rYIt200QOJ0xjVQyIC0NN+0UuvVVpQTSbbMCg/E5bybGpZC8G3VOX4u+M9RNeLTmQ3XKQIXTJEnU7lViplLdkR5ykw3Cs8gznshzvVRtoM9+Qf/2pVJSEo6WSGNTIp5lviO1w6nb9Pfr2PQJQsjNVRz5MXqSDz7TT0UtaLY9+Fx/l+rm7HP3PlP4LJdqbmgSHqoBVy/TV47rPYQaw0ezKzpikpq9r2pRY0eTWWZhVoVn7QmXmGLUa5U0myqg5z8s4yYytUF/yG8Yanks5fbPhohRL6zw3q53IVmvCRb75nGwasSJPYWI44Azn8XNEynwSJpqZg7REcv6O3DgGP/gWPf+eIDVnbUxj9nilKtNAfMljtZtG0zyb59DftgAvI17EU7+i9ChuWEpGBumrZWDwN2bDJXD2mzuSqYRWGQaM2RpUAi6MMTiSHasDrcSxPgEAdk0TaQg5vKv722zKm4bKA75uCO8C6zoItnq6Gx6nwKVLuoFq0RT5gmAC/AFy4EOWTKG5q9qq4SpeLemao4ZBdnDhHQXv017MukYJT2G9w0k8HmH+sJnBcYd7VoHSKYPqAkAQumRcTSw9zZN4BzZN+N39CER1cbnFp1O2Ol+WqL7PtZmb946pdHdqFkGYiPOW8NsIsHO9zSPrkbDXenOPs9RNNzNaUikkOdLtOf9K5kPvMWI/zV0Iqi2FFXcoFe2vvR7uXrxNRr1PlFzrBDLF1Ak5XpOkeDlKYLfbjMq2kji9vmd+P8kWg1TbDJ6VzZ1+IlQY7Xog/oqIoLOmdDd1mcR9JwftbX8AR3za/j7533p2+eeH7tvNdjJQYe3fP1Q4qjNWnyVU/eGqiXdWiuwH0J4CgPqZBw/EP3XHSH76bNQHcp3QWQJ3emYhig4gOITFyBdAP6wURlKlBlGw1GuO3Va+6N+iSSmT0CH61IztqS7n1+8bK51w5BmkEXYOiTVXqZLOlKgF996z2Ohe2isSLrvS2k1Xy1H72m6p0sAoOtLZp0SxUD909ehmJIhe8O/joUmfZkjxbSnXSHwreget+6v/Tq0DNa3qz0Gidp+sHApME0t00Ta4TmUyA1bCLF/OLgqrYb1fWUYdy7u8uoviMbBHQh/3tortha/+TIW2CaRdsowQWRv6PV7/Aa6l0E9JbgT5CTToPK28xSwawCJ0G05dNwrNzyGPlbDMCLhPknDMTRQHKejiQQUVS1HwHP0LawSVqJ/VEhpvSBWvuukMRv9KFu65fTsfeHPEhsE5c3Uqaehsqf+DfAJd9MqhrUCEm5LB1V8VkvibfdQmFjF7vSwYm+deFBvSRudRTUKZEMk2yEGnTuUSSnBa0gVLCllTWxfWSsl1JYcdXyt/PsqeYJaOSuM7Pxukhg9DyYEQAMSGNf6fOpoT7onEmNkYvZGciUEh7FQp8mlxU4WTODklo74lrd5JWg0+c1v1VWkrwcgVIC0RpX5+wTFH/hhT/KerQUcg9ApgZ+uRP1dMIIzehlkQC1YSQJeJCbZxbM/njbc39jqdsZxarzM7lxv+6ePR1S3MGNTkq0+cE7ZPDkRvtYVlzDjHqEfgcNNCeVBCT5FBOQekR7IE8JAf6b1vWtp0V9AocfFvjSOp4EXhAZIbUFODcrJ/+AeU++cSBTWLugHeC/cNfD4T/94s3MgLbkCnZz0HJhxfEuy36DBVA5yYucLQmJi15joqmg1x1i/USa09LmLA4s9AXBkknmZJlzlNLxW6Eop7tvvZrWiEF18Oun3/teR3TZfD1gmNWAOEkUbuxrVepmtdR6L1dZ99PN2u9iR+SAWHzwcoU+LyBE7tEB1pmfnns5G4OoSmx8EWNfTc9pGBxl6bBcMV5LsVyYnr4qlb1PEZGbz7XsqKo51Ozg95Vhf4b4gZOj2ePe9v0bo0H5A470Qo17sCTI8Xp4uk0IYIvoeGeSH82lFfOb5Btdtrm87iUnH+QhmwciT5xYgob/HKU45l4vUKhshOKRzt8qXyuvzx9cmdc3kvjeRVcYraQnRWmRAzYHFCmaZxJWtreb9k3wcGQkJOaqzMIh7VQaYQfYExislW8yVlpWLo3M2Rd0Vb97J4x+mbmXC+0IbmzcS06IO4YI4Z4bWgBvIIsT8XIXtALHUt5F+8V/3MmiiGv8cbZPjTanlKb9qpa9VIhXzzcWngqgvF2fhaVXwzMejW3n/T5gbTBvnSv6/xx3KZvnV1Kq4L/m1bnuPYqeZIfn6PGGBFCqLbcpvGcvHxCzfHUs8zYIsePnNa1BoTyX4CfM6m0yxCfvqaThbqumOUrbecjsI/q4ZVDlWW3YX+cO67lPRSBGJg1HFgbrfJHzDWT2dX26qujt2074jKs7Gmf3JDWBalTwvv3B9KGYy+txOKnwq2Z5gZFdyu2lCSagoLTN0KEleRZlpVgrJUcLOLTqqkpjfDoxGGr1pTunCId8RRnRlYC0NwC2V0eOICm3c//pD/QLoY5yhqqimE0gNS/nSwxF03IlaMWvpWE6GcCwtZLf1/Bh0FwQolYzEZSHYVqoieONahSbK+rzPeKd3lavan0v2U0gg8Oxs6JTvlO2MTkU45dlqDzYyGsEtkF0M7XxbSW3mMTq4RWlx+tDX8KDaOsTUtpo98ea2quE/q1QisglIR1vcPpEL/+7lOkB5C2G2ijK0h+H7dWZoTk5v0qyO8IfCeeu+3iND85MyALprnVQujZI+rVZIX6RGmB/6tWTKy2AFtU5bwb+vxxhB2ThQ+lZxbkmv/50MEODZYqwRqMgdZi982DL4mZZsibl06QC1xxzgu0pPHrUxPYehi842bGRSAdPixCw8zxUO4CSkULG423NWUCTN4v9gw+8/Kqmo5IRZJLLTtF0nq6w/B/tRGtqmySeo1ZDYKfyL7lSpZ5dz/PeA5dafSJLy4VAzXZAWvALbylpKqvosjjPmABHC9G+x7VXej7RfhQLvdXnztAIdtME2WHwOH4JuvPJQMFo78WAO3qF1rC7ACFTWTX2TV3Uaum6jU0K+ifvJ/A6t0+z21FZGmxanBFrVK5LuCAxY4nkqeRpjv8KJk4sfDnlrki9IOqBh4joFliIYpyTskfyha+bAsiiyDi3XEUgUDpbTseM0iRWYYjvYnf2kBVhYpm8x20JIuHSh3FJPwUKf52YLxRq+qRX8yH6nOg9NYeZACwDsy3FK4uUSEKVsDq/4nPlkRbWRLVVOYfvzQqC4bMqRVjddhItLhrYTuA5oOhtLcWdaM+lLbKc2hqweoaYj/qjn6FprqmlIeq6dM9b2HkVtkLDzkAb4wYA6k5ol3Bmg4Ab8Jq/QplmiP2LjnqHJOsTyfsnqoj5l0U27GxZfTx8KHFiU5of+4dsjhLs3EqFy9T2Qe3gXano2f/fhIrbnswiwZe+sJCugNu2AUPOlWMEhvHn80nh782tXrk4qOvHO+j501SF0samJNR6YIiJcN6KRmAa0yUYdeoeTlHC6Pg8zqRStdv9i/etxCP7qvdHSlptok8A5vo0aEPwENOMzPlZf/85Lbh0bEiLIGieZE1A57a7XUXA99FC3OgJytDACPl+HCKLDz0PXqY14CGKoIAKpGLXL79vn3UVnhZ7DTNjJAWWE3PhCe+ajTtUVRbtgK2s47dBfAg+SlcIIjj/3V79GQZt9G0lyWLMz8HPaQhc7hhg+GtCxH/I1jWyb2abrepclhGtU1XP8XtSBSEQnvQCDsPxGRLY132RffXI32ChcxXZZAx1o1fP16vs7Ne/ynaKUT/u3POSUMwHNp6ZJv4oodorXgsQk64N1lnUDOFipLEfTgQPbyfIENXvFpz+V4xy/T7z6djiJHoICe+zWosg+v09YuhHjI/UAArPa4KQhTMqDR6qP/Bgy2QkPTbJKMGroVuYJd/OHVPLMYD21Mv7xLyfpNybVV3QA25M0K4egmIByV0WBptftBbV2hHTGDOJUOi/nXx2AUjXL272yjqduk3RjEqAKWHRFUXYurJCUgH3M58mEiN7gJeL+l08cOkji9B0XO880VuWdTR9luuuLsc+w6HmUnP02RtijH6ghxPONdkOyFlNFAJdk32pq3uuciQaZiqUmRA1Ts77BY8rmo3C6MYjEoLwC05EqfXqXlZHsJTDucnVsTk3loAH7F8tyUu566at9WLvNMM8EaFj6N+FaLzPoTptPqutNBCnn8RyMmvHpXulZpexKSTBv4TVRGb7InP5yJMkY01/oCHgKz2N6/RUrH9YFrI7KWMJz1i1/yM9ndSRoy27ZYLfg9lYi6+aVdvcaBaZXMbZfU1koQvBDxsxf6KcR1cyBcHf22YdGRhAxglFIvUebRPEzqbbkBGhPPQ1E32+2rqwh0EwW6gQC+UB4qG/V1ViJjSVSv92MVOdxGSp5gj2u8QdF1uqnFJyzPabVT+9L/RVkP8mkh2U+JNGPozsfJkPuSOBAK2rTtxb1aQF9vtdeA6nEIkAdqiGoDR84NplSgrgHlIr56wOpbn32LQi6ooQQJSePlf4Ci5cWsgLKZ9Hvr3faVAskku7X0MosyciUK8EtIg7V3SyGZiBV7MjtJSoYpUfxJI68l2+3fvknuaNzmdV/De5oKORLn5l9QYH9xG4SRJIDMhWDa5n3Hvg8LS6PtvkU12WvMJZmxL33WSuoVM5RIlApDn8TdkYSVlQXKpCPIfaqAVYEWYx7vJG0Z51X9HN0WMXjEv3MxEBDSGJ/qCgNggEthYmomed7jg8jVPvLtF0YLa6eJmGYLEZO7KRMxCAgkx4fkYmmwLeJDhQBTvO6cVZ6zvNlfkdehAgm8HF+MmALz/AWO4tzvUGE5gufGUqoATyODVBCnMS2VfcgMuDDHdkgOleBDQcWT/90pLrtAA7UAKJZtDfUPQcZuBeEnA1m4WNkyppGDsihU7kPOJyqdiXqJCuCEcdnRdBr6mV+4P0wnIwj+jdAbBHrlPm3acCZ0VrPRRiYWz+y3BeVmCfc6dPTmeVG0uONNHzDmeJp2pxK1fhhFH5Ys2Bkq47mrPUKyAIkjCV69F1QaIjDiO8Ba9tjGEwgUTcp/NYVu07ySPoL6ejzqgma/m4nsLHQeeo8SVHx+JJwsKZv9I3+5h+56ULDivw5brxdaTFJb2gfxWFZM1d1qFS89bsJ/Ci5A9/dqqHCCEYwB4T+eKf5cy6ee7Op/2I7SoD0bnnOrlVVTcdBEuQVvZgnz3963tpi71Ed+/hGUXuoReQ1PpNNKOp56XpGd2WpcpkH+LBKTjrabkpbY7Dj1XyIBJj3BKm2lt/9PHFzKSYymXj0N2BMcTo/nGULX7oTWyZPbm0RxOQs6Fy24MxmoprZKjSTgUpcDoaPNGJv9tlGTvVWmj9sFUxPIGgArGpgeDdfpieuB6KQIGkUc14alJawm0Jeq216OO/4sSJxQO36RRB9AgqN6ks9tm/GdXcakgZA1Kxg5m+aIRW8u+huuHcryUa0rAge7T8rFClOnDmqCVgyBEG6ivQVq9lOnXZZ+lh21O83nvb2dY4m8NNVRG9G+xjqbcDbevDfl3l5sYl+me5pdm7RPi503UROYt7GEoLn6npV6CoxqbFyycv1H4gUZRxyhlqqvH8wnT4A5G4qVIaJJ8aD9TyTOUfwp6EhVCZO7SjkL85DijKfY/7dGhL2YWS8e7AKbcmI/0LilqTOWRzE6Z/2vOoYtGa1HOpVF0tRoWCIG0jEz4U6iy5t1Y95AL1U3PeS02JM+qwAfjNrRz45YsZ5Xo3Ib3nBleiqf6eJGfmySAfBpw2/1LgQgQXiu/5+FVQYqYzw4Js34LDl1bJ+2LI74A6c0iDNNA/6qJ63z/Kb3YDqd1BzmN9dLHsZFqfxy5P7DTAFFi9KyLZtcFmvtIKFe89sX6el3IWVcVYGlxRQTaT7Y9ad4I17uQXOQS6VIgcBdfWzNuQv0KD/QRB3d2Qf8Ukvm/3VV9gp31cLOpjWxQCz+p4H1Mmw3fSXU8v1fJl5QQfZbBHSRNc8niQGoi83pWWz57Fc9I24BuWg1UXCa/lFns4pJtidAYmdCw00ZjnFXI9fQej/B5jXJvwnAUJJ17Zs+FmLhF/iDfvg9AHw0Li8qTGfLOn0XEat7oIOQDlSB9xicYApUOm8MW9B4bv3lHnuQweU4A+HMdDtw6wL/UpowIFB8rW5inXQ1NjPDgryhjvS/1alL9IQ/qSIjpYNtGQ0AA5xRps7fFzi1Px2jCXPxpy+6nKmQRsNlw1KGud7wMCVeTQ9wF5iOplVbVlxbsWZKB27HXQAZLoRXw8/mR2U9Nw+1JzBqXmftlpthVRU8XAqjOl6RjxKh3a2jcqVtFivJ/+b6GJt07VGyzQnmuBcPqUa8W9U9WtLRqsiFZCi6bIIAc4mDsh7WJDJ/Z9wzIwC14JHPA51BvHbJaQXQzvWq0xXLJI0ICfAmYrOYlU1TiAteE0s9Eu3AJqJlbpZO56VFO2aJpry6sr3kLeCNkJerknSWW0mrY1smK6zNpTSMMLzJkpw6+jKkJ6Eamr66oB3E9m+163aeDYU8m4rzD2vhN2BiSPkynFBc4NBe7SpJ7u4Ex9oqX+LTJy8qFTuC9PwxRnm52Q2OQAku2ouvI2y81sslgWQW9lzaLsmm19tipx1nsDKcx0oPL63WvLREtXPn4CE2pykFTGwFSZo8b0Hwj/47fmBiXYNciZkEfzjF3USbC7hQIi2+202TvJbM0rh/X5bpnbvYvRHo4pmhK9nJMstsxfleYOwseAMBL4MBEE/7OwIXrjQSVt32ojz16m4E3FOTwQxnIFnydRd1jBlmd8UMkvp30aci/BFQIXiNGPTtx1bzytOefZwenuYiEhDdOON3Yq0MXBa2jUDnz37WwccgrQQ4Bj1H2HZw9n2KyMpNqASg79uoq5/yeXa1dYj4UvrtRWwfMPCCliAd7RkxGIzpC/V0yJgs1waZB5HU7+4miKiw1TaxXyFL2bbNyCzAhTlcRIfZPM49POrZn25gOMeBXBq+pSyOtDTuMeXd5Y7+FRLobrWXrCBesh3XVJELgNHMgCje1jOU62jDoZ69OjOIDIyISiEB3a/qieYdqG5VcGFfIZFQLx9vaky/b6GmL7pa9HlzNjOhgHvYsdzB9vzd7Gi6IpFzJzBkw/hiHyNqeKvHOrvn/ZKsiESTBcYCLu+Bdttvupom9IFLT+7R2rofwyYaZeb3Hft3k2fCGoqPCVcLU1dW91ZE6pcHUqqRWRnLRfSa3Q8hLSfC+YeHXIgelzaCKMkpCitjFYpyVe2UgNsyKi9Ts2sJK6humD6iO30VcTmyhuj5LbjU7hTgNO8QISmosMYbTSL+F3ljsDS87wUfllaHUUMYlw/qZKZSr+Bu5QtyPpKJQlEIQy7/bQLqbRpfW0RYXFJRl6ijmQETM5CPI31/Ahbv6q/AXq+HLh6mGvcclCQaKjnYJKivMi6YSgPivqOCDiXQz2VYyqtiuf6AVANXMaKLbz80N0U+H4JBmUsJ+G6qE+ftMt4+EMwILbDc7OXACT56RkYfWZypNCd1NTjHZGEp76DxdJI4icP6BYkv+Y0JJyeNi+jbCsMZmz6w/+ccyqnOTmOmycTO6OjrVLDxMG/18UsxUZiMXwe/2wwrLqCpBzTcL+bbOkQjxc+ePGY1IsaZyHVMN2H3exAWa89DZGGQ8vp2fz2QXyMVAjOuxWywYGF01ecGok+CrRtpppeJT5iQYiThg6QF/JkCTWmSyhmWGvd/4vBryg7RfuLXsl6sXD2vK6oprdDWY6TmakCo6R3eyFDDKuQbG5Nhcp1rDhA6F+51DfOCvU30eAwQFpkhKngqj22Q5UZH1KcoyQAaFJ6Bp1fu1h0LOS1Mi+yl+vthMGL2IYEEZOEwgf8wdHsgPBkwOHi4isx2Aa0rXahitQLwmUN0EkD/L6Yy6YdUHezeR7PIpBkL6i5AS4dnQAv7MtemIDVcXGkCa36mDQpHJP4oFPamDVTAtTm7/4N2tOCEXy+xZLkcv/TwHD3QwLrFjBg+NDbSfgtSbRANh3RwJ9N/KICogPSZm9KwjJoTkNlZJCaoTVB065qlNSlr1uKEyfenFSew2F/KtjJ9FxePo6PFl9386i7rklSqk0r30zMrHisbU33qrPMLAZwin9N3ZDSN2gyHilGW2+3l0UzxCo5F2mAXujwELIWsAko2kkjEKjffoYVVBjNguL6RR/HVdIgzKQsFcZc8d40kfPwzoUTnLmlkYF6w1Co9joR6JsRgfKMndsQOCepsTewnl2gnP4TQCl6wHUHRrLfb5Z4saK3n4G1Isb/s7XYfw9ureKNN74C8J/QNEZlpKDFoq11FTmgxEfTtJOrswsuFTSVKiK/eoBfpUasu7XWKet6v2RS610eStskkMtf+dnYdfkreF5+lbd7FjD4cyFOXJFYQLz9r/x1//KSCawiSL5A+mv8r19AXbT2Lin66n92xAyyLrh6HxL2nIGDJU0cXTmzVO9s9YYYHO+qmcyaOhMjbWqUnthvQw4TNuxYejt2Uy7CWLJSZqdQY8Xc8cPHgZjs2Q26JsjbpR1aDejILXKM0GoTo52Ho1VKRfiNuPbVqT0FSQGNN2vWe7921oaClQjk5sTZjTfr8e7ITYX5k49BVOznIs9wE8mlmipKYwXyhewD14Ou5r2wthXcHMyrZmpONwzWCK+gOUEIOHmnFPNt8/SjwXdD0Ffdfnnv5Bzf7NtvGVAviCsUUt0bgiVVnme4lZyTq+rFGpp5gp0OLKymC0dA2Jv3ThvPlOJIzmVZsByfA/O9eiCiYrtpcX6+Q37bBNuDBgBd+Ih783R0Ln9JpcmUyzxQ3QcpAxKLFueUxccVlNVMsHhtVT0BF/j4A6nAdvq0QyDfqZqdTWanwQAHsDYxfY6bimU55hIYofEz29dISF2dcJD2QlSbTm3PNYsiAbcJm1jlXqex3kUiYHgVEsLAhc1ssRylgeDfAmWNYGhh+cTGx+2iDZZLO+n7tJ4tO/CSBbEOUtMw1P0xAWoQS2JDl3SxPmsjOtNfnEyFQDQXnVzQTiab+xidgKU7DA5qgwisFRNlMn/b11Q0U+c6rhbXdHq3C1KBi7a7aOcy45kxVBHWvs+FM/e8hWHn+9Hb68J1kpOd52WtxDilmaBkcy2br8ZiKPVNvp5ft6FMsqwpFlXpiQ1/L7VPmi0HEsw99R9HA7APICnovRpRko8HBAHI2UylZwJ2ZvZpEIvVScybGu6ss/qS+6BjT0XDU+0YnJzgGNDuYp3714CIsphws+3dvqQNw7TMlPrRnx2PjQjX40CAVr9bUwbzcviL4V/sOwiJ4YE787qNOnUwolRusMbHesZghuSeDBglBClmiVi8GWYNCzCSKrdeefCWOZ8UoXrHPpS/DJlgw2xG0JzOTPs2XI1hmxrOlvGjyELLXtnwCTH5qMxazLfh39eci9cAiec0uywcGosTlVzWJC5bekRV4/L2rILVkgrlOgRbfHcHbjtMIm/mDox+fSPw4tqiF/dClWa877mWNsl0kHVykC42F1VqCI5d2dLKcybs11KW4nGDxmHERmhB7YceRQBED/EYwWl87yZHck2o3z0lJa5hVHwQFxyUfngrXNG9Hc1x2PRzy6aPFXwXo8cAzmBwT64TrpaG+Vvc0Pi+DXmOfoeM1V57TBKXAN56PFaPeGA+IRKUvvPlaw2XJMfMXiZvAq5s6v9yTVU9e0fTzrKW9Wo5NyEVrWNtmQv3hLpta8FX+a8UT9LPH4p5M6BP+SbfQNWszAUInsqxMrJZQ7BOufthpjTw7a0rKXL7SNtF69QML1lFD7yNbqWdNuuhN37NheHp4d5vK+iedcQEObb3N8feL6K6oRj7IcBa0JxlYjQDVHzJqVJe0nEPU/pvfosxcCeR892us1Nr4FLlWh8JBMMoaS8o0+kv3Zql9rWOV1wdasX8fJefjZx8bqi4bwJQafxd6nbO0CwhAeecPwFiHcEAcwo2kaY8j7pv7blAUH0A4N91Yxvglr3BK2SQ7dla+63iYMdYOeWntUfyBW5cLUEGjzpIJLnrzvYKiSt+BcRHW/yM7vmmHoHEmapNylqUH6y9J/c9HvRRIHExTO4KZbSQkXnkIfyDRtQ9RKcuTv75wUq10FcJ7Zkm6KPz9ZZgRO9ZEoNcioj5RFvmsHQOyLgAyUnEd0Yk0q/875jgCcYknywXXPXsRNT0+ordZnYkk84SjFQVjgFE3hdh30LRh9J8t+OfoKfHjYIW31uReEyw3E/i9jKpLn5lBHE5w7KfTN+9Bgnxn1a6Nwy3EYvVP6G2DEMf4kNlshCaSoG/rrxzCpWK9ApArpcznJHhAwA7ninCdbLPj08GjbWsinCqeTqcSJJENTs9j+uWVUtDB2UGvPa2OtcrEknCjHYG9bLRjl5aXEIdxch8FmBV0dVA3hmNmf5ygTar2Cuah6qr3/UEVwde1vNny++h3LHvcuRFLiLcJu8hrxHghhnUvJBJ8TtZPjJm3n4U3p74bIbUZg6nCVlw8jsJ5j9teQIFjGWXQRd2ngNm4RRuDdUg9rO74Y/x68fWoo3KsECGS0Mi8T6TFpP4GEkhJSX6H+MSXf3CgE61FZqbGmHOulGBC+qAfuRRTftJIJxjxyiohFXAPflM17dOq/8e2FOvnR451AEZZAsorvf0bLJIasbqbLcVfXL+YnyyMjXcOg0RtjNwEbQu4ba7L3kXOfzqst4ck2pnzaL3t/JV7ZtrG3UBg+XaMbQzkSfYS3WHN90bRfz8oWoak9v8wa+Lmb+09FQYTTuKvTizfdt5RL4JF3QFHNweKIFfJWCapUcn/B9nBWSbcN7INJ49Ghr39WAnLmab1It1bS+7TwBsXA86BaTTGrWeaPSKhdgLfvqafJHev9j7xFxizc/WL0ICNM+nOG5BmADYgOHHd409sQ4s880gH/ao1woWNLIm+9smLje90SJ31ytXM+XyR4+q10pqIgMBptD8BhoV1H7Q1s03BizCsTsvVY3GNoGTPlN2vXZy2meH1ZSUaaGGcmga7NnYc/5NXgx5B0aDoRIBEnGLWwUCvFLJBieWBH2HZh4Ma/Dy9DUDplMvOI1qpZHIe5yTouNH0U1po2BzEFzbj4sS/N/o4W/YzGygZL2/cFjqfPn9/6J4jPdTedOBQWKvcfSFtrxMOroUUYVFlxgAcx6U++5zZDkgiJ4TW04lrjPEBgBUGSL9IWmBAxi2Q0xjq4kgB4WtDlOHm4hsa+VN8gbbCbMVUrBbB0SnHcbnoyrMCSN6n3gqB+c/RoH+BSCTXVL7xkcGdg+wCKMm5KZSXHNGZ5o+nC8J1zhB8QB6zkdI89MYncTKpFxaoE2I/IzA19dZDjnsbVwg7hLfXxdJBgrOddyBA3orVtghUhIod9G6mKUo6kBXCENRENYCICM1XugVf9VjBXTHqd1Tps8OyWmXwbKyttvu+tudymjW2Iwzdv4DGqGmoR0leEekw+TqO/WWV7akApAzA7ruu79UVXcpjHIMSyZ+uPAMNZpLf6hc2zZ2KdYAsMx9VwMxuBtYxo1gAaGy4MGoEgxRzPNY1WJdZ5sMhHKM4DW/ozcgUNaaowiGlhVE9YoFzvHILnmzUfEBg17TIywWNy1jWadOePedRquqk2oiTUcvjkocg6LpzJo+0sZuYj65Xr6eZeSMYAIQCI/cBGhovUwAYS+uVgt7ccRmhlpKHGZRyYgk172PkFUxAqUOHNpOwKWaTXGv9Kj2cz3HJPy/XEsGktl/v7lX+kT9SqS6xJc5cJdx0l+zSbtZRkx1nejSdDAGJH0bnPegIiaBZFeSu7ZxkuODU/2bF9eMUqwrkjEl8NNOWvIdRKIvjfGIQzVvtSRcAtf3YlVJzS3eiiPdnIMgeAuCYf4dVhgXI1zQsvsbh2//DHgqGY7ds/Pn3RMsjmfxGQIDyxf8AIlC7aqM0jQarxcBpCz2jnHyPr3L8HGpXRuSkDEPgKgo1MqYmzni/BXR2DPT0DD70HfJ4yMyOD9k3g3eBCr7m7R5Cso2hoPo2KryTXHD7gufW9h8erBpINmhroAeEDygZNOdt0aFmj6lynDePrND84w3V4Pe7rdfb//wN7E6IaiJkPQ95Smf+x3oTMJQDS4zBcXWqdcyBZlYaH43nvwcH2mfwq0244kSc5kJygT6RBuBnf0yD0/nOnQ9SwOdIuQfhHQa/1dgYGjSEAwoTl2zB3uDmIviGjekVpW8YElTV9Q9CV8sTbFbOWNySOPj2nluv6amHFFtiur78nuF04KAbhe1pxagAFdf5uPxm2xePXKrp4ANGeD5EJxFOkAWhDSeTY6D+hKeOkx4fZtmT7+PdLG5yKC+2C19PBnJgDr/ObtftTxicOkQSTdYyFppZ6QGMeyyLKBJnMqAH3/gzglu8uLy9usa1kqc/0yNBkbekGK4LDXN9lOO68/g4/qkyo7jKiOfApwESEEXQvIFxbOvVIdLgoCmnAzEfbRh/B4jSG2EMQKxZ5UsfzF3YeRl+4hvxFQDjyt0Wjo7OlbGAQAAPCWCqzhvTAPaURD+Yf4LNuIcjUC/umKAQYR9b7UyAHIDtsXRI2/MQ3Lxxn9N33dAbOxVGYioZ/+6G+hWpdmz/sCkCcP8cWh/6sZzMtkDocPqItNOu91qBFt1nMP+W3Uq29bxlDMrq6Qd8IFtJPVbqjWbWS/a9LLPUXvqxH/wepC5O0UDhFvXXg4ssRTweS9DI10JfAOg6uyVTfI0JYb9/rRz9fMgWeeC7WNnkEnSwHFEelsGISxKcHCy/rV8/t/wCBfvpuNi6QfiCdf5or+IDP+ysewyAblySnYXeJ2p8PJJxosPBbRpz7jfy+9Smv5ok8zXJL2aCEwC0gAgXGXVtQdzsl3HXcRoacFzArO2q4bBX2JXB3JGe1MAc8iUuYFLdgUZ+qbR9DbNmUaB4qUwMmPQFYeIF3Z6DGIA++kr0JXx9ZlYJ19hx/C59Fj8BjyLA72iUB/3Ssqlh2O9JKE+LY4Z+N19XmdjIwCNtvceij8Fr1w8zqDHK8ZbOI/+T4MHxGYaQCsauaLLzBPxtEuh/NXqG8Kn73V2kzWzKUtf3lqh/eDT+oZ1dj1+zSzd2bhS2M46Y0O2REnQEfgKLH3M6OYDSwvvZTkz3U2VUy+74eyUUHTI66IzU6QFWRoIJ3B0GzrPf0hz6DeeiAesHO/PLlxNw3RRGfIIM8gehmGs/+2rDQXK6LHvY7HOS+cIXSilrBvl8HNLx144o8Zwdcu3ZyjJzdAGQDq6mtBdac5RTZdowfcgvHrY5flfeTuSk3mGqE8MuzX21KCFz6JXQteRWGruEYN03mPSDHdizUcLajUk8KVOdQ01FEthkXdPiY3HgN77idPR/yfaBA1xJLNs5ylkVyKZ+yJb7zuIMGJRUIYQ/JEnzwUIpVekzzU3QWcWmmMxQdMC5fEJa9ke7c5h6cyqt93L2DYrBbmwLzIY52FEqlQ4NJKgQ9O7KuAM+vL8AcxRa3AdNQ06KJvDStFeus4l0EiRaKeFDDDzkp7CsuEIqkxStXrqMlEowc83sKHo6Gb4GOXKFaZV+zO8WrVH0phe8wJZ7GLU+R8mxnaFSRnGspWHyYyId7ntWgyYgXvMCRA3fYk1/ObeEaN1IpTTGpCpO2GOduY9RdbAbncXbz0lIkXMOxWvir31maTDg6Bmth0adHgOIpwT4NnjdxcFky79wpoUrPBa+HgNXJxNeAnOE5JiAK/n8/1Vm2hhJWo7/iX29BH5uT84azwaowc08uXKn59MM2ytQcK2mrr2VWsdUSHdZloCJ9M8Cok9H3dRF6S/rCHxWNiqW6jjO3327mSofBWD7kdUgxAv7kPyLja51Hg1ynrWcKxjCDRsz10CJLuFr0Ip3Aa5KzVZW/Wk0T4cEHc9KCc05vi8YfCQkVQ+o66OdASkTSrPMcyvq8ebRZqVP5MsEJej8DIcY/Wmstxh3O8yvb2w2joCP7my7ugQR73IAiFkFZxH9upKbwqXaz63AiUMnhLX/J5FlOOtBbIqL5yXVX+fDtxURsltK/lSlPWFfq9ulGFYyE+nojpzQQibZHQO7lNycHXbGlbQlk1ysQTg4g9xZxv3jvV4XorX4msivRczm7IfIsjKzIPLVNaffeDxBCKhZM60iQym6VSesbPXPHzt9zENDaO4e3q58zszXg5LiVcC5AfW0LF/uvZHNfzDKYIT2O7PY2o1oHtvKSju1VlmKyypwXBdoyRbyDrLKTKUyF0BJUi4awanjzAz3JdXL9SdD3hIa1eBxHdPEYcqmvbE1WwWOWrLfwCf4mE8hFZiumSrhnQdjMyBej5OiPspmpOWgRz3VXq8MwaOIkYOW7nkcoLF0IdX/i2XUx5ljNDUeFIsbGpy0uVFN6fhxV7mNmYMWdeZo7djE5C6VKTLKXICIlKX9ZVaxeXBLC6QhjHhKNdIu6vxxrRxbtK8Q4JVEghEbVo4BIpFO5v5p8QYarg5NLN4kdM7RDDQ71kfV6n63lByd0zqZp8tmANQZ0hqvNWYx620R6XCFWDuh9Au6ktEumHsK1686EPok4O4658XdJPnlfF8IGtUcXUEru4pX9LBIiyFi5Z7nadk76J4ikF4tbuWifSgfMDQZfkocZuMZO3GcJazfovGLW0v9uf2iqq7CF7/nfr14a3o6Yx+Plrrpyrrb2wFAvXAxRF2Ba+eUbJE6PXZhdTfhY3N4oGzyTdULqBRIokVsFgYxwZUwY5JM7Ka8AmFx9hSTGxQ+qkCE/xRtW2qWkYm1uwQZmBp2EvroWWhJXdHNGYe0iPmiF6M+VK9YXGt2+kJitYcUADCo3DVhBUAK2ZEXft6JwwoiR8/yDcL0VC5tERJuvDhOgC+MmUgmmUw1jI1WIwqVq2o0qp3Cci3iERQ84DPvZ375R8Y3HG/Ukeab2Og4jxqs8ytDnYoK+eSs3wMj5gz00vWcIlLymu3KKVya6t9jXZfi1b9srRQtz0cXvJ+u1ncYb3B+NDjB2XWLhFFT6rdTGVU7SRGJAeCalS8aeuTt0B/pWfKw2PdR64havnxxfTUkqQDK+3ZYTCUNvMv4XM7CkXKrc+9q5FObHoO/OQ3QIae1n5Q/0iuFzfV4V1ooks6RRK/TEf8Hqx+O+AqtVvUFA5HMmpF87/cim4IrZBLvQ0uhmJz2aaiBp5z01m6+fiJBQVW37JBvTi+7TtsFVgslUt3RkmJZgVDG3ZqxWuytehUV6uFibk/A1nGTTPNuONHZn/F9rIUsjAex1FOJQ+4zrWtpYB8ckNwVlBop3lXqzmRgMrd38mZh1QpER2ogOlb/m5U+5UthFEGdxyVboTv3UA/dSLHbGVB8Z8/9bSrLubNEFoAWE8yofOeneIDXmreqFyRQFycL9cXEb5CQT55r7zTEQmlc2xlnZDsHzd8Zh6i/Ndcja8lUAvAnz8f4C6ZrsFYGF8ViOGf6Q9zFAAtCnDCS0Tok2QQE1V3kz1FtbvMXYhRv6gjHDvhtk3ApXs5P4Aa0aVmOjzxA12al+yy1P1EUtqaLTHnFqeDLOkxEIu5eHGVcu74uKYH7QEmKwiFMNAK0uaubE2wd7q9ovPWdxnmA97BaWOYPK/67vHfwx/yh9fg8++Oaebo3E1xboKczuyevEcN5uKAjPKhzcFjopFVAKRgAekj/knQOrmTBvZMYy9+f4gnq9PBXOHcGKtbWB+cmEGoaBf+Mn6JCWFyR4o6TJVTi0uvAXEq/P2N8M42ua6eEQ4xDZUnxFjWR0LIUn+4xYLnzSjauG/kk2NHEkZomwXoOAIfP2GFe+DSJtp0MhtRltmdKiwfw4jsHU0Y/mXnUoS96UKAdokUIbec4EaMHOmVNFJ3ws62QwyL+8DHeZy3oNBD7uCsgCxLemynuXEhEC9OXvvscl3ioYavImKWbfVgBbaEE4JQsyoCgH35wGD8kAvXgk3p0BT9ffOSxmvtZA5zvJuPHJHxFgR7D2VpKbcjLF4HDsMMyc/JGH93nTr+3kmWAob4qP0bnPlmHqZ5sDUWEo+9v2lFwKQW0JTq/fTzgv/8B+A5GLTWXtVATlzGd2MYbN1jDQl3YwDAU1ZlFfYH+onB67TMlxlnUBLYtTMRapYXJDLOB12ng2AfG+3VTN9lLfic6JNq2fkC6WwDC+2VGMKbf7GmsqpEcq6V3oRc+Uor+hw4JuKMDrzI8hrKj77Kg7/I2/JytLSiF/qeCesbA+ecD7fWWz6oof1yLJwbcvww7qDsbzi1v0TlD72IVZvX4sskfNbvmyF2rnerG2+53f9gy4gOnLo8vAx9/f3jCAt4iOo93vD27S4UeTsOgu7A9zc7DCBtwkATwphAaB0b3iAjlQe7Wk/onN44w38C6ZCHN/aleNQbGPzj9yR10CE7jPFld5kVd4a+nlJaX/69jp/U5BV43oumMhkBAXVX8hzBMFf31t137aBr4KJ1Fko3dxX5MGIaVAdEtriNlB0WtLCq7nVEqxbPr7it3IIxo0OJuI2F6GyLuzqlDnzXGdc9hN6Ab0DPDpdtIqTfV8PKs6T4/VGGO6Iz1PhT/o5H1XFQ1O1Ar+IurGAENFKBByvRtSYopBSiZDPSYN19fXWnYi4IRZyYQTnAJKdm8zkGYlDDeEhbvhMz5rGjEBMH6oVtC975rWwXgpwRIIEyJ9OzDjiY+cHMloAC91wedgg5ZaKdIaqfHHz4WkeBbx6evoSWyyNOFz8Kp/jPNujSZxOKUIb8myU/9FRSQSBnF4Bhf/eoKntm7s0KuxAsD/7Qv3CrCwPVAvZLURgBG/UfIivkq7hHpBsSq2QoCjUibli/2dd/oqzyADU+Ku14SvQQf5TsP1Cb4FUlPuDoMJQ9MjAJPZVTiRAsxIqp386KA2hACV2jobkINztll5/bO3GSm/Zff2iiaG+WPKqstI5riGi/2qmlAUSdcCpYXF4l5pBqH+SPbo6/O8DsLKoZ3rFOek3ZArxCqHwByiify+1Po6KywPuY3Y+at2KDVF32SYJG1QnDk0aWI1Klgk/PrrK+ODZ6ggwk8dWA9VhInA6Q31xbxDCGRE8LA8y8QR+v4E0uBPatcZib0KG9z7vC/vN6gi5o5Dhu+VSAifyf65+P4nHZry0iIclSa0X+NWZCnYftaqdU/LjPbEFrRltwwQBvGKE29lI9DloX+wHA8B2gH1Jp/XrzadFd7Kre/ENzKrS5Xjy/JeKg8D/RdsrIP+1x1WKtLq/0E1q6tMtTBGKuYZC3W2Izz8GQPa22VP+mZXoTcGCLrwo/LYoqsor3ZnYkKuaX2iKY9JPDawkgWVSHHNSSbaVP1xATJyLvNadbcfvMXCusaNJQnQomEugvnESTUupmt8cbUvfpapfJ/ehOUPt+4o8puxZ5gU5w0YhHiCHZGHdf8fjPoAPznVZq0b/KuzjIJWWXlszzddjRlozDw/0Mf01lXsKTwr7/j6OZEu/MbMvQNvVzxUnkCL7aueNjnWAUm2L91jcJQxdIO9Qtv8ehvyETvxai7908I6ZXRFkQb1WwIvNChp1/BBDLSQ78sRIs1bmx7En5l8aBM2thvACQoIu8zZ9LuzJIMoMvagIpOZ1B7/bSyzwUg0SQoCcvQ5aFBgy2JHrO0m4/HxvFyezFNOK2Z3voWrDkHbFV+OSLFIKr7VOR1uwiIgEAQXEXZQWuN0s5pJ4NfhMysFwtnWOS08+ODegxmex6qeTdjJDr0Ab2kP/hiVIBunINAh5ZeU04naqOo9PpZ3X6wAciLTj8MibP+5EqpQpRJw3GYyuCcgNR2t5C9Y0rOlqlsXAYOm3REOgfmgtWd5wVkf1DeMrE6oOmyxHBr7r0OGZ8eZOvMTSUAbAuZrywNSzYPw3Ml82H1rihM/vKvZWxWs+ZM5c3lVY4r8Jc9SGwlTamHwE4MO/YvonFjGFgaDvtGVaPzbDWtT+ifkxYboNX2Clcqb40ZaoskbeLWiA7hceQq9T5iW9CDo9ujdx5OerTUStSJzkdl5EAbKBkZo80+KRAx4IoOExaSOPZFFscKMazrObpmZzN/EEebzSu2+KSX18ryaLUmv7y0MsXUrUb91zhlW2Cr0iF2L2a9OxNIgpTuY+G4Svk4dE3a9/kmIG2VNPM60uYwOCSzixpsqEb/HO5U0rlHkOF4fF8w3UckAQoHr0iaHTSOEw31dzbOGjkfyCRiWRnvBg1aS10SZ6lKBvn+QRp4U7cOGDk+snJ4ENmijL+KKdMumklw8I3JfQALTOi/dcB1dDF3nx5wyY+VKZLJBPPT3BXBRxr7CEQvAUo0DtyfO3+lSwR6AYgjQOxGikirvQD/mV/1buBHMq2TnlpU2/+7HsMB8cdT5umdTAskU94y3XhUyqJ4/LoEZRtRQlDBwGEWX7XVKNr9jHuUL6Uj3SuBDbuFtO7KG76+OzM32ysKSNqPb/nviYEwFb7LwazIqACoCUhO4cskE1ivnyxLhmYFOKLXqebxDgxG5Wo2vS/vkysFkmB3uIBjFniOHbFVn18dCvFz1+x39t5JNLwaCbJ5goWFUAZ783pG7RwnOvwEf4bGCAyYfs49HouS/BY/ZntQ9adF9UW3aXg3E+vpFvPwMhTMLaTJOXryPSnyWOo6UIFmii4fys9T0r3d22jmok2yiy/jW5jJAyVP9Qsz/swBxmwYfGu8QceVoANsU6Je999sFSr9i1v+REaP65LrEkqkstk9RdHlVbjQg5x+ihWIi35GryGcsOFAXiVH8RAIRC7SAcKV6KRINCX8pRNx0BTVkZGPpmu5GAcSU2zsabygOKu5+P89skFEqNNP4/hEY6ov0ClpMyAHJDSbmhwk4WwaBLClogNsYXtB0pTEQEsn7xv4IXXxCw/+6i2kp0iLcZ1xcMOAHRxZ+6SHNT2TwzvpZPdviFr4OKmbssui3evE0IDpraJuV4QfuR0HxhGEwHolYvdNKH8PmY21afIs8GgzLnA+Aefz5g8J8LMNy5OSNs8FBrzEynYBMnAzZW0BIQlNXJGhQbyXAX/d8cSM9YtxNO3FD6L5V4ogvRrrjxArk4/lVzAAMDngjwpA1eYQnLTrVu9TneLGLDkNhsQkBN6w806r9CKaRqZB7mcXADw7KV5lMriM8p2yXLTW6KjsMDNKPr/jn0fdyeV9VHfpBCut2E43Acbog4QG2VvGZ26DriNHf40AU27r9KOkUnbUeS8rYXAkvvvvnv58RoNXJy9PBugNyt3mTHTZtP3qTtFntxczAKMaoiyITFR+H5vcmZEsak9VjNmbBW540cpGYIuRx/pXUx2LO0m2yXYMNnbGcFVQllUXzB9zjxLuHczm3ob07DvQOSdIxNpDHSBeae5hlfWmMqMAnaC7AyaUvwCZXuMD2Yq5B7IFr+mBLOnTrYiDHJDW1T1tSA21RGQ/l229FYibM6XNBga/wlCy5JumWpw5fz0oRvk7lmlnOSrvg6tmcm3VH5GuNie2A8vctEaPVTvQ+//YuVgJDvILfn7sSx4iOLCZqj7mxxVvCKOXjjF1r7HcP0jOj6tomPUx9pBqdocJmjb2hFAdv+bxQPOm0eQuOd/piaa7i75FNTef59ThBudxmFLSSm3ELzM8XjSHACo4dwQEiTm79P9p/NNfcSd//rhBXmlSjXPtaqfmz0ZoxtZTc5O6iwzthoeum9CsNaGZ0+GhIQyZOqkgt/gU0dyjGw2wISVyPfbe2ZBR+CRyZcVqdJVYmFzNfK9NdLj+NiCYuXwP+dmlH9h13jgQFH9Mj134A26G5EhqoJOf4PbcfXlw8YHhOa4mWCCX/AFJgOxxy0N4Ie8NCjqEilYaVDGUfNJ3HXo/pZDWJx4K1EqTfKT3dZM+02eh/I9wkHiBGgPIpYiZVt32B2SjLaeVdbXx0xAjJJjLM0iRyzVzx5heEbCRQSMgavdqGdTv2Hyn7rJ7aw9SikeCrBxvd3/7licNA0eTqxJQtDj2sQygLEMmuPAZT497IpliLwq7YrhzN2NG5ym4QgVsD+A6duTJ2giWaL0BW3E7ZUknsFkeBSAHQg1jx5g5WVD6olzQztePfGpjNAxo2MGjRWwJiHb++730kWkn9WUx35GKf3+MNUp5H/zYexFTByjhht6kcsiVFtWg/3/k/VK48XRAj9mYwjgoVNkbRHb8iozsWTXar3VEsXgJhbZfpq/8A1BqPRoq7Pq7jAeKAHLP8OTSiNkdeYhAUCIA+KfORYx02yhWE8j30g6YuJFvAUlad2JCnQcARdSDbqI916OS+k2vVRKB+WlJm7rVvRyQNI9lPDWrdKCEX+CHoiH8NPrDDMNiM53kI1D66jQMehAQIO5uqkBvSGpaNlUWNnN3c7v6TjlcABRWgaOl153gkmXceuCl+CMKzC1x58NyYpfoBhRDR0jDEJf9MC9w7SOnAfkw9caaG07JxblTfNKKG7dXkf8h3/6wTwR/IXjzFh3GIWS6+oUkA+Au+31cTOO/Haiqh7NxW/OH6BOp3q03pnhckm3W0HYxJyNvth3lr77DOm9pqjRbbSaI4jUkhxKC38wW+6Lf1tUcLyE1PR2ELHY8Kr7lidbMmSW3mR4iD8/5ez70H/hUgGH+R8Dv9oblUJwSjKlAQ9cun60BzLHaadlVBvyCQmmHCHhSjvY1DUsxceRdnbXotVpzjWqY4/6qqG2NuSRUeXjSpIPDmDno0EEO5buhgDApmJZfBOJYDRfHUDkJ3qnMyAnqp6vVvsOFhbfVZFKI3NQAjEyPJNzmcsOrfy42q8bWeIrEyuW0ZpO5SbD7VUk5dNHq9dfwaizVrAUg3XRZFc/eH/X2X8Jat+TnwzuS0qbBStQkV4WDEGGsU5xsLr9S61XIMVkzBN/QVn+ivLOZNxXtmmXIh6wfrZuwdRPpeXFtsoRgD3/IYSJDaU/yCwfhqlm7mTrbkfxEmbaFQoRUrbk0nMxt8yYLReG7VtsuzHr/pnOMpLirE5MIvaLsrZw4syz4p0kzu9iGZM7GZ2jCeD7R19f3OKNnEt7zFZhTZ9nO7OUSLjXa6hoS4lm+rTId8PUZFOa+8tHK0YOfNHkrNymsvbNm/PrOuAxLl2NDF5bo9nBIm5A9sFLA2R9VEqaDBPf66WSRfezyKSvQNJASDIpt+okHaSH9UFh3qcXcQEsolclnNp1hLUAwuot7bKm8GEoZ0ak5K74OQUq4AVaZeppTPxDfSXXkiiBORwqYPVIkZF0YJb9NpTyfotQIawyaUXKL2Edj7jj3KkveccRVqi/9KiSfmFLG3CKMS00LoFypGV05mvSr5nkxftJJ3QgWxjH1UXvEYrRzf1KGZFwEDpU8tztG8GQU0y2s/1jFTeV64sSqW6D/y0yW9FaViJiY+V6r+gHQeYx3EMR63/qIbOlfATewVQSgcgD8r/hd3tSO/YcrKIz8Ee74DRhjgr9gH2hjy4Prc0ee8ci7N0bIyRCsDxll4KpUx49yy1i7U1qNbMMj7zhvBhR+TzY6WxF1ECZWep4ukAQRId3zHuRx33m72ZQWkG0Sz83LhVt9+6oSd9bSlkpYJp3ui8o2YdIWJVUCCuwp8ZyEz03ulRY2xOWDcDvbC1qcq+7YyOqCjkg3bluPGFDDYRsdgROZZcc+JlYZporcx6bYjsNE5WOg0tBNQjvVTGeSB5l8u4+xPRgdKmMyyuCLpPHFFLdiezgq4k1Glx28WKnkmnbwVhmWopdEpUmZ+Xn2YPr2NyUYE0L5xPDbC8PoEfVBLcvsW9P9LqrCmlwDbbQWl7O1SJlK7MNWBNyUY/LRKgQ+zslOXvMTVgTNjT7ysoZbmWBAmEFXRkajiaMQqLsmsHkD3xXxS6dn6I/kBy0m4Pc/beqMSa/VbxL7ciyHKCSYL2EVRwz8GUDpddOEZJTXxWP+MJKtra2hFgA33EJHc5ecJXDEF+9tJxFnQ528SiuwRlZWq/IJgQiVXRUsHlgvoJAMCLirQf/dotjJ9+xlLW1r05azozu7OQblzw5wAQ8QeZRbNQKREXMXDiqtb85mThOkwZy5pYwsXJqzFTF+OEylhDqvzxl/t/bGza2nTvK0X83j0TEAvCUBzuHXJMIWb7PR6FqNYGl4Gm3FOzU3jVdz7uHbWQgIVia5Eq6umPDFuJT6EEwcwIZyE6QBoZufrBbXYh+wjRNO3ppYFEyGnQp3+UKvdgazyqxJR5MdgpemUNoVWu2qzIClmf1eUTkTWDleBzs1kjP0yRNTiSnEnpak5A3TBQ/Ga42+6nfUck4V8aSJgS1fG21fgCXGxFy9dmcCdBHH2FOzb/ud4BITYhdR2dwsgz9mPBO5Vub2u+Qrobeq2VrRFCyp2WGtisrsVcp9Q695mOeoxGTs882XJXaFVU944NX/2oEK1f6mXJadFcAiF1k/uK/tUB/C9+m1MvdqVaIQCIC8lDFPjfBndoD7/tKtZOPLWiTjOQrxVZ01l3QHPnx7UPYKXy2g8I0KOSKgAzCCyjgs+jcDTO1Iquz4P+QcmAIcFsomcX+lg0PNi/sYbUK/O6nnAdXSWlY6yLGl0dkEDI6Q6dvgarPWx78Hzg31NQKUYWSNp5WNYeq7vpiuFWeFOYnRpKx7wGagRSW81ELTuIH1SBkRKYyNQ/g2hsysEUbG8ayB0IO2N6liUKH7V2UyI8MHgIoUtBkBQ6rinjY2rC8vDUMnwtVyT98JtHg4Cja50Qz/JY7QGVd8qtB41pdGzx54AbD5M/aKpUcn2ZJFqsgVVakZ1rOZj7vefYJuiAYbE3GVgh+S4BgLcGN/OffFMc0s2OnztCAndoBZBNVHIQDpJ7CrWXN4AAzQYnz44JzaXxc+0CKWq6vBjpXSVJfSBAOxylQONP93CRgjLyEWsdsbOAzjF9s7goj/jve5kgXm43Fx9lMnhluakU5oFRE3dM/TKBKq87YHdkA++C28bb6DpPH44CXas4iHmLRFHcrd9Ffh9R7+T+2ME6ojuALRaY61kp55BY6batsI/FJU80WPZoEpEPBejV9v40nBbEH99ftvS7BRr1GcvB091jq/dD9w6UeH0qEw7FcF8+n2vTzt92EaFVIXG0QSsJSSKQLZCheHqzdTIQWbbavXsOIitm1cOi/DImgsDwI7KTgdRXoUTAOV0lGTkE6VZZsJZceSIl+eSB7QwZM89CmDxdPbF7V2g9hamdCgvHCWtpQfn2TRYD31XccrSLwAxAsOJ3ce8KLovd3e4mj0gi5HYUHjKx16bPESqrQf//65AIui9M9S66i+qAJQcAH1MFKDERw1NJFqnnakv9X3L63UFQ/kAa3B2BQ4kF/C/tFL0JL8Lu61SYH7yHV0qlxscLjlAz37YFSj9vi4Ics6L9rCpY7iEnxdV2OhCaPl1j3ZWrD37Gh9QTJ63jE09QR7LspuH1QWJFayTlf+YvXf7BhaOaxeNouAo/9kQyrXVaNmmRCUr5jSCa/L6786X8/DdYyFLpXDqgW+oCy8Tch+cK6Snfnq7ZyiyIPFEE1ZU8d6w4skrXkIJv5E9rgeUkBlGsY+seCMPhdFWWHC6Lm3JICPNCFbA7YhZJOFJej5OPncgE4+rSnOHMs7PCe6z+mdVEkptROkYVmHbtQS6KyRnITAph2ZAi/c3aDUM0vY5Dlz5tAwDiDQYFVh/a9+Odc++ivmPQDqfMEEfXdL9GkOk+EE0QZFIzHk+Fgkwd5AdZ5HX03R7S1QAA1l+7VGWFPjLgaa2C03USquH48SxSENc8C7CvuBcPeL3j+X1u91uFP37nT1184f/g1k9kR4hr7Coqq7GW/IyjL5v93ARDJywsshZdwdahfbFRaQKc/Sa7CKp0iqcMWJb1EZEs0hLyYzpUjZuusRJw5XdcYg5nRKX7GHe7UyKGaP572mEqrKwkTk4rWpeYAGq35rO4/eQGZaG4l7CX/2WrO8Hdoxk7qzGFGmpkiVs0MEVbsQBuqRiuEgX5QOWm4Y8s59D7jYcOff4bP6+oHUWz3yCpOs1zJoSMWTtHEDJFb5BxB+TiHabC9qOJd3hgjJ6uLblZJ24EmaI0UNb3ZYP/4Fjyzni+MvQOHVgf2zWLCSKaC9j2RW4EP3MSo6H5pJ4OQUPr618wh5ZXpqNL1teuaRyjr3gR/JLKogEq/kLUkSqLHxvW4n3lo23k4hi5c3dLDVWnzHOxjpMWFyFwN/l/gI2BRjMGQSGAIugZei+6Wz+Z0l+ePWClRuVtgL669HB7CEuG8o8J0VN0Qb5VKORnsdZq/ktRgJuR6Bl0FeG1rFVLXJaLl/2noYnuTuA+8HUAvnrdqtl6+Vy0TIXINklZ9JrCeCqabZlsMitOAdPkVIc5X+vVNnkNRdY1qTmzdGmg1DmQVJjGsH9AN0niMbADdJwAMJGouHag7prkvRWn8LNAcog9yDjfiUPSoj0Aa06F9SBDzBG8WCX8MCrJdN/yc4pz237VLxdu61wr/Pvn3ePUZAoxYVXdowc92jImHAx0p2icAEtwmhr+nkhBYGunHszh5mfLKYTwTCz4Ib3XpZ5wA24NUeXlLAfKeP3KS3j2nqfqKjN4RUAD9TXEU6PWx/XBYvYNhzquksb6sm/+BxeER3e/uV+rebQwj0wnprcl125s1xAKITqYOkAnQ5YDhE/OsyvM8k71tWG+290+KrVtRZJN0m4VFvT1A+xcjR52IbpH2VR87qE6LSQ39l2nDoNRjGjupIwG5muJzEXoYYcwsdheT8IC2TcSft3e1A2yZjB8zVht9tw71NoAz/buWEtonhXk1Le4Oa39cbjA7NEPvceeOxQb2xZfDbL1ofW4IgrzGatTUJzxEZV15/veRJFu9cv0C1AjA4FZwGlO5f4joCzgaANcYcZF/ZYaxh9v6o0S2VCKgDi3fQgQ937MxvC4ESnJfetcNGD8jcBFskkAAZ4DfqH23pnpGvSvx3lEW1ZFfS3LipNBkT91CqkUe/tc9o7r+M9ZTZ1SOI9++aZiE7N1ZNjXm7HGoL76z/+R9KzS9wCa7J0aTCb/KsCNY2perYjhkLc7Y3bXC1JTzV97MqXm/51KHpb4sS7fOJAJEATKWqdbgH8C+YomvqAfCJt6XCbCvcq/0UenjnHY76v1IueZI9XqNRhE3Nk/kB3t1dwLpKm9dA8BoollKcexvY1gcVJOTODWgBbUVBMzF+gl7CVdzva+PCWLqW70wQM1AVRzypZANGWrfkQ+qgfa/DXLXrDqrsTfyrRu27IhErrm3R78BN4D0bkZw97lyluI00jJnNR3iYeN5Ryt8b4/WKm/7iErpjkwXz09nJcANEGXuc2ZfXhtFuOBqQGXCg5tNeKyjrLioHTH2MEL0bt8jwTh8U2gIwC7x9LiFB5Zvz5NngJATITgrcUNZdbQel1HwiH9blN6qvVCJ0fzUYOu/wbfqZDMhD6nRAHdT6Y5ZvNex0qXVyMUbrnGwS/G1quix3C0qzy1SVZL66hAdUJH3NelRp6+eUjGCYE0YdK5aL/tav4qRwGZZ9RrpccRf/blB8xdiXk/MXm4NtItjB21hfdrmCvNiGH3+UGmv7JP7qwEdF1wEfR3ktc0lbIV1oKVRdBnq//LWTXgM8kP5b2O2KFcTeO4b7jb2+QoRqmnXabwyPDrgNL+bZorhWUOz50jJvD/PAvdxdH8UZDX1VWuiLyXLefHVvJuzkHaxQnblrKmpzlkbYesYwD0c0/Flgz9co/0d0zEuD19oj7KmZOM79vO2UXp/qebgqT+Af4+hldOg+LwqaruIDv7GuMhd+tKrJMM3VR2XxTkkfTem1YsM0SaIi5e85fdI51GSmdD42pO+u4XEnh6KUUnluDk0n/GCD8eIanaT6Ui8eh89N/Di70/hT/MjqOSAJOZXc6lL+8Gp9mm1CFvN59mXwK0dQhiQj7YopsDntRRurmRB7TR4/J3ZfbdupCx/Otu3grD9rWeJ3hxge44fTNQqVTbZ2sMxARib7pC4DcIQM2JqVtm+DXhKqbQRnPNT6wjzZNltblDl5UivajZaC/qg79dR60NfCyvPQmOZtvcWLmJQ9DKnav9XddVjbQE1mgvLaRt1uVwKm47ymlchF8eEBmmJhJnEjY8TJ5ukEyObMQK5jicoIvU9XDwJRrir4nuqM/Sygr9M7mV8p9p4in/EhX4R6Kr/p+OX/uqmD4edCiYyLrrtKagPFvKSq0cm5ux6BsfauaaLHbxOzXwrLoLNiYHYFn+4WTQrFBjGE7WaRXWQOmWcVikUOofCuyHoOrVdMcDE7Mta3rUXshFHioJQZvSOmZNS0rYfJVWr79ZDzjgxWk7PXqkTDNNsqZcCdS00qSmmFg6k7hPfiOHgQPo+T7vACOWJeO8+AV9c4u68NxWs2Sugw3Hapb5i6Ou3z6W/1lz0DhICDVYMLQvdEgOmT1JnbGy7OHVAX0ZxCKi2CHV7qcpo2nV8K97tHGALWU4/gasVfYlmQxdbHAYAA33L0vs60UQLvp5salDzt6CMgpa/bxobbtiPf9Vxu5/HJzvcEHpSgmi/9i0MivMkB6nVUhrPtDXxzFsrYfI7uhUOJkdm6Hq1cH06T/ywlTFzmQFwamJGegGDi1IpVTdxaA+e+cS4G5bSzakajxBbqf3lbUQjKbaczgVIi1kWlKkJNtncn+1lztnynYM80hGjfst2Hd6upPd/RnhDhmVWXYa6VuOhWEPpaDGFUWhU+FThTxdWCCRTzpFPYag+D5tu5uP0TLFcpZYrtLnl7uxpfXLyw13N9kTmpYEexlYbpwxlcEYhm8iiQoL1yAT1hwt/Tlc+b/T1s4zj3FjPr8SzUb06JS0uay3FqfMHOIoghoXhZRTJWsNB/+0ClqpfmNnxETreZEJa7mJpYbxulogEeu/TmQ1vsKk6b76ZmJKm+Tf2qEPMg32EtAwNb5xfG6gSj0opl79BxTAO0ahf9uvF2rmJ3bholHHaih0Nr5crNatCacB0aUfjytvhabqSqh9w037J+g8pyk3fU5SLlhLalp3FKXXDhk5RFhE0aqqbc8XC5anHcPj4vv9wiSn7NJ0Bet5aRxkup8Q9oVgqu2U53XRJKgYU1aeYS0Hpdg2qX3jSEIl/I7G3RYhxMOC0I7JIWtWbguXhLivS4c3Udb5n0XjfdeKyU7HLrImlg5fvytc/D7JKxY5K5YFFKvePDs1oymm60W3kKJASCdSI8V20569Dq9GSsS54jnq3iFXtgdKCWSSHGB2efZ74b0mx3iaREC9lHg62ijRNMlB1a4nAWhvSE2KBRd+ati/ATfxe5ENJLK6feBsvv75FLHhKNEHA3PeFWemXn+4ioSBE3mD1JgdksC8dEBzgelj8TzvA8lLQ70Sf7U6fnCL3ZJU7H43ZhaSUxwKp/BGsG4AHu4HM6oG+WhHyibxf/E5WVH+yL5j7O8dN/l9vWbWHojoVf7z+yrSjj2fr4rjcuVerI1BPvp4RUwWkO7Q7PNCIWdoLP8f8Nm7HfnK1cQdpueYOBrlgCVdzO0hEdKPVvAUQjh8nAhjZt19ElA3PZR/bSJQTJ32A8IKAEFgRjY76d7CEJgILAbHmY/5ZDwnN/aVwpBC3eQ3WROmvmhV9ggdwICn7YrAhj35PDP4I37RLz0J+6OdxC12IOYm8PWhx66g94lUCaH16CLVxqZN2S5wiuK7f4Zvecw+jH4+ua7O4rK+YZfhVTD6aXKuapSsLf36paWzRvq2AcMXh6OxMMuQBfJuLXcFYrtQIhh+tmis/E8aKtkUW+FS/1k/5F/GWt2Px/eT9RJk2YG9wxQz3Ye2CDmwqU9mR9frTvyw2Xw6e4zb+jhrBBLx2koUQMq2QYE1ncLrTfF5wfoGuZ6fiEmV9o8y+A0zQpvsXjlRppSQ2bI5yz+FBzRYjd2/mso5VoEKL6EHF3e9umKohXArynsC5p+Ntiyn3OYwcSZOtweCvprB8LNezOriEg/qqIcdoO7wedMXSbCm00ydg+8jKvBZrdB6J9lp/Txf1B1EKgMygQkPYvOflX5iLaAYVbq5U1np1YliZx5/lQS1yuFsngdD46lSoCubpTqfE/Au+HEQmmCPGpUj7/10XPHyRHfSHvjUhfuEDAGS88dvnFHL0k3dln67vCsF69bhxoZfRI0kHgnG09svoOVKFwa0QGM5T4TDP+ESQPu+/26cAkoiiPH3ugFLp9VNY4NhS0HfmncTWkiMQSvZhFVwCa65iTEPgY7vCAIJ+fNHfZbJIrBYykdNltsWsQ18TPE4Nlf3BA92hUBou49vYSYwrwJDRu8j5BjXZ4/H8QhEAZbQNVRG6r7BUnwi6ddUwOWoKPil3f7iNFfxFAe/pnk9oSoENFCeXO0/0KSzPb7+4sIC0ZNGd8SCG8dDcz+KTLRXoV635qoEPu6Lk+P53esRmOfeyAn8GYAaOqtN8HDckyIvg3BlF5Bt/+eu+7YhUUXpbRhbaPpqL38CL6YQ/1ZcEUoCXkBhJ+OFv1UwvxWWhSx5VBX3MlsBPdmTiLtWGosa1pRVwultHgrVKZONFpzz82qyLZdQqhWIkgFx0RlkAITcQFVRsBanJbSB+sG+eK101wlYGIpZK4GApL+j55TMZ9Wbz3orelkzgh82dHqjhF0zxMnM/ma5WmBiF5d7z1BAJ+M5bmqQmoYGdEToZNkT4DY92KCZEllKDRDWDGFbO4ot0V9KJFdx/0gjWgRZ6GmuucWe/jGZMq0q5S7mJg6JVvFY+jdpmu9kU0gwDiU2O0jFGjCACJeWgx3hOeQMmfBu8ZkJtxRTq6Q/nctD8/Aw6jOmgRCEYnqeFRyHXAiGDKNL7jPhb+vuiOsRzU0e0/WSso9MVZygtq2OMTHajOLmaFosNAgW0rvaMqsWRo5BltGhotNzeYSMA4VEtXRTTK8ENIkRWIiqeV9g/5as9gQUxTW1r2D+OekIfsXWgsQOhAkB3TqDTXOm3VyWDwWkrfVEh1cLYVv3uwN7Or3Pwjys0yqy1t8SMIGHKfF4bXcgxB1p46iqlSZKngOJRk/vRiiXmdjPqEshPaTyRJi4KNlL9OlW0GC4EJmEVZe10ChrxIWV31oERqi3gwCfV8LzsYgJV/8v6M9As0+Jwx3VsuXkklONWOF/MzQO2o4aBEz5e5UURVj35RUR5h06bezUvDHw38fCqEX21MNEYrNGd2NYEat0+5jZJ3CohEnf8eeuvH5SWVAH1XQXQ+bweeDcBOS8S+bWqVC+ekLH4br4TTsdL/+d4tVvlMlRnRjbEQ9GlgKRMWOIuTkmPfnDNmdz/D9pYM+V4RFkxKB6B8PpDdX6vGZOTuAbkWHabXVw8Do/QosYSTDJAvdR1V+5tJiR6DGBuDFpi+LVsYSIiMxJEavCQU/K2eSRrTbFqY/tyVKbwESenaD6/PKnmHwic6qERFRmYuChq0z3oDfuCP3cfov+jDHw066isZPT4APEjUtKt7k8gBPEJD7S/J6vw5NiAEzZVZxXomJUqqHSQ0UUcDdQKkFZFzYaDcd6p5Fmf3nJSw68dAfTuXpKThhPxVHi2HPRmXkiCgz78hQBmR2OIq47RvSo/DlhfI6XZT4Q1AGZaWUFPLm4igrcrthJk0pKrUa5PPs4eQdt7DtSFTcpOxJSJuvWnt/tXs4oKcO3NKWCYxgRA1ui4Bd8V884mAANkE2jR+dq+cVOqouVVhwb8QSzgd4uCGC9k1J5h6PphAI4Zy4o6wQGQgftB2f9QUfXome9FWMpGhflkGgBE0eZlBnlIXpbfdxRVeme65CpBJPh+q15NYloCbOuqAaPUyLAxRzZhZAMvgiTy7i4YaCs+R41gayUORsiUe7U35IuJBTgWVptN6dAbtJ7C8SAmIUAPoCu/82a2I05RpKBUjXyprUuSFudzweOLPLIJftoRL9X/tAyPNhlQ5UzOnxJ/GL8rhHOKDOolpcoVJpkeCIGCEDvxwbOKlL/5k//B0a6fJ6sZnKRY7OOoUE4MNg+QfJ7zPupKsnw7OxXoQVJX+NB/fBt/eVvJxYfJNATUHhdIKRnZPBiJ3Rzw+Ycm460beVxUhSMv9jfxpFGUHM2pnpX6gTTieVD8HTk0M6l5z9IqXuN0MkVXNC5JxFvJ8LBBBr66mWzqCF4+AUOdGVIhvxwwFoEP3xsm05hqpbjRvxWAjB+6GZGTThEN0715WWg4psvC/mkdBrIGHDcTe7Iwiwa+/WdnudNuIzghE4RwyVsL88y6Vaz9HqjW0fteNO1f3El+2FBj93PqvfjnYpBjrKuKiyghMX3immA8UR441hAllF5Umbw2JV4mBEFULZnTqwNX7Oip3oWddZZ3mJfXSVX2YxOLTIgwApbPXA+v/78M72bAOSLS6qOPn0SttKQSqcl2qE8lWNTAMlGCM3huiW/nnkLeWN8SlFwRB9LUUCgKOXpF6eZ3jxmXfS1SAZjizZqamXTOmO/FF6QthTAZudiJpDmjRL2nBZDDxLwE8ORoyfGlP+53jJt5m0yDl0OODm9jnJbs6pffepl6oT5pyw1jWFaBwuD3gNTGQPpPz43pDQ0WGi7f0VeXTzixmq5370ARMu6J9W/u6R25ITSiwrTCVbBWOMekBsKoLqD9GcApkyLGx6VNtzfatGHZdpHACT0pBZjQ2Uy9dR8g7nZRcUEkq8u3P0FItDuW9L8zhXNHl9VAdkpQlbze2cy/QFoxQmlz4hmiEvhPMgvQ883dEMWG0OYfoTV1Puga275ijfNWpjefdiKId9aTSajmoTHyrwWSwCn7ZxAEKHlXLComijJjNsoIG0ipvT5TZHuzoPEvuyCh791QbZwbS0rMdaJY1Hh5VGoETg0XG8wPCoL3WJkYSXCnZjveHmxXjDF6Dgp+plownrxpMhRd++DNhaa765rM6QFzdBq2IZhpgbJOSVSNbWnnQeI+6mDIw62MqjMupYKxAs7ywuwypqZ6myY1/ynbGxd19x7vwlR8oOT7AuVJmaJKzKj882rX+YeFCkFx+pfjopEeqL1sVZSBqXAWdLEv6q1Xcx+ScXrQRT2euFXfCmKQg3usemSt86Ve2VazqwYKeAnuPMe/BVPXZN8cbfuMjPRWUC8OabJ13Jt1BbiwltuOOZC5gCoAwpJKgd24BSHNDNHNh/9FlEOFSPjkOvt+g/uFGvnhMBYpANvzRo26mTSY0nLx144qLe7Wf/QojmNoaVynAzxzpISp7qCahIZWLnOsJROqvJwKzHPo+eWAG1C4hJKQCV9R35qwkQ0fq5aONZtbmu3VRE3ofAHEXMmH9AS8E9wf4Juo84Ag/K4XcUexVdPWNnjpoNn46LaWRAxCMlzupPSGYOiuC4MF3tQVF5dSOtHlVNW9oH0fmsOMrinRIq9uCduTyiM54R4F7NEwFehfeYMUpVs7Vd0ZSxy+4HWKbS9SnIR5IqUapyomy9CA72bnYWguib7+HHv14o1qPwM/XRWhrdjGit0FUseBrmna0/XIDmVzuSRtUxG/W51vADS+tUglx5T7reT9lKL/WmWoiyaMaZ7b0uxcRsjvAOLW/PIZdUvK9JzBIiOXy6KHYyHQWAVFUocYZfKKao83ni2H0FrAWJOBGcuwzTMYxXpFWWagkYEruLq5sJINVo/SRszr/Q4C9n7ixaxLkuahOWmJ7neUffqEB/N7ZC76ITAC/yS3auvkFOuzciX+AlsURWiO/tVHjs1RC6Y9q3tePWyXVh5y79nz1wJ0QlZPdFZgZkXZTyDYbcG78wAC6oVXQ5AAgkeBsEdTLZyY/LLxHiFYAuMkaGY6o9XglJRy+TaiJ+5q377PwvxvU1ZiE6OXbTQYK4Xll2olLf+NqUN/88s66pso8jcIs8qRIY7ENrU3QvdUbetNIYuNcd2wxkbvzNUvZHHtB63v/zM1Nu8pg4gkdzDKka1eS1AYxgPKYi9XyDSDxz0xlwbJ7PvgF4x47KREQSJ78hwZf1nXqE8Z9BO0PWqx30tVnZHJEZfiUhDyNDFKagXntmdNcV3rVxZKmjO/0kWwA0ewJn1bQqT5Yi7G3oqdzo8rpJjY7Kjq1pBwWp9KDYZIDEwqK0XWEzrMGqeSAbPFG/RJ2NkPgdLsF+daVXWK1qylnvLrBWWeHDcUUc6g9FaM5oigYuI1elTMIdqrE3ssB8Ih7PHFZO3neJsRkPDi7j4ZTOVvRYkpxCyI5xF1ftxDLW0Fj7XTqXe8vV3B3UOtsSZ8PBgcfevABiBsIVL/K+tPYX8WsVV+Wz/8dfWrJjr/ymQWYY6HutWudouqAzyVQUSGeS6+9kqZYpoQWUGcy1oDDTxe1mMZRKSNPzIKrIyOrwd763ta4x2+Qmf8k43dyGT65BRizB98KSXqYoGCnt6Vs5IIWZrV9/MMMTSAzXEs13izqdhIUZnjZnNNLTMpD+RLYtc1lmOA+fZKpusFUpz3nLRkURuagsehWPcdWvidwBs+4H/h9DUTHCEAi+O913x1jVcDUsiftV7QPYmJiESlyZ7O1y+i0BQWQvMTqSeQj4UE41Phhi5PkosP9CkXTsxdDp2uGPnpdbEGoNypuzZfD/U6VmyHC33EAON+0kycxzsA6K3HKfJgk8I5PMna50Jjybs0s4aITviBlcXPL4piGxfWS2dPm/oS14WIWgxLkdS4C1II1kuG99YaPUJxAXZ+y4+Kx4BSibKnFN7OjyEPT8xf73m4KC5N6MclzIFQab5OPadlhUwPpWmy0v6ZQn1MGG6OmrUYhnHBm4teIj/Oj4bqn76zlpg51NN4bvp9L8THcdMmu62JJY0jP51kmdCwxIcpZ/p3mUEaMmv7QcROrBmgrn7gNtB4/CVdbjpr3WNndZnEZKtSQnUNmJ0+uj/Evpxuz+eQBce65iplzcCuEfhjDcooJlfEiPE7ySkPXX8MR0oM4QhhMABGaswRd0HcWd1tGyHh6xztCqOdJ5veMmCUaYIuwHfeXxlOxr6m+oIpZpJFvrBghpBFX+6hve/Z7VZfw+VOzLyETC61BC/Y+CiYAQN1sG9KQ0oqTAuW9E0sbGvP/ybcAMurPfdjha+WYLd6Efp6CSM8NFe8K9WDmfcfjYMqqtG3+g+YVhORbrVKKpDi7W3qTVkiL89SM7rTw7xtZSYYiTUABCxKrPiX0sHqvi6UOgnJiy+3UpyBWygPU1JCZ8jnpKeMAJs6gyGAmzFyphkeV4U9vP9AIb3oS65jO6VC7UGPV6/cCXC5WS87ppgheAp2vT+8dE+trMeVbNdHYiflFpnjyfZW0JtWaIF6Epc/9CNsJoFUeKMhlVSEBP4/rycraSYhd+2AxQpkvILNpo5VGlX3I232WH7ZF/LsJkxlEax9uvXAOWW1e3A/itRYNuFKI3IDvfQP7PcMB+FLfxmi/Nh+EqGL9h3yWV8mdgVJzxojZq8tYpITj6vDwiDyfJLn4sy6Ewf76ktbPcPQeS4zkz5sXNVBrivgeG1sq2gw8uE2xQ7PLUiNvUO1fag4cDbT2r/69Y1xqE+6y1XO1bGLr2EpJ4sk5m8Eep8FVX0UjEFxplz/3qvzqnPRKL5jquvwMGmvRcf2EfJDBf0rnOUaXhuk3lMp23CbzM8Y7n7rro15wI3kNaWwEfa9omFo+7zvNo9EzOpsgJRl8G3cbm5iqYyhEVyT7xmoG7x5erM349giuonxbGb/4K9R30vViJkh1Z79PunfOAyeDh6k2lmIDkYBG/kPDj9fSCUp/uePa8iwkhdSw8jkCcqd0R9l2MqSbi886d65X5zXzMP5bKIhwZz9AraUEVrNPTuXraqPIxecCCZB5f9yW4Hp1TJouan1p1BmXGyz9EnJVapIRpTH9l4S7Bg1IwF0LL5yolOvB6hNYauooNvps+YbIMhpxANc8foOvzIQDcqNpLd9TXT21F2V3SjCxCA4DNjqUWWr+l/Rc3uHhPeOKf7qjYJ4a210RGyOMcpRk9VJFf1jQPlJiVcUXGJqal1nu8Liv5ZP8L+XogJlT+MlD0JBraXW2/Sli700RCEhI2/wJx2P58z1olG68garxXzeMZNC/FIymM0TplWbIhMRtxYRxugB575xaNeeT0vcYemYwq+sO9d0eAqFo+RXQSpDoN2N83Bf+gUyNtHvQc+389zagdB41lMAgBQWduTz72sOYv27Kmoucfc0wG/hO+CdlOqVXBG6PZ0miYplGRhPBOqo4lgaoJVLLI0msEx1l1HQc/B/sJ4KhQU0plAQjWNZRVGT37mSSakr8FhI7mZIk3PETZim8f9YHNX24DxtIyMdEhQkXl7bvKvH9CWgzEjFrtBlCNPkJ8wii4TaptGLcnSPXNNsXEu0dwnc2ZL3z+hN+Zdgdt7ogomu6j9O9HjmRmKVLVFsUWk6WM2Kf30etNmwtgJ5+ZUcp0v/czHlUcVO18kweCP8g6OQ/gSjmJG3BC1gUbQrKmuwDOVXOMT0e/mliczFEdLTzHZf8NBDEPCHuFOxAdskdz3TlH364qDD/zMcD8Q9mNGBfMbW6SzLhH1np18i+ZKTxgX8bsXFN8kk36LOb9RE2TJMaRc15SnrczNqu4KvDFh4C02iUKn15Qb7w8KHxfkfHFrEkzpJxN2GeIG6XKhgtSlYWtRYqBH+btWk70eLtJnZTabTRkgQ6vj80+QNtVDg3/cyD2KzmKSsBdcJuhRym/5SxJ5BbQjWdjXVANCIuHVdrcS+YgvETO04KAW0/7vF64eR26/TrtrCBac3/+8H2vSNt3ECqyxsuxsNV7+3xJkZRU1CR8yw2gON5NAJm/g4me6GLllIVaW5JYlgzSZC/ioBx919HCJ0B/Z/ehVHCH7l4BWssAslDILc2DBC6BmeqlbIPr3JJCau39PUkM/PIfULQAgZjnNKlwUWqLWtoA9X9LkzDqaYEEYH3p0qRHI0enjUDscTDg8s0nC9jQ1D6P+ygzQMxehW0FPsbqLP6EAWBOYeyicE90qiK/wSqOeEkIg6L2kYJrJHYI60xetqSzVMqOSr/aj2AcKRFf23VLbIsBTRNkW8T2hqNERugjwx8odJ0Xdgt9/FFj70H1IfGEORNVdNQgB+68V83RLSrdgyKP80wDc61XkOBL4x7RlbuxByCM4HF6s1Xh47S8S0Vk30STpQVNxbqtElvoaAz7e8KV1jx1Fvnil3r6iwpPtbFHvgjOu8C18VXs3NqMQlOD040DRBq876VGz9c5RzDriQ8aqIjMxqrW5kcFxzvfzjPBm0rjznCKu/iG7/gZXaSO2EFzGtStI90UV6Nbm6LXXlIaHRqd2eQP3r69Xo5qWK1ziufXpn2soaRoJZXe3X6f3ULETLz33I6JYoKy/JczmQNX8WzTmu1//DByIiXpCgF9377G5b6YP2EZFnbFR3aHvZZqSgv/eCZfvuqXKtW32KlJNCwiQw0jqznBDgh42LtQ6Qyj5onqu6TjEsMv8h6/DDjmOttBX/rpvchxUMnpq8/6dTPIgc5EDNiJ2TFI1p+M/djK4RKsNErLtPvRnKWpCnMBoMX8hwblMg/xSBoGaqLUY+I9Ye7/tUmAcQVCPQYBvMqQJ2beE+UZ4VVLDbV76J1UXYOB/wPh3jkJfHAP1iRoi4wGzsyqyZIb1i4jRgZYz72nXhzhxz0uPHDn1t5g6tMeSMOZF1L5MbTI1cdxEVhUF8LLWyhGzPJY/QkJAnBqbwi1S6inwoe4DYQk+VNJZwVqCvdGQDYALcv9BJsXB8J0jEvJa9BV7bSZwekWqNe9yRhs86xCShZmzH4wx8bCbpjBIEH1h5yscr6qwN2Y7o27gIXaZtV+z8fr+qMCJbadyz76v3PpYicaLMKrdNY5+UzCmycqGBJhS1krdx5aB6fcqsH/aRkWFiZEYWW+X4lOntXBt/vQgAhH47JajQnhicBtqjNR8DDxzdSLuUMAIzfJU7hOYpkllHNotUovHUem7dEwDxIHt9q2wLkw5/Kd9O00s5vhS5O3ylGWK4AgV5e6QMPXIjm8rSoMFIZB88obrheyHBM7FG0ZyY9iKbHDVjm1P196hBQS+nrJTfYdfrWFo3Jvc5xhEy9sbTJsi8kIfBwwdZgtC/OUXRckNfvO/pN6jf7qtiWovBCyYF36bmiucA/F/VsoTvdFpjlzSOm1rNYhG1VwQSJne1b40Y1Ll3Y7PyMDA4xdM2ygQRVwjiYxO6mMM8JEXWASEWu6j5llULSkYzgR2nmsTBmi+CsVUpWmJtoC/OlhghzBPK8Geus/PvsUUmTPaGM0P41jxdr5BxUedOwc0t7586750ABUz7/YXwOK2xWr8izpweUGT0DPBqso+tweHL9S4Q3V/SJVxNGMuAZvrRhscyBh14BG7DdnZZd6yqendazFWrGF/9R3AufHGFjZ1UOvsZNAQCg1g4Q2hDGCBKI0t8ebWLOvaK9zppJrjI/DNudQ/fuCJ9v+/08Ckz9JiGpwlUx6jG0ObGshakojOULV6wB0ivWk8g98ZDY06m5MhAyXJX7yop2UsTKjvvXiaScjSmrg5hi0VRvuYK573baZ3jRfN+5rG0KIrbyoCQ5cAg+yebV/m1OH+6l+/8ij1JO+gRVQJUsiEB7ePM2V0RlvuX9iZHLrMNeK7rnVKkJchWohFEvro/ESRuPNgIxn/XGjgSyaGgbLZlmKyo8uAqpckD7A5jb81UAN0+N22YtlPsxp5oqVsPNOkoyXJZycCr4x5XszsYRARSyy3mQkzjH7li3StIibZ/TkRdcFl/HSvBwhZXKFYYRMP72fQ7CguYt+1+pi8M/q323Xz7OllnWjfepbYseAbGcUhTQjcDesEhKbLGkrSVLBlVV4xX/Drlqhx2Gz5svEX2RfHdpUYqFh5u4YJQMYr8GEvHs8ufUjZiUrrLVlqKsKfgZna+JU6LRc1NBEuCrDd2nYA71j7QDfFKjlUGCQhozxOToSQPBPxheErS9yLisrxuWc63QKFN3oZCbpRBtFymO97py5LerG+OcgE3G2fSkL8IbcpjtrAHz10m9WnQUM+jB9lYYqLEkVAK942iO23RYwSz6nIr2gghqOvLutSFprley8IoRiCsRqUnpz38Cb4+gF99+ofKAxGn3o5r1OjbMFgdLv8LDsY8yjrQbu3kNLqdJZcxysnA6uZ/HrznZObEvqWMSrLf68V5aglRTs1ytOWciAhnAJbulXng6SG5fi2KQ92it1AJmh2mreNIXlVi2swUd/Etos9IJI/sz76XdTESpA1I/sW2OPgOt5sO/xVkSyZWxoTpU6bcd0gk/76+QP4oaZ4SP1lbOhu13cQhpvWWA1AMkna7Y/2JEZHMkjgwYFA1ysaXrUDmcMz9cWomihVZwad5/vA9b3uY6RlKG6z1VM/FqzNC/rGikrFABq1w/NYkZgYC2N7KVVLcGN4MrRiMvQDPdc35fUBOCvX0GOCXW/xDx94y432xe8xhzh/d2/9NtjPe5ZrpxnvMDpyYabgI3JAFhch9BGDTsti/um+IoCOQBmQkfh5I1fYBIETPDQzNlbuU2mWhtntea2ImsSRjz5CrHvPZzuELLEJ/f1AR+tVvzYO86PSp0p6YmZ+zWHSLiTeQ5tNUITUGB2JyQdfK8HEpy50VP9DfFDt1K1ljkBwc5POjRbKxjBSYmQ/0egfAGaexJZ2YN/d1zoLrPXPoIAE+hLG5HwgopZWqtv9CRVQuFSwsSNG443WFAaKLExK7aJT9ZuuHrghZ2A5SzlvOrL2li0BWB3+WwWE4+sh6CASwhM8FdPmutwMSr5iBdVIZqddJtMV88/dS1ExDSwMSxa4n71wq22l9RiZu4XlS2Dp/OmW3KtTcJF70aqqGcOIrk/nsWjW++xsiZ3UJL+1OX4FgOuVoQiTOl4+d6PAN/ix1F2pRCYC6cqtHxNIjyamZhsPl+kZwtBaF6eNintcHs2JnW+yUqBhd/uNnbJJDWYiCM2Z9xI6OvDY/ckGwyBA3iyQh1AHf3MIi6aaHq3BGQ0pmbFy+Qt0NQqPP2Vbd8s9Dmvq9cn0BBbepefmgCJboIWFAdE+HdQlF/Toc+S4Cv+SNdfWggXAvBN6ldhZ8PX3sC8leLsH61lUi1ceEGqQh8dr4yV3nfJdsal6oNl6wXEsxll+BEeMi8fm4DHgGGx3FZ4dn+l1nzKj7PNWFd6DLM3grtZqTpFvn/deho5z7mLo3pqpf/CQHKBssFSCCIRP/XdIf1UOsrSB2JDv3llz80k4mXqF+p+AYQ5rcFOlCDh/Xx5qB2MCpR8m5gG1E8N4VU1/lOAoDeg5eOUjGexzSKPMxNKVj3IXxGZs6YzWeY9Ct4f+MDX9grdNG9hrl7ziCWBP8tpc8ZzPaeWfUmhCGrMGXMy6BySI6MOenF55Bqi+O2/wSmDkbPiwNXEsgnveZBxC11OwqWZ+acpfKADEwTcwDZUNGmMhdDRjfSnItFOIdcXXVSmoFM5tLcaUTZJJTHGcJByHoLth79R+DZLMLyhDam9hUq76JRt7KqQgCSw6OTiVSdFY6C7vnESnNOv7Ci3eTYJVE0f+bpeH6M5pn8MK+C4STcNnID9DlV7YCjebXw9fkObPfdzp4699Xn3+Vwaqgtp1L3NsYi025LrVdOMS5EaIEjPzVSKiWy4PbZVF/HuRMafnIyygeDJ7nsaRlvtCEqK952MEfkkx+qcytDyKji1vZDlIJSXhXi1QYfqEtSs2YwdMB+IEPcHM6yku3KYq1DHetAm/J/03ngYObE134PIIIDIOLfQQf3plhiSGvqLgHbeN01U+2zyEHA/SPZfHroXpkgFELFmyOqhD3dEF6RAZE7x36mNEHYkAUhSjlRUVzBwPtLnbeKiCqBJ/RJUZTSYxajF2zD+WmImgnF1m1wJ3HbwzJ6YM36rc18dNOB/HW6OzPIxp0owrHoQpZpvb5LG63CaRs5s64tM91ajN5AgTwOvvU6QLoQt5KQScrkSsUMPY8RpIhYeMxeriZSW93cWWdOEA70Ped/ZxarAEu4aCT9/2N79CpVE2ZGimRr5Nkfr5DdRVOGXGcJGTDtZ/0e8JPSEY/a+qmbb4/f0u5olFD7RDg7SSv2Rm8jIqya4lEVAu9nWlce9KB5ZFy9TSRJ343M/2OsMIopOqf/V40tpsHcuFeypm2+Ohr6T20F1FB3hKcU+HKo6mq+N9lBbxTU792Bgoq68jTnHiH9cLDtaRlmBYxeofwLc4r8NKTEU4q83FC2QHkWdKFKE0ryIGdz6lzBItg30UvrAuTkNiQDf3noR/2OMTg9/JeVZcAseWox0uUYp49sIt3dsxdYi8Ia+yjDEv5Y+WeUSftyerBR8KFc0M8iyeDpksu/yZl6KR/hNQoJiq5HDOpT/qTYOyeUDmY8oMGA/oZ+bz0uyC0/tukA5jo375nEn6lgWpu7RzkAgi75cKo5W9DgxS5lzhayDAIvd4DQGq2aSTBu/MLCupKIvcHB3zYPKAuQnyjnJbkx4K/S5BBfjWrSrRI0FqJOdPM/C33/G+LEBk8bu8R+XIpsiKTLIXm07bdvEPePelW3DtJPgTm1uy6oQTrymUQ2EuNDuAqc7ZB0X0/iHoo88kVT2ai+VEztxlrVm5gWooH0B38DQW9a8AiA9TT2GKTxKdpYLJzCuxZOezjQBwE1+LkWlp05rqUwCCY+nJOb0qEMn/3d85t9ERiQO4s5o7u5xfyIUc2I6ZFSyvKRJXE3F1ge1qZME50kCvb1giCvhYX6Rkbb1mWxE4Fgfp9nVlbjZWTb+jh/8JUvm2pX1FcqLhiCmmfAcucnXZX6uuqpS1euJZg5MzpKb2aJRF3kCMTT8z7vp83BLFw0LfFBVkRDq/6GXC+LLz/v3/JKuoSJ448dQnzJGIUxqa/K9t5GC+AJ0a+lRwJHB7s3MLX+ok1TnfORrUnPy/NiZ6/41GpXep5RRI9OOFgZ+wOl6RvasCV1cFzFnwJMqftJ4EmyqOLnyoQoX+FObr+Rvd59ZKqZdsIqSWcwPhF3uoWFEquCFwm4pph1D11irALBvckPLWA8wpzN1IlFZ8qnEuiSThH1sCuLsONQb1oGZ4E9rrE/n8xUBUR/8k/lq6/8SYFArIClbROF+24flJZORNAJ0GW/z2uQ8oGe9MmW/ZP2jf+lASClJ4DmyDko13zLKaozh4reGLtxVMwOhkQO5gAbOWZxIQXcIrqqtC1/bpLE79aRL1VF7jNG0KgiHcvB4xg45qsjHMQOEVMcrZiU/CAVeDEvYfJxB+W/kjVnHx9omn/Ww08sFzNsKqulNarmnPQLZ5q0PszRxt5iN/zo9mo8n+ez2QxmlQ9Z7wbf5vQpq1C1j29MBbHfoy0jG9HeCbF1UOeQuWyNd3AzROvIB3somxn1EPewELkZIfZedy2cToaFMvhNwGdOEpwuc7MUGktj97QKptJiOj+A+nYB9xvCXqCzJGzP8xgbK0Ph8O1fBZ881ch9McBJG7hK4EXxTqZeKXlTpw42kk06nHrm5ccpijR/FWtQp10pt/aDfC6QDptFMUyQ8d7vAyxDPu0FyaIQdJWyW4RzFi4MH9StrEujpEDFrwCtTDyEJu5+wrJ804NDk6d1VFRViPQl9VTyWb8DbMt1f9Q44gPr3K9nGXFVYMAUbGac6GlbbXVavwOytAKQURQ8vRpVUAOT0owu2SVM9XX/kaTIqgkn2cF8h5FSgMmCKO3pWmkj4hE+hvWAnn/Bl8p0/5p5UGh2zu2yUcL1kLpZktb2zeTp48IclSGzQiA3idAk+wpcHQSQgXxz1YXBaS0y8gJFQYXzcPnePHgtOu9TxI+CGCu5lEdHM292gbln+pNT90usVk4fLqiq8Ruk565ZYCyPL69nWgnd/38QMTPan3XWv9YxxgznOU4Gd3YZXQBdBUr6dQBXC/tgTpIdq2tNjcNW99XYZe9zo4rUpX0y/Zrz3yJ1Q3Ehiw2zRr6t0R/S5zJOGlXPiXXNojsqidcLu4EZ0gqmkJesmcsTYRlieL9KKT2rZf7TfATNk4H5GghZIr1BVuwZ/BUscJyQBFujRIgkwpdLV8PoyN5Dcto+WxngmrWqXWlJ5vBdP1rNvf7ZLibQIcJfotPWw6conuiykpAjfBDijeLKfhTFSLjQzKp1h8/mVuAf2toEw2ARh9mELxCfIDwGrDCfx7Am+d6WOw6f15CMeyqfJUKfEEZCY8L7Q9fF+cYk1m6XQmwM/u1cWofAnY875CBDBXz5gN9UvLKzri1Ro5RoXa9ZsZAN2iy4bk4vg6Fcl9YOrksXaTXGdE8YTx73RZBnEYe7Y0uS26n0gDoFwxfXLKxUrKLCHnBAcnpmHNZQE9QOij4Qjsb7GXEKaYMuy4rMvVXXp3Itq8HhlpTkc6FgGxJFWJHDsL6piYOYwdWvivErx5QqHZCYJ3TseRBsx69g8GlMIoGaBDQWbApo7uytGXiknxyxlUOtCnZtdi4vDVZp+l5+eMY5zBnMLFf7WLTA0hR8Vcvnt5O8cAhBNOCu7iRJ60YDLnVqPNaAEDaHC3V63ZsdL5gBZwtLPnqnw0Enojtl0eZ41ALcG4yJR1SN4o9aWGOacB1w5WA9/OkCZFs2W8Oo9NtPBad4xA94ikm1nN/wWqv6F4v4kLaQbKXHY4Tjw2oROpO/2oCKnbex0s6NUiDfzIL4Mn986MuGAE3nW2/P+miKgpCFMx2XqnVR1VJ9sVaJ3VO+uFBEwgDOPzgO/t6PwCHeRuxlo6xWBlWq3FFooMPOky3RIQdbMZrMvrnY12p+w7eSE2JNlk41xcqoaToLy9qY3pjJyzsRPuhbhuhsbH/RoVsxvIFWyrZ2yVju3KmYaoGnzDgWQQhaDIiw7pJQJ7QOm7Ibf4fPlaIq6Ha7b5jJalIOVf2tnlqyBL1sLfRTiZYFN3oeLTtlSz8MWc7Dx/yQ9ScTUZlyxnGX9HGJNP9JppqjmFG8MxVZJto1jFyHSnQG+XGFvThuGGk1iSyEWGC0qkanwl4ogYggpO81LxszFgvOddCnFLd7pJcveQE9YC6zkD0uwf8fZnF+15clGso++VmayIx5+8J4k0npIkeyBx0+cMxyJ+Wiz449KDaXFtOLkHn3hroKysJjzlHF7p1scXem/Huey5EXF7tUtX2qgHPj0DGYVc/Xs889bRIYLhmPTVRXHeVcoPNuVtdspmU9DEidZ2XeBIaHmgvHQfMlPsgQt3b2Qez9xiswsLXtP4KR9OoZBZu5PTiadhRmJLP+HqdICc/0j2oJo/wbRtjXPuV5WUHlf3KbtWwUrjv454JkGPfijW3Sl50szabGCfs5F3wXdKdNooRJ16jRcEJC38nvVsUQTKUHZDkU0FfQFypiSIKeLPWKqhouQBEZfVlvl+x96I0LXe3oUk23qqnqt1LX3o8KxSoRdCQyqmC15VVMzfa7gESn1RbgqCyBEXiuPY5W/Vg2/T2RuI4UQmo64H5XoXTnIUT9b8F8EIakG9EoD1w+W0dgk/5YNb+I4zFjRdJQEojgJwiGzbdMvpDGPgZVRzPGNd87U9r7DsVaFdx81Uf6TGKHQLfJQA7KMcaIoZY3AgYN4Op49+oUTv+/wtNlsO6H6Du4jKrs4zFy1x0oC1b4ZzjsmaKg40EV45zeWuqYcZw5wlho7qAYj20PpmDF8ctaqr/VXaHMOQK/m9Jfh1/GUAjLUl+p84DEYAdtHQEpimJEkIWLRECex4dNqroStj4nBI7/ZAhNbHtNvMOGnH+XbKlrTky15SSx2oXLG03tU2n9UYfNO4ZaAZMTBVrJWOWb7R5PtvqrUBwhRUYuFoXTgMT5Ab/UXo4dyXRDpWJx8gwRCq1OJFaIqW+IeyCp3AthZf0xdj5qHdeEXiMPS4PazVCAAN55Jx9vSrDjTD3uxNiaUaU0BM4G8mRd7kl780DTyrTXp4P9TKmI9Th8nR6jjT3JcS5H0U5Y3vNctEjX5D5h51CYxMt+Una9mhf5PnXcnGfiWcfdNejEVJvegAgSHY8VeH9VYftynMSOxDKP/6rgWS4IpbzsALnrBzyNeZMYgjxX0aDcNrN1aYnquQ24QJZ4T9BQeJ6MncSVs/V6J1d8iNiaZ/SkD2KFOzu6cmcnccjjXvrU120VMgkkUydITu/7wVyvLMopkvHp0YfqkLHMB1QEM2r+BTWDz2lt2jFvcJnZ7ql0q+GboK0plkF2mAKtNhNYATsN+C+30PTxPjQPrz0/NfOeOAhO8hMOuBO+VBG1Ski2B418OCblJOgcyPyBiBhfu7b2+gnsub1UzMsDqh7+2wKtIcZ9EI6H0xk0VodVMo1IxqreVvbE7HG2hT8wb6sV8AurskrfQRZ+OnzjgZgM1kdJjsej5OlRa/A7Lo8NIDRMU6NI+N6PR6VIUdpky7p6o/K8sa8vQl1srPD6S0L035WsePZZkb+XGPO3Hgow0iG7+JGRW42yVoxSUW6XTSjD/lTAoqLY8lFR48tFfOMsMUFBl7kPALb9pVN8iR66IcnpVY+oHR6lcn72lgbn2AmCdbqa9oclTLCuEh+Y9u0YihrlXN03uCPyvJijCZoNbNGvgSvbHduGaKlAoXa8cJ6z63kh9+c/DomyQmY5YE+HxrI/PzOM61KRpXKIMdopw5po//elHHlhK00P1lElr49mHPZjTCv5e6joESubLFUh/NY4AN629Sshqbc2I4X1qqOHkMITR2iFW23OEVYn2XU6YDiC8ItpRszF2LRqwqFH4sL05g69k+hO+GtgmAslKGR7bRDarboeveZzQ5Cbajn5dWYCArjnk5CnxwfJZWWGEo0npaaTquWlQbbQ2gSqmmL0GOWk4HlZUYctZkKad2kyJlWQKRaUi4G+7UZkDF4qF+nP8UIbFarfbx/nU/xu8vxN5CmXWFwbMXJ+bu82uP6vBq+ZULA07nCAf7oGbMO1UhRrx+folWuut+j7jgEKQaIKkCZCwx1KkmQ4/2nv0reVTHLULWDPivWJa8EzPztodvFLH2HqqSFW1JpQBlBufaymtwxZ0EHubIH5mJHhaT61vxh4ra5ce6maIzsgLUKlMWeot1mpkp7a5r21j++AbC/tKeZoeyMZKuF4+SxaZaMzPJra3Ih4CMuiwft4ToCbrc98Oz1Iomll3SDC7T73PpKvyztldG5OuUGPlEzTNP0kXt6xHkQL/g4LLh6LKhHCdwCgpXMmqYBbC8KsxMkFEfbSgqMzzaz6kLyRMzgD2Fq1T4iQEesgW1I22H/MDr/qIINZ4hyTnEd8hvdDKRNfw9KuI8OLHIa1GYEYRl3aDMLxvq/UnoUahyHleabaxrUUJwIKMPC3Z/G6vjyk/YzY3ajUawTu7wJ6iW+e+PNBZMeMxI4jLro6mDIRKQnjzRp0SE0NQzjBNU57ugW6LiY32zwf6GIgPf5LGi88qU6WItgtO8R6JRmd4BJnzOhP6xZ1m7d6bSMAaao4FDi/x2KbsvcdsvXZgAnFFFv0OKibIfadq2+KlmEhEQ7pToXI9RM+Y3PJFQGGQ+AdYjUuTEx9b0NI5MslHjn7Ah8FadJUHQbNZ13TgrKUq/6YdEX0D61tEkEfRlD+PB2LbjRfpS2a6bDviJ2EM76F2aHD7fuG6Z9vCbigGQvCILom/osby/cFxphxrXmCeuHxQuZcxBV1XN7Fmgkee8cObhDP14+fbrUufW1/X5/guGxm1hrjrnjb3jw4xfLyRZfpWYuvfJBjCKRc0uFaUQ8Jyivs1Z1vMZJavF5EdZhFC3+OG6a3ePkKOAkZGGSQZXsDZ1bemYfawrqpgu+e2pnf6cwuFaXhfuGEpbsVihTaB+gPjQGW1Qq4lo4m1K1OOcvFaCw3joO6x99KHyLk0gPNajspmenFy5THEQVctaiYDS1C2rfplG2Vlza0aEC4kSl5Zqw/x4fFw4qrS7v+ft6IKWGCEZBtTZ6p2x18CIOaFMKIs1YLrsbt86G25j3cP3fnFj5XBxqF7ip4Siy+aHpVbEKgXpU3LlVmeByPveL/EESmFMQaWZCIW5MF4g1XIZjZQvQG212qa5VOFCAOvB6nTTpngKpXYOhccAUxXTjzfYbKjD/vyc2nqHATM1Cjsew56XgYl75vE09Crs9gYpPBP53YBvxrVff0BzlEqHhTCucaT0hemc1+jJFSsvgl/0svaNGyEjbxX82H7xZ2VzugHgCJtlewXCs/PWKdRVQy7m3q+C4fyy232bQTQkAaDlyP8tsw/hPigPi6rrdOqmUyhIObe9uDQF2ykQS7odI21DCOQ54iB6c0drDo5TT4/mvUna5cDcKHxuAEitB/9b9usyZ4JZVovsoLAeWY8SyWcya/Xk+RC5Qp5Cs6qfVS2hTaIehaOuqhwdLT9z3KsLOlYiKdgSMgCRmua3kxs9+enSo81/Rf1XQaVZTar1IVUSYZuZgZIxb7sUjgjppi2LwbvNxSh67wgoiipLqVMrMQX6IRv/94GCDsA7g1Crp5ohI8+7ofAZIWHnduYOuGK/9Fgp5htgoa/CgG1m+upfvoJE6bbXRc8fbr6K8xz3jQBm9inqoXBZHuxF6kc/60z9WTdYHAOqNUWYwT6hWFzBDRp04k0vDYrkGZhm5iVTIBwyJ7XfGjKc5Z8xaHBAW8ZWfVHa3qR1AUKFxuSj2T2DlXrW7iLPFDrKGS0xnMwMMhazp9POtrcNuFuQGCZUquVJF/vHPkiPg3ZlzK5sGY7FSYnmFFUzkCcHlb0gaFsC1kM1Gn+e1vzvWNvIe/kOvJ9eBnPj+tfXjjO7aYUZOFxlOK0TYSVt8XN9ktIIcW5gbL4QV0E7ivBC9QjuWaGk2XByFBpCxHTTZOofpKbzSXbE/F58+nMUHCUjWJ+WEGlly6KcEMJPr0/yH14aQAQKVH4lnQXgAmtWXrGH8+M1m2L86StZkpvQsMLu15ImjeGoF+6seAmZv6AH75rQCqT30xHKK1mPYAt1qUjT34dPKZEampoVmn0LkH9qVUw4bE5qLLOBu0+lPtVEJbH8k7AUFFPOOqOHcbaz4QTuOSOeHLhWhG4/NCEgAQYcy87E1+IBlCr9ASLFyzScQskkMCeWP+KMAUTQD358VGE4ykFfbTPz4i6wcRx2xi0jARWyzUeVr4mMRY7bwUGNL5OlL9lNs2MPdrkQpEiBFQuG5Q+ojDkIRLBuKSuSWQ1EVTkZQxt5xshhZCvdYxwpv6oaij+0mmML0I9mYDkpLar10mVP2R3CDr7NJFcEMYFEt2+Hi/zb8dhkXuvXaut63ZCnrBC9twcVJgqk9lostI093c8wz1Lg1dqfNu4MzGSwgaK8Nz+Xa+0ZtR7QqpCxgPHwn00Pv+Sa/yLP83Kk3MAwrwFUS4HJSbcHOzmjX8wlr6avXLYrmhu9PJ8JS0yHyCFxK4WpZebwCPfc4FaCVL6M9q+LmyNn5OOBV9HMmhJupw19VbUH20uR7OWne1UWg7rWk6HLgEjVSV50R/0DL8geUFtFx/TZinHF2D4Ci6jKerhp4mhexd69ydRmHuG0kv0fJXMaLISQh4ICYj0c/ypj8koAVKb5JC12LzU07rf5fHSq7IMCr8dBsrJIXLZOIwaKD2EqBaUNPFxKirdpRjf2eG3B8yhAeVwKVGX7SS14zgDNuRpBp/VgzYcfvkWFLDJ+5rlKJvBAucKRgU0AAS0j9SMsy3d8VexloSVYXNi6qMnx55L3qszi8hrFTPlGZDQOu0vRdnG0GNClslH+sJILCurrzxAp+5cHpMvOa6B7tI3FNoBUYteYjDTSMvw5zmmkoaE63CQsAGb3VpMvJv3jIYbmerkTbNDETyBQxxlQtAJfSYLJ6HlJv0mRZ/tfPsoUCYYBKNUZszYiFMPi/Mn6aWW4G9ElffmA86WaWndw6g3vfhjddOcp8+VEinrTgtQze0IDqjIapjtbhlP5o2ZMCnNF1NxHVBZFFKVhPHEIjJYH8cgEzPRacTsfym8XbkwfKFahAI/CTt1hFFWYJwfqKZKrjtnqDB9UNZO942KyvOGCIOw7OzEVdYPOkQRsAth73MX8nsSr8H2GCaYC1lKZ/ac16diw6uKL1JWUW/ltNPsMiAmn/4m0mH2IcFOtyuzuEtSCsa4Iv4NB0ZdKT95dDN4yeoNPqp6hwohyyVzp3NcGqdcqeHNHm3uDPstJoYfRmzdyVFob/z+HhpY0Gr++PwsrLt/rdJdm2jr+fYK9Atd8HIazn6WYQbuvPO7rCUftnVNR/kDY/unGCfb8RLy2FAmUjMQNSyFxV6vCUayWexFR+2gDTnLoY6x3bk1hxwdMZlCpjIWIZgkbTTzuWd2GiCqwy/jIokeoBhzlmlU2QRHrWMnTYvH5S1LJP1xErNWDAEY7kameMSpSEudBZJZajWakqiQ2wGLTD/b8hrctbstwD7ZnLak07LSLXfC4bc+fssX2/cEHbivsW7BCBDBu4GlH4ipVQ2yAqmqgWUMCUVeLlF5M0CZcSq8nwZqsOW2qvklez46gowUDi2tZqSHO6fUEDrxtrNOZhZOLlfKIsEFCzAzz3L9D1KG3IO9wiFyiUvgVP76cd9jZSMFogJl+00CTIWc7Xi66pjqgmy17uHV687adMBjuRQdQhQkdSguPOLwDB0VK3Xgf8lP1LMC3KiyzoxE9LPZYWdzMWRiRONO+H5zeh4VRCeGWG7eAXUuDbrRRShfWVskPgwIOrzqxfILDxvoEKK8gSzgop1QFpig/iSdIc62WD+n6JYZzR1nGp/ka+NVuiDcHD4bR6wov87OoBxvXoeGBSvpW9GVW3f2U1OHtnMzmA42nLpA5BPg7hIpd2aVCKuZNYoCwm77Npwl4/qKD1/FErbXgAcniF8A9aGvYb2p9H4NjLWZchK0CiP2NMuqbh3kjydHUHkELBidPFv25pIhuw1YHFy/pqkvEsXJ9Hg+i3Vmt217tGDspRfljF/n1pqgmr3MzcAoWcfy7PqTOW/pM6U+YlTHqCa3K2HngjpmTftNEJE/sBPS+En6QfbsMX/RyH9A+ta6z/uaEiEZTtD9EgzdI4SpaXgDB082LB9Cmw+ZvgdhxMbeuDzkYzjuau17/2QxOhEidpOpI4KM10zuwm7/WjNoQYe/+OOnP+lMxe1eCfuNvsn1ugh/3BjuQ1cDW8O1okn0ndtPe9yr/X+GL3K/+8RYx5aNvpbQvrU9J2juUoLphO2BTuAostO252BT4gRDzhaMgrcllYeueYfDq8+6IS05LZ1xx304OXCy+lDBUZNqcaqbAPK9o2VKxwg7nxyyyAZaR4/i1WcuOguujNaCpRv27C9G3eMxPdFLxe5w83hBsyRjoIqrXwEYWvOk0HtL2wM8dT641hfygTIokpRbhLLs6PoXz+gNPrrw/S0FN5L/9gtN3rfxgfpRb0gVdofCPQtWCaVOA9v1DPp0EuW4ODfGUC0KsiouXI9ZlzmCXC5DvgDgSiIrztHE82NoSENgJrpoBv6/p1rT4KR6Lk+A0NSb2V0dXvSzQ4wXP+NLt95Bm0X7M98wrnh87pB4yP20kHE+WhoeFiQK3fWsrgwVLyy+bh4g82sUYOciZ1WQtCRE7bkTvonUn8OceZ8DodjlvFwLrgC8RGZUWuzJNVsghgKBOeUj87022sgoYHf7AFXtEDkq1GMaAaB25JbpM+xCd8ww/Xs3jKmUp3X272wSt7766Bmv0HW+gaBf0qNxV6kHjvVBsfXnr1HFGOdBu8p8hN/vMuytsbKOL27R3xh+6GS7vXhNPWVcS/wsIGGwlTcqOh/cEJeg5pwcMDKsb+YKVnkr3O1OcB7ARJzsQyVqmJ6y/18kKPfZn3z/NoeHKwGH7ONiTJzd5Pjao6AR5haEcRu5OxTeE/LMfhDFN8S3Stn6EDBpP9EerV/wd0vbtCtOigWY15BetqCZ1X3gR0mQjFjSqQjz6yI6trjwmp17jWS0cXpMSdzQ5N0TdHqKBz3c7p9z63pjQ4MHTg4HQu/zBjWrAf318IjiDCQTQe+EtzDW4fusq0mREt42U5mmpBXB8ckrqZmh8MFWSs0R9AruQUrQIVGSKtdJSVLXVDDQ9GKb6xs4tETLFCS/KhG9LhTwSLayNNzWpndg9pgyv72G9qHGfNvrmI1wBJTXHcfcEHV51JqicuoFb28bbGUeCsh/igvCIeaErSNeBo7veMwBJZXgCPvpth/mKXpTaneFAftsInKxw0onyDLCdnjQfQduPYVPOjF/FPRfgBva0E1SGb6hxhGrpOEjlB66AkKKK42L3VHQnwJflIQDh3GmP/QnDXKb+nnwtLdZ1DOjSm590I1KS5Sd2EQj28A13ybxzWhVNFsXS5Z26+aPxKWZJUspi6CZ1Ulbtr8lR5J0dYiAB9S2RNfxZNAWDhJ6vYP1Bcv1sYBP68Ek/RSGGqdkPON2SUxS6tikMNbwLSFwI6fxaqyRKVGB+33V2Dif4ubmgURQ30jVrFVfaH7UJXnvSu1wG2vrzEUoemZfCxxEx860LtyYzGg1TrYEdDYLNK/v7Mer53Q2vzEadeOXJ8OBJCEcl680PKr8brjhTrdn/naYtMmFmqNfC+9LYhTecvALUDWIK/2AEdob9Dp+UZK0cbFv0jNFln37u9XuntO8kYmxjuWcjvzhCdEuG+JM+0874fZgSVgdZS0zsqPsOwOoYl7O6BECjXnKCx6PkjhdmrRpniYtcZNbz9aKEwg0SeSdfJ3dh17U/oeXyzX7y09xt152BmEny3X+69faByt4dWqLsRQBabA3eFiuk+kkpJhug5ifQYF/FVaRGiSJMVY9CJ2X/t/hxNWYI8YQZ2BPK50sFarRg46vMnlsgdQmQIB9oSQL2AC7Xf+ycQiLoT4VyovEDZ1jIwreemOG8+MrGLqBPEuwi7OKNhuJ5vcaJe/TGUVsZ+TKbw5m8Kouq+9AZ3vwJR8CdHcJRHHgqwCsWqAJ7tETjFuyEuZ4WsMR/RSeNLQB7bOBmXsSX2hzVamefokyGzy096ebPChkK4z5h+lZJbFSDmvAS61O93hOJ3PfSvClYxNBBtn5+SrvDcacWQfyyuvPCkHGgG0mIxFcBuoG57kB8xCL3Cs2tPdvHPhqxkRYewTNcYb5J+XXph8HN2saVvmij9g2U6RU/Tae7LAYbNnGFuCdJ59OqYFJ1B53PC8k6v8FNhDBeX5zqKdX8b1/I0VKiNLRgrhEf9JiUSu+Vynpx4U/p+/ZwSkL5sUAr4jUAcrfZ0NnPkIwtvnJssfWg7H1bsCngvQKGOkro6LZTZavcAGcEXYJTsQEEFJ81392xQlIAPgz+DAzjm2BUPuvD+oboBATyIF3ck8uU6ihn7WEnFUdl5oE/bugAdZx71kNGc631tXp5zvdt+3NDEpZVB3gbBSOkewelLv+U7EFpPIgr/SlRnV3/0T7nFNX1vQyZSzyOCQQg+fKBf98Ms7bxCc1MqZx56i/W3pJqtGuisZOmB98aWBoUbMhDAhytuuqZl+DTH2GNWBfr0wjbgISLpM5nXv+fGqN5zIrJJuPL6l+bE9bg5DehYZ/2FtZhpslOAA9T4ePcfuIZZrFl7bAIDpGjjHSbehMFG8XeNSLvIPwbkC8eqdRzcPq4bs5gExLB0Ftl58KUzumLzHd/MsZaBC2gmRgStzc/woKUFMqvUphpMs39j58cIHkZEexkdTt+FvumPgZbVRHbjp3PzAKiVnx3qLWqwrNNEZTN0giV3vYNnq3Jy6r3NgTIuILYbiRzckN11r4sQZ1KsRIdim4JavsDqDn2gPtR4u1arY2GPaGjvcSFo/tfMNFGv7oKYOa7jU9ft0Xtg1wURyJtRya8qECWKFhdAHaLsVwDKmBDP1OSEbG9leaJHVQXaHkMqG34s+lTxBBvW6IPLTxGZX+ec4XDuBNX3JjUVBFigpsibgOyTAhs3YWTSxZxpEuJ5Kb2gMim/XLzUl2N46wLA5fh7hq9Mc6u+w/BeQ2vdj2mIu+Zi80F8TZ85HqCum9Yt/zL7+MBc0dstYsO79ET080o0IVUWyg4+erKBUn+utLKe/7mGPDxxpd7vp7MO3XJWL/AT+IBQ/Npbgz7MVf8BCeYD3HZIFwYCV49MkAoPRd9a82SLx9VbWG0Cqr5HlxuDFGnxYfwZZsWaZo9bcaVInNdo4r0WAeMH/t36Sw5MG+G9l0vMkFuUZoFvdO+G25VrAUrCBJP+VEKTqmE1oleiob04KF5jEnwe5qYhCJpjvhd3jwb7TAd80778+0JBg6O4NpCeGP0deXVftqpqecf6Rns22syEpm67kMuHeWtC7UowS1f4sJgB2WBvjdVj4HdqWfne9cVJ1MeBU2gV/+SDsm6jfD6sT0sqtKUNsI57/mhxCBEwRufpp1qMh17J+uCqyAnogbvPgmXfwZNFvG5RgRLrdjWY2wdJOe9sgZiLcr4zbOjOo2x8xV3JtXUJaVLDHMrD1hDho9gtI3Okpox90uCtBpRfqj7h/gzkplSFe1p87kM7jxpM6f7DyyvHytWB+pU6iO5P6bLcJslglYu4pmkplpDehp2ht40VkwXEk7gnZj/C7FKEYJc+bRVOf2rpuSdxCMc7FC3koa+8zLQDJyKvC1JoKMm1FA9UCEpXPgQMt2dGoSkZtiQu5u+PWyT/ZX99Cx18+ZwMiF8mRmAOLZ3w1LJAa08o/hsvX9n751uUS0Gemvck+hziXGH0DgPBJNg5d9wVzCmSZtu/uOQlfDKgslgDTcWNtvkifxSGfH9eouY9/oyBUu05XKsnt/OBWyif2l6g7wB9f4gv2Shobc8pDLfGzGHznM/X3h4Ds7br7GGaQeDqINrNBa0e+UUVmS/itRRp+EYbbUgxLVzzno3rfaXWSNhbNbLWr6wPwQ7m1z6jADpn8zOXdIbYJRs/w/7RRR7ArqJk8sk9rtoVlq2w8YCnBFP4rwse5m+TGIMuJZ896AR1+B/5sDbilW+jPiUYwlfRwYfVi/Zm7ZO7EZ9iY2XZh3uiJg4aEcNc3gzoBD4VYJwrXPhE8XhIMjeYi26p92CibRo2PUmxe4cEI5cKUBw6KAf1w+JI9VuOKYvUlLoAZbWSZWsBWEQx/OTaWSWDRFxJch4W/mTOWSfccrWu8AjeVmMi8puIoNYal/hZ3t8PoY1JzkUK1dfbi89FMjGgPRtY/kDsTPHShJZz837LcGsefTy37hhOcojRoGfMetcJJYUgVdCngz5pVEKMoK4Ie5zS+xat5lJKfpr5s1K31iELAFEwsqx9sE3b9n559Q1lvNNNL3f2U9hU23hkf7vAN5nNNGeQ1Yz4qN26Jh4vPPrvsDUguoA/bzVSMA/uAxlLgxlfVR/3gpJHB+iBZ01F+XrHicrMc0ohNem9hVzWv/uywZY6e6bzBbkK/GKr7UwJSBNw2wp05tFmDdu8o1WI1ZBM4yxQxlJnSU6hXDV6TxvvtZ+KBnt/kKzVIXEpy9GIYuO2zDIvC/J9E34fwVTmGvEStB38ON9yTtGKQu5XivIWsIhsOb+a2uBvmTRgQeY8zvgJyEYKck2535Ce9AQvCjuljVOzhL1qyOfQlWC9TnyM0yfU0aduwwhQQcyHbKjE4NZCtTq/RUVFbRQABzvcmW1m26seWwPVoEPT+gA9xMbTH6rZuwHnGg4DaV5jJCGnBH7o1smluwZObjAsnofJMeq1EQ2geCT6Mg9LnAVhD0mylQrbULkImMiN6Cx5+Dvk2Ou3Sl3TD2Y1Mzw+G1WCXKab1p0eFs7bEEkCR8QfY3pAVeau/41sDAAh+HYKhND+I2wJloXLoOC1qR3lgKe5P3uA8uSZl2Pw57uc+zLXuHqq7GdCM55ETY3KLnpmZNcJ/V1wQVTdE6Kg4+n4/Qor/jtwuVXOMO0OhbIb7DL5+EvP/26ADrA9/BMcDhJLqMOjiQwhHSHIT61kKu6+DYzeI7ZxQSXr63Fu5pN8wCe08Le91HSkDOHB+qiDj4+2rfpKRM/VTYvzsJxc+nj4yz3qqdns50Je5CgTPG3U7RqEIsoslY79udmvJGjfoWHThzeVr5ju2c8zZ8h4gyNKuSJM6EEm6mEomEdtTiqckdPuJGEhwSlJ8RT2Q840SYhcik/AXN+fA38uVEFUbXi1sk/wp674awv0P9B6Q93Rk54IMDXAO+SM88C3FpmuhJjHrfLIO+mdDwWGNssPFRSyZP5PUtMhT9mZRKh7gPUJnl9rSisFBrINHbTtBP3rpbuMcqP/ZLWMSC8n+cyFNjsMwD5zmz527+FMdycFupn6g8Vcgtm8e0MorpbDvI8W4FxhoLUEhr55o109zWwI8WNSNBGJHTvervzy4sTOI3jmSAJH5onm9midMeJVgb+4dXQ7EUo5RMqn/OejGKt2XRCSxAJv4JTHxndgDBNnGsMZqtmLF3D7hmv30QoacHCrqm9AoloD3+yDyuc1CP4pKln1gD5EHdtoHtS64TYgVJKfHZICTM6iel9y7sRqoO67UCbtSg4ibzCBbVJ6ks/vvIYyDXmTatRcdtZGrBaQpJ3wVb4v/5xLcH38GmcPHvy8c2JmWN/xK7XqibVXy7vay1+fpoN3jBkhnOmHeD9wRyLcg7GGzvbgB4CaJVpHBIB1sF3PHZIy9sj7t+mcRz7meJ5Okvw0Ccr9gqHtKUAmz/ZWwVqQfLxYLb0MB65G62Y/EkTOM+7Hs9e5kk3gWqCMlznZw1T5P4LoYdJUziPtlr0lTmTtj4GXs4o+wo5rjA+R0tu/dwzdcYc5N9XJHJTThJ3hbVgqHCrRFtziK8wB/mbX12t8PbpvbMIVAW5NP5TO93ylGlP7qJNDOGlNd0dff8nt8kBvUTbuQf7+w4I0jVf5K3TN9FjRjvGQvdNTZQwOVQLqvkhHDw1egBl/7gtJwf33mVrHLWSeAx1kVXtB1x9OmlYP+9q4BATbUvE/zK9P1aZD4fNirARoiZ7W4hsR+j7t4jv73rFla/7XBK2FlRF4+2POZTIx0p0diZJLexPOYoLJ1RgfP5ZiOIBqowa0QTLDM6ItDQyCjsnG2OgOras7wgdhCTRX62jMVZ5cdfTzPyEQDMPVBxqjPNHLAm4hQzm1gMH2V2XeTFqiUM8mg3vZVAoXHEXPnKJpde7cWJYrEYKO/6qmtWOP+R7zhgD2AFUQaspJJ4cmm2lLHOUM2yVhowFKkKZ+X37wIXFQlIPPMXuYUHz4mPFuBIuS+6vQNo6FNUFypGNh2VjEWLvzXFOTMt0nC8emn1m2UpZ0xWFHYQa+5Prxtedf8V8UUpuHApkNnDkfDrVF6E7FHQi8E7UIQtRNaYZqkgRNIcnRChLvexAW879ox0T6wQSkUzblb98eK7iDgTGpF1JjsYMIa65uH8gKQrqbJeEAsUQ751dB0lOZzI6Q9IfGsg0+n8xZ2+KhejQyPO7LWrAcbl1SfGonAfonGmyTLVC7Ms7d5t6WgRDLdlcxBh8wv7AtzTd3a9R8DyAswJZswdU6hVlBCrxesqlv8MTRTaxpzSzODSAfEVs2B2Mx+cUzLUTJNIkK/E02IYD8FYNsLjnsT4NsoHJeIliKstJ/Fc7sdrvwEYnwFxW95oxnpST30buzoqu71LiasCmMp0NaKCznTKzMRPgYw2bRDwZHdxnsD9xwXRHDASM+ogE0dfFhyMS+Sy9n/mf+sKz3RBUaPPqfJAB4yHgSZV90B0Ux6arA8EByyZc8sVx70Pte2PGnEfMlhVjNSv1H2EVhXspi89i1X2naA7hH42KBT/txpkQlP75Bdriyk/uqEnME/vn7lie6iFkSMaIo534INg1NIVGH4EabD/Ln0NNxrjEq3kee+dFbClno/6eTrl4HpO1a6b/ryHtvXjivTHpwJtDzHqjjcJU57iGkbbwJBnrGhCY7AJ46m3aX0htDV1Btaygi5NKeUECNUe06EOcm6nCkv35mwOz1hWmu4HEoVvWaorHwy4akLpi4bWBCRAwUSPh1mhw+hDNYJoOnTerWVsHayiw7qGjF14jgK3ICzHFfOK1dYFRBxTPbysZsqba8DQwp/vaRD017EMDXOtPse3dsEthxM0WD3dYBDicB0y2QbrfwXwY7ODHmn5jXmPxy0SF9tplyj74RXJ3GRYjlzSdhnueNFkG/3adc8CYXSlI6KPPxoVQAktoFqEhELbXl5cCZxTWicBfR0uFNThUroXf8pv8l/MrElzSGc5f27289wbDnQJTlt5S8e74E8V9C0Uh+nqG0oQSxncwX0M++eFyGb+cGA65Mx9ZSjnbb+7BjpIYxaLcwW7LeqbYJiOfXPgM5+vHJER71SKruyhF8dFCxy4aLCygYKQlGdfW9mvw6mRx1XohC5sZNqQCQui0o5AW4r6XMKc4J1yYOaUFG6KAR9xB3aTlq2tKSKjB6j6uQ2+xn+q9Y1y0is8Dj2AukCrT+RblnWJ+j8KAFR1DKEeHDCoPEM8+9vVN5G3tBgx6SqOqfX4/EJ8dtJ5jRT7n4+1Nms4Is6W5hevCrRipKLzJIHMk+OLNE3VxGIgTkwlSGMiaF2TyrnEdr+LNEuLC0JJy5gRPUOGFSZU23RtuH6KlhYIcjD524qEnTevVxpr57OUyyQqIaeysVc5TxF8U/EaiWn/W3mKVOS0UV4lH1ZO8fYl/Fu2rvEvG5dA30kSBuX2ihyIIBJ0G4B+LQTXYfB3IBflAJg3LwmCL8RwRhbwfWHawoIlqjqlGQpKp1YSjnljLl3RwidexMZWV8ax+IEIvNqJEpt3Li0oMXX4Gr/UKP4Dp5yBZNLGOWyxYGlIP4U/sbCxfQpoALZPvtEHb1SxNXXGWpsajky+05YOgV15VZznQYpifLAEkjfpEWTZf1zKrLRZU1C+jsDna68JbwWgppweifTBq4iwbLdDzTE6UO3JU4ey8y09d53fep+qadfVkhs4txv5/PDdn9zP9ma7n+R+L1QRKPXl855KPKrXCo/2P6NBkAZKYozOQfNJNX22JNS9KZ8A9OUC00GCvJTptJ7V5H9IghALyVa5ShvvzxSyajMB3jaa7aFN7jIGnqnNFNC3JYaROgkeOwrRyECF5hyDoYEz/dC6oaNVtvDx+4jJDg984JS85cqco+CDo2RstcdCiPvAfyxJihRufGEzhx2CydYHYFTWTP+mQ1X5c4ZSpLXLfm27AEFu59edFkgCxZ7iee5MZaotMNyVPXFbI9JaW0keQO9Rvcal0eGyZOzJU/z02h3GHFfxytK5at98fliSOj5OWR5ApaGTri/JXvSWivmJZPdTXPDAlsrwep4mDOvGbs/6Nuwe50n76g8/7zCXCkJlic+6ooB/iRU9xvFp1sa1ifLyyj3btmr8QInSwZFMOLO7F384nRZAQ+wlPfQ4kZVfmR4TLUPOKRrA36VYHDIrBREEK+jF/sDvjQeT9JsnqjakWb0K9/uwFXM97M99WxgPRI87NcRbXsY5Nrs01RX1emDq34Fs1WLTDlNuUkW2LI3Jhll45kDA7+KIZYeAqYswgS8MLUN+E1EnrywQuZoKpg+eaWlzTLxA8NCugnx528QOJ+ZC8+zyCcZp4CzJN/oiqmmPKYHHuIt1cgzWqKb9cIAJp8qFzcgEeRks41jco2Y1W10KddtP1E07diwvOBymuXPLZRchfC5QPv1tAqKXNdPlh7SlV8H2ieFuBaFlp7lQsdvykWVz79awXEsFfhGt4gP0krPDp6TMDdmIjPyD2QtTa8hNYpk5JvS3PD2eO4NlIVDv/WEJQnBvCWe59eNE5QLnTdXLkBmUGrbzXG0FmoZz1/i06K0sKHrbMzM4O9CCqc1TEpAROG+8BwW5kH6GSYEM8NNHz32fzJ0spOdxW7j2jxsMCI8TlI65AIPDkRVjw/duUCiJ9g1LW8Yqa9J5zgLBvALch2zuP2uTOJMlnQ9xu+4EcQj0kph4GyTvDMRKFJwg/NPI648HgLwSX3dK77sSKTHzIIDrfEKSaW8hR/He08tO2SKcVfQ8PVB8dFXh9TXVAv+DSfK44XnSzXvD9uCl/sSVaIBkEEy55uo56TgrQlg/+eOWe8jlyVOtTd+cMIdRy8mgLVd5MQiZPntkogSbRSJca2qS+iP99TB7T+Jru6m0FWTl/FUDL2QHvvOR3EaOaNikaz/Uup5XbTqORYG8zLiyrqFnZQjkGjP99acc7MdYfPn+p42KO1wHXQKaWCWqPOnMqzet2e1N2E5ZJL1I2ST1dR2DqZzK9Pilnr+N2QaNlu0t/ZY2ilauF5vJDsaIgAJzn/oTEs3QgEsr4i9lkVP7l2BDIj/3oySNA0ydxqxP66FbF7PlO9uNpCagyVZnAzF7dL+CRqFfIohnecpzL8MfmluEIPtrniDvIk8eSYcVg2Z8ersO7x94UnXGYFWonXc89L5h1HRkCVS/R+0ZAtLcfRi05AifYQ+sRT96nYEh9TBc22pqJxggPhOZ4yC3vb5VUJF3f2hLRsN+tOc6x0SgZ7w+roEbQaGGS0Gj3c5zTrpk2HManLNVx2vTl351k8hsYAKpLjz1I0ZsNoPh7NJH7nR2YDhk1Dv7fW5uSKB1DgM+bX3JXjSzKBsfxula3sUyqTxOGbYEtrC6CkYqrsYi2aA3J/ctnUV3+l48KLjX4ZJHLSibegECCQjtjqpWwfKNJZUsM01QdWo4SFO2hVcLUE+h61dyFQKtk18V/zay6o015lcrjG3bp+tBqdIPnfcOIVBBhK1Y3nHzzmminIVGOcWT+kjKKEie9i4Dw5dZfWWOTES6bzxMj18xI+qgT/GVI+i349fzxYecEu0xv504zgZx7IF+5rdmQdWAWun9wOItzCWIMNPxwaA4bo3YEh1T90hml0hZRw6ThxZA2gpJHt82WpDcn8Oc26aIT+V4iX4azuvT5h2x4DWiEapdosljfwI4Zfz978oJMuAv9ytanlyIA2SNyYljZeNftk6VVgD6OIbiDo+2W2WFwjvhFYHgCsf5/uJim3vGyrgBgrahlx9vM5DMflNDHzSRhHwlLsibk77KybXEKxwdB8iZ0V0gwQ18o5LGZUyx4FLt3HGH1I5y1A5sJqjRIOVo4DcXtLZGAGuOJjgzMz4CbHYFDag8MegG2WOmmeRdnK2fxVjeJ1e2rjFLd3UalT/8tVDbNuJmgJbmqtc+QDvtEwZXLWtY60PDSPEZ4fpj5u7LLpk7stDkP0gXZgEk5WbMHBR4xwoAEKf+gEF//cealcX1WwGFU7QLnoxKZJ3xctVkiMQrcn6It/12TBNyurs0zh9uSQwuptC86HuXUkfZPfcEz3WHYqfa/WT0wlibXYN6Ptot83jspSnciyxrw4qcbcEF3HxdIo3UOmXJC3KdqdAF4Oi/AonVt6e/OYQiLS8X01HHqMmkKmPNIKyjwKUNarn8HK57Uqgd9ONLZHP1kpJr/YQMb2ZdH5r+HdaYdNd0mz5QlZ0Q0gzsKWnnZhlpMMyNIPO6czVHEMabiJd3gA6PXWRKznIFZQ7hPwzGmpmMkTpy9sALBAmwFbQT7xBUmVOOpprB1rOutWnX3xwmvJUHzF11JEzFX6wKy3asWidIHMzzSp4GLnMZp6kKg81BcYUeCre7bvdHSLx0p4fBiFk9KyYJrG7o6Or0PZ22ppPleeHIQU65gnmvT6NpcBtD2e/Y+GR/19HvKemTeSFvlN4/0xQCuj5r5V7k+Ul8L/rPldSfF+ATn6/JicodGuMWzdENHjs8CCfTUI/6VgYPa2hYJADOGbeLCaz5TefIRYO37s7cL3x6idywrK5MpnKmibIiWft4BzC2AujLg9qCLVZG5lPktlF3LMM8vQEDdPt1VwfLjnhuU/dHUoKj9Oet5VIFmM+Nz4U7u865ymLdQ0kfMBS6SsR7UHzPVpTBsDu03n5Oxcg3wUAHo6NoYy7XdFgPGKlHGDbK+DHC79J4kflidX+9zKPT81jyskQfHbD5/CtnLVnXG1KB1Sye3RHp2YVMBMLmO+PbXPzlNJFeLdjOwpkgRX91RFS4RSXNf+Um74tbzeFxqS1qw0D3Z3+4D/YeWybVmQh2G4E6a72nVQhy9LQ1oYNmbgGK78E4TyZxJiMVNI1aiYzrDXqUKplxvKjbxsZp3Oo727iCrRa1mWwfZKUvQhL2eWBzh8eTwz2Six31tygGy6X4hQezgBMAM2clqBtv7CV0+lNjhLHotqrcK1gTPw90yQANAXC9k4mTNilv30jS32hwl5YGgLZiq8Pw8aHY53f8X0Ssnppq5wtKkhG7zPmnaBpH5kaYxQ7vxVdsv3zbsYpnOx1HH/dgSmLmUu5vabyxohYfVYck7PLvNW+JWyNmTpPZuB6oCMU2GwC9+F/N2VFCBf+dT5qzMUo/1F5eVinRWx/400zaoJ6phvBESX0hO0s+mCiyB0uE5ys0R2V7ey5sqF+DAgcDVe8SFUD2MjFRn/afLE3l7naynmwxwYHMEdogYtE9M6H2nElBXFfhFbEFJdZeX4pDyUqTbxVwy40cle7E/W54dHSEKbNQqngCxbVZ630zzIOoEIoM8kJTxwb630PVUAK9tuWF2U3TEnMZtmGyhTs+FGJ6i2YfxktZl9neubXNcrWodU/OQBtNvnaMAI9P2tborzFLdBPJYWUp2cepOJAlTrvSbLWvlF3grtVLdyi6OfJqrp5R+PdD9UogBxTvVn3h6++9JSU0nc16zpToo/v7YSFVzkuwT3J4srS3lRH1qL0aQe4exXpYH6MKP/hgHWzeDxipn/k2TZaJiQRKRpj+WyeRU7pdTnvZ0IUnaqsNifFTeFPy74LSeHmC89cVp8q2jwX7WaXErsYB6dilTH/vMz65jsaV82B8iCxDOlxw/eIecSob+HxWTzdde7QjdI19ZwMio8ZCotlEt+tDKXW12oktABTPd8TcBg4aWV+IsmY/BQoFevgQnuEoum+s9qMWAZykMZuck4cddgq+Z5RLUAqQVSpMN0rCjZcDCB0sLSSPR17XBcPUhIwBCmr5pfWz1a420cjpypED/6H9cO4COmhgsm2frYh23ub6/Ik+BshhU4mjbBefpy8/6YMt50KHWbQHTxpr8x3OBHbUlQ99DZ5wlKY+ye8QALlQhWrfJMSrmdlf7Faz8BjnpsAwitxn1YlYItMZ/z38z8YBVJoXBsM+/UUokY0MI+iOCXRru5QirQLCvXvuIlFa7Zj+xCrBgGy/H8TuKoPscePoEmn42PqWe9+aN071EXvkziIQsB3feHHtsVa95Qui9na9k689oQCCbK80hx6Yu5o7geGrliX+YL0pmAl2vCQ4TcXcpIQu8xJsCoONRJBo+MOeh4jqzE+a26oIn0M+87v40Bhu4BL9N+dgWy3dqp/+yXw3RBPkkQFiRVXspVHfnHbeAiIqYv0kS06Wl8PK2jqE8VpEO9Q9xgfaEAvHcpJC4ClbmOyueZSZpfl4yY+/a74RP8ZVHfWSfuodSL4CfKQPSy0R713oCrgWF14RrC4llfh68bSjBetIqhUbYuuMD78gWY8ihF5bYCWp2+GDbCtnp8UlQpAgwaXSdKsSEiyilKYFvuNxkBv6a/ycUwL9Elhq0gLNX4lYwlFF3VIdUO7patANhG+YGziZuKL4C7Lb4+eIjq25ZrLRpGru8XET7Bhlg/qSPNneISKe/SswitMo2MY7fKxn7fDR9mHFXSGiUHlRouNNOMnmRHxzAzVfjpphRnI3oMKDZxw+9ISd3qPmu9AXrjkI4HNIObtGLZbPuVbcFzeVYEQ8CyXvooUEMtOUF2QnM3fH9gxXDFyb8Q8LNH6dusUvlaLQ4m9P8t9RhsO23P5io9FwpoD0GqfXT3YYQrq6diGd3fuYoKE2gRL3fZms6Qh86oKyoHg65XVJovG+1rRf6p59e35zOYfVh087dXzMjQVxmNqb2d9tt/OAkhpkDnQl3uc2PxU2rCISqmbrnMUTe0998aC44HJcAZq27fI+F/qwlvlBGEfAbpWenTB8RYoV8Tvo8BppcRJjcO93DHpqqMcKm/MAhl9NtuOnbqXm1QAg2deXC9eMK9nu2iUnPtUhYXT/LU3GQuCPxRXBQYVyIPdQ3QHHc2cq12IrcfottmfJ+eI2puB+rs4rcV7ceH/K76PlCjXPGIIB1Ab55plgU79KEj+hJZom9on1FVN9IUs0RwvBgF/8eSYDIfmYav7TvXTbktY1uqQmAOPZEitIyKBdydPUbkenkjPJqEK2BW1Mh+M0Gt0G6F6bDBnvHRs+vcL83lj5z0w4J6Z5W0ELGus6ecbUbFQwSe6tEgxbgg3+q5mEYEhOrHz1zfxYiC90h351rqaKzRzZNzGUW/P7Izmpy+4UAdOPvQ42H1JtEb/1OHArH48rc+hWj3ZvNDiHr0sd6X69oEQ/J6c6Rx6y3NXhIQmwX3vSpo6OYg5wP+1mYj1OeW0fl2B5WSjy91QCkKbn5pVMUsijh33i1MKkxlZfVDSRbCSLRNkEFkCUU626jTgQeI7A53/Rp8JlzS7WbKEmvC332sZvPUFIL/++Rl6zOoSjutIq5IDKGYqZM91+V25WjVZb6Ll66njEhhjz2deRbAvL5R1O5gkOoSYUe2Lfv4UmjZqbvvUhbLOV/PUI902ScvOaVLACvaL2LLTcxgOW5RNWYmNji4ejBJ42iDk99pD9WKS/MP6zEN1unO3Ma6RgmsuWWOmqaKponZrmd9kJHZpDGuTqYLeVrcDRst6gc5q69IQet49gmpXnEvDOrcWNjqLvx5M2RP0Lj6tmW60GY4D4M8a/X1CM26V6Iv+hoKzmEaNoAZ3A81R4f2aoG2E/yt12NKcklVIvKrTzBa3316P7ta3YQ4gwQLJaVw5S1j8PT1diKMXS4siVhPwWZXbZVQqvrDEL9QNPw4iEpKIHHHXx/V9V2CyucBJOlPYlRGkZwNP2tuPIR80SalqTGJGc0b1RgdMxYTUBtWFhyA8j+lX1dcUYaKPGlRxdcIjr1R2Nsm9JkBm5BplAJ8vfLUGXRhZ64ApY/zFVfNNMDAEuXSrv9SDes7ukFYmjBzrZP72f8G7VCmYA6YT2HxPsO6Es6yfDfs3bRql65bAqZ7R1yH4Srfa48hsVbIQp15hnO0h/T4VnuYSrNyqe2+HV9TXaY+RxJYNjgueIxkcthZcaiQ2+0z1EEFvw+SSXCVQBzuZoLZchEJsq08oDA053bAeUdtJ7NwGRtUOmcmWMyQrs1VPFADkWXxM9dK8aClXRbfZRUJKdbmb2A3GmD4/oj61B/sI4qUD2U+A8rQFnVcGOrpiLH3R41B/MysVBwwY+6WHMyI7yv1tlPuxK0TJig1N2w2cEZYQd9TkiOHKCKXCrCqFjP19s44gdAx0crwoXpASGSMIGYiRhzziXHUI4sMSa5hh81SFnUb3/niaLeVyp0/+EqiFY7xJP7EbATS+A1syZFGcCY1FqlF/+PQ70lyHMAK3dpu5MGij9MigUR2/M3poJvfyk/0Ut3zA9rWaaRcvkQbBKV654JJ0Anz6wMj/JM05nfHwUu/XWKUXolD0OPuXx9AAhr/PriiHWpAuJuI8wPcq0RGm7cpQwuJSamAIXzYu+TikQgS1PN4dKwIkIH61vpQ3hmNzn/0h7kKL/BBbmCEQJI8QXSJwsKKAHR6nqDpDwMmvFbcl2bW/uKhrzNLYpdwq3rtkUrP7R3paXcoaMhpv6H+VHjw8NcHAQ5a/lzRar/0IgsVrFFHRBEiw++kJEfDM/ZwzX7UcZLQFWP8gQS7s5miIeDVA+eZymOxk91r1c0RzACI22nZYIkGbN8EA7G5RDaJ6Uiq1uB2tSrbnIgDR3rLywtIFBWJjraARIzHz9dPklagqJxoYqFPYfdr8QjgyKL2CiUhp27cyWwCZ7TFjMTqVcKVI20uUZr/eOqQkA7thr4KZDUIxRKl8JoJORiqEyIbTfT7i/9ZUxf/mm/13Ifxshgf6sYcywNrhu4Cqx06f+tJ7AifHCL4T87mbXuh7lFktWdYeIH9U+X6TErY8o6UxmKYLCimTY50cHrq7GCXoInqjjGX5fBmMO9Szxv8Lo2T0m9iyfrfpEGJZsr/+XbNM9pVnt+ugEaEGV+tsdlghKvf9FTud+HuomdrzjJh2tZRufs9joc9FMb59dczlmUy6/UXMGaR5RXFCqDf64Av7zVJ6whSs0lb2Gsqbc1Nw51c/4EBSKg+ooX867B/FVxyTLQK5Gr92BLd0tXjQeSSTCEBUvy3rmB72I//MFXsgJ0o1leXvrtDmIQ8048hpzctXTGtrM2DTnUIaBjM7PLgzCy3Chu8WmqevFqsarCMXyLzcFxr+VUY6bYIL+WDRud30XgNYfx+7WF3+ILk4+rlWnsYzWhB5riCWOr2OOzJdMSUX7RDDdeLch5Tlc1RyVNoaefv3xSMV0fpW4wPfqxsD18QYC1hCOW1RKM+qQZjCuFkx5AwsKoQ1nHyQ6wtkdSklE2zg0oEKqNwm+o21V/Jz/gQR838MVA/p6t9PtD7UAn9s17zZ00jG/yxJhrRz1mEoF9k2Mt9fbX0mcFVFKcidmkkraeQvFtkuHI0uKIJWZdQduZ1DKygo7begDV/UNH4Ss9fMHz25AzSi+ExiGR34MVWFmVHsjWfQ+Mbii0cJJRaM+NmpGTFHOFURWS5w/OGiCv6SSoKGLaGVyE7goBoJcWYwuxNBO5xjKclyLuCu1D2PXcCTC6m881cgSYk//6+wga7mZ0FWLZyr26Ml6Gw78p2q9Brd+9WFryHS/AsAOt9hLMGlJAM3QYvrnbX5h5yW7ZFC0VNyOmmrUkVfiW4Rp9hwDZfkugyevoC3C+b6QPU+J/mxh911lzLvxdC9q0bGmq3r8GvOa7I/yMO1vGuCjcMWMT2arlhpo7DKMp+Rriy8hyWjBUZnIU6JjrOVLujkdbFsMEMastSMZP3+PboQvSrbdVTBu16NkoJ/R8ckE8KEc2nyaTM53b23HvdeOrVoehzpRc5LCOFTjZUvJzLRsIYTPQZThjhlaoeqz14rvqCrWv9rzCccVpXK3pHO4FRk0lUJOZJ6gBT0YH/UX1ApoPjkonx1hns3J+2fZxb3R/7XwuAuLTMGlCF+ufm7zwnJ9iT25CIzK4KxnGm6HEdZoTJujsdubGfAa+CKwm/xBoRXY4EkRp3VTGZOXQqoZB+6vscX2YdDI5x6xiZkGmMNXT69o1EKhu9ig8mw78+7cbqg7UnJQnoAYVCDmRe5sO6MdbXPTrKjzrVM1g/lZOkZVfN2n15mINUg5LgBHPfSXUArekjCIvhCz7jrRbghnDq7KIqQ2nD73oyWTmAhsQel1cL1/Tv83ZpXqACoxCpsdKaijhToBG/2sUyJt0mlMmC4wDedmAGPCowVOG1j3FG0qGOs6Jj6xXipFczXc40SCXGZvjb5vUN6I9mY5rV9ZjtgwIkINQVrSIhNWAYDYzmHIz51DEetS4MxXkMF6BLnOMhw3Pcmorl1dk9jufsBNxdX4vV47KtzcxjfvWlmdrnPtEGqJ5eDNpQfWQ/rfdIjI79BnGi3lHVTevqO3l9w9o1JPHMo01OUc/ZklPr7IrFI0WeM6HVwjkZsk85fcxsKxiNbX+wFqhW/SeP6RbQbwgGVPr1ymg6K77vi5og/vQwHOdiymVsmUq8oLRghu+DRB4bX9c18ybtK52BWe4/Dgdtfnsks39DchFAiEglEK89BfnpYrS4BZ5sd8izDqWcnkBpbdgAXiVw3PgsNH5o3t4CPwRZgTDPFe74nLXNLc66Yhna9DWa1DiRx4bNnGT1esCErLsNzjJRSFeXt8rxwiADOQeYRbIixQhiZpTYs6xlwdbCYT7NitBVa+jcQIO5UA/bIiNoGytGKijmxanWNr5z7bj5vvuHvoUOUAMKZUExgnPM44fUsWOo7eMaOCr0+KDuZO3kSr/cs3Rwx+kDDMog7ovOoOepQV3Jht+PrUY9KyT9N/UPI0XWt2GUU+UqurdZrR2VpJDyKtDNuWYFN4r4MeOyhUrnsLVGi7Lsr9JjyJbsUmXoFVVMY8h+GgrRdysRBw5M5jsCjgfMTaSoNwEzBMeuCu2z004csdZ+Y3W8gLjiTWS7iiOxRY1Bvk/eOFPtoPXLXP5odlnT70JBoWha1O14Fp4/OQjPm3AARrKKf1KL2YapFkNkN8dEPqT9k0dK1efM7QyuCyWbxDiZSHnM2rwSo8pQgNiC9G+Nq4CJWcTDyC+NlONTzfYdP3yPZo/YVAH27eWOevTkUPvgsvYH3fPwj6nBC/3Qj6pvSHG7vrVZEkLuHq8ZzrQGjHukOXd+Z/8oOtWeE6urlGNO38QFMR9skfSag9J+PfoY8cMfpBPh/xtzATzk6sKtauR7Yg+6F192morCI/h6phP0m2pp0IbJ6Bd01wcvZVdK4MddKQom7tq+pGUF4vRjlOewkZ2ZXbTVyXJoCEbkdEDlCg1Txzji6Bruw2hvxTF2dgWobTQpONDXT8asPa6E9KB2KFdqtrVPpaa/NPb2+FgXseefO7hlK9Qq9I3a7v77L0/r+5arxVNMvMXYQghDh1oAw114Wl1bm2h203f6KxV/g+kJgawP3qLyFqLxoJ55a8ohxx3ipRYCv1tZZwhyRawd4vrDolrcLeZVZVHfbz+O6h14G23nVP53V3eK4goIFDcPdZrew9tpybJvx10O4xDwufVJx63sNpHk4brPdqcSCOMBDM8SL/eoD8qGiswQp4DnCczP/c7mpbsWRQtj9V0o0zXO9BgTotQtXYE8pthhYKPlom5gVo9GeIYq6BnSoFnCvLtsf+pdYAcqpGH2AjDE1q4C90oWoaI5usSXcOhZzsymhcZWekwI80D4NKNCs25cXsEjRoiXzjjvyHiZRjEtlAB/GoSwbYkmMTqJfWaZDiohfwMF/tu667bCkEpQEW0wToVqzn4u7Wd1Rw5YDgTzQqQM01+hvBPBqlQWxRr+T4xgc/quVCFscIre4A+OfaPgFGglqE+pGTQ1PWSjz71l5UnkYgmNjzSfVu+qTWZOU5nteZgQ+UPt+SMBgd6zXCswMRByCE8/lcFfBomGjJd28Ks438kSLUeGsmOsBjW4t0DHG8+FtgvQEzBvNg3C4UptsuZKoyXrmYdMKuq4D0yLhWvxGBYgc5whDuGfhQuerdB6JE4uEKT8NROieRBmoAUiaDX4/VSfpuN3eBnG1lK4P7XbCtjR3YX6NCN5PxMv6SPE5xKkKJZ2dBktzsUwDp4kdjSFDvsoKp/r8xwBFrRU2irBK9grNwD1PisU3+1vDTJMUo2j2O5xs9p1pQCJQM/IRzH3m+Oij6Wxd0S89Wpaao4D0/hrPV41yJnEWs/5AgccP9vnkjDVWujPx5ng41o70IVlrJeQs/m2RfckC3pE+cSc1MEENw6FY3P1e0veE86QyWCzGtEDqH4Pgfr4v6VEiHBvqmzZLh3L5NMVvlnA9E+X3VU2UqC5aLik7NHCt+knU96Yq1QYPE6lPVMibz2QVD7hiC2v3Zwq/8McxeH+VmvUeQUP79fOId3VV55F9BoNa84zoMvNgqZUfaejVi1+v1kuZw/2pOAYRETZ9T5/br2vlPR2N7cyxb1OxsfT2wr9RUOnuxtNEr595h25JlUlW4OOjR2cnn0TSKMfwUfRtSg1C7ajGfQdUm3XWjEiSSc6bpeWlhQrsI36EMyuLHZB0kaD6Nl807QR9gElybLFdslAoYwsYESmCh2/iZ/CKHdDFxjxQiuIlug7t097vsFrLYMS/9UzV1pJyGqTB0lO87Nx8F3C9KsEGxAioTVvNT7Vgt7NY6AjcYcz/xPauzCT3tk0HJ8T0IRGu1ojH4UbS4eat4h/x4ravR2/WPOdnyUMUdMmrwnLky3P/QzZvNLCZmnPkWVPtj/aRZlLXcWhkw/8svMal8jqT+frUwrhqBSmOUpvlj19lySZ7UVlvmcJeJDHT49+aH6StF+3c9EBULst3vO3lUxT/l95JhGflOkebZt4bvstkMA5fzDSLCb5sh4nYo2V7gIRfyJkI1+Pmfit8FOaRdq1NOZbMbd2500HpShIIw1T0WS5mUfXX/R+ta7jr2TE/tEjNcECdyVFZLboEOOfTRSakidQW243/RLXVZx+FwkuEehZHtjHZYWFbSrn+xPvnqGXFP9Ol7S7CPP4TEHj2OjboWpAV3n+hgRWaBZdFuaE5f+I19A2vEYJrvskIWyGNH1r3oD04JmwZ74sNOHGsB8MP1Zx892IpImA9YX2kb80+HUnRfTvLSA9rR0yNBsbUXpQ/GLeyLWWvqyrEd5x37tmcMUFek7AB56ZkTxqUHh5b1wDOMWE+9gGhszPwCJT55Njffv+4bUxOWX18DLSVP8ZaX10vyJ5pbpESdn0lGk1p4tkRjTUI6Ik2p0G5iR7iY9TmoA/ElssalYdW80+q92WbfhQ2JA1rRxkL9NPqsqvbHFmg5DYlAYmBlTwtFRWZUCLy+wirqm8R+lqPR2GvczecFL6igtk0vTyUfwMExgGyY2uegugyldqVWvoauCnGwUbz+4Mo0NJjJYmKzsgh9/5Ea41IXhwE8Tn8iSMzMg67xyTlSF1VyjgEKsS7hLWC1FLIkbTuuoc5EECAvVoGxlu9Ux6jZ8jtby+QkkkmASsJmQCzkqc5EfwgsPL5lpWL5g1TP5CaaPM2hJVX8PI/2KfB3oeNl/0K+dRVBcXvZydhaNClI1tqOgjpvHEXlrdub3J6Fa/1whAEmzcxZLHD4F8bec9swo3+mcbuMtcmXS2R7Mh4q+U8fhHxGGSnJRxTAc1X5KdDr4MxZTqD8cAOC2tVLgycMAhnphk8mckWDFjXcD87YnAzyH1ynS2yoLZqG802MljMGvxULpJstChiqCpwcanZuwCdVtnsTOMxMwbTQsQMgLY8iSTYlGhm9FQMIsSFMbRW1Gsk3gJ7FMnr2yfIzdepmpjZ1AoQkMoFgYZH71nkxcW5S7rkHMb9Xd2lJmuQhO56lBgfWqwn4hGcKHml/gzvfDCyu4Ok/rFYU1uk4e0zYDVp0Rl94feFtluC3kUKWMYzV+qdPFqxXcL13t29FeZobDw7pQ71hTwLEjfgkI84f+MG1IlchEGZgttCSqmWk0yrkDYiFq1u4WABpd47n4LV5FfpY/xkUF7FUXHDQElp+voKJ/T12RIzxfLicV83FzhlXa9vApC3UgOo/8bX+hvkabFNILPRTjC4saiO796nCeOFeFqmmQZm15ASQYqjfqAP2NftnCb2yMCWR7ZAGr/Mq8a3W+1IipPRNskLwu/1aQTEySQ8RNyTbPS9nfjbfX7R7p4CwEYyJUB5fxOgjhUoJV/w6bl9/tJigGfpLAuBac2MzXpcLdcWpF/mWsdLu5PoGrYzCFC6JVBYV/YMcxBVhyQh0sd+jDg85h5iIsXjDM8T6iQuQtSYGxT4MivRHb+ZuK8ipMa+ecjgHEUZA1FJcPXAOU5wZoZ3yPwQm/n2bYH+4DMceJO4c87wU1PNZC24VDfyQYN28S5iS8zmXnCJSoJKkmB6icI+rSv2SnuJImVq1+jNoFdK5UkPVI6w1hLSHUMUc7jzC+J1zlNSDNHc+/+OejnO0gkUQvIAlcl+SjKOXfPm0ctI9KEQgmGjAHPRPjR8SWzv4c69nLsOfM9T588YaDCSQlnCC34NDae12+NUk3XYEwcT8cmfA67Ae+SfWaoBOYNGnZ2J7TqqPi95S21961K3KbmgXJt2syCBtqfTNGRaz4NqqJ5Nuzcvmi9OKQGcK3ajGkI5tlzXTZJ2p1Ce0oTixVyBbavlqZxQkH8lVuDNS4a5/zIFcOIWTM9GElweFl+s/HrYdH9kMdnN2TEtVoERxC4BV9wpRk29/+41WFVcdNehImKv8mG1j8f/jIgQAoXWNwhOLGJNHWARGtCF5UsXIY0RqCJpWqyu8DOHlArgtCSwdswyqn8UgJa0hf5npsa4rcqwVM0YLR6h+jRiCKI5Ls/phkY/1PxaFStSg90GsqyRLKVNueevSz6UvAEvIzvs3IWD+x+FROT6omLEglRVzJYCiH79ilWcdiGDUSP4EJxmnWWGs2Dhoevo/kopySnuJ3BDS9XAtFozxbBbIzDFUS2b9PJJ5Xemiyu5oujIwbd35ih8X5A+0/s0wDQ9gBBG5ihry4FGtLtLiQ+VjYg6ZD/Jxu8+6/Y74NC7+RVQNB3+4ELpjZtAz9h2PB0GwICYh/JHm6/S2hxx6kP5Fy9zcBCowp2YbOpFzxQl1G/61acRvn4Lac+7qMxvwKUlBvzlE4Iv9sdkozEfSgIDBAR+IsL9vKHgx/SbGSRKVy90jxKlxFQIKzu+FCZDd2zzJBegKFf0uljpKZ9L/5nKexfNPvt64LRxPSxLbhtdGEdw0iffj4H11mDH8GcDhs571Y9sbS2W2c5MRa8I0daDKVqjQ0NtQP76NTEV0amST0fXd7fRgeBgRm5Rffs00CZIWCFVwWWx2R7XI0ueB16ASZkuQxJPI4uBlbMbAYEP8kCgvBCRqjWRb1Iut6652rK/wRQ7PzS8z2+pr8GN4YpJ3DzdQz2hxraUyjOeW4GgrSxM0vfKPTiXVuhkIRvusr6qUad8l2wsgeT+dhQ23zXlXKJMS3czI3OofFNgtRx0K4bnHeSXXF4TJ/OTSMi478HlOjbV6fGqSZLNNK0PTJtB7PKiHmQ8cEMbAqYqHGo26wTXxxxpXCiWHit8QScx43W52ZZRfLXqCaW8/HJNqFA5A22hgegQqw/Try+8WStarvrP9zmlwjr3bP5n0/coYMz9NEyk15fjUVa2bVZPXWk9Qp8G/s1XDcPcgpn7jxqFSAgfjUDr4/aqoWdSSVIxpI6bDGaG2dU4dYBI2rpGo50wNCZMVtfn8VxIn1iA5JWDokTAVnn/Sq17T043Su32Ufe4EtCnyibyZOX+Dhjbu+k+fU3rlAOFOnfZ4PFkbZR5R+D4agC9OXAtsoMUapfpq4BO9lbe40QLoeRmzrTTE8XC2+SCJBqluFJOSnjW5ntayD7KbZRZFpVn6A6A0oXs+jiQ/onNxwIBSdxq7IPWCK6tYrdPZ7jaNSyut4ttUGsU13voTQ7oi4HR+dbb5RQbfEFLXW30om1qecxrln4r+ICdPK3rCLPdivx5yGYR42iKLyRWDcqGAksMJYvv4jVd0MQDpE5aVn4O+Z/BE1XSrckSx5mPA1IIH8ygwhD12gy66NNN2rZkOcp9a7k/CZ2P3m0hWfdSs2qckPoIUcQ747mpfd/ljnzSQnjX+kH8p5EprQphmqnjDCdqVHD1OKg9bszoHU+fezl7gHvQrLG0NM/dDeRqo/fW4W3hYNcvdmbqjWAaS7mKQTHdQxW3tR3Osy63p8h5WHxDg7G0CZYQQR/kQ1otht87t5mniBS/4Btd13tfS7Vas2WK2CMG9dHpaxYTeF0ZQvMSj4igSEv5qs0N9oiMN3qQK89IC2+AcxGVrZ3jblBT+4qDcJ2OECkIWlTNTiQHum6R8bpll9qrva54Zjy2Xgh3l/+DkNbKAzx/RQQ+uHVQdV1Db8/ZI4DUMV2LN5CRfIDgqwJdYdwvP8bqknKkLe9ySezxdUR1V40dtpG4w3rjeUBr9Cz/aPVqo19JFA1t6Gb4WOEmlnM3fr92QSFO89Xq0b4A48bU8MxoGxbfXjgODgPzw3IvBuGD5IGPXYt1y5JB7jkzNPZyZTFUTORUy5q2AVKnZMyZ7J7kUzpboobsgFoE7qE8kP0u6nQVBMny8bcEMU3oEWkQ0IcsLIY8LCpM7VCOf0x5o3xvAcVd4VH6iCSyKGFypY6fECHOVbSOqKrOHoQm3lSXd8m3btaqMoFoaiYT8uWUjPQH/ciU7YoB4u9B9ib9iH1lusjR14UTXRmPcuXo8SzrC5Ngv/udBT38Vn1EBRV8x3r+eAZiYJNS7l5zldNtILx1vdeQ+pmrP8LxIverCrctFNA7EE3+WzLkYX024FpFIA4QmmySg5QVr4pSgqAoxVckScP1GV2WHnUT8j1qPsosoGyS54X3gmWFb+P8TQ0KB+5Clyv/PvG14f/VEQ7XFScOXmJr90wtoQVAr/JdtLOuN5rAP88B51ea2zy6WTE0AQ5cbYoKpu4wGHJseaNCyBZyo/IrnvDzcaR3fvLf80ElxqdkdhoJINY4jFcOFjADgLKjczu1MTSDE/HoZTuRx0G0kdZQQbc3fGjv9P9MqXVnR0FKOOzrT/0Kv/KSPojIeznO07nZ4gccEypwUQmwj/HZ4i/q6DW40fdkPGa+Vz87/YEQ2QgvjNCplSYnvsygiFpTiiNFkdvrEQ5DTY2iCOkMO3IXh9O0iS+BlIozeR0flo1uxmrgG3JPv7YK+KmAp+MIyrCcXssfo1Mx7G7VKjG/2LjtRi2KDOfhIrXqwP8c+eN8RwHrUW2tLySyxFX6ndOXm6wKSHxBmk6g7T6osB0rB9ob+cqUiLC1ZDQtobM3HCea80jUeQMgeV0OKxBdF1Hg/wpNoB+5lHNeb2XWTj6jCrC+opO5ycH8kT1zfYX2c6RY9MXVMHFk+mybsXLICxWzcNJWMVFgAIT/r1lczqRhn2KZBpC9qyxwdsGr88G/7LTYLuC5F2qPthmYJs3gRNCGyPDIfcPSMT4VnTvZncJRAZcs3Uj4IpsFD9s8cTTeTaml9gAyeNYpFzYmx4sHAMKMAZ1UAimFRx493S2Sy4EQ3MSYyLuR7Lov0oCkaLe/3sCvjZk6nG/fdxrFUUZFhFyK12J43zVjVUi5U/4NjcPXmEaIjoPXSXLOBbVFbFCr0J+TBezB3slJK7jBCoc47HmJdNGXUQN8Bx0uneMjGr4XJOSX3b+9wkQzAiFdnE2PROsdrJd+JhNIbho3VRez57u0w0feDFp3HLMkXYP+YZHPiQO2thVVvxjOP3mHpc/kXR6mYAjrupxBWTqQDFaHtjS0QuuSkWLdA57twqBg+QtdbZo+AROa96qFxeUGNzkiPO0XWF0+YeB2+SYEW0KNyNEuOQpr30FKF/rj9ArCOIp7boJwZj3VktIJpZjf3Puec2mCZdeN+2yauFx4XoG8i9y76BC1kK8kfLwuF8cNMW2TncyGL2uEdKErl6FESlLmfEnn/8gd5gEfq7b3j2uy/U8HuDZzCMErB2d92SB4HiY1po1YzHWxucVTZ1HxTUBluwWDMSnUH64LoVPH1rNF5qmTUcpEjPcrceDatHMqXHZfUWVO7u7mwCS8OSWI7WZe1ZL4j/y9M4ds2SnBK4UfonO5Fkc7B0MGNBIupyDXe5owgw7Ra1cvMjqdgCfR26ZtRF8oQBhgacYWHuGK9ZGbSrzRfdK3cXMjhYatzxODrggMGgzndGPCDpzlaFuKfdELddXvLu3iyeTcDhUyrS+Ft8yuA7ZLTO451wAXs1a2+fKxvXhC1NPNXh4Csiq6HalibP2aE0dJUddKl/4QUSR88AjGhkcM6ahW0O+1giTgsXw/eWMZ0rOOWrd02tb6raopqA+vyoSdV3SUKrdm8zIVuwv6qV1SS+qAyqNeKALoSbt9gVDFmv0kA8K8/g9I/sxYOQDRF1vHZNajqrOfM3Uu+TorJ8rcGpYIv8aDKb80PHz/Nl9IUKmEVAsCj4kdGM752DgbbJC1q3hR8ttrotIMkdAT4whvszxmLWZjEvFqgUHVMrmZtBR1LxNKD9DeGT6rECOcuVCzjs7rJz7Hu5CVRxSSDJuvpXf9xRPkUDO3MJoa+bsnAY1hJAQxkee+HxlfPfjsLEi7FtIeplf+twg5TiythT0GNNu6mVY3tzj03ZwaBW2tyUWNvsf1BBMkrfAXe1FUjyO0uGnI5Q4hSDk3cfZG7xMC3MOykALYB1rCT3cFT9cll472O/K9YHggF8GErN2sP2XbMfJdY/TkBjQIUJqp7bNIlPMsLfCTQfeOdSEjEbbgExCCYX+1zcElkviMlvM3B55W0aPo9mEDMgehKQb2ACCpPkmChV5q534Mk43NVNxf3V+LeCPUeyP6LkFV7Japzsh4pmv9Y43iOd1JKc++38Su51n9cuZP0OjuHnAPRm3yfQMPXxaVOrqHiQzKbSOq9CITa6SlAo7GXz65Z9sbPadZU1sOBl5FvXLSzoW+jBCJLR2l7l6xhQAHcJ7sxAuRsFFVMKFALUJg0opu8auo82Tsl/fntTeH2ClNVk6zU+3MmYJ8fYhT/p/c8lFApcROIN/3FrEq9RPju4yc5BJQhmGHiS6UxtF5fYNrQcwVwNS8bFlP1e7mm4L+b5Ds1UaaqTg/DEaOy7EyzP5OjjdWvj/JdfvQSGwNiXi/ipAB6XiBpVXdL8E0gqkS+GzBWYbKspVpV5c4D6Wb+aW4PNAB5slsDvUC69b5XNz2p8LOXtnUuAWJnBK35oaIUy74VzsyQIpEX9TaopoLUqB7n+wVu2lWF5g/dSjEO/HQfqa7/Ldl2nve/qZehc7Qs2DWpHZ1wf8+Q72FCitxbRhWUbwtnRplQTYLwNSBap+Jcr1ELXd7YPIQbz1QpOqNVoe28aQopz6ph6ocUFq4wD+YPvBRTXmVOUx229Ykx6rfromSlTg7uMepyYtWoR9GCxzAEZlA2VAoTAHXD1TKDFp2ztK35q6IMtNr0NqOP/AlGpsmhFdHRAEyKZAYZhXkyADvkMneYVWJZazlCOzpM1ffrw4OrChMgdt5rfLfJag++Mbjtp624JetsLzTj4gp1OkWMgkBPdZFuWRyRpA4UzC5Y50U7zfRrUEmWgY/WuRLKDYzYwIflMST3o1iPVr8LvISzKrm4yTexFyjkayF7MUn/Re8zeW7V6WrmStU/8sJk8v8RVBqj07r7VGS87WVdGMbCsMIzGlJYjmikJF4bN9Q3Lr37fmGAd9o6rcPJA71vpPFNPQtXslC9RKWyA83ZwtmCmrIvSBTZkialG43dDEWK/+EQ5EgbvvPvks+zcg2utFoCY115D5+x7nw/ci7NbDu4aflyM2Pj3Tb5dTA+hkXNw71dP6mkwBsznU8garCXRjgraal/4pBYgJ6JFWN8afvGcPdGSGOJCAEGVhrfRl01fRwGmXRUNPcYrI8YetvHK+OWqngEbhucTOFnjuVVnQWvF5Hy2RkQcqbsyNg2dezY0bAEK7WQysbGF3kvnaQ+thNcgso3PB+W0T9JFwaI19xbvW3tCFCO3iC9imzMxZWSrHxP1SM/+CL3t1c+VhaeZ9df3HIdBnZgFDQPfdp3m0Qjp6MkCG9Cxw7xfm/kZz9LyK3OzBiquHw93ddqC3D5tMxi3rw/q0UdE0YdW0yNngrQS7yZWNQ/NVbGWtSVIoV2L32CoFbZkQoxvK0GGYEsDt07l9pxmw66cJ6TTeWQbAD4phB8whQSsxM3iGQ5pPPlp9x6XFmma9sDQxKUMcB00P8dP7r0HrsHeczLVR/pYjp/wqcsA7MPUPLWvCRhJ7p9zg7Ku5///sO/hJ/aEzoJLdCSQzGR4q8JyR38Kad65P9A/Kr5llvW354xz9ibGcBVK9ekjwAme2nWOhngXFX2t7ctWRZbeUHjy1ENpbUWm23oryeOhhqSLeaQQXcUeEKsK2AZqCzE+r0JMxDrHueWkjISt2/y3vG1koZAiTHZjclO8nDpfBmEyq0Gx9fzYw9YEd2/e6TP/7HdFZvAcobTRYZ6kBEoTA3Y8oCO9KMOODga3hDG5tTxeMAhxbfmDL9P1YlgwOF1P2dmWod7UO5ru3yTuVOuVh8sJhOYGUCKmdoXgMIgA0oIDvfT5oQuOQO7U6vG6uOHa++QtPGvoCAlO/KbqslmpyxCmAYIJqskD4vaK9Ld7MurJhaswJipmsPXCQTlfu9NEA+HLxv7TiJ5N9JeNluztKbRnbLE5DfMLo/KWlV8tlZp/A8Fur6R5TqWv1Nt5ScC+/ldc3hptiSy8o2vgX1ugCSaU83co0SLiz9MgozeXhfM8mKeUIH274AzAW3bz0h+luR50EhGsQc8p7Xd6FQaCs90iAheSMeYZHFXZiDAoxhUmR3zCLFO0hq0vlb7D3vu0blr8AN0qcBV8slk3A+t6mos3MD9DN1teWYSWSaZeCavPuI4xSGaWxAKWb2iNrhcP983CjQWlQgYpgAwVk2k3AlOyutV6OggL69vSpAUaOMGstEXHZ63cPhuR8oVcbJ+2orTFPNFU5fS04LeZO9c+LF/8qKOnK7VWss7s9alX7FTUDA5/Y9+ThrdbM26VOwduUXwni0TlDoqEHX8sXqPGn5whXv+unNnyjGxHR8ouiKGBkcM3esl+TTwmarc0XZ1UB5F8C5YxP4w8Vdo9lD5SdUA7d8M+gIi4LWxC0Vlbmlu5H1tFpRAl4euUHArCx5MBFbl1UxVmEGy6gE40A2ccyYmjLh9MJ4w/QQ89BxicTh0rZEfklM2mJTplLa7qg6hcW3EsttUBkfofnmokh3M9BS7Jmg7CpIDAwwIsVU+IGOWt7KoTLKTDIP1ORFpM0UIz+TWxmkxf0yszCzjp7jwZ8sLBxnsu5xhMdyN+7rfDCNvHpy29g6mH7f4hkYG8dhr1eTVlg6UKdH+38ODOEFo+t3lQ8JGBpuCWxQe7ISzYsUjjKOIXpXZeJCCgzflpCm1MLKmqLTIxXxe0bICtVlQ3P7Ix+BmbCsr4IRnn6dKVarxBHPqxY4o7/btAGIziSKwCU3YubKfE3ZFsHgtNq5kYkUC082/36OZmAxANFRmWdnT1JEcizAqk2zM6AkaprFV6mapoww+UIOHor5ntx2Ymb1Q1mTPBCjk7sZE9H4iaR6l1adr8qcEMF5cfhwjSAHe3z5yCgLPsAyFIMNnnR+fafPvQC6g8qRhQ4Pvh28jaZuEtaXXPcXntPLRctN4g3MRN2qfNVw77aankoapigRD6s2EOyDM/c1QjakCwkk+UnGGdj4t/9QW2tx5XMa9uwS9Cud8uMGBDliu5s1lcktGrsEBiqvC4tP1VHdBO15nymgZg63b6NGG+pB2AozDs4ytuBuvOgdOFj9ZLR5o1NFeiYoJhiqJscNpTGnB4zF33EJ5/Xt1pzGg4hSBiB2QlK9IqDBqW9LzM6aB93t1WqjqEByPx3HRWcjdDcMykTY9/p5ctSoXJXVhkcaiHus4GJqPoAH6Jw8I9yevZ5kZT0zENK4wVEHNoo+/5LuhNkkQcx/89n1Oh4imKiU9ZUrTFd3+I4VjPQPyD78KFxUHKa4fV2ZJfntUGo69Liqrg+fluJQ60YreDuBtf3GHo7urTGeFcNQ7LdZXhkt3xWX/svlIj1K2EVsBJ1reqMXaZpJ/jONmGpi8tv00ETc3U+O2RKus/he8RsPT76zfX8xLHx5k8IloztQ9r2qXahuhHnyp+Dwq+nXskHPloLsA2ciTM8TiaXehQEElNWUqcDav+pJjwXaq4B8lCAUr23d3v7qcXLfUiXCLXt3aIRVAaWPc1W/+1EMsxi1WRLd9EFooByhCGlu3mehrv/3Y0OAvd78w49UTgxo6Q61SeJzjTzvUuRAv7D/wWECNP678nT5pwWFtHVsPCwEZk1ey3+3mL3+94SIpacRsXo87Z2/fYx+iisx76Lu46eMrEcKbBJN2Yn8qwmd4bfRLZNXTJZKDQAtz5RzOaQQqE66MWRREHwPlWUxl4OCZHTCPg26znSeazFvOKr4Gb47+IVmF36RPLIXrwuybwYxryZGTe6fN1Xa6GI7hFNCjbqZnBnaDweVjYgOiIBdSmGf0bloTH8uMRacKdX0WKPtfTRv1djT6Jdm5w8UosDxSE80HxrWbHBGZ8PP++T0dkQMBInhk4ch9Dh1esGdpL011n7axoHUGFoXcXqVTpqFfm+vufyj3AnLNX55yNRtvM7rI814yeNMN+z3xRYczmvAVexYcH8THtQ99kN1t4OHp0xJyQ5TnN5RBf9lWtoE8L3sLuOS/g15qROejiChQKZ0HkfPSGmRx86qpP4R/2rYMcEjSnxDh1mOwqZMOAoB71l+3CCmugRlALsK28CJrNgTNunMYFW57PKuijLfRAV4HZ4LnSd+fuv9Lnush3LUwG2Ioet1INaax+h/w6VVmXG0ezWqrs0mQZCakHfsYxfesX9i3Zhjn0mKvN2gFadPCdmvVS8leES5IOT2IFwHTklcqS01pln6c2jV0xLzrdu06s8VktnWLZnGknj44Ly4frtuCYiFztaZI5j2wt2K3BAQEAdTnVwU6oFqb8PUgXPoyQwPUcktZ22nnBF0E0BgAxr00wRp4imVaJBigyjzUIUuOsIcRUntcjvVZx7A3xqpgjeg0acXFFhXCIYh97dXHbl2ptSvHaV6+FWvo236Huaz1Jje5ZADGNRGjrtWb5KafUbEokJokLbZSz5l+xkwXB4dVNNQTCquoLFyCqr5S35Dq3fNO4W95vvykOJkRJ7RGrCrdsaOJ3qgwsDvsKQm9Gkyl/52FMOY1+wO2iyPdjOFgDTgKOi+1LBcb5z5uoMAlXa0ftes7lrTJ+mfuI8wAWWlPqpHwolbv/s1hv6MK0DiqRDDYaUllmkE9HQ4dk29bwwhiV+4CQp8rqsFGlR87PLDD+NC9pCDz7RZYsBiooWMuFZijtM95JZe/GrNcqBQ+J1351DRRVHZaRPQMb4odQW1sYG79Q/UcSheEPCZRSPlbtFalY11BYjCByHIe1wKDRvQEa2HocKbGMCgkXjM24cyJNZ9p0+Qo9mtrecw9K8LoPTxSGJGruPHgmVoB9kMxHsJ9DRfvDoIPcXmlzbCxguVU9gyimhiJSR7/hRv7ZPj+mJRe59+0FNXywbpfLBJSRzsUtmZRfHO1jStiec9F6ytQyhsxMdUBQhUeu7GKiYkCmmr9NB2IXThZm6q+7+Ha9w7rBwKGt2RPHXMSJB4o1huNDwVIrRWMcrYWxgzRSbnxsDJzsjrEilDZepoAZPMq1LihqK47XyqzJg8PIbER4MgYiBna5rCBgLXyJ7yX3e1a7s3YEnm1Cmz2Y9fUmZs1V+H2IRTfu7KJENMgqlK0WwxTqmH30LgL9ykPoOB5+GGCqCokxkBeUDPB+WTAa+c8vCc6PJIc18vOqcYOnFQogv8BLMpT9yMjMtXDRaR4wh0MCubmK38vdDndBWD2N51FuYO1C513JNXldPrOxoMgo1AdzmTifrpHaF8nG6TNtKOfXblBcoTfe9wkq1edyQ2sRZ4QZVOxzeReFizuJAg5+y7IkvVoq2he7j3IpUKXKYH/tNpOlSUz9SjX5bt3I64VeI6u6P7vSpgFJmhFTewjJtU2v+Qw56Vgdrn9Uu2Rvzs1okUr0mZj9XCrcAXkTt9bCXw5oQimpaqMR53fQhml4uqpfSbo9MaGUbDc2qsuTVEu22QFFVY/UEp8nRDU0ru3HSudzcvch1jt7t7g8Y1mzzjJKH+n7ZrHwmJ4Ao/tP30tsQI54b3Qo+9w3MXH+QdjlhlBIol1gQ2yenfByQpPt/dYD49J1UhHpkxGmKZPUV7INhEV5+3+spRsHXFynfu276Z6r6M5P3boaqhLHxfZJVy2hPYENVsjrX85u6gcyt+1t0YSg9jRKSaJDtHSmMVD8gUd5UkUZTOXsZqPPKHn6d8ngb3FIFBWaLMiBUoVLXg4DEoq3Egt8Roh89ThDJM2FhkIA70SjrbWaQg4bGnjzKYYwNueMsC8D6gVyvG8HzAYyq9Lj93AaJRAtUOge96BvjjocMx9sQuiDq2rOyD9zwqi7qoBgmHEF3PcC4vwNOGEEllw12R+O8c06BHPgcKq2rGrx14B5B8IPYTA6Y5kPMWA8W1HMjQgcy6D0aP4lmH/+reDgzSv3dMOXHD6O0mW7D7l34ANI5WY7iQrNi+nh9KcS8i1LD6JURjDjy+kuARvMMxDU4vE08jO2WbG/+zWxrU/rlFkVy//yWyYMYZWSbTSaVRB0zP2MTeaey0ng34PoVqX3OU0H3A5mEpE9S1ft6F5VraJQqbhrWkLUkt12XX9A3S0fBOBn9lcZVSjnUOCWJZ0EsCKbdf8aC3vmwXJvHM6HHJNRF7YzrWScPRzBaVLOZ516Zb5ryqkkSqKgwgW4mwcCzvlAER3Nt/m6WT1CDeGUaTbQ5on/7BKq/Ct5NzQ64pX1toNo7rmLfuSXZQQIrkXmYPoUvOR/TOuhTg94xT+41bloAHndecLHVaFfj0VDvdIPdGK651+GC8lNyVYfZ5wViyvuqICGTb5clhp86UfxiSkxKBtCCawb8bVaddtgBEHWr+Ds31FYInt0vPYyM2nTi20W8Qxnk+bnl9YRegvTqZUAI+cFW/QQxpVylILaDqwvfQRVao10VKAoNQm3ymUj/cbOEZo/azW69HUoT9ia/YjV+1da9Lx/iFMXY9FxKnMbGUO7rnh7NQknGuoyVPnYr0dJ+PBOqSernTkykvdxbzpj06E7OlaRQ72+JvkKBIsKz2JmKiL0gBhl5ypQo3ukMB9ImqElq8cY5EfAOVACGW72BT8bGgd4DaT98EG3JhIQXuH+O3rzWWB3EJ/D0zYXWA+/1ZszqRVDEyCw5G9dPK9qVUKLh6zcQYgFq71zi0wQtpvtgP46wzX8xjgDrdvCgpHbgtbllitaYgOM5sxsGcznENYKKOwQ28S0vZeJX4vuHxb8Yg3xqAIdux6/65bK3a9aiI/Cfl/LJ9U03ltFy52Bc1OCWVLcMDh3+Rpa7nikhEEMeJQipLkSl7p5CA47Nz8/BXXuCJCqS9sjs1sTzR3tjMhre8gkcj0jH4bpFW+BG3yhf31pGgeCxiyru038BCy2at3UM3VQN5kffBFeRc3cS2FM/3bsasuFZqPMCRaWZvsWEkmiHw1b/0G64NMdBZWMhEkTvh8aCAvlkGnLUgHkoQ03tKLfLLDFD+fgZzObsiE4rO3cLA9G/Zp9kSQaT0FbUe85HmOo5ksuqZWdJ3VyCsNas9OiSAbc4sCVbdoAq7CcUWLM76acNDP/Mo8K55Y0b5sTJoUih5Eh/wxzC5/646FmVyRVFycXZDIpO0Hg7f4LVI9Is7OukH4UCDWghoGiIppGVOonrQTbLyq5h1MUnEKWA1md2ORKWSGxs/+kyDQL3zhBLko3TZcXPfCVRKj8ppSDe7fDZgETbxHkJbb9h/6Pgonxbz3bKUfjJJveckQaeSF8fpj29qOZ+hdHFiGd3ONRyOULsxudJuiE9N5Eix5Ghx5yh6gwIeMOTVSnkzSp9aer9wJGajeUfRiBvFvKLjrPvxrS79M+G6c0Xi3uFqEW2pvjSzRhQp65xOCcXhO9TDHt/MR/7xG6lUdbm1+jRZYDvslAaxgODEe0Tul4WB445ZSxtL59A7SYuZpkjRitauvm/mrrK9y7V1U4hgW5RiDDPqV8jbeskRjKmWc60rMqn3PP/lOih6JiSczQ6Ipfqorj2sTTbcqCgG4s/MJz1zHUvE49PIdWzCYps/J46Sz4p4uW9qrXhodrKJFZkSq+KzW/l11/SNLQmMWbYJahBQgtEmN8w1kKjDvU7kX9YVGnNTJy7v9BhjliR4i1W0gBJjmeY9b9PZ0Efw9Ksgi09ympAeGYa09RntBWqbCESA/VKmmRIPqPEjcJZ1i0RpD6rtN5zadcMFvRbClqKmJKXHNDmoDWJLCAZiBVaQE3WbW5Io39wJJeG0J973cOhPKMzfYh+0YsROAOhO/2+nOOIuSs+3uOf2PwB72nX3+UIKj8Z8OSHn8illwYMnuUPoH1aeOqrSAW7zUOw6zqZjRa4urPewyI3lkcz9K3kmD++CSjDymjPAJhUlvqTvqCr62MBUJmteXRcVQ+cJ6GxCYQkaI/gJwdNsySx18ijN/RIdVtlTwyJ1i+uum/XZJokKOi1S/dd7hnmCLm0bcpbiscrHi6jAEC2r6U/rYvv/qHIK7PcOgrOPisuJihdVkfTvm1AUuEQvTwLSUkjjX4fGQBW4wjJ12jgM3ncLPAysdrvP3RC6RPz4bQ+gTt+ZMX8lvR8wOD6SGwfPgwB7jVE6S+saLxOiuKqqRuzFszLcX7w+xFWbZQYDQLXKNQMCJ3+5QOZw9GYLIbHMBJbLi11MUrZbiAwRdlaO8EM+yFAh82VyYkQ+rlncJlQs6r/C3YOYCdq6v+kc3t3cZ15nxAw40/634no8goULr9rWG/5b6jhN3soS34b4bCPZo78KWms7Y0u5H8/vWWmH9IkMw/TyVJmAf7287U2OBIO82W6VpC9wPVm1S2wwXUlwB2yua8SzDtbFltlQraiJdi8/KaeItqO7wnMbusMbI9IOi931VU3t0XCEfO5zLf99/fVHnKDEQ8KFNPK6ZHYL5H8GylSWw272R+D3Voh44XUo3A5E85+p9UGPt34NCbSfSagL3YXez5Fs+fHOafvhlaiCqfrArJdPPn23CCXI7vBKhdq94AEwme4alQz7/T5UgG+fKqLGef6cR2zBg2ujvXAVeWdCAkQPVsMCbyPkt2hXiFYDkc2Lurvm/tlJjIhUIb5Yx/HXo6VIUL8n0cTu0Tu3FCrGPnsq9r2Z4P7p3oqduQGaEe3n7botdRePZEwCVuvViFrqP4vPaUETikecAyla8CIqoU/ULCd0dfqNVhinBd2hbGMH62/NtDAt+YZu/s0i7APnJK0MVn9tOE6dUMuLyTQ3c9s96ox+4f7SckMzE0X656SomuZfkF/pfYTQuGaAi7U307OUqoTLZ3AlR0H7A61wVPtWgfYFTn3ipZdtrPwvufDHdItHMU7gXKAL87DXD3CBx/CVWt8MnIjomm+RqmLFzoPFRumGrlDNvq0KMqLtnD+hzkkF7ccnI9sDcXdTXXLfYVt1U6fjFrgyFefkI1k2XqgAs/Br6b4XYQqwALXWTobHNjty09IDh7l3VsLyUz2Z4tDqt+8UA3DFR0Vk1aS03Q/CaVpiGFYW/yyl9xyYfwWIG2PkA22xPhdZpnofr88jNPTvUsd3WZYnamdbdTR/t2whSaJ6j5Gqqpq0QWoYs4u41W9f3fFkPk+IFjPXNN/HLpigZ5EPhgqC68Py6sWi1SbwruftyZAQkQgVp1Fh+gyDkuGyt8O0q/z/wlfFtbck2frYPD+eYAjcl29M7376PICP1z1INHPIrJMimjFmvgr8gKtq6jsFjQDeLNwMax7EHgKkrSK/vNbl7TtUS4TwsX9hkv4pArzN+pubE9GXAgsVx8ArAzn5GS+Lt+qG827ZbH9F/2RwPMIJwFxMFHNMi/begdC8SZT1YfFW+c9tY1FTNHje1tIPt9DImvQrt/SP5SNZ+gxaNEt8jmAeWbgIIzgSnMsIv+RhlPd3uyr/Rx7KCZoljc7xwDaIqFmGWK5qjPz1TVHTGDnO42jQNqaz14gr4ZfwQiEoYU1mB51kaxTLYoN0I7Ra9v6GsN1Lu8G4SMxryUccKmJRAZ16L9uAJH/AhtTnthjjAWNDJgv72OMcJK+xChbsMVO8X0m52Nr7hz4TWyi8q+jZDxMTr8M/K5o53eFfkZg7smeJ4U0df6iiXde7KPMZzrZwD4Mceqs10P8GP/S+mL/RmBJdbfJgM+ScrFdhVkjW4UuIDvgqFRdI/20Uimws5d8HSDD/96XpZAkNOQnbgXzPJY9x8XBC4JSBShqsQV40V9exGqUu7BcFSwgNeGemSkUR61D4zqJN/RB0PEImKOpgCyvW4f+3MwL3SDjyqc76gciW+rAQeFqPM7JUp/EKYpPsMdJIr8+HUpx6425wqZjUTWyGwIRnk5HC4oGyZPBKYCmFTq/xtr3Isr2/UiP58CKSsCzTqCakvmyaBlWxucPpPzjzkZ0piE6JaS0MI3AjDdtsTxZOFjDaUlV8+RKPTJvjxuOp/A3LDApaTJVNFKhIKwutSPHDW9UubGUIHLWDV9ttqTAndKHQ5ZbgXRl6xbLDw1QVSPDY2VpT7QiiawiZ7OLrk7mM9iiTBY22UQPg97/gP6nGYZiRWUg8V6xhjp+QHlQTmVNAPKBHqOdQ4jd9GCinyJoAc6JrdHahtKn+ZUSfYAPvLfBY7k1ITls/9hEvdCxfnp/51SSmD4ekdI0WWw9wNJ4/2w2hFw0rkz4rcdwmocx75blxqgNq6Mg4k5QVJd1456KlPYqkuesd4bmCtZI9ynURXymSiGQIrHA0Md826heuRjxUkwfGXE0x+BWeyDgblwhMeEopEY8a9BPIFWoEeJISLPxq0zC4sfGGVM/UWgUU+rcCqOcO791oeEnFJf8b9u1Z9wzorFWa5gv35OFj2Ddw8JdtWNPmXdLgmoQCqhQ/M8/pduJCk+Uz0D8WItdLxzFn5+gyFtJQ8dBTqgPpnVdpGwFlByjlZ0lY/9saEBoejiPc1UONFmSN++9HPM8UyD6E205vpmpvWARxgmdYBkkyhbcX5/km+c9C6iiwLwKF+Exi+Lm5EM53tcOlBfPckfEtVScQewnjZtQuDMVJ0h56lxW9X7gqv+dH2GUBH/MlBo98hUXAqTsrE8kYeHWpDFsjyZljTH+FBoy6RaYcfk6pXS+nOtUvzDp+hSmRhorMsOEIs/BirztcUJBHlXF0QylAU6SOcLQMfWSCC0I2KkYIDVee2TZjvr4+rEMHE3alTNPkei6i3IMiTkXmISk416wuc5zAGDHdxxfpFltUNt3PLuUEQUwOXzPKna7En2xiD1put0jRaOfFx8oQv2GyVjUnkhlnOMWkT/d6MbjEKnU8fEqiFteiyKLDkymhyUyuGTf+YHWRJJPpbf1url/1547OUc7FB83ow4h+JikfaFRQo8DMyZxqWlty2yIg+G7QpBkC80MQSnSVTxjJ0QggIXBbl+N7uewTx9yTyIsZ3uchb+3dPiLZxOo9w7wLSBi2V4Y41OzSsQFAX7r+IPvIhP020nm0xYnkWDdrC7zXGLmTpKwuiKESJMWNe2D0tDTb957CvWAaLKNRL4GlMVOun/aqac8blNr0h6rkd12tHLFlN7ObZoajOCwYw0cut+3CywjcpjG+vpGxXzOYDv3hNayQnv4DsVsWd80ZkBenwpzgQiPbj7ky0f/+AoeETb9MwIGTiB9MKvROU2T3WBlbR742MQNb50SQLegRUfaXR4VcN1xMbQ3vX3XlC3idB917ggVs+F315AN03Ow9eaI6Ga6qaLNhKs/KrHNkF4J1hClY7Hu5k4SMxoWwPHxYL9lT/DL4Lsr3UrM4tHxwSL4yqlRqiN139eA3hy9Vur/fqHFBFL0taG+yLfVTTgS/V6GcXvtjNcm1hvX4xq3RNGf3D3ahcsfeImUTmZ3BKQy3YYNGj+Iz533yUmf4ENnUP7SqyiLEl6mgkRuzfOpkaGrhVTocRfBZV7IKdGnSeRGDFnx2szpR95Cmtpg3bFp18xNldL58ysmShHlB69BgqCHUzN8EZpoq5FK062OeakGuJVSFHroNHDUBb5HKvX7xUG3SOp3JQI/MLPTlezq1Q5YroqMEtjv15RYjJ67H1n19hNmCqLknSPiKZjngH+b8MYDDaacM1CfPxKpOocPkXugChDPAh1QdSsS/UA7gRSaXpGLolgfa048cFB/1lz+z8/eGgqLDKt9up9/8zwSghh4yLTC4jh8CDWp8SNPQ35QkY19N+STb/1/LVPoY3wMXqMNJaw2Y2iXJFync5Y7tXBPAGTZvJpWkQqJXnPtXZuVcOnYhMc6sJyJ7YUzbgthZDT/H+TmlIuaO/g1NJP1Q9ekAqrZ4W0ryTQZrBG7khYEs/txNQwvmzezbJC+fWWb/N0dQLrjnt6lsDeYWOwmS9T0bcmcsr73gr6EeX5tAl/rEIkddvmkSvMtTfFiMr5KOHlZUDcAd7SXvnhbRs286e/rL2o9T4ROox4MqJ3wt6DS2B5b7kyR1Ewsl687y8AiYgF9I1KsBQe9hiIMcswEiwlT/dMv1Wfhqx7dtZ6BBOHiB6nvSUeINzhcQOPDlWogemXEpPdJ563IF8yrgwqWZrNJlelTHaJip4LgVb9d9RaskUitqbtBi+BQCZnxjlL0p2j/oOvCp7oU1Xf9klI9X4tysCJ3JaqFNoEF1RAYmAGKQ99n7DaPNv6oTbcXra6SwrS6K5swekFXJBXsmyM5mFwO+S2O3KQS8d/3af1a/Nx9EhfZZ/RROpJoybbPaVJAf/P9ww4j0aUQ004bxqQpUt46SBghiVchjBN2BxvapQA57tV/jEvl6OXIcbHYWZCJITO2nOLWSJBT+RX74YmNMbvko/t8TqQSNweYSFUZcLhIUOpvDT9q3n857iw429eam5GIgjSy5O+y05NhVvvS+IezAuxik3IwF01nATty66rHLQd+8aMwVorteLwdfn+1Fy+TjYORFcWiH5T6JHfmxipZdTwngHJkM2iAKCa56y8mk6SGfSwDnNl9O0fQ19KDI5ZKfdxEcVyut46zHrB5RKDcjrQOAVVyUo3c7+OxpUBa8NGixzbVK9RlcMJL8qe9RKZo1453qnH6PcS/bUkxV/rZFMb4tOO7fKkGt9Rq5nxKwq9+1wVvtAwuTd4EtEChTkINvq/5ezn/DAddRwQbfMQ3IR4sNzkUArjEE3yGGoPL4LlXq2FCkvSOzMV8iGtPJGg4P7IO7KzIrbHq3rRXrODQuGlMhJrfudw44HNU88sMkv092HFwPYnOPiTtNQtEZD6rAJ2G48u2A9k6/3vJb6fbjmJykKRzg0Egpx0Cno6BaIpqX2qRntcvT+wcFEgYJJ9qNyVrHsaFNUIlALXSjNOWuHEg8IQIsfto+w2+lGizKO7VxJ6uDKiUtqow+mWG2kRETRXEEXx5y+pp4pRmDbWaQEZ4sft3bJ+oXVQHAUbiuLqkAZaORDfRMaS6lxLDdpvZKDi3YnbxczuYlY0qiA5/b/8+Eir1a/hGJjh+MaCyjk22grNelMT8+9it+2/NITEfJh6QqXFebsRYKO33v5IiuXGjhrhhlbnJheZU2VBd3yKN7MffGgOGOeYjFMSkZQCb0RKAqdI+2gUlNG1MruowfpNOk+Cu3m4f7cBYHky7RMIDkmMtF9pyLoymVDi6B/mKV1D+/GNc7N9m3xyZ38uyw5WGBBMAj3z2LCMLhPVwZspjJxsrZyRTJ+qAXeanfuIoT0ZBWD9Btiyn4xAwt/d7L3YYKsmEZNRTD7UeDRes0sY4csaU+qQbeDHH+gb0VzICj/lovSM5TyQo9DOomtK96L/9AdSWyMy1bCtBzjDcw4OBJs+f5vpFeQBe4HvM632ha0OQGLXhtG4n4doA6JWGQz+Pe6xm/KZQHl47h9z6JXeGDT333JzgGtSsCb/N3XwmZwEkm6QPYtCZKOFxS6w0PDYOLmSBdTB/SQzWrVSBkrUcML83Pm4WEl9hlW3BtdQYZ92KKRf/aCouG6XGCXsqytjyUPEj9CjaqY1fqGhIw1jHbDueZdAfAKTnXbGxgh5DoSHSm+afOaN2tAWB/cp5UgS29Fw+ZvkARz7edUEp3CKbCDHHMRbD7JHZ6rNNyxhziWu5AGeNUjCxD3x8NAnIlyn/tdWhnn4V8uHOJOPFXNbNBweUPhHL6yeqEsVqeSdnXELx7FtvfameT0HBqt0XkrBbTO9R4KPU8ZIs24FNLq8e9ZVZiZMBlAj0IV5Gl7dCrZaD7+1wpEairVcedq9T8AHVdgtaGwRYXeddKquDjNjI8DI5dg8ijFarCm2AvzWJggO72vrZpfvA0RHMls8o0lMG8VNq0wKF/+kxHJEQqnCA4L8Cvc+9yuWqfN50/j93cr4xhnxwuZuqE2jUj9ynyRd5qD8J01e4SeD0NU6/hJq2p7w41jyKqXycEm+2j1h5nryuTHHeOWx50SJEhbBz7mIPQFspkcIt6053kwlMd2Z10vaMqasb5qatSQAgqF7pMcOONROoEGeVsX4BkoZw30N4zFgQkDfLW7YCGuetSKxvvFbIJ2Rr2RAOf8xa6cgxMc1ddCAkI5cbZXmzmTdfM93+eCNxsJBKuBuqfBtCSpp2KnsfxNGxTtSG6qFmHwnUSL3j0ZC0PIUHY/yK21cF1Dn4PLFYeSgT/QZNO+s3FGPmoJW3Y051jc3rzlvjgCPelEUz5T8fTy215X7GZsj4g0LD1jfd1kNym+FJS+qyBflNqIm3UzBaiE0kQWMLGrbl349gjSgycarA1+uQNBkJiPRAGjy4mb0fjyyTnhBChJ/5PdmfUXY7U8ng1GqdjD3abo/Kn7HgoHhA6cnkU6eO0sxfcfYnUuF/g+3G9wA0DpqBLFZyQ8v3hFoiGZRnbD/4r1yQSZPGNNSzp6EnyG9THtzqE4qn6nsKPje4UVhW9Zwf/nnL9BI6jcQOM8Y7MoXfojcSulGGRTx+bFqfpgr7RBJdGoE/4jU+YVuIA1O87o7bZwk2U84NbgDH9KFs1MA867zIifgCFlvOdMKWaRY9mXCYx85SVDAFguEObeVZ9Ve2tFJ1HLjFBNoDGP3E9q5wJiQaLs3tZRzC/ERYqzmFyic8UA72oyxMS++qnnclaknh/OhYXFgHP5TGMeuzfpt5arFDZ20MOJ2ni7IL4YqB9wxOuLMn7ZK/hVAJ2f1UcKC5/CJhK8GAfv8IqrYNdKcHw881+JWewWABIKXrO7VBPTcRpKbKrovJ5Tci3u2d0X/5naBAKKug9Sd8JeKv10J3OSoy0ZrkIQUdElpJlImGvw1TOWv5KkUOSGejRvTEzcZZLW96NEePosvcawoOkAKpbEc1kWzpP3VZkFFBLwS4A7Qq4aHe/exMzRBQ+t1md3fHlMf93Oyy25crJ+8GRN628XQKp0h4wYQC0QBeJcneVor3rd+5YL98e0RCKfZ7+GQLdUmEVyTIHKx8YuK+JB+c0JvCKnf9EfhDZzc99UCucg8Ayw0xDyF0CL5KGIgHeUHnImzZfVg9rUn0MmYkwUKDatcQQvW/ev972OGD4tvKOem6aEStwZWemXlnGq8NubgUqhADBtPey33uzyHryrllAweXYhHGsPzawBd5BTVHQuRWD3VThFqBUImknhDtpq1cPoVnI+C4xsk/ffAAB927nmvbV6FXoVLSB1OAUevQBc8rRSoDSEMm3N19v9WemzsxiVxPGEFhbZORTuRYmffm/Rfe5xC2egvlpM4wOrD34dq9tchd41hDT15BAL32mdH4cfIY/19VaBdK+F/4cVwYegmkKRAdiYGBop2/cYt49YEGFPaCgbU2lxbeLJF0eWxg5dE8Be/16ZIiU8VER8RbN8BGoryeYR+713frwpSKeSFp1vJ1bCfC7ryRTnPtAMUL1VgpVUuXU0fzLHmfbzuJpqlEgPGs3NwpzicALHCos3+CV3e4FddtsEN+QGfuU4KaucFiQAR3lD90NAqDTnXo6eeVm2qWITb0Z1ADb0staUdCpwL//nxfpk81fvmB42m6SPJK8mjs3WW3hr/dfDVV0upxo7Fi2nyKgmuIsIITWduoMlMXvTR5S+svQ2phY5i+nRlkjmBmJnpD+27+JFDq7IqkXdx5brQwrhdcpOZJLu0BN7OpJ0ETI2NE+QtcqOHVnCirYkgw4BHv0vs2Bf9+W8tuILmPWv3RU21Zqrp1Mvv9wea+ZdanTDI38xXF+i+Kh9xd8HhVVSwurYqNfI3VTrorOq5dYDNTnkVJWstx3xVeOGpE0hJAzijIIFS743/6wQczYa2yPWfgUOqRLvOWs/UeiMdWbimDrgT8m+B12L8cGiswQJ0gW993imkzYnh53ABaIn4wwk4kmmIoC3pUhz4zNWY7FxQjNJMwCMsl5i/cOq+f5NGzCJUypWvJVWGdDFuoXcxMdLQxdJ+uKvMF7wSp3cdwYqdbXNz8kVtCipQg9xJG02CQS37okZhOuOHGp3ilG7fdZ9DiUQ/Kml6ncGTQkytu2QgFmay9KJFohdemYj4ZrI6za3r7Xkt2SHTjvQoJO3ugH2kzeQ8tq/FDe/lsAJO+ioYebFwYQK1WUtHRFYBvdI2zrckpQ68DxOYAboI+zfyClDC2DFBYjjTlX6tZ95EYlInc9/2hoRTv8Q4xuzq+nyR7Fdba9gllDaKr+Otgyv8fnWto7nd9a1jLU9YLj6P4TgpEjKUTzTl1JkrNBBP3KoX8QTiINdhsJUyzGuNKplDomrCY/bBlgwyjrzQVWNbad6U8YrIu/QDTbOImm8MB4b0xiTNstxiIMk4HwvcQ8Lo1Fb6wq6g5ehOlhtatrLtpFLO4KgxP3J3L//DyWnBW7y+vFGmaiJk7UI8qAyPoB7L6X/APdkisKOs6EdT++9OSCw0n7V6QKwhTCJF+PjEuxw0mXMmTdJC3q+sF9WyeZ1Jpaj7EFiI1a+eUcZcMavHuCWKhtW/OW1Nc7xIWVYBQW7EQQpI5Gr9F6Hn9CHGjPMy1dMOc2LXwtsv7K8HYKEABBJZjS5WfAAV4OiF82VN2gH78WtTowBtNZvAvcuGw1lt+n6h/dhUCz8oRPaTQbhTiw7Jm7VjiUp87PF7CtaUQkB9q/p+8R3BL3Mxm1ZK1Ygq3M5K5cqJFVYbW6gAkpVEcbLXWm1Ws6Idv/0l5AyZ4wtfLPKZBKUxtdzhpBtOOwr/2WlFZ9wI4wNAWsbm5KDlRyIe8Re/9sAY2YxbD07sEI77veB3uliAcYxO4fhjhqpsr8numcWkTVPTGAp4fNPGqoAMTyLqGqeKWuiMCvnXiBlUyhubeShHwlbbQwivJmVM9M7zuoixr9bQlkXflhioH8Cw4UddcXrfADzWLa7W3fT9cIJ/kMTq459sVu69k2aHOjE7Vs30GDCwN3ql6CnqtGBi87WT9lfl/TElbwxEpD6Gm5Puhd9UuOn0dIHmfNh21fm+10H0g8EbFxyK32LMqYgxEzB26pJTTUHG+TshFXBlXjEYRML9Kjzf4FuWbTxphzvmL7wsv53ixU3HSWepatASGPujANeQTjkCGu/7Gdn3+bKt9XoLKtIq5t9GGtSB8038wde9vs3NFRpudv/9UjtLtD5cBfJlmGEurKEvSsIZtkAFjTaTuNXZPrAk16B83YlvbWabTI/DGJNDs+ZETYTRMwTWzb6QgU8kkt5VoxpIDLrUNJMo2VYdq6ji2J3Qv4w9Jz6HztPgzNsMPqjruTBHQiA5NilLoRWjg6G3n3rXiy7SMI5mHQwhFQZPic2ojZFh6Afc64UCF6lXyFfGc2W++WqX0b2sTkrcoQSIb/QOIeW4N6CY8m5VJLmlZv21R1wkppj4iGR5bC5pejNNuYIFGiLhIdKfi/BRJhUxw5V5x6ilfTqDXh8QNDX0LMeXcy67Hi6A4fM6ktUVk6ajjMU8WlKzzZMUHhuSBJpjlY4yIf9JI7ZVDyzPkHXuzH04KfOltbl2SD8oudZ6oP/p60eScdmuKrtzqxfkRmxGjDpI1b5EuibVdglEa2Scp3TITxFhFNkh8QKhQx6mn9C/P3rG//VQgitSNWP81q0GNn9PzvHdQKdtgRwcnMd/tqrokdc8tN6UKuMRLm8HPWEE9ijnOAKXDI8/8jLB2ZNXWkwAo7EdLOLiQdb99+MNpPIzIFgxtjcMLWTzedClXRuHj3lq8qTuxynUwb88BKBDNJDP79YAXN5DDi0SMNg+EPZnY6uK1xTcDidm2pL4GOoNzXQ9R6Ym+Nn9tYu8fRaMZXe6PTUSZPs7gLUdj7QhErjeuRZRQ6+fKJTBqFg+mbRDunBao7xyYvL5ZAtsaO5yYWkTs6tn1WGuRWZgn8FR3H1EBx+2M9ZzdEeDZH1Wwd+BkiWcU538DQgMF6d/5rkE2DMw5RwYw0X4ytwESrARs6EkX86G+qDDTPqCjVO9mmT8gi6q3XWXg5FbrG3AjL+YeCcKofLOqsDtpxgn1akzVOSr9fK1DB6iRbtWcgnUkKBEhgVRifTk28oWI4dk5pNn+bpERJelBkS+62w5To7CMgRgOSVwNd1Ua7F8ITsCgCimN3ij9IwgOdnyuikd4HD8xudhj568hLhz45Yi+2/qOjbAZneESCpHzXOExyNbBLs64tmBDWLxdBx4Ir8MbRJDIHoesNw6uc/pOgLYZ+YhHYWd0WXSyXThGKX06/7YTdcslkXuBH4fNIwX7DoCgsTxxYlr9JCR0JhKbbR1Bcqw8oiOZvT31ezfl1ibIkqxLnuXBfjA3ZAYhXtU7VHmFJmphVQMEZNST0Qby9slFOP/aT1yerGQJUMxftYQlWOKugZM4yguvQrZCTcSBHI+AaK4oLiAgNPE11tH9zER67t1AB+g+Hae5GGvUKVbrS+Eu/sAdH2YQyOsCQXHfuj3IZlctVZgZ4/I3c2hCct0Anf3tfadgECuYc2MSSFbJ4UY2YJJO1wMhiPcSuFoYjT64gGe6jv1SDJhnt+wVRYMKg2MD1nhFNZl5ACP4UEjey07bEpAMllblyvvdE0Htle99S5/nmEv+ofbi+0lveHP54KddByiqz8Hf/3KuvupXY3O+dXqSfcgRvOmpmAwDk0Ie7eNFmXf14yq50eDVhdat/B1N+fAaCGbwlHtLgx02OjLENRRL/s+DdflJpd/i4SDP2dSQmhwetmHEra79YzLzf0zUwinuoxb9RwV/XTv+xmHChhKCK4PTQ7a9dJJOHxGy7SZiINF0MGtY9yoWkN6JMKHzaLtHdyBzuLhmiAe23U9MPVLE+WWvnTBHQy7jvDcazA73zYdUARqV61WpJCEIHUY3DhylCRLMYB2vHKA5wsIpkHZ/X5B33UZvopgesqZE2cIWyQHTtsj77DZXke7yjCobVonZxuz/SlfxWeA8Bgcm5smUK2OUzxuiVL/uPyl60PaUUmkuAH2gd1/megDgSClc4bAD1SPtipmjoUsuvQ9Y4HtjsOnnrh/u3bfPxCXdc235M01mUdAIzQ+wuwx6k70wQr+Yc7+uBb1gWFCd4abYUxCD4YG+pq0T9JrUF+Xdh7uvWhfzQ1h3lZP3LOcz/OnyWpcAq1OS1p8h7cN59Q9yEQ3RW3b4KU0KEN2AaJhtt7sW9QV53nl9vrXy3w7KqdFysD15PcQ1TghVU/F9UuIimiwnG9/wTO3rOIaA2bLSjTVlPXpvAfZ+taNxrPEj7LS1+HavLimw9EzYrUKVtafDdjlJVBvcLts+4f3JcV0iWeRd0jqPnHutLUL6qg3sEDwj5H2sD9llSkl64DxgFxz4ryKLnrWIlju3eB2UszOt9b3X13HdVDVbqvjNJQImAnf5VJtikl1F2GvjOzp5BE7xu4217iZf4I5Kk2yO6t1SDxM4KSJA7QTvm/y22iK3P+BqMCQIIu8y8JLoeZ5kLyET2VhO88LRrfepvoFFFuIOA640NZcTyrRh3kghWzXv8zdh44UdtmmTtZsy9H3Ty7NAf0DaNx/sV2IAzcLRJxpXL2pxRbbL3v47U6fRpojyzH5dDBs74N8umD4Fn8AqwkxfZnDe0WEF+O1H/h7r8yPHNBcWngs7lYmvSOiqgerpkXNno2HBdvhh/ga4lRzDm8/ivAv277jDwHidIf7NFi3SDfQS2AmiTvTdoMbo6F7TfCPQgpvRKI9EGWVYZjDm15rzePL9dTOLjoHPmtQRZVe6pvsKbZgOdyWtUT3cNnlO8cXG0tiXoF0sLVlDotlHeiPYqa1TtewRk9GNL4tETnrLq1eaRkwNmw6b01TeHqQaq4ou/WQClH/VXp/0huY9tdybcr0yJzixyApfXm5hUi4guouHHz6DBeO7gNl6kYjA3ndS2M1BPnA6tnkRZylv60PhWEjsYBZipPBrdRC+I+5Bg9Up/GXPtiR2VvdPh/PMUEN2xt9kVs+VGCJA15iIg58VL4rc5FsfAc857hrVuT3X8jn8QES5oUcJR7LtYosW2lCwVwi3pcM05ykeC8k1vFxxx+Q02z55gIfg64rDESpviXhjevY60UgJL1S6wX41BrmcxDOOpWvLnoS/REkJs7m4Dekd4mstYBDQMdvSFzIwXaFe2frs1048yj5us/MweR92ul35SgqEpTdmlnKNS1CxIqRywGnGNCLX63tkHGcZn3UQEU9+/NEeSxLOhahRg6QbYM9pJP1EwyB6/d7gUF6+/n4KcNm/z+oGo14fz8bfJqi3scMS2p6yX/O1pAvcCG+AnfKfVKqDarMbdOwdqUAxziTWBMoUlblspU9iLBHvauOArD/A8YCqrDHgRaDz5lYmVqnHuV9EZEw3IpSBliOX+Kvc+Q0YvJbI4EPcf3lWK7uXrkIK27fkgPNrag6Rgau78TLHuIWSWB4gCv2g81y3nKMkA3celsoF33hDH0JFgcupcL38bBNOrt75Wsr98Nn2w7czM2MrCXWYql2nU9b8LYDZJZTWWmWyBaqUoipZ5E3op1KZRh+1qYpQTVoP6tiOFH0NrKemHuXzYUAYHNV6mtv2mCcIyGpJ9NJ2t1dDSrclQetFmdqSBCcbXCT3d8WUyqnxEPyCfGKltUhnKfi2sexI4hnRuez4SbhpGxp2XfPof7STXfP5u9iSDG3pWMJe1dP3p4A3eVLzQl33RBqjstdMjpqltMzPD3JFItUNzFGFj/w0wcmCcS1bqweBwFgtOjxXUGAhLzpsqdGXT+zuXD9aYurLNaZlbkBB5ekfIudEQqXj7jfvF4W6D/mmMa6WYEmfJQoXUr8tLKXFzhrIhtBZhg8nsY/sHmbVlpzO7fQQTDDjGZYbtFXiE61M1nnlXZXrFJFkhhvMlBxNv8m2KvvMmt3eknZgvoXWPmesyBGMBwUSW4ogR+I3Kp4G4JSYDkhaouH+0hHSkHWsPzlPDOHbvd9doEE6BJ1ebS5mcmR4a9OH3buX7sl0k0CosgCATccPzj0ICqg9OPYvUu0T35SVYMmDIX7MAga90YHDPOww6YG4EzGZE1Zsb8MLG73z7SHOARKNou+1dFQ0c+g6DyOGVzj6ZpEqX3ec5X3VqSbxxahDjtIoMsaARoW7dG6yzlWT+Z49osUT1y4vA7ds6vXmqHlRmTO2MP5W5Va+bpiIfOcm4dG0z45zCFz+/WrLRCkBXhOktxB8WiOumOSKbqUIoQdA0Y8cU+5dqV9T/RhUTCNTtVvNfYCJz3MBveojdrGyscriP730Q75UrR/hK1VuyjYgy/jaG/fpzQmhesURzmPGbwTnOfoMrxttE4NN9J7ZyDbYWLz7K2XPrKcaXYmWk2KF/a/CTaiGqc8A+b4TtWfw1lVdDLU03eTqDkfy/YGWlxRw+wnnTQmVI4tvvZYajaBqBRPBxrg8zOnk6xJRyFQHOMcKG3WjKewFObkH1qsY2Acn5LG1I4GSYUzoFiWTbnAmfRH0KKFmE7oGtySmwQcm6DopozV95Zw/kfhVpOKiQmeD24zsqZUR2QSgrvxY3pfmFchSTGlCAiYVf3m/277yXvwG/YmyeZIHQ0qk+bXhll7c4ifUrWbA4+tb4kz4cWAHsrM5r/QyQBdDXlizPR2l+MIF/Iyz0zpzHm+1vHudyzmbxHuETYC1hbHJ+1z7gS48LaIV/8bigI1fu+N6FtMhm80NJI/DDqDVBydjSsVE1cECv3aHCv06+vesWr50GuSGhGHnjTvdl+fag/4WjFSS+oO0j3YUmgKRZmf3fuukUfDEokwcs1tgnmHOnEQp5IVuN+i/QhL7QLpgNPcOYti3Ptv+Y/G5wdoVi4d3rlm6d8A/rB8YAsM4l+n9Qwd1vQp9IZD8ZXU70pCEgDBbvcieR+Nh/ujK6rHEEdwMlHR5IG2rkq7jmQr+Mqnlv+UPUidXeL+trDkBmSwZf9pHmED+QEsx2CdN4Zy/SVGe0MCUUvrz1VsbGgDiuSVCHJUcBlqTEEBStMG6USR8ClGjl3RTmXbT77BfMMI4SoOtMY2+Zk7gEmkyE4Afhn8ysh5n5txwXzSRC38+Fxbof0PBU0nO60C2B7yVtfDX1TP39q3za80F3BE3s4jomQ4zuGPKjvRe0T22P3LJMigy1AA6/MDKOyp+bxF6P3H8i4dF7oMU3QWLT62xiWjL4/+UmsRKhAO6WSYp4ZmfvU8V9igHrofgUauy4fiMul8pCo7ySEEOTVWy8rXvEcPWfOsgT2upZTZG+VfIhZVLBfiHW9x+FYEfr644kwcFDz8+DK475Efy6fgE1mxPXNrP+KaUicD28VpeO6aQNCcrzymKKK+fRXhXFx7O0Zs712rnRDEwuoAmTgKovHwRkobhzSYa1/+YDLsOt4nhkoWstF7fcQ7872/rivgYxX/MAtL77hTfLNpw5tA90ICQvCbuS9FOTXRaw1TFg8pVqMmJbW0ttrbM4ZajIVpJMXE2XHNAYaYeUOpjfXGAGQ0cV5i87h/T07bo88gui77hhaLyTzUyNHwOjsjO68kn+SNvbOp23gKEmz8d05i/dFApaPP2xg8vq2Avcbn1LKaDybLUJRfu9S7uCLY27+/NWvYkACz0kiUYICZBvW1qnqo1MB6uaqS4Qkge9yM99ZOKLFzSNHcwLHLU+c0JH+nDwqsnPw8JtCa+JtsR35VivqZAkF6naHDQEaVBXhqCZmNEk//oYKOHuPgfgSg9p46Kmo3Hlhi2fBJYyuBZpoYoUgHCnJNtFzaO3SHU1yPlukqQ318DpiBT5doLwale53GjoSVVw90ygy/hwvgUPxkvb+IV9W49ubfR735AToykG8jYnN5gVou+v64UZNLvMprnpmwuc/3nTXnS0ThTdwQmC6RcYwMzkj80VW8hZzIZJi1MNnqbLr2Z5Ep9fQvkgah25uPTH3/Teyr1EhgXlywLBiy0q9LQhN7pLBJFshr7UwHjggj9KVH/fp3EOX/8CKXTOkAIFbOxCXyUnGx7/QXzrNjTyh1+V+6T/k6snYsrD3r4p5pLPjeOtNtQ0ho/N2EaMctdLJeqf3rIJ6eIAcFxEbwGFL1VxYBVq1K2brBgUV0ouUIbhZV1imL2LRQ5LmbrZvsZxOqWf+BDjQZ3uV5u2jcFuHaaHR82i16K59q1GeWQTRY3YSx1lXwY0SLLTrTOpDQq/mOTk9JymKvpY4sRHOBjgNl8jPffCu+P7b50N3KJqAA80U0UxOkgR7XaaHm53I6ZFHJ0gEwfCbrqYQ2vmmqVPNh9z3S63FCIJhw5tqP640OSZIvTFBN98euBPOVptFt2g9GJErmcT0EcCKkr9WUnHluaqH1MuHcDWwcHV9hULMqQ/5HoLK3fWZkSyRTb0RZw7+t/01ktYL1+P1EFMq0rg3zT+FGDcGYvFXgQUBLy682SEFqkG9YSGbM/AK/GecL1o8JbWQRDp9SPM1hhZAUcR7OZG5n61P28ZNKSxQ/gn7kqulDMrQ+pzSmNl8S4Om/14imaAE173edQgdFlxItPve1JSVdO3yBE5jAhdC3oxYhRFCqWuJ61IrJWRGLvEZqtVmUj+KSIAZn5u3WX8bHOMGWVb8erRex+z7+Vh3WjVDOaChkvf23311czr6aTyYbsH+Jvg8kgKojsyuqR0VZGDuEfVRIzTu3pm5MNcwuGPlmr+vvqvAcmT9qYagQPF8XejyOIqaXScCFj4+riMP0fohnSUq7vSWBOGzxPui45zz5JniiCtqrGokGzBz2Iy5cfp92QID3RanxzusPlKBAbrbFmDMWDF5eLDsxYxdr1p/qE3J+yPzKdNvRPldmeIc9ZdHv8Jq6bzK7SoZiQP6OaCPheoPEPJ8Q6sxi3iIygQtOaqmKLCHwT946oBsQYNx2qiFIlP8Uw1fndTTIKZP/jbP9IBrmHAJOR0OdGuxnWkwqgNQ/eZXjZlHhD9ko5aFzchehLvm3gwBYNKXEam+3F9UTQ0kkJyHknk/Pi5IC+i1IN+Cg+1aXqhhBs2ZiWSQVl1xKadIyE61JkOoFmENuadoja5dG/LjwdNvWFkU1IH+gFBGIWza7NnO31mftumaGaUO13yi6Ztn7+vnFyn7zdGK+8Qa0yWHbd4BnEDB0F3sTzhLxSjDXbG5y1PCB2VLvvqG1aXPj9R61KIAzgt2Cu7RQeWh1qLnEqKWg5zbcbadCw5q6dd6rUNQ8h7RIwI398GflchypHQPCKP2yuRdciZb0bNMORaY3ZtiWswjfP2Thu1Yn2CiJZKqIY7QE6+BVTCYV70wNufq1WJLxguBiuUr6RMwBKn/6WwtpayA7FMcY4N3gvFNThT0WnmA2OYfplGC82fJlDJn7QBywroHmzzpRgERH0GLa8wWrk+QjCE4HSAWesprj1k0i+oSj15XBsXJWdSezy8oL6jmVQlIJSUmZucfMTY8LlWC0vjAGum1QlZ/aGJT4sEhTHP8uIKUTWFlPxl9qslrC3/XYjfnSnDzRFsvWaDPCliXKSHbw77sgKg0oCf2QNmV1BnvM5GFN48FdJgYLRMxKy3gSRidSSr+4Mvmj2I/9xPT0/a8D5nwNmFjQO4E9EIohqPAfFYiGZBx02F8ajuks2W5gMFEfiPEK6h+TFTuFcK/z2oFMXxARturNcVgiHK+KA1U2EQoJ+UEvbAvQLZQc1gGXRgZxXDJl24UV5C7Yn+WtpjN5rKxCYNgrgDkqGcAueK21iDCxtQRSqDc395EzFsfGO0v9LeNH7HQlm5HhnQ/QVFN452m2aqXridh3DyI/pThw+Sm5+IYc6utqCCnbLL4ySQC4a1GEYYsoMVpQZewP5JJNlKRFsLeZ382/sFU9wK69dadKd8DoDZOORZE2hLGnGwvOb2rWO3Ekthk0z/EBRLQRLD9W4mNrNQBH6QnUJ1RRC2GzrHJ2vh9b5jaf+XrmRMJFEyN8gACwtt7/kkK0MTLvsNBiB0Az0mW5DSfsxBupbkBAbL33MgBtM7qJF2ToHAanKcK99w7KonKtOm+m1Hl5Ol5tHOnVVxWF/0aSRnlrCVBVWrzxz6D1UWLwilJUKS2XMNdWogJ9oLpRI5u0ZOa3DijIbc4DO29cvTKG0sSol89DFjSkQeZBuWXXaFdfWpnc6Q28LOTZj7QS4koZHj/Nr7/MR4JfkhjYThDsqTPX9Qc+26fTD4neUu/vmPwtn0rUI+p3QpiICGKa/yL3b5C9jL9+3RIRbaLIPEyv/cmsS+pR8hx/kjZXD6AliO2T7EzoB6M8kkskUf0UUqGT43vT91BfOCedUB/T3KT9wvMfLwl32jrFRxeft+lMrzhhRE2jtqiqF26/wepbz2UoS/ggyqWddvH+POInxFt/KV37oBEGIhJJPzTaAwoNd37twfhB+2yDSSvGyDu1MwRCUCopvj5FGbvmstevQPgFAqyXYL9BoSBtB/vcecvty9UkBxecNsF0Q8sc6x/p0/L27QayBYZ51nP6ckDVNxA5wXR+xlS9+towNteyeSn08rV5llhuZYetmh+cYgM2FmvKS7wVVZ7XXmB9rK/t3WRj1MYBfyO2UHGXxa78UDy0gGaqGLXodzhQXJt1X2++wD2RxiLfFrkDs0QPci278EXjo0UKUVj5hTpqVb47RDFC733QbQ3VeckvFng+KcbieMiTFAyosCF34DuxoEVZjjIKGmFGw77T/stjpb33B1pYeD237/UaTL2FQWewp4YqEJzmOwInEMj21xmrUK/NlkfFm/52o/qqy6aS8TlABArS0S6GodJm9Rhv7y0DXucrloTIgyKorS/ADzP8y8zbJvLtKbXfJ2zUVH1ZSlA5JJ6cN6IPRDPE32muQM8Gf3GNc8456a+wdabcvDrOj1Sn4cjnV7FdX0fP+tGOCLveIg86gYh0ni6KCsRetHUF6vgOiEUQW7Y1M5Ze8Die0G46uulCiaZwjN+bo7UMR50gBeuT1uAMYMGUVD6C2n+vu+KhsG4G5tcJn1kS3bAYyj6uZfS3ZTGbgj+p/YOUCn8+MDgG+ZauvF+/EW/KqMNe5R0a3ynp/p+Pdx+d/bNM3lTR89hXne1gSjVlGoQUxAwWgx4yPiBBIiwehH6eFmofiRvHAcGb4ZAyo51iBwsdc3gC2AHhk7SMuBkwddT7MpHrW63o2YwgBbSg+cnuzRSYA/Qcsi2cr4B6Art8x9IaOmLSrjWf9nW3dBUZhUFp3Wk7/eml4Grihh9xoVdPlenG1l5lmmJbPeE86xxYa3dLBKJszmFl2ShDe9BO+jRsb94+tf/6ndCuYV+358GWBj/+WPfJV6ZaX6WATFFV9AW+hHfDMByFhtGZTC+wBz23FLo0L5GoXtOquOZVPtvcVOSJhXddO/5o8CwTksmOLYKydxMHDYi7l5Oqzr+HCzcrHQvQIcaBEvqP+Si+MyVqPgN878KQS70D3b2GRopGd8hyJfJKeaKgW90n0Ry6497tpzpzeUcHRoTV21AEzj5x6CA6PvFR9qzuE0isy2p+XAERfC+tSxmQUhTGY6tiyd66r0xut6Lbu2Sdf/JmE83X18oliZKKN/ibcht+Dzry0MFdwqqjlZIbbXYQ7cE8CJFxDef89Ep67ejngpahhpuiAUA2pGSv4quPVHSqtdQsKB5+QVj95ZrKUhtV90ivd+eysonYPuyaZJ9b/GgMDIjnTwxsxdGWqWHlZWFhdZtpSJJZmImP8/Hjo3i6GvA9pABQSgNCyLesnQC8lfl85U2UIYIlxmB7U9oB2iuwnYqWp5quamMx/zzJQHG5SZEFi6E2GZ2LBK3kW5B3jW4xAbhosDvtARyHMHfBF+031NIWAw0mLMvctDBFCTn9R337AAEl2SuJWNDbTSHXNHHz1NICb/GH2/GSMpf4aMbGZWWaQOLD5/cvvT0p8D0rQ2wfEfgjOswNZkACoUTRUQgJmjDN5YBtEkxDdzhEOC7kMbcJAe0/jONMtv9KB2EEXbMDZfM37OclHcGgpQ749fe6YZIX2qhHfuxM6sl0ickDeilC1m4HeOJCyt1Pd29mGH2vkrm4pFXIMH8wsJxFvwd+USEQ6q6A96Rak+3BuawfS0in4TRPMVGBVEk82TUs2yaO4VwEqGfffl3CY0MzY2QjGRpBN3KEZoVbEUK6Q20voQ/UHq/8NGCq2FhI/Z0lvvQClssWSnjdZClBOpCkkB5macGWENPIxzxrJBiQif268BuonZ3fjn3afYgtfUvA+nJSZ2srE3moovlPz8cvuePegPstj9elCJOApf77Py3n56+AxMvpF0FHqPg7+DGtl1HG3G8wNu40iQTUhjDPi6cnM6yKl898qDd0nDNbliYsiEmL0kXRaWwQHKwyTU6ZKwoM/nF50N+RRk4x4xLSg1fYDL14Av21wL3sx1o0Da/9HGzjnII4+if2h12Zgi6njgrWXCoKcnS0a6b/69HiJG6y6XNQ7a855Raz1hhKEtP9p2FO0pDTkEjDOjxlA91hjKGxVonXHT1NsAKrB6V8B8D8LzdZP10oo3Mnj4QUsHc5XjBLILtg7hHx1rZgSl3tbBaUZ/7r5NyhpKQqx+/hjq15gsqqACGiwB3xaWeHkYlDjKYQn6XSAgy4+UmuD0XdYWQGAWRFNH4ZKY63bIZ9uWAF3Dr5dJYSOcZyPo8eOAf1PbD8RGFrCGIAftfevNW9KQMgpiJSKI4GyogxdPjZ3lFBgllkpIBpotht73dJf+KR3RtlTez4sd0mzZ4sGi5bVczb+5JBtLP9VFQgFxaUoV3Cs+RM3qZhZJemPv1qRtWs15vNJHoDC82vnKM2oBAYN1XNaExQKa/AyMRSCef6z6f0w32krzS4IrfS2V2jjvxyvr1eVhc+9jt3q0m7oNUPvOfGeXsNOPKJ9uxBfjCmpLwuUh76EJOldhC0HKMp/PomYOr2VZkct/+EWVSfYb6Oz9L+ioxCwRWwdWrDh5Js2W3pw8f8sFWNdtZ9XB/1noCJxHpi7q+Ce4iha9bAzMkrFy/+P1vFLqykgdHNZmaCnWczZq+5r+DBnJY1zTWJNMlp/5ZGzpyzQPNIeQO1rwN3ETitZzIDy5z5Osf7ai25sGYxfQj9y8oyG5lrWd/3NSOWxDlx0oo5vq5G7uSECJrORdAa3OVy3smSLkIlQASkLEFHRKXenID6iwZmEIzeG/VIDiB/w36gp/zZCgzLyIq3CRkwxbdVndbVVSkhhiHcgWz14qP3JrmWmxMGIsP88vKSCRdja+6lYqgJr/RWvRnijc0s5OhXcr9BPBCfXayVZi5JrFwXFzvtb+2JqY7NH06VCNKM45ph2tUUsz9MsXQ8DmZ5BsGWymz69fVbCIwglHVkblysDZD7CPx9wMYlumXzwy7SyTdsigHu19wfGeUOdeoNZW4pTqW3UHsLKAv0P8gOweESOZ7KDHg9AmzrPgy16lZjbla+xqODb4C6sIfuzdJZo/8QxRd794S79tM+iZLaKlm9OHyqLAtyenyi9CC0Tpe/KE+086ob++bCAzrhfC6ks2p+6CVyBgUlyDujTHf0yVDjVBSAQg/9b3Tqum3uDQ6XZdCGCK+GaT1S9ZI3tNKbav/FR26bou+Fmf4xZ09UIRgQz1Bd2TPp8monFrOseJ/1gExzSOPXpD1p2Rx2/XLNIiMYn5QvRXSKa+7tk3VF9iee0Y7ISUr1Df7k0bV7JwTkhWDJZO4kEdIbbYAaHJiDhnBpWkDzTiiwSDiGcjUXqlzATbAGEi46lwMn+bSS2Uy4oywGJlGLCvfHzEO1+IZ8g0DC6JACGeKm7gsFjwV+dkdH0BcFN/oCZ0+dHNC/GsbiOM3dHZq2eAFS/Qb7lZD9FvEszQ8JwuAA9+cZaM9BSmsmxnYbtNIptTtdJJ8fDRWmwOMqkI9WRFeMuJJHxy/yXpfi518jLV0Ad7/AnCzI9kf/LyUwg+BS31H5QC4DEc0n+73tUuVT0g7cxHl1Tz5zntZwKRYeZQmiVRWlJQQOBldInLNAgHWwSPMl6EuchhobrLGl/gXf2hqd/P+HPO+nMOIMhG5Gm7QUiym7IICYAgRBe4UBbDtyRuqISwQYhCWCi0sEbM8ENsg9qStwX7Hum+MzbEdi+0vLwJ+/bSxeQFZMcKD3FyFyoX0VZX6o3wHvAWrhRMpbb34q6yqoKSp/9FQeLAkcB5P1xyUEKlyKnRV7p13rDziYhlUtDvdgOCfSqOaKcajOX1bquNRihlQstYF1qOPxcIQ1e6mOZjgyrnjIrKM/L3jOO0ntGVE2h9ZV7mjTxcpgONM48Bpcc0yKh1/bpvxRc4CqsQshw+TnD/M7Km5zS0TqJ9pDeDbQ2oLNF0jGRT+z95PdbTQKHqTAJ+mSRhPomW1hMyD541JybxC8wJynPQ2YkPqPTu1aI2xtg31KRCBan9MdbVSORz5x341pbH78YK4Zf+sgA3eEvpz/ym/NXQuJsA7HG7YH3jmzMpb9qMXtJinmiJHdyemYPTrpVzpDs89DANRdG+LmcNGgb3DIkBU0raSfZ3/3JV5/Jxko6ixA0q8WeW5pz2pODfgv/b6SFrEPTu84PI9XMzTTgjAAHFhZxTg4kG1NfDbgu9rVYM3AZf7RBhuenlZA/p8DifImJ2ga0g01t5+ZlByK9Xd9gysTRsigfYQO7U3Xuj1ZdnnUEnu2XcYxgCtRrGT1rZtmgs3TdujD90E+irV6IMOe5CcoAE8C3RAKnC+H13sz1bhZ+Aqy2AwUaqV3GXZ7ZtcnzrP7pGidIOMToassQeE8NnPgcB2u0N+QOViaLFWbdq9GiVcvNkvuGnc+ezBekVuQrm8i+Ll9OpfbwUNe6o1nb8pzfpOu205vyb5Bl8v2k71x1dgz02YhFt6OqS0VBkOSXpf+ew436ya+ZVD/lB99HFJVXFLwDrVgbO3H/fIxR6gMrmFj31r7olZR0756J4PsKixXacZ2hgofpFZH8/wo+MmFjuDrbRyJchgZ/GmcDAMOStejgxzhMEh4OnedHqOwQpjDGHa6kUC0xuiufgz0pe0QpMiVgq/fAFhV23GZvVd6NNWzI1jgElZ7UuBSCwEe0XPv9EWzbggzT6VCJeWpIF13RftUrNguyRShtlbnqbWjr+yNMwVBQJPvVrD6pxDjto8FGAteRWvRqY9Hyp6aJkg098frRDbX73/SGu99wDLHGL7A2mzWpI8iUt9eK9t+um8QE36Uc6dhq9UsZMIzN4L/stx7pzgOAqSyHN5hnh2hj/omKOxWrl8L/k02Itwq+kGqCIYqLyLygShpRTkBF54oIZAa96fSd8yKpyCGQaFuJiFC1MR/V5DKYjDaKaUU6oeLlnHHfPdavaNSNGDD7B4DPCkvrVc6PSgMpdmdSvDhSX60W1qgNHzyqXf/fQ+6oVIMT+5Qn7QMPqaLzxYnoCGRlBJ8ISR5qOnMUFuUzr+QPOYdwvc5Xhl5OzyeN5sepGjGdy4DdJc1jTbeQZyzaUhO+5THdoQG3FPMgXYQGRjtG4jUcugQI9yj5sJazpcbkeNYR0Jj7UHVBu/doSQ6omp4vSwFKz7xzrX+yWnQOir0cjWUgfKVipkY/Z8xy0/nYEFSpP7n5pKCxWKIgx4aphcMu9d3tLM3KPNXV5Gp0wwO/VEnRQ3yA99Tpkszk01pN81ieKLxUw51OnjBqpVGecqn53p0HyeNleuVUKCwLYoIKrfBDCr6PH2VRA24ByeddePkfyB8all6FckjjIT0+pzvsGI3q6KyGlN94ZWfj+31mRpXr0u31S2Jm4+R5LX3Gagd7uMOKDpf2W6+3Jzc7qhHef5TT7Qd+Swrhw7f8xDExdBspuLR6MZRpg1J7K1hvNUbxqPLckF+mHYVx734PNrLEjlXgj6/CzCJ01OI3qyJ/R22x7IFQv+8fm64jHmNQdhMMtCkSbrb7XYB6whZWiaK0Ha9fy6nArBHetNI5aPlsuZvXp/J6DoResKCHwUAJb0XgaWuoeMTZW7n6QsE9Xo+5VQ4KZ9B8lFArt9A0YBWfA2OuAN8u+fp6c6B8un/UvYskUL8pC6bi097mkJBAy7fTk6DQtuEuLLPBpawwLYK6bntIlB4DsJh7kLkTtTBB6QL+c2Snl5coE9NSZ6lSSyM7DryZjV7wRvUy6a9qLRQyZtP56zBXz66L82G3yOT26mvSvWbNe9K3lkrXUrt9EQFsDg94hUqVxt3yYN9H5dlcN2g0TDDtCFIsLhUmxKNfnj2Bak2IUNPJeXM/s2hBc9NtFXqYO9sn3EtBf5xA/y10WinEPTV/uhmU9JPzniN/6qx8P9+KGKCOEIITLFRG46pZKsyjPK13M1fry2tgY6fghPWmlWWJIVBqMrpMHOsP5dPhWnfow9V/RRvrnbcvaZ+9YnNuO8ljGx5DfpBpeUXfHEf+qJpWxom59N6/BajGjF4g4yg2Pge6femxMy+w+TQ2gQC9bxFLJTfPT3dFHjfIaxR9jKzg1K1AqFLs8tkS2KzOhc1QPzOV0EnbVdcXy9j6iNm7oPlB51rDaWKDGcUPM8RtRafVMGH1pb6foBUM/FtD5Eg9eLNCoNTWecV1hGGiJ4/1p2gPMAANPy7d3TS46AlQa/gxpbvu4GatnG6A3q+Qvk4MfO8Hot4EQNlT+KL5o0tzFARj28M8M3j9LWnrXIlP6dLlxbHcUxdHKvSlnf7U4zchVDR4i/gNczqrTBEOjR9lqMl429xupCa7Vex/O6sVxbqnoa23XH+CIeaNWsuTXYPJyfIdJdWH+3wi0VX7O502Zkr/7nr6DGFlhUhBhQP52DMhvjQNkAg0K2lBo7sn4e1L9RtKOPFXh07W8J7EpTiTmK8zGQ2v0U42f/3CbyiB0wnbnUhDAowSUKrOJn2ZdhcWwdM5kn9Rp8W8B2eQx/Hc+HTBN4NxEaitPvqhr7sEpJdysOmdoMESpL0sBP5w1az3PrCHqHUZkE1FengJkW+NQjouhF7e8D2bI6uRzln0JPedoVAglil5O1tUufKBebq3l5qAFgCM1IZoi0by+OWMpHd4eNMF1cKaSGfLQeUA5hlGASPsZsj2Xo3OwhH7u2IWSXn4fanExfD7hKkX2AiLHdwfW5R3P+0327i/7zoZ12zqUUOj4T2W0FuohWhmaQcFvDbqFuHlMmmNWqmYhUgnN4A0HvE/9XxSv4B3foxv8ZFoDhle8bo+9/93L2SqOSUtNxBOCBIVSEdWqBcNqUoKXmCEwNnRaFpEMWiSDVbt+9YvbD4dmahjWNK8t9HAbtqdDdGUB2XWVbGuOhf2HEU4hMwuibqsA+Iwa2WctyFlXZUHsaGNSnquACft8SuOv1gaQFA8q65hm5/tQ6CSZZMxOSz53hAY0tQ0yvQiuyGKw2zKYl+y3xCZcWV7ae4MDPZ3f8lyAcpFVGGXMukwQG4jWdHZFLuvu6oxq670cL9IV8W0MNF5zt/iOnc6aP0/FN8aCmHVyaJdGu+GTgnJOgG6BbY4VH1qhMoASx++IZk6eIUO6/iQlVI8bXJzqTPNTF1EQoX5+5mWPLAJ4+rK9nW/JP2zTuYErvrrA0/zjQs2vDgwIjWGaVemK1+m75V17haOI7pjD/9tFYk4Oo6MfSc7z3VpwcWdevVxHtDJcPlu0L7qbC0Vs5xoREOW3zGBfrKv28XzKUyXNjAs6iBXq5EnUN9L0aCsdB3zQik0I1239oMtog64dnU9laGrvLtcj+PPv4pgAgOFCm1U+tNBqWw0WNEEG98pVebkpPxngXiDMy9TFsQhsK9eIdwPYqsr5r7XOwuDqTcnFaD9T2vZyhkdFj20C5BFpXLoWeTSt8tVVCjVgkbTH6bdkrHGN/G3TcNhmJ/InsDWMSl5EzzztdpSdEjOq+NPJ3LVK0Tvj2pMXXJwbdOH3fH7LxIsRlmikdq1hOWC318BY6FqCmBjBuLIFDLSgGp3S/4CnnghUnDMa/WGhV3/s2EktfN7rXGLaoQRhZHZ/gIyxhMKfVngPWYjF0W2grbVsUEy+kO0Jlk5HbPtwgiI640pw3F7iGpzMvLd7TCOo8E+5FYmkHoFszA0y12VKlewCid1YOmUW1fl8uUinuXFH7TzvAH/mdWLrMs/PHfTkO+78HWnkFN6F6kidgNJTJnFTx1cYKqDaZ94fEYeSG+e0cB6PhdNWi1gIc9W3vdLGGPQ7YZFxDtnFqbqiOFRWwcEJ3AVihlKDKpArBFkelqdK1ztQAijzXVU27aZtOGf+TJ8Hs+awt2qTiUX0CmBpnJiDlaD2L9RvqHyqD5gXU46hHjCpgmMICjhEUl1pr+tRTi9NU1Kg7AFkiIW1Fzr4gAwC0QVknS87QcCkWoMvJ1Qp36Ztzetop5Y9+zTOf0PVzVH7PVU3ZMOybZsZEArBlqrN7ToNU8qQDeDuRFU0nvGIJ5sBoD9mupQ3btBnl2ZKaALPStik8IGsw0jySpMUr185nbTUu9gBAaNen/R1M3SiWl2Pa/6IjVMIiYahjAjj8c9Sn60Tt6rPfY5qp4HbzAFQ2t/QCMsU50O/ahOLTpoMM/NX0FcsqaxRaZxnu/KiqKhb+BUwy+1UOmnZEnzax9jJqOX8lzbHX0wPbXvPRfveuWQaYuiaYtRqGyYyimrFUaox8cnxTtuqiDNQVhlxf5DQHahV+g8GmpuyS4+Lix0JjknjLPXEuYuZY4vmfoUH7nMCmHRzvBtfGp9DidShncKVVJD6uPaDRxKOEzmHQDn2ukqg195EchNLXvhA1LC7xR2m4ZFvio/vAWSFMCfQLMPG4zgDiJ88ACPrH3JEzC9N+sn4LR15MuyA9O9kXyJfjpgxhH3pQLgInZQs3wUohHFQdPnfzvk0x6E5NfZut8dAOQERlTtysN6RP4QjU4kiR04CMwS+jCY5ayKilXx7yskl6dNaXGEoJw/SjcoeBISEJmDU+hszIs9ftOie7vOJ4p667URieX8SPn4kOJFJ/LHG/BhYpme5khx3fKbKBKUv5tyjyq21GQtNUVeKQkUWeelOTSlL6LXz0YPUy8bjkVDPTSz7GScVCx7vZ6LWtIhwUYe8E0l+/nmpWW6crSU/wBVSWyxoizpFh2FLj8rabjr4LVPT9LDPweJZvalhl0wIVFT21aERBkVT1RmTspv8Ad6JTPTuvzsSbGDaTtiz2EIYZL/C07GZoY3AJSXgaACv+TrS0SH8DqoLX4gkXAfrnpQNz3veWOCpRbhRg3xkurxIcEM3jcslsYe/m4Y6tYZLzvDqfg4q/HYhfbmF2GzMzGNanMs6gEpUQK1f63oJNVnan9KFHsl7FNYGZcuVXTTc7Nw6MUMwMjB4dDCuArhUvhbH4QQ3NhTbkTKF2VSfpaVx9G/bb/pUrhBI4LxLTAPuoQBpR/G3Q70XNAqIkPEkqCgQ2sT82LvBUuBngUEPVmQbmr7gkQrn41JCHOk96U8IvJY43AT5oWcPdtX/6UR5SeoJPjIOMfZNUz58OAXTPs8chG5D9s17RsA2zyckywz88rjghTiDKfmkVhozwvgB3x/Lgrk2Bt1gpYns9zwsTcRIxSiBEIHVXsVBBKNXuByI6IoLqjMTeM+f1Vh0VTqEpcXXOIN5MyS3HqCFPl4J9eiyUqjeDfPhH+3ePl3rGL3n9zZLC4n0k6SD+VxMCsd6dCYiF6KFoTbVYHMEIHvb49ZexyB3YYka4OQfgEUTjmfCVtF0JCD0tbk58RDt4K5IOVNKxvvZ1S7AjHkicRXTvlOGovlVL1h3UC2lvorr8lvXkVP8AdW+L1fYFdq0YntGfsKbSmcatRbbze673SWHn1H20+JDLxblQAn7XKEr5ja0N3kX2we8CUGal0v2fAV5z2OKgRMwd8brXnSSfVVredWi5wy+bgppA+uzjHOOGqf1jx+GXf0dLRBWT+GMAtVcKxtDH+XD5ZAqEM8JDr5XWpvkMm7KeYrSD/kudJtdau5rzxENlaJzS3s3BpJhofrcT/X9a375usIZvyvtaDonN/JaMI1wddU11pwDPQR1g0rIIk9kHPcRTWC+MT6Njl1GCRSuacPWSNTBVyUi4OdeUalqUu3kpRRMd2mNd3PNhRtGKCAAfx7knPVwHpWgQkcOMcL9BVrDPViSTuHwvArPuyK6XnrC6MBUsTOdfoVK2pwQxJDNeosSotA30eyQAHq81fybcBvy7jR44wwi4naBfL96u/1ym09bjFvImVxVSrP04Wddsc6JDfXBM98jWSLiMwAbmrjxh8gHNxUNQdesEM7EaP3SMgmqUilPGQGYcN4F+ddpzZzlDSgladutrj9Kdhrf0S7JhYplySVW3VD3wdUARPPX3SMawEF/KRuuOfY8rZfE1w4vFtRtWhxRrZkYpt0o/qIxGuuUORDkmtVSP2Xw/tCZrJJythC1194AlOTRzfVjZhasDK4IoMlTxw8xazZB1fzFjLc8GUtioecR1wxjf7sApoiuioiaNGaPX6mZGG0vrjYUxxPpSUx4ufrVc+liz3Zehsu1vhSrDcNTiz/SqSshus3ZkqeLt1OyHfEzvZMo8b68Ejz6hnpmPAIbYtg5/dFs/4qPx1o8ApOsrSC9OzGBWqRLztFa3fg3AuG9d4arlhv3FkUAiF8pVADrqmeH6uZb4nU5syygF8T51imvzUVJggrCAhsNNrOLDI/PPVddetJs2CzYFknR0Q4cwpOB1eXiRum7cA60JzI+Vk2S9uAiWhVqNVR/v53hzp4+koXZTog3vwuP5OONaoZ+cu3IFWn4RYcxAHXTtdhLuPisro6S3qkdaTN3erQ54VwZ9FgoPZxb2wqBvO8NHReGEB0Jdouyp8PlNPgoY/PFqkHsORkIGA8FNpvOHdHE+YXpZ9o5gu9ccsGtfc+u/7dnHNXWCTSv9Bm2K+YmYtJxm41v/oKJC+ouovh6/yBZQmK4pe5pKD/DuFzPJQrpf44DhOwb/umDnoGYXoItnKyz6AQ670w3RgiLlnwxJuB0lbBVfhztHjAv4rftcpUOiMB8Hlm3gBijnBw6otlwDPODPRu4L+2uQlrpp4z98VA2PY6VIO3qarBiXDB8BIlIrf2VP0NNAcPvWREYNIvsOmc/HxtWooSH/a043vzdf9NlqKYVgAoTok3Ujy4eXbhwtBwQjoqB+KeUGGSzhL3R3dlp8s8i9WTffU1+G/7y3nO5kjCQWHnCbiksicZfTgBnsrM74TcZU1rbS0j4lXc1bRGhgtRPQXW2Pn12fto6zOmEj5csztclsYNpmzyqpYyfQ4LCBDgPsmxhBJ/nOUfoQktaxb6RVUW7NxzNBCY5kL6+62HMtXI7MOkaSUy7EQzFm5LEqyl+bcUunEkj1Ay6ur/cGZKvsphV+CS5TKwmfHIXK9RxeYl5EajBauJiZoA9QHY6KfEPaXRm8g1sK+g2KAtj1Xzwp+xwjqypcdB+8vN8+n0I2lr12hpRidXj2CcoB3YLVyXFfOrxHtbPYXMtGNrn8aVU/F+46mHrM2+F18A5V7eP3Vb6vhnHZONjkEqRvrkBIsVXRt3JhuoqaV4f6cNj1mHcxiwF0jENZD/Y3g2H55P6CQXVkP/J/XlSYzl+HYkxtLuhUG8IGlyg93eNX90uxye5ngprUcV+ZIieR7wg375jWGKiCasyaXj7UcUFmUwGOKSMLeOEeftwkpXa29kQNbct9j7ghrwWznVIbFcuTTyt+CY3H/lCX4lO+o4eJR+3vzDWz1p3opDQlNSoHS1L/QFScxW+Ufd0fBJ7yeIbqgTOrfuG8c//EfuU4E7xdIh3rylKgUysr2+SXQwbK9pFY8SnEk8/wYoVn1dTZ84yjEqbgMRnnB6q73KRItUJaDUnRvGsue2LYOXCYHrSHt26IrugDQIWIpSu2lWFHzNjAMmLZ7XTVTEHP822dnqodahqPPQZUsytwQt+zw83ChSps6IzZOn0UtiSjU5Mlu1FHrKc6Dt1m89i2LCb1fyON4qGAobfsXdiQdy0I9Agbe57pKVgE8LylKrdWCJcdqzBZkq93UoQHvo4sxmMOPVaWptDupfkxCDxMKTcNCy4tybWoMgJBymNY5HFurqJJZzWxMpQxneHjgFa9/mP44w1tz58dWlPZFe6c6ATgI3/V8EPnMNZP9onLqHF3qwzKAJIDi7EKQfeXiLfaZCmD6wlSboPzogCcSYEyHEoigske9EswFTVYNs7fwv4DgEMW6nDy3u5QlsnhhviWZ+ocPT2HxnbjFfNlqGN1euT1WM0ZG/WDPq/OCZywN5ytxlPQ/+b2m9xYXIynGFmD7vGaQBJh9rzjtUjI1xxByMb3ZyDDHxrs8Y4b2dqlvF2gCsw9u+/7RRDZY9/MOnc1JIF+qQmWwmGQINKTj/JfHlL6xZIZko7wsNdJCutZR6h2Zr1Bn/va39izhLe4ymG5QSAK2I4NZa8yOF5EhFBv+oK+VPr245dWAd70Q/xF8xMzc016yFpGOz0ncEMMvbtTHwZ6bd6AFQxoc5/J1DxXbyAHJa5pp85rOazCEN8Da1y8qShtfLDBa8NZeKulkVZIqd5xGgwiQxrRQuINwgv+MbWF/9pNXJYFfHnwW0b6POdLUAjZb/qfYcKAUNpiQUAb0Y/3MW8tCMTKkMGwlVCe0N2+Lj0cVe1lMrPkYKVDtFwLqWiqc4Lptiee7OqbWdnPc2Me8Ou+lTEgyLdoViQpVi2v2gqxNZlPuJvZAO6+nNmPRNYp5A6E99LMzpGixpmISZ9w0MQ0ibRvNRCONuHQOtIhRByvrD9DpA6zKjyazCokr+LkJYCxtb0Fiaal35eT0ADIgALlFviw/waB1Hpp4Pbbw353OXYB1s/PyY1nMvxJD5AtvE4a3Ww5Rigf2Kb47dFhRSQtwFZbHwY7gmt+fLmu7MB0E6z8vNYvN+Xj5kmkGkxcofbk5y8zTYj9ck01HKNFyg2etff5yzZdV5Qczj3zPDNWXnB9qlWmcOfrFhvpzTfQykQeCNpVYoFLrjdUa3wfmHdairBdZ3+QeB44F9fx0OBSqfpzwp9GlG0VfBk/5kSgESvJZPeuIIQLxvjNWX4OHk9faB5HT3LTmsCj/2e1De182Wj7LFRGyWFHvaSrDuplr0uxoQu7tj1NHNSvhVFGh8bq01qFzqG2FpfxT9yP80ZMjjxFSsKJ74iaUpv95LVwyZDhfPbirpd25GWS0kBLuPlT/KuPHkk7SWHQ8deCPRNCx+ELDM4rFTrjj9RQ0+SNs+bScj4b7b1qjKgqV9fJ63co9180XwwZ1IGXMaBs8Edx1ovjf58wxLcXv1U4hAyNhkWm3l2VFLeLbt1wqp8MiKbWZynXxVpO9WSjAFKfebV3IZH3yIl/NRGYKkLAfRQEamGRYKKdCh73i0rCfb46Ovt19WY8xbs0k8OK5LMgy3vQTe1oYgZF3kpbPVee+xYaO4zZASPEZQkkBxJX0oEtdpY5ta08QOPREseCjJEdfY3wt1MpOoaU3JDu1xb7h94E1LODTjVDpY7dT7U5jxwLqYyBY5HBlkgDMM0wDhJrSNAGyuWuRmpJvH6ugMjInSBdhakzj+Pkv+eUus1oUqwp+jsLuUTJOXsXnDT21p/gYvGP3e3yUN67cQMO4w7/hpaKu687v2FMvO5Alastr3MWAEQBEoBENftzKoDvfmziRoyzatLgfdpUq538OW8qnaRx6+iHPGPCGUozQt28+GlJFlv9CaNJDMjxjFC9YvtjyGNstquHjgbC0vQmzce9JicqTveG0/qbKrMayzXzyvfjrp6zRMY4WO9NfMK36Nt2aw/WnRfyUK/H77/tEopXkGRid01Y64g+N38ZVqpCnrk+CyLvQZuAPhGnrSNSDH4HveFlwuX39r+WWnMez/DBWhqkp/rX41RO6Y87jSdLZPMVf66NuC4Bo/LnL00ef0YXRlukrlF/mWf3VAx6Kw7FgrSTsUsWuG0Rro+RfFNdqrOwQHbF4sU0icHVIJbHVnARDWclXlQDUstEdGSapTQK98VbGtw3GzUGAbwN4WQbqH5m42rHrXuR2hTVo4/lj1Kc6CWSVrO6e9nav7/K0lnoNcC4JmJxuk0N0iRNHVQ3IlHJHEe3y9QvhKrZfhtnZ0wmsEJYfdeMWTHSv1dXr2OZi/ZvDLqwGvX6U4Plem0Cc9A+DbqAZUvTewP7iG6VdRmCFCXI1i/2uQ9IXl0wpKtgObleW7uIvAGRvYEtqj1X8uKMW+NDHwaDJY3aois1vKK2jLCc4uTb1iQ/TJe/tPbNMwGa03BkFWCvapaHaTkuaBySGwUozlnn8gJa7V4yEHTWaHgF6N5DBlNQfY2A+nYVL7KEPHZLU7uglF2nmncMtXCccMQbsOx2KNgwDnYMzcWMmlsuvT9XjKLn1uB6nCjhtxfzXX2o/9HXzWJgVWBvwzM3L055FHtJku/EqXK71mwg8eQsvgqBc4pzHuTdyNAUS3bnKO0R4JNIcAxaEKwknirkhp6djBm+gJVLZ07wEdzED3zTt6+DEPpljfXqF5fZG0qmBzvlJ62w1XT5Z7DQLw/ThZzTG1DmU3sRQ0UVuqw8xl2Zloy2wQGpOxrVX8GpRAJGnO97SFyGqO8JPqkgV1oFuIbdon7MP2vFFJRw4OrGx/hW5k82LJL+BlXKYYxuyWBxqPDR9HAmIu9wdfFQxUkVW+alMYRT/OiWTxvWcgTUZFw8d2dKqxfwztnjuur71vYrBrXkQcSiYO9I/VOAn4S4kA/eSWHNIbtw/Dmnegnbrp6uqZzFhpeCTCwh62gca0qZGoNBNI2JpM6P7Npucs+CIYVqulMoRKVZB5ny0C9NtIVAADaOPuLYCh2JiqqnbONDdeQIIM+mWyrbjG7JP4KLxv6C1DuVQB4THEMqWtQqLQhs3g1cVJmw9HoXi+/cuyK/5SjUzZXD2ozIK+c/2/0cmY2UhtybtO7ZFHd+oXjXra0vq4pAnheWd8nDfK58n1wkb0GMnGYmzN36CXxpLG6cuIw+vGpBqNYO3qrL31LwevkLdVDzSdv/Eot/lWOf8NfUkc3WL/2EnQuDM2MDIV6Hnpt7QkB1/Z6F+AbPiHX9aiISs2a+fh3U4UUlrRprFm/VEj50YmX1WtwUF4e82guJw46HEbHUVKHV27VgtOoMx56eX31VevEE9BHzYT0MdG9T+GGKXMVrJtX6Hn2+FAPyYYzjuxJo+e84OzcPi5XgyeO6NHXQAOlV2KCZm9It5T13/AsCWOkgRewGCWBxOZSL7jEP/jXrkmUDxL1N3h1TldfGCtQ/fbPOu9kQ0Mv2/pZcCO17H2VAeSkiMFsTUEjyZa4g0TCb2nVZzo9o11yy55yFILircV+REl8EYI53gulMG7062MW2aTrVn8ItkdMb5HaZcjiigBlLYmGHeyiUvKcfhnzc5ChKkzXt6SOKN2l+ofgqz3b6pNuB4B22jHQTfplj7ghUc1gJLu0k7+7GXscachvbfTOEpT8sVCmrpL7iefAtTPdqlEhTkg6YrgD500f2dYkCHWQ01e0IxyYt9O/XfxiqkIWE9O76In41z1HejZ7XELnwYWQ/6bt9Slq82o/9wgwKS1uDfBYxlWyqPfNuBo9EUCX2WpMAaskl2rlw/tX8TScLV40m3n0htUkC5mzU+n51k4wS2ZGyby4pgQx1KPJuz77u8lLCgjziGxjDvsvKr2N9rty35l/O6Qzn+IyOiIrSSzaEi3tdOvK10HIuXuQs20HILxUHUydVrZbT4d1yZAg9VuD2fcvLvrOJ9f2JRBnAo3PmR3rEc3RtnriMfbLNHDFmVa7z10iI30WDP6t/xKqUH0/luDjKg6nYMDcq4ep/MnF47cnowgELIHBU+/GfC291XeDqDOqlWSACmhmTUUMXfoY8gnzIP8O9atY/HI5DYawwGXAI1hZuAIzXEv1E5GVHN9Yd75tdO78vOl1mPoeEJ/wsQthCo0FHSCAj9oZrxZmYgn/+Q8F4KeCC7hKwFl6J9diwvuYPaQHb6kDRv8/JSTUKqeCld5BzkKmSfix7M67kGOs0r2wB3VCPQH49ak6bsIDMvCLbPspIY8qqeFPUqqBzVNsk8J2siTpnwv8Chs7gYic/MNU1ebL/fsjGXRw0u4kVx0lnFwmYZAM+AamGLrsm3J+c3LVhCgqlIZI8ZGmINaUkWUCc9V7SI86Aq8wSzl20SMPuOd/fESGeVwuKXgcL3vdiaqQwlVv9sM3jtKot/BDEMrfTTO8OVRgS2KsLwOI5rqKlid87ZtmS5ul1XOvyhGJ0UOeZl/pEySIhv0oh9036FeVk33sAVD30cUh1FQAKi0xwEJHr9iMwfpRVSYsaU6+ffLxwAeeF1mI68IKSvC0HZS0bDlb4YtMQ2vG++IuIncOA/JLEBh/mdR0oEBheZTkQsEZdQQXgE4kqwgCa0Nlkii96H5IgKZRCleMpFxJGIKk70kXf/qFrdFfjSeFB/2WXlfYO14Blj5tFhjKmI1tbGxsqQ8h3k0uxyIcHcd9IbpIj5V6ekZkVhypiwT7dY9CgK0w0RDAcUoRMvW9V0LHtBHTjUJhoBZdHEGmyM7Af2F0c6zNCFGQxnMPkMxjELvVBBC8A6FnA590Tw9q4vekbHVVYYtUzD/UUooCP0Cx6DlxOG4V7xIobRSKxHcvrzzAIkFRwADo0OsqagCewc+81xDqJOyHtAX3F7JQzIx51ipB+ihFC/sjQXazphFqkqLY3DPkEQdCicqqhSRkpWFqwiPJzAoYZyncawErTQoZ/JaXWdBEJ2kuShokSQ5INa6Dlo/xQiocRchs8gqb1sCvFLIMNFj9TqitDpF0K2tKO7K9lKyi/GiSXR9UlJ87sC74md5wdgfMqFYo3etD1u47Y/wUW2UXlSTWIZCC77T/IQjtWm1ccXPLsxuuCXo1f2W7YJfTdwqPnodOn2lPQ+xZzR71tCe/0uminguMwwwd1QuEH3K3z+4LdYnc8WDS3Hsx8J9eaB1FPoWELbWkIWvD9sto9JxM+yxa52GkNOyADGlfTnk1LLiwD5hb3Rj4OsP58jMXQ9MxHiGGJv9A2vHJB0OWVk2XyI4xKyxPDgPZPcdBmavLAbQiBlQxplGhpzbdXQhiLXXK6vATysclqWdcCQKCt2r1CQzr+r6JIAOmQScrQjWXkE4ytCYcIZxo3CWCwc3sFpup9/hfhSiWzgD31xN2W79yyyiU0egQVM0osLH6Y9fRybOmxSB3Y5F3kPaXptWzW9HZ5mpZR/a7Q/D3V1paDdg0UWummZe1q9CjSMwihTvB/Bdm5GUov1O2EQeOpS/hOBh7uwWW14bfEzx3kAXDGS8RTdUqqw6IaHl15ff4dbj0vJ+G7pu/22aM39Ao4y8LItCd+lg70w8GFpu+yolX0gLGFA/hfa3C1Po8fPw+HB8XAUAt7d9zkKvR3H1692L0tCH4Q4Q+r23Z09nExEB+R2lkTwkBRKo7KXcX6+DpC6BkSQuIZ99oqNRoycmoGWNULrVtskhlNZ0sl5VowjV5bBrBNE0lq/jlfJgldWPWBA8vGFtPWDVk5IC4oT5ISP+sqKVctnsTtFRRQb5lslt79e9+LVGIT03G2yR6LZ5vJr6sPIDTdawP8tEgJ6ZMkeouvOHuUghRZL/yg6K6WqquhF1ee1p/nuE4w0B7q4je1toZMSXKvMwpgyke3gJL+rg54IEhIWE4pnXql0Dda+IHvs7eiFZuyL5sDLUVH3xVIuclfdCwChWNitMwiunsx+PUNR2p0khFiRIrF9VMSL6c+3RRKdwKgZoFMJv1By6JrHef0qWSx0niBYxD6b0khOxtCOKlsZ5xI47l7+zO0Wi6p+KTQY71MnUeGQg6/ouTfla3iQ+g+1FA6trzJrXCmmiyeUe/+anKnGdV60WJOjcvkwuA2nhek2sCxNq0/J8L0TfrauWHM4+4JbZw2o0RpGj0EmScIyG6LDeEalD2eio/ZQ2h60HNjs0XGW08od971h7dzbqG9nxRETy+/uX6EsXKqmI7hNgBedoSzWmaqVPq8GD2aHHICwGDtHo6nmuSpg9evspDUs9PIUodas4U2mVX+mVSXl3Lhd0SI4vCXoVpMmW7ZpcE+PV4dM7IzK2jbjnU9+RXQf5H90IUYTyx1ZwZsF0NT2S1ted7g9Iy6gxp/43BG5pkgsLlT/y7pbeHJbpXvrau2Z5pBWCdvItn0abjYY+lG/Kr+m/bDsNdt2BokxDlueyTPOMm+S9e09mH7cpz4xX5AizpwEarfrHN0Uvwi3SKDvjuohraVS+sPatpaYiSHXsX8ces8RXN1x+qcUSygvO73LYM4uzfEHscQ0w/1FHmKk2XiJiSS1oHQNeV9rAwx5Tmku+01JwKtKGTeDZsUICAQvnn6++sOoqIa/dCVujxmILwShAw3Tk+gH5585bRtwazMZoqQhCpK9mdZpcq/PcV2qz2AH4V3dIhZKqCR2GoeZOiorrWc/7Oow/afEJv1UR7uAInpmHR4JVZq0XbRvIlnUaGHODas2dipaSGDt+/B/AzSazn+2zouR3EtovnVLZkUYhBEdio5nOwaqgBmAIDjlYJMyZvDaJ0DZ8PsDxFcw/q9zdAL/086OHbTJ0xksLolIwgtEVFHcD4ZBlvgSxhwlzlqWmycsBOFpCszJuTU8bCrbuZY+2P41MFyJjbqsi5dc+gwl6XmNEuh3czvfWSIPvgyhxk1v6t9eizTsWz80TTNB7wewL4E6m5heWli5vWNnh63GtK4/rELoexoKxxHQzFkMpEfhunDuZDM/JR1m23WyhYpu2eLatzwWM6EsYZ2VwjC1lFTfivboe70awYXKhb//P73xn2eFSyZCsr4qB10ErXWrLey5145MXObcb0aqRKHuo00mkymxJgUWEXR4b+J6QB4Mm3/dzoNce1L7W4W9j2LHZSnytV1AFoJEQofR1SOMDCuSRXvyhJ6N4kGIAPKo2XNh7Ce8nJKKi7HNe7nIhI8ZNCYQg0VjArhbOwcsdjxgvQrswySWD94CA6Pr+Vak5FpoGgjVJto75slAIQOV5Nb8I8OYthaiIqzvJa9LwWWU30fGOcu48HcKplJqnfbsMpAfPOIO3uy5E+Md6kBQ1ZzG0VK3mpX01NugMw4mGdFCsQoZInZugQuukgEYNaB77PSlgfOdhrwELQxbPelYUECwiDxz5L3z004NNMhwO+hImbh/3Cta+JpkXkMuVUId3JovpG+OgNfZLNHKGSk0CWwhroETq93BsDVkpq3SyGdr5O7Z/NLd2CSA6as7GyF4lWljELB4Ye7lJGAMS+OhBhXg74ZnKzm1rdPQi0pgv+5LEIcV1BWV2Bcv+rGkDS6Hz0vcEcyuZqVqDhK8QgzHl+6dQin9W+UZb6u49N3V1U9bqF9E8d5KMFMP5Zn4OgtCf/QCizaMlSqyZVdzqhXs48ZLtYTrHQxMFfhGXb6HvC7oTTwkBTNJ7EXlGR28iSnFSO4Rs/ERChrPnCeO8lsW4tzH4AbZXRdGdgk4X2E0d1agfi3a+oEn5bRzkCrWK/GxKho5LWBuMJ+Os81YSDzrPMWi5hIoU2HyLH0plq/RLOwcy4bvRhlWFCigN5Z7NnaPjYg2GvEpCYgTfxFfazlQiUUs6r+LEkMBtI/LNtjp4wrh2Obc6jvirwV5ntUGpKEN1+FjD0YYR0VlEmyQp2tYZwTn8hUP/U/HbIxSYpx3zlf7U3w4wfNUYpNcT8/gFt/yj0R8dcEYfKJxt9xb9qcf2v5PsuJh81CP0LL6Kl788mg139fa/1d9xfiOoe4NLU5EnauObm5IFWLZnZLPQJg8G+T8CmkK+qDCnPzMOyJo3lfjWGeYfIhL7z9x+nW/EkVnuE0IuXYQ2o6EUEN2T/mYotVlhR9R/bHcqdIamPN5rox6FJGuhQiD2Kvfs5HlFmgpohWIyyIASmQtBC8BL7q1Lqe5mWh1PzJuwaOCaD3QSQKY+e4Rux6kKvol3Eg6a35BrC/J7sUMKHI6TxVMeYYnUrJbqBe55DO29dLJ85YruYpH38lIqXlrf3kTnjOrYxYfVeeLvn2nEWhOH/K7gg6uO2v71ytBgQZ0J+jRQhG+vrb4vbODL4ut3L67qLo8dvnP6AGzqaMRRCosVxbp+qnoomJwFHGxz8dSw/oW/+ydsYhZPxaAXx3D+z6Kiv+i50BVS8wwvDOJYDzNR5iDXMVgbHHlLhQQie/AlwNat8SDuPUO0Udg6qFhTI6u372QTnsVbSTQP29UNKzhc7h4sWNzWGTVopF6sbcrtiFwnuhNoAXrLy3XJMbErG60emVZ08JzCrkn8htdYkBZDFR0NcmqQMDcCWHQ7Zr0p8MgMb5UMTtfeDAamA3flhjpxfk2i+4kkqAnVd1DANT+4XCBohHsIcbTkVI2/IFXaPUmD95YtqZcsvq1sATDAVMXI7b+BdA0L06MKP3NZ5iXqQMYZDsuqJPwQjvDSYDrWQd2b1Hv3N45kwg4CxCrE7WsyWt2WTOEeZvq4Zjzf/ieR56G0aCuRAj4FcbO6f789MICH2WyxdHgvSwIPZmHX7gZDPD1NeHUwJwyvsF2t+puWj/9FI2Og9PIe4eb32QSO3dmMM5wN2vNIhqEZtwI2E+c0t5/Df9BvS0trd3N2WBRvPAmSrpMK0A5D+LDEyJUPnr6KjndXPmMucuWiTmYfgcI5PPgoF1WlX/K6O1m+Tewu9nWrNeiO+HTvBFWorA7RCr4Ao3IYYTlGfw/osm9RsTX80e5jgNgRiEQ97X+cyLEFFQ7lXQP2DIq7AuQYhNLReYZi7x/cfK7d9FbX2a+gMfgax8qd7fuCJsCwdWp2dSvhWvlqRSZeBlAlD3zJYC1DpZo1I6t/fBX+qdHVYLJXrXmFlLZPdjmeVJPzK7XHBbws5Y7X/0LbY/yWr83kPnmkBFQgtukKwshHochJfjy2WvOsRQeT+9zIgM7a3xCMAg2KQD80sZx/O7MMXt96ghPM/oUqT1SDktBFtYJFXXOeK1eSuZyapNYf75XThATcUNb/sbx/b05/HHEL4Iwyi6a9JjwtOTCYcklAOrZbRnRjDrND4CmRfnwdvVe3btNA/uZ58N69l5LR7N3djMgNMk/NBBdqKaPWQA9ng3ybXOjytXuPIJ2IXcv4h6y7WrMOQ3hD9cnSqiKGOS2dkcKELZaYUepxWioU5yjxWmyhXDK0ueM5AURAG3TvtPsO+6OUak/wRmNxtM5OYc8IAWdGbpsCBjs0o9hDkEmuzPzhHcyACla9/7CKI2a1MVoZL2XBXPrXZCokYtjzFfag0tmHrVNAQmJnlNS4alW4dWRh1+2YMiSsF9PxkfL8AnkmkU6ebkxWMOFhuCAcAjmBaZQyaG6ermnfppchU7WFr4r7YR+ADysGesBe/PnKQ1HVORWggXa6+Y7R/lXk/Gr/TGjmAVRgtvwnPgX1VcR7BueojzJj5rD4ibyeGcWKN0tFNm7k3EmNZz7BDKN2Ajx4k0x5/cWsdElfm5NFgOBmDWbxJ8/xOwpUKbAS+yQViIeQo5kg+4dRZocyEAH2Nlu7bYJMw3W9Om0/Uh1ZkP4CrNZHO+LffuM3miiUVRNSE7+AqAdvBSrKTlirtUWRi3LIF2YWAYRfI7q5reluOPIw/FW/MviN5mVcXmnh+XA0rACHiNR7gF5L89+QviNNbgG6yiVP9cmBvFc9SotTG7eYdrXNo6k3qoePVtqWboY+8tiGyugPc9KXrxCdSk7sm0IRo92K85wlvMrJrsp+T6Z3ZRsTlRwd4rYQqFnKVbbbv/UD3BtEK1cWd+xBKxc/XCvCoNFcTMVzK/KjBAzk9o6mNCo7dYzSMRYx3WjoPNoJL8zxu2v//w/qctIJqkdfWs0J5VqSQrJ5pye8uPKejZHRwvVvfr7Isfwob17RHBdi8aQ8/TuHP59Jrn/JcOo0nsbXVHzEsJ6zp1Mq9Mg3fWLJzc8OhAh/YbftEakWT9t+SdO1L0yvAP9T2bubji7WWRiPobo6ZGKdwqJSIKIyciLmA36NjjbZAXHTkEKh373E1gpLf5a61yKzSAmADjiHiaVOdVqAKiyJzvMBkMBL13/0Uj7290IojcCBIzw2raU5Glq1Cw6AmGIK+Mcd4Ix3YRVNbBGeM39vz6af+WVqTnthkVswwseEmSbWcgCU78DV78OpvHBZAxnfeaa6BuU+aiPloxBrGtWPZY6FF0zCDqyb3m/s4NXA+DyCtghs/+km1W/77eOhxy6xhAoHc+om972ishqhSoHq7ntYtNn4QH/npZAJo8iTCXN3akouuq8w5fORtJ2tBmFTLLF20R6si5NuBMh0PDdMM3OIHM8v+ykHKUSpUl0sH0bJT6JRzalR4GE39EkgCPa27+Lp6y2Zlgbzl1absSbpKeqgZQnH8Uyv1cZBKtzVadE5loUlyzZMxudRf8jR1sR3mfdfY5PBdZbR2rppNuMzDuks1tUSpx8lCrWTHDda9CgZ0LC3kF3JvlGPfOeYcp4yYpmHFy8ghQUt42a+220oQaFmY5850P597oWgrJtFkPPpcuODHd8NTrp842iEmbuAz91yuW/y/IAmUdZIZUWziRWqKdaOg1I+0pz31fmrxgCxrdDZ92WARdKp2FGeQk0xpMORrtqJB7OKiuH/Soo4NKDcjBA4Ks6mwMuJ5f+lvybwkqRWduj4/ci9EwRRxu/WCAalFSsI+jVL17EwQeWXj71RGS22h1EbYaB9c6Q8AZ3liLHGb8pyEyy3KT3GaaUt/N11ahE9o01VHbtZxZlFq0JYuTV+7iz0sZGpt78IlgWzXY58tBz4it4Z0Bx7VS/y+lYY4MejSWocaBxcnj2myIpFsREllOELqLIPZBFLqB6zLmwRUBJ0knSz1a4Bs82hyb+sUvpqofRV9LmB10qsqDEssDBvbBe4rmgN+2H4/SXir2UJM7bKlPdjHY39NaS22jtC93auD9IomIgrkxUgEURUYWqkVH49X69/adCRoh/+R1MnmAN1CQtMFJlr2kBQGsV6KkBrHC3h83F9KpcVJRQWQXmvtYai+3wghLwvYM/0EyUA75BPxveLwwUmmCohorkbJGPRop4MDXm5Ti5YstPd/lN6uppSDgoEo+cQr9Q5qhR389oZIbzyw7xiQzdJc+LmKoLOBfDKBCVaU1V4UPSIPeqRu/HpQzx4/RQCUPxm9buxMs/5QHBzZ9uEc3I/1QY4vBgsiHpwxXt8qFQEfaGUBgyzfGESeRKzvLHTBTKTBnpJH359Sb8RmdRMZ3+B6kFJeINHtf0KQyiZ6lJcsdNxWbHPuQ2colQQeiqQ2o0+gSVYFO78gAFpOwv+LiLX1Puseq07peChs1kUsyzzUt2NCMT73xvFRM19WAf95wmdjL60KDCcK9dEMvj6mi5ZSA8/vOoKE0hVyYWItyha1+yNd+/uS2WC47EbhNQiduAhbZLJPTXuG4Lh/szhw5JJWmBP9rJ40Qpp1tgtJSTc3o/cop61y4txtDt3KPOS7F7PQrQu2+E3RpepEKkfW68sYxHJsVKHiuB7OLZI/ud3Nldeyu1jIljHg7Otw+yu6k1GTCXEuOAjBlRgw201vJVVSM01ioSmEu6JH/Bpmc99wF9qyg8tckineg3qr4chOt5o8cXK5qn7/lmuwM5WEm9rIJU4f9DX88f/+YNB2eTo0JL0mkxwKzsaZTjM7xN7EfcxrA8oHm+oJHK8XYB5GSYVie7pUi9WHkMSe4w9QCsoZnhzvibgnHm2tqmkq4m7mQ0NQ43PWqiKg0h0nJEzXuGIxorq1ceUM3pipJRRtLVzGM/wogiH6AdCB5FveJ3IGYIevnyxdbz3sTmdBuQQO13A1zxeQ1764bdkWPdZwfAhzf3IuHRnlxZEyN37/3FiumgYvyDfTpgq4g4AuA6NvW02MfTAklFjfthqANj+RXiwCUlpl+mzm+mz3qwQlsr8a+LehIK9osqrx/blDJFwbYoadsovIdVh8eJnDMFM7uY5mrBKGU3PrUbVpVNg3KtIC2ESoK7nWQQStX6PGidASh6tXnVveKCeqKH/iRyxDzDq6hGLw61UbLEikew//MbnutdOUdpamc+sVCDWh8SICheTB4aPhgGjrxXk4hhPJitXxQulOV8eRwapXPx0KXEb/q+XvLVoJaei5oqXfxVjBz1mK2xDLxzwk/zxVVqDqDQDdUl+PSaVHooe3n7aD3ZDo23q9JG7LbFn8ZNcOhRJeoeTqgsmA3FJPL3j6TPooKSyFVO/n+zbxxO11CJfdQanPfJWYH1TLP/07MTOcq8dCgq0S2WpINXeF2uKhUe/YTXWwLIpmcymKg6EZI21wt5TKRdIbS9DtxWP3C5k7/DEKBn9Zko5l6jSN7suXn3dS+XeT1E8I1a8Qe/XLmMaP2o9FNKGBEjKOprrs8ATJKtrnFczmrRc5o5Q4Xe+YixHB0jfF4TOQYlnUMazXiLPVKugtRL3p7f3NRRoyslmReqKWqtRv0vtgetQ2df3aXEMpuCpBWIAgbIjBmN1HZjPb/FrSkq/BG6bhRgfzRSwjXJiQcB6152LlL6dFtLrEIuRzwLw5zD4DRqUrymCW13exc4PdHoCgHlCy9ybHNMmbx/jaShd0rUmKPH7Row3MiSTxl1f1D2X0GPSOf3+wXVX3od2g1UAsSD1ANWctfLdy3bejyVaUypad3qoOnCxtt82wKmaWPvnjkSydQsn3oMB5V4sVupvfFQU2CjIH8xXJLiLGUrOkoZXc4u8T8EVFsrSnyj2Kb8elMv09dWiUX7ifCcYo7Vh21s6Omtb//yrZgnvuBWbtvm/w+goKCs6pwmmcyOAqM8zFoWAavSFK5bVhj4sHFWU9BeTXSIOGiG/SsFV3prCc4VTkupHexYPLlaIC8O7+1S9Yh8Ow2o6fBX3O/pxacp7tsla19WVAuth1/wqE2OMokvXzexV5hvHAgS3Lw2JZ3+IxVmKn5nx5nQulFG6dzDa97cguHRWwJB8afg2rzkFk9CnNyO7owbK1+0zh4fkHaLu1znXjaqyF2pJSVHxEOTwqza3ZbEAmmHqKXyYyKWFH/BTRlBuTMhAC7du9dh2COihTbAuIa/kiY+oMMopGdpvOru972htNg7BW8pRbT4MHUgEMBS9EPYM+exZDUvKS0ZadSIPNEf77GjuWuULAlgdGEn3BbpcRzJ3FOSX81h4bmh1eYWGBgt46BQ5p152tyCPFwaa+6GgBdj+cnejtE44nFKf37bpk1+uc5+viYHlN4Qm8bwrZjRXPT1GlC1+9TZ6IBNAI25H2DYsrSXZ+gy7BZ59mRBaIejhnWfIdCStR4aE6ZzzzhrnK/iLLQST/JleD8bOO4MbYPbt63RCzmEBORxV5vdHyuhDqiJjKcbffEc999vc6/FCulPN9UquyuDdvGwuPM2zn1M3xy5ID+rBi/iOskzXH1yyW+GlgR4o2F+DymfIoySSlwGjibI6ffgU9ZfmcBq00B2qupmbnFmjgDd1KAj+7et65Jy3fOy5lEMpMRLTaHS9iaBqL3Two8We4o7wzgAxXKZK1JbBW09uMQvvBS9iThOvoJXEa90CHXnImFXDh625ZYCweoh9X7wuOsDzvgFRopc8s7ZshzRo3SRXRgtkP7+METj6y7UxcgLbe1Q94Gmec3hujv+pwCOsVcLgM7Nb1UFAMDUL5aNndmfacBCIF4xQlmA8cKOvS0q9FoEws9So6kCfxtforWnrrH8bm5Z48hjPAJ8LKxUvia6it/IEzKTBeoX3VWF86u8xH9nLRXjvKrgHG47XXsSCyzgMk8XwnCu7zOEvWGyZZJwdFXzjQTRe/ZT7MFhatUDkIAhonrWC+Oc/4GKmXmcSQrbC7+Rb1e8t/k3QdF17MsR6cXmtNPqkiQ9kBXaOKatZWGTfve58i0Hlt+YCjr4pk1zW355rh7GAWQ+34RtrKS7fk1HbQWpzgY+5T5NGO9aqHaD7jzrLDV5QpeY7oPQcryGbKy8FZcTeBf649Oyy2JPxpDbsgdmajDW2aC3Mw5Avz1U2Ctz+HbAhxm4CbDjV4cDDZEfx0xvFP9TVdkcKzln7UbraftU+hSLYLxloExth0PUSwPkWBXA4rPiot3IiGxg5dC1Di+NJpIEp1FLpaZniBGpCv6M9ykmDtCwFbqsD1iUCZYbuHbCDVXXACi6sZUBpwjMnMUyW7y9Phjmi4J820+MV3sXAlZqDyp7HzXFbEv9AOBSJYmXq1HR32Os+wnVNALxffunNUDKvIuRxDZsx0wwajyk3H4zuXTyf43FhsS7qEIDEFStBoCeiIA2N0Bx8uzN5cSs6tF8yrNFTlXmy82ZW8P1aY0KyeYZS+E6jExEPYd26YRe91c0mAmMPG7Iqdu/v3sWaLnu8nOmuW6nGxEPTUuDR5V+joYEXxUvvUyROp1jqu3O9zgh6w28upTdhnXXou0iDB9G7UriWIS2m3Hy1scwG3w5Xf2cGV9oojTdLBxSGB8aNZ34xuSUtYVUUHz2DxjQzYiZ0hus7OK/G/eJDDXtOMrE5nf7sniEeHV67ZYxJTtHQXQ8bFgB9nOeYowUcXV/HzsntIn/ZyN2ow355IvJ34KODEh4jVbyTOM5ZD5rEgwYzZzwASJKYPjWtd0xcFYjZ0bXQa5DbuUNljp4VQ5e3EydASsA/VYY8jSwjpRLy3EPMsOwxubjyZsuXtOeU77e8ClJtnm3HWPv4PABwPOYp35pn3bIhHlueeAtfVt43LfAKB7LvxeoOY9iLeeocav/Cm9GI/7qw/xl9NMBEepOAyrcDO/j/3LQygCOQMFgvkOGEBqxo4M1v9009beLQHMPWG5/eOCrhXqWrLaWLcWwr/SuPGkhUFVrNgqCJc2d46eZT6TcSIDXynAJ3i10M0MT9uoRRhPIyCtRcHGmNRS1RDjGeB0WStBthU4euv2zZcDynFl0d5UiB1F8mR6M1nm8lsuEMN5XA/kzNQDcs6DA/yHNbM8ISe9IN4eVs1OKqD2dzJD7bfhYYPmOrltuYM5SFQh0hfeXkWq0l82AiEsFkgw617k4uR0nynZIs7AsIu4wz22Rb+KkTKmhH/o4VDJTCnwW9sgx3wXolTj9I84CgoqMw0auHOuRilPLhJJOKPNoj+6yoaR1M0AURMqo9WpYNt2SSxaBso4ptdr66n2LJ9+8+9vHEAA21ZDO317PEY/NTK3UoLmWht7h23ZF91D4tb3Y7FbVZZdhLz3akm9bZRp5fLXRHRAGkB/1CeqqAXerxAzdkmzIarbfWbN5r3qRaB4pJI6p2tZh45hMDX+HTtO4dQkKlV8mb4H8vW7JA4tKMiIC+L/NeseiM0mTRhjbXYJhB9o7EAhc0cKC8tr7wnGqLpnWQ5syqPsN/RXnMat4FhpJdGqA6gR8eTnFSHQOLFd7oKIipWqPCu+kYhIyedKPyyy5qqYItzgySQGknUOBR//rh+HCevTu8i6JAcofCsJHL8PBh+MdQ5UWKeCN9sTEYMAUaPpsNlUrvn23WdvACgj1ZJZz5we/WQlnmfOSx/NUKrGy+fkeMzdsMsW4r3vavA6KPu5vomz1ED876ISuSM1YHOmY+XaRY6UB568p94piqRUFXmxrMjrXa+qs1BDglnGoCyBcA7UPfCkAeh1Q89mMjMP4dye2z66emjROFI7uCq0Mh2z9ZdlfCHOCMaHLQvZuAncI95V5NAKfK5kdeGBuABVmBrWSolKkHNEobOSYuEE4uogVOGRMI9+mGrScleKXYl+QQasWTh36B+HLOsSXhhLsnX6EE01VE7CVlQezH3IYZcDQi53a6MnqAftyjrSlwI7Me5fkL6MkcA5bHIulfahHFpIB1aBGHRxq19eTXTLpz6vm0Fzui8hxcn1mvK7zQQiOrmY8S9s4Ep/dGVSQ5nhRosV1k9jXJuLXO9JU2bpu5W7Kp1FV9MVAZVZ4BcVg2YYg1ptjnBmtm3O+pltEqzo4c7XQ+V3p66cMEUzXrgYY1jYmV5AxRH5Rzw1zKiSKgJJ8ss5prvNQo0UIgxeEmZv/S4DkXJskwdLJAqfRs573ruyVTCHguDH6V6kNYuVLvUm1GzghpGXKhHia3c+movkHfWEPnw4jO10r0yZdR0jR18fmUsP8DmrJOxmzI8LuoBfLPFYPxCIvN+YVP/L3Ovn0tNJNt3v0VBvXDF+MnWDXC/fDzVRYnF5Zqo93h2f8tBv02fWf2B+9984NAMnQQHn7d+tDpCtFwhj6w5IvygP5txOnnBeXBCrpYwcTXbj7SIVedqYllomtQSWoyH3+65zYaxbWnAtaRiiPqB4WewJXT3D1xnQttrPBn/aGpEVnRmbDl7pzq2ZBXp1fSZqGI6rrBPxgorBddWNeXPNLvRS34YfzVDXnj1BIN1HnZY/iGoCtpepnSZyXOTAy1It+X3+lEN1yFs6sZlWHnkoWzB2kaRUd496nLoa5dYpcbi3KsYNlRoU8+RJ+5U/jKcBu398NGtpF1yT0QlID7DijBG1f0AFJ6+FndBXaLmje+jWsM3lZMKyAHPbTpmxFZSXHKJHlXv8/yl6M7Cf1j9I4vDMt/7adVbSGShLEDRYyoh0HtzWTpSj9mB6AxFXt2Ju9mArcN7w77l4xxzd29IF3QdmQj8CxvMDh9q/OKMGSoQOMok2L0VOmp5xY8gs6Ktz640w7qp6MItyI9ntfgV3BjrxxSKHqpG8+fqj69tO42CscyQ3pW81cDt5JeivgrVYBcG5Yro2c+CY4dKGbK20g+J4Wb/3IqigD5bTb5g7atEiQ9cTPMYeSIa1xtLc/xZS9/bT8qXY8f1xsT3/MYJawB1iAebms7Ks8hKuU4Ep5ifN4OrKzrh4h5j+JynfrGHokZmMU2s4gNuGN1kGKs48I+YAAXXqanLub2yNjQD8XH2z62gHG3S2IQ5fiNDXxEu12a10XHYcsQpcSwglVOQTysDu2X4VNKVzifX3E2s3M2+3pnvQmE/cYiazD/UHMrJHVh0ZqFsF1x1P2y/2GDrumUGuvyYD+VzgQyt7Ee69N7Y2cvArYak7ySBmnMEqSQ1nj0zXG573Dvepy+adoL8YsQyBMAHev52tapn5hLq9kD+VsHtKDjUdOM8hdTsVkgmhdsGn5bISbS5gby1ATEqFxSQ1cDYcABdK6qyfKMONT8F4SYOZ8+xbM7Ps9bMS7C11qulOCHzR84wvp7haE5dG3N426qT0My57g35kfu2jgetg5Y7FiiBiV7wGyihC4dvtiysitbHpqlUNIXZVnV12pt6iLYDc06zW1UNODgMjnki50nplVvt0qp/NWPFWm1LXnrCFbIJKMBwgm+wh0/kAhiEdKkE0ZCfZMSiWmrXUjcvu97Ia/wBRUUSybs9z9xnYqq5bEjKKAzXD54cxs4RezDgv6jlLDAI4RWICnhtX78ac+jPxgkvMmb45kKTRwURBjZDGAzugxEDdgHcIEk4Q5j6zY7OCF/hA3rwKE98OAnvtTlHyUw3vwpefUEQ9d/Vddh9F3EW0JpJ/tXQOwgp2bEV9pSq7dbrqICGhKZ5cNTOKr5Ryr0r/q1R70yXmyDyEeYAXIz8AoFquAc/y/F42Kylh/ks+YpMUZqVJynyROOy2m0GQB4nQQVvDtRgapCIoLKgdNoMvCwGcp5wSAbIlQ/0Ghgq1cH+Z23qDuFYYNNBMmOWqKK/xSX1tkGd4Cf7Y7aLbQa0HcsCZvltNzyvxpwtQiQFJ4p8FbXAHl0XG/cvaNSTvwMVdadzfKs3GOi1nTY7zkrTyPHErM+itLOcHRFooC34wHz+Kkrit+skVSvCUg2f8m/3I5HzCyIndctwpHnb83Qs2OLEes0RiM++g6nGy7FBMj4Vti//PWKRxKa/4jmKiyd4ksRmEKd2OhLSKG4iNtf8jSkwUIjq07UjHV7RVghFPF/uFKG86RYEgxVXCV0Fb8V5KRgXCR64+jeXwqtmMHUy7g6zBoSXWs5pv0Q0WIXSdROER8XOWRpYd2Z67latkfz8vga0C6OcJV4YcqsAm12s02xOOFrUfmquzL3MzTA+8cnTqJDiEoMCryGMIH3eyXPixhcLZppK1B9/TPACVfzjJi/CeSpCrGdvLnfFXEp7FH+odIMlqfmt0iBN/IQ1UrEDRb6TBUSZcv+qJLW3WjXRfGvPFzwyavjVhtmG5DWZBoRDkpImocqJrkF42ePj0pafVpNWiI4yP7H4TcxY+mY+S0vlf7e5AjGy6idC7Ddt11vV6MlCfIIjRn6cmmkRNGBONzPpHIm1dwkvunk0+knB54EbskEFV+GlKAX+F3KRCVo79eMRfN5xb2tYSmjaWbC3BKffhrREqTFabTv9VaEvX87RS5DEKE0vgm+33zuL7QQWaZeFA6cJCWNqKa7fs28XtFMK7ZGil6zJKs8g+hFVD/aIddK40JDR7DkEh5iVUiDKnpbfLupjb0wugrp9nx5XzLqTWJzpGFnMFTmBTm9GhtevcQtzQ4lt9B04OUr410VycLb5JKimhLPBWAkTb6JU935zriQfsTByWnVlIy4FA86TLbhVNqL01nxDvYBDYYFr8lhNHX5+vmnoLnp6xUDGdjTkyy83vq0KVdxPTMU+oKk6g0P6YioyH8bo/fvZAtMLYo+q90YRib48canuhWwnBpRG0LMNMKe/gPCqbsZck/jFk0zEHbZqDJfGla9QWHGH4vCNGtmpTpVxF0EBhIvNMm/BTSACk4WzpEnjjmAjnOLHWVR7CqCuMn2iof/zaOGzZwNolhw36e/xjkvRJJ5RPwsHEG3zDtQy3iIM/9/1RP4CBnqdviocn2aIBbAQmaHdPBvXQWURcgemFzRFeaIod2TNBmzHWb+t9k1bmplSsDRbbCLpZUXjmiFi28j/65saxIaPcpLdRV/ThfRVSN6ADo45ABqN0NEOhitsujUAbNenGpGH0QA2uwQdD0oy+wal24AHRVFFMlSkj/WsOTQlRFXeVQ3Sja3UvdPlsCiOe6cmFX1UE7nvQqz9rkJcTRxjQTb3Q2A6EfkqQKBIdt0GCiQpg5gyciABH8pkXazrKTJNQXmARmsgE+PQlLNBobzTOR+4HJYcgB5nsWtgGiEoJCfnvrCcIEk5dxPcKCxJIrWtarIeIn0m/H+5nsd7b9k0jDrNUmlzZaA9c5p+JlazQeBnmera2A1QpcALKr3K9GLnZmeFVlGEMJuK8wvnieJj92hse1k6sx6jTqIfulS0enL1la00dUh4uEaxRFQYNP25DDCzZLzDKkWlSlZsFYvOaBy9V6g0CLg1t6ExXtmxBD3Rd/4WzdlbetjNhbx4QkSBETjrS3zvnMu2DtKGvEGW0UkUxS9n8eCnYli8l57GlO9Hz7kmA27rHZ/zv098mCX4sfv26qU/t+8mWVc1MtBu5cn1TQj+3UdEoV9DASELPoTQ3M9IQQj39X3kTeako+BBWoYI4mzKq3/G6bZe+zbHuXRL8TMrk5OZuZrWHrHe1TbTAMj7CuTntJ2gHA+xPv1OnVIcvaKxUxXXrXi68tfhCFfbkukzCLBxufRAphy9JErUHLRgOzcIJRKZDYv6Vy77KjIdSO0pppZOUpvLWQPLe+cH4oBG4DnKsbEbQHyL09DV3CidhtctQna7ci2Deh+LJnadVE5x49TzmI9MhTOZhiTdZ5oV+A8+BoHZDiE9RORY7A4xoDX370zL+I2VFvkH3sCWvU63LBlxIwtfMpMGuC6AP1gv/cnXFmF897mU+DKD0RKrbk94ZaU1QviNp6k3sXRm4T2PyTcQaO42Wge0W8IlFcrFllDeIl53PU1SpWLvoTxFYdJfhmO0Rh0xc3KMPreTvhSxPCIqUSBZfh6IschPWWtU+RXrmFWRZnElSTjryhHY6ronQYFEY7T2X6w8m3/QSZHxsDEEY+sADGPkLwAp2Oxi03tsmFNE55okSTVP9VduHsV/UYLMqH7/ZIS7GIYamgSvmONdhefkY6xKDbUHK94Djk80DGJ9bc9xmx94huSNrr7lT72b59pIS3fgTS1IGRnlk7UfVHUesXxayrCDnbNGkDBQIvT7H0Bu7RxnNAWCnGkcqQ/XOwwbJqTBNBx7O8BDS19O1WcErDQKYYesE1FJlzoOsJmpLRQM0akbvNoAZ0TBMVysy+uPmIAUSmh8jgzQbzQg18m6agJ+9C2T34/hCEK7561pd228FGcWn7bGvWKj+ja+X1r8+HDw95q74rJ/QGu57af8kJEGrUq/XmNKuo7yISeItHILXD4hIb1c97CFnH+EYf5p9Bz8q8i9MO/qkjJLUo9lljYvU8qsEbqPpr3Gj2GBk3NLfCGZiRnwtYwcpkjIS6yo/RusyxNGzISWPOtE5vEaaHo3zuB2GnAw+5f2PmfyRMNode4F/Mok/Op9fgB+5ek9hDDBWP1Sd9oCnpefkST0aHHlW0uRr2wnWrVlqJKqLfsgmU655IftD5W+kfBOy2d7GVBxuDnvt5lWvdLrME4drZ5q3tuFEN7P32MSsm0ll6+jzuLLYZ1f+nBhNLfA0KyqjkNjse6It5VVScRKnhRv2as3y9WIsYxCIdVfBmHga/H/qJnCAMJ2geQ5LIQ/UtIDDiTE/W4tDe2552Ok4ZmxuANe5XZJQtW5ydEK0Iylb7fTBpELWYQ0wYlspZ6ILsdHeEwQUv78hS4G4UCqryGMpG3zfoNTEQ+CasIw/ry5z2SZxTyRJNSZmaCwHeYyn62fzVKr9IfXQk+zWmc6mYTX6n0a9lixRBnzoNKgoo8xoRLgKkyguQeIG+bNg6dGrFaVIOWRWNKcvOcaJ/2a+ohJ8YQpe+PVZC5fQdKvEq/pI+UJsz1LGFtG1wCIPR59GShAUl4fLCnvMyY+ro7mXRRgjRUzpTkY/ecRKxYidnlu7VL78m1i62RUQQfx6kVJv7UcAzgANQ3ygurAlqzFm2htr0OvYPGl1QLUfJLoVw5BuAX3TNSyXFPUTwkkudCGOr6ImHw534s+V+d0+bq/WunLhDcmDl7sZwH00pHjSUL7YN0FPauOWANrdgU+NGSVjTtZjSG9gssZ5vSsf1JdCmsu3oJ35FA++F3/ci1DLwWef/XlH2NkcfW5O3F2BjWUzEcgYKHRhwgIIAoJRR9dAYj2U5JjvZfHGAX3+WORPLqLr/mcvLL2FSOWMlpTlHvp274WVxZRJwtYwY8lL/8HU+ka6Uq+JPT2GQDUREvZeixBmfYS73FFG+VSXFi32xPc3EECemDKeWHcPpybUFqp05zJTsBa9i4vHHHsH9crFa/YBiVFxO4oc6I/h2S7jikQpOCVZtdOqwm4E4PuuxieCElVlsDK/EZYXdq15rMIcdhhKzcVHz83r8SkuacQJy64WaexJ05kQd8HbVwzs876+c3j+7pbauhSVh6eGmhXy5lcMSozwq9IzXFhlEIbRJztPHTG7ryZpdA8gVF4Voa6h+60CSKuDWo9ftn/BD/8NqDP7ymFgQENc/u4/7Q569Wb9igLyzhXIFwIQDqqOkiBi1MK3HG4pgdWddgD74QIjYwFjmP1LJBzaMoI9jtd/gDxvLWawtFrWJT2PZ+U1SbTDnHYDBBtlip8DNRp+a7Hvq2hXJpkUtyK9YE0wSFGK435jp4CjclZzbMdTm/066P1HYmHCmxIG+MD/QStXrYqsLTLXvK7nMguI0q2dXIS6G0aQiNjvXE+oy/ddAopnIKg/jIADQcn1ueayR/h5pRZ8g9bbwwA4/FIhXFbWU5bi+cIxbiWqpHbxjtPmd6f1zjLd386OH8HtLaA8e97YBJzZJVvBT2S/sSaPirhW9uwbCRPLxrrLzZCrwavE3ZxAQ/Ahas0LFpb7MrgwCGU5i1WQQMJfjuqwE0BPL2XLlpH14PrnH8ka8GHEnIbtGJ37+DMEsZN/jPj5fSYKiHkIKh3mBajpVXu5K8cwBdZV4mTYsJTqHLsX64DoyyIlwBoaNDt3pBi9++2j8Vh4nfiw7ThJx73a4aj0piiZLhQUgPATV55L3sCuJmLi3HoF4B7/0KJUiXR4ut2JlXxi9nTSXPRAudXhfL/M2Su2fkoWtA6EIcUa66cHZNJq4wxZGnSxC7zsbp6WX5OM9RdZgEoKPdpUE64y2szgycMNZxjD52xUQgTCRGxq4yH8blWmPBnakruZhPY8M3va8ALyZd31F/GpPCiEuKGVxcvrUbEp1jSxJincRlh3GtB/Hj7RGlZyIeNmvjjC3B8rI+MJX3DY/f6P9dvwpoMcBgdk9zUwPhaTOgmpbbCa0hOYlyGrheoFasm7VxOMwdSYldepwIJmwVgyujQGEBXDXjONhSiDeTrnU3WUUYnasuMpKuU9c3Kzq/ko0+QW0SbeGQWT19V7DgZCGDMuqPtNAvB1eb/Thh832yVTuivoPHJP22IpmZKgDIdhGcfSJ12Bdh0OjmyZ69PB1UFSqJmeK9w74x0Xs6vHz5UI73exltIafFYKImYg6wEwj3E4OhSBKgTHqVrjymmLKYtVSkruVK20s6SJdu1rD9X+mt0f9FhqQTSbuHi613NYFd3l7WxZJxrotmblKGF5clfxURkE5oHfYhjb64/L/Cen4H8OdoaKuzot/F8aeLoINcbocW0tfcZUn9Qkeys4MuoQ3GB9I/ONyEC1GAnyufC2fU1AdDZ8JZxby5/Rj1D+vgXJW1VbPwUvXlzPEp1K0xofbPf6EezynFfPLXKcPWvY6EvaXUiw5H3YdMJ4Empl2GyjCvxHNvnUWkmXBwxnmBfD7GrDRTBpDdvVAT69YLC8FH8q9tyybkakCajhOr0LGzzCnjILVbdVWP4gk3vKsyPZxs7tde3WV3hx7Xey1Y7GRPSxTWaejEr54VmzJDtnzWvTSAAfIDDEk199+q3FZ1QHUbx5ae7+VOsOklNY5Q5s6nw0+4zFSs0O0CosdiqsgtHqt4Ene44vdTNX2h3Dsb7+bGq1MzC/dKP+P9hnsb0Qm3jpxvjI3keZ1LApz+zN66y3P6O3HnOh1g8F0BXGus8gjktxxFK1kPhP9k8DFHUZ/11brU74AhedrwG1BTF6QDO1VueL4MPDTNaBRsIlqaF2vmdkN2jyNI+nAkS86/1+XNO0CMFpXW4IC1iDplIYGYoktsse/j1x8NrTZr75XzhMwIn+UV+CNOBeuDzh0uaBqPdpSDy7IPYj4isGWQ99v1beqA/RyHncxQXetvDjz/3+VVpm8zEIYcv2PKow3IE0qTj3micvfHnWh5ziTo2MxloVPd/j3oYxyS8VPi45DD3KUeikUYVyQcl6XH1HmjAIPmirs0h9+1ngyQp4JyyA9EfhYcE1OKJULaSuzwxI5gEphXYgZEPGi9yYywgWAKJoz4OOLYzrStLrNjMgRJbnlsluLk9UwL2b7yIzBeH9Wj9jviM1kd1I1SFoqjQsjwKi9fJ0wTZiaLDXQ/WGIvv3j4riBHJytUDgJC9Red1EqIG4bEt5AdsJEBrYlmlManTdo8kpyN+s4TqCuNNAxtqfy7lWGXye8zw7ccqkiZfGutvqC2WgsR0jmOoHVNUGQWqSQufGm4dlxcXqtFvdrbqulFn0k1DfT9yn+27C4mA7Fbgppfik6Je8bjfMxt/+nbqX/MvOJ82S8nAmqx/eLrCn5WwmZ/WRBzY2VFTnXkRaL/gEaP2BIS6ZOCqLHtSqLTacGSn9PKnRZF72yNPn/+BI5DeL/4qZkvf1Go+84ieMk5k8T1n268oOYisaEtbiZjSD5qoaG3cpX6b3MiLQvKPaWPyuk8LqpWNSL+oyY2IXt8S6biiCJq2R2DU39zyYLdcobdgwTWzWmJLXJAIaJFPjg+KBYrAP6z02sVjlCz+0VatfG6iWm+ac18FQzdpxr3mDuU9omtY6lMddTW9cEiaQs4NbfopDfvsUeZgrkeHMpFAcDy8wti+fWaVGVGvcyaPLEBh7vjif/BfciKK20HGgS3pRzRyfm+bHEtmnPloirvh6u6UMARKuWUM3dc/mQHCj7Kb/WQ9+YRW+OOnS1jGhVjl+HR5T5GwYda3kU6dvBFXfKjOJs/a2Tuzc9peKdLBeg+kmBl9xSRkOlLbKhFSNhmdeDP2eU8nOrhbDpHR83mQfcK9/qPJJw8EpL/uKBSB8KrmKwRyDz6zbq8grnKB6RgRTvZ+X04f58BgtcnAYKK0C/gS09yOSXyuMCfH09f6D2FyX3xoQ3R6xUi87JRaZI002R4788LGdd+iqMg4j+sSi+LQEakHmvnVCTehNPGeT9gu8nYRgMMvkD9p882DgDlyhpbUZESfGdSse/NDaiBMDxMxJ9bk/xdHh+22CwhYGJS+tqN56wWn/w/0Dnq68Gpv1EjQsUTORV1eRl2DYmCxyzZ1lPGKa8gDXsxIdKSpWFKx2MXEj7mhsS0TtyaLMH9+soh6mNlv6iZG9ZbJEoxS5kNy1YP7avutbyBAUQPTDve+16+HQlc0q7NS7V9pUryjm4f3J0nHNi6hw7YC5SKkGMsG7S4CbWzCvkLarJrnanqHMf4KB6ux2vYxcHN7Y6BGtCi93tVJO9W+ciS3bniDLI/dA6od4WAo3V5Yjl4055+PAvhiQhY/mjXPer7sszwr7CnndNhj4O3eqDUQ6SShw5XJAsZ9SvHwhneoZFw/4AEFEwCOpYzEikOce5rp7WpxoZUPY6Uv2GmRKx64ZfVkoEPw8yEVqHyN6U83ZOemg3e9jehzV+gq50o+cq0C2jIaQWyEuW4dJBDOp9yaOHJxjlNY0T8lg2FKGsenLlukAb6nX+dyxve3xa570JJ+sDFTB51Ro/RZ9/L7/kwQCDG1EHZxuTBCavBQa1clW9qOMP0N5ipPOe/jGnHilgXHNW+zauGGMaIMl3clbLxtTCdJo4VBNzyrF80w7FQFFarzI+p1AJVmD/w3rGz0CQHuVZI2KJhGsutZ72fbLhGEpKP3KY0OSPKvdoxbeQb+uqtPzknukwoE6QbBFKnwNlE8pMvxT1Lsbe/GBLgGqg744XsHbUFxaAvL07qBouD0/lMfTtngvgaDUoipQNnWaD3wjarCdm8gQTl1PGeScEHr9OE8awLkPdPCvdr8gVUmZpyAzPEFvqCr+dmkNQgiSMdF4qxpKLq2IZ5W9CGTqdqbYqqeCh0pzy3zn2dO6lUumCL6GWaZimxGl98P68F8wuYPbLruYDq2F6oBm/rnfQtFtGMvYAQT+k9BBmd8BXMLP3d6bM3Kemdm8bg4bvy2jAyvUdUJIuhBKII5czS+RMsp5PLzE+au8J1zrvEjKXK1YNQO4c2K7JbDNlwFjOI/+HOEA6TIiGqnp14OIYBPhCfDk+EJyaVUxlKo2uLmdSOS0bMJGfxvHpRpKlOiXjop20ZNQjhkbrY5R0NFBwYBqofSwe7qjP7V9I2/DgGXcoqIWEaNL8slsjeP6TLdSirPBhx5TsUdlyBDhPJ54HRCC4GbhvAlWvwrUwoI3+cmiDRLUIw91FmMH5MiUoZmk4uX9F4AfRPifERqPUh6VISlKa5kAhgkzpcorYgsePGS8uWhrahBQsBkD83WxcH1Ci5cYlxgWvQAZUz+E2MSSSTi4GdV/96jE56k6WXDJbl7R7Pqy1RAcNNfTxmfRsoWFvsMPCW+v/YwrlPffFzT3bOkaPz3UVHg80PUFc63WrN2NW4fjtx3PC2kRuCfT4huPjs858+mtmAb6xwhKXFYFlTlqTG+h4IXenpilwLRuRdpklCzzqsyOLn7D5AbY3Y/dFQ/Eeo0/UAU6ApJSRPudxBELQOku9fxYM0h4Ihtzful7J4hIF3oUTOTZy2YP7cMQelfhka0+9GJqtXU2Ui4a54uzUY+61+XzbM4YTTZODzyCPFzZhk8WTviDlyemQnPYGVK8x09xNUpW3aciFxugLcMvKigGcjghDo5J6g19IdLWUnwT/IkbV+1qvuYO9W+wT3lIIimDn8+vgFsCu3UlTfiQsw7rHK+XnV6njyIIjE5EmGUrkRhGHujUmW0Q56qrOTsTVMazUqrKggVJozNuW/W89CEMYMXZxnvh72T9K4o08hBVwSQgUZ2PgU0Tp93BJqa3OX2IeQd2R7HFs8UD4MWShNzT7xLeV0ohseDahdLq/a0COb7heLnrZjn/HWRrdc8wbxbfn+TaMqWGfg1w+tZR+Oyi/oK5bqf3njiCT8IJuIKlfs96Qzohj7O2JP9/8hg0spz4fxB10jC50h8wfHDNo850aTHSFpBI2s1kCWx6cjNQGd0mJbLPN1cBKPkD3DR2AqBAskM+eKRXUSasCk88yDeamaalvgqAp222ew3N6YEONZlUbT0+He5QEQmhYDC2K5IIEdQsfrQwiXWj2Tb7rPDLXbxhhj4F3v72HeWHogE29KQhou6Xyt+YzUVCR9d6g/TnhgraIrEg6bftXi5KidZvj65SptxH9fWKEeqGK2/2ZoSKxxC5s5AhAwzEKbq/k4Zt4uHhWLGn5/l85xAaOOHfUobaAEYoDdxY3RKl7Q5EStVZuVH2/N7rzJn+WH0meXCi4rlb+k9aRyEHhK9+PAM/O7zAyfwDsDp5nwlDddCGli8ay2KMhCiHoxSagD7xAcJf9pzhlzstWo4eWIAdF8yRJM4ROuj120+Sj6KvEPFPp/D3Dr7UtHY9yKChI3Q+OBcPFJAZS0j+pow1Nk4r0q2vwsr+IGLk/kPcZBZmLHVlTavX5+qrjqJ6fo6DJkT62lrf2oj4EcVhHGSoAF5koBhzmuHlZTwH2/UbNPeOlJSzMqChMzgtMrhwawQmJtSHHsdWwvulkwJaGjT3i6kTcDMl7Q+lgjgOl55BByPvtgqRIwRHIsxUukwVETBydf2zWvDnhs+Gf6QegqFqhtckxCU2sLYAB2DypklTZWBDO3nx4AY8afZ23uMoIpqVKVLk6IDTDr0pAMh6T89ro9W/yIvYCBsWQvi/an8zyF/G0EKnATySgfj/Kv//XFUKqNU+cat4bx6BX4rbfhAdde1HKCeaFNmpBrvephILNZ3RIl02wT3GUj1XYp3bA9KK8oYn/nqsA89Kd16xAdK/sK/y9wR2Z9ja0Dc2U8brJfMNUPfNnEmnwXw2LTsyy1uwKq0I50FqSAOJNno9Uo60zJPNjgLtl7BQ/vAhtchi8LWwpBwJOFcJKDOxfw+CsgwGR90X1qYWoHHx6GYN4vJEuLWJm2PlJoyEdZoVvp0/hj0TWl79y09R3APC/EiwBCVP51Pu27yeJnQeOX50tI4gKIaKzF2Rg/I/jGXm9HDNQrVHPugdcmVVurKkSEXfErVbKe8r3opWeQ8JJI+auU5k3/4vvZRktorQbSNIiCKTRjjc7P/MgLBlAORV0KsFSDUa2QqouhKJXPAt4bWgJT0mS6Bku0gysg6HiuBeDhzRMrKNGYlWqUsFmzJZpDV2e7YrgxyHRYNFSmDgSy7mPO9L0p18cZdGHsciwIJ9tjuFFlNK+TYFY9l4Gx76Ebt0wxMLUcYczwaXB+rJgTDNATQrPITy+uC1kKFK1/l/rPQXtZhGXF87ixhZTtmkbi42ak3JLNRfBNwiun7YLirD4dDN5SA5EZy2S8ntWzgASTnAVoRpaP2mMZOx8EuDOOXkPzU22SEbnXofu5ySnEcOP/EFHOuxAuX2U+tpz1evQzHpldMPlLE2kUBzbxweXHq/u804YfhBMZDcUOx/WYG2/iD/wrhaBUb4Z84hHzUT4EX2e3RxBZbHbXRbRnO9hgApyQ+b3WedQVGAFvh2ffvahVsmNf/mfZrvrwiBH3scMQOYraKCjJH+eNbdNUiS0MFVUrB5kQro0qFaSNMqg8D7Bj1u3KiK/1eV/eUfoLIi4bfU2HqrF+IBTNa+QLMLIdkpNWiDkxOhBR+v6DyL2lm9E5tE8BuGpVrn7IcglyYzAnoR7NY5ORV2X3H3ObcpJFb7a36qK3P0faimlB1NoeZKHtKyawvI1p1pEZQcjCDDnelJ0gV2MFQSXbF653mhmH4bx2P1gC3bZOsmffT9n+ppEFPBtHkNUbummASqPImPp1hLoIkBoIsqwiNHTFN77wPgvp60eP5uaTW2acdHbKrSx/3dnDdBHQ4hCkCGvMA4kj8NwS9KP+PVUe67SXpueLD9+wQwRdqUW5DHLveWJctmqjepHNc9c1rHymIa074lwNiVenSUiZmaUcnUTvgrq7sgystSNYa9kHcy8x9gwAvPFerd372NgiaWsKfKfLH4XijuZY+wMFhA57QM3kwHhAoah91ehLYvydkXZ58mJBZU+EWgVFelstmw/RdD9dbDJa8p2HPXZnXumkoIOyAu/mH7y8oMZG/AwFLPC0WuezFk4ZoW2YcHfgf7caT88paEBhfXZXodoo2a4X+osSyUT+JF89quIa7sbUs1+PF2JSiBLELmF6O/FRgnRdUjaHpndi3gguqj8C+1b0UnrNxawcpH+L7oQ+0x719NlWNa6weYnchR7E2EltzGzYvpDU8MHguMMaektVJuqmW5mDYFXFF2N/D//SoaOYMLv4mrrZfuZ6/ChI3jw1wOiLXDilRbndDF8uYy1PAD0nBw99i2UAZqBKHXYyg4VEyiKuIPHofX/fcNda8N8SyywM3K9mktst/OgYuSfdx/GOvyNvqak1oRvl4NWjjR5mNoVn7ZqPjcJyaM//PnwIk8CWoZOd2rTXzA5wcGBY3ihjRhGkxcvCgr/Ei2RUXNINdnC0upsr/0C7lTSc9+xnXtpsOl188va4H305xSe3psv+HX3O+MVL9wt5OyZ4B8vtqsV9lIhx75XJS1h1IjfvpRuFUkeJ3Pxc4dQZXzGxFt8vC5A9S4OQxKkbUdDP888kd0f4LvPBcJfjkGqgcjDgDCuu/PZ10VGz/2MSWtsQFQkPda56i9+dsiV9cOmSJuDXVdZGo/GE1REjF6zvqrEwQ5QwiZKVmbkddTAMOuD9ujEzomK+t8RuXZnM8WrV27UZsAVl+e+qD6BGaR9Q42J/2TJFWNaPFjmVv1TyHe79NY0gaz0wKN3RBqwrM3exo4oVldmaTkTfb4RPXqiQfAItMSMKyxNwdviJiMAeBeZJgfBIWgJF+unZX5m3OXuw+ytWy8lPMyODn4jvrbpAoKK4qCqyBQnS2e6XFOI+LXgOV8bHYKqrdtbTYOlrbNJVahUhtfAnTzqlOTywTMoFU5hrqUg2HPmL1xaQ40zwh04xzM3aKw5PCbWdaaJ04ncengeCuaHmeF3GeRyfdFT2X6JTEx+C9Z0hfjRQeeXif1acnUaBG3E1r82XJ+doW1T/8Np41E6oWTZm6MsO+tPKBqt4p82+1p31S8exQy1ZkJTI/MmjQbFvQuOSggIqtoQF+xSLSrOdXFIPEKv23qCaCghLz3toAPb8DCq+/oO95DUzPdofcYL2fvlu6/+L+pm32w52WJ2Wvw4xR+45nHTW/H+51RTcvzVVbcP6hVA/j6/aVOE0IPa0SPQ9uV0ta/q14pCMWRYyVcrS6pW9YHKMQ0BqCkew5p94CVwczS6WXY/vSkeusL411yj2RBBgL0BrCFb/8fAvA4QomOEZYCyRQZgCkY6Hf2aJxG+zFVPheqv50BVmjrpenjLb0zZ7+LRNhBHPLHwlOs8e+DcsoUi53viZiQWgZ6GkwD3/csAlQ4lir9gQHkN7bfxjoH26UcCZy+gmdcBnZ3iSmnaRwgVgURXhkSpzQ9/MESYsjUd/alJeQCmGCpqHZJHvve8Hha42xxFL2sTuJD6YUuCXh9camWSIkeZzWod7NZtVL7vQABVJqZeiXSghz1GXR1gTgbYikMEHbv3ucP9SQQBJ5YLhD2ZjnbZSSYAU8xlKgTNcRFyFH5BpS2+Vzf5twrdiLDA0Sy/m0iPJKRL2hyKN5PHOjydPzxuxtNezB9EegDePDH+sS4YPl0TCvlo3AHocA2Nz/AA3MUBrAvzANngqGK31WXL3uGARvaGr0SoAz+lFqZ1J2Nzl9dxVHvF92TFK+U9+KAdDnk8yF6gljbjD4G7oFEO9cMSg9o74bGweO2udsV2nTRJJ/NeArycnG3BJHQaPSiyfLFF+XX8AL3Gbrb4W5Qi11AwmHeYBnq8XYq2vRTigSJWGkx10H5+tUz1s2kjU/JlLVRHm0q348YGPe/8MStwus42+/jDfG3u/NXhtF9jSe3w01LcvxuWMa7PLyKlCVmebDoRqPeVisUUebceIFeazFGJeVtZDgsB6nXmXC7makf2iBFv+JghzdckVpMZT5xOGVjItAdjpLTMUfU5lXdSaqHE5SjyRgMmEh0ZY26IUVaXRb/7QPid7y76r7sQfGzVPos1mtYCM45qcqGfsvSbhS23LTF7BJpHKi5NkKjeIkHr9YKe2kyvNrwnFXii9YYvCSZHf9heNAUOEvo2zwQqUxkmWtW2DvlBT3e850j5C4OKTa/77mDe0vb3BbQKDAXfP7Nr8egGBQAYKnULYy7BkyPLcCmdcb5d9zmZVyorK/XujRWGo3np85jrLFkCuHT18YbuEcYVSKB6sN88F/5epjv8xCCYkZbwFwDOMSs+Y/k1sXIDnfk7f/HFFlBWsJChTvxFMr5TtTyExFrLZT12lA8zxP+TU8mR3EMudU7Iu8C6cLtbgeVUo7MvjvGfExRYBDRn+uVEoV9G1zwjv9JZHHKDSev67yXJrHvprNJsJRpfdYtOSGo06uo06aeGiY8Tlm7XnjdE8MyqPKoXtNkqjP2ruAlo9tU1ySx2cSvnAxQoeS8efxRNOvAA4lfoDc8q6ndv/L89oBupSJjSG9CsHfu3IlOWwWREK2RzvkS3GS8OUspEsZDAik9VxqCiAAAdAu8oaeNtzcwVeA+a/T5zw6xZG1cRRDUn9SRbO+N+rRSRgU4BU0SJiullHcX+2naXDn6mI/qcMiDEIrTqCqaWo5HonB8iykx6LL4tquopOtoZlm43IP0wE6YYW7DgTVkT8WuAV50xTyiZS/5r+26bTpMVrJwJWlAe9f+tOvHfxB+1SgY+E/Ec4jSCOpWJPHswpuF4rjrGsFOPeMM7Y9Zf7OiAGql/qREhNtdKtkH3xqIGml/HXEEpclMUVjgjXwuUbo9HXnqJIp2JNSg1qZIRRdrzm3UtHBO1w3jSZtBPbIDYJlXaewB1qgBzoMMV18pAwH85Hs02xUqGe2HcJ+hix4Xk+nPKe6eCbRWigGio1edf31NpTwWNdrfIsMaF8qkP4GtpgMllGUmyTz2ui06AAa0JFqJh0N9k2/j7kO9IL2+JSP7KqmC78NtRJCLpPdFm58OgtpcnVqv9tRvpPrqaaEwYauVnkjl8zLCgG+6zgdA16ASoh9rYUcSfboWzzdsJ/S4R7mAchEQM5jtJQTxWP8AT8BExVbrIwhftlcL91Bhb3IhSsc4r78dTPjOrm69bvVeXF43o4aeR+zv53FioFw7pe8ut9ple9nS9vVN0W3WehrbM+MFT0gWxbSZW1/5+eI4j3SOGXMU7ziB4UjY8yTLwOO8XP4q5OvTZBJc7ubY5WpsBvGhhI4Ij/KVFwQ0GLJPaQjrtn3OST7/IkDKz1McAFvi3zf8qgSWQc5oL0RKmSN7LLcaFpe/11z0GLB3zXxyS8hcOKE6HiiEy7w/GrA1CxZ98yOdUtbeCeeQX0a+4eUBkbTfAClPDckgzBME9qko3iBkLY3iHL31scrfM/TMTBkykRQi7k1Pft2nAmQ1gZPCSn0nyzM6fySfIl/D1n8DOWqmauf1r7SQR0issjpLZtzd3qc4Tlbw8xee2PKAFv5pyFsl55BLRfJgj/EpsemeS/Wsw89nWmS/Tk0ko0bKgNXnNnf+XwdOexbKJ/b7EdHjEfYNXhcROxhBFJY13KyQvKCRYWFt/AoknKZR82wSnLiY33H0znLR9vSmHGhNdTAy0V84P027NRaHSWY0RvyHW6r3DAnDx703hHtuMJXNESBPxv4+A7e5hodEbVW6GEO9SsjZ0KfcDu5CrgI5Hs53eG7x5WdDKf2elqR8fSXbdXWvzRoR+X8iWWC4PdTD1W/DQnAtoZzwuLEClU/Y0l0cfKnnlDjJ872juYI/poCIRNoJ3SD8lGERBfvQtIz0yPdVBzlbd1zvw7/fy1XAhhUJy1luvjMXZF/ESh4PZuDsKKevLWlumB5NJBUXikgMFd6eAylhrRs//gUHZ+RVis87XI8dWX+dOCvqfpky7GWm4XvtiWU81zR4iSExTA45EVsAwLIwzAKyGHNvB+/7jjz80VqiJrnRN2U3wdpTo7g4J5yw567BFWV6bzLfZpUczI7d3/WNZbc3iL4pjXGbzt9DA6g3DWvgXM3jNQDVziG8FWgmfiNP9M3GTAF72BZRG9sV8PLsQDuLfg6dr/z0dEHrwfzDPGCPTlQ2CeeGlgspGN3dhK4otm0/AbNgOqd8EkGRuG4ozvNXmE8cUnozXcckIL6jHXpqCeS5odqWlxRZNjoRPONkbM9Wzw0OSXNk/IYvKGi5xZoYbdZ8A8e0P4xfOyPOSJdW6t3sJK3MfnpdPTde2puFlecZvDd3S6MJqPvtLa2j1GW4PBDsXwiUe1C/uykH57siV18iIo6ru5mm9w/14jz4jX/OmcNLThuYjnFkOU4p5oxyfjLUCQS3lZ+k5AZqJ1jgSckkzdSUkZI+B7RgGxlwaKMudJDd0GsVDXUacjmgVnyF+onWtbJw0g0VNoOW/RvoVA/yvV9SOuxbJKlFI6Od4dq5LitgF1SIADuQD0oBr0JNNcbRbVdcnv5oGaf5U9hgm5sKlXXg7v0mrbVu4/obdX3Ar/fTrC6zeQtqE/nVD5Ec/It7A2g4/Fhfa5rtNLGictMhy/vOX9OAUFFr7qv1LvI+wcXeHAd/TwAj7iD7+QlQXQ3WxSUhynOQ0OjISNM+6stw7mxUnGLKp//F2efnDbAQ/0HmJSa/o5SKaBwBOzmlNt8lzV1QrX1wt936fz0th8Iu/idnMFYgv1V4FAjMdCaeEZc9EvpZTVWeAc1OhpE5kVpYeR0/uhot/GCrK9Q6sjgEN5eGKrtzuDK/Jj11gXe8EBBQko1ftfGOz2lhYeA+DSMS7bPkjh0wwhjynZ/TnEAIn9ZJBNVxT1NDNbE6Y64Fbp+ZvwQme5dG3H1i7SXl9zW7418H6x6OmGy49F/1xUwhtNkpL/d/idZhQZ28VP16mDhp8RQ3c/Z15iwbvlZH4YO3tPgpTqNPN2ZNAN8cfmXEPq/sOF9IFqpmwJap5OFi5yF5pZFR9fKCoZRVN9shTo5QpH6A2hDFTin/ZsA21Scr1ws8WKXZjmZ+B5h9IAFOQFqPHVmGsOOAQOZvke4nmEwoNeI2TJ/e1spS3e56raZGSVvVJDxQiRHZ5s47P8zftqxXykWXN4qLoY8YnDEGziumuf7D6/xSfBTyEvCVbdQ1+oovlHge0ENa85JhcnC2c7JDfjeEyN44pZ1KGY47TJy/gy/qO3CyE2B6+gxPzsSsiLxKa1Fc3Ri76hwOi1e+mFGlsReZ3Fle6r3R7jWMj5OSuIB2GUhBth9EjCuaA6NKh3EDobhk40ZXdxRw3zsfQF22iY+/3KP8ObldU7XH/ICtbOtQ6wDS2/RQqUFG6X4UIP4fqLGN0iWm2OLGHn03yeUWHCUAR2Jpjtn3MZv/jYCPu+kTQ5I2Xw19HQU79/3n8qjnob5ckdyGoar+aJGCSeCGeS4cdd35r1tD4hlH8dCeT+p+2tQziy5ZJYyrJ8oEunnB59/hAPNUziruSDYsNZdxILINZ3/AfsdXHiXZYcR0qwCdxvQhqwprfC5pWj4d/Z0DXtIt/QyTbIvTVI65OiApZnafVEN6d40/O/IJGH3mphtuDl5Rr2/u0cLHu0KQXpJCOgdW80CTmbCQTzKX+ZFI6D9EWXWZxEW4DB/h/KAc7wH1MIDBl+2eIrMOPlxJadulma2bO93c3RAbuy+MgAbt1+GnDRk5NFTJgfgg0sWcQdy/+NaHm8G2I0dxVjNwZVLAiHIJnwNZRWuJxLEDejWs3eduK64eTS/a2C+B8N5E8m7+x/mRRWCDqhSWvjMtBRyaIcXhHcK8TUHKx1iysNIKM+ar5zxiluPdTsh2MzhdKqGbDxwnSAyaONViYSOFal+Bst1LWhjQdlI88fUkpXIDun9BY2iNhS9KswGIk3mH91BVz49TBnf/4FNNJa0517tGtq03lqw8j7WMCTz8afpIymQMVA+H5A0GnXP+JxqFFRaqVmgL7ielsZT9qHggbyFy8Ej4bqyilkurJqj+JRFEKajXEB3hUBYIJd5e5AVrlzeJUwcMxhpK5iQnONfu9BvVplr8d7qbq+RixcVfacVdaMVRcTn9/7oDR1mXlb0Pst4a8vIrn3LpMeRc3bWhYvPRkV9X04wZJpCVKbWLeR/tugutsfPYS2cF2CF2bt9bEzV0XOZJEOz8uPokEVAIUyLrXL+bOxDQ0EQsdtpA6GB87KhKZR3b2blY5OSLVIYl94Hs4RStfD0Zkk1IK77Y/dc0DouJrliARwvXGLlJjdVuK2TfjZ3KlVFgZ/J53VS6QMzHRN29XmWQ75UUMKK9CHWv+ND9yRZZELYeBV8ad6zPHJBX79Dptz3ZOD7MraSRFmqJzYAm/cQUZNJ4xcQrMAz8PfuORvadSkAWzAXAiHRbvC9TS7FsqA695Xr2zc8um3deB4kRSayyESHJ0n7yRwS+HSZaivGZSpkqs70z3cx5ybYhcYKt98r8i0Pz+xMmRemuvXnetY+zb/lSO19a+XSoNWHBdUI3Muai21QR56d5Njut4HV+sAihu9mu1epPXVBedEKMD5T9fLTol7VKWmb3y4XY6xWuNY2kWjoZpzGozQbGHQiem2NfhH9FvCea9A8CPuvuvJMqZx0+w9jOxe98V7N7ukTNA7HYEgx/drtkYb81AejuYaU4xV6oTbGZbPIEzfdb2CT4vN1oRkXlXveprlTaPxoH6EvasN+EtJf1VgTK4o4Lq4g2jsynZYZ8Gu2Rp+pPi4bAB/izImcQKAMw5+C2SldhyaGIdwVKjzqe9IpxPqjwLRvZBTPHc+16tLbrbw4/KalTvkh59+NRPUVEGLm2aWjBrTaCjUOgvg+I+s4Myzxrbn8sJ6+Ot/yAqAJxr9kHzLtLhNZmmdvJI8BsRiEWnMHQKI7N5zTUUHHnpYGKpSyJ9GjpU22PwqzQU+CEWIxxkgwvflYWnWxR3I8QkeiVAo/oHKLL1DaaajmWA7rrEHx0RaEIABwK32i3G+mtp7txKNMa+8sFRy5+cnCxxWnvGCLlErTcrsz8ifIAAUAkp0OMv8cWYUsp/SZWfWAHY4hiKwujWA2OfzUwJXh5w/7v5A9E2XRKXiV8mMqoGmpZcsdwHJGmWdr5oGqKvAohWlmKQEzXk0MMuru1ReeC5ShyjLgeVtpY5ZotKb2tbprplbWm7b7OOHJHS18pTf71T5aU2yrPIRCv+qVhNx5SVmgojs2ibN8nKGiMLGekr7qpDLbzy4Ks6QCjE1xo/+fa34oxikjWxcAig8Kj2P+O71yVBNCGSw4+xJC3ROYWNYkjHRU+iBr8/utSmEnLXz7oV3elGjuHCvFuwLVawwofI9R1naoZhR2j1uDZeKR+A6YoYnhviMRtCMMOBgInQFKKvsXdbZ8BjYowVnOw3kMrIJ881Zw/+Y8+Habj0wy262obtkQcvncpgZYDqKAzLLKOwGlPv33QSxvixSZBckniARrdcOcQHyJgQbMF9Ez2c6FUxyMrj76ciuLpp5C+QRzh82rVBGKwxA4qXLXAM38+eIa6XujZCFKVrDt0gg4myTHa0VXmYT5mx4yRkVlKxXASU+IrSbbn5aGIv3Ykh/XI52sTNSR6/sUDzPewaad6H9XutdnwwawT0hZaKskLog9oQoMRaXU+83+ZETwFSNdv54PS3+8UV55pUIqfaje+hpRoEp3kTCkuwNAKTx7q4whJK5tDqzP9yxRjDUu0G7nV66KN91iDZNXyIpBW/YefVPNftsGcl4zWPPqWAJYX09xNrdPaAh5fVpv7SKADn0xrDZfgydQhRCTK/yv5JqcLLiX5Aesbs02iPI0bXoCyS+SGaWh5mdG8ph1RYyNXPoXfg9tvBm33RlAEzbBxImNeHFyvnMtpZGNU9vHDJ0TmQqDr7BrQICiqwSGuPCMJtmg+jqZI7FE5eHY9YuMCuBkfYSqhx9AdA4ySkL3a6JoXISZJgjyfv/TKGyw/cBoc8nvZR2MKgZqa2BWy0cS2KsURRQDcAQUKxSwntbdMKT2xM0ymIUF6qIU8Dd2pD7FvejJbJo6ISxmPCAM9eiiO2hDjoD+J1eIZ9U9HapZ2EFcawFmRfglwrZj+krq8OObIr5Liqp/0hf3eLM/1+dtLKOxcO+oM2XLpzLt6Z31C9iKvHVvZOzsJ+lJKL/QyBLfmI+YngWrmp++FgumWzA4QW68xrdW03Se9j2NKc0/iyBbo6CdBe/3SWkCm8/BgzLMFxI7Kon2WZ4qK9xPSC+BLWwzet1bPAvJMEnEOoDBXNskxhRmszXRpe5fLBitIEmkSWaeM/Fl0qKlNVBImY5vEbI2rkjXRP3kBsqaUYOFiVIfPDSwWezWqMImj2phrAoOC7KkTDyFcXMh+sBzKB7KvUlN3qymFuccVzmIk4LZhi9lcvULy7/yE9fhMJ5EEza41jzZAAZYyay4cwuSN/U31NtDVVr6KCGuaFTeWmzl0UkqsdPvCwSpGpQKIF40j86CdvrdyjamiQ8eLUP3coaB0GeyIvFWtrBTTjQDGP8lslIf+yB2+FY5NXsEnuyclc6zTx78oZNdLvRtumBPiUhJiYFi3gzKJWPHhEmKcAUH68rClRcSDQjAguDRjd8JngSr1HTxiHwDgGSgp/OU5J6PckzsV93Z1/x8juYpntipMkNQ2y2l4yZvuuNoarTZcLOa71MvBz0GxrK3m4Wo/E1z7/LAyfiNz7pjQP4sLRt9PUQK4HtxyzO8+HzrZRzFn+KC4shfQQWwgZmg51a2w0jmxnopu5n+8IciNEVmF4Wg0uEw2j8pphEe3fAMpVtr2Y8EBCJXw/c4Iv0zBGSHTbmKXALVAbGEGvDMQeiVXwqKhEBLVeqcC3QsDnQuWLzByElk7YJ7VhZzj+1V10sGye8FxqiVuSLcgA9BDPUyhQK+R7IZU5j1b/sI0nTp9xyDp2SVENn3aMN8WSq4TOWtBV4bLg4pNrIO5ZSdT2vck09DFP1z94kXnAW+Nb2rvpWEFCKonC91W1mrnYITYPf2dTyTw251nBWeQbQCeE5uudrh4X7dObGNKjVB5gsVl/Qhj/vVV1YWQ4xKeC96uLG3Qb2FiDhUePohlk0xrcCeQyGGi1+oUlhZjZcRF5fp59j+54gi2Pw0t3BX0ZPUPAxIjMNQpedASxReDW1Po7R1MIm4WwBd9Jyvn030tVFycTpm3zdJppxjMkDg+6wyu5DkjcffnlHqEyG1Kyk9cyV80VD9v3AyHpxZA7fberw6dG+/Al6kFv1/BDoMXb3jWR3Wr7qDd7ZDeyHmuWXQXXVNYFCNv637tzJlsCTkzP8NgqjyPy9XkA44PszOs5A+7VuBJ7CqlxzM8BPH3QJffUmBVs8FHUmir0+IH7Lahi43xBjcjIJjHf4QCXdizszpsTutcmuM7DOHoHyWNLEUUwhQINZn5sYA3xjR26lWkLk6+N/vR4CEnqNZKyhp5xmk0Jjc+rqm83wne6qZmCn1br6rjkg6GbmqqsJzkhzp7WeHoI/U7EUEOc+3IUNIr44LA6cQdYaDYYEhjz7hlvnfnK9vww56mTm7hVf/UYXLb8WqD0HQKIeyENX20Dy/YXBRsyu63fRu4beoakkE4K0pIh4TQ5ke8goGYznqVVrhzHOK7t9cft5XOFoltZBaOHJcvbV+UPh83Nq64iE1GZRZEvHm4Culkw0aC7uyN7poeIqOfsqbySP2vgPnPy32yFtDHif+MZ9RYBAzTvE0X9q5vtn4f9d68aLsrTV4rprIdMF19ReN7yPt8pB+lT292rOm2uTvwsfTGpPlGqkwfSAcOaiN179uApWJ3fQ9w+Mtfd212vyk6C8hn13VGftMcE+tbZglNKxszXLJMf0NWHVxLiWNvn/IgafOFMiyghJCfjxIK0g+sEGm/re/duluhbrwXp5ec8Azw55srC8n8srvYJQ3qxbDZ6PuHTSJ1AlCt4n+tiM67JZ2mTXMgF4/pR994e/HdRwnNRShhgjrQbBKYa7qQd8t4XLvF6MogUaqBVaNLNg+l0VN9duTDAPzEviV66QhB2A0IFEEzwKqlnAMDLRCIs4CkXHC8G8srW+gxBT1lq3+IGkHP5uWC9iSZt/J1r0r0G00RLqCIpye7LkexWRMSW9HknTaSJa71CvzMd2+zIuTJ6W7sMh0augSKTLjPxFMkxkzUOf/gkhg9sX37SPhgyM5jR7LSYkvj8qIC7mr5CW6vH7U1OGHYK+BoLN+5IavVrFpa5QEjD7i32XA2QdL6nMs6w95o5/8S87dOiQfebwyYVo8K4+m5Zqc2MVt4rmqHzZsQxKxuRyD9+wDijLZvcNRdEDPbiX5vjNeGWW9+guYlGkkmcn3adORYYb8FPQASNBTOe+bf3wq1A9QAl259J31CMqQ0cqmtod9ITkEptMSxZzSQpIhRkTPd77ON/ViQRnWawNt/BKiNGzM+/U6Xl7zJoC2EsqTZqYqyxchf/lJhaB//wQEVqxYHycBJRxqPjY1DEoGKwuRGdfTTUprflNGmVZYS74I9w/nIVpzLtjaR3uHYXU98rw48oEV220zzQJ9B+UF8xnQHkm/4u555xR9fnSgiJx+N8eEaW+dTwa9VqRtXH1htksMLx/em3RH1g4s0DQHm3Tr5nPFc90GBXoZOIwiUKaZjxNf8cmz+ZJzoWLBStzU5aUaGzkRZfpMKO4Db/YQpLAL5Zo+8iydrwSITdCjcIaYpugeC7ZX+5FdOJVsYsgBlrtGeb4KtBeT5HsXuKI52t0q9JG87yP3qTxES/cecot/IW1QnIug8lXBBmlHOAfht7QfGYJShKeRGO5EsVgWhMN1wmsg1yuJuYFKBSJV17+Cs557h38H952CHdQIEtk2Uz8XnLVl2BJHNvbZ2nd/fDCuLuRQ5pVqBOpOniUdwr8TFLZpiRejkz0oAF5y13fkr63cPRjEf8uxxJYPwgKXWRJPVRWnwRLjspZsXtqtbv5j8F4e+UbN+mjEpIAqDTkgdqrGDi4UwCOmZ35dQk7qNx6pWNYNkIZpC8q09ilalBEw0ARBA9Uq7JaL9ezTSs19cSJxuGmeEcFS5TuEpxv17nudi3LRUDSISUD0ViE873Bm759QwZ+enFosdIRT3k8lwwS1eEK/MuH5FBvOEVmQAq6RtaSlY3Khl2BeQTpczL/t9VSXAfSFRkvGz85GZIgLHXLlBNTb6SeI0jZY/RMP+SNhZ8FGKDL27cNfp9g51Phh0CZhHPJodY1YaLPf4fTG10YhY/v6JauI7HG7/WsJ4oi8bi2qcdi+nqKivbv/jcjvebaBGj3JQ9bPADjHFCeILOiWMRKkKtJfGKS8qjBT1Ig8WzpECsRwjcqD039jwZeygtWBmZYwCerMxyA2lHXCPPrAWXFUUFVjKrc/PGOZhv6QicDHvhwhTRzPzLFMvUib48GCtkAkRiEQ7YXYkDoRNHNf+6Z0rGlI8+xeQgx8ez/uFT9PV91aycTcsGFusTKeM33V6ry4nsjbX1CrTY1MY/CCQhaKrqaLZnwhs8miPnE5IRLPP5pp3QXhdkGuF0MIIyS8zTsMI399E9P9t3frUl5M+V6lXE/mLuCKTOt6tB+hgp7P3fW2Gud3jPcz+1Yyf4XV8CWCPoy3poXxyMUzTOEGL35CJrPXZsfBSMEYjwEscuMS8qwHqfyVmkSnnxjAO7iZCh0yJsKE6/UhD5MeiR6iROtXLUp0qERSCvkO8VNs1moiJUVtEjeMyswsxXBGI3Wy+l68B1dogCnai67Lj8v/j55LGzriKj5bcvRL919UKt5cvJzwUV1ceSYd8L5RZDTsx5F9IhWATc3d3gd87M139RpRz2ZvSaGmRsuAkeEcrRp+OFWDxlH/1JKwW8RtrETvgWNAQjo6OTCqb+mg9TYxdSpV8wgUr6oyw1PyEZRgZxtoWyeJByLnGUZ9qbBB0ArvRh25jUJ+JP+1NLLN5D5cmttyYVpqApnz0QBtJ/m+qeskS72nrlbsDrE2C6Jk1H8AAGgekra6QQxPRnvHy0Q9nONeb9Tu7gJ2rIKDzgWm9UQuffVB9Ci8gWgtyYJ3L5O+gpjE3M2vj0nCIjh1cFqfdUjHv4RnoDyhUzFLkDZwLfkc8KMwcqSjDOHl0lDb3E1bToBiTWNRyVFk7ajqQFcUHzuXKBHajYVD2wDpMrGeHQdB9yODhrLKrMdma5L2iv7rKD7lNEo56QrLaiLtKEvdE6fcSYns6ofrlN+tWgXMia/E0MzVAnO6ujMdBZFmyS1RIvV8CobCyqxEFVlvC/SVpHrSRm0dHE92S22d0HZdWV+oExYQ+XKVAL5BN4ULazBzQ7UI2IRys1atPrzEzeVXgs/hNz6pdVM+juJpURA944mwaGjD81Py5xcD/EjfxfUFdBKwK2sODeQiI3VZXCQb2IPj14+pnR+IV5uEwqBDFvVa0UYVLdgy6X5c34v5ThMJK9Vl8kDCF/PerLu/HxbCTHaWMNcMeBn/uZn17gwRbW/BAywlBqsO1xHNG9DcKI8wsZjGOSkr2K2UUp4NWpDwPoX13kkKCcFcEOWpV34TJT2AsDwSY0i1R03LA5+4h9q2kYvKNBKiwxNbjYlLaeNJLNkaVU3e88imxwXXVd/FgTrwuC0IQ8CAOnVoby0ppPXajeTeSX1fE8lgP8SmZxcjr6bjeNZVO237/IX71KoIAQ3T2aEpTcKQZVykdCqQcfL1PRQAk8+cVyVV84LU+6PUMe3Ta8gr9fanJkK61aJRfvvlvsFbx1juYytf4KIPMBCK/Z1vRPvZDzIT9qq79p8/cB21a1Ly4PqwZA2SZp4CMR3RWXb1NLlteaAsIVWsWqCaWnFQdOK5o/PErUrHwfcNmE9DtfYXrSrg+8WDYbdpBwPYz+NNOXaIKcUffmdoFvR4NvLSEYsumqqqroydEZyBZMxUR0944sMxuVbuUF0JlDjmYTLELlnKZNchvU+UQyiY1DbR/eEvZ3rImmfdTV/i1P76HSWI3TJtuCz3rJQ+zzLqfHjUK3f1v2zBQgq0fcqfwWd7k9jZrxrkCXuO/TqhrtdGpGIkQV1xCO6oEMfbJzXxKdBfFv7idd0TH+07XV8txNKzPD5VvrUU8/5kQQS+jRF5hgBpYGXUwyaZr0FRVUce6+3nvRGH8W0VCMsDi0kDMDW+PMwpRB2lj+s1StD24NjAAl3fmleHqf9+cVWfQBuBYHt2gKwJafhuLneFKVRmZ1T3+/TfHgS3f4nR3SvKLSV8LvUTZo65U/inBBAtIRR/oSbeYIkZEJITzNrXeLwtaLUTfHVVAwxnX4eZhFAjtEpgkxqUbwmFLFHsm8ijehyv0KqMVzZgLAl48HMu5RhgH/pSLKlvptBOSFKTWrdBi81STowleNwB+iEYEKdpqyKnug6QugqUkQUYpeu3w46AwnOszUYOI3lPRTOgdGOhrh7cjDvIywxRE6OADwI9BjhaLIW6m8HDFaFBmqqsmJQekPFNq84NtqbVP/1Kgm+zd2Se2eDxFHPE1M3A62ge1aTsMJgIXVzQGLQLOE/kGExfasaElzIdTIx6XhKRuPYPqp1zUsZR/1TevAJvUdsvYGGdL2wQJ9Bgcm2vDxCsXlfm7KkOx8SAOxJ1oHHapiZU5W4awe1mLhxCQX4+uQr5nvvrTCNQdytPk0+6ZltrJLFIZygY6ZkevHRXxRthHYa3KDlo9OJTJl2EOgzzGNStU4WhHt7EWGcn5CFjkcQx5nNipzY7A4izcoIxI5zIMMbeWcvB6U7z16j1eVOu+GasnFGqbRIenracIhEvnoelPVOY0nn81v6Yy5Pn8KPFLQSvb+aWhT3yWN/aBAHZkfmmQmvNNE6ECOfy3NeknJblFgtpTE3px8vuIxJ5WftTsjpSJrzxoL2BRfX8hGd8eZ+zbKqpsKgdfn/fllNEcSgmSUVQbYqjBP5yaQRK5yQ4ORndsmOU/H4whNHz0Ry+K+3qpuq+/LHhIMre3Ga5IRe8EByd0Q+RdO4EeSpdcbnYa6w0eipLijBX2TFb8MzuMfL/u0oXrEjt9Q0PaEeF9XxJvOSpmUQl6UB+3YfI3ixkV/KOFQOYn0LvYvqk9VaKMrWo8f6OorjHHizEkmwb6ytz5oX9gBkOIbhGolA81+Wx9j7IqLAYaLmPFP+IdSC+0XBCCEo6VWoeS5UHMfS5sX9HLbsusylu/JwcZ8LfZbO6MBWzkfTea1f6yrGUy52sQ5KpLmQTC87/N5XMiYX1ghuqaZeYCPTZ65v80Dnd50Ck97TN6FdpJvnVsbtZz3gJDqwIBNvAAlrSIAOG+aF8DgcB0mzwpiAjVyJuE0jDcW/JWtCuj7xgG1QM/MzrymoOopurOCAyUhEwwqKBwMPs3qAY+b+WOa4YmgQc0MmY938e8fcOtSYCnY2BRsioiIBKza4sAgqHT4Q0m3/iroEATj2eluC+CeGCb1mZNYXYbC5HdDUx+yh6f4jGqB905XSjJ5V6rgTrdLZ7v7HRs6vHJHmUsrtviQJjoeHhnjWCtiB9lX2PDvANgXDa6ZZGSSZWm0hM1Y2r31qLn5rYEEFQfCOXME0zISs96mAh9zV81bXgPD+rTf6IFGH8W9b4kFhPIj5GiIWQtr7SvrodCDGJ97NzVxBdiHzsLZVv4ldgMDixHXciK4anZrAdTiKOLdAz0kl+eAmykLcV1OkW5FJKtOdYcTUn+8lStfG5ozTdGn1S7Co9YT9gCi5qBV0pN7Ob1sqMj0F+k5ZpYtk488/9Whxgf6lRJGDxWcYyt/t0b78nBG68rBEG30rU1Py4lpnXW4RJnmZqZtO8HgWLb8VKGl681n1tMwURJd5PM6skIVUNYXuu+Pj3cSABa5pVI7fACZZcAJmTjV47GWyTeDNO6+Ny/6Z0AmVlqfU9I89Am1QExdT2qNQSnJFLRX55jKVlXaBie+5mtMezSYybop74PCA8s78krl5uL6znz9LTdQKtkWcLUpHEd1GX9wN1ZiD9Tsz5wjSF+7c94WdE+mAwh0FY1sS3cttWGmdvLqnJMEO+1pVdgv5jljihc2R05FcTm8xx4BRAs2NGKfUmHx8y+E715JIrYM14GkRQcwL5eoRTgUSnPbVSguohq6covlTh9S8rRPAlLo9c+YpjknW6f4hAjfJVC/R1s7TdGwaa9Gf6bZr6utC1U0C34pNIVi1xdsmCn6LK1DQnoyQElBPMDK5oKHDlKErMzcasw0iTQNr1MFJLL6lAv6lc8Z2Dk4xNOfioDwlcCmACje5UVLPatzbxUlekQQ8j3yTb+plu+s011l/awNaT9Ix6QOo651Gi9a1GuyQwf1UXGIEAd4aEnRIR6wqT91DBsayRYQEV2qY22s4aA0R6qaChWJXmXwXc1RWWyTWhKsdnBjUH4X1mPOVJwUMpLjNKZpHhFGb05WNWH1kckmNu5MQSxbqZ+d/6NLrGAe/aYsrO53/vpcelTniMGaicylz6salXFifm+7YKwgogcvPI8XhLbXhKxpLHVcsHtV6c0TtI7kcha2S4QeriWaCpIQR5jDOX4e+v/AriJIyBIqbBNGtvoSNAJrEmeFPbqRlON5hu11HhPsyWKicfzZ+fs1zpSzhJJnG+QXdOVSZPlCpYKuGLQEzzJr6hsPPbsuRzCejMgrFT/ZM8faTDiQWDgjE2s3W645jAML5lPsg71rpqU6bc5BQ7utLYpwgrRmfBAGwdexsikN2+eoBnTY6shXu7tl7x+uK12JXWKoEcos6fDjXtV3VtIYFhbmZX9k4GBd/g+fr7etjiidCcSOW2kKBUIzbvp6xopNPfD6WygC3r8fH/mv8lavrZJ6NtcQ86VSQv0Ahm6ppYsvGsUe/6v2s5VcPSkewihiHFJhKYqjYPTkLQJqDCnzfzV1Xt8y9LHsp9Jh62pQmWW6LDpqLTtv05fbLPgQmMLhq/lWmrzbmoQFoNPgKXI5u36Rl/ZDlXWpjMAY9itvKe+cyl+26cPAPBkUu/QSmBV+o6WJaeyC+b7yq7KjbVm7sDo9lrm4/kXXRixxu2Hcn4iGdJmM4xwoYob8xe7WegaH197QxUsxJgAfF9KxXuEPFA+OZ4aO0XW2cSEX7OqGN0hXeWnp+YQijNOQ0V1f/92B9wJmK/EZ8goK9jIsT0M5jk9cguK5e+lOuQgBf1TRYeRPWbMUOCv6GRPxQ/WiklzZZcOERFuOuvFGjz2rwGL+uxh11dtnFIQnyG2meY9ykt5CPLksU5L14HaAY66GQdV/l4d8pNG1jpJIx+j3/xC2AkzDmeflfAs2C4o65BdTGV6iZSCQ6BPpxaICC1qSa2j3ZmDIx3hKpn9VTk+u1Rj1a5cjwBvAU9/6xWnhc6Q6f5QaknyZQrnjHyoufREDztNss6QvWzH7iS/zF5KPOI+VDXpTrwAyb+HRhFIMaI8qw9bng9XJ5sqgkr2zctRDCnzKfbUoeg1fzXXWBjm7g0z3AChGY8jIG4gBi+n9gCebf7KRwwyYbNORpioN+xnbKx4BiYxGBWse1icM0EAlU+z9gsBa8yMBdf4sZMeA+OCu0FeBMOEJmPVgOr9Y0BILQs2HfRkEk+BnzroEVBg5ev3etIbFfUkGO5UX/h2R8+wqV9D9MG0fmrt1QFtMphunSn+1gc6kTcGasEm2TZputrHWpDIvE3E3//LYFpx1v/ZZmkWfb5L0EKD5FloTTXLnaypfxKuklM7uu5xUqsGnUAQZOQdJ39bjs0Kzmzvcqr3Dkz7gsSBwKrY2jZF+gnIEsiH3eGyfT+Eb90m+H5/YRWhvGeM22nUTIr0y10F1WMtT+NWsXPko7zNVuj8skp4NkmxWZmae1Ceay7muLMW6RNRpAMYH0vfRraB0HfIKjRr909pmrZO3Hj0KFvcTGz/gzapIeUncp20InM9OOnkJ2iH4E3M+Kt2dxQUsUMh+34tQWEQ7jJ1Psi9KyXxCr1I+d8LSG+usycNyX3lIO6KDkdDo9gM26Hhjw9KrQsJHoUMOOiToL6As3k1CXdxW1tAthk2tt+weVAlkUchGPfLH2Vf3chdjH7kACJqpeoe9GKWtryCY0bx+TtvafLP0ZoC3XOgI0uLuAplD2GgxN+JNcZ8T8ZDv0P96YAULnldhi5SjA82paSg9HX8LAKASlOojFFVkqia6Ltq3umSFDhD3XL6MUArTib8ibtJBm/0Ptr5hmKmTMNPd34TWuxAkmZswUrSoONOzGLYEPAlWhxzXGmmz558M/RWZ/UWQgAcqCfR2aNp51dhUQkaT6HQ0ISl/HyFLHPZBfd28joozE1WwNlcytv4YPCNpI4Tn4YWWShV4JIE2x2avTUSAWGFyVJXk0SHkCiiI1bdjyTDbS2KoGrjLGIcLITTUQq9h5TeY4WYFLypk8bqt2tqLnms6FtsCwjnLM/PYo+Jr265hhzmuEzDSg4wwUUeX5i6BkEVBGnlPtuvEhc9+BLEtLO5zK6dZvgRkx5a1vrlHf1byHK4w+w0fZwAvu6Qs0GBbt+Q3R0Zq4Kj+lR0Ytv5L+hGMtdFC+siKe7e8x13b9xnyDbtKON+J4NUyENGfxRSAXNJzCRqOc6HVx4QsGLhbYmHXa1GCxF5KvJ8RYOxgUbIX2n/yumDEQRJAD7p9DKotjLI7yhyJooLo2XulOaOjHtvEjQ/3W7nELzLLP8mw1gUs06RggjmyUTQF8+M0aQLG3VXwwarAdegsuL7uSdVK/zsfM0U/K//sjG7w3gFIEaqbuvI1iAjEiMlc3e7bABat7TQ80+ZK9s3600zmK1moCpq3T4bAMZw4j5/DOByURud5mUZ5SQqieduA8Lv66IDjoLnQ3WDBfZQtx1DJNUEX4B0gzQWVWuYZnwIfXJ4p7HBBnqRCRwAB4XMiKCx3Mg8Pho6Z/2/lkrpIDHCDWFC+EpZeysptyITWTXJNVJnaRnAOp1ZaFML1KPl+RHMG3wJBXH3SEkuDl6nXLXZOuRl+lMn9pBy0y/jNdNbe8V/NBfGHcTWnzgswp8mJCjcL2IKO7OcGyGpC3KSlSO9aPRKXJ9hbaRd5KWJ/fqAEZs1urdCkfD4jy/PD8L7koE+QLBzjjewNa/rvV+deXj7JA0XgxNivCNUYx11Z0ptmC/CQV2/aQyCVGtcYpl4OPXngurTBP28zS2cbZIBaMfjlMwqbcLHVjPkz2iHelacI/IwiQxQ1J2N/E61RMC1yIQ0n+Yi/dzqlbit+zIhnbRA5tToxxCy4qfVnag6NkajsWcU02AvxniXM16l3O/RBvAtbQ24H0WWTZrgaFhlFYtaaX8V8WF0jPKX/Hso8u2tS9ISuX6NNnBS7WxB1rNZtv06uyWfTGFmDlpvkrDy7HYwP3XE+OU70u3aRrmyJYw5NG8dBzn1DiHevBA1/MtryX0yE3CiX9Ovpl9+Q4mj/VpduqjHOX5gvmrgct9UQCWUwny5RtinPw2sI+TvzWYjGhXZiNTuSmQSAN9XG8vtHMh4hbWSABWHSsQ1uBTXL5YaF7kIPERN9roS+nDjhcEhZl4xCQVslGz0kL20F2ZhovfLYrbrPf5DaoyK8lII020FRiTgvj+xsx59OyFfT6LNOdxBjrN6gei+Ye4UV3xmOrvmvS+aXX1AeT85l2ca3wBtjg3FAkqjQRllLNIo0OtvcQOFxh+d4ON7sk5KpX/avGANc0zS9SWmMxd93K912w0L7K4cnfai4+0SXB+I0ZgpSXjZXQa4AI/ulOiLR0J0gxe9sC7SLMJ6aNtUBpcZWRt9dDlTC4cxSINdjbeNBFJi75/ON337qtJHsKM7778JPr4kP9VD6EW7E/2EjaxtqBiGoC5VVlkRRCAYgzc/ujga5zoRX2i8UfY2uOu8gi0TKKYz6T/DNcZg17r2QLunfoK1qoMPG/95wN5xcTqru5yZEMxl4bsXraveTY/mJ7oPkgCgkSYwmGy0dKpic3wgANCFtYtebvoEscFZyS6WVFLih7R/XuQMRCUfugmhiOg8ft/7xVjzqFw26QAymMx9fLAe92nKGM/moOI5iK1lze9eaBbu7ptbVbhGz+uxin6zmLkUusoAfg1mGqGkUr3RBCvd1yx6mGx2vfDrB7uphwzTN/YT5pnWYMMbag/+HL3Sn/gTMAzQ3fdMcFHNu2mgQB5T5R2IVk4UTDdVn2zwmlOVSTZKF78HFaacqrjgzuWTJiXC8bOgYerXUNbUDBHhzqt0XK2WVDQCn9H9nVOuKxFqKjJqU4npF+qzQYldTgVgwOChxggN20t4P8Uj/Rh0yTmUV5gSRwtJptDsZajmGbbxMWQ1+LmafIwq7D5sScIqk6E4a685JIZgAP76Dx6uLSQG9OpQ0ISPnB+zp+PCyVJtvNBjGYbPBgdkGHJ/ORGodx+JTFpBdzk517Hxi5rbCXUcbfuYITPIjgVkDRbvfyC3jNbhukMI3sa5HOWUEOgNrYssHIyiwBQnTGEFgG3h0AyNBOZ7m4moIN//1r97PqoWohAcg/0Sl5nO4BHc53jUkUPpmqXpUE7BETPm42mh9MU4TvAcZ6gdv2E578mETgMo00IUQSXUPhWbIG+3zfmWZAU3LHIocUCR0qWMDYzSyZ3BkWaY+B57kex3PGS+/OIb6u7x1yzsMV/DYQ1iZGBiDUzFBo5s7bBo+ulg61R+ShvGwcve+IoKMMI07SRUHni5wsb1B6lKrgfU+hZA3rTAsuJXvlB05rpe+OVZEv02c0hAUuYFMeajS4lBFlgSjDJXhY0YwLPykaCvUBdYGTbVHPmqfbjAVbDwA+MEaikJjS+8Y8GYwr5ZyxIVtRqZAZVAS4+AUjULjZEErjZAT/8Lb4W1GOx9iJN1i20sjWYMo9cgLmHXdE+aEBuKtvsQabUwBM290CTcNU/xZ7jv8PL1UeuyOlpkYBqFtkoHMwFlNBSLgqFWjblmtAOIp8BX4XSe/aMaANtAcehgv32FG2BwgVzwUwVF05A7AqnmVyhSIR2FNPgeP+Dk5iEGaudy+dCi/fm5rRNeP3VkBcQqJ5Q8/5eMtHWpP7mnro+OA+YpbyqrWtQ/MaBrHeAQ9hRuEnPPufTbo8j75pHwZdA1UIgTScyBJil2I30l+x40127xeJ7j9vEQUxbe6U8bcyWRmrfbuMZRdOuRsVTaI4gBXPs9epuRhqYIlA8JktCk4JJynSbW4nPZvQ8jLsj5VotTTGXQc4U+cz7XiuJfgdNQ7aEg6DPWkIvaT/ua6/hrrC1Fi8Hf9ZB0590JWDWFn2THCo0B5LvckliSyVPlYgZOfY0E3m9tj/R6bhY8Mqo/T934hn35Eaz9iviyc+XF36ADM9hl4baQ0kJqZK3131TEYNBL0mH0fYhF1ya71md7XCl13KP8znmKfjhkgjXF2VrrFOqUbRiqkrHsqe/fdcZNR47NHg0qO1XTMnKsczqIl5VW+KFth+ghQoHhveSrFuTth37OR/2ucWQpufr+dUHcTDol5ijEs1TIcRCzCzqYH59RkpIxvJjfumhAXNLqH7agygbgs5BYEM2xp3p4ib2+iGl9p3cEbwuDjqzZLmTh9I6b1B4fteRVtr+VuW9mbi/W6lfimqYPOW9ZH106qrBNy9X8U3l4qyy8sz3mDCmbe8eDzH5dcsGRdDFBH1T3rFScED6d+ORPT7Vm0cEFHZfL9apqlL6zMbuV5s4nfZxMeJD7pxaARueABfAlw4MWeQ9ob71cBXGOrjXXk/GDooZYKbqs5a6PTfWwZX9tvMfYzZpS3bi7YVJb7cOEOpOn2buoANckFNLhdY3PAarwz9Sl5dshM0Zwzm7+9XDiqz3TC/nD4Sg9Uh2LjGCd84WaTbUbutnpLbZ7c9EQrPJv55tBu0CkrxrmQuIktpc9bSnvsTCC1SAZ62n9rF/C/bDwzypogYexNyVatCY1Nv0kCQr3NNgPNwlm1+oB3ZJb4u60rt6YyuHGjE4rMpL+QbHgPHFLA85PWkyOAFFjVLwCJcbFDOjYbO08QT5ZFjrV7GKruneDnhc1jrRI2d2ir+nGL2Gt3k3cdLu4mMJd1RMz0GZC4HJI9w5NAk9O2xirX86KLcZIDJcC1yu8A1iUKOp0Ewwmj05kLigxcCskZxwKkCCiQMHsTO07ySozoOB3BFD5Mb6xjApvjolpM2sv9rE/kHAEgVJbiUN/NBjQ7ffUHC7GLHl1gbrcpMjcZn372kvyDWe9gQyCvrDT5ClsucgAN7fHHZCEVF7EoRT9Yd61Bw0T0nUO4HoGJq2Hx/CTggbKVAmeG+BgAiNhcuBBq8une8qT0oPX2OhC9jezyUlCpyE2nJJnbM6QtD89m2DKmBOIoUy8ZCeOuPbXT13VuL6Rg8ln2/YW1e3pw/R5GQjUTKXJMSsfcCMdZsUT7hsFcxjiQIxb/p0danNfqPrsZPkvXmj3+/HJQq3m5OFCU9CwsRAjCJ3GV5wWCEleuxE07rRUa6sLOObs+tPcGtDSB1l9hq/XdMU3hzKSD8S2qjSdMX4hQVaxsy3MlTqpYz02sDxYZZjMkEHNBWMik3aCktl5NAYIOlHawOuq85Dcq5LLMhnn76AgZI2SQVJ63G4QjoohdewVGCTSlP9pU9wdrFlu2SDqVHFQJiQKuB2iWTaNqVOgTzXcRk+Bnl+on+9pw+06rwz5xxR7/sozA2dt31gjBoHf0lDzgbsBZNl+Ev7Z58ZT2n9q55jNdKIPuqeRc9kZJJ7Cqn8T88HzAg3qhqDzd7epkGgkN6QnrhGj/kYTrOo4wLJEaEZsb+OYnefqI/UGYGP3NxIDl9zC8dRHh1Wg3Mjw6I68fSkLLiLW7POENYIu0+g+JcytXDmLNmhAhJQ3xK5lLgmyPlo8n4ST4vcLJigncY9km8+/U4zbT6CmqSfj8YHIyjTQgSK5XqFDwd1mCp9Jne0o/n3LNoQ6BOmlA9O6twhzqyw0rir8s/PsKZb+CCA2YL5TL66Suj5pgvX0DZkC6wTQJClt9Ca1aofVWjMH6A0VWYaedFJelxvT6rjyTtnThCsY/iPYGDpwGPMr2K+CZyQeQhfhR400FRj07zlDSSb9OBfeHS12sKjfitzoYC3kuWq209VPoFLGMaeld2wQFpVXvg+UjnLmNn8nXroHX34aXyoitAWjJ2Nccz6Efg5eWORS8VfhEt+ctU3Y28X01aTJGTqRaAdBFPkbCmZRWBLEOF+9vJrqrrY+zrCyHpT1LzYJI/NvHCEUXaD8nwYUO6/Ao/0JSDGtROeU5uOy/A31JVdJhKPNAM9yy5lVSvr/hWJ+0fQDGfQLy1oECgp3LZow1iwvsXlR9Zq/UJY9/ZptjpcITLV7BCHKhQDTrdXBtc33ApHnMIvewfT1vtO3pm1ydNXirExor0gVtOaugfxRs6/UxSXBy3KWDHIU+SSOcndtjSadP+/oGO33qSBpf92B/4VxsnJ1TSGSCZMZXrq3NW7pB3CeVA29Ege5fy1LeondmV9pdKhdhgtruTY9iq1US7sRUyumuJgBGy8y9o3lxe9VJ3eGwr2Ze2W9L5eK5NZvK0iE/nJQbIpdquMeZOZhOzhdFaZAj5L1fN3vsuMHHqqI12HJa12OHy0gV8ba+YsZuw1dYfOXC/3ziCJvg/q+XQYrDHkYVSMYz0MgCHMUSjrR+8E8YYxRnVFGw20NeUZipUQB/PR520Bm/wIA9TPfU4gVwQqj4DfdmUQDC2Z6zoO19MyFMS+/slnTCe5EjQTjhwBMHzCp4Jyn2Df8GRdizeG5Uk0ZAGiccsSh+i0InRtpz0q8N8T2+3Tb7PrG6cwLL9pn7afPzmbVT7SsEgLmkRCAahNTv+r4jvfRYD2l0uda38El25HPXXnwdxKeV8zRblIOPP9MnpStFRF8ZA2sVH2GOc4oc6eaOGfqT3CidwiGB0qf101Qsg398AzGHlgfG2y4s90u/OCMQmRnBgb3W6DHnd9DuohNCxv5TwMHCnP/ZWVqdGFbylQOMF4le665I4yh8Szq/ZbgREIMUmLlAm6DF/8V701XvhaedYRF3KxCi5lp8kV44mBh75God3T90RPx9kI90hhMg2J5IkpPHLA9W4m7gCZ4d4Hq2FqiobovK2hXtHQJVHDswyTXAO1UiMRdZKtkLpg3yt9RGK52Gk6HXD0PHHZyPVtwRkuP6+9hbwAXlBWWqTOYA7wQVGaIFtR3EpvmHJtiwE1P9VNsS+655QP7N3K4IeZ0vqWg0ZTakNqacyxXk/K+0/j7ATWjoP3zOTSSlDFDFHNxlFsvvq6Op704A7dtrv7FVnbYwvmXTK0cd9TxS05H7+1MKv6deWnmj9WLsNyplzoC7zXhvK5Sls4OkD54lnopmnYILjsx+NZXFVjEentQPtXJArbhnYsLbufzlnG+YwcBRoEonL+maFm4//+k0/qFoLth7ZXtVCtLkjduz88xlACQXzlgPGkeh/e18thPiinNe21zOmD0;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html"},{"title":"連続最適化(1)制約なし最適化","text":"講師： 佐藤一誠 参考書： 最適化手法 参考書： 機械学習のための連続最適化 In [1]: import numpy as np import matplotlib.pyplot as plt 講義概要 凸最適化問題 最急降下法 ニュートン法 準ニュートン法 凸最適化問題 凸関数 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、以下が成り立つような関数を 凸関数(convex function) と呼ぶ。 $$f\\left(\\left(1-\\theta\\right)x + \\theta x&#94;{\\prime}\\right)\\leq\\left(1-\\theta\\right)f(x) + \\theta f\\left(x&#94;{\\prime}\\right)$$ $f$ が一階微分可能の時、$f$ が凸関数になるための必要十分条件は、感覚的には接戦が常に関数の下に来ることで、 $$\\forall x,x&#94;{\\prime}\\in\\mathcal{X},\\quad f\\left(x&#94;{\\prime}\\right)\\geq f(x) + \\nabla f(x)&#94;T\\left(x&#94;{\\prime}-x\\right)$$ $f$ が二階微分可能の時、$f$ が凸関数になるための必要十分条件は、 ヘッセ行列(Hessian matrix) $\\nabla&#94;2f(x)$ が 半正定値(positive semi-definite) ↔︎$\\nabla&#94;2f(x)$ の 固有値(eigenvalue) が全て非負 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、$(1-\\theta)x+\\theta x&#94;{\\prime}$ も $\\mathcal{X}$ に属するとき、$\\mathcal{X}$ を 凸集合(convex set) と呼ぶ。$x$ と $x&#94;{\\prime}$ を結ぶ線分上の全ての点が $\\mathcal{X}$ に属するということ。 最適化 最適化問題(optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 最適化アルゴリズム(optimization algorithm)： 収束する点列の生成アルゴリズム 最適性条件：最適化問題の最適解であるための必要条件 制約なし最適化問題(unconstrained optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 $f$ を 目的関数(objective function) と呼ぶ。 目的関数は 微分可能(differentiable) と仮定する。 最適性条件：$\\mathbf{x}&#94;{\\star}$ が最適解のとき $$\\nabla f(\\mathbf{x}&#94;{\\star}) = 0$$ 凸最適化問題(convex optimization problem)： 関数 $f$ が凸で集合 $\\mathcal{X}$ も凸 最適解（の集合）が 一意に定まる。 最適解の必要十分条件： 勾配(gradient) がゼロ（凸でない場合は 必要条件 ） 最急降下法 最急降下法(steepest descent method) ※ 勾配法(gradient method)とも。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\quad (\\varepsilon_k>0\\text{ : step size})$$ 凸最適化問題の場合、 大域的最適解(global optimization solution) が求まる 非凸最適化問題の場合、 局所最適解(local optimization solution) しか求められず、様々な初期値から何回か学習して最適解を採用する、ことしかできない。 ステップ幅(step size)の選択 焼きなまし(annealing) ：「最初は大きく、徐々に小さく」。しかし、適切に実装することは容易でない。 正規化(normalization) ：$\\varepsilon_k = \\varepsilon_k&#94;{\\prime}/\\|\\nabla f(\\mathbf{x}_k)\\|$ 勾配が大きいとき安定するが、勾配が小さいときは不安定 厳密直線探索(exact line search) 目的関数の値を最小にするステップ幅を求める。 $$\\underset{\\varepsilon_k>0}{\\min}f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)$$ $f$ が 単峰関数(unimodal function) の場合は、 二分探索法(binary search) や 黄金分割探索(golden section search) などの探索によって最小値を探す。 一般に、一次元の非線形最小化問題を解く必要があるため、最適なステップ幅の探索に時間がかかる。 厳密直線探索を用いた最急降下法は、 一次収束(linear convergence) する。 $$\\text{Q-linear convergence: }\\|\\mathbf{x}_{k+1}-\\mathbf{x}&#94;{\\star}\\| c\\leq \\|\\mathbf{x}_k-\\mathbf{x}&#94;{\\star}\\|&#94;q,\\quad 0 In [2]: ITERATION = 10 N = 100 fsize = 4 In [3]: a = 10 ; b = 1 A = 2 * np . diag ([ a , b ]) func = lambda x , y : a * x ** 2 + b * y ** 2 In [4]: x1min =- 5 ; x1max = 5 ; x2min =- 5 ; x2max = 5 initialX = np . array ([ x1min + 1 , x2max - 2 ]) x1 = np . linspace ( x1min , x1max , N ) x2 = np . linspace ( x2min , x2max , N ) X1 , X2 = np . meshgrid ( x1 , x2 ) Z = func ( X1 , X2 ) In [5]: def find_step_size ( method , f , X , A , ** kwargs ): df = A . dot ( X ) if method == \"fixed\" : epsilon = 1e-1 elif method == \"exact line search\" : epsilon = np . sum ( np . square ( df )) / np . sum ( np . square ( df ) * A . diagonal ()) elif method == \"backtracking line search\" : epsilon = 1 alpha = kwargs [ \"alpha\" ]; beta = kwargs [ \"beta\" ] while True : newX = X - epsilon * df if f ( newX [ 0 ], newX [ 1 ]) - f ( X [ 0 ], X [ 1 ]) <= - alpha * epsilon * np . sum ( np . square ( df )): break epsilon = beta * epsilon return epsilon In [6]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [7]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 例：$f(x) = 1/2\\mathbf{x}&#94;T\\mathbf{Ax}$ $$ \\begin{aligned} \\frac{\\partial f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)}{\\partial\\varepsilon_k} &= \\frac{\\partial}{\\partial\\varepsilon_k}\\frac{1}{2}\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)&#94;T\\mathbf{A}\\left(\\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\\\ &= \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right) - \\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{Ax}_k\\\\ &=0\\\\ \\therefore \\varepsilon_k&#94;{\\star} &= \\frac{\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2}{\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right)}\\qquad (\\nabla f\\left(\\mathbf{x}_k\\right) = \\mathbf{Ax}) \\end{aligned} $$ バックトラック直線探索(backtracking line search) $\\varepsilon_k=1$ に初期化 アルミホ基準(Armijo rule) ： $$f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right) - f\\left(\\mathbf{x}_k\\right)\\right) \\leq\\alpha\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2$$ が成り立つまで $\\varepsilon_k$ を $\\varepsilon_k\\leftarrow\\beta\\varepsilon_k$ と減衰させる。（$0<\\alpha, \\beta<1$） 目的関数の減少量の線形予測値の $\\alpha$ 倍の減少を保証している。 $f$ の真の減少量： $$g\\left(\\varepsilon_k\\right) = f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right) - f\\left(\\mathbf{x}_k\\right)$$ $f$ の減少量の 線形予測値 $$\\begin{aligned}\\varepsilon_kg&#94;{\\prime}(0) &=\\varepsilon_k\\cdot\\left( -\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k-0\\cdot\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\right)\\\\&=-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k\\right)\\\\&=-\\varepsilon_k\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2 \\end{aligned}$$ In [8]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [9]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 微分不可能な場合 目的関数 $f$ が 微分不可能(non-differentiable) の場合は、微分の概念を一般化した 劣微分 を用いる。 凸関数 $f$ の $\\mathbf{x}&#94;{\\prime}$ での 劣勾配(sub-gradient) とは、全ての $\\mathbf{x}\\in\\mathcal{X}$ に対して次式を満たす $\\mathbf{\\xi}$ $$f(\\mathbf{x})\\geq f\\left(\\mathbf{x}&#94;{\\prime}\\right) + \\mathbf{\\xi}&#94;T\\left(\\mathbf{x}-\\mathbf{x}&#94;{\\prime}\\right)$$ $f$ が微分可能な時、$\\mathbf{\\xi} = \\nabla f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ 上式を満たす $\\mathbf{\\xi}$ 全体を $\\partial f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ で表し、 劣微分(sub-differential) と呼ぶ。 微分不可能な点では、劣微分のどれかの値を用いる。 ニュートン法 一般にニュートン法という名称は、方程式の解を求めるアルゴリズムを指すが、以下を表すことが多い。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ 勾配法では一階微分しか用いていないので、二階微分も用いることで反復回数を減らすことが狙い。実際 $k$ が十分大きい時、最適解 $\\mathbf{x}&#94;{\\star}$ の近傍で 二次収束(quadratic convergence) するが、逆行列を求める計算コストが大きい。 二次の テーラー展開(Taylor expansion) を用いて $f$ を現在の解 $\\mathbf{x}_k$ の周りで近似 $\\left(f(\\mathbf{x})\\approx f_k(\\mathbf{x})\\right)$ し、その二次近似を最小にする $\\mathbf{x}_k$ に更新する。 $$f_k(\\mathbf{x}) = f(\\mathbf{x}_k) + \\nabla f(\\mathbf{x}_k)&#94;T\\left(\\mathbf{x}-\\mathbf{x}_k\\right) + \\frac{1}{2}\\left(\\mathbf{x}-\\mathbf{x}_k\\right)&#94;T\\nabla&#94;2f(\\mathbf{x}_k)(\\mathbf{x}-\\mathbf{x}_k)$$ $f_k$ の勾配をゼロと置いた方程式 $$\\nabla f_k(\\mathbf{x}) = \\frac{\\partial f_k(\\mathbf{x})}{\\partial \\mathbf{x}}= \\nabla f(\\mathbf{x}_k) + \\nabla&#94;2f(\\mathbf{x}_k)\\left(\\mathbf{x}-\\mathbf{x}_k\\right) = \\mathbf{0}$$ を解けば、$f_k$ の最小解が以下のように求まる $$\\mathbf{x}&#94;{\\star} = \\mathbf{x}_k - \\left(\\nabla&#94;2 f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ なお、ヘッセ行列が逆行列を持たない時は、 単位行列の定数倍を加えて対処する（正則化, regularization） らしい。 $$\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right) + \\mu\\mathbf{I}\\right)&#94;{-1},\\quad\\mu>0$$ 準ニュートン法 ニュートン法の近似。ニュートン法ではヘッセ行列の逆行列を求めるのに計算コストがかかるので、勾配ベクトル $\\nabla f(\\mathbf{x})$ を用いて近似計算する。 BFGSアルゴリズムを用いたヘッセ行列の更新式が有名 なお、 レポート課題 で詳しく記述しているが、BFGSアルゴリズムのヘッセ行列の更新式は以下で表される。 $$ \\mathbf{H}_{k+1} =\\mathbf{H}_k+\\frac{\\mathbf{t}_k\\mathbf{t}_k&#94;T}{\\mathbf{s}_k&#94;T\\mathbf{t}_k}-\\frac{\\mathbf{H}_k\\mathbf{s}_k\\mathbf{s}_k&#94;T\\mathbf{H}_k}{\\mathbf{s}_k&#94;T\\mathbf{H}_k\\mathbf{s}_k} $$ なお、この時 $$ \\begin{aligned} \\begin{cases} \\mathbf{s}_k &= \\mathbf{x}_{k+1} - \\mathbf{x}_k\\\\ \\mathbf{t}_k &= \\nabla f(\\mathbf{x}_{k+1}) - \\nabla f(\\mathbf{x}_k) \\end{cases} \\end{aligned} $$ まとめ 凸最適化問題 目的関数が凸関数で定義域が凸集合 最適解が一意に定まる 最急降下法 勾配を降下するように値を更新 ステップ幅の選択が重要 目的関数が微分不可能な場合は、劣勾配法や近接勾配法を用いる ニュートン法 二階微分の情報を利用する ヘッセ行列の近似を用いる準ニュートン法が実用的 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html"},{"title":"分子生命科学Ⅲ 第3回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 感覚神経系(1) 感覚系の構成 1 ：外界や内界からの感覚刺激を電気信号に変換する装置 2 ：感覚細胞で生じた電気信号は、一次感覚ニューロンに始まる感覚神経のリレーにより中枢に伝達される。種々の感覚情報は、特定の伝達路を通り、大部分が 3 を経由して特定の 4 に到達する。 5 （ 4 ）：感覚情報は、 4 の 5 （体性 5 、視覚野等…）を興奮させる 体性感覚 体性感覚系(somatosensory system) は、 受容体が体の一部ではなく、全身に分布 しており、皮膚・粘膜・関節・筋・腱など様々な場所から感覚を受け取る。 多様な刺激に対応するため、 単一の感覚というよりも、少なくとも4つの感覚（ 6 ・ 7 ・ 8 ・ 9 ）によって構成されている。 6 ・ 7 の刺激は機械的、もしくは熱・寒冷・化学物質 8 の刺激は機械的刺激 9 は、関節の屈曲度や筋の収縮度に関する感覚情報で、脳はこの感覚により身体各部の位置感覚、運動の状態、体に加わる抵抗感覚、重量感覚等の情報を得る。 という点で他の感覚系と異なっている。 感覚ニューロン 体性感覚系は、皮膚および筋肉全体から構成される最大の感覚器を有している。 体性感覚系の全ての感覚ニューロンの細胞体は、ヒトでは 10 対の 11 ：同じく 10 対の 12 と一対一の関係になっている。ただし、1つの 11 が切断されても、隣接する 11 が重複する領域を神経支配しているため、対応する 13 と同側の感覚が全て失われるわけではない。（3つの隣接する 11 が切断されると1つの 13 の感覚が消失する。） 14 対の 15 ：脳幹に隣接しており、顔の体性感覚を担っている。 皮膚の分節構造 脊髄の分節構造 ※ 10 対の 12 は、神経の始まる椎骨にちなんで名付けられている。 のいずれかに位置している。 皮膚の機械受容器 体性感覚系の受容器の多くは 16 であり、それぞれの受容器の中心部には無髄の神経突起の枝がある。これらの神経突起の終末は 17 を持っている。これらのイオンチャネルの開閉は、チャネル周囲の細胞膜の伸展や張力の変化に依存する。 皮膚の機械受容器を上図に示した。 名称 役割 受容野の大きさ 順応 18 真皮の深くに位置し、最大で2mm、多くは1mm程度であり、裸眼で見ることができるほど大きい 大きい 19 20 有毛部および無毛部に見られ、 18 よりわずかに小さい。 大きい 21 22 18 の1/10程度の大きさで、無毛皮膚の隆起部（ex.指紋の隆起部）にある。 小さい 19 23 表皮内にあり、神経終末と扁平な非神経性の上皮細胞からなる。 小きい 21 なお、刺激の詳細な性質を識別する能力は、体の部分によって大きく異なっており、 2点識別覚 の結果は以下のようになる。指先が最も分解能が高い。これは、 指先の機械受容器の密度が体のどの部分よりも高い。 指先には小さな受容野を持つ受容器が多い。 多くの脳組織が、体の他の部分より指先の感覚の分析に充てられている。 脳には高分解能の識別を担う特別な神経機構がある。 などの理由が挙げられる。 一次求心性軸索 皮膚は豊富な神経支配を受けており、この軸索は 末梢神経系 の膨大なネットワークを形成し、中枢神経系に達している。 体性感覚受容器から脊髄、あるいは脳幹に情報を伝播する軸索は、体性感覚の 24 である。 24 の径は様々であり、その太さは接続している感覚受容器の種類に関係している。 太い有髄神経線維（ \\(A\\alpha,A\\beta\\) 線維）は、伝達速度30-120m/sで速く、 9 と 8 を運ぶ。 細い有髄神経線維（ \\(A\\delta\\) 線維;伝達速度4-30m/s ）、無髄神経線維（ \\(C\\) 線維;伝達速度0.5-2m/s）は 7 ・ 6 と一部の 8 （優しく撫でる等の快楽的な接触等）を運ぶ。 体性感覚野 全ての感覚野と同様に、体性感覚の処理の最も複雑な段階は 大脳皮質 で起こる。なお、体性感覚系に関連する皮質の大部分は、 25 にある。 ブロードマン3b野 は現在、 26 とされており、中心溝のすぐ後ろにある中心後回と呼ばれる皮質に存在する。 S1野の皮質表面の電気刺激により、体の特定の部位の体性感覚を生じさせることができるので、これを用いて 皮質の体性感覚の体表面地図 （ 27 ） を作ることができる。また、皮質の単一ニューロンの活動を記録して、そのニューロンの体性感覚受容野の体表面上の部位を明らかにする方法でも、これを作ることは可能である。 上記の 27 からは、 地図は必ずしも連続しているのではなく、分離されていることもあること。（ex.手の部位再現は顔や頭からは分離している。また、外陰部は足指の下にあり、最も深い隠された位置にある。） 体性感覚地図を立体で表現した 28 を見ると、 28 はヒトの体の相似形ではなく、むしろ戯画のように見えること。体のそれぞれの部位に当てられる皮膚の相対的な大きさは、その部位からの感覚入力の 密度 （≒重要性）に関係を持っている。 がわかる。なお、皮質地図は感覚 経験 の量に応じて動的に変化することが知られている。（刺激を消失させると、その場所に与えられていた皮膚部位は隣接部位に当てられる/刺激が増加された場合、刺激された部位が拡大。） シナプス伝達 シナプスには2つの面、 29 と 30 がある。シナプス前側は一般に軸索終末で、直径約50nmのシナプス小胞が多数含まれている。シナプス小胞は 31 を含み、これを用いて 他のニューロンの樹状突起や細胞体 からなるシナプス後側と情報伝達を行なっている。シナプス前膜とシナプス後膜の間は、20-50nmの 32 がある。 31 のシナプス前からの放出によって引き起こされる 短時間の シナプス後膜の 33 は、 34 と呼ばれている。これは、アセチルコリンおよびグルタミン酸動性イオンチャネルで、リガンドが結合すると、非選択的陽イオンチャネルが開口し、 \\(\\mathrm{Na}&#94;{+}\\) や \\(\\mathrm{K}&#94;{+}\\) の陽イオンを通過させる。 35 は、 36 と呼ばれている。 GABA 、グリシン作動性チャネルはリガンドの結合により、陰イオン、主に \\(\\mathrm{Cl}&#94;{-}\\) を選択的に通過させる。 神経伝達物質 37 多くのニューロンはただ1つの神経伝達物質（アミノ酸、アセチルコリン、モノアミン）を持つ。一方、神経ペプチドを含む多くのニューロンは、アミノ酸、アセチルコリンあるいはモノアミンと神経ペプチドを放出する。 主要な神経伝達物質としては以下が挙げられる。 種類 神経伝達物質 説明 アミノ酸 グルタミン酸(Glu) 中枢神経系の 38 ニューロンのほとんど、感覚ニューロンのほとんど アミノ酸 GABA(γ-アミノ酸) 中枢神経系の 39 ニューロンのほとんど アミノ酸 グリシン(Gly) 中枢神経系の 39 ニューロンの一部（脳幹や脊髄に存在） アセチルコリン(Ach) 筋肉を興奮させる運動ニューロン、自律神経系のニューロン（交感神経の節後以外全て）、中枢神経系の興奮性および調節性ニューロン モノアミン(monoamine) セロトニン(5-HT) 中枢神経系の 40 ニューロン モノアミン(monoamine) ドーパミン(DA) 中枢神経系の 40 ニューロン モノアミン(monoamine) ノルアドレナリン(NA) 中枢神経系の 40 ニューロン、自律神経系のニューロン（交感神経の節後ニューロン） モノアミン(monoamine) ヒスタミン 中枢神経系の 40 ニューロン 神経ペプチド 38 、 39 、 40 のニューロンから共放出、神経内分泌細胞 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-3.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-3.html"},{"title":"Zuker Algorithm","text":"Free energy minimization of RNA seconary structure. In cells, RNAs are likely to form energetically stable secondary structure. The correctness of secondary structure should be evaluated based on the free energy, rather than the number of base-pairs ( Nussinov Algorithm ) We first describe a way to calculate the free energy of a particular RNA secondary structure. We describe the Zuker algorithm which calculates the RNA secondary structure with the minimum free energy (MFE). Free energy of RNA secondary structure The free energy of a secondary structure is approximated as the sum of the free energy of \"loops\". $$E = \\sum_iE_i$$ The free energy of individual loop is given by experimental data. (ex. $\\mathrm{C-G: }-3.4\\mathrm{kcal/mol}$, $\\mathrm{U-A: }-0.9\\mathrm{kcal/mol}$) Five types of \"loops\" hairpin loop stacking bulge loop internal loop multi-loop F1(i,j) F2(i,j,h,l) Fm=a+bk+cu a,b,c: constant k: the number of base-pairs in a multi-loop u: the number of single stranded nucleotides in a multi-loop Algorithm variable meaning $W(i,j)$ the minimum free energy of subsequence from $i$ to $j$. $V(i,j)$ the minimum free energy of subsequence from $i$ to $j$ when $i$ to $j$ forms a base-pair. $M(i,j)$ the minimum free energy of subsequence closed by two or more base pairs. $M1(i,j)$ the minimum free energy of subsequence closed by one or more base pairs. Recursion $$ \\begin{aligned} W(i,j) &= \\min \\begin{cases} W(i+1,j)\\\\W(i,j-1)\\\\V(i,j)\\\\\\min_{i\\leq k Initialization In [1]: from kerasy.Bio.structure import Zuker from kerasy.utils.bio import readMonoSeq In [2]: model = Zuker () In [3]: # 以下の形のパラメタファイルを受け取ります。 ! cat params.json { \"inf\": 1e3, \"type\": \"RNA\", \"Watson_Crick\": true, \"Wobble\": true, \"hairpin\": [Infinity, Infinity, 4.4, 4.6, 4.7, 4.4, 5.0, 4.5, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 5.9, 6.0, 6.1, 6.1, 6.2, 6.2, 6.3, 6.3, 6.4, 6.4, 6.5, 6.5, 6.5, 6.6, 6.6, 6.7, Infinity], \"internal\": [Infinity, 1.0, 1.0, 1.1, 2.0, 2.0, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9, 3.0, 3.1, 3.1, 3.2, 3.3, 3.3, 3.4, 3.4, 3.5, 3.5, 3.5, 3.6, 3.6, 3.7, 3.7, Infinity], \"buldge\": [1.0, 1.0, 1.0, 1.1, 2.0, 2.0, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9, 3.0, 3.1, 3.1, 3.2, 3.3, 3.3, 3.4, 3.4, 3.5, 3.5, 3.5, 3.6, 3.6, 3.7, 3.7, Infinity], \"a\": 6.0, \"b\": -1.0, \"c\": 0.1, \"stacking_cols\": [\"CG\", \"AU\", \"GU\"], \"stacking_score\": [[-3.0, -2.0, -2.0], [-2.0, -0.5, -0.5], [-2.0, -0.5, -0.5]] } In [4]: model . load_params ( \"params.json\" ) In [5]: model . params () | parameter |value | --------------------- |a | 6.0| |b | -1.0| |c | 0.1| |inf |1000.0| |type | RNA| |Watson_Crick| 1| |Wobble | 1| In [6]: model . stacking_cols Out[6]: array(['CG', 'AU', 'GU'], dtype=' In [7]: model . stacking_score Out[7]: array([[-3.e+00, -2.e+00, -2.e+00, 1.e+03], [-2.e+00, -5.e-01, -5.e-01, 1.e+03], [-2.e+00, -5.e-01, -5.e-01, 1.e+03], [ 1.e+03, 1.e+03, 1.e+03, 1.e+03]]) In [8]: # サンプル配列 sequence = readMonoSeq ( path = \"sample_seq4.fasta\" ) In [9]: print ( sequence ) ['CCACCUCGCCGCGAAGAUUGGAUGUAAUGUUCACUUAAGCCUAGGCGUUCGCAAAGAAAUACCUAUGGUAAUUUGACUAGCGGUAACAAUGAAAGAAAAGGUGUAGGCGAGGUGGG'] In [10]: # 最大ペアの配列 model . predict ( sequence [ 0 ]) Zuker Algorithm Score: -37.5 ================================================================= seq: CCACCUCGCCGCGAAGAUUGGAUGUAAUGUUCACUUAAGCCUAGGCGUUCGCAAAGAAAU : ((((((((((((((((..((((((...)))))))))..((((....((((((..(((((( seq: ACCUAUGGUAAUUUGACUAGCGGUAACAAUGAAAGAAAAGGUGUAGGCGAGGUGGG : (((...))))))))..)).))))..))...........)))))).)))))))))). ================================================================= In [11]: model . W Out[11]: array([[ 0. , 0. , 0. , ..., -34.5, -37.5, -37.5], [ 0. , 0. , 0. , ..., -34.5, -34.5, -34.5], [ 0. , 0. , 0. , ..., -32.5, -32.5, -32.5], ..., [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ]]) In [12]: model . M Out[12]: array([[1000. , 999. , 999. , ..., -35.4, -38.5, -38.4], [1000. , 1000. , 999. , ..., -35.5, -35.4, -35.3], [1000. , 1000. , 1000. , ..., -33.4, -33.3, -33.2], ..., [1000. , 1000. , 1000. , ..., 1000. , 999. , 999. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 999. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ]]) In [13]: model . V Out[13]: array([[1000. , 1000. , 1000. , ..., -31.5, -37.5, -34.5], [1000. , 1000. , 1000. , ..., -34.5, -31.5, -31.5], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], ..., [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ]]) if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-9.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-9.html"},{"title":"生物物理学 第3回","text":"講師： 樋口秀男 タンパク質の構造と安定性 タンパク質の定義 特定のアミノ酸（20種類）が重合した重合体である。 特定の立体構造をとる。 （これがないと ポリペプチド ） 機能 説明 分子認識 ミオグロビンは酸素を結合。抗体は抗原と結合。 触媒（酵素） 化学反応の反応速度は \\(10&#94;8\\) ~ \\(10&#94;{17}\\) 倍にも加速される。 制御 基質の結合や環境の変化に伴い構造を変化し、タンパク質の反応を制御する。 エネルギー変換 光を電位に換え、ATP分解を力に換える。 構造形成・維持 タンパク質重合体は細胞や細胞内器官の構造を支える。 タンパク質を構成するアミノ酸 d-グリセルアルデヒドの立体配置を基準として、この立体配置を崩さずにできる化合物をD-体、その鏡像異性体がL-体。 ※ タンパク質はL体 構造 名前 略（三文字） 略（一文字） アラニン Ala A アルギニン Arg R アスパラギン Asn N アスパラギン酸 Asp D システイン Cys C グルタミン酸 Glu E グルタミン Gln Q グリシン Gly G ヒスチジン His H イソロイシン Ile I ロイシン Leu L リシン Lys K メチオニン Met M フェニルアラニン Phe F プロリン Pro P セリン Ser S トレオニン Thr T トリプトファン Trp W チロシン Tyr Y バリン Val V # 上記の表は以下のコードを応用して作成した。 url = \"https://ja.wikipedia.org/wiki/タンパク質を構成するアミノ酸\" soup = BeautifulSoup(requests.get(url).content, 'lxml') for li in soup.findAll(\"li\", {\"class\": \"gallerybox\"}): text = str(li).replace('\\n', '') src = re.findall(r'<img.*src=\"(.+?)\".*>', text)[0] name, l3, l1 = re.findall(r'<p>.*title=\"(.+?)\".*<br/>\\((.+?)\\xa0\\/\\xa0(.+?)\\)</p>', text)[0] 理論的構造決定法 アミノ酸配列→量子力学→タンパク質の構造とエネルギー状態を決定 シュレディンガー方程式は水素原子のみ解析的に解くことができ、それ以外は近似を行う必要がある。 現在、高精度に計算（第一原理分子動力学法）できるのは1つの構造に対して100原子程度である。 水分子を考慮しなければ、タンパク質の構造や電子軌道を精度よく求めることはできない。 アミノ酸がポリペプチド結合した重合体から機能を持つ立体構造を創り構造を維持するためには、 立体構造が熱力学的に安定でなければならない。 → Gibbs自由エネルギー \\(G\\) を見る。 準安定なのは、 \\(G\\) が極小の時。 最も安定なのは、 \\(G\\) が最小の時。 まとめ 生体の機能を主に担っているのは、タンパク質である。（RNAも機能に重要である。） タンパク質は分子認識・触媒・制御・エネルギー変換・構造形成維持などの機能を有している。 アミノ酸配列から計算によってタンパク質構造を決定することに成功していない。（部分構造はできている。） 酵素機能を行うとき、酵素の多くの場所が構造変化を行う。 第7回目の講義(11/6)の小テスト 指定課題： 第1,2,3回の講義の中で、最も興味のある事柄について300~500字でまとめる。 この事柄と関連する内容を調べるなどして、自分の意見を300~500字で述べる。 図や式を使いわかりやすく説明すること。図や式は文字数に含めない。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html"},{"title":"領域分割","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt import matplotlib.patches as patches # 円を描画 領域分割 色によるクラス分け（画像のみ） k-means法 mean-shift法 色によるクラス分け（画像のみ） 例えば、画素(RGB)や位置(x,y)の似たものをグループ分けする。 二値分類(FG/BG分類)で有名なのが クロマキー （ 青色・緑色 背景） k-means法 予めクラス数 $k$ を指定してクラスタリング。 $k$ 個の代表点をランダムにサンプリング（$k$ 個をデータの中からとってきても良いし、完全にランダムでばらまいても良い。） 全てのデータ点から一番近い代表点を $1$ つ探す。 $k$ 個のグループの重心を計算し、それを新たな代表点とする。 2,3を繰り返す。 In [2]: from kerasy.ML.KMeans import KMeans In [3]: def decomposeImg ( path , K ): imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== KMeans === x = rgb_img . reshape ( - 1 , 3 ) model = KMeans ( K = K , random_state = 0 ) model . fit ( x ) cls , mu = model . predict ( x ) mu = mu . astype ( int ) for k in range ( K ): x [ cls == k ] = mu [ k ] # KMeansed Image. ax_K = fig . add_subplot ( 1 , 2 , 2 ) ax_K . imshow ( x . reshape ( img_shape )) ax_K . set_title ( f \"K= { K } \" ), ax_K . set_xticks ([]), ax_K . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No. { i + 1 : <0 { len ( str ( K )) }} , rgb=( { ',' . join ( mu [ k ] . astype ( int ) . astype ( str )) } )\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () In [4]: decomposeImg ( path = \"lenna.png\" , K = 8 ) mean-shift法 画像領域の分割や対象画像の追跡に用いられる手法。 $d$ 次元の特徴量（ex. $\\mathrm{R,G,B},x,y$）を持った $N$ 個のデータ点 $\\mathbf{x}_i$ が分布しているときに、この点群 $\\mathbf{x}_i$ を標本点として得られるような確率密度関数 $f(\\mathbf{x})$ を考え、その標本点から確率密度関数 $f(\\mathbf{x})$ の極大点を探索する手法。 点群が集中している場所は確率密度関数 $f(\\mathbf{x})$ の値が高く、まばらな場所は低くなる。 ある任意の観測点 $\\mathbf{y}_j$ から半径 $h$ の超球を考え、その範囲にある点群 $\\mathbf{x}_i$ の平均 $\\mathbf{x}_c$ を計算し、その位置に観測点 $\\mathbf{y}_{j+1}$ を移動する。 この操作を繰り返すと観測点は最大勾配の方向に移動し、やがて極大点に収束する。 このように、 「近傍の点群の平均(mean)位置に移動(shift)を繰り返し、極大点を求める方法」 から ミーンシフト法(mean-shift) と呼ばれる。 In [5]: fig , ax = plt . subplots ( figsize = ( 6 , 6 )) # Circle r = 0.7 c = patches . Circle ( xy = ( 0 , 0 ), radius = r , ec = 'black' , fill = False ) ax . add_patch ( c ) # Sample Data X , Y = np . random . RandomState ( 123 ) . uniform ( low =- 0.3 , high = 1 , size = ( 2 , 50 )) cls = np . sqrt ( X ** 2 + Y ** 2 ) < r ax . scatter ( X , Y , c = cls , cmap = \"Set1_r\" , alpha = 0.7 ) # Center ax . scatter ( 0 , 0 , color = \"black\" , s = 100 ) ax . text ( 0.05 , - 0.05 , \"$\\mathbf {y} _ {j} $\" , fontsize = 12 ) # Mean mux , muy = np . mean ( X [ cls ]), np . mean ( Y [ cls ]) ax . scatter ( mux , muy , color = \"black\" , marker = '*' , s = 100 ) ax . text ( mux + 0.05 , muy , \"$\\mathbf {x} _c(=\\mathbf {y} _{j+1})$\" , fontsize = 12 ) # Arrow ax . annotate ( '' , xy = ( mux , muy ), xytext = ( 0 , 0 ), arrowprops = dict ( width = 2 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'blue' , edgecolor = 'blue' ) ) # Radius ax . plot (( 0 , 0 ),( 0 , - r ), color = \"black\" ) ax . text ( 0.05 , - r / 2 , \"r\" , fontsize = 12 ) ax . set_xlim ( - 1 , 1 ) ax . set_ylim ( - 1 , 1 ) plt . show () カーネル密度関数を用いた確率密度関数の推定 $d$ 次元空間内の $N$ 個の点群 $\\mathbf{x}_i$ を考える。この点群をある確率分布に従う標本と考えたとき、$d$ 次元空間内の任意の点 $\\mathbf{x}$ における確率密度関数 $f(\\mathbf{x})$ は、以下の方法で推定される。 $$f(\\mathbf{x}) = \\frac{c_{kd}}{Nh&#94;{d}}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)$$ $c_{hd}$ は、確率密度関数 $f(\\mathbf{x})$ 全体の積分を $1$ にするための正規化係数。 $k(t)$ は、カーネル関数 $K(t)$ の プロファイル で、$K(t)=k(|t|&#94;2)$ 以下の２つのカーネルが代表的である。 ガウシアンカーネル(Gaussian) エパネックニコフカーネル(Epanechnikov) $$K(t) = \\exp\\left(-\\frac{\\mid t\\mid&#94;2}{2}\\right)$$ $$K(t) = \\begin{cases}1- \\mid t\\mid&#94;2 & (\\mid t\\mid\\leq1)\\\\0 & (\\text{otherwise})\\end{cases}$$ 確率密度関数の勾配 勾配法(gradient method) を用いて極大点を逐次的に求めるために、確率密度関数の勾配 $\\nabla f(\\mathbf{x})$ を求める。 $$ \\begin{aligned} \\nabla f(\\mathbf{x}) &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;Nk'\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)\\left(\\mathbf{x}-\\mathbf{x}_i\\right)\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;N\\left(g_i\\mathbf{x}_i-g_i\\mathbf{x}\\right), \\quad g(t) = -k'(t),g'(t)=g\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|\\right)&#94;2\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\} \\end{aligned} $$ 項 説明 $$\\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}$$ ガウシアンカーネルやエパネックニコフカーネルを用いた場合、正になる。 $$\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\}$$ ミーンシフト と呼ばれる項で、観測点 $\\mathbf{x}$ の近傍のデータ点群 $\\mathbf{x}_i$ の加重平均位置と $\\mathbf{x}$ 自身の差分ベクトルを示す。 勾配法を用いた極大点探索（ミーンシフト法） 初期化：$\\mathbf{y}_0\\leftarrow\\mathbf{x}$ 更新（ミーンシフト） $$\\mathbf{y}_{j+1}\\leftarrow \\mathbf{y}_j + \\left(\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{y}_j\\right) = \\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}$$ $|\\mathbf{y}_{j+1}-\\mathbf{y}_j|<\\text{threshold}$ となるまで2を繰り返す。 収束した $\\mathbf{y}_{j+1}$ を極大点として出力する。 ※ 一般的な勾配法では、更新式 $\\mathbf{y}_{j+1}\\rightarrow\\mathbf{y}_i + \\alpha\\nabla f$ のステップ数 $\\alpha$ を与える必要があるが、ミーンシフト法では ベクトルの大きさは自動的に計算される ので、$\\alpha$ を与える必要がない（らしい…）。 ミーンシフト法を用いたクラスタリングへの応用 $d$ 次元空間中の $N$ 個の点群 $\\mathbf{x}_i$ が与えられた時に、密に分布する点群をクラスタとして分割する。 各点にミーンシフト法を適用し、収束位置 $\\mathbf{x}_i&#94;c$ を計算する。 任意の2個の点 $\\mathbf{x}_i,\\mathbf{x}_j$ について、その収束位置が閾値以下なら（$|\\mathbf{x}_i-\\mathbf{x}_j|<\\text{threshold}$）、この2点を同じ極大点として同じクラスタに入れる。 1,2より、全ての点群 $\\mathbf{x}_i$ を 同じ収束位置（極大点）に属するものごとにクラスタに識別する。 全ての点 $\\mathbf{x}_i$ でこの処理を行わなければならないが、並行化できる。 k-means手法とは異なり、クラスタの数を予め指定する必要がない。 ミーンシフト法を用いたカラー画像の領域分割 カラー画像の $N$ 個の各画素の位置 $\\mathbf{x}_i$ とその画素値 $\\mathbf{v}_i=\\left(R_i,G_i,B_i\\right)$ とし、画素位置-画素値を結合した5次元空間内の点 $\\mathbf{z}_i=(\\mathbf{x}_i,\\mathbf{v}_i)$ を考える。 「距離および色が近い画素が5次元空間内でクラスタを形成している」 とみて、ミーンシフト法で各画素をクラスタリングする。 画素位置に関するバンド幅 $h_s$、画素値に関するバンド幅 $h_r$ を与え、全ての $z_i$ にミーンシフトを行い、収束位置 $\\mathbf{z}&#94;c=(\\mathbf{x}&#94;c,\\mathbf{v}&#94;c)$ を計算する。 $\\mathbf{x}_i$ の画素値を、収束位置の画素の値 $(R&#94;c,G&#94;c,B&#94;c)$ に置き換えることによって、画像の平滑化ができる。 ミーンシフトは、以下の通り計算する。 $$f(\\mathbf{x}) = \\frac{c}{Nh_s&#94;2h_r&#94;3}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}&#94;s-\\mathbf{x}&#94;s_i}{h_s}\\right|&#94;2\\right)k\\left(\\left|\\frac{\\mathbf{x}&#94;r-\\mathbf{x}&#94;r_i}{h_r}\\right|&#94;2\\right)$$ したがって、以下のとおりに位置を更新する。 $$\\mathbf{y}&#94;{s}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;s\\mathbf{x}_i&#94;s}{\\sum_{i=1}&#94;Ng_i&#94;s},\\quad\\mathbf{y}&#94;{r}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;r\\mathbf{x}_i&#94;r}{\\sum_{i=1}&#94;Ng_i&#94;r}$$ $(h_s,h_r)$ のパラメータを大きくすると、より大きな領域に同色が統合され、大まかに分割される。 In [6]: from sklearn.cluster import MeanShift In [7]: import time s = time . time () imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) path = \"lenna.png\" bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== MeanShift === x = rgb_img . reshape ( - 1 , 3 ) model = MeanShift () model . fit ( x ) cls = model . predict ( x ) mu = model . cluster_centers_ . astype ( int ) K = max ( cls ) + 1 for k in range ( K ): x [ cls == k ] = mu [ k ] # MeanShifted Image. ax_Mean = fig . add_subplot ( 1 , 2 , 2 ) ax_Mean . imshow ( x . reshape ( img_shape )) ax_Mean . set_title ( f \"n_cluster= { K } \" ), ax_Mean . set_xticks ([]), ax_Mean . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No. { i + 1 : <0 { len ( str ( K )) }} , rgb=( { ',' . join ( mu [ k ] . astype ( int ) . astype ( str )) } )\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () e = time . time () print ( f \"Processing time: { int (( e - s ) // 60 ) : >02 } m { ( e - s ) % 60 : .3f } s\" ) plt . show () Processing time: 31m 13.287s In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html"},{"title":"領域処理のための特徴量","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 領域の特徴量 フーリエ変換 ガボールフィルタ(Gabor Filter) 同時生起確率 In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt （２次元）フーリエ変換 画像は、フーリエ変換によって周波数領域における別の形で表現される。 フーリエ変換の結果は、画像に含まれるそれぞれの周波数成分を表している。 フーリエ変換後の各周波数成分の大きさを成分ごとに変えることにより、元の画像の性質を変えることができる。 （周波数フィルタリング(frequency filtering)） ローパスフィルタ(lowpass fileter) ：画像に含まれる空間周波数成分のうち、低周波数成分は残し、高周波数成分は除去するようなフィルタ。 ハイパスフィルタ(highpass filter) ：上の逆。高周波数成分は残し、低周波数成分を除去するようなフィルタ。 バンドパスフィルタ(bandpass filter) ：ある中間的な周波数の範囲を残すようなフィルタ。 高域強調フィルタ(high-emphasis filter) ：画像の低周波数成分はそのまま保ちつつ、高周波数成分を強調するフィルタ。 $1$ 次元フーリエ変換 簡単のため、まずは一次元フーリエ変換をみる。 名前 数式 説明 フーリエ変換 $$F(\\omega) = \\int_{-\\infty}&#94;{\\infty}f(t)e&#94;{-i\\omega t}dt$$ 数直線上の表現 （空間領域） から周波数による表現 （周波数領域） への変換 逆フーリエ変換 $$f(x) = \\int_{-\\infty}&#94;{\\infty}F(\\omega)e&#94;{i\\omega x}d\\omega$$ 周波数領域にある関数を元の空間領域に戻す変換 実装 二つの正弦波を重ねた波から、それぞれの成分を取り出すことができるか確かめる。なお、ここでは numpy.fft.fft を利用しています。 これは、 高速フーリエ変換(Fast Fourier Transform) と呼ばれる、 高速に「離散フーリエ変換」を行うアルゴリズム を実装したものです。 In [2]: N = 10000 dt = 0.01 time = np . arange ( 0 , N * dt , dt ) freq = np . linspace ( 0 , 1.0 / dt , N ) In [3]: def sin ( A , f , p ): \"\"\" @param A: Amplitude @param f: Frequency[Hz] @param p: phase \"\"\" func = lambda t : A * np . sin ( 2 * np . pi * f * t + p1 ) return func In [4]: # parameters f1 , f2 = 5 , 8 # frequency[Hz] A1 , A2 = 5 , 3 # Amplitude p1 , p2 = 0 , 1 / 2 * np . pi # phase In [5]: y1 = sin ( A1 , f1 , p1 )( time ) y2 = sin ( A2 , f2 , p2 )( time ) y = y1 + y2 # superposition In [6]: # Computes the discrete Fourier transform (DFT) of a sequence yf = np . fft . fft ( y ) / ( N / 2 ) # Fast Fourier transform. In [7]: fig = plt . figure ( figsize = ( 8 , 4 )) ax1 = fig . add_subplot ( 2 , 1 , 1 ) ax1 . set_ylabel ( \"amplitude\" ) ax1 . set_xlabel ( \"time\" ) ax1 . set_xlim ( 0 , 1 ) ax1 . plot ( time , y , label = \"y(y1+y2)\" , color = \"blue\" ) ax1 . plot ( time , y1 , label = f \"y1(A= { A1 } ,f= { f1 } )\" , alpha = 0.3 , color = \"green\" ) ax1 . plot ( time , y2 , label = f \"y2(A= { A2 } ,f= { f2 } )\" , alpha = 0.3 , color = \"red\" ) ax1 . axhline ( 0 , alpha = 0.3 , color = \"black\" ) ax1 . legend () ax2 = fig . add_subplot ( 2 , 1 , 2 ) ax2 . set_ylabel ( \"amplitude\" ) ax2 . set_xlabel ( \"frequency\" ) ax2 . set_xlim ( 0 , 10 ) ax2 . plot ( freq , abs ( yf ), color = \"blue\" ) plt . tight_layout () plt . show () 見事に、二つの周波数成分を取り出すことができました。 $2$ 次元フーリエ変換 ※ 一般に画像は2次元空間で定義されたある関数 $f(x,y)$ として表現することができる！ 名前 数式 フーリエ変換 $$F(u,v) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x,y)\\exp\\left\\{-j2\\pi\\left(ux+vy\\right)\\right\\}dxdy$$ 逆フーリエ変換 $$f(x,y) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}F(u,v)\\exp\\left\\{j2\\pi\\left(ux+vy\\right)\\right\\}dudv$$ ここで、以下の値に注目することがよくある。 名前 数式 説明 振幅スペクトル(amplitude spectrum) $$\\mid F(u,v)\\mid = \\sqrt{\\mathrm{Re}\\left\\{F(u,v)\\right\\}&#94;2 + \\mathrm{Im}\\left\\{F(u,v)\\right\\}&#94;2}$$ 絶対値 位相スペクトル(phase spectrum) $$\\arg\\left\\{F(u,v)\\right\\} = \\tan&#94;{-1}\\frac{\\mathrm{Im}\\left\\{F(u,v)\\right\\}}{\\mathrm{Re}\\left\\{F(u,v)\\right\\}}$$ 偏角 パワースペクトル(power spectrum) $$\\mid F(u,v)\\mid&#94;2$$ In [8]: img = cv2 . imread ( 'lenna.png' , 0 ) f = np . fft . fft2 ( img ) fshift = np . fft . fftshift ( f ) magnitude_spectrum = 20 * np . log ( np . abs ( fshift )) plt . subplot ( 121 ), plt . imshow ( img , cmap = 'gray' ) plt . title ( 'Input Image' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'x' ), plt . ylabel ( 'y' ) plt . subplot ( 122 ), plt . imshow ( magnitude_spectrum , cmap = 'gray' ) plt . title ( 'Magnitude Spectrum' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'u' ), plt . ylabel ( 'v' ) plt . show () ガボールフィルタ(Gabor Filter) 正弦波とガウス関数の積で表される。（例：2次元ガボールフィルタ） $$g(x,y,\\lambda,\\phi) = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\exp\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 実数部： $$\\mathrm{Re}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\cos\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 虚数部： $$\\mathrm{Im}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\sin\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ フーリエ変換では、所望の周波数成分が領域のどこにあるのかわからないのに対し、ガボールフィルタは、 「領域のどの位置にどの方向の周波数が、どの強度であるか」 を知ることができる。 パラメータを操作して様々な方向と強度を持つフィルタ （フィルタバンク(filter bank)） を多数準備 し、特徴抽出を行う。また、ここで抽出された特徴量群は texton と呼ばれる。 入力された画像に対してガボールフィルタを畳み込んで（たたみ込み＝二次元の内積＝類似度を反映）、特徴量 $G(x,y,\\lambda,\\phi)$ を求める式は以下となる。 $$G(x,y,\\lambda,\\phi) = \\sum_u\\sum_vI(x,y)\\ast g(x-u, y-v, \\lambda, \\phi)$$ OpenCVの cv2.getGaborKerne を用いることで簡単にガボールフィルタを生成することができる、 引数 説明 ksize Size of the filter returned. sigma Standard deviation of the gaussian envelope. theta Orientation of the normal to the parallel stripes of a Gabor function. lambd Wavelength of the sinusoidal factor. gamma Spatial aspect ratio. psi Phase offset. In [9]: default_gabor = { \"ksize\" : ( 50 , 50 ), \"sigma\" : 4 , \"theta\" : 0 , \"lambd\" : 10 , \"gamma\" : 0.5 , \"psi\" : 0 , } In [10]: gabor = cv2 . getGaborKernel ( ** default_gabor ) plt . imshow ( gabor , cmap = \"gray\" ) plt . title ( \"default\" ) plt . show () In [11]: def argsGaborRelation ( key , vals ): global default_gabor defaul_val = default_gabor [ key ] N = len ( vals ) n_col = 4 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i , val in enumerate ( vals ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) ax . imshow ( gabor , cmap = \"gray\" ) ax . set_title ( f \" { key } = { val } \" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [12]: argsGaborRelation ( key = \"ksize\" , vals = [( 30 , 30 ),( 20 , 40 ),( 40 , 20 ),( 50 , 50 )]) In [13]: argsGaborRelation ( key = \"sigma\" , vals = [ x for x in range ( 8 )]) In [14]: argsGaborRelation ( key = \"theta\" , vals = [ np . radians ( x ) for x in range ( 0 , 180 , 45 )]) In [15]: argsGaborRelation ( key = \"gamma\" , vals = [ x for x in range ( 4 )]) In [16]: argsGaborRelation ( key = \"psi\" , vals = [ np . radians ( x ) for x in range ( 0 , 360 , 45 )]) In [17]: img = cv2 . imread ( 'lenna.png' , 0 ) color_img = cv2 . imread ( 'lenna.png' ) In [18]: def argsGaborSuperposition ( key , vals ): global default_gabor , img defaul_val = default_gabor [ key ] N = len ( vals ) * 2 n_col = 8 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) dests = 0 for i , val in enumerate ( vals ): default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) dest = cv2 . filter2D ( img , cv2 . CV_32F , gabor ) dests += dest ax_dst = fig . add_subplot ( n_row , n_col , 2 * i + 1 ) ax_dst . imshow ( np . power ( dest , 2 ), cmap = \"gray\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) ax_gab = fig . add_subplot ( n_row , n_col , 2 * i + 2 ) ax_gab . imshow ( gabor , cmap = \"gray\" ), ax_gab . set_xticks ([]), ax_gab . set_yticks ([]) # Superposition fig = plt . figure ( figsize = ( 8 , 16 )) ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( cv2 . cvtColor ( color_img , cv2 . COLOR_BGR2RGB )) ax_org . set_title ( \"original image\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) ax_dst = fig . add_subplot ( 1 , 2 , 2 ) ax_dst . imshow ( dests , cmap = \"gray\" ) ax_dst . set_title ( f \"Superposition of dst (key= { key } )\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [19]: argsGaborSuperposition ( key = \"theta\" , vals = [ np . radians ( x ) for x in np . linspace ( 0 , 180 , 8 )]) ※ 入力画像の８分割した全ての方向のエッジを重ね合わせると、元の画像をかなり高い精度で復元していることがわかる。 同時生起確率 テクスチャの統計的特徴量を求める。 離れた２つの場所にある画素対の値から、画素値の 一様性 ・ 方向性 ・ コントラスト などの性質を表す特徴量を求める。 ある画素 $i$ と、$i$ から離れた位置にある画素 $j$ の画素対を考え、画素 $i$ と画素 $j$ の相対的な位置を $\\delta=\\langle d,\\theta\\rangle$ とする。 それぞれの画素値を $L_i,L_j$ とし、画素値の対 $(L_i,L_j)$ が生じる出現頻度で、ある同時生起行列 $\\mathbf{H}_{\\delta}(L_i,L_j)$ を考える。ここで、出現頻度の総数で $\\mathbf{H}_{\\delta}(L_1,L_2)$ を正規化し、確率に変換した同時生起行列を $\\mathbf{P}_{\\delta}(L_i,L_j)$ とする。 確率に変換した同時生起行列を用いて計算する主な特徴量には次の $7$ 種類がある。（ここで、画素値のレベル数は $L$ である。）他にも様々な統計量を計算できるが、テクスチャの物理的な意味と直接には結びつかない数値もある。 $$ \\begin{aligned} \\mathrm{ENR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left\\{P_{\\delta}(L_i,L_j)\\right\\}&#94;2 & (\\text{energy})\\\\ \\mathrm{CNT} &= \\sum_{k=0}&#94;{L-1}k&#94;2P_{x-y}(k) & (\\text{contrast})\\\\ \\mathrm{CRR} &= \\frac{\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}L_iL_jP_{\\delta}(L_i,L_j) - \\mu_x\\mu_y}{\\delta_x\\delta_y} & (\\text{correlation})\\\\ \\mathrm{VAR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left(L_i-\\mu_x\\right)&#94;2P_{\\delta}(L_i,L_j) & (\\text{variance})\\\\ \\mathrm{EPY} &= -\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\log\\left\\{P_{\\delta}(L_i,L_j)\\right\\} & (\\text{entropy})\\\\ \\mathrm{SEP} &= -\\sum_{k=0}&#94;{2L-2}P_{x+y}(k)\\log\\left\\{P_{x+y}(k)\\right\\} & (\\text{sum entropy})\\\\ \\mathrm{IDM} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\frac{1}{1+(L_i-L_j)&#94;2}P_{\\delta}(L_i,L_j) & (\\text{inverse difference moment})\\\\ \\end{aligned} $$ ただし、 $$ \\mu_x = \\sum_{L_i=0}&#94;{L-1}L_iP_x(L_i), \\quad \\mu_y = \\sum_{L_j=0}&#94;{L-1}L_jP_y(L_j)\\\\ \\delta_x&#94;2 = \\sum_{L_i=0}&#94;{L-1}(L_i-\\mu_x)&#94;2P_x(L_i), \\quad \\delta_y&#94;2 = \\sum_{L_j=0}&#94;{L-1}(L_j-\\mu_y)&#94;2P_y(L_j)\\\\ P_x(L_i) = \\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j), \\quad P_y(L_j) = \\sum_{L_i=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\\\ P_{x-y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i-L_j|= k\\\\ P_{x+y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i+L_j|= k\\\\ $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html"},{"title":"主成分分析(PCA)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 主成分分析(PCA) 次元削減・非可逆データ圧縮・特徴抽出・データの可視化などに使われる。 主部分空間(principal subspace) と呼ばれる低次元の線形空間の上への、データ点の直交射影として、以下の2つの定義方法がある。 「射影されたデータの分散が最大化されるような直交射影」 として定義。→ 分散最大化による定式化 「データ点と射影した点の間の2乗距離の平均値で定義される 射影コスト関数 の期待値を最小化するような線形射影」 として定義。（要はデータ点からの距離を最小化）→ 誤差最小化による定式化 Pythonによる実装 分散最大化による定式化 次元 $D$ のユークリッド空間内のデータ集合 $\\{\\mathbf{x}_n\\}(n=1,\\ldots,N)$ を考える。ここで、 「射影されたデータ点の分散を最大化しながら、データを次元 $M ことを考える。 1次元空間の上への射影（$M=1$） この空間の方向を $D$ 次元ベクトル $\\mathbf{u}_1$ として表す。ここで、興味があるのは $\\mathbf{u}_1$ の方向だけであるので、$\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ としても一般性を失わない。 したがって、各データ点 $\\mathbf{x}_n$ は スカラー値 $\\mathbf{u}_1&#94;T\\mathbf{x}_n$ の上に射影される。ここで、射影されたデータの平均・分散は以下のようになる。 統計量 平均値 $$\\mathbf{u}_1&#94;T\\bar{\\mathbf{x}}\\qquad\\bar{\\mathbf{x}} = \\frac{1}{N}\\sum_{n=1}&#94;N\\mathbf{x}_n\\qquad (12.1)$$ 分散 $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1\\qquad\\mathbf{S} = \\frac{1}{N}\\sum_{n=1}&#94;N\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\qquad (12.3)$$ ここで、 射影されたデータの分散を、$\\mathbf{u}_1$ に関して最大化 することを考える。 制約条件 $\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ をラグランジュ乗数 $\\lambda_1$ を利用して導入して $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1 + \\lambda_1\\left(1-\\mathbf{u}&#94;T_1\\mathbf{u}_1\\right)\\qquad (12.4)$$ を最大化すれば良い。$\\mathbf{u}_1$ に関する微分を $0$ とおくことにより、停留条件は $$\\mathbf{Su}_1 = \\lambda_1\\mathbf{u}_1\\qquad (12.5)$$ となることがわかる。これは、 $\\mathbf{u}_1$ が $\\mathbf{S}$ の固有ベクトルであること を示している。左から $\\mathbf{u}&#94;T_1$ をかけると、 $$\\text{Variance} = \\mathbf{u}&#94;T_1\\mathbf{Su}_1 = \\lambda_1 \\qquad (12.6)$$ となる。よって、 分散は $\\mathbf{u}_1$ を、最大固有値 $\\lambda_1$ に属する固有ベクトルに選んだ時に最大になる ことがわかる。 $M$ 次元空間の上への射影（一般解） 演習12.1 帰納法を用いて、 射影されたデータの分散を最大化するようなM次元部分空間の上への線形写像が、データ共分散行列Sの上位M個の固有値に属するM本の固有ベクトルによって定義される ことを示す。 仮定 $M$ に対して上記が成り立つ。 データ空間に対する新しい方向ベクトル $\\mathbf{u}_{M+1}$ は、次を満たす。 $\\mathbf{u}_{M+1}$ は、$\\mathbf{u}_1,\\ldots,\\mathbf{u}_M$ と直交する。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0$） 単位長に規格化されている。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{M+1}=1$） 制約条件を踏まえると、 $$L = \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\lambda_{M+1}\\left(1-\\mathbf{u}&#94;T_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_j$$ 両辺を $\\mathbf{u}_{M+1}$ で微分すると、 $$0 = \\frac{\\partial L}{\\partial \\mathbf{u}_{M+1}} = 2\\left(\\mathbf{Su}_{M+1} - \\lambda_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_j\\cdots(\\ast)$$ これに左から $\\mathbf{u}&#94;T_{j}$ をかけると、 $$0 = \\lambda&#94;{\\prime}_j\\quad(\\because \\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0)$$ となるので、これを $(\\ast)$ に代入して、 $$\\mathbf{Su}_{M+1} = \\lambda_{M+1}\\mathbf{u}_{M+1}$$ また、この時分散は $$\\begin{aligned} \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i &= \\sum_{i=1}&#94;{M}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\mathbf{u}&#94;T_{M+1}\\mathbf{Su}_{M+1}\\\\ &= \\sum_{i=1}&#94;{M}\\lambda_i + \\lambda_{M+1} \\end{aligned}$$ ここで、仮定より $\\lambda_i$ は、データ共分散行列 $\\mathbf{S}$ の上位 $M$ 個の固有値なので、この分散を最大する $\\lambda_{M+1}$ は、$M+1$ 番目に大きい固有値となる。 誤差最小化による定式化 続いて、射影誤差の最小化に基づいた主成分分析の定式化を考える。 まず、$D$ 次元の基底ベクトル $\\{\\mathbf{u}_i\\}$ から成る完全正規直交系を導入する。（$\\mathbf{u}_i&#94;T\\mathbf{u}_i = \\delta_{ij}$） すると、各データ点はこれらの基底ベクトルの線形結合なので、以下の形で表すことができる。 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\alpha_{ni}\\mathbf{u}_i\\qquad (12.8)$$ なお、ここで式 $(12.8)$ は、各データ点 $\\{\\mathbf{x}_n\\}$ を、もともとの座標系から $\\{\\mathbf{u}_i\\}$ で表される新しい座標系への回転を表していると解釈できる （もともと $D$ 個の成分 $\\{x_{n1},\\ldots,x_{nD}\\}$ が、等価な集合 $\\{a_{n1},\\ldots,a_{nD}\\}$ に置き換えられている） 。 上式と $\\mathbf{u}_j$ との内積を取り、正規直交性を使うと、$\\alpha_{nj} = \\mathbf{x}_n&#94;T\\mathbf{u}_j$ を得るので、 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right)\\mathbf{u}_i\\qquad (12.9)$$ $D$ 次元から $M$ 次元への近似 ここで、$M （$M$ 次元空間で完全に $\\mathbf{x}_n$ を表現するのは一般に不可能なので、近似する。） したがって、各データ点を $$\\tilde{\\mathbf{x}}_n = \\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\qquad (12.10)$$ $\\{z_{ni}\\}$ は特定のデータ点に依存。 $\\{b_i\\}$ は全てのデータ点に共通な定数。 と近似して表す。つまり、 $\\{\\mathbf{u}_i\\}$ と $\\{z_{ni}\\}$ と $\\{b_i\\}$ を調整することで、次元が減ることによってもたらされる歪みを最小化すること がここでの目的となる。 近似による歪み尺度 $J$ 近似による歪みの尺度として、元々のデータ点 $\\mathbf{x}_n$ とその近似 $\\tilde{\\mathbf{x}}_n$ の間の2乗距離をデータ集合に渡って平均したものを採用する。 $$\\begin{aligned} J &= \\frac{1}{N}\\sum_{n=1}&#94;N\\|\\mathbf{x}_n-\\tilde{\\mathbf{x}}_n\\|&#94;2\\qquad (12.11)\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\left\\|\\mathbf{x}_n-\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)\\right\\|&#94;2 \\end{aligned}$$ そこで、各変数についての微分を $0$ としてこれを最小化する変数を求める。 $\\{z_{ni}\\}$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial z_{ni}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\left\\|\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\sum_{i=1}&#94;Mz_{ni}&#94;2-2\\sum_{i=1}&#94;Mz_{ni}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=1}&#94;M2\\left\\{z_{ni}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore z_{ni}&#94;{\\star} &= \\mathbf{x}_n&#94;T\\mathbf{u}_i \\qquad (12.12) \\end{aligned} $$ $b_i$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial b_{i}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\left\\|\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\sum_{i=M+1}&#94;Db_{i}&#94;2-2\\sum_{i=M+1}&#94;Db_{i}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D2\\left\\{b_{i}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore b_{i}&#94;{\\star} &= \\bar{\\mathbf{x}}_n&#94;T\\mathbf{u}_i \\qquad (12.13) \\end{aligned} $$ $J$ の整頓 ここで、$(12.10)$ の $z_{ni},b_i$ を置き換えると、 $$ \\begin{aligned} \\mathbf{x}_n-\\tilde{\\mathbf{x}}_n &= \\mathbf{x}_n-\\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=1}&#94;D\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i - \\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=M+1}&#94;D\\left\\{\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\mathbf{u}_i\\right\\}\\mathbf{u}_i\\qquad (12.14) \\end{aligned} $$ と表すことができる。この式から、 $\\tilde{\\mathbf{x}}_n$ から $\\mathbf{x}_n$ への変位を表すベクトルは、主部分空間に直交する空間にあることがわかる。 以上より、歪み尺度 $J$ に対する表現を、純粋に $\\{\\mathbf{u}_i\\}$ の関数として、以下のような形で得られることがわかる。 $$J = \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i-\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\right)&#94;2 = \\sum_{i=M+1}&#94;D\\mathbf{u}&#94;T_i\\mathbf{Su}_i\\qquad (12.15)$$ したがって、あとは$J$ を $\\{\\mathbf{u}_i\\}$ に対して最小化すれば良い。 $M=1,D=2$ の場合 $M=1,D=2$ の場合、 「規格化条件 $\\mathbf{u}&#94;T_2\\mathbf{u}_2 = 1$ の下で、方向 $\\mathbf{u}_2$ を、$J=\\mathbf{u}&#94;T_2\\mathbf{Su}_2$ が最小化されるように選ぶ」 問題となる。 つまり、ラグランジュ乗数を用いて、 $$\\tilde{J} =\\mathbf{u}&#94;T_2\\mathbf{Su}_2 + \\lambda_2\\left(1-\\mathbf{u}&#94;T_2\\mathbf{u}_2\\right)\\qquad (12.16)$$ を最小化する問題となる。 $\\mathbf{u}_i$ についての微分を $0$ とおくと、$\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を得る。つまり、$\\mathbf{u}_2$ は固有値 $\\lambda_2$ に属する $\\mathbf{S}$ の固有ベクトルであるので、 任意の固有ベクトルは、この歪み尺度の停留点を定義することとなる。 $(12.16)$ に $\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を代入すると、$J=\\lambda_2$ となる。ゆえに、 「$\\mathbf{u}_2$ を、2つある固有値のうち小さい方に対応した固有ベクトルを選ぶことにより、$J$ の最小値を得ることができる」 （↔︎ 主部分空間では大きい方 ） 任意の $D$ と任意の $M 任意の $D$ と任意の $M $$\\mathbf{Su}_i = \\lambda_i\\mathbf{u}_i\\qquad (12.17)$$ で与えられる共分散行列の固有ベクトルに選ぶことによって得られる。ここで $i=1,\\ldots,D$ であり、固有ベクトル $\\{\\mathbf{u}_i\\}$ は正規直交するように選ばれる。 また、対応する歪み尺度の値は、 $$J = \\sum_{i=M+1}&#94;D\\lambda_i\\qquad (12.18)$$ のように、 主部分空間に直交する固有ベクトルの固有値についての単なる和 で与えられる。したがって、$J$ の最小値は、小さい順から $D-M$ 個の固有値に対応する固有ベクトルを選ぶことによって得られ、つまり主部分空間を定義する固有ベクトルは大きい順から $M$ 個の固有値に対応する固有ベクトルになる。 実装 Wine Data Set (UCI Machine Learning Repository) のデータを利用し、13次元、178データ、3種類のワインの属性データから、2つの主成分を取って可視化を行います。 また、PCAは自作のモジュール （ kerasy.ML.decomposition.PCA ） を用います。 In [1]: # データ取得。 ! wget https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt --2019-10-07 13:20:45-- https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.228.133 Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.228.133|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 12173 (12K) [text/plain] Saving to: `wine.txt' wine.txt 100%[===================>] 11.89K --.-KB/s in 0s 2019-10-07 13:20:45 (40.4 MB/s) - `wine.txt' saved [12173/12173] In [2]: from kerasy.ML.decomposition import PCA In [3]: import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib.colors import LinearSegmentedColormap In [4]: colors = [( 1 , 0 , 0 ), ( 0 , 0 , 1 ), ( 0 , 1 , 0 )] n_bin = len ( colors ) cmap_name = 'my_list' cm = LinearSegmentedColormap . from_list ( cmap_name , colors , N = n_bin ) In [5]: df = pd . read_csv ( \"wine.txt\" , sep = \" \\t \" , index_col = 0 ) In [6]: df . head ( 3 ) Out[6]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } class Alcohol Malic acid Ash Alcalinity of ash Magnesium Total phenols Flavanoids Nonflavanoid phenols Proanthocyanins Color intensity Hue OD280/OD315 of diluted wines Proline 0 1 14.23 1.71 2.43 15.6 127 2.80 3.06 0.28 2.29 5.64 1.04 3.92 1065 1 1 13.20 1.78 2.14 11.2 100 2.65 2.76 0.26 1.28 4.38 1.05 3.40 1050 2 1 13.16 2.36 2.67 18.6 101 2.80 3.24 0.30 2.81 5.68 1.03 3.17 1185 class カラムがワインの種類を表しているので、この列は主成分分析から取り除きます。 In [7]: cls = df . iloc [:, 0 ] . values In [8]: df_use = df . iloc [:, 1 :] また、 データの標準化 を行います。 In [9]: df_std = df_use . apply ( lambda x : ( x - x . mean ()) / x . std (), axis = 0 ) In [10]: data = np . array ( df_std ) データの準備ができたので、主成分分析を行います。 In [11]: pca = PCA () pca . fit ( data ) features = pca . transform ( data ) In [12]: plt . figure ( figsize = ( 6 , 6 )) plt . scatter ( features [:, 0 ], features [:, 1 ], c = cls , cmap = cm , edgecolors = 'black' ) plt . title ( \"Same fig with slide :)\" ) plt . xlabel ( \"PC1\" ) plt . ylabel ( \"PC2\" ) plt . grid () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html"},{"title":"Nussinov Algorithm","text":"Nussinov Algorithmは、最もシンプルな二次構造予測アルゴリズムである。 「最大いくつの塩基対を作ることができるか」 を調べる。 動的計画法を用いて効率的に調べるために、以下のような Pseudoknot は無視している。様々な重要なRNAが、Pseudoknotの形をとることが確認されているが、相対的にこのような構造をとる確率は低いので、計算の効率を優先し、これらを無視する。 Algorithm ※「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 今回の実装では $j-i-1<3$ の時は、$i,j$ が塩基対を作れないものとしている。 ポイントはRecursionの最後の式で、 「$i$ から $k$ までの部分塩基配列」 と 「$k+1$ から $j$ までの部分塩基配列」 を足し合わせる操作を行う。 （Bifurcation） Initialization: $$\\begin{aligned} \\gamma(i,i)&=0&\\text{ for }i=1\\text{ to }L\\\\ \\gamma(i,i-1)&=0&\\text{ for }i=2\\text{ to }L \\end{aligned}$$ Recursion: $$ \\gamma(i,j) = \\max \\begin{cases} \\gamma(i+1,j)\\\\ \\gamma(i,j-1)\\\\ \\gamma(i+1,j-1)+\\delta(i,j)\\\\ \\max_{i\\leq k\\verb|<|j}\\left[\\gamma(i,k) + \\gamma(k+1,j)\\right] \\end{cases} $$ TraceBack 基本的なアルゴリズムは同じですが、 Bifurcationが起きた際にトレースバックポインターを複数用意する必要があることには注意が必要です。 bp = [] stack = [( 0 , N - 1 )] while ( stack ): i , j = stack . pop ( 0 ) delta = 1 if self . _is_bp ( sequence [ i ], sequence [ j ]) and ( j - i > 3 ) else 0 if ( i >= j ): continue elif gamma [ i + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( i + 1 , j )) elif gamma [ i ][ j - 1 ] == gamma [ i ][ j ]: stack . append (( i , j - 1 )) elif gamma [ i + 1 ][ j - 1 ] + delta == gamma [ i ][ j ]: bp . append (( i , j )); stack . append (( i + 1 , j - 1 )) else : # Bifurcation for k in range ( i , j ): if gamma [ i ][ k ] + gamma [ k + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( k + 1 , j )) stack . append (( i , k )) break 自作のモジュール （kerasy.Bio.structure.Nussinov） を使って実装します。 In [1]: from kerasy.Bio.structure import Nussinov In [2]: model = Nussinov () In [3]: # 以下の形のパラメタファイルを受け取ります。 ! cat params.json { \"type\": \"DNA\", \"Watson_Crick\": true, \"Wobble\": true } In [4]: model . load_params ( \"params.json\" ) In [5]: model . params () | parameter |value| -------------------- |type | DNA| |Watson_Crick| 1| |Wobble | 1| In [6]: # サンプル配列 sequence = \"GCGGAAACGGGGTCA\" In [7]: # 最大ペアの配列 model . predict ( sequence , memorize = True , traceback = True ) Nussinov Algorithm Score: 3 ================================================================= seq: GCGGAAACGGGGTCA : ( (( ))) ================================================================= In [8]: gamma = model . gamma In [9]: # DP行列は以下のようになっています。 model . _printAsTerai ( gamma , sequence ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 1 2 2 2 2 2 3 3 C - 0 0 0 0 0 0 1 2 2 2 2 2 3 3 G - - 0 0 0 0 0 1 1 1 1 1 2 3 3 G - - - 0 0 0 0 1 1 1 1 1 2 3 3 A - - - - 0 0 0 0 0 0 0 1 2 2 2 A - - - - - 0 0 0 0 0 0 1 2 2 2 A - - - - - - 0 0 0 0 0 1 2 2 2 C - - - - - - - 0 0 0 0 1 1 1 1 G - - - - - - - - 0 0 0 0 0 1 1 G - - - - - - - - - 0 0 0 0 1 1 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 $i,j$ が塩基対を組むときの塩基対最大化 塩基 $i,j$ が塩基対を組むという制約がある場合を考えます。これは、「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を保持した $\\omega(i,j)$ と $\\gamma(i,j)$ を組み合わせることで効率的に求めることができます。 Algorithm 「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を $\\omega(i,j)$ が保持している。 Initialization: $$\\omega(i,L) = 0$$ Recursion: $$ \\omega(i,j) = \\max \\begin{cases} \\omega(i-1,j)\\\\ \\omega(i,j+1)\\\\ \\omega(i-1,j+1)+\\delta(i-1,j+1)\\\\ \\max_{1\\leq k\\verb|<|i}\\left[\\omega(k,j) + \\gamma(k,i-1)\\right]\\\\ \\max_{j\\verb|<| k\\leq L}\\left[\\omega(j+1,k) + \\gamma(i,k)\\right] \\end{cases} $$ In [10]: model . outside ( sequence , memorize = True ) In [11]: omega = model . omega In [12]: # DP行列は以下のようになっています。 model . _printAsTerai ( omega , sequence ) \\ G C G G A A A C G G G G T C A G 3 3 3 2 2 2 1 1 1 0 0 0 0 0 0 C - 3 3 3 3 3 2 1 1 1 1 1 1 0 0 G - - 3 3 3 3 2 2 2 2 2 1 1 0 0 G - - - 3 3 3 2 2 2 2 2 1 1 0 0 A - - - - 3 3 2 2 2 2 2 1 1 0 0 A - - - - - 3 3 2 2 2 2 2 1 0 0 A - - - - - - 3 2 2 2 2 2 1 0 0 C - - - - - - - 2 2 2 2 2 1 0 0 G - - - - - - - - 3 3 3 2 2 1 1 G - - - - - - - - - 3 3 3 3 2 2 G - - - - - - - - - - 3 3 3 2 2 G - - - - - - - - - - - 3 3 2 2 T - - - - - - - - - - - - 3 2 2 C - - - - - - - - - - - - - 2 2 A - - - - - - - - - - - - - - 3 $Z(i,j)$ の計算 variable definition $\\gamma\\left(i,j\\right)$ the maximum number of base-pairs for subsequence from $i$ to $j$. $\\omega\\left(i,j\\right)$ the maximum number of base-pairs excluding subsequence from $i$ to $j$. 上記の定義より、$\\gamma,\\omega$ を用いて $Z(i,j)$ が以下のように求まることがわかります。 $$Z(i,j) = \\begin{cases} \\gamma\\left(i+1,j-1\\right) + 1 + \\omega\\left(i,j\\right) & (\\text{if }i\\text{ and }j\\text{-th nucleotides can form a base-pair})\\\\ 0 & (\\text{otherwise}) \\end{cases}$$ In [13]: model . ConstrainedMaximize ( sequence , memorize = False ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 2 0 0 0 0 0 3 0 C - 0 0 0 0 0 0 0 3 3 3 3 0 0 0 G - - 0 0 0 0 0 3 0 0 0 0 0 3 0 G - - - 0 0 0 0 3 0 0 0 0 0 3 0 A - - - - 0 0 0 0 0 0 0 0 3 0 0 A - - - - - 0 0 0 0 0 0 0 3 0 0 A - - - - - - 0 0 0 0 0 0 3 0 0 C - - - - - - - 0 0 0 0 3 0 0 0 G - - - - - - - - 0 0 0 0 0 2 0 G - - - - - - - - - 0 0 0 0 3 0 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 備忘録 Nussinov Algorithmでは、これまでの動的計画法とは異なり、 $i,j$ を斜め方向に舐める必要がありました。 そこで、その際に使用したコードを備忘録として残しておきます。 In [14]: import numpy as np In [15]: N = 4 In [16]: # Nussinov Algorithm (γ) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for ini_i in reversed ( range ( N )): diff = N - ini_i for i in reversed ( range ( ini_i )): arr [ i ][ i + diff ] = idx idx += 1 print ( arr ) [[0 3 5 6] [0 0 2 4] [0 0 0 1] [0 0 0 0]] In [17]: # Nussinov outsie (ω) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for j in reversed ( range ( N )): for i in range ( N - j ): arr [ i ][ j + i ] = idx idx += 1 print ( arr ) [[ 7 4 2 1] [ 0 8 5 3] [ 0 0 9 6] [ 0 0 0 10]] In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-8.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-8.html"},{"title":"Pair HMM の最尤推定","text":"Baum-Welch Pair HMMとは、二本の配列を受け取ってペアワイズアラインメントを出力するHMMで、 「アラインメントの確率的な解釈が可能になる」 （アラインメントのどの部分が信頼できるかを確率的に評価できる） という利点があります。 このPair HMMは、一般的なHMMと同様にBaum-Welchアルゴリズムによってパラメータを最尤推定していきます。 \\(\\xi\\) HMM 一般的なHMMでは、例えば 遷移確率 \\(A_{jk}\\) （状態 \\(j\\) から状態 \\(k\\) に遷移する確率） を最尤推定する際は、 直感的には 「状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「状態 \\(j\\) から遷移する回数」 で割れば最尤解が求まる。 実際の隠れ状態の遷移が確定していないので、 「 期待される 状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「 期待される 状態 \\(j\\) から遷移する回数」 で割れば良い。 \\(\\mathbf{z}_{n-1}\\) で状態 \\(j\\) におり、 \\(\\mathbf{z}_n\\) で状態 \\(k\\) にいる確率 \\(\\xi\\left(z_{n-1,j},z_{nk}\\right)\\) は、forward-backward algorithmの \\(\\alpha,\\beta\\) を用いれば以下のように求めることができる。 $$\\xi_n\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ \\(\\xi\\) を用いて、最尤推定を行う。 $$A_{j k}= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\qquad (13.19)$$ という様に行いますが、Pair HMMは、 挿入・欠失を考えるため、 \\(n\\) で配列 \\(\\mathbf{X,Y}\\) のどの要素（ \\(\\mathbf{x}_u,\\mathbf{y}_v\\) ）を考えているのか一意に定まらない という点で普通のHMMとは異なります。 Pair HMM そこで、 「 \\(n\\) ではなく \\(u,v\\) に注目する」 ことで、 \\((13.43)\\) の式を以下のように書き換えます。 $$\\xi_{u,v}\\left(i,j\\right)=\\frac{f_i\\left(u,v\\right)A_{ij}\\phi_j\\left(\\diamond_1\\right)b_j\\left(\\diamond_2,\\diamond_3\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ ここで、分子に注目すると、各変数の意味が variable meaning \\(f_i\\left(u,v\\right)\\) The probability of ending up in state \\(i\\) after aligning the two sequences \\(\\mathbf{X,Y}\\) up to observation \\(u\\) and \\(v\\) respectively. \\(A_{ij}\\) the transition probability from state \\(i\\) to state \\(j\\) . \\(\\phi_j\\left(\\diamond_1\\right)\\) the emission probability of emitting \\(\\diamond_1\\) in state \\(j\\) . \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) the probability of being in state \\(j\\) , given the sequences \\(\\mathbf{X,Y}\\) are aligned from observation \\(\\diamond_2+1\\) and \\(\\diamond_3+1\\) to the end of the sequences respectively. であるので、 \\(\\diamond\\) は状態によって異なり、具体的に書き下すと以下のようになります。 state\\variable \\(\\phi_j\\left(\\diamond_1\\right)\\) \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) \\(M\\) \\(e\\left(x_{u+1},y_{v+1}\\right)\\) \\(b_j\\left(u+1,v+1\\right)\\) \\(X\\) \\(e\\left(x_{u+1}\\right)\\) \\(b_j\\left(u+1,v\\right)\\) \\(Y\\) \\(e\\left(y_{v+1}\\right)\\) \\(b_j\\left(u,v+1\\right)\\) \\(\\gamma\\) 同様に \\(\\gamma\\) も考えると、 $$ \\gamma_n\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad(13.33)$$ から、 $$\\gamma_i\\left(u,v\\right)=\\frac{f_i\\left(u,v\\right)b_j\\left(u,v\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ のように書き換えることになります。 Maximization step ここまでで \\(\\gamma,\\xi\\) が求まったので、M stepで各パラメータを更新します。なお、以下で \\(w\\) は全ての記号の組を表します。 $$w\\in\\left\\{(k_x,k_y)|k_x,k_y\\in\\left\\{A,T,G,C,\\epsilon \\right\\}\\right\\}\\setminus(\\epsilon,\\epsilon)$$ \\(\\pi_k\\) $$\\pi&#94;{\\star}_i = \\sum_w\\gamma_i&#94;w(0,0)$$ \\(A_{ij}\\) $$A&#94;{\\star}_{ij} = \\frac{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\sum_{j}&#94;{K}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}$$ final emitting state \\(\\tilde{U}\\) \\(\\tilde{V}\\) \\(M\\) \\(U-1\\) \\(V-1\\) \\(X\\) \\(U-1\\) \\(V\\) \\(Y\\) \\(U\\) \\(V-1\\) \\(\\phi_{i}(k)\\) $$\\phi_i\\left(k\\right) = \\frac{\\sum_w\\sum_{u=0}&#94;{U\\ast1}\\sum_{v=0}&#94;{V\\ast2}\\gamma_i&#94;w\\left(u,v\\right)}{\\sum_w\\sum_{u=0}&#94;U\\sum_{v=0}&#94;V\\gamma_i&#94;w\\left(u,v\\right)}$$ \\(\\ast1\\) ： \\(x_u=k_x\\) and state \\(i\\) equals the state \\(M\\) or \\(X\\) . (in the state \\(Y\\) , a gap is present in observation stream \\(x\\) therefore \\(k_x\\) is not present.) \\(\\ast2\\) ： \\(y_v=k_y\\) and state \\(j\\) equals the state \\(M\\) or \\(Y\\) . Reference Wahle, Johannes and Armin Buch. \"Alignment and word comparison with Pair Hidden Markov Models.\" (2013). pp.22-31 Martijn B. Wieling. \"Comparison of Dutch Dialects\" (2007) pp.36-50 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-7.html"},{"title":"生物統計論 第2回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section2.1 Central Limit Theorem Law of Large Numbers Estimation is accurate with many samples. Foundation of repeated measurement. Regardless of true distribution. Assuming independence. Theorem Let $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ be an independent trials process, with finite expected value $\\mu = \\mathbb{E}\\left(\\mathbf{X}_i\\right)$ Let $\\bar{\\mathbf{X}}_n = \\frac{1}{n}\\left(\\mathbf{X}_1,\\mathbf{X}_2+\\cdots+\\mathbf{X}_n\\right)$ be a sample mean. Weak law : $$\\lim_{n\\rightarrow\\infty}P\\left(|\\bar{\\mathbf{X}}_n-\\mu|>\\varepsilon\\right) = 0 \\quad\\left(\\forall\\varepsilon>0\\right)$$ Strong law $$P\\left(\\lim_{n\\rightarrow\\infty}\\bar{\\mathbf{X}}_n = \\mu\\right) = 1$$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Chebyshev Inequality Let $\\mathbf{X}$ be a discrete random variable with expected value $\\mu=\\mathbb{E}\\left(\\mathbf{X}\\right)$ $$ P \\left(|\\mathbf{X}-\\mu|>\\varepsilon\\right)\\leq\\frac{\\mathbb{V}\\left(\\mathbf{X}\\right)}{\\varepsilon&#94;2}$$ Example In [2]: N = 1000 seed = 0 In [3]: trials = np . arange ( 1 , N + 1 ) In [4]: dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = N ) ave_dices = np . cumsum ( dices ) / trials In [5]: plt . axhline ( 3.5 , color = \"blue\" , label = \"Theoretical mean\" ) plt . plot ( trials , ave_dices , label = \"Observed average\" , color = \"green\" ) plt . ylim ( 1 , 6 ) plt . title ( \"Average dice roll by number of rolls\" ) plt . ylabel ( \"Average\" ) plt . xlabel ( \"Number of trials\" ) plt . grid () plt . legend () plt . show () If we keep rolling the dice over and over again, the sample average of dice roll will converge to the true average. Exception The law of large numbers assumes the existance of expected values . Therefore, it will not hold when there is no expected value. (ex. Cauchy distribution ) Cauchy distribution $$ \\begin{aligned} f(x;x_0,\\gamma) &= \\frac{1}{\\pi\\gamma\\left[1 + \\left(\\frac{x-x_0}{\\gamma}\\right)&#94;2\\right]} = \\frac{1}{\\pi}\\frac{\\gamma}{\\left(x-x_0\\right)&#94;2 + \\gamma&#94;2} & \\begin{cases}x_0: \\text{Location paramete}\\\\\\gamma: \\text{Scale parameter}\\end{cases}\\\\ f(x;0,1) &= \\frac{1}{\\pi\\left(1+x&#94;2\\right)} & (\\text{standard cauchy distribution}) \\end{aligned} $$ In [6]: N = 5000 K = 3 seed = 1 In [7]: trials = np . arange ( 1 , N + 1 ) In [8]: samples = np . random . RandomState ( seed ) . standard_cauchy ( size = ( K * N )) . reshape (( K , N )) ave_samples = np . cumsum ( samples , axis = 1 ) / trials In [9]: for k in range ( K ): plt . plot ( trials , ave_samples [ k ], label = f \"Observation { k + 1 } \" ) plt . ylabel ( \"$(\\mathbf {X} _1+\\cdots+\\mathbf {X} _n)/n$\" ) plt . xlabel ( \"n\" ) plt . legend () plt . grid () Central Limit Theorem Sample mean follows normal distribution. Foundation of many statistical tests. Regardless of true distribution. Assuming independence. Theorem Let $\\{\\mathbf{X}_1,\\ldots,\\mathbf{X}_n\\}$ be a random sample of size $n$, which is a sequence of independent and identically distributed random variables drawn from a distribution. expected value given by $\\mu$. finite variance given by $\\sigma&#94;2$. Let $S_n:=\\sum_{k=1}&#94;n\\mathbf{X}_k$ $$P\\left(\\frac{S_n-n\\mu}{\\sqrt{n}\\sigma}\\leq\\alpha\\right)\\rightarrow\\frac{1}{\\sqrt{2\\pi}}\\int_{-\\infty}&#94;{\\alpha}e&#94;{-\\frac{x&#94;2}{2}}dx\\quad(n\\rightarrow\\infty)$$ Therefore: $$ \\begin{aligned} S_n&\\sim\\mathcal{N}\\left(n\\mu, n\\sigma&#94;2\\right) & (n\\rightarrow\\infty)\\\\ \\bar{\\mathbf{X}}_n = \\left(\\mathbf{X}_1+\\cdots+\\mathbf{X}_n\\right)/n&\\sim\\mathcal{N}\\left(\\mu,\\sigma&#94;2/n\\right) & (n\\rightarrow\\infty) \\end{aligned} $$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Example In [10]: N = 10000 ns = [ 10 , 100 , 1000 , 10000 ] roll = 4 seed = 0 In [11]: fig = plt . figure ( figsize = ( 12 , 6 )) ax_all = plt . subplot2grid (( 2 , len ( ns )), ( 0 , 0 ), colspan = len ( ns )) for i , n in enumerate ( ns ): ax = plt . subplot2grid (( 2 , len ( ns )), ( 1 , i )) dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = ( n , N )) rate_dice_eq_4 = np . count_nonzero ( dices == roll , axis = 1 ) / N freqs , bins , patches = ax . hist ( rate_dice_eq_4 , bins = 20 , density = True ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] ax_all . plot ( cent_bins , freqs , label = f \"n= { n } \" ) ax . set_title ( f \"n= { n } \" ) ax . set_xlabel ( f \"Probability of { roll } roll.\" ) ax . set_ylabel ( \"freq\" ) ax_all . set_title ( \"Central Limit Theorem\" ) ax_all . legend () plt . tight_layout () plt . show () Section2.2 ChIP-seq Peak Detection ChIP-sequencing, also known as ChIP-seq, is a method used to analyze protein interactions with DNA. ChIP-seq combines chromatin immunoprecipitation (ChIP) with massively parallel DNA sequencing to identify the binding sites of DNA-associated proteins. It can be used to map global binding sites precisely for any protein of interest. Previously, ChIP-on-chip was the most common technique utilized to study these protein–DNA relations. Peak calling Problem: How to identify transcription factor binding sites and histone modification enriched regions? Random Read Model Assume that read appears with equal probability in any region. Calcurate the p-value (the Probability of obtaining more or equally extreme value than observed value under the random model.) → Smaller is more significant. Setting the threshold (p-value) manually. We could calcurate the threshold ($n_{obs}$) → If the $n_{obs}$ exceeds this threshold, it is determined as the peak region. In [12]: from scipy.special import comb In [13]: g = 10000 # total DNA length n = 1000 # total number of reads l = 100 # bin size q = l / g n_bins = g / l lambda_ = n * q # mean read count seed = 0 xmax = 30 In [14]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) read_points = np . random . RandomState ( seed ) . randint ( 0 , g , size = n ) axL . scatter ( read_points , np . zeros ( shape = n ), s = 3 , label = \"read\" , color = \"black\" ) ledge = 0 read_counts = [] for edge in range ( l , g + 1 , l ): middl = ( ledge + edge ) / 2 count = np . count_nonzero ([( ledge <= read_points ) & ( read_points < edge )]) read_counts . append ( count ) if edge <= l * 10 : axL . axvline ( edge , color = \"red\" ) axL . text ( x = middl , y = 1e-3 , s = count , horizontalalignment = 'center' ) ledge = edge axL . set_xlim ( 0 , l * 10 ) axL . set_ylim ( - 1e-3 , 2e-3 ) axL . set_yticks ([]) axL . legend () Poisson = [ comb ( n , i , exact = True ) * ( q ** i ) * (( 1 - q ) ** ( n - i )) for i in range ( n )] axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axR . plot ([ read_counts . count ( i ) / n_bins for i in range ( n )], color = \"red\" , label = \"Observed\" ) axR . set_xlim ( 0 , xmax ) axR . set_xlabel ( \"Read count for each bin\" ) axR . set_ylabel ( \"Frequency\" ) axR . legend () plt . show () In [15]: n_obs = 15 p_values = np . cumsum ( Poisson [:: - 1 ])[:: - 1 ] # Calcurate p-value for each n_obs. thresh_p = 1e-2 bp = np . argmax ( p_values <= thresh_p ) In [16]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axL . fill_between ( np . arange ( n_obs , xmax ), y1 = Poisson [ n_obs : xmax ], y2 = 0 , facecolor = 'red' ) axL . annotate ( 'p-value \\n = $\\mathbb {P} (n_ {obs} \\leq N)$ \\n $=\\sum_{i=n_ {obs} }&#94;{\\infty}(\\lambda&#94;i/i!)\\cdot e&#94;{-\\lambda}$' , xy = ( 17 , 1e-2 ), xytext = ( 20 , 4e-2 ), fontsize = 12 , arrowprops = dict ( width = 1 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'black' ) ) axL . set_xlim ( 0 , 30 ) axL . set_title ( \"Poisson distribution\" ) axL . set_xlabel ( \"N\" ) axL . set_ylabel ( \"Freq\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( p_values , color = \"black\" ) axR . scatter ( n_obs , p_values [ n_obs ], color = \"red\" , label = \"pvalue($n_ {obs} $=\" + f \" { n_obs } )\" ) axR . scatter ( bp , p_values [ bp ], color = \"blue\" , label = \"Boundary point\" ) axR . axhline ( thresh_p , color = \"blue\" , label = f \"threshold(p_value= { thresh_p } )\" ) axR . axvspan ( xmin = bp , xmax = xmax , color = \"blue\" , alpha = 0.3 ) axR . set_xlim ( 0 , xmax ) axR . set_title ( \"The relationship between p-value and $n_ {obs} $\" ) axR . set_xlabel ( \"$n_ {obs} $\" ) axR . set_ylabel ( \"p-value\" ) axR . legend () plt . show () In this case, we could say the threshold($n_{obs}$) = 19(=bp). ※ In ChIP-seq, we have to do \"Tag shift\" due to the DNA strand asymmetry. （→ more: MACS ） Section2.3 Hypothesis Testing Terminology In [17]: fig , ax = plt . subplots ( figsize = ( 6 , 4 )) X = np . arange ( 10 , 100 , 1 ) Y = 1 / X # Null distribution ax . plot ( X , Y , color = \"red\" ), ax . text ( x = 15 , y = 8e-2 , s = \"Null distribution \\n $f_S(s|H)$\" , fontsize = 15 ) # Thereshold: Sα ax . plot (( 50 , 50 ),( 0 , 7e-2 ), color = \"black\" ), ax . text ( x = 48 , y = 7.5e-2 , s = \"$S_ {α} $\" , fontsize = 12 ) # Reject & Accept ax . annotate ( '' , xy = ( 75 , 5e-2 ), xytext = ( 52 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 55 , y = 5.5e-2 , s = \"reject\" , fontsize = 12 ) # Reject ax . annotate ( '' , xy = ( 25 , 5e-2 ), xytext = ( 48 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 35 , y = 5.5e-2 , s = \"accept\" , fontsize = 12 ) # Accept # Observation sample. ax . plot (( 70 , 70 ),( 0 , 1 / 70 ), color = \"black\" ), ax . scatter ( 70 , 1 / 70 , color = \"black\" ), ax . text ( x = 68 , y = 2e-2 , s = \"$S_ {obs} $\" , fontsize = 12 ) ax . set_xticks ([]), ax . set_yticks ([]) ax . set_xlabel ( \"S\" ), ax . set_ylabel ( \"freq\" ) ax . set_xlim ( min ( X ), max ( X )), ax . set_ylim ( min ( Y ), max ( Y )) plt . show () Null Hypothesis $H_0$ Alternative Hypothesis $H_1$ Test Static $S$ Null distribution Significance threshold Reject/Accept $H_0$ Null hypothesis is True Null hypothesis is False Do not reject Null hypothesis ($H_0$) Correct Type2 error (False negative) Reject Null hypothesis ($H_0$) Type1 error (False positive) Correct P-value distribute uniformly under $H_0$ Proof. p-value is the probability of obtaining more or equally extreme value than observed value under the null distribution. $$p = \\mathbb{P}\\left(S\\geq s|H_0\\right) = 1-\\mathbb{P}\\left(S< s|H_0\\right)$$ By noting $F_0$ the cumulative distribution function of $S$ under $H_0$, we obtain: $$p = 1-F_0(s)$$ Thanks to the fact that the cdf is monotonic, increasing and (left-)continuous: $$\\mathbb{P}\\left(S\\geq s|H_0\\right) = \\mathbb{P}\\left(F_0\\left(S\\right)\\geq F_0\\left(s\\right)\\right) = 1-\\mathbb{P}\\left(F_0\\left(S\\right)< F_0\\left(s\\right)\\right)$$ Therefore, we have: $$\\mathbb{P}\\left(F_0\\left(S\\right)< F_0\\left(s\\right)\\right) = F_0\\left(s\\right)$$ Which means that $F_0\\left(S\\right)$ is following a uniform distribution. And, as this means also that $1-F_0\\left(S\\right)$ is following a uniform distributed, then we can conclude that p-value are uniformly distributed under the null hypothesis. In [18]: from scipy.stats import norm In [19]: N = 10000 loc = 0 scale = 1 seed = 0 In [20]: obs = np . random . RandomState ( seed ) . normal ( loc = loc , scale = scale , size = N ) # observation sample \"s\". p_value = 1 - norm . cdf ( x = obs , loc = loc , scale = scale ) # p-value = 1 - F(s) In [21]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) freqs , bins , patches = axL . hist ( obs , bins = 50 , density = True , color = \"blue\" , alpha = 0.7 ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] axL . plot ( cent_bins , freqs , color = \"blue\" ) axL . set_title ( \"Histogram of observation sample s \\n under the null distribution (This time: Normal distribution)\" ), axL . set_xlabel ( \"observation s\" ), axL . set_ylabel ( \"Frequency\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . hist ( p_value , bins = 20 , edgecolor = \"black\" ) axR . set_title ( \"Histogram of p-value\" ), axR . set_xlabel ( \"p-value\" ), axR . set_ylabel ( \"Frequency\" ) plt . tight_layout () plt . show () ※ We could argue about the p-value under the null hypothesis, but we could not confirm whether null hypothesis is true or not. Section2.4 Hypothesis Test Example $\\chi&#94;2$-test Any statistical hypothesis test where the sampling distribution of the test statistic is a chi-squared distribution when the null hypothesis is true. Used to determine whether there is a significant difference between the expected frequencies and the observed frequencies in one or more categories. $\\chi&#94;2$-distribution $Y_i\\sim\\mathcal{N}\\left(0,1\\right), i=1,\\ldots,\\nu$: i.i.d. $X=Y_1&#94;2+\\cdots+Y_{\\nu}$ $\\rightarrow X\\sim\\chi&#94;2(\\nu), X\\in \\mathbb{R}_{\\geq0}$ $$ \\begin{aligned} f_X(x) &= \\frac{1}{2&#94;{\\nu/2}\\Gamma(\\nu/2)}x&#94;{\\nu/2-1}e&#94;{-x/2}\\\\ \\Gamma(z) &= \\int_{0}&#94;{\\infty}t&#94;{z-1}e&#94;{-t}dt(\\mathrm{Re}(z)>0)\\\\ \\mathbb{E}(X) &= \\nu\\\\ \\mathbb{V}(X) &= 2\\nu \\end{aligned} $$ In [22]: from scipy.stats import chi2 In [23]: K = 5 In [24]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( 0 , 8 , 1000 ) for k in range ( 1 , K + 1 ): plt . plot ( X , chi2 . pdf ( X , k ), label = f \"$k= { k } $\" ) plt . xlim ( 0 , 8 ), plt . ylim ( 0 , 1.0 ) plt . title ( \"$\\chi&#94;2$-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Pearson's chi-square test goodness of fit test # $C_1$ $C_2$ $\\cdots$ $C_k$ total Observation frequency $n_1$ $n_2$ $\\cdots$ $n_k$ $n$ Theoretical probability (under $H_0$) $p_1$ $p_2$ $\\cdots$ $p_k$ $1$ Theoretical frequency $m_1=np_1$ $m_2=np_2$ $\\cdots$ $m_k=np_k$ $n$ Null Hypothesis($H_0$): $P(C_i) = p_i\\quad(i=1,2,\\ldots,k)$ If null hypothesis is true, $U$ are distributed as $\\chi&#94;2(k-1)$. $$ U=\\sum_{i=1}&#94;k\\frac{(n_i-m_i)&#94;2}{m_i}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ test for independence A\\B $B_1$ $B_2$ $\\cdots$ $B_b$ total $A_1$ $n_{11}$ $n_{12}$ $\\cdots$ $n_{1b}$ $n_{1\\cdot}$ $A_2$ $n_{21}$ $n_{22}$ $\\cdots$ $n_{2b}$ $n_{2\\cdot}$ $\\vdots$ $\\vdots$ $\\vdots$ $\\cdots$ $\\ddots$ $\\vdots$ $A_a$ $n_{a1}$ $n_{a2}$ $\\cdots$ $n_{ab}$ $n_a$ total $n_{\\cdot1}$ $n_{\\cdot2}$ $\\cdots$ $n_{\\cdot b}$ $n_{a\\cdot}$ $P(A_i) = p_i,P(B_j)=q_j,\\quad (1\\leq i\\leq a,1\\leq j\\leq b)$ Null Hypothesis($H_0$): $A$ and $B$ are independence. $$P(A_i\\cap B_j) = p_iq_j$$ If null hypothesis is true, we could presume: $\\bar{p_i}=n_{i\\cdot}/n$, $\\bar{q_j}=n_{\\cdot j}/n$. $m_{ij} = n\\bar{p_i}\\bar{q_j}$ (Theoretical frequency) $$ U=\\sum_{i=1}&#94;a\\sum_{j=1}&#94;b\\frac{(n_{ij}-m_{ij})&#94;2}{m_{ij}}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ t-test One-sample test: Determine whether a sample of observations could have been generated by a process with a specific mean $\\mu$. Two-sample test: Compare the average values of the two data sets and determine if they came from the same population. t-distribution $$ \\begin{aligned} f_{t(\\nu)}(x) &= \\frac{\\Gamma\\left(\\frac{\\nu+1}{2}\\right)}{\\sqrt{\\nu\\pi}\\Gamma\\left(\\frac{\\nu}{2}\\right)}\\left(1+\\frac{x&#94;2}{\\nu}\\right)&#94;{-\\frac{\\nu+1}{2}}\\\\ \\mathbb{E}(X) &= 0(\\nu>1)\\\\ \\mathbb{V}(X) &= \\begin{cases}\\infty&(1<\\nu\\leq2)\\\\\\frac{\\nu}{\\nu-2}&(2<\\nu)\\end{cases} \\end{aligned} $$ In [25]: from scipy.stats import t as tdist In [26]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( - 6 , 6 , 1000 ) nus = [ 1 , 2 , 5 , 1000 ] for nu in nus : plt . plot ( X , tdist . pdf ( X , nu ), label = f \"$ν= { nu } $\" ) plt . plot ( X , norm . pdf ( X , 0 , 1 ), linestyle = ':' , linewidth = 5 , label = \"Standard Normal Distribution\" ) plt . xlim ( - 6 , 6 ), plt . ylim ( 0 , 0.4 ) plt . title ( \"t-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Student's t-test One-sample test: $$ X_1,\\ldots,X_n\\sim\\mathcal{N}(\\mu,\\sigma)\\text{: i.i.d.}\\\\ \\bar{X} = \\frac{X_1,\\ldots,X_n}{n}, S = \\frac{\\left(X_1-\\bar{X}\\right)&#94;2 + \\cdots+\\left(X_n-\\bar{X}\\right)&#94;2}{n-1}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}-\\mu\\sqrt{n}\\right)}{S}\\sim t(n-1) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{X_{11}+\\cdots+X_{1m}}{m}\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{X_{21}+\\cdots+X_{2n}}{n}\\\\ S=\\frac{\\sum_{i=1}&#94;m\\left(X_{1i}-\\bar{X}_1\\right)&#94;2 + \\sum_{i=1}&#94;n\\left(X_{2i}-\\bar{X}_2\\right)&#94;2}{m+n-2}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)\\sqrt{mn}}{S\\sqrt{m+n}}\\sim t(m+n-2) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{\\sum_{i=1}&#94;mX_{1i}}{m}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{1i} - \\bar{X}_1\\right)&#94;2}{m-1}, A=S_1/m\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{\\sum_{i=1}&#94;mX_{2i}}{n}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{2i} - \\bar{X}_2\\right)&#94;2}{n-1}, B=S_2/n\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)}{S\\sqrt{A+B}}\\approx t(\\nu), \\nu=\\frac{(A+B)&#94;2}{A&#94;2/(m-1)+B&#94;2/(n-1)} $$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html"},{"title":"レポート課題1(10/3出題)","text":"e03Ss24BWVrUm5wHucVSMQ==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html"},{"title":"イントロダクション","text":"講義計画 確率と統計の基礎 ： 最先端の機械学習技術の数学的基盤 探索と最適化 ： 広大な探索空間から最適解を効率よく探索 機械学習 ： データの背後に潜む知識を発見 自然言語処理 ： 人工知能技術の応用例 # 日付 内容 担当 1 10/3 概要 杉山 2 10/10 最適化（連続1） 佐藤 3 10/17 最適化（連続2） 佐藤 4 10/24 最適化（探索） 本多 5 10/31 確率と統計 本多 6 11/14 確率と統計 本多 7 11/21 確率と統計 本多 8 11/28 機械学習（教師付き学習） 本多 9 12/5 機械学習（教師付き学習） 佐藤 10 12/12 自然言語処理 宮尾 11 12/19 自然言語処理 宮尾 12 12/26 自然言語処理 宮尾 13 1/9 機械学習（強化学習） 杉山 1 1/16 試験 佐藤 人工知能とは 1956年：\"The Dartmouth Summer Research Project on Artificial Intelligence\" にて Artificial Intelligence という言葉が提唱された。 Watoson Nature AlphaGo 人工知能関連分野の発展 人工知能研究 1960年頃(1次ブーム)：記号処理、論理推論 1980年頃(2次ブーム)：エキスパートシステム ニューラルネット研究 1960年頃(1次ブーム)：パーセプトロン（１層） 1990年頃(2次ブーム)：誤差逆伝播ほう（多層） 機械学習研究 1995年頃〜：統計・凸最適化 1995年頃〜：ベイズ推論 2010年頃〜：深層学習 3種類の機械学習 教師付き学習 ：人間が教師となり、コンピュータの学習を手伝う。 教師なし学習 ：コンピュータが人間の手を介さずに自発的に学習する。 強化学習 ：ロボットが人間の手を介さずに自発的に意思決定を行う。 まとめ 人工知能 ： 知的なコンピュータシステムを作る 数学・プログラミング・実世界応用をつなぐ架け橋 探索 ： 広大な探索空間を効率よく探索 機械学習 ： データの背後に潜む知識を発見","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html"},{"title":"分子生命科学Ⅲ 第2回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 神経系の構造と機能（2） 中枢神経系の構造・機能 中枢神経系(CNS; Central nervous system) は、神経系の中で 多数の神経細胞が集まって大きなまとまりになっている領域 であり、 1 と 2 からなる。 全てのCNSは、胚発生の初期段階で形成される、液で満ちた1本の管（→成人の 脳室系 ）の壁から発生する。 胚の始まりは、 3 ・ 4 ・ 5 と呼ばれる3つの異なる細胞層からなる平らな円盤でもある。 3 は、最終的に多くの内臓のもととなる。 4 からは骨と筋肉が発生する。 5 からは 神経系(Nervous system) と皮膚が発生する。 神経管(Neural tube) 形成 神経系 が起こる 5 部分、特に 5 に由来する板状の 6 に焦点を当てる。 6 は、発生にしたがってダイナミクスに形態変化する。 吻側 (ふんそく) から尾側に走る1本の溝である 7 が形成される。 この溝の壁である 8 は、その後背側で合わさって融合し、 9 を形成する。 8 が合わさる際に、一部の神経性外胚葉ははみ出して、ちょうど 9 の横にくる。この組織は、 10 と呼ばれる。 10 は、その下にある 11 （脊柱の33個の椎骨および関連する骨格筋となる）と関連して発達する。それゆえ、これらの骨格筋を支配する神経は 12 と呼ばれる。 全てのCNSは、 9 の壁から発生し、 末梢神経系(PNS; peripheral nervous system) に 細胞体 を持つ全てのニューロンは、 10 に由来する。 分化 発達の間に構造がさらに綿密に仕上げられ、特殊化されたものになる過程は 分化(differentiation) と呼ばれる。 脳における 分化 の第一段階は、 9 の吻側に起こる3つの隆起の発達であり、これらは 13 と呼ばれている。なお、 脳全体は 9 の3個の 13 に由来する。 3個の 13 は、引き続き発達を続ける。 前脳の分化(終脳、間脳；側脳室、第三脳室) 前脳では 14 （× 2）と 15 （× 2）と呼ばれる二次脳胞が両側に出て、残った不対の構造は 16 （× 1）と呼ばれる。 14 は、成長の後に陥入して 17 と 18 を形成する。これらは最終的に、人の左右の 19 と 20 になる。重要な点は、 眼球の裏の構造である 20 と、眼と 16 を連絡する 19 は脳の一部であり、PNS ではない ということである。 終脳と間脳の分化 15 は、2つの大脳半球からなる 21 を形成する。ここで、 21 は、次の4つの仕方で発達を続ける。 後方へ成長し、 16 の上および側方に位置するようになる。 （包み込む） 別の一対の小胞が大脳半球の腹側面から出て、 22 と嗅覚に関連する構造の元となる。 終脳胞壁の細胞は分裂し、様々な構造へ分化する。 白質系が発達し、 21 のニューロンから、あるいはこのニューロンへと軸索が伸展する。 大脳半球内にあり、液体で満たされている腔は 23 と呼ばれ、 16 の中心部にある腔は 24 と呼ばれる。 21 において 25 と 26 、 16 において 27 と 28 のそれぞれ2つの異なるタイプの 灰白室 を形成する。 なお、発達中の前脳のニューロンは 軸索 を伸ばして他の神経系の領域と連絡を行う。これらの軸索は、ともに束をなして3つの主な 白質系 を形成する。 29 は、 25 のニューロンに出入りして走るすべての軸索を含む 30 は、 29 に続いており、左右の大脳半球にある皮質ニューロンをつなぐ軸索で形成されている。 29 は、 31 にも続いており、これは皮質と脳幹、特に 27 と連絡している。 前脳の構造と機能の相関 前脳は知覚・意識的な気づき・認知・随意運動の場である。この全ては 脳幹 と 脊髄 の感覚および運動ニューロンとの広範な相互の神経連絡に依存している。 25 を始めとした皮質ニューロンは感覚情報を受け取り、外界についての認知を形成し、随意運動を命令する。この時、 各感覚経路は、皮質に向かう途中で 27 を中継する。 そのため、 27 はしばしば \"大脳皮質への入り口\" と称される。 なお、 22 のニューロンは、鼻腔内の化学物質を検出する細胞からの情報を受け取り、尾側にある 25 の部分へこの情報を伝達するため、 嗅覚だけは 27 を中継しない。 27 のニューロンは、しばしば 31 を経由して 25 へ軸索を送る。この時、送る情報は身体の反対側に関するものである。（右足の感覚 → 左 27 → 左 31 の軸索 → 左皮質） 右脳と左脳が互いの情報を連絡する方法は、 30 の軸索による大脳半球間の連絡が最も重要である。 中脳の分化(中脳蓋、中脳被蓋；中脳水道) 前脳 とは異なり、脳の発達において 中脳は比較的分化が少ない。 中脳胞の背側面は 32 になる。 中脳胞の腹側面は 33 になる。 両者の中間にあり、 34 で満たされている腔は、 35 と呼ばれる水路である。これは、吻側で終脳の 24 と接続する。 中脳の構造と機能の相関 見た目は上記の通り簡潔だが、「脊髄・前脳間の情報伝達に加え、感覚系、運動制御、およびその他の機能」など、役割は多様である。 33 は2つの構造に分化する。 36 は、眼から直接入力を受けるので、 視蓋(optic tectum) とも呼ばれる。視蓋の機能として、眼球の運動の制御などがある。 37 は、耳からの情報を受ける。 33 は、 黒質(substantia nigra) と 赤核(red nucleus) の両方があるため、脳の中で最も色彩に富む領域の1つである。これら2つの細胞群は随意運動の制御に関わる。 その他の細胞群は、CNSの大部分に広く投射する軸索を持ち、その機能は意識や気分、快、痛みの調節機能に関わる。 菱脳の分化(小脳、橋、延髄；第四脳室) 菱脳は「 38 ・ 39 ・ 40 （ 41 ）」の3つの重要な構造に分化する。 なお、菱脳の中にある 34 で満たされた管は、 35 から続くもので、 42 となる。 菱脳の構造と機能の相関 中脳と同様に、菱脳も脊髄・前脳間を流れる情報が通る。これに加えて、感覚情報の加工や随意運動の制御、および自律神経系の調節などを行う。 38 は重要な運動制御中枢である。 38 は大量の軸索入力を受けているが、経路によって受け取る情報が異なる。 脊髄からの入力は、身体の空間的な位置についての情報をもたらす。 25 からの情報は、 39 で中継されて入力される。これは、意図した運動の目標を知らせるものである。 38 はこの情報を比較処理して、運動目標の達成に求められる一連の筋収縮過程を計算する。したがって、 38 が障害されると、調和の取れない不正確な運動となる。 逆に、中脳を通って下行する軸索のうち、90%以上が 39 のニューロンにシナプス結合し、 39 の細胞はこの情報の全てを反対側の 38 へ中継する。 このように、 39 は 25 と 38 をつなぐ大規模な配電盤のような働きをする。 脊髄の分化(脊髄；中心管) 以下の図に示すように、尾側にある 9 から脊髄への変形は、脳の分化に比べればさほど複雑ではない。管壁の組織の増加により、神経管の内腔は押されて、 34 で満たされた細い 43 となる。 横断面で見ると、中心にある脊髄の 灰白室 （ここにニューロンが存在する）は蝶のような形をしている。 蝶の羽の上部に相当する部は 44 であり、このニューロンは後根線維からの感覚入力を受ける。 下部は 45 であり、このニューロンは筋肉を支配する前根線維に軸索を投射する。 これらの間は 46 であり、このニューロンは感覚入力や脳からの命令に応じて運動出力を形成する介在ニューロンである。 統合 ここまで個別に見てきた部分を組み合わせて、中枢神経系全体を組み立てる。以下は、ヒトを含めた全哺乳動物における中枢神経系の基本設計図を単純化した模式図である。 21 の一対の大脳半球が側脳室を囲む。 側脳室の腹側および側面には大脳基底核（基底核）がある。 側脳室は 16 の 24 に続いている。 この 24 を囲むのは 27 と 28 である。 24 は 35 に続いている。 35 の背側には 32 があり、腹側には 33 がある。 35 が繋がるのは菱脳の中心にある 42 である。 42 の背側に 38 が突き出ており、腹側には 39 と 40 がある。 脳室名 関連した脳の構造 側脳室 大脳皮質、終脳基底部 第三脳室 視床、視床下部 中脳水道 中脳蓋、中脳被蓋 第四脳室 小脳、橋、延髄 ヒトの中枢神経系の特徴 これまで、 全ての哺乳類に適用される中枢神経系の基本設計 について見てきた。ここでは、ラットとヒトの脳を比較することで、類似点と相違点に目を向ける。 類似点 脳を背側から見ると、双方の終脳には対をなした半球がある。 脳を正中面から見ると、終脳は間脳の吻側にある。 間脳は第三脳室を囲み、中脳は中脳水道を囲み、菱脳の小脳、橋、延髄は第四脳室を囲んでいる。 小脳の下で橋が膨らんでおり、小脳は構造的に精巧である。 相違点 大脳表面にある皺 (しわ) の数。大脳表面の溝は 47 と呼ばれ、隆起は 48 と呼ばれるが、これらはヒト胎生期の大脳表面の凄まじい拡大の結果生じる。頭蓋容量の制限に適合するために折り曲がり、皺を作らなければならないのである。この大脳皮質の表面積の増加が、ヒトの脳の \"歪み\" を生み出す原因の1つだが、大脳皮質がヒトの思考や認知の唯一の座であることが示されている。 ラットに比べ、ヒトの嗅球は小さい。一方で、ヒトの脳の大脳半球は大きく膨らんでいる。 大脳の各葉のうち、4つは近くにある頭蓋骨の名称から取られている。 葉 頭蓋骨 機能 前頭葉 前頭骨 運動に関わる領域（一次運動野、前運動野、前頭眼野）・発話に関わる領域（ブローカ野）・計画などに関わる領域（前頭前野） 側頭葉 側頭骨 聴覚に関わる領域（一次聴覚野、ウェルニッケ野）、視覚中の対象の情報（腹側皮質視覚路） 頭頂葉 頭頂骨 体性感覚に関わる領域（一次体性感覚皮質）、視覚中の対象の位置情報（背側皮質視覚路） 後頭葉 後頭骨 視覚に関わる領域（視覚野） 辺縁葉 情動に関わる領域、記憶に関わる領域（海馬） 島葉","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-2.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-2.html"},{"title":"Pair HMM","text":"※実装時のパラメータ PairHMMによるアラインメントを実装していく。なお、 （ kerasy.Bio.alignment.PairHMM ） に定義してあります。 In [1]: from kerasy.Bio.alignment import PairHMM In [2]: # サンプル配列 seqX = \"CCAGAGCTGTGGCAGACAGTGGCT\" seqY = \"CCAGCTGTGCAGACACTGGCTT\" In [3]: model = PairHMM () In [4]: ! cat params.json { \"delta\": \"1/10\", \"epsilon\": \"1/5\", \"tau\": \"1/30\", \"px_e_y\": \"1/8\", \"px_ne_y\": \"1/24\", \"qx\": \"1/4\", \"qy\": \"1/4\" } In [5]: model . set_params ( path = \"params.json\" ) Pair HMM とその利点 HMMのために開発されたアルゴリズムを使える。（らしい←正解ラベルの無いアラインメントでBaum-Welchアルゴリズムをどのように使うのかは現在考察中です。） アラインメントの確率的な解釈が可能になる。 グローバルアラインメントを出力する Pair-HMM Mは $x$ と $y$ がマッチした状態。（$x_i$ と $y_j$ がアライン） Xは $x$ に挿入が起きている状態。（$x_i$ と $-$ がアライン） Yは $x$ に欠失が起きている状態。（$-$ と $y_j$ がアライン） Pair HMMのためのViterbiアルゴリズム 2本数の配列 $x,y$ を与えると確率最大のアラインメントを求めるアルゴリズム。 Initialization: $$ \\begin{cases} V&#94;M(0,0)=1, V&#94;M(i,0)=V&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ V&#94;X(0,0)=0, V&#94;X(1,0)=\\delta q_{x_1} V&#94;X(i,0)=\\varepsilon q_{x_i}V&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ V&#94;Y(0,0)=0, V&#94;Y(0,1)=\\delta q_{y_1} V&#94;Y(0,j)=\\varepsilon q_{y_j}V&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} V&#94;M(i,j) &= p_{x_iy_j}\\max\\begin{cases}(1-2\\delta-\\tau)V&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;Y(i-1,j-1)\\end{cases}\\\\ V&#94;X(i,j) &= q_{x_i}\\max\\begin{cases}\\delta V&#94;M(i-1,j)\\\\\\varepsilon V&#94;X(i-1,j)\\end{cases}\\\\ V&#94;Y(i,j) &= q_{y_j}\\max\\begin{cases}\\delta V&#94;M(i,j-1)\\\\\\varepsilon V&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$v_e = \\tau\\max\\left(V&#94;M(n,m),V&#94;X(n,m),V&#94;Y(n,m)\\right)$$ In [6]: P_optimal = model . align ( seqX , seqY , return_score = True ) Pair HMM (Viterbi) Alignment score: 3.551370651291424e-30 |parameter| value | -------------------------------- |delta | 0.1| |epsilon | 0.2| |tau | 0.03333333333333333| |px_e_y | 0.125| |px_ne_y |0.041666666666666664| |qx | 0.25| |qy | 0.25| =============================================================== X: CCAGAGCTGTGGCAGACAGTGGC-T Y: CC--AGCTGT-GCAGACACTGGCTT =============================================================== In [7]: print ( f \"π*= { P_optimal } \" ) π*=3.551370651291424e-30 アラインメントの信頼性 配列 $x,y$ が与えられた時、アラインメント $\\pi$ が得られる条件付き確率を考えることができ、それが アラインメントの信頼度 を表していると考ることができる。 $$ P(\\pi|x,y) = \\frac{P(x,y,\\pi)}{P(x,y)}\\\\ P(x,y) = \\sum_{\\text{alignments }\\pi}P(x,y,\\pi) $$ ※ なお、ここで $P(x,y)$ は $x,y$ に関する全ての可能なアラインメントについて確率を足し合わせたもの であり、Forwardアルゴリズムで計算することができる。 Pair HMMのためのForwardアルゴリズム ※ Viterbiの $\\max$ を $\\text{sum}$ に変更しただけ。 Initialization: $$ \\begin{cases} F&#94;M(0,0)=1, F&#94;M(i,0)=F&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ F&#94;X(0,0)=0, F&#94;X(1,0)=\\delta q_{x_1} F&#94;X(i,0)=\\varepsilon q_{x_i}F&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ F&#94;Y(0,0)=0, F&#94;Y(0,1)=\\delta q_{y_1} F&#94;Y(0,j)=\\varepsilon q_{y_j}F&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} F&#94;M(i,j) &= p_{x_iy_j}\\text{sum}\\begin{cases}(1-2\\delta-\\tau)F&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;Y(i-1,j-1)\\end{cases}\\\\ F&#94;X(i,j) &= q_{x_i}\\text{sum}\\begin{cases}\\delta F&#94;M(i-1,j)\\\\\\varepsilon F&#94;X(i-1,j)\\end{cases}\\\\ F&#94;Y(i,j) &= q_{y_j}\\text{sum}\\begin{cases}\\delta F&#94;M(i,j-1)\\\\\\varepsilon F&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$F_e = \\tau\\ \\text{sum}\\left(F&#94;M(n,m),F&#94;X(n,m),F&#94;Y(n,m)\\right)$$ In [8]: F , P_all = model . forward ( seqX , seqY ) In [9]: print ( f \"𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)= { P_all } \" ) 𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)=2.0457988072916236e-28 In [10]: print ( f \"P(π*|x, y)= { P_optimal / P_all } \" ) P(π*|x, y)=0.017359334840912267 $x_i$ と $y_j$ がアラインされる確率 次の式で表される。 $$ \\begin{aligned} P(x_i\\diamondsuit y_i|x,y) &= \\frac{\\sum_{\\pi\\in\\Omega_{ij}}P(x,y,\\pi)}{P(x,y)}\\\\ &= \\frac{F&#94;M(i,j)\\cdot B&#94;M(i,j)}{P(x,y)} \\end{aligned}$$ ※ $\\Omega_{ij}$：$x_i$ と $y_j$ がアラインされるアラインメントの集合 Pair HMMのためのBackwardアルゴリズム Needleman-Wunsh-Gotoh のBackwardアルゴリズムとの類似性に注目！ Initialization: $$ \\begin{cases} B&#94;M(n,m)=B&#94;X(n,m)=B&#94;Y(n,m)=\\tau\\\\ B&#94;X(i,m)=\\varepsilon q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;Y(i,m)=\\varepsilon q_{y_{j+1}}B&#94;X(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ B&#94;M(i,m)=\\delta q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;M(n,j)=\\delta q_{y_{j+1}}B&#94;Y(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ \\end{cases} $$ Recursion: $i=n-1,\\ldots,1,\\quad j=m-1,\\ldots,1$ $$ \\begin{aligned} B&#94;M(i,j) &= \\text{sum}\\begin{cases}(1-2\\delta-\\tau)p_{x_iy_j}B&#94;M(i+1,j+1)\\\\\\delta q_{x_{i+1}}B(i+1,j)\\\\\\delta q_{y_{j+1}}B&#94;Y(i,j+1)\\end{cases}\\\\ B&#94;X(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{x_{i+1}}B&#94;X(i+1,j)\\\\ B&#94;Y(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{y_{j+1}}B&#94;Y(i,j+1)\\\\ \\end{aligned} $$ In [11]: B = model . backward ( seqX , seqY ) In [12]: Pij = ( F * B ) / P_all In [13]: import seaborn as sns import matplotlib.pyplot as plt In [14]: sns . heatmap ( Pij ) plt . show () In [15]: # 可視化のために pandas を使用。 import pandas as pd r , c = Pij . shape pd . set_option ( 'display.max_rows' , r ) pd . set_option ( 'display.max_columns' , c ) In [16]: df = pd . DataFrame ( Pij ) In [17]: df Out[17]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 0 1.139605e+00 1.145169e-02 1.061625e-04 9.380071e-06 7.330898e-07 1.256616e-08 5.467340e-10 2.910714e-11 5.763005e-12 3.410212e-13 5.102192e-15 2.187247e-16 1.988821e-17 1.147484e-18 1.367416e-20 6.720910e-22 4.976161e-24 7.098501e-26 9.237930e-28 2.211060e-29 3.898762e-32 1.763484e-40 1 1.002452e-01 9.915333e-01 6.192125e-03 1.868999e-04 4.332564e-05 9.546525e-07 4.066396e-08 2.157028e-09 9.465879e-11 4.846141e-11 4.058759e-13 3.267685e-14 8.754145e-16 1.928520e-16 1.373420e-18 1.082830e-19 9.927246e-22 1.394016e-23 1.508549e-25 4.777080e-27 9.963503e-30 8.788027e-38 2 2.530997e-02 1.110298e-01 7.189425e-01 4.724160e-03 2.510915e-04 4.961792e-05 1.187062e-06 1.017255e-07 3.970235e-09 2.068131e-10 9.703401e-11 7.255597e-13 1.565563e-13 2.611280e-15 3.254769e-16 2.694314e-18 1.079695e-19 1.562036e-21 1.545424e-23 1.735256e-25 1.265060e-27 2.215960e-35 3 1.439692e-03 1.313691e-01 9.101842e-02 4.446381e-01 5.912097e-03 3.126913e-04 8.585244e-05 1.538885e-06 1.919091e-07 8.250641e-09 2.393023e-10 1.283784e-10 1.387610e-12 2.250638e-13 4.821068e-15 2.111543e-16 4.457287e-18 2.448800e-19 3.227733e-21 1.284984e-23 8.240296e-26 3.335362e-33 4 3.517101e-05 3.000139e-03 4.131934e-01 8.504087e-02 1.663724e-01 9.561056e-03 2.917045e-04 9.039141e-05 1.788740e-06 1.312414e-07 2.869640e-08 4.101759e-10 1.507867e-10 3.456004e-12 5.959996e-13 5.757530e-15 2.024716e-16 4.111221e-18 7.279991e-20 1.060049e-21 6.121304e-24 4.843531e-31 5 9.934762e-06 1.458875e-04 3.927027e-03 6.740773e-01 8.441291e-02 7.234362e-02 1.094905e-02 1.879103e-04 1.252776e-04 1.454564e-06 1.059818e-07 2.729047e-08 9.494833e-10 8.082013e-11 1.033243e-11 3.411004e-13 6.554134e-15 3.958672e-16 8.201302e-18 3.482706e-20 2.714352e-22 4.461969e-29 6 5.322130e-07 6.381400e-05 4.257593e-04 6.688387e-03 9.174344e-01 4.917686e-02 4.329939e-02 3.819221e-03 1.763480e-04 1.328334e-04 1.940120e-06 9.105133e-08 1.541103e-08 2.609538e-09 8.150731e-11 2.404569e-11 1.889654e-13 3.985572e-15 1.024288e-16 6.839760e-18 1.341414e-20 4.476503e-27 7 5.863612e-10 7.892422e-07 1.012986e-04 1.397365e-03 1.342858e-02 1.002812e+00 2.593641e-02 3.890025e-02 1.670263e-03 1.614886e-04 8.871868e-05 1.756325e-06 1.155298e-07 1.122902e-08 2.203971e-09 1.028948e-10 2.509711e-11 1.531285e-13 2.099939e-15 4.258022e-17 2.374690e-18 1.208869e-24 8 1.171184e-11 2.035729e-09 3.700419e-07 2.397639e-04 4.844063e-03 2.599346e-02 9.949710e-01 1.502418e-02 2.712144e-02 1.478651e-03 1.433184e-04 6.712671e-05 1.454730e-06 9.766789e-08 9.072910e-09 2.328874e-09 6.340026e-11 1.502027e-11 1.916941e-13 1.314758e-15 1.242412e-17 4.691715e-23 9 3.005919e-13 6.399055e-11 5.515662e-09 3.748097e-07 1.153167e-04 1.497122e-02 6.310820e-02 8.863944e-01 1.030851e-02 1.491223e-02 2.002265e-03 8.941933e-05 3.530505e-05 1.470719e-06 9.754840e-08 8.043302e-09 3.375435e-09 3.679377e-11 2.917845e-12 5.484419e-14 1.471719e-15 4.178025e-21 10 1.792807e-15 1.557812e-12 1.844985e-10 1.289502e-08 7.545128e-07 6.340240e-05 2.061627e-02 1.787166e-01 5.419262e-01 1.188051e-02 1.024380e-02 2.347055e-03 7.577232e-05 1.796622e-05 1.114937e-06 7.069534e-08 8.011504e-09 2.756012e-09 4.374664e-11 6.704524e-13 1.075503e-14 1.217530e-19 11 1.923711e-17 4.362099e-15 1.941124e-12 6.147024e-10 1.551641e-08 5.550653e-07 1.380449e-04 9.537258e-03 5.398937e-01 1.863598e-01 1.452105e-02 9.548898e-03 1.837989e-03 5.136835e-05 1.397535e-05 6.835406e-07 5.429499e-08 8.819330e-09 1.851138e-09 1.231506e-11 1.775772e-13 2.576473e-18 12 5.638842e-19 1.455168e-16 9.139939e-15 1.547158e-12 1.037887e-09 2.248539e-08 1.151600e-06 9.872926e-05 5.973776e-03 8.862574e-01 6.786997e-02 1.624026e-02 4.029496e-03 2.179139e-03 2.921118e-05 1.601828e-05 5.561847e-07 3.123249e-08 2.978327e-09 9.604760e-10 3.744283e-12 9.636167e-17 13 3.331427e-21 7.494769e-19 2.963338e-16 6.987305e-15 4.315679e-12 6.087761e-10 3.497465e-08 3.604967e-06 8.639915e-05 5.915526e-03 9.923696e-01 2.749764e-02 2.345296e-02 2.411435e-03 1.600356e-03 2.967960e-05 1.263876e-05 5.535990e-07 1.777340e-08 1.086922e-09 1.497803e-10 4.715717e-15 14 8.334075e-23 3.113616e-20 1.885485e-18 4.096232e-16 1.085250e-14 2.877122e-12 9.801182e-10 2.465783e-08 7.111413e-06 1.332057e-04 5.532024e-03 1.019408e+00 1.546140e-02 2.230611e-02 1.326417e-03 7.657518e-04 3.756285e-05 1.397395e-05 7.084890e-07 8.614586e-09 3.251784e-10 1.560898e-13 15 2.761536e-24 1.577325e-22 1.652226e-19 6.855680e-18 4.640406e-16 1.789313e-14 1.881340e-12 7.696555e-10 3.721167e-08 3.131924e-06 2.768933e-04 5.432195e-03 1.019385e+00 1.220031e-02 2.678270e-02 1.012065e-03 4.234835e-04 2.691482e-05 8.312535e-06 2.735984e-07 4.296980e-09 1.264609e-12 16 1.125679e-25 3.526855e-23 5.295754e-22 1.029758e-19 2.954167e-17 8.415539e-16 3.337555e-14 1.886064e-12 3.708635e-10 8.103999e-08 2.979865e-06 2.717052e-04 5.867388e-03 1.008690e+00 1.398136e-02 2.796359e-02 1.094449e-03 2.222028e-04 1.653854e-05 6.727102e-06 7.321521e-08 3.095212e-11 17 5.314132e-29 1.371847e-25 1.002377e-22 1.431441e-21 2.329882e-19 2.824449e-17 1.264033e-15 1.039492e-13 1.896385e-12 2.117496e-10 8.676212e-08 1.428983e-06 4.224040e-04 7.551663e-03 9.828098e-01 2.577489e-02 2.154489e-02 1.348560e-03 1.271999e-04 1.123527e-05 1.554246e-06 1.061734e-09 18 1.311292e-30 3.344026e-28 1.039987e-25 1.917693e-22 4.842995e-21 2.644625e-19 5.424283e-17 1.016892e-15 2.466777e-13 3.876336e-12 1.412328e-10 6.644843e-08 1.307534e-06 2.267450e-04 1.352321e-02 9.236001e-01 4.123399e-02 2.242045e-02 1.780378e-03 1.137684e-04 4.658387e-06 2.707169e-08 19 3.685034e-32 1.308860e-29 1.727006e-27 1.846830e-25 9.168694e-23 2.025241e-20 2.015727e-19 7.009128e-17 1.110761e-15 2.135974e-13 8.991483e-12 3.294862e-10 2.170110e-08 1.342768e-06 1.738901e-04 1.366663e-02 9.157034e-01 5.085192e-02 1.134612e-02 1.333942e-03 1.601513e-04 7.755075e-07 20 2.627187e-34 3.307561e-31 6.412082e-29 8.638204e-27 5.130913e-25 5.421429e-23 2.735844e-20 4.581117e-19 4.673008e-17 1.996269e-15 1.567873e-13 2.425635e-11 7.144030e-10 2.339911e-08 4.401237e-07 1.583398e-04 8.993801e-03 8.715290e-01 1.032744e-01 9.301698e-03 8.040002e-04 1.264439e-05 21 3.712503e-36 1.248259e-33 7.484327e-31 4.015876e-28 1.275117e-26 7.126689e-25 1.294296e-22 1.126902e-20 1.562753e-18 3.245370e-17 8.822502e-16 3.618329e-13 1.719160e-11 9.436607e-10 3.634534e-08 4.567520e-07 2.489897e-05 1.031566e-02 8.313752e-01 1.337435e-01 9.529909e-03 1.755113e-04 22 1.081603e-37 4.975375e-35 3.859345e-33 1.396911e-30 8.994506e-28 2.233130e-26 1.907603e-24 1.395483e-22 7.223861e-21 2.385762e-18 3.020013e-17 1.437842e-15 1.876938e-13 2.135337e-11 5.432165e-10 7.346489e-08 4.608162e-07 1.776497e-05 2.915009e-03 7.255898e-01 2.520881e-01 4.862597e-03 23 7.053935e-40 3.695478e-37 9.639089e-35 1.470014e-32 2.795455e-30 1.235666e-27 2.213410e-26 7.771768e-24 1.829949e-22 1.539068e-20 1.623359e-18 3.985091e-17 3.521057e-15 1.986472e-13 1.486597e-11 3.334896e-10 7.576041e-08 5.116867e-07 2.834710e-05 1.528768e-03 3.676275e-01 6.239253e-01 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-6.html"},{"title":"生物物理学 第2回","text":"講師： 樋口秀男 生命体（生物）の一般的定義 生物とは、以下の四つの条件を満たす物質システム 自己と外界との境界 エネルギーと物質の代謝 自己複製 恒常性 電子 分子 細胞数 整体の階層性 $10&#94;{28}$ $10&#94;{23}$ $10&#94;{13}$ ヒト 意識・運動・代謝 $10&#94;{24}$ $10&#94;{19}$ $10&#94;{9}$ 心臓 循環・拡散 $10&#94;{15}$ $10&#94;{10}$ $10&#94;{0}$ 心筋細胞 生理的なリズム単位 $10&#94;{5}$ $10&#94;{5}$ 筋節 ゆらぎを制した振動 $10&#94;{0}$ タンパク質 反応のゆらぎ $10&#94;{2}$ アミノ酸 タンパク質の性質の起源 $10&#94;{0}$ 電子 量子力学の支配領域 生命科学を覆う謎 生命誕生の謎（+生命の進化、分化の謎） タンパク質構造の決定と機能との関係の謎 細胞が超多種分子（タンパク質、脂質、小分子、イオン、…）の濃度・種類・機能の制御を行う謎 個体（臓器、器官等）の構造と機能構築の謎 生命誕生の謎 元素誕生は超新星の爆発→重金属ができる。 現宇宙の元素の割合と人体内の元素比が非常に似通っている。 RNAワールド プロテインワールド 原始地球上に存在したと仮定される、RNA からなる自己複製系のこと。また、これがかつて存在し、現生生物へと進化したという仮説。 まずアミノ酸ができ、重合してポリペプチド、さらにタンパク質が作り出され、これが触媒として働いて生命を作り出したという仮説。 生命誕生を示唆した実験事実 ミラーの放電によるアミノ酸合成(1953) $\\mathrm{CH_3,NH_3,H_2,H_2O}$ を含む気体に放電（落雷を模した）をする。 実験２週間後に以下の化合物 （アミノ酸） ができた。 グリシン アラニン グルタル酸 酢酸（脂肪酸） 塩基や糖（リボース）、核酸基、RNA、タンパク質なども化学合成可能。 生命基本物質の化学合成が成功した理由 地球には、エネルギーの高い（海底火山、紫外線、雷、高音）場所と低く安定な場所が共存していたので、分子は 高エネルギー環境で合成され、低エネルギー環境で安定化する ことができた。 $$A\\overset{k_1}{{\\longrightarrow}}B\\overset{k_2}{{\\longrightarrow}}C$$ In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: def simulate ( ax , color , tp , A = 1 , B = 0 , C = 0 , dt = 1e-3 , k1 = 0.07 , k2 = 0.02 , K = 1 ): time = np . arange ( 0 , 100 , dt ) As = np . zeros ( shape = len ( time )) Bs = np . zeros ( shape = len ( time )) Cs = np . zeros ( shape = len ( time )) for i , t in enumerate ( time ): dA = ( - k1 * A ) * dt * K dB = ( k1 * A - k2 * B ) * dt * K dC = ( k2 * B ) * dt * K A += dA ; B += dB ; C += dC As [ i ] = A ; Bs [ i ] = B ; Cs [ i ] = C if t > tp : K = 1e-6 # 温度を下げ、反応速度が1e-6倍になったことをシミュレーション ax . plot ( time , As , color = color ) ax . plot ( time , Bs , color = color ) ax . plot ( time , Cs , color = color ) if tp < 100 : ax . vlines ( x = tp , ymin = 0 , ymax = 1 , linestyle = \":\" ) return ax In [3]: fig , ax = plt . subplots () ax = simulate ( ax = ax , color = \"red\" , tp = 20 ) ax = simulate ( ax = ax , color = \"black\" , tp = 100 ) ax . set_xlabel ( \"Time\" ) ax . set_ylabel ( \"RQ\" ) ax . set_title ( \"Simulation Result\" ) plt . show () 上記のシミュレーション結果から、$A,B$ 分子を得るためには、 途中で（温度が下がるなどの結果）反応速度が下がる必要がある ことがわかる。 生体分子が濃縮され、多次反応による分子合成速度が上がった。 地球は巨大で多様な反応槽であったため、合成確率が上がった。 考えられる生物 地球型炭素生物 地球環境のように水と二酸化炭素（あるいはメタン）が豊富な惑星であるなら、情報記憶（DNA）→伝令（mRNA）→機能（タンパク質、RNA）のような地球型の仕事を分担した炭素生物が生まれる可能性は高い。 炭素生物 vs ケイ素生物 常温常圧で安定な炭素ー炭素結合 とは違い、 ケイ素ーケイ素結合はパイ結合やシグマ結合による二重三重結合を作る傾向がほとんど無く、非常に不安定 である。 炭素ーケイ素結合は安定 なので、炭素生物の中にケイ素が含まれるだろう。したがって、ケイ素生物の存在する確率は非常に低い。 金属生物 常温において金属結合が安定であり、分子としての機能を持つことは困難であるため、生物の中心にはならないだろう。ただし、金属イオンや錯体として、炭素生物やケイ素生物に利用されることはありうる。 講義のまとめ 生命分子や細胞の種類は多く、構造や機能をどのように理解するかが、 生命科学全体の 課題である。 生命は 宇宙の元素を効率よく利用した。 地球上の 高↔︎低エネルギーを行き交い 、多様な環境や濃縮により高確率かつ安定的に生体分子が合成された。 これが生命の誕生の確率を大きくした。 初めにRNAが合成され、それを鋳型としてタンパク質が合成され、原子生命が誕生したと想像される。 系外惑星にも、炭素生命体が存在する可能性がある。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html"},{"title":"ペアワイズアラインメント","text":"ペアワイズアラインメントとは 2本のDNAの塩基配列（タンパク質のアミノ酸配列）を比較する方法の一つ バイオインフォマティクスでは最も基本的な解析手法 なぜDNA配列の比較をするのか DNAの機能を知りたい （∵ DNAの配列が似ていると機能が似ている） DNAのどの部分が重要かを知りたい。 （∵ 「保存されている＝重要」だと考えられる） 生物の進化系統樹を知りたい 新型シーケンサーで読まれたDNAの由来を知りたい DNAの変異や新型シークエンサーの読み取りエラーでは 長さが異なる ことがあるので、 長さの変化を考慮し効率の良い動的計画法 を用いる アラインメントの種類 説明 例 グローバルアラインメント 2本の配列の 全体 をアラインメントする。 Needleman-Wunsch ローカルアラインメント 2本の配列の 似ている部分を検出 し、その部分をアランメントする Smith-Waterman 実装 各種アラインメントを実装していく。なお、全て Affine gap penalty を利用する。 In [1]: from kerasy.Bio.alignment import NeedlemanWunshGotoh , SmithWaterman , BackwardNeedlemanWunshGotoh In [2]: # サンプル配列 seqX = \"GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACGGAGCTGTGGCAGACCTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGCGAGGACTG\" seqY = \"CGCATGCGGAGTGAGGGGAGCAGTTGGGAACAGATGGTCCCGCCGAGGGACCGGTGGGCAGACGGGGCCAGCTGTGGCAGACACTGGCTTCTAACCACCGAACGTTCTTTCCGCTCCGC\" Needleman-Wunsch-Gotoh 自作のモジュール （ kerasy.Bio.alignment.NeedlemanWunshGotoh ） を使ってアラインメントをします。 In [3]: model = NeedlemanWunshGotoh () In [4]: model . align ( seqX , seqY ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== Smith-Waterman 自作のモジュール （ kerasy.Bio.alignment.SmithWaterman ） を使ってアラインメントをします。 In [5]: model = SmithWaterman () In [6]: model . align ( seqX , seqY ) Smith-Waterman Alignment score: 37.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== Aligned positions: X[0,111] Y[7,118] X: GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACG Y: GGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GGGCAGACG X: G----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGC Y: GGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCTCCGC =============================================================== 制約付きアラインメント $x_i$ と $y_j$ がアラインされるという制約下で最大のアラインメントスコアを求める。 全てのパターンを列挙すると $\\mathcal{O}(n&#94;2m&#94;2)$ の時間がかかるが、 後ろ向きアラインメント と組み合わせることで全てのパターンを $\\mathcal{O}(nm)$ で計算可能。 前向き：xiとyjがアラインされる時の、iまでとjまでの配列の最大アラインメントスコアを保持。 後ろ向き：xiとyjがアラインされる時の、i+1以降とj+1以降の配列の最大アラインメントスコアを保持。 Needleman-Wunsch-Gotohの逆向きアラインメントは （ kerasy.Bio.alignment.BackwardNeedlemanWunshGotoh ） に定義してあります。 In [7]: model_forward = NeedlemanWunshGotoh () model_backward = BackwardNeedlemanWunshGotoh () In [8]: model_forward . align ( seqX , seqY , memorize = True ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== In [9]: model_backward . align ( seqX , seqY , memorize = True ) Backward Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGGAACA-GATGGTCC-CGCCGAGGGACCGGTGG- X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTTC-TAACCACCGAACGTTCTTTCCG-CT X: CCGCGAGGACT Y: CCGC------- =============================================================== In [10]: k = 3 n = len ( seqX ) + 1 m = len ( seqY ) + 1 In [11]: M = model_forward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] bM = model_backward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] In [12]: A = M + bM In [13]: # 上の配列を見れば、seqX[0] と seqY[7] がアラインされている時に最大スコア14を取ることがわかるので、それを確かめる。 print ( A [ 0 , 7 ]) 14.0 In [14]: # 可視化のために pandas を使用。 import pandas as pd pd . set_option ( 'display.max_rows' , m ) pd . set_option ( 'display.max_columns' , n ) In [15]: df = pd . DataFrame ( A ) In [16]: df Out[16]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 0 12.0 10.0 8.0 8.0 8.0 10.0 8.0 14.0 7.0 2.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -17.0 -20.0 -25.0 -26.0 -31.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -51.0 -54.0 -55.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -129.0 -132.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -150.0 -156.0 -156.0 -159.0 -160.0 -163.0 -164.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -181.0 -184.0 -187.0 -190.0 -193.0 -194.0 -197.0 -198.0 -201.0 -200.0 -203.0 -206.0 -209.0 -210.0 -211.0 -214.0 -217.0 -218.0 -221.0 -224.0 -225.0 -228.0 -229.0 -230.0 -235.0 -238.0 -241.0 -242.0 -243.0 -246.0 1 5.0 12.0 8.0 6.0 6.0 8.0 8.0 8.0 14.0 5.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -14.0 -17.0 -22.0 -25.0 -26.0 -33.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -53.0 -54.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -131.0 -132.0 -135.0 -140.0 -141.0 -144.0 -147.0 -148.0 -150.0 -157.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -171.0 -174.0 -179.0 -180.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -200.0 -203.0 -206.0 -211.0 -210.0 -211.0 -216.0 -217.0 -220.0 -223.0 -224.0 -227.0 -228.0 -229.0 -232.0 -237.0 -240.0 -243.0 -242.0 -243.0 2 2.0 3.0 10.0 8.0 6.0 6.0 6.0 6.0 6.0 14.0 3.0 0.0 -3.0 -4.0 -9.0 -12.0 -13.0 -16.0 -17.0 -24.0 -27.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -47.0 -48.0 -53.0 -54.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -125.0 -126.0 -131.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -150.0 -150.0 -157.0 -156.0 -159.0 -158.0 -163.0 -166.0 -169.0 -172.0 -171.0 -176.0 -177.0 -180.0 -183.0 -184.0 -187.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -200.0 -203.0 -204.0 -209.0 -210.0 -213.0 -214.0 -217.0 -220.0 -221.0 -224.0 -225.0 -228.0 -231.0 -234.0 -237.0 -238.0 -241.0 -242.0 3 -1.0 2.0 3.0 8.0 6.0 6.0 4.0 6.0 6.0 4.0 14.0 1.0 0.0 -5.0 -4.0 -9.0 -12.0 -13.0 -18.0 -17.0 -24.0 -29.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -49.0 -48.0 -55.0 -56.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -127.0 -126.0 -133.0 -136.0 -137.0 -142.0 -143.0 -146.0 -150.0 -151.0 -150.0 -157.0 -156.0 -159.0 -160.0 -165.0 -166.0 -169.0 -172.0 -171.0 -176.0 -179.0 -182.0 -185.0 -186.0 -187.0 -192.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -209.0 -212.0 -213.0 -216.0 -217.0 -220.0 -223.0 -224.0 -225.0 -230.0 -233.0 -236.0 -239.0 -238.0 -241.0 4 -4.0 -3.0 0.0 1.0 8.0 4.0 4.0 2.0 4.0 4.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -11.0 -14.0 -15.0 -20.0 -19.0 -22.0 -27.0 -26.0 -29.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -60.0 -63.0 -64.0 -67.0 -66.0 -69.0 -68.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -87.0 -92.0 -91.0 -94.0 -95.0 -100.0 -103.0 -100.0 -105.0 -106.0 -109.0 -112.0 -113.0 -116.0 -119.0 -118.0 -121.0 -124.0 -127.0 -128.0 -131.0 -136.0 -137.0 -142.0 -145.0 -148.0 -148.0 -153.0 -150.0 -155.0 -156.0 -159.0 -160.0 -165.0 -168.0 -169.0 -170.0 -171.0 -176.0 -177.0 -182.0 -185.0 -186.0 -189.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -220.0 -221.0 -224.0 -227.0 -228.0 -233.0 -234.0 -237.0 -238.0 5 -7.0 -4.0 -3.0 -2.0 -1.0 8.0 2.0 4.0 4.0 2.0 4.0 2.0 14.0 1.0 0.0 -3.0 -6.0 -9.0 -14.0 -15.0 -20.0 -21.0 -20.0 -25.0 -26.0 -29.0 -32.0 -33.0 -36.0 -39.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -59.0 -60.0 -61.0 -64.0 -65.0 -64.0 -67.0 -66.0 -73.0 -74.0 -77.0 -76.0 -81.0 -78.0 -83.0 -84.0 -85.0 -90.0 -91.0 -92.0 -95.0 -98.0 -101.0 -98.0 -103.0 -106.0 -107.0 -110.0 -111.0 -114.0 -117.0 -118.0 -121.0 -122.0 -127.0 -130.0 -131.0 -136.0 -137.0 -140.0 -144.0 -147.0 -146.0 -151.0 -150.0 -153.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -173.0 -176.0 -179.0 -182.0 -183.0 -184.0 -187.0 -190.0 -191.0 -190.0 -195.0 -198.0 -201.0 -200.0 -203.0 -206.0 -207.0 -210.0 -213.0 -214.0 -217.0 -218.0 -219.0 -224.0 -227.0 -230.0 -233.0 -232.0 -235.0 6 -10.0 -9.0 -6.0 -3.0 -4.0 -1.0 6.0 2.0 2.0 4.0 2.0 2.0 2.0 14.0 1.0 -2.0 -5.0 -8.0 -9.0 -14.0 -17.0 -18.0 -23.0 -20.0 -23.0 -28.0 -31.0 -34.0 -33.0 -34.0 -37.0 -38.0 -43.0 -44.0 -49.0 -52.0 -55.0 -56.0 -57.0 -58.0 -61.0 -64.0 -66.0 -62.0 -65.0 -66.0 -71.0 -74.0 -77.0 -76.0 -79.0 -76.0 -81.0 -84.0 -85.0 -88.0 -91.0 -94.0 -97.0 -96.0 -99.0 -98.0 -101.0 -104.0 -107.0 -110.0 -113.0 -114.0 -115.0 -116.0 -121.0 -124.0 -127.0 -130.0 -133.0 -136.0 -139.0 -141.0 -142.0 -147.0 -146.0 -149.0 -148.0 -153.0 -156.0 -159.0 -162.0 -163.0 -166.0 -167.0 -170.0 -173.0 -174.0 -177.0 -180.0 -183.0 -182.0 -187.0 -188.0 -191.0 -190.0 -193.0 -196.0 -199.0 -200.0 -203.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -218.0 -221.0 -224.0 -227.0 -228.0 -231.0 -232.0 7 -13.0 -10.0 -9.0 -8.0 -5.0 -2.0 -1.0 6.0 2.0 0.0 4.0 0.0 2.0 1.0 14.0 3.0 0.0 -3.0 -8.0 -9.0 -14.0 -17.0 -18.0 -22.0 -18.0 -21.0 -26.0 -29.0 -32.0 -33.0 -34.0 -37.0 -38.0 -43.0 -46.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -59.0 -64.0 -64.0 -60.0 -63.0 -66.0 -69.0 -72.0 -75.0 -76.0 -77.0 -74.0 -79.0 -82.0 -83.0 -86.0 -89.0 -94.0 -95.0 -96.0 -97.0 -98.0 -99.0 -102.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -121.0 -124.0 -125.0 -130.0 -131.0 -134.0 -139.0 -139.0 -142.0 -145.0 -146.0 -147.0 -150.0 -153.0 -154.0 -157.0 -160.0 -163.0 -164.0 -167.0 -170.0 -173.0 -176.0 -177.0 -180.0 -181.0 -184.0 -185.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -204.0 -207.0 -208.0 -211.0 -212.0 -213.0 -218.0 -221.0 -224.0 -225.0 -226.0 -229.0 8 -16.0 -13.0 -12.0 -11.0 -10.0 -5.0 -4.0 -1.0 6.0 0.0 2.0 2.0 2.0 0.0 3.0 14.0 3.0 0.0 -5.0 -6.0 -11.0 -14.0 -15.0 -18.0 -21.0 -16.0 -21.0 -26.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -52.0 -55.0 -56.0 -59.0 -64.0 -62.0 -60.0 -61.0 -66.0 -69.0 -72.0 -75.0 -74.0 -75.0 -74.0 -79.0 -80.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -95.0 -96.0 -99.0 -102.0 -105.0 -108.0 -109.0 -112.0 -113.0 -118.0 -121.0 -122.0 -127.0 -128.0 -131.0 -135.0 -138.0 -137.0 -142.0 -143.0 -144.0 -147.0 -150.0 -151.0 -154.0 -157.0 -160.0 -161.0 -164.0 -167.0 -170.0 -173.0 -174.0 -177.0 -178.0 -179.0 -182.0 -183.0 -186.0 -189.0 -190.0 -191.0 -194.0 -197.0 -198.0 -201.0 -204.0 -205.0 -208.0 -209.0 -210.0 -215.0 -218.0 -221.0 -222.0 -223.0 -226.0 9 -19.0 -16.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 4.0 2.0 0.0 2.0 0.0 2.0 3.0 14.0 3.0 -2.0 -3.0 -8.0 -11.0 -12.0 -17.0 -16.0 -19.0 -16.0 -21.0 -26.0 -27.0 -28.0 -31.0 -32.0 -37.0 -40.0 -39.0 -44.0 -47.0 -48.0 -49.0 -52.0 -53.0 -58.0 -57.0 -62.0 -62.0 -58.0 -61.0 -66.0 -69.0 -72.0 -73.0 -72.0 -75.0 -74.0 -77.0 -80.0 -83.0 -88.0 -89.0 -90.0 -95.0 -94.0 -93.0 -96.0 -99.0 -102.0 -105.0 -106.0 -109.0 -110.0 -115.0 -118.0 -119.0 -124.0 -125.0 -128.0 -132.0 -133.0 -136.0 -137.0 -140.0 -141.0 -144.0 -147.0 -148.0 -151.0 -154.0 -157.0 -158.0 -161.0 -164.0 -167.0 -170.0 -171.0 -174.0 -175.0 -178.0 -177.0 -180.0 -183.0 -186.0 -187.0 -188.0 -191.0 -194.0 -195.0 -198.0 -201.0 -202.0 -205.0 -206.0 -207.0 -212.0 -215.0 -218.0 -219.0 -220.0 -223.0 10 -22.0 -19.0 -18.0 -17.0 -16.0 -11.0 -10.0 -7.0 -4.0 -3.0 4.0 0.0 0.0 0.0 0.0 2.0 3.0 14.0 1.0 0.0 -5.0 -8.0 -9.0 -14.0 -15.0 -14.0 -19.0 -16.0 -21.0 -24.0 -25.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -44.0 -45.0 -46.0 -49.0 -50.0 -55.0 -58.0 -55.0 -62.0 -60.0 -58.0 -61.0 -66.0 -69.0 -70.0 -71.0 -72.0 -77.0 -72.0 -77.0 -80.0 -83.0 -88.0 -87.0 -90.0 -93.0 -92.0 -93.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -112.0 -115.0 -116.0 -121.0 -122.0 -125.0 -129.0 -130.0 -131.0 -136.0 -135.0 -138.0 -141.0 -144.0 -145.0 -148.0 -151.0 -154.0 -155.0 -158.0 -161.0 -162.0 -167.0 -168.0 -169.0 -172.0 -175.0 -176.0 -175.0 -180.0 -183.0 -186.0 -185.0 -188.0 -191.0 -192.0 -195.0 -198.0 -199.0 -202.0 -203.0 -204.0 -209.0 -212.0 -213.0 -218.0 -217.0 -220.0 11 -22.0 -24.0 -21.0 -18.0 -19.0 -16.0 -12.0 -12.0 -9.0 -4.0 -5.0 2.0 -2.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -13.0 -14.0 -19.0 -16.0 -19.0 -22.0 -23.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -42.0 -43.0 -46.0 -49.0 -52.0 -55.0 -58.0 -55.0 -60.0 -60.0 -58.0 -61.0 -66.0 -67.0 -68.0 -71.0 -74.0 -75.0 -72.0 -79.0 -82.0 -81.0 -86.0 -87.0 -88.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -120.0 -124.0 -127.0 -127.0 -128.0 -131.0 -134.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -151.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -168.0 -167.0 -172.0 -173.0 -176.0 -175.0 -178.0 -181.0 -184.0 -185.0 -188.0 -189.0 -192.0 -195.0 -196.0 -199.0 -200.0 -203.0 -206.0 -209.0 -212.0 -211.0 -216.0 -217.0 12 -28.0 -22.0 -24.0 -23.0 -20.0 -17.0 -16.0 -12.0 -10.0 -9.0 -4.0 -4.0 2.0 -4.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -11.0 -12.0 -17.0 -16.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -35.0 -36.0 -37.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -55.0 -58.0 -58.0 -56.0 -61.0 -64.0 -65.0 -66.0 -71.0 -72.0 -73.0 -70.0 -79.0 -80.0 -81.0 -84.0 -87.0 -86.0 -89.0 -90.0 -91.0 -94.0 -97.0 -100.0 -101.0 -106.0 -109.0 -110.0 -115.0 -116.0 -118.0 -124.0 -126.0 -127.0 -126.0 -131.0 -132.0 -135.0 -138.0 -139.0 -140.0 -145.0 -148.0 -149.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -166.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -179.0 -182.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -198.0 -203.0 -206.0 -209.0 -212.0 -209.0 -214.0 13 -29.0 -30.0 -22.0 -26.0 -25.0 -22.0 -17.0 -17.0 -12.0 -12.0 -10.0 -6.0 -4.0 0.0 -4.0 -2.0 -4.0 -3.0 -2.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -9.0 -12.0 -11.0 -12.0 -15.0 -14.0 -19.0 -22.0 -25.0 -28.0 -31.0 -34.0 -35.0 -34.0 -35.0 -38.0 -43.0 -44.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -60.0 -54.0 -59.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -70.0 -77.0 -78.0 -81.0 -82.0 -85.0 -88.0 -89.0 -92.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -124.0 -127.0 -124.0 -129.0 -130.0 -135.0 -138.0 -141.0 -140.0 -145.0 -146.0 -147.0 -152.0 -155.0 -158.0 -157.0 -158.0 -163.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -178.0 -179.0 -182.0 -181.0 -186.0 -189.0 -190.0 -191.0 -192.0 -197.0 -198.0 -203.0 -204.0 -207.0 -210.0 -209.0 14 -33.0 -30.0 -29.0 -22.0 -27.0 -25.0 -21.0 -18.0 -15.0 -10.0 -12.0 -8.0 -8.0 -2.0 -1.0 -5.0 -3.0 -6.0 -2.0 -2.0 4.0 14.0 1.0 -2.0 -3.0 -6.0 -7.0 -10.0 -9.0 -10.0 -13.0 -14.0 -19.0 -20.0 -25.0 -26.0 -31.0 -32.0 -33.0 -34.0 -37.0 -40.0 -43.0 -44.0 -49.0 -48.0 -51.0 -52.0 -53.0 -56.0 -58.0 -54.0 -59.0 -62.0 -65.0 -66.0 -69.0 -72.0 -73.0 -70.0 -75.0 -76.0 -79.0 -82.0 -83.0 -86.0 -89.0 -90.0 -91.0 -92.0 -97.0 -100.0 -103.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -122.0 -125.0 -124.0 -129.0 -132.0 -135.0 -136.0 -139.0 -142.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -159.0 -158.0 -163.0 -164.0 -167.0 -166.0 -169.0 -170.0 -175.0 -176.0 -179.0 -180.0 -183.0 -186.0 -187.0 -190.0 -191.0 -194.0 -197.0 -200.0 -203.0 -204.0 -207.0 -208.0 15 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -7.0 -2.0 -1.0 6.0 14.0 3.0 0.0 -1.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -14.0 -19.0 -22.0 -23.0 -24.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -42.0 -47.0 -48.0 -49.0 -50.0 -51.0 -56.0 -57.0 -52.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -73.0 -70.0 -73.0 -76.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -107.0 -110.0 -115.0 -117.0 -118.0 -121.0 -122.0 -123.0 -126.0 -129.0 -130.0 -133.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -152.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -165.0 -168.0 -169.0 -168.0 -173.0 -176.0 -177.0 -178.0 -181.0 -184.0 -187.0 -188.0 -189.0 -194.0 -197.0 -200.0 -203.0 -202.0 -205.0 16 -37.0 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -5.0 -2.0 1.0 8.0 14.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -13.0 -14.0 -17.0 -22.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -37.0 -40.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -49.0 -54.0 -55.0 -52.0 -57.0 -62.0 -63.0 -66.0 -67.0 -70.0 -71.0 -70.0 -71.0 -74.0 -79.0 -80.0 -83.0 -84.0 -85.0 -88.0 -91.0 -94.0 -95.0 -100.0 -101.0 -106.0 -109.0 -112.0 -114.0 -117.0 -118.0 -119.0 -120.0 -123.0 -124.0 -129.0 -132.0 -133.0 -132.0 -135.0 -140.0 -141.0 -146.0 -149.0 -150.0 -153.0 -154.0 -157.0 -158.0 -161.0 -162.0 -165.0 -168.0 -167.0 -168.0 -171.0 -174.0 -175.0 -176.0 -179.0 -184.0 -185.0 -188.0 -191.0 -192.0 -197.0 -200.0 -201.0 -202.0 17 -38.0 -37.0 -32.0 -33.0 -30.0 -29.0 -22.0 -25.0 -23.0 -19.0 -19.0 -11.0 -11.0 -8.0 -8.0 -9.0 -2.0 -3.0 -5.0 -3.0 -5.0 0.0 1.0 10.0 14.0 5.0 4.0 -1.0 -2.0 -3.0 -4.0 -7.0 -10.0 -13.0 -12.0 -17.0 -22.0 -21.0 -24.0 -25.0 -28.0 -31.0 -34.0 -35.0 -38.0 -37.0 -40.0 -43.0 -46.0 -47.0 -48.0 -47.0 -52.0 -53.0 -50.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -68.0 -69.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -97.0 -98.0 -103.0 -106.0 -108.0 -111.0 -114.0 -115.0 -116.0 -117.0 -120.0 -121.0 -126.0 -129.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -146.0 -147.0 -150.0 -151.0 -154.0 -155.0 -158.0 -159.0 -162.0 -163.0 -166.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -181.0 -182.0 -185.0 -188.0 -189.0 -194.0 -195.0 -198.0 -199.0 18 -39.0 -38.0 -37.0 -32.0 -35.0 -30.0 -27.0 -22.0 -23.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -5.0 -3.0 -3.0 2.0 3.0 10.0 14.0 7.0 6.0 1.0 0.0 -1.0 -4.0 -5.0 -10.0 -13.0 -12.0 -15.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -34.0 -33.0 -36.0 -35.0 -38.0 -41.0 -46.0 -45.0 -46.0 -45.0 -50.0 -51.0 -50.0 -55.0 -58.0 -61.0 -62.0 -63.0 -68.0 -67.0 -66.0 -67.0 -70.0 -75.0 -78.0 -79.0 -82.0 -83.0 -88.0 -91.0 -92.0 -96.0 -98.0 -101.0 -106.0 -106.0 -109.0 -112.0 -113.0 -114.0 -117.0 -118.0 -121.0 -124.0 -127.0 -130.0 -131.0 -134.0 -137.0 -140.0 -143.0 -144.0 -147.0 -148.0 -151.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -168.0 -171.0 -174.0 -175.0 -178.0 -179.0 -180.0 -185.0 -188.0 -189.0 -192.0 -193.0 -196.0 19 -40.0 -39.0 -38.0 -37.0 -32.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -7.0 -2.0 -1.0 2.0 5.0 12.0 14.0 7.0 6.0 3.0 2.0 -1.0 -2.0 -7.0 -10.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -33.0 -34.0 -35.0 -38.0 -41.0 -44.0 -43.0 -44.0 -45.0 -50.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -65.0 -66.0 -65.0 -66.0 -67.0 -70.0 -75.0 -76.0 -79.0 -80.0 -85.0 -88.0 -89.0 -94.0 -94.0 -98.0 -103.0 -105.0 -104.0 -109.0 -110.0 -111.0 -114.0 -117.0 -116.0 -121.0 -124.0 -127.0 -128.0 -131.0 -134.0 -137.0 -140.0 -141.0 -142.0 -145.0 -148.0 -149.0 -150.0 -153.0 -156.0 -157.0 -158.0 -161.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -177.0 -182.0 -185.0 -188.0 -187.0 -190.0 -193.0 20 -45.0 -40.0 -39.0 -40.0 -39.0 -30.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -7.0 0.0 -1.0 4.0 7.0 12.0 14.0 7.0 8.0 5.0 2.0 1.0 -4.0 -7.0 -8.0 -11.0 -12.0 -13.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -32.0 -31.0 -34.0 -35.0 -38.0 -39.0 -42.0 -41.0 -44.0 -45.0 -48.0 -49.0 -50.0 -55.0 -58.0 -57.0 -60.0 -63.0 -64.0 -65.0 -66.0 -67.0 -70.0 -73.0 -76.0 -77.0 -82.0 -85.0 -86.0 -91.0 -92.0 -94.0 -100.0 -102.0 -103.0 -104.0 -107.0 -108.0 -111.0 -114.0 -115.0 -116.0 -121.0 -124.0 -125.0 -128.0 -131.0 -134.0 -135.0 -138.0 -141.0 -140.0 -143.0 -146.0 -147.0 -150.0 -153.0 -154.0 -155.0 -158.0 -159.0 -162.0 -165.0 -168.0 -169.0 -170.0 -173.0 -174.0 -179.0 -182.0 -185.0 -188.0 -185.0 -190.0 21 -44.0 -45.0 -40.0 -39.0 -40.0 -37.0 -30.0 -33.0 -30.0 -27.0 -22.0 -25.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -5.0 0.0 1.0 6.0 7.0 12.0 14.0 9.0 10.0 5.0 2.0 -1.0 -4.0 -7.0 -8.0 -11.0 -10.0 -11.0 -14.0 -19.0 -20.0 -23.0 -28.0 -29.0 -30.0 -31.0 -34.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -48.0 -51.0 -50.0 -55.0 -56.0 -59.0 -58.0 -61.0 -64.0 -65.0 -68.0 -67.0 -68.0 -73.0 -76.0 -77.0 -82.0 -85.0 -88.0 -91.0 -94.0 -94.0 -99.0 -100.0 -103.0 -102.0 -105.0 -106.0 -111.0 -114.0 -117.0 -116.0 -119.0 -122.0 -123.0 -128.0 -131.0 -134.0 -133.0 -136.0 -139.0 -138.0 -141.0 -146.0 -147.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -166.0 -167.0 -168.0 -173.0 -174.0 -179.0 -180.0 -183.0 -186.0 -185.0 22 -47.0 -44.0 -45.0 -42.0 -39.0 -40.0 -35.0 -30.0 -33.0 -28.0 -29.0 -20.0 -25.0 -20.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 3.0 8.0 9.0 14.0 14.0 9.0 8.0 3.0 0.0 -1.0 -6.0 -9.0 -8.0 -11.0 -10.0 -13.0 -16.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -55.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -67.0 -70.0 -75.0 -78.0 -77.0 -84.0 -85.0 -89.0 -93.0 -95.0 -94.0 -99.0 -100.0 -103.0 -102.0 -107.0 -106.0 -113.0 -116.0 -117.0 -116.0 -119.0 -124.0 -123.0 -130.0 -133.0 -134.0 -135.0 -136.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -168.0 -167.0 -170.0 -175.0 -174.0 -181.0 -180.0 -183.0 -186.0 23 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 5.0 10.0 11.0 14.0 14.0 7.0 8.0 1.0 -2.0 -1.0 -6.0 -9.0 -8.0 -11.0 -12.0 -13.0 -18.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -44.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -70.0 -77.0 -80.0 -77.0 -86.0 -85.0 -89.0 -94.0 -95.0 -94.0 -99.0 -100.0 -103.0 -104.0 -109.0 -106.0 -113.0 -116.0 -119.0 -116.0 -121.0 -126.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -148.0 -151.0 -150.0 -151.0 -154.0 -155.0 -160.0 -159.0 -162.0 -165.0 -168.0 -167.0 -172.0 -177.0 -176.0 -183.0 -180.0 -183.0 24 -51.0 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -4.0 -1.0 2.0 5.0 10.0 11.0 14.0 14.0 5.0 8.0 -1.0 -4.0 -3.0 -6.0 -9.0 -8.0 -13.0 -14.0 -13.0 -20.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -39.0 -36.0 -37.0 -44.0 -41.0 -46.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -63.0 -64.0 -67.0 -68.0 -71.0 -72.0 -79.0 -82.0 -79.0 -86.0 -87.0 -89.0 -92.0 -93.0 -94.0 -97.0 -98.0 -103.0 -106.0 -109.0 -108.0 -113.0 -116.0 -117.0 -118.0 -123.0 -124.0 -125.0 -130.0 -131.0 -132.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -150.0 -153.0 -154.0 -157.0 -160.0 -159.0 -164.0 -165.0 -168.0 -169.0 -174.0 -177.0 -178.0 -181.0 -180.0 25 -54.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -41.0 -38.0 -33.0 -32.0 -31.0 -30.0 -25.0 -22.0 -25.0 -22.0 -21.0 -16.0 -13.0 -14.0 -8.0 -10.0 -9.0 -4.0 -4.0 -1.0 2.0 7.0 10.0 9.0 14.0 12.0 7.0 6.0 -1.0 -4.0 -3.0 -6.0 -7.0 -10.0 -13.0 -16.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -64.0 -65.0 -70.0 -73.0 -74.0 -79.0 -82.0 -81.0 -88.0 -89.0 -89.0 -94.0 -93.0 -94.0 -97.0 -100.0 -105.0 -108.0 -111.0 -108.0 -115.0 -116.0 -119.0 -120.0 -123.0 -124.0 -125.0 -132.0 -131.0 -134.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -170.0 -171.0 -176.0 -177.0 -178.0 -181.0 26 -57.0 -54.0 -52.0 -52.0 -49.0 -46.0 -45.0 -42.0 -39.0 -38.0 -33.0 -34.0 -31.0 -30.0 -25.0 -22.0 -23.0 -22.0 -23.0 -16.0 -15.0 -15.0 -8.0 -12.0 -10.0 -4.0 -2.0 1.0 2.0 5.0 8.0 7.0 14.0 10.0 5.0 6.0 -1.0 -4.0 -3.0 -6.0 -9.0 -10.0 -15.0 -18.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -32.0 -29.0 -34.0 -39.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -66.0 -65.0 -72.0 -75.0 -74.0 -81.0 -82.0 -81.0 -89.0 -90.0 -89.0 -94.0 -93.0 -94.0 -99.0 -102.0 -105.0 -108.0 -111.0 -110.0 -115.0 -118.0 -121.0 -122.0 -125.0 -124.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -167.0 -170.0 -173.0 -176.0 -175.0 -178.0 27 -60.0 -59.0 -56.0 -52.0 -54.0 -51.0 -48.0 -46.0 -44.0 -39.0 -39.0 -35.0 -35.0 -31.0 -31.0 -26.0 -24.0 -25.0 -22.0 -23.0 -18.0 -15.0 -15.0 -8.0 -12.0 -9.0 -6.0 -4.0 1.0 2.0 3.0 8.0 6.0 14.0 8.0 3.0 6.0 -1.0 -2.0 -3.0 -6.0 -9.0 -12.0 -13.0 -16.0 -13.0 -20.0 -21.0 -20.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -46.0 -43.0 -48.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -61.0 -66.0 -67.0 -72.0 -75.0 -76.0 -81.0 -83.0 -83.0 -87.0 -92.0 -89.0 -94.0 -93.0 -96.0 -101.0 -104.0 -107.0 -108.0 -109.0 -110.0 -115.0 -118.0 -119.0 -122.0 -125.0 -126.0 -125.0 -132.0 -133.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -163.0 -164.0 -169.0 -172.0 -175.0 -176.0 -175.0 28 -62.0 -62.0 -59.0 -57.0 -52.0 -54.0 -50.0 -49.0 -44.0 -43.0 -41.0 -37.0 -36.0 -33.0 -32.0 -31.0 -26.0 -26.0 -26.0 -24.0 -24.0 -19.0 -17.0 -13.0 -8.0 -10.0 -7.0 -7.0 -4.0 -1.0 0.0 2.0 6.0 6.0 14.0 8.0 1.0 6.0 -1.0 -2.0 -5.0 -8.0 -11.0 -14.0 -13.0 -16.0 -13.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -38.0 -37.0 -42.0 -43.0 -48.0 -43.0 -48.0 -49.0 -50.0 -57.0 -58.0 -59.0 -62.0 -63.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -83.0 -84.0 -89.0 -92.0 -89.0 -94.0 -95.0 -96.0 -103.0 -106.0 -107.0 -108.0 -109.0 -112.0 -115.0 -120.0 -121.0 -122.0 -127.0 -126.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -158.0 -159.0 -162.0 -165.0 -164.0 -171.0 -172.0 -175.0 -176.0 29 -65.0 -62.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -42.0 -43.0 -42.0 -37.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -25.0 -22.0 -19.0 -18.0 -13.0 -8.0 -8.0 -5.0 -6.0 -5.0 -2.0 -1.0 2.0 5.0 6.0 14.0 8.0 1.0 6.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -11.0 -14.0 -13.0 -18.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -35.0 -40.0 -37.0 -40.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -56.0 -59.0 -60.0 -65.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -81.0 -84.0 -89.0 -90.0 -89.0 -94.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -111.0 -114.0 -117.0 -120.0 -121.0 -124.0 -125.0 -128.0 -127.0 -130.0 -133.0 -136.0 -135.0 -136.0 -141.0 -140.0 -143.0 -148.0 -151.0 -152.0 -155.0 -156.0 -157.0 -162.0 -165.0 -166.0 -169.0 -170.0 -173.0 30 -64.0 -65.0 -64.0 -61.0 -60.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -18.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 2.0 6.0 -1.0 -2.0 -5.0 -10.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -40.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -59.0 -62.0 -67.0 -68.0 -69.0 -74.0 -75.0 -80.0 -84.0 -81.0 -84.0 -89.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -113.0 -116.0 -117.0 -120.0 -123.0 -124.0 -125.0 -128.0 -127.0 -130.0 -135.0 -138.0 -135.0 -136.0 -143.0 -140.0 -145.0 -148.0 -151.0 -154.0 -155.0 -156.0 -159.0 -164.0 -167.0 -166.0 -169.0 -170.0 31 -67.0 -64.0 -65.0 -64.0 -61.0 -58.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -17.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 4.0 4.0 -2.0 -4.0 -7.0 -11.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -27.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -38.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -61.0 -62.0 -67.0 -68.0 -71.0 -75.0 -76.0 -81.0 -82.0 -81.0 -84.0 -87.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -102.0 -107.0 -106.0 -113.0 -114.0 -115.0 -120.0 -121.0 -122.0 -123.0 -128.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -141.0 -140.0 -145.0 -146.0 -149.0 -152.0 -155.0 -158.0 -159.0 -164.0 -167.0 -166.0 -169.0 32 -68.0 -67.0 -62.0 -65.0 -64.0 -61.0 -56.0 -55.0 -52.0 -51.0 -50.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -25.0 -22.0 -19.0 -15.0 -10.0 -8.0 -8.0 -5.0 -6.0 -3.0 -4.0 -1.0 2.0 3.0 10.0 14.0 9.0 6.0 2.0 0.0 -3.0 -6.0 -9.0 -10.0 -11.0 -10.0 -16.0 -13.0 -19.0 -22.0 -21.0 -26.0 -24.0 -28.0 -31.0 -29.0 -32.0 -36.0 -39.0 -36.0 -43.0 -44.0 -45.0 -45.0 -46.0 -47.0 -52.0 -56.0 -57.0 -62.0 -64.0 -68.0 -70.0 -73.0 -74.0 -76.0 -80.0 -81.0 -80.0 -84.0 -86.0 -91.0 -93.0 -97.0 -96.0 -98.0 -101.0 -102.0 -108.0 -106.0 -114.0 -113.0 -114.0 -119.0 -120.0 -121.0 -122.0 -127.0 -129.0 -131.0 -134.0 -135.0 -137.0 -136.0 -142.0 -142.0 -145.0 -146.0 -148.0 -153.0 -154.0 -159.0 -159.0 -163.0 -166.0 -165.0 33 -71.0 -68.0 -65.0 -62.0 -65.0 -62.0 -59.0 -56.0 -53.0 -50.0 -51.0 -48.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -24.0 -21.0 -18.0 -13.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -4.0 -1.0 2.0 5.0 12.0 14.0 7.0 4.0 1.0 -2.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -15.0 -15.0 -19.0 -22.0 -19.0 -24.0 -24.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -47.0 -53.0 -56.0 -59.0 -62.0 -65.0 -68.0 -71.0 -73.0 -74.0 -75.0 -78.0 -79.0 -80.0 -85.0 -88.0 -91.0 -94.0 -95.0 -98.0 -98.0 -102.0 -104.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -120.0 -121.0 -120.0 -125.0 -130.0 -131.0 -132.0 -135.0 -136.0 -138.0 -142.0 -142.0 -146.0 -146.0 -150.0 -153.0 -154.0 -159.0 -159.0 -163.0 -164.0 34 -72.0 -71.0 -68.0 -65.0 -62.0 -63.0 -60.0 -59.0 -56.0 -51.0 -50.0 -49.0 -48.0 -43.0 -42.0 -43.0 -40.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -25.0 -22.0 -19.0 -16.0 -11.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -2.0 1.0 4.0 7.0 14.0 12.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -15.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -49.0 -55.0 -58.0 -61.0 -64.0 -67.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -82.0 -87.0 -90.0 -91.0 -94.0 -97.0 -98.0 -100.0 -104.0 -104.0 -106.0 -105.0 -114.0 -113.0 -114.0 -119.0 -122.0 -121.0 -120.0 -127.0 -130.0 -131.0 -132.0 -135.0 -138.0 -140.0 -142.0 -142.0 -146.0 -148.0 -152.0 -155.0 -154.0 -161.0 -159.0 -163.0 35 -73.0 -74.0 -69.0 -70.0 -66.0 -64.0 -61.0 -62.0 -59.0 -56.0 -53.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -42.0 -41.0 -38.0 -33.0 -34.0 -31.0 -28.0 -28.0 -25.0 -22.0 -19.0 -16.0 -13.0 -8.0 -10.0 -10.0 -7.0 -6.0 -5.0 -2.0 1.0 6.0 9.0 14.0 10.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -47.0 -48.0 -49.0 -57.0 -60.0 -63.0 -65.0 -69.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -84.0 -87.0 -92.0 -91.0 -96.0 -97.0 -98.0 -102.0 -106.0 -106.0 -106.0 -105.0 -114.0 -113.0 -114.0 -121.0 -122.0 -123.0 -120.0 -127.0 -130.0 -133.0 -132.0 -137.0 -138.0 -140.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -161.0 -159.0 36 -78.0 -73.0 -74.0 -71.0 -72.0 -66.0 -66.0 -61.0 -60.0 -59.0 -56.0 -55.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -30.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -10.0 -12.0 -9.0 -6.0 -3.0 -2.0 1.0 4.0 7.0 14.0 8.0 3.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -45.0 -47.0 -50.0 -51.0 -56.0 -61.0 -62.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -80.0 -81.0 -84.0 -86.0 -91.0 -93.0 -95.0 -98.0 -100.0 -102.0 -105.0 -106.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -120.0 -127.0 -128.0 -131.0 -134.0 -137.0 -136.0 -139.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -159.0 37 -79.0 -80.0 -73.0 -76.0 -73.0 -71.0 -66.0 -68.0 -63.0 -62.0 -60.0 -58.0 -57.0 -54.0 -53.0 -49.0 -47.0 -46.0 -45.0 -44.0 -39.0 -39.0 -37.0 -36.0 -34.0 -31.0 -28.0 -25.0 -22.0 -21.0 -18.0 -17.0 -12.0 -12.0 -14.0 -11.0 -8.0 -5.0 0.0 3.0 4.0 5.0 14.0 8.0 1.0 0.0 -1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -39.0 -44.0 -47.0 -47.0 -52.0 -53.0 -58.0 -62.0 -64.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -82.0 -83.0 -84.0 -86.0 -92.0 -93.0 -94.0 -99.0 -102.0 -101.0 -104.0 -106.0 -106.0 -105.0 -112.0 -115.0 -114.0 -119.0 -122.0 -125.0 -120.0 -125.0 -126.0 -131.0 -134.0 -135.0 -134.0 -137.0 -142.0 -142.0 -148.0 -147.0 -152.0 -153.0 -154.0 38 -81.0 -80.0 -78.0 -75.0 -77.0 -75.0 -69.0 -66.0 -68.0 -64.0 -64.0 -58.0 -59.0 -56.0 -55.0 -54.0 -49.0 -49.0 -47.0 -46.0 -44.0 -40.0 -39.0 -39.0 -37.0 -34.0 -30.0 -28.0 -25.0 -24.0 -21.0 -19.0 -19.0 -14.0 -14.0 -14.0 -11.0 -8.0 -3.0 0.0 3.0 2.0 5.0 14.0 6.0 -1.0 -1.0 1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -41.0 -46.0 -47.0 -49.0 -54.0 -55.0 -60.0 -63.0 -64.0 -64.0 -72.0 -71.0 -71.0 -73.0 -76.0 -77.0 -84.0 -85.0 -84.0 -88.0 -92.0 -93.0 -96.0 -101.0 -104.0 -101.0 -104.0 -108.0 -106.0 -105.0 -114.0 -115.0 -116.0 -119.0 -122.0 -124.0 -122.0 -125.0 -128.0 -133.0 -134.0 -135.0 -134.0 -139.0 -142.0 -144.0 -148.0 -147.0 -152.0 -153.0 39 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -46.0 -45.0 -40.0 -37.0 -39.0 -35.0 -32.0 -28.0 -28.0 -27.0 -25.0 -23.0 -19.0 -21.0 -16.0 -14.0 -12.0 -11.0 -8.0 -5.0 -2.0 3.0 0.0 4.0 14.0 4.0 0.0 -1.0 2.0 -3.0 -5.0 -4.0 -7.0 -7.0 -11.0 -8.0 -16.0 -17.0 -18.0 -22.0 -19.0 -23.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -38.0 -41.0 -47.0 -49.0 -49.0 -56.0 -55.0 -60.0 -62.0 -65.0 -64.0 -71.0 -70.0 -71.0 -75.0 -78.0 -77.0 -83.0 -85.0 -86.0 -88.0 -93.0 -95.0 -98.0 -102.0 -105.0 -101.0 -106.0 -108.0 -106.0 -105.0 -114.0 -117.0 -118.0 -119.0 -122.0 -125.0 -122.0 -127.0 -130.0 -133.0 -136.0 -135.0 -134.0 -141.0 -144.0 -146.0 -150.0 -147.0 -152.0 40 -87.0 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -44.0 -45.0 -40.0 -36.0 -37.0 -36.0 -34.0 -28.0 -28.0 -29.0 -23.0 -25.0 -19.0 -22.0 -17.0 -16.0 -14.0 -11.0 -8.0 -6.0 -4.0 1.0 -1.0 4.0 14.0 2.0 -1.0 -2.0 2.0 -1.0 -4.0 -4.0 -7.0 -7.0 -10.0 -8.0 -16.0 -17.0 -16.0 -21.0 -19.0 -21.0 -24.0 -26.0 -29.0 -33.0 -31.0 -35.0 -36.0 -40.0 -43.0 -47.0 -50.0 -51.0 -56.0 -57.0 -61.0 -60.0 -67.0 -64.0 -69.0 -68.0 -73.0 -76.0 -79.0 -79.0 -83.0 -86.0 -86.0 -90.0 -93.0 -94.0 -97.0 -102.0 -103.0 -100.0 -106.0 -108.0 -108.0 -105.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -124.0 -129.0 -130.0 -133.0 -134.0 -137.0 -136.0 -143.0 -146.0 -146.0 -150.0 -147.0 41 -90.0 -87.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -54.0 -49.0 -52.0 -49.0 -44.0 -45.0 -42.0 -34.0 -35.0 -34.0 -33.0 -28.0 -29.0 -28.0 -23.0 -26.0 -19.0 -20.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -5.0 0.0 1.0 6.0 14.0 3.0 1.0 -1.0 2.0 1.0 -2.0 -3.0 -6.0 -5.0 -8.0 -8.0 -14.0 -15.0 -16.0 -21.0 -19.0 -19.0 -22.0 -25.0 -28.0 -31.0 -31.0 -35.0 -36.0 -41.0 -44.0 -45.0 -50.0 -51.0 -54.0 -58.0 -59.0 -60.0 -65.0 -64.0 -67.0 -70.0 -73.0 -74.0 -77.0 -79.0 -83.0 -84.0 -87.0 -90.0 -93.0 -96.0 -99.0 -100.0 -103.0 -100.0 -105.0 -106.0 -108.0 -107.0 -112.0 -113.0 -116.0 -119.0 -120.0 -123.0 -126.0 -127.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -144.0 -145.0 -148.0 42 -93.0 -90.0 -89.0 -88.0 -85.0 -82.0 -81.0 -76.0 -75.0 -74.0 -71.0 -66.0 -67.0 -66.0 -63.0 -58.0 -57.0 -56.0 -57.0 -54.0 -51.0 -52.0 -49.0 -46.0 -46.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -28.0 -25.0 -28.0 -19.0 -20.0 -19.0 -16.0 -13.0 -12.0 -9.0 -8.0 -5.0 0.0 -1.0 8.0 14.0 3.0 1.0 1.0 4.0 3.0 -2.0 -3.0 -4.0 -5.0 -8.0 -8.0 -12.0 -13.0 -18.0 -19.0 -18.0 -19.0 -22.0 -25.0 -28.0 -29.0 -32.0 -33.0 -38.0 -41.0 -42.0 -47.0 -48.0 -51.0 -55.0 -56.0 -57.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -98.0 -103.0 -106.0 -109.0 -107.0 -111.0 -113.0 -117.0 -118.0 -121.0 -124.0 -125.0 -128.0 -129.0 -130.0 -134.0 -138.0 -140.0 -142.0 -143.0 -145.0 43 -96.0 -93.0 -90.0 -91.0 -90.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -51.0 -48.0 -44.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -20.0 -19.0 -16.0 -15.0 -12.0 -9.0 -10.0 -3.0 -2.0 1.0 8.0 14.0 1.0 3.0 3.0 6.0 3.0 -2.0 -1.0 -4.0 -5.0 -8.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -19.0 -22.0 -25.0 -26.0 -29.0 -30.0 -35.0 -38.0 -39.0 -44.0 -45.0 -48.0 -52.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -78.0 -81.0 -84.0 -87.0 -90.0 -91.0 -92.0 -97.0 -98.0 -99.0 -96.0 -103.0 -106.0 -109.0 -107.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 -125.0 -126.0 -127.0 -132.0 -135.0 -138.0 -141.0 -140.0 -143.0 44 -97.0 -96.0 -93.0 -90.0 -91.0 -88.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -50.0 -47.0 -44.0 -41.0 -34.0 -35.0 -36.0 -31.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -18.0 -17.0 -16.0 -15.0 -12.0 -9.0 -8.0 -3.0 -2.0 1.0 8.0 14.0 3.0 5.0 5.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -6.0 -5.0 -10.0 -13.0 -16.0 -17.0 -18.0 -19.0 -22.0 -23.0 -24.0 -29.0 -32.0 -35.0 -38.0 -41.0 -44.0 -47.0 -49.0 -50.0 -51.0 -54.0 -55.0 -56.0 -61.0 -64.0 -67.0 -70.0 -71.0 -74.0 -75.0 -78.0 -81.0 -82.0 -85.0 -90.0 -89.0 -90.0 -95.0 -98.0 -97.0 -96.0 -101.0 -106.0 -107.0 -107.0 -111.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -126.0 -129.0 -132.0 -135.0 -136.0 -139.0 -140.0 45 -100.0 -97.0 -96.0 -93.0 -92.0 -89.0 -88.0 -85.0 -84.0 -79.0 -78.0 -77.0 -76.0 -71.0 -68.0 -71.0 -68.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -53.0 -51.0 -50.0 -47.0 -44.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -30.0 -32.0 -29.0 -24.0 -19.0 -16.0 -19.0 -16.0 -13.0 -14.0 -7.0 -6.0 -5.0 -2.0 1.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 0.0 1.0 -2.0 -3.0 -6.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -20.0 -21.0 -26.0 -29.0 -32.0 -35.0 -38.0 -41.0 -43.0 -46.0 -47.0 -52.0 -49.0 -54.0 -53.0 -58.0 -61.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -78.0 -79.0 -82.0 -85.0 -88.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -105.0 -106.0 -109.0 -112.0 -115.0 -116.0 -117.0 -120.0 -123.0 -126.0 -129.0 -130.0 -135.0 -134.0 -137.0 46 -99.0 -100.0 -95.0 -96.0 -93.0 -92.0 -87.0 -88.0 -83.0 -82.0 -79.0 -78.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -52.0 -49.0 -48.0 -45.0 -42.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -31.0 -30.0 -27.0 -22.0 -17.0 -16.0 -19.0 -14.0 -13.0 -12.0 -5.0 -6.0 -3.0 -2.0 3.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 -2.0 1.0 -2.0 -3.0 -8.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -22.0 -23.0 -26.0 -31.0 -34.0 -37.0 -40.0 -43.0 -43.0 -46.0 -49.0 -52.0 -49.0 -54.0 -53.0 -60.0 -63.0 -66.0 -65.0 -70.0 -71.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -90.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -107.0 -106.0 -111.0 -114.0 -115.0 -116.0 -117.0 -122.0 -123.0 -128.0 -129.0 -130.0 -135.0 -134.0 47 -104.0 -99.0 -100.0 -97.0 -98.0 -93.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -78.0 -77.0 -74.0 -71.0 -68.0 -67.0 -68.0 -63.0 -60.0 -59.0 -60.0 -59.0 -55.0 -50.0 -47.0 -46.0 -45.0 -44.0 -41.0 -36.0 -37.0 -36.0 -35.0 -28.0 -31.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -10.0 -3.0 -4.0 -1.0 0.0 5.0 10.0 14.0 7.0 9.0 9.0 10.0 7.0 0.0 1.0 0.0 -5.0 -6.0 -3.0 -8.0 -9.0 -12.0 -15.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -34.0 -35.0 -38.0 -42.0 -43.0 -44.0 -49.0 -50.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -80.0 -83.0 -82.0 -87.0 -88.0 -87.0 -90.0 -93.0 -96.0 -95.0 -96.0 -101.0 -104.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -117.0 -122.0 -125.0 -128.0 -129.0 -130.0 -133.0 48 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -62.0 -60.0 -53.0 -50.0 -47.0 -48.0 -45.0 -44.0 -41.0 -36.0 -39.0 -38.0 -35.0 -28.0 -33.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -8.0 -3.0 -4.0 -3.0 2.0 5.0 10.0 14.0 5.0 11.0 9.0 10.0 7.0 2.0 3.0 -2.0 -3.0 -4.0 -3.0 -8.0 -9.0 -12.0 -13.0 -16.0 -17.0 -22.0 -25.0 -26.0 -31.0 -32.0 -35.0 -40.0 -40.0 -41.0 -44.0 -47.0 -48.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -68.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -85.0 -86.0 -87.0 -90.0 -93.0 -96.0 -93.0 -96.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -128.0 -127.0 -130.0 49 -106.0 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -89.0 -86.0 -81.0 -82.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -58.0 -53.0 -50.0 -47.0 -48.0 -45.0 -42.0 -41.0 -38.0 -39.0 -40.0 -35.0 -28.0 -31.0 -28.0 -27.0 -24.0 -17.0 -16.0 -15.0 -16.0 -11.0 -8.0 -3.0 -4.0 -1.0 2.0 7.0 10.0 14.0 7.0 11.0 9.0 10.0 9.0 4.0 3.0 0.0 -3.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -16.0 -19.0 -20.0 -25.0 -26.0 -31.0 -34.0 -36.0 -39.0 -38.0 -41.0 -42.0 -45.0 -48.0 -49.0 -54.0 -57.0 -58.0 -59.0 -60.0 -65.0 -66.0 -71.0 -74.0 -77.0 -78.0 -81.0 -82.0 -83.0 -84.0 -87.0 -90.0 -93.0 -94.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -109.0 -110.0 -113.0 -116.0 -117.0 -122.0 -125.0 -126.0 -127.0 50 -111.0 -106.0 -105.0 -104.0 -101.0 -102.0 -97.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -56.0 -51.0 -48.0 -47.0 -48.0 -43.0 -42.0 -39.0 -38.0 -39.0 -38.0 -33.0 -28.0 -29.0 -28.0 -27.0 -22.0 -17.0 -16.0 -13.0 -14.0 -9.0 -6.0 -1.0 -2.0 -1.0 4.0 9.0 12.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -1.0 -4.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -22.0 -25.0 -28.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -40.0 -45.0 -48.0 -51.0 -54.0 -55.0 -58.0 -59.0 -62.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -79.0 -80.0 -81.0 -82.0 -85.0 -90.0 -91.0 -92.0 -95.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -110.0 -113.0 -116.0 -119.0 -122.0 -123.0 -124.0 51 -112.0 -111.0 -104.0 -105.0 -104.0 -101.0 -100.0 -97.0 -94.0 -91.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -78.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -59.0 -54.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -39.0 -36.0 -31.0 -26.0 -29.0 -28.0 -25.0 -22.0 -17.0 -14.0 -13.0 -12.0 -7.0 -4.0 -1.0 -2.0 1.0 6.0 11.0 14.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -42.0 -47.0 -50.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -91.0 -94.0 -95.0 -98.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -115.0 -118.0 -121.0 -122.0 -123.0 52 -113.0 -112.0 -109.0 -104.0 -105.0 -104.0 -99.0 -100.0 -95.0 -92.0 -91.0 -90.0 -89.0 -82.0 -81.0 -80.0 -81.0 -76.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -63.0 -61.0 -59.0 -57.0 -52.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -37.0 -34.0 -29.0 -26.0 -29.0 -26.0 -25.0 -20.0 -15.0 -14.0 -11.0 -10.0 -5.0 -4.0 -1.0 0.0 3.0 8.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -9.0 -12.0 -17.0 -20.0 -23.0 -25.0 -29.0 -31.0 -30.0 -35.0 -34.0 -37.0 -36.0 -41.0 -42.0 -49.0 -52.0 -53.0 -56.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -104.0 -105.0 -108.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 53 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -76.0 -75.0 -76.0 -71.0 -68.0 -71.0 -66.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -29.0 -26.0 -23.0 -18.0 -15.0 -12.0 -9.0 -8.0 -7.0 -4.0 1.0 2.0 5.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -7.0 -6.0 -11.0 -14.0 -17.0 -22.0 -23.0 -25.0 -31.0 -31.0 -30.0 -35.0 -34.0 -37.0 -38.0 -43.0 -42.0 -49.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -66.0 -67.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -82.0 -81.0 -82.0 -87.0 -92.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -105.0 -110.0 -113.0 -116.0 -115.0 -118.0 -121.0 54 -117.0 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -69.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -36.0 -33.0 -34.0 -29.0 -26.0 -29.0 -24.0 -23.0 -16.0 -15.0 -12.0 -9.0 -6.0 -7.0 -2.0 1.0 2.0 7.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -8.0 -13.0 -14.0 -19.0 -22.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -39.0 -40.0 -43.0 -42.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -63.0 -66.0 -67.0 -70.0 -69.0 -74.0 -75.0 -76.0 -81.0 -84.0 -81.0 -82.0 -87.0 -90.0 -93.0 -96.0 -97.0 -98.0 -101.0 -102.0 -107.0 -110.0 -111.0 -116.0 -113.0 -118.0 55 -116.0 -117.0 -112.0 -113.0 -112.0 -109.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -68.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -37.0 -34.0 -33.0 -34.0 -29.0 -26.0 -27.0 -24.0 -21.0 -16.0 -15.0 -12.0 -7.0 -6.0 -5.0 -2.0 1.0 4.0 7.0 10.0 13.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -10.0 -15.0 -16.0 -21.0 -24.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -41.0 -42.0 -45.0 -42.0 -51.0 -52.0 -53.0 -58.0 -61.0 -64.0 -61.0 -66.0 -69.0 -70.0 -69.0 -74.0 -75.0 -78.0 -79.0 -84.0 -81.0 -84.0 -87.0 -92.0 -95.0 -96.0 -97.0 -98.0 -103.0 -102.0 -109.0 -110.0 -111.0 -116.0 -113.0 56 -121.0 -116.0 -117.0 -114.0 -113.0 -110.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -93.0 -94.0 -91.0 -90.0 -87.0 -82.0 -83.0 -80.0 -81.0 -76.0 -75.0 -76.0 -73.0 -68.0 -66.0 -63.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -39.0 -36.0 -33.0 -34.0 -31.0 -26.0 -27.0 -22.0 -19.0 -14.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 3.0 4.0 7.0 8.0 11.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 0.0 -3.0 -8.0 -9.0 -10.0 -17.0 -16.0 -21.0 -25.0 -24.0 -25.0 -32.0 -31.0 -30.0 -37.0 -36.0 -41.0 -42.0 -45.0 -44.0 -49.0 -52.0 -55.0 -58.0 -61.0 -64.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -77.0 -80.0 -79.0 -82.0 -83.0 -84.0 -89.0 -92.0 -93.0 -96.0 -97.0 -98.0 -103.0 -104.0 -109.0 -110.0 -111.0 -114.0 57 -124.0 -123.0 -118.0 -117.0 -116.0 -111.0 -112.0 -111.0 -106.0 -103.0 -104.0 -101.0 -98.0 -93.0 -94.0 -93.0 -92.0 -89.0 -82.0 -83.0 -82.0 -81.0 -78.0 -75.0 -74.0 -74.0 -70.0 -68.0 -63.0 -60.0 -63.0 -58.0 -59.0 -52.0 -55.0 -52.0 -49.0 -48.0 -43.0 -40.0 -41.0 -36.0 -33.0 -36.0 -31.0 -26.0 -27.0 -24.0 -21.0 -14.0 -11.0 -14.0 -11.0 -6.0 -3.0 -2.0 1.0 4.0 5.0 8.0 9.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 -2.0 -5.0 -8.0 -11.0 -12.0 -17.0 -17.0 -23.0 -23.0 -26.0 -25.0 -30.0 -29.0 -32.0 -37.0 -38.0 -41.0 -42.0 -47.0 -44.0 -51.0 -54.0 -55.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -79.0 -80.0 -79.0 -82.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -105.0 -104.0 -111.0 -110.0 -111.0 58 -123.0 -126.0 -121.0 -118.0 -117.0 -116.0 -109.0 -112.0 -109.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -89.0 -84.0 -83.0 -82.0 -83.0 -78.0 -75.0 -73.0 -72.0 -71.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -55.0 -54.0 -51.0 -46.0 -41.0 -40.0 -43.0 -36.0 -33.0 -34.0 -29.0 -26.0 -25.0 -24.0 -21.0 -14.0 -11.0 -12.0 -9.0 -4.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 11.0 4.0 3.0 -2.0 -7.0 -10.0 -13.0 -14.0 -19.0 -17.0 -24.0 -23.0 -26.0 -25.0 -30.0 -29.0 -34.0 -39.0 -40.0 -41.0 -44.0 -47.0 -44.0 -53.0 -56.0 -57.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -71.0 -72.0 -79.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -93.0 -98.0 -99.0 -102.0 -105.0 -104.0 -111.0 -110.0 59 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -90.0 -87.0 -84.0 -83.0 -82.0 -83.0 -78.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -52.0 -49.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -32.0 -27.0 -24.0 -23.0 -22.0 -19.0 -14.0 -11.0 -10.0 -7.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 9.0 4.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -17.0 -22.0 -23.0 -26.0 -25.0 -30.0 -31.0 -34.0 -37.0 -40.0 -43.0 -44.0 -47.0 -46.0 -53.0 -56.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -69.0 -72.0 -71.0 -72.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -93.0 -98.0 -101.0 -104.0 -105.0 -104.0 -109.0 60 -129.0 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -88.0 -87.0 -84.0 -83.0 -82.0 -81.0 -77.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -30.0 -27.0 -24.0 -23.0 -20.0 -19.0 -14.0 -11.0 -10.0 -5.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 13.0 10.0 9.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -15.0 -20.0 -17.0 -22.0 -23.0 -26.0 -27.0 -32.0 -31.0 -34.0 -37.0 -42.0 -43.0 -46.0 -49.0 -48.0 -55.0 -58.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -71.0 -74.0 -71.0 -72.0 -79.0 -80.0 -83.0 -86.0 -87.0 -90.0 -91.0 -92.0 -95.0 -100.0 -101.0 -106.0 -105.0 -104.0 61 -132.0 -131.0 -128.0 -123.0 -126.0 -123.0 -120.0 -119.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -95.0 -92.0 -93.0 -90.0 -87.0 -86.0 -85.0 -84.0 -82.0 -79.0 -76.0 -71.0 -70.0 -71.0 -66.0 -67.0 -60.0 -63.0 -62.0 -59.0 -54.0 -53.0 -50.0 -49.0 -48.0 -43.0 -42.0 -41.0 -36.0 -35.0 -32.0 -29.0 -24.0 -23.0 -22.0 -19.0 -16.0 -13.0 -10.0 -7.0 -4.0 -3.0 -2.0 -3.0 4.0 3.0 4.0 7.0 12.0 9.0 8.0 11.0 14.0 8.0 7.0 0.0 -3.0 -6.0 -9.0 -12.0 -13.0 -15.0 -18.0 -17.0 -22.0 -21.0 -26.0 -29.0 -30.0 -33.0 -34.0 -39.0 -40.0 -43.0 -46.0 -47.0 -48.0 -55.0 -56.0 -57.0 -62.0 -61.0 -64.0 -61.0 -66.0 -69.0 -72.0 -71.0 -74.0 -77.0 -80.0 -83.0 -84.0 -87.0 -88.0 -91.0 -94.0 -97.0 -100.0 -99.0 -104.0 -105.0 62 -135.0 -132.0 -131.0 -130.0 -125.0 -124.0 -123.0 -120.0 -117.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -97.0 -92.0 -95.0 -92.0 -87.0 -88.0 -87.0 -83.0 -80.0 -77.0 -76.0 -73.0 -72.0 -71.0 -66.0 -67.0 -62.0 -63.0 -60.0 -59.0 -56.0 -53.0 -52.0 -49.0 -48.0 -45.0 -42.0 -41.0 -36.0 -33.0 -30.0 -29.0 -26.0 -25.0 -20.0 -17.0 -16.0 -11.0 -10.0 -7.0 -6.0 -5.0 -2.0 -5.0 2.0 3.0 4.0 7.0 12.0 7.0 6.0 9.0 14.0 6.0 5.0 0.0 -5.0 -6.0 -9.0 -14.0 -14.0 -15.0 -18.0 -17.0 -22.0 -23.0 -28.0 -29.0 -30.0 -33.0 -36.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -57.0 -56.0 -57.0 -62.0 -61.0 -64.0 -63.0 -66.0 -69.0 -72.0 -71.0 -74.0 -79.0 -82.0 -83.0 -84.0 -87.0 -88.0 -93.0 -96.0 -99.0 -102.0 -99.0 -104.0 63 -136.0 -137.0 -132.0 -133.0 -132.0 -127.0 -124.0 -125.0 -122.0 -119.0 -118.0 -111.0 -114.0 -111.0 -110.0 -105.0 -106.0 -103.0 -100.0 -99.0 -92.0 -97.0 -94.0 -89.0 -90.0 -88.0 -85.0 -82.0 -79.0 -78.0 -73.0 -74.0 -73.0 -68.0 -69.0 -64.0 -65.0 -62.0 -57.0 -54.0 -53.0 -54.0 -49.0 -48.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -27.0 -26.0 -25.0 -22.0 -19.0 -16.0 -13.0 -12.0 -7.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 2.0 5.0 12.0 8.0 6.0 7.0 14.0 4.0 3.0 -2.0 -6.0 -8.0 -9.0 -14.0 -16.0 -15.0 -17.0 -17.0 -21.0 -25.0 -29.0 -31.0 -30.0 -33.0 -36.0 -38.0 -43.0 -46.0 -49.0 -49.0 -50.0 -56.0 -55.0 -57.0 -61.0 -61.0 -63.0 -63.0 -66.0 -69.0 -73.0 -71.0 -76.0 -78.0 -81.0 -82.0 -83.0 -88.0 -88.0 -94.0 -95.0 -98.0 -101.0 -99.0 64 -141.0 -138.0 -137.0 -134.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -113.0 -114.0 -113.0 -112.0 -107.0 -106.0 -105.0 -102.0 -101.0 -94.0 -98.0 -94.0 -89.0 -91.0 -88.0 -85.0 -82.0 -81.0 -80.0 -75.0 -76.0 -73.0 -68.0 -71.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -54.0 -51.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -29.0 -28.0 -25.0 -20.0 -19.0 -18.0 -15.0 -14.0 -9.0 -10.0 -9.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 10.0 6.0 6.0 6.0 14.0 3.0 3.0 -3.0 -5.0 -9.0 -10.0 -14.0 -15.0 -15.0 -17.0 -19.0 -21.0 -26.0 -29.0 -30.0 -30.0 -32.0 -37.0 -38.0 -43.0 -46.0 -49.0 -51.0 -50.0 -56.0 -55.0 -57.0 -59.0 -62.0 -61.0 -63.0 -65.0 -68.0 -71.0 -71.0 -75.0 -76.0 -81.0 -82.0 -85.0 -88.0 -88.0 -94.0 -95.0 -98.0 -99.0 65 -144.0 -141.0 -140.0 -139.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -113.0 -110.0 -107.0 -108.0 -103.0 -104.0 -101.0 -94.0 -99.0 -96.0 -89.0 -89.0 -86.0 -85.0 -84.0 -83.0 -80.0 -75.0 -76.0 -75.0 -68.0 -69.0 -68.0 -65.0 -62.0 -61.0 -56.0 -57.0 -56.0 -51.0 -50.0 -45.0 -42.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -17.0 -16.0 -9.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 8.0 6.0 4.0 4.0 14.0 1.0 3.0 -3.0 -5.0 -10.0 -10.0 -14.0 -15.0 -15.0 -17.0 -21.0 -21.0 -26.0 -29.0 -30.0 -30.0 -34.0 -39.0 -40.0 -45.0 -48.0 -51.0 -51.0 -50.0 -56.0 -55.0 -57.0 -61.0 -64.0 -61.0 -63.0 -67.0 -68.0 -73.0 -71.0 -75.0 -78.0 -81.0 -82.0 -87.0 -90.0 -90.0 -96.0 -95.0 -98.0 66 -147.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -109.0 -108.0 -105.0 -104.0 -103.0 -94.0 -97.0 -97.0 -91.0 -91.0 -88.0 -87.0 -86.0 -83.0 -82.0 -77.0 -76.0 -77.0 -70.0 -69.0 -68.0 -65.0 -64.0 -63.0 -58.0 -59.0 -56.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -37.0 -34.0 -31.0 -26.0 -21.0 -22.0 -21.0 -20.0 -19.0 -18.0 -11.0 -14.0 -13.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 6.0 4.0 4.0 2.0 14.0 1.0 1.0 -5.0 -3.0 -10.0 -10.0 -12.0 -13.0 -16.0 -15.0 -22.0 -23.0 -26.0 -27.0 -28.0 -32.0 -34.0 -39.0 -42.0 -43.0 -46.0 -49.0 -50.0 -50.0 -54.0 -55.0 -58.0 -59.0 -62.0 -61.0 -63.0 -67.0 -68.0 -71.0 -71.0 -77.0 -78.0 -81.0 -84.0 -85.0 -88.0 -90.0 -94.0 -95.0 67 -150.0 -147.0 -146.0 -145.0 -144.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -113.0 -114.0 -109.0 -110.0 -107.0 -104.0 -103.0 -96.0 -97.0 -95.0 -91.0 -91.0 -90.0 -89.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -68.0 -67.0 -64.0 -63.0 -60.0 -57.0 -56.0 -51.0 -48.0 -45.0 -44.0 -41.0 -40.0 -35.0 -32.0 -31.0 -26.0 -21.0 -22.0 -23.0 -22.0 -19.0 -18.0 -13.0 -14.0 -11.0 -8.0 -7.0 -6.0 -3.0 -2.0 1.0 4.0 2.0 4.0 1.0 14.0 3.0 0.0 -4.0 -1.0 -8.0 -9.0 -10.0 -13.0 -16.0 -15.0 -20.0 -23.0 -26.0 -27.0 -30.0 -33.0 -36.0 -39.0 -42.0 -41.0 -44.0 -47.0 -48.0 -49.0 -52.0 -55.0 -56.0 -57.0 -60.0 -63.0 -63.0 -67.0 -70.0 -71.0 -73.0 -75.0 -76.0 -81.0 -84.0 -87.0 -86.0 -89.0 -92.0 68 -153.0 -150.0 -149.0 -148.0 -147.0 -142.0 -141.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -124.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -111.0 -110.0 -107.0 -106.0 -103.0 -96.0 -97.0 -95.0 -93.0 -91.0 -92.0 -89.0 -86.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -70.0 -67.0 -66.0 -65.0 -60.0 -59.0 -54.0 -51.0 -48.0 -47.0 -44.0 -43.0 -38.0 -35.0 -34.0 -29.0 -26.0 -21.0 -24.0 -25.0 -22.0 -21.0 -20.0 -13.0 -14.0 -11.0 -8.0 -8.0 -6.0 -5.0 -2.0 -1.0 2.0 2.0 2.0 3.0 14.0 2.0 1.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -27.0 -30.0 -33.0 -36.0 -37.0 -42.0 -39.0 -42.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -72.0 -73.0 -78.0 -81.0 -84.0 -87.0 -84.0 -89.0 69 -154.0 -155.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -140.0 -137.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -120.0 -119.0 -118.0 -117.0 -112.0 -113.0 -112.0 -109.0 -106.0 -105.0 -98.0 -99.0 -97.0 -95.0 -91.0 -92.0 -91.0 -88.0 -87.0 -86.0 -81.0 -78.0 -75.0 -72.0 -71.0 -72.0 -67.0 -66.0 -65.0 -62.0 -57.0 -56.0 -53.0 -50.0 -45.0 -44.0 -43.0 -40.0 -37.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -24.0 -21.0 -22.0 -15.0 -16.0 -13.0 -8.0 -6.0 -8.0 -7.0 -2.0 -3.0 0.0 0.0 0.0 1.0 14.0 4.0 3.0 -2.0 1.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -20.0 -21.0 -22.0 -27.0 -30.0 -33.0 -34.0 -35.0 -40.0 -37.0 -40.0 -43.0 -46.0 -49.0 -50.0 -53.0 -54.0 -57.0 -56.0 -61.0 -64.0 -65.0 -66.0 -67.0 -72.0 -73.0 -78.0 -79.0 -82.0 -85.0 -84.0 70 -159.0 -156.0 -155.0 -150.0 -153.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -125.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -108.0 -103.0 -98.0 -98.0 -97.0 -97.0 -91.0 -94.0 -89.0 -90.0 -87.0 -86.0 -83.0 -80.0 -77.0 -72.0 -73.0 -72.0 -67.0 -68.0 -63.0 -62.0 -55.0 -56.0 -51.0 -50.0 -47.0 -46.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -21.0 -28.0 -25.0 -26.0 -22.0 -20.0 -15.0 -18.0 -14.0 -10.0 -6.0 -10.0 -9.0 -4.0 -5.0 0.0 -2.0 -2.0 1.0 14.0 6.0 5.0 0.0 1.0 -4.0 -7.0 -10.0 -13.0 -14.0 -17.0 -18.0 -21.0 -24.0 -25.0 -28.0 -31.0 -36.0 -35.0 -40.0 -37.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -66.0 -69.0 -72.0 -75.0 -78.0 -79.0 -82.0 -83.0 71 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -84.0 -81.0 -80.0 -77.0 -72.0 -75.0 -74.0 -67.0 -68.0 -63.0 -60.0 -53.0 -54.0 -53.0 -52.0 -47.0 -44.0 -43.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -30.0 -27.0 -26.0 -22.0 -18.0 -15.0 -18.0 -12.0 -10.0 -6.0 -12.0 -11.0 -4.0 -7.0 0.0 -2.0 0.0 1.0 14.0 8.0 5.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -14.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -29.0 -34.0 -37.0 -38.0 -35.0 -38.0 -43.0 -46.0 -45.0 -48.0 -51.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -64.0 -69.0 -72.0 -75.0 -76.0 -77.0 -80.0 72 -161.0 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -118.0 -119.0 -112.0 -113.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -82.0 -79.0 -80.0 -77.0 -72.0 -75.0 -72.0 -67.0 -66.0 -63.0 -60.0 -53.0 -52.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -29.0 -27.0 -26.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -11.0 -4.0 -7.0 0.0 -2.0 2.0 3.0 14.0 10.0 7.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -27.0 -28.0 -27.0 -32.0 -35.0 -36.0 -35.0 -36.0 -43.0 -44.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -60.0 -63.0 -66.0 -69.0 -72.0 -73.0 -74.0 -77.0 73 -162.0 -161.0 -158.0 -159.0 -156.0 -155.0 -150.0 -151.0 -148.0 -145.0 -142.0 -141.0 -138.0 -137.0 -134.0 -135.0 -130.0 -129.0 -128.0 -123.0 -122.0 -119.0 -118.0 -117.0 -112.0 -113.0 -110.0 -108.0 -105.0 -102.0 -98.0 -100.0 -97.0 -96.0 -91.0 -94.0 -91.0 -88.0 -83.0 -80.0 -79.0 -80.0 -75.0 -72.0 -73.0 -70.0 -67.0 -64.0 -61.0 -58.0 -53.0 -52.0 -51.0 -48.0 -45.0 -42.0 -41.0 -38.0 -35.0 -36.0 -33.0 -30.0 -21.0 -27.0 -27.0 -24.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -9.0 -4.0 -7.0 0.0 -1.0 2.0 5.0 14.0 12.0 7.0 2.0 -1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -15.0 -18.0 -21.0 -22.0 -25.0 -26.0 -27.0 -30.0 -33.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -44.0 -49.0 -52.0 -53.0 -52.0 -55.0 -60.0 -61.0 -66.0 -67.0 -70.0 -71.0 -72.0 74 -165.0 -164.0 -159.0 -158.0 -161.0 -156.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -137.0 -136.0 -133.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -113.0 -111.0 -108.0 -107.0 -102.0 -100.0 -100.0 -97.0 -98.0 -93.0 -94.0 -91.0 -86.0 -83.0 -80.0 -81.0 -78.0 -75.0 -74.0 -73.0 -70.0 -67.0 -64.0 -61.0 -56.0 -53.0 -54.0 -50.0 -47.0 -45.0 -44.0 -43.0 -38.0 -37.0 -36.0 -33.0 -28.0 -21.0 -27.0 -27.0 -26.0 -20.0 -18.0 -17.0 -18.0 -12.0 -12.0 -6.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 2.0 7.0 13.0 14.0 5.0 2.0 -1.0 0.0 -3.0 -6.0 -7.0 -12.0 -15.0 -18.0 -19.0 -22.0 -25.0 -24.0 -27.0 -30.0 -31.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 -57.0 -58.0 -63.0 -64.0 -67.0 -70.0 -69.0 75 -166.0 -167.0 -166.0 -159.0 -158.0 -159.0 -154.0 -153.0 -152.0 -149.0 -148.0 -143.0 -144.0 -139.0 -138.0 -137.0 -136.0 -131.0 -132.0 -127.0 -128.0 -123.0 -126.0 -121.0 -116.0 -117.0 -114.0 -114.0 -111.0 -110.0 -107.0 -102.0 -100.0 -98.0 -97.0 -99.0 -93.0 -92.0 -91.0 -86.0 -84.0 -82.0 -83.0 -79.0 -77.0 -75.0 -72.0 -69.0 -67.0 -64.0 -60.0 -56.0 -54.0 -54.0 -48.0 -45.0 -46.0 -46.0 -45.0 -39.0 -39.0 -36.0 -32.0 -29.0 -21.0 -28.0 -29.0 -26.0 -20.0 -19.0 -19.0 -18.0 -12.0 -14.0 -6.0 -13.0 -13.0 -8.0 -6.0 -4.0 0.0 2.0 5.0 13.0 14.0 3.0 0.0 -1.0 0.0 -3.0 -8.0 -7.0 -14.0 -17.0 -20.0 -21.0 -22.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -52.0 -51.0 -54.0 -59.0 -58.0 -63.0 -64.0 -67.0 -70.0 76 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -126.0 -123.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -110.0 -105.0 -102.0 -100.0 -98.0 -97.0 -97.0 -93.0 -93.0 -90.0 -86.0 -84.0 -83.0 -84.0 -79.0 -78.0 -73.0 -70.0 -67.0 -66.0 -63.0 -60.0 -56.0 -54.0 -53.0 -48.0 -45.0 -46.0 -47.0 -44.0 -39.0 -38.0 -35.0 -30.0 -29.0 -21.0 -28.0 -28.0 -25.0 -20.0 -19.0 -20.0 -19.0 -12.0 -15.0 -6.0 -12.0 -12.0 -9.0 -4.0 -3.0 2.0 3.0 4.0 13.0 14.0 3.0 0.0 -3.0 0.0 -5.0 -10.0 -9.0 -16.0 -19.0 -22.0 -21.0 -24.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -44.0 -43.0 -46.0 -49.0 -52.0 -51.0 -56.0 -61.0 -60.0 -63.0 -64.0 -67.0 77 -172.0 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -113.0 -108.0 -105.0 -104.0 -100.0 -98.0 -97.0 -97.0 -91.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -81.0 -76.0 -73.0 -70.0 -67.0 -64.0 -64.0 -58.0 -56.0 -56.0 -51.0 -48.0 -45.0 -47.0 -47.0 -42.0 -39.0 -38.0 -33.0 -30.0 -29.0 -21.0 -28.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -14.0 -12.0 -7.0 -4.0 -3.0 4.0 1.0 2.0 13.0 14.0 3.0 0.0 -1.0 -2.0 -7.0 -10.0 -9.0 -16.0 -19.0 -20.0 -21.0 -24.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -35.0 -36.0 -41.0 -44.0 -43.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -62.0 -61.0 -64.0 78 -171.0 -172.0 -167.0 -166.0 -167.0 -164.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -108.0 -105.0 -104.0 -100.0 -98.0 -98.0 -95.0 -89.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -79.0 -76.0 -73.0 -70.0 -65.0 -64.0 -62.0 -58.0 -56.0 -54.0 -51.0 -48.0 -45.0 -47.0 -45.0 -42.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -12.0 -10.0 -7.0 -2.0 -1.0 4.0 1.0 2.0 13.0 14.0 5.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -22.0 -23.0 -26.0 -25.0 -26.0 -31.0 -34.0 -33.0 -34.0 -39.0 -42.0 -43.0 -44.0 -49.0 -50.0 -55.0 -56.0 -59.0 -62.0 -61.0 79 -174.0 -173.0 -172.0 -167.0 -166.0 -167.0 -164.0 -161.0 -160.0 -157.0 -156.0 -151.0 -152.0 -149.0 -148.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -130.0 -123.0 -124.0 -125.0 -122.0 -120.0 -116.0 -115.0 -113.0 -112.0 -111.0 -106.0 -105.0 -104.0 -99.0 -96.0 -98.0 -95.0 -89.0 -91.0 -90.0 -86.0 -84.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -65.0 -64.0 -60.0 -56.0 -54.0 -54.0 -51.0 -48.0 -45.0 -45.0 -43.0 -40.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -26.0 -25.0 -20.0 -21.0 -18.0 -19.0 -14.0 -13.0 -6.0 -10.0 -8.0 -5.0 -2.0 -1.0 4.0 1.0 4.0 13.0 14.0 7.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -20.0 -23.0 -26.0 -25.0 -24.0 -29.0 -32.0 -33.0 -32.0 -37.0 -42.0 -43.0 -46.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 80 -177.0 -174.0 -175.0 -174.0 -167.0 -166.0 -167.0 -166.0 -161.0 -160.0 -159.0 -154.0 -153.0 -150.0 -149.0 -150.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -128.0 -123.0 -126.0 -123.0 -123.0 -118.0 -116.0 -117.0 -111.0 -114.0 -109.0 -106.0 -107.0 -104.0 -97.0 -96.0 -96.0 -96.0 -89.0 -91.0 -92.0 -86.0 -85.0 -83.0 -80.0 -77.0 -72.0 -69.0 -69.0 -67.0 -63.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -43.0 -43.0 -40.0 -39.0 -37.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -17.0 -16.0 -13.0 -8.0 -9.0 -8.0 -3.0 -4.0 -1.0 2.0 3.0 3.0 13.0 14.0 5.0 4.0 -1.0 -2.0 -7.0 -8.0 -7.0 -12.0 -15.0 -16.0 -17.0 -18.0 -23.0 -24.0 -23.0 -24.0 -29.0 -30.0 -33.0 -32.0 -37.0 -40.0 -43.0 -46.0 -47.0 -52.0 -53.0 -54.0 -57.0 81 -178.0 -177.0 -172.0 -175.0 -174.0 -167.0 -164.0 -167.0 -164.0 -159.0 -160.0 -157.0 -154.0 -153.0 -150.0 -149.0 -148.0 -145.0 -144.0 -139.0 -138.0 -135.0 -134.0 -133.0 -128.0 -123.0 -126.0 -122.0 -121.0 -118.0 -116.0 -116.0 -111.0 -112.0 -109.0 -106.0 -108.0 -102.0 -97.0 -94.0 -96.0 -96.0 -89.0 -91.0 -90.0 -84.0 -83.0 -81.0 -78.0 -75.0 -70.0 -69.0 -67.0 -65.0 -61.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -41.0 -41.0 -40.0 -39.0 -35.0 -31.0 -28.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -15.0 -14.0 -13.0 -8.0 -7.0 -6.0 -3.0 -4.0 -1.0 2.0 4.0 5.0 13.0 14.0 5.0 2.0 -1.0 0.0 -5.0 -6.0 -5.0 -10.0 -13.0 -14.0 -17.0 -16.0 -21.0 -22.0 -23.0 -24.0 -29.0 -32.0 -33.0 -32.0 -35.0 -40.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 82 -179.0 -178.0 -175.0 -172.0 -175.0 -172.0 -167.0 -164.0 -165.0 -162.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -123.0 -125.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -109.0 -106.0 -107.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -92.0 -89.0 -82.0 -81.0 -81.0 -78.0 -73.0 -70.0 -71.0 -65.0 -64.0 -59.0 -58.0 -57.0 -54.0 -55.0 -53.0 -50.0 -45.0 -41.0 -42.0 -42.0 -38.0 -33.0 -31.0 -30.0 -31.0 -21.0 -28.0 -30.0 -27.0 -24.0 -23.0 -18.0 -17.0 -16.0 -15.0 -8.0 -9.0 -6.0 -5.0 -6.0 -3.0 2.0 2.0 5.0 14.0 12.0 5.0 2.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -11.0 -14.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -30.0 -31.0 -32.0 -37.0 -38.0 -43.0 -44.0 -47.0 -50.0 -49.0 83 -182.0 -179.0 -178.0 -175.0 -172.0 -173.0 -170.0 -167.0 -164.0 -163.0 -162.0 -157.0 -158.0 -155.0 -154.0 -153.0 -148.0 -145.0 -146.0 -143.0 -142.0 -139.0 -138.0 -133.0 -130.0 -131.0 -126.0 -122.0 -123.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -107.0 -104.0 -105.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -90.0 -87.0 -80.0 -79.0 -80.0 -77.0 -74.0 -71.0 -70.0 -63.0 -62.0 -59.0 -58.0 -57.0 -54.0 -53.0 -52.0 -49.0 -46.0 -41.0 -42.0 -41.0 -36.0 -33.0 -33.0 -32.0 -32.0 -21.0 -28.0 -28.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -11.0 -6.0 -7.0 -6.0 -4.0 2.0 4.0 5.0 14.0 10.0 3.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -32.0 -31.0 -34.0 -39.0 -38.0 -45.0 -46.0 -47.0 -50.0 84 -183.0 -182.0 -179.0 -178.0 -175.0 -174.0 -173.0 -172.0 -167.0 -162.0 -165.0 -162.0 -157.0 -156.0 -157.0 -156.0 -153.0 -146.0 -145.0 -146.0 -143.0 -140.0 -141.0 -138.0 -135.0 -130.0 -131.0 -125.0 -120.0 -123.0 -120.0 -119.0 -118.0 -115.0 -116.0 -109.0 -110.0 -105.0 -104.0 -103.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -88.0 -85.0 -78.0 -77.0 -78.0 -77.0 -74.0 -71.0 -68.0 -63.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -50.0 -47.0 -46.0 -41.0 -40.0 -39.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -26.0 -29.0 -29.0 -26.0 -21.0 -21.0 -19.0 -18.0 -13.0 -12.0 -13.0 -8.0 -9.0 -7.0 -4.0 0.0 2.0 5.0 14.0 10.0 1.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -15.0 -16.0 -15.0 -18.0 -19.0 -24.0 -21.0 -26.0 -29.0 -32.0 -33.0 -36.0 -41.0 -40.0 -45.0 -46.0 -47.0 85 -182.0 -183.0 -180.0 -179.0 -178.0 -175.0 -174.0 -173.0 -170.0 -165.0 -162.0 -163.0 -162.0 -157.0 -156.0 -157.0 -154.0 -151.0 -146.0 -145.0 -146.0 -141.0 -140.0 -139.0 -136.0 -135.0 -130.0 -130.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -102.0 -103.0 -100.0 -97.0 -94.0 -97.0 -92.0 -89.0 -88.0 -83.0 -76.0 -77.0 -78.0 -75.0 -72.0 -69.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -50.0 -51.0 -48.0 -47.0 -46.0 -39.0 -38.0 -37.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -26.0 -29.0 -29.0 -24.0 -22.0 -21.0 -21.0 -16.0 -15.0 -14.0 -15.0 -10.0 -10.0 -7.0 -3.0 -1.0 2.0 5.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -4.0 -5.0 -12.0 -13.0 -14.0 -15.0 -18.0 -21.0 -24.0 -21.0 -26.0 -29.0 -32.0 -35.0 -36.0 -41.0 -40.0 -43.0 -46.0 86 -185.0 -182.0 -181.0 -180.0 -179.0 -178.0 -173.0 -174.0 -171.0 -168.0 -165.0 -162.0 -163.0 -160.0 -157.0 -156.0 -155.0 -152.0 -151.0 -146.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -133.0 -129.0 -128.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -114.0 -107.0 -106.0 -101.0 -102.0 -103.0 -98.0 -97.0 -94.0 -95.0 -92.0 -87.0 -86.0 -81.0 -76.0 -77.0 -76.0 -73.0 -70.0 -67.0 -66.0 -63.0 -62.0 -57.0 -56.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -37.0 -36.0 -37.0 -34.0 -33.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -27.0 -26.0 -22.0 -21.0 -21.0 -16.0 -16.0 -16.0 -15.0 -10.0 -10.0 -7.0 -1.0 1.0 1.0 3.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -6.0 -5.0 -12.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -21.0 -26.0 -31.0 -32.0 -37.0 -36.0 -41.0 -40.0 -43.0 87 -182.0 -186.0 -180.0 -183.0 -180.0 -181.0 -176.0 -173.0 -172.0 -169.0 -170.0 -165.0 -162.0 -163.0 -160.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -147.0 -146.0 -143.0 -140.0 -139.0 -136.0 -132.0 -127.0 -130.0 -123.0 -122.0 -123.0 -118.0 -121.0 -118.0 -115.0 -112.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -97.0 -92.0 -93.0 -90.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -68.0 -67.0 -66.0 -63.0 -62.0 -55.0 -54.0 -51.0 -50.0 -51.0 -48.0 -45.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -27.0 -27.0 -27.0 -22.0 -21.0 -21.0 -18.0 -16.0 -18.0 -14.0 -11.0 -9.0 -5.0 -1.0 1.0 1.0 3.0 14.0 10.0 3.0 2.0 1.0 2.0 -5.0 -6.0 -5.0 -10.0 -13.0 -12.0 -17.0 -20.0 -21.0 -22.0 -21.0 -28.0 -29.0 -34.0 -35.0 -36.0 -41.0 -40.0 88 -189.0 -182.0 -187.0 -180.0 -183.0 -178.0 -179.0 -176.0 -173.0 -170.0 -169.0 -168.0 -165.0 -160.0 -163.0 -160.0 -159.0 -156.0 -153.0 -150.0 -149.0 -146.0 -147.0 -144.0 -141.0 -140.0 -137.0 -135.0 -130.0 -127.0 -130.0 -123.0 -122.0 -121.0 -118.0 -121.0 -118.0 -113.0 -110.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -90.0 -92.0 -90.0 -83.0 -82.0 -79.0 -78.0 -75.0 -72.0 -71.0 -70.0 -67.0 -66.0 -63.0 -62.0 -53.0 -52.0 -51.0 -50.0 -51.0 -46.0 -43.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -29.0 -27.0 -27.0 -22.0 -21.0 -22.0 -18.0 -16.0 -18.0 -15.0 -10.0 -7.0 -6.0 -1.0 1.0 3.0 2.0 14.0 10.0 1.0 2.0 1.0 3.0 -4.0 -6.0 -5.0 -9.0 -12.0 -14.0 -18.0 -19.0 -20.0 -22.0 -23.0 -29.0 -31.0 -33.0 -37.0 -36.0 -40.0 89 -188.0 -189.0 -182.0 -187.0 -180.0 -183.0 -176.0 -179.0 -176.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -163.0 -158.0 -157.0 -156.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -141.0 -138.0 -136.0 -133.0 -130.0 -127.0 -128.0 -123.0 -122.0 -121.0 -118.0 -119.0 -116.0 -111.0 -108.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -88.0 -91.0 -88.0 -83.0 -82.0 -79.0 -78.0 -73.0 -70.0 -71.0 -70.0 -67.0 -64.0 -63.0 -60.0 -53.0 -50.0 -51.0 -50.0 -49.0 -44.0 -41.0 -42.0 -37.0 -36.0 -35.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -27.0 -29.0 -27.0 -25.0 -22.0 -21.0 -22.0 -18.0 -15.0 -18.0 -13.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 4.0 14.0 10.0 2.0 2.0 1.0 3.0 -2.0 -5.0 -7.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -23.0 -23.0 -29.0 -30.0 -31.0 -36.0 -35.0 90 -189.0 -188.0 -187.0 -182.0 -189.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -159.0 -154.0 -153.0 -152.0 -147.0 -146.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -119.0 -116.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -86.0 -89.0 -88.0 -85.0 -82.0 -77.0 -78.0 -71.0 -70.0 -71.0 -70.0 -67.0 -62.0 -63.0 -60.0 -53.0 -50.0 -51.0 -48.0 -49.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -33.0 -30.0 -21.0 -27.0 -27.0 -27.0 -25.0 -23.0 -21.0 -22.0 -18.0 -15.0 -16.0 -11.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 6.0 14.0 10.0 4.0 3.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -17.0 -18.0 -23.0 -25.0 -29.0 -30.0 -31.0 -34.0 91 -194.0 -189.0 -190.0 -187.0 -182.0 -187.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -154.0 -151.0 -152.0 -147.0 -144.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -117.0 -114.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -99.0 -96.0 -93.0 -86.0 -87.0 -88.0 -85.0 -82.0 -77.0 -76.0 -71.0 -70.0 -71.0 -68.0 -65.0 -62.0 -61.0 -58.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -31.0 -30.0 -21.0 -27.0 -25.0 -28.0 -25.0 -23.0 -21.0 -22.0 -17.0 -13.0 -14.0 -9.0 -8.0 -5.0 -4.0 1.0 3.0 7.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 -31.0 92 -193.0 -194.0 -187.0 -190.0 -187.0 -182.0 -185.0 -180.0 -183.0 -176.0 -179.0 -174.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -156.0 -151.0 -150.0 -147.0 -146.0 -145.0 -143.0 -138.0 -137.0 -134.0 -133.0 -134.0 -131.0 -130.0 -125.0 -126.0 -121.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -108.0 -105.0 -102.0 -99.0 -94.0 -91.0 -84.0 -87.0 -86.0 -83.0 -80.0 -77.0 -76.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -59.0 -58.0 -53.0 -50.0 -49.0 -46.0 -49.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -21.0 -17.0 -13.0 -12.0 -9.0 -8.0 -3.0 -2.0 3.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -7.0 -8.0 -7.0 -8.0 -13.0 -18.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 93 -196.0 -193.0 -192.0 -187.0 -190.0 -185.0 -182.0 -185.0 -180.0 -181.0 -176.0 -177.0 -174.0 -171.0 -170.0 -167.0 -166.0 -161.0 -160.0 -159.0 -156.0 -157.0 -156.0 -149.0 -148.0 -147.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -133.0 -131.0 -130.0 -127.0 -124.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -108.0 -103.0 -102.0 -97.0 -92.0 -89.0 -84.0 -87.0 -84.0 -81.0 -80.0 -79.0 -78.0 -71.0 -72.0 -71.0 -64.0 -61.0 -62.0 -59.0 -60.0 -53.0 -48.0 -49.0 -46.0 -49.0 -44.0 -43.0 -42.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -19.0 -15.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 5.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 -2.0 -9.0 -8.0 -7.0 -8.0 -15.0 -18.0 -21.0 -20.0 -23.0 -25.0 -29.0 94 -197.0 -196.0 -193.0 -192.0 -187.0 -190.0 -183.0 -182.0 -185.0 -178.0 -181.0 -174.0 -177.0 -172.0 -171.0 -170.0 -165.0 -164.0 -161.0 -158.0 -159.0 -156.0 -157.0 -154.0 -147.0 -148.0 -145.0 -146.0 -142.0 -141.0 -138.0 -137.0 -134.0 -131.0 -133.0 -131.0 -128.0 -127.0 -122.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -106.0 -101.0 -100.0 -95.0 -90.0 -89.0 -84.0 -85.0 -82.0 -79.0 -80.0 -79.0 -78.0 -71.0 -72.0 -69.0 -62.0 -61.0 -62.0 -59.0 -60.0 -51.0 -48.0 -49.0 -46.0 -49.0 -44.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -36.0 -31.0 -28.0 -21.0 -25.0 -25.0 -26.0 -24.0 -24.0 -18.0 -17.0 -16.0 -13.0 -12.0 -9.0 -6.0 -3.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 4.0 0.0 1.0 1.0 -4.0 -7.0 -8.0 -7.0 -10.0 -15.0 -20.0 -21.0 -20.0 -23.0 -25.0 95 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -164.0 -159.0 -158.0 -160.0 -156.0 -155.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -141.0 -138.0 -137.0 -132.0 -131.0 -133.0 -129.0 -126.0 -127.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -110.0 -103.0 -104.0 -99.0 -98.0 -93.0 -90.0 -89.0 -84.0 -83.0 -80.0 -79.0 -80.0 -79.0 -78.0 -71.0 -70.0 -67.0 -62.0 -61.0 -62.0 -57.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -34.0 -31.0 -28.0 -21.0 -25.0 -25.0 -25.0 -24.0 -23.0 -16.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 2.0 1.0 -1.0 1.0 -4.0 -9.0 -8.0 -7.0 -12.0 -17.0 -22.0 -23.0 -20.0 -23.0 96 -201.0 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -162.0 -159.0 -156.0 -161.0 -156.0 -153.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -139.0 -138.0 -137.0 -132.0 -131.0 -134.0 -129.0 -124.0 -125.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -104.0 -99.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -77.0 -76.0 -71.0 -68.0 -65.0 -62.0 -61.0 -62.0 -57.0 -56.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -42.0 -39.0 -40.0 -35.0 -34.0 -35.0 -32.0 -31.0 -28.0 -21.0 -25.0 -25.0 -23.0 -22.0 -21.0 -14.0 -17.0 -16.0 -11.0 -8.0 -7.0 -4.0 1.0 0.0 5.0 4.0 9.0 10.0 14.0 10.0 4.0 3.0 0.0 1.0 -6.0 -7.0 -10.0 -9.0 -12.0 -19.0 -20.0 -23.0 -20.0 97 -200.0 -201.0 -200.0 -197.0 -200.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -170.0 -163.0 -162.0 -159.0 -156.0 -159.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -144.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -132.0 -129.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -109.0 -106.0 -101.0 -102.0 -97.0 -96.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -75.0 -74.0 -69.0 -66.0 -65.0 -62.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -34.0 -35.0 -32.0 -33.0 -28.0 -21.0 -25.0 -24.0 -23.0 -22.0 -19.0 -14.0 -17.0 -14.0 -9.0 -6.0 -5.0 -2.0 1.0 0.0 5.0 4.0 9.0 12.0 14.0 10.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -18.0 -21.0 98 -205.0 -200.0 -201.0 -200.0 -197.0 -198.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -168.0 -163.0 -160.0 -159.0 -156.0 -157.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -142.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -130.0 -127.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -112.0 -111.0 -106.0 -101.0 -102.0 -97.0 -94.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -78.0 -75.0 -72.0 -67.0 -68.0 -67.0 -62.0 -63.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -32.0 -33.0 -28.0 -21.0 -24.0 -22.0 -21.0 -20.0 -19.0 -14.0 -17.0 -12.0 -7.0 -4.0 -4.0 -4.0 0.0 -2.0 3.0 4.0 9.0 14.0 14.0 10.0 6.0 3.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -16.0 -19.0 -18.0 99 -206.0 -205.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -192.0 -185.0 -186.0 -181.0 -182.0 -181.0 -178.0 -179.0 -174.0 -173.0 -172.0 -169.0 -168.0 -163.0 -160.0 -157.0 -156.0 -157.0 -154.0 -153.0 -151.0 -146.0 -145.0 -142.0 -142.0 -138.0 -139.0 -136.0 -135.0 -132.0 -129.0 -128.0 -127.0 -122.0 -123.0 -122.0 -119.0 -116.0 -113.0 -110.0 -109.0 -104.0 -99.0 -102.0 -95.0 -92.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -77.0 -76.0 -73.0 -70.0 -67.0 -68.0 -67.0 -62.0 -61.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -34.0 -31.0 -28.0 -21.0 -24.0 -22.0 -19.0 -20.0 -19.0 -14.0 -15.0 -10.0 -5.0 -2.0 -4.0 -4.0 0.0 -2.0 3.0 6.0 9.0 14.0 14.0 10.0 6.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -15.0 -16.0 -19.0 100 -207.0 -206.0 -203.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -185.0 -184.0 -181.0 -182.0 -181.0 -178.0 -179.0 -172.0 -175.0 -172.0 -169.0 -166.0 -163.0 -158.0 -157.0 -156.0 -157.0 -153.0 -152.0 -151.0 -146.0 -143.0 -142.0 -140.0 -138.0 -139.0 -136.0 -133.0 -132.0 -127.0 -128.0 -127.0 -120.0 -123.0 -120.0 -117.0 -114.0 -111.0 -108.0 -107.0 -102.0 -99.0 -100.0 -93.0 -90.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -75.0 -74.0 -71.0 -70.0 -67.0 -68.0 -65.0 -60.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -44.0 -39.0 -40.0 -37.0 -32.0 -36.0 -36.0 -30.0 -27.0 -21.0 -24.0 -20.0 -19.0 -20.0 -17.0 -12.0 -13.0 -8.0 -3.0 -2.0 -4.0 -5.0 0.0 0.0 3.0 6.0 7.0 14.0 14.0 10.0 4.0 1.0 -2.0 -5.0 -6.0 -7.0 -14.0 -15.0 -16.0 101 -208.0 -209.0 -206.0 -205.0 -198.0 -203.0 -198.0 -197.0 -196.0 -191.0 -192.0 -183.0 -184.0 -181.0 -182.0 -181.0 -178.0 -177.0 -172.0 -173.0 -172.0 -167.0 -166.0 -161.0 -158.0 -157.0 -156.0 -156.0 -151.0 -152.0 -151.0 -144.0 -143.0 -140.0 -140.0 -138.0 -139.0 -134.0 -133.0 -130.0 -127.0 -128.0 -125.0 -120.0 -121.0 -118.0 -115.0 -112.0 -109.0 -106.0 -105.0 -102.0 -97.0 -98.0 -91.0 -90.0 -89.0 -88.0 -89.0 -84.0 -79.0 -78.0 -73.0 -72.0 -71.0 -70.0 -65.0 -66.0 -65.0 -60.0 -63.0 -62.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -42.0 -37.0 -40.0 -37.0 -32.0 -37.0 -35.0 -28.0 -27.0 -21.0 -22.0 -20.0 -19.0 -20.0 -15.0 -10.0 -11.0 -6.0 -3.0 -2.0 -4.0 -5.0 0.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 4.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -13.0 102 -213.0 -208.0 -207.0 -208.0 -207.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -177.0 -170.0 -173.0 -170.0 -167.0 -164.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -152.0 -149.0 -144.0 -141.0 -140.0 -140.0 -138.0 -137.0 -134.0 -131.0 -132.0 -127.0 -126.0 -127.0 -118.0 -119.0 -116.0 -113.0 -110.0 -107.0 -104.0 -105.0 -100.0 -95.0 -96.0 -91.0 -90.0 -89.0 -88.0 -87.0 -82.0 -77.0 -76.0 -71.0 -72.0 -71.0 -68.0 -63.0 -64.0 -65.0 -60.0 -63.0 -60.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -45.0 -40.0 -37.0 -40.0 -37.0 -32.0 -36.0 -33.0 -28.0 -27.0 -20.0 -22.0 -20.0 -19.0 -18.0 -13.0 -8.0 -9.0 -6.0 -3.0 -2.0 -4.0 -3.0 2.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 6.0 1.0 0.0 -3.0 -8.0 -5.0 -10.0 103 -210.0 -213.0 -208.0 -207.0 -208.0 -205.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -175.0 -170.0 -171.0 -170.0 -167.0 -162.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -140.0 -141.0 -138.0 -135.0 -132.0 -131.0 -132.0 -127.0 -126.0 -125.0 -118.0 -117.0 -116.0 -113.0 -112.0 -105.0 -104.0 -103.0 -100.0 -95.0 -94.0 -91.0 -92.0 -89.0 -86.0 -87.0 -84.0 -75.0 -74.0 -71.0 -72.0 -73.0 -68.0 -61.0 -64.0 -65.0 -60.0 -61.0 -58.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -43.0 -40.0 -37.0 -40.0 -37.0 -32.0 -34.0 -31.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -16.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 -2.0 -3.0 4.0 2.0 2.0 2.0 5.0 14.0 14.0 6.0 6.0 -1.0 0.0 -3.0 -8.0 -5.0 104 -215.0 -210.0 -213.0 -210.0 -207.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -179.0 -176.0 -177.0 -170.0 -171.0 -170.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -156.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -141.0 -136.0 -137.0 -132.0 -131.0 -132.0 -129.0 -126.0 -123.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -104.0 -101.0 -98.0 -93.0 -94.0 -91.0 -92.0 -89.0 -84.0 -85.0 -82.0 -75.0 -74.0 -71.0 -72.0 -71.0 -68.0 -61.0 -64.0 -67.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -47.0 -44.0 -45.0 -40.0 -37.0 -38.0 -37.0 -32.0 -32.0 -29.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -14.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 0.0 -1.0 4.0 2.0 2.0 4.0 7.0 14.0 14.0 5.0 4.0 -1.0 0.0 -3.0 -6.0 105 -218.0 -215.0 -210.0 -213.0 -210.0 -205.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -177.0 -176.0 -175.0 -170.0 -171.0 -168.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -139.0 -134.0 -139.0 -132.0 -131.0 -134.0 -129.0 -128.0 -121.0 -116.0 -115.0 -116.0 -109.0 -112.0 -105.0 -104.0 -103.0 -96.0 -93.0 -94.0 -93.0 -92.0 -89.0 -84.0 -85.0 -80.0 -75.0 -74.0 -71.0 -72.0 -71.0 -70.0 -61.0 -64.0 -65.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -45.0 -44.0 -45.0 -40.0 -37.0 -38.0 -36.0 -31.0 -30.0 -27.0 -26.0 -25.0 -18.0 -22.0 -18.0 -15.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 -2.0 2.0 -1.0 4.0 2.0 4.0 6.0 5.0 14.0 12.0 5.0 4.0 -1.0 2.0 -3.0 106 -219.0 -220.0 -215.0 -210.0 -213.0 -212.0 -205.0 -208.0 -205.0 -200.0 -199.0 -198.0 -197.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -175.0 -170.0 -171.0 -170.0 -167.0 -164.0 -159.0 -160.0 -158.0 -157.0 -156.0 -151.0 -152.0 -151.0 -144.0 -141.0 -136.0 -137.0 -134.0 -139.0 -132.0 -131.0 -132.0 -129.0 -126.0 -121.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -104.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -91.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -64.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -47.0 -42.0 -37.0 -37.0 -36.0 -29.0 -30.0 -29.0 -26.0 -23.0 -16.0 -20.0 -16.0 -13.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 0.0 2.0 -1.0 6.0 2.0 6.0 6.0 5.0 14.0 10.0 5.0 4.0 -1.0 2.0 107 -220.0 -219.0 -218.0 -215.0 -210.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -197.0 -198.0 -195.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -173.0 -170.0 -171.0 -168.0 -166.0 -163.0 -159.0 -160.0 -158.0 -157.0 -154.0 -151.0 -152.0 -149.0 -142.0 -139.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -130.0 -127.0 -124.0 -119.0 -114.0 -113.0 -114.0 -109.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -88.0 -89.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -62.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -45.0 -42.0 -37.0 -35.0 -34.0 -29.0 -30.0 -29.0 -24.0 -23.0 -16.0 -19.0 -16.0 -15.0 -12.0 -11.0 -10.0 -11.0 -4.0 1.0 0.0 2.0 1.0 8.0 2.0 6.0 6.0 6.0 14.0 8.0 5.0 4.0 -1.0 108 -223.0 -220.0 -219.0 -218.0 -217.0 -210.0 -209.0 -212.0 -205.0 -206.0 -203.0 -202.0 -197.0 -196.0 -195.0 -194.0 -193.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -176.0 -173.0 -170.0 -171.0 -169.0 -166.0 -163.0 -159.0 -161.0 -160.0 -155.0 -154.0 -153.0 -152.0 -147.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -128.0 -127.0 -122.0 -117.0 -112.0 -113.0 -114.0 -107.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -91.0 -86.0 -87.0 -82.0 -85.0 -80.0 -75.0 -72.0 -71.0 -70.0 -71.0 -70.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -47.0 -48.0 -44.0 -41.0 -39.0 -35.0 -34.0 -29.0 -30.0 -27.0 -22.0 -21.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -9.0 -4.0 1.0 0.0 2.0 0.0 8.0 2.0 6.0 8.0 6.0 14.0 8.0 5.0 4.0 109 -222.0 -223.0 -218.0 -219.0 -218.0 -217.0 -210.0 -209.0 -210.0 -203.0 -206.0 -201.0 -202.0 -197.0 -196.0 -195.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -174.0 -173.0 -170.0 -170.0 -167.0 -166.0 -163.0 -159.0 -161.0 -158.0 -155.0 -154.0 -153.0 -150.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -129.0 -126.0 -125.0 -120.0 -115.0 -112.0 -113.0 -112.0 -105.0 -104.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -89.0 -86.0 -87.0 -82.0 -83.0 -78.0 -75.0 -72.0 -71.0 -70.0 -71.0 -68.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -49.0 -47.0 -44.0 -39.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -22.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -7.0 -4.0 1.0 2.0 2.0 2.0 8.0 2.0 8.0 8.0 6.0 14.0 8.0 5.0 110 -227.0 -222.0 -223.0 -218.0 -219.0 -216.0 -215.0 -210.0 -209.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -191.0 -186.0 -187.0 -184.0 -181.0 -180.0 -177.0 -174.0 -171.0 -169.0 -168.0 -167.0 -166.0 -163.0 -159.0 -159.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -127.0 -124.0 -123.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -102.0 -101.0 -96.0 -91.0 -92.0 -89.0 -86.0 -87.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -49.0 -47.0 -42.0 -37.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -20.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 4.0 4.0 2.0 8.0 4.0 8.0 8.0 4.0 14.0 8.0 111 -228.0 -229.0 -222.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -203.0 -206.0 -201.0 -202.0 -199.0 -196.0 -195.0 -192.0 -191.0 -186.0 -187.0 -186.0 -183.0 -178.0 -179.0 -174.0 -173.0 -171.0 -170.0 -167.0 -164.0 -165.0 -161.0 -161.0 -160.0 -157.0 -154.0 -149.0 -146.0 -145.0 -144.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -129.0 -124.0 -121.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -100.0 -99.0 -96.0 -89.0 -90.0 -89.0 -86.0 -87.0 -80.0 -79.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -48.0 -45.0 -40.0 -35.0 -39.0 -39.0 -32.0 -27.0 -26.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -17.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 6.0 4.0 2.0 8.0 4.0 8.0 8.0 6.0 14.0 112 -233.0 -228.0 -227.0 -224.0 -227.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -197.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -170.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -157.0 -154.0 -151.0 -148.0 -145.0 -146.0 -139.0 -136.0 -135.0 -134.0 -133.0 -128.0 -127.0 -122.0 -121.0 -118.0 -113.0 -112.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -97.0 -94.0 -89.0 -90.0 -89.0 -86.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -46.0 -43.0 -40.0 -35.0 -40.0 -37.0 -32.0 -27.0 -24.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -15.0 -10.0 -11.0 -8.0 -5.0 -2.0 3.0 6.0 4.0 4.0 8.0 4.0 6.0 8.0 8.0 113 -234.0 -233.0 -228.0 -227.0 -224.0 -225.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -195.0 -192.0 -189.0 -188.0 -187.0 -182.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -168.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -133.0 -134.0 -133.0 -128.0 -125.0 -122.0 -121.0 -118.0 -113.0 -110.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -95.0 -92.0 -89.0 -90.0 -89.0 -86.0 -83.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -66.0 -61.0 -58.0 -55.0 -56.0 -55.0 -52.0 -52.0 -47.0 -44.0 -43.0 -40.0 -35.0 -38.0 -35.0 -30.0 -25.0 -22.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -13.0 -10.0 -11.0 -8.0 -3.0 0.0 3.0 6.0 4.0 4.0 8.0 6.0 6.0 8.0 114 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -199.0 -194.0 -197.0 -192.0 -189.0 -190.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -161.0 -158.0 -155.0 -152.0 -151.0 -150.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -131.0 -128.0 -125.0 -120.0 -119.0 -116.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -103.0 -98.0 -93.0 -92.0 -89.0 -90.0 -89.0 -84.0 -83.0 -80.0 -81.0 -78.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -54.0 -52.0 -50.0 -45.0 -42.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -23.0 -22.0 -25.0 -18.0 -19.0 -14.0 -17.0 -14.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 8.0 4.0 4.0 8.0 8.0 8.0 115 -238.0 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -194.0 -195.0 -192.0 -189.0 -188.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -159.0 -156.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -129.0 -128.0 -123.0 -120.0 -119.0 -114.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -101.0 -96.0 -93.0 -92.0 -89.0 -90.0 -87.0 -84.0 -83.0 -80.0 -81.0 -76.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -56.0 -52.0 -51.0 -48.0 -43.0 -42.0 -43.0 -40.0 -33.0 -34.0 -31.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 2.0 5.0 8.0 4.0 6.0 8.0 8.0 116 -241.0 -240.0 -235.0 -234.0 -235.0 -230.0 -229.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -210.0 -205.0 -206.0 -201.0 -200.0 -199.0 -194.0 -195.0 -194.0 -191.0 -190.0 -187.0 -184.0 -179.0 -177.0 -180.0 -175.0 -174.0 -171.0 -170.0 -171.0 -166.0 -165.0 -160.0 -159.0 -158.0 -155.0 -154.0 -151.0 -150.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -126.0 -125.0 -122.0 -119.0 -116.0 -111.0 -112.0 -109.0 -110.0 -103.0 -104.0 -101.0 -98.0 -95.0 -94.0 -89.0 -90.0 -87.0 -84.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -55.0 -50.0 -49.0 -46.0 -43.0 -42.0 -41.0 -38.0 -31.0 -32.0 -29.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -11.0 -6.0 -5.0 -4.0 1.0 2.0 5.0 8.0 4.0 8.0 8.0 117 -242.0 -243.0 -238.0 -235.0 -236.0 -233.0 -228.0 -231.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -212.0 -205.0 -208.0 -203.0 -200.0 -201.0 -194.0 -193.0 -192.0 -191.0 -190.0 -188.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -169.0 -168.0 -163.0 -158.0 -159.0 -160.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -124.0 -123.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -108.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -87.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -66.0 -63.0 -57.0 -55.0 -55.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -38.0 -31.0 -30.0 -31.0 -30.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -12.0 -11.0 -4.0 -5.0 -4.0 3.0 0.0 5.0 10.0 6.0 10.0 118 -243.0 -242.0 -241.0 -238.0 -235.0 -236.0 -231.0 -228.0 -229.0 -224.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -201.0 -194.0 -191.0 -192.0 -189.0 -189.0 -186.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -167.0 -166.0 -163.0 -158.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -143.0 -142.0 -139.0 -136.0 -131.0 -130.0 -129.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -106.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -64.0 -62.0 -57.0 -54.0 -53.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -36.0 -31.0 -30.0 -31.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -5.0 -2.0 3.0 0.0 5.0 10.0 8.0 119 -246.0 -243.0 -242.0 -241.0 -238.0 -235.0 -234.0 -231.0 -228.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -215.0 -212.0 -209.0 -210.0 -205.0 -206.0 -203.0 -200.0 -199.0 -194.0 -191.0 -190.0 -188.0 -187.0 -186.0 -185.0 -181.0 -177.0 -178.0 -177.0 -172.0 -171.0 -170.0 -167.0 -164.0 -163.0 -158.0 -159.0 -156.0 -153.0 -152.0 -147.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -128.0 -127.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -112.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -95.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -79.0 -80.0 -77.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -63.0 -60.0 -57.0 -54.0 -51.0 -48.0 -49.0 -46.0 -43.0 -40.0 -37.0 -34.0 -31.0 -30.0 -29.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -3.0 -2.0 3.0 2.0 7.0 12.0 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-5.html"},{"title":"混合ガウス分布のEMアルゴリズム","text":"クラスタリング で省略した、混合ガウス分布のEMアルゴリズムの計算過程を記述します。 EMアルゴリズム 観測データ \\(\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) に対する対数尤度関数は、 \\((9.7)\\) から以下のように書けます。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ E step $$\\begin{aligned} p(z_{k}=1|\\mathbf{x}) &\\equiv \\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{p(\\mathbf{x})}\\qquad (\\because\\text{Bayes' theorem})\\\\ &\\propto p(z_{k}=1)p(\\mathbf{x}|z_{k}=1) \\\\ &=\\pi_k\\mathcal{N}(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ なので、総和が \\(1\\) になるように正規化を行えば 負担率 が以下のように求まります。 $$\\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) =\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13)$$ ※ なお、この時分母である \\(\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})\\) が \\(p(\\mathbf{x})\\) であることは有用です。 （ 生物データマイニング論 第1回 では、これを用いて可視化していました。） Maximization step ※ 対数尤度関数 \\((9.14)\\) を \\(\\ln L\\) と記述します。 \\(\\boldsymbol{\\mu}_k\\) 対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\mu}_k\\) で微分します。この時 正規分布は \\(e&#94;{\\text{hoge}}\\) という形をしており、微分しても形が変わらないので、 $$\\begin{aligned} \\frac{\\partial\\ln L}{\\partial\\boldsymbol{\\mu}_k} &= \\sum_{i=n}&#94;N \\frac{\\pi_k\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= \\boldsymbol{\\Sigma}_k&#94;{-1}\\sum_{n=1}&#94;N \\gamma_{nk}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= 0\\\\ \\therefore\\boldsymbol{\\mu}_k&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.17)\\\\ \\end{aligned}$$ と最適解が求まりました。 \\(\\pi_k\\) パラメータ \\(\\pi_k\\) については、 \\(\\sum_{k=1}&#94;K \\pi_k = 1\\) という制約に注意する必要があります。ですが、 隠れマルコフモデルの最尤推定 で行なった能登同様に、ラグランジュの未定乗数 \\(\\lambda\\) を導入すればこの問題は解けます。 $$L_{\\lambda} = \\log L + \\lambda\\left(\\sum_{c=1}&#94;K \\pi_c - 1\\right)$$ の導関数が \\(0\\) となる条件を求める事になるので、 $$\\begin{aligned} \\frac{\\partial L_{\\lambda}}{\\partial\\pi_k} &= \\sum_{n=1}&#94;N \\frac{\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_k \\pi_k \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)} + \\lambda\\\\ &= \\sum_{n=1}&#94;N \\frac{\\gamma_{nk}}{\\pi_k} + \\lambda = 0 &\\therefore \\pi_k = -\\frac{1}{\\lambda}\\sum_{n=1}&#94;N \\gamma_{ic}\\\\ \\frac{\\partial L_{\\lambda}}{\\partial\\lambda} &= \\sum_{k=1}&#94;K \\pi_k - 1\\\\ &= \\left(-\\frac{1}{\\lambda}\\sum_{k=1}&#94;K\\sum_{n=1}&#94;N \\gamma_{nk}\\right) - 1 = 0 &\\therefore \\lambda = -n \\end{aligned}$$ より、 $$\\pi_k&#94;{\\star} = \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} \\qquad(9.22)$$ と最適解が求まりました。 \\(\\boldsymbol{\\Sigma}_k\\) \\(\\boldsymbol{\\mu}_k\\) と同様に、対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\Sigma}_k\\) で微分します。すると、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\log L = \\sum_{n=1}&#94;N\\frac{\\pi_k\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}$$ となります。ここで、 \\(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\) を計算すると、 $$\\begin{aligned} &\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\biggr)\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\left(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\right)\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(-\\frac{1}{2}\\biggr)|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\quad (\\ast1)\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\frac{1}{2}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\quad (\\ast2)\\\\ =&-\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)+\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{1}{2}\\left\\{\\boldsymbol{\\Sigma}_k&#94;{-1}-\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\right\\}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ したがって、 $$ \\boldsymbol{\\Sigma}_k&#94;{\\star}= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.19) $$ と最適解が求まりました。 ※ \\(\\ast1,\\ast2\\) の式変形は以下でより詳細に説明します。 が、その前にいくつか基本事項の定義を振り返ります。 行列式 $$\\det A=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)\\prod_{i=1}&#94;na_{i\\sigma(i)}=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)a_{1\\sigma(1)}a_{2\\sigma(2)}\\cdots a_{n\\sigma(n)}$$ \\(\\sigma\\) は \\(1\\) から \\(n\\) の置換（順列）を表す。 \\(\\mathrm{sgn}(\\sigma)\\) は置換の符号を表す。なお、\b置換の符号は 互\b換の数 に注目しており、奇置換（互換の数が奇数個）なら \\(-1\\) 、偶置換なら \\(+1\\) \b\b 余韻子 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\(i\\) 行と \\(i\\) 列を \\(1\\) つずつ取り去って作られる小行列を \\(M_{ij}\\) とする。つまり、 $$ M_{ij} = \\small \\left[ \\begin{array}{ccc} a_{11} & \\cdots &a_{1\\hspace{1mm}j-1} & a_{1\\hspace{1mm}j+1} & \\cdots & a_{1n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{i-1 \\hspace{1mm} 1} & \\cdots &a_{i-1\\hspace{1mm}j-1} & a_{i-1\\hspace{1mm}j+1} & \\cdots & a_{i-1 \\hspace{1mm}n} \\\\ a_{i+1 \\hspace{1mm} 1} & \\cdots &a_{i+1\\hspace{1mm}j-1} & a_{i+1\\hspace{1mm}j+1} & \\cdots & a_{i+1 \\hspace{1mm}n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{n1} &\\cdots &a_{n\\hspace{1mm}j-1} & a_{n\\hspace{1mm}j+1} &\\cdots &a_{nn} \\end{array} \\right] $$ です。ここで、 \\(\\Delta_{ij}=(-1)&#94;{i+j}|M_{ij}|\\) とすると、以下の 余因子展開 ができます。 \\(A\\) の行列式は \\(j\\) 列に関して、以下のように展開されます。 $$\\det A=\\Delta_{1j}a_{1j}+\\Delta_{2j}a_{2j}+\\cdots+\\Delta_{nj}a_{nj}$$ \\(A\\) の行列式は \\(i\\) 行に関して、以下のように展開されます。 $$\\det A=\\Delta_{i1}a_{i1}+\\Delta_{i2}a_{i2}+\\cdots+\\Delta_{in}a_{in}$$ \b 余韻子行列 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\((i, j)\\) 余因子を \\((j, i)\\) 成分に持つ行列 $$\\tilde{A} := \\begin{pmatrix}&\\Delta_{11}&\\Delta_{21}&\\cdots&\\Delta_{n1}\\\\&\\Delta_{21}&\\Delta_{22}&\\ldots&\\Delta_{n2}\\\\&\\vdots&\\vdots&\\ddots&\\vdots\\\\&\\Delta_{n1}&\\Delta_{n2}&\\cdots&\\Delta_{nn}\\end{pmatrix}$$ を 余韻子行列 と呼びます。ここで、余韻子展開を考えれば、余韻子行列に関して、 $$\\tilde{A}A=A\\tilde{A}=\\det(A)I_n$$ が成り立つことがわかります。 \\(\\ast1\\) の変形 以上を踏まえると、 \\(\\frac{\\partial\\det(A)}{\\partial a_{ij}} = \\Delta_{ij}\\) なので、 $$\\frac{\\partial|\\Sigma|}{\\partial\\Sigma} =\\tilde\\Sigma = |\\Sigma|\\Sigma&#94;{-1}$$ が成り立ち、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}} =-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-\\frac{3}{2}}\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\boldsymbol{\\Sigma_k}=-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma_k}&#94;{-1}$$ となることがわかります。 トレースと固有値の関係性 【命題】 トレースには、 \\(Tr(A) = \\sum_{k=1}&#94;{n}\\lambda_{k}\\) という関係がある。 トレース： \\(n\\times n\\) の正方行列 \\(A\\) に対して、\b対角成分の和 \\(\\sum_{k=1}&#94;{n}a_{kk}\\) を \\(A\\) のトレースと呼び、 \\(\\mathrm{Tr}(A),\\mathrm{tr}A\\) \b と表す。 【証明】 まず、固有方程式は、 $$\\phi(t) = |A-tI| = \\left|\\begin{array}{cccc} a_{11}-t & a_{12} & \\ldots & a_{1n} \\\\ a_{21} & a_{22}-t & \\ldots & a_{2n} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_{n1} & a_{n2} & \\ldots & a_{nn}-t \\end{array} \\right|$$ である。ここで、 \\(t\\) の係数に着目する。 \\(t&#94;n\\) の係数 これは、対角成分を全て掛け合わせた次の多項式 $$(a_{11}-t)(a_{22}-t)\\ldots(a_{nn}-t)$$ における \\(t&#94;n\\) の係数と等しくなる。よって、係数は「 \\((-1)&#94;n\\) 」 \\(t&#94;{n-1}\\) の係数 これも\b、先ほどの多項式の \\(t&#94;{n-1}\\) の係数と等しくなる。（ \\(\\because\\) 余韻子展開を考える。 \\(\\sigma\\) が全単射のため、１行（列）対角成分ではないものがあると、\b少なくともあと１つは体格成分でないものがあることがわかる。） 定数項 これは、\b余韻子展開を考えれば \\(|A|\\) そのもの。 よって、係数は「 \\((-1)&#94;{n-1}(a_{11}+a_{22}+\\ldots+a_{nn})\\) 」であり、これは対角和を用いて「 $(-1)&#94;{n-1}\\mathrm{Tr}(A) $ 」とも書ける。 一方先ほどの固有方程式は固有値を解に持つ。 つまり、 \\(A\\) の固有値を \\(\\lambda_1\\) 〜 \\(\\lambda_n\\) として、 $$\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)$$ とかける。（ \\((-1)&#94;n\\) によって、 \\(t&#94;n\\) の係数を合わせている。） この式を展開すると、 \\(t&#94;{n-1}\\) の係数が「 \\((-1)&#94;{n-1}(\\lambda_1+\\lambda_2+\\ldots+\\lambda_n)\\) 」であることから $$\\mathrm{Tr}(A) = \\lambda_1+\\lambda_2+\\ldots+\\lambda_n$$ ※ちなみに、 \\(\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)\\) の定数項を考えることで、 $$|A| = \\lambda_1\\lambda_2\\ldots\\lambda_n$$ であることもわかる。 トレースの循環性 \\(A\\) を \\(m \\times n\\) 、 \\(B\\) を \\(n \\times m\\) の行列とすると、 \\(AB\\) は \\(m \\times m\\) の行列であり、 $$ \\begin{aligned} \\mathrm{Tr}[AB]&= \\sum_{i=1}&#94;{m} (AB)_{ii} \\\\&= \\sum_{i=1}&#94;{m}\\sum_{j=1}&#94;{n} A_{ij}B_{ji} \\\\&= \\sum_{j=1}&#94;{n} \\sum_{i=1}&#94;{m} B_{ji} A_{ij} \\\\&= \\sum_{j=1}&#94;{n} (BA)_{jj} \\\\&= \\mathrm{Tr}[BA] \\end{aligned} $$ となる。これを応用すれば、以下の 循環性 が証明できる。 \\(A,B,C\\) をそれぞれ \\(m\\times n,n \\times l,l \\times m\\) の行列とするとき、 $$\\begin{aligned} \\mathrm{Tr}[ABC] =& \\mathrm{Tr}[BCA] \\\\=& \\mathrm{Tr}[CAB] \\end{aligned} $$ が成り立つ。（ \\(\\because\\) ２つの\b行列積をセットで考えれば明らか） 逆行列の微分 正則行列 \\(A\\) に対して、 \\(A&#94;{-1}A=I\\) が成立するので、\bこの等式の両辺を \\(A\\) で微分して、 $$\\begin{aligned} \\biggr(\\frac{\\partial }{\\partial A}A&#94;{-1}\\biggl)A + A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl) = 0\\\\ \\biggr(\\frac{\\partial A&#94;{-1}}{\\partial A}\\biggl) = -A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl)A&#94;{-1} \\end{aligned}$$ シングルエントリ行列 \\((i,j)\\) 成分のみが \\(1\\) で、残りが全て \\(0\\) の行列 \\(\\mathbf{J}&#94;{ij}\\) を シングルエントリ行列 と呼ぶ。なお、\b以下の式が成り立つ。 $$\\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{ij}\\bigl)=\\mathbf{A}_{ji}$$ \b \\(2 \\times 2\\) の行列でこれを示す。 $$\\begin{aligned} \\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{12}\\bigl)&=\\mathrm{Tr}\\biggr(\\begin{pmatrix}a_{11}&a_{12}\\\\a_{21}&a_{22}\\end{pmatrix}\\begin{pmatrix}0&1\\\\0&0\\end{pmatrix}\\biggl)\\\\ &=\\mathrm{Tr}\\begin{pmatrix}0&a_{11}\\\\0&a_{21}\\end{pmatrix}\\\\ &=a_{21}\\\\ &=\\mathbf{A}_{21} \\end{aligned}$$ \\(\\ast2\\) の変形 以上を踏まえれば、 $$\\begin{aligned} \\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu}) &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr((\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\biggl)\\\\ &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\frac{\\partial\\boldsymbol{\\Sigma}}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\biggl)\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ji}\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ij}\\\\ \\end{aligned}$$ よって、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})=-\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html"},{"title":"クラスタリング","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 講義の方針 データ解析アルゴリズムは、生物学の研究に不可欠 R や python のパッケージとして、すぐダウンロードして使うことができる。 しかし、原理を知らずに使うと、アルゴリズムの出す結果を盲信することになり危険。 正しい理解：結果を疑えるようになること。 階層的クラスタリング クラスタリング データ点を クラスタ（互いに類似したグループ） に分割する。 距離尺度：ユークリッド距離、コサイン距離など。 階層的クラスタリング 最初は各点がクラスタとなる。 二つのクラスタを選んで合併していく。 Single Link ：二つのクラスタをまたぐ最近点の距離 chaining により、ゆるいクラスタができる （非推奨） Complete Link ：二つのクラスタをまたぐ最遠点の距離 最も固いクラスタができるが、細かく分け過ぎる傾向がある。 Average Link ：二つのクラスタをまたぐ点対の平均距離 最もバランスがとれており、通常はこれを用いる。 最後は一つのクラスタになる。 デンドログラム ：合併の過程を樹形図の形で表したもの。 K-Means 分割的クラスタリング の一手法。$K$ クラスにデータ点を分割する。 以下を繰り返す。 各データ点 $\\mathbf{x}$ を最も近い中心点 $\\mu_k$ に割り当てて、クラスタ $c_1,\\ldots,c_K$ を作成する。 割当を元に中心点を計算しなおす。 $$\\mu_k = \\sum_{j\\in C_i} \\mathbf{x}_j$$ 実装 In [1]: import numpy as np import matplotlib.pyplot as plt Data. In [2]: np . random . seed ( 0 ) In [3]: N = 30 ; K = 5 vmin = 0 ; vmax = 1 In [4]: # Training Data. data = np . random . uniform ( vmin , vmax , ( N , 2 )) x , y = data . T In [5]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [6]: # Background Color Xs , Ys = np . meshgrid ( np . linspace ( vmin , vmax , 100 ), np . linspace ( vmin , vmax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.KMeans.KMeans ） を使って学習させます。 In [7]: from kerasy.ML.KMeans import KMeans In [8]: model = KMeans ( K = K , random_state = 0 ) In [9]: model . fit ( data ) Visualization. In [10]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [11]: # For Visualization. plt_model = KMeans ( K = K ) In [12]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( idx , mu ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Plot Representative points(µk) of each class. mux , muy = mu . T ax . scatter ( mux , muy , marker = 'x' , c = \"red\" , s = 200 ) # Background. plt_model . mu = mu Z , _ = plt_model . predict ( XYs ) Zs = Z . reshape ( Xs . shape ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( vmin , vmax ) ax . set_ylim ( vmin , vmax ) ax . set_title ( f \"Iteration. { i : >02 } \" ) plt . show () 混合ガウス分布 混合ガウス分布は、次のように混合係数 $\\pi_k$ でガウス分布を線形重ね合わせした形でかける。 $$p(\\mathbf{x}) = \\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\qquad (9.7)$$ ここで、 二値ベクトル（1-of-K符号化法） $\\mathbf{z}$ の周辺分布は、$0\\leq\\pi_k\\leq1$ と $\\sum_{k=1}&#94;K\\pi_k = 1 $ を満たす $\\pi_k$ を用いて、 $$p\\left(\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\pi_k&#94;{z_k}\\qquad (9.9)$$ と書ける。また、$\\mathbf{z}$ が与えられた時の $\\mathbf{x}$ の事後分布は当然ながら次のガウス分布である。 $$p\\left(\\mathbf{x}|\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)&#94;{z_k}\\qquad(9.11)$$ EMアルゴリズム 観測データ $\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}$ に対する対数尤度関数は、$(9.7)$ から以下のように書ける。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ Expectation step M stepで必要となる $\\gamma(z_{nk})$ を求める。 この値は、$\\mathbf{x}$ が与えられた下での $\\mathbf{z}$ の条件付き確率であり、混合要素 $k$ が $\\mathbf{x}$ の観測を 「説明する」 度合いを表す 負担率(responsibility) として解釈することもできる。 $$ \\begin{aligned} \\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) &=\\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{\\sum_{j=1}&#94;{K}p(z_{j}=1)p(\\mathbf{x}|z_{j}=1)}\\\\ &=\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13) \\end{aligned} $$ Maximization step M stepでは、尤度関数を最大化するように各パラメータの値を更新する。 ※ 導出過程は 混合ガウス分布のEMアルゴリズム に載せています。 $$ \\begin{aligned} \\boldsymbol{\\mu}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.17)\\\\ \\boldsymbol{\\Sigma}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.19)\\\\ \\pi_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} & (9.22) \\end{aligned} $$ 実装 Data. In [13]: np . random . seed ( 0 ) In [14]: N = 150 ; K = 3 In [15]: # Train Data. data = np . concatenate ([ np . random . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 0 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [16]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [17]: # Background Color xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.MixedDistribution.MixedGaussian ） を使って学習させます。 In [18]: from kerasy.ML.MixedDistribution import MixedGaussian In [19]: model = MixedGaussian ( K = K , random_state = 1234 ) In [20]: model . fit ( data , span = 20 ) Visualization. In [21]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [22]: # For Visualization. plt_model = MixedGaussian ( K = K ) plt_model . N , plt_model . M = data . shape In [23]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( epoch , idx , mu , S , pi ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Background. plt_model . mu = mu plt_model . S = S plt_model . pi = pi Z = plt_model . predict ( XYs ) Zs = np . sum ( Z , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( xmin , xmax ) ax . set_ylim ( ymin , ymax ) ax . set_title ( f \" { epoch : >02 } epochs.\" ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html"},{"title":"イントロダクション","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 講義予定 前半（山崎担当） 画像の操作 画像の特徴抽出・内容理解・構造化 機械学習一般 後半（相澤担当） 画像を撮る：カメラの内部処理・センサ・レンズ・標本化 画像を表現する。色の知覚・表現 画像の基礎的な処理。周波数変換、線形・非線形フィルタリング # 日付 担当 内容 1 9/30(月) 山崎 画像・映像を中心とした現在の技術動向の紹介、低次・領域・局所画像特徴 2 10/7(月) 山崎 特徴選択、特徴表現 3 10/21(月) 山崎 機械学習概論、教師なし学習、クラスタリング 4 10/28(月) 山崎 機械学習 (NN, SVM, RF) 5 11/7(木) 山崎 深層学習 (Deep Neural Networks) 6 11/11(月) 山崎 動画像処理 (ブロックマッチング、背景差分、オプティカルフロー) 7 11/13(水) 山崎 3次元空間情報の取得と処理 8 11/18(月) 相澤 デジタルカメラ系 9 11/25(月) 相澤 表色系 10 12/9(月) 相澤 フィルタリング 11 12/16(月) 相澤 画像復元 12 12/23(月) 相澤 画像符号化 13 12/25(水) 相澤 特徴抽出 13 1/27 テスト パターン認識一般 現在は、90%位が 学習ベース(data-driven) 。残りが解析的手法。最近はこのhybridも。 全体的な流れ 学習(training) 検証(validation)←パラメータ最適化 推論(test, inference) なぜ今 学習ベース なのか？ データの大規模化：インターネット上から大量に収集可。 計算機の進化：ムーアの法則による高速化。さらにはクラウド 労働力のクラウド化 画像特徴 低次特徴量 色ヒストグラム（RGB,HSV,L*a*b*）：単純計算すると \\(256&#94;3\\) 個binができるので、注意。 色共起ヒストグラム（Correlogram）：隣接ピクセルの色を踏まえたヒストグラム 円、コーナー直線の数・大きさ・長さ 物体の円度、曲率等 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html"},{"title":"matplotlibチートシート","text":"In [1]: import numpy as np import matplotlib.pyplot as plt $N$ 枚の画像を plot Vsize , Hsize = () # 画像の横の長さと縦の長さ。 n_fig = \"画像の枚数\" n_col = \"横に並ぶ数\" n_row = n_fig // n_col + 1 if n_fig % n_col != 0 else n_fig // n_col # 行数を計算。 fig = plt . figure ( figsize = ( Vsize * n_col , Hsize * n_row )) for i , hoge in enumerate ( HOGEs ): ax = fig . add_subplot ( row , col , i + 1 ) \"\"\" 描きたいオブジェクトをプロット \"\"\" plt . tight_layout () plt . show () $N$ 色をグラデーション的に利用。 In [2]: import matplotlib.pyplot as plt import matplotlib.cm as cm N = 30 for n in range ( N ): plt . plot (( 0 , 1 ),( 0 , n ), color = cm . jet ( n / N )) plt . show () gifの画像の作成 上のようにやって全ての画像をまとめた一枚の画像を出力しても良いが、 n_fig = \"画像の枚数\" digit = len ( str ( N )) for i , hoge in enumerate ( HOGEs ): ax = fig . add_subplot ( row , col , i + 1 ) plt . figure ( figsize = \"サイズ\" ) \"\"\" 描きたいオブジェクトをプロット \"\"\" plt . savefig ( f \"img { i : >0 { digit }} .png\" ) として連番の画像を作成し、それを以下のプログラムでgif画像にした方が見やすい場合もある from PIL import Image N = 30 digit = len ( str ( N )) images = [] for i in range ( N ): img = Image . open ( f \" { i : >0 { digit }} .png\" ) images . append ( img ) images [ 0 ] . save ( 'out.gif' , save_all = True , append_images = images [ 1 :], loop = 0 , duration = 300 ) # loop=0: 無限ループ # duration: 一枚あたりの表示時間[ms] cmaps In [3]: cmaps = [ 'Accent' , 'Blues' , 'BrBG' , 'BuGn' , 'BuPu' , 'CMRmap' , 'Dark2' , 'GnBu' , 'Greens' , 'Greys' , 'OrRd' , 'Oranges' , 'PRGn' , 'Paired' , 'Pastel1' , 'Pastel2' , 'PiYG' , 'PuBu' , 'PuBuGn' , 'PuOr' , 'PuRd' , 'Purples' , 'RdBu' , 'RdGy' , 'RdPu' , 'RdYlBu' , 'RdYlGn' , 'Reds' , 'Set1' , 'Set2' , 'Set3' , 'Spectral' , 'Wistia' , 'YlGn' , 'YlGnBu' , 'YlOrBr' , 'YlOrRd' , 'afmhot' , 'autumn' , 'binary' , 'bone' , 'brg' , 'bwr' , 'cividis' , 'cool' , 'coolwarm' , 'copper' , 'cubehelix' , 'flag' , 'gist_earth' , 'gist_gray' , 'gist_heat' , 'gist_ncar' , 'gist_rainbow' , 'gist_stern' , 'gist_yarg' , 'gnuplot' , 'gnuplot2' , 'gray' , 'hot' , 'hsv' , 'inferno' , 'jet' , 'magma' , 'nipy_spectral' , 'ocean' , 'pink' , 'plasma' , 'prism' , 'rainbow' , 'seismic' , 'spring' , 'summer' , 'tab10' , 'tab20' , 'tab20b' , 'tab20c' , 'terrain' , 'viridis' , 'winter' ] In [4]: matrix = np . arange ( 100 ) . reshape ( 10 , 10 ) In [5]: Vsize , Hsize = ( 4 , 4 ) n_fig = len ( cmaps ) n_col = 4 n_row = n_fig // n_col + 1 if n_fig % n_col != 0 else n_fig//n_col In [6]: fig = plt . figure ( figsize = ( Vsize * n_col , Hsize * n_row )) for i , cmap in enumerate ( cmaps ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) ax . matshow ( matrix , cmap = cmap ) ax . set_title ( f \"↓ { cmap } ↓\" , fontsize = 24 ), ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-0.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-0.html"},{"title":"生物物理学 第1回","text":"講師： 能瀬聡直 講義資料： 生物物理学 参考書： 神経科学 -脳の探求- 参考書： ニューロンの生物物理 講義概要 生物物理学とは 遺伝情報の流れ 蛋白質の構造と機能 細胞内タンパク質のダイナミックス 遺伝子操作技術 ゲノム科学とバイオインフォマティックス バイオイメージング、生体分子計測 脳・神経系の生物物理 講義日程 # 日付 担当 1 9/25 能瀬 2 10/2 樋口 3 10/9 樋口 4 10/16 樋口 5 10/23 樋口 6 10/30 樋口 7 11/6 樋口 8 11/20 能瀬 9 11/27 能瀬 10 12/4 樋口 11 12/11 能瀬 12 12/18 能瀬 13 1/8 能瀬 14 1/15 能瀬 生物物理学とは？ 物理の手法で生物を見る。 生体分子の機能や構造の研究。 対象は広範囲、ただし物理的理念を背景にもつ。 生体高分子の構造・機能、脳・神経機構など単なる記述中心の従来の生物学と異なり、論理的な思考法を用い、より普遍的な原理を見いだすことを目指している。 生物物理の代表的発見 DNA二重螺旋構造の発見（1953年、1962年ノーベル生理医学賞） 蛋白質の高次構造の解析（1960年、1962年ノーベル化学賞） 神経活動のイオン機構の解明（1953年、1963年ノーベル生理医学賞） 最近の技術革新 ヒトゲノム計画 ヒトの全遺伝子の設計図解読の終了（2000年） イメージング技術 蛍光蛋白質・レーザー顕微鏡（1990年代） 1分子観測・1分子操作 溶液中での蛋白質1分子の観察（1990年代） 神経回路の作動原理の解明に向けた従来の3つのアプローチ 解剖学(Anatomy) 神経の配線を明らかにする。 生理学(Physiology) 神経活動を測定・操作する。 理論 神経活動パターンから原理を抽出 Part1. Introduction 脳神経系における情報の流れ ニューロンの構成 脳とコンピューター 半導体 ↔︎ 半導体素子 ↔︎ 集積回路 ↔︎ コンピューター 分子 ↔︎ 神経細胞 グリア細胞 ↔︎ 神経回路 ↔︎ 脳 活動電位の特徴 全か無か： \\(\\mathrm{Na}\\) チャネル活性化に閾値がある。 一過性： \\(\\mathrm{Na}\\) チャネル不活性化 確実に伝播 一体、どのような構造を持った神経回路の中を、どのように信号が伝わることで特定の演算が創発されるのか。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html"},{"title":"HMMをpythonで実装","text":"（kerasy.ML.HMM.HMM） の使い方 自作のモジュール （kerasy.ML.HMM.HMM） を使って実装をします。 In [1]: from kerasy.ML.HMM import HMM In [2]: model = HMM () In [3]: # 以下のようなパラメタファイルを読み込む。 ! cat params.json { \"M\": 4, \"K\": 4, \"basetypes\": [\"a\", \"c\", \"g\", \"u\"], \"pi\": [0.7, 0.1, 0.1, 0.1], \"A\": [[0.8, 0.1, 0.1, 0.0], [0.0, 0.8, 0.1, 0.1], [0.1, 0.0, 0.8, 0.1], [0.1, 0.0, 0.1, 0.8]], \"phi\": [[0.4, 0.1, 0.1, 0.4], [0.25, 0.25, 0.25, 0.25], [0.1, 0.4, 0.4, 0.1], [0.3, 0.2, 0.2, 0.3]] } In [4]: model . load_params ( \"params.json\" ) In [5]: # インスタンスに読み込まれた各種パラメータ model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 In [6]: # なお、この時以下のような辞書を同時に作成しています。 print ( model . base2int ) print ( model . int2base ) {'a': 0, 'c': 1, 'g': 2, 'u': 3} {0: 'a', 1: 'c', 2: 'g', 3: 'u'} In [7]: # また、パラメータはnumpyの行列の形で読み込まれています。 print ( type ( model . pi )) print ( type ( model . A )) print ( type ( model . phi )) In [8]: # 以下のようにすれば、学習したパラメタを同じ形式で出力することができます。 model . save_params ( \"out.json\" ) Viterbi algorithm HMMのViterbiアルゴリズムを実装して、尤もらしいサンプル配列の隠れ状態列を推定します。 In [9]: from kerasy.utils.bio import alignStr , readMonoSeq , readMultiSeq # ファイルの中身 cat seq1.fasta ``` sample-RNA gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc ``` In [10]: # ファイルの読み込み seq1 = readMonoSeq ( 'seq1.fasta' ) print ( f \"Input Sequence: \\n { alignStr ( seq1 [ 0 ]) } \" ) Input Sequence: gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc In [11]: # この時、文字列をリストに格納しています。 print ( type ( seq1 )) In [12]: pred1 = model . predict ( sequences = seq1 , asai = True ) In [13]: # 変数asaiは、隠れ状態がZero-based numberingかどうかを決めるものであり、特に意味はありません。（課題の形式に対応したものがasai=True.） print ( f \"Hidden Indexes: \\n { alignStr ( pred1 [ 0 ]) } \" ) Hidden Indexesn [14]: # もちろんパラメタの更新は行われていません。 model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 Baum-Welch algorithm HMMのBaum-Welchアルゴリズムを実装して、モデルを学習させてます。 In [15]: model = HMM () model . load_params ( \"params2.json\" ) model . params () # 文字が \"acgu\"→\"ACGT\"に変わっただけです。 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.4000 0.2500 0.1000 0.3000 C 0.1000 0.2500 0.4000 0.2000 G 0.1000 0.2500 0.4000 0.2000 T 0.4000 0.2500 0.1000 0.3000 cat seq2.txt ``` >Vitis_vinifera_chr14.trna15-AlaAGC (28776087-28776159) Ala (AGC) 73 bp Sc: 68.12 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAGGTACGGGGATCGATA CCCCGCATCTCCA >Vitis_vinifera_chr13.trna5-ArgCCG (2691241-2691313) Arg (CCG) 73 bp Sc: 83.85 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAGGTCGTGGGTTCGAAT CCCACTGCGATCG >Vitis_vinifera_chr3.trna6-GlnCTG (5807449-5807520) Gln (CTG) 72 bp Sc: 71.93 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTAACCCGAGTTCAAATC TCGGTGGGACCT >Vitis_vinifera_chr14.trna19-LeuAAG (25640120-25640040) Leu (AAG) 81 bp Sc: 62.71 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTGTCCGAAAGGGCGTGG GTTCAAATCCCACTCTCCACA >Vitis_vinifera_chr18.trna9-MetCAT (2896034-2896118) Met (CAT) 85 bp Sc: 60.66 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCGAGTAATCCTGAGGTC GAGAGTTCGAGCCTCTCTCACCCCA >Vitis_vinifera_chr3.trna30-ProTGG (7498415-7498344) Pro (TGG) 72 bp Sc: 68.98 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGGTCCCGAGTTCGATTC TCGGAATGACCC >Vitis_vinifera_chr5.trna13-GluTTC (21745120-21745048) Glu (TTC) 73 bp Sc: 36.67 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTGGTCGTGGGTTCGAGC CCTATTGGTGGTT >Vitis_vinifera_chr5.trna3-TyrGTA (7422575-7422666) Tyr (GTA) 92 bp Sc: 33.68 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTGACCCAATAGATATCC TTAGGTCGTTAGTTTGAATCCAACAGGTCTAA >Vitis_vinifera_chr1.trna8-ValCAC (11396083-11396156) Val (CAC) 74 bp Sc: 66.86 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGAGGTCCCTAGTTCGAA CCCAGGCTCAGATA >Vitis_vinifera_chr14.trna2-SerTGA (4021381-4021462) Ser (TGA) 82 bp Sc: 80.82 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTGGGCTTCGCCCGCGCA GGTTCGAACCCTGCTGTCGACG ``` In [16]: seq2 = readMultiSeq ( 'seq2.txt' ) In [17]: for i , seq in enumerate ( seq2 ): print ( f \"No. { i : >02 } \\n { alignStr ( seq , width = 45 ) } \" ) No.00 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAG GTACGGGGATCGATACCCCGCATCTCCA No.01 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAG GTCGTGGGTTCGAATCCCACTGCGATCG No.02 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTA ACCCGAGTTCAAATCTCGGTGGGACCT No.03 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTG TCCGAAAGGGCGTGGGTTCAAATCCCACTCTCCACA No.04 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCG AGTAATCCTGAGGTCGAGAGTTCGAGCCTCTCTCACCCCA No.05 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGG TCCCGAGTTCGATTCTCGGAATGACCC No.06 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTG GTCGTGGGTTCGAGCCCTATTGGTGGTT No.07 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTG ACCCAATAGATATCCTTAGGTCGTTAGTTTGAATCCAACAGGTCT AA No.08 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGA GGTCCCTAGTTCGAACCCAGGCTCAGATA No.09 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTG GGCTTCGCCCGCGCAGGTTCGAACCCTGCTGTCGACG In [18]: # 学習させる。 model . fit ( sequences = seq2 , epochs = 2000 , verbose = False ) In [19]: import matplotlib.pyplot as plt In [20]: def plotHistory ( model ): \"\"\" 学習の過程をプロットする関数 \"\"\" plt . plot ( model . history ) plt . title ( f \"Mean Log Likelihood Transition (eoochs= { model . epoch } )\" ) plt . xlabel ( \"epochs\" ) plt . ylabel ( \"Mean Log Likelihood\" ) plt . show () In [21]: plotHistory ( model ) In [22]: model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.1024 0.0000 0.8976 0.0000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.2819 0.7181 0.0000 0.0000 z(2) 0.0000 0.5670 0.0000 0.4330 z(3) 0.0521 0.0000 0.3415 0.6064 z(4) 0.5158 0.0000 0.0000 0.4842 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.3436 0.3099 0.1059 0.0055 C 0.2538 0.0592 0.0970 0.4297 G 0.4026 0.4418 0.7971 0.0345 T 0.0000 0.1891 0.0000 0.5304 ※ 隠れ状態ごとにかなり偏った遷移を行なう。 また、 遷移行列の対角成分がそこまで大きい値では無い。 → 特定の構造が、 ある程度の長さのゆとりを持って 繰り返されていると予想される。 In [23]: pred2 = model . predict ( sequences = seq2 , asai = True ) In [24]: for i , pred in enumerate ( pred2 ): print ( f \"No. { i : >02 } Hidden Indexes: \\n { alignStr ( pred , width = 45 ) } \" ) No.00 Hidden Indexes: 333334122244412241241222224412444124122412222 2411222224412224441241244441 No.01 Hidden Indexes: 334411241241222412241241124412244441224441222 2412412244412244412441122441 No.02 Hidden Indexes: 334441241244412412441222412412244441224441241 244412244412244441241222444 No.03 Hidden Indexes: 341222241244122441244412222244122441222444441 244122222241222244412244412444441241 No.04 Hidden Indexes: 333341241241122441244124112412244412412444441 2241244441222441222244412244444441244441 No.05 Hidden Indexes: 333412441244412412412224444124444122224122222 444412244412444441222412444 No.06 Hidden Indexes: 334441241244412441244122411222244444124444122 2412412244412244441241241244 No.07 Hidden Indexes: 341244441244412441241222412222241241241222441 244412412241244441224124412444122444124122444 12 No.08 Hidden Indexes: 344412241241222441244124112441244412411244122 22444441244412244412244412241 No.09 Hidden Indexes: 344124122444122412441222222412244412224441241 2244412444112412244412244441122441241 補足：上記プログラムにバグがないかの確認 Baum-Welchアルゴリズムが正しく実装できていたか、極端な配列を学習させることで確認します。 In [25]: model = HMM () model . load_params ( \"params3.json\" ) model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 0.7000 0.1000 0.2000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.8000 0.1000 0.1000 z(2) 0.1000 0.8000 0.1000 z(3) 0.1000 0.1000 0.1000 ------------------------------ *emission probability z(1) z(2) z(3) A 0.4000 0.2500 0.1000 C 0.1000 0.2500 0.4000 G 0.1000 0.2500 0.4000 T 0.4000 0.2500 0.1000 In [26]: seq_extreme = readMonoSeq ( 'seq3.txt' ) In [27]: # かなり極端な配列の例で実装してみる。 print ( f \"Input Sequence: \\n { alignStr ( seq_extreme [ 0 ]) } \" ) Input Sequence: TCTTTTTCCTCCTCTCTCCTTTCCCTCTTTTCCCTTCTTCTCTCCCTTTTCCTTCTCTTC TCTCTTTTCTTCCCCTTTTCCTTTTCTCCTCCCTCCCTTTCTTCCCTCCTTCCTCCCCCC CTCCCCTTTCCTTCCTTTCTCCTTCTCCCCATATGGCCATTTACTTCAGCTGATAGACAC CGAGTAACAACAATAAAGCGTTAGGTGGACGAATGCTCTACTCTGACCTCTAGCTTGTGG GTTCGCGGCTTGCCGAACGCTGGCCTCTGCCCGTCGAACCAATAAATGTTTATCCAGGAC ACCCCGTTCTTTGGTGATATCCCTCGCTCGAGTTATAGCATTGAAACCTCCATATCCGGC GATAAGAGCTACGGACCGTATACTGGGCGCCGGTAATTGGTTGCACTCGCCCTCGGTCTT TTTCTTTTTGGTTTAGCAGAGCAAGGCGTGGAAAAGGAGAGAGGGAGAAAAGGGAAAGGG AAAAGAGGAGAAGAAAGAAAAAGGAAGGGGGGAAGAGGAGAGAAGGGAAGGGAAGGGGGA GAAAGAGGGAAAGAGGAGAAAAAAGGAGGGGGAAGAAGGAAGGGGGAAAGGGGGGGAAAG 上の配列は、以下の構造を持っていることがわかります。 index type 1~150 pyrimidine base 151~450 both 451~600 purine base In [28]: model . fit ( sequences = seq_extreme , epochs = 100 , verbose = False ) In [29]: plotHistory ( model ) In [30]: model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 1.0000 0.0000 0.0000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.9933 0.0000 0.0067 z(2) 0.0000 1.0000 0.0000 z(3) 0.0000 0.0033 0.9967 ------------------------------ *emission probability z(1) z(2) z(3) A 0.0000 0.4851 0.2199 C 0.5034 0.0000 0.2627 G 0.0000 0.5149 0.2415 T 0.4966 0.0000 0.2760 In [31]: pred_extreme = model . predict ( sequences = seq_extreme ) In [32]: print ( f \"Hidden Indexes: \\n { alignStr ( pred_extreme [ 0 ]) } \" ) Hidden Indexes: 111111111111111111111111111111111111111111111111111111111111 111111111111111111111111111111111111111111111111111111111111 111111111111111111111111111111333333333333333333333333333333 333333333333333333333333333333333333333333333333333333333333 333333333333333333333333333333333333333333333333333333333333 333333333333333333333333333333333333333333333333333333333333 333333333333333333333333333333333333333333333333333333333333 333333333333333333333333333332222222222222222222222222222222 222222222222222222222222222222222222222222222222222222222222 222222222222222222222222222222222222222222222222222222222222 うまく傾向をつかんでいることから、学習アルゴリズムに大きな誤りはなさそうです。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-4.html"},{"title":"生物統計論 第1回","text":"講師： 木立尚孝 講義概要 09/27 (Fri) 10:25-12:10 10/04 (Fri) 10:25-12:10 10/11 (Fri) 10:25-12:10 10/18 (Fri) 10:25-12:10 10/25 (Fri) 10:25-12:10 11/08 (Fri) 10:25-12:10 11/15 (Fri) 10:25-11:30(Lecture) / 11:30-12:10: (Test) Section1.1 STATISTICAL ANALYSIS Genomic data has recently become available, so the analyzing methods still its infancy at the century scale. It is very important how much information can be extracted from genomic and other omic data. Data-driven Research Development of measurement, communication, computing technologies. data science, e-science Statistics, computer skill, artificial intelligence, machine learning. Statistical Analysis Subjects and measurements are often conclude the random events , such as noise. Aiming for finding the \"True\" distribution, and inferencing on that distribution. Power of Statistical Methods Amount of information we can extract \"Many and high\" / \"Few or low\" quality Event infinite number of data cannot answer all questions. ex) we couldn't answer \"what is the number of eyes on the next dice.\" Data dependency. Section1.2 PROBABILITY DEFINITIONS Probability: Mathematical Probability: The probability of an event consisting of n out of m possible equally likely occurrences, defined to be n / m Statistical Probability: Each event is random, but if you repeat it a lot, you can see the probability that each event occurs. Subjective Probability: A type of probability derived from an individual's personal judgment or own experience about whether a specific outcome is likely to occur. ※ Mathematical Probability is the most strict and basic. Probability space \\(\\left(\\Omega, E, P\\right)\\) $$\\begin{aligned}&\\Omega: \\text{Set, Samplemspace}\\\\&E: \\text{Events,}\\sigma\\text{-algebra}\\\\&P: \\text{Probability measure}\\end{aligned}$$ Sample Space The sets of elementary events. ex.) The number of eyes on the dice. All possible genomes. All possible gene expression profiles \\(\\omega_i\\in\\Omega\\) is the identifier of possible individual stochastic phenomena. \\(\\sigma\\) -algebra $$ \\begin{aligned} &\\varepsilon= \\left\\{E_1,E_2,\\cdots|E_i\\subseteq\\Omega:\\text{event}:\\sigma\\text{-algebra} \\right\\}\\\\ &\\Rightarrow \\varnothing,\\Omega,\\left(E_i\\setminus E_j\\right),\\left(\\bigcup_{i=1}&#94;{\\infty}E_i\\right),\\left(\\bigcap_{i=1}&#94;{\\infty}E_i\\right)\\in\\varepsilon \\end{aligned} $$ The sets of Events. Each event \\(E_i\\subseteq\\Omega\\) Include Empty set \\(\\varnothing\\) , universal set \\(\\Omega\\) Closure to variable \"Set Operation\". (ex. Union, intersection, complement) example) discrete set Real set Power set Borel set \\(\\mathcal{A}\\) Probability measure $$\\begin{aligned}&\\mathbb{P} : \\mathcal{E} \\rightarrow \\mathbb{R} \\\\& 0 \\leq \\mathbb{P}(E) \\leq 1, E \\in \\mathcal{E} \\\\&\\mathbb{P}(\\Omega)=1, \\mathbb{P}(\\varnothing)=0 \\\\&\\text { For } E_{1}, E_{2}, \\cdots \\in \\mathcal{E}, \\text{ s.t. } E_{i} \\cap E_{j}=\\varnothing, \\forall i \\neq j \\\\&\\mathbb{P}\\left(\\bigcup_{i=1}&#94;{\\infty} E_{i}\\right)=\\sum_{i=1}&#94;{\\infty} \\mathbb{P}\\left(E_{i}\\right)\\end{aligned}$$ Each event is assigned a value that indicates the likelihood or probability of occurrence. Random variable $$\\begin{aligned}X: &\\text{random variable}\\\\\\Leftrightarrow &X : \\Omega \\rightarrow \\mathbb{R} \\\\ &\\text { s.t. } X&#94;{-1}(A) \\in \\mathcal{E}, \\forall A \\in \\mathcal{A} \\\\&X&#94;{-1}(A) :=\\{\\omega \\in \\Omega \\mid X(\\omega) \\in A\\}\\end{aligned}$$ Section1.3 PROBABILITY TERMS AND PROPERTIES Probability distribution function \\(F_x\\) (cumulative distribution) Probability density function \\(f_x\\) $$F_x\\left(x+dx\\right)-F_x\\left(x\\right)=:f_x(x)dx$$ Conditional Probability Joint Probability distribution $$(X,Y): \\Omega\\rightarrow\\mathbb{R}&#94;2; (X,Y)(\\omega) = \\left(X(\\omega),Y(\\omega)\\right)\\\\\\left(X,Y\\right)&#94;{-1}(A) = \\left\\{\\omega\\in\\Omega|\\left(X(\\omega),Y(\\omega)\\right)\\in A\\right\\}$$ Independent random variables Expected Value Variance Covariance: $$\\begin{cases}X,Y: \\text{independent random variables}\\Rightarrow \\mathrm{Cov}(X,Y) = 0\\\\X,Y: \\text{independent random variables}\\not\\Leftarrow \\mathrm{Cov}(X,Y) = 0 \\end{cases}$$ Indicator Function: $$\\mathbb{I}_A(x)=\\begin{cases}1 & x\\in A\\\\0 & x\\notin A\\end{cases},A\\in\\mathcal{A}$$ Marginalization Section1.4 PROBABILITY DISTRIBUTIONS Look Here!! if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html"},{"title":"生物統計論 第0回","text":"Section1.4 PROBABILITY DISTRIBUTIONS In [1]: import numpy as np import collections import matplotlib.pyplot as plt In [2]: N = 100000 Bernoulli Distribution In [3]: def BernoulliVar ( q , N , seed = None ): rng = np . random . RandomState ( seed ) if seed is not None else np . random return np . var ( rng . rand ( N ) < q ) In [4]: qs = np . linspace ( 0 , 1 , 1000 ) In [5]: probs = [ BernoulliVar ( q , N ) for q in qs ] In [6]: plt . title ( \"Bernoulli distribution\" ) plt . plot ( qs , probs , label = \"$Var(X)$\" ) plt . xlabel ( \"q\" ) plt . ylabel ( \"$Var(X)$\" ) plt . legend () plt . show () Binomial Distribution In [7]: def BinomialProb ( n , p , N , seed = None , color = None , ax = None ): if ax == None : fig , ax = plt . subplots () rng = np . random . RandomState ( seed ) if seed is not None else np . random counter = collections . Counter ( rng . binomial ( n , p , N )) count , freqs = zip ( * sorted ( counter . most_common ())) probs = [ freq / N for freq in freqs ] ax . plot ( count , probs , color = color , label = f \"p= { p } and n= { n } \" ) ax . scatter ( count , probs , color = color ) return ax In [8]: ax = BinomialProb ( 20 , 0.5 , N , seed = 0 , color = \"blue\" ) ax = BinomialProb ( 20 , 0.7 , N , seed = 0 , color = \"green\" , ax = ax ) ax = BinomialProb ( 40 , 0.5 , N , seed = 0 , color = \"red\" , ax = ax ) plt . legend () plt . show () Normal Distribution In [9]: from scipy import stats In [10]: def NormalProb ( mu , sigma ): X = np . arange ( mu - 3.5 * sigma , mu + 3.5 * sigma , sigma / 50 ) Y = stats . norm . pdf ( X , mu , sigma ) for i in np . arange ( - 3 , 4 , 1 ): idx = np . argmin ( abs ( X - ( mu + i * sigma ))) plt . plot ([ X [ idx ], X [ idx ]], [ 0 , Y [ idx ]], 'k-' ) plt . scatter ( X [ idx ], Y [ idx ], color = \"black\" ) plt . plot ( X , Y , color = \"black\" ) In [11]: NormalProb ( mu = 0 , sigma = 0.1 ) Multivariate Normal Distribution In [12]: from scipy.stats import multivariate_normal In [13]: x , y = np . mgrid [ - 3 : 3.5 : . 01 , - 3 : 3 : . 01 ] pos = np . dstack (( x , y )) rv = multivariate_normal ([ 0.5 , - 0.2 ], [[ 2.0 , 2.3 ], [ 0.3 , 0.8 ]]) plt . contourf ( x , y , rv . pdf ( pos )) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html"},{"title":"HMMのスケーリング","text":"HMMを実装する際に課題となるのが、forward-algorithm で \\(\\alpha\\) を再帰的に求める際に、 \\(\\alpha\\left(\\mathbf{z}_{n-1}\\right)\\) に \\(p(\\mathbf{z}_n|\\mathbf{z}_{n-1})\\) と \\(p(\\mathbf{x}_n|\\mathbf{z}_n)\\) をかけるため、値が非常に小さくなり、計算機の ダイナミックレンジ を超えてしまうことです。 そこで、ここでは \\(\\alpha\\left(\\mathbf{z}_{n}\\right)\\) と \\(\\beta\\left(\\mathbf{z}_{n}\\right)\\) にスケーリングを施し、それらの値が \\(1\\) のオーダーに止まるようにする手法を説明します。 forward-backward \\(\\alpha,\\beta\\) forward-backward algorithm で用いられていた \\(\\alpha,\\beta\\) は以下のように定義されていました。 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ Scaling factors まず、スケーリングされた \\(\\alpha,\\beta\\) は以下のように表されます。スケーリングによって、 \\(\\alpha\\) は高々 \\(K\\) 個の変数上の確率分布 、 \\(\\beta\\) は2つの条件付き確率の比 になることがわかります。 $$ \\begin{aligned} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.55)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\frac{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)}=\\frac{\\beta\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.61) \\end{aligned} $$ ここで、これらと \\(\\alpha,\\beta\\) を関連付けるためのスケーリング係数 \\(c\\) を導入します。 $$ c_{n}=p\\left(\\mathbf{x}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}\\right)\\qquad (13.56) $$ すると、 $$ \\begin{aligned} p\\left(\\mathbf{x}_1,\\ldots,\\mathbf{x}_n\\right) &= p\\left(\\mathbf{x}_n | \\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\cdots p\\left(\\mathbf{x}_3 | \\mathbf{x}_1,\\mathbf{x}_{2}\\right)p\\left(\\mathbf{x}_2 | \\mathbf{x}_1\\right)p(\\mathbf{x}_1)\\\\ &= c_n\\cdots c_3c_2c_1\\\\ &= \\prod_{m=1}&#94;{n} c_{m} \\end{aligned}\\qquad (13.58) $$ と展開することができるので、 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\left(\\prod_{m=1}&#94;{n} c_{m}\\right) \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) & (13.58)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)\\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) = \\left(\\prod_{m=n+1}&#94;{N} c_{m}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.60) \\end{aligned} $$ と対応関係がわかります。 \\(\\gamma,\\xi\\) 続いて、 \\(\\gamma,\\xi\\) と \\(\\widehat{\\alpha},\\widehat{\\beta}\\) の対応関係を求めます。 \\(\\alpha,\\beta\\) \\(\\alpha,\\beta\\) を用いると、以下のように表されていました。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} &(13.43) \\end{aligned}$$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) 先の対応関係を用いれば、 \\(\\widehat{\\alpha},\\widehat{\\beta}\\) を用いると、 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=\\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.64)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\left(c_{n}\\right)&#94;{-1} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.65) \\end{aligned} $$ と表されることがわかります。 Recursion 最後に、再帰式の対応関係も求めます。 \\(\\alpha,\\beta\\) $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) $$ \\begin{aligned} c_{n} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.58)\\\\ \\widehat{\\alpha}\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{z}_{1}| \\mathbf{x}_{1}\\right)=\\frac{p\\left(\\mathbf{z}_{1}\\right)p\\left(\\mathbf{x}_{1}| \\mathbf{z}_{1}\\right)}{p\\left(\\mathbf{x}_{1}\\right)} = \\frac{\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}}}{p\\left(\\mathbf{x}_{1}\\right)}\\\\ c_{n+1} \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\widehat{\\beta}\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) &(13.62)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)}{\\widehat{\\alpha}\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)}{p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} = 1 & (13.30) \\end{aligned} $$ なお、ここで \\((13.58)\\) でどのようにして \\(c_n\\) を求めるかですが、 $$ \\begin{aligned} \\mathrm{R.H.S}\\ (13.58) &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}}p\\left(\\mathbf{z}_{n-1}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\\\ &=p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) \\end{aligned} $$ となることから、 \\((13.58)\\) の右辺を \\(\\mathbf{z}_n\\) について周辺化すれば、 $$\\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = p\\left(\\mathbf{x}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = c_n$$ となるので、 \\(c_n\\) が求められることがわかります。 おまけ（尤度関数） 尤度関数はスケーリング係数 \\(c\\) を用いるだけで簡単に求められることがわかります。 $$p(\\mathbf{X})=\\prod_{n=1}&#94;{N} c_{n}\\qquad (13.63)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-3.html"},{"title":"HMMの最尤推定の計算過程","text":"ここでは、 HMMの最尤推定 で省略した計算過程について記述します。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) $$ \\begin{aligned} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})&=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10)\\\\ &=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\left[ \\prod_{n=2}&#94;{N}\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}} \\right] \\prod_{n=1}&#94;{N}\\prod_{d=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{d k}&#94;{x_{nd} z_{nk}}\\\\ \\therefore\\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta}) &=\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k + \\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk} + \\sum_{n=1}&#94;N\\sum_{d=1}&#94;D\\sum_{k=1}&#94;Kx_{nd}z_{nk}\\ln\\phi_{dk} \\end{aligned} $$ であるから、これを \\((13.12)\\) に代入して、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=&\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12)\\\\ =& \\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{n=1}&#94;N\\sum_{d=1}&#94;D\\sum_{k=1}&#94;Kx_{nd}z_{nk}\\ln\\phi_{dk} \\end{aligned} $$ ここで、 \\(\\sum_{\\mathbf{Z}} = \\sum_{\\mathbf{z_1},\\mathbf{z_2},\\ldots,\\mathbf{z_N}}\\) なので、それぞれ 関係の無い部分を周辺化 でき、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\sum_{\\mathbf{z_1}} p\\left(\\mathbf{z_1} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{1k}\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\sum_{\\mathbf{z_{n-1},z_n}}p\\left(\\mathbf{z_{n-1},z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{n=1}&#94;N\\sum_{d=1}&#94;D\\sum_{k=1}&#94;K\\sum_{\\mathbf{z_n}}p\\left(\\mathbf{z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)x_{nd}z_{nk}\\ln\\phi_{dk}\\\\ \\end{aligned}$$ となります。また、 \\(\\gamma,\\xi\\) の定義 を用いることで $$\\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_1}} \\gamma\\left(\\mathbf{z}_1\\right)z_{1k}\\right)\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\left(\\sum_{\\mathbf{z_{n-1},z_n}}\\xi\\left(\\mathbf{z_{n-1},z_{n}}\\right) z_{n-1,j}z_{nk}\\right)\\ln A_{jk}\\\\ &+\\sum_{n=1}&#94;N\\sum_{d=1}&#94;D\\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_n}}\\gamma\\left(\\mathbf{z}_n\\right)x_{nd}z_{nk}\\right)\\ln\\phi_{dk} \\end{aligned} $$ と書き直せます。この時、潜在変数が離散なので、 \\(\\gamma,\\xi\\) はそれぞれ和が \\(1\\) となる \\(K,\\left(K\\times K\\right)\\) 個の非負の数の集合を用いて以下のように記述できます。 $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ したがって、これらを用いて上記の式を書き直すと、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{d=1}&#94;Dx_{nd} \\ln \\phi_{d k} \\end{aligned}\\qquad (13.17) $$ Maximization step ここでは、上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) 関数を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化する際の ラグランジュの未定乗数法 を書き下します。 \\(\\boldsymbol{\\pi}\\) $$ \\begin{aligned} L\\left(\\boldsymbol{\\pi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) &= \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k} + \\lambda_1\\left(\\sum_{k=1}&#94;K\\pi_k - 1\\right)\\\\ \\frac{\\partial L}{\\partial \\pi_k}&=\\frac{\\gamma\\left(z_{1 k}\\right)}{\\pi_k} + \\lambda_1 = 0\\quad \\therefore \\pi_k = -\\frac{\\gamma\\left(z_{1 k}\\right)}{\\lambda_1}\\\\ \\frac{\\partial L}{\\partial \\lambda_1}&=\\sum_{k=1}&#94;K\\pi_k - 1 = 0\\quad \\therefore\\lambda_1 = -\\sum_{k=1}&#94;K\\gamma\\left(z_{1 k}\\right)\\\\ \\therefore\\pi_k&#94;{\\star} &= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} \\end{aligned} $$ \\(\\boldsymbol{A}\\) $$\\begin{aligned} L\\left(\\boldsymbol{A},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} + \\sum_{j=1}&#94;K\\lambda_{2,j}\\left(\\sum_{k=1}&#94;K A_{jk} - 1\\right)\\\\ \\frac{\\partial L}{\\partial A_{jk}} &= \\sum_{n=2}&#94;{N}\\frac{\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{A_{jk}} + \\lambda_{2,j} = 0\\quad \\therefore A_{jk} = -\\frac{\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\lambda_{2,j}}\\\\ \\frac{\\partial L}{\\partial \\lambda_{2,j}} &= \\sum_{k=1}&#94;K A_{jk} - 1 = 0\\quad \\therefore \\lambda_{2,j} = -\\sum_{k=1}&#94;K\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)\\\\ \\therefore A_{jk}&#94;{\\star}&=\\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\end{aligned}$$ \\(\\boldsymbol{\\phi}\\) $$\\begin{aligned} L\\left(\\boldsymbol{\\phi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} + \\sum_{k=1}&#94;K\\lambda_{3,k}\\left( \\sum_{i=1}&#94;D\\phi_{ik} - 1\\right)\\\\ \\frac{\\partial L}{\\partial\\phi_{ik}} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\phi_{ik}} + \\lambda_{3,k}=0\\quad \\therefore \\phi_{ik} = -\\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\lambda_{3,k}}\\\\ \\frac{\\partial L}{\\partial\\lambda_{3,k}} &= \\sum_{i=1}&#94;D\\phi_{ik} - 1 = 0 \\quad \\therefore \\lambda_{3,k} = -\\sum_{i=1}&#94;D\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni} = -\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)\\\\ \\therefore \\phi_{ik}&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)} \\end{aligned}$$ Expectation step $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14)\\\\ \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35)\\\\ \\end{aligned} $$ forward-algorithm \\((\\alpha)\\) $$\\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha(\\mathbf{z}_{n-1})p(\\mathbf{z} | \\mathbf{z}_{n-1})\\\\ \\end{aligned}$$ backward-algorithm \\((\\beta)\\) $$\\begin{aligned} \\beta\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N}, \\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}, \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+2}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} \\beta(\\mathbf{z}_{n+1})p(\\mathbf{x}_{n+1}|\\mathbf{z}_{n+1})p(\\mathbf{z}_{n+1}|\\mathbf{z}_n)\\qquad (13.38) \\end{aligned}$$ \\(\\gamma,\\xi\\) $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$\\begin{aligned} \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}\\right) \\\\ &=\\frac{p(\\mathbf{X} | \\mathbf{z}_{n-1}, \\mathbf{z}_{n}) p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{Bayes' theorem})\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{x}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43) \\end{aligned}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-2.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-2.html"},{"title":"HMMの最尤推定","text":"※ かなり導出部分を省略しています。導出は適宜 HMMの最尤推定の計算過程 を参照してください。 隠れマルコフモデルは、一般に以下の式で表されます。 $$ p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10) $$ \\(\\mathbf{X} = \\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) : \\(\\mathbf{Z} = \\{\\mathbf{z}_1,\\ldots,\\mathbf{z}_N\\}\\) \\(\\boldsymbol{\\theta}=\\{\\boldsymbol{\\pi}, \\mathbf{A}, \\boldsymbol{\\phi}\\}\\) ※ 一般に放出確率 \\(p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\boldsymbol{\\phi}\\right)\\) は、 二値のベクトル \\(\\mathbf{z}_n\\) の \\(K\\) 個の可能な状態に対応した \\(K\\) 個の要素を持つベクトルからなる任意の分布 $$ p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\phi\\right)=\\prod_{k=1}&#94;{K} p\\left(\\mathbf{x}_{n} | \\phi_{k}\\right)&#94;{z_{n k}}\\qquad (13.9) $$ を考えることも可能ですが、今回は下記の離散多項分布を考えます。 Name Probability Conditional Distribution initial state \\(\\pi_{k} \\equiv p\\left(z_{1 k}=1\\right)\\) \\(p\\left(\\mathbf{z}_{1} \\mid \\boldsymbol{\\pi}\\right)=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\quad (13.8)\\) transition probability \\(A_{j k} \\equiv p\\left(z_{n k}=1\\mid z_{n-1, j}=1\\right)\\) \\(p\\left(\\mathbf{z}_{n} \\mid \\mathbf{z}_{n-1}, \\mathbf{A}\\right)=\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}}\\quad (13.7)\\) emission probability \\(\\phi_{i k}\\equiv p\\left(x_{n i}=1 \\mid z_{n k}=1\\right)\\) \\(p(\\mathbf{x}_n \\mid \\mathbf{z}_n, \\boldsymbol{\\phi})=\\prod_{i=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{i k}&#94;{x_{ni} z_{nk}}\\quad (13.22)\\) 尤度関数 ここで、データ集合 \\(\\mathbf{X}\\) が観測された際に、上記の同時分布を潜在変数 \\(\\mathbf{Z}\\) について周辺化することで、尤度関数は以下のように記述されます。 $$ p(\\mathbf{X} | \\boldsymbol{\\theta})=\\sum_{\\mathbf{Z}} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.11) $$ しかし、この尤度関数は \\(n\\) について分解できない（ \\(\\mathbf{z}_n\\) ）ごとに和を取れないので、 条件付き独立 の性質を活かして 尤度関数の対数の期待値 を最大化する Baum-Welch algorithm (EM algorithm) を用います。 Baum-Welch (EM) パラメータ \\(\\boldsymbol{\\theta}&#94;{\\text {old }}\\) を用いて \\(p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化する。 対数尤度関数の期待値 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を求める。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化するパラメータに更新する。 \\(\\boldsymbol{\\theta}\\rightarrow\\boldsymbol{\\theta}&#94;{\\text {old }}\\) 1に戻る。 $$ Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12) $$ ここで、表記を簡単にするために、 γ 、 ξ を導入します。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14) \\end{aligned} $$ なお、潜在変数が離散なので、以下のように記述し直せます。（ \\(\\pi_{k},A_{j k},\\phi_{j k}\\) と同様。） $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ これらを用いると、 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) が以下のように書き下せます。 （計算過程） $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} \\end{aligned}\\qquad (13.17) $$ Maximization step ※ 実際の計算の順番からは前後しますが、先にM stepを説明します。 上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化するのは（別ブロックに別れているから）簡単で、それぞれ 適当なラグランジュ乗数を導入する ことで、以下のように求まります。 （計算過程） $$ \\begin{aligned} \\pi_{k}&= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} & (13.18)\\\\ A_{j k}&= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} & (13.19)\\\\ \\phi_{i k}&=\\frac{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right) x_{n i}}{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right)} & (13.23) \\end{aligned} $$ Expectation step M step で必要となる \\(\\gamma,\\xi\\) は、 条件付き独立性 を用いることで効率的に計算することができます。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ 条件付き独立性を用いてそれぞれ変形すると、以下の再帰式を導くことができます。 （計算過程） $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ ※ なお、ここで \\(\\alpha\\) の再起式を forward-algorithm 、 \\(\\beta\\) の再起式を backward-algorithm と呼ぶことがあります。 また、これらを用いて \\(\\xi\\) を記述することもでき、以下のように表せます。 （計算過程） $$\\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ 以上でBaum-Welchに必要な計算式が求まりました。 おまけ（尤度関数） 尤度関数は、アルゴリズムの停止条件に用いられるなど、値を求めることが非常に有用です。 求める際は、 $$ \\gamma\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad (13.33) $$ の両辺を \\(\\mathbf{z}_n\\) について周辺化すれば、左辺は $$\\sum_{\\mathbf{z}_{n}} \\gamma\\left(\\mathbf{z}_{n}\\right) = \\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right) = 1$$ となることが明らかなので、以下のように求まります。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{n}} \\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)\\qquad (13.41)$$ また、上記の式は任意の \\(n\\) について成立するので、 \\(n=N\\) の場合を考えれば \\(\\alpha\\) のみを用いて求めることができます。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{N}} \\alpha\\left(\\mathbf{z}_{N}\\right)\\qquad (13.42)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-1.html"},{"title":"Numpyの行列計算チートシート","text":"はじめに 様々なアルゴリズムを実装する際に漸化式は出るけど実装時にうまくいかない。ということは良くあります。また、 Python を使って実装する場合、そのほとんどが行列の取り扱いです。 （柔軟であるが故にエラーを吐かずに動いてしまう…笑） そこで、まずは行列計算のチートシートを作成します。（随時加筆修正していきます。） 目次 基本事項 内積（行列積） 外積 In [1]: import numpy as np 基本事項 In [2]: N = 3 A = np . arange ( N ) B = np . arange ( N ) . reshape ( - 1 , N ) # np.expand_dims(A, axis=0), A[None,:] C = np . arange ( N ) . reshape ( N , - 1 ) # np.expand_dims(A, axis=1), A[:,None] D = np . arange ( N * N ) . reshape ( N , N ) In [3]: print ( f \"A = { A } \" ) print ( f \"B = { B } \" ) print ( f \"C = { C } \" ) print ( f \"D = { D } \" ) A = [0 1 2] B = [[0 1 2]] C = [[0] [1] [2]] D = [[0 1 2] [3 4 5] [6 7 8]] In [4]: print ( f \"A.shape = { A . shape } \" ) print ( f \"B.shape = { B . shape } \" ) print ( f \"C.shape = { C . shape } \" ) print ( f \"D.shape = { D . shape } \" ) A.shape = (3,) B.shape = (1, 3) C.shape = (3, 1) D.shape = (3, 3) In [5]: print ( f \"A.ndim = { A . ndim } \" ) print ( f \"B.ndim = { B . ndim } \" ) print ( f \"C.ndim = { C . ndim } \" ) print ( f \"D.ndim = { D . ndim } \" ) A.ndim = 1 B.ndim = 2 C.ndim = 2 D.ndim = 2 ndim ex. scalar $(0)$ 1 , 2 ,... vector $1$ A matrix $\\geq2$ B , C , D 内積（行列積） vector & scalar / matrix & scalar スカラーが絡むと、各要素とスカラーの積となる。 shape の変化はない。 どちらから掛けてもエラーは起こらない。 In [6]: print ( f \"np.dot(A,2) = { np . dot ( A , 2 ) } \" ) # vector & scalar print ( f \"np.dot(B,2) = { np . dot ( B , 2 ) } \" ) # matrix & scalar print ( f \"np.dot(C,2) = { np . dot ( C , 2 ) } \" ) # matrix & scalar print ( f \"np.dot(D,2) = { np . dot ( D , 2 ) } \" ) # matrix & scalar np.dot(A,2) = [0 2 4] np.dot(B,2) = [[0 2 4]] np.dot(C,2) = [[0] [2] [4]] np.dot(D,2) = [[ 0 2 4] [ 6 8 10] [12 14 16]] vector & vector 内積となる。 結果はスカラーとなる。 shape が異なると、エラーが起きる。 In [7]: print ( f \"np.dot(A,A) = { np . dot ( A , A ) } \" ) # vector & vector np.dot(A,A) = 5 In [8]: np . dot ( A , np . arange ( N - 1 )) # shape=(3,) & shape=(2,) ValueError : shapes (3,) and (2,) not aligned: 3 (dim 0) != 2 (dim 0) vector & matrix 行列積となる。 ベクトルは、位置によって変換のされ方が異なる。 左がベクトルの場合： np.dot((x,) (y,z)) = np.dot((1,x) (y,z)) 右がベクトルの場合： np.dot((y,z) (x,)) = np.dot((y,z) (x,1)) 行列積であるので、結果の shape は np.dot((x,y) (y,z)) = (x,z) となる。 上で y が異なるとエラーが生じる。 In [9]: print ( np . dot ( A , B )) # np.dot((3,)(1,3)) print ( np . dot ( A , C )) # np.dot((3,)(3,1)) print ( np . dot ( B , A )) # np.dot((1,3)(3,)) print ( np . dot ( C , A )) # np.dot((3,1)(3,)) ValueError : shapes (3,) and (1,3) not aligned: 3 (dim 0) != 3 (dim 0) [5] [5] ValueError : shapes (3,1) and (3,) not aligned: 1 (dim 1) != 3 (dim 0) matrix & matrix c = np.dot(a,b) a.shape=(a1,a2,...,aN,X) b.shape=(b1,b2,...,X,bM) c.shape=(a1,a2,...,aN,b1,b2,...,bM) c[i1,i2,...,iN,j1,j2,...,jM] == a[i1,i2,...,iM,:].dot(b[j1,j2,...,jM-1,:,jM]) In [10]: import itertools def checkNPdot ( shape1 , shape2 ): \"\"\" 計算可能なshapeの関係を列挙する。 \"\"\" a = np . arange ( np . prod ( shape1 )) b = np . arange ( np . prod ( shape2 )) for comb1 in itertools . permutations ( shape1 , len ( shape1 )): for comb2 in itertools . permutations ( shape2 , len ( shape2 )): try : print ( f \" { comb1 } .dot( { comb2 } ) = { ( a . reshape ( comb1 ) . dot ( b . reshape ( comb2 ))) . shape } \" ) except : pass 以下で具体的に見ていく！ np.dot(2D, 3D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,X,k) c.shape=(i,j,k) c[i,j,k] == a[i,:].dot(b[j,:,k]) In [11]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) c = np . dot ( a , b ) In [12]: print ( f \"a.shape = { a . shape } \" ) print ( f \"b.shape = { b . shape } \" ) print ( f \"np.dot(a,b).shape = { c . shape } \" ) a.shape = (2, 3) b.shape = (2, 3, 4) np.dot(a,b).shape = (2, 2, 4) In [13]: I , J , K = c . shape In [14]: np . all ([ c [ i , j , k ] == a [ i ,:] . dot ( b [ j ,:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[14]: True np.dot(3D,2D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(X,k) c.shape=(i,j,k) c[i,j,k] == a[i,j,:].dot(b[:,k]) In [15]: a = np . arange ( 24 ) . reshape ( 4 , 2 , 3 ) b = np . arange ( 6 ) . reshape ( 3 , 2 ) c = np . dot ( a , b ) In [16]: print ( f \"a.shape = { a . shape } \" ) print ( f \"b.shape = { b . shape } \" ) print ( f \"np.dot(a,b).shape = { c . shape } \" ) a.shape = (4, 2, 3) b.shape = (3, 2) np.dot(a,b).shape = (4, 2, 2) In [17]: I , J , K = c . shape In [18]: np . all ([ c [ i , j , k ] == a [ i , j ,:] . dot ( b [:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[18]: True np.dot(3D,3D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) In [19]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 60 ) . reshape ( 3 , 4 , 5 ) c = np . dot ( a , b ) In [20]: print ( f \"a.shape = { a . shape } \" ) print ( f \"b.shape = { b . shape } \" ) print ( f \"np.dot(a,b).shape = { c . shape } \" ) a.shape = (2, 3, 4) b.shape = (3, 4, 5) np.dot(a,b).shape = (2, 3, 3, 5) In [21]: I , J , K , L = c . shape In [22]: np . all ([ c [ i , j , k , l ] == a [ i , j ,:] . dot ( b [ k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[22]: True np.dot(2D,4D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,:].dot(b[j,k,:,l]) In [23]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 120 ) . reshape ( 2 , 4 , 3 , 5 ) c = np . dot ( a , b ) In [24]: print ( f \"a.shape = { a . shape } \" ) print ( f \"b.shape = { b . shape } \" ) print ( f \"np.dot(a,b).shape = { c . shape } \" ) # c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) a.shape = (2, 3) b.shape = (2, 4, 3, 5) np.dot(a,b).shape = (2, 2, 4, 5) In [25]: I , J , K , L = c . shape In [26]: np . all ([ c [ i , j , k , l ] == a [ i ,:] . dot ( b [ j , k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[26]: True np.dot(3D,4D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,l,X,m) c.shape=(i,j,k,l,m) c[i,j,k,l,m] == a[i,j,:].dot(b[k,l,:,m]) In [27]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 360 ) . reshape ( 3 , 5 , 4 , 6 ) c = np . dot ( a , b ) In [28]: print ( f \"a.shape = { a . shape } \" ) print ( f \"b.shape = { b . shape } \" ) print ( f \"np.dot(a,b).shape = { c . shape } \" ) a.shape = (2, 3, 4) b.shape = (3, 5, 4, 6) np.dot(a,b).shape = (2, 3, 3, 5, 6) In [29]: I , J , K , L , M = c . shape In [30]: np . all ([ c [ i , j , k , l , m ] == a [ i , j ,:] . dot ( b [ k , l ,:, m ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M )]) Out[30]: True np.dot(4D,4D) c = np.dot(a,b) a.shape=(i,j,k,X) b.shape=(l,m,X,n) c.shape=(i,j,k,l,m,n) c[i,j,k,l,m,n] == a[i,j,k,:].dot(b[l,m,:,n]) In [31]: a = np . arange ( 120 ) . reshape ( 2 , 3 , 4 , 5 ) b = np . arange ( 360 ) . reshape ( 3 , 4 , 5 , 6 ) c = np . dot ( a , b ) In [32]: print ( f \"a.shape = { a . shape } \" ) print ( f \"b.shape = { b . shape } \" ) print ( f \"np.dot(a,b).shape = { c . shape } \" ) a.shape = (2, 3, 4, 5) b.shape = (3, 4, 5, 6) np.dot(a,b).shape = (2, 3, 4, 3, 4, 6) In [33]: I , J , K , L , M , N = c . shape In [34]: np . all ([ c [ i , j , k , l , m , n ] == a [ i , j , k ,:] . dot ( b [ l , m ,:, n ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M ) for n in range ( N )]) Out[34]: True 外積 c = np.outer(a,b) c[i][j] = a.reshape(-1,)[i]*b.reshape(-1,)[j] In [35]: c = np . outer ( a , b ) In [36]: print ( f \"a.shape = { a . shape } \" ) print ( f \"b.shape = { b . shape } \" ) a.shape = (a1,a2,...,aN) b.shape = (b1,b2,...,bM) In [37]: Na = np . prod ( a . shape ) Nb = np . prod ( b . shape ) In [38]: print ( f \"Na = { Na } \" ) print ( f \"Nb = { Nb } \" ) Na = a1*a2*・・・*aN Nb = b1*b2*・・・*bM In [39]: print ( c . shape ) (Na, Nb) In [40]: np . all ([ c [ i ][ j ] == a . reshape ( - 1 ,)[ i ] * b . reshape ( - 1 ,)[ j ] for i in range ( Na ) for j in range ( Nb )]) Out[40]: True In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-0.html"},{"title":"分子生命科学Ⅲ 第1回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 講義概要 この授業最大の目的は、 「将来僕らが脳を対象とすることになった時に敷居を低くする」 こと。 # タイトル 内容 日付 1 神経系の構造と機能 中枢神経系の構造・機能 末梢神経系の構造・機能 9/26 , 10/3 2 感覚神経系 感覚系の構成 体性感覚系 視覚系（末梢視覚系・平衡感覚系） 聴覚と平衡感覚（聴覚系・平衡感覚系） 化学感覚系（嗅覚系・味覚系） 10/10 , 17 , 24 , 31 3 運動系 脊髄による運動制御 脳による運動制御 11/14 , 21 4 脳と行動の化学的制御 11/28 5 摂食行動 12/12 6 脳のリズムと睡眠 脳波 睡眠 概日リズム 12/19 7 精神疾患 統合失調症 感情障害 不安障害 12/26 8 神経変性疾患 アルツハイマー病 パーキンソン病 ALS 1/9 神経系の構造と機能（１） 神経系の機能的構成 神経系は、 感覚系 、 統合系 、 運動系 の３つに分けることができる。 感覚系は、感覚器で何かを感じると、 が神経細胞の末端に流れ込み、 が上がり、電気的なシグナルとして にこの入力を伝える。 運動系は、逆向きで、脳の運動野からのシグナルが 末梢神経系 に伝わる。 神経系の構成成分 ニューロン(neuron) 極性のある細胞で、 、 、 からなり、（ほとんどの場合） を発生する。 膝蓋腱反射(knee-jerk reflex) ニューロンがどのように神経回路に含まれているか、を示す良い例。 医師が膝蓋骨の下の腱を軽く叩くと、大腿四頭筋が伸ばされ、その信号が脊髄まで伝わる。この信号が脊髄で 運動ニューロン に直結しており、運動ニューロンが発火して少し離れた部分の筋肉を収縮させる。その反動で足が上がる。 グリア細胞(glia cells) グリア細胞はニューロン（ヒトでは \\(1\\) - \\(2\\times10&#94;{11}\\) 個）の \\(3\\) - \\(10\\) 倍（マウスだと同数程度）存在し、脳の体積の約半分を占める。 長い軸索と興奮性膜を特徴とするニューロンに対して、グリア細胞の突起は細胞体の周辺に留まり、活動電位を発生しない。 ニューロンの生存や発達、機能発言のための液性環境維持と代謝的支援、神経伝達の調節等を行なっている。 と、ニューロンの補助的な役割だと今までは考えられていたが、最近ではもっと積極的な意味があるのでは無いかと研究されている。 中枢神経系のグリア細胞が下の4種からなる。 アストロサイト(astrocyte)の機能 を形成してがんが脳に転移しないように防御したりしている。 神経伝達物質の最取り込み（神経伝達物質が出てすぐに取り込まないと、麻薬や覚せい剤のような影響が出てしまう。）。 オリゴデンドロサイト(oligodendrocyte) において、 髄鞘（ミエリン・myelin） を形成する。（ 末梢 では が髄鞘を形成する。） 上衣細胞(ependymal cells) ミクログリア(microglia) 上衣細胞は脳室と脊髄中心管を覆う一層の上皮性細胞で、脳を脳脊髄液から遮断する（脳脊髄液脳関門(cerebro-spinal fluid brain barrier)） ミクログリアは損傷に際して活性化する脳内の免疫性細胞で貪食能を持つ。アストログリア、オリゴデンドロサイト、上衣細胞が 由来なのに対し、ミクログリアは 由来である。 脳の構造 哺乳動物の脳は、ほぼ共通の構造を持っている。ヒトの特徴は、 連合野 が広いということである。 解剖学用語 解剖学用語 解剖学的切断面 神経系の構成 中枢神経系(CNS: central nervous system) 脳(brain) 大脳(cerebrum) 小脳(cerebellum) 脳幹(brain stem) 脊髄(spinal cord) 末梢神経系(PNS: peripheral nervous system) 体性神経系(somatic nervous system) 脳神経(cranial nerve) 脊髄神経(spinal nerve) 自律神経系(autonomic nervous system) 小脳(cerebellum) 脳幹（延髄・橋・中脳・間脳）の背後に位置する。 大脳や脊髄と広範な連絡を持つ運動制御中枢 言語や思考などの高次脳機能に関与 小脳の 側の身体の運動に関与 脳幹(brain stem) 間脳→中脳→橋→延髄からなり、上方で間脳に、下方で脊髄に連なる（狭義では間脳を含めない）。 大脳から脊髄・小脳への情報、逆に脊髄・小脳から大脳への情報を中継 呼吸、意識、体温調節等の生命維持機能を制御 （大脳・小脳の損傷では生存できるが、脳幹の損傷は通常早急な死に至る） 錐体交叉 脳の運動ニューロンの軸索が延髄の後ろで一旦交叉（ ）して反対側にいっているから、反対側の機能がうまく制限できなくなる。 一方で は同側なので、そのようなことは起こらない。 脊髄(spinal cord) 脊髄は脊柱管にあり、延髄に続いて錐体交叉下端より始まり、脊髄円錐にて終わる。 皮膚・関節・筋肉から脳への情報、逆に脳からの情報を伝える主経路 末梢神経の脊髄神経で身体と通ずる。 脊髄に入る情報を運ぶ軸索は に含まれ、脊髄から出ていく情報を運ぶ軸索は に含まれる。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html"},{"title":"生物物理学 2019年度レポート（能瀬担当分）","text":"In [18]: import numpy as np import matplotlib.pyplot as plt 第1問 （１） 活動電位は神経細胞膜の膜電位に依存してイオンの透過度が変化することにより生ずる。この際起こるイオン透過性の一連の変化、および、それに応じた膜電位の変化について記述せよ（５～１０行程度）。 （１） 活動電位は、 膜を挟んだ電荷の劇的な再分配 であり、 細胞が活動電位を発生している時の 脱分極(Depolarization) は、膜を通過する $\\mathrm{Na}&#94;{+}$ の流入 再分極( Repolarization) は、$\\mathrm{K}&#94;+$ の流出 によりそれぞれ生じる。この時の一連の変化を、以下の膜電位の図と対応して記述する。なお、定常状態において、$\\mathrm{Na}&#94;{+}$ は細胞外で、$\\mathrm{K}&#94;{+}$ は細胞内で濃度が高い。 Ref: https://www.moleculardevices.com/applications/patch-clamp-electrophysiology/what-action-potential 外部からの刺激、他のニューロンが放出した神経伝達物質に特異的なチャネルを通過流入するような $\\mathrm{Na}&#94;{+}$、などの諸要因によって膜電位が上昇する。この時、膜電位がある閾値を超える脱分極を起こすと、膜にある $\\mathrm{Na}$ チャネルが開く。 $\\mathrm{Na}$ チャネルが開くと、細胞内外の濃度勾配によって $\\mathrm{Na}&#94;{+}$ がさらに流入し、膜電位が上昇する。 正の膜電位になると、$\\mathrm{Na}$ チャネルが不活性化し、今度は細胞内外の濃度勾配によって $\\mathrm{K}&#94;{+}$ が細胞外へと流出して膜電位が下がる。 この時、膜電位が静止膜電位よりもさらに負になる 過分極( Hyperpolarization) が生じることが知られている。なお、過分極は、ニューロンを不応期にすることで、活動電位が一方向にのみ伝達する仕組みを作っている。 静止膜電位に電位が戻る。 この現象を、 NEST を用いてシミュレーションする。 In [94]: import nest In [95]: # create Hodgkin-Huxley neuron with delta-shaped synaptic currents. neuron = nest . Create ( 'hh_psc_alpha' ) # create a spike generator spikegenerator = nest . Create ( 'spike_generator' ) # modify spike generation with times 10 and 50 ms nest . SetStatus ( spikegenerator ,{ 'spike_times' : [ 10. , 50. ]}) # create a voltmeter voltmeter = nest . Create ( 'voltmeter' ) # create add a spikedetector! spikedetector = nest . Create ( 'spike_detector' ) # connect spike generator with a given synaptic specification (weight) nest . Connect ( spikegenerator , neuron , syn_spec = { 'weight' : 1e3 }) # connect voltmeter to the neuron for measurements nest . Connect ( voltmeter , neuron ) # connect spikedetector to the neuron nest . Connect ( neuron , spikedetector ) In [96]: ### run simulation for 100ms nest . Simulate ( 100. ) # read out recording time and voltage from voltmeter (check the parameter list!) times = nest . GetStatus ( voltmeter )[ 0 ][ 'events' ][ 'times' ] voltage = nest . GetStatus ( voltmeter )[ 0 ][ 'events' ][ 'V_m' ] # plot results plt . plot ( times , voltage ) plt . xlabel ( 'Time (ms)' ); plt . ylabel ( 'Membrane potential (mV)' ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () （２） ホジキンとハクスレーは活動電位の発生機構を研究するため膜電位固定法を用いた。 図１ は膜電位固定実験下において流れる膜電流のうち、$\\mathrm{K}&#94;+$ 成分（$I_k$）のみを取り出したものである。膜をさまざまなテスト電位（$Vc= 25 \\mathrm{mV},\\ 60 \\mathrm{mV},\\ 85\\mathrm{mV},\\ 100 \\mathrm{mV}$）で固定したときの実験データーを示している。 ホジキンとハクスレーはこのような実験データーから活動電位を記述する数理モデルを提出した。講義の内容を踏まえ、以下の問いに答えよ。なお、$\\mathrm{K}&#94;+$ コンダクタンスの最大値$\\bar{g_k}=83\\Omega&#94;{-1}/\\mathrm{cm&#94;2}$、$\\mathrm{K}&#94;+$ の平衡電位 $\\mathrm{E_K}=-80\\mathrm{mV}$ とする。 In [136]: Ek = - 80 # mV gKmax = 83 # Ω&#94;-1/cm&#94;2 Vc = [ 25 , 60 , 85 , 100 ] # mV Ikinf = [ 25 , 60 , 85 , 100 ] # mA/cm&#94;2 （a） 定常状態（$t\\rightarrow\\infty$）における $\\mathrm{K}&#94;+$ コンダクタンス $g_{K_{\\infty}}$ を $I_{K_{\\infty}},\\ Vc, E_K$ で表せ。また $I_{K_{\\infty}}$ の実測値より各テスト電位における $g_{K_{\\infty}}$ の値を求めよ。 （a） ホジキンとハクスレーの提唱した数理モデルは、$\\mathrm{K}&#94;+,\\mathrm{Na}&#94;+$ などの各成分を並列等価に繋いだ回路モデルで表され、数式で表現すると $$ \\begin{aligned} g_{Na} &= \\frac{I_{Na}\\left(V_m,t\\right)}{V_m-E_{Na}}\\\\ g_K &= \\frac{I_K\\left(V_m,t\\right)}{V_m-E_K} \\end{aligned} $$ となる。したがって、定常状態（$t\\rightarrow\\infty$）における $\\mathrm{K}&#94;+$ コンダクタンス $g_{K_{\\infty}}$ は、 $$g_{K_{\\infty}} = \\frac{I_{K_{\\infty}}}{V_c-E_K}$$ で求められる。また、各テスト電位における $g_{K_{\\infty}}$ の値は、 print_func_1a = lambda x , y , z : print ( f \"| { str ( x ) } | { str ( y ) } | { str ( z ) } |\" ) print_func ( \"$$Vc\\ [\\mathrm {mV} ]$$\" , \"$$I_{K_{\\infty}}[\\mathrm{mA/cm&#94;2}]$$\" , \"$$g_{K_{\\infty}}\\ [\\mathrm{\\Omega&#94;{-1}/\\mathrm{cm&#94;2}}]$$\" , ) print_func ( \":-:\" , \":-:\" , \":-:\" ) for i , v in zip ( Ikinf , Vc ): print_func ( v , i , f \" { i / ( v - Ek ) : .2f } \" , ) $$Vc\\ [\\mathrm{mV}]$$ $$I_{K_{\\infty}}[\\mathrm{mA/cm&#94;2}]$$ $$g_{K_{\\infty}}\\ [\\mathrm{\\Omega&#94;{-1}/\\mathrm{cm&#94;2}}]$$ 25 25 0.24 60 60 0.43 85 85 0.52 100 100 0.56 （b） ホジキンとハクスレーは $\\mathrm{K}&#94;+$ コンダクタンス $g_K$ を $g_K = n&#94;4(t,V)\\cdot\\bar{g_K}$ と表した（ここで、$n(t,V)$ および以下に出てくる $\\tau_n,\\alpha_n,\\beta_n$ は講義での定義に従う）。定常状態における $n$ の値 $n_{\\infty}(V)$ を各テスト電位について求めよ。 （b） 題意より、$g_{K_{\\infty}} = n_{\\infty}&#94;4(t,V)\\cdot\\bar{g_K}$ と表せるので、 print_func_1b = lambda x , y , z , w : print ( f \"| { str ( x ) } | { str ( y ) } | { str ( z ) } | { str ( w ) } |\" ) print_func_1b ( \"$$Vc\\ [\\mathrm {mV} ]$$\" , \"$$I_{K_{\\infty}}[\\mathrm{mA/cm&#94;2}]$$\" , \"$$g_{K_{\\infty}}\\ [\\mathrm{\\Omega&#94;{-1}/\\mathrm{cm&#94;2}}]$$\" , \"$$n_{\\infty}$$\" , ) print_func_1b ( \":-:\" , \":-:\" , \":-:\" , \":-:\" ) for i , v in zip ( Ikinf , Vc ): gK_inf = i / ( v - Ek ) n_inf = pow ( gK_inf / gKmax , 1 / 4 ) print_func_1b ( v , i , f \" { gK_inf : .2f } \" , f \" { n_inf : .2f } \" ) $$Vc\\ [\\mathrm{mV}]$$ $$I_{K_{\\infty}}[\\mathrm{mA/cm&#94;2}]$$ $$g_{K_{\\infty}}\\ [\\mathrm{\\Omega&#94;{-1}/\\mathrm{cm&#94;2}}]$$ $$n_{\\infty}$$ 25 25 0.24 0.23 60 60 0.43 0.27 85 85 0.52 0.28 100 100 0.56 0.29 （c） $Vc= 25 \\mathrm{mV},\\ 60 \\mathrm{mV},\\ 85\\mathrm{mV},\\ 100 \\mathrm{mV}$ における $n(t,V)$ の時定数 $\\tau_n$ を 図1 より読みとり、 (b) で得られた $n_{\\infty}(V)$ も用いて各テスト電位における速度定数 $\\alpha_n,\\beta_n$ を求めよ。 $$\\begin{aligned} I_K\\left(V_m,t\\right) &= g_K\\left(V_m-E_K\\right)\\\\ &= n&#94;4(t,V_m)\\cdot\\bar{g_K}\\left(V_m-E_K\\right)\\\\ &= \\left[n_{\\infty}(V_m)-\\left[n_{\\infty}(V_m)-n_{\\infty}(V_0)\\right]\\cdot\\exp\\left(-t/\\tau_n(V_m)\\right)\\right]&#94;4\\cdot\\bar{g_K}\\left(V_m-E_K\\right) \\end{aligned} $$ となるので、$\\tau_n$ は、これからフィッティングすることができる。 パラメータのチューニングをやっていた結果このフィッティングを終えることができませんでした。 以下、 速度定数(rate constant) $\\alpha_n,\\beta_n$ が与えられている場合です。 なお、$n\\in[0,1]$ は無次元の係数であり、$\\mathrm{K}&#94;+$ コンダクタンスの 活性化パラメータ(activation parameter) と呼び、以下の微分方程式で表される。 $$ \\begin{aligned} \\frac{dn\\left(V_m,t\\right)}{dt} =&\\ \\alpha_n\\left(V_m\\right)\\cdot\\alpha_n\\left(1-n\\left(V_m,t\\right)\\right)\\\\&- \\beta_n\\left(V_m\\right)\\cdot\\beta_nn\\left(V_m,t\\right) \\end{aligned}\\qquad\\cdots(\\ast) $$ また、$\\alpha_n,\\beta_n$ は 速度定数(rate constant) であり、$\\left[t&#94;{-1}\\right]$ の次元を持ち、それぞれ以下で表される。 $$ \\begin{cases} \\begin{aligned} \\alpha_n\\left(V\\right) =&\\ \\frac{0.01(10-V)}{\\exp\\left(\\frac{10-V}{10}\\right)-1}\\\\ \\beta_n\\left(V\\right) =&\\ 0.125\\exp\\left(-V/80\\right) \\end{aligned} \\end{cases} $$ In [26]: V = np . linspace ( - 70 , 50 , 1000 ) alpha = lambda V : 0.01 * ( 10 - V ) / ( np . exp (( 10 - V ) / 10 ) - 1 ) beta = lambda V : 0.125 * np . exp ( - V / 80 ) In [27]: plt . title ( \"The relationship between \\n 'Membrane potential(V)' and 'alpha','beta' (6.3 degrees Celsius)\" ) plt . plot ( V , alpha ( V )) plt . plot ( V , beta ( V )) plt . xlabel ( \"Membrance potential (mV)\" ), plt . ylabel ( \"alpha,beta\" ) plt . grid () /Users/iwasakishuto/.pyenv/versions/anaconda3-5.0.1/lib/python3.6/site-packages/ipykernel_launcher.py:2: RuntimeWarning: invalid value encountered in true_divide したがって、$n_{\\infty}(V)$ は、先の式 $(\\ast)$ において $dn/dt=0$ の条件の時に得られるので、 $$n_{\\infty}(V) = \\frac{\\alpha_n\\left(V\\right)}{\\alpha_n\\left(V\\right)+\\beta_n\\left(V\\right)}$$ In [28]: n_inf = lambda V : alpha ( V ) / ( alpha ( V ) + beta ( V )) 第2問 （１） どのようにして記憶は脳内に保持されるのか？その仕組みはまだ完全には分かっていない。しかし、有力な仮説として神経活動の同時性がシナプスの変化として保存されるというものがある（ヘブの原理）。 講義の内容を踏まえ 、この考え方に沿った記憶の機構について論ぜよ（A4 半分～一枚程度）。 （１） ヘブ則(Hebbian theory, Hebb's rule) は、 「神経細胞 $A$ の軸索が細胞 $B$ を発火させるのに関与していると考えられるほど近くにあり、繰り返しその発火に関与する時、何かしらの成長過程または代謝変化が一方あるいは両方の細胞に起こり、細胞 $B$ を発火させる細胞の1つとして細胞 $A$ の効率が増加する。」 というものであり、ある神経細胞（$A$）の軸索が他の神経細胞（$B$）を発火させる パターン が頻繁に生じるのであれば、細胞間の関係（重み）が増し、その パターン をより伝達しやすくなる、というものである。 なお、ヘブ則はドナルド・ヘブ(Donald Hebb)が1949年に提案したものであり、その後似たような性質として、1997年に スパイクタイミング依存可塑性(spike timing-dependent plasticity, STDP) という仕組みも発見された。これは、 神経細胞 $B$ が発火する少し 前 に神経細胞 $A$ が発火していれば、シナプスが 強 まる 神経細胞 $B$ が発火する少し 後 に神経細胞 $A$ が発火していれば、シナプスが 弱 まる というメカニズムである。 ここでも、この現象を NEST を用いてシミュレーションし、STDPを用いて学習を行うモデルを作成するが、コードが長くなってしまったので、 最後 に載せる。 （２） ヘブの原理を応用した記憶のモデルについて考察しよう。 図2 のような神経回路を考える。上側から入力する一群の神経（$f_1&#94;{\\prime}, f_2&#94;{\\prime},\\ldots,f_j&#94;{\\prime},\\ldots$：ここでは軸索のみを示している）が、横にならんだ別の群の神経細胞（$g_1&#94;{\\prime}, g_2&#94;{\\prime},\\ldots,g_i&#94;{\\prime},\\ldots$）にシナプスを形成している。 $f&#94;{\\prime}$ 神経群の活動をベクトル $\\mathbf{f}[f_1,f_2,\\ldots,f_j,\\ldots]$、$g&#94;{\\prime}$ 神経群の活動をベクトル$\\mathbf{g}[g_1,g_2,\\ldots,g_i,\\ldots]$ で表す。また、$f_j&#94;{\\prime}$ が $g_i&#94;{\\prime}$ 上に作るシナプス（図中の交点）の重みを $a_{ij}$ とし、その総体を行列 $\\mathbf{A}[a_{ij}]$ で表す。 ヘブの原理によると、$f_j&#94;{\\prime}$ と $g_i&#94;{\\prime}$ が同時に活動したときに、その間のシナプス $a_{ij}$ が、$\\Delta a_{ij} = k\\cdot f_j\\cdot g_i$（$k$ は定数）で変化する。講義で述べた条件反射に例えると、$f&#94;{\\prime}$ が条件刺激、$g&#94;{\\prime}$ が無条件刺激に対応した神経群であり、条件刺激と無条件刺激が同時に入力した際、その間のシナプスが強化された結果、学習が成立する。 （a） まず具体的な例として、$f&#94;{\\prime},g&#94;{\\prime}$ それぞれ6 個のニューロンからなる回路において、$\\mathbf{A}=\\mathbf{0}$ の状態から $\\mathbf{f}=[0,0,0, 1, 1, 1], \\mathbf{g}=[1,1,0,1,0,0]$ のパターンで同時に活動した時を考える（$1$ は神経が活動した状態、$0$ は活動していない状態と考えればよい）。この時ヘブの原理にしたがってシナプスが変化し学習が成立するとした時、学習後の $\\mathbf{A}$ を求めよ。ここでは簡単のため $k=1$ とする。 （a） In [73]: f = np . array ([ 0 , 0 , 0 , 1 , 1 , 1 ]) g = np . array ([ 1 , 1 , 0 , 1 , 0 , 0 ]) A = np . zeros ( shape = ( g . shape + f . shape )) k = 1 In [74]: A += k * np . expand_dims ( f , axis = 0 ) * np . expand_dims ( g , axis = 1 ) In [75]: print ( A ) [[0. 0. 0. 1. 1. 1.] [0. 0. 0. 1. 1. 1.] [0. 0. 0. 0. 0. 0.] [0. 0. 0. 1. 1. 1.] [0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0.]] （b） 上記 問a において、学習後に今度は条件刺激にあたる神経群 $f&#94;{\\prime}$ の活動のみがあった時を考えよう（記憶成立前に $f&#94;{\\prime},g&#94;{\\prime}$ 神経群両方が活動した際には、$g&#94;{\\prime}$ 神経群は $f&#94;{\\prime}$ 神経群からの入力によってではなく他から来る条件刺激により活動したと考える）。 $f&#94;{\\prime}$ 神経群からの入力のみがあった場合、神経 $g_i&#94;{\\prime}$ の出力 $G_i$ は、 $$G_i = \\sum_j a_{ij} \\cdot f_j$$ となる。記憶成立前と同じパターン $\\mathbf{f}=[0,0,0, 1, 1, 1]$ で$f&#94;{\\prime}$ 神経群が活動したときの $g&#94;{\\prime}$ 神経群の出力 $\\mathbf{G}=[G_1,G_2,\\ldots,G_i]$ を求め、それが $\\mathbf{g}=[1,1,0,1,0,0]$ の整数倍になっている、すなわち記憶のパターンが再現されることを確認せよ。 （b） In [78]: G = A . dot ( f ) In [82]: print ( \"G:\" , G . astype ( int )) print ( \"g:\" , g ) G: [3 3 0 3 0 0] g: [1 1 0 1 0 0] 記憶のパターンが再現されることが確認できた。 （c） つぎに一般化して考える。上と同様の原理にしたがって、$\\mathbf{A}=\\mathbf{0}$ の状態から $\\mathbf{f}, \\mathbf{g}$ のパターンで同時に活動した時、学習成立後の $\\mathbf{A}$ は $k\\mathbf{g}&#94;T\\mathbf{f}$ と表すことができる。このとき、学習後に$f&#94;{\\prime}$ 神経群のみが $\\mathbf{f}$ のパターンで活動したときの$g&#94;{\\prime}$ 神経群の出力 $\\mathbf{G}$ を求め、上と同様に記憶が再現されることを示せ。 （c） $$ \\begin{aligned} G_i &= \\sum_ja_{ij}\\cdot f_j\\\\ &= \\sum_j \\left(k g_i\\cdot f_j\\right)\\cdot f_j\\\\ &= kg_i\\sum_jf_j&#94;2 \\end{aligned} $$ となり、$\\sum_jf_j&#94;2$ は $i$ に依存しないので、$\\mathbf{G}$ は $\\mathbf{g}$ の $k\\sum_jf_j&#94;2$ 倍になることがわかる。 （d） 今度は、同じ回路に複数の記憶が同時に蓄えられる場合を考える。すなわち、$\\mathbf{f}_i$ と $\\mathbf{g}_i$ の同時活動で $A_i= k\\mathbf{g}_i&#94;T\\mathbf{f}_i$ の記憶が形成され、異なった $\\mathbf{f}_i$ と $\\mathbf{g}_i$ による記憶が複数起こった総和として、$\\mathbf{A} = \\sum_iA_i$ となるとする。このとき、複数の記憶が混同せず、再現される（すなわち $\\mathbf{G}_i\\propto\\mathbf{g}_i$）のは、$f&#94;{\\prime}$ 神経群の複数の活動 $\\mathbf{f}_i$ 間にどのような関係があるときかを考察せよ。 （d） 先の式を考えれば、$\\mathbf{f}_i$ が直交していれば良いことがわかる。 （e） この回路の性質について自由に考察せよ。 （e） (d) より、全ての記憶を正確に覚えておくには、全ての刺激パターンが直交している必要があった。これを言い換えると、 おばあちゃん細胞(grand mother cell)説 となる。これは、 「ある特定の対象物についての私たちの知覚は、まだ見つかってないどこか究極の知覚領野で少数の特殊化したニューロンが発火するため」 と考えるモデルである。 しかし、世の中の記憶すべき対象と神経細胞を一対一に対応させるのは現実的に不可能に思える上、ある神経細胞が死んでしまった時にその対象 「だけ」 が記憶から抜け落ちてしまう、と考えるのは少し不自然である。その一方で、例えば側頭葉には 「ある特定の人物や建物を見た時だけに反応する神経細胞」 が見つかっており、この説の真偽は未だ判明していない。 僕は、これに対して、基本的にはヘブ則が成り立っているが、何らかの内部状態が存在し、それによって我々の知覚が多少変化する、というモデルを提唱する。例えば、以下の画像を見る。 Ref: https://www.dailymail.co.uk/femail/article-4471260/Can-spot-real-Mona-Lisa.html この時、何も考えずにこれを見ると 「モナリザである」 と知覚する。これは、過去の経験からこの絵のようなパターンをモナリザだと記憶しているからである。しかし、この絵を逆さまにすると実はモナリザではないことがわかる。それを確かめた後に再び絵を逆さまにすると、今度は 「モナリザではない」 と知覚するようになる。 同じ絵を見せられて同じ刺激が入っているはずなのに、別の知覚が生じるが、これもシナプスの重みだとは考えにくい。このように、我々は日々時間 $t$ に依存した状態を持っており、この状態に応じてシナプス間の重みが変化し、知覚も変化する、と考える方が説明能力は高そうである。 Code In [97]: import nest import time import random import numpy as np import matplotlib.pyplot as plt def plotPatternRaster ( spikes , ax = None , cmap = \"binary_r\" , ** kwargs ): if ax is None : fig , ax = plt . subplots () H , W = spikes . shape ax . matshow ( spikes , aspect = W / H , cmap = cmap , ** kwargs ) ax . set_title ( \"Raster plot of presynaptic neurons\" ), ax . set_xlabel ( \"time (ms)\" ), ax . set_ylabel ( \"neuron ID\" ) return ax def plotFiringRates ( spikes , fig = None ): if fig is None : fig = plt . figure () num_neurons , _ = spikes . shape firing_rates = np . mean ( spikes , axis = 1 ) * 100 neurons_IDs = np . arange ( num_neurons ) #=== Plot === ax1 = fig . add_subplot ( 2 , 1 , 1 ) ax1 . barh ( neurons_IDs , firing_rates , height = 1 ) ax1 . set_title ( \"Average firing rates of presynaptic neurons\" ), ax1 . set_ylabel ( \"Neuron ID\" ) ax2 = fig . add_subplot ( 2 , 1 , 2 ) ax2 . hist ( firing_rates ) ax2 . set_xlabel ( \"Average firing rate (Hz)\" ), ax2 . set_ylabel ( \"Frequency\" ) return fig class PoissonProcessGenerator (): def __init__ ( self , ** params ): if len ( params ) > 0 : self . load_params ( ** params ) self . repeated = False self . pattern_repeated_spikes = None self . simulation_length = None self . num_presynaptic_neurons = None def load_params ( self , ** params ): self . __dict__ . update ( params ) def generate_spikes ( self , simulation_length = 1000 , num_presynaptic_neurons = 2000 , seed = None ): \"\"\"Poisson Process. - each presynpatic neuron will emit spikes independently - generated by a 'Poisson process' which varies randomly in firing rate r in the range of [0,90] Hz - the rate of change in r is modified by dr where: - started at 0 - updated randomly from a uniform distribution over [−360,360] Hz/s every millisecond - clipped to within [−1800,1800] Hz/s - manually add some additional spikes to guarantee that 'in every 50ms time bin, each neuron spikes at least once.' ~~~~~~~~~ Arguments @params simulation_length : (int) the length of the simulation processing. (memorize) @params num_presynaptic_neurons: (int) the number of independent presynaptic neurons. (memorize) @params seed : (int) If you want to make an experiment replicable. \"\"\" np . random . seed ( seed ) start = time . time () self . simulation_length = simulation_length self . num_presynaptic_neurons = num_presynaptic_neurons spikes = np . zeros ( shape = ( num_presynaptic_neurons , simulation_length )) spikes [:, 0 ] = np . clip ( np . random . poisson ( self . starting_Hz / 1000 ), 0 , 1 ) # ds is randomly picked from a uniform distribution over [−360,+360] Hz/s ds = np . random . uniform ( self . min_ds , self . max_ds , size = ( num_presynaptic_neurons , simulation_length )) dr = np . zeros_like ( ds ) for t in range ( simulation_length - 1 ): # dr is clipped to within [−1800,1800] (Hz/s) dr [:, t + 1 ] = np . clip ( dr [:, t ] + ds [:, t ], self . min_dr , self . max_dr ) # r varies beteen [0,90] (Hz) r = np . insert ( dr [:,: - 1 ], 0 , self . starting_Hz , axis = 1 ) for t in range ( simulation_length - 1 ): r [:, t + 1 ] = np . clip ( r [:, t ] + dr [:, t ], self . min_r , self . max_r ) # Manually add some additional spikes to guarantee that # \"in every 50ms time bin, each neuron spikes at least once\". spikes [:, t + 1 ] = np . clip ( np . random . poisson ( r [:, t + 1 ] / 1000 ), 0 , 1 ) if t + 1 >= self . min_span : mask = np . where ( np . sum ( spikes [:, t + 1 - self . min_span : t + 1 ], axis = 1 ) == 0 )[ 0 ] add_pos = np . random . randint ( t + 1 - self . min_span , t + 1 , size = len ( mask )) for idx , pos in zip ( mask , add_pos ): spikes [ idx , pos ] = 1 self . spikes = spikes print ( f \"Processing Time: { time . time () - start : .3f } [s]\" ) return spikes def select_segment ( self , seed = None ): \"\"\"Preprocessing. 1. Divide the presynaptic spiking activity into segments of 50ms (segment_length) 2. select a random 50ms segment (idx=selection) to be considered as the \"pattern\" \"\"\" self . num_segments = int ( self . simulation_length / self . segment_length ) selection = np . random . RandomState ( seed ) . randint ( 1 , self . num_segments ) pattern_spikes = self . spikes [:, selection * self . segment_length :( selection + 1 ) * self . segment_length ] self . pattern_spikes = pattern_spikes self . selection = selection print ( f \"Spikes divided into { self . num_segments } segments.\" ) print ( f \" { selection } -th segment was selected as a Pattern.\" ) def memorize ( self , spikes , repeated = False ): \"\"\" If you already have Poisson Process array (`spont_100s_alt.npy`), you have to memorize it. \"\"\" print ( \"[Before]\" ) print ( f \"simulation length: { self . simulation_length } \" ) print ( f \"Number of the presynaptic neurons: { self . num_presynaptic_neurons } \" ) print ( \"Memorizing...\" ) self . num_presynaptic_neurons , self . simulation_length = spikes . shape if repeated : self . pattern_repeated_spikes = spikes self . repeated = True else : self . spikes = spikes self . repeated = False print ( \"[After]\" ) print ( f \"simulation length: { self . simulation_length } \" ) print ( f \"Number of the presynaptic neurons: { self . num_presynaptic_neurons } \" ) def repeat_segment ( self , proportion_of_neurons = 0.5 , frequency_of_patterns = 0.25 ): if self . repeated : print ( \"Requirement already satisfied.\" ) return ( None , None ) else : self . pattern_repeated_spikes = np . copy ( self . spikes ) self . repeated_position = np . zeros ( self . spikes . shape ) num_repeats = round ( frequency_of_patterns * self . num_segments ) idx_repeats = random . sample ( range ( self . num_segments ), num_repeats ) for idx in idx_repeats : self . pattern_repeated_spikes [ 0 : int ( self . num_presynaptic_neurons * proportion_of_neurons ), idx * self . segment_length :( idx + 1 ) * self . segment_length ] = self . pattern_spikes [ 0 : int ( self . num_presynaptic_neurons * proportion_of_neurons ),:] self . repeated_position [ 0 : int ( self . num_presynaptic_neurons * proportion_of_neurons ), idx * self . segment_length :( idx + 1 ) * self . segment_length ] = 1 print ( f \"Number of spikes added: { np . sum ( self . repeated_position ) } \" ) print ( f \"Spikes are saved as `self.pattern_repeated_spikes`.\" ) self . repeated = True return self . pattern_repeated_spikes , self . repeated_position def generatePoissonNoise ( self , frequency = 10 ): noise = np . random . poisson ( frequency / 1000 , size = ( self . spikes . shape )) return noise def addPoisonNoise ( self , frequency = 10 ): spikes = self . pattern_repeated_spikes if self . pattern_repeated_spikes is not None else self . spikes noise = self . generatePoissonNoise ( frequency = frequency ) self . noise_added_spikes = np . clip ( spikes + noise , 0 , 1 ) print ( f \"Spikes are saved as `self.noise_added_spikes`.\" ) return self . noise_added_spikes class NeuronalNetwork (): def __init__ ( self , ** params ): if len ( params ) > 0 : self . load_params ( ** params ) self . built = False def load_params ( self , ** params ): self . __dict__ . update ( params ) def build ( self , spike_indicies , re = False ): \"\"\"build the Neuronal Network @param spike_indicies: n-th presynaptic_neuron's i-th spike occurs at spike_indicies[n][i] \"\"\" if re : print ( \"Reset Kernel.\" ) re = \"Re\" if re else \"\" nest . ResetKernel () self . num_presynaptic_neurons = len ( spike_indicies ) self . spike_generator = nest . Create ( 'spike_generator' , self . num_presynaptic_neurons , params = [{ \"spike_times\" : np . asarray ( spike_idx , dtype = float ) + 1 } for spike_idx in spike_indicies ]) self . parrot_neuron = nest . Create ( 'parrot_neuron' , self . num_presynaptic_neurons ) self . post_neuron = nest . Create ( 'iaf_psc_alpha' ) self . spike_detector = nest . Create ( 'spike_detector' ) self . voltmeter = nest . Create ( 'voltmeter' , params = { 'interval' : 0.1 }) self . spike_indicies = spike_indicies print ( f \" { re } Created { self . num_presynaptic_neurons } spike generators.\" ) print ( f \" { re } Created { self . num_presynaptic_neurons } parrot neurons.\" ) print ( f \" { re } Created 1 post_neuron.\" ) print ( f \" { re } Created spike detector.\" ) print ( f \" { re } Created voltmeter.\" ) def addGaussianPackets ( self , simulation_length_pulses , proportion_of_neurons_pulsing , number_of_pulses , spikes_per_pulse , std_spikes_per_pulse , seed = None ): pulse_center_times = np . random . RandomState ( seed ) . randint ( 10 , simulation_length_pulses - 10 , number_of_pulses ) . astype ( float ) self . gaussian_pulses = nest . Create ( \"pulsepacket_generator\" , params = { \"pulse_times\" : pulse_center_times , \"activity\" : spikes_per_pulse , \"sdev\" : std_spikes_per_pulse }) conn_dict = { 'rule' : 'fixed_total_number' , 'N' : int ( self . num_presynaptic_neurons / proportion_of_neurons_pulsing ) } nest . Connect ( self . gaussian_pulses , self . parrot_neuron , conn_dict ) def compile ( self , synapse_model = \"static\" , ex = 1 , ** params ): if self . built : self . build ( self . spike_indicies , re = True ) if len ( params ) > 0 : self . load_params ( ** params ) nest . SetStatus ( self . post_neuron , [{ \"tau_minus\" : self . tau_LTD }]) nest . Connect ( self . spike_generator , self . parrot_neuron , \"one_to_one\" ) syn_dict = self . SynapseModelHandler ( name = synapse_model , ex = ex ) nest . Connect ( self . parrot_neuron , self . post_neuron , \"all_to_all\" , syn_dict ) nest . Connect ( self . post_neuron , self . spike_detector ) nest . Connect ( self . voltmeter , self . post_neuron ) print ( f \"Connected { self . num_presynaptic_neurons } spike generators to { self . num_presynaptic_neurons } parrot neurons. (one-to-one)\" ) print ( f \"Connected { self . num_presynaptic_neurons } parrot neurons to 1 post neuron. (all-to-all) Method: { syn_dict [ 'model' ] } \" ) print ( \"Connected post neuron to spike detector\" ) print ( \"Connected voltmeter to post neuron\" ) self . built = True def simulate ( self , T = 1000. , ax = None , ** plotkwargs ): if ax is None : fig , ax = plt . subplots () nest . Simulate ( float ( T )) times = nest . GetStatus ( self . voltmeter )[ 0 ][ 'events' ][ 'times' ] voltage = nest . GetStatus ( self . voltmeter )[ 0 ][ 'events' ][ 'V_m' ] spiketimes = nest . GetStatus ( self . spike_detector )[ 0 ][ 'events' ][ 'times' ] # As the simulation span is larger than reaction length, # we will modify the voltage to Make it understandable. for spike in spiketimes : voltage [( np . abs ( np . asarray ( times ) - spike )) . argmin ()] = 0. ax . plot ( times , voltage , ** plotkwargs ) ax . set_xlabel ( 'Time (ms)' ), ax . set_ylabel ( 'Membrane potential (mV)' ), ax . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) return ax def mask_pattern ( self , ax , is_pattern , simulation_times ): add_minus_1 = np . insert ( arr = np . any ( is_pattern [:,: simulation_times ], axis = 0 ), obj = 0 , values = False ) . astype ( int ) masks = add_minus_1 [ 1 :] - add_minus_1 [: - 1 ] start_points = np . where ( masks == 1 )[ 0 ] end_points = np . where ( masks == - 1 )[ 0 ] for s , e in zip ( start_points , end_points ): ax . axvspan ( s , e , color = \"coral\" , alpha = 0.7 ) return ax def plotWeights ( self , is_pattern_neuron , ax = None ): if ax is None : fig , ax = plt . subplots () pre_to_post_conninfo = nest . GetConnections ( self . parrot_neuron , self . post_neuron ) pre_to_post_weights = np . asarray ( nest . GetStatus ( pre_to_post_conninfo , keys = 'weight' )) idxes = np . arange ( len ( pre_to_post_weights )) ax . barh ( idxes [ ~ is_pattern_neuron ], pre_to_post_weights [ ~ is_pattern_neuron ], color = \"blue\" , label = \"Random Neuron\" ) ax . barh ( idxes [ is_pattern_neuron ], pre_to_post_weights [ is_pattern_neuron ], color = \"red\" , label = \"Pattern Neuron\" ) ax . set_xlabel ( \"Synaptic weights\" ), ax . set_ylabel ( \"Neuron ID.\" ), ax . legend () return ax def SynapseModelHandler ( self , name , ex ): if ex == 1 : SynapseModelDict = { \"static\" : { \"model\" : \"static_synapse\" , \"weight\" : 0.5 , }, \"standard\" : { \"model\" : \"stdp_synapse\" , \"weight\" : 1.0 , \"tau_plus\" : self . tau_LTP , \"mu_plus\" : self . a_LTP , \"mu_minus\" : self . a_LTD , }, \"triplet\" : { \"model\" : \"stdp_triplet_synapse\" , \"weight\" : 1.0 , \"tau_plus\" : self . tau_LTP , \"Aminus\" : self . a_LTD / 2 , \"Aminus_triplet\" : self . a_LTD / 10 , \"Aplus\" : self . a_LTP , \"Aplus_triplet\" : self . a_LTP * 10 , }, \"FACETS\" : { \"model\" : \"stdp_facetshw_synapse_hom\" , \"weight\" : 0.7 , \"tau_plus\" : self . tau_LTP , \"tau_minus_stdp\" : self . tau_LTD , } } if name not in SynapseModelDict : raise ValueError ( f \"Couldn't understand { name } . Please chose from \\033 [01m \\033 [36m ' { ', ' . join ( SynapseModelDict . keys ()) } ' \\033 [0m\" ) return SynapseModelDict [ name ] elif ex == 2 : SynapseModelDict = { \"static\" : { \"model\" : \"static_synapse\" , \"weight\" : 1.0 , }, \"standard\" : { \"model\" : \"stdp_synapse\" , \"weight\" : 1.0 , \"tau_plus\" : self . tau_LTP , \"mu_plus\" : self . a_LTP * 1000 , \"mu_minus\" : self . a_LTD / 1000 , \"Wmax\" : 5.0 }, \"triplet\" : { \"model\" : \"stdp_triplet_synapse\" , \"weight\" : 1.0 , \"tau_plus\" : self . tau_LTP , \"Aminus\" : self . a_LTD / 2 , \"Aminus_triplet\" : self . a_LTD / 10 , \"Aplus\" : self . a_LTP , \"Aplus_triplet\" : self . a_LTP * 10 , \"Wmax\" : 5.0 }, \"FACETS\" : { \"model\" : \"stdp_facetshw_synapse_hom\" , \"weight\" : 0.75 , \"tau_plus\" : self . tau_LTP , \"tau_minus_stdp\" : self . tau_LTD , \"Wmax\" : 5.0 } } if name not in SynapseModelDict : raise ValueError ( f \"Couldn't understand { name } . Please chose from \\033 [01m \\033 [36m ' { ', ' . join ( SynapseModelDict . keys ()) } ' \\033 [0m\" ) return SynapseModelDict [ name ] In [98]: poisson_params = { \"min_span\" : 50 , # [ms] \"starting_Hz\" : 54 , # [Hz] \"min_r\" : 0 , # [Hz] \"max_r\" : 90 , # [Hz] \"min_ds\" : - 3.6e-1 , # [Hz/ms] \"max_ds\" : 3.6e-1 , # [Hz/ms] \"min_dr\" : - 1.8 , # [Hz/ms] \"max_dr\" : 1.8 , # [Hz/ms] \"segment_length\" : 50 , # [ms] Length of 1 Presynaptic spiking segment length. } In [99]: seed = 0 In [100]: num_presynaptic_neurons = 2000 # Number of the presynaptic neurons. simulation_length = 1000 # [ms] In [101]: poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) In [102]: spikes = poisson_generator . generate_spikes ( simulation_length , num_presynaptic_neurons , seed = seed ) Processing Time: 0.962[s] 領域を分け、パターンを選択する。 In [103]: poisson_generator . select_segment ( seed = seed ) Spikes divided into 20 segments. 13-th segment was selected as a Pattern. In [104]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( spikes , ax = ax ) plt . tight_layout () plt . show () パターンをコピーする。 In [105]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [106]: pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) Number of spikes added: 250000.0 Spikes are saved as `self.pattern_repeated_spikes`. ポアソンノイズを加える。 In [107]: frequency = 10 # [Hz] In [108]: noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes are saved as `self.noise_added_spikes`. In [109]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) plt . tight_layout () plt . show () 生成された繰り返しパターンを確かめる。 In [113]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) ax = plotPatternRaster ( output_identities , cmap = \"RdGy_r\" , ax = ax , alpha = 0.7 ) plt . tight_layout () plt . show () In [114]: simulation_length_100s = 100_000 num_presynaptic_neurons = 2_000 poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) pre_spikes_wrepeats_100s = poisson_generator . generate_spikes ( simulation_length_100s , num_presynaptic_neurons , seed = seed ) Processing Time: 159.039[s] In [115]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [116]: poisson_generator . select_segment ( seed = seed ) pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes divided into 2000 segments. 685-th segment was selected as a Pattern. Number of spikes added: 25000000.0 Spikes are saved as `self.pattern_repeated_spikes`. Spikes are saved as `self.noise_added_spikes`. In [117]: repeated_idxes = np . any ( poisson_generator . repeated_position , axis = 1 ) In [118]: print ( f \"Pattern shape = { poisson_generator . pattern_spikes . shape } \" ) print ( f \"Poisson Process shape = { noise_added_spikes . shape } \" ) Pattern shape = (2000, 50) Poisson Process shape = (2000, 100000) In [119]: simulation_times = 1000 In [120]: spike_indicies = [ np . where ( is_spike )[ 0 ] for is_spike in noise_added_spikes == 1 ] In [121]: STDP_paramaters = { 'a_LTP' : 0.03125 , 'a_LTD' : 0.85 * 0.03125 , 'tau_LTP' : 16.8 , 'tau_LTD' : 33.7 , } シナプスの関係性に応じていくつか試す。 In [122]: model = NeuronalNetwork ( ** STDP_paramaters ) model . build ( spike_indicies ) Created 2000 spike generators. Created 2000 parrot neurons. Created 1 post_neuron. Created spike detector. Created voltmeter. In [123]: model . compile ( synapse_model = \"static\" , ex = 1 ) Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: static_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [124]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [125]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [126]: model . compile ( synapse_model = \"standard\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [127]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [128]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [129]: model . compile ( synapse_model = \"triplet\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_triplet_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [130]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [131]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [132]: model . compile ( synapse_model = \"FACETS\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_facetshw_synapse_hom Connected post neuron to spike detector Connected voltmeter to post neuron In [133]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [134]: ax = model . plotWeights ( repeated_idxes ) plt . show () パラメータのチューニングが終わりませんでした。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-report-latter.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-report-latter.html"},{"title":"2018年過去問","text":"前半 ： 相澤先生 （問１） F値が2.8のレンズAと5.6のレンズBの像映の明るさを比較せよ。 レンズ口径が同じで焦点距離が28mmのレンズと35mmのレンズの像影の明るさを比較せよ。 （解答） 後半 ： 山崎先生 （問５） 判別分析法（大津の閾値法）について、数式を用いながら説明せよ。 2値画像化の際に用いる他の手法のアルゴリズムを説明せよ。 （解答）","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2018.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2018.html"},{"title":"2017年過去問","text":"前半 ： 相澤先生 （問１） 顔が蛍光灯の下で撮影したら青白く写ったのはなぜか。 虫眼鏡をつかって、開口径、焦点距離 = \\(A(5,2)\\ B(6,3)\\ C(7,4)\\) のうち、一番早く焦げるのはどれか。 服が地下街で見たときお気に入りの服だったが、日中着てみたらお気に入りの色とちょっと違った。なぜか？ （解答） カメラのホワイトバランス機能を用いずに蛍光灯の下で撮影したためと考えられる。昼間の太陽光の色温度は5500K程度であるが、この値より低くなるほど光源の赤みは増し、高くなるほど青みが増す。色温度が高いこの光源が顔に反射したのを撮影したことが、顔が青くなった理由である。 焦光性能が高いレンズの方がより焦げやすいと考えられるので、 \\(F\\) 値の小さいレンズの方が良い。 \\(F\\) 値は \\(F\\) =(焦点距離)/(レンズの直径)で与えられ、レンズの \\(F\\) 値はそれぞれ \\(A(0.4)\\ B(0.5)\\ (0.57)\\) となるので、最も早く焦げるのは、 \\(A\\) 1と同じ。証明の色温度が異なると同じ白色でも赤みがかかったり青みがかかってしまうから。 （問２） 以下の目的のとき、それぞれどのようなフィルタを用いるのが適切か。 大振幅のスパイクノイズを除去したい。 エッジを維持しつつ、小振幅のガウシアンノイズを除去したい。 （解答） ¬メディアンフィルタ¬ メディアンフィルタは、注目画素を中心とした領域で、輝度値の中央値をフィルタの出力とするもので、中央値を用いることで 外れ値に相当するスパイクノイズ を取り除ける。平坦化フィルタでは綺麗に取り除けない上にエッジがぼやけてしまうが、メディアンフィルタではエッジがあまり影響を受けずにスパイクノイズを除くことができる。 ¬バイラテラルフィルタ¬ バイラテラルフィルタは、注目画素からの距離による重みと注目画素との画素値の差分に応じて、ガウス分布に従う重みを付けた平坦化フィルタである。画素値が離れるほど重みが小さくなるため、エッジ周辺で画素値が混ざり合わず、エッジを保存できる。 （問３） 1M枚の画像から完全に一致する画像を見つけるにはどうすればいいか。 1M枚の画像から、輝度値が異なる似た画像を取り出したい。どのようにすればいい か。なぜその手法だと使えるのか。 （解答） ¬粗密探索(coarse-to-fine search)法¬に従い、解像度を下げた画像を次々に作成し、解像度の低い画像で一致したものだけをより高い解像度の画像で判定することを繰り返す。 なお、この時、 「完全に一致する画像」 を見つけたいのであれば、平均化して解像度を落とすのではなく、数点サンプリングして解像度の低い画像を作成した方が効率が良いと考えられる。 ¬BoVM(Bag-of Visual Words)¬という画像特徴表現と最近傍探索によって実現が可能である。BoVF表現とは、SIFTなどの特徴ベクトルをk-means法などによりクラスタリングし、 \\(k\\) クラスに分割する。その後、 \\(k\\) クラスの出現頻度を元にkd-tree法により探索木を構築する。 探索木を用いれば、近接した数データのみを考えれば良いため、非常に効率が良い。 後半 ： 山崎先生 （問５） PCAを説明せよ。 8点アルゴリズムを説明せよ。 （解答） PCA(主成分分析)は多次元の特徴空間に分散する多数の学習用入力画像から、分布をよく説明する低次元の特徴空間（部分空間）を求め、特徴選択を行う手法。誤差最小化、分散最大化の二通りの定式化方法があるが、分散共分散行列の固有値の大きな方から対応するベクトルを第1成分、第2成分、…と決めれば良い。 視点が異なる2枚の画像があるとした時、3次元中の点Pがそれぞれの画像でそれぞれ点 \\((u,v),(u&#94;{\\prime},v&#94;{\\prime})\\) に見えているとする。この時、 $$ \\left(\\begin{array}{lll}{u&#94;{\\prime}} & {v&#94;{\\prime}} & {1}\\end{array}\\right)\\underbrace{\\left(\\begin{array}{lll}{f_{11}} & {f_{12}} & {f_{13}} \\\\ {f_{21}} & {f_{22}} & {f_{23}} \\\\ {f_{31}} & {f_{32}} & {f_{33}}\\end{array}\\right)}_{F}\\left(\\begin{array}{l}{u} \\\\ {v} \\\\ {1}\\end{array}\\right)=0 $$ を満たす行列 \\(F\\) が存在する。 Fが得られると、2つのカメラの位置関係（回転行列 \\(\\mathbf{R}\\) と平行移動ベクトル \\(\\mathbf{t}\\) ）が得られるため、他方のカメラの点がもう一方のカメラでどこに見えるのかわかり、三次元幾何が計算できる。 Fは \\(3\\times3\\) の行列だが、行列Fには定数倍の不定性があるため、未知数の数は8個である。1組の画像座標から1つの線型方程式が得られるため、最低8点の対応点が見つかればFを計算することができ、3次元幾何が得られる。こうして8組の点から3次元幾何を計算する手法を8点アルゴリズムという。 （問６） アンサンブル学習の3つの手法について特徴と違いを説明せよ。 （解答） アンサンブル学習には、@バギング@、@ランダムフォレスト@、@ブースティング@がある。 @バギング@： トレーニングデータを（重複を許して）ランダムに分割して、それぞれ学習器 \\(f&#94;b(\\mathbf{x})(b=1,2,\\ldots,B)\\) を作り、全体の結果は回帰ならば平均 \\(f(\\mathbf{x}) = \\frac{1}{B}\\sum_{b}f&#94;b(\\mathbf{x})\\) m分類ならば多数決とする。複数の学習器を用いることで過学習を防ぐことができる。 @ランダムフォレスト@： 基本的にはバギングと手順は同じであるが、学習器がそれぞれ学習に用いる特徴量もランダムに選択する。これにより、各学習器の性能が全く異なることが、バギングとの違いである。 @ブースティング@： 各学習器の学習時に、その学習器がどのようなときに誤るかをそれぞれの学習器の性能を見て重み付けし、各学習器の重み付けを考慮して平均や多数決を取る。他の2 つと異なり学習を並列に行うことができない。ビッグデータではしばしばランダムフォレストに劣る。 （問７） パーセプトロンの学習が収束するまで表を埋めよ。 初期重み \\((w_2, w_1,w_0) ＝\\) （学生証番号下2桁、下1桁、1) 学習率 \\(\\eta=1\\) 学習データ \\((x,y) = (0, 1) (1, 2 )\\) のとき、正解ラベルは \\(1\\) \\((x,y) = (2,1)\\) のとき 正解ラベルは \\(0\\) 入力値は \\(x_0 = 1, x_1 = y, x_2 = x\\) 出力は $$\\begin{cases} 1 & \\text{if $w_2x_2 + w_1x_1 + w_0x_0 \\geq 0$}\\\\ 0 & \\text{otherwise.} \\end{cases}$$ （解答） 初期重み \\((w_2, w_1,w_0) ＝ (0,3,1)\\) とする。 Step \\(x_0\\) \\(x_1\\) \\(x_2\\) 真理値 \\(w_0\\) \\(w_1\\) \\(w_2\\) 出力値真理値-出力値 \\(\\Delta w_0\\) \\(\\Delta w_1\\) $\\Delta w_2 1 1 1 0 1 1 3 0 1 0 0 0 2 1 2 1 1 1 3 0 1 0 0 0 3 1 1 2 0 1 3 0 1 -1 -1 -1 4 1 1 0 1 0 2 -2 1 0 0 0 5 1 2 1 1 0 2 -2 1 0 0 0 6 1 1 2 0 0 2 -2 0 0 0 0 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2017.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2017.html"},{"title":"2016年過去問","text":"前半 ： 相澤先生 （問１） コサイン４乗則とは何かを述べよ。 位相差オートフォーカスについて説明せよ 色白の友人をデジタルカメラで撮影した。その画像を確認したところ、青い顔に写っていた。その理由として考えられることを述べよ。 （解答） 画像中心での画像の明るさに対して、画像の周辺部の明るさを周辺光量と呼び、画像周辺部が画像中心に対して暗くなる現象を 周辺光量の低下 と呼ぶ。この原因の1つがコサイン4乗則で、光軸に対する入射角度を \\(\\theta\\) とした時、投射面上の照度がコサインの4乗に比例する現象である。コサイン4乗則は、レンズの絞り値には関係しない。 オートフォーカス専用センサーを設けて結像位置のずれから瞬時に合焦位置を算出して焦点を合わせる方法。計測と撮像を切り替えられる一眼レフ式での利用が始まる。 カメラのホワイトバランス機能を用いずに蛍光灯の下で撮影したためと考えられる。昼間の太陽光の色温度は5500K程度であるが、この値より低くなるほど光源の赤みは増し、高くなるほど青みが増す。したがって、色温度が高い蛍光灯などの下で撮影したことが原因であると考えられる。 （問２） 次のそれぞれの場合において、空間フィルタを画像に適用したい。どのようなフィルタを適用すればよいか。その原理と理由を述べよ。必要に応じて数式も用いること。 画像からエッジを抽出したい 画像中の大振幅スパイクノイズを除去したい 画像中のエッジを保持しながら、ガウシアンノイズを除去したい （解答） @LoGフィルタ@： ガウス関数のラプラシアンを計算しておき、それを係数としたフィルタである。ラプラシアンで値がゼロ交差するところがエッジの位置となる。ガウス関数を用いるのは、ラプラシアンによってノイズが強調されてしまうのを平滑化の影響で小さくするため。 @メディアンフィルタ@： 注目画素を中心とした領域の輝度値の中央値を出力としたフィルタである。中央値を採用することによって外れ値に相当するスパイクノイズを除去できる。 @バイラテラルフィルタ@： 注目画素からの距離による重みと注目画素との画素値の差に応じてガウス分布に従う重みをつけた平均化を行うフィルタである。輝度値が離れるほど重みが小さくなるため、エッジ周辺の画素値が混ざらずにエッジが保存される。 （問３） \\(\\gamma\\) 補正について説明せよ トーンカーブとは何か ヒストグラム平坦化とは何か。どのような効果が得られるか。 （解答） もともとは、陰極管の物理特性により、ブラウン管テレビの¬「入力信号の電圧」と「出力する輝度」の間にリニアな関係がなかった¬ことを是正するために、放送局側で色情報を調整するための変換を¬ガンマ変換（ガンマ補正）¬と呼んだ。これは $$y = 255\\left(\\frac{x}{255}\\right)&#94;{\\frac{1}{\\gamma}}$$ で表される式で入力値 \\(x\\in[0,255]\\) を補正する変換式であり、ブラウン管補正のガンマ特性は \\(\\gamma=2.2\\) であった。 なお、式からわかるように、 \\(\\gamma > 1\\) の時はトーンカーブが上に凸に、 \\(\\gamma < 1\\) の時は下に凸になる。 入力画像のそれぞれの画素値に対し、出力画像の画素値をどのように対応づけるかを指定する関数、階調変換関数をグラフで表したもの。 結果として、出力画像のヒストグラムが画素値の全域にわたって均等に分布するようにする変換のこと。これによって、画像の明暗がわかりやすくなる。 後半 ： 山崎先生 （問４） パーセプトロンの学習が収束するまで表を埋めよ。 初期重み \\((w_2, w_1,w_0) ＝\\) （学生証番号下2桁、下1桁、1) 学習率 \\(\\eta=1\\) 学習データ \\((x,y) = (0, 1) (1, 2 )\\) のとき、正解ラベルは \\(1\\) \\((x,y) = (2,1)\\) のとき 正解ラベルは \\(0\\) 入力値は \\(x_0 = 1, x_1 = y, x_2 = x\\) 出力は $$\\begin{cases} 1 & \\text{if $w_2x_2 + w_1x_1 + w_0x_0 \\geq 0$}\\\\ 0 & \\text{otherwise.} \\end{cases}$$ （解答） 初期重み \\((w_2, w_1,w_0) ＝ (0,3,1)\\) とする。 Step \\(x_0\\) \\(x_1\\) \\(x_2\\) 真理値 \\(w_0\\) \\(w_1\\) \\(w_2\\) 出力値真理値-出力値 \\(\\Delta w_0\\) \\(\\Delta w_1\\) $\\Delta w_2 1 1 1 0 1 1 3 0 1 0 0 0 2 1 2 1 1 1 3 0 1 0 0 0 3 1 1 2 0 1 3 0 1 -1 -1 -1 4 1 1 0 1 0 2 -2 1 0 0 0 5 1 2 1 1 0 2 -2 1 0 0 0 6 1 1 2 0 0 2 -2 0 0 0 0 （問５） Harrisのコーナー検出系において、数式によりアルゴリズムの概要を説明せよ。 （解答） ¬ハリスのコーナー検出(Harris corner detector)¬は、画像からコーナーを検出する手法である。なお、コーナーとは、 「周辺と自己相似性が低い所」 入力画像に対する \\(x,y\\) 方向の勾配画像 \\(I_x,I_y\\) を生成する。（例えば、ガウス関数 \\(G(\\sigma)\\) を \\(x,y\\) の各方向で微分した \\(G_x(\\sigma),G_y(\\sigma)\\) を画像に畳み込むことで勾配画像を求める。） 各勾配画像の積により、各方向における勾配の大きさを算出する。 $$I_{x2}=I_x\\cdot I_x, I_{y2}=I_y\\cdot I_y,I_{xy} = I_x\\cdot I_y$$ \\(I_{x2},I_{y2},I_{xy}\\) の局所領域における勾配の総和 \\(S_{x2},S_{y2},S_{xy}\\) を求める。 \\(I_{x2},I_{y2},I_{xy}\\) は局所領域における単純な総和でも良いが、以下に示すようなガウス関数 \\(G(\\sigma&#94;{\\prime})\\) による重み付き和を用いることが多い。 $$S_{x2}=G(\\sigma&#94;{\\prime})\\ast I_{x2},\\ S_{y2}=G(\\sigma&#94;{\\prime})\\ast I_{y2},\\ S_{xy}=G(\\sigma&#94;{\\prime})\\ast I_{xy}$$ 画素 \\((x,y)\\) における局所領域の勾配の総和 \\(S_{x2}(x,y),S_{y2}(x,y),S_{xy}(x,y)\\) を要素にもつ行列 \\(\\mathbf{M}(x,y)\\) を定義する。 $$\\mathbf{M}(x,y) = \\left[\\begin{array}{lll}{S_{x2}(x,y)} & {S_{xy}(x,y)} \\\\ {S_{xy}(x,y)} & {S_{2y}(x,y)}\\end{array}\\right]$$ 画素 \\((x,y)\\) がコーナーである場合、行列 \\(\\mathbf{M}\\) の固有値 \\(\\lambda_1,\\lambda_2\\) は共に大きな値となる。そこで、コーナー関数 \\(R\\) を以下のように決める。なお、 \\(k\\) は \\(0.04\\sim0.06\\) が最適値とされている。 $$R = \\operatorname{det}\\mathbf{M} - k\\left(\\operatorname{tr}\\mathbf{M}\\right)&#94;2$$ 上式の値が局所的な最大値となる画素をコーナーとして検出する。実際には、画像中に非常に多くの局所的な最大値が存在するため、上の値に対して適当なしきい値を設け、有効なコーナーだけを選択する。 （問６） シーンの奥行き計測したい。手法を3つ挙げ、その原理の概要とお互いの手法の利害損失を述べよ。 （解答） 名前 原理 長所 短所 スポット光投影法 レーザー光を照射して戻ってくるまでの時間を計測して距離を計算する。 単純な原理のために信頼性⾼く計測できる。 ⼀回の画像で⼀点の計測しかできず計測時間が⻑い。 スリット光投影法 線状の光を照射してその線の歪みから奥⾏を推定する。 ⼀回の画像で線上の点の奥⾏が計測できるため⽐較的⾼速である。 1枚の画像からすべての点の奥⾏がわかるわけではない。 コード化パターン光投影法 対象物に対して既知のパターンを照射してその歪みから奥⾏を推定する。 1枚の画像からすべての点の奥⾏がわかる。 コードの復号化の計算コストが⾼く、細部の計測が難しい。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2016.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2016.html"},{"title":"2015年過去問","text":"前半 ： 相澤先生 （問１） 被写界深度について説明せよ。 焦点距離28mm と35mm の同一口径のレンズがある。像面の明るさを比較せよ。 コサイン4 乗則とは何か説明せよ。 （解答） 遠点から近点までの実用上ピントが合っていると判断できる距離範囲のこと。レンズ主点 \\(O\\) から距離 \\(a\\) の位置の被写体 \\(A\\) ni （問２） 以下の三つのフィルタについて説明せよ。必要に応じて数式での表現も行うこと。 LoGフィルタ バイラテラルフィルタ ノンローカルミーンフィルタ （解答） （問３） 入力信号 \\(x(t)\\) 、 \\(x(t)\\) を入力するシステム \\(h(\\tau)\\) 、観測信号 \\(y(t)\\) 、出力観測時に相加的に加えられるノイズ \\(n(t)\\) として、そのフーリエ変換を \\(X(\\omega),H(\\omega),Y(\\omega),N(\\omega)\\) とする。 \\(h(\\tau)\\) は既知とする。出力 \\(y(t)\\) から \\(x(t)\\) を推定したい。以下の問題に答えよ。 \\(Y(\\omega)\\) と \\(X(\\omega)\\) の関係を書け。 逆フィルタを用いて \\(y\\) から \\(x\\) を求める手法を説明せよ。 2の手法を用いる際に突き当たる問題はどのようなものが考えられるか。 ウィーナフィルタを用いて \\(y\\) から \\(x\\) を求める手法の原理を説明せよ。 ウィーナフィルタの式を導け（フーリエ形式でよい）。 （解答） 画像が劣化した過程を逆にたどる処理を行うと、ボケやブレのある画像を復元することができる。 ここで、¬ボケやブレが、原画像に空間フィルタリング処理を施した結果生じた¬と考えると、劣化した画像 \\(g(x,y)\\) は、原画像 \\(f(x,y)\\) およびフィルタ関数 \\(h(x,y)\\) を用いて、以下のたたみ込み積分によって表される。 $$ \\begin{aligned} g(x,y) &= \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x-\\xi,y-\\eta)h(\\xi,\\eta)d\\xi d\\eta\\\\ &= f(x,y)\\ast h(x,y) \\end{aligned} $$ なお、たたみ込み積分のフーリエ変換の性質から、これらを周波数領域における関係性になおす（フーリエ変換する）と、 $$G(u,v) = F(u,v)H(u,v)$$ と表せる。 \\(h(x,y)\\) が既知であれば、¬逆フィルタ(inverse filter) \\(K_{inv}(u,v)\\) ¬ は、 $$K_{inv}(u,v) = \\frac{1}{H(u,v)}$$ と簡単に表せ、これを \\(G(u,v)\\) にかけ、フーリエ逆変換すれば、原画像の復元画像 \\(f(x,y)\\) を得ることができることになる。 ノイズが出力観測時に相加的に加えられるため、 $$Y(\\omega) = X(\\omega)H(\\omega) + N(\\omega)$$ 1の式から、逆フィルタ \\(K_{inv}(\\omega)\\) を適当に求める。（ノイズ \\(N(\\omega)\\) がないと仮定すれば、 \\(K_{inv}(\\omega)=1/H(\\omega)\\) ） これを \\(G(\\omega)\\) にかけて、フーリエ逆変換を施せば、元画像 \\(x\\) が得られる。これらをまとめると、以下で表せる。 $$y(t)\\underset{\\text{Fourier transform}}{\\Longrightarrow} Y(\\omega)\\underset{K_{inv}(\\omega)}{\\Longrightarrow} X(\\omega)\\underset{\\text{Inverse fourier transform}}{\\Longrightarrow} x(t)$$ まず、 \\(h(\\tau)\\) が未知の場合、 \\(K_{inv}(\\omega)\\) を適切に決めることが難しい。また、 \\(H(\\omega)\\) が \\(0\\) 、または \\(0\\) に極めて近い値となる空間周波数 \\(\\omega\\) では、逆フィルタ \\(K_{inv}(\\omega)\\) が発散し、¬劣化画像に含まれるノイズ成分が増幅されてしまう。¬ （→実際には、ノイズの影響を考慮し、 \\(H(\\omega)\\) が \\(0\\) に近い時に発散しないフィルタを考える必要がある。） ¬ウィーナーフィルタ(Wiener filter)¬は、復元された入力 \\(\\hat{f}(t)\\) と原入力 \\(f(t)\\) の間の復元誤差（ 平均二乗誤算 ）を最小にするようなフィルタを用いて復元を行う手法であり、このフィルタは以下で表される。 $$K_w(u,v) = \\frac{1}{H(u,v)}\\frac{\\left|H(u,v)\\right|&#94;2}{\\left|H(u,v)\\right|&#94;2 + \\left|N(u,v)\\right|&#94;2 / \\left|F(u,v)\\right|&#94;2}$$ フィルタを \\(K(\\omega)\\) とすると、平均二乗誤差 \\(\\mathrm{E}_{ave}\\) は、 $$ \\begin{aligned} \\mathrm{E}_{ave} &= E\\left[\\left(X-\\hat{X}\\right)&#94;2\\right] = E\\left[\\left(X-K\\left(XH+N\\right)\\right)&#94;2\\right]\\\\ \\frac{\\partial \\mathrm{E}_{ave}}{\\partial K} &= E\\left[-2\\left(XH + N\\right)\\left(X-K\\left(XH+N\\right)\\right)\\right] \\\\ &= -2\\left(E\\left[X&#94;2\\right]H - K\\left(E\\left[X&#94;2\\right]H&#94;2 + E\\left[N&#94;2\\right]\\right)\\right) = 0\\quad\\left(\\because \\text{$N$ is independent, and $E[N]=0$}\\right)\\\\ \\therefore K_w &= \\frac{E\\left[X&#94;2\\right]H}{E\\left[X&#94;2\\right]H&#94;2 + E\\left[N&#94;2\\right]} = \\frac{H}{H&#94;2 + E\\left[N&#94;2\\right]/E\\left[X&#94;2\\right]}\\\\ \\end{aligned} $$ 後半 ： 山崎先生 （問４） グレースケール画像を二値画像に変換する手法の一つである判別分析法（大津の閾値法）の概略を、数式を用いながら説明せよ。 （解答） （問５） ユークリッド距離とマハラノビス距離の違いを説明せよ。 マハラノビス距離の具体的な計算方法を数式で示せ。 （解答） （問６） ハフ変換とは何か説明せよ。 ハフ変換で直線を検出するアルゴリズムを述べよ。ただし計算機内で計算できるアルゴリズムとする。 （解答） \\(xy\\) 平面上に \\(y=\\hat{a}x + \\hat{b}\\) なる直線があったとして、この直線を検出して \\((\\hat{a},\\hat{b})\\) を推定する際に、 \\(ab\\) 平面を考えて、 \\(x,y\\) 平面上の点 \\((x_i,y_i)\\) につき1つの直線を引き（ \\(b = -x_ia + y_i\\) ）全直線の交わった座標が \\((\\hat{a},\\hat{b})\\) となる。 上で、 （問７） 平行ステレオ法について考える。カメラ間の距離 \\(b\\) を大きくした時、 \\(b\\) が小さい時と比べてどのような利害損失があるか、図や数式を用いて根拠と共に論ぜよ。 （解答） if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2015.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2015.html"},{"title":"2014年過去問","text":"前半 ： 相澤先生 （問１） F値が2.8のレンズAと5.6のレンズBの像映の明るさを比較せよ。 レンズ口径が同じで焦点距離が28mmのレンズと35mmのレンズの像影の明るさを比較せよ。 （解答） ¬F値(絞り値)¬はカメラに入る光の量をコントロールする値であり、「F値を @小さく@ する」↔︎「絞りを空ける」↔︎「穴が広く、光がたくさん入る」という関係がある。したがって、F値の大きいレンズBの方が@暗く@なる。 具体的には、¬像映の明るさはF値の逆数の二乗に比例している¬ ¬F値 = @(焦点距離)/(レンズ口径)@¬ であるため、レンズ口径が同じであると仮定すると焦点距離が@長い@ほど像映は暗くなる。従って焦点距離が@長い@のレンズの方が暗く映る。 （問２） \\(\\gamma\\) 補正とは何か説明せよ。 白米をカメラで撮影したところ赤みがかかっていたがその理由を述べよ。 （解答） もともとは、陰極管の物理特性により、ブラウン管テレビの¬「入力信号の電圧」と「出力する輝度」の間にリニアな関係がなかった¬ことを是正するために、放送局側で色情報を調整するための変換を¬ガンマ変換（ガンマ補正）¬と呼んだ。これは $$y = 255\\left(\\frac{x}{255}\\right)&#94;{\\frac{1}{\\gamma}}$$ で表される式で入力値 \\(x\\in[0,255]\\) を補正する変換式であり、ブラウン管補正のガンマ特性は \\(\\gamma=2.2\\) であった。 なお、式からわかるように、 \\(\\gamma > 1\\) の時はトーンカーブが上に凸に、 \\(\\gamma < 1\\) の時は下に凸になる。 カメラの¬ホワイトバランス¬機能を用いずに、白熱灯の下で撮影したためと考えられる。一般に、照明とカメラの温度関係によって、画像に青みがかかったり（照明の温度がカメラよりも@高い@時）、赤みがかかったり（その逆）する。昼間の太陽光の色温度は5500K程度であり、 ホワイトバランス 機能を用いなければ基本的にこの環境で白い物体が白く映るような調整がされているはずである。白熱灯の色温度は3000K程度であり、照明の温度が（相対的に）低くなったので、赤みがかかった原因だと考えられる。 （問３） 必要に応じて数式を使いながら、以下の2種類のフィルタについて説明せよ。 LoGフィルタ バイラテラルフィルタ （解答） 一般に、関数 \\(f(x,y)\\) のラプラシアンは、 $$\\frac{\\partial&#94;2}{\\partial x&#94;2}f(x,y) + \\frac{\\partial&#94;2}{\\partial y&#94;2}f(x,y) $$ で定義される。そこで、横方向の2次微分の結果と縦方向の2次微分の結果を足し合わせて得られる¬ラプラシアンフィルタ(Laplacian filter)¬を用いれば、方向に依存しないエッジが直接得られる。 ラプラシアンフィルタ を通した後の画像は、エッジの位置の両側に、プラスの値とマイナスの値が対になって現れる。したがって、ちょうど0になる位置（¬ゼロ交差(zero crossing)¬）を求めれば、エッジの位置を求めることができる。 しかし、ラプラシアンは、本質的に微分を繰り返すことになるため、 かなりノイズを強調してしまう。 そのため、まず¬ガウシアンフィルタ(gaussian filter)¬を用いてある程度の平坦化を行ったのち、ラプラシアンフィルタを施すことが一般的によく行われる。 これら2つの処理は1つにまとめて表すことも可能である。2次元ガウシアンフィルタが $$h_g = G(x,y;\\sigma) = \\frac{1}{2\\pi\\sigma&#94;2}\\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)$$ で表されるので、 $$h_{log} = \\nabla&#94;2G(x,y;\\sigma) = \\frac{x&#94;2 + y&#94;2 - 2\\sigma&#94;2}{2\\pi\\sigma&#94;6}\\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)$$ 上記のガウシアンフィルタなどは、注目画素からの距離に応じた重みを付けた平坦化を行うフィルタであり、画像に含まれるノイズなどの不要な濃淡変動を軽減することができたが、同時に、¬画像にもともとあるエッジも滑らかにしてしまっていた。¬そこで、¬バイラテラルフィルタ(bilateral filter)¬では、 「注目画素からの距離」 に加えて、 「注目画素値との画素値の差」 に応じて、同様にガウス分布に従う重みを付ける。こうすると、 輝度差が大きい（エッジと背景など）では画素同士での平均化がされにくくなる ので、エッジを保存してノイズを取り除くことができる。 このフィルタを数式で表すと以下になる。 $$g(i,j) = \\frac{1}{W}\\sum_{m,n} f(i+m,j+n)\\left[\\exp\\left(-\\frac{m&#94;2+n&#94;2}{2\\sigma_1&#94;2}\\right)\\exp\\left(-\\frac{\\left(f(i,j) - f(i+m, j+n)\\right)&#94;2}{2\\sigma_2&#94;2}\\right)\\right]$$ （問４） 入力信号 \\(x(t)\\) 、 \\(x(t)\\) を入力するシステム \\(h(\\tau)\\) 、観測信号 \\(y(t)\\) 、出力観測時に相加的に加えられるノイズ \\(n(t)\\) として、そのフーリエ変換を \\(X(\\omega),H(\\omega),Y(\\omega),N(\\omega)\\) とする。 \\(h(\\tau)\\) は既知とする。出力 \\(y(t)\\) から \\(x(t)\\) を推定したい。以下の問題に答えよ。 \\(Y(\\omega)\\) と \\(X(\\omega)\\) の関係を書け。 逆フィルタを用いて \\(y\\) から \\(x\\) を求める手法を説明せよ。 2の手法を用いる際に突き当たる問題はどのようなものが考えられるか。 ウィーナフィルタを用いて \\(y\\) から \\(x\\) を求める手法の原理を説明せよ。 ウィーナフィルタの式を導け（フーリエ形式でよい）。 （解答） 画像が劣化した過程を逆にたどる処理を行うと、ボケやブレのある画像を復元することができる。 ここで、¬ボケやブレが、原画像に空間フィルタリング処理を施した結果生じた¬と考えると、劣化した画像 \\(g(x,y)\\) は、原画像 \\(f(x,y)\\) およびフィルタ関数 \\(h(x,y)\\) を用いて、以下のたたみ込み積分によって表される。 $$ \\begin{aligned} g(x,y) &= \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x-\\xi,y-\\eta)h(\\xi,\\eta)d\\xi d\\eta\\\\ &= f(x,y)\\ast h(x,y) \\end{aligned} $$ なお、たたみ込み積分のフーリエ変換の性質から、これらを周波数領域における関係性になおす（フーリエ変換する）と、 $$G(u,v) = F(u,v)H(u,v)$$ と表せる。 \\(h(x,y)\\) が既知であれば、¬逆フィルタ(inverse filter) \\(K_{inv}(u,v)\\) ¬ は、 $$K_{inv}(u,v) = \\frac{1}{H(u,v)}$$ と簡単に表せ、これを \\(G(u,v)\\) にかけ、フーリエ逆変換すれば、原画像の復元画像 \\(f(x,y)\\) を得ることができることになる。 ノイズが出力観測時に相加的に加えられるため、 $$Y(\\omega) = X(\\omega)H(\\omega) + N(\\omega)$$ 1の式から、逆フィルタ \\(K_{inv}(\\omega)\\) を適当に求める。（ノイズ \\(N(\\omega)\\) がないと仮定すれば、 \\(K_{inv}(\\omega)=1/H(\\omega)\\) ） これを \\(G(\\omega)\\) にかけて、フーリエ逆変換を施せば、元画像 \\(x\\) が得られる。これらをまとめると、以下で表せる。 $$y(t)\\underset{\\text{Fourier transform}}{\\Longrightarrow} Y(\\omega)\\underset{K_{inv}(\\omega)}{\\Longrightarrow} X(\\omega)\\underset{\\text{Inverse fourier transform}}{\\Longrightarrow} x(t)$$ まず、 \\(h(\\tau)\\) が未知の場合、 \\(K_{inv}(\\omega)\\) を適切に決めることが難しい。また、 \\(H(\\omega)\\) が \\(0\\) 、または \\(0\\) に極めて近い値となる空間周波数 \\(\\omega\\) では、逆フィルタ \\(K_{inv}(\\omega)\\) が発散し、¬劣化画像に含まれるノイズ成分が増幅されてしまう。¬ （→実際には、ノイズの影響を考慮し、 \\(H(\\omega)\\) が \\(0\\) に近い時に発散しないフィルタを考える必要がある。） ¬ウィーナーフィルタ(Wiener filter)¬は、復元された入力 \\(\\hat{f}(t)\\) と原入力 \\(f(t)\\) の間の復元誤差（ 平均二乗誤算 ）を最小にするようなフィルタを用いて復元を行う手法であり、このフィルタは以下で表される。 $$K_w(u,v) = \\frac{1}{H(u,v)}\\frac{\\left|H(u,v)\\right|&#94;2}{\\left|H(u,v)\\right|&#94;2 + \\left|N(u,v)\\right|&#94;2 / \\left|F(u,v)\\right|&#94;2}$$ フィルタを \\(K(\\omega)\\) とすると、平均二乗誤差 \\(\\mathrm{E}_{ave}\\) は、 $$ \\begin{aligned} \\mathrm{E}_{ave} &= E\\left[\\left(X-\\hat{X}\\right)&#94;2\\right] = E\\left[\\left(X-K\\left(XH+N\\right)\\right)&#94;2\\right]\\\\ \\frac{\\partial \\mathrm{E}_{ave}}{\\partial K} &= E\\left[-2\\left(XH + N\\right)\\left(X-K\\left(XH+N\\right)\\right)\\right] \\\\ &= -2\\left(E\\left[X&#94;2\\right]H - K\\left(E\\left[X&#94;2\\right]H&#94;2 + E\\left[N&#94;2\\right]\\right)\\right) = 0\\quad\\left(\\because \\text{$N$ is independent, and $E[N]=0$}\\right)\\\\ \\therefore K_w &= \\frac{E\\left[X&#94;2\\right]H}{E\\left[X&#94;2\\right]H&#94;2 + E\\left[N&#94;2\\right]} = \\frac{H}{H&#94;2 + E\\left[N&#94;2\\right]/E\\left[X&#94;2\\right]}\\\\ \\end{aligned} $$ 後半 ： 山崎先生 （問５） 判別分析法（大津の閾値法）について、数式を用いながら説明せよ。 2値画像化の際に用いる他の手法のアルゴリズムを説明せよ。 （解答） ¬判別分析法(discriminant analysis method)¬とは、しきい値 \\(t\\) を用いて黒画素クラスと白画素クラスに分けた際に、両クラスの¬分離度(separation metrics)¬（＝@クラス間分散(between class variance)@/@クラス内分散(within-class variance)@ = \\(\\sigma_b&#94;2/\\sigma_w&#94;2\\) ）が最大となるような閾値 \\(t\\) を選択する手法である。 なお、黒/白クラスの平均・分散・クラスに属する画素の数を（ \\(m_{1/2},\\sigma&#94;2_{1/2},n_{1/2}\\) ）とすれば、 $$ \\begin{aligned} \\sigma&#94;2_w &= \\frac{1}{n}\\sum_{k}\\sum_{x\\in\\mathcal{X}_k}\\left(x - m_k\\right)&#94;2 = \\frac{1}{n}\\sum_kn_k\\sigma_k&#94;2\\\\ \\sigma&#94;2_b &= \\frac{1}{n}\\sum_kn_k\\left(m_k-m\\right)&#94;2 = \\frac{n_1n_2\\left(m_1-m_2\\right)&#94;2}{n}\\quad\\left(\\because nm = \\sum_kn_km_k\\right) \\end{aligned} $$ である。また、全分散 \\(\\sigma_t&#94;2\\) は、閾値に依らず $$\\sigma_t&#94;2 = \\sigma_b&#94;2 + \\sigma_w&#94;2$$ で一定なので、結局分離度は以下の式を用いてでも表せる。 $$\\frac{\\sigma_b&#94;2}{\\sigma_w&#94;2} = \\frac{\\sigma_b&#94;2}{\\sigma_t&#94;2-\\sigma_w&#94;2}$$ 判別分析法以外の二値化アルゴリズムとして、¬p-タイル法(p-tile method)¬と¬モード法(mode method)¬が挙げられる。 p-タイル法 は、画像に占める黒色（白色）領域の割合が 既知である 場合に、画素値の低い（高い）ものから頻度値を積算し、予想される割合を超えた時の画素値をしきい値とする方法である。 モード法 は、テキスト画像においてはヒストグラムが文字部分と背景部分に相当する二つの山を持つことに着目して、その間の極小値を閾値と定める方法である。この方法では、画素数が十分多くなければ、ノイズによって山や谷がはっきりと現れないため、ノイズによる影響を軽減するような処理を加える必要がある。 （問６） ユークリッド距離とマハラノビス距離の違いを説明せよ。 マハラノビス距離を数式で表現せよ。 （解答） ユークリッド距離は、ユークリッド空間における2点を結ぶ線分の長さであり、マハラノビス距離は、ユークリッド距離を拡張したもので、多変数（クラスごと）の相関に基づくものである。 一般に、ある点 \\(\\mathbf{x}_i\\) が多変数ベクトル \\(\\mathbf{x}_i=\\left(x_{i1},x_{i2},\\ldots,x_{ip}\\right)&#94;T\\) で表される時、 これらの変数ごとの平均を \\(\\boldsymbol{\\mu}=\\left(\\mu_1,\\mu_2,\\ldots,\\mu_p\\right)&#94;T\\) 各変数間の分散共分散行列を \\(\\boldsymbol{\\Sigma}\\) と定義すると、点 \\(\\mathbf{x}\\) のデータ群に対するマハラノビス距離は、以下で表される。 $$D_M(\\mathbf{x}) = \\sqrt{\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)}$$ （問７） ハフ変換とは何か、説明せよ。 ハフ変換で直線を検出するアルゴリズムを述べよ。但し計算機内で計算できるアルゴリズムとする。 （解答） ハフ変換とは、検出したい図形を有限個のパラメータ （直線であれば二つ、円であれば三つ等）で表現すると、画像空間中でその図形を構成する点にそれらのパラメータを対応させた場合、全てパラメータ空間（¬ハフ空間¬）上である一点を通るような図形を描く、ということを利用した図形検出アルゴリズムである。検出したい図形を構成する可能性のある候補点一つ一つについて、有限個のセルに分割したハフ空間上での¬投票(voting)¬を行い、投票度数の最も大きかったセルが画像空間中での検出図形に対応している。投票とは、候補点をハフ空間上に写像した際に描く図形が通るセルの値を1増やすことを指す。ハフ変換の利点は、エッジ検出などの処理によって直線が完全に検出できず、線が途切れていても直線を検出できる点である。 まず元画像にエッジ検出を施し、直線を構成する可能性のある候補点を二値画像で用意する。次に直線を二つのパラメータで表すが、ハフ空間を有限個のセルに分割するため以下のような表現を行う。（ \\(\\hat{b} = -x\\hat{a}+y\\) だと \\(a,b\\) の取りうる値の範囲が \\(-\\infty\\) から \\(\\infty\\) となってしまう。） $$\\hat{\\rho} = x\\cos\\hat{\\theta} + y\\sin\\hat{\\theta}$$ なお、 \\(\\hat{\\rho}\\) は原点から直線までの符号付き距離を、 \\(\\hat{\\theta}\\) は原点から直線への垂角（ \\(0\\leq\\hat{\\theta} < \\pi\\) ）である。 この表現により、画像空間中で直線を構成する点をハフ空間上に写像すると、位相と振幅の異なる複数の正弦波が描け、それらは一点 \\((\\hat{\\rho},\\hat{\\theta})\\) を通る。最後に全ての候補画素についてハフ空間上での投票を行い、投票度数の最も大きいセルを定める。結果としてこのセルが、画像空間上での検出したい直線を表すパラメータとなっている。 （問８） 物体の3次元空間位置を \\((X,Y,Z)\\) 、二つのカメラの距離を \\(b\\) 、二つのカメラで見えている座標を \\((u,v)\\) 、 \\((u&#94;{\\prime},v&#94;{\\prime})\\) とする。また、 \\(f\\) を焦点距離とする。 \\((X,Y,Z)\\) と \\((u,v),(u&#94;{\\prime},v&#94;{\\prime})\\) の関係を示せ。 \\(b\\) を大きくした時、小さい場合と比べてどのような利害があるか、議論せよ。 （解答） 三次元空間上の位置 \\((X,Y,Z)\\) は、二台のカメラの画像中の位置から以下のようにも止まる。 $$(X,Y,Z) = \\left(\\frac{bu}{u-u&#94;{\\prime}},\\frac{bv}{u-u&#94;{\\prime}},\\frac{bf}{u-u&#94;{\\prime}}\\right)$$ カメラの距離 \\(b\\) を基線長と呼ぶが、これを大きくすると 必然的にハードウェアも大きくなってしまい 、ステレオカメラ等では持ち運びのし易さに直結するため、基線長の長さには限度がある。一方、基線長を大きくすることでカメラが離れるので視差が大きくなり、 対象物の奥行き情報についての計測誤差を抑えることができる 、というメリットもある。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2014.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2014.html"}]};