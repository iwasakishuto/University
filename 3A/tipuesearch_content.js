var tipuesearch = {"pages":[{"title":"3次元空間情報の取得と処理","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 大きく分けて2種類ある。 アクティブ法 ：光やレーザーなど、エネルギーを当てて反応を観測。 パッシブ法 ：カメラなど、エネルギーを放出しないもののみを使う。 アクティブ法 手法 説明 特徴 time-of-flight法(ToF) 光を照射して戻るまでの時間から算出。直接は計算できないので、変調をかけて位相差等から計算する。 （計算可能な範囲が指定されるのはこの為。） 高精度だが、時間がかかる。そのため、動物体に弱い。 XBox2(Microsoft)のKinect2というコントローラや自動運転用のLIDARなどで使われている。 スリット光照射法 線状のレーザー光等を照射し、線の歪みから計算する。（→ エポピーラ幾何学 p.312 を参照） Structured light 法 細かさの異なる市松模様（チェッカーボードパターン）や、パターンが既知のランダムドット等を照射し、位置ずれから計算 XBoxのKinectで使われていた。 パッシブ法 手法 説明 ステレオ法 複数のカメラを用いて、見え方の違いから奥行推定 平行ステレオ法 近くのものは大きくズレ、遠くのものはズレない。正確には 以下 照度差ステレオ法 複数の見え方があれば良いので、カメラを1台にして照明を変化させても良い。詳細は 以下 Shape-from-motion(SfM) 首里城プロジェクトや \"Building Roma in a Day\" などで使用されている。詳細は 以下 ) 平行ステレオ法 物体の3次位置：$(X,Y,Z)$ 2カメラの距離：$b$ それぞれのカメラで点 $(X,Y,Z)$ が見えている画素位置 $(u,v),(u&#94;{\\prime},v&#94;{\\prime})$ イメージセンサのピクセル間隔：$\\delta$（縦・横とも） カメラの焦点距離：$f$ 画像面と光軸の交点が画像座標原点 このとき、視差（$=u-v$）がわかると、奥行き情報 $Z$ がわかる。なお、視差は ブロックマッチング法 等で見つける。 照度差ステレオ法 最も簡単な反射モデル （均等拡散反射のみ。鏡面反射なし。） で行う。 $$\\text{Lambert model: }I_x\\left(\\text{Brightness}\\right)=\\rho L\\mathbf{n}\\cdot\\mathbf{S} = \\rho L \\cos\\theta$$ $\\rho, \\mathbf{S},L$ は予め知ることができる。 未知なのは、$\\mathbf{n} = \\left(n_x,n_y,n_z\\right)$ の3変数のみ。（$n_z = \\sqrt{1-\\left(n_x&#94;2+n_y&#94;2\\right)}$ とすると2変数） 2~3通りの位置から観測すると、$\\mathbf{n}$ がわかる。 通常は20~100の位置に照明をおき、最小2乗法で解く。 Shape-from-motion(SfM) 2枚の視点の異なる画像があるとする。 3次元中の点 $p$ がそれぞれの画像中で点 $(u.v),(u&#94;{\\prime},v&#94;{\\prime})$ で見えていたとする。 2つの視点間には回転 $\\mathbf{R}(3\\times3)$ と平行移動 $\\mathbf{t}(3\\times1)$ から成る行列で次の関係がある。 $$ \\left(u&#94;{\\prime},v&#94;{\\prime},1\\right)\\begin{pmatrix} f_{11} & & \\\\ & \\ddots & \\\\&&f;_{33} \\end{pmatrix}\\begin{pmatrix} u\\\\v\\\\1 \\end{pmatrix} = \\mathbf{0} $$ 逆に $\\mathbf{F}$ がわかれば2枚の画像の全てのピクセルで対応がとれているはず。対応点がわかっている点が9点以上あると、最小2乗法で解ける。 しかし、実は $\\mathbf{F}$ は規格化できるので、$8$ パラメータが決まれば残り $1$ つは自動的に決定できる。 （自由度 $8$, eight-point algorithmと呼ぶ。） 今は five-point algorithm まで進化。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-7.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-7.html"},{"title":"動画像処理","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt 動画像は、静止画の集まり（パラパラ漫画） 10~15[fps]あると、人は動画だと感じる。 映画：24[fps] TV、インターネット動画：30~60[fps] ロボット制御に必要な速度（アクチュエーターの反応速度が~ms）：1,000[fps] 自動運転 ~ 10,000[fps] 10[fps] 25[fps] 50[fps] Start Stop → 何をするか？ 動物体の検出・解析 動画の編集 動画の理解・認識 動物体の検出・解析 背景差分・フレーム間差分 【問題】 照明変化（屋外では良く起こる）、背景の変化（木の揺れ等）に弱い。 背景画像をどうやって作るかもポイント。 【統計的背景差分】 各ピクセルで時間的に統計情報を取ってもう少しsmartに背景差分することを考える。背景クラスを $w_b$ 前景クラスを $w_f$ とすると、やることは、$\\left(p\\left(w_f | I(x,y)\\right), p\\left(w_b | I(x,y)\\right)\\right)$ のうち確率の高いクラスを採用する。 ここで、ベイズの定理より、 $$ \\begin{cases} \\begin{aligned} p\\left(w_f | I(x,y)\\right) &= \\frac{p(w_f)p(I\\left(x,y)|w_f\\right)}{p(I(x,y))}\\propto p(w_f)p\\left(I(x,y)|w_f\\right)\\\\ p\\left(w_b | I(x,y)\\right) &= \\frac{p(w_b)p(I\\left(x,y)|w_b\\right)}{p(I(x,y))}\\propto p(w_b)p\\left(I(x,y)|w_b\\right) \\end{aligned} \\end{cases} $$ $p(w_b, w_f)$：その画素が $w_b, w_f$ である事前確率（例：木の上に人や車はいないので、$p_b$ 大, $p_f$：小） $p(I|w_c)$：$w_c$ だった時に、どの程度の確率でその画素値が観測されるか。 動き量の計算 【ブロックマッチング(Block Matching)】 ある時刻 $t$ におけるある領域に最も似ている時刻 $t+1$ の領域を、以下の手法等を用いて探す。 SSD(Sum of Squared Difference) SAD(Sum of Absolute Difference) NCC(Normalized Cross Correlation) 動画像圧縮では、この動きベクトル(motion vector)と差分を符号化することで圧縮を実現。 【オプティカルフロー(optical flow)】 2枚の画像間で、変化が微小だとすると、 $$\\begin{aligned}I(x+\\Delta x, y+\\Delta y, t+\\Delta t) &\\simeq I(x,y,t) + \\frac{\\partial I}{\\partial x}\\Delta x + \\frac{\\partial I}{\\partial y} \\Delta y+ \\frac{\\partial I}{\\partial t} \\Delta t + \\cdots\\\\\\rightarrow I_x\\Delta x + I_y\\Delta y + I_t\\Delta t&\\simeq0\\\\ I_x\\frac{\\Delta x}{\\Delta t} + I_y\\frac{\\Delta y}{\\Delta t} + I_t &= 0\\\\\\left(\\Delta t\\rightarrow0\\right)\\qquad I_xu+I_yv+I &= 0\\\\(u,v) &= \\left(\\frac{dx}{dt},\\frac{dy}{dt}\\right)\\end{aligned}$$ これだけだと、自由度が高すぎて一意に決まらないので、微小領域では動きが滑らかという仮定を置く。（Lucas-Kanada法, 1981） $$\\mathbf{G} = \\left[\\begin{array}{c}I_{x_1} &I;_{y_1} \\\\\\vdots&\\vdots\\\\I_{x_m}&I;_{y_m}\\end{array}\\right],\\quad \\mathbf{f} = \\left[\\begin{array}{c}u \\\\v\\end{array}\\right],\\quad\\mathbf{b} = \\left[\\begin{array}{c}I_{t_1} \\\\\\vdots\\\\I_{t_m}\\end{array}\\right]$$ 上記のように定義し、滑らかさの条件を使うと、 $$\\begin{aligned}\\mathbf{Gf}+\\mathbf{b} &= \\mathbf{0}\\\\\\therefore\\mathbf{f}&#94;{\\ast}&=-\\left(\\mathbf{G}&#94;T\\mathbf{G}\\right)&#94;{-1}\\mathbf{G}&#94;T\\mathbf{b}\\quad \\left(\\because\\text{Least squares}\\right)\\end{aligned}$$ 【DNNによる映像処理】 (x,y,t)の3次元をどう扱うか？ 画像（2次元）と時間の情報を分ける。 3D Convolution：空間情報と時間情報を同時に畳み込む。 仮想3D Convolution：空間情報を畳み込んで、その後時間方向に畳み込む。 動画の編集 In [ ]: 動画の理解・認識 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-6.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-6.html"},{"title":"Guided NEST exercises (intermediate)","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Thomas Burns Lecture Material https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-4_Plasticity-and-Learning Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial4.py In [1]: import sys sys . path . append ( \"path/to/library/\" ) Part 1: STDP and its varities Part-2:-Unsupervised-pattern-detection-using-STDP Make a training data NEST-simulation Part 1: STDP and its varities STDP alters the weights of synapses depending on the relative spike timing between the postsynaptic neuron and the presynaptic neuron. _STDP overview (from Sjöström J, Gerstner W (2010) Spike-timing dependent plasticity. Scholarpedia )_ Within some time windows: if \"PRE before POST\" , we get Long-Term Potentiation (LTP) if \"POST before PRE\" , we get Long-Term Depression (LTD) The time windows for LTP and LTD are generally on the order of tens of milliseconds . The LTD window is generally longer than the LTP window. Implementation To implement STDP in spiking neural network models, different STDP rules can be used. In general, different rules result in different distributions of synaptic weights over the course of learning. Examples of such weight distributions are shown below. STDP rules (from Gilson M, Fukai T (2011) Stability versus Neuronal Specialization for STDP. PLoS ONE ) Additive STDP tends to produce competition between synapses but needs to have its weights bound to ensure network stability (e.g. to avoid over-excitation) Multiplicative STDP tends to produce less competition between synapses but owing to its weight-dependent manipulation of synaptic weights does not require artificial bounds. Logorithmic STDP attempts to reconcile the two. Additive STDP rule In the following exercise, we will use the additive STDP rule , sometimes also called the exponential STDP rule : $$ \\Delta w_j= \\begin{cases} a&#94;+ \\cdot e&#94;{\\big( \\dfrac{t_j-t_i}{\\tau&#94;+} \\big)} & \\text{if}\\ t_j \\leq t_i & \\text{(LTP)} \\\\ -a&#94;- \\cdot e&#94;{\\big( - \\dfrac{t_j-t_i}{\\tau&#94;-} \\big)} & \\text{if}\\ t_j > t_i & \\text{(LTD)} \\end{cases} $$ variable Meaning $a&#94;+$ learning rate for LTP $a&#94;-$ learning rate for LTD $t_j$ spike time of the presynaptic neuron $j$ $t_i$ spike time of the postsynaptic neuron $i$ $\\tau&#94;+$ time constant for LTP (ms) $\\tau&#94;-$ time constant for LTD (ms) Using pre-defined paramaters which we will use in the second part of this tutorial , let's plot **\"how the this STDP rule changes weights depending on the timing of presynaptic and postsynaptic spikes.\"** In [2]: import numpy as np import matplotlib.pyplot as plt In [3]: from OIST.tutorial4 import AddSTDP In [4]: add_STDP_paramaters = { 'a_LTP' : 0.03125 , 'a_LTD' : 0.85 * 0.03125 , 'tau_LTP' : 16.8 , 'tau_LTD' : 33.7 } In [5]: model = AddSTDP () model . load_params ( ** add_STDP_paramaters ) In [6]: time_differences = np . linspace ( - 125 , 125 , 1000 ) In [7]: model . simulate ( time_differences ) Exercise 1 What features do you notice in this STDP curve? Experiment with different values in add_STDP_paramaters . How do each of the values change the shape of the STDP curve? How, in a network of neurons, could this STDP rule lead to over-excitation or network instability? The closer the spike timing between the postsynaptic neuron and the presynaptic neuron are, the bigger the influence is. If a becomes larger, the STDP curve expand in the y-axis direction , and if tau becomes larger, the STDP curve shrink in the x-axis direction . When the time difference gets ver close to 0, weight changes will diverge and lead to over-excitation or network instability. Part 2: Unsupervised pattern-detection using STDP In this part of the tutorial we will be replicating the results from [Masquelier et al. (2008) Spike Timing Dependent Plasticity Finds the Start of Repeating Patterns in Continuous Spike Trains. PLoS ONE](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0001377) . (In fact, we already reproduced Figure 2 from their paper in the first part of this tutorial.) Masquelier et al. (2008) create a spiking neural network with 2,000 presynaptic neurons just one postsynpatic neuron. They implement additative STDP in this network, which allows the \"postsynaptic neuron\" to learn to detect the beginning of repeating patterns of spiking activity arriving from the 2,000 presynaptic neurons. Importantly, the presynaptic neurons also have periods of random , non-patterned activity and have additional noisy spiking activity at all times. Let's begin by constructing the spike trains of the 2,000 presynaptic neurons. We will run our simulations for 450s, so we will create 450s worth of spike trains for these neurons. The first step is construct random activity with the following properties: Each presynpatic neuron will emit spikes independently generated by a Poisson process with a variable instantaneous firing rate $r$ $r$ varies randomly beteen $0$ and $90$ Hz. The rate of change in $r$ is modified by $dr$ $dr$ starts at $0$ $dr$ is modified by $ds$, randomly picked from a uniform distribution over $[−360,+360]$ Hz/s. $dr$ is clipped to within $[-1800,1800]$ Hz/s we will also manually add some additional spikes to guarantee that \"in every 50ms time bin, each neuron spikes at least once\" Make a training data In [8]: from OIST.tutorial4 import PoissonProcessGenerator , plotPatternRaster In [9]: poisson_params = { \"min_span\" : 50 , # [ms] \"starting_Hz\" : 54 , # [Hz] \"min_r\" : 0 , # [Hz] \"max_r\" : 90 , # [Hz] \"min_ds\" : - 3.6e-1 , # [Hz/ms] \"max_ds\" : 3.6e-1 , # [Hz/ms] \"min_dr\" : - 1.8 , # [Hz/ms] \"max_dr\" : 1.8 , # [Hz/ms] \"segment_length\" : 50 , # [ms] Length of 1 Presynaptic spiking segment length. } In [10]: seed = 0 In [11]: num_presynaptic_neurons = 2000 # Number of the presynaptic neurons. simulation_length = 1000 # [ms] In [12]: poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) In [13]: spikes = poisson_generator . generate_spikes ( simulation_length , num_presynaptic_neurons , seed = seed ) Processing Time: 0.708[s] Now we will Divide the presynaptic spiking activity into segments of 50ms Select a random 50ms segment to be considered as the \"pattern\" Copy and paste this pattern across the raster plot in a certain proportion of segments. Add 10Hz Noises to all neurons at all times. Divide and Select \"Pattern\" In [14]: poisson_generator . select_segment ( seed = seed ) Spikes divided into 20 segments. 13-th segment was selected as a Pattern. In [15]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( spikes , ax = ax ) plt . tight_layout () plt . show () Copy and Paste this \"Pattern\" In [16]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [17]: pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) Number of spikes added: 250000.0 Spikes are saved as `self.pattern_repeated_spikes`. Add Poisson Noises In [18]: frequency = 10 # [Hz] In [19]: noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes are saved as `self.noise_added_spikes`. In [20]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) plt . tight_layout () plt . show () Firing Rates In [21]: from OIST.tutorial4 import plotFiringRates In [22]: fig = plt . figure ( figsize = ( 12 , 4 )) fig = plotFiringRates ( noise_added_spikes , fig = fig ) plt . show () Check the Repeated Position In [23]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) ax = plotPatternRaster ( output_identities , cmap = \"RdGy_r\" , ax = ax , alpha = 0.7 ) plt . tight_layout () plt . show () With these paramaters, we can embed a repeating pattern within some pseduo-random, spontaneous activity. However, learning takes time! And we have only been simulating 1s of activity. In this task, the authors reported they needed 13.5s of activity (or 700 pattern presentations) for the neuron to show signs of learning to recognise the pattern. Figure 4 from Masquelier et al. 2008: Overview of the 450 s simulation. Here we plotted the membrane potential as a function of simulation time, at the beginning, middle, and end of the simulation. Grey rectangles indicate pattern presentations. (a) At the beginning of the simulation the neuron is non-selective because the synaptic weights are all equal. It thus fires periodically, both inside and outside the pattern. (b) At t≈13.5 s, after about 70 pattern presentations and 700 discharges, selectivity to the pattern is emerging: gradually the neuron almost stops discharging outside the pattern (no false alarms), while it does discharge most of the time the pattern is present (high hit rate), here even twice (c) End of the simulation. The system has converged (by saturation). Postsynaptic spike latency is about 4 ms. Hit rate is 99.1% with no false alarms (estimated on the last 150 s). It is therefore necessary to use some pre-computed spontaneous activity prepared earlier, found in the file spont_100s_alt.npy . It contains 100s of pseduo-random, spontaneous activity for us to use in our simulations. Warning, it is a large file at ~1.6GB! $ wget --content-disposition https://www.dropbox.com/sh/p9ml6l402znbzmy/AAA2LP7W1bcvwSgYnmx9ahyga?dl = 0 & preview = spont_100s_alt.npy # Pattern1. Download pre-computed files. pre_spikes_wrepeats_100s = np . load ( \"path/to/spont_100s_alt.npy\" ) poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) poisson_generator . memorize ( pre_spikes_wrepeats_100s , repeated = False ) # Pattern2. Make by myself. simulation_length_100s = 100 _000 num_presynaptic_neurons = 2 _000 poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) pre_spikes_wrepeats_100s = poisson_generator . generate_spikes ( simulation_length_100s , num_presynaptic_neurons , seed = seed ) In [24]: # Pattern.1 pre_spikes_wrepeats_100s = np . load ( \"path/to/spont_100s_alt.npy\" ) poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) poisson_generator . memorize ( pre_spikes_wrepeats_100s , repeated = False ) [Before] simulation length: None Number of the presynaptic neurons: None Memorizing... [After] simulation length: 100000 Number of the presynaptic neurons: 2000 In [25]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [26]: # Repeat & Paste. poisson_generator . select_segment ( seed = seed ) pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes divided into 2000 segments. 685-th segment was selected as a Pattern. Number of spikes added: 25000000.0 Spikes are saved as `self.pattern_repeated_spikes`. Spikes are saved as `self.noise_added_spikes`. In [27]: repeated_idxes = np . any ( poisson_generator . repeated_position , axis = 1 ) In [28]: print ( f \"Pattern shape = {poisson_generator.pattern_spikes.shape} \" ) print ( f \"Poisson Process shape = {noise_added_spikes.shape} \" ) Pattern shape = (2000, 50) Poisson Process shape = (2000, 100000) Now we are ready to use these spike trains to train a postsynaptic neuron! ... or are we? Creating a model conceptually or mathematically is just the first step. Next we have to figure out how to simulate it computationally. NEST simulation In [29]: import nest NEST contains many STDP synapse rules. Which one should we use? We said earlier that we will use an additive/exponential STDP rule, however that is not the only parameter to consider. Another consideration is \"how to pair two continuous spikes trains\" such that we can apply STDP appropriately to all presynaptic spikes $j$ coming to the postsynaptic neuron $i$. A list of STDP models implemented in NEST can be found here: https://nest-simulator.readthedocs.io/en/latest/models/stdp.html The following models correspond to the below figure for pairing of spikes for STDP: stdp_nn_symm_synapse (panel A) stdp_nn_pre-centered_synapse (panel B) stdp_nn_restr_synapse (panel C) Figure 7 from Morrison et al. 2008 . Examples of nearest neighbor spike pairing schemes for a presynaptic neuron j and a postsynaptic neuron i. In each case, the dark gray indicate which pairings contribute toward depression of a synapse, and light gray indicate which pairings contribute toward potentiation. Symmetric interpretation : each presynaptic spike is paired with the last postsynaptic spike, and each postsynaptic spike is paired with the last presynaptic spike (Morrison et al. 2007). Presynaptic centered interpretation : each presynaptic spike is paired with the last postsynaptic spike and the next postsynaptic spike (Izhikevich and Desai 2003; Burkitt et al. 2004: Model II). Reduced symmetric interpretation : as in c but only for immediate pairings (Burkitt et al. 2004: Model IV, also implemented in hardware by Schemmel et al. 2006) [Masquelier et al. (2008)](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0001377) uses something akin to panel C In the (unreleased) NEST 3.0 there is a stdp_nn_restr_synapse model which is quite similar. (However, we are using NEST 2.X. now.) After going through the available STDP models, none appeared to be capable of replicating the paper due to this paper requiring a particular spike-pairing method which doesn't seem to be represented in any of the currently-implemented STDP models in NEST. Therefore, we need to make some changes to our experiment! But before we do that, let's simulate the current model using some different synapses which are available to us. Start with the static synapse and then experiment with some STDP synapse models to see what goes wrong and \"how different paramaters affect the results.\" # Check what model we can use. nest . Models ( 'synapses' ) In [30]: from OIST.tutorial4 import NeuronalNetwork In [31]: simulation_times = 1000 In [32]: spike_indicies = [ np . where ( is_spike )[ 0 ] for is_spike in noise_added_spikes == 1 ] In [33]: STDP_paramaters = { 'a_LTP' : 0.03125 , 'a_LTD' : 0.85 * 0.03125 , 'tau_LTP' : 16.8 , 'tau_LTD' : 33.7 , } In [34]: model = NeuronalNetwork ( ** STDP_paramaters ) In [35]: model . build ( spike_indicies ) Created 2000 spike generators. Created 2000 parrot neurons. Created 1 post_neuron. Created spike detector. Created voltmeter. In [36]: model . compile ( synapse_model = \"static\" , ex = 1 ) Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: static_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [37]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [38]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [39]: model . compile ( synapse_model = \"standard\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [40]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [41]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [42]: model . compile ( synapse_model = \"triplet\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_triplet_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [43]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [44]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [45]: model . compile ( synapse_model = \"FACETS\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_facetshw_synapse_hom Connected post neuron to spike detector Connected voltmeter to post neuron In [46]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [47]: ax = model . plotWeights ( repeated_idxes ) plt . show () Couldn't recognize the patterns. Exercise 2 What are some general problems with the STDP synapses? How do these synapse models cause failure of our model to replicate the original paper? What can we do to the task or the model which might help? In [48]: model = NeuronalNetwork ( ** STDP_paramaters ) model . build ( spike_indicies ) Created 2000 spike generators. Created 2000 parrot neurons. Created 1 post_neuron. Created spike detector. Created voltmeter. In [49]: gaussian_params = { \"simulation_length_pulses\" : 10000.0 , \"proportion_of_neurons_pulsing\" : 0.5 , \"number_of_pulses\" : 50 , \"spikes_per_pulse\" : 5 , \"std_spikes_per_pulse\" : 5.0 } In [50]: # Overwrite the spike generator. noise_rate = 35.0 # firing rate of Poisson neurons (Hz) model . spike_generator = nest . Create ( \"poisson_generator\" , model . num_presynaptic_neurons , params = { 'rate' : noise_rate }) In [51]: # Add the gaussian Packets as an additional input. model . addGaussianPackets ( ** gaussian_params ) In [52]: model . compile ( synapse_model = \"standard\" , ex = 2 ) Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [53]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [54]: ax = model . plotWeights ( repeated_idxes ) plt . show () Difficult to find a best parameter :( → How about [ Bayesian optimization](https://iwasakishuto.github.io/University/3A/生物データマイニング論-4.html)?? 【Challenge Exercise】 Consider whether and how your network could learn multiple patterns, e.g. would you need to add more post-synaptic neurons to the network? Hint: see [Masquelier et al. (2009) Competitive STDP-Based Spike Pattern Learning. Neural Computation](https://www.ncbi.nlm.nih.gov/pubmed/19718815) . In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-4.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-4.html"},{"title":"Guided NEST exercises (basic)","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Milena Menezes Carvalho Lecture Material https://github.com/oist-ncbc/skill-pill-plus/blob/master/Tutorial-3_Synapses-and-Networks Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial3.py In [1]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Synapses Neuronal connectivity Neurons are connected at specific sites called synapses . Usually, the axon of a presynaptic neuron will make contact with the dendrite (or soma ) of a postsynaptic in what's called a chemical synapse : neurotransmitters are transferred via the tiny gap between the two neurons ( synaptic cleft ) thanks to biochemical processes. This generates a change in membrane potential at the postsynaptic site, called postsynaptic potential . Electrical synapses , also known as gap junctions , can also be present -- in this case, specialized proteins make a direct electrical connection between neurons. [1] from [2] In this tutorial we will connect two or more neurons in NEST to create our first neuronal networks. First, we will learn the basic commands following [3] and [4] Then apply these to a well-known balanced network known as the Brunel network . By the end of this tutorial, you should be able to understand that a network's stability and activity behavior is deeply influenced by its parametrization. Sources: [1] Wulfram Gerstner and Werner M. Kistler, \"Spiking Neuron Models\". Cambridge University Press, 2002 [2] Peter Dayan and L. F. Abbot, \"Theoretical Neuroscience: Computational and Mathematical Modeling of Neural Systems\". The MIT Press, 2001 [3] PyNEST tutorial: Part 2, Populations of Neurons [4] PyNEST tutorial: Part 3, Connecting Networks with Synapses Synapse types The simplest synapse type is the static_synapse . The synaptic weight , a measure of how strong is the influence of the presynaptic neuron on the postsynaptic neuron, is static , i.e. does not change over time. The synaptic transmission, however , is not instantaneous. The synaptic delay is defined as the \"time\" between the presynaptic neuron activation ( action potential ) and the moment the postsynaptic potential is generated. In NEST, we can check the default values for all parameters using the GetDefaults function: nest.GetDefaults('static_synapse') The common model which is more suit to real biological event is spike-time dependent plasticity . The synaptic weight changes according to the temporal order between pre and postsynaptic spike times. In NEST, the most common STDP mechanisms are implemented in stdp_synapse . The change for normalized synaptic weights is described by $$ \\begin{aligned} \\Delta w &= \\begin{cases} \\lambda f {-}(w) \\times K -(\\Delta t) & \\text{if $\\Delta t \\leq 0$,} \\ \\lambda f {+}(w) \\times K +(\\Delta t) & \\text{if $\\Delta t > 0$,} \\end{cases}\\ \\Delta t &\\equiv t {post} - t {pre}\\ K {(+,-)}(\\Delta t) &= \\exp(-|\\Delta t| / \\tau {(+,-)}) \\end{aligned} $$ The update functions $$f_{+}(w) = (1-w)&#94;{\\mu_{+}} \\text{ and } f_{-}(w) = \\alpha w&#94;{\\mu_{-}}$$ create synaptic potentiation (stronger weights) when causal spiking is detected ($\\Delta t > 0$), otherwise generating synaptic depression (weaker weights). This rule is also known as temporally asymmetric Hebbian plasticity and has been thoroughly studied under different parametrizations. (below) STDP Type Parametrization Ref. multiplicative STDP $\\mu_{+}=\\mu_{-}=1.0$ [6] additive STDP $\\mu_{+}=\\mu_{-}=0.0$ [7] Guetig STDP $\\mu_{+}=\\mu_{-}=[0.0, 1.0]$ [5] van Rossum STDP $\\mu_{+}=0.0, \\mu_{-} = 1.0$ [8] Sources: [5] Guetig et al. (2003). Learning input correlations through nonlinear temporally asymmetric hebbian plasticity. Journal of Neuroscience, 23:3697-3714 DOI: https://doi.org/10.1523/JNEUROSCI.23-09-03697.2003 [6] Rubin J, Lee D, Sompolinsky H (2001). Equilibrium properties of temporally asymmetric Hebbian plasticity. Physical Review Letters, 86:364-367. DOI: https://doi.org/10.1103/PhysRevLett.86.364 [7] Song S, Miller KD, Abbott LF (2000). Competitive Hebbian learning through spike-timing-dependent synaptic plasticity. Nature Neuroscience 3(9):919-926. DOI: https://doi.org/10.1038/78829 [8] van Rossum MCW, Bi G-Q, Turrigiano GG (2000). Stable Hebbian learning from spike timing-dependent plasticity. Journal of Neuroscience, 20(23):8812-8821. DOI: https://doi.org/10.1523/JNEUROSCI.20-23-08812.2000 Introduction: synapses in NEST Check the synapse types you can call Found in the following link: [9] NEST Docs: All synapse models Running the following command: import nest nest . Models ( 'synapses' ) For STDP synaptic models, the time constant of the depressing window of STDP ( tau_minus ) is exceptionally a parameter of the post-synaptic neuron. nest . Create ( \"iaf_psc_alpha\" , params = { \"tau_minus\" : 30.0 }) However, tau_plus is a synapse parameter. nest . SetDefaults ( \"stdp_synapse\" ,{ \"tau_plus\" : 15.0 }) Customized variants of a synapse model can be created using CopyModel() , and can be used anywhere that a built-in model name can be used. nest . CopyModel ( \"stdp_synapse\" , \"layer1_stdp_synapse\" ,{ \"Wmax\" : 90.0 }) Connectivity rules for multiple neurons can be defined. Please check [3] to learn more details about creating and connecting neuron populations. Synaptic parameters can also be randomly distributed by assigning a dictionary to the parameter. This should contain the target distribution and its optional parameters, as listed below: Distributions Keys normal mu , sigma lognormal mu , sigma uniform low , high uniform_int low , high binomial n , p exponential lambda gamma order , scale poisson lambda Synapse information can be retrieved from its origin, target and synapse model using GetConnections() : Example. num_nurons = 10 epop1 = nest . Create ( \"iaf_psc_delta\" , num_nurons , params = { \"tau_m\" : 30.0 }) epop2 = nest . Create ( \"iaf_psc_delta\" , num_nurons ) conn_dict = { \"rule\" : \"fixed_indegree\" , \"indegree\" : 5 } syn_dict = { \"model\" : \"stdp_synapse\" , \"alpha\" : 1.0 } nest . Connect ( epop1 , epop2 , conn_dict , syn_dict ) neuron = nest . Create ( \"iaf_psc_alpha\" ) syn_dict = { \"model\" : \"stdp_synapse\" , \"alpha\" : { \"distribution\" : \"uniform\" , \"low\" : 0.1 , \"high\" : 2. }, \"weight\" : { \"distribution\" : \"uniform\" , \"low\" : 0.5 , \"high\" : 5. }, \"delay\" : 1.0 } nest . Connect ( epop1 , neuron , \"all_to_all\" , syn_dict ) # Synapse information can be retrieved print ( nest . GetConnections ( epop1 , target = epop2 , synapse_model = \"stdp_synapse\" )) # We can then extract the data using `GetStatus()`. # Specific information can be retrieved by providing a list of desired parameters. conns = nest . GetConnections ( epop1 , synapse_model = \"stdp_synapse\" ) conn_vals = nest . GetStatus ( conns , [ \"target\" , \"weight\" ]) Networks Example1: connecting two neurons In this example, we will create and connect two neurons, A and B. Neuron A is of type iaf_psc_delta : Receives external current $I_e = 376.0 pA$. This current is sufficient to elicit a spike every $\\approx$ 50ms. Neuron B is solely connected to neuron A: Can only spike if the input from A is strong enough. Let's observe how B can be influenced by A. In [2]: import nest import matplotlib.pyplot as plt In [3]: from OIST.tutorial3 import NeuronA , NeuronB , plotMultipleNeurons In [4]: # First, verify the activity of neuron A. nest . ResetKernel () modelA = NeuronA () modelA . build () In [5]: ax = plotMultipleNeurons ( modelA ) plt . show () Now let's create neuron B as iaf_psc_delta with no external current: In [6]: modelB = NeuronB () modelB . build () In [7]: ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Neuron B is still inactive. We need to connect both neurons: In [8]: nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) In [9]: ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Q. Suggest at least 3 alterations we can make in this example to elicit spiking activity from B. Lower the threshold V_th : nest.SetStatus(neuron_B,{'V_th': -69.}) # default: -55 Higher thr current I_e Highre the weights between nuron_A and nuron_B In [10]: # Lower the threshold V_th. nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , V_th =- 69. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () In [11]: # Higher the current I_e. nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , I_e = 350. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () In [12]: # Highre the weights between \"nuron_A\" and \"nuron_B\" nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 14.9 }) nest . Simulate ( 300. ) nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 15. }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Because of the shape of B, and scale of observation, we couldn't find the spikes but neuron B also spikes after connection weight increased. Q. Check what happens if the neuron model is different: for example, change `iaf_psc_delta` to `hh_psc_alpha`. In [13]: # Lower the threshold V_th. nest . ResetKernel () modelA = NeuronA ( model_name = \"hh_psc_alpha\" ) modelA . set_params ( \"neuron\" , I_e = 250. ) modelA . build () modelB = NeuronB ( model_name = \"hh_psc_alpha\" ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Q. connect B to A reciprocally and check their dynamics. How can you describe their behavior? In [14]: nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , V_th =- 65. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 5. }) nest . Connect ( modelB . neuron , modelA . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 1 }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Example2: Random Balanced Network We will now simulate a network of integrate-and-fire (IAF) , excitatory and inhibitory spiking neurons connected randomly with fixed weights . This network (called Brunel Network ) was proposed and studied in [10]: The network is composed of excitatory neurons (80%) inhibitory neurons (20%) connection probability $\\epsilon = 10\\%$ ( epsilon ). All neuron types can be connected (E$\\rightarrow$E, E$\\rightarrow$I, I$\\rightarrow$E and I$\\rightarrow$I). Neurons receive external input from oustide the network modeled by a Poisson spike train generator [11] rate nu_ex , $\\nu_{ex} = \\eta * \\nu_{th}$ threshold rate $\\nu_{th}$ ( nu_th ) is calculated using $$\\nu_{th} = \\frac{\\theta}{J * \\text{CE} * \\tau_{m}}$$ In general, the interspike intervals drawn are exponentially distributed. The synaptic input current on each neuron is calculated as $$I_i(t) = \\tau \\sum_j J_j \\sum_k \\delta(t-\\delta-t_j&#94;k)$$ Sum over $j$ covers all synapses (internal and external to the network) Sum over $k$ covers all spikes arriving at times $t&#94;k_j$ with delay $\\delta$ ( delta ). This simple postsynaptic current model is called delta synapse , in which stimulation is applied in a single point in time for simplicity using the Dirac delta function . In biological systems, synaptic models are diverse and can vary within the same neuron depending on the function of the synapse, for example. In NEST, we will create a network of iaf_psc_delta neurons connected using static_synapse with weights $J_E$ and $J_I = -g*J_E$. We will study how this network changes its behavior depending on its parametrization. Sources: [10] Brunel N (2000). Dynamics of sparsely connected networks of excitatory and inhibitory spiking neurons. Journal of Computational Neuroscience 8, 183-208. [11] Poisson distribution m In [15]: from OIST.tutorial3 import BrunelNetwork In [16]: model = BrunelNetwork () In [17]: # Model parameters. model . __dict__ Out[17]: {'g': 5.0, 'eta': 2.0, 'delay': 1.5, 'dt': 0.1, 'epsilon': 0.1} $$ \\begin{aligned} \\begin{cases} \\epsilon &= 10\\%\\\\ v_{ex} &= \\eta v_{th}\\\\ \\delta\\\\ J_I &= -gJ_E \\end{cases} \\end{aligned} $$ In [18]: neuron_params = { \"C_m\" : 1.0 , \"tau_m\" : 20.0 , \"t_ref\" : 2.0 , \"E_L\" : 0.0 , \"V_reset\" : 0.0 , \"V_m\" : 0.0 , \"V_th\" : 20.0 } In [19]: model . build ( N_total_neuron = 12500 , N_rec_volt = 5 , N_rec = 50 , J = 0.1 , ** neuron_params ) Number of neurons : 12500 Excitatory: 10000 Inhibitory: 2500 Number of synapses: 15625000 Excitatory: 12500000 Inhibitory: 3125000 Building time : 4.58 s In [20]: model . simulate ( T = 900. ) Simulation time : 900.0 ms Processing time : 56.00 s Completed. Please use following methods to plot results. - `plotVoltageEx(n)`, `plotVoltageIn(n)` - `plotVoltageCompare(idx=0)` - `plotRaster()` Below we plot the voltage, raster, and activity rate of the excitatory and inhibitory populations. In [21]: model . plotVoltageEx () \u001b Membrane potential plots [Excitatory Neurons] In [22]: model . plotVoltageIn () \u001b Membrane potential plots [Inhibitory Neurons] In [23]: model . plotVoltageCompare ( 0 ) \u001b Membrane potential Compaison. In [24]: model . plotRaster () \u001b Raster Plot.(N=50) One of the main findings in Brunel's paper is the different activity states that can be observed in this network depending on $g$: the ratio between inhibitory and excitatory synaptic weights $\\eta$: the external excitation rate relative to the threshold rate $\\delta$: the synaptic delay $\\epsilon$: the connection probability . By altering these arguments, he observed different collective behaviors identified as asynchronous irregular (AI) asynchronous regular (AR) synchronous irregular (SI) synchronous regular (SR). These behaviors are exemplified in the images below. from [1] Q. Use the graphs as a starting point. Try to elaborate on how each of the four parameters affects the state of this network. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-3.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-3.html"},{"title":"Introduction to NEST Simulator","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Gastón Sivori Lecture Material https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-2_NEST-Introduction Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial2.py In [1]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Agenda Installation leaky integrate-and-fire (LIF) HH-neuron model Connecting nodes with different inputs F-I curve Installation Documentation: https://nest-simulator.readthedocs.io/en/latest/installation/ Github: https://github.com/nest/nest-simulator/tree/v2.18.0 Memo(What I did) pip $ pip install python-nest ※ This `nest` has lack of some module (ex. `nest.Create`) cmake # Install dependencies via Homebrew $ brew install gcc cmake gsl open-mpi libtool $ mkdir NEST $ cd NEST # Clone source files from Github. $ wget --content-disposition https://github.com/nest/nest-simulat or/archive/v2.16.0.tar.gz $ tar zxf nest-simulator-2.16.0.tar.gz $ mkir bld $ cd bld # Configure and build NEST inside the build directory # (replacing gcc-9 and g++-9 with the GCC compiler versions you installed with brew). # You can check it with `g++ -v` or `gcc -v` command. $ cmake -DCMAKE_INSTALL_PREFIX:PATH = . \\ -DCMAKE_C_COMPILER = gcc-9 \\ -DCMAKE_CXX_COMPILER = g++-9 \\ ../nest-simulator-2.16.0/ $ make -j4 $ make install $ make installcheck ※ This `nest` also has lack of some module (ex. `nest.Create`) Anacond # If you want to use jupyter notebook, please include \"jupyter\" $ conda create --name skill-pill-plus -c conda-forge nest-simulator python jupyter # path/to/activate is like \"/Users/iwasakishuto/.pyenv/versions/anaconda3-5.0.1/bin/activate\" $ source skill-pill-plus # Activated!! ( skill-pill-plus ) $ If you want to use this environment on the jupyter notebook, please follow this. $ pip install environment_kernels $ jupyter notebook --generate-config $ vi ~/.jupyter/jupyter_notebook_config.py # Add these line >>> c.NotebookApp.kernel_spec_manager_class = 'environment_kernels.EnvironmentKernelSpecManager' >>> c.EnvironmentKernelSpecManager.conda_env_dirs =[ '/Users/iwasakishuto/.pyenv/versions/anaconda3-5.0.1/env' ] $ jupyter notebook # If successful, you can chose your ideal environment at [Kernel → Change kernel] # NOTE: You should install `jupyter` in the environment. # If you not, please run `conda install --name \"Your Environment Name\" jupyter` ※ This `nest` has all modules :) In [2]: import nest import numpy as np import matplotlib.pyplot as plt # If you need to import other packages like scipy or scikit-learn # You should import these \"before\" nest!! For NEST to simulate different experiments, its kernel (core functionality) needs to be reseted ( nest.ResetKernel() ) for every new simulation. Please remember to run this code before running each simulation. About NEST Conceptually, neural networks consists of neurons and connections . Nodes can be neurons , sub-networks or devices inside the NEST framework. We will use devices to stimulate neurons and to measure their membrane potential. Sub-networks , on the other hand, are arrangements of neurons whose parameters may be modified as a group. We will look at sub-networks in the following lectures. leaky integrate-and-fire (LIF) For now, we will focus on constructing a leaky integrate-and-fire (LIF) neuron with delta-shaped synaptic currents: In this figure, a delta-shaped pulse $\\delta(t-t_j&#94;f)$ from neuron $j$ is being transmitted along its axon until it reaches neuron $i$'s dendrites through a synapse. Synapses are modelled as low-pass RC circuit filters which output a current $\\alpha(t-t_j&#94;f)$. These presynaptic currents reach the soma as an input current $I(t)$ which charges the capacitor $C$ (integration) while some of it leaks out through the resistance $R$. ($I(t) = I_R + I_C$) The electrical components here represent a circuit modelization of the biological mechanisms happening at the synapse and the soma. In this model, the membrane's potential is represented by capacitor $C$ such that when it has enough charge and reaches the threshold potential $\\vartheta$, a spike $\\delta(t-t_i&#94;f)$ is generated and transmitted. In [3]: from OIST.tutorial2 import LIFmodel In [4]: model = LIFmodel ( model_name = \"iaf_psc_alpha\" ) Create LIF neuron with alpha-function shaped synaptic currents. Created a spike_generator. Created a voltmeter. Created a spike detector. In [5]: # Check the neuron params. model . neuron_params () C_m : 250.0 pF E_L : -70.0 mV I_e : 0.0 pA V_m : -70.0 mV V_reset: -70.0 mV V_th : -55.0 mV t_ref : 2.0 ms tau_m : 10.0 ms Q1. You might have noticed that there is no parameter for the membrane resistance `R_m` as shown in the previous figure. Do you know why? The membrane time constant tau_m corresponds to the membrane capacitance C_m and membrane resistance R_m as observed in the electrical circuit above. Therefore it's possible to calculate what is the R_m value given the following formula: $$ \\tau_m = C_m R_m $$ In [6]: # Retrieve a particular set of parameters model . neuron_params ( \"V_reset\" , \"V_th\" ) Out[6]: ((-70.0, -55.0),) In [7]: # Modify spike generation to values 10 and 50 ms print ( f \"Before: {model.spike_params('spike_times')}\" ) model . set_params ( node = \"spike_generator\" , spike_times = [ 10. , 50. ]) print ( f \"After : {model.spike_params('spike_times')}\" ) Before: ((array([], dtype=float64),),) After : ((array([10., 50.]),),) In [8]: # Connect the spike generator and the voltmeter to the neuron. model . build ( weight = 1e3 ) Connect spike generator with a given synaptic specification ({'weight': 1000.0}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. Simulate for 100 ms and observe the results In [9]: ax = model . simulate ( ms = 100 ) plt . show () Q2. What can we observe here? Are these neuron spikes? We can observe the membrane trace of the LIF neuron model excited with alpha-function shaped spikes at times 10 ms and 50 ms. The observed peaks in the membrane trace are not spikes since the membrane threshold V_th is -55mV. If we modify the external current or lower the membrane's threshold potential we should be able to observe spikes. In [10]: # Modifying the threshold model = LIFmodel ( model_name = \"iaf_psc_alpha\" , display = False ) model . set_params ( \"neuron\" , V_th =- 58. ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . build ( weight = 1e3 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () In [11]: # modifying external current to LIF neuron model = LIFmodel ( model_name = \"iaf_psc_alpha\" , display = False ) model . set_params ( \"neuron\" , I_e = 300. ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e3 , display = False ) model . simulate ( ms = 100 ) plt . show () In this neuron model, the membrane potential does not follow the biologically observed dynamics that neurons have. Their use is limited to understand and experiment with network dynamics and spiking activity :( HH-neuron model For comparison, let's observe the membrane potential of a HH-neuron model (Hodgkin and Huxley, 1952). This model was the \"conclusion of a series of papers\" concerned with the flow of electric current through the surface membrane of the giant nerve fibre in the squid. Using voltage-clamp experiments and by varying extracellular sodium and potassium concentrations, Hodgkin and Huxley developed a model in which the properties of an excitable cell are described by a set of ordinary differential equations. For simplicity, we will not focus on these equations. NEST's framework integrates these equations to obtain the instantaneous membrane potential. The following figure represents an electric circuit model of the neuron's membrane. The HH-model (Hodgkin and Huxley, 1952) considers the ionic channels present on the cellular membrane. These channels allows the conduction of specific types of ions. Sodium channels (Na+) are scarce inside the cell , so that when sodium channel opens, positive charges rush into the cell to cause excitation. Potassium ions (K+) are rich inside the cell , so that when potassium channel opens, positive charges rush out of the cell to cause inhibition. The model assumes a leak current composed of all other remaining ionic currents (Cl, Mg, etc.) This model is based on careful data analysis and follows the following equation : $$C_m \\frac{dV}{dt} = \\bar{g_{Na}}m&#94;3h(E_{Na}-V) + \\bar{g_K}n&#94;4(E_K-V) + g_{Leak}(E_{Leak}-V) + I$$ Where the conductances $g_{Na}$ and $g_{K}$ are: $$ g_{Na} = \\bar{g_{Na}}m&#94;3h $$$$ g_{K} = \\bar{g_K}n&#94;4 $$ Let's see these parameters in NEST by creating a hh_psc_alpha neuron. A HH-model neuron with delta-shaped synaptic currents. In [12]: from OIST.tutorial2 import HHmodel In [13]: model = HHmodel () Create Hodgkin-Huxley neuron with alpha-function shaped synaptic currents. Created a spike_generator. Created a voltmeter. Created a spike detector. In [14]: model . neuron_params () C_m : 100.0 pF E_K : -77.0 mV E_L : -54.402 mV E_Na : 50.0 mV g_K : 3600.0 nS g_L : 30.0 nS g_Na : 12000.0 nS I_e : 0.0 pA V_m : -65.0 mV t_ref: 2.0 ms In [15]: model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e3 ) Connect spike generator with a given synaptic specification ({'weight': 1000.0}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. In [16]: ax = model . simulate ( ms = 100 ) plt . show () Q3. Modify the previous example to observe spikes. In [17]: # modifying the synaptic strength (w) to observe spikes model = HHmodel ( display = False ) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e4 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () In [18]: print ( f \"Number of spikes: {model.spikes} \" ) Number of spikes: 2 Could you observe the spikes? Just after a spike, the membrane potential resets to -77 mV and a short refractory period of 2 ms (check these parameter value t_ref from the parameter list shown above!). During this period, the neuron is unable to react to excitation. Q4. Can you try exciting the neuron during this period to observe this phenomena? In [19]: # In the following example the spike generator generates spikes at times 10ms, 11ms, 50ms and 52ms. model = HHmodel ( display = False ) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 11.0 , 50. , 52.0 ]) # Add!! model . build ( weight = 1e4 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () The figure is the same as before due to the refractory period of the neuron. Connecting nodes with different inputs To compare neurons with different inputs, let's see how the parameters of the input affect the neurons' output. In the following example, we will use constant input current and belows with the same mean strength as the constant input current. a Poisson spike train The probability density function and firing rates of neurons will be shaped given by these inputs. First, let us define the parameters of the simulation and input currents. In [20]: T = 1.2e3 # simulation time nu_ext = 15e3 # firing rate of external Poisson source J = 0.08 # synaptic weight d = 0.1 # delay C = 250.0 # membrane potential capacitance mu = J * 1e-3 * nu_ext * C # mean input in pAa I_ext = mu # external current In [21]: neuron_params = { 'C_m' : C , # (pF) 'E_L' : 0. , # (mV) 'I_e' : 0.0 , # (pA) 'V_m' : 0. , # (mV) 'V_reset' : 0. , # (mV) 'V_th' : 15. , # (mV) 't_ref' : 2.0 , # (ms) 'tau_m' : 10.0 , # (ms) } In [22]: plot_infos = { \"color\" : [ \"blue\" , \"red\" ], \"label\" : [ \"constant input\" , \"Poisson input\" ] } Then, make two types of models and compare them. In [23]: from OIST.tutorial2 import mkMultiDetectors , plotMultResults In [24]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) Create LIF neuron with delta-shaped synaptic currents. Created a voltmeter. Created a spike detector. In [25]: poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d ) Create LIF neuron with delta-shaped synaptic currents. Created a poisson_generator. Created a voltmeter. Created a spike detector. Connect spike generator with a given synaptic specification ({'weight': 0.08, 'delay': 0.1}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. In [26]: neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) Created 2 multimeter to record membrane potential of the neurons. Created 2 spike detectors to record spikes times and neuron identifiers, but not record from file. In [27]: nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axR . legend (), axR . set_xlim ( 0 , T ) plt . show () What!? There are no spikes?! Well, look at the figures and consider the threshold potential value V_th . Let's try increasing the synaptic strengh J . The neuron receiving Poisson input will be in different firing rate regimes! In [28]: print ( f \"poisson_model.neuron_params('V_th') = {poisson_model.neuron_params('V_th')[0][0]}\" ) print ( f \"const_model.neuron_params('V_th') = {const_model.neuron_params('V_th')[0][0]}\" ) poisson_model.neuron_params('V_th') = 15.0 const_model.neuron_params('V_th') = 15.0 Q5. Try to make the neuron fire at an irregular regime. In [29]: T = 1.2e3 # nu_ext = 15e3 # J = 0.09 # From 0.08 to 0.09. d = 0.1 # C = 250.0 # mu = J * 1e-3 * nu_ext * C # I_ext = mu # In [30]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axR . legend (), axR . set_xlim ( 0 , T ) plt . show () Q6. Try to make the neuron spike at a regular regime. In [31]: T = 1.2e3 # nu_ext = 15e3 # J = 0.11 # From 0.08 to 0.11. d = 0.1 # C = 250.0 # mu = J * 1e-3 * nu_ext * C # I_ext = mu # In [32]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axL . legend (), axR . legend (), axR . set_xlim ( 0 , T ) plt . show () Since we are using the LIF neuron model with a membrane threshold potential V_th at 15mV , you will not be able to see proper spikes. Instead, you will only see the after-spike dynamics (membrane potential reset and refractory period). Q7. Try to make HH neuron models spike at a regular regime for both input conditions. In [33]: T = 500.0 # simulation time nu_ext = 15e3 # firing rate of external Poisson source J = 0.08 # synaptic weight d = 0.1 # delay C = 100.0 # membrane potential capacitance mu = J * 1e-3 * nu_ext * C # mean input in pAa I_ext = mu # external current In [34]: neuron_params = { 'g_K' : 3000.0 , 'g_Na' : 16000.0 , 'g_L' : 60.0 } In [35]: const_model = HHmodel ( model_name = \"hh_psc_alpha\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = HHmodel ( model_name = \"hh_psc_alpha\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , ** plot_infos ) axL . legend (), axR . legend (), axR . set_xlim ( 0 , T ), axR . set_ylim ( - 80 , 40 ) plt . show () Rate of neuron stimulated with constant input input: 56.112 Rate of neuron stimulated with Poisson input input: 48.096 F-I curve As you have seen in the past figures, the firing rate of the neuron can change given different external current I_e . It's possible to plot this relationship and its usually referred to as the F-I curve . In [36]: from OIST.tutorial2 import FiringRate In [37]: neuron_params = { 'C_m' : 250.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [38]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () As you can observe from this figure, given the parameter setup, the neuron in a leaky-integrate-and-fire model starts to fire spikes at around 370 pA of external input current I_e . For this particular case, V_th was chosen to be low to observe the trend of the firing rate as external current is increasing. Modifying the value of the capacitance C_m moves this curve in the x-axis Modifying the refractory period t_ref slows down the firing rate i.e. more current is required for a given firing rate. Q8. Observe these changes in the F-I curve by modifying the neuron model parameters. In [39]: neuron_params = { 'C_m' : 150.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [40]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () In [41]: neuron_params = { 'C_m' : 350.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [42]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () In [43]: neuron_params = { 'C_m' : 250.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 1.0 , 'tau_m' : 10.0 , } In [44]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () Q10. Repeat these simulations with the HH neuron model hh_psc_alpha by modifying channel conductances. In [45]: neuron_params = { 'g_K' : 3600.0 , 'g_Na' : 12000.0 , 'g_L' : 30.0 } In [46]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [47]: neuron_params = { 'g_K' : 3600.0 , 'g_Na' : 13000.0 , 'g_L' : 30.0 } In [48]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [49]: neuron_params = { 'g_K' : 3800.0 , 'g_Na' : 12000.0 , 'g_L' : 30.0 } In [50]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-2.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-2.html"},{"title":"Mathematical Models and Numerical Methods of Computational Neuroscience","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Alan Func Lecture Materials https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-1_Ordinary-Differential-Equations Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial1.py In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Agenda Brief introduction of Differential Equations Neuronal Models Numerical Method to Simulate Neuronal Models How the Network can be trained Brief introduction of Differential Equations Ordinary Differential Equations A fundamental tool in theoretical Science The differential equation gives the dependence of derivatives $$F\\left[\\frac{d&#94;nx(t)}{dt&#94;n},\\cdots,\\frac{dx(t)}{dt},C\\right] = 0$$ As we can calculate the whole path ways if we know the velocity($v=dx(t)/dt$), by knowing the slopes, one may trace the whole curve!! Examples of Models and Theories Simple Harmonic Oscillator Heat Equation(1-D) An oscillator that is neither driven nor damped. How the distribution of some quantity (such as heat) evolves over time in a solid medium $$\\underset{\\text{Acceleration}}{\\frac{d&#94;2x(t)}{dt&#94;2}}+\\underset{\\text{Returning Force}}{\\omega&#94;2x(t)} = 0$$ $$\\underset{\\text{Rate of Heat}}{\\frac{\\partial u(x,t)}{\\partial t}}+\\underset{\\text{Returning Force}}{\\alpha\\frac{\\partial&#94;2u(x,t)}{\\partial x&#94;2}} = 0$$ Implementation by Numerical Method Euler Method Runge-Kutta Methods Euler Method Euler method has a relatively large error. There are some extensions of the Euler method(one of them are Mid-Point method. ) In [3]: X = np . arange ( - 1.0 , 6.5 , 0.5 ) Y = 1 / 6 * X ** 3 dYdX = 1 / 2 * X ** 2 In [4]: Euler_dYdX_bigger = ( Y [ 2 :] - Y [: - 2 ])[ 2 :] # step size=1 dY/dX(t) = X(t+1)-X(t) Euler_dYdX_smaller = ( Y [ 1 :] - Y [: - 1 ])[ 2 : - 1 ] / 0.5 # step size=0.5 dY/dX(t) = (X(t+0.5)-X(t))/0.5 MidPointEuler_dYdX = ( Y [ 2 :] - Y [: - 2 ])[ 1 : - 1 ] # step size=1 dY/dX(t) = X(t+0.5)-X(t-0.5) In [5]: def CompareNumerical ( ax , X , Y , label , marker , color ): ax . scatter ( X [ 2 : - 2 ], Y , label = label , marker = marker , color = color ) ax . plot ( X [ 2 : - 2 ], Y , color = color , alpha = 0.5 ) return ax In [6]: fig , ax = plt . subplots () ax = CompareNumerical ( ax , X , Euler_dYdX_bigger , \"Step = 1.0\" , \"s\" , \"b\" ) ax = CompareNumerical ( ax , X , Euler_dYdX_smaller , \"Step = 0.5\" , \"o\" , \"r\" ) ax = CompareNumerical ( ax , X , MidPointEuler_dYdX , \"Mid-point h=1.0\" , \"&#94;\" , \"g\" ) ax . plot ( X [ 2 : - 2 ], dYdX [ 2 : - 2 ], linestyle = \"--\" , label = \"Analytic\" , color = \"black\" ) ax . legend (), ax . grid (), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$y$\" ) plt . show () The mid-point method is surprisingly good!! Runge-Kutta Methods A family of implicit and explicit iterative methods. More: Wikipedia Neuronal Models To Model a Neuron... Neurons can be excited by current injection . If the membrance potential(Voltage) is larger than some thresholds , an action potential will be triggered. Membrance potential means the potential difference across the neuron membrance. → Relative can be controlled by concentrations of irons($\\mathrm{Na}&#94;+,\\mathrm{K}&#94;+,\\mathrm{Cl}&#94;-$) is maintained by their ion bumps , and at the resting state, it is around $65\\mathrm{mV}$. sometimes across the threshold , and when it occurs, the neuron fires works like a capacitor with a leaky current. Leaky Integrate-and-Fire(LIF) model In 1907, Lapicque proposed a simple model(which is just the time derivative of the law of capacitance ($Q=CV$) .) for neurons: $$I(t)-\\frac{V_m(t) - V_{rest}}{R_m} = C_m\\frac{dV_m(t)}{dt}$$ $I$: Input current (=const.) $V_m$: Membrance potential $V_{rest}$: Resting potential of the membrance $R_m$: Membrane resistance (we find it is not a perfect insulator as assumed previously) $C_m$: Capacity of the membrance. When an input current is applied, the membrane voltage increases with time until it reaches a constant threshold $V_{th}$ At the point, a delta function spike occurs and the voltage is reset to its resting potential($V_{rest}$). The LIF neuron fired more frequently as the input current increases. Leak Conductance Ion permeability at resting membrane potential, allowing a constant flow of current through the cell membrane due to channels that remain open at resting membrane potential (Ref: Encyclopedia of Neuroscience ) In [7]: from OIST.tutorial1 import LIFsimulation , LITSpikeFrequency In [8]: params = { 'V_rest' : - 65 , 'V_thre' : - 40 , 'V_reset' : - 70 , 'V_fire' : 20 , 'C' : 2e-4 , 'R' : 7.5e4 , 'I' : 5e-4 , 'dt' : 0.1 , 'T' : 100 , } In [9]: time , Vm = LIFsimulation ( ** params ) plt . plot ( time , Vm , color = \"black\" ) plt . xlabel ( \"time[ms]\" ), plt . ylabel ( \"V[mV]\" ), plt . grid () plt . show () In [10]: Is = [ 0.5e-3 , 1e-3 , 1.5e-3 , 2.0e-3 , 2.5e-3 , 3.0e-3 ] freqs = LITSpikeFrequency ( Is , ** params ) plt . plot ( Is , freqs , color = \"blue\" ), plt . scatter ( Is , freqs , color = \"blue\" , marker = \"s\" ) plt . title ( \"How Spiking Frequency Depends on Input Current\" ), plt . xlabel ( \"Input Current: I [uA]\" ), plt . ylabel ( \"Spiking Frequency [Hz]\" ), plt . grid () plt . show () ※ The LIF neuron fired more frequently as the input current increases. Hodgkin-Huxley model $$ I = C_m + \\frac{dV_m}{dt} + g_{\\mathrm{l}}\\left(V_m-V_{\\mathrm{l}}\\right) + g_{\\mathrm{K}}n&#94;4\\left(V_m-V_{\\mathrm{K}}\\right) + g_{\\mathrm{Na}}m&#94;3h\\left(V_m-V_{\\mathrm{Na}}\\right)\\\\ \\begin{cases} \\begin{aligned} \\frac{dn}{dt} &= \\alpha_n(V_m)(1-n) + \\beta_n(V_m)n\\\\ \\frac{dm}{dt} &= \\alpha_m(V_m)(1-m) + \\beta_m(V_m)m\\\\ \\frac{dh}{dt} &= \\alpha_h(V_m)(1-h) + \\beta_h(V_m)h\\\\ \\end{aligned} \\end{cases} $$ Proposed by Hodgkin and Huxley in 1952 (They received the 1963 Nobel Prize in Physiology or medicin for this work.) Like Leaky Integrate-and-Fire(LIF) model , the input current (const.) charges up the membrance capacitor. Leaky conductance This model considers also ion currents invoving potassium ion ($\\mathrm{K}&#94;+$) and Sodium ion ($\\mathrm{Na}&#94;{+}$) induced by the potential difference. Sodium ion : has a reversal potential depolarizing the membrance. The conductivity is voltage-gated. Potassium ion : has a reversal potential hyper-polarizing the membrance. The conductivity is voltage-gated. The individual gates act like a first order chemical reaction with two states: $$\\text{Shut}\\overset{\\alpha}{\\underset{\\beta}{\\rightleftarrows}}\\text{Open}$$ Propose that Each $\\mathrm{K}$ channel has $4$ identical activation gates.( $\\mathbb{P}_{\\text{open}}=n$ ) Each $Na$ channel has $3$ avtivation gates( $\\mathbb{P}_{\\text{open}}=m$ ), and $1$ inactivation gate( $\\mathbb{P}_{\\text{open}}=h$ ). Action Potential Stimulas raises the membrane potential. (Depolarization) If membrance potential over the Threshold , voltage-gated sodium channels will open, and due to the sodium concentration gradient (ex > in) , sodium ion flow into the cell. This process raises the membrance potential, and it gets further depolarized. As the membrance become **\"too large\"**, sodium ion channel closes , and after that ( there is a delay ), voltage-gated potassium channel will open. When the membrance potential return to the resting state, potassium channel closes, but as this response takes time, the membrance potential will be lower than the initial voltage. (Hyperpolarization) (※ Resting membrance potential means the equilibrium point between \"electrical gradient\" and \"concentration gradient\".) How the Network can be trained Long-term Synaptic Plasticity Stimulas are passed through a glutamate . Glutamate connects with AMPA receptor and it causes sodium channels opening. If Depolarization occurs, NMDA channel (which was closed by Magnesium) open, and Calcium flows into the cell. The amount of Calcium is Large : LTP(Long-term potentiation) occurs. Increase the AMPA. Small : LTD(Long-term depression) occurs. Decrease the AMPA. Spike-Timing-Depenent Plasticity (Classical) The change in $w_{ji}$ depends on the spike timings In order to perform STDP with differential equatins, an online implementation of STDP is proposed $$ \\begin{aligned} \\tau_+\\frac{dx}{dt} &= -x + a_+(x)\\sum_{t_f}\\delta(t-t_f)\\\\ \\tau_-\\frac{dy}{dt} &= -y + a_-(y)\\sum_{t_n}\\delta(t-t_n)\\\\ \\Longrightarrow \\frac{dw}{dt} &= A_+(w)x(t)\\sum_{t_n}\\delta(t-t_n) - A_-(w)y(t)\\sum_{t_f}\\delta(t-t_f) \\end{aligned} $$ In [11]: from OIST.tutorial1 import STDPsimulation In [12]: time , Results , Info = STDPsimulation ( pre = 10 , post = 30 ) In [13]: fig = plt . figure ( figsize = ( 14 , 6 )) for i , vals in enumerate ( Results ): ax = fig . add_subplot ( 3 , 2 , i + 1 ) ax . plot ( time , vals , color = Info . get ( \"color\" )[ i ]) ax . set_xlabel ( \"time\" ), ax . set_ylabel ( Info . get ( \"label\" )[ i ]), ax . set_title ( Info . get ( \"label\" )[ i ]) plt . tight_layout () plt . show () ※ As \"Pre - Post\" changes... In [14]: pre = 40 for diff in range ( - 40 , 40 ): _ , Results , _ = STDPsimulation ( pre = pre , post = pre - diff ) dws = Results [ - 1 ] dw = dws [ np . argmax ( np . abs ( dws ))] plt . scatter ( diff , dw , color = \"black\" , s = 10 ) plt . grid (), plt . xlabel ( \"$t_ {pre} - t_ {post} $\" , fontsize = 20 ), plt . ylabel ( \"$\\Delta w$\" , fontsize = 20 ) plt . show () Then, with an appropriate firing sequence, the network can be trained!! Take-Home Message Some neuronal behaviors can be mathematically modeled. Networks of neurons has the potential to do different computations. Those networks can be trained. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-1.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-1.html"},{"title":"生物物理学 第7回(小テスト)","text":"nbo9U3hYburL+jJHlz1i0Q==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-7-quiz.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-7-quiz.html"},{"title":"Pro.4 Itemset mining algorithm","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-19.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-19.html"},{"title":"Pro.3 Gene Network Inference","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-18.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-18.html"},{"title":"Pro.2 最適行動列アルゴリズム","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-17.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-17.html"},{"title":"Pro.1 配列モチーフ探索","text":"In [7]: import numpy as np Problem Setting Identify the common sequencial features(sequence motif) from large amount of sequences data containing tf-binding regions. DeepBind Link: Paper Software tool \"Deep Learning\" techniques to ascertain the sequence specificities of DNA- and RNA-binding proteins from experimental data . outperforms other state-of-the-art methods. (Published: 27 July 2015) Results are readily visualized as a weighted ensemble of position weight matrices(PWMs) a mutation map that indicates how variations affect binding within a specific sequence. computes a binding score $f(s)$ using four stages: $$f(s) = \\text{Neural Network}_W\\left(\\text{pool}\\left(\\text{rect}_b\\left(\\text{conv}_M(s)\\right)\\right)\\right)$$ Convolution : Scan a set of motif detectors (length=$L$) with parameters $M&#94;{(j)}$ $$\\text{conv}_M(s)_{ij} = \\sum_{k=0}&#94;{K-1}\\sum_{l=0}&#94;{L-1}M&#94;{(j)}_{k,i+l}s_{ki}$$ Rectification : Extract some positions $$\\text{rect}_b(x_{ij}) =\\begin{cases} x_{ij} + b & (\\text{if }x_{ij} + b>0)\\\\0 & (\\text{otherwise})\\end{cases}$$ Pooling : Compute the maximum and average of each $\\text{rect}_b\\left(\\cdot\\right)$ across the sequence. Maximizing : identify the presence of longer motifs . Averaging : identify cumulative effects of short motifs $$\\text{pool}_{\\alpha}(x_{ij}) = \\alpha\\max_i\\left(x_{ij}\\right) + \\left(1-\\alpha\\right)\\underset{i}{\\text{ave}}\\left(x_{ij}\\right)$$ Neural Network : Combines the responses to produce a score. a: Five independent sequences being processed in parallel by single DeepBind model. b: The calibration, training and testing procedure. Implementation In [11]: # from kerasy.Bio.deepbind import DeepBind In [ ]: In [1]: nuc = [ \"A\" , \"C\" , \"G\" , \"T\" ] def nuc_to_code ( nuc ): return { 'A' : [ 1 , 0 , 0 , 0 ], 'C' : [ 0 , 1 , 0 , 0 ], 'G' : [ 0 , 0 , 1 , 0 ], 'T' : [ 0 , 0 , 0 , 1 ], } . get ( nuc , [ 0 , 0 , 0 , 0 ]) def generate_dataset ( n_p , n_n , length , motif , nuc ): m = len ( motif ) y = ([ 1 ] * n_p + [ 0 ] * n_n ) x = [ None ] * ( n_p + n_n ) for i in range ( n_p + n_n ): seq = np . random . choice ( nuc , size = length ) # random seq if i < n_p : # embed motif at random position j = np . random . randint ( length - m + 1 ) for k in range ( m ): seq [ j + k ] = np . random . choice ( nuc , p = motif [ k ]) x [ i ] = '' . join ( seq ) return ( x , y ) motif = [[ 0.0 , 1.0 , 0.0 , 0.0 ], # C [ 0.5 , 0.0 , 0.0 , 0.5 ], # A/T [ 0.0 , 0.5 , 0.5 , 0.0 ], # C/G [ 0.0 , 0.0 , 1.0 , 0.0 ], # G [ 0.0 , 0.0 , 0.0 , 1.0 ]] # T seq_len = 20 np_train = 1000 nn_train = 1000 np_test = 100 nn_test = 100 In [2]: x_train , y_train = generate_dataset ( np_train , nn_train , seq_len , motif , nuc ) x_test , y_test = generate_dataset ( np_test , nn_test , seq_len , motif , nuc ) In [ ]: - [ Enhanced ]( https : // arxiv . org / pdf / 1611.05777 . pdf ) In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-16.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-16.html"},{"title":"Ex.15 Neural Network","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-15.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-15.html"},{"title":"Ex.14 Brownian motion","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-14.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-14.html"},{"title":"Ex.13 Sparse Modeling","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-13.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-13.html"},{"title":"Ex.12 Order Statistics","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-12.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-12.html"},{"title":"Ex.11 Data Assimilation","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-11.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-11.html"},{"title":"Ex.10 Expectation Maximization Algorithm","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-10.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-10.html"},{"title":"Ex.9 Kullback-Leibler Divergence","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-9.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-9.html"},{"title":"Ex.8 Multivariate Normal Distribution","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-8.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-8.html"},{"title":"Ex.7 Positive Definite Symmetric Matrix","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-7.html"},{"title":"Ex.6 Multinomial Distribution","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-6.html"},{"title":"Ex.5 Categorical Distribution","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-5.html"},{"title":"Ex4. Exponential Distribution","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-4.html"},{"title":"EX3. Law of Large Numbers","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-3.html"},{"title":"EX2. Characteristic function","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-2.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-2.html"},{"title":"EX1. Covariance","text":"解答 1 $$ \\begin{aligned} \\mathbb{E}\\left(\\left(X-\\mu_X\\right)\\left(Y-\\mu_Y\\right)\\right) &= \\mathbb{E}\\left(XY - \\mu_YX-\\mu_XY + \\mu_X\\mu_Y\\right)\\\\ &= \\mathbb{E}\\left(XY\\right) - \\mu_Y\\mathbb{E}(X) - \\mu_X\\mathbb{E}(Y) + \\mu_X\\mu_Y\\\\ &= \\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\quad (\\because\\mu_X=\\mathbb{E}(X),\\mu_Y=\\mathbb{E}(Y)) \\end{aligned} $$ 2 連続型確率変数の場合で証明する。（離散型は \\(\\int\\rightarrow\\sum\\) ） $$ \\begin{aligned} \\mathbb{E}(XY) &= \\int_{x}\\int_{y} xy\\mathbb{P}(X=x,Y=y)dxdy\\\\ &= \\int_{x}\\int_{y} xy\\mathbb{P}(X=x)\\mathbb{P}(Y=y)dxdy\\quad(\\because X,Y: \\text{independent})\\\\ &= \\int_{x} x\\mathbb{P}(X=x)dx\\int_{y}y\\mathbb{P}(Y=y)dy\\\\ &= \\mathbb{E}(X)\\mathbb{E}(Y) \\end{aligned} $$ となるので、 \\((1)\\) より、 $$ \\begin{aligned} \\mathrm{Cov}(X,Y) &= \\mathbb{E}\\left(\\left(X-\\mu_X\\right)\\left(Y-\\mu_Y\\right)\\right)\\\\ &=\\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\\\ &=0 \\end{aligned} $$ 3 $$ \\begin{aligned} \\mathrm{Var}(X+Y) &= \\mathbb{E}\\left((X+Y)&#94;2\\right) - \\left(\\mathbb{E}\\left(X+Y\\right)\\right)&#94;2\\\\ &= \\mathbb{E}\\left(X&#94;2 + 2XY + Y&#94;2\\right) - \\left(\\mathbb{E}(X) + \\mathbb{E}(Y)\\right)&#94;2 \\\\ &= \\left(\\mathbb{E}(X&#94;2) - \\mathbb{E}(X)&#94;2\\right) + \\left(\\mathbb{E}(Y&#94;2) - \\mathbb{E}(Y)&#94;2\\right) + 2\\left(\\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\right)\\\\ &= \\mathrm{Var}(X) + \\mathrm{Var}(Y) + 2\\mathrm{Cov}(X,Y) \\end{aligned} $$ 4 $$ \\begin{aligned} \\mathrm{Cov}\\left(aX+bY,cZ+dW\\right) &= \\mathbb{E}\\left(\\left(aX+bY\\right)\\left(cZ+dW\\right)\\right) - \\mathbb{E}\\left(aX+bY\\right)\\mathbb{E}\\left(cZ+dW\\right)\\\\ &= \\left(\\mathbb{E}\\left(aXcZ\\right) + \\cdots + \\mathbb{E}\\left(bYdW\\right)\\right) - \\left(\\mathbb{E}(aX)\\mathbb{E}(cZ) + \\cdots + \\mathbb{E}(bY)\\mathbb{E}(dW) \\right)\\\\ &= \\left\\{\\mathbb{E}\\left(aXcZ\\right) - \\mathbb{E}(aX)\\mathbb{E}(cZ) \\right\\} + \\cdots + \\left\\{\\mathbb{E}\\left(bYdW\\right) - \\mathbb{E}(bY)\\mathbb{E}(dW) \\right\\}\\\\ &= ac\\left\\{\\mathbb{E}\\left(XZ\\right) - \\mathbb{E}(X)\\mathbb{E}(Z)\\right\\} + \\cdots + bd\\left\\{\\mathbb{E}\\left(YW\\right) - \\mathbb{E}(Y)\\mathbb{E}(W)\\right\\}\\\\ &= ac\\mathrm{Cov}(X,Z) + ad\\mathrm{Cov}(X,W) + bc\\mathrm{Cov}(Y,Z) + bd\\mathrm{Cov}(Y,W) \\end{aligned} $$ 5 $$ \\begin{aligned} \\mathrm{Cov}\\left(X,Y\\right)&#94;2 &= \\left(\\sum_{x,y}(x-\\mu_X)(y-\\mu_Y)\\mathbb{P}(X=x,Y=y)\\right)&#94;2\\\\ &= \\left(\\sum_{z,w}zw\\mathbb{P}(X=x,Y=y)\\right)&#94;2\\\\ &= \\left(\\sum_{z,w}zwP_{zw}\\right)\\left(\\sum_{z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime}w&#94;{\\prime}P_{z&#94;{\\prime}w&#94;{\\prime}}\\right)\\\\ &=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}zwz&#94;{\\prime}w&#94;{\\prime}P_{zw}P_{z&#94;{\\prime}w&#94;{\\prime}}\\quad\\left(\\because\\text{expansion}\\right)\\\\ \\mathrm{Var}(X)\\mathrm{Var}(Y) &= \\left(\\sum_{x}\\left(x-\\mu_X\\right)&#94;2\\mathbb{P}(X=x)\\right)\\left(\\sum_{y}\\left(y-\\mu_Y\\right)&#94;2\\mathbb{P}(Y=y)\\right)\\\\ &= \\left(\\sum_{x,y}\\left(x-\\mu_X\\right)&#94;2\\mathbb{P}(X=x,Y=y)\\right)\\left(\\sum_{x,y}\\left(y-\\mu_Y\\right)&#94;2\\mathbb{P}(X=x,Y=y)\\right)\\\\ &= \\left(\\sum_{z,w}z&#94;2P_{x,y}\\right)\\left(\\sum_{z,w}w&#94;2P_{x,y}\\right)\\\\ &=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\left(=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\right)\\\\ &=\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}+\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}} \\end{aligned} $$ と変形できるので、 $$ \\begin{aligned} \\mathrm{Var}(X)\\mathrm{Var}(Y) - \\mathrm{Cov}\\left(X,Y\\right)&#94;2 &= \\left(\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}+\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\right) - \\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}zwz&#94;{\\prime}w&#94;{\\prime}P_{zw}P_{z&#94;{\\prime}w&#94;{\\prime}}\\\\ &= \\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}\\left(z&#94;2w&#94;{\\prime2} + z&#94;{\\prime2}w&#94;2 - 2zwz&#94;{\\prime}w&#94;{\\prime}\\right)P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\\\ &=\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}\\left(zw&#94;{\\prime} - z&#94;{\\prime}w\\right)&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\\\ &\\geq0\\\\ \\therefore\\mathrm{Var}(X)\\mathrm{Var}(Y) &\\geq \\mathrm{Cov}\\left(X,Y\\right)&#94;2 \\end{aligned} $$ memo 任意の \\(n,m\\) に対して以下が成り立つ時、等号条件が成立（？） $$\\mathbb{P}\\left(X=x_n,Y=y_m\\right) = \\mathbb{P}\\left(X=x_n\\right)\\delta_{nm}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-1.html"},{"title":"Neural Networks","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開)","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-5.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-5.html"},{"title":"レポート課題5(10/31出題)","text":"iI2IeHPJGMAaFKJoeqmi6g==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report5.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report5.html"},{"title":"確率と統計(1)基礎概念","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 In [1]: import numpy as np import matplotlib.pyplot as plt 講義概要 確率変数と確率分布 確率分布の性質を表す指標 同時確率 条件付き確率 確率変数と確率分布 用語 意味 確率(probability) 事象の起こりやすさを定量的に示す $0$ から $1$ の値 確率変数(random variable) その変数に関する任意の事象に対して確率が定義されている変数 確率分布(probability distribution) 確率変数に関する各事象に対してその確率を与える関数 離散型(discrete type)確率変数 ある可算集合 $\\mathcal{X}$ の中のいずれかの値をとる確率変数 確率質量関数(probability mass function) $f(x)$ $$f(x)\\geq0,\\quad \\sum_{x\\in\\mathcal{X}}f(x) = 1$$ 連続型(continuous type)確率変数 連続値をとる確率変数 確率密度関数(probability density function) $f(x)$ $$f(x)\\geq0,\\quad\\int_{-\\infty}&#94;{\\infty}f(x)dx=1$$ 累積分布関数(cumulative distribution function) $F(x)$ $$F(x) = P(X\\leq x)=\\int_{-\\infty}&#94;{x}f(u)du\\ \\text{ or } \\sum_{i:i\\leq x}f(i)$$ 確率分布の性質を表す指標 用語 数式 説明 期待値(expectation) $$E(X) = \\sum_xxf(x)\\ \\text{ or }\\int xf(x)dx$$ 確率変数の値の平均（正確には確率による重み付きの平均） 確率変数を代表する値を表す指標 ※ 外れ値(outlier)に敏感 中央値(median) $P(X\\leq x)=1/2$ を満たす $x$ データを大きい順（または小さい順）に並べたときの真ん中の値。 最頻値(mode) $f(x)$ を最大にする $x$ データの中で最も頻度が高い値 分散(variance) $$\\begin{aligned}V(X) &= E\\left\\{(X-E[X])&#94;2\\right\\}\\\\&=E\\left\\{X&#94;2-2E[X]X+(E[X])&#94;2\\right\\}\\\\&=E[X&#94;2]-E\\left[2E[X]X\\right]+(E[X])&#94;2\\\\&=E[X&#94;2]-2E[X]E[X]+(E[X])&#94;2\\\\&=E[X&#94;2]-(E[X])&#94;2\\end{aligned}$$ 確率変数の散らばり具合を表す指標 標準偏差(standard devariation) $\\sqrt{V(X)}$ 分散の平方根 標準化(standardization) $$Z=\\frac{X-E(X)}{\\sqrt{V(X)}}$$ 任意の確率変数 $X$ に対して、期待値 $0$、分散 $1$ の確率変数 $Z$ が定義できる。 歪度(skewness) $$\\alpha_3 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;3\\right\\}}{\\left\\{V(X)\\right\\}&#94;{3/2}}$$ 確率変数の非対称性を表す。 劣度(kurtosis) $$\\beta_4 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;4\\right\\}}{\\left\\{V(X)\\right\\}&#94;{2}}-3$$ 確率分布の尖り具合を表す。 積率(moment) $$\\mu_r = E\\left[X&#94;r\\right]$$ 期待値・分散・歪度・劣度などを表すパラメータ。全ての次数の積率を指定すれば、確率分布を一位に決定することができる。（左は $r$ 次の積率） 積率母関数(moment generating function) $$M_X(t) = E[e&#94;{tX}]=\\begin{cases}\\sum_xe&#94;{tx}f(x)\\\\\\int e&#94;{tx}f(x)dx\\end{cases}\\\\ M_X&#94;{(r)}(0)=\\mu_r$$ 全ての次数の積率を生成する関数。存在しない（無限大に発散する）こともある。 In [2]: def computation_variance ( n = 10000 , mu = 0 , sigma = 1 , seed = None ): X = np . random . RandomState ( seed ) . normal ( loc = mu , scale = sigma , size = n ) EX = sum ( X ) / n EX2 = sum ( X ** 2 ) / n # Calculate variance in 3 ways. var1 = np . var ( X ) var2 = sum (( X - EX ) ** 2 ) / n var3 = EX2 - EX ** 2 print ( \"`np.var(X)` =\" , var1 ) print ( \"E{(X - E[X])&#94;2} =\" , var2 ) print ( \"E[X&#94;2] - (E[X])&#94;2 =\" , var3 ) In [3]: computation_variance ( mu = 100 , seed = 0 ) `np.var(X)` = 0.9752679753477969 E{(X - E[X])&#94;2} = 0.9752679753477979 E[X&#94;2] - (E[X])&#94;2 = 0.9752679752218683 In [4]: computation_variance ( mu = 1e8 , seed = 1 ) `np.var(X)` = 0.9975731614280597 E{(X - E[X])&#94;2} = 0.9975731614281662 E[X&#94;2] - (E[X])&#94;2 = -98.0 ※ 「二乗の平均 - 平均の二乗」は丸め誤差の影響を受けやすい 歪度(skewness) 確率変数の非対称性を表す。 $$\\alpha_3 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;3\\right\\}}{\\left\\{V(X)\\right\\}&#94;{3/2}}$$ In [5]: def plot_skewness ( ax = None , seed = None , n = 100 ): if ax == None : fig , ax = plt . subplots () X = np . random . RandomState ( seed ) . randint ( low = 1 , high = 7 , size = n ) ax . hist ( X , density = True , bins = 6 , color = \"blue\" , align = 'left' ) EX = np . mean ( X ) VX = np . var ( X ) skewness = np . mean (( X - EX ) ** 3 ) / VX ** ( 3 / 2 ) ax . set_title ( f \"skewness = {skewness:.3f} \" ) return ax In [6]: fig = plt . figure ( figsize = ( 12 , 3 )) for i , seed in enumerate ([ 44756 , 96331 , 76432 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plot_skewness ( ax = ax , seed = seed ) plt . show () 劣度(kurtosis) 確率分布の尖り具合を表す。 $$\\beta_4 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;4\\right\\}}{\\left\\{V(X)\\right\\}&#94;{2}}-3$$ In [7]: X = np . linspace ( - 5 , 5 , 10000 ) In [8]: f1 = lambda x : 1 / 1250 * ( 5 - abs ( x )) ** 4 f2 = lambda x , mu = 0 , sigma = 1 : 1 / np . sqrt ( 2 * np . pi * sigma ** 2 ) * np . exp ( - ( x - mu ) ** 2 / 2 * sigma ** 2 ) f3 = lambda x : 1 / 4 if abs ( x ) <= 2 else 0 In [9]: def plot_kurtosis ( X , func , ax = None ): if ax == None : fig , ax = plt . subplots () Y = np . array ([ func ( x ) for x in X ]) ax . plot ( X , Y , color = \"red\" ) Y /= sum ( Y ) EX = np . sum ( Y * X ) VX = np . sum ( Y * ( X - EX ) ** 2 ) kurtosis = np . sum ( Y * ( X - EX ) ** 4 ) / VX ** 2 - 3 ax . set_title ( f \"kurtosis = {kurtosis:.3f} \" ) return ax In [10]: fig = plt . figure ( figsize = ( 12 , 3 )) for i , func in enumerate ([ f1 , f2 , f3 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plot_kurtosis ( X = X , func = func , ax = ax ) ax . set_xlim ( - 5 , 5 ); ax . set_ylim ( 0 , 1 ) plt . show () 同時確率 用語 数式 説明 同時確率(joint probability) 複数の確率変数が関わる確率 同時確率質量関数 $$P(X=x,Y=y) = f(x,y)\\\\f(x,y)\\geq0,\\quad\\sum_{x\\in\\mathcal{X}}\\sum_{y\\in\\mathcal{Y}}f(x,y)=1$$ 離散型の同時確率 同時確率密度関数 $$P(a\\leq X\\leq b,c\\leq Y\\leq d) = \\int_c&#94;d\\int_a&#94;bf(x,y)dxdy\\\\f(x,y)\\geq0,\\quad\\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x,y)dxdy=1$$ 連続型の同時確率 共分散 $X$ と $X&#94;{\\prime}$ の 共分散(covariance) ： $$\\mathrm{Cov}(X,X&#94;{\\prime}) = E\\left[(X-E[X])(X&#94;{\\prime}-E[X&#94;{\\prime}])\\right]$$ $\\mathrm{Cov}(X,X&#94;{\\prime})>0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 同傾向 $\\mathrm{Cov}(X,X&#94;{\\prime})<0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 逆傾向 $\\mathrm{Cov}(X,X&#94;{\\prime})=0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 無関係 共分散は、以下の形でも表されるので、A社の株価を $X$、B社の株価を $X&#94;{\\prime}$ とすると、以下の解釈も可能 $$V(X+X&#94;{\\prime}) = V(X) + V(X&#94;{\\prime}) + 2\\mathrm{Cov}(X,X&#94;{\\prime})$$ $\\mathrm{Cov}(X,X&#94;{\\prime})>0\\Longleftrightarrow V(X+X&#94;{\\prime})>V(X)+V(X&#94;{\\prime})$ なので、A,B両者の株を買うと分散が 拡大 する → 変動リスクが増大し、資産価値は不安定 $0>\\mathrm{Cov}(X,X&#94;{\\prime})\\Longleftrightarrow V(X)+V(X&#94;{\\prime})>V(X+X&#94;{\\prime})$ なので、A,B両者の株を買うと分散が 縮小 する → 変動リスクが抑制され、資産価値は安定 独立性 全ての $(x,y)$ で $p_{X,Y}(x,y) = p_X(x)p_Y(y)$ の時、$X$ と $Y$ は互いに 独立(independent) 2つの確率変数が独立の時、 積の期待値は各々の期待値の積と一致 $$E[XY] = E[X]E[Y]$$ 和の積率母関数は各々の積率母関数の積と一致 $$M_{X+Y}(t) = M_X(t)M_Y(t)$$ ２つの確率変数は無相関 $$\\mathrm{Cov}(X,Y) = 0$$ 2つの確率変数が独立ならば無相関であるが、逆は一般には正しくない。 条件付き確率 ベイズの定理(Bayes' theorem) $$P(X|Y) = \\frac{P(Y|X)P(X)}{P(Y)}$$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-5.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-5.html"},{"title":"生物物理学 第6回","text":"講師： 樋口秀男 エネルギー生産系の仕組み（細胞内小器官） 光関連の現象 細胞・器官 たんぱく質等 眼で見る 視細胞（桿体、錐体細胞） ロドプシン等 光合成 葉緑体 光システム（タンパク質複合体） 蛍の光 発色細胞 ルシフェリン+ルシフェラーゼ クラゲの光 発色細胞 エコーリン、GFP(green fluorescence protein) 日焼け 色素形成細胞（メラノサイト） メラニン（チロシンの重合体） 体内時計 目のメラノプシン発現網膜神経細胞 メラノプシン ATPを作るプロセス 光合成(photosynthesis) は、高等植物や緑藻（青色細菌）が 葉緑体（クロロプラスト） 内で行う、二酸化炭素の固定反応である。 この過程で水が酸素に酸化され、二酸化炭素は還元されて糖になる。 光合成は大きく2つの段階に区別される。 1つは 明反応 と呼ばれ、光のエネルギーを利用して水が酸素に酸化されるとともに、二酸化炭素の還元に必要な \\(\\mathrm{NADPH}_2&#94;+\\) と \\(\\mathrm{ATP}\\) をつくりだす。 もう1つの段階は 暗反応 と呼ばれ、 \\(\\mathrm{NADPH}_2&#94;+\\) と \\(\\mathrm{ATP}\\) を利用して二酸化炭素から種々の糖がつくられる。 クロロプラスト中の大部分のクロロフィルは 光を集めるアンテナ の役割を果たす。吸収された光子のエネルギーはアンテナクロロフィル間を励起エネルギーとして移動し、 アンテナクロロフィル よりも励起エネルギーの 低い 反応中心クロロフィル に集められる。 FRET(Fluorescence resonance energy transfer) $$\\text{Transfer Efficiency at two rates: } E= \\frac{k_T}{k_T+k_F} = \\frac{1}{1 + \\frac{k_F}{k_T}}$$ \\(k_T\\) ：Donor から Acceptor に移動する速度 \\(k_F\\) ：Donor が吸収する速度 Chl(from) Chl(to) 移動効率（移動距離） b(F) a(A) 高 b(F) b(A) 中 a(F) a(A) 中 a(F) b(A) 低 幅 \\(L\\) の中の電子のエネルギー準位： \\(E_n = \\frac{1}{8m}\\left(\\frac{nh}{L&#94;{\\prime}}\\right)&#94;2\\) フェミルの黄金律 時間的に変化しない弱い相互作用（摂動）のある電子系が、あるエネルギー固有状態から別のエネルギー固有状態へ移る際の単位時間あたりの遷移確率は、摂動法（時間で展開）の最低次数として近似計算できる。 遷移速度 \\(k_T\\) は、エネルギー固有状態の単位時間あたりの遷移確率である。 $$\\Psi_{\\mathrm{Da}}\\Psi_{\\mathrm{Ab}}\\underset{k_T}{\\longrightarrow}\\Psi_{\\mathrm{Db}}\\Psi_{\\mathrm{Aa}}$$ Da: Active state of Donor Ab: Ground state of Acceptor 光合成の概要 水を分解して、電子を膜間に入れる。 光を用いて電子の酸化還元電位を上げる。 酸化還元電位を利用してチラコイド外のプロトンを内側に輸送する。 内側のプロトンのケミカルポテンシャルを利用してATPを合成する。 まとめ 共役長が長くなる と吸収波長は長くなり、可視光の利用が可能となる。 分子間距離が近いと エネルギー移動や電子移動 が起こる。電子移動の方向は、酸化還元電位に依存する。 エネルギーを 酸化還元電位 に交換する（逆も） 生物は、 多数のタンパク質が 上記1-3の原理を巧みに利用して、光化学反応（葉緑体内の光合成）や電子伝達（ミトコンドリア内）の機能を行う。 ATP を合成するF1,F0は高効率でATPを合成する。特に、F1は仕事効率が約100%である。 .prompt { /* This is for jupyter blog.*/ min-width: 0; /* This padding is tuned to match the padding on the CodeMirror editor. */ padding: 0em 0.4em 0em 0em; margin: 0px; font-family: monaco; } /*蛍光ペン(pink)*/ .marker-pink { color: #c45a5a; background: linear-gradient(transparent 70%, #ff66ff 60%); font-weight: bold; } /*蛍光ペン(blue) & hover info*/ .marker-info { color: #5C7DC4; background: linear-gradient(transparent 70%, #66FFCC 60%); font-weight: bold; position: relative; cursor: pointer; } .marker-info:hover:before { opacity: 1; z-index: 2; } .marker-info:before { content: attr(aria-label); opacity: 0; position: absolute; top: 30px; right: -90px; font-size: 14px; width: 300px; padding: 10px; color: #fff; background-color: #555; border-radius: 3px; pointer-events: none; } /* 枠囲み */ .frame { border: solid 1.0px #000000; padding: 0.5em 1em; margin: 2em 0; } /* 暗記用 question box */ span .qbox{ display: none; } span.qbox-wrapper:hover .qbox-default{ display: none; } span.qbox-wrapper:hover .qbox{ display: inline; } .qbox-wrapper{ font-weight: bold; padding: 5px 10px; border-radius: 5px; border: solid 2px #000000; margin: 5px } .qbox-wrapper:hover{ text-shadow: 0px 0px 6px rgba(255, 255, 255, 1); -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); transition: all 0.4s ease 0s; } /* 画像吹き出し */ .balloon { display: table; width: 100%; } .balloon_img { display: table-cell; vertical-align: middle; width: 50%; padding-right: 10px; } .balloon_comment { border: #83274e solid 4px; position: relative; background: #fff; padding: 12px; border-radius: 13px; display: block } .balloon_comment::before { content: \"\"; position: absolute; border-right: 23px solid #83274e; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -23px; } .balloon_comment::after { content: \"\"; position: absolute; border-right: 24px solid #fff; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -17px; } if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-6.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-6.html"},{"title":"Introduction","text":"講師： 木立 尚孝 （ 生物データマイニング論 も担当されている方） 計算演習 # リンク 問題 1 Covariance 2 Characteristic function 3 Law of Large Numbers 4 Exponential Distribution 5 Categorical Distribution 6 Multinomial Distribution 7 Positive Definite Symmetric Matrix 8 Multivariate Normal Distribution 9 Kullback-Leibler Divergence 10 Expectation Maximization Algorithm 11 Data Assimilation 12 Order Statistics 13 Sparse Modeling 14 Brownian motion 15 Neural Network プログラミング演習 配列モチーフ探索 最適行動列アルゴリズム Gene Network Inference Itemset mining algorithm","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-0.html"},{"title":"頻度パターンマイニング","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 参考資料： 頻出パターン発見アルゴリズム入門 -アイテム集合からグラフまで- Data Mining A formal study of efficient methods for extracting interesting rules and patterns from massive data. Frequent itemset mining. Closed pattern mining. Structured data mining. Itemset Mining Frequent Itemset Mining Closed Itemset Mining Closure Extension LCM Itemset Mining Frequent Itemset Mining Finding all \"frequent\" sets of elements(items) appearing $\\sigma$ times or more in a database. Definitions Database A set $\\Sigma = \\{1,\\ldots,n\\}$ of items(elements). Tramsaction database A set $T=\\{t_1,\\ldots,t_m\\}$ of subsets of $\\Sigma$ Each subset $t\\subseteq\\Sigma$ is called a transaction Frequent sets Itemset $X$ appears in transaction t: $X\\subseteq t$ Occurrence of $X$ in database $T$: $$\\mathrm{Occ}(X,T) = \\left\\{t\\in T: X\\subseteq t\\right\\}$$ Frequency of $X$: $\\mathrm{Fr}(X,T) = |\\mathrm{Occ}(X,T)|$ Minimum support (minsup): $0\\leq\\sigma\\leq|T|$ $X$ is frequent in $T$ if $\\mathrm{Fr}(X,T)\\geq\\sigma$ Market Basket Data Popular application of itemset mining. Business and Market data analysis. ※ Visit \"The Instacart Online Grocery Shopping Dataset 2017\" and Download \"instacart_2017_05_01\" Folder. In [1]: ! tree instacart_2017_05_01 instacart_2017_05_01 ├── aisles.csv ├── departments.csv ├── order_products__prior.csv ├── order_products__train.csv ├── orders.csv └── products.csv 0 directories, 6 files In [2]: import numpy as np import pandas as pd products.csv In [3]: df_products = pd . read_csv ( \"./instacart_2017_05_01/products.csv\" ) df_products . head ( 3 ) Out[3]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } product_id product_name aisle_id department_id 0 1 Chocolate Sandwich Cookies 61 19 1 2 All-Seasons Salt 104 13 2 3 Robust Golden Unsweetened Oolong Tea 94 7 In [4]: print ( f \"`products.csv` data num: {len(df_products)}\" ) `products.csv` data num: 49688 In [5]: id2name = dict ( zip ( df_products . product_id , df_products . product_name )) order_products__train.csv In [6]: df_order_products = pd . read_csv ( \"./instacart_2017_05_01/order_products__train.csv\" ) df_order_products . head ( 3 ) Out[6]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } order_id product_id add_to_cart_order reordered 0 1 49302 1 1 1 1 11109 2 1 2 1 10246 3 0 In [7]: N_transactions_total = len ( df_order_products . groupby ( \"order_id\" )) print ( f \"Total number of transactions: {N_transactions_total} \" ) Total number of transactions: 131209 Extract Only N products In [8]: N = 10 In [9]: extracted_ids = df_order_products . groupby ( \"product_id\" ) . size () . reset_index () . sort_values ( by = 0 , ascending = False ) . product_id [: N ] . values In [10]: # Only focus on N products. df_order_products_extracted = df_order_products [ df_order_products . product_id . apply ( lambda x : x in extracted_ids )] In [11]: N_transactions_extracted = len ( df_order_products_extracted . groupby ( \"order_id\" )) print ( f \"Transactions: {N_transactions_extracted} / {N_transactions_total} \" ) Transactions: 59887/131209 In [12]: for i , extracted_id in enumerate ( extracted_ids ): print ( f \"No.{i+1:>0{len(str(N))}}: {id2name[extracted_id]} \" ) No.01: Banana No.02: Bag of Organic Bananas No.03: Organic Strawberries No.04: Organic Baby Spinach No.05: Large Lemon No.06: Organic Avocado No.07: Organic Hass Avocado No.08: Strawberries No.09: Limes No.10: Organic Raspberries In [13]: df_product_id_OneHot = pd . get_dummies ( df_order_products_extracted . product_id ) In [14]: df_order_OneHot = pd . concat ([ df_order_products_extracted . order_id , df_product_id_OneHot ], axis = 1 ) In [15]: df = df_order_OneHot . groupby ( \"order_id\" ) . sum () . reset_index () In [16]: df . head ( 3 ) Out[16]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } order_id 13176 16797 21137 21903 24852 26209 27966 47209 47626 47766 0 1 1 0 0 0 0 0 0 1 0 0 1 96 0 0 0 0 0 0 1 0 0 0 2 98 1 0 0 0 0 0 1 0 0 0 In [17]: database = np . array ( df [ df . columns [ 1 :]]) In [18]: database Out[18]: array([[1, 0, 0, ..., 1, 0, 0], [0, 0, 0, ..., 0, 0, 0], [1, 0, 0, ..., 0, 0, 0], ..., [0, 0, 1, ..., 0, 0, 0], [0, 0, 0, ..., 0, 0, 0], [0, 0, 1, ..., 0, 0, 0]], dtype=uint8) In [19]: N , M = database . shape In [20]: print ( f \"n_samples: {N} \" ) print ( f \"n_features: {M} \" ) n_samples: 59887 n_features: 10 In [21]: from kerasy.search.itemset import FrequentSet In [22]: model = FrequentSet ( threshold = 100 ) In [23]: model . fit ( database ) In [24]: # Frequent Itemset. (frq >= threshold) model . all Out[24]: [None, array([0]), array([0, 1]), array([0, 1, 3]), array([0, 2]), array([0, 2, 3]), array([0, 2, 3, 6]), array([0, 2, 3, 7]), array([0, 2, 5]), array([0, 2, 6]), array([0, 2, 6, 7]), array([0, 2, 7]), array([0, 2, 8]), array([0, 2, 9]), array([0, 3]), array([0, 3, 5]), array([0, 3, 6]), array([0, 3, 6, 7]), array([0, 3, 7]), array([0, 3, 8]), array([0, 3, 9]), array([0, 5]), array([0, 5, 6]), array([0, 5, 7]), array([0, 5, 8]), array([0, 5, 9]), array([0, 6]), array([0, 6, 7]), array([0, 6, 8]), array([0, 6, 9]), array([0, 7]), array([0, 7, 8]), array([0, 8]), array([0, 8, 9]), array([0, 9]), array([1]), array([1, 3]), array([1, 3, 4]), array([1, 3, 9]), array([1, 4]), array([1, 4, 5]), array([1, 4, 8]), array([1, 4, 9]), array([1, 5]), array([1, 5, 8]), array([1, 6]), array([1, 7]), array([1, 8]), array([1, 8, 9]), array([1, 9]), array([2]), array([2, 3]), array([2, 3, 4]), array([2, 3, 5]), array([2, 3, 6]), array([2, 3, 7]), array([2, 3, 8]), array([2, 3, 9]), array([2, 4]), array([2, 4, 5]), array([2, 4, 6]), array([2, 4, 7]), array([2, 4, 8]), array([2, 4, 9]), array([2, 5]), array([2, 5, 6]), array([2, 5, 7]), array([2, 5, 8]), array([2, 5, 9]), array([2, 6]), array([2, 6, 7]), array([2, 6, 8]), array([2, 6, 9]), array([2, 7]), array([2, 7, 8]), array([2, 8]), array([2, 8, 9]), array([2, 9]), array([3]), array([3, 4]), array([3, 4, 5]), array([3, 4, 5, 8]), array([3, 4, 6]), array([3, 4, 7]), array([3, 4, 8]), array([3, 4, 8, 9]), array([3, 4, 9]), array([3, 5]), array([3, 5, 7]), array([3, 5, 8]), array([3, 5, 8, 9]), array([3, 5, 9]), array([3, 6]), array([3, 6, 7]), array([3, 6, 8]), array([3, 6, 9]), array([3, 7]), array([3, 7, 8]), array([3, 8]), array([3, 8, 9]), array([3, 9]), array([4]), array([4, 5]), array([4, 5, 7]), array([4, 5, 8]), array([4, 5, 8, 9]), array([4, 5, 9]), array([4, 6]), array([4, 6, 8]), array([4, 6, 9]), array([4, 7]), array([4, 7, 8]), array([4, 8]), array([4, 8, 9]), array([4, 9]), array([5]), array([5, 6]), array([5, 6, 7]), array([5, 6, 8]), array([5, 7]), array([5, 7, 8]), array([5, 8]), array([5, 8, 9]), array([5, 9]), array([6]), array([6, 7]), array([6, 8]), array([6, 8, 9]), array([6, 9]), array([7]), array([7, 8]), array([8]), array([8, 9]), array([9])] Association Rule Mining Confidence : $\\mathrm{Supp}(A\\text{ and }B)/\\mathrm{Supp}(A)$ (Probability of $B$, Given $A$) What item is likely to be bought when $A$ is bought. Search: large support, confidence large Post-processing of itemset mining Summary Itemset mining is the simplest of all mining algorithms. Need to maintain occurrence of each pattern in database. Tree by lexicographical order is (implicitly) used. Closed Itemset Mining [Problem] in Frequent Pattern Mining Huge Number of frequent itemsets Hard to analyze Most of them are similar [Solution] Closed Pattern Mining Find only closed patterns Observation : Most frequent itemset $X$ can be extended without changing occurrence by adding new elements. definition : An itemset $X$ is a \"closed set\" if and only if there is no proper superset of $X$ with the same frequency (thus the same occurrence set). A closed itemset is the maximal set among all itemsets with the same occurrences. Equivalence class $[X] =\\left\\{Y | \\mathrm{Occ}(X)=\\mathrm{Occ}(Y)\\right\\}$ Implementation. Brute-force: Stupid Baseline ALGORITHM: Bruteforcel First, generate all frequent itemsets. Check them one by one via maximality test Finally, extract all closed sets Maximality test for each candidate frequent set $X$ Add some element $e$ in $\\Sigma$ to $X$ If $\\mathrm{Freq}(X U \\{e\\})$ is properly less than $\\mathrm{Freq}(X)$ then reject $X$. ※ Number of patterns usually exponential to input size, so Brute-force is exponential delay w.r.t. pattern size. Reverse Search A general mathematical framework to design enumeration algorithms. Can be used to prove the correctness of the algorithm. Popular in computational geometry. Data mining algorithms can be explained in remarkable simplicity. How to do reverse Search? Native Backtracking → Duplication Duplication chack by Marking → Exponential Memory. Reduction Map : Mapping from a children to the parent. LCM(Linear Time Closed Sets Miner) Key Algorithm: Prefix Preserving Closure Extension = Children generation from the reduction map. 飽和集合列挙アルゴリズムを用いた大規模データベースからのルール発見手法 Python Implementation: I'm doing now XD Summary Closure Extension: Jump from closed set to closed set. LCM: Linear Delay. Very fast in practice, too (Winner of FIMI'04(Frequent Itemset Mining Implementation Workshop)). Relation to clique enumeration. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-5.html"},{"title":"機械学習概論","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 教師付き学習(Supervised learning) 大量の教師データがあれば、DNNですごい性能を出せるので、今の研究の主流は以下。 transfer learning (転移学習) few-shot learning (一枚だけで汎化性能を得る。) zero-shot learning (文字の情報を用いて画像の識別を行う。) メタ学習 (どうやって学習すれば良いかを学ぶ。) Nearest Neighbor法 決定木(decision tree) Support Vector Machine(SVM) アンサンブル学習 Neural Network Nearest Neighbor法 In [2]: N = 150 ; K = 3 In [3]: data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 1 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [4]: cls = np . concatenate ([ np . full ( shape = int ( N / 3 ), fill_value = 0 ), np . full ( shape = int ( N / 3 ), fill_value = 1 ), np . full ( shape = int ( N / 3 ), fill_value = 2 ), ]) In [5]: xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [6]: # Nearest Neighbor Zs = np . asarray ([ cls [ np . argmin ( np . sum ( np . square ( xy - data ), axis = 1 ))] for xy in XYs ], dtype = int ) . reshape ( Xs . shape ) In [7]: plt . figure ( figsize = ( 8 , 6 )) plt . scatter ( x , y , c = cls , s = 50 ) plt . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) plt . title ( \"Nearest Neighbor\" ), plt . xlim ( xmin , xmax ), plt . ylim ( ymin , ymax ) plt . xticks ([]), plt . yticks ([]) plt . show () 決定木(decision tree) $M$ 個のクラスに分割したとして、 $$\\text{Information gain} = \\text{Entropy}(S) - \\left\\{\\text{Entropy}(S_1) + \\cdots + \\text{Entropy}(S_M)\\right\\}$$ が最大になるように条件を設定する。 In [8]: from kerasy.ML.tree import DecisionTreeClassifier In [9]: N = 150 ; K = 3 In [10]: data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 1 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [11]: cls = np . concatenate ([ np . full ( shape = int ( N / 3 ), fill_value = 0 ), np . full ( shape = int ( N / 3 ), fill_value = 1 ), np . full ( shape = int ( N / 3 ), fill_value = 2 ), ]) In [12]: xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [13]: model = DecisionTreeClassifier ( criterion = \"gini\" , max_depth = 3 , random_state = 0 ) model . fit ( data , cls ) predictions = model . predict ( data ) In [14]: # Decision Tree Zs = model . predict ( XYs ) . reshape ( Xs . shape ) In [15]: fig = plt . figure ( figsize = ( 18 , 4 )) for i , seed in enumerate ([ 0 , 1 , 5 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) model = DecisionTreeClassifier ( criterion = \"gini\" , max_depth = 3 , random_state = seed ) model . fit ( data , cls ) predictions = model . predict ( data ) Zs = model . predict ( XYs ) . reshape ( Xs . shape ) ax . scatter ( x , y , c = predictions , s = 50 ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_title ( f \"Decision Tree seed= {seed} \" ), ax . set_xlim ( xmin , xmax ), ax . set_ylim ( ymin , ymax ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () Support Vector Machine(SVM) $$f(\\mathbf{x}) = \\mathbf{w}\\cdot\\mathbf{x} + \\mathbf{b} = \\mathbf{0}$$ $\\|\\mathbf{w}\\|$ を決定するためには、黄色の線上にある点(support vector)のみ寄与。SVMの重要なところは、通常 $$\\mathrm{Error}_{\\text{世の中全体}}>\\mathrm{Error}_{\\text{見たことのある世界}}$$ であるが、発明者 Vapnic が $$\\mathrm{Error}_{\\text{世の中全体}}\\leq\\mathrm{Error}_{\\text{見たことのある世界}} + \\alpha$$ を証明してしまった。なお、$\\alpha$ も $\\|\\mathbf{w}\\|$ の最小化で最小化できるため、$\\|\\mathbf{w}\\|$ の最小化をひたすら頑張るだけで良い。 ※ 実装は ここ アンサンブル学習 名前 説明 強学習器 bagging トレーニングデータをランダムにサンプリングして学習器 $f&#94;b(\\mathbf{x}),(b=1,2,\\ldots,B)$ を作る。 $$f(\\mathbf{x}) = \\frac{1}{B}\\sum_b&#94;Bf&#94;b(\\mathbf{x})$$ Random Forest (RF) 決定木 $f&#94;r(\\mathbf{x}),(r=1,2,\\ldots,R)$ をランダムに作る。木がたくさんあるので森(forest)になる。 $$f(\\mathbf{x}) = \\frac{1}{R}\\sum_r&#94;Rf&#94;r(\\mathbf{x})$$ boosting 弱学習器 $f&#94;t(\\mathbf{x})$ の精度に応じた重み付き多数決を行う。なお、$\\alpha$ の決め方はadaboostやXGboostなど様々ある。 $$f(\\mathbf{x}) = \\frac{1}{T}\\sum_t&#94;T\\alpha&#94;tf&#94;t(\\mathbf{x})$$ Neural Network パーセプトロン $\\mathbf{w}$ を法線と考えると、超平面のあっちとこっちを判定しているだけ＝SVMと同じ。 perceptronの学習アルゴリズムは、下記の流れで収束することが知られている。 重み（法線）ベクトルをランダムに設定 2クラス $0,1$ があったとして、training dataから順に取り出して、$y$ を出力してみる（平面のどちら側か） 合っていたら何もしない。間違っていたら $$ \\begin{cases} \\mathbf{w}\\longleftarrow\\mathbf{w} +\\rho \\mathbf{x} & (\\text{クラス1を0と誤判定した時})\\\\ \\mathbf{w}\\longleftarrow\\mathbf{w} -\\rho \\mathbf{x} & (\\text{クラス0を1と誤判定した時}) \\end{cases}$$ 2,3を全てのtraining dataに対して行う。 全てのtraining dataに対して正解が規定回数に達したら終了。それ以外の場合、2に戻る。 # Pythonでプログラム化すると以下。 while True : n_true = 0 for x , c in zip ( data , cls ): if c == 1 and sum ( w * x ) < 0 : w += rho * x elif c == 0 and sum ( w * x ) >= 0 : w -= rho * x else : n_true += 1 if n_true > N * true_rate : break In [16]: n_cls0 = 30 ; n_cls1 = 40 N = n_cls0 + n_cls1 In [17]: w = np . random . RandomState ( 0 ) . uniform ( size = 2 ) # Initialization. rho = 1e-3 # step size. true_rate = 0.9 In [18]: # train_x data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 2 , 4 ], cov = np . eye ( 2 ), size = n_cls0 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 1 ], cov = np . eye ( 2 ), size = n_cls1 ), ]) X1 , X2 = data . T # train_t cls = np . concatenate ([ np . zeros ( shape = ( n_cls0 ), dtype = int ), np . ones ( shape = ( n_cls1 ), dtype = int ) ]) In [19]: while True : n_true = 0 for x , c in zip ( data , cls ): if c == 1 and sum ( w * x ) < 0 : w += rho * x elif c == 0 and sum ( w * x ) >= 0 : w -= rho * x else : n_true += 1 if n_true > N * true_rate : break In [20]: X = np . linspace ( min ( X1 ), max ( X2 ), 1000 ) Y = ( - w [ 0 ] / w [ 1 ]) * X In [21]: plt . scatter ( X1 , X2 , c = cls ) plt . plot ( X , Y , color = \"red\" ) plt . xlabel ( \"$x_1$\" , fontsize = 18 ), plt . ylabel ( \"$x_2$\" , fontsize = 18 ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-4.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-4.html"},{"title":"生物統計論 第5回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section5.1 Bayesian Model Comparison Overfitting In [2]: N = 15 Ms = [ 2 , 4 , 8 , 16 ] seed = 0 In [3]: # Training data. x = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = N ) Noise = np . random . RandomState ( seed ) . normal ( loc = 0 , scale = 0.1 , size = N ) t = np . sin ( 2 * np . pi * x ) + Noise In [4]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Varying Component Number In [5]: from kerasy.ML.MixedDistribution import MixedGaussian from kerasy.utils.data_generator import generateMultivariateNormal In [6]: N = 200 cls = 6 seed = 123 In [7]: data , means = generateMultivariateNormal ( cls = cls , N = N , scale = 8e-3 , same = False , seed = seed ) x , y = data . T mux , muy = means . T In [8]: # Background Color xmin , ymin = np . min ( data , axis = 0 ); xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [9]: Nfig = cls col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col fig = plt . figure ( figsize = ( 6 * col , 4 * row )) Likelihoods = [] for i , K in enumerate ( range ( 1 , cls + 1 )): ax = fig . add_subplot ( row , col , i + 1 ) model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data , span = 20 ) Z = model . predict ( XYs ) idx = np . argmax ( model . predict ( data ), axis = 1 ) Zs = np . sum ( Z , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. likelihood = np . sum ( Z ) ax . scatter ( x , y , c = idx ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( xmin , xmax ) ax . set_ylim ( ymin , ymax ) ax . set_title ( f \"K= {K} , {np.sum(Z):.1f}\" ) Likelihoods . append ( likelihood ) plt . tight_layout () plt . show () In [10]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . scatter ( x , y , label = \"data\" ) axL . scatter ( mux , muy , label = \"mean\" , marker = \"*\" , color = \"red\" , s = 150 ) axL . set_title ( \"Training Data.\" ) axL . legend () axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( np . arange ( cls ) + 1 , Likelihoods ) axR . scatter ( np . arange ( cls ) + 1 , Likelihoods ) axR . set_xlabel ( \"num comp\" ) axR . set_ylabel ( \"likelihoods\" ) axR . set_title ( \"Log likelihood vs num comp\" , fontsize = 18 ) plt . tight_layout () plt . show () Cross Validation ※ Not Bayesian estimate the skill of a machine learning model on unseen data. use a limited sample in order to estimate how the model is expected to perform in general when used to make predictions on data not used during the training of the model. In [11]: n_fold = 5 size = N // n_fold Kmax = 30 In [12]: Likelihoods = [] CrossValidationLikelihoods = [] for i , K in enumerate ( range ( 1 , Kmax + 1 )): H = 0 for h in range ( n_fold ): mask = np . ones ( shape = N , dtype = bool ) mask [ h * size :( h + 1 ) * size ] = False model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data [ mask ], span = 20 ) Z = model . predict ( data [ np . logical_not ( mask )]) H += np . sum ( Z ) model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data , span = 20 ) Z = model . predict ( data ) Likelihoods . append ( np . sum ( Z )) CrossValidationLikelihoods . append ( H ) In [13]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . plot ( np . arange ( Kmax ) + 1 , CrossValidationLikelihoods ) axL . scatter ( np . arange ( Kmax ) + 1 , CrossValidationLikelihoods ) axL . set_xlabel ( \"num comp\" ), axL . set_ylabel ( \"Cross Validation likelihoods\" ), axL . set_title ( \"Cross Validation Log likelihood vs num comp\" , fontsize = 18 ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( np . arange ( Kmax ) + 1 , Likelihoods ) axR . scatter ( np . arange ( Kmax ) + 1 , Likelihoods ) axR . set_xlabel ( \"num comp\" ), axR . set_ylabel ( \"likelihoods\" ), axR . set_title ( \"Log likelihood vs num comp\" , fontsize = 18 ) plt . tight_layout () plt . show () Cross Entropy of Prediction ※ Not Bayesian empirical distribution $D = \\left\\{\\mathbf{x}&#94;{(h)}|h=1,\\ldots,n\\right\\}$ $x\\sim\\mathrm{Emp}(D)$ $f_X(\\mathbf{X}) = \\frac{1}{n}\\sum_{h=1}&#94;n\\delta\\left(\\mathbf{x}-\\mathbf{x}&#94;{(h)}\\right)$ $\\mathbb{E}\\left(g(\\mathbf{x})\\right) = \\frac{1}{n}\\sum_{h=1}&#94;n\\int d\\mathbf{x}g(\\mathbf{x})\\delta\\left(\\mathbf{x}-\\mathbf{x}&#94;{(h)}\\right) = \\frac{1}{n}\\sum_{h=1}&#94;ng\\left(\\mathbf{x}&#94;{(h)}\\right)$ In [14]: seed = 0 N = 1000 In [15]: data = np . random . RandomState ( seed ) . normal ( size = N ) In [16]: Emp = dict ( zip ( data , np . zeros ( N ))) for x in data : Emp [ x ] += 1 / N In [17]: for X , Y in sorted ( Emp . items ()): plt . plot (( X , X ),( 0 , Y ), color = \"black\" , alpha = 0.1 ) plt . title ( \"Empirical distribution (Normal)\" ) plt . xlabel ( \"x\" ) plt . show () We can assume Empirical distribution as a true distribution . Cross Entropy $$ \\begin{aligned} H(D,\\boldsymbol{\\theta}) &= \\text{Cross Entropy between }f_{\\text{Emp}(D)} \\text{ and }f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)\\\\ &= \\mathbb{E}_{\\text{Emp}(D)}\\left(-\\log f\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right)\\right)\\\\ &= -\\int f_{\\text{Emp}(D)}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &= -\\frac{1}{n}\\sum_{h=1}&#94;n\\log f\\left(\\mathbf{x}&#94;{(h)}|\\boldsymbol{\\theta}\\right)\\\\ &= -\\bar{l}&#94;{(n)}\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right) \\end{aligned} $$ We can also say that: $$ \\begin{aligned} H(D,\\boldsymbol{\\theta}) &= -\\int f_{\\text{Emp}}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &\\Rightarrow \\int f_{\\text{Emp}}(\\mathbf{x})\\log f_{\\text{Emp}}(\\mathbf{x})d\\mathbf{x} -\\int f_{\\text{Emp}}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &= -\\int f_{\\text{Emp}}(\\mathbf{x})\\log\\left\\{\\frac{f_{\\text{Emp}}(\\mathbf{x})}{f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)}\\right\\}d\\mathbf{x}\\\\ &= \\mathrm{KL}\\left(f_{\\text{Emp}}\\|f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)\\right)\\\\ &= \\text{Kullback-Leibler divergence between}f_{\\text{Emp}(D)} \\text{ and }f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right) \\end{aligned} $$ Evidence Approximation ※ Yes Bayesian In a fully Bayesian treatment of the linear basis function model, we would introduce prior distributions over the hyperparameters $\\alpha$, and $\\beta$. $$ \\begin{aligned} p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x},\\alpha,\\beta) &= \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)d\\mathbf{w}& (3.57)\\\\ &\\Rightarrow \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)p(\\alpha,\\beta|\\mathbf{t},\\mathbf{X})d\\mathbf{w}d\\alpha d\\beta& (3.74) \\end{aligned} $$ Marginalize with respect to these hyperparameters as well as with respect to the parameters $\\mathbf{w}$ to make predictions. Complete marginalization over all of these variables is analytically intractable. We will maximize $(3.74)$ in line with the framework of empirical Bayes (or type 2 maximum likelihood , generalized maximum likelihood , evidence approximation ) Obtain the marginal likelihoo function by first integrating over the parameters $\\mathbf{w}$ $$p(\\mathbf{t}|\\alpha,\\beta) = \\int p(\\mathbf{t}|\\mathbf{w},\\mathbf{X},\\beta)p(\\mathbf{w}|\\alpha)d\\mathbf{w}\\qquad (3.77)$$ Maximize $p(\\mathbf{t}|\\alpha,\\beta)$ with respect to $\\alpha$ and $\\beta$. In [18]: from kerasy.utils.preprocessing import PolynomialBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian from kerasy.ML.linear import EvidenceApproxBayesianRegression In [19]: N = 20 Ms = np . arange ( 10 ) xmin = 0 ; xmax = 1 seed = 0 In [20]: x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 0.15 , seed = seed ) y_train += 1 + y_noise In [21]: alpha = 100 beta = 100 In [22]: evidences = [] history = [] for M in Ms : phi = PolynomialBaseTransformer ( M = M ) x_train_features = phi . transform ( x_train ) model = EvidenceApproxBayesianRegression ( alpha = alpha , beta = beta , iter_max = 10000 ) model . fit ( x_train_features , y_train ) evidences . append ( model . evidence ( x_train_features , y_train )) history . append ( model ) best_M = np . argmax ( evidences [ 1 :]) + 1 best_model = history [ best_M ] In [23]: x_test = np . linspace ( xmin , xmax , 1000 ) phi = PolynomialBaseTransformer ( M = best_M ) x_test_features = phi . transform ( x_test ) y_test = 1 + np . sin ( 2 * np . pi * x_test ) y_pred , y_std = best_model . predict ( x_test_features ) In [24]: fig = plt . figure ( figsize = ( 12 , 4 )) axEVI = fig . add_subplot ( 1 , 2 , 1 ) axEVI . plot ( Ms , evidences ) axEVI . scatter ( Ms , evidences ) axEVI . set_title ( \"The relationship between 'model evidence' and $M$\" ), axEVI . set_xlabel ( \"$M$\" ), axEVI . set_ylabel ( \"$\\log({model\\ evidence})$\" , fontsize = 16 ) axBest = fig . add_subplot ( 1 , 2 , 2 ) axBest . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) axBest . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) axBest . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) axBest . scatter ( x_train , y_train , s = 50 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) axBest . set_ylim ( - 0.5 , 2.5 ), axBest . legend (), axBest . set_title ( f \"Bayesian Linear Regression (M= {best_M} )\" ) plt . tight_layout () plt . show () In [25]: print ( \"[Best Parameter]\" ) print ( f \"M = {best_M} \" ) print ( f \"alpha = {best_model.alpha} \" ) print ( f \"beta = {best_model.beta} \" ) [Best Parameter] M = 3 alpha = 0.0025750535934692723 beta = 56.07833727501231 Section5.2 Markov Process Biological Diversity Single Origin of Life \"Nothing in Biology Makes Sense Except in the Light of Evolution\" C.T. Dobzhansky Stochastic Transcription (Stochasticity vs Regulation) Stochasticity in Development Stochastic Process Mathematical description of stochastic behaviors. data: $\\left\\{\\mathbf{X}_t|t=1,\\ldots,n\\right\\}$ Probability: $\\mathbb{P}\\left(\\mathbf{X}_{t_m} = \\mathbf{x}_{t_m},\\ldots,\\mathbf{X}_{t_2} = \\mathbf{x}_{t_2},\\mathbf{X}_{t_1} = \\mathbf{x}_{t_1}\\right)$ $\\omega$ is one of the random paths. $\\mathbf{X}_t$ is a map indicats which state random paths $\\omega$ is in at time $t$ Events $E$ is a constraint on the value of $\\mathbf{X}_t$ at some times. $P(E)$ is the probability if the random paths satisfy the constraint $E$. markov Process $$\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t|\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right) = \\mathbb{P}\\left(\\mathbf{X}_t=\\mathbf{x}_t|\\mathbf{X}_{t-1}=\\mathbf{x_{t-1}}\\right)$$ Decomposition of Joint Distribution $$ \\begin{aligned} &\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t,\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &=\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &=\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1} | \\mathbf{X}_{t-2} = \\mathbf{x}_{t-2},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_{t-2} = \\mathbf{x}_{t-2},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &= \\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\cdots \\times\\mathbb{P}\\left(\\mathbf{X}_2=\\mathbf{x}_2|\\mathbf{X}_1=\\mathbf{x}_1,\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_1=\\mathbf{x}_1|\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_0=\\mathbf{x}_0\\right)\\\\ &= \\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1}\\right) \\times \\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1} | \\mathbf{X}_{t-2} = \\mathbf{x}_{t-2}\\right)\\times \\cdots\\times\\mathbb{P}\\left(\\mathbf{X}_1=\\mathbf{x}_1|\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_0=\\mathbf{x}_0\\right)\\quad\\left(\\because \\text{Markov Process}\\right) \\end{aligned} $$ Transition Matrix (Assume Time Independence ): $$P = \\left\\{P_{ij}\\right\\} = \\left\\{\\mathbb{P}\\left(\\mathbf{X}_t=i|\\mathbf{X}_{t-1}=j\\right)\\right\\},\\quad P_{ij}\\geq0,\\sum_i P_{ij}=1$$ Computing transition probability Birth and Death process $$ P= \\left(\\begin{matrix}1-\\lambda_0&\\mu_1&0&0\\\\\\lambda_0&1-\\lambda_1-\\mu_1&\\mu_2&0\\\\0&\\lambda_1&1-\\lambda_2-\\mu_2&\\mu_3\\\\0&0&\\lambda_2&1-\\mu_3\\end{matrix}\\right) $$ $P = U\\Lambda U&#94;{-1}$: Eigen decomposition $P&#94;n = U\\Lambda&#94;n U&#94;{-1}$ In [26]: def makeRandomP ( N , seed = 123 ): lambdas = np . r_ [ np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 / N , size = N - 1 ), np . zeros ( shape = 1 )] mus = np . r_ [ np . zeros ( shape = 1 ), np . random . RandomState ( seed + 1 ) . uniform ( low = 0 , high = 1 / N , size = N - 1 )] P = np . zeros ( shape = ( N , N )) for i in range ( N ): P [ i , - 1 + i ] = mus [ i ]; P [ i , i ] = 1 - mus [ i ] - lambdas [ i ]; P [ i , 1 + i if 1 + i < N else 1 + i - N ] = lambdas [ i ] return P In [27]: def LongTimeBehaviors ( P , even = True ): inf = 50 if even else 51 eigenvals , eigenvecs = np . linalg . eig ( P ) Lambda = np . diag ( eigenvals ) eigenvecs_inv = np . linalg . inv ( eigenvecs ) Pn = np . dot ( eigenvecs , np . dot ( Lambda ** inf , eigenvecs_inv )) Pn = np . where ( Pn < 1e-5 , 0 , Pn ) return Pn example Periodic In [28]: P = np . array ([ [ 0 , 1 , 0 ], [ 1 / 2 , 0 , 1 / 2 ], [ 0 , 1 , 0 ] ]) In [29]: print ( f \"P&#94;2n: \\n {LongTimeBehaviors(P, even=True)} \\n \" ) print ( f \"P&#94;2n+1: \\n {LongTimeBehaviors(P, even=False)}\" ) P&#94;2n: [[0.5 0. 0.5] [0. 1. 0. ] [0.5 0. 0.5]] P&#94;2n+1: [[0. 1. 0. ] [0.5 0. 0.5] [0. 1. 0. ]] Reducible In [30]: P = np . array ([ [ 1 / 3 , 3 / 4 , 0 , 0 ], [ 2 / 3 , 1 / 4 , 0 , 0 ], [ 0 , 0 , 1 / 3 , 3 / 4 ], [ 0 , 0 , 2 / 3 , 1 / 4 ] ]) In [31]: LongTimeBehaviors ( P ) Out[31]: array([[0.52941176, 0.52941176, 0. , 0. ], [0.47058824, 0.47058824, 0. , 0. ], [0. , 0. , 0.52941176, 0.52941176], [0. , 0. , 0.47058824, 0.47058824]]) Absorbing In [32]: P = np . array ([ [ 1 , 1 / 2 , 0 , 0 ], [ 0 , 0 , 1 / 2 , 0 ], [ 0 , 1 / 2 , 0 , 0 ], [ 0 , 0 , 1 / 2 , 1 ] ]) In [33]: LongTimeBehaviors ( P ) Out[33]: array([[1. , 0.66666667, 0.33333333, 0. ], [0. , 0. , 0. , 0. ], [0. , 0. , 0. , 0. ], [0. , 0.33333333, 0.66666667, 1. ]]) Irreducible, Aperiodic In [34]: P = np . array ([ [ 2 / 3 , 1 / 12 , 0 ], [ 1 / 3 , 5 / 8 , 1 / 8 ], [ 0 , 7 / 24 , 7 / 8 ], ]) In [35]: LongTimeBehaviors ( P ) Out[35]: array([[0.06976762, 0.06976748, 0.06976741], [0.27906992, 0.2790698 , 0.27906974], [0.65116246, 0.65116272, 0.65116286]]) In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-5.html"},{"title":"レポート課題4(10/24出題)","text":"smcfFTGMjwv4cw2p/UPF4g==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report4.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report4.html"},{"title":"探索","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 講義概要 状態空間 15パズル 迷路 コスト無しグラフの探索 コスト付きグラフの探索 ゲーム木の探索 状態空間 ありうる局面の１つ１つを 状態 と言う。 状態全体からなる集合を 状態空間 と言う。 目的： 初期状態から出発して、許される 状態遷移 を繰り返し、最終状態へたどり着くこと。 これは、 グラフ(graph) の 探索(search) 問題と等価 （ノードが状態に、エッジが状態遷移にそれぞれ対応する。） 15パズル ルール： 一度に動かせるのは1パネルのみ。 飽きますに隣のパネルをずらす操作のみ可能 目標： 「できるだけ少ない手数で」 与えられた配置から元の配置に戻すこと。 元に戻すことが不可能な問題を識別する。 迷路 目的：スタートからゴールまで誘導する。 状態(state) $s$：移動できる場所 行動(action) $a$：進む方向 コスト無しグラフの探索 用語 意味 オープンリスト(open list) これから探索するノードの候補リスト クローズドリスト(closed list) 探索が終わったノードのリスト キュー(queue) 先入れ先出し スタック(stack) 後入れ先出し 探索の基本アルゴリズム open_list = [ initial_state ] # オープンリストは初期化状態のみ closed_list = [] # クローズドリストは空 while ( open_list ): # オープンリストが空になるまで以下を繰り返す。 state = getOptimalState ( open_list ) # オープンリストから（何らかの基準で）状態sを取り出す。 closed_list . append ( state ) # sをクローズドリストに追加する。 if state == last_state : break # sが最終状態ならば探索終了 open_list += [ s for s in state . transibles () if s not in closed_list ] # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストに追加する。 深さ優先探索 行き止まりに当たるまで進み、ゴールが見つからなかったら直近の分岐に戻って別の道を探す探索法。 メモリ使用量が少ない ゴールが近くにあっても、他の深い別れ道に迷い込むと時間がかかる ゴールが複数ある時、一番近くのものが見つかるとは限らない オープンリストは スタック （後入れ先出し） にする。 open_list = [ initial_state ] closed_list = [] while ( open_list ): state = open_list . pop ( 0 ) # オープンリストの先頭の状態sを取り出す。 closed_list . append ( state ) if state == last_state : break open_list . push ([ s for s in state . transibles () if s not in closed_list ]) # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストの\"先頭に\"追加する。 幅優先探索 分かれ道に来たらそれぞれの道を一歩ずつ進み，ゴールが見つからなかったらそれぞれの道をもう一歩ずつ進む探索法。 ゴールが近くにある時、早く見つかる。 ゴールが複数ある時、一番近くのものが見つかる。 分かれ道での分岐数が多いとメモリ使用量が多い。 オープンリストは キュー （先入れ後出し） にする。 open_list = [ initial_state ] closed_list = [] while ( open_list ): state = open_list . pop ( - 1 ) # オープンリストの\"末尾\"の状態sを取り出す。 closed_list . append ( state ) if state == last_state : break open_list . push ([ s for s in state . transibles () if s not in closed_list ]) # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストの\"先頭に\"追加する。 反復深化探索 深さに制限をつけて深さ優先探索を行い、徐々に深さを深くしていく探索法 ゴールが近くにある時、早く見つかる ゴールが複数ある時、一番近くのものが見つかる 同じノードを何度も訪れる（分岐が多いと影響小） まとめ 深さ優先探索・幅優先探索・反復深化探索は、グラフに関する特別な知識を使わずにオープンリストから状態を選択することから、 ブラインド探索(blined search) と呼ばれる。 # 探さ優先探索 幅優先探索 反復深化探索 完全性（必ず解が見つかるか） (completeness) $m$ が有限なら Yes Yes Yes 時間計算量 (time complexity) $\\mathrm{O}(b&#94;m)$ $\\mathrm{O}(b&#94;d)$ $\\mathrm{O}(b&#94;d)$ 空間計算量(space complexity) $\\mathrm{O}(bm)$ $\\mathrm{O}(b&#94;d)$ $\\mathrm{O}(bd)$ 最適性（一番近くの解が見つかるか） (optimality) Yes Yes Yes $b$：最大分岐数 $d$：一番浅い解の深さ $m$：最大の深さ コスト付きグラフの探索 各エッジに 遷移コスト が割り当てられている場合の最適遷移パス探索問題。 ブラインド探索 ：グラフに関する特別な知識を使わずにオープンリストから状態を選択。 貪欲探索(greedy search)：現在の状態からの遷移コストが最小の状態を選ぶ。 （深さ優先探索に対応） 最適探索(optimal search)：初期状態からの遷移コスト和が最小の状態を選ぶ。 （各コストが1だと幅優先探索になる。ダイクストラ法とも。） ヒューリスティック探索（最良優先探索, best-first search） ：グラフに関する何らかの知識を使ってオープンリストから適切と思われる状態を選択。 貪欲最良優先探索 $A&#94;{\\ast}$ 探索 貪欲最良優先探索 $\\hat{h}(s)$ を最小にする状態を選ぶ $h(s)$：$s$ から最終状態までの遷移コスト和の最小値 $\\hat{h}(s)$：$h(s)$ の推定（ヒューリスティック関数） 一度オープンリストに入ったの評価値更新は不要 ヒューリスティック関数の選び方： ユーザが 事前知識 により構築（例：直線距離） データから 機械学習 により自動構築 一般には完全性も最適性もないが、実用上は（そこそこ）うまくいくことが（それなりに）多い。 $A&#94;{\\ast}$ 探索(A-start search) $s$ を経由する場合の遷移コスト和の推定値 $\\left(\\hat{g}(s)+\\hat{h}(s)\\right)$ を最小にする状態を選ぶ。 $g(s)$：初期状態から $s$ までの遷移コスト和の最小値 $\\hat{g}(s)$：探索済みノードから $s$ に遷移する場合の最小値（ダイクストラ法と同じ） ノード $s$ を訪れると隣接ノードの $\\hat{g}(s&#94;{\\prime})$ が更新される。 $h(s)$：$s$ から最終状態までの遷移コスト和の最小値 $\\hat{h}(s)$：$h(s)$ のヒューリスティック推定値 最適経路上の $s$ ではいずれも $g(s)+h(s)$ が最小、経路外の点ではそれより大きい値をとることを利用 $\\forall s, 0\\leq\\hat{h}(s)\\leq h(s)$ が成り立つ時、$\\hat{h}(s)$ は 許容的(admissible) であるといい、この場合には $A&#94;{\\ast}$ 探索は最適性を持つ。 ※ 実装等は、 レポート課題 に記載。 In [1]: from kerasy.search.Astar import OptimalTransit In [2]: n = 3 m = 3 initial_str = \"2,-1,6,1,3,4,7,5,8\" last_str = \"1,2,3,4,5,6,7,8,-1\" In [3]: OptimalTransit ( n , m , initial_str , last_str , heuristic_method = \"Manhattan_distance\" , n_row = 5 ) n_transition = 9 ゲーム木の探索 2人のプレイヤーが交互に遷移先を決めるゲーム（ex. 将棋・囲碁・リバーシ・◯×など）における最適遷移探索問題 ミニマックス探索 自分は一番良い（点数を最大化する）手を選ぶ 相手は一番悪い（点数を最小化する）手を選ぶ アルファ・ベータ探索 ミニ・マックス探索では、全ての局面に対する点数を求める必要があり、時間がかかる。 不要な点数計算を省略することで効率化 $\\alpha$：max計算の際の下界値 $\\beta$：min計算の際の上界値 モンテカルロ木探索 アルファ・ベータ法を用いても、ゲーム木を深く探索するのは困難（$b&#94;d$ が $b&#94;{d/2}$ になる程度。） そこで、 ランダムに 手を打つ。 囲碁やスケジューリングなどで活用されている。 まとめ 広大な状態空間を効率よく探索したい コスト無しグラフの探索 コスト付きグラフの探索 ゲーム木の探索 膨大な状態空間の探索には，近似的な手法が有用 事前知識や機械学習によるヒューリスティック関数の構築 モンテカル 木探索 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-4.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-4.html"},{"title":"ガウシアンプロセスとベイズ最適化","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt import seaborn as sns データ駆動科学とベイズ最適化 データ駆動科学では、データに基づいて、新たな知見・事柄を発見することが求められる 単に予測を行うだけでなく、それに基づいて「行動」を設計することが必要 これらは、「ベイズ最適化」の枠組みに乗ることが多い 概要 ベイズ線形回帰 ガウシアンプロセス ベイズ最適化 ベイズ線形回帰 線形回帰モデルのパラメータを 最尤推定 によって決める場合、 解こうとしている問題に合わせてモデルの複雑さを適切に決めることが必要 ↑は、単純に尤度を最大化するだけでは 過学習 を引き起こしてしまう。 データの一部を独立なテスト用データとして取っておく ことでモデルの汎化性能を評価できるが、この方法は 計算量が大きく 、 データの無駄遣い となり得る。 これらの問題に対処するため、線形回帰モデルをベイズ的に取り扱うことで最尤推定の過学習を回避するとともに 「訓練データだけからモデルの複雑さを自動的に決定する。」 概要 解こうとしている問題に沿った 尤度関数(likelihood function) （ $p(\\mathbf{t}|\\mathbf{X},\\mathbf{w})$ ） を定義する。 モデルパラメータの 事前分布(prior distribution) （ $p(\\mathbf{w})$ ） を、 尤度関数 の 共役事前分布(conjugate prior) の形で定義する。 ベイズの公式より、 事後分布(posterior distribution) は 事前分布 と 尤度関数 の積に比例する。 （ $p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})\\propto p(\\mathbf{t}|\\mathbf{X},\\mathbf{w})\\cdot p(\\mathbf{w})$ ） あるパラメータ （ $\\mathbf{w}$ ） 下で入力 $\\mathbf{x}$ が与えられた時の確率分布 （ $p(t|\\mathbf{w},\\mathbf{x})$ ） を、3で求めた 事後分布 （ $p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})$ ） で重み付けしながら 周辺化(marginalization) する （ $p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x}) = \\int p(t|\\mathbf{w},\\mathbf{x})p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})d\\mathbf{w}$ ） ことで、 予測分布(predivtive distribution) （ $p(t|\\mathbf{w},\\mathbf{x})$ ） を得る。 具体例 ※ $D$ 次元の説明変数 $\\mathbf{x}$ で一次元の目標変数 $t$ を線形回帰するモデルをベイズ的に取り扱う。 目標変数 $t$ が決定論的な関数 $y(\\mathbf{x},\\mathbf{w})$ と加法性のガウスノイズの和で与えられる場合を考える。 $$t = y(\\mathbf{x},\\mathbf{w}) + \\epsilon\\qquad (3.7)$$ ここで、$\\epsilon$ は期待値が $0$ で精度が $\\beta$ のガウス確率変数である。すなわち、以下で表すことができる。 $$p(t|\\mathbf{x},\\mathbf{w},\\beta) = \\mathcal{N}\\left(t|y(\\mathbf{x},\\mathbf{w}),\\beta&#94;{-1}\\right)\\qquad (3.8)$$ データ点が $(3.8)$ の分布から 独立に生成された と仮定すると、尤度関数を次のように表せる。 $$p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) = \\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)\\qquad (3.10)$$ モデルパラメータ $\\mathbf{w}$ の事前分布を導入する。 ここで、 $\\beta$ が既知 と仮定すると、上記の尤度関数の共役事前分布である、期待値 $\\mathbf{m}_0$ 共分散 $\\mathbf{S}_0$ を持つガウス分布で表すのが適当である。 $$p(\\mathbf{w}) = \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)\\qquad (3.48)$$ ※ なお、$\\mathbf{w},\\beta$ の両方が未知である場合、共役事前分布は ガウス-ガンマ分布 隣、予測分布は スチューデントのt分布 となる。 ベイズの公式より、 事後分布は事前分布と尤度関数の積に比例する ので、これを解くことで事後分布を次の形で書き出すことができる。 （導出） $$ p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) = \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N) \\qquad (3.49)\\\\ \\begin{cases} \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51) \\end{cases} $$ $\\mathbf{w}$ で周辺化することで、予測分布を求めるが、議論の簡単のために、 「モデルパラメータ $\\mathbf{w}$ の事前分布 $p(\\mathbf{w})$ が、単一の制度パラメータ $\\alpha$ で記述される期待値が $0$ の等方的ガウス分布である」 とする。 $$p(\\mathbf{w}|\\alpha) = \\mathcal{N}\\left(\\mathbf{w}|\\mathbf{0},\\alpha&#94;{-1}\\mathbf{I}\\right)\\qquad (3.52)$$ この時、上記の $\\mathbf{w}$ の事後分布 $(3.49)$ の形は変わらず、$\\mathbf{m}_N,\\mathbf{S}_N$ の値が $$ \\begin{cases} \\mathbf{m}_N &= \\beta\\mathbf{S}_N\\boldsymbol{\\Phi}&#94;T\\mathbf{t} & (3.53)\\\\ \\mathbf{S}_N&#94;{-1} &= \\alpha\\mathbf{I} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.54) \\end{cases} $$ となる。この条件下で周辺化すると、以下の結果を得る。 （導出） $$ \\begin{aligned} p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x},\\alpha,\\beta) &= \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)d\\mathbf{w}& (3.57)\\\\ &= \\mathcal{N}\\left(t|\\mathbf{m}_N&#94;T\\phi(\\mathbf{x}),\\sigma_N&#94;2(\\mathbf{x})\\right) & (3.58)\\\\ \\sigma_N&#94;2(\\mathbf{x}) &= \\frac{1}{\\beta} + \\phi(\\mathbf{x})&#94;T\\mathbf{S}\\phi(\\mathbf{x}) & (3.59) \\end{aligned} $$ ※ ここで、$(3.59)$ の第1項はデータに含まれるノイズを、第2項は $\\mathbf{w}$ に関する不確かさを反映している。 事後分布の計算の導出過程 $$ \\begin{aligned} \\text{likelihood function : } p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) &= \\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)& (3.10)\\\\ \\text{prior distribution : } p(\\mathbf{w}) &= \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)& (3.48)\\\\ \\text{posterior distribution : } p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) &= \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N) & (3.49)\\\\ \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51)\\\\ \\mathcal{N}(x|\\mu,\\sigma&#94;2) &= \\frac{1}{\\left(2\\pi\\sigma&#94;2\\right)&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2\\sigma&#94;2}(x-\\mu)&#94;2\\right\\} & (2.42)\\\\ \\mathcal{N}(\\mathbf{x}|\\boldsymbol{\\mu},\\boldsymbol{\\Sigma}) &= \\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}|&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)\\right\\} & (2.43) \\end{aligned} $$ $$ \\begin{aligned} p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) &\\propto p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) p(\\mathbf{w}) \\\\ &=\\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)\\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)\\\\ &\\propto\\prod_{n=1}&#94;N\\exp\\left\\{-\\frac{\\beta}{2}\\left(t_n-\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\right)&#94;2\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &=\\exp\\left\\{-\\frac{\\beta}{2}\\sum_{n=1}&#94;N\\left(t_n-\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\right)&#94;2\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &= \\exp\\left\\{-\\frac{\\beta}{2}\\left( \\begin{array}{c}t_1 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_1)\\\\ t_2 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_2) \\\\ \\vdots \\\\ t_N - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_N) \\end{array} \\right)&#94;T\\left( \\begin{array}{c}t_1 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_1)\\\\ t_2 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_2) \\\\ \\vdots \\\\ t_N - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_N) \\end{array} \\right) \\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &= \\exp\\left\\{-\\frac{\\beta}{2}\\left(\\mathbf{t}-\\boldsymbol{\\Phi}\\mathbf{w}\\right)&#94;T\\left(\\mathbf{t}-\\boldsymbol{\\Phi}\\mathbf{w}\\right)\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\}\\\\ &= \\exp\\left\\{ -\\frac{1}{2} \\left(\\beta\\mathbf{t}&#94;T\\mathbf{t} - \\beta\\mathbf{t}&#94;T\\boldsymbol{\\Phi}\\mathbf{w} - \\beta\\mathbf{w}&#94;T\\boldsymbol{\\Phi}&#94;T\\mathbf{t} + \\beta\\mathbf{w}&#94;T\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi}\\mathbf{w} + \\mathbf{w}&#94;T\\mathbf{S}_0&#94;{-1}\\mathbf{w} - \\mathbf{w}&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0 - \\mathbf{m}_0&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{w} + \\mathbf{m}_0&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right)\\right\\}\\\\ &= \\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}&#94;T\\left(\\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} + \\mathbf{S}&#94;{-1}_0\\right)\\mathbf{w} - \\mathbf{w}&#94;T\\left(\\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t} + \\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right) - \\left(\\beta\\mathbf{t}&#94;T\\boldsymbol{\\Phi} + \\mathbf{m}_0\\mathbf{S}&#94;{-1}_0\\right)\\mathbf{w} + \\left(\\beta\\mathbf{t}&#94;T\\mathbf{t} + \\mathbf{m_0}&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right)\\right)\\right\\} \\\\ &=\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w} - \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right)\\right)&#94;T\\mathbf{S}_N&#94;{-1}\\left(\\mathbf{w} - \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right)\\right) + \\mathrm{C} \\right\\}\\\\ &\\propto\\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N)\\\\ &\\begin{cases} \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51)\\\\\\end{cases} \\end{aligned}\\\\ $$ 周辺化計算の導出過程 以下の「ガウス分布の周辺分布と条件付き分布の関係」の $(2.115)$ の結果を用いる。 $\\mathbf{x}$ の周辺ガウス分布と、$\\mathbf{x}$ が与えられた時の $\\mathbf{y}$ の条件付きガウス分布が次式で与えられたとする。 $$ \\begin{aligned} p(\\mathbf{x}) &=\\mathcal{N}\\left(\\mathbf{x} | \\boldsymbol{\\mu}, \\mathbf{\\Lambda}&#94;{-1}\\right) & (2.113)\\\\ p(\\mathbf{y} | \\mathbf{x}) &=\\mathcal{N}\\left(\\mathbf{y} | \\mathbf{A} \\mathbf{x}+\\mathbf{b}, \\mathbf{L}&#94;{-1}\\right) & (2.114)\\end{aligned} $$ この時、$\\mathbf{y}$ の周辺分布と、$\\mathbf{y}$ が与えられた時の $\\mathbf{x}$ の条件付き分布は $$ \\begin{aligned} p(\\mathbf{y}) &=\\mathcal{N}\\left(\\mathbf{y} | \\mathbf{A} \\boldsymbol{\\mu}+\\mathbf{b}, \\mathbf{L}&#94;{-1}+\\mathbf{A} \\mathbf{\\Lambda}&#94;{-1} \\mathbf{A}&#94;{\\mathrm{T}}\\right) & (2.115)\\\\ p(\\mathbf{x} | \\mathbf{y}) &=\\mathcal{N}\\left(\\mathbf{x} | \\mathbf{\\Sigma}\\left\\{\\mathbf{A}&#94;{\\mathrm{T}} \\mathbf{L}(\\mathbf{y}-\\mathbf{b})+\\mathbf{\\Lambda} \\boldsymbol{\\mu}\\right\\}, \\mathbf{\\Sigma}\\right) & (2.116) \\end{aligned} $$ で与えられる。ただし、 $$\\mathbf{\\Sigma} = \\left(\\mathbf{\\Lambda} + \\mathbf{A}&#94;T\\mathbf{LA}\\right)&#94;{-1}\\qquad (2.117)$$ である。 実装 In [2]: from kerasy.ML.linear import BayesianLinearRegression from kerasy.utils.preprocessing import GaussianBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian In [3]: N = 25 ; D = 1 ; M = 25 xmin = 0 ; xmax = 1 seed = 10 In [4]: alpha = 1 beta = 25 In [5]: x_test = np . linspace ( xmin , xmax , 1000 ) y_test = np . sin ( 2 * np . pi * x_test ) x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 1 / beta , seed = seed ) y_train += y_noise In [6]: # transform mu = np . linspace ( xmin , xmax , M ); sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) x_train_features = phi . transform ( x_train ) x_test_features = phi . transform ( x_test ) In [7]: random_idx = np . random . RandomState ( seed ) . choice ( N , N ) In [8]: fig = plt . figure ( figsize = ( 16 , 8 )) for i , n in enumerate ([ 1 , 2 , 4 , 25 ]): ax = fig . add_subplot ( 2 , 2 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( x_train_features [ random_idx [: n ]], y_train [ random_idx [: n ]]) y_pred , y_std = model . predict ( x_test_features ) ax . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) ax . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( x_train [ random_idx [: n ]], y_train [ random_idx [: n ]], s = 150 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) ax . set_ylim ( - 1.5 , 1.5 ), ax . legend (), ax . set_title ( f \"Bayesian Linear Regression (N= {n} )\" ) plt . tight_layout () plt . show () ガウシアンプロセス 回帰分析のための カーネル法 テストサンプルに対して、 予測値だけでなく、予測分散も与えることができる。 線形回帰のモデルは、以下で表されていた。 $$y(\\mathbf{x},\\mathbf{w}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x})\\qquad (3.3)$$ この結果に、ベイズ線形回帰の結果 $(3.53)$ を代入すると、 $$ \\begin{aligned} y(\\mathbf{x},\\mathbf{m}_N) &= \\mathbf{m}_N\\phi(\\mathbf{x}) = \\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\boldsymbol{\\Phi}&#94;T\\mathbf{t} \\\\ &= \\sum_{n=1}&#94;N\\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}_n)t_n & (3.60)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51) \\end{aligned} $$ したがって、点 $\\mathbf{x}$ での予測分布の平均は訓練データの目標変数 $t_n$ の線型結合で与えられるので、 $$ \\begin{aligned} y(\\mathbf{x},\\mathbf{m}_N) &= \\sum_{n=1}&#94;Nk(\\mathbf{x}, \\mathbf{x}_n)t_n & (3.61)\\\\ k(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}) &= \\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}&#94;{\\prime}) & (3.62)\\\\ &= \\left(\\beta&#94;{1/2}\\mathbf{S}_N&#94;{1/2}\\phi(\\mathbf{x})\\right)&#94;T\\left(\\beta&#94;{1/2}\\mathbf{S}_N&#94;{1/2}\\phi(\\mathbf{x})\\right) & (3.65) \\end{aligned} $$ とかける。なお、$k(\\mathbf{x}, \\mathbf{x}&#94;{\\prime})$ を 平滑化行列(smoother matrix) 、または 等価カーネル(equivalent kernel) と呼ぶ。（$(3.65)$ から、等価カーネルが通常のカーネル関数が満たすべき性質を満たしていることがわかる。） また、訓練データの目標値の線型結合を取ることで予測を行う上記のような回帰関数を 線形平滑器(linear smoother) と呼ぶ。 In [9]: from kerasy.utils.preprocessing import GaussianBaseTransformer , SigmoidBaseTransformer , PolynomialBaseTransformer In [10]: X = np . linspace ( - 1 , 1 , 200 ) M = 15 mu = np . linspace ( - 0.9 , 0.9 , M ); sigma = 0.1 gausian_phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) In [11]: def mkSmootherMatrix ( X , phi , alpha = 1 , beta = 25 ): X_feature = phi . transform ( X ) N , M = X_feature . shape SN = np . linalg . inv ( alpha * np . eye ( M ) + beta * X_feature . T . dot ( X_feature )) K = beta * np . dot ( X_feature , np . dot ( SN , X_feature . T )) return K In [12]: K = mkSmootherMatrix ( X , gausian_phi ) In [13]: SP = [ 30 , 120 , 150 ] colors = [ \"red\" , \"salmon\" , \"pink\" ] In [14]: fig = plt . figure ( figsize = ( 12 , 6 )) axKernel = plt . subplot2grid (( 3 , 2 ), ( 0 , 1 ), rowspan = 3 ) axKernel = sns . heatmap ( K , vmin = np . min ( K ), vmax = np . max ( K ), cmap = \"jet\" , cbar = False , square = True , ax = axKernel ) axKernel . set_xticks ([]), axKernel . set_yticks ([]) axKernel . set_xlabel ( \"$x$\" , fontsize = 18 ), axKernel . set_ylabel ( \"$x&#94;{\\prime}$\" , fontsize = 18 ) for i in range ( 3 ): axL = plt . subplot2grid (( 3 , 2 ), ( i , 0 )) axL . set_facecolor ( 'lightcyan' ) axL . plot ( K [ SP [ i ]], color = colors [ i ], linewidth = 4 ) axL . set_xticks ([]), axL . set_yticks ([]) axKernel . axhline ( SP [ i ], color = colors [ i ], linewidth = 10 , alpha = 0.7 ) plt . tight_layout () plt . show () In [15]: Transformers = [ ( GaussianBaseTransformer , mu ), ( SigmoidBaseTransformer , mu ), ( PolynomialBaseTransformer , 10 ), ] In [16]: fig = plt . figure ( figsize = ( 12 , 4 )) for i ,( phi_func , param ) in enumerate ( Transformers ): ax = fig . add_subplot ( 1 , 3 , i + 1 ) phi = phi_func ( param ) K = mkSmootherMatrix ( X , phi ) ax . plot ( K [ 100 ], color = \"blue\" ) ax . scatter ( 100 , 0 , color = \"red\" , marker = \"x\" , s = 150 , label = \"$x&#94;{\\prime}$\" ) ax . set_xticks ([]), ax . set_yticks ([]), ax . set_title ( f \"$k(x,x')$: {phi.__name__} \" , fontsize = 16 ) ax . set_xlabel ( \"$x$\" , fontsize = 18 ), ax . legend () plt . tight_layout () plt . show () カーネル関数の例 を見ればわかるよう、 対応する基底関数が局所的でないにも関わらず、等価カーネルは $x&#94;{\\prime}$ に関して局所的な関数となっていることがわかる！！ また、$y(\\mathbf{x})$ と $y(\\mathbf{x}&#94;{\\prime})$ の共分散を考えると、 $$ \\begin{aligned} \\mathrm{cov}\\left[y(\\mathbf{x}),y(\\mathbf{x}&#94;{\\prime})\\right] &= \\mathrm{cov}\\left[\\phi(\\mathbf{x})&#94;T\\mathbf{w}, \\mathbf{w}&#94;T\\phi(\\mathbf{x})\\right]\\\\ &= \\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}&#94;{\\prime}) = \\beta&#94;{-1}k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})\\quad(3.63) \\end{aligned} $$ となる。ここで、上述の等価カーネルの形状を考えると、 近接での予測平均は互いに強い相関を持っている一方で、より離れた点の組では相関は小さくなることがわかる。 ベイズ線形回帰 のように基底関数の集合を明示的に定義するのではなく、局所的なカーネルを直接定義し、観測された訓練集合が与えられた時、この局所的なカーネルを用いて新たな入力ベクトル $\\mathbf{x}$ に対する予測値を求めることができる。 この定式化から、回帰（と分類）に対する実用的な枠組みである ガウス過程(Gaussian process) が得られる。 ベイズ最適化 $M$ 個の候補点があり、この中から最大の観測値を持つものを探したい。 できるだけ実験数を少なくしたい。 $N$ 個の候補点に対する実験が終わった。$M-N$ 個の候補点が残っている。 次の $N+1$ 個目の候補点を最適に選びたい。 $N$ 個の化合物から予測モデルを学習し、それを用いて、残りの候補点を スコアリング し決定。 Maximum Probability of Improvement: Current Maxを超える確率。 Maximum Expected Improvement: (観測値-Current Max)の期待値。 Thompson Sampling: 残りのM-N個候補点に対して、条件つき結合確率からサンプリングを行い、そのサンプリング値をスコアとする。 In [17]: xmin = 0 ; xmax = 1 N = 1000 ; M = 25 seed = 1 In [18]: alpha = 1 beta = 25 In [19]: X = np . linspace ( xmin , xmax , N ) Y = 5e1 * X * ( X - 0.2 ) * ( X - 0.3 ) * ( X - 0.7 ) * ( X - 1 ) _ , noise = generateGausian ( size = 1000 , x = X , loc = 0 , scale = 1 / beta , seed = seed ) Y_ob = Y + noise In [20]: mu = np . linspace ( xmin , xmax , M ) sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) In [21]: X_features = phi . transform ( X ) In [22]: fig = plt . figure ( figsize = ( 18 , 8 )) idx = np . random . RandomState ( seed ) . choice ( N , 2 ) # Initialization. next_idx = idx for i , _ in enumerate ( range ( 12 )): ax = fig . add_subplot ( 3 , 4 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( X_features [ idx ], Y_ob [ idx ]) y_pred , y_std = model . predict ( X_features ) current_max = np . max ( Y_ob [ idx ]) max_improve_id = np . argmax ( y_pred ) ax . plot ( X , Y , color = \"black\" , label = \"True distribution\" ) ax . plot ( X , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( X , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( X [ idx ], Y_ob [ idx ], s = 50 , edgecolors = 'black' , facecolor = \"white\" , label = \"Observation\" ) ax . scatter ( X [ next_idx ], Y_ob [ next_idx ], s = 150 , edgecolors = 'black' , facecolor = \"black\" , label = \"New Obsevation\" ) ax . set_xlabel ( \"Explanatory Variable\" ), ax . set_ylabel ( \"Measured Value\" ), ax . set_title ( f \"N={len(idx)}, Max= {current_max:.3f} \" ) ax . set_ylim ( - 0.5 , 0.3 ), ax . set_xticks ([]), ax . set_yticks ([]) ax . axhline ( current_max , color = \"green\" , label = \"Current Maximum\" ) ax . axvline ( np . max ( X [ max_improve_id ]), color = \"blue\" , label = \"Maximum Probability of Improvement\" ) next_idx = max_improve_id if np . random . uniform () > 0.5 else np . random . choice ( N , 1 ) idx = np . r_ [ idx , next_idx ] ax . legend () plt . tight_layout () plt . show () おわりに（データ駆動科学） データ駆動科学では、データに基づいて、新たな知見・事柄を発見することが求められる。 単に予測を行うだけでなく、それに基づいて次の「行動」を設計することが必要 これらは、ベイズ最適化の枠組みに乗ることが多い。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-4.html"},{"title":"特徴選択","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 主成分分析(PCA) In [2]: N = 20 seed = 0 In [3]: X = np . linspace ( 0 , 1 , N ) Y = X + np . random . RandomState ( N ) . normal ( loc = 0 , scale = 5e-2 , size = N ) data = np . vstack (( X , Y )) In [4]: def Rotate ( x , radian ): A = np . array ([ [ np . cos ( radian ), - np . sin ( radian )], [ np . sin ( radian ), np . cos ( radian )] ]) return np . dot ( A , data ) In [5]: fig = plt . figure ( figsize = ( 10 , 4 )) ax = fig . add_subplot ( 1 , 2 , 1 ) ax . scatter ( X , Y , color = \"black\" ), ax . set_title ( \"Original\" ) X_tra , Y_tra = Rotate ( data , radian =- 1 / 4 * np . pi ) ax = fig . add_subplot ( 1 , 2 , 2 ) ax . scatter ( X_tra , Y_tra , color = \"red\" ), ax . set_title ( \"Rotated\" ), ax . set_ylim ( - 1 / 2 * np . sqrt ( 2 ), 1 / 2 * np . sqrt ( 2 )) plt . tight_layout () plt . show () $2$ 次元空間で左上図のようなデータがあったとする。この時、このデータを表現するのに $(x,y)$ の二次元が必要だろうか？ データ全体を右に $1/4\\pi$ 回転させると、右上図のようなデータれるとなる。この場合、$y&#94;{\\prime}$ 軸方向はノイズとみなせ、$x&#94;{\\prime}$ 軸のみでデータを表現していると言える。 この例のように、$K$ 次元のデータであっても、で０他の偏りによって $M( こういった場合に、 「$M$ 方向の軸をどのように決めるか？」 、 「$M$ をどうやって決めるか？」 などが問題となる。 ※ 詳しくは 主成分分析(PCA) に記載。 線形判別分析(LDA) 入力ベクトル $\\mathbf{x}$ を $K$ クラスの一つ $C_k$ に割り当てる関数である識別（決定面が超平面となるとき、 線形識別(linear discriminant) ）を、 「次元の削減」 という観点から捉えることができる。 2クラス分類 $D$ 次元入力ベクトルを得て、それを以下の式で $1$ 次元に射影するとする。 $$y = \\mathbf{w}&#94;T\\mathbf{x}\\qquad (4.20)$$ ある閾値を設定し、$y\\geq-w_0$ の場合クラス $C_1$、そうでない場合クラス $C_2$ であるとすると、 標準的な線形分類器が得られる。 一般に、$D$ 次元から $1$ 次元へ射影することによって相当量の情報量の損失を発生させる。 重みベクトル $\\mathbf{w}$ の要素を調整することで、 クラスの分離を最大にする射影を選択したい。 $\\mathbf{w}$ 上へ射影された際のクラス分離度の最も簡単な測定法は、 射影されたクラスの平均の分離度（以下の式） を見ることである。 $$m_2-m_1 = \\mathbf{w}&#94;T\\left(\\mathbf{m}_2-\\mathbf{m}_1\\right) = \\mathbf{w}&#94;T\\left(\\frac{1}{N_2}\\sum_{n\\in C_2}\\mathbf{x}_n -\\frac{1}{N_1}\\sum_{n\\in C_1}\\mathbf{x}_n\\right)\\qquad (4.21)\\ \\&\\ (4.22)$$ 上の式は $\\mathbf{w}$ の値を大きくすればいくらでも大きな値にすることができるので、 $\\mathbf{w}$ が単位長である（$\\sum_i w_i&#94;2 = 1$）という制約を加える。 ラグランジュ乗数を用いてこれを解くと、$\\mathbf{w}\\propto(\\mathbf{m}_2-\\mathbf{m}_1)$ が得られる。 クラス分布の非対角な共分散が強い場合など、一般に、 各クラスの平均値だけを見ていても上手く判別する事ができない。 そこでフィッシャーが提案した方法が、 「射影されたクラス平均間の分離度を大きくすると同時に、各クラス内では小さな分散を与える関数を最大化する」 クラス $C_k$ から射影されたデータのクラス内分散は以下で与えられる。 $$s_k&#94;2 = \\sum_{n\\in C_k}(y_n-m_k)&#94;2\\qquad (4.2)$$ 全データ集合に対する総クラス内分散が $s_1&#94;2+s_2&#94;2$ であると定義する。 フィッシャーの判別基準は、 クラス間分離度 と クラス内分散 の比率で表される。 $$ \\begin{aligned} J(\\mathbf{w}) &= \\frac{(m_2-m_1)&#94;2}{s_1&#94;2 + s_2&#94;2} & (4.25)\\\\ &= \\frac{\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}}{\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}} & (4.27)\\\\ \\mathbf{S}_{\\mathrm{B}} &= (\\mathbf{m}_2-\\mathbf{m}_1)(\\mathbf{m}_2-\\mathbf{m}_1)&#94;T & (4.27)\\\\ \\mathbf{S}_{\\mathrm{W}} &= \\sum_{n\\in C_1}(\\mathbf{x}_n-\\mathbf{m}_1)(\\mathbf{x}_n-\\mathbf{m}_1)&#94;T + \\sum_{n\\in C_2}(\\mathbf{x}_n-\\mathbf{m}_2)(\\mathbf{x}_n-\\mathbf{m}_2)&#94;T& (4.27)\\\\ \\end{aligned} $$ $\\mathbf{S}_{\\mathrm{B}}$ を クラス間共分散行列(between-class covariance matrix) と呼ぶ。 $\\mathbf{S}_{\\mathrm{W}}$ を (総)クラス内共分散行列(within-class covariance matrix) と呼ぶ。 $J(\\mathbf{w})$ を $\\mathbf{w}$ に関して微分すると、以下の式が満たされる場合に $J(\\mathbf{w})$ が最大となる事がわかる。 $$ \\begin{aligned} \\frac{dJ(\\mathbf{w})}{d\\mathbf{w}} &= \\frac{\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}} + \\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right) - \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}} + \\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)}{\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)&#94;2}\\\\ \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}} + \\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right) &= \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}} + \\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)\\\\ \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}&= \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\qquad (4.29) \\end{aligned} $$ $(4.27)$ から、 $\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}$ は常に $(\\mathbf{m}_2-\\mathbf{m}_1)$ と同じ方向を持つ。 $\\mathbf{w}$ の方向だけが重要で、 大きさは考慮する必要がないので、スカラーファクタ $\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)$ と $\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)$ を無視できる。 $(4.29)$ の両辺に $\\mathbf{S}_{\\mathrm{W}}&#94;{-1}$ を左からかけて、 フィッシャーの線形判別(Fisher's linear discriminant) が得られる。 $$\\mathbf{w}\\propto\\mathbf{S}_{\\mathrm{W}}&#94;{-1}(\\mathbf{m}_2-\\mathbf{m}_1)\\qquad (4.30)$$ フィッシャーの線形判別(Fisher's linear discriminant) は、厳密には識別子ではなく、 むしろ $1$ 次元へ削減する際のデータの射影方向の選択を行なっている。 In [6]: from kerasy.ML.decomposition import LDA In [7]: N1 = 100 ; N2 = 100 cov = [[ 10 , 1 ],[ 1 , 3 ]] In [8]: x1 = np . random . RandomState ( seed ) . multivariate_normal ([ 0 , 7 ], cov , N1 ) x2 = np . random . RandomState ( seed + 1 ) . multivariate_normal ([ 8 , 6 ], cov , N2 ) x1min = np . min ( x1 ); x1max = np . max ( x1 ) x2min = np . min ( x2 ); x2max = np . max ( x2 ) m1 = np . mean ( x1 , axis = 0 ); m2 = np . mean ( x2 , axis = 0 ) m = ( m1 + m2 ) / 2 data = np . r_ [ x1 , x2 ] In [9]: X = np . linspace ( - 100 , 100 , 1000 ) In [10]: fig = plt . figure ( figsize = ( 12 , 6 )) for i , tf in enumerate ([ True , False ]): model = LDA () model . fit ( x1 , x2 , mean_only = tf ) w1 , w2 = model . w alpha = - w2 / w1 beta = m [ 1 ] - alpha * m [ 0 ] x_features = model . transform ( data ) axT = fig . add_subplot ( 2 , 2 , i + 1 ) axT . plot ( X , X * ( - w2 / w1 ) + beta , color = \"black\" , label = \"linear discriminant\" ) axT . scatter ( x1 [:, 0 ], x1 [:, 1 ], color = \"blue\" , label = \"class1\" ) axT . scatter ( x2 [:, 0 ], x2 [:, 1 ], color = \"red\" , label = \"class2\" ) axT . scatter ( m1 [ 0 ], m1 [ 1 ], color = \"green\" , marker = \"*\" , s = 200 ), axT . scatter ( m2 [ 0 ], m2 [ 1 ], color = \"green\" , marker = \"*\" , s = 200 , label = \"mean\" ) axT . set_xlim ( x1min , x1max ), axT . set_ylim ( x2min , x2max ) axT . set_xticks ([]), axT . set_yticks ([]), axT . legend (), axT . set_title ( \"Only Mean\" if tf else \"Fisher's linear discriminant\" ) axB = fig . add_subplot ( 2 , 2 , 3 + i ) axB . hist ( x_features [: N1 ], alpha = 0.3 , color = \"blue\" , label = \"class1\" ) axB . hist ( x_features [ N1 :], alpha = 0.3 , color = \"red\" , label = \"class2\" ) axB . set_xticks ([]), axB . set_yticks ([]), axB . legend () plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-3.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-3.html"},{"title":"生物統計論 第4回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section4.1 Expectation Maximization Algorithm The expectation maximization algorithm, or EM algorithm, is a general technique for finding maximum likelihood solutions for probabilistic models having latent variable. Consider a probabilistic model in which we collectively denote all of the observed variables by $\\mathbf{X}$ all of the hidden variables by $\\mathbf{Z}$ (assuming discrete, but discussion is identical if continuous) joint distribution by $p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)$ Goal is to maximize the likelihood function that is given by $$p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) = \\sum_{\\mathbf{Z}}p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)\\qquad (9.69)$$ Properties Guaranteed to terminate Likelihood always increases Solving M-step is often easy No need to traverse the data Separation of parameter dependency $\\log(pq)=\\log(p)+\\log(q)$ Sometimes solved exactly Often a few times faster than gradient descent (if stopping condition is not too stringent) Expectation values characterize the optimized model Lower Bound of Likelihood $\\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right)$ and $\\mathrm{KL}\\left(q\\|p\\right)$ We shall suppose that direct optimization of $p(\\mathbf{X}|\\boldsymbol{\\theta})$ is difficult the optimization of the complete-data likelihood function $p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)$ is significantly easier We introduce a distribution $q\\left(\\mathbf{Z}\\right)$ defined over the latent variables. For any choice of $q\\left(\\mathbf{Z}\\right)$, the following decomposition holds $$ \\begin{aligned} \\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) &= \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) + \\mathrm{KL}\\left(q\\|p\\right) &(9.70)\\\\ \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.71)\\\\ \\mathrm{KL}\\left(q\\|p\\right) &= -\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.72) \\end{aligned} $$ NOTE : $\\mathcal{L}(q,\\boldsymbol{\\theta})$ is a functional of the distribution $q(\\mathbf{Z})$, and a function of the parameters $\\boldsymbol{\\theta}$ $$ \\begin{aligned} \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) + \\mathrm{KL}\\left(q\\|p\\right) &=\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} -\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\}\\\\ &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}\\right\\}\\\\ &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right)\\\\ &= \\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) \\end{aligned}$$ From $(9.72)$, we see that $\\mathrm{KL}(q\\|p)$ is the Kullback-Leibler divergence between $q(\\mathbf{Z})$ and the posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta})$ Kullback-Leibler divergence satisfies $\\mathrm{KL}(q\\|p)\\geq0$ with eqyality if, and only if, $q(\\mathbf{Z})=p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta})$. Therefore, $\\mathcal{L}(q,\\boldsymbol{\\theta})\\leq\\ln p(\\mathbf{X}|\\boldsymbol{\\theta})$, in other words that $\\mathcal{L}(q,\\boldsymbol{\\theta})$ is a lower bound on $\\ln p(\\mathbf{X}|\\boldsymbol{\\theta})$ E step In the E step, the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ is maximized with respect to $q(\\mathbf{Z})$ while holding $\\boldsymbol{\\theta}&#94;{\\text{old}}$ fixed. $\\ln p(\\mathbf{X}|\\boldsymbol{\\theta}&#94;{\\text{old}})$ does not depend on $q(\\mathbf{Z})$ the largest value of $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ will occur when the Kullback-Leibler divergence vanishes. ∴ When $q(\\mathbf{Z})$ is equal to the posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}})$, $\\mathrm{KL}(q\\|p)=0$ and the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ will be maximized. M step In the M step, the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ is maximized with respect to $\\boldsymbol{\\theta}$ to give some new value $\\boldsymbol{\\theta}&#94;{\\text{new}}$ while holding $q(\\mathbf{Z})$ fixed. This will cause the lower bound $\\mathcal{L}$ to increase This will necessarily cause the corrresponding log likelihood function to increase. Because $q$ is held fixed during the M step, it will not equal the new posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}})$ $\\left(\\mathrm{KL}(q\\|p)\\neq0\\right)$ $\\mathcal{Q}(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}})$ $$ \\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)=\\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right) \\qquad (9.33)\\\\ $$ If we substitute $q(\\mathbf{Z}) = p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)$ into $(9.71)$, $$ \\begin{aligned} \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.71)\\\\ &= \\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right) - \\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\\\ &= \\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right) + \\text{const.} \\end{aligned} $$ ∴ \"Maximizing $\\mathcal{L}(q,\\boldsymbol{\\theta})$\" is equal to \"Maximizing $\\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)$\". In [2]: from kerasy.ML.MixedDistribution import MixedGaussian In [3]: # Train Data. data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = 50 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 5 ], cov = np . eye ( 2 ), size = 50 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = 50 ), ]) X , Y = data . T K = 3 In [4]: # Back Ground Color xmin , ymin = np . min ( data , axis = 0 ) - 0.3 xmax , ymax = np . max ( data , axis = 0 ) + 0.3 Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [5]: model = MixedGaussian ( K = 3 , random_state = 1234 ) model . fit ( data , memo_span = 1 ) ll_hist = [ ll for _ , _ , _ , ll in model . history ] mu_hist = [ mu for _ , _ ,( mu , _ , _ ), _ in model . history ] In [6]: plt_model = MixedGaussian ( K = 3 ) plt_model . N , plt_model . M = data . shape L_old = min ( ll_hist ) - 300 for epoch , idx ,( mu , S , pi ), ll in model . history [: - 1 ]: fig = plt . figure ( figsize = ( 12 , 8 )) ll_old = ll_hist [ epoch ]; ll_new = ll_hist [ epoch + 1 ] mu_old = mu_hist [ epoch ]; mu_new = mu_hist [ epoch + 1 ] L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 dL_old = ll_old - L_old ; dL_new = L_new - ll_old ; dll_old = ll_new - ll_old ax1 = fig . add_subplot ( 2 , 2 , 1 ) plt_model . mu = mu ; plt_model . S = S ; plt_model . pi = pi gammas = plt_model . predict ( XYs ) Zs = np . sum ( gammas , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. ax1 . pcolor ( Xs , Ys , Zs , alpha =. 5 , cmap = \"jet\" ) ax1 . scatter ( X , Y , c = idx , cmap = \"prism\" ) ax1 . set_xlim ( xmin , xmax ), ax1 . set_ylim ( ymin , ymax ), ax1 . set_title ( f \"epochs: {epoch:>02}\" , fontsize = 18 ) ax2 = fig . add_subplot ( 2 , 2 , 2 ) ax2 . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linewidth = 3 ) ax2 . axhline ( L_old , color = \"black\" , label = \"$L(q,θold)$\" , linestyle = \":\" ) ax2 . arrow ( x = 0.3 , y = L_old , dx = 0 , dy = dL_old , head_width = dL_old / 6000 , head_length = dL_old * 0.1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax2 . set_title ( f \"E step (Epoch={epoch})\" , fontsize = 18 ), ax2 . legend (), ax2 . set_xticks ([]), ax2 . set_ylim ( - 600 , - 570 ) ax3 = fig . add_subplot ( 2 , 2 , 3 ) for k in range ( K ): xb , yb = mu_old [ k ]; xa , ya = mu_new [ k ] ax3 . plot (( xb , xa ),( yb , ya ), color = \"black\" ) ax3 . scatter ( xb , yb , color = \"black\" , s = 50 ) ax3 . scatter ( xa , ya , color = \"red\" , marker = \"*\" , s = 150 ) ax3 . set_xlim ( xmin , xmax ), ax3 . set_ylim ( ymin , ymax ), ax3 . set_title ( \"θ → θnew\" ) ax3 . grid () ax4 = fig . add_subplot ( 2 , 2 , 4 ) L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 ax4 . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linestyle = \"--\" ) ax4 . axhline ( ll_new , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θnew)$\" , linewidth = 3 ) ax4 . axhline ( L_new , color = \"black\" , label = \"$L(q,θnew)$\" , linestyle = \":\" ) ax4 . arrow ( x = 0.7 , y = ll_old , dx = 0 , dy = dll_old , head_width = dll_old / 6000 , head_length = dll_old * 0.1 , fc = 'k' , ec = 'k' , length_includes_head = True ) ax4 . arrow ( x = 0.3 , y = ll_old , dx = 0 , dy = dL_new , head_width = dL_new / 6000 , head_length = dL_new * 0.1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax4 . set_title ( f \"M step (Epoch={epoch})\" , fontsize = 18 ), ax4 . legend (), ax4 . set_xticks ([]), ax4 . set_ylim ( - 600 , - 570 ) plt . tight_layout () plt . savefig ( f \"img/img{epoch:>02}\" ) L_old = L_new fig_no = 0 L_old = min ( ll_hist ) - 300 for epoch in range ( len ( model . history ) - 1 ): ll_old = ll_hist [ epoch ]; ll_new = ll_hist [ epoch + 1 ] L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 dL_old = ll_old - L_old ; dL_new = L_new - ll_old ; dll_old = ll_new - ll_old # Estep fig = plt . figure ( figsize = ( 3 , 10 )) ax = fig . add_subplot ( 1 , 1 , 1 ) ax . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linewidth = 3 ) ax . axhline ( L_old , color = \"black\" , label = \"$L(q,θold)$\" , linestyle = \":\" ) ax . arrow ( x = 0.3 , y = L_old , dx = 0 , dy = dL_old , head_width = dL_old / 60 , head_length = dL_old * 2e-1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax . set_title ( f \"E step (Epoch={epoch})\" , fontsize = 18 ), ax . legend (), ax . set_xticks ([]), ax . set_ylim ( - 600 , - 570 ) plt . savefig ( f \"img/img{fig_no:>02}\" ); fig_no += 1 plt . clf () # Mstep fig = plt . figure ( figsize = ( 3 , 10 )) ax = fig . add_subplot ( 1 , 1 , 1 ) L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 ax . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linestyle = \"--\" ) ax . axhline ( ll_new , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θnew)$\" , linewidth = 3 ) ax . axhline ( L_new , color = \"black\" , label = \"$L(q,θnew)$\" , linestyle = \":\" ) ax . arrow ( x = 0.7 , y = ll_old , dx = 0 , dy = dll_old , head_width = dll_old / 60 , head_length = dll_old * 2e-1 , fc = 'k' , ec = 'k' , length_includes_head = True ) ax . arrow ( x = 0.3 , y = ll_old , dx = 0 , dy = dL_new , head_width = dL_new / 60 , head_length = dL_new * 2e-1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax . set_title ( f \"M step (Epoch={epoch})\" , fontsize = 18 ), ax . legend (), ax . set_xticks ([]), ax . set_ylim ( - 600 , - 570 ) plt . savefig ( f \"img/img{fig_no:>02}\" ); fig_no += 1 plt . clf () L_old = L_new Section4.2 Mixture Model Implementation Gaussian Mixture Distribution k-means clustering Section4.3 Linear Regression Least Squares polynomial function we observe a real-value input variable $x$ and we wish to use this observation to predict the value of a real-valued target variable $t$. In the most simplest approach based on curve fitting, we shall fit the data using a polynomial function of the form : $$y(x,\\mathbf{w}) = w_0+w_1x+w_2x&#94;2+\\cdots+w_Mx&#94;M=\\sum_{j=0}&#94;Mw_jx&#94;j\\qquad (1.1)$$ data we are given a training set comprising $N$ observation of $x$, written $\\mathbf{X}\\equiv(\\mathbf{x_1},\\ldots,\\mathbf{x}_N)&#94;T$ with corresponding observation of the values of $t$, denoted $\\mathbf{t}\\equiv(t_1\\ldots,t_N)&#94;T$ we can difine $M$, which is the order of the polynomial. The values of the coefficients($w_j$) will be determined by fitting the polynomial to the training data. This can be done by minimizing an error function that measures the misfit between the function $y(x,\\mathbf{w})$ and the training set data points. One simple choice of error function, which is widely used, is given by the sum of the squares of the errors $$E(\\mathbf{w}) = \\frac{1}{2}\\mathrm{RSS} = \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\{y(\\mathbf{x}_n,\\mathbf{w}) - t_n\\right\\}&#94;2\\qquad (1.2)$$ (the factor of $1/2$ is included for later convenience.) Trainig Aim: find the best $\\mathbf{w}&#94;{\\star}=\\underset{w\\in\\mathbb{R}}{\\mathrm{argmin}}\\left\\{\\mathrm{RSS}(\\mathbf{w})\\right\\}$ $\\mathbf{t} = \\left(\\begin{matrix}t_1\\\\\\vdots\\\\t_N\\end{matrix}\\right),\\quad\\mathbf{X} = \\left(\\begin{matrix}x_1&#94;0&x;_1&#94;1&\\cdots&x;_1&#94;M\\\\x_2&#94;0&x;_2&#94;1&\\cdots&x;_2&#94;M\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\x_N&#94;0&x;_N&#94;1&\\cdots&x;_N&#94;M\\end{matrix}\\right),\\quad\\mathbf{w}=\\left(\\begin{matrix}w_1\\\\\\vdots\\\\w_M\\end{matrix}\\right)$ $\\mathrm{RSS}(\\mathbf{w}) = \\left(\\mathbf{t} - \\mathbf{Xw}\\right)&#94;T\\left(\\mathbf{t} - \\mathbf{Xw}\\right)$ Solution: $$ \\begin{aligned} \\frac{\\partial E(\\mathbf{w})}{\\partial\\mathbf{w}} &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\|\\mathbf{t}-\\mathbf{Xw}\\|&#94;2\\\\ &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\|\\mathbf{t}\\|&#94;2 - 2\\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{t} + \\|\\mathbf{Xw}\\|&#94;2\\right)\\\\ &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\|\\mathbf{t}\\|&#94;2 - 2\\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{t} + \\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{Xw}\\right)\\\\ &=\\frac{1}{2} \\left(-2\\mathbf{X}&#94;T\\mathbf{t} + \\left(\\mathbf{X}&#94;T\\mathbf{X} + \\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;T\\right)\\mathbf{w}\\right)\\\\ &= -\\mathbf{X}&#94;T\\mathbf{t}+\\mathbf{X}&#94;T\\mathbf{Xw}=\\mathbf{0}\\\\ \\therefore\\mathbf{w}&#94;{\\star} &= \\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{t} \\end{aligned}$$ ※ In the following programs, I use np.linalg.solve to calcurate $\\mathbf{w}&#94;{\\ast}$ equation program $$\\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)\\mathbf{w}&#94;{\\star} = \\mathbf{X}&#94;T\\mathbf{t}$$ w = np.linalg.solve(X.T.dot(X), X.T.dot(t)) In [7]: N = 15 Ms = [ 2 , 4 , 8 , 16 ] seed = 0 In [8]: # Training data. x = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = N ) Noise = np . random . RandomState ( seed ) . normal ( loc = 0 , scale = 0.1 , size = N ) t = np . sin ( 2 * np . pi * x ) + Noise In [9]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Regularized Least Square $$ \\begin{aligned} E(\\mathbf{w}) &= E_{D}(\\mathbf{w}) + \\lambda E_W(\\mathbf{w}) & (3.24)\\\\ &= \\frac{1}{2}\\mathrm{RSS} + \\lambda\\frac{1}{2}\\mathbf{w}&#94;T\\mathbf{w}\\\\ &= \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\{y(\\mathbf{x}_n,\\mathbf{w}) - t_n\\right\\}&#94;2+\\frac{1}{2}\\mathbf{w}&#94;T\\mathbf{w} & (3.27)\\\\ \\therefore\\mathbf{w}&#94;{\\star} &= \\left(\\lambda\\mathbf{I} + \\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{t} & (3.28) \\end{aligned} $$ In [10]: lambda_ = 1e-4 In [11]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( lambda_ * np . identity ( M + 1 ) + X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $,$\\lambda= {lambda_} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Section4.4 Bayesian Inference Maximal Likelihood Estimate $$ l(\\boldsymbol{\\theta}|D) = \\log L(\\boldsymbol{\\theta}|D) = \\log\\mathbb{P}(D|\\boldsymbol{\\theta})\\\\ \\hat{\\boldsymbol{\\theta}}_{\\text{ML}} = \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}l(\\boldsymbol{\\theta}|D) $$ ※ $l$: large → High probability of observing $D$ from the model $\\boldsymbol{\\theta}$ Maximum a Posteriori Estimate Maximum a posteriori estimate $$ \\begin{aligned} \\hat{\\boldsymbol{\\theta}_{\\text{MAP}}} &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}f(\\boldsymbol{\\theta}|D)\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}f(D|\\boldsymbol{\\theta})f(\\boldsymbol{\\theta})\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}\\left\\{l(\\boldsymbol{\\theta}|D) L \\log f(\\boldsymbol{\\theta})\\right\\}\\\\ \\end{aligned} $$ Posterior mean estimate $$ \\hat{\\boldsymbol{\\theta}_{\\text{PME}}} = \\int\\boldsymbol{\\theta}f(\\boldsymbol{\\theta}|D)d\\boldsymbol{\\theta} $$ Implementation of Gaussian Prior for Regression. In [12]: seed = 123 In [13]: from kerasy.ML.linear import BayesianLinearRegression from kerasy.utils.preprocessing import GaussianBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian In [14]: N = 25 ; D = 1 ; M = 25 xmin = 0 ; xmax = 1 In [15]: alpha = 1 beta = 25 In [16]: x_test = np . linspace ( xmin , xmax , 1000 ) y_test = np . sin ( 2 * np . pi * x_test ) x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 1 / beta , seed = seed ) y_train += y_noise In [17]: # transform mu = np . linspace ( xmin , xmax , M ); sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) x_train_features = phi . transform ( x_train ) x_test_features = phi . transform ( x_test ) In [18]: random_idx = np . random . RandomState ( seed ) . choice ( N , N ) In [19]: fig = plt . figure ( figsize = ( 16 , 8 )) for i , n in enumerate ([ 1 , 2 , 4 , 25 ]): ax = fig . add_subplot ( 2 , 2 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( x_train_features [ random_idx [: n ]], y_train [ random_idx [: n ]]) y_pred , y_std = model . predict ( x_test_features ) ax . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) ax . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( x_train [ random_idx [: n ]], y_train [ random_idx [: n ]], s = 150 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) ax . set_ylim ( - 1.5 , 1.5 ), ax . legend (), ax . set_title ( f \"Bayesian Linear Regression (N= {n} )\" ) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-4.html"},{"title":"レポート課題3(10/17出題)","text":"MmKTAn2EV6q1KfyUk7kSBg==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report3.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report3.html"},{"title":"連続最適化(2)制約付き最適化","text":"講師： 佐藤一誠 参考書： 最適化手法 参考書： 機械学習のための連続最適化 講義概要 等式制約付き最適化問題 ラグランジュ未定乗数法 ラグランジュ双対問題 双対変数の最適化 不等式制約付き最適化問題 制約なし最適化問題への変換 双対問題 まとめ 制約付き最適化問題(constrained optimization problem) \\(\\mathcal{X}\\subset\\mathbb{R}&#94;d\\) 上に定義される関数 \\(f:\\mathcal{X}\\rightarrow\\mathbb{R}\\) の最小値を求める。 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ &h(\\mathbf{x})\\leq\\mathbf{0} \\end{aligned} $$ \"subject to\"は、 「…を条件として」 という意味。 \\(g_i,h_i\\) は互いに 一次独立(linearly independent) であると仮定。 実行可能解(feasible solution) ：全ての制約条件を満たす \\(\\mathbf{x}\\) 凸最適化問題(convex optimization problem) ：関数 \\(f\\) が凸、集合 \\(\\mathcal{X}\\) が凸、制約条件 \\(\\mathbf{g},\\mathbf{h}\\) が凸であれば、最適値が一意に定まる。 ※ 以下、凸最適化問題を考える。 等式制約付き最適化問題 等式制約付き最適化問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ \\end{aligned} $$ \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) + c_k\\|\\mathbf{g}(x)\\|&#94;2$$ \\(c_k\\) の値を徐々に増やしていく。 $$0 < c_1 < c_2 < \\cdots$$ ラグランジュ未定乗数法 詳しくは ラグランジュ未定乗数法 に記載されているので、ここでは具体例を紹介する。 問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{min : }}&3x&#94;2 + 2y&#94;2\\\\ \\text{subject to : }&x+y=1\\\\ \\end{aligned} $$ 解答 ラグランジュ関数は、 $$L(x,y,\\lambda) = 3x&#94;2 + 2y&#94;2 + \\lambda(x+y-1)$$ となるから、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x} &= 6x+\\lambda=0 &\\therefore x = -\\frac{1}{6}\\lambda\\\\ \\frac{\\partial L}{\\partial y} &= 4y+\\lambda=0 &\\therefore y = -\\frac{1}{4}\\lambda\\\\ \\frac{\\partial L}{\\partial \\lambda} &= x+y-1=0 &\\therefore \\lambda = -\\frac{12}{5}\\\\ \\end{aligned} $$ よって、 \\((x,y) = (0.4,0.6)\\) ラグランジュ双対問題 これも、詳しくは ラグランジュ双対問題 に記載されているので、ここでは具体例を紹介する。 問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{min : }}&3x&#94;2 + 2y&#94;2\\\\ \\text{subject to : }&x+y=1\\\\ \\end{aligned} $$ 解答 ラグランジュ関数は、 $$L(x,y,\\lambda) = 3x&#94;2 + 2y&#94;2 + \\lambda(x+y-1)$$ となるから、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x} &= 6x+\\lambda=0 &\\therefore x = -\\frac{1}{6}\\lambda\\\\ \\frac{\\partial L}{\\partial y} &= 4y+\\lambda=0 &\\therefore y = -\\frac{1}{4}\\lambda \\end{aligned} $$ よって、これらを \\(L(x,y,\\lambda)\\) に代入して、 $$\\omega(\\lambda) = \\underset{x,y\\in\\mathbb{R}}{\\inf}L(x,y,\\lambda) = -\\frac{5}{24}\\lambda&#94;2-\\lambda$$ したがって、 \\(\\underset{\\lambda\\in\\mathbb{R}}{\\text{argmax}}\\omega(\\lambda) = -\\frac{12}{5}\\Longrightarrow(x,y) = (0.4,0.6)\\) 双対変数の最適化 上の問題では、双対変数 \\(\\lambda\\) の最適化問題を解析的に解けたが、解析的に解くことができない問題もある。その場合に使うのが 双対上昇法 や 乗数法 と呼ばれる 双対変数の勾配上昇 を行う手法である。 手法 数式 解説 双対上昇法 $$\\begin{aligned}\\mathbf{x}_{k+1} &= \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}L(\\mathbf{x},\\boldsymbol{\\lambda}_{k})\\\\\\boldsymbol{\\lambda}_{k+1} &= \\boldsymbol{\\lambda}_k + \\varepsilon_k\\nabla\\omega(\\mathbf{\\boldsymbol{\\lambda}}_k) \\\\&= \\boldsymbol{\\lambda}_k + \\varepsilon_k\\mathbf{g}(\\mathbf{x}_{k+1})\\end{aligned}$$ 適当な初期値から，ラグランジュ関数の最小化と双対変数の勾配上昇を交互に実行 乗数法 $$\\begin{aligned}\\mathbf{x}_{k+1} &= \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}L_c(\\mathbf{x},\\boldsymbol{\\lambda}_{k})\\\\\\boldsymbol{\\lambda}_{k+1} &= \\boldsymbol{\\lambda}_k + c\\nabla\\omega(\\mathbf{\\boldsymbol{\\lambda}}_k) \\\\&= \\boldsymbol{\\lambda}_k + c\\mathbf{g}(\\mathbf{x}_{k+1})\\end{aligned}$$ 適当な初期値から， 拡張ラグランジュ関数 の最小化と双対変数の勾配上昇を交互に実行 なお、 拡張ラグランジュ関数(augmented Lagrangian) は、以下で表される関数で、二次の項を加えることで凸性を増している。 $$L_c(\\mathbf{x},\\boldsymbol{\\lambda}) = f(\\mathbf{x}) + \\boldsymbol{\\lambda}&#94;T\\mathbf{g}(\\mathbf{x}) + \\frac{c}{2}\\|\\mathbf{g}(\\mathbf{x})\\|&#94;2$$ ※実装は レポート課題3 に記載。 不等式制約付き最適化問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&h(\\mathbf{x})\\leq\\mathbf{0}\\\\ \\end{aligned} $$ 実行可能解 \\(\\mathbf{x}\\) において \\(h_i(\\mathbf{x}) = 0\\) の時、この制約を 有効制約(active constraint) と呼ぶ。 実行可能解 \\(\\mathbf{x}\\) においてそれ以外の時、この制約を 無効制約(inactive constraint) と呼ぶ。 制約なし最適化問題への変換 障壁法(barrier method) 初期値を \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の制約なし最適化問題を解く。 $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) - c_k\\log(-h(\\mathbf{x}))$$ \\(c_k\\) の値を徐々に減らしていく。 途中の解 \\(\\mathbf{x}_{k+1}\\) が常に \\(h(\\mathbf{x}_{k+1})\\leq0\\) を満たす （つまり、実行可能領域の内側にある） ことから、 内点法(interior-point method) ともよばれる。 \\(c_k\\) の決め方が難しい。 罰則法(penalty method) 初期値を \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の制約なし最適化問題を解く。 $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) + c_k\\max(0,h(\\mathbf{x}))&#94;2$$ \\(c_k\\) の値を徐々に増やしていく。 途中の解 \\(\\mathbf{x}_{k+1}\\) が一般に \\(h(\\mathbf{x}_{k+1})>0\\) を満たす （つまり、実行可能領域の外側にある） ことから、 外点法(exterior-point method) ともよばれる。 \\(c_k\\) の決め方が難しい。 射影勾配法(projected gradient method) 勾配降下（ \\(\\tilde{\\mathbf{x}}_{k+1} = \\mathbf{x}_k-\\varepsilon_k\\nabla f(\\mathbf{x}_k)\\) ）と実行可能領域への射影（ \\(\\mathbf{x}_{k+1} = \\mathbf{P}_k\\tilde{\\mathbf{x}}_{k+1}\\) ）を繰り返す。 まとめると $$\\mathbf{x}_{k+1} = \\mathbf{P}_k\\left(\\mathbf{x}_k - \\varepsilon_k\\nabla f(\\mathbf{x}_k)\\right)$$ 射影が簡単に計算できる時、効率が良い。 双対問題 詳しくは ラグランジュ未定乗数法 に記載。 まとめ 制約付き最適化問題： $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ &h(\\mathbf{x})\\leq\\mathbf{0} \\end{aligned} $$ ラグランジュ関数： $$L\\left(\\mathbf{x},\\boldsymbol{\\lambda},\\boldsymbol{\\mu}\\right) = f(\\mathbf{x}) + \\boldsymbol{\\lambda}&#94;Tg(\\mathbf{x}) + \\boldsymbol{\\mu}&#94;Th(\\mathbf{x})$$ 双対問題： $$ \\begin{aligned} \\underset{\\boldsymbol{\\lambda,\\mu},\\ \\mathbf{x}\\in\\mathcal{X}}{\\text{maximization : }}&L\\left(\\mathbf{x},\\boldsymbol{\\lambda},\\boldsymbol{\\mu}\\right)\\\\ \\text{subject to : }&\\boldsymbol{\\mu}\\geq\\mathbf{0}\\\\ \\end{aligned} $$ KKT条件： $$ \\begin{aligned} \\begin{cases} \\nabla_{\\mathbf{x}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) = \\mathbf{0}\\\\ \\nabla_{\\boldsymbol{\\lambda}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) = \\mathbf{0} & \\boldsymbol{\\mu}&#94;{\\ast}\\geq\\mathbf{0}\\\\ \\nabla_{\\boldsymbol{\\mu}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) \\leq \\mathbf{0} & \\mu_i&#94;{\\ast}h_i(\\mathbf{x}&#94;{\\ast}) = 0,\\ \\forall i \\end{cases} \\end{aligned} $$ .prompt { /* This is for jupyter blog.*/ min-width: 0; /* This padding is tuned to match the padding on the CodeMirror editor. */ padding: 0em 0.4em 0em 0em; margin: 0px; font-family: monaco; } /*蛍光ペン(pink)*/ .marker-pink { color: #c45a5a; background: linear-gradient(transparent 70%, #ff66ff 60%); font-weight: bold; } /*蛍光ペン(blue) & hover info*/ .marker-info { color: #5C7DC4; background: linear-gradient(transparent 70%, #66FFCC 60%); font-weight: bold; position: relative; cursor: pointer; } .marker-info:hover:before { opacity: 1; z-index: 2; } .marker-info:before { content: attr(aria-label); opacity: 0; position: absolute; top: 30px; right: -90px; font-size: 14px; width: 300px; padding: 10px; color: #fff; background-color: #555; border-radius: 3px; pointer-events: none; } /* 枠囲み */ .frame { border: solid 1.0px #000000; padding: 0.5em 1em; margin: 2em 0; } /* 暗記用 question box */ span .qbox{ display: none; } span.qbox-wrapper:hover .qbox-default{ display: none; } span.qbox-wrapper:hover .qbox{ display: inline; } .qbox-wrapper{ font-weight: bold; padding: 5px 10px; border-radius: 5px; border: solid 2px #000000; margin: 5px } .qbox-wrapper:hover{ text-shadow: 0px 0px 6px rgba(255, 255, 255, 1); -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); transition: all 0.4s ease 0s; } /* 画像吹き出し */ .balloon { display: table; width: 100%; } .balloon_img { display: table-cell; vertical-align: middle; width: 50%; padding-right: 10px; } .balloon_comment { border: #83274e solid 4px; position: relative; background: #fff; padding: 12px; border-radius: 13px; display: block } .balloon_comment::before { content: \"\"; position: absolute; border-right: 23px solid #83274e; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -23px; } .balloon_comment::after { content: \"\"; position: absolute; border-right: 24px solid #fff; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -17px; } if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-3.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-3.html"},{"title":"RNA-seqデータ解析（バッチスクリプト版）","text":"5NsmXwUzIvHQp/PeAcInlQ==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-12.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-12.html"},{"title":"RNA-seqデータ解析（対話モード版）","text":"5vpH9kTx3fu8JZEqa6yYXg==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-11.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-11.html"},{"title":"ゲノム解析ツールの環境構築","text":"33FWCRQT0o6PQZckPEtmvg==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-10.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-10.html"},{"title":"逐次最小問題最適化法(SMO)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt 二次計画問題を解くアルゴリズム概観 アルゴリズム 説明 伝統的な二次計画法のアルゴリズム 計算コスト及びメモリ使用量の面で現実的には厳しい。 チャンキング(chunking) カーネル行列からラグランジュ乗数が $0$ となるデータに対応する行および列を取り除いても、ラグランジュ関数が不変であることを利用し、元々の二次計画問題は、より次元数の小さな問題を順番に解くことで、最終的には $0$ とならないラグランジュ乗数だけを残す、という問題に帰着する。 射影共役勾配法(projected conjugate gradient method) チャンキングを実装する手法 分解法(decomposition method) チャンキングと同様 サイズの小さな二次計画問題を繰り返し解く という手法だが、ここの部分問題の大きさが一定であるため、任意の大きさのデータに対応できる。 逐次最小問題最適化法(SMO;sequential minimal optimization) 分解法の計算コストを削減した手法。たった２つのラグランジュ乗数を含む部分問題を逐次解いていくことで最終的な解を得る。 逐次最小問題最適化法(SMO;sequential minimal optimization) ラグランジュ双対問題 を以下のように定義する。 $$ \\begin{aligned} \\tilde{L}(\\mathbf{a}) &=\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)& (7.10)\\\\ a_n & \\geq 0,\\quad n=1,\\ldots,N & (7.11)\\\\ \\sum_{n=1}&#94;Na_nt_n &= 0 & (7.12) \\end{aligned} $$ 逐次最小問題最適化法(SMO;sequential minimal optimization) は反復法である。 適当な初期値 $\\mathbf{a}&#94;{(0)}$ から出発して、更新 $\\mathbf{a}&#94;{(k)} \\rightarrow \\mathbf{a}&#94;{(k+1)}$ を繰り返す。 この際、 １度には2つの成分しか動かさない。 ここで、$a_p$ と $a_q$ だけ動かすことを考える。 （他の $a_n$ は定数とみなす） この時、制約条件より $$ a_pt_p + a_qt_q = 0-\\sum_{n\\neq p,q} a_nt_n = \\mathrm{const.}$$ が成立する。したがって、 $$ \\frac{\\partial a_q}{\\partial a_p} = -\\frac{t_p}{t_q} =-t_pt_q \\cdots (\\ast)$$ と解析的に偏微分を求めることが可能である。 目的関数 $\\tilde{L}$ の変化量 以下、$K_{ij} = k\\left(\\mathrm{x}_i,\\mathrm{x}_j\\right)$ とおく。ここで、 $$a_p\\mapsto a_p+\\Delta_p, \\quad a_q\\mapsto a_q+\\Delta_q$$ と更新した時、目的関数 $\\tilde{L}$ の変化量 $\\Delta\\tilde{L}$ は、 $$ \\begin{aligned} \\Delta\\tilde{L} &= \\Delta_p + \\Delta_q - \\Delta_pt_p\\sum_{n=1}&#94;Na_nt_nk(\\mathbf{x}_p,\\mathbf{x}_n) - \\Delta_qt_q\\sum_{n=1}&#94;Na_nt_nk(\\mathbf{x}_q,\\mathbf{x}_n)\\\\ &-\\frac{1}{2}\\left[\\Delta_p&#94;2k(\\mathbf{x}_p,\\mathbf{x}_p) + 2\\Delta_p\\Delta_qt_pt_qk(\\mathbf{x}_p,\\mathbf{x}_q) + \\Delta_q&#94;2k(\\mathbf{x}_q,\\mathbf{x}_q)\\right] \\end{aligned} $$ となる。 $(\\ast)$ より $\\Delta_q = -t_pt_q\\Delta_p$ である。 $t_p=t_q(\\Longleftrightarrow\\Delta_q=-\\Delta_p)$ の時と $t_p\\neq t_q$ の時に場合分けをし、それぞれ $\\Delta_p$ で変化量を偏微分して $0$ とおく。 結果は共に等しく、以下で表される。 $$ \\begin{aligned} \\Delta_p &= \\frac{1-t_pt_q + t_p\\left(\\sum_{n=1}&#94;Na_nt_nK_{qn} - \\sum_{n=1}&#94;Na_nt_nK_{pn}\\right)}{K_{pp} - 2K_{pq} + K_{qq}}\\\\ &= \\frac{1-t_pt_q + t_p\\left(y(\\mathbf{x_q}) - y(\\mathbf{x}_q)\\right)}{K_{pp} - 2K_{pq} + K_{qq}}\\\\ \\end{aligned} $$ クリッピング この時、 $t_pa_p+t_qa_q=c$ $a_p\\geq0$ $a_q\\geq0$ が成立していなければならないので、以下を満たすように $\\Delta_p$ の クリッピング を行う必要がある。 $t_p=t_q$ のときは $ 0 \\leq a_p + \\Delta_p \\leq c/t_p$ $t_p=-t_q$ のときは $ \\mathrm{max}\\{0,c/t_p\\}\\leq a_p+\\Delta_p$ 変数の選択方法 最後に、動かす $\\mu_p,\\mu_q$ の選択基準であるが、SMO法の発見者である $John C. Platt$ の論文に従うならば以下の様になる。 $KTT$条件を破る$a_p$を$1$つ目に選ぶ。 続いて、$\\left|y\\left(\\mathbf{x_q}\\right)-y\\left(\\mathbf{x_p}\\right)\\right|$ が最大となる$a_p$を次に選ぶ。 これは、$\\left|y\\left(\\mathbf{x_q}\\right)-y\\left(\\mathbf{x_p}\\right)\\right|$ が大きければそれだけステップ幅も大きくなるため収束が早くなるというヒューリスティックス（直感）である。 これを繰り返して、$\\tilde{L}$ が収束するまで反復を繰り返せば学習完了である。 実装例 kerasy.ML.svm.BaseSVM に記載。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-5.html"},{"title":"ラグランジュ双対問題","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) はじめに このノートは、 Qiita記事『ラグランジュ双対問題について解説』 を引用しています。 ラグランジュ双対関数 ラグランジアン 次の最小化問題を考える. $$ \\begin{aligned} \\min_{x\\in\\mathbb{R}&#94;n} &~ f_0(x)\\\\ \\mathrm{s.t.} &~ f_i(x)\\le 0,~ i=1,\\ldots,m\\\\ &~ h_i(x)=0, ~i=1,\\ldots, p \\end{aligned} $$ 実行可能領域は 空でない とする この最適化問題の 最適値 を \\(p&#94;\\star\\) と書く 凸性は特に仮定しない 主問題 という ラグランジアンは次のように定義される。 $$L(x, \\lambda, \\nu):=f_0(x)+\\sum_{i=1}&#94;m\\lambda_i f_i(x)+\\sum_{i=1}&#94;p\\nu_i h_i(x)$$ \\(\\lambda_i, \\nu_i\\) はラグランジュ未定乗数 ラグランジュ双対関数 ラグランジュ双対関数は次のように定義される. $$ \\begin{aligned} g(\\lambda,\\nu)&:=\\inf_{x\\in D} L(x, \\lambda, \\nu)\\\\ &=\\inf_{x\\in D} \\left(f_0(x)+\\sum_{i=1}&#94;m\\lambda_i f_i(x)+\\sum_{i=1}&#94;p\\nu_i h_i(x)\\right) \\end{aligned} $$ \\(D:=\\bigcap_{i=0}&#94;m \\mathrm{dom}(f_i) \\cap \\bigcap_{i=1}&#94;p \\mathrm{dom}(h_i)\\) 双対関数は, \\((\\lambda,\\nu)\\) のアフィン関数の各点でのinfになっているため, 必ずconcave(上に凸)となる (もとの問題が凸でなくても) 証明してみた: $$ \\begin{aligned} & g(t\\lambda_a+(1-t)\\lambda_b, t\\nu_a+(1-t)\\nu_b)\\\\ =&\\inf_{x\\in\\mathcal{D}}\\left(tL(x,\\lambda_a,\\nu_a)+(1-t)L(x,\\lambda_b,\\nu_b)\\right)\\\\ \\ge& t\\inf_{x\\in\\mathcal{D}}L(x,\\lambda_a,\\nu_a)+(1-t)L(x,\\lambda_b,\\nu_b)\\\\ =& tg(\\lambda_a,\\nu_a)+(1-t)g(\\lambda_b,\\nu_b) \\end{aligned} $$ 最適値の下限 任意の \\(\\lambda\\ge0, \\nu\\) に対して, 次が成り立つ. \\($g(\\lambda,\\nu)\\le p&#94;\\star\\) 証明: \\(\\tilde{x}\\) を実行可能解とする: \\(f_i(\\tilde{x})\\le 0, h_i(\\tilde{x}) = 0\\) \\(\\lambda\\ge 0\\) を仮定 このとき, \\(L(\\tilde{x},\\lambda,\\nu)\\) の値は, \\(f_0(\\tilde{x})\\) でおさえられる: $$ L(\\tilde{x},\\lambda,\\nu)=f_0(\\tilde{x})+\\underbrace{\\sum_{i=1}&#94;{m}\\lambda_if_i(\\tilde{x})}_{\\le0}+\\underbrace{\\sum_{i=1}&#94;{p}\\nu_ih_i(\\tilde{x})}_{=0}\\le f_0(\\tilde{x}) $$ ゆえに, \\(g(\\lambda, \\nu)\\) は \\(f_0(\\tilde{x})\\) でおさえられる: $$ \\therefore~g(\\lambda, \\nu)=\\inf_{x\\in\\mathcal{D}}L(x,\\lambda,\\nu)\\le L(\\tilde{x},\\lambda,\\nu)\\le f_0(\\tilde{x}) $$ 任意の \\(\\tilde{x}\\) に対して, \\(g(\\lambda, \\nu)\\le f_0(\\tilde{x})\\) が成り立つため, \\(g(\\lambda, \\nu)\\le p&#94;\\star\\) が成り立つ. 結論: 双対関数の値は, 主問題の最適値を超えない 線形近似による解釈 元の主問題と等価な次の最小化問題を考える. $$ \\min_{x}~f_0(x)+\\sum_{i=1}&#94;{m}I_-(f_i(x))+\\sum_{i=1}&#94;{p}I_0(h_i(x)) $$ ただし, \\(I_{-},I_{0}\\) は 指示関数 : $$ I_-(u):=\\begin{cases} 0&u\\le 0\\\\ \\infty& u>0 \\end{cases},~~~ I_0(u):=\\begin{cases} 0&u = 0\\\\ \\infty& u\\ne 0 \\end{cases} $$ 最小化するのが目的であるが, 指示関数は制約を満たさないと無限大になってしまう. この指示関数は, 制約違反に対する不満度 を表していると解釈できる. ここで, \\(I_-(u)\\) を \\(\\lambda_i u (\\lambda_i\\ge 0)\\) \\(I_0(u)\\) を \\(\\nu_iu\\) というように指示関数を近似する. $$ \\min_{x}~L(x,\\lambda,\\nu)=f_0(x)+\\sum_{i=1}&#94;{m}\\lambda_i f_i(x)+\\sum_{i=1}&#94;{p}\\nu_i h_i(x) $$ これは制約違反をソフトに近似したものと考えられる もちろん, 制約を違反するほど不満度は上昇するようになっている 不等式制約に関して, 違反しているとき \\(f_i(x)>0\\) であり, \\(\\lambda_if_i(x)\\ge0\\) 任意の \\(u\\) に関して, \\(\\lambda_iu \\le I_-(u)\\) と \\(\\nu_iu \\le I_0(u)\\) が成り立つため, 双対関数が元の主問題の下限を与えることがわかる 共役関数 \\(f\\) の共役関数 \\(f&#94;\\ast\\) は次で定義される. $$ f&#94;*(y)=\\sup_{x\\in\\mathrm{dom} f}(y&#94;\\top x-f(x)). $$ 共役関数と双対問題には密接な関係がある. ( フェンシェル双対定理 ) たとえば, 機械学習のよくある形 $$ \\min_{w\\in\\mathbb{R}&#94;d} f(Xw)+g(w) $$ の双対問題は, $$ \\max_{\\alpha\\in\\mathbb{R}&#94;n} -f&#94;\\ast(-\\alpha)-g&#94;\\ast(X&#94;\\top\\alpha) $$ というように共役関数を使って表現できる. そのため, 凸共役 を覚えておけば, 形式的に双対問題を導出できる. 証明は簡単で, ラグランジアン \\(L(w,z,\\alpha)=f(z)+g(w)+\\alpha&#94;\\top(z-Xw)\\) を考えて, 双対関数の定義にしたがって \\(w\\in\\mathbb{R}&#94;d,z\\in\\mathbb{R}&#94;n\\) に関して最小化するだけだ. ちなみに, このとき最適解 \\(w&#94;\\star,\\alpha&#94;\\star\\) に関して $$ w&#94;\\star \\in \\partial g&#94;\\ast(X&#94;\\top \\alpha&#94;\\star), \\quad \\alpha&#94;\\star \\in -\\partial f(Xw&#94;\\star) $$ が成立する (KKT条件). ラグランジュ双対問題 双対関数から双対問題へ. ラグランジュ双対問題 ここまでで, 双対関数が主問題の下限を与えることを示した. 自然な疑問は, 「ラグランジュ双対関数から得られる最も良い下限はどれくらいなのか?」ということだ. 最も良い下限は次の最大化問題を解くことで得られる. $$ \\begin{aligned} \\max_{\\lambda,\\nu}~&g(\\lambda,\\nu)\\\\ \\mathrm{s.t.} ~&\\lambda\\ge0 \\end{aligned} $$ $ これは, ラグランジュ双対問題 と呼ばれる 双対実行可能領域: \\((\\lambda,\\nu)\\) に関して, \\(\\lambda\\ge0\\) かつ \\(g(\\lambda,\\nu)>-\\infty\\) \\((\\lambda&#94;\\star,\\nu&#94;\\star)\\) : 双対問題の最適解 \\(d&#94;\\star\\) : 双対問題の最適値 双対問題は必ず凸最適化問題 目的関数が必ずconcaveで, 制約が凸であるため これは, 主問題が凸最適化でなくても成り立つ 弱双対性 $$ d&#94;\\star\\le p&#94;\\star $$ 主問題の凸性にかかわらず, 成り立つ この不等式は, \\(p&#94;\\star, d&#94;\\star\\) が発散しないときに成り立つ \\(p&#94;\\star - d&#94;\\star\\) を 双対ギャップ という よく最適化アルゴリズムの停止条件に使われる \\(p&#94;\\star\\) を求めるのことが難しいときに \\(d&#94;\\star\\) を求めることで, \\(p&#94;\\star\\) の下限を知ることができる 双対問題は必ず凸であるため, 多くの場合効率的に解ける 強双対性 $$ d&#94;\\star=p&#94;\\star $$ 主問題の最適値が双対問題の最適値と一致するという性質 強双対性は常には成り立たない もし主問題が凸, すなわち: $$ \\begin{aligned} \\min_{x\\in\\mathbb{R}&#94;n} &~ f_0(x)\\\\ \\mathrm{s.t.} &~ f_i(x)\\le 0, ~i=1,\\ldots,m\\\\ &~ Ax=b \\end{aligned} $$ で \\(f_0,\\ldots,f_m\\) が 凸なら, たいていは(いつもではない)強双対性が成り立つ. たとえば, SVMの最適化問題は凸であり, 強双対性が成り立つため, 主問題/双対問題のどちらを解いてもよい. スレーター条件 次を満たすような \\(x\\in\\mathrm{relint}(D)\\) が存在することをいう. $$ f_i(x)<0,~i=1,\\ldots,m,~~~Ax=b $$ $ 主問題が凸でスレーター条件を満たすとき, 強双対性が成り立つ スレーター条件は強双対性の十分条件である (必要十分ではない) もし, \\(f_1,\\ldots,f_k\\) がアフィンなら, より弱い条件が成り立てばよい: $$ f_i(x)\\le 0,~i=1,\\ldots,k,~~~f_i(x)<0,~i=k+1,\\ldots,m,~~~Ax=b $$ 言い換えれば, アフィンの不等式制約は等号を含んでもよい 補足: int(内部)とrelint(相対的内部) \\(\\mathrm{int}(S)\\) : Sに含まれる最大開集合 Sから境界上の点を取り除いたもの \\(\\mathrm{relint}(S)\\) : Sによって拘束される線形空間上で, Sから境界上の点を取り除いたもの. intとrelintの違いのイメージとしては, まっすぐな下敷きのような平面を考えたとき, intは下敷きの平面ごと取り除いてしまい空集合になるのに対して, relintは下敷きの縁を削って残った部分. Example1 \\(S=\\lbrace(x_1,x_2)\\mid 0\\le x_1\\le 1,x_2=0\\rbrace\\) $$ \\mathrm{int}(S)=\\emptyset, \\mathrm{relint}(S)=\\{(x_1,x_2)\\mid 0 < x_1 < 1,x_2=0\\}, (\\mathrm{aff}(S)=\\{(x_1,x_2)\\in\\mathbb{R}&#94;2\\mid x_2=0\\}) $$ Example2 \\(S= \\lbrace (x_1,x_2)\\mid 0\\le x_1\\le 1,0\\le x_2\\le 1\\rbrace\\) $$ \\mathrm{int}(S)=\\mathrm{relint}(S)=\\{(x_1,x_2)\\mid 0 < x_1 < 1,0<x_2<1\\}, (\\mathrm{aff}(S)=\\{(x_1,x_2)\\in\\mathbb{R}&#94;2\\}) $$ 最適性条件 特に主問題の凸性を仮定しない. 相補性条件 特に, 強双対性条件を満たすと仮定すると, $$ \\begin{aligned} f_0(x&#94;\\star)&=g(\\lambda&#94;\\star,\\nu&#94;\\star)\\\\ &=\\inf_{x\\in D} \\left(f_0(x)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star h_i(x)\\right)\\\\ &\\le f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star h_i(x&#94;\\star)\\\\ &\\le f_0(x&#94;\\star) \\end{aligned} $$ 1行目: 強双対性 2行目: 双対関数の定義 3行目: \\(\\inf\\) の定義 4行目: \\(\\lambda_i&#94;\\star\\ge0, f_i(x&#94;\\star)\\le0, ~i=1,\\ldots,m\\) と \\(h_i(x&#94;\\star)=0, ~i=1,\\ldots,p\\) 1,3行目と3,4行目を考慮すると, $$ \\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x&#94;\\star)=0. $$ 和の各項は非負であるため, $$ \\lambda_i&#94;\\star f_i(x&#94;\\star)=0,~~~i=1,\\ldots,m. $$ これを相補性条件という もし \\(\\lambda_i&#94;\\star>0\\) なら, \\(f_i(x&#94;\\star)=0\\) もし \\(f_i(x&#94;\\star)<0\\) なら, \\(\\lambda_i&#94;\\star=0\\) KKT条件 (Karush-Kuhn-Tucker条件) 強双対性を仮定すると, \\(x&#94;\\star\\) は \\(L(x,\\lambda&#94;\\star,\\nu&#94;\\star)\\) を最小化するため, \\(x&#94;\\star\\) における勾配は0である: $$ \\nabla f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star \\nabla f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star\\nabla h_i(x&#94;\\star)=0 $$ ゆえに, 最適解で成り立つ式を列挙すると: \\(f_i(x&#94;\\star)\\le 0,~i=1,\\ldots,m\\) \\(h_i(x&#94;\\star)= 0,~i=1,\\ldots,p\\) \\(\\lambda_i\\ge0,~i=1,\\ldots,m\\) \\(\\lambda_i f_i(x&#94;\\star)= 0,~i=1,\\ldots,m\\) \\(\\nabla f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star \\nabla f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star\\nabla h_i(x&#94;\\star)=0\\) これがいわゆる KKT条件 である. (必要条件) まとめると, 強双対性を満たすなら, 最適解において主変数と双対変数はKKT条件を満たさなければならない. 主問題が凸であるとき, KKT条件は十分条件にもなる. つまり, ある点 \\(\\tilde{x},\\tilde{\\lambda}, \\tilde{\\nu}\\) がKKT条件を満たすなら, \\(\\tilde{x}=x&#94;\\star, \\tilde{\\lambda}=\\lambda&#94;\\star, \\tilde{\\nu}=\\nu&#94;\\star\\) . 十分条件の証明: $$ \\begin{aligned} g(\\tilde{\\lambda},\\tilde{\\nu})&=L(\\tilde{x},\\tilde{\\lambda},\\tilde{\\nu})\\\\ &= f_0(\\tilde{x})+\\sum_{i=1}&#94;m\\tilde{\\lambda}_i f_i(\\tilde{x})+\\sum_{i=1}&#94;p\\tilde{\\nu}_i h_i(\\tilde{x})\\\\ &= f_0(\\tilde{x}) \\end{aligned} $$ 1行目: \\(\\tilde{x}\\) がKKT条件の最後の条件を満たすため 主問題が凸であるため, \\(L(x,\\tilde{\\lambda},\\tilde{\\nu})\\) は \\(x\\) に関して凸である ( \\(\\because\\tilde{\\lambda}_i\\ge0\\) ) \\(\\therefore~L\\) を最小化する \\(x\\) は, 勾配が0である 2行目: ラグランジアンの定義 3行目: \\(\\tilde{x}\\) がKKT条件の2つ目と4つ目を満たすため この式は, 双対ギャップが0であることを意味するため, \\(\\tilde{x},\\tilde{\\lambda}, \\tilde{\\nu}\\) は最適解である. 結論: スレーター条件を満たすとき, KKT条件は最適性の必要十分条件となる if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-4.html"},{"title":"サポートベクターマシーン(SVM)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: seed = 0 サポートベクターマシーン(SVM) マージン最大化 に基づく線形識別器 カーネル関数と組み合わせることによって非線形な識別も可能 サンプル間の類似度にしか依存しない （→非ベクトルデータの分類にも適用可能 ） まとめ マージン最大化 という方針で誤差関数を定義する。 汎化性能を高めるために、 スラック変数 を導入して ソフトなマージン最大化に緩和 する ラグランジュ未定乗数法 を用いてラグランジュ関数を得る。 各パラメータについて微分する。 ラグランジュ関数に代入して 双対問題 を得る。 SMO法 などを用いて二次計画問題である双対問題を解く。 無効制約のデータ点は識別関数に影響しなくなる。 （SVMが疎になる。） マージン最大化 「個々のデータに関して確率計算をし、何らかの識別面を求める」 のではなく、 「汎化性能の最も高い識別面を直接考える」 そこで、 「マージン最大化」 という方針で識別面を最適化する。（正則化理論・VC理論により正当化されている。） 最も近いデータ $\\phi(\\mathbf{x}_n)$ までの距離（ マージン ）が最大となるような識別面を選ぶ。（ここでは、距離＝ユークリッド距離とする。） 識別面からちょうどマージンの分だけ離れた面上に乗る特徴ベクトル（一般に複数）を、(広義の) サポートベクトル (support vector) と呼ぶ。 学習法の定式化（2クラス分類） ※ 二クラスが線形分離可能であると仮定する。 線形識別関数が $y(\\mathbf{x}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x})+b$ で表され、$y(\\mathbf{x})$ の正負でクラスを識別するとする。 $y(\\mathbf{x})>0$ の時 $t=1$ $y(\\mathbf{x})<0$ の時 $t=-1$ したがって、 $t_ny(\\mathbf{x}_n)>0$ が全てのデータ $(\\mathbf{x}_n,t_n)$ に対して成り立つ （∵特徴空間で線形分離可能） 学習の目的は「パラメータ $\\mathbf{w}$ と $b$ を決定すること」。 データと識別面の最小距離は $1 / \\|\\mathbf{w}\\|$ で表される。（理由は以下） ※ 記述を簡単にするために線形識別問題の場合で考えるが、非線形写像 $\\phi$ を通しても同様の議論が成り立つ。 点 $\\mathbf{x}_n$ から識別面に下ろした垂線の足を $\\mathbf{x}_{n\\perp}$ 点 $\\mathbf{x}_n$ から識別面までの符号付き距離を $d_n$ と定義すると、 $\\mathbf{w}$ が識別面の法ベクトルであるから、 $\\mathbf{x}_{n\\perp} = \\mathbf{x}_n - d_n\\frac{\\mathbf{w}}{\\|\\mathbf{w}\\|}$ と表せる。 $\\mathbf{x}_{n\\perp}$ は識別面上にあるので、$\\mathbf{w}&#94;T\\mathbf{x}_{n\\perp} + b = 0$ が成り立つ。 したがって、 $$\\mathbf{w}&#94;T\\left(\\mathbf{x}_n - d_n\\frac{\\mathbf{w}}{\\|\\mathbf{w}\\|}\\right) + b = 0\\qquad \\therefore d_n = \\frac{\\mathbf{w}&#94;T\\mathbf{x}_n + b}{\\|\\mathbf{w}\\|}$$ として距離 $d_n$ が定義できる。ここで、$(\\mathbf{w},b)\\rightarrow(k\\mathbf{w},kb)$ としても $d_n$ の値は不変なので、 $$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n + b \\right)= 1\\qquad (7.4)$$ とスケーリングしても一般性を失わない。 なお、 このスケーリング下では、全てのデータ $\\mathbf{x}_n$ に対して $$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n + b \\right) \\geq 1\\qquad (7.5)$$ が成り立つ。 ここまでをまとめると、 マージン最大 は、 『$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n+b\\right)\\geq1\\quad(i=1,\\ldots,n)$ という条件下で、$\\frac{1}{2}||\\mathbf{w}||&#94;2$ を最小化する問題』 であると言える。 この制約付き最適化問題を解くために、$(7.5)$ の各制約式ごとにラグランジュ乗数 $a_n\\geq0$ を導入すると、次のラグランジュ関数が得られる。 $$L(\\mathbf{w},b,\\mathbf{a}) = \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2 - \\sum_{n=1}&#94;{N}a_n\\left\\{t_n\\left(\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n) + b\\right) - 1\\right\\}\\qquad (7.7)$$ よって、$\\mathbf{w},b$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) =0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) & (7.8)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_nt_n = 0 \\quad\\therefore\\sum_{n=1}&#94;Na_n&#94;{\\ast}t_n = 0 & (7.9)\\\\ \\end{aligned} $$ が得られる。これらの結果を $(7.7)$ に代入して $\\mathbf{w},b$ を消去すると、元の問題は以下の 双対問題 に変換される。 $$ \\tilde{L}(\\mathbf{a}) =\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.10)$$ なお、$\\mathbf{a}$ は以下の制約を満たす。 $$ \\begin{aligned} a_n & \\geq 0,\\quad n=1,\\ldots,N & (7.11)\\\\ \\sum_{n=1}&#94;Na_nt_n &= 0 & (7.12) \\end{aligned} $$ また、カーネル関数 $k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ は、$k(\\mathbf{x},\\mathbf{x}&#94;{\\prime}) = \\phi(\\mathbf{x})&#94;T\\phi(\\mathbf{x})$ と定義される。 この双対問題は二次計画問題であり、 逐次最小問題最適化法(SMO;sequential minimal optimization) などで解くことができる。 なお、今回の場合、 制約条件が全て線形 であることから 実行可能域が凸領域 であることがわかるので、 任意の局所解が大局解になる。 一旦最適な $\\mathbf{a}$ が求まると、識別関数 $y(\\mathbf{x})$ は、 $$y(\\mathbf{x}) = \\mathbf{w}&#94;{\\ast T}\\phi(\\mathbf{x})+b = \\sum_{n=1}&#94;N a_nt_nk(\\mathbf{x},\\mathbf{x}_n) + b \\qquad (7.13)$$ として表すことができる。ここで、 KKT条件より $a_n=0\\Leftrightarrow t_ny(\\mathbf{x}_n)-1>0$ のデータは識別関数に影響しないので、計算から除外することができる。（SVMが疎になる理由） なお、バイアスパタメータ $b$ は、任意のサポートベクトル $\\mathbf{x}_n$ が $t_ny(\\mathbf{x}_n) = 1$ を満たすことから、 $$ \\begin{aligned} &t;_n\\left(\\sum_{m\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m) + b\\right) = 1 & (7.17)\\\\ &\\therefore b&#94;{\\ast}= \\frac{1}{N_{\\mathcal{S}}}\\sum_{n\\in\\mathcal{S}}\\left(t_n-\\sum_{n\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\right)&(7.18) \\end{aligned} $$ として求めることができる。（数値計算の誤差の影響を小さくするため、$(7.17)$ の両辺に $t_n$ をかけ、全てのサポートベクトルで平均をとった。 In [3]: from kerasy.ML.svm import hardSVC In [4]: n_cls1 = 20 ; n_cls2 = 20 N = n_cls1 + n_cls2 In [5]: train_x = np . concatenate ([ np . random . RandomState ( seed ) . normal ( loc = [ 0.5 , 0 ], scale = [ 0.2 , 0.4 ], size = ( n_cls1 , 2 )), np . random . RandomState ( seed ) . normal ( loc = [ - 0.5 , 0 ], scale = [ 0.2 , 0.4 ], size = ( n_cls2 , 2 )) ]) train_y = np . concatenate ([ np . ones ( shape = n_cls1 ), - np . ones ( shape = n_cls2 ) ]) In [6]: X , Y = np . meshgrid ( np . linspace ( - 1 , 1 , 100 ), np . linspace ( - 1 , 1 , 100 )) In [7]: kernels = [ \"linear\" , \"polynomial\" , \"gaussian\" , \"sigmoid\" , \"laplacian\" , \"inverse_multiquadric\" ] In [8]: n_fig = len ( kernels ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i , kernel in enumerate ( kernels ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) model = hardSVC ( kernel = kernel ) model . fit ( train_x , train_y , max_iter = 1500 , sparse_memorize = False ) Z = np . vectorize ( lambda x , y : model . predict ( np . array ([ x , y ]) . reshape ( 1 , - 1 )))( X , Y ) == 1 ax . pcolor ( X , Y , Z , alpha = 0.3 ) for i in range ( N ): alpha = 1 if i in model . isSV () else 0.3 color = \"red\" if train_y [ i ] == 1 else \"blue\" ax . plot ( train_x [ i , 0 ], train_x [ i , 1 ], marker = \"o\" , color = color , markersize = 10 , alpha = alpha ) ax . set_title ( f \" {kernel} kernel\" ) ax . set_xlim ( - 1 , 1 ), ax . set_ylim ( - 1 , 1 ) plt . tight_layout () plt . show () ソフトマージン ここまで、 「二クラスが線形分離可能である」 という仮定を置いていたが、実際の問題では クラスの分布が重なる場合 があり、そのような場合訓練データを完全に分離する解が汎化能力に優れるとは限らない（というより、過学習する。） そこで、各学習データ $(\\mathbf{x}_n,t_n)$ に対して、 スラック変数 (slack variable) $\\xi_n\\geq 0$ を導入して、 $$ t_ny(\\mathbf{x}_n) \\geq 1 \\Longrightarrow t_ny(\\mathbf{x}_n) \\geq 1 - \\xi_n \\qquad (7.20)$$ と条件を緩める。 （ハードマージンの制約のソフトマージンへの緩和） つまり、 $\\xi_n > 1$ となるデータは誤識別している事になる。 ここでの目標は 『マージンよりも内側（$\\xi_n>0$）のデータ $n$ に対してソフトにペナルティを与えつつマージンを最大化する』 ことである。したがって、次の目的関数を最小化する。 $$C\\sum_{n=1}&#94;N\\xi_n + \\frac{1}{2}\\|\\mathbf{x}_n\\| \\qquad (7.21)$$ なお、$C>0$ は スラック変数を用いて表されるペナルティとマージンの大きさの間の トレードオフを制御するパラメータ である。 したがって、この最小化問題のラグランジュ関数は、新たにラグランジュ乗数 $\\{\\mu_n\\}$ を導入して以下のようになる。 $$L(\\mathbf{w},b,\\boldsymbol{\\xi},\\mathbf{a},\\boldsymbol{\\mu}) = \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2 + C\\sum_{n=1}&#94;N\\xi_n - \\sum_{n=1}&#94;{N}a_n\\left\\{t_n\\left(\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n) + b\\right) - 1 + \\xi_n\\right\\} - \\sum_{n=1}&#94;N\\mu_n\\xi_n\\qquad (7.22)$$ 先程同様 $\\mathbf{w},b,\\xi_n$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) =0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) & (7.29)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_nt_n = 0 \\quad\\therefore\\sum_{n=1}&#94;Na_n&#94;{\\ast}t_n = 0 & (7.30)\\\\ \\frac{\\partial L}{\\partial \\xi_n} &= C-a_n-\\mu_n \\quad\\therefore a_n = C-\\mu_n & (7.31) \\end{aligned} $$ が得られる。これらの結果を $(7.22)$ に代入すると、以下の 双対形のラグランジュ関数 が得られる。 $$ \\tilde{L}(\\mathbf{a}) =\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.32)$$ これは、先程の $(7.10)$ と同様の形である。なお、制約式は $$ \\begin{aligned} &a;_n \\geq 0,\\mu_n\\geq 0 \\quad n=1,\\ldots,N\\\\ &\\therefore 0\\leq a_n \\leq C & (7.33)\\\\ &\\sum_{n=1}&#94;Na_nt_n = 0 & (7.34) \\end{aligned} $$ である。 なお、バイアスパタメータ $b$ は、サポートベクトルは $a_n>0$ を満たすが、KKT条件より $a_n$ $\\mu_n$ $\\xi_n$ 説明 $a_n=0$ 識別関数に影響を及ぼさない。 $a_n $\\mu_n>0$ $\\xi_n=0$ ちょうどマージン境界上ある。 $a_n=C$ $\\mu_n=0$ $\\xi_n>0$ マージン内に侵入している。 となることから、$0 $$ \\begin{aligned} &t;_n\\left(\\sum_{m\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m) + b\\right) = 1 & (7.36)\\\\ &\\therefore b&#94;{\\ast}= \\frac{1}{N_{\\mathcal{M}}}\\sum_{n\\in\\mathcal{M}}\\left(t_n-\\sum_{n\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\right)&(7.37) \\end{aligned} $$ として求めることができる。 In [9]: from kerasy.ML.svm import SVC In [10]: train_x = np . concatenate ([ np . random . RandomState ( seed ) . normal ( loc = [ 0.2 , 0.2 ], scale = [ 0.2 , 0.4 ], size = ( n_cls1 , 2 )), np . random . RandomState ( seed ) . normal ( loc = [ - 0.2 , - 0.2 ], scale = [ 0.3 , 0.2 ], size = ( n_cls2 , 2 )) ]) train_y = np . concatenate ([ np . ones ( shape = n_cls1 ), - np . ones ( shape = n_cls2 ) ]) In [11]: params = [ ( 1e-2 , 1e-2 ),( 1e-2 , 1e0 ),( 1e-2 , 1e2 ), ( 1e1 , 1e-2 ),( 1e1 , 1e0 ),( 1e1 , 1e2 ), ( 1e4 , 1e-2 ),( 1e4 , 1e0 ),( 1e4 , 1e2 ), ] In [12]: n_fig = len ( params ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i ,( C , sigma ) in enumerate ( params ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) model = SVC ( kernel = \"gaussian\" , C = C , sigma = sigma ) model . fit ( train_x , train_y , max_iter = 1500 , sparse_memorize = False ) Z = np . vectorize ( lambda x , y : model . predict ( np . array ([ x , y ]) . reshape ( 1 , - 1 )))( X , Y ) == 1 ax . pcolor ( X , Y , Z , alpha = 0.3 ) for i in range ( N ): alpha = 1 if i in model . isSV () else 0.3 color = \"red\" if train_y [ i ] == 1 else \"blue\" ax . plot ( train_x [ i , 0 ], train_x [ i , 1 ], marker = \"o\" , color = color , markersize = 10 , alpha = alpha ) ax . set_title ( f \"gaussian kernel (C= {C} , $\\sigma= {sigma} $)\" ) ax . set_xlim ( - 1 , 1 ), ax . set_ylim ( - 1 , 1 ) plt . tight_layout () plt . show () 多クラスSVM SVMは本来2クラス識別の為の分類器であるが、これを複数組み合わせるなどの方法によって $K>2$クラスの識別に利用する事が出来る。最もよく用いられる方法は、 one-versus-the-rest方式 と呼ばれる方法であり、「データ $\\mathbf{x}$ が クラス $k$ かそれ以外であるか を識別するSVM $y_k(\\mathbf{x})$ を $K$ クラスそれぞれについて構築し、$ y(\\mathbf{x}) = \\mathop{\\rm arg~max}\\limits_{k}y_k(\\mathbf{x})$ によって $\\mathbf{x}$ のクラスを決定する」 SVM回帰 単純な線形回帰問題においては、次の式で定義される正則化された誤差関数を最小化する。 $$\\frac{1}{2}\\sum_{n=1}&#94;N\\{y_n-t_n\\}&#94;2 + \\frac{\\lambda}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.50)$$ 疎な解を得るために、二条誤差関数を $\\epsilon$ 許容誤差関数($\\epsilon$-insentive error function) で置き換える。つまり、予測値 $y(\\mathbf{x})$ と観測値 $t$ の差が $\\epsilon(>0)$ 未満のときは、$\\epsilon$ 許容誤差関数の値は $0$ となる。$\\epsilon$ 許容誤差関数の簡単な例は、 「許容範囲外の値に関しては線形のコストを生じさせる」 ものである。 $$ \\begin{aligned} E_{\\epsilon}\\left(y(\\mathbf{x})-t\\right) = \\begin{cases} 0 & (\\text{ when }|y(\\mathbf{x} - t)| < \\epsilon)\\\\ |y(\\mathbf{x} - t)| - \\epsilon & (\\text{ otherwise }) \\end{cases}\\qquad (7.51) \\end{aligned} $$ In [13]: squareError = lambda x , y_true : 1 / 2 * ( x - y_true ) ** 2 # Sum of Squares Error function epsilonError = lambda x , y_true , epsilon = 1 : 0 if abs ( x - y_true ) < epsilon else abs ( x - y_true ) - epsilon In [14]: X = np . linspace ( - 2 , 2 , 1000 ) plt . plot ( X ,[ squareError ( x , y_true = 0 ) for x in X ], color = \"black\" , label = \"sum of squares error function\" , linestyle = \"--\" ) plt . plot ( X ,[ epsilonError ( x , y_true = 0 ) for x in X ], color = \"black\" , label = \"$\\epsilon$-insentive error function\" ) plt . scatter ( 0 , 0 , marker = \"x\" , color = \"red\" , label = \"y_true\" ) plt . title ( \"Error function comparison\" , fontsize = 16 ), plt . xlim ( - 2 , 2 ), plt . ylim ( -. 1 , 2 ) plt . xlabel ( \"$x$\" , fontsize = 16 ), plt . ylabel ( \"$E(x)$\" , fontsize = 16 ) plt . legend () plt . show () この $\\epsilon$ 許容誤差関数を用いると、結局次の正則化された誤差関数を最小化することになる。 $$C\\sum_{n=1}&#94;NE_{\\epsilon}\\left(y(\\mathbf{x}_n)-t_n\\right) + \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.52)$$ 分類問題と同様、この最適化問題をスラック変数 $\\xi_n,\\hat{\\xi}_n$ を導入して表現する。 $\\epsilon$ チューブの中に位置するという条件は $y_n-\\epsilon\\leq t_n \\leq y_n+\\epsilon$ と表せるので、チューブの外側にデータ点が存在することを許すような制約条件は以下のようにかける。 $$ \\begin{aligned} t_n&\\leq y(\\mathbf{x}_n) + \\epsilon + \\xi_n & (7.53)\\\\ t_n&\\geq y(\\mathbf{x}_n) - \\epsilon - \\xi_n & (7.54)\\\\ \\end{aligned} $$ よって、スラック変数を用いると、SVM回帰の誤差関数は次のようにかける。 $$C\\sum_{n=1}&#94;N\\left(\\xi_n + \\hat{\\xi}_n\\right) + \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.55)$$ したがって、この最小化問題のラグランジュ関数は、ラグランジュ乗数 $a_n,\\hat{a}_n,\\mu_n,\\hat{\\mu}_n$ を導入して以下のようになる。（$y(\\mathbf{x}_n)= \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)+b$） $$ \\begin{aligned} L &=C\\sum_{n=1}&#94;N\\left(\\xi_n+\\hat{\\xi}_n\\right)+\\frac{1}{2}\\|\\mathbf{w}\\|&#94;2-\\sum_{n=1}&#94;N\\left(\\mu_n\\xi_n+\\hat{\\mu}_n\\hat{\\xi}_n\\right)\\\\ &-\\sum_{n=1}&#94;Na_n\\left(\\epsilon + \\xi_n + y_n - t_n \\right)-\\sum_{n=1}&#94;N\\hat{a}_n\\left(\\epsilon + \\hat{\\xi}_n - y_n + t_n\\right) \\qquad (7.56)\\\\ \\end{aligned} $$ これまで同様 $\\mathbf{w},b,\\xi_n,\\hat{\\xi}_n$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;Na_n\\phi(\\mathbf{x}_n)-\\sum_{n=1}&#94;N\\hat{a}_n\\phi(\\mathbf{x}_n)=0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N \\left(a_n-\\hat{a}_n\\right)\\phi(\\mathbf{x}_n) & (7.57)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_n + \\sum_{n=1}&#94;N\\hat{a}_n = 0 \\quad\\therefore\\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right) = 0 & (7.58)\\\\ \\frac{\\partial L}{\\partial \\xi_n} &= C-a_n-\\mu_n \\quad\\therefore a_n + \\mu_n = C & (7.59)\\\\ \\frac{\\partial L}{\\partial \\hat{\\xi}_n} &= C-\\hat{a}_n-\\hat{\\mu}_n \\quad\\therefore \\hat{a}_n + \\hat{\\mu}_n = C & (7.60)\\\\ \\end{aligned} $$ が得られる。これらの結果を $(7.56)$ に代入すると、以下の 双対形のラグランジュ関数 が得られる。 $$ \\begin{aligned} \\tilde{L}(\\mathbf{a},\\hat{\\mathbf{a}}) &= -\\frac{1}{2}\\sum_{n=1}&#94;N\\sum_{m=1}&#94;N\\left(a_n-\\hat{a}_n\\right)\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\\\ &- \\epsilon\\sum_{n=1}&#94;N\\left(a_n + \\hat{a}_n\\right) + \\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right)t_n \\end{aligned} \\qquad (7.61) $$ なお、制約式は $$ \\begin{aligned} 0 \\leq a_n &\\leq C & (7.62)\\\\ 0 \\leq \\hat{a}_n &\\leq C & (7.63) \\end{aligned} $$ である。したがって、新しい入力に対する予測値は $$y(\\mathbf{x}) = \\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right)k(\\mathbf{x},\\mathbf{x}_n) + b\\qquad (7.64)$$ とカーネル関数のみを用いて計算できることがわかる。 なお、バイアスパタメータ $b$ は次のように計算できる。 $C>a_n>0$ が成り立つデータ点についてはKKT条件より $\\xi_n = 0 \\quad \\therefore \\epsilon+y_n-t_n=0$ が成り立つ。よって、 $$ \\begin{aligned} b &= t_n - \\epsilon - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\\\ &= t_n - \\epsilon - \\sum_{m=1}&#94;N\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.69) \\end{aligned} $$ $C>\\hat{a}_n>0$ が成り立つデータ点についてはKKT条件より $\\hat{\\xi}_n = 0 \\quad \\therefore \\epsilon+y_n-t_n=0$ が成り立つ。よって、 $$ \\begin{aligned} b &= t_n - \\epsilon - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\\\ &= t_n - \\epsilon - \\sum_{m=1}&#94;N\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.69) \\end{aligned} $$ なお、このようにして得られた $b$ の値を全て平均した結果を用いると数値誤差の影響を小さくできる。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-3.html"},{"title":"ラグランジュ未定乗数法","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 条件なし最適化 ある関数 \\(f\\) が与えられた時、それが最小値を取る点を見つけ出す。 $$\\text{min : } f(\\mathbf{x})$$ したがって、微分をとって \\(0\\) になる点を見つければ良い。 $$\\frac{\\partial}{\\partial x}f(x) = 0\\Longrightarrow x&#94;{\\ast}$$ 等式制約付き最適化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g(\\mathbf{x})=0\\\\ \\end{aligned} $$ ラグランジュ乗数(Lagrangian multiplier) と呼ばれるパラメータ \\(\\lambda\\) を導入した ラグランジュ関数(Lagrangian function) $$L(\\mathbf{x},\\lambda) \\equiv f(\\mathbf{x})+\\lambda g(\\mathbf{x})\\qquad (E.4)$$ の \\(\\mathbf{x}\\) と \\(\\lambda\\) の両方に対する停留点（鞍点）を見つければ、制約付き問題の最適解が得られる。 理由 以下２つの理由より、 \\(\\nabla f\\) と \\(\\nabla g\\) は、 向きが逆の場合も含めて 平行なベクトルとなる。したがって、 あるパラメータ \\(\\lambda\\neq0\\) が存在して、 $$\\nabla f + \\lambda\\nabla g = 0\\qquad (E.3)$$ が成立しなければならない。これは、 \\(\\nabla_{\\mathbf{x}}L=0\\) と表されることがわかる。また、 \\(\\partial L/\\partial\\lambda = 0\\) より、制約式 \\(g(\\mathbf{x})=0\\) も導かれる。 1) \\(\\nabla g(\\mathbf{x})\\) が制約面 \\(g(\\mathbf{x})=0\\) に対して常に垂直 制約面 \\(g(\\mathbf{x})\\) 上の点 \\(\\mathbf{x}\\) と \\(\\mathbf{x}+\\boldsymbol{\\varepsilon}\\) を考える。 すると、 \\(\\mathbf{x}\\) の周りでの \\(g(\\mathbf{x})\\) のテイラー展開より、 $$g(\\mathbf{x} + \\boldsymbol{\\varepsilon}) \\sim g(\\mathbf{x}) + \\boldsymbol{\\varepsilon}&#94;T\\nabla g(\\mathbf{x})\\qquad (E.2)$$ いま、 \\(\\mathbf{x}\\) と \\(\\mathbf{x}+\\boldsymbol{\\varepsilon}\\) は共に制約面上に存在するので $$g(\\mathbf{x})=g(\\mathbf{x}+\\boldsymbol{\\varepsilon})=0$$ が成り立つ。ゆえに、 \\(\\|\\boldsymbol{\\varepsilon}\\|\\rightarrow0\\) の極限では \\(\\boldsymbol{\\varepsilon}&#94;T\\nabla g(\\mathbf{x})\\sim0\\) が成り立つ。 \\(\\boldsymbol{\\varepsilon}&#94;T\\) は制約面上の接線である。 より、ベクトル \\(\\nabla g(\\mathbf{x})\\) は制約面 \\(g(\\mathbf{x})=0\\) に対して垂直である。 2) \\(\\nabla f(\\mathbf{x}&#94;{\\ast})\\) も制約面に対して垂直 もし \\(\\nabla f(\\mathbf{x}&#94;{\\ast})\\) が制約面に対して垂直でないとすると、制約面にそって \\(f(\\mathbf{x})\\) の値がさらに大きくなるように点を動かすことができるはずである。 したがって、制約面上の点で \\(f(\\mathbf{x})\\) を最大化する点 \\(\\mathbf{x}&#94;{\\ast}\\) においては、ベクトル \\(\\nabla f(\\mathbf{x})\\) も制約面に対して垂直でなければならない。 不等式制約付き最適化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g(\\mathbf{x})\\leq0\\\\ \\end{aligned} $$ ここで、解 \\(\\mathbf{x}&#94;{\\ast}\\in\\Omega\\) には、 無効制約(inactive constraint) \\(\\overset{\\text{def}}{\\Longleftrightarrow}g(\\mathbf{x}&#94;{\\ast}) < 0\\) 有効制約(active constraint) \\(\\overset{\\text{def}}{\\Longleftrightarrow}g(\\mathbf{x}&#94;{\\ast}) = 0\\) の2つの可能性がある。 $$ \\Omega:= \\left\\{\\mathbf{x}\\in\\mathbb{R}&#94;D: g(\\mathbf{x})<0 \\right\\} $$ 無効制約の場合 無効制約 \\(\\left(g(\\mathbf{x})<0\\right)\\) の場合、関数 \\(g(\\mathbf{x})\\) は何も制約を課していないのと同様なので、停留条件は単に \\(\\nabla f(\\mathbf{x}) = 0\\) となる。 なお、これは上記の 等式制約におけるラグランジュ関数 \\((E.4)\\) において \\(\\lambda=0\\) とした場合の停留条件に等しい。 有効制約の場合 有効制約 \\(\\left(g(\\mathbf{x})=0\\right)\\) の場合、 等式制約におけるラグランジュ関数 \\((E.4)\\) において \\(\\lambda\\neq0\\) とした場合の停留条件に等しい。 ただし、 \\(-\\nabla f(\\mathbf{x}&#94;{\\ast})\\) は \\(g(\\mathbf{x})<0\\) の外側へと向かうはず だから、 あるパラメータ \\(\\lambda>0\\) が存在して、 $$\\nabla f(\\mathbf{x}) = -\\lambda\\nabla g (\\mathbf{x})$$ が成立しなければならない。 勾配 意味 最適化問題における問題における意味 \\(\\nabla f(\\mathbf{x})\\) \\(f\\) が大きくなる方向 目的とは別の方向 \\(\\nabla g(\\mathbf{x})\\) \\(g\\) が大きくなる方向 \\(g(\\mathbf{x})<0\\) の外側へと向かう方向 KKT条件 上記の無効制約・有効制約のどちらの場合にせよ、 \\(\\lambda g(\\mathbf{x})=0\\) が成立することがわかる。 したがって、 \\(g(\\mathbf{x})\\leq0\\) という制約の下で \\(f(\\mathbf{x})\\) を最小化するには、以下の Karush-Kuhn-Tucker(KKT)条件 のもとで、 \\(\\mathbf{x},\\lambda\\) に関して ラグランジュ関数 \\((E.4)\\) の停留点を求めれば良い。 $$ \\begin{aligned} \\begin{cases} \\text{Primal feasibility} &g(\\mathbf{x})\\leq0 & (E.9)\\\\ \\text{Dual feasibility} &\\lambda \\geq 0 & (E.10)\\\\ \\text{Complementary slackness} &\\lambda g(\\mathbf{x}) = 0 & (E.11) \\end{cases} \\end{aligned} $$ なお、当然ではあるが、「制約条件の符号の向き」と「目的関数の最大化・最小化」には以下の関係がある。（ \\(\\lambda\\geq0\\) ） 目的関数 \\(f(\\mathbf{x})\\) 制約条件 \\(g(\\mathbf{x})\\) ラグランジュ関数 \\(L(\\mathbf{x},\\lambda)\\) \\(\\min f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\leq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) + \\lambda g(\\mathbf{x})\\) \\(\\min f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\geq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) - \\lambda g(\\mathbf{x})\\) \\(\\max f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\leq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) - \\lambda g(\\mathbf{x})\\) \\(\\max f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\geq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) + \\lambda g(\\mathbf{x})\\) 一般化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g_j(\\mathbf{x})=0 & (j=1,\\ldots,J)\\\\ & h_k(\\mathbf{x})\\leq0 & (k=1,\\ldots,K)\\\\ \\end{aligned} $$ 以下のラグランジュ関数を最適化する。 $$L\\left(\\mathbf{x},\\{\\lambda_j\\},\\{\\mu_k\\}\\right) = f(\\mathbf{x}) + \\sum_{j=1}&#94;J\\lambda_jg_j(\\mathbf{x}) + \\sum_{k=1}&#94;K\\mu_kh_k(\\mathbf{x})\\qquad (E.12)$$ ここで、KKT条件は、以下となる。 $$ \\begin{aligned} \\begin{cases} \\text{Primal feasibility} &g_j(\\mathbf{x})=0,h_k(\\mathbf{x})\\leq0 \\\\ \\text{Dual feasibility} &\\mu_k \\geq 0\\\\ \\text{Complementary slackness} &\\mu_kh_k(\\mathbf{x}) = 0 \\end{cases} \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-2.html"},{"title":"カーネル法","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt 講義の構成 パターン認識 カーネル法の紹介 最適化理論の復習 サポートベクターマシーン パターン認識 対象を識別するルールを訓練データより、自動的に取得する。 各対象を全データ共通次元のベクトルで表現すれば、識別関数 $f(\\mathbf{x})$ は、特徴空間上に定義される。 元の空間 （入力空間） を非線形に写像すれば、写像先 （特徴空間） で線形識別することで非線形識別が達成される。 $$\\phi:\\mathbf{X}\\rightarrow\\mathbb{R}&#94;m$$ どのように写像を定めるかは難しい問題。 カーネル法の紹介 上で紹介した写像を、 類似度関数（カーネル関数） に基づいて決める手法。（例：ガウシアンカーネル $K(\\mathbf{x},\\mathbf{x}&#94;{\\prime}) = \\exp\\left(-\\frac{\\|\\mathbf{x}-\\mathbf{x}&#94;{\\prime}\\|}{\\sigma}\\right)$） 類似度さえ定義できればどのような対象（例：生物学的ネットワーク上のタンパク質の分類）にでも適用できる。 複雑な問題になると非常に高い次元に写像する必要があるが、カーネル関数さえ求められれば写像 $\\phi$ を陽に求める必要はない （カーネルトリック） 。 $k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ が有効なカーネル関数であるための必要十分条件は、任意の $\\{\\mathbf{x}_n\\}$ に対して、要素が $k(\\mathbf{x}_n,\\mathbf{x}_m)$ で与えられるグラム行列 $\\mathbf{K}$ が半正定値であること。 新しいカーネル関数を定義してそれが有効な関数かを確認するのは大変なので、次の性質を用いて新たな関数を定義することが多い。 新たなカーネル関数を構築するための方法 有効なカーネルとして $k_1(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ と $k_2(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ が与えられた時、次の関数もやはりカーネル関数として有効である。 $$\\begin{aligned} k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=c k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) & (6.13)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=f(\\mathbf{x}) k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) f\\left(\\mathbf{x}&#94;{\\prime}\\right) & (6.14)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=q\\left(k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.15)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=\\exp \\left(k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.16)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)+k_{2}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)& (6.17)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) k_{2}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) & (6.18)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{3}\\left(\\phi(\\mathbf{x}), \\phi\\left(\\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.19)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=\\mathbf{x}&#94;{\\mathrm{T}} \\mathbf{A} \\mathbf{x}&#94;{\\prime}& (6.20) \\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{a}\\left(\\mathbf{x}_{a}, \\mathbf{x}_{a}&#94;{\\prime}\\right)+k_{b}\\left(\\mathbf{x}_{b}, \\mathbf{x}_{b}&#94;{\\prime}\\right) & (6.21)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{a}\\left(\\mathbf{x}_{a}, \\mathbf{x}_{a}&#94;{\\prime}\\right) k_{b}\\left(\\mathbf{x}_{b}, \\mathbf{x}_{b}&#94;{\\prime}\\right) & (6.22) \\end{aligned}$$ ※ ここで、それぞれの変数は以下の意味を持つ。 変数 説明 $c>0$ 定数 $f(\\cdot)$ 任意の関数 $q(\\cdot)$ 非負の係数を持つ多項式 $\\phi(\\mathbf{x})$ $\\mathbf{x}$ から $\\mathbb{R}&#94;{M}$ への関数 $k_3(\\cdot,\\cdot)$ $\\mathbb{R}&#94;{M}$ で定義された有効なカーネル $\\mathbf{A}$ 対象な半正定値行列 $\\mathbf{x}_a,\\mathbf{x}_b$ $\\mathbf{x}=(\\mathbf{x}_a,\\mathbf{x}_b)$ であるような変数（必ずしも互いに素である必要はない） $k_a,k_b$ それぞれの特徴空間において有効なカーネル関数 カーネル関数の例 $$k(x,x&#94;{\\prime}) = \\boldsymbol{\\phi}(x)&#94;T\\boldsymbol{\\phi}(x&#94;{\\prime}) = \\sum_{i=1}&#94;M\\phi_i(x)\\phi_i(x&#94;{\\prime})\\qquad (6.10)$$ # 多項式 ガウス シグモイド 基底関数 $$\\phi_j(x) = cx&#94;j$$ $$\\phi_j(x) = \\exp\\left\\{-\\frac{(x-\\mu_j)&#94;2}{2s&#94;2}\\right\\}\\qquad(3.4)$$ $$\\begin{aligned}\\phi_j(x) &= \\sigma\\left(\\frac{x-\\mu_j}{s}\\right) & (3.5)\\\\\\sigma(a) &=\\frac{1}{1+\\exp(-a)} & (3.6)\\end{aligned}$$ In [2]: # mapping function def polynomial ( x , d , c = 1 ): return c * x ** d def gaussian ( x , mu , s = 0.1 ): return np . exp ( - (( x - mu ) ** 2 ) / ( 2 * s ** 2 ) ) def logistic ( x , mu , s = 0.1 ): return 1 / ( 1 + np . exp ( - ( x - mu ) / s )) In [3]: # mapping function kernel = lambda phi , x_prime , X , key = None , ** params : np . array ([ sum ([ phi ( x_prime , ** { key : val }) * phi ( x , ** { key : val }) for val in params [ key ]]) for x in X ]) In [4]: params = [ ( polynomial , - 0.5 , \"d\" , np . linspace ( 1 , 11 , 11 )), ( gaussian , 0 , \"mu\" , np . linspace ( - 1 , 1 , 11 )), ( logistic , 0 , \"mu\" , np . linspace ( - 1 , 1 , 11 )), ] In [5]: X = np . linspace ( - 1 , 1 , 1000 ) In [6]: ncol = len ( params ) fig = plt . figure ( figsize = ( 12 , 6 )) for i , param in enumerate ( params ): phi , x_prime , key , vals = param ax_base = plt . subplot2grid (( 5 , ncol ),( 0 , i ), rowspan = 3 ) for val in vals : Y = phi ( X , ** { key : val }) ax_base . plot ( X , Y ) ax_base . set_title ( phi . __name__ ) ax_kernel = plt . subplot2grid (( 5 , ncol ),( 3 , i ), rowspan = 2 ) ax_kernel . plot ( X , kernel ( phi , x_prime , X , key , ** { key : vals })) ax_kernel . scatter ( x_prime , min ( ax_kernel . get_ylim ()), marker = \"x\" , color = \"black\" , label = \"$x&#94;{\\prime}$\" ) ax_kernel . set_xlabel ( \"$x$\" ), ax_kernel . set_title ( \"$k(x,x&#94;{\\prime})$\" ), ax_kernel . legend () plt . tight_layout () plt . show () 様々なカーネル 生物学的配列のカーネル Spectrum kernel (Leslie et al., 2002) Marginalized kernel (Tsuda et al., 2002) Profile kernel (Kuang et al., 2004) Local alignment kernel (Saigo et al., 2004) 木構造に関するカーネル Kernel for phylogenetic profiles (Vert, 2002) Kernel for natural language (Suzuki et al., 2003) Kernel for RNA sequences (Kin et al., 2002) ※ 詳しくは、 Kernel Methods in Computational Biology, MIT Press, 2004 を参照 最適化理論の復習 ラグランジュ未定乗数法 に記載。 サポートベクターマシーン マージン最大化 に基づく線形識別器 カーネル関数と組み合わせることによって非線形な識別も可能 サンプル間の類似度にしか依存しない （→非ベクトルデータの分類にも適用可能） 詳しくは サポートベクターマシン(SVM) に記載。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-1.html"},{"title":"生物統計論 第3回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section3.1 Multiple Test Correction \"The more inferences are made, the more likely erroneous inferences are to occur.\" (ex. Even if the type1 error rate is 1% for each data, 10 out of 1000 sample will be rejected on average.) Terminology FWER(Family-wise error rate) : the probability of making at least one type I error (FP) in the family. FDR(False discovery rate) : the expected type I error (FP) rate in rejected data. FDR(False discovery rate) Null hypotheses: $H_1,\\ldots,H_{g_j}$ Alternative hypotheses: $H_{g_j+1},\\ldots,H_g$ Procedure to reject hypotheses : $d_{\\alpha}: \\left(P_1,P_2,\\ldots,P_g\\right)\\rightarrow\\left\\{H_{i_1},\\ldots,H_{i_K}\\right\\}$ Expected ratio of FP in rejected hypotheses: $\\mathrm{FP}=\\sum_{k=1}&#94;K\\mathbb{I}(1\\leq i_k\\leq g_j),\\quad \\mathrm{TP}=K-\\mathrm{FP}$ $\\mathcal{Q} = \\begin{cases}0 & \\text{if }K=(\\mathrm{FP+TP})=0\\\\\\frac{\\mathrm{FP}}{\\mathrm{FP}+\\mathrm{TP}} & \\text{if }K>0\\end{cases}$ $$\\mathrm{FDR}(d_{\\alpha})=\\mathbb{E}\\left(\\mathcal{Q}|H_1,\\ldots,H_g\\right)$$ Methods to counteract this problem Bonferroni Correction Set $\\alpha\\left(=s_{\\alpha}\\leq S_h|H_0\\right)\\leftarrow 1/g\\cdot\\alpha_{\\mathrm{FWER}}$ ($g$: sample size) Therefore, we have: $$\\mathbb{P}\\left(\\{s_{\\alpha}\\leq S_1\\}\\cup\\cdots\\cup\\{s_{\\alpha}\\leq S_g\\}|H_0\\right)\\leq\\sum_{h=1}&#94;g\\mathbb{P}\\left(s_{\\alpha}\\leq S_h|H_0\\right) = g\\cdot\\left(\\frac{1}{g}\\alpha_{\\mathrm{FWER}}\\right) = \\alpha_{\\mathrm{FWER}}$$ Benjamini-Hochberg Procedure (B-H Procedure) If we assume data are distributed independently, we have: $$\\left(P_1,\\ldots,P_g\\right)\\sim\\mathrm{Unif}\\left(0,1\\right)&#94;{\\times g_j}\\times\\mathbb{P}\\left(P|H_{\\text{alternative}}\\right)&#94;{\\times\\left(g-g_j\\right)}$$ We sort the p-value as $p_1\\leq\\cdots\\leq p_g$ Then, $$ \\begin{aligned} d_{\\alpha_{\\mathrm{FDR}}}&#94;{\\mathrm{B-H}}(p_1,\\cdots,p_g) &:=\\mathrm{Reject}\\left\\{H_i|1\\leq i\\max\\left\\{n|p_n\\leq\\left(\\frac{n}{g}\\alpha_{\\mathrm{FDR}}\\right)\\right\\}\\right\\}\\\\ &\\Rightarrow \\mathrm{FDR}\\left(d_{\\alpha_{\\mathrm{FDR}}&#94;{\\mathrm{B-H}}}\\right)\\leq\\alpha_{\\mathrm{FDR}} \\end{aligned} $$ Example. $H_i$ $G_1$ $G_2$ $G_3$ $G_4$ $G_5$ $G_6$ $G_7$ $G_8$ $G_9$ $G_{10}$ $p_i$ $0.1$ $0.4$ $0.8$ $0.035$ $0.9$ $0.04$ $0.001$ $0.002$ $0.6$ $0.7$ In [2]: alpha_FDR = 0.1 g = 10 In [3]: idx = np . array ([ i + 1 for i in range ( g )]) p_value = data = np . array ([ 0.1 , 0.4 , 0.8 , 0.035 , 0.9 , 0.04 , 0.001 , 0.002 , 0.6 , 0.7 ]) q = np . array ([( i + 1 ) / g * alpha_FDR for i in range ( g )]) In [4]: p_value_rank = np . argsort ( p_value ) In [5]: for i in reversed ( range ( g )): if q [ i ] >= p_value [ p_value_rank [ i ]]: break In [6]: print ( f \"Reject: {[f'G {idx} ' for idx in idx[p_value_rank[:i+1]]]}\" ) Reject: ['G7', 'G8', 'G4', 'G6'] Quantile-Quantile plot In [7]: x = - np . log10 ( np . array ([( i + 1 ) / g for i in range ( g )])) y = - np . log10 ( p_value [ p_value_rank ]) In [8]: plt . plot ( x , y , color = \"red\" , label = \"observed\" ) plt . plot (( 0 , min ( x [ 0 ], y [ 0 ])),( 0 , min ( x [ 0 ], y [ 0 ])), color = \"black\" , label = \"$y=x$\" ) plt . title ( \"Quantile-Quantile plot\" ) plt . xlabel ( \"$-\\log_ {10} $ expected P-value\" ) plt . ylabel ( \"$-\\log_ {10} $ observed P-value\" ) plt . legend () plt . grid () plt . show () Section3.2 Probabilistic Models Hypothesis Testing Probabilistic Modeling Models data generation processes in uninteresting scenarios $H_0$ Models data generation processes under interesting biological scenario $H_1$ (possibly as well as $H_0$) Show inconsistency with $H_0$ Check fit of the model to the data Problems of Hypothesis Testing Approaches Difficult to model satisfactory, uninteresting scenarios Does not model interesting biological scenarios A rejected hypothesis does not necessarily tell anything interesting Still useful for many small parts of a full analysis probabilistic Modeling Strong regularity from the probability condition Can include various biological knowledge Adjustable to the quality, amount, randomness of the data Conditional probability makes it easy to integrate multiple models Once a satisfactory model is obtained, we can extract various information from expectation values Powerful general tools are available Maximal Likelihood EM algorithms Bayesian inference MCMC sampling etc... Section3.3 Likelihood Q. How to adjust parameters?? A. Maximize the Likelihood likelihood observed data: $\\mathbf{D} = \\left\\{x&#94;{(h)}|h=1,\\cdots,n\\right\\}$ parametrized model distribution: $\\mathbb{P}(x|\\theta)$ Likelihood: $L(\\theta|D) = \\mathbb{P}(D|\\theta) = \\prod_{h=1}&#94;n\\mathbb{P}\\left(x&#94;{(h)}|\\theta\\right)$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html"},{"title":"レポート課題2(10/10出題)","text":"X17VfVvMQs/ouNclppziPQ==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html"},{"title":"連続最適化(1)制約なし最適化","text":"講師： 佐藤一誠 参考書： 最適化手法 参考書： 機械学習のための連続最適化 In [1]: import numpy as np import matplotlib.pyplot as plt 講義概要 凸最適化問題 最急降下法 ニュートン法 準ニュートン法 凸最適化問題 凸関数 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、以下が成り立つような関数を 凸関数(convex function) と呼ぶ。 $$f\\left(\\left(1-\\theta\\right)x + \\theta x&#94;{\\prime}\\right)\\leq\\left(1-\\theta\\right)f(x) + \\theta f\\left(x&#94;{\\prime}\\right)$$ $f$ が一階微分可能の時、$f$ が凸関数になるための必要十分条件は、感覚的には接戦が常に関数の下に来ることで、 $$\\forall x,x&#94;{\\prime}\\in\\mathcal{X},\\quad f\\left(x&#94;{\\prime}\\right)\\geq f(x) + \\nabla f(x)&#94;T\\left(x&#94;{\\prime}-x\\right)$$ $f$ が二階微分可能の時、$f$ が凸関数になるための必要十分条件は、 ヘッセ行列(Hessian matrix) $\\nabla&#94;2f(x)$ が 半正定値(positive semi-definite) ↔︎$\\nabla&#94;2f(x)$ の 固有値(eigenvalue) が全て非負 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、$(1-\\theta)x+\\theta x&#94;{\\prime}$ も $\\mathcal{X}$ に属するとき、$\\mathcal{X}$ を 凸集合(convex set) と呼ぶ。$x$ と $x&#94;{\\prime}$ を結ぶ線分上の全ての点が $\\mathcal{X}$ に属するということ。 最適化 最適化問題(optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 最適化アルゴリズム(optimization algorithm)： 収束する点列の生成アルゴリズム 最適性条件：最適化問題の最適解であるための必要条件 制約なし最適化問題(unconstrained optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 $f$ を 目的関数(objective function) と呼ぶ。 目的関数は 微分可能(differentiable) と仮定する。 最適性条件：$\\mathbf{x}&#94;{\\star}$ が最適解のとき $$\\nabla f(\\mathbf{x}&#94;{\\star}) = 0$$ 凸最適化問題(convex optimization problem)： 関数 $f$ が凸で集合 $\\mathcal{X}$ も凸 最適解（の集合）が 一意に定まる。 最適解の必要十分条件： 勾配(gradient) がゼロ（凸でない場合は 必要条件 ） 最急降下法 最急降下法(steepest descent method) ※ 勾配法(gradient method)とも。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\quad (\\varepsilon_k>0\\text{ : step size})$$ 凸最適化問題の場合、 大域的最適解(global optimization solution) が求まる 非凸最適化問題の場合、 局所最適解(local optimization solution) しか求められず、様々な初期値から何回か学習して最適解を採用する、ことしかできない。 ステップ幅(step size)の選択 焼きなまし(annealing) ：「最初は大きく、徐々に小さく」。しかし、適切に実装することは容易でない。 正規化(normalization) ：$\\varepsilon_k = \\varepsilon_k&#94;{\\prime}/\\|\\nabla f(\\mathbf{x}_k)\\|$ 勾配が大きいとき安定するが、勾配が小さいときは不安定 厳密直線探索(exact line search) 目的関数の値を最小にするステップ幅を求める。 $$\\underset{\\varepsilon_k>0}{\\min}f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)$$ $f$ が 単峰関数(unimodal function) の場合は、 二分探索法(binary search) や 黄金分割探索(golden section search) などの探索によって最小値を探す。 一般に、一次元の非線形最小化問題を解く必要があるため、最適なステップ幅の探索に時間がかかる。 厳密直線探索を用いた最急降下法は、 一次収束(linear convergence) する。 $$\\text{Q-linear convergence: }\\|\\mathbf{x}_{k+1}-\\mathbf{x}&#94;{\\star}\\| c\\leq \\|\\mathbf{x}_k-\\mathbf{x}&#94;{\\star}\\|&#94;q,\\quad 0 In [2]: ITERATION = 10 N = 100 fsize = 4 In [3]: a = 10 ; b = 1 A = 2 * np . diag ([ a , b ]) func = lambda x , y : a * x ** 2 + b * y ** 2 In [4]: x1min =- 5 ; x1max = 5 ; x2min =- 5 ; x2max = 5 initialX = np . array ([ x1min + 1 , x2max - 2 ]) x1 = np . linspace ( x1min , x1max , N ) x2 = np . linspace ( x2min , x2max , N ) X1 , X2 = np . meshgrid ( x1 , x2 ) Z = func ( X1 , X2 ) In [5]: def find_step_size ( method , f , X , A , ** kwargs ): df = A . dot ( X ) if method == \"fixed\" : epsilon = 1e-1 elif method == \"exact line search\" : epsilon = np . sum ( np . square ( df )) / np . sum ( np . square ( df ) * A . diagonal ()) elif method == \"backtracking line search\" : epsilon = 1 alpha = kwargs [ \"alpha\" ]; beta = kwargs [ \"beta\" ] while True : newX = X - epsilon * df if f ( newX [ 0 ], newX [ 1 ]) - f ( X [ 0 ], X [ 1 ]) <= - alpha * epsilon * np . sum ( np . square ( df )): break epsilon = beta * epsilon return epsilon In [6]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [7]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 例：$f(x) = 1/2\\mathbf{x}&#94;T\\mathbf{Ax}$ $$ \\begin{aligned} \\frac{\\partial f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)}{\\partial\\varepsilon_k} &= \\frac{\\partial}{\\partial\\varepsilon_k}\\frac{1}{2}\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)&#94;T\\mathbf{A}\\left(\\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\\\ &= \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right) - \\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{Ax}_k\\\\ &=0\\\\ \\therefore \\varepsilon_k&#94;{\\star} &= \\frac{\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2}{\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right)}\\qquad (\\nabla f\\left(\\mathbf{x}_k\\right) = \\mathbf{Ax}) \\end{aligned} $$ バックトラック直線探索(backtracking line search) $\\varepsilon_k=1$ に初期化 アルミホ基準(Armijo rule) ： $$f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right) - f\\left(\\mathbf{x}_k\\right)\\right) \\leq\\alpha\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2$$ が成り立つまで $\\varepsilon_k$ を $\\varepsilon_k\\leftarrow\\beta\\varepsilon_k$ と減衰させる。（$0<\\alpha, \\beta<1$） 目的関数の減少量の線形予測値の $\\alpha$ 倍の減少を保証している。 $f$ の真の減少量： $$g\\left(\\varepsilon_k\\right) = f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right) - f\\left(\\mathbf{x}_k\\right)$$ $f$ の減少量の 線形予測値 $$\\begin{aligned}\\varepsilon_kg&#94;{\\prime}(0) &=\\varepsilon_k\\cdot\\left( -\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k-0\\cdot\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\right)\\\\&=-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k\\right)\\\\&=-\\varepsilon_k\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2 \\end{aligned}$$ In [8]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [9]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 微分不可能な場合 目的関数 $f$ が 微分不可能(non-differentiable) の場合は、微分の概念を一般化した 劣微分 を用いる。 凸関数 $f$ の $\\mathbf{x}&#94;{\\prime}$ での 劣勾配(sub-gradient) とは、全ての $\\mathbf{x}\\in\\mathcal{X}$ に対して次式を満たす $\\mathbf{\\xi}$ $$f(\\mathbf{x})\\geq f\\left(\\mathbf{x}&#94;{\\prime}\\right) + \\mathbf{\\xi}&#94;T\\left(\\mathbf{x}-\\mathbf{x}&#94;{\\prime}\\right)$$ $f$ が微分可能な時、$\\mathbf{\\xi} = \\nabla f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ 上式を満たす $\\mathbf{\\xi}$ 全体を $\\partial f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ で表し、 劣微分(sub-differential) と呼ぶ。 微分不可能な点では、劣微分のどれかの値を用いる。 ニュートン法 一般にニュートン法という名称は、方程式の解を求めるアルゴリズムを指すが、以下を表すことが多い。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ 勾配法では一階微分しか用いていないので、二階微分も用いることで反復回数を減らすことが狙い。実際 $k$ が十分大きい時、最適解 $\\mathbf{x}&#94;{\\star}$ の近傍で 二次収束(quadratic convergence) するが、逆行列を求める計算コストが大きい。 二次の テーラー展開(Taylor expansion) を用いて $f$ を現在の解 $\\mathbf{x}_k$ の周りで近似 $\\left(f(\\mathbf{x})\\approx f_k(\\mathbf{x})\\right)$ し、その二次近似を最小にする $\\mathbf{x}_k$ に更新する。 $$f_k(\\mathbf{x}) = f(\\mathbf{x}_k) + \\nabla f(\\mathbf{x}_k)&#94;T\\left(\\mathbf{x}-\\mathbf{x}_k\\right) + \\frac{1}{2}\\left(\\mathbf{x}-\\mathbf{x}_k\\right)&#94;T\\nabla&#94;2f(\\mathbf{x}_k)(\\mathbf{x}-\\mathbf{x}_k)$$ $f_k$ の勾配をゼロと置いた方程式 $$\\nabla f_k(\\mathbf{x}) = \\frac{\\partial f_k(\\mathbf{x})}{\\partial \\mathbf{x}}= \\nabla f(\\mathbf{x}_k) + \\nabla&#94;2f(\\mathbf{x}_k)\\left(\\mathbf{x}-\\mathbf{x}_k\\right) = \\mathbf{0}$$ を解けば、$f_k$ の最小解が以下のように求まる $$\\mathbf{x}&#94;{\\star} = \\mathbf{x}_k - \\left(\\nabla&#94;2 f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ なお、ヘッセ行列が逆行列を持たない時は、 単位行列の定数倍を加えて対処する（正則化, regularization） らしい。 $$\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right) + \\mu\\mathbf{I}\\right)&#94;{-1},\\quad\\mu>0$$ 準ニュートン法 ニュートン法の近似。ニュートン法ではヘッセ行列の逆行列を求めるのに計算コストがかかるので、勾配ベクトル $\\nabla f(\\mathbf{x})$ を用いて近似計算する。 BFGSアルゴリズムを用いたヘッセ行列の更新式が有名 なお、 レポート課題 で詳しく記述しているが、BFGSアルゴリズムのヘッセ行列の更新式は以下で表される。 $$ \\mathbf{H}_{k+1} =\\mathbf{H}_k+\\frac{\\mathbf{t}_k\\mathbf{t}_k&#94;T}{\\mathbf{s}_k&#94;T\\mathbf{t}_k}-\\frac{\\mathbf{H}_k\\mathbf{s}_k\\mathbf{s}_k&#94;T\\mathbf{H}_k}{\\mathbf{s}_k&#94;T\\mathbf{H}_k\\mathbf{s}_k} $$ なお、この時 $$ \\begin{aligned} \\begin{cases} \\mathbf{s}_k &= \\mathbf{x}_{k+1} - \\mathbf{x}_k\\\\ \\mathbf{t}_k &= \\nabla f(\\mathbf{x}_{k+1}) - \\nabla f(\\mathbf{x}_k) \\end{cases} \\end{aligned} $$ まとめ 凸最適化問題 目的関数が凸関数で定義域が凸集合 最適解が一意に定まる 最急降下法 勾配を降下するように値を更新 ステップ幅の選択が重要 目的関数が微分不可能な場合は、劣勾配法や近接勾配法を用いる ニュートン法 二階微分の情報を利用する ヘッセ行列の近似を用いる準ニュートン法が実用的 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html"},{"title":"Zuker Algorithm","text":"Free energy minimization of RNA seconary structure. In cells, RNAs are likely to form energetically stable secondary structure. The correctness of secondary structure should be evaluated based on the free energy, rather than the number of base-pairs ( Nussinov Algorithm ) We first describe a way to calculate the free energy of a particular RNA secondary structure. We describe the Zuker algorithm which calculates the RNA secondary structure with the minimum free energy (MFE). Free energy of RNA secondary structure The free energy of a secondary structure is approximated as the sum of the free energy of \"loops\". $$E = \\sum_iE_i$$ The free energy of individual loop is given by experimental data. (ex. $\\mathrm{C-G: }-3.4\\mathrm{kcal/mol}$, $\\mathrm{U-A: }-0.9\\mathrm{kcal/mol}$) Five types of \"loops\" hairpin loop stacking bulge loop internal loop multi-loop F1(i,j) F2(i,j,h,l) Fm=a+bk+cu a,b,c: constant k: the number of base-pairs in a multi-loop u: the number of single stranded nucleotides in a multi-loop Algorithm variable meaning $W(i,j)$ the minimum free energy of subsequence from $i$ to $j$. $V(i,j)$ the minimum free energy of subsequence from $i$ to $j$ when $i$ to $j$ forms a base-pair. $M(i,j)$ the minimum free energy of subsequence closed by two or more base pairs. $M1(i,j)$ the minimum free energy of subsequence closed by one or more base pairs. Recursion $$ \\begin{aligned} W(i,j) &= \\min \\begin{cases} W(i+1,j)\\\\W(i,j-1)\\\\V(i,j)\\\\\\min_{i\\leq k Initialization In [1]: from kerasy.Bio.structure import Zuker from kerasy.utils.bio import readMonoSeq In [2]: model = Zuker () In [3]: # 以下の形のパラメタファイルを受け取ります。 ! cat params.json { \"inf\": 1e3, \"type\": \"RNA\", \"Watson_Crick\": true, \"Wobble\": true, \"hairpin\": [Infinity, Infinity, 4.4, 4.6, 4.7, 4.4, 5.0, 4.5, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 5.9, 6.0, 6.1, 6.1, 6.2, 6.2, 6.3, 6.3, 6.4, 6.4, 6.5, 6.5, 6.5, 6.6, 6.6, 6.7, Infinity], \"internal\": [Infinity, 1.0, 1.0, 1.1, 2.0, 2.0, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9, 3.0, 3.1, 3.1, 3.2, 3.3, 3.3, 3.4, 3.4, 3.5, 3.5, 3.5, 3.6, 3.6, 3.7, 3.7, Infinity], \"buldge\": [1.0, 1.0, 1.0, 1.1, 2.0, 2.0, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9, 3.0, 3.1, 3.1, 3.2, 3.3, 3.3, 3.4, 3.4, 3.5, 3.5, 3.5, 3.6, 3.6, 3.7, 3.7, Infinity], \"a\": 6.0, \"b\": -1.0, \"c\": 0.1, \"stacking_cols\": [\"CG\", \"AU\", \"GU\"], \"stacking_score\": [[-3.0, -2.0, -2.0], [-2.0, -0.5, -0.5], [-2.0, -0.5, -0.5]] } In [4]: model . load_params ( \"params.json\" ) In [5]: model . params () | parameter |value | --------------------- |a | 6.0| |b | -1.0| |c | 0.1| |inf |1000.0| |type | RNA| |Watson_Crick| 1| |Wobble | 1| In [6]: model . stacking_cols Out[6]: array(['CG', 'AU', 'GU'], dtype=' In [7]: model . stacking_score Out[7]: array([[-3.e+00, -2.e+00, -2.e+00, 1.e+03], [-2.e+00, -5.e-01, -5.e-01, 1.e+03], [-2.e+00, -5.e-01, -5.e-01, 1.e+03], [ 1.e+03, 1.e+03, 1.e+03, 1.e+03]]) In [8]: # サンプル配列 sequence = readMonoSeq ( path = \"sample_seq4.fasta\" ) In [9]: print ( sequence ) ['CCACCUCGCCGCGAAGAUUGGAUGUAAUGUUCACUUAAGCCUAGGCGUUCGCAAAGAAAUACCUAUGGUAAUUUGACUAGCGGUAACAAUGAAAGAAAAGGUGUAGGCGAGGUGGG'] In [10]: # 最大ペアの配列 model . predict ( sequence [ 0 ]) Zuker Algorithm Score: -37.5 ================================================================= seq: CCACCUCGCCGCGAAGAUUGGAUGUAAUGUUCACUUAAGCCUAGGCGUUCGCAAAGAAAU : ((((((((((((((((..((((((...)))))))))..((((....((((((..(((((( seq: ACCUAUGGUAAUUUGACUAGCGGUAACAAUGAAAGAAAAGGUGUAGGCGAGGUGGG : (((...))))))))..)).))))..))...........)))))).)))))))))). ================================================================= In [11]: model . W Out[11]: array([[ 0. , 0. , 0. , ..., -34.5, -37.5, -37.5], [ 0. , 0. , 0. , ..., -34.5, -34.5, -34.5], [ 0. , 0. , 0. , ..., -32.5, -32.5, -32.5], ..., [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ]]) In [12]: model . M Out[12]: array([[1000. , 999. , 999. , ..., -35.4, -38.5, -38.4], [1000. , 1000. , 999. , ..., -35.5, -35.4, -35.3], [1000. , 1000. , 1000. , ..., -33.4, -33.3, -33.2], ..., [1000. , 1000. , 1000. , ..., 1000. , 999. , 999. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 999. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ]]) In [13]: model . V Out[13]: array([[1000. , 1000. , 1000. , ..., -31.5, -37.5, -34.5], [1000. , 1000. , 1000. , ..., -34.5, -31.5, -31.5], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], ..., [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ]]) if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-9.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-9.html"},{"title":"生物物理学 第3回","text":"講師： 樋口秀男 タンパク質の構造と安定性 タンパク質の定義 特定のアミノ酸（20種類）が重合した重合体である。 特定の立体構造をとる。 （これがないと ポリペプチド ） 機能 説明 分子認識 ミオグロビンは酸素を結合。抗体は抗原と結合。 触媒（酵素） 化学反応の反応速度は \\(10&#94;8\\) ~ \\(10&#94;{17}\\) 倍にも加速される。 制御 基質の結合や環境の変化に伴い構造を変化し、タンパク質の反応を制御する。 エネルギー変換 光を電位に換え、ATP分解を力に換える。 構造形成・維持 タンパク質重合体は細胞や細胞内器官の構造を支える。 タンパク質を構成するアミノ酸 d-グリセルアルデヒドの立体配置を基準として、この立体配置を崩さずにできる化合物をD-体、その鏡像異性体がL-体。 ※ タンパク質はL体 構造 名前 略（三文字） 略（一文字） アラニン Ala A アルギニン Arg R アスパラギン Asn N アスパラギン酸 Asp D システイン Cys C グルタミン酸 Glu E グルタミン Gln Q グリシン Gly G ヒスチジン His H イソロイシン Ile I ロイシン Leu L リシン Lys K メチオニン Met M フェニルアラニン Phe F プロリン Pro P セリン Ser S トレオニン Thr T トリプトファン Trp W チロシン Tyr Y バリン Val V # 上記の表は以下のコードを応用して作成した。 url = \"https://ja.wikipedia.org/wiki/タンパク質を構成するアミノ酸\" soup = BeautifulSoup ( requests . get ( url ) . content , 'lxml' ) for li in soup . findAll ( \"li\" , { \"class\" : \"gallerybox\" }): text = str ( li ) . replace ( ' \\n ' , '' ) src = re . findall ( r '<img.*src=\"(.+?)\".*>' , text )[ 0 ] name , l3 , l1 = re . findall ( r '<p>.*title=\"(.+?)\".*<br/>\\((.+?)\\xa0\\/\\xa0(.+?)\\)</p>' , text )[ 0 ] 理論的構造決定法 アミノ酸配列→量子力学→タンパク質の構造とエネルギー状態を決定 シュレディンガー方程式は水素原子のみ解析的に解くことができ、それ以外は近似を行う必要がある。 現在、高精度に計算（第一原理分子動力学法）できるのは1つの構造に対して100原子程度である。 水分子を考慮しなければ、タンパク質の構造や電子軌道を精度よく求めることはできない。 アミノ酸がポリペプチド結合した重合体から機能を持つ立体構造を創り構造を維持するためには、 立体構造が熱力学的に安定でなければならない。 → Gibbs自由エネルギー \\(G\\) を見る。 準安定なのは、 \\(G\\) が極小の時。 最も安定なのは、 \\(G\\) が最小の時。 まとめ 生体の機能を主に担っているのは、タンパク質である。（RNAも機能に重要である。） タンパク質は分子認識・触媒・制御・エネルギー変換・構造形成維持などの機能を有している。 アミノ酸配列から計算によってタンパク質構造を決定することに成功していない。（部分構造はできている。） 酵素機能を行うとき、酵素の多くの場所が構造変化を行う。 第7回目の講義(11/6)の小テスト 指定課題： 第1,2,3回の講義の中で、最も興味のある事柄について300~500字でまとめる。 この事柄と関連する内容を調べるなどして、自分の意見を300~500字で述べる。 図や式を使いわかりやすく説明すること。図や式は文字数に含めない。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html"},{"title":"領域分割","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt import matplotlib.patches as patches # 円を描画 領域分割 色によるクラス分け（画像のみ） k-means法 mean-shift法 色によるクラス分け（画像のみ） 例えば、画素(RGB)や位置(x,y)の似たものをグループ分けする。 二値分類(FG/BG分類)で有名なのが クロマキー （ 青色・緑色 背景） k-means法 予めクラス数 $k$ を指定してクラスタリング。 $k$ 個の代表点をランダムにサンプリング（$k$ 個をデータの中からとってきても良いし、完全にランダムでばらまいても良い。） 全てのデータ点から一番近い代表点を $1$ つ探す。 $k$ 個のグループの重心を計算し、それを新たな代表点とする。 2,3を繰り返す。 In [2]: from kerasy.ML.KMeans import KMeans In [3]: def decomposeImg ( path , K ): imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== KMeans === x = rgb_img . reshape ( - 1 , 3 ) model = KMeans ( K = K , random_state = 0 ) model . fit ( x ) cls , mu = model . predict ( x ) mu = mu . astype ( int ) for k in range ( K ): x [ cls == k ] = mu [ k ] # KMeansed Image. ax_K = fig . add_subplot ( 1 , 2 , 2 ) ax_K . imshow ( x . reshape ( img_shape )) ax_K . set_title ( f \"K= {K} \" ), ax_K . set_xticks ([]), ax_K . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No.{i+1:<0{len(str(K))}}, rgb=({','.join(mu[k].astype(int).astype(str))})\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () In [4]: decomposeImg ( path = \"lenna.png\" , K = 8 ) mean-shift法 画像領域の分割や対象画像の追跡に用いられる手法。 $d$ 次元の特徴量（ex. $\\mathrm{R,G,B},x,y$）を持った $N$ 個のデータ点 $\\mathbf{x}_i$ が分布しているときに、この点群 $\\mathbf{x}_i$ を標本点として得られるような確率密度関数 $f(\\mathbf{x})$ を考え、その標本点から確率密度関数 $f(\\mathbf{x})$ の極大点を探索する手法。 点群が集中している場所は確率密度関数 $f(\\mathbf{x})$ の値が高く、まばらな場所は低くなる。 ある任意の観測点 $\\mathbf{y}_j$ から半径 $h$ の超球を考え、その範囲にある点群 $\\mathbf{x}_i$ の平均 $\\mathbf{x}_c$ を計算し、その位置に観測点 $\\mathbf{y}_{j+1}$ を移動する。 この操作を繰り返すと観測点は最大勾配の方向に移動し、やがて極大点に収束する。 このように、 「近傍の点群の平均(mean)位置に移動(shift)を繰り返し、極大点を求める方法」 から ミーンシフト法(mean-shift) と呼ばれる。 In [5]: fig , ax = plt . subplots ( figsize = ( 6 , 6 )) # Circle r = 0.7 c = patches . Circle ( xy = ( 0 , 0 ), radius = r , ec = 'black' , fill = False ) ax . add_patch ( c ) # Sample Data X , Y = np . random . RandomState ( 123 ) . uniform ( low =- 0.3 , high = 1 , size = ( 2 , 50 )) cls = np . sqrt ( X ** 2 + Y ** 2 ) < r ax . scatter ( X , Y , c = cls , cmap = \"Set1_r\" , alpha = 0.7 ) # Center ax . scatter ( 0 , 0 , color = \"black\" , s = 100 ) ax . text ( 0.05 , - 0.05 , \"$\\mathbf {y} _ {j} $\" , fontsize = 12 ) # Mean mux , muy = np . mean ( X [ cls ]), np . mean ( Y [ cls ]) ax . scatter ( mux , muy , color = \"black\" , marker = '*' , s = 100 ) ax . text ( mux + 0.05 , muy , \"$\\mathbf {x} _c(=\\mathbf {y} _{j+1})$\" , fontsize = 12 ) # Arrow ax . annotate ( '' , xy = ( mux , muy ), xytext = ( 0 , 0 ), arrowprops = dict ( width = 2 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'blue' , edgecolor = 'blue' ) ) # Radius ax . plot (( 0 , 0 ),( 0 , - r ), color = \"black\" ) ax . text ( 0.05 , - r / 2 , \"r\" , fontsize = 12 ) ax . set_xlim ( - 1 , 1 ) ax . set_ylim ( - 1 , 1 ) plt . show () カーネル密度関数を用いた確率密度関数の推定 $d$ 次元空間内の $N$ 個の点群 $\\mathbf{x}_i$ を考える。この点群をある確率分布に従う標本と考えたとき、$d$ 次元空間内の任意の点 $\\mathbf{x}$ における確率密度関数 $f(\\mathbf{x})$ は、以下の方法で推定される。 $$f(\\mathbf{x}) = \\frac{c_{kd}}{Nh&#94;{d}}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)$$ $c_{hd}$ は、確率密度関数 $f(\\mathbf{x})$ 全体の積分を $1$ にするための正規化係数。 $k(t)$ は、カーネル関数 $K(t)$ の プロファイル で、$K(t)=k(|t|&#94;2)$ 以下の２つのカーネルが代表的である。 ガウシアンカーネル(Gaussian) エパネックニコフカーネル(Epanechnikov) $$K(t) = \\exp\\left(-\\frac{\\mid t\\mid&#94;2}{2}\\right)$$ $$K(t) = \\begin{cases}1- \\mid t\\mid&#94;2 & (\\mid t\\mid\\leq1)\\\\0 & (\\text{otherwise})\\end{cases}$$ 確率密度関数の勾配 勾配法(gradient method) を用いて極大点を逐次的に求めるために、確率密度関数の勾配 $\\nabla f(\\mathbf{x})$ を求める。 $$ \\begin{aligned} \\nabla f(\\mathbf{x}) &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;Nk'\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)\\left(\\mathbf{x}-\\mathbf{x}_i\\right)\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;N\\left(g_i\\mathbf{x}_i-g_i\\mathbf{x}\\right), \\quad g(t) = -k'(t),g'(t)=g\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|\\right)&#94;2\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\} \\end{aligned} $$ 項 説明 $$\\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}$$ ガウシアンカーネルやエパネックニコフカーネルを用いた場合、正になる。 $$\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\}$$ ミーンシフト と呼ばれる項で、観測点 $\\mathbf{x}$ の近傍のデータ点群 $\\mathbf{x}_i$ の加重平均位置と $\\mathbf{x}$ 自身の差分ベクトルを示す。 勾配法を用いた極大点探索（ミーンシフト法） 初期化：$\\mathbf{y}_0\\leftarrow\\mathbf{x}$ 更新（ミーンシフト） $$\\mathbf{y}_{j+1}\\leftarrow \\mathbf{y}_j + \\left(\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{y}_j\\right) = \\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}$$ $|\\mathbf{y}_{j+1}-\\mathbf{y}_j|<\\text{threshold}$ となるまで2を繰り返す。 収束した $\\mathbf{y}_{j+1}$ を極大点として出力する。 ※ 一般的な勾配法では、更新式 $\\mathbf{y}_{j+1}\\rightarrow\\mathbf{y}_i + \\alpha\\nabla f$ のステップ数 $\\alpha$ を与える必要があるが、ミーンシフト法では ベクトルの大きさは自動的に計算される ので、$\\alpha$ を与える必要がない（らしい…）。 ミーンシフト法を用いたクラスタリングへの応用 $d$ 次元空間中の $N$ 個の点群 $\\mathbf{x}_i$ が与えられた時に、密に分布する点群をクラスタとして分割する。 各点にミーンシフト法を適用し、収束位置 $\\mathbf{x}_i&#94;c$ を計算する。 任意の2個の点 $\\mathbf{x}_i,\\mathbf{x}_j$ について、その収束位置が閾値以下なら（$|\\mathbf{x}_i-\\mathbf{x}_j|<\\text{threshold}$）、この2点を同じ極大点として同じクラスタに入れる。 1,2より、全ての点群 $\\mathbf{x}_i$ を 同じ収束位置（極大点）に属するものごとにクラスタに識別する。 全ての点 $\\mathbf{x}_i$ でこの処理を行わなければならないが、並行化できる。 k-means手法とは異なり、クラスタの数を予め指定する必要がない。 ミーンシフト法を用いたカラー画像の領域分割 カラー画像の $N$ 個の各画素の位置 $\\mathbf{x}_i$ とその画素値 $\\mathbf{v}_i=\\left(R_i,G_i,B_i\\right)$ とし、画素位置-画素値を結合した5次元空間内の点 $\\mathbf{z}_i=(\\mathbf{x}_i,\\mathbf{v}_i)$ を考える。 「距離および色が近い画素が5次元空間内でクラスタを形成している」 とみて、ミーンシフト法で各画素をクラスタリングする。 画素位置に関するバンド幅 $h_s$、画素値に関するバンド幅 $h_r$ を与え、全ての $z_i$ にミーンシフトを行い、収束位置 $\\mathbf{z}&#94;c=(\\mathbf{x}&#94;c,\\mathbf{v}&#94;c)$ を計算する。 $\\mathbf{x}_i$ の画素値を、収束位置の画素の値 $(R&#94;c,G&#94;c,B&#94;c)$ に置き換えることによって、画像の平滑化ができる。 ミーンシフトは、以下の通り計算する。 $$f(\\mathbf{x}) = \\frac{c}{Nh_s&#94;2h_r&#94;3}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}&#94;s-\\mathbf{x}&#94;s_i}{h_s}\\right|&#94;2\\right)k\\left(\\left|\\frac{\\mathbf{x}&#94;r-\\mathbf{x}&#94;r_i}{h_r}\\right|&#94;2\\right)$$ したがって、以下のとおりに位置を更新する。 $$\\mathbf{y}&#94;{s}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;s\\mathbf{x}_i&#94;s}{\\sum_{i=1}&#94;Ng_i&#94;s},\\quad\\mathbf{y}&#94;{r}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;r\\mathbf{x}_i&#94;r}{\\sum_{i=1}&#94;Ng_i&#94;r}$$ $(h_s,h_r)$ のパラメータを大きくすると、より大きな領域に同色が統合され、大まかに分割される。 In [6]: from sklearn.cluster import MeanShift In [7]: import time s = time . time () imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) path = \"lenna.png\" bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== MeanShift === x = rgb_img . reshape ( - 1 , 3 ) model = MeanShift () model . fit ( x ) cls = model . predict ( x ) mu = model . cluster_centers_ . astype ( int ) K = max ( cls ) + 1 for k in range ( K ): x [ cls == k ] = mu [ k ] # MeanShifted Image. ax_Mean = fig . add_subplot ( 1 , 2 , 2 ) ax_Mean . imshow ( x . reshape ( img_shape )) ax_Mean . set_title ( f \"n_cluster= {K} \" ), ax_Mean . set_xticks ([]), ax_Mean . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No.{i+1:<0{len(str(K))}}, rgb=({','.join(mu[k].astype(int).astype(str))})\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () e = time . time () print ( f \"Processing time: {int((e-s)//60):>02}m {(e-s)%60:.3f}s\" ) plt . show () Processing time: 31m 13.287s In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html"},{"title":"領域処理のための特徴量","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 領域の特徴量 フーリエ変換 ガボールフィルタ(Gabor Filter) 同時生起確率 In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt （２次元）フーリエ変換 画像は、フーリエ変換によって周波数領域における別の形で表現される。 フーリエ変換の結果は、画像に含まれるそれぞれの周波数成分を表している。 フーリエ変換後の各周波数成分の大きさを成分ごとに変えることにより、元の画像の性質を変えることができる。 （周波数フィルタリング(frequency filtering)） ローパスフィルタ(lowpass fileter) ：画像に含まれる空間周波数成分のうち、低周波数成分は残し、高周波数成分は除去するようなフィルタ。 ハイパスフィルタ(highpass filter) ：上の逆。高周波数成分は残し、低周波数成分を除去するようなフィルタ。 バンドパスフィルタ(bandpass filter) ：ある中間的な周波数の範囲を残すようなフィルタ。 高域強調フィルタ(high-emphasis filter) ：画像の低周波数成分はそのまま保ちつつ、高周波数成分を強調するフィルタ。 $1$ 次元フーリエ変換 簡単のため、まずは一次元フーリエ変換をみる。 名前 数式 説明 フーリエ変換 $$F(\\omega) = \\int_{-\\infty}&#94;{\\infty}f(t)e&#94;{-i\\omega t}dt$$ 数直線上の表現 （空間領域） から周波数による表現 （周波数領域） への変換 逆フーリエ変換 $$f(x) = \\int_{-\\infty}&#94;{\\infty}F(\\omega)e&#94;{i\\omega x}d\\omega$$ 周波数領域にある関数を元の空間領域に戻す変換 実装 二つの正弦波を重ねた波から、それぞれの成分を取り出すことができるか確かめる。なお、ここでは numpy.fft.fft を利用しています。 これは、 高速フーリエ変換(Fast Fourier Transform) と呼ばれる、 高速に「離散フーリエ変換」を行うアルゴリズム を実装したものです。 In [2]: N = 10000 dt = 0.01 time = np . arange ( 0 , N * dt , dt ) freq = np . linspace ( 0 , 1.0 / dt , N ) In [3]: def sin ( A , f , p ): \"\"\" @param A: Amplitude @param f: Frequency[Hz] @param p: phase \"\"\" func = lambda t : A * np . sin ( 2 * np . pi * f * t + p1 ) return func In [4]: # parameters f1 , f2 = 5 , 8 # frequency[Hz] A1 , A2 = 5 , 3 # Amplitude p1 , p2 = 0 , 1 / 2 * np . pi # phase In [5]: y1 = sin ( A1 , f1 , p1 )( time ) y2 = sin ( A2 , f2 , p2 )( time ) y = y1 + y2 # superposition In [6]: # Computes the discrete Fourier transform (DFT) of a sequence yf = np . fft . fft ( y ) / ( N / 2 ) # Fast Fourier transform. In [7]: fig = plt . figure ( figsize = ( 8 , 4 )) ax1 = fig . add_subplot ( 2 , 1 , 1 ) ax1 . set_ylabel ( \"amplitude\" ) ax1 . set_xlabel ( \"time\" ) ax1 . set_xlim ( 0 , 1 ) ax1 . plot ( time , y , label = \"y(y1+y2)\" , color = \"blue\" ) ax1 . plot ( time , y1 , label = f \"y1(A= {A1} ,f= {f1} )\" , alpha = 0.3 , color = \"green\" ) ax1 . plot ( time , y2 , label = f \"y2(A= {A2} ,f= {f2} )\" , alpha = 0.3 , color = \"red\" ) ax1 . axhline ( 0 , alpha = 0.3 , color = \"black\" ) ax1 . legend () ax2 = fig . add_subplot ( 2 , 1 , 2 ) ax2 . set_ylabel ( \"amplitude\" ) ax2 . set_xlabel ( \"frequency\" ) ax2 . set_xlim ( 0 , 10 ) ax2 . plot ( freq , abs ( yf ), color = \"blue\" ) plt . tight_layout () plt . show () 見事に、二つの周波数成分を取り出すことができました。 $2$ 次元フーリエ変換 ※ 一般に画像は2次元空間で定義されたある関数 $f(x,y)$ として表現することができる！ 名前 数式 フーリエ変換 $$F(u,v) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x,y)\\exp\\left\\{-j2\\pi\\left(ux+vy\\right)\\right\\}dxdy$$ 逆フーリエ変換 $$f(x,y) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}F(u,v)\\exp\\left\\{j2\\pi\\left(ux+vy\\right)\\right\\}dudv$$ ここで、以下の値に注目することがよくある。 名前 数式 説明 振幅スペクトル(amplitude spectrum) $$\\mid F(u,v)\\mid = \\sqrt{\\mathrm{Re}\\left\\{F(u,v)\\right\\}&#94;2 + \\mathrm{Im}\\left\\{F(u,v)\\right\\}&#94;2}$$ 絶対値 位相スペクトル(phase spectrum) $$\\arg\\left\\{F(u,v)\\right\\} = \\tan&#94;{-1}\\frac{\\mathrm{Im}\\left\\{F(u,v)\\right\\}}{\\mathrm{Re}\\left\\{F(u,v)\\right\\}}$$ 偏角 パワースペクトル(power spectrum) $$\\mid F(u,v)\\mid&#94;2$$ In [8]: img = cv2 . imread ( 'lenna.png' , 0 ) f = np . fft . fft2 ( img ) fshift = np . fft . fftshift ( f ) magnitude_spectrum = 20 * np . log ( np . abs ( fshift )) plt . subplot ( 121 ), plt . imshow ( img , cmap = 'gray' ) plt . title ( 'Input Image' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'x' ), plt . ylabel ( 'y' ) plt . subplot ( 122 ), plt . imshow ( magnitude_spectrum , cmap = 'gray' ) plt . title ( 'Magnitude Spectrum' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'u' ), plt . ylabel ( 'v' ) plt . show () ガボールフィルタ(Gabor Filter) 正弦波とガウス関数の積で表される。（例：2次元ガボールフィルタ） $$g(x,y,\\lambda,\\phi) = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\exp\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 実数部： $$\\mathrm{Re}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\cos\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 虚数部： $$\\mathrm{Im}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\sin\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ フーリエ変換では、所望の周波数成分が領域のどこにあるのかわからないのに対し、ガボールフィルタは、 「領域のどの位置にどの方向の周波数が、どの強度であるか」 を知ることができる。 パラメータを操作して様々な方向と強度を持つフィルタ （フィルタバンク(filter bank)） を多数準備 し、特徴抽出を行う。また、ここで抽出された特徴量群は texton と呼ばれる。 入力された画像に対してガボールフィルタを畳み込んで（たたみ込み＝二次元の内積＝類似度を反映）、特徴量 $G(x,y,\\lambda,\\phi)$ を求める式は以下となる。 $$G(x,y,\\lambda,\\phi) = \\sum_u\\sum_vI(x,y)\\ast g(x-u, y-v, \\lambda, \\phi)$$ OpenCVの cv2.getGaborKerne を用いることで簡単にガボールフィルタを生成することができる、 引数 説明 ksize Size of the filter returned. sigma Standard deviation of the gaussian envelope. theta Orientation of the normal to the parallel stripes of a Gabor function. lambd Wavelength of the sinusoidal factor. gamma Spatial aspect ratio. psi Phase offset. In [9]: default_gabor = { \"ksize\" : ( 50 , 50 ), \"sigma\" : 4 , \"theta\" : 0 , \"lambd\" : 10 , \"gamma\" : 0.5 , \"psi\" : 0 , } In [10]: gabor = cv2 . getGaborKernel ( ** default_gabor ) plt . imshow ( gabor , cmap = \"gray\" ) plt . title ( \"default\" ) plt . show () In [11]: def argsGaborRelation ( key , vals ): global default_gabor defaul_val = default_gabor [ key ] N = len ( vals ) n_col = 4 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i , val in enumerate ( vals ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) ax . imshow ( gabor , cmap = \"gray\" ) ax . set_title ( f \" {key} = {val} \" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [12]: argsGaborRelation ( key = \"ksize\" , vals = [( 30 , 30 ),( 20 , 40 ),( 40 , 20 ),( 50 , 50 )]) In [13]: argsGaborRelation ( key = \"sigma\" , vals = [ x for x in range ( 8 )]) In [14]: argsGaborRelation ( key = \"theta\" , vals = [ np . radians ( x ) for x in range ( 0 , 180 , 45 )]) In [15]: argsGaborRelation ( key = \"gamma\" , vals = [ x for x in range ( 4 )]) In [16]: argsGaborRelation ( key = \"psi\" , vals = [ np . radians ( x ) for x in range ( 0 , 360 , 45 )]) In [17]: img = cv2 . imread ( 'lenna.png' , 0 ) color_img = cv2 . imread ( 'lenna.png' ) In [18]: def argsGaborSuperposition ( key , vals ): global default_gabor , img defaul_val = default_gabor [ key ] N = len ( vals ) * 2 n_col = 8 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) dests = 0 for i , val in enumerate ( vals ): default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) dest = cv2 . filter2D ( img , cv2 . CV_32F , gabor ) dests += dest ax_dst = fig . add_subplot ( n_row , n_col , 2 * i + 1 ) ax_dst . imshow ( np . power ( dest , 2 ), cmap = \"gray\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) ax_gab = fig . add_subplot ( n_row , n_col , 2 * i + 2 ) ax_gab . imshow ( gabor , cmap = \"gray\" ), ax_gab . set_xticks ([]), ax_gab . set_yticks ([]) # Superposition fig = plt . figure ( figsize = ( 8 , 16 )) ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( cv2 . cvtColor ( color_img , cv2 . COLOR_BGR2RGB )) ax_org . set_title ( \"original image\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) ax_dst = fig . add_subplot ( 1 , 2 , 2 ) ax_dst . imshow ( dests , cmap = \"gray\" ) ax_dst . set_title ( f \"Superposition of dst (key= {key} )\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [19]: argsGaborSuperposition ( key = \"theta\" , vals = [ np . radians ( x ) for x in np . linspace ( 0 , 180 , 8 )]) ※ 入力画像の８分割した全ての方向のエッジを重ね合わせると、元の画像をかなり高い精度で復元していることがわかる。 同時生起確率 テクスチャの統計的特徴量を求める。 離れた２つの場所にある画素対の値から、画素値の 一様性 ・ 方向性 ・ コントラスト などの性質を表す特徴量を求める。 ある画素 $i$ と、$i$ から離れた位置にある画素 $j$ の画素対を考え、画素 $i$ と画素 $j$ の相対的な位置を $\\delta=\\langle d,\\theta\\rangle$ とする。 それぞれの画素値を $L_i,L_j$ とし、画素値の対 $(L_i,L_j)$ が生じる出現頻度で、ある同時生起行列 $\\mathbf{H}_{\\delta}(L_i,L_j)$ を考える。ここで、出現頻度の総数で $\\mathbf{H}_{\\delta}(L_1,L_2)$ を正規化し、確率に変換した同時生起行列を $\\mathbf{P}_{\\delta}(L_i,L_j)$ とする。 確率に変換した同時生起行列を用いて計算する主な特徴量には次の $7$ 種類がある。（ここで、画素値のレベル数は $L$ である。）他にも様々な統計量を計算できるが、テクスチャの物理的な意味と直接には結びつかない数値もある。 $$ \\begin{aligned} \\mathrm{ENR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left\\{P_{\\delta}(L_i,L_j)\\right\\}&#94;2 & (\\text{energy})\\\\ \\mathrm{CNT} &= \\sum_{k=0}&#94;{L-1}k&#94;2P_{x-y}(k) & (\\text{contrast})\\\\ \\mathrm{CRR} &= \\frac{\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}L_iL_jP_{\\delta}(L_i,L_j) - \\mu_x\\mu_y}{\\delta_x\\delta_y} & (\\text{correlation})\\\\ \\mathrm{VAR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left(L_i-\\mu_x\\right)&#94;2P_{\\delta}(L_i,L_j) & (\\text{variance})\\\\ \\mathrm{EPY} &= -\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\log\\left\\{P_{\\delta}(L_i,L_j)\\right\\} & (\\text{entropy})\\\\ \\mathrm{SEP} &= -\\sum_{k=0}&#94;{2L-2}P_{x+y}(k)\\log\\left\\{P_{x+y}(k)\\right\\} & (\\text{sum entropy})\\\\ \\mathrm{IDM} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\frac{1}{1+(L_i-L_j)&#94;2}P_{\\delta}(L_i,L_j) & (\\text{inverse difference moment})\\\\ \\end{aligned} $$ ただし、 $$ \\mu_x = \\sum_{L_i=0}&#94;{L-1}L_iP_x(L_i), \\quad \\mu_y = \\sum_{L_j=0}&#94;{L-1}L_jP_y(L_j)\\\\ \\delta_x&#94;2 = \\sum_{L_i=0}&#94;{L-1}(L_i-\\mu_x)&#94;2P_x(L_i), \\quad \\delta_y&#94;2 = \\sum_{L_j=0}&#94;{L-1}(L_j-\\mu_y)&#94;2P_y(L_j)\\\\ P_x(L_i) = \\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j), \\quad P_y(L_j) = \\sum_{L_i=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\\\ P_{x-y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i-L_j|= k\\\\ P_{x+y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i+L_j|= k\\\\ $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html"},{"title":"主成分分析(PCA)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 主成分分析(PCA) 次元削減・非可逆データ圧縮・特徴抽出・データの可視化などに使われる。 主部分空間(principal subspace) と呼ばれる低次元の線形空間の上への、データ点の直交射影として、以下の2つの定義方法がある。 「射影されたデータの分散が最大化されるような直交射影」 として定義。→ 分散最大化による定式化 「データ点と射影した点の間の2乗距離の平均値で定義される 射影コスト関数 の期待値を最小化するような線形射影」 として定義。（要はデータ点からの距離を最小化）→ 誤差最小化による定式化 Pythonによる実装 分散最大化による定式化 次元 $D$ のユークリッド空間内のデータ集合 $\\{\\mathbf{x}_n\\}(n=1,\\ldots,N)$ を考える。ここで、 「射影されたデータ点の分散を最大化しながら、データを次元 $M ことを考える。 1次元空間の上への射影（$M=1$） この空間の方向を $D$ 次元ベクトル $\\mathbf{u}_1$ として表す。ここで、興味があるのは $\\mathbf{u}_1$ の方向だけであるので、$\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ としても一般性を失わない。 したがって、各データ点 $\\mathbf{x}_n$ は スカラー値 $\\mathbf{u}_1&#94;T\\mathbf{x}_n$ の上に射影される。ここで、射影されたデータの平均・分散は以下のようになる。 統計量 平均値 $$\\mathbf{u}_1&#94;T\\bar{\\mathbf{x}}\\qquad\\bar{\\mathbf{x}} = \\frac{1}{N}\\sum_{n=1}&#94;N\\mathbf{x}_n\\qquad (12.1)$$ 分散 $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1\\qquad\\mathbf{S} = \\frac{1}{N}\\sum_{n=1}&#94;N\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\qquad (12.3)$$ ここで、 射影されたデータの分散を、$\\mathbf{u}_1$ に関して最大化 することを考える。 制約条件 $\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ をラグランジュ乗数 $\\lambda_1$ を利用して導入して $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1 + \\lambda_1\\left(1-\\mathbf{u}&#94;T_1\\mathbf{u}_1\\right)\\qquad (12.4)$$ を最大化すれば良い。$\\mathbf{u}_1$ に関する微分を $0$ とおくことにより、停留条件は $$\\mathbf{Su}_1 = \\lambda_1\\mathbf{u}_1\\qquad (12.5)$$ となることがわかる。これは、 $\\mathbf{u}_1$ が $\\mathbf{S}$ の固有ベクトルであること を示している。左から $\\mathbf{u}&#94;T_1$ をかけると、 $$\\text{Variance} = \\mathbf{u}&#94;T_1\\mathbf{Su}_1 = \\lambda_1 \\qquad (12.6)$$ となる。よって、 分散は $\\mathbf{u}_1$ を、最大固有値 $\\lambda_1$ に属する固有ベクトルに選んだ時に最大になる ことがわかる。 $M$ 次元空間の上への射影（一般解） 演習12.1 帰納法を用いて、 射影されたデータの分散を最大化するようなM次元部分空間の上への線形写像が、データ共分散行列Sの上位M個の固有値に属するM本の固有ベクトルによって定義される ことを示す。 仮定 $M$ に対して上記が成り立つ。 データ空間に対する新しい方向ベクトル $\\mathbf{u}_{M+1}$ は、次を満たす。 $\\mathbf{u}_{M+1}$ は、$\\mathbf{u}_1,\\ldots,\\mathbf{u}_M$ と直交する。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0$） 単位長に規格化されている。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{M+1}=1$） 制約条件を踏まえると、 $$L = \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\lambda_{M+1}\\left(1-\\mathbf{u}&#94;T_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_j$$ 両辺を $\\mathbf{u}_{M+1}$ で微分すると、 $$0 = \\frac{\\partial L}{\\partial \\mathbf{u}_{M+1}} = 2\\left(\\mathbf{Su}_{M+1} - \\lambda_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_j\\cdots(\\ast)$$ これに左から $\\mathbf{u}&#94;T_{j}$ をかけると、 $$0 = \\lambda&#94;{\\prime}_j\\quad(\\because \\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0)$$ となるので、これを $(\\ast)$ に代入して、 $$\\mathbf{Su}_{M+1} = \\lambda_{M+1}\\mathbf{u}_{M+1}$$ また、この時分散は $$\\begin{aligned} \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i &= \\sum_{i=1}&#94;{M}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\mathbf{u}&#94;T_{M+1}\\mathbf{Su}_{M+1}\\\\ &= \\sum_{i=1}&#94;{M}\\lambda_i + \\lambda_{M+1} \\end{aligned}$$ ここで、仮定より $\\lambda_i$ は、データ共分散行列 $\\mathbf{S}$ の上位 $M$ 個の固有値なので、この分散を最大する $\\lambda_{M+1}$ は、$M+1$ 番目に大きい固有値となる。 誤差最小化による定式化 続いて、射影誤差の最小化に基づいた主成分分析の定式化を考える。 まず、$D$ 次元の基底ベクトル $\\{\\mathbf{u}_i\\}$ から成る完全正規直交系を導入する。（$\\mathbf{u}_i&#94;T\\mathbf{u}_i = \\delta_{ij}$） すると、各データ点はこれらの基底ベクトルの線形結合なので、以下の形で表すことができる。 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\alpha_{ni}\\mathbf{u}_i\\qquad (12.8)$$ なお、ここで式 $(12.8)$ は、各データ点 $\\{\\mathbf{x}_n\\}$ を、もともとの座標系から $\\{\\mathbf{u}_i\\}$ で表される新しい座標系への回転を表していると解釈できる （もともと $D$ 個の成分 $\\{x_{n1},\\ldots,x_{nD}\\}$ が、等価な集合 $\\{a_{n1},\\ldots,a_{nD}\\}$ に置き換えられている） 。 上式と $\\mathbf{u}_j$ との内積を取り、正規直交性を使うと、$\\alpha_{nj} = \\mathbf{x}_n&#94;T\\mathbf{u}_j$ を得るので、 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right)\\mathbf{u}_i\\qquad (12.9)$$ $D$ 次元から $M$ 次元への近似 ここで、$M （$M$ 次元空間で完全に $\\mathbf{x}_n$ を表現するのは一般に不可能なので、近似する。） したがって、各データ点を $$\\tilde{\\mathbf{x}}_n = \\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\qquad (12.10)$$ $\\{z_{ni}\\}$ は特定のデータ点に依存。 $\\{b_i\\}$ は全てのデータ点に共通な定数。 と近似して表す。つまり、 $\\{\\mathbf{u}_i\\}$ と $\\{z_{ni}\\}$ と $\\{b_i\\}$ を調整することで、次元が減ることによってもたらされる歪みを最小化すること がここでの目的となる。 近似による歪み尺度 $J$ 近似による歪みの尺度として、元々のデータ点 $\\mathbf{x}_n$ とその近似 $\\tilde{\\mathbf{x}}_n$ の間の2乗距離をデータ集合に渡って平均したものを採用する。 $$\\begin{aligned} J &= \\frac{1}{N}\\sum_{n=1}&#94;N\\|\\mathbf{x}_n-\\tilde{\\mathbf{x}}_n\\|&#94;2\\qquad (12.11)\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\left\\|\\mathbf{x}_n-\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)\\right\\|&#94;2 \\end{aligned}$$ そこで、各変数についての微分を $0$ としてこれを最小化する変数を求める。 $\\{z_{ni}\\}$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial z_{ni}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\left\\|\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\sum_{i=1}&#94;Mz_{ni}&#94;2-2\\sum_{i=1}&#94;Mz_{ni}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=1}&#94;M2\\left\\{z_{ni}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore z_{ni}&#94;{\\star} &= \\mathbf{x}_n&#94;T\\mathbf{u}_i \\qquad (12.12) \\end{aligned} $$ $b_i$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial b_{i}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\left\\|\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\sum_{i=M+1}&#94;Db_{i}&#94;2-2\\sum_{i=M+1}&#94;Db_{i}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D2\\left\\{b_{i}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore b_{i}&#94;{\\star} &= \\bar{\\mathbf{x}}_n&#94;T\\mathbf{u}_i \\qquad (12.13) \\end{aligned} $$ $J$ の整頓 ここで、$(12.10)$ の $z_{ni},b_i$ を置き換えると、 $$ \\begin{aligned} \\mathbf{x}_n-\\tilde{\\mathbf{x}}_n &= \\mathbf{x}_n-\\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=1}&#94;D\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i - \\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=M+1}&#94;D\\left\\{\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\mathbf{u}_i\\right\\}\\mathbf{u}_i\\qquad (12.14) \\end{aligned} $$ と表すことができる。この式から、 $\\tilde{\\mathbf{x}}_n$ から $\\mathbf{x}_n$ への変位を表すベクトルは、主部分空間に直交する空間にあることがわかる。 以上より、歪み尺度 $J$ に対する表現を、純粋に $\\{\\mathbf{u}_i\\}$ の関数として、以下のような形で得られることがわかる。 $$J = \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i-\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\right)&#94;2 = \\sum_{i=M+1}&#94;D\\mathbf{u}&#94;T_i\\mathbf{Su}_i\\qquad (12.15)$$ したがって、あとは$J$ を $\\{\\mathbf{u}_i\\}$ に対して最小化すれば良い。 $M=1,D=2$ の場合 $M=1,D=2$ の場合、 「規格化条件 $\\mathbf{u}&#94;T_2\\mathbf{u}_2 = 1$ の下で、方向 $\\mathbf{u}_2$ を、$J=\\mathbf{u}&#94;T_2\\mathbf{Su}_2$ が最小化されるように選ぶ」 問題となる。 つまり、ラグランジュ乗数を用いて、 $$\\tilde{J} =\\mathbf{u}&#94;T_2\\mathbf{Su}_2 + \\lambda_2\\left(1-\\mathbf{u}&#94;T_2\\mathbf{u}_2\\right)\\qquad (12.16)$$ を最小化する問題となる。 $\\mathbf{u}_i$ についての微分を $0$ とおくと、$\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を得る。つまり、$\\mathbf{u}_2$ は固有値 $\\lambda_2$ に属する $\\mathbf{S}$ の固有ベクトルであるので、 任意の固有ベクトルは、この歪み尺度の停留点を定義することとなる。 $(12.16)$ に $\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を代入すると、$J=\\lambda_2$ となる。ゆえに、 「$\\mathbf{u}_2$ を、2つある固有値のうち小さい方に対応した固有ベクトルを選ぶことにより、$J$ の最小値を得ることができる」 （↔︎ 主部分空間では大きい方 ） 任意の $D$ と任意の $M 任意の $D$ と任意の $M $$\\mathbf{Su}_i = \\lambda_i\\mathbf{u}_i\\qquad (12.17)$$ で与えられる共分散行列の固有ベクトルに選ぶことによって得られる。ここで $i=1,\\ldots,D$ であり、固有ベクトル $\\{\\mathbf{u}_i\\}$ は正規直交するように選ばれる。 また、対応する歪み尺度の値は、 $$J = \\sum_{i=M+1}&#94;D\\lambda_i\\qquad (12.18)$$ のように、 主部分空間に直交する固有ベクトルの固有値についての単なる和 で与えられる。したがって、$J$ の最小値は、小さい順から $D-M$ 個の固有値に対応する固有ベクトルを選ぶことによって得られ、つまり主部分空間を定義する固有ベクトルは大きい順から $M$ 個の固有値に対応する固有ベクトルになる。 実装 Wine Data Set (UCI Machine Learning Repository) のデータを利用し、13次元、178データ、3種類のワインの属性データから、2つの主成分を取って可視化を行います。 また、PCAは自作のモジュール （ kerasy.ML.decomposition.PCA ） を用います。 In [1]: # データ取得。 ! wget https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt --2019-10-07 13:20:45-- https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.228.133 Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.228.133|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 12173 (12K) [text/plain] Saving to: `wine.txt' wine.txt 100%[===================>] 11.89K --.-KB/s in 0s 2019-10-07 13:20:45 (40.4 MB/s) - `wine.txt' saved [12173/12173] In [2]: from kerasy.ML.decomposition import PCA In [3]: import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib.colors import LinearSegmentedColormap In [4]: colors = [( 1 , 0 , 0 ), ( 0 , 0 , 1 ), ( 0 , 1 , 0 )] n_bin = len ( colors ) cmap_name = 'my_list' cm = LinearSegmentedColormap . from_list ( cmap_name , colors , N = n_bin ) In [5]: df = pd . read_csv ( \"wine.txt\" , sep = \" \\t \" , index_col = 0 ) In [6]: df . head ( 3 ) Out[6]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } class Alcohol Malic acid Ash Alcalinity of ash Magnesium Total phenols Flavanoids Nonflavanoid phenols Proanthocyanins Color intensity Hue OD280/OD315 of diluted wines Proline 0 1 14.23 1.71 2.43 15.6 127 2.80 3.06 0.28 2.29 5.64 1.04 3.92 1065 1 1 13.20 1.78 2.14 11.2 100 2.65 2.76 0.26 1.28 4.38 1.05 3.40 1050 2 1 13.16 2.36 2.67 18.6 101 2.80 3.24 0.30 2.81 5.68 1.03 3.17 1185 class カラムがワインの種類を表しているので、この列は主成分分析から取り除きます。 In [7]: cls = df . iloc [:, 0 ] . values In [8]: df_use = df . iloc [:, 1 :] また、 データの標準化 を行います。 In [9]: df_std = df_use . apply ( lambda x : ( x - x . mean ()) / x . std (), axis = 0 ) In [10]: data = np . array ( df_std ) データの準備ができたので、主成分分析を行います。 In [11]: pca = PCA () pca . fit ( data ) features = pca . transform ( data ) In [12]: plt . figure ( figsize = ( 6 , 6 )) plt . scatter ( features [:, 0 ], features [:, 1 ], c = cls , cmap = cm , edgecolors = 'black' ) plt . title ( \"Same fig with slide :)\" ) plt . xlabel ( \"PC1\" ) plt . ylabel ( \"PC2\" ) plt . grid () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html"},{"title":"Nussinov Algorithm","text":"Nussinov Algorithmは、最もシンプルな二次構造予測アルゴリズムである。 「最大いくつの塩基対を作ることができるか」 を調べる。 動的計画法を用いて効率的に調べるために、以下のような Pseudoknot は無視している。様々な重要なRNAが、Pseudoknotの形をとることが確認されているが、相対的にこのような構造をとる確率は低いので、計算の効率を優先し、これらを無視する。 Algorithm ※「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 今回の実装では $j-i-1<3$ の時は、$i,j$ が塩基対を作れないものとしている。 ポイントはRecursionの最後の式で、 「$i$ から $k$ までの部分塩基配列」 と 「$k+1$ から $j$ までの部分塩基配列」 を足し合わせる操作を行う。 （Bifurcation） Initialization: $$\\begin{aligned} \\gamma(i,i)&=0&\\text{ for }i=1\\text{ to }L\\\\ \\gamma(i,i-1)&=0&\\text{ for }i=2\\text{ to }L \\end{aligned}$$ Recursion: $$ \\gamma(i,j) = \\max \\begin{cases} \\gamma(i+1,j)\\\\ \\gamma(i,j-1)\\\\ \\gamma(i+1,j-1)+\\delta(i,j)\\\\ \\max_{i\\leq k\\verb|<|j}\\left[\\gamma(i,k) + \\gamma(k+1,j)\\right] \\end{cases} $$ TraceBack 基本的なアルゴリズムは同じですが、 Bifurcationが起きた際にトレースバックポインターを複数用意する必要があることには注意が必要です。 bp = [] stack = [( 0 , N - 1 )] while ( stack ): i , j = stack . pop ( 0 ) delta = 1 if self . _is_bp ( sequence [ i ], sequence [ j ]) and ( j - i > 3 ) else 0 if ( i >= j ): continue elif gamma [ i + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( i + 1 , j )) elif gamma [ i ][ j - 1 ] == gamma [ i ][ j ]: stack . append (( i , j - 1 )) elif gamma [ i + 1 ][ j - 1 ] + delta == gamma [ i ][ j ]: bp . append (( i , j )); stack . append (( i + 1 , j - 1 )) else : # Bifurcation for k in range ( i , j ): if gamma [ i ][ k ] + gamma [ k + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( k + 1 , j )) stack . append (( i , k )) break 自作のモジュール （kerasy.Bio.structure.Nussinov） を使って実装します。 In [1]: from kerasy.Bio.structure import Nussinov In [2]: model = Nussinov () In [3]: # 以下の形のパラメタファイルを受け取ります。 ! cat params.json { \"type\": \"DNA\", \"Watson_Crick\": true, \"Wobble\": true } In [4]: model . load_params ( \"params.json\" ) In [5]: model . params () | parameter |value| -------------------- |type | DNA| |Watson_Crick| 1| |Wobble | 1| In [6]: # サンプル配列 sequence = \"GCGGAAACGGGGTCA\" In [7]: # 最大ペアの配列 model . predict ( sequence , memorize = True , traceback = True ) Nussinov Algorithm Score: 3 ================================================================= seq: GCGGAAACGGGGTCA : ( (( ))) ================================================================= In [8]: gamma = model . gamma In [9]: # DP行列は以下のようになっています。 model . _printAsTerai ( gamma , sequence ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 1 2 2 2 2 2 3 3 C - 0 0 0 0 0 0 1 2 2 2 2 2 3 3 G - - 0 0 0 0 0 1 1 1 1 1 2 3 3 G - - - 0 0 0 0 1 1 1 1 1 2 3 3 A - - - - 0 0 0 0 0 0 0 1 2 2 2 A - - - - - 0 0 0 0 0 0 1 2 2 2 A - - - - - - 0 0 0 0 0 1 2 2 2 C - - - - - - - 0 0 0 0 1 1 1 1 G - - - - - - - - 0 0 0 0 0 1 1 G - - - - - - - - - 0 0 0 0 1 1 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 $i,j$ が塩基対を組むときの塩基対最大化 塩基 $i,j$ が塩基対を組むという制約がある場合を考えます。これは、「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を保持した $\\omega(i,j)$ と $\\gamma(i,j)$ を組み合わせることで効率的に求めることができます。 Algorithm 「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を $\\omega(i,j)$ が保持している。 Initialization: $$\\omega(i,L) = 0$$ Recursion: $$ \\omega(i,j) = \\max \\begin{cases} \\omega(i-1,j)\\\\ \\omega(i,j+1)\\\\ \\omega(i-1,j+1)+\\delta(i-1,j+1)\\\\ \\max_{1\\leq k\\verb|<|i}\\left[\\omega(k,j) + \\gamma(k,i-1)\\right]\\\\ \\max_{j\\verb|<| k\\leq L}\\left[\\omega(j+1,k) + \\gamma(i,k)\\right] \\end{cases} $$ In [10]: model . outside ( sequence , memorize = True ) In [11]: omega = model . omega In [12]: # DP行列は以下のようになっています。 model . _printAsTerai ( omega , sequence ) \\ G C G G A A A C G G G G T C A G 3 3 3 2 2 2 1 1 1 0 0 0 0 0 0 C - 3 3 3 3 3 2 1 1 1 1 1 1 0 0 G - - 3 3 3 3 2 2 2 2 2 1 1 0 0 G - - - 3 3 3 2 2 2 2 2 1 1 0 0 A - - - - 3 3 2 2 2 2 2 1 1 0 0 A - - - - - 3 3 2 2 2 2 2 1 0 0 A - - - - - - 3 2 2 2 2 2 1 0 0 C - - - - - - - 2 2 2 2 2 1 0 0 G - - - - - - - - 3 3 3 2 2 1 1 G - - - - - - - - - 3 3 3 3 2 2 G - - - - - - - - - - 3 3 3 2 2 G - - - - - - - - - - - 3 3 2 2 T - - - - - - - - - - - - 3 2 2 C - - - - - - - - - - - - - 2 2 A - - - - - - - - - - - - - - 3 $Z(i,j)$ の計算 variable definition $\\gamma\\left(i,j\\right)$ the maximum number of base-pairs for subsequence from $i$ to $j$. $\\omega\\left(i,j\\right)$ the maximum number of base-pairs excluding subsequence from $i$ to $j$. 上記の定義より、$\\gamma,\\omega$ を用いて $Z(i,j)$ が以下のように求まることがわかります。 $$Z(i,j) = \\begin{cases} \\gamma\\left(i+1,j-1\\right) + 1 + \\omega\\left(i,j\\right) & (\\text{if }i\\text{ and }j\\text{-th nucleotides can form a base-pair})\\\\ 0 & (\\text{otherwise}) \\end{cases}$$ In [13]: model . ConstrainedMaximize ( sequence , memorize = False ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 2 0 0 0 0 0 3 0 C - 0 0 0 0 0 0 0 3 3 3 3 0 0 0 G - - 0 0 0 0 0 3 0 0 0 0 0 3 0 G - - - 0 0 0 0 3 0 0 0 0 0 3 0 A - - - - 0 0 0 0 0 0 0 0 3 0 0 A - - - - - 0 0 0 0 0 0 0 3 0 0 A - - - - - - 0 0 0 0 0 0 3 0 0 C - - - - - - - 0 0 0 0 3 0 0 0 G - - - - - - - - 0 0 0 0 0 2 0 G - - - - - - - - - 0 0 0 0 3 0 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 備忘録 Nussinov Algorithmでは、これまでの動的計画法とは異なり、 $i,j$ を斜め方向に舐める必要がありました。 そこで、その際に使用したコードを備忘録として残しておきます。 In [14]: import numpy as np In [15]: N = 4 In [16]: # Nussinov Algorithm (γ) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for ini_i in reversed ( range ( N )): diff = N - ini_i for i in reversed ( range ( ini_i )): arr [ i ][ i + diff ] = idx idx += 1 print ( arr ) [[0 3 5 6] [0 0 2 4] [0 0 0 1] [0 0 0 0]] In [17]: # Nussinov outsie (ω) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for j in reversed ( range ( N )): for i in range ( N - j ): arr [ i ][ j + i ] = idx idx += 1 print ( arr ) [[ 7 4 2 1] [ 0 8 5 3] [ 0 0 9 6] [ 0 0 0 10]] In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-8.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-8.html"},{"title":"Pair HMM の最尤推定","text":"Baum-Welch Pair HMMとは、二本の配列を受け取ってペアワイズアラインメントを出力するHMMで、 「アラインメントの確率的な解釈が可能になる」 （アラインメントのどの部分が信頼できるかを確率的に評価できる） という利点があります。 このPair HMMは、一般的なHMMと同様にBaum-Welchアルゴリズムによってパラメータを最尤推定していきます。 \\(\\xi\\) HMM 一般的なHMMでは、例えば 遷移確率 \\(A_{jk}\\) （状態 \\(j\\) から状態 \\(k\\) に遷移する確率） を最尤推定する際は、 直感的には 「状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「状態 \\(j\\) から遷移する回数」 で割れば最尤解が求まる。 実際の隠れ状態の遷移が確定していないので、 「 期待される 状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「 期待される 状態 \\(j\\) から遷移する回数」 で割れば良い。 \\(\\mathbf{z}_{n-1}\\) で状態 \\(j\\) におり、 \\(\\mathbf{z}_n\\) で状態 \\(k\\) にいる確率 \\(\\xi\\left(z_{n-1,j},z_{nk}\\right)\\) は、forward-backward algorithmの \\(\\alpha,\\beta\\) を用いれば以下のように求めることができる。 $$\\xi_n\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ \\(\\xi\\) を用いて、最尤推定を行う。 $$A_{j k}= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\qquad (13.19)$$ という様に行いますが、Pair HMMは、 挿入・欠失を考えるため、 \\(n\\) で配列 \\(\\mathbf{X,Y}\\) のどの要素（ \\(\\mathbf{x}_u,\\mathbf{y}_v\\) ）を考えているのか一意に定まらない という点で普通のHMMとは異なります。 Pair HMM そこで、 「 \\(n\\) ではなく \\(u,v\\) に注目する」 ことで、 \\((13.43)\\) の式を以下のように書き換えます。 $$\\xi_{u,v}\\left(i,j\\right)=\\frac{f_i\\left(u,v\\right)A_{ij}\\phi_j\\left(\\diamond_1\\right)b_j\\left(\\diamond_2,\\diamond_3\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ ここで、分子に注目すると、各変数の意味が variable meaning \\(f_i\\left(u,v\\right)\\) The probability of ending up in state \\(i\\) after aligning the two sequences \\(\\mathbf{X,Y}\\) up to observation \\(u\\) and \\(v\\) respectively. \\(A_{ij}\\) the transition probability from state \\(i\\) to state \\(j\\) . \\(\\phi_j\\left(\\diamond_1\\right)\\) the emission probability of emitting \\(\\diamond_1\\) in state \\(j\\) . \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) the probability of being in state \\(j\\) , given the sequences \\(\\mathbf{X,Y}\\) are aligned from observation \\(\\diamond_2+1\\) and \\(\\diamond_3+1\\) to the end of the sequences respectively. であるので、 \\(\\diamond\\) は状態によって異なり、具体的に書き下すと以下のようになります。 state\\variable \\(\\phi_j\\left(\\diamond_1\\right)\\) \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) \\(M\\) \\(e\\left(x_{u+1},y_{v+1}\\right)\\) \\(b_j\\left(u+1,v+1\\right)\\) \\(X\\) \\(e\\left(x_{u+1}\\right)\\) \\(b_j\\left(u+1,v\\right)\\) \\(Y\\) \\(e\\left(y_{v+1}\\right)\\) \\(b_j\\left(u,v+1\\right)\\) \\(\\gamma\\) 同様に \\(\\gamma\\) も考えると、 $$ \\gamma_n\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad(13.33)$$ から、 $$\\gamma_i\\left(u,v\\right)=\\frac{f_i\\left(u,v\\right)b_j\\left(u,v\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ のように書き換えることになります。 Maximization step ここまでで \\(\\gamma,\\xi\\) が求まったので、M stepで各パラメータを更新します。なお、以下で \\(w\\) は全ての記号の組を表します。 $$w\\in\\left\\{(k_x,k_y)|k_x,k_y\\in\\left\\{A,T,G,C,\\epsilon \\right\\}\\right\\}\\setminus(\\epsilon,\\epsilon)$$ \\(\\pi_k\\) $$\\pi&#94;{\\star}_i = \\sum_w\\gamma_i&#94;w(0,0)$$ \\(A_{ij}\\) $$A&#94;{\\star}_{ij} = \\frac{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\sum_{j}&#94;{K}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}$$ final emitting state \\(\\tilde{U}\\) \\(\\tilde{V}\\) \\(M\\) \\(U-1\\) \\(V-1\\) \\(X\\) \\(U-1\\) \\(V\\) \\(Y\\) \\(U\\) \\(V-1\\) \\(\\phi_{i}(k)\\) $$\\phi_i\\left(k\\right) = \\frac{\\sum_w\\sum_{u=0}&#94;{U\\ast1}\\sum_{v=0}&#94;{V\\ast2}\\gamma_i&#94;w\\left(u,v\\right)}{\\sum_w\\sum_{u=0}&#94;U\\sum_{v=0}&#94;V\\gamma_i&#94;w\\left(u,v\\right)}$$ \\(\\ast1\\) ： \\(x_u=k_x\\) and state \\(i\\) equals the state \\(M\\) or \\(X\\) . (in the state \\(Y\\) , a gap is present in observation stream \\(x\\) therefore \\(k_x\\) is not present.) \\(\\ast2\\) ： \\(y_v=k_y\\) and state \\(j\\) equals the state \\(M\\) or \\(Y\\) . Reference Wahle, Johannes and Armin Buch. \"Alignment and word comparison with Pair Hidden Markov Models.\" (2013). pp.22-31 Martijn B. Wieling. \"Comparison of Dutch Dialects\" (2007) pp.36-50 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-7.html"},{"title":"生物統計論 第2回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section2.1 Central Limit Theorem Law of Large Numbers Estimation is accurate with many samples. Foundation of repeated measurement. Regardless of true distribution. Assuming independence. Theorem Let $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ be an independent trials process, with finite expected value $\\mu = \\mathbb{E}\\left(\\mathbf{X}_i\\right)$ Let $\\bar{\\mathbf{X}}_n = \\frac{1}{n}\\left(\\mathbf{X}_1,\\mathbf{X}_2+\\cdots+\\mathbf{X}_n\\right)$ be a sample mean. Weak law : $$\\lim_{n\\rightarrow\\infty}P\\left(|\\bar{\\mathbf{X}}_n-\\mu|>\\varepsilon\\right) = 0 \\quad\\left(\\forall\\varepsilon>0\\right)$$ Strong law $$P\\left(\\lim_{n\\rightarrow\\infty}\\bar{\\mathbf{X}}_n = \\mu\\right) = 1$$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Chebyshev Inequality Let $\\mathbf{X}$ be a discrete random variable with expected value $\\mu=\\mathbb{E}\\left(\\mathbf{X}\\right)$ $$ P \\left(|\\mathbf{X}-\\mu|>\\varepsilon\\right)\\leq\\frac{\\mathbb{V}\\left(\\mathbf{X}\\right)}{\\varepsilon&#94;2}$$ Example In [2]: N = 1000 seed = 0 In [3]: trials = np . arange ( 1 , N + 1 ) In [4]: dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = N ) ave_dices = np . cumsum ( dices ) / trials In [5]: plt . axhline ( 3.5 , color = \"blue\" , label = \"Theoretical mean\" ) plt . plot ( trials , ave_dices , label = \"Observed average\" , color = \"green\" ) plt . ylim ( 1 , 6 ) plt . title ( \"Average dice roll by number of rolls\" ) plt . ylabel ( \"Average\" ) plt . xlabel ( \"Number of trials\" ) plt . grid () plt . legend () plt . show () If we keep rolling the dice over and over again, the sample average of dice roll will converge to the true average. Exception The law of large numbers assumes the existance of expected values . Therefore, it will not hold when there is no expected value. (ex. Cauchy distribution ) Cauchy distribution $$ \\begin{aligned} f(x;x_0,\\gamma) &= \\frac{1}{\\pi\\gamma\\left[1 + \\left(\\frac{x-x_0}{\\gamma}\\right)&#94;2\\right]} = \\frac{1}{\\pi}\\frac{\\gamma}{\\left(x-x_0\\right)&#94;2 + \\gamma&#94;2} & \\begin{cases}x_0: \\text{Location paramete}\\\\\\gamma: \\text{Scale parameter}\\end{cases}\\\\ f(x;0,1) &= \\frac{1}{\\pi\\left(1+x&#94;2\\right)} & (\\text{standard cauchy distribution}) \\end{aligned} $$ In [6]: N = 5000 K = 3 seed = 1 In [7]: trials = np . arange ( 1 , N + 1 ) In [8]: samples = np . random . RandomState ( seed ) . standard_cauchy ( size = ( K * N )) . reshape (( K , N )) ave_samples = np . cumsum ( samples , axis = 1 ) / trials In [9]: for k in range ( K ): plt . plot ( trials , ave_samples [ k ], label = f \"Observation {k+1}\" ) plt . ylabel ( \"$(\\mathbf {X} _1+\\cdots+\\mathbf {X} _n)/n$\" ) plt . xlabel ( \"n\" ) plt . legend () plt . grid () Central Limit Theorem Sample mean follows normal distribution. Foundation of many statistical tests. Regardless of true distribution. Assuming independence. Theorem Let $\\{\\mathbf{X}_1,\\ldots,\\mathbf{X}_n\\}$ be a random sample of size $n$, which is a sequence of independent and identically distributed random variables drawn from a distribution. expected value given by $\\mu$. finite variance given by $\\sigma&#94;2$. Let $S_n:=\\sum_{k=1}&#94;n\\mathbf{X}_k$ $$P\\left(\\frac{S_n-n\\mu}{\\sqrt{n}\\sigma}\\leq\\alpha\\right)\\rightarrow\\frac{1}{\\sqrt{2\\pi}}\\int_{-\\infty}&#94;{\\alpha}e&#94;{-\\frac{x&#94;2}{2}}dx\\quad(n\\rightarrow\\infty)$$ Therefore: $$ \\begin{aligned} S_n&\\sim\\mathcal{N}\\left(n\\mu, n\\sigma&#94;2\\right) & (n\\rightarrow\\infty)\\\\ \\bar{\\mathbf{X}}_n = \\left(\\mathbf{X}_1+\\cdots+\\mathbf{X}_n\\right)/n&\\sim\\mathcal{N}\\left(\\mu,\\sigma&#94;2/n\\right) & (n\\rightarrow\\infty) \\end{aligned} $$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Example In [10]: N = 10000 ns = [ 10 , 100 , 1000 , 10000 ] roll = 4 seed = 0 In [11]: fig = plt . figure ( figsize = ( 12 , 6 )) ax_all = plt . subplot2grid (( 2 , len ( ns )), ( 0 , 0 ), colspan = len ( ns )) for i , n in enumerate ( ns ): ax = plt . subplot2grid (( 2 , len ( ns )), ( 1 , i )) dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = ( n , N )) rate_dice_eq_4 = np . count_nonzero ( dices == roll , axis = 1 ) / N freqs , bins , patches = ax . hist ( rate_dice_eq_4 , bins = 20 , density = True ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] ax_all . plot ( cent_bins , freqs , label = f \"n= {n} \" ) ax . set_title ( f \"n= {n} \" ) ax . set_xlabel ( f \"Probability of {roll} roll.\" ) ax . set_ylabel ( \"freq\" ) ax_all . set_title ( \"Central Limit Theorem\" ) ax_all . legend () plt . tight_layout () plt . show () Section2.2 ChIP-seq Peak Detection ChIP-sequencing, also known as ChIP-seq, is a method used to analyze protein interactions with DNA. ChIP-seq combines chromatin immunoprecipitation (ChIP) with massively parallel DNA sequencing to identify the binding sites of DNA-associated proteins. It can be used to map global binding sites precisely for any protein of interest. Previously, ChIP-on-chip was the most common technique utilized to study these protein–DNA relations. Peak calling Problem: How to identify transcription factor binding sites and histone modification enriched regions? Random Read Model Assume that read appears with equal probability in any region. Calcurate the p-value (the Probability of obtaining more or equally extreme value than observed value under the random model.) → Smaller is more significant. Setting the threshold (p-value) manually. We could calcurate the threshold ($n_{obs}$) → If the $n_{obs}$ exceeds this threshold, it is determined as the peak region. In [12]: from scipy.special import comb In [13]: g = 10000 # total DNA length n = 1000 # total number of reads l = 100 # bin size q = l / g n_bins = g / l lambda_ = n * q # mean read count seed = 0 xmax = 30 In [14]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) read_points = np . random . RandomState ( seed ) . randint ( 0 , g , size = n ) axL . scatter ( read_points , np . zeros ( shape = n ), s = 3 , label = \"read\" , color = \"black\" ) ledge = 0 read_counts = [] for edge in range ( l , g + 1 , l ): middl = ( ledge + edge ) / 2 count = np . count_nonzero ([( ledge <= read_points ) & ( read_points < edge )]) read_counts . append ( count ) if edge <= l * 10 : axL . axvline ( edge , color = \"red\" ) axL . text ( x = middl , y = 1e-3 , s = count , horizontalalignment = 'center' ) ledge = edge axL . set_xlim ( 0 , l * 10 ) axL . set_ylim ( - 1e-3 , 2e-3 ) axL . set_yticks ([]) axL . legend () Poisson = [ comb ( n , i , exact = True ) * ( q ** i ) * (( 1 - q ) ** ( n - i )) for i in range ( n )] axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axR . plot ([ read_counts . count ( i ) / n_bins for i in range ( n )], color = \"red\" , label = \"Observed\" ) axR . set_xlim ( 0 , xmax ) axR . set_xlabel ( \"Read count for each bin\" ) axR . set_ylabel ( \"Frequency\" ) axR . legend () plt . show () In [15]: n_obs = 15 p_values = np . cumsum ( Poisson [:: - 1 ])[:: - 1 ] # Calcurate p-value for each n_obs. thresh_p = 1e-2 bp = np . argmax ( p_values <= thresh_p ) In [16]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axL . fill_between ( np . arange ( n_obs , xmax ), y1 = Poisson [ n_obs : xmax ], y2 = 0 , facecolor = 'red' ) axL . annotate ( 'p-value \\n = $\\mathbb {P} (n_ {obs} \\leq N)$ \\n $=\\sum_{i=n_ {obs} }&#94;{\\infty}(\\lambda&#94;i/i!)\\cdot e&#94;{-\\lambda}$' , xy = ( 17 , 1e-2 ), xytext = ( 20 , 4e-2 ), fontsize = 12 , arrowprops = dict ( width = 1 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'black' ) ) axL . set_xlim ( 0 , 30 ) axL . set_title ( \"Poisson distribution\" ) axL . set_xlabel ( \"N\" ) axL . set_ylabel ( \"Freq\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( p_values , color = \"black\" ) axR . scatter ( n_obs , p_values [ n_obs ], color = \"red\" , label = \"pvalue($n_ {obs} $=\" + f \" {n_obs} )\" ) axR . scatter ( bp , p_values [ bp ], color = \"blue\" , label = \"Boundary point\" ) axR . axhline ( thresh_p , color = \"blue\" , label = f \"threshold(p_value= {thresh_p} )\" ) axR . axvspan ( xmin = bp , xmax = xmax , color = \"blue\" , alpha = 0.3 ) axR . set_xlim ( 0 , xmax ) axR . set_title ( \"The relationship between p-value and $n_ {obs} $\" ) axR . set_xlabel ( \"$n_ {obs} $\" ) axR . set_ylabel ( \"p-value\" ) axR . legend () plt . show () In this case, we could say the threshold($n_{obs}$) = 19(=bp). ※ In ChIP-seq, we have to do \"Tag shift\" due to the DNA strand asymmetry. （→ more: MACS ） Section2.3 Hypothesis Testing Terminology In [17]: fig , ax = plt . subplots ( figsize = ( 6 , 4 )) X = np . arange ( 10 , 100 , 1 ) Y = 1 / X # Null distribution ax . plot ( X , Y , color = \"red\" ), ax . text ( x = 15 , y = 8e-2 , s = \"Null distribution \\n $f_S(s|H)$\" , fontsize = 15 ) # Thereshold: Sα ax . plot (( 50 , 50 ),( 0 , 7e-2 ), color = \"black\" ), ax . text ( x = 48 , y = 7.5e-2 , s = \"$S_ {α} $\" , fontsize = 12 ) # Reject & Accept ax . annotate ( '' , xy = ( 75 , 5e-2 ), xytext = ( 52 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 55 , y = 5.5e-2 , s = \"reject\" , fontsize = 12 ) # Reject ax . annotate ( '' , xy = ( 25 , 5e-2 ), xytext = ( 48 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 35 , y = 5.5e-2 , s = \"accept\" , fontsize = 12 ) # Accept # Observation sample. ax . plot (( 70 , 70 ),( 0 , 1 / 70 ), color = \"black\" ), ax . scatter ( 70 , 1 / 70 , color = \"black\" ), ax . text ( x = 68 , y = 2e-2 , s = \"$S_ {obs} $\" , fontsize = 12 ) ax . set_xticks ([]), ax . set_yticks ([]) ax . set_xlabel ( \"S\" ), ax . set_ylabel ( \"freq\" ) ax . set_xlim ( min ( X ), max ( X )), ax . set_ylim ( min ( Y ), max ( Y )) plt . show () Null Hypothesis $H_0$ Alternative Hypothesis $H_1$ Test Static $S$ Null distribution Significance threshold Reject/Accept $H_0$ Null hypothesis is True Null hypothesis is False Do not reject Null hypothesis ($H_0$) Correct Type2 error (False negative) Reject Null hypothesis ($H_0$) Type1 error (False positive) Correct P-value distribute uniformly under $H_0$ Proof. p-value is the probability of obtaining more or equally extreme value than observed value under the null distribution. $$p = \\mathbb{P}\\left(S\\geq s|H_0\\right) = 1-\\mathbb{P}\\left(S By noting $F_0$ the cumulative distribution function of $S$ under $H_0$, we obtain: $$p = 1-F_0(s)$$ Thanks to the fact that the cdf is monotonic, increasing and (left-)continuous: $$\\mathbb{P}\\left(S\\geq s|H_0\\right) = \\mathbb{P}\\left(F_0\\left(S\\right)\\geq F_0\\left(s\\right)\\right) = 1-\\mathbb{P}\\left(F_0\\left(S\\right)< F_0\\left(s\\right)\\right)$$ Therefore, we have: $$\\mathbb{P}\\left(F_0\\left(S\\right) Which means that $F_0\\left(S\\right)$ is following a uniform distribution. And, as this means also that $1-F_0\\left(S\\right)$ is following a uniform distributed, then we can conclude that p-value are uniformly distributed under the null hypothesis. In [18]: from scipy.stats import norm In [19]: N = 10000 loc = 0 scale = 1 seed = 0 In [20]: obs = np . random . RandomState ( seed ) . normal ( loc = loc , scale = scale , size = N ) # observation sample \"s\". p_value = 1 - norm . cdf ( x = obs , loc = loc , scale = scale ) # p-value = 1 - F(s) In [21]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) freqs , bins , patches = axL . hist ( obs , bins = 50 , density = True , color = \"blue\" , alpha = 0.7 ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] axL . plot ( cent_bins , freqs , color = \"blue\" ) axL . set_title ( \"Histogram of observation sample s \\n under the null distribution (This time: Normal distribution)\" ), axL . set_xlabel ( \"observation s\" ), axL . set_ylabel ( \"Frequency\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . hist ( p_value , bins = 20 , edgecolor = \"black\" ) axR . set_title ( \"Histogram of p-value\" ), axR . set_xlabel ( \"p-value\" ), axR . set_ylabel ( \"Frequency\" ) plt . tight_layout () plt . show () ※ We could argue about the p-value under the null hypothesis, but we could not confirm whether null hypothesis is true or not. Section2.4 Hypothesis Test Example $\\chi&#94;2$-test Any statistical hypothesis test where the sampling distribution of the test statistic is a chi-squared distribution when the null hypothesis is true. Used to determine whether there is a significant difference between the expected frequencies and the observed frequencies in one or more categories. $\\chi&#94;2$-distribution $Y_i\\sim\\mathcal{N}\\left(0,1\\right), i=1,\\ldots,\\nu$: i.i.d. $X=Y_1&#94;2+\\cdots+Y_{\\nu}$ $\\rightarrow X\\sim\\chi&#94;2(\\nu), X\\in \\mathbb{R}_{\\geq0}$ $$ \\begin{aligned} f_X(x) &= \\frac{1}{2&#94;{\\nu/2}\\Gamma(\\nu/2)}x&#94;{\\nu/2-1}e&#94;{-x/2}\\\\ \\Gamma(z) &= \\int_{0}&#94;{\\infty}t&#94;{z-1}e&#94;{-t}dt(\\mathrm{Re}(z)>0)\\\\ \\mathbb{E}(X) &= \\nu\\\\ \\mathbb{V}(X) &= 2\\nu \\end{aligned} $$ In [22]: from scipy.stats import chi2 In [23]: K = 5 In [24]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( 0 , 8 , 1000 ) for k in range ( 1 , K + 1 ): plt . plot ( X , chi2 . pdf ( X , k ), label = f \"$k= {k} $\" ) plt . xlim ( 0 , 8 ), plt . ylim ( 0 , 1.0 ) plt . title ( \"$\\chi&#94;2$-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Pearson's chi-square test goodness of fit test # $C_1$ $C_2$ $\\cdots$ $C_k$ total Observation frequency $n_1$ $n_2$ $\\cdots$ $n_k$ $n$ Theoretical probability (under $H_0$) $p_1$ $p_2$ $\\cdots$ $p_k$ $1$ Theoretical frequency $m_1=np_1$ $m_2=np_2$ $\\cdots$ $m_k=np_k$ $n$ Null Hypothesis($H_0$): $P(C_i) = p_i\\quad(i=1,2,\\ldots,k)$ If null hypothesis is true, $U$ are distributed as $\\chi&#94;2(k-1)$. $$ U=\\sum_{i=1}&#94;k\\frac{(n_i-m_i)&#94;2}{m_i}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ test for independence A\\B $B_1$ $B_2$ $\\cdots$ $B_b$ total $A_1$ $n_{11}$ $n_{12}$ $\\cdots$ $n_{1b}$ $n_{1\\cdot}$ $A_2$ $n_{21}$ $n_{22}$ $\\cdots$ $n_{2b}$ $n_{2\\cdot}$ $\\vdots$ $\\vdots$ $\\vdots$ $\\cdots$ $\\ddots$ $\\vdots$ $A_a$ $n_{a1}$ $n_{a2}$ $\\cdots$ $n_{ab}$ $n_a$ total $n_{\\cdot1}$ $n_{\\cdot2}$ $\\cdots$ $n_{\\cdot b}$ $n_{a\\cdot}$ $P(A_i) = p_i,P(B_j)=q_j,\\quad (1\\leq i\\leq a,1\\leq j\\leq b)$ Null Hypothesis($H_0$): $A$ and $B$ are independence. $$P(A_i\\cap B_j) = p_iq_j$$ If null hypothesis is true, we could presume: $\\bar{p_i}=n_{i\\cdot}/n$, $\\bar{q_j}=n_{\\cdot j}/n$. $m_{ij} = n\\bar{p_i}\\bar{q_j}$ (Theoretical frequency) $$ U=\\sum_{i=1}&#94;a\\sum_{j=1}&#94;b\\frac{(n_{ij}-m_{ij})&#94;2}{m_{ij}}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ t-test One-sample test: Determine whether a sample of observations could have been generated by a process with a specific mean $\\mu$. Two-sample test: Compare the average values of the two data sets and determine if they came from the same population. t-distribution $$ \\begin{aligned} f_{t(\\nu)}(x) &= \\frac{\\Gamma\\left(\\frac{\\nu+1}{2}\\right)}{\\sqrt{\\nu\\pi}\\Gamma\\left(\\frac{\\nu}{2}\\right)}\\left(1+\\frac{x&#94;2}{\\nu}\\right)&#94;{-\\frac{\\nu+1}{2}}\\\\ \\mathbb{E}(X) &= 0(\\nu>1)\\\\ \\mathbb{V}(X) &= \\begin{cases}\\infty&(1<\\nu\\leq2)\\\\\\frac{\\nu}{\\nu-2}&(2<\\nu)\\end{cases} \\end{aligned} $$ In [25]: from scipy.stats import t as tdist In [26]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( - 6 , 6 , 1000 ) nus = [ 1 , 2 , 5 , 1000 ] for nu in nus : plt . plot ( X , tdist . pdf ( X , nu ), label = f \"$ν= {nu} $\" ) plt . plot ( X , norm . pdf ( X , 0 , 1 ), linestyle = ':' , linewidth = 5 , label = \"Standard Normal Distribution\" ) plt . xlim ( - 6 , 6 ), plt . ylim ( 0 , 0.4 ) plt . title ( \"t-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Student's t-test One-sample test: $$ X_1,\\ldots,X_n\\sim\\mathcal{N}(\\mu,\\sigma)\\text{: i.i.d.}\\\\ \\bar{X} = \\frac{X_1,\\ldots,X_n}{n}, S = \\frac{\\left(X_1-\\bar{X}\\right)&#94;2 + \\cdots+\\left(X_n-\\bar{X}\\right)&#94;2}{n-1}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}-\\mu\\sqrt{n}\\right)}{S}\\sim t(n-1) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{X_{11}+\\cdots+X_{1m}}{m}\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{X_{21}+\\cdots+X_{2n}}{n}\\\\ S=\\frac{\\sum_{i=1}&#94;m\\left(X_{1i}-\\bar{X}_1\\right)&#94;2 + \\sum_{i=1}&#94;n\\left(X_{2i}-\\bar{X}_2\\right)&#94;2}{m+n-2}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)\\sqrt{mn}}{S\\sqrt{m+n}}\\sim t(m+n-2) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{\\sum_{i=1}&#94;mX_{1i}}{m}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{1i} - \\bar{X}_1\\right)&#94;2}{m-1}, A=S_1/m\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{\\sum_{i=1}&#94;mX_{2i}}{n}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{2i} - \\bar{X}_2\\right)&#94;2}{n-1}, B=S_2/n\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)}{S\\sqrt{A+B}}\\approx t(\\nu), \\nu=\\frac{(A+B)&#94;2}{A&#94;2/(m-1)+B&#94;2/(n-1)} $$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html"},{"title":"レポート課題1(10/3出題)","text":"xL7XmYHcymNYfzcE7mOLuQ==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html"},{"title":"イントロダクション","text":"講義計画 確率と統計の基礎 ： 最先端の機械学習技術の数学的基盤 探索と最適化 ： 広大な探索空間から最適解を効率よく探索 機械学習 ： データの背後に潜む知識を発見 自然言語処理 ： 人工知能技術の応用例 # 日付 内容 担当 1 10/3 概要 杉山 2 10/10 最適化（連続1） 佐藤 3 10/17 最適化（連続2） 佐藤 4 10/24 最適化（探索） 本多 5 10/31 確率と統計 本多 6 11/14 確率と統計 本多 7 11/21 確率と統計 本多 8 11/28 機械学習（教師付き学習） 本多 9 12/5 機械学習（教師付き学習） 佐藤 10 12/12 自然言語処理 宮尾 11 12/19 自然言語処理 宮尾 12 12/26 自然言語処理 宮尾 13 1/9 機械学習（強化学習） 杉山 1 1/16 試験 佐藤 人工知能とは 1956年：\"The Dartmouth Summer Research Project on Artificial Intelligence\" にて Artificial Intelligence という言葉が提唱された。 Watoson Nature AlphaGo 人工知能関連分野の発展 人工知能研究 1960年頃(1次ブーム)：記号処理、論理推論 1980年頃(2次ブーム)：エキスパートシステム ニューラルネット研究 1960年頃(1次ブーム)：パーセプトロン（１層） 1990年頃(2次ブーム)：誤差逆伝播ほう（多層） 機械学習研究 1995年頃〜：統計・凸最適化 1995年頃〜：ベイズ推論 2010年頃〜：深層学習 3種類の機械学習 教師付き学習 ：人間が教師となり、コンピュータの学習を手伝う。 教師なし学習 ：コンピュータが人間の手を介さずに自発的に学習する。 強化学習 ：ロボットが人間の手を介さずに自発的に意思決定を行う。 まとめ 人工知能 ： 知的なコンピュータシステムを作る 数学・プログラミング・実世界応用をつなぐ架け橋 探索 ： 広大な探索空間を効率よく探索 機械学習 ： データの背後に潜む知識を発見","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html"},{"title":"Pair HMM","text":"※実装時のパラメータ PairHMMによるアラインメントを実装していく。なお、 （ kerasy.Bio.alignment.PairHMM ） に定義してあります。 In [1]: from kerasy.Bio.alignment import PairHMM In [2]: # サンプル配列 seqX = \"CCAGAGCTGTGGCAGACAGTGGCT\" seqY = \"CCAGCTGTGCAGACACTGGCTT\" In [3]: model = PairHMM () In [4]: ! cat params.json { \"delta\": \"1/10\", \"epsilon\": \"1/5\", \"tau\": \"1/30\", \"px_e_y\": \"1/8\", \"px_ne_y\": \"1/24\", \"qx\": \"1/4\", \"qy\": \"1/4\" } In [5]: model . set_params ( path = \"params.json\" ) Pair HMM とその利点 HMMのために開発されたアルゴリズムを使える。（らしい←正解ラベルの無いアラインメントでBaum-Welchアルゴリズムをどのように使うのかは現在考察中です。） アラインメントの確率的な解釈が可能になる。 グローバルアラインメントを出力する Pair-HMM Mは $x$ と $y$ がマッチした状態。（$x_i$ と $y_j$ がアライン） Iは $x$ に挿入が起きている状態。（$x_i$ と $-$ がアライン） Dは $x$ に欠失が起きている状態。（$-$ と $y_j$ がアライン） （以下では上から $V&#94;M,V&#94;X,V&#94;Y$ と記述している。） Pair HMMのためのViterbiアルゴリズム 2本数の配列 $x,y$ を与えると確率最大のアラインメントを求めるアルゴリズム。 Initialization: $$ \\begin{cases} V&#94;M(0,0)=1, V&#94;M(i,0)=V&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ V&#94;X(0,0)=0, V&#94;X(1,0)=\\delta q_{x_1} V&#94;X(i,0)=\\varepsilon q_{x_i}V&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ V&#94;Y(0,0)=0, V&#94;Y(0,1)=\\delta q_{y_1} V&#94;Y(0,j)=\\varepsilon q_{y_j}V&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} V&#94;M(i,j) &= p_{x_iy_j}\\max\\begin{cases}(1-2\\delta-\\tau)V&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;Y(i-1,j-1)\\end{cases}\\\\ V&#94;X(i,j) &= q_{x_i}\\max\\begin{cases}\\delta V&#94;M(i-1,j)\\\\\\varepsilon V&#94;X(i-1,j)\\end{cases}\\\\ V&#94;Y(i,j) &= q_{y_j}\\max\\begin{cases}\\delta V&#94;M(i,j-1)\\\\\\varepsilon V&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$v_e = \\tau\\max\\left(V&#94;M(n,m),V&#94;X(n,m),V&#94;Y(n,m)\\right)$$ In [6]: P_optimal = model . align ( seqX , seqY , return_score = True ) Pair HMM (Viterbi) Alignment score: 3.551370651291424e-30 |parameter| value | -------------------------------- |delta | 0.1| |epsilon | 0.2| |tau | 0.03333333333333333| |px_e_y | 0.125| |px_ne_y |0.041666666666666664| |qx | 0.25| |qy | 0.25| =============================================================== X: CCAGAGCTGTGGCAGACAGTGGC-T Y: CC--AGCTGT-GCAGACACTGGCTT =============================================================== In [7]: print ( f \"π*= {P_optimal} \" ) π*=3.551370651291424e-30 アラインメントの信頼性 配列 $x,y$ が与えられた時、アラインメント $\\pi$ が得られる条件付き確率を考えることができ、それが アラインメントの信頼度 を表していると考ることができる。 $$ P(\\pi|x,y) = \\frac{P(x,y,\\pi)}{P(x,y)}\\\\ P(x,y) = \\sum_{\\text{alignments }\\pi}P(x,y,\\pi) $$ ※ なお、ここで $P(x,y)$ は $x,y$ に関する全ての可能なアラインメントについて確率を足し合わせたもの であり、Forwardアルゴリズムで計算することができる。 Pair HMMのためのForwardアルゴリズム ※ Viterbiの $\\max$ を $\\text{sum}$ に変更しただけ。 Initialization: $$ \\begin{cases} F&#94;M(0,0)=1, F&#94;M(i,0)=F&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ F&#94;X(0,0)=0, F&#94;X(1,0)=\\delta q_{x_1} F&#94;X(i,0)=\\varepsilon q_{x_i}F&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ F&#94;Y(0,0)=0, F&#94;Y(0,1)=\\delta q_{y_1} F&#94;Y(0,j)=\\varepsilon q_{y_j}F&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} F&#94;M(i,j) &= p_{x_iy_j}\\text{sum}\\begin{cases}(1-2\\delta-\\tau)F&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;Y(i-1,j-1)\\end{cases}\\\\ F&#94;X(i,j) &= q_{x_i}\\text{sum}\\begin{cases}\\delta F&#94;M(i-1,j)\\\\\\varepsilon F&#94;X(i-1,j)\\end{cases}\\\\ F&#94;Y(i,j) &= q_{y_j}\\text{sum}\\begin{cases}\\delta F&#94;M(i,j-1)\\\\\\varepsilon F&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$F_e = \\tau\\ \\text{sum}\\left(F&#94;M(n,m),F&#94;X(n,m),F&#94;Y(n,m)\\right)$$ In [8]: F , P_all = model . forward ( seqX , seqY ) In [9]: print ( f \"𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)= {P_all} \" ) 𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)=2.0457988072916236e-28 In [10]: print ( f \"P(π*|x, y)={P_optimal/P_all}\" ) P(π*|x, y)=0.017359334840912267 $x_i$ と $y_j$ がアラインされる確率 次の式で表される。 $$ \\begin{aligned} P(x_i\\diamondsuit y_i|x,y) &= \\frac{\\sum_{\\pi\\in\\Omega_{ij}}P(x,y,\\pi)}{P(x,y)}\\\\ &= \\frac{F&#94;M(i,j)\\cdot B&#94;M(i,j)}{P(x,y)} \\end{aligned}$$ ※ $\\Omega_{ij}$：$x_i$ と $y_j$ がアラインされるアラインメントの集合 Pair HMMのためのBackwardアルゴリズム Needleman-Wunsh-Gotoh のBackwardアルゴリズムとの類似性に注目！ Initialization: $$ \\begin{cases} B&#94;M(n,m)=B&#94;X(n,m)=B&#94;Y(n,m)=\\tau\\\\ B&#94;X(i,m)=\\varepsilon q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;Y(i,m)=\\varepsilon q_{y_{j+1}}B&#94;X(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ B&#94;M(i,m)=\\delta q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;M(n,j)=\\delta q_{y_{j+1}}B&#94;Y(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ \\end{cases} $$ Recursion: $i=n-1,\\ldots,1,\\quad j=m-1,\\ldots,1$ $$ \\begin{aligned} B&#94;M(i,j) &= \\text{sum}\\begin{cases}(1-2\\delta-\\tau)p_{x_iy_j}B&#94;M(i+1,j+1)\\\\\\delta q_{x_{i+1}}B(i+1,j)\\\\\\delta q_{y_{j+1}}B&#94;Y(i,j+1)\\end{cases}\\\\ B&#94;X(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{x_{i+1}}B&#94;X(i+1,j)\\\\ B&#94;Y(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{y_{j+1}}B&#94;Y(i,j+1)\\\\ \\end{aligned} $$ In [11]: B = model . backward ( seqX , seqY ) In [12]: Pij = ( F * B ) / P_all In [13]: import seaborn as sns import matplotlib.pyplot as plt In [14]: sns . heatmap ( Pij ) plt . show () In [15]: # 可視化のために pandas を使用。 import pandas as pd r , c = Pij . shape pd . set_option ( 'display.max_rows' , r ) pd . set_option ( 'display.max_columns' , c ) In [16]: df = pd . DataFrame ( Pij ) In [17]: df Out[17]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 0 1.139605e+00 1.145169e-02 1.061625e-04 9.380071e-06 7.330898e-07 1.256616e-08 5.467340e-10 2.910714e-11 5.763005e-12 3.410212e-13 5.102192e-15 2.187247e-16 1.988821e-17 1.147484e-18 1.367416e-20 6.720910e-22 4.976161e-24 7.098501e-26 9.237930e-28 2.211060e-29 3.898762e-32 1.763484e-40 1 1.002452e-01 9.915333e-01 6.192125e-03 1.868999e-04 4.332564e-05 9.546525e-07 4.066396e-08 2.157028e-09 9.465879e-11 4.846141e-11 4.058759e-13 3.267685e-14 8.754145e-16 1.928520e-16 1.373420e-18 1.082830e-19 9.927246e-22 1.394016e-23 1.508549e-25 4.777080e-27 9.963503e-30 8.788027e-38 2 2.530997e-02 1.110298e-01 7.189425e-01 4.724160e-03 2.510915e-04 4.961792e-05 1.187062e-06 1.017255e-07 3.970235e-09 2.068131e-10 9.703401e-11 7.255597e-13 1.565563e-13 2.611280e-15 3.254769e-16 2.694314e-18 1.079695e-19 1.562036e-21 1.545424e-23 1.735256e-25 1.265060e-27 2.215960e-35 3 1.439692e-03 1.313691e-01 9.101842e-02 4.446381e-01 5.912097e-03 3.126913e-04 8.585244e-05 1.538885e-06 1.919091e-07 8.250641e-09 2.393023e-10 1.283784e-10 1.387610e-12 2.250638e-13 4.821068e-15 2.111543e-16 4.457287e-18 2.448800e-19 3.227733e-21 1.284984e-23 8.240296e-26 3.335362e-33 4 3.517101e-05 3.000139e-03 4.131934e-01 8.504087e-02 1.663724e-01 9.561056e-03 2.917045e-04 9.039141e-05 1.788740e-06 1.312414e-07 2.869640e-08 4.101759e-10 1.507867e-10 3.456004e-12 5.959996e-13 5.757530e-15 2.024716e-16 4.111221e-18 7.279991e-20 1.060049e-21 6.121304e-24 4.843531e-31 5 9.934762e-06 1.458875e-04 3.927027e-03 6.740773e-01 8.441291e-02 7.234362e-02 1.094905e-02 1.879103e-04 1.252776e-04 1.454564e-06 1.059818e-07 2.729047e-08 9.494833e-10 8.082013e-11 1.033243e-11 3.411004e-13 6.554134e-15 3.958672e-16 8.201302e-18 3.482706e-20 2.714352e-22 4.461969e-29 6 5.322130e-07 6.381400e-05 4.257593e-04 6.688387e-03 9.174344e-01 4.917686e-02 4.329939e-02 3.819221e-03 1.763480e-04 1.328334e-04 1.940120e-06 9.105133e-08 1.541103e-08 2.609538e-09 8.150731e-11 2.404569e-11 1.889654e-13 3.985572e-15 1.024288e-16 6.839760e-18 1.341414e-20 4.476503e-27 7 5.863612e-10 7.892422e-07 1.012986e-04 1.397365e-03 1.342858e-02 1.002812e+00 2.593641e-02 3.890025e-02 1.670263e-03 1.614886e-04 8.871868e-05 1.756325e-06 1.155298e-07 1.122902e-08 2.203971e-09 1.028948e-10 2.509711e-11 1.531285e-13 2.099939e-15 4.258022e-17 2.374690e-18 1.208869e-24 8 1.171184e-11 2.035729e-09 3.700419e-07 2.397639e-04 4.844063e-03 2.599346e-02 9.949710e-01 1.502418e-02 2.712144e-02 1.478651e-03 1.433184e-04 6.712671e-05 1.454730e-06 9.766789e-08 9.072910e-09 2.328874e-09 6.340026e-11 1.502027e-11 1.916941e-13 1.314758e-15 1.242412e-17 4.691715e-23 9 3.005919e-13 6.399055e-11 5.515662e-09 3.748097e-07 1.153167e-04 1.497122e-02 6.310820e-02 8.863944e-01 1.030851e-02 1.491223e-02 2.002265e-03 8.941933e-05 3.530505e-05 1.470719e-06 9.754840e-08 8.043302e-09 3.375435e-09 3.679377e-11 2.917845e-12 5.484419e-14 1.471719e-15 4.178025e-21 10 1.792807e-15 1.557812e-12 1.844985e-10 1.289502e-08 7.545128e-07 6.340240e-05 2.061627e-02 1.787166e-01 5.419262e-01 1.188051e-02 1.024380e-02 2.347055e-03 7.577232e-05 1.796622e-05 1.114937e-06 7.069534e-08 8.011504e-09 2.756012e-09 4.374664e-11 6.704524e-13 1.075503e-14 1.217530e-19 11 1.923711e-17 4.362099e-15 1.941124e-12 6.147024e-10 1.551641e-08 5.550653e-07 1.380449e-04 9.537258e-03 5.398937e-01 1.863598e-01 1.452105e-02 9.548898e-03 1.837989e-03 5.136835e-05 1.397535e-05 6.835406e-07 5.429499e-08 8.819330e-09 1.851138e-09 1.231506e-11 1.775772e-13 2.576473e-18 12 5.638842e-19 1.455168e-16 9.139939e-15 1.547158e-12 1.037887e-09 2.248539e-08 1.151600e-06 9.872926e-05 5.973776e-03 8.862574e-01 6.786997e-02 1.624026e-02 4.029496e-03 2.179139e-03 2.921118e-05 1.601828e-05 5.561847e-07 3.123249e-08 2.978327e-09 9.604760e-10 3.744283e-12 9.636167e-17 13 3.331427e-21 7.494769e-19 2.963338e-16 6.987305e-15 4.315679e-12 6.087761e-10 3.497465e-08 3.604967e-06 8.639915e-05 5.915526e-03 9.923696e-01 2.749764e-02 2.345296e-02 2.411435e-03 1.600356e-03 2.967960e-05 1.263876e-05 5.535990e-07 1.777340e-08 1.086922e-09 1.497803e-10 4.715717e-15 14 8.334075e-23 3.113616e-20 1.885485e-18 4.096232e-16 1.085250e-14 2.877122e-12 9.801182e-10 2.465783e-08 7.111413e-06 1.332057e-04 5.532024e-03 1.019408e+00 1.546140e-02 2.230611e-02 1.326417e-03 7.657518e-04 3.756285e-05 1.397395e-05 7.084890e-07 8.614586e-09 3.251784e-10 1.560898e-13 15 2.761536e-24 1.577325e-22 1.652226e-19 6.855680e-18 4.640406e-16 1.789313e-14 1.881340e-12 7.696555e-10 3.721167e-08 3.131924e-06 2.768933e-04 5.432195e-03 1.019385e+00 1.220031e-02 2.678270e-02 1.012065e-03 4.234835e-04 2.691482e-05 8.312535e-06 2.735984e-07 4.296980e-09 1.264609e-12 16 1.125679e-25 3.526855e-23 5.295754e-22 1.029758e-19 2.954167e-17 8.415539e-16 3.337555e-14 1.886064e-12 3.708635e-10 8.103999e-08 2.979865e-06 2.717052e-04 5.867388e-03 1.008690e+00 1.398136e-02 2.796359e-02 1.094449e-03 2.222028e-04 1.653854e-05 6.727102e-06 7.321521e-08 3.095212e-11 17 5.314132e-29 1.371847e-25 1.002377e-22 1.431441e-21 2.329882e-19 2.824449e-17 1.264033e-15 1.039492e-13 1.896385e-12 2.117496e-10 8.676212e-08 1.428983e-06 4.224040e-04 7.551663e-03 9.828098e-01 2.577489e-02 2.154489e-02 1.348560e-03 1.271999e-04 1.123527e-05 1.554246e-06 1.061734e-09 18 1.311292e-30 3.344026e-28 1.039987e-25 1.917693e-22 4.842995e-21 2.644625e-19 5.424283e-17 1.016892e-15 2.466777e-13 3.876336e-12 1.412328e-10 6.644843e-08 1.307534e-06 2.267450e-04 1.352321e-02 9.236001e-01 4.123399e-02 2.242045e-02 1.780378e-03 1.137684e-04 4.658387e-06 2.707169e-08 19 3.685034e-32 1.308860e-29 1.727006e-27 1.846830e-25 9.168694e-23 2.025241e-20 2.015727e-19 7.009128e-17 1.110761e-15 2.135974e-13 8.991483e-12 3.294862e-10 2.170110e-08 1.342768e-06 1.738901e-04 1.366663e-02 9.157034e-01 5.085192e-02 1.134612e-02 1.333942e-03 1.601513e-04 7.755075e-07 20 2.627187e-34 3.307561e-31 6.412082e-29 8.638204e-27 5.130913e-25 5.421429e-23 2.735844e-20 4.581117e-19 4.673008e-17 1.996269e-15 1.567873e-13 2.425635e-11 7.144030e-10 2.339911e-08 4.401237e-07 1.583398e-04 8.993801e-03 8.715290e-01 1.032744e-01 9.301698e-03 8.040002e-04 1.264439e-05 21 3.712503e-36 1.248259e-33 7.484327e-31 4.015876e-28 1.275117e-26 7.126689e-25 1.294296e-22 1.126902e-20 1.562753e-18 3.245370e-17 8.822502e-16 3.618329e-13 1.719160e-11 9.436607e-10 3.634534e-08 4.567520e-07 2.489897e-05 1.031566e-02 8.313752e-01 1.337435e-01 9.529909e-03 1.755113e-04 22 1.081603e-37 4.975375e-35 3.859345e-33 1.396911e-30 8.994506e-28 2.233130e-26 1.907603e-24 1.395483e-22 7.223861e-21 2.385762e-18 3.020013e-17 1.437842e-15 1.876938e-13 2.135337e-11 5.432165e-10 7.346489e-08 4.608162e-07 1.776497e-05 2.915009e-03 7.255898e-01 2.520881e-01 4.862597e-03 23 7.053935e-40 3.695478e-37 9.639089e-35 1.470014e-32 2.795455e-30 1.235666e-27 2.213410e-26 7.771768e-24 1.829949e-22 1.539068e-20 1.623359e-18 3.985091e-17 3.521057e-15 1.986472e-13 1.486597e-11 3.334896e-10 7.576041e-08 5.116867e-07 2.834710e-05 1.528768e-03 3.676275e-01 6.239253e-01 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-6.html"},{"title":"生物物理学 第2回","text":"講師： 樋口秀男 生命体（生物）の一般的定義 生物とは、以下の四つの条件を満たす物質システム 自己と外界との境界 エネルギーと物質の代謝 自己複製 恒常性 電子 分子 細胞数 整体の階層性 $10&#94;{28}$ $10&#94;{23}$ $10&#94;{13}$ ヒト 意識・運動・代謝 $10&#94;{24}$ $10&#94;{19}$ $10&#94;{9}$ 心臓 循環・拡散 $10&#94;{15}$ $10&#94;{10}$ $10&#94;{0}$ 心筋細胞 生理的なリズム単位 $10&#94;{5}$ $10&#94;{5}$ 筋節 ゆらぎを制した振動 $10&#94;{0}$ タンパク質 反応のゆらぎ $10&#94;{2}$ アミノ酸 タンパク質の性質の起源 $10&#94;{0}$ 電子 量子力学の支配領域 生命科学を覆う謎 生命誕生の謎（+生命の進化、分化の謎） タンパク質構造の決定と機能との関係の謎 細胞が超多種分子（タンパク質、脂質、小分子、イオン、…）の濃度・種類・機能の制御を行う謎 個体（臓器、器官等）の構造と機能構築の謎 生命誕生の謎 元素誕生は超新星の爆発→重金属ができる。 現宇宙の元素の割合と人体内の元素比が非常に似通っている。 RNAワールド プロテインワールド 原始地球上に存在したと仮定される、RNA からなる自己複製系のこと。また、これがかつて存在し、現生生物へと進化したという仮説。 まずアミノ酸ができ、重合してポリペプチド、さらにタンパク質が作り出され、これが触媒として働いて生命を作り出したという仮説。 生命誕生を示唆した実験事実 ミラーの放電によるアミノ酸合成(1953) $\\mathrm{CH_3,NH_3,H_2,H_2O}$ を含む気体に放電（落雷を模した）をする。 実験２週間後に以下の化合物 （アミノ酸） ができた。 グリシン アラニン グルタル酸 酢酸（脂肪酸） 塩基や糖（リボース）、核酸基、RNA、タンパク質なども化学合成可能。 生命基本物質の化学合成が成功した理由 地球には、エネルギーの高い（海底火山、紫外線、雷、高音）場所と低く安定な場所が共存していたので、分子は 高エネルギー環境で合成され、低エネルギー環境で安定化する ことができた。 $$A\\overset{k_1}{{\\longrightarrow}}B\\overset{k_2}{{\\longrightarrow}}C$$ In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: def simulate ( ax , color , tp , A = 1 , B = 0 , C = 0 , dt = 1e-3 , k1 = 0.07 , k2 = 0.02 , K = 1 ): time = np . arange ( 0 , 100 , dt ) As = np . zeros ( shape = len ( time )) Bs = np . zeros ( shape = len ( time )) Cs = np . zeros ( shape = len ( time )) for i , t in enumerate ( time ): dA = ( - k1 * A ) * dt * K dB = ( k1 * A - k2 * B ) * dt * K dC = ( k2 * B ) * dt * K A += dA ; B += dB ; C += dC As [ i ] = A ; Bs [ i ] = B ; Cs [ i ] = C if t > tp : K = 1e-6 # 温度を下げ、反応速度が1e-6倍になったことをシミュレーション ax . plot ( time , As , color = color ) ax . plot ( time , Bs , color = color ) ax . plot ( time , Cs , color = color ) if tp < 100 : ax . vlines ( x = tp , ymin = 0 , ymax = 1 , linestyle = \":\" ) return ax In [3]: fig , ax = plt . subplots () ax = simulate ( ax = ax , color = \"red\" , tp = 20 ) ax = simulate ( ax = ax , color = \"black\" , tp = 100 ) ax . set_xlabel ( \"Time\" ) ax . set_ylabel ( \"RQ\" ) ax . set_title ( \"Simulation Result\" ) plt . show () 上記のシミュレーション結果から、$A,B$ 分子を得るためには、 途中で（温度が下がるなどの結果）反応速度が下がる必要がある ことがわかる。 生体分子が濃縮され、多次反応による分子合成速度が上がった。 地球は巨大で多様な反応槽であったため、合成確率が上がった。 考えられる生物 地球型炭素生物 地球環境のように水と二酸化炭素（あるいはメタン）が豊富な惑星であるなら、情報記憶（DNA）→伝令（mRNA）→機能（タンパク質、RNA）のような地球型の仕事を分担した炭素生物が生まれる可能性は高い。 炭素生物 vs ケイ素生物 常温常圧で安定な炭素ー炭素結合 とは違い、 ケイ素ーケイ素結合はパイ結合やシグマ結合による二重三重結合を作る傾向がほとんど無く、非常に不安定 である。 炭素ーケイ素結合は安定 なので、炭素生物の中にケイ素が含まれるだろう。したがって、ケイ素生物の存在する確率は非常に低い。 金属生物 常温において金属結合が安定であり、分子としての機能を持つことは困難であるため、生物の中心にはならないだろう。ただし、金属イオンや錯体として、炭素生物やケイ素生物に利用されることはありうる。 講義のまとめ 生命分子や細胞の種類は多く、構造や機能をどのように理解するかが、 生命科学全体の 課題である。 生命は 宇宙の元素を効率よく利用した。 地球上の 高↔︎低エネルギーを行き交い 、多様な環境や濃縮により高確率かつ安定的に生体分子が合成された。 これが生命の誕生の確率を大きくした。 初めにRNAが合成され、それを鋳型としてタンパク質が合成され、原子生命が誕生したと想像される。 系外惑星にも、炭素生命体が存在する可能性がある。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html"},{"title":"ペアワイズアラインメント","text":"ペアワイズアラインメントとは 2本のDNAの塩基配列（タンパク質のアミノ酸配列）を比較する方法の一つ バイオインフォマティクスでは最も基本的な解析手法 なぜDNA配列の比較をするのか DNAの機能を知りたい （∵ DNAの配列が似ていると機能が似ている） DNAのどの部分が重要かを知りたい。 （∵ 「保存されている＝重要」だと考えられる） 生物の進化系統樹を知りたい 新型シーケンサーで読まれたDNAの由来を知りたい DNAの変異や新型シークエンサーの読み取りエラーでは 長さが異なる ことがあるので、 長さの変化を考慮し効率の良い動的計画法 を用いる アラインメントの種類 説明 例 グローバルアラインメント 2本の配列の 全体 をアラインメントする。 Needleman-Wunsch ローカルアラインメント 2本の配列の 似ている部分を検出 し、その部分をアランメントする Smith-Waterman 実装 各種アラインメントを実装していく。なお、全て Affine gap penalty を利用する。 In [1]: from kerasy.Bio.alignment import NeedlemanWunshGotoh , SmithWaterman , BackwardNeedlemanWunshGotoh In [2]: # サンプル配列 seqX = \"GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACGGAGCTGTGGCAGACCTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGCGAGGACTG\" seqY = \"CGCATGCGGAGTGAGGGGAGCAGTTGGGAACAGATGGTCCCGCCGAGGGACCGGTGGGCAGACGGGGCCAGCTGTGGCAGACACTGGCTTCTAACCACCGAACGTTCTTTCCGCTCCGC\" Needleman-Wunsch-Gotoh 自作のモジュール （ kerasy.Bio.alignment.NeedlemanWunshGotoh ） を使ってアラインメントをします。 In [3]: model = NeedlemanWunshGotoh () In [4]: model . align ( seqX , seqY ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== Smith-Waterman 自作のモジュール （ kerasy.Bio.alignment.SmithWaterman ） を使ってアラインメントをします。 In [5]: model = SmithWaterman () In [6]: model . align ( seqX , seqY ) Smith-Waterman Alignment score: 37.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== Aligned positions: X[0,111] Y[7,118] X: GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACG Y: GGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GGGCAGACG X: G----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGC Y: GGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCTCCGC =============================================================== 制約付きアラインメント $x_i$ と $y_j$ がアラインされるという制約下で最大のアラインメントスコアを求める。 全てのパターンを列挙すると $\\mathcal{O}(n&#94;2m&#94;2)$ の時間がかかるが、 後ろ向きアラインメント と組み合わせることで全てのパターンを $\\mathcal{O}(nm)$ で計算可能。 前向き：xiとyjがアラインされる時の、iまでとjまでの配列の最大アラインメントスコアを保持。 後ろ向き：xiとyjがアラインされる時の、i+1以降とj+1以降の配列の最大アラインメントスコアを保持。 Needleman-Wunsch-Gotohの逆向きアラインメントは （ kerasy.Bio.alignment.BackwardNeedlemanWunshGotoh ） に定義してあります。 In [7]: model_forward = NeedlemanWunshGotoh () model_backward = BackwardNeedlemanWunshGotoh () In [8]: model_forward . align ( seqX , seqY , memorize = True ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== In [9]: model_backward . align ( seqX , seqY , memorize = True ) Backward Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGGAACA-GATGGTCC-CGCCGAGGGACCGGTGG- X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTTC-TAACCACCGAACGTTCTTTCCG-CT X: CCGCGAGGACT Y: CCGC------- =============================================================== In [10]: k = 3 n = len ( seqX ) + 1 m = len ( seqY ) + 1 In [11]: M = model_forward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] bM = model_backward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] In [12]: A = M + bM In [13]: # 上の配列を見れば、seqX[0] と seqY[7] がアラインされている時に最大スコア14を取ることがわかるので、それを確かめる。 print ( A [ 0 , 7 ]) 14.0 In [14]: # 可視化のために pandas を使用。 import pandas as pd pd . set_option ( 'display.max_rows' , m ) pd . set_option ( 'display.max_columns' , n ) In [15]: df = pd . DataFrame ( A ) In [16]: df Out[16]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 0 12.0 10.0 8.0 8.0 8.0 10.0 8.0 14.0 7.0 2.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -17.0 -20.0 -25.0 -26.0 -31.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -51.0 -54.0 -55.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -129.0 -132.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -150.0 -156.0 -156.0 -159.0 -160.0 -163.0 -164.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -181.0 -184.0 -187.0 -190.0 -193.0 -194.0 -197.0 -198.0 -201.0 -200.0 -203.0 -206.0 -209.0 -210.0 -211.0 -214.0 -217.0 -218.0 -221.0 -224.0 -225.0 -228.0 -229.0 -230.0 -235.0 -238.0 -241.0 -242.0 -243.0 -246.0 1 5.0 12.0 8.0 6.0 6.0 8.0 8.0 8.0 14.0 5.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -14.0 -17.0 -22.0 -25.0 -26.0 -33.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -53.0 -54.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -131.0 -132.0 -135.0 -140.0 -141.0 -144.0 -147.0 -148.0 -150.0 -157.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -171.0 -174.0 -179.0 -180.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -200.0 -203.0 -206.0 -211.0 -210.0 -211.0 -216.0 -217.0 -220.0 -223.0 -224.0 -227.0 -228.0 -229.0 -232.0 -237.0 -240.0 -243.0 -242.0 -243.0 2 2.0 3.0 10.0 8.0 6.0 6.0 6.0 6.0 6.0 14.0 3.0 0.0 -3.0 -4.0 -9.0 -12.0 -13.0 -16.0 -17.0 -24.0 -27.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -47.0 -48.0 -53.0 -54.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -125.0 -126.0 -131.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -150.0 -150.0 -157.0 -156.0 -159.0 -158.0 -163.0 -166.0 -169.0 -172.0 -171.0 -176.0 -177.0 -180.0 -183.0 -184.0 -187.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -200.0 -203.0 -204.0 -209.0 -210.0 -213.0 -214.0 -217.0 -220.0 -221.0 -224.0 -225.0 -228.0 -231.0 -234.0 -237.0 -238.0 -241.0 -242.0 3 -1.0 2.0 3.0 8.0 6.0 6.0 4.0 6.0 6.0 4.0 14.0 1.0 0.0 -5.0 -4.0 -9.0 -12.0 -13.0 -18.0 -17.0 -24.0 -29.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -49.0 -48.0 -55.0 -56.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -127.0 -126.0 -133.0 -136.0 -137.0 -142.0 -143.0 -146.0 -150.0 -151.0 -150.0 -157.0 -156.0 -159.0 -160.0 -165.0 -166.0 -169.0 -172.0 -171.0 -176.0 -179.0 -182.0 -185.0 -186.0 -187.0 -192.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -209.0 -212.0 -213.0 -216.0 -217.0 -220.0 -223.0 -224.0 -225.0 -230.0 -233.0 -236.0 -239.0 -238.0 -241.0 4 -4.0 -3.0 0.0 1.0 8.0 4.0 4.0 2.0 4.0 4.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -11.0 -14.0 -15.0 -20.0 -19.0 -22.0 -27.0 -26.0 -29.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -60.0 -63.0 -64.0 -67.0 -66.0 -69.0 -68.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -87.0 -92.0 -91.0 -94.0 -95.0 -100.0 -103.0 -100.0 -105.0 -106.0 -109.0 -112.0 -113.0 -116.0 -119.0 -118.0 -121.0 -124.0 -127.0 -128.0 -131.0 -136.0 -137.0 -142.0 -145.0 -148.0 -148.0 -153.0 -150.0 -155.0 -156.0 -159.0 -160.0 -165.0 -168.0 -169.0 -170.0 -171.0 -176.0 -177.0 -182.0 -185.0 -186.0 -189.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -220.0 -221.0 -224.0 -227.0 -228.0 -233.0 -234.0 -237.0 -238.0 5 -7.0 -4.0 -3.0 -2.0 -1.0 8.0 2.0 4.0 4.0 2.0 4.0 2.0 14.0 1.0 0.0 -3.0 -6.0 -9.0 -14.0 -15.0 -20.0 -21.0 -20.0 -25.0 -26.0 -29.0 -32.0 -33.0 -36.0 -39.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -59.0 -60.0 -61.0 -64.0 -65.0 -64.0 -67.0 -66.0 -73.0 -74.0 -77.0 -76.0 -81.0 -78.0 -83.0 -84.0 -85.0 -90.0 -91.0 -92.0 -95.0 -98.0 -101.0 -98.0 -103.0 -106.0 -107.0 -110.0 -111.0 -114.0 -117.0 -118.0 -121.0 -122.0 -127.0 -130.0 -131.0 -136.0 -137.0 -140.0 -144.0 -147.0 -146.0 -151.0 -150.0 -153.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -173.0 -176.0 -179.0 -182.0 -183.0 -184.0 -187.0 -190.0 -191.0 -190.0 -195.0 -198.0 -201.0 -200.0 -203.0 -206.0 -207.0 -210.0 -213.0 -214.0 -217.0 -218.0 -219.0 -224.0 -227.0 -230.0 -233.0 -232.0 -235.0 6 -10.0 -9.0 -6.0 -3.0 -4.0 -1.0 6.0 2.0 2.0 4.0 2.0 2.0 2.0 14.0 1.0 -2.0 -5.0 -8.0 -9.0 -14.0 -17.0 -18.0 -23.0 -20.0 -23.0 -28.0 -31.0 -34.0 -33.0 -34.0 -37.0 -38.0 -43.0 -44.0 -49.0 -52.0 -55.0 -56.0 -57.0 -58.0 -61.0 -64.0 -66.0 -62.0 -65.0 -66.0 -71.0 -74.0 -77.0 -76.0 -79.0 -76.0 -81.0 -84.0 -85.0 -88.0 -91.0 -94.0 -97.0 -96.0 -99.0 -98.0 -101.0 -104.0 -107.0 -110.0 -113.0 -114.0 -115.0 -116.0 -121.0 -124.0 -127.0 -130.0 -133.0 -136.0 -139.0 -141.0 -142.0 -147.0 -146.0 -149.0 -148.0 -153.0 -156.0 -159.0 -162.0 -163.0 -166.0 -167.0 -170.0 -173.0 -174.0 -177.0 -180.0 -183.0 -182.0 -187.0 -188.0 -191.0 -190.0 -193.0 -196.0 -199.0 -200.0 -203.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -218.0 -221.0 -224.0 -227.0 -228.0 -231.0 -232.0 7 -13.0 -10.0 -9.0 -8.0 -5.0 -2.0 -1.0 6.0 2.0 0.0 4.0 0.0 2.0 1.0 14.0 3.0 0.0 -3.0 -8.0 -9.0 -14.0 -17.0 -18.0 -22.0 -18.0 -21.0 -26.0 -29.0 -32.0 -33.0 -34.0 -37.0 -38.0 -43.0 -46.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -59.0 -64.0 -64.0 -60.0 -63.0 -66.0 -69.0 -72.0 -75.0 -76.0 -77.0 -74.0 -79.0 -82.0 -83.0 -86.0 -89.0 -94.0 -95.0 -96.0 -97.0 -98.0 -99.0 -102.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -121.0 -124.0 -125.0 -130.0 -131.0 -134.0 -139.0 -139.0 -142.0 -145.0 -146.0 -147.0 -150.0 -153.0 -154.0 -157.0 -160.0 -163.0 -164.0 -167.0 -170.0 -173.0 -176.0 -177.0 -180.0 -181.0 -184.0 -185.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -204.0 -207.0 -208.0 -211.0 -212.0 -213.0 -218.0 -221.0 -224.0 -225.0 -226.0 -229.0 8 -16.0 -13.0 -12.0 -11.0 -10.0 -5.0 -4.0 -1.0 6.0 0.0 2.0 2.0 2.0 0.0 3.0 14.0 3.0 0.0 -5.0 -6.0 -11.0 -14.0 -15.0 -18.0 -21.0 -16.0 -21.0 -26.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -52.0 -55.0 -56.0 -59.0 -64.0 -62.0 -60.0 -61.0 -66.0 -69.0 -72.0 -75.0 -74.0 -75.0 -74.0 -79.0 -80.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -95.0 -96.0 -99.0 -102.0 -105.0 -108.0 -109.0 -112.0 -113.0 -118.0 -121.0 -122.0 -127.0 -128.0 -131.0 -135.0 -138.0 -137.0 -142.0 -143.0 -144.0 -147.0 -150.0 -151.0 -154.0 -157.0 -160.0 -161.0 -164.0 -167.0 -170.0 -173.0 -174.0 -177.0 -178.0 -179.0 -182.0 -183.0 -186.0 -189.0 -190.0 -191.0 -194.0 -197.0 -198.0 -201.0 -204.0 -205.0 -208.0 -209.0 -210.0 -215.0 -218.0 -221.0 -222.0 -223.0 -226.0 9 -19.0 -16.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 4.0 2.0 0.0 2.0 0.0 2.0 3.0 14.0 3.0 -2.0 -3.0 -8.0 -11.0 -12.0 -17.0 -16.0 -19.0 -16.0 -21.0 -26.0 -27.0 -28.0 -31.0 -32.0 -37.0 -40.0 -39.0 -44.0 -47.0 -48.0 -49.0 -52.0 -53.0 -58.0 -57.0 -62.0 -62.0 -58.0 -61.0 -66.0 -69.0 -72.0 -73.0 -72.0 -75.0 -74.0 -77.0 -80.0 -83.0 -88.0 -89.0 -90.0 -95.0 -94.0 -93.0 -96.0 -99.0 -102.0 -105.0 -106.0 -109.0 -110.0 -115.0 -118.0 -119.0 -124.0 -125.0 -128.0 -132.0 -133.0 -136.0 -137.0 -140.0 -141.0 -144.0 -147.0 -148.0 -151.0 -154.0 -157.0 -158.0 -161.0 -164.0 -167.0 -170.0 -171.0 -174.0 -175.0 -178.0 -177.0 -180.0 -183.0 -186.0 -187.0 -188.0 -191.0 -194.0 -195.0 -198.0 -201.0 -202.0 -205.0 -206.0 -207.0 -212.0 -215.0 -218.0 -219.0 -220.0 -223.0 10 -22.0 -19.0 -18.0 -17.0 -16.0 -11.0 -10.0 -7.0 -4.0 -3.0 4.0 0.0 0.0 0.0 0.0 2.0 3.0 14.0 1.0 0.0 -5.0 -8.0 -9.0 -14.0 -15.0 -14.0 -19.0 -16.0 -21.0 -24.0 -25.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -44.0 -45.0 -46.0 -49.0 -50.0 -55.0 -58.0 -55.0 -62.0 -60.0 -58.0 -61.0 -66.0 -69.0 -70.0 -71.0 -72.0 -77.0 -72.0 -77.0 -80.0 -83.0 -88.0 -87.0 -90.0 -93.0 -92.0 -93.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -112.0 -115.0 -116.0 -121.0 -122.0 -125.0 -129.0 -130.0 -131.0 -136.0 -135.0 -138.0 -141.0 -144.0 -145.0 -148.0 -151.0 -154.0 -155.0 -158.0 -161.0 -162.0 -167.0 -168.0 -169.0 -172.0 -175.0 -176.0 -175.0 -180.0 -183.0 -186.0 -185.0 -188.0 -191.0 -192.0 -195.0 -198.0 -199.0 -202.0 -203.0 -204.0 -209.0 -212.0 -213.0 -218.0 -217.0 -220.0 11 -22.0 -24.0 -21.0 -18.0 -19.0 -16.0 -12.0 -12.0 -9.0 -4.0 -5.0 2.0 -2.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -13.0 -14.0 -19.0 -16.0 -19.0 -22.0 -23.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -42.0 -43.0 -46.0 -49.0 -52.0 -55.0 -58.0 -55.0 -60.0 -60.0 -58.0 -61.0 -66.0 -67.0 -68.0 -71.0 -74.0 -75.0 -72.0 -79.0 -82.0 -81.0 -86.0 -87.0 -88.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -120.0 -124.0 -127.0 -127.0 -128.0 -131.0 -134.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -151.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -168.0 -167.0 -172.0 -173.0 -176.0 -175.0 -178.0 -181.0 -184.0 -185.0 -188.0 -189.0 -192.0 -195.0 -196.0 -199.0 -200.0 -203.0 -206.0 -209.0 -212.0 -211.0 -216.0 -217.0 12 -28.0 -22.0 -24.0 -23.0 -20.0 -17.0 -16.0 -12.0 -10.0 -9.0 -4.0 -4.0 2.0 -4.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -11.0 -12.0 -17.0 -16.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -35.0 -36.0 -37.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -55.0 -58.0 -58.0 -56.0 -61.0 -64.0 -65.0 -66.0 -71.0 -72.0 -73.0 -70.0 -79.0 -80.0 -81.0 -84.0 -87.0 -86.0 -89.0 -90.0 -91.0 -94.0 -97.0 -100.0 -101.0 -106.0 -109.0 -110.0 -115.0 -116.0 -118.0 -124.0 -126.0 -127.0 -126.0 -131.0 -132.0 -135.0 -138.0 -139.0 -140.0 -145.0 -148.0 -149.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -166.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -179.0 -182.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -198.0 -203.0 -206.0 -209.0 -212.0 -209.0 -214.0 13 -29.0 -30.0 -22.0 -26.0 -25.0 -22.0 -17.0 -17.0 -12.0 -12.0 -10.0 -6.0 -4.0 0.0 -4.0 -2.0 -4.0 -3.0 -2.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -9.0 -12.0 -11.0 -12.0 -15.0 -14.0 -19.0 -22.0 -25.0 -28.0 -31.0 -34.0 -35.0 -34.0 -35.0 -38.0 -43.0 -44.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -60.0 -54.0 -59.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -70.0 -77.0 -78.0 -81.0 -82.0 -85.0 -88.0 -89.0 -92.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -124.0 -127.0 -124.0 -129.0 -130.0 -135.0 -138.0 -141.0 -140.0 -145.0 -146.0 -147.0 -152.0 -155.0 -158.0 -157.0 -158.0 -163.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -178.0 -179.0 -182.0 -181.0 -186.0 -189.0 -190.0 -191.0 -192.0 -197.0 -198.0 -203.0 -204.0 -207.0 -210.0 -209.0 14 -33.0 -30.0 -29.0 -22.0 -27.0 -25.0 -21.0 -18.0 -15.0 -10.0 -12.0 -8.0 -8.0 -2.0 -1.0 -5.0 -3.0 -6.0 -2.0 -2.0 4.0 14.0 1.0 -2.0 -3.0 -6.0 -7.0 -10.0 -9.0 -10.0 -13.0 -14.0 -19.0 -20.0 -25.0 -26.0 -31.0 -32.0 -33.0 -34.0 -37.0 -40.0 -43.0 -44.0 -49.0 -48.0 -51.0 -52.0 -53.0 -56.0 -58.0 -54.0 -59.0 -62.0 -65.0 -66.0 -69.0 -72.0 -73.0 -70.0 -75.0 -76.0 -79.0 -82.0 -83.0 -86.0 -89.0 -90.0 -91.0 -92.0 -97.0 -100.0 -103.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -122.0 -125.0 -124.0 -129.0 -132.0 -135.0 -136.0 -139.0 -142.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -159.0 -158.0 -163.0 -164.0 -167.0 -166.0 -169.0 -170.0 -175.0 -176.0 -179.0 -180.0 -183.0 -186.0 -187.0 -190.0 -191.0 -194.0 -197.0 -200.0 -203.0 -204.0 -207.0 -208.0 15 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -7.0 -2.0 -1.0 6.0 14.0 3.0 0.0 -1.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -14.0 -19.0 -22.0 -23.0 -24.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -42.0 -47.0 -48.0 -49.0 -50.0 -51.0 -56.0 -57.0 -52.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -73.0 -70.0 -73.0 -76.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -107.0 -110.0 -115.0 -117.0 -118.0 -121.0 -122.0 -123.0 -126.0 -129.0 -130.0 -133.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -152.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -165.0 -168.0 -169.0 -168.0 -173.0 -176.0 -177.0 -178.0 -181.0 -184.0 -187.0 -188.0 -189.0 -194.0 -197.0 -200.0 -203.0 -202.0 -205.0 16 -37.0 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -5.0 -2.0 1.0 8.0 14.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -13.0 -14.0 -17.0 -22.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -37.0 -40.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -49.0 -54.0 -55.0 -52.0 -57.0 -62.0 -63.0 -66.0 -67.0 -70.0 -71.0 -70.0 -71.0 -74.0 -79.0 -80.0 -83.0 -84.0 -85.0 -88.0 -91.0 -94.0 -95.0 -100.0 -101.0 -106.0 -109.0 -112.0 -114.0 -117.0 -118.0 -119.0 -120.0 -123.0 -124.0 -129.0 -132.0 -133.0 -132.0 -135.0 -140.0 -141.0 -146.0 -149.0 -150.0 -153.0 -154.0 -157.0 -158.0 -161.0 -162.0 -165.0 -168.0 -167.0 -168.0 -171.0 -174.0 -175.0 -176.0 -179.0 -184.0 -185.0 -188.0 -191.0 -192.0 -197.0 -200.0 -201.0 -202.0 17 -38.0 -37.0 -32.0 -33.0 -30.0 -29.0 -22.0 -25.0 -23.0 -19.0 -19.0 -11.0 -11.0 -8.0 -8.0 -9.0 -2.0 -3.0 -5.0 -3.0 -5.0 0.0 1.0 10.0 14.0 5.0 4.0 -1.0 -2.0 -3.0 -4.0 -7.0 -10.0 -13.0 -12.0 -17.0 -22.0 -21.0 -24.0 -25.0 -28.0 -31.0 -34.0 -35.0 -38.0 -37.0 -40.0 -43.0 -46.0 -47.0 -48.0 -47.0 -52.0 -53.0 -50.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -68.0 -69.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -97.0 -98.0 -103.0 -106.0 -108.0 -111.0 -114.0 -115.0 -116.0 -117.0 -120.0 -121.0 -126.0 -129.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -146.0 -147.0 -150.0 -151.0 -154.0 -155.0 -158.0 -159.0 -162.0 -163.0 -166.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -181.0 -182.0 -185.0 -188.0 -189.0 -194.0 -195.0 -198.0 -199.0 18 -39.0 -38.0 -37.0 -32.0 -35.0 -30.0 -27.0 -22.0 -23.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -5.0 -3.0 -3.0 2.0 3.0 10.0 14.0 7.0 6.0 1.0 0.0 -1.0 -4.0 -5.0 -10.0 -13.0 -12.0 -15.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -34.0 -33.0 -36.0 -35.0 -38.0 -41.0 -46.0 -45.0 -46.0 -45.0 -50.0 -51.0 -50.0 -55.0 -58.0 -61.0 -62.0 -63.0 -68.0 -67.0 -66.0 -67.0 -70.0 -75.0 -78.0 -79.0 -82.0 -83.0 -88.0 -91.0 -92.0 -96.0 -98.0 -101.0 -106.0 -106.0 -109.0 -112.0 -113.0 -114.0 -117.0 -118.0 -121.0 -124.0 -127.0 -130.0 -131.0 -134.0 -137.0 -140.0 -143.0 -144.0 -147.0 -148.0 -151.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -168.0 -171.0 -174.0 -175.0 -178.0 -179.0 -180.0 -185.0 -188.0 -189.0 -192.0 -193.0 -196.0 19 -40.0 -39.0 -38.0 -37.0 -32.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -7.0 -2.0 -1.0 2.0 5.0 12.0 14.0 7.0 6.0 3.0 2.0 -1.0 -2.0 -7.0 -10.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -33.0 -34.0 -35.0 -38.0 -41.0 -44.0 -43.0 -44.0 -45.0 -50.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -65.0 -66.0 -65.0 -66.0 -67.0 -70.0 -75.0 -76.0 -79.0 -80.0 -85.0 -88.0 -89.0 -94.0 -94.0 -98.0 -103.0 -105.0 -104.0 -109.0 -110.0 -111.0 -114.0 -117.0 -116.0 -121.0 -124.0 -127.0 -128.0 -131.0 -134.0 -137.0 -140.0 -141.0 -142.0 -145.0 -148.0 -149.0 -150.0 -153.0 -156.0 -157.0 -158.0 -161.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -177.0 -182.0 -185.0 -188.0 -187.0 -190.0 -193.0 20 -45.0 -40.0 -39.0 -40.0 -39.0 -30.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -7.0 0.0 -1.0 4.0 7.0 12.0 14.0 7.0 8.0 5.0 2.0 1.0 -4.0 -7.0 -8.0 -11.0 -12.0 -13.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -32.0 -31.0 -34.0 -35.0 -38.0 -39.0 -42.0 -41.0 -44.0 -45.0 -48.0 -49.0 -50.0 -55.0 -58.0 -57.0 -60.0 -63.0 -64.0 -65.0 -66.0 -67.0 -70.0 -73.0 -76.0 -77.0 -82.0 -85.0 -86.0 -91.0 -92.0 -94.0 -100.0 -102.0 -103.0 -104.0 -107.0 -108.0 -111.0 -114.0 -115.0 -116.0 -121.0 -124.0 -125.0 -128.0 -131.0 -134.0 -135.0 -138.0 -141.0 -140.0 -143.0 -146.0 -147.0 -150.0 -153.0 -154.0 -155.0 -158.0 -159.0 -162.0 -165.0 -168.0 -169.0 -170.0 -173.0 -174.0 -179.0 -182.0 -185.0 -188.0 -185.0 -190.0 21 -44.0 -45.0 -40.0 -39.0 -40.0 -37.0 -30.0 -33.0 -30.0 -27.0 -22.0 -25.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -5.0 0.0 1.0 6.0 7.0 12.0 14.0 9.0 10.0 5.0 2.0 -1.0 -4.0 -7.0 -8.0 -11.0 -10.0 -11.0 -14.0 -19.0 -20.0 -23.0 -28.0 -29.0 -30.0 -31.0 -34.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -48.0 -51.0 -50.0 -55.0 -56.0 -59.0 -58.0 -61.0 -64.0 -65.0 -68.0 -67.0 -68.0 -73.0 -76.0 -77.0 -82.0 -85.0 -88.0 -91.0 -94.0 -94.0 -99.0 -100.0 -103.0 -102.0 -105.0 -106.0 -111.0 -114.0 -117.0 -116.0 -119.0 -122.0 -123.0 -128.0 -131.0 -134.0 -133.0 -136.0 -139.0 -138.0 -141.0 -146.0 -147.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -166.0 -167.0 -168.0 -173.0 -174.0 -179.0 -180.0 -183.0 -186.0 -185.0 22 -47.0 -44.0 -45.0 -42.0 -39.0 -40.0 -35.0 -30.0 -33.0 -28.0 -29.0 -20.0 -25.0 -20.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 3.0 8.0 9.0 14.0 14.0 9.0 8.0 3.0 0.0 -1.0 -6.0 -9.0 -8.0 -11.0 -10.0 -13.0 -16.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -55.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -67.0 -70.0 -75.0 -78.0 -77.0 -84.0 -85.0 -89.0 -93.0 -95.0 -94.0 -99.0 -100.0 -103.0 -102.0 -107.0 -106.0 -113.0 -116.0 -117.0 -116.0 -119.0 -124.0 -123.0 -130.0 -133.0 -134.0 -135.0 -136.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -168.0 -167.0 -170.0 -175.0 -174.0 -181.0 -180.0 -183.0 -186.0 23 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 5.0 10.0 11.0 14.0 14.0 7.0 8.0 1.0 -2.0 -1.0 -6.0 -9.0 -8.0 -11.0 -12.0 -13.0 -18.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -44.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -70.0 -77.0 -80.0 -77.0 -86.0 -85.0 -89.0 -94.0 -95.0 -94.0 -99.0 -100.0 -103.0 -104.0 -109.0 -106.0 -113.0 -116.0 -119.0 -116.0 -121.0 -126.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -148.0 -151.0 -150.0 -151.0 -154.0 -155.0 -160.0 -159.0 -162.0 -165.0 -168.0 -167.0 -172.0 -177.0 -176.0 -183.0 -180.0 -183.0 24 -51.0 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -4.0 -1.0 2.0 5.0 10.0 11.0 14.0 14.0 5.0 8.0 -1.0 -4.0 -3.0 -6.0 -9.0 -8.0 -13.0 -14.0 -13.0 -20.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -39.0 -36.0 -37.0 -44.0 -41.0 -46.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -63.0 -64.0 -67.0 -68.0 -71.0 -72.0 -79.0 -82.0 -79.0 -86.0 -87.0 -89.0 -92.0 -93.0 -94.0 -97.0 -98.0 -103.0 -106.0 -109.0 -108.0 -113.0 -116.0 -117.0 -118.0 -123.0 -124.0 -125.0 -130.0 -131.0 -132.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -150.0 -153.0 -154.0 -157.0 -160.0 -159.0 -164.0 -165.0 -168.0 -169.0 -174.0 -177.0 -178.0 -181.0 -180.0 25 -54.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -41.0 -38.0 -33.0 -32.0 -31.0 -30.0 -25.0 -22.0 -25.0 -22.0 -21.0 -16.0 -13.0 -14.0 -8.0 -10.0 -9.0 -4.0 -4.0 -1.0 2.0 7.0 10.0 9.0 14.0 12.0 7.0 6.0 -1.0 -4.0 -3.0 -6.0 -7.0 -10.0 -13.0 -16.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -64.0 -65.0 -70.0 -73.0 -74.0 -79.0 -82.0 -81.0 -88.0 -89.0 -89.0 -94.0 -93.0 -94.0 -97.0 -100.0 -105.0 -108.0 -111.0 -108.0 -115.0 -116.0 -119.0 -120.0 -123.0 -124.0 -125.0 -132.0 -131.0 -134.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -170.0 -171.0 -176.0 -177.0 -178.0 -181.0 26 -57.0 -54.0 -52.0 -52.0 -49.0 -46.0 -45.0 -42.0 -39.0 -38.0 -33.0 -34.0 -31.0 -30.0 -25.0 -22.0 -23.0 -22.0 -23.0 -16.0 -15.0 -15.0 -8.0 -12.0 -10.0 -4.0 -2.0 1.0 2.0 5.0 8.0 7.0 14.0 10.0 5.0 6.0 -1.0 -4.0 -3.0 -6.0 -9.0 -10.0 -15.0 -18.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -32.0 -29.0 -34.0 -39.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -66.0 -65.0 -72.0 -75.0 -74.0 -81.0 -82.0 -81.0 -89.0 -90.0 -89.0 -94.0 -93.0 -94.0 -99.0 -102.0 -105.0 -108.0 -111.0 -110.0 -115.0 -118.0 -121.0 -122.0 -125.0 -124.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -167.0 -170.0 -173.0 -176.0 -175.0 -178.0 27 -60.0 -59.0 -56.0 -52.0 -54.0 -51.0 -48.0 -46.0 -44.0 -39.0 -39.0 -35.0 -35.0 -31.0 -31.0 -26.0 -24.0 -25.0 -22.0 -23.0 -18.0 -15.0 -15.0 -8.0 -12.0 -9.0 -6.0 -4.0 1.0 2.0 3.0 8.0 6.0 14.0 8.0 3.0 6.0 -1.0 -2.0 -3.0 -6.0 -9.0 -12.0 -13.0 -16.0 -13.0 -20.0 -21.0 -20.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -46.0 -43.0 -48.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -61.0 -66.0 -67.0 -72.0 -75.0 -76.0 -81.0 -83.0 -83.0 -87.0 -92.0 -89.0 -94.0 -93.0 -96.0 -101.0 -104.0 -107.0 -108.0 -109.0 -110.0 -115.0 -118.0 -119.0 -122.0 -125.0 -126.0 -125.0 -132.0 -133.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -163.0 -164.0 -169.0 -172.0 -175.0 -176.0 -175.0 28 -62.0 -62.0 -59.0 -57.0 -52.0 -54.0 -50.0 -49.0 -44.0 -43.0 -41.0 -37.0 -36.0 -33.0 -32.0 -31.0 -26.0 -26.0 -26.0 -24.0 -24.0 -19.0 -17.0 -13.0 -8.0 -10.0 -7.0 -7.0 -4.0 -1.0 0.0 2.0 6.0 6.0 14.0 8.0 1.0 6.0 -1.0 -2.0 -5.0 -8.0 -11.0 -14.0 -13.0 -16.0 -13.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -38.0 -37.0 -42.0 -43.0 -48.0 -43.0 -48.0 -49.0 -50.0 -57.0 -58.0 -59.0 -62.0 -63.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -83.0 -84.0 -89.0 -92.0 -89.0 -94.0 -95.0 -96.0 -103.0 -106.0 -107.0 -108.0 -109.0 -112.0 -115.0 -120.0 -121.0 -122.0 -127.0 -126.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -158.0 -159.0 -162.0 -165.0 -164.0 -171.0 -172.0 -175.0 -176.0 29 -65.0 -62.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -42.0 -43.0 -42.0 -37.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -25.0 -22.0 -19.0 -18.0 -13.0 -8.0 -8.0 -5.0 -6.0 -5.0 -2.0 -1.0 2.0 5.0 6.0 14.0 8.0 1.0 6.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -11.0 -14.0 -13.0 -18.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -35.0 -40.0 -37.0 -40.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -56.0 -59.0 -60.0 -65.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -81.0 -84.0 -89.0 -90.0 -89.0 -94.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -111.0 -114.0 -117.0 -120.0 -121.0 -124.0 -125.0 -128.0 -127.0 -130.0 -133.0 -136.0 -135.0 -136.0 -141.0 -140.0 -143.0 -148.0 -151.0 -152.0 -155.0 -156.0 -157.0 -162.0 -165.0 -166.0 -169.0 -170.0 -173.0 30 -64.0 -65.0 -64.0 -61.0 -60.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -18.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 2.0 6.0 -1.0 -2.0 -5.0 -10.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -40.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -59.0 -62.0 -67.0 -68.0 -69.0 -74.0 -75.0 -80.0 -84.0 -81.0 -84.0 -89.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -113.0 -116.0 -117.0 -120.0 -123.0 -124.0 -125.0 -128.0 -127.0 -130.0 -135.0 -138.0 -135.0 -136.0 -143.0 -140.0 -145.0 -148.0 -151.0 -154.0 -155.0 -156.0 -159.0 -164.0 -167.0 -166.0 -169.0 -170.0 31 -67.0 -64.0 -65.0 -64.0 -61.0 -58.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -17.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 4.0 4.0 -2.0 -4.0 -7.0 -11.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -27.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -38.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -61.0 -62.0 -67.0 -68.0 -71.0 -75.0 -76.0 -81.0 -82.0 -81.0 -84.0 -87.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -102.0 -107.0 -106.0 -113.0 -114.0 -115.0 -120.0 -121.0 -122.0 -123.0 -128.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -141.0 -140.0 -145.0 -146.0 -149.0 -152.0 -155.0 -158.0 -159.0 -164.0 -167.0 -166.0 -169.0 32 -68.0 -67.0 -62.0 -65.0 -64.0 -61.0 -56.0 -55.0 -52.0 -51.0 -50.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -25.0 -22.0 -19.0 -15.0 -10.0 -8.0 -8.0 -5.0 -6.0 -3.0 -4.0 -1.0 2.0 3.0 10.0 14.0 9.0 6.0 2.0 0.0 -3.0 -6.0 -9.0 -10.0 -11.0 -10.0 -16.0 -13.0 -19.0 -22.0 -21.0 -26.0 -24.0 -28.0 -31.0 -29.0 -32.0 -36.0 -39.0 -36.0 -43.0 -44.0 -45.0 -45.0 -46.0 -47.0 -52.0 -56.0 -57.0 -62.0 -64.0 -68.0 -70.0 -73.0 -74.0 -76.0 -80.0 -81.0 -80.0 -84.0 -86.0 -91.0 -93.0 -97.0 -96.0 -98.0 -101.0 -102.0 -108.0 -106.0 -114.0 -113.0 -114.0 -119.0 -120.0 -121.0 -122.0 -127.0 -129.0 -131.0 -134.0 -135.0 -137.0 -136.0 -142.0 -142.0 -145.0 -146.0 -148.0 -153.0 -154.0 -159.0 -159.0 -163.0 -166.0 -165.0 33 -71.0 -68.0 -65.0 -62.0 -65.0 -62.0 -59.0 -56.0 -53.0 -50.0 -51.0 -48.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -24.0 -21.0 -18.0 -13.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -4.0 -1.0 2.0 5.0 12.0 14.0 7.0 4.0 1.0 -2.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -15.0 -15.0 -19.0 -22.0 -19.0 -24.0 -24.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -47.0 -53.0 -56.0 -59.0 -62.0 -65.0 -68.0 -71.0 -73.0 -74.0 -75.0 -78.0 -79.0 -80.0 -85.0 -88.0 -91.0 -94.0 -95.0 -98.0 -98.0 -102.0 -104.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -120.0 -121.0 -120.0 -125.0 -130.0 -131.0 -132.0 -135.0 -136.0 -138.0 -142.0 -142.0 -146.0 -146.0 -150.0 -153.0 -154.0 -159.0 -159.0 -163.0 -164.0 34 -72.0 -71.0 -68.0 -65.0 -62.0 -63.0 -60.0 -59.0 -56.0 -51.0 -50.0 -49.0 -48.0 -43.0 -42.0 -43.0 -40.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -25.0 -22.0 -19.0 -16.0 -11.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -2.0 1.0 4.0 7.0 14.0 12.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -15.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -49.0 -55.0 -58.0 -61.0 -64.0 -67.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -82.0 -87.0 -90.0 -91.0 -94.0 -97.0 -98.0 -100.0 -104.0 -104.0 -106.0 -105.0 -114.0 -113.0 -114.0 -119.0 -122.0 -121.0 -120.0 -127.0 -130.0 -131.0 -132.0 -135.0 -138.0 -140.0 -142.0 -142.0 -146.0 -148.0 -152.0 -155.0 -154.0 -161.0 -159.0 -163.0 35 -73.0 -74.0 -69.0 -70.0 -66.0 -64.0 -61.0 -62.0 -59.0 -56.0 -53.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -42.0 -41.0 -38.0 -33.0 -34.0 -31.0 -28.0 -28.0 -25.0 -22.0 -19.0 -16.0 -13.0 -8.0 -10.0 -10.0 -7.0 -6.0 -5.0 -2.0 1.0 6.0 9.0 14.0 10.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -47.0 -48.0 -49.0 -57.0 -60.0 -63.0 -65.0 -69.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -84.0 -87.0 -92.0 -91.0 -96.0 -97.0 -98.0 -102.0 -106.0 -106.0 -106.0 -105.0 -114.0 -113.0 -114.0 -121.0 -122.0 -123.0 -120.0 -127.0 -130.0 -133.0 -132.0 -137.0 -138.0 -140.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -161.0 -159.0 36 -78.0 -73.0 -74.0 -71.0 -72.0 -66.0 -66.0 -61.0 -60.0 -59.0 -56.0 -55.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -30.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -10.0 -12.0 -9.0 -6.0 -3.0 -2.0 1.0 4.0 7.0 14.0 8.0 3.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -45.0 -47.0 -50.0 -51.0 -56.0 -61.0 -62.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -80.0 -81.0 -84.0 -86.0 -91.0 -93.0 -95.0 -98.0 -100.0 -102.0 -105.0 -106.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -120.0 -127.0 -128.0 -131.0 -134.0 -137.0 -136.0 -139.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -159.0 37 -79.0 -80.0 -73.0 -76.0 -73.0 -71.0 -66.0 -68.0 -63.0 -62.0 -60.0 -58.0 -57.0 -54.0 -53.0 -49.0 -47.0 -46.0 -45.0 -44.0 -39.0 -39.0 -37.0 -36.0 -34.0 -31.0 -28.0 -25.0 -22.0 -21.0 -18.0 -17.0 -12.0 -12.0 -14.0 -11.0 -8.0 -5.0 0.0 3.0 4.0 5.0 14.0 8.0 1.0 0.0 -1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -39.0 -44.0 -47.0 -47.0 -52.0 -53.0 -58.0 -62.0 -64.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -82.0 -83.0 -84.0 -86.0 -92.0 -93.0 -94.0 -99.0 -102.0 -101.0 -104.0 -106.0 -106.0 -105.0 -112.0 -115.0 -114.0 -119.0 -122.0 -125.0 -120.0 -125.0 -126.0 -131.0 -134.0 -135.0 -134.0 -137.0 -142.0 -142.0 -148.0 -147.0 -152.0 -153.0 -154.0 38 -81.0 -80.0 -78.0 -75.0 -77.0 -75.0 -69.0 -66.0 -68.0 -64.0 -64.0 -58.0 -59.0 -56.0 -55.0 -54.0 -49.0 -49.0 -47.0 -46.0 -44.0 -40.0 -39.0 -39.0 -37.0 -34.0 -30.0 -28.0 -25.0 -24.0 -21.0 -19.0 -19.0 -14.0 -14.0 -14.0 -11.0 -8.0 -3.0 0.0 3.0 2.0 5.0 14.0 6.0 -1.0 -1.0 1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -41.0 -46.0 -47.0 -49.0 -54.0 -55.0 -60.0 -63.0 -64.0 -64.0 -72.0 -71.0 -71.0 -73.0 -76.0 -77.0 -84.0 -85.0 -84.0 -88.0 -92.0 -93.0 -96.0 -101.0 -104.0 -101.0 -104.0 -108.0 -106.0 -105.0 -114.0 -115.0 -116.0 -119.0 -122.0 -124.0 -122.0 -125.0 -128.0 -133.0 -134.0 -135.0 -134.0 -139.0 -142.0 -144.0 -148.0 -147.0 -152.0 -153.0 39 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -46.0 -45.0 -40.0 -37.0 -39.0 -35.0 -32.0 -28.0 -28.0 -27.0 -25.0 -23.0 -19.0 -21.0 -16.0 -14.0 -12.0 -11.0 -8.0 -5.0 -2.0 3.0 0.0 4.0 14.0 4.0 0.0 -1.0 2.0 -3.0 -5.0 -4.0 -7.0 -7.0 -11.0 -8.0 -16.0 -17.0 -18.0 -22.0 -19.0 -23.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -38.0 -41.0 -47.0 -49.0 -49.0 -56.0 -55.0 -60.0 -62.0 -65.0 -64.0 -71.0 -70.0 -71.0 -75.0 -78.0 -77.0 -83.0 -85.0 -86.0 -88.0 -93.0 -95.0 -98.0 -102.0 -105.0 -101.0 -106.0 -108.0 -106.0 -105.0 -114.0 -117.0 -118.0 -119.0 -122.0 -125.0 -122.0 -127.0 -130.0 -133.0 -136.0 -135.0 -134.0 -141.0 -144.0 -146.0 -150.0 -147.0 -152.0 40 -87.0 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -44.0 -45.0 -40.0 -36.0 -37.0 -36.0 -34.0 -28.0 -28.0 -29.0 -23.0 -25.0 -19.0 -22.0 -17.0 -16.0 -14.0 -11.0 -8.0 -6.0 -4.0 1.0 -1.0 4.0 14.0 2.0 -1.0 -2.0 2.0 -1.0 -4.0 -4.0 -7.0 -7.0 -10.0 -8.0 -16.0 -17.0 -16.0 -21.0 -19.0 -21.0 -24.0 -26.0 -29.0 -33.0 -31.0 -35.0 -36.0 -40.0 -43.0 -47.0 -50.0 -51.0 -56.0 -57.0 -61.0 -60.0 -67.0 -64.0 -69.0 -68.0 -73.0 -76.0 -79.0 -79.0 -83.0 -86.0 -86.0 -90.0 -93.0 -94.0 -97.0 -102.0 -103.0 -100.0 -106.0 -108.0 -108.0 -105.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -124.0 -129.0 -130.0 -133.0 -134.0 -137.0 -136.0 -143.0 -146.0 -146.0 -150.0 -147.0 41 -90.0 -87.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -54.0 -49.0 -52.0 -49.0 -44.0 -45.0 -42.0 -34.0 -35.0 -34.0 -33.0 -28.0 -29.0 -28.0 -23.0 -26.0 -19.0 -20.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -5.0 0.0 1.0 6.0 14.0 3.0 1.0 -1.0 2.0 1.0 -2.0 -3.0 -6.0 -5.0 -8.0 -8.0 -14.0 -15.0 -16.0 -21.0 -19.0 -19.0 -22.0 -25.0 -28.0 -31.0 -31.0 -35.0 -36.0 -41.0 -44.0 -45.0 -50.0 -51.0 -54.0 -58.0 -59.0 -60.0 -65.0 -64.0 -67.0 -70.0 -73.0 -74.0 -77.0 -79.0 -83.0 -84.0 -87.0 -90.0 -93.0 -96.0 -99.0 -100.0 -103.0 -100.0 -105.0 -106.0 -108.0 -107.0 -112.0 -113.0 -116.0 -119.0 -120.0 -123.0 -126.0 -127.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -144.0 -145.0 -148.0 42 -93.0 -90.0 -89.0 -88.0 -85.0 -82.0 -81.0 -76.0 -75.0 -74.0 -71.0 -66.0 -67.0 -66.0 -63.0 -58.0 -57.0 -56.0 -57.0 -54.0 -51.0 -52.0 -49.0 -46.0 -46.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -28.0 -25.0 -28.0 -19.0 -20.0 -19.0 -16.0 -13.0 -12.0 -9.0 -8.0 -5.0 0.0 -1.0 8.0 14.0 3.0 1.0 1.0 4.0 3.0 -2.0 -3.0 -4.0 -5.0 -8.0 -8.0 -12.0 -13.0 -18.0 -19.0 -18.0 -19.0 -22.0 -25.0 -28.0 -29.0 -32.0 -33.0 -38.0 -41.0 -42.0 -47.0 -48.0 -51.0 -55.0 -56.0 -57.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -98.0 -103.0 -106.0 -109.0 -107.0 -111.0 -113.0 -117.0 -118.0 -121.0 -124.0 -125.0 -128.0 -129.0 -130.0 -134.0 -138.0 -140.0 -142.0 -143.0 -145.0 43 -96.0 -93.0 -90.0 -91.0 -90.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -51.0 -48.0 -44.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -20.0 -19.0 -16.0 -15.0 -12.0 -9.0 -10.0 -3.0 -2.0 1.0 8.0 14.0 1.0 3.0 3.0 6.0 3.0 -2.0 -1.0 -4.0 -5.0 -8.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -19.0 -22.0 -25.0 -26.0 -29.0 -30.0 -35.0 -38.0 -39.0 -44.0 -45.0 -48.0 -52.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -78.0 -81.0 -84.0 -87.0 -90.0 -91.0 -92.0 -97.0 -98.0 -99.0 -96.0 -103.0 -106.0 -109.0 -107.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 -125.0 -126.0 -127.0 -132.0 -135.0 -138.0 -141.0 -140.0 -143.0 44 -97.0 -96.0 -93.0 -90.0 -91.0 -88.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -50.0 -47.0 -44.0 -41.0 -34.0 -35.0 -36.0 -31.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -18.0 -17.0 -16.0 -15.0 -12.0 -9.0 -8.0 -3.0 -2.0 1.0 8.0 14.0 3.0 5.0 5.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -6.0 -5.0 -10.0 -13.0 -16.0 -17.0 -18.0 -19.0 -22.0 -23.0 -24.0 -29.0 -32.0 -35.0 -38.0 -41.0 -44.0 -47.0 -49.0 -50.0 -51.0 -54.0 -55.0 -56.0 -61.0 -64.0 -67.0 -70.0 -71.0 -74.0 -75.0 -78.0 -81.0 -82.0 -85.0 -90.0 -89.0 -90.0 -95.0 -98.0 -97.0 -96.0 -101.0 -106.0 -107.0 -107.0 -111.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -126.0 -129.0 -132.0 -135.0 -136.0 -139.0 -140.0 45 -100.0 -97.0 -96.0 -93.0 -92.0 -89.0 -88.0 -85.0 -84.0 -79.0 -78.0 -77.0 -76.0 -71.0 -68.0 -71.0 -68.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -53.0 -51.0 -50.0 -47.0 -44.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -30.0 -32.0 -29.0 -24.0 -19.0 -16.0 -19.0 -16.0 -13.0 -14.0 -7.0 -6.0 -5.0 -2.0 1.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 0.0 1.0 -2.0 -3.0 -6.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -20.0 -21.0 -26.0 -29.0 -32.0 -35.0 -38.0 -41.0 -43.0 -46.0 -47.0 -52.0 -49.0 -54.0 -53.0 -58.0 -61.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -78.0 -79.0 -82.0 -85.0 -88.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -105.0 -106.0 -109.0 -112.0 -115.0 -116.0 -117.0 -120.0 -123.0 -126.0 -129.0 -130.0 -135.0 -134.0 -137.0 46 -99.0 -100.0 -95.0 -96.0 -93.0 -92.0 -87.0 -88.0 -83.0 -82.0 -79.0 -78.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -52.0 -49.0 -48.0 -45.0 -42.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -31.0 -30.0 -27.0 -22.0 -17.0 -16.0 -19.0 -14.0 -13.0 -12.0 -5.0 -6.0 -3.0 -2.0 3.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 -2.0 1.0 -2.0 -3.0 -8.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -22.0 -23.0 -26.0 -31.0 -34.0 -37.0 -40.0 -43.0 -43.0 -46.0 -49.0 -52.0 -49.0 -54.0 -53.0 -60.0 -63.0 -66.0 -65.0 -70.0 -71.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -90.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -107.0 -106.0 -111.0 -114.0 -115.0 -116.0 -117.0 -122.0 -123.0 -128.0 -129.0 -130.0 -135.0 -134.0 47 -104.0 -99.0 -100.0 -97.0 -98.0 -93.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -78.0 -77.0 -74.0 -71.0 -68.0 -67.0 -68.0 -63.0 -60.0 -59.0 -60.0 -59.0 -55.0 -50.0 -47.0 -46.0 -45.0 -44.0 -41.0 -36.0 -37.0 -36.0 -35.0 -28.0 -31.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -10.0 -3.0 -4.0 -1.0 0.0 5.0 10.0 14.0 7.0 9.0 9.0 10.0 7.0 0.0 1.0 0.0 -5.0 -6.0 -3.0 -8.0 -9.0 -12.0 -15.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -34.0 -35.0 -38.0 -42.0 -43.0 -44.0 -49.0 -50.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -80.0 -83.0 -82.0 -87.0 -88.0 -87.0 -90.0 -93.0 -96.0 -95.0 -96.0 -101.0 -104.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -117.0 -122.0 -125.0 -128.0 -129.0 -130.0 -133.0 48 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -62.0 -60.0 -53.0 -50.0 -47.0 -48.0 -45.0 -44.0 -41.0 -36.0 -39.0 -38.0 -35.0 -28.0 -33.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -8.0 -3.0 -4.0 -3.0 2.0 5.0 10.0 14.0 5.0 11.0 9.0 10.0 7.0 2.0 3.0 -2.0 -3.0 -4.0 -3.0 -8.0 -9.0 -12.0 -13.0 -16.0 -17.0 -22.0 -25.0 -26.0 -31.0 -32.0 -35.0 -40.0 -40.0 -41.0 -44.0 -47.0 -48.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -68.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -85.0 -86.0 -87.0 -90.0 -93.0 -96.0 -93.0 -96.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -128.0 -127.0 -130.0 49 -106.0 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -89.0 -86.0 -81.0 -82.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -58.0 -53.0 -50.0 -47.0 -48.0 -45.0 -42.0 -41.0 -38.0 -39.0 -40.0 -35.0 -28.0 -31.0 -28.0 -27.0 -24.0 -17.0 -16.0 -15.0 -16.0 -11.0 -8.0 -3.0 -4.0 -1.0 2.0 7.0 10.0 14.0 7.0 11.0 9.0 10.0 9.0 4.0 3.0 0.0 -3.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -16.0 -19.0 -20.0 -25.0 -26.0 -31.0 -34.0 -36.0 -39.0 -38.0 -41.0 -42.0 -45.0 -48.0 -49.0 -54.0 -57.0 -58.0 -59.0 -60.0 -65.0 -66.0 -71.0 -74.0 -77.0 -78.0 -81.0 -82.0 -83.0 -84.0 -87.0 -90.0 -93.0 -94.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -109.0 -110.0 -113.0 -116.0 -117.0 -122.0 -125.0 -126.0 -127.0 50 -111.0 -106.0 -105.0 -104.0 -101.0 -102.0 -97.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -56.0 -51.0 -48.0 -47.0 -48.0 -43.0 -42.0 -39.0 -38.0 -39.0 -38.0 -33.0 -28.0 -29.0 -28.0 -27.0 -22.0 -17.0 -16.0 -13.0 -14.0 -9.0 -6.0 -1.0 -2.0 -1.0 4.0 9.0 12.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -1.0 -4.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -22.0 -25.0 -28.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -40.0 -45.0 -48.0 -51.0 -54.0 -55.0 -58.0 -59.0 -62.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -79.0 -80.0 -81.0 -82.0 -85.0 -90.0 -91.0 -92.0 -95.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -110.0 -113.0 -116.0 -119.0 -122.0 -123.0 -124.0 51 -112.0 -111.0 -104.0 -105.0 -104.0 -101.0 -100.0 -97.0 -94.0 -91.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -78.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -59.0 -54.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -39.0 -36.0 -31.0 -26.0 -29.0 -28.0 -25.0 -22.0 -17.0 -14.0 -13.0 -12.0 -7.0 -4.0 -1.0 -2.0 1.0 6.0 11.0 14.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -42.0 -47.0 -50.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -91.0 -94.0 -95.0 -98.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -115.0 -118.0 -121.0 -122.0 -123.0 52 -113.0 -112.0 -109.0 -104.0 -105.0 -104.0 -99.0 -100.0 -95.0 -92.0 -91.0 -90.0 -89.0 -82.0 -81.0 -80.0 -81.0 -76.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -63.0 -61.0 -59.0 -57.0 -52.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -37.0 -34.0 -29.0 -26.0 -29.0 -26.0 -25.0 -20.0 -15.0 -14.0 -11.0 -10.0 -5.0 -4.0 -1.0 0.0 3.0 8.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -9.0 -12.0 -17.0 -20.0 -23.0 -25.0 -29.0 -31.0 -30.0 -35.0 -34.0 -37.0 -36.0 -41.0 -42.0 -49.0 -52.0 -53.0 -56.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -104.0 -105.0 -108.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 53 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -76.0 -75.0 -76.0 -71.0 -68.0 -71.0 -66.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -29.0 -26.0 -23.0 -18.0 -15.0 -12.0 -9.0 -8.0 -7.0 -4.0 1.0 2.0 5.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -7.0 -6.0 -11.0 -14.0 -17.0 -22.0 -23.0 -25.0 -31.0 -31.0 -30.0 -35.0 -34.0 -37.0 -38.0 -43.0 -42.0 -49.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -66.0 -67.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -82.0 -81.0 -82.0 -87.0 -92.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -105.0 -110.0 -113.0 -116.0 -115.0 -118.0 -121.0 54 -117.0 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -69.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -36.0 -33.0 -34.0 -29.0 -26.0 -29.0 -24.0 -23.0 -16.0 -15.0 -12.0 -9.0 -6.0 -7.0 -2.0 1.0 2.0 7.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -8.0 -13.0 -14.0 -19.0 -22.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -39.0 -40.0 -43.0 -42.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -63.0 -66.0 -67.0 -70.0 -69.0 -74.0 -75.0 -76.0 -81.0 -84.0 -81.0 -82.0 -87.0 -90.0 -93.0 -96.0 -97.0 -98.0 -101.0 -102.0 -107.0 -110.0 -111.0 -116.0 -113.0 -118.0 55 -116.0 -117.0 -112.0 -113.0 -112.0 -109.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -68.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -37.0 -34.0 -33.0 -34.0 -29.0 -26.0 -27.0 -24.0 -21.0 -16.0 -15.0 -12.0 -7.0 -6.0 -5.0 -2.0 1.0 4.0 7.0 10.0 13.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -10.0 -15.0 -16.0 -21.0 -24.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -41.0 -42.0 -45.0 -42.0 -51.0 -52.0 -53.0 -58.0 -61.0 -64.0 -61.0 -66.0 -69.0 -70.0 -69.0 -74.0 -75.0 -78.0 -79.0 -84.0 -81.0 -84.0 -87.0 -92.0 -95.0 -96.0 -97.0 -98.0 -103.0 -102.0 -109.0 -110.0 -111.0 -116.0 -113.0 56 -121.0 -116.0 -117.0 -114.0 -113.0 -110.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -93.0 -94.0 -91.0 -90.0 -87.0 -82.0 -83.0 -80.0 -81.0 -76.0 -75.0 -76.0 -73.0 -68.0 -66.0 -63.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -39.0 -36.0 -33.0 -34.0 -31.0 -26.0 -27.0 -22.0 -19.0 -14.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 3.0 4.0 7.0 8.0 11.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 0.0 -3.0 -8.0 -9.0 -10.0 -17.0 -16.0 -21.0 -25.0 -24.0 -25.0 -32.0 -31.0 -30.0 -37.0 -36.0 -41.0 -42.0 -45.0 -44.0 -49.0 -52.0 -55.0 -58.0 -61.0 -64.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -77.0 -80.0 -79.0 -82.0 -83.0 -84.0 -89.0 -92.0 -93.0 -96.0 -97.0 -98.0 -103.0 -104.0 -109.0 -110.0 -111.0 -114.0 57 -124.0 -123.0 -118.0 -117.0 -116.0 -111.0 -112.0 -111.0 -106.0 -103.0 -104.0 -101.0 -98.0 -93.0 -94.0 -93.0 -92.0 -89.0 -82.0 -83.0 -82.0 -81.0 -78.0 -75.0 -74.0 -74.0 -70.0 -68.0 -63.0 -60.0 -63.0 -58.0 -59.0 -52.0 -55.0 -52.0 -49.0 -48.0 -43.0 -40.0 -41.0 -36.0 -33.0 -36.0 -31.0 -26.0 -27.0 -24.0 -21.0 -14.0 -11.0 -14.0 -11.0 -6.0 -3.0 -2.0 1.0 4.0 5.0 8.0 9.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 -2.0 -5.0 -8.0 -11.0 -12.0 -17.0 -17.0 -23.0 -23.0 -26.0 -25.0 -30.0 -29.0 -32.0 -37.0 -38.0 -41.0 -42.0 -47.0 -44.0 -51.0 -54.0 -55.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -79.0 -80.0 -79.0 -82.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -105.0 -104.0 -111.0 -110.0 -111.0 58 -123.0 -126.0 -121.0 -118.0 -117.0 -116.0 -109.0 -112.0 -109.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -89.0 -84.0 -83.0 -82.0 -83.0 -78.0 -75.0 -73.0 -72.0 -71.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -55.0 -54.0 -51.0 -46.0 -41.0 -40.0 -43.0 -36.0 -33.0 -34.0 -29.0 -26.0 -25.0 -24.0 -21.0 -14.0 -11.0 -12.0 -9.0 -4.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 11.0 4.0 3.0 -2.0 -7.0 -10.0 -13.0 -14.0 -19.0 -17.0 -24.0 -23.0 -26.0 -25.0 -30.0 -29.0 -34.0 -39.0 -40.0 -41.0 -44.0 -47.0 -44.0 -53.0 -56.0 -57.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -71.0 -72.0 -79.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -93.0 -98.0 -99.0 -102.0 -105.0 -104.0 -111.0 -110.0 59 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -90.0 -87.0 -84.0 -83.0 -82.0 -83.0 -78.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -52.0 -49.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -32.0 -27.0 -24.0 -23.0 -22.0 -19.0 -14.0 -11.0 -10.0 -7.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 9.0 4.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -17.0 -22.0 -23.0 -26.0 -25.0 -30.0 -31.0 -34.0 -37.0 -40.0 -43.0 -44.0 -47.0 -46.0 -53.0 -56.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -69.0 -72.0 -71.0 -72.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -93.0 -98.0 -101.0 -104.0 -105.0 -104.0 -109.0 60 -129.0 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -88.0 -87.0 -84.0 -83.0 -82.0 -81.0 -77.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -30.0 -27.0 -24.0 -23.0 -20.0 -19.0 -14.0 -11.0 -10.0 -5.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 13.0 10.0 9.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -15.0 -20.0 -17.0 -22.0 -23.0 -26.0 -27.0 -32.0 -31.0 -34.0 -37.0 -42.0 -43.0 -46.0 -49.0 -48.0 -55.0 -58.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -71.0 -74.0 -71.0 -72.0 -79.0 -80.0 -83.0 -86.0 -87.0 -90.0 -91.0 -92.0 -95.0 -100.0 -101.0 -106.0 -105.0 -104.0 61 -132.0 -131.0 -128.0 -123.0 -126.0 -123.0 -120.0 -119.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -95.0 -92.0 -93.0 -90.0 -87.0 -86.0 -85.0 -84.0 -82.0 -79.0 -76.0 -71.0 -70.0 -71.0 -66.0 -67.0 -60.0 -63.0 -62.0 -59.0 -54.0 -53.0 -50.0 -49.0 -48.0 -43.0 -42.0 -41.0 -36.0 -35.0 -32.0 -29.0 -24.0 -23.0 -22.0 -19.0 -16.0 -13.0 -10.0 -7.0 -4.0 -3.0 -2.0 -3.0 4.0 3.0 4.0 7.0 12.0 9.0 8.0 11.0 14.0 8.0 7.0 0.0 -3.0 -6.0 -9.0 -12.0 -13.0 -15.0 -18.0 -17.0 -22.0 -21.0 -26.0 -29.0 -30.0 -33.0 -34.0 -39.0 -40.0 -43.0 -46.0 -47.0 -48.0 -55.0 -56.0 -57.0 -62.0 -61.0 -64.0 -61.0 -66.0 -69.0 -72.0 -71.0 -74.0 -77.0 -80.0 -83.0 -84.0 -87.0 -88.0 -91.0 -94.0 -97.0 -100.0 -99.0 -104.0 -105.0 62 -135.0 -132.0 -131.0 -130.0 -125.0 -124.0 -123.0 -120.0 -117.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -97.0 -92.0 -95.0 -92.0 -87.0 -88.0 -87.0 -83.0 -80.0 -77.0 -76.0 -73.0 -72.0 -71.0 -66.0 -67.0 -62.0 -63.0 -60.0 -59.0 -56.0 -53.0 -52.0 -49.0 -48.0 -45.0 -42.0 -41.0 -36.0 -33.0 -30.0 -29.0 -26.0 -25.0 -20.0 -17.0 -16.0 -11.0 -10.0 -7.0 -6.0 -5.0 -2.0 -5.0 2.0 3.0 4.0 7.0 12.0 7.0 6.0 9.0 14.0 6.0 5.0 0.0 -5.0 -6.0 -9.0 -14.0 -14.0 -15.0 -18.0 -17.0 -22.0 -23.0 -28.0 -29.0 -30.0 -33.0 -36.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -57.0 -56.0 -57.0 -62.0 -61.0 -64.0 -63.0 -66.0 -69.0 -72.0 -71.0 -74.0 -79.0 -82.0 -83.0 -84.0 -87.0 -88.0 -93.0 -96.0 -99.0 -102.0 -99.0 -104.0 63 -136.0 -137.0 -132.0 -133.0 -132.0 -127.0 -124.0 -125.0 -122.0 -119.0 -118.0 -111.0 -114.0 -111.0 -110.0 -105.0 -106.0 -103.0 -100.0 -99.0 -92.0 -97.0 -94.0 -89.0 -90.0 -88.0 -85.0 -82.0 -79.0 -78.0 -73.0 -74.0 -73.0 -68.0 -69.0 -64.0 -65.0 -62.0 -57.0 -54.0 -53.0 -54.0 -49.0 -48.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -27.0 -26.0 -25.0 -22.0 -19.0 -16.0 -13.0 -12.0 -7.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 2.0 5.0 12.0 8.0 6.0 7.0 14.0 4.0 3.0 -2.0 -6.0 -8.0 -9.0 -14.0 -16.0 -15.0 -17.0 -17.0 -21.0 -25.0 -29.0 -31.0 -30.0 -33.0 -36.0 -38.0 -43.0 -46.0 -49.0 -49.0 -50.0 -56.0 -55.0 -57.0 -61.0 -61.0 -63.0 -63.0 -66.0 -69.0 -73.0 -71.0 -76.0 -78.0 -81.0 -82.0 -83.0 -88.0 -88.0 -94.0 -95.0 -98.0 -101.0 -99.0 64 -141.0 -138.0 -137.0 -134.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -113.0 -114.0 -113.0 -112.0 -107.0 -106.0 -105.0 -102.0 -101.0 -94.0 -98.0 -94.0 -89.0 -91.0 -88.0 -85.0 -82.0 -81.0 -80.0 -75.0 -76.0 -73.0 -68.0 -71.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -54.0 -51.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -29.0 -28.0 -25.0 -20.0 -19.0 -18.0 -15.0 -14.0 -9.0 -10.0 -9.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 10.0 6.0 6.0 6.0 14.0 3.0 3.0 -3.0 -5.0 -9.0 -10.0 -14.0 -15.0 -15.0 -17.0 -19.0 -21.0 -26.0 -29.0 -30.0 -30.0 -32.0 -37.0 -38.0 -43.0 -46.0 -49.0 -51.0 -50.0 -56.0 -55.0 -57.0 -59.0 -62.0 -61.0 -63.0 -65.0 -68.0 -71.0 -71.0 -75.0 -76.0 -81.0 -82.0 -85.0 -88.0 -88.0 -94.0 -95.0 -98.0 -99.0 65 -144.0 -141.0 -140.0 -139.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -113.0 -110.0 -107.0 -108.0 -103.0 -104.0 -101.0 -94.0 -99.0 -96.0 -89.0 -89.0 -86.0 -85.0 -84.0 -83.0 -80.0 -75.0 -76.0 -75.0 -68.0 -69.0 -68.0 -65.0 -62.0 -61.0 -56.0 -57.0 -56.0 -51.0 -50.0 -45.0 -42.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -17.0 -16.0 -9.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 8.0 6.0 4.0 4.0 14.0 1.0 3.0 -3.0 -5.0 -10.0 -10.0 -14.0 -15.0 -15.0 -17.0 -21.0 -21.0 -26.0 -29.0 -30.0 -30.0 -34.0 -39.0 -40.0 -45.0 -48.0 -51.0 -51.0 -50.0 -56.0 -55.0 -57.0 -61.0 -64.0 -61.0 -63.0 -67.0 -68.0 -73.0 -71.0 -75.0 -78.0 -81.0 -82.0 -87.0 -90.0 -90.0 -96.0 -95.0 -98.0 66 -147.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -109.0 -108.0 -105.0 -104.0 -103.0 -94.0 -97.0 -97.0 -91.0 -91.0 -88.0 -87.0 -86.0 -83.0 -82.0 -77.0 -76.0 -77.0 -70.0 -69.0 -68.0 -65.0 -64.0 -63.0 -58.0 -59.0 -56.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -37.0 -34.0 -31.0 -26.0 -21.0 -22.0 -21.0 -20.0 -19.0 -18.0 -11.0 -14.0 -13.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 6.0 4.0 4.0 2.0 14.0 1.0 1.0 -5.0 -3.0 -10.0 -10.0 -12.0 -13.0 -16.0 -15.0 -22.0 -23.0 -26.0 -27.0 -28.0 -32.0 -34.0 -39.0 -42.0 -43.0 -46.0 -49.0 -50.0 -50.0 -54.0 -55.0 -58.0 -59.0 -62.0 -61.0 -63.0 -67.0 -68.0 -71.0 -71.0 -77.0 -78.0 -81.0 -84.0 -85.0 -88.0 -90.0 -94.0 -95.0 67 -150.0 -147.0 -146.0 -145.0 -144.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -113.0 -114.0 -109.0 -110.0 -107.0 -104.0 -103.0 -96.0 -97.0 -95.0 -91.0 -91.0 -90.0 -89.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -68.0 -67.0 -64.0 -63.0 -60.0 -57.0 -56.0 -51.0 -48.0 -45.0 -44.0 -41.0 -40.0 -35.0 -32.0 -31.0 -26.0 -21.0 -22.0 -23.0 -22.0 -19.0 -18.0 -13.0 -14.0 -11.0 -8.0 -7.0 -6.0 -3.0 -2.0 1.0 4.0 2.0 4.0 1.0 14.0 3.0 0.0 -4.0 -1.0 -8.0 -9.0 -10.0 -13.0 -16.0 -15.0 -20.0 -23.0 -26.0 -27.0 -30.0 -33.0 -36.0 -39.0 -42.0 -41.0 -44.0 -47.0 -48.0 -49.0 -52.0 -55.0 -56.0 -57.0 -60.0 -63.0 -63.0 -67.0 -70.0 -71.0 -73.0 -75.0 -76.0 -81.0 -84.0 -87.0 -86.0 -89.0 -92.0 68 -153.0 -150.0 -149.0 -148.0 -147.0 -142.0 -141.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -124.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -111.0 -110.0 -107.0 -106.0 -103.0 -96.0 -97.0 -95.0 -93.0 -91.0 -92.0 -89.0 -86.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -70.0 -67.0 -66.0 -65.0 -60.0 -59.0 -54.0 -51.0 -48.0 -47.0 -44.0 -43.0 -38.0 -35.0 -34.0 -29.0 -26.0 -21.0 -24.0 -25.0 -22.0 -21.0 -20.0 -13.0 -14.0 -11.0 -8.0 -8.0 -6.0 -5.0 -2.0 -1.0 2.0 2.0 2.0 3.0 14.0 2.0 1.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -27.0 -30.0 -33.0 -36.0 -37.0 -42.0 -39.0 -42.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -72.0 -73.0 -78.0 -81.0 -84.0 -87.0 -84.0 -89.0 69 -154.0 -155.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -140.0 -137.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -120.0 -119.0 -118.0 -117.0 -112.0 -113.0 -112.0 -109.0 -106.0 -105.0 -98.0 -99.0 -97.0 -95.0 -91.0 -92.0 -91.0 -88.0 -87.0 -86.0 -81.0 -78.0 -75.0 -72.0 -71.0 -72.0 -67.0 -66.0 -65.0 -62.0 -57.0 -56.0 -53.0 -50.0 -45.0 -44.0 -43.0 -40.0 -37.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -24.0 -21.0 -22.0 -15.0 -16.0 -13.0 -8.0 -6.0 -8.0 -7.0 -2.0 -3.0 0.0 0.0 0.0 1.0 14.0 4.0 3.0 -2.0 1.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -20.0 -21.0 -22.0 -27.0 -30.0 -33.0 -34.0 -35.0 -40.0 -37.0 -40.0 -43.0 -46.0 -49.0 -50.0 -53.0 -54.0 -57.0 -56.0 -61.0 -64.0 -65.0 -66.0 -67.0 -72.0 -73.0 -78.0 -79.0 -82.0 -85.0 -84.0 70 -159.0 -156.0 -155.0 -150.0 -153.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -125.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -108.0 -103.0 -98.0 -98.0 -97.0 -97.0 -91.0 -94.0 -89.0 -90.0 -87.0 -86.0 -83.0 -80.0 -77.0 -72.0 -73.0 -72.0 -67.0 -68.0 -63.0 -62.0 -55.0 -56.0 -51.0 -50.0 -47.0 -46.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -21.0 -28.0 -25.0 -26.0 -22.0 -20.0 -15.0 -18.0 -14.0 -10.0 -6.0 -10.0 -9.0 -4.0 -5.0 0.0 -2.0 -2.0 1.0 14.0 6.0 5.0 0.0 1.0 -4.0 -7.0 -10.0 -13.0 -14.0 -17.0 -18.0 -21.0 -24.0 -25.0 -28.0 -31.0 -36.0 -35.0 -40.0 -37.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -66.0 -69.0 -72.0 -75.0 -78.0 -79.0 -82.0 -83.0 71 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -84.0 -81.0 -80.0 -77.0 -72.0 -75.0 -74.0 -67.0 -68.0 -63.0 -60.0 -53.0 -54.0 -53.0 -52.0 -47.0 -44.0 -43.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -30.0 -27.0 -26.0 -22.0 -18.0 -15.0 -18.0 -12.0 -10.0 -6.0 -12.0 -11.0 -4.0 -7.0 0.0 -2.0 0.0 1.0 14.0 8.0 5.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -14.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -29.0 -34.0 -37.0 -38.0 -35.0 -38.0 -43.0 -46.0 -45.0 -48.0 -51.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -64.0 -69.0 -72.0 -75.0 -76.0 -77.0 -80.0 72 -161.0 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -118.0 -119.0 -112.0 -113.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -82.0 -79.0 -80.0 -77.0 -72.0 -75.0 -72.0 -67.0 -66.0 -63.0 -60.0 -53.0 -52.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -29.0 -27.0 -26.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -11.0 -4.0 -7.0 0.0 -2.0 2.0 3.0 14.0 10.0 7.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -27.0 -28.0 -27.0 -32.0 -35.0 -36.0 -35.0 -36.0 -43.0 -44.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -60.0 -63.0 -66.0 -69.0 -72.0 -73.0 -74.0 -77.0 73 -162.0 -161.0 -158.0 -159.0 -156.0 -155.0 -150.0 -151.0 -148.0 -145.0 -142.0 -141.0 -138.0 -137.0 -134.0 -135.0 -130.0 -129.0 -128.0 -123.0 -122.0 -119.0 -118.0 -117.0 -112.0 -113.0 -110.0 -108.0 -105.0 -102.0 -98.0 -100.0 -97.0 -96.0 -91.0 -94.0 -91.0 -88.0 -83.0 -80.0 -79.0 -80.0 -75.0 -72.0 -73.0 -70.0 -67.0 -64.0 -61.0 -58.0 -53.0 -52.0 -51.0 -48.0 -45.0 -42.0 -41.0 -38.0 -35.0 -36.0 -33.0 -30.0 -21.0 -27.0 -27.0 -24.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -9.0 -4.0 -7.0 0.0 -1.0 2.0 5.0 14.0 12.0 7.0 2.0 -1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -15.0 -18.0 -21.0 -22.0 -25.0 -26.0 -27.0 -30.0 -33.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -44.0 -49.0 -52.0 -53.0 -52.0 -55.0 -60.0 -61.0 -66.0 -67.0 -70.0 -71.0 -72.0 74 -165.0 -164.0 -159.0 -158.0 -161.0 -156.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -137.0 -136.0 -133.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -113.0 -111.0 -108.0 -107.0 -102.0 -100.0 -100.0 -97.0 -98.0 -93.0 -94.0 -91.0 -86.0 -83.0 -80.0 -81.0 -78.0 -75.0 -74.0 -73.0 -70.0 -67.0 -64.0 -61.0 -56.0 -53.0 -54.0 -50.0 -47.0 -45.0 -44.0 -43.0 -38.0 -37.0 -36.0 -33.0 -28.0 -21.0 -27.0 -27.0 -26.0 -20.0 -18.0 -17.0 -18.0 -12.0 -12.0 -6.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 2.0 7.0 13.0 14.0 5.0 2.0 -1.0 0.0 -3.0 -6.0 -7.0 -12.0 -15.0 -18.0 -19.0 -22.0 -25.0 -24.0 -27.0 -30.0 -31.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 -57.0 -58.0 -63.0 -64.0 -67.0 -70.0 -69.0 75 -166.0 -167.0 -166.0 -159.0 -158.0 -159.0 -154.0 -153.0 -152.0 -149.0 -148.0 -143.0 -144.0 -139.0 -138.0 -137.0 -136.0 -131.0 -132.0 -127.0 -128.0 -123.0 -126.0 -121.0 -116.0 -117.0 -114.0 -114.0 -111.0 -110.0 -107.0 -102.0 -100.0 -98.0 -97.0 -99.0 -93.0 -92.0 -91.0 -86.0 -84.0 -82.0 -83.0 -79.0 -77.0 -75.0 -72.0 -69.0 -67.0 -64.0 -60.0 -56.0 -54.0 -54.0 -48.0 -45.0 -46.0 -46.0 -45.0 -39.0 -39.0 -36.0 -32.0 -29.0 -21.0 -28.0 -29.0 -26.0 -20.0 -19.0 -19.0 -18.0 -12.0 -14.0 -6.0 -13.0 -13.0 -8.0 -6.0 -4.0 0.0 2.0 5.0 13.0 14.0 3.0 0.0 -1.0 0.0 -3.0 -8.0 -7.0 -14.0 -17.0 -20.0 -21.0 -22.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -52.0 -51.0 -54.0 -59.0 -58.0 -63.0 -64.0 -67.0 -70.0 76 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -126.0 -123.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -110.0 -105.0 -102.0 -100.0 -98.0 -97.0 -97.0 -93.0 -93.0 -90.0 -86.0 -84.0 -83.0 -84.0 -79.0 -78.0 -73.0 -70.0 -67.0 -66.0 -63.0 -60.0 -56.0 -54.0 -53.0 -48.0 -45.0 -46.0 -47.0 -44.0 -39.0 -38.0 -35.0 -30.0 -29.0 -21.0 -28.0 -28.0 -25.0 -20.0 -19.0 -20.0 -19.0 -12.0 -15.0 -6.0 -12.0 -12.0 -9.0 -4.0 -3.0 2.0 3.0 4.0 13.0 14.0 3.0 0.0 -3.0 0.0 -5.0 -10.0 -9.0 -16.0 -19.0 -22.0 -21.0 -24.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -44.0 -43.0 -46.0 -49.0 -52.0 -51.0 -56.0 -61.0 -60.0 -63.0 -64.0 -67.0 77 -172.0 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -113.0 -108.0 -105.0 -104.0 -100.0 -98.0 -97.0 -97.0 -91.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -81.0 -76.0 -73.0 -70.0 -67.0 -64.0 -64.0 -58.0 -56.0 -56.0 -51.0 -48.0 -45.0 -47.0 -47.0 -42.0 -39.0 -38.0 -33.0 -30.0 -29.0 -21.0 -28.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -14.0 -12.0 -7.0 -4.0 -3.0 4.0 1.0 2.0 13.0 14.0 3.0 0.0 -1.0 -2.0 -7.0 -10.0 -9.0 -16.0 -19.0 -20.0 -21.0 -24.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -35.0 -36.0 -41.0 -44.0 -43.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -62.0 -61.0 -64.0 78 -171.0 -172.0 -167.0 -166.0 -167.0 -164.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -108.0 -105.0 -104.0 -100.0 -98.0 -98.0 -95.0 -89.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -79.0 -76.0 -73.0 -70.0 -65.0 -64.0 -62.0 -58.0 -56.0 -54.0 -51.0 -48.0 -45.0 -47.0 -45.0 -42.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -12.0 -10.0 -7.0 -2.0 -1.0 4.0 1.0 2.0 13.0 14.0 5.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -22.0 -23.0 -26.0 -25.0 -26.0 -31.0 -34.0 -33.0 -34.0 -39.0 -42.0 -43.0 -44.0 -49.0 -50.0 -55.0 -56.0 -59.0 -62.0 -61.0 79 -174.0 -173.0 -172.0 -167.0 -166.0 -167.0 -164.0 -161.0 -160.0 -157.0 -156.0 -151.0 -152.0 -149.0 -148.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -130.0 -123.0 -124.0 -125.0 -122.0 -120.0 -116.0 -115.0 -113.0 -112.0 -111.0 -106.0 -105.0 -104.0 -99.0 -96.0 -98.0 -95.0 -89.0 -91.0 -90.0 -86.0 -84.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -65.0 -64.0 -60.0 -56.0 -54.0 -54.0 -51.0 -48.0 -45.0 -45.0 -43.0 -40.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -26.0 -25.0 -20.0 -21.0 -18.0 -19.0 -14.0 -13.0 -6.0 -10.0 -8.0 -5.0 -2.0 -1.0 4.0 1.0 4.0 13.0 14.0 7.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -20.0 -23.0 -26.0 -25.0 -24.0 -29.0 -32.0 -33.0 -32.0 -37.0 -42.0 -43.0 -46.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 80 -177.0 -174.0 -175.0 -174.0 -167.0 -166.0 -167.0 -166.0 -161.0 -160.0 -159.0 -154.0 -153.0 -150.0 -149.0 -150.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -128.0 -123.0 -126.0 -123.0 -123.0 -118.0 -116.0 -117.0 -111.0 -114.0 -109.0 -106.0 -107.0 -104.0 -97.0 -96.0 -96.0 -96.0 -89.0 -91.0 -92.0 -86.0 -85.0 -83.0 -80.0 -77.0 -72.0 -69.0 -69.0 -67.0 -63.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -43.0 -43.0 -40.0 -39.0 -37.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -17.0 -16.0 -13.0 -8.0 -9.0 -8.0 -3.0 -4.0 -1.0 2.0 3.0 3.0 13.0 14.0 5.0 4.0 -1.0 -2.0 -7.0 -8.0 -7.0 -12.0 -15.0 -16.0 -17.0 -18.0 -23.0 -24.0 -23.0 -24.0 -29.0 -30.0 -33.0 -32.0 -37.0 -40.0 -43.0 -46.0 -47.0 -52.0 -53.0 -54.0 -57.0 81 -178.0 -177.0 -172.0 -175.0 -174.0 -167.0 -164.0 -167.0 -164.0 -159.0 -160.0 -157.0 -154.0 -153.0 -150.0 -149.0 -148.0 -145.0 -144.0 -139.0 -138.0 -135.0 -134.0 -133.0 -128.0 -123.0 -126.0 -122.0 -121.0 -118.0 -116.0 -116.0 -111.0 -112.0 -109.0 -106.0 -108.0 -102.0 -97.0 -94.0 -96.0 -96.0 -89.0 -91.0 -90.0 -84.0 -83.0 -81.0 -78.0 -75.0 -70.0 -69.0 -67.0 -65.0 -61.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -41.0 -41.0 -40.0 -39.0 -35.0 -31.0 -28.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -15.0 -14.0 -13.0 -8.0 -7.0 -6.0 -3.0 -4.0 -1.0 2.0 4.0 5.0 13.0 14.0 5.0 2.0 -1.0 0.0 -5.0 -6.0 -5.0 -10.0 -13.0 -14.0 -17.0 -16.0 -21.0 -22.0 -23.0 -24.0 -29.0 -32.0 -33.0 -32.0 -35.0 -40.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 82 -179.0 -178.0 -175.0 -172.0 -175.0 -172.0 -167.0 -164.0 -165.0 -162.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -123.0 -125.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -109.0 -106.0 -107.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -92.0 -89.0 -82.0 -81.0 -81.0 -78.0 -73.0 -70.0 -71.0 -65.0 -64.0 -59.0 -58.0 -57.0 -54.0 -55.0 -53.0 -50.0 -45.0 -41.0 -42.0 -42.0 -38.0 -33.0 -31.0 -30.0 -31.0 -21.0 -28.0 -30.0 -27.0 -24.0 -23.0 -18.0 -17.0 -16.0 -15.0 -8.0 -9.0 -6.0 -5.0 -6.0 -3.0 2.0 2.0 5.0 14.0 12.0 5.0 2.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -11.0 -14.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -30.0 -31.0 -32.0 -37.0 -38.0 -43.0 -44.0 -47.0 -50.0 -49.0 83 -182.0 -179.0 -178.0 -175.0 -172.0 -173.0 -170.0 -167.0 -164.0 -163.0 -162.0 -157.0 -158.0 -155.0 -154.0 -153.0 -148.0 -145.0 -146.0 -143.0 -142.0 -139.0 -138.0 -133.0 -130.0 -131.0 -126.0 -122.0 -123.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -107.0 -104.0 -105.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -90.0 -87.0 -80.0 -79.0 -80.0 -77.0 -74.0 -71.0 -70.0 -63.0 -62.0 -59.0 -58.0 -57.0 -54.0 -53.0 -52.0 -49.0 -46.0 -41.0 -42.0 -41.0 -36.0 -33.0 -33.0 -32.0 -32.0 -21.0 -28.0 -28.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -11.0 -6.0 -7.0 -6.0 -4.0 2.0 4.0 5.0 14.0 10.0 3.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -32.0 -31.0 -34.0 -39.0 -38.0 -45.0 -46.0 -47.0 -50.0 84 -183.0 -182.0 -179.0 -178.0 -175.0 -174.0 -173.0 -172.0 -167.0 -162.0 -165.0 -162.0 -157.0 -156.0 -157.0 -156.0 -153.0 -146.0 -145.0 -146.0 -143.0 -140.0 -141.0 -138.0 -135.0 -130.0 -131.0 -125.0 -120.0 -123.0 -120.0 -119.0 -118.0 -115.0 -116.0 -109.0 -110.0 -105.0 -104.0 -103.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -88.0 -85.0 -78.0 -77.0 -78.0 -77.0 -74.0 -71.0 -68.0 -63.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -50.0 -47.0 -46.0 -41.0 -40.0 -39.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -26.0 -29.0 -29.0 -26.0 -21.0 -21.0 -19.0 -18.0 -13.0 -12.0 -13.0 -8.0 -9.0 -7.0 -4.0 0.0 2.0 5.0 14.0 10.0 1.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -15.0 -16.0 -15.0 -18.0 -19.0 -24.0 -21.0 -26.0 -29.0 -32.0 -33.0 -36.0 -41.0 -40.0 -45.0 -46.0 -47.0 85 -182.0 -183.0 -180.0 -179.0 -178.0 -175.0 -174.0 -173.0 -170.0 -165.0 -162.0 -163.0 -162.0 -157.0 -156.0 -157.0 -154.0 -151.0 -146.0 -145.0 -146.0 -141.0 -140.0 -139.0 -136.0 -135.0 -130.0 -130.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -102.0 -103.0 -100.0 -97.0 -94.0 -97.0 -92.0 -89.0 -88.0 -83.0 -76.0 -77.0 -78.0 -75.0 -72.0 -69.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -50.0 -51.0 -48.0 -47.0 -46.0 -39.0 -38.0 -37.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -26.0 -29.0 -29.0 -24.0 -22.0 -21.0 -21.0 -16.0 -15.0 -14.0 -15.0 -10.0 -10.0 -7.0 -3.0 -1.0 2.0 5.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -4.0 -5.0 -12.0 -13.0 -14.0 -15.0 -18.0 -21.0 -24.0 -21.0 -26.0 -29.0 -32.0 -35.0 -36.0 -41.0 -40.0 -43.0 -46.0 86 -185.0 -182.0 -181.0 -180.0 -179.0 -178.0 -173.0 -174.0 -171.0 -168.0 -165.0 -162.0 -163.0 -160.0 -157.0 -156.0 -155.0 -152.0 -151.0 -146.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -133.0 -129.0 -128.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -114.0 -107.0 -106.0 -101.0 -102.0 -103.0 -98.0 -97.0 -94.0 -95.0 -92.0 -87.0 -86.0 -81.0 -76.0 -77.0 -76.0 -73.0 -70.0 -67.0 -66.0 -63.0 -62.0 -57.0 -56.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -37.0 -36.0 -37.0 -34.0 -33.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -27.0 -26.0 -22.0 -21.0 -21.0 -16.0 -16.0 -16.0 -15.0 -10.0 -10.0 -7.0 -1.0 1.0 1.0 3.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -6.0 -5.0 -12.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -21.0 -26.0 -31.0 -32.0 -37.0 -36.0 -41.0 -40.0 -43.0 87 -182.0 -186.0 -180.0 -183.0 -180.0 -181.0 -176.0 -173.0 -172.0 -169.0 -170.0 -165.0 -162.0 -163.0 -160.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -147.0 -146.0 -143.0 -140.0 -139.0 -136.0 -132.0 -127.0 -130.0 -123.0 -122.0 -123.0 -118.0 -121.0 -118.0 -115.0 -112.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -97.0 -92.0 -93.0 -90.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -68.0 -67.0 -66.0 -63.0 -62.0 -55.0 -54.0 -51.0 -50.0 -51.0 -48.0 -45.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -27.0 -27.0 -27.0 -22.0 -21.0 -21.0 -18.0 -16.0 -18.0 -14.0 -11.0 -9.0 -5.0 -1.0 1.0 1.0 3.0 14.0 10.0 3.0 2.0 1.0 2.0 -5.0 -6.0 -5.0 -10.0 -13.0 -12.0 -17.0 -20.0 -21.0 -22.0 -21.0 -28.0 -29.0 -34.0 -35.0 -36.0 -41.0 -40.0 88 -189.0 -182.0 -187.0 -180.0 -183.0 -178.0 -179.0 -176.0 -173.0 -170.0 -169.0 -168.0 -165.0 -160.0 -163.0 -160.0 -159.0 -156.0 -153.0 -150.0 -149.0 -146.0 -147.0 -144.0 -141.0 -140.0 -137.0 -135.0 -130.0 -127.0 -130.0 -123.0 -122.0 -121.0 -118.0 -121.0 -118.0 -113.0 -110.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -90.0 -92.0 -90.0 -83.0 -82.0 -79.0 -78.0 -75.0 -72.0 -71.0 -70.0 -67.0 -66.0 -63.0 -62.0 -53.0 -52.0 -51.0 -50.0 -51.0 -46.0 -43.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -29.0 -27.0 -27.0 -22.0 -21.0 -22.0 -18.0 -16.0 -18.0 -15.0 -10.0 -7.0 -6.0 -1.0 1.0 3.0 2.0 14.0 10.0 1.0 2.0 1.0 3.0 -4.0 -6.0 -5.0 -9.0 -12.0 -14.0 -18.0 -19.0 -20.0 -22.0 -23.0 -29.0 -31.0 -33.0 -37.0 -36.0 -40.0 89 -188.0 -189.0 -182.0 -187.0 -180.0 -183.0 -176.0 -179.0 -176.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -163.0 -158.0 -157.0 -156.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -141.0 -138.0 -136.0 -133.0 -130.0 -127.0 -128.0 -123.0 -122.0 -121.0 -118.0 -119.0 -116.0 -111.0 -108.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -88.0 -91.0 -88.0 -83.0 -82.0 -79.0 -78.0 -73.0 -70.0 -71.0 -70.0 -67.0 -64.0 -63.0 -60.0 -53.0 -50.0 -51.0 -50.0 -49.0 -44.0 -41.0 -42.0 -37.0 -36.0 -35.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -27.0 -29.0 -27.0 -25.0 -22.0 -21.0 -22.0 -18.0 -15.0 -18.0 -13.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 4.0 14.0 10.0 2.0 2.0 1.0 3.0 -2.0 -5.0 -7.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -23.0 -23.0 -29.0 -30.0 -31.0 -36.0 -35.0 90 -189.0 -188.0 -187.0 -182.0 -189.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -159.0 -154.0 -153.0 -152.0 -147.0 -146.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -119.0 -116.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -86.0 -89.0 -88.0 -85.0 -82.0 -77.0 -78.0 -71.0 -70.0 -71.0 -70.0 -67.0 -62.0 -63.0 -60.0 -53.0 -50.0 -51.0 -48.0 -49.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -33.0 -30.0 -21.0 -27.0 -27.0 -27.0 -25.0 -23.0 -21.0 -22.0 -18.0 -15.0 -16.0 -11.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 6.0 14.0 10.0 4.0 3.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -17.0 -18.0 -23.0 -25.0 -29.0 -30.0 -31.0 -34.0 91 -194.0 -189.0 -190.0 -187.0 -182.0 -187.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -154.0 -151.0 -152.0 -147.0 -144.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -117.0 -114.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -99.0 -96.0 -93.0 -86.0 -87.0 -88.0 -85.0 -82.0 -77.0 -76.0 -71.0 -70.0 -71.0 -68.0 -65.0 -62.0 -61.0 -58.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -31.0 -30.0 -21.0 -27.0 -25.0 -28.0 -25.0 -23.0 -21.0 -22.0 -17.0 -13.0 -14.0 -9.0 -8.0 -5.0 -4.0 1.0 3.0 7.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 -31.0 92 -193.0 -194.0 -187.0 -190.0 -187.0 -182.0 -185.0 -180.0 -183.0 -176.0 -179.0 -174.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -156.0 -151.0 -150.0 -147.0 -146.0 -145.0 -143.0 -138.0 -137.0 -134.0 -133.0 -134.0 -131.0 -130.0 -125.0 -126.0 -121.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -108.0 -105.0 -102.0 -99.0 -94.0 -91.0 -84.0 -87.0 -86.0 -83.0 -80.0 -77.0 -76.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -59.0 -58.0 -53.0 -50.0 -49.0 -46.0 -49.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -21.0 -17.0 -13.0 -12.0 -9.0 -8.0 -3.0 -2.0 3.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -7.0 -8.0 -7.0 -8.0 -13.0 -18.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 93 -196.0 -193.0 -192.0 -187.0 -190.0 -185.0 -182.0 -185.0 -180.0 -181.0 -176.0 -177.0 -174.0 -171.0 -170.0 -167.0 -166.0 -161.0 -160.0 -159.0 -156.0 -157.0 -156.0 -149.0 -148.0 -147.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -133.0 -131.0 -130.0 -127.0 -124.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -108.0 -103.0 -102.0 -97.0 -92.0 -89.0 -84.0 -87.0 -84.0 -81.0 -80.0 -79.0 -78.0 -71.0 -72.0 -71.0 -64.0 -61.0 -62.0 -59.0 -60.0 -53.0 -48.0 -49.0 -46.0 -49.0 -44.0 -43.0 -42.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -19.0 -15.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 5.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 -2.0 -9.0 -8.0 -7.0 -8.0 -15.0 -18.0 -21.0 -20.0 -23.0 -25.0 -29.0 94 -197.0 -196.0 -193.0 -192.0 -187.0 -190.0 -183.0 -182.0 -185.0 -178.0 -181.0 -174.0 -177.0 -172.0 -171.0 -170.0 -165.0 -164.0 -161.0 -158.0 -159.0 -156.0 -157.0 -154.0 -147.0 -148.0 -145.0 -146.0 -142.0 -141.0 -138.0 -137.0 -134.0 -131.0 -133.0 -131.0 -128.0 -127.0 -122.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -106.0 -101.0 -100.0 -95.0 -90.0 -89.0 -84.0 -85.0 -82.0 -79.0 -80.0 -79.0 -78.0 -71.0 -72.0 -69.0 -62.0 -61.0 -62.0 -59.0 -60.0 -51.0 -48.0 -49.0 -46.0 -49.0 -44.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -36.0 -31.0 -28.0 -21.0 -25.0 -25.0 -26.0 -24.0 -24.0 -18.0 -17.0 -16.0 -13.0 -12.0 -9.0 -6.0 -3.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 4.0 0.0 1.0 1.0 -4.0 -7.0 -8.0 -7.0 -10.0 -15.0 -20.0 -21.0 -20.0 -23.0 -25.0 95 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -164.0 -159.0 -158.0 -160.0 -156.0 -155.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -141.0 -138.0 -137.0 -132.0 -131.0 -133.0 -129.0 -126.0 -127.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -110.0 -103.0 -104.0 -99.0 -98.0 -93.0 -90.0 -89.0 -84.0 -83.0 -80.0 -79.0 -80.0 -79.0 -78.0 -71.0 -70.0 -67.0 -62.0 -61.0 -62.0 -57.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -34.0 -31.0 -28.0 -21.0 -25.0 -25.0 -25.0 -24.0 -23.0 -16.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 2.0 1.0 -1.0 1.0 -4.0 -9.0 -8.0 -7.0 -12.0 -17.0 -22.0 -23.0 -20.0 -23.0 96 -201.0 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -162.0 -159.0 -156.0 -161.0 -156.0 -153.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -139.0 -138.0 -137.0 -132.0 -131.0 -134.0 -129.0 -124.0 -125.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -104.0 -99.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -77.0 -76.0 -71.0 -68.0 -65.0 -62.0 -61.0 -62.0 -57.0 -56.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -42.0 -39.0 -40.0 -35.0 -34.0 -35.0 -32.0 -31.0 -28.0 -21.0 -25.0 -25.0 -23.0 -22.0 -21.0 -14.0 -17.0 -16.0 -11.0 -8.0 -7.0 -4.0 1.0 0.0 5.0 4.0 9.0 10.0 14.0 10.0 4.0 3.0 0.0 1.0 -6.0 -7.0 -10.0 -9.0 -12.0 -19.0 -20.0 -23.0 -20.0 97 -200.0 -201.0 -200.0 -197.0 -200.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -170.0 -163.0 -162.0 -159.0 -156.0 -159.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -144.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -132.0 -129.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -109.0 -106.0 -101.0 -102.0 -97.0 -96.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -75.0 -74.0 -69.0 -66.0 -65.0 -62.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -34.0 -35.0 -32.0 -33.0 -28.0 -21.0 -25.0 -24.0 -23.0 -22.0 -19.0 -14.0 -17.0 -14.0 -9.0 -6.0 -5.0 -2.0 1.0 0.0 5.0 4.0 9.0 12.0 14.0 10.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -18.0 -21.0 98 -205.0 -200.0 -201.0 -200.0 -197.0 -198.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -168.0 -163.0 -160.0 -159.0 -156.0 -157.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -142.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -130.0 -127.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -112.0 -111.0 -106.0 -101.0 -102.0 -97.0 -94.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -78.0 -75.0 -72.0 -67.0 -68.0 -67.0 -62.0 -63.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -32.0 -33.0 -28.0 -21.0 -24.0 -22.0 -21.0 -20.0 -19.0 -14.0 -17.0 -12.0 -7.0 -4.0 -4.0 -4.0 0.0 -2.0 3.0 4.0 9.0 14.0 14.0 10.0 6.0 3.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -16.0 -19.0 -18.0 99 -206.0 -205.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -192.0 -185.0 -186.0 -181.0 -182.0 -181.0 -178.0 -179.0 -174.0 -173.0 -172.0 -169.0 -168.0 -163.0 -160.0 -157.0 -156.0 -157.0 -154.0 -153.0 -151.0 -146.0 -145.0 -142.0 -142.0 -138.0 -139.0 -136.0 -135.0 -132.0 -129.0 -128.0 -127.0 -122.0 -123.0 -122.0 -119.0 -116.0 -113.0 -110.0 -109.0 -104.0 -99.0 -102.0 -95.0 -92.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -77.0 -76.0 -73.0 -70.0 -67.0 -68.0 -67.0 -62.0 -61.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -34.0 -31.0 -28.0 -21.0 -24.0 -22.0 -19.0 -20.0 -19.0 -14.0 -15.0 -10.0 -5.0 -2.0 -4.0 -4.0 0.0 -2.0 3.0 6.0 9.0 14.0 14.0 10.0 6.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -15.0 -16.0 -19.0 100 -207.0 -206.0 -203.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -185.0 -184.0 -181.0 -182.0 -181.0 -178.0 -179.0 -172.0 -175.0 -172.0 -169.0 -166.0 -163.0 -158.0 -157.0 -156.0 -157.0 -153.0 -152.0 -151.0 -146.0 -143.0 -142.0 -140.0 -138.0 -139.0 -136.0 -133.0 -132.0 -127.0 -128.0 -127.0 -120.0 -123.0 -120.0 -117.0 -114.0 -111.0 -108.0 -107.0 -102.0 -99.0 -100.0 -93.0 -90.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -75.0 -74.0 -71.0 -70.0 -67.0 -68.0 -65.0 -60.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -44.0 -39.0 -40.0 -37.0 -32.0 -36.0 -36.0 -30.0 -27.0 -21.0 -24.0 -20.0 -19.0 -20.0 -17.0 -12.0 -13.0 -8.0 -3.0 -2.0 -4.0 -5.0 0.0 0.0 3.0 6.0 7.0 14.0 14.0 10.0 4.0 1.0 -2.0 -5.0 -6.0 -7.0 -14.0 -15.0 -16.0 101 -208.0 -209.0 -206.0 -205.0 -198.0 -203.0 -198.0 -197.0 -196.0 -191.0 -192.0 -183.0 -184.0 -181.0 -182.0 -181.0 -178.0 -177.0 -172.0 -173.0 -172.0 -167.0 -166.0 -161.0 -158.0 -157.0 -156.0 -156.0 -151.0 -152.0 -151.0 -144.0 -143.0 -140.0 -140.0 -138.0 -139.0 -134.0 -133.0 -130.0 -127.0 -128.0 -125.0 -120.0 -121.0 -118.0 -115.0 -112.0 -109.0 -106.0 -105.0 -102.0 -97.0 -98.0 -91.0 -90.0 -89.0 -88.0 -89.0 -84.0 -79.0 -78.0 -73.0 -72.0 -71.0 -70.0 -65.0 -66.0 -65.0 -60.0 -63.0 -62.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -42.0 -37.0 -40.0 -37.0 -32.0 -37.0 -35.0 -28.0 -27.0 -21.0 -22.0 -20.0 -19.0 -20.0 -15.0 -10.0 -11.0 -6.0 -3.0 -2.0 -4.0 -5.0 0.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 4.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -13.0 102 -213.0 -208.0 -207.0 -208.0 -207.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -177.0 -170.0 -173.0 -170.0 -167.0 -164.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -152.0 -149.0 -144.0 -141.0 -140.0 -140.0 -138.0 -137.0 -134.0 -131.0 -132.0 -127.0 -126.0 -127.0 -118.0 -119.0 -116.0 -113.0 -110.0 -107.0 -104.0 -105.0 -100.0 -95.0 -96.0 -91.0 -90.0 -89.0 -88.0 -87.0 -82.0 -77.0 -76.0 -71.0 -72.0 -71.0 -68.0 -63.0 -64.0 -65.0 -60.0 -63.0 -60.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -45.0 -40.0 -37.0 -40.0 -37.0 -32.0 -36.0 -33.0 -28.0 -27.0 -20.0 -22.0 -20.0 -19.0 -18.0 -13.0 -8.0 -9.0 -6.0 -3.0 -2.0 -4.0 -3.0 2.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 6.0 1.0 0.0 -3.0 -8.0 -5.0 -10.0 103 -210.0 -213.0 -208.0 -207.0 -208.0 -205.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -175.0 -170.0 -171.0 -170.0 -167.0 -162.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -140.0 -141.0 -138.0 -135.0 -132.0 -131.0 -132.0 -127.0 -126.0 -125.0 -118.0 -117.0 -116.0 -113.0 -112.0 -105.0 -104.0 -103.0 -100.0 -95.0 -94.0 -91.0 -92.0 -89.0 -86.0 -87.0 -84.0 -75.0 -74.0 -71.0 -72.0 -73.0 -68.0 -61.0 -64.0 -65.0 -60.0 -61.0 -58.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -43.0 -40.0 -37.0 -40.0 -37.0 -32.0 -34.0 -31.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -16.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 -2.0 -3.0 4.0 2.0 2.0 2.0 5.0 14.0 14.0 6.0 6.0 -1.0 0.0 -3.0 -8.0 -5.0 104 -215.0 -210.0 -213.0 -210.0 -207.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -179.0 -176.0 -177.0 -170.0 -171.0 -170.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -156.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -141.0 -136.0 -137.0 -132.0 -131.0 -132.0 -129.0 -126.0 -123.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -104.0 -101.0 -98.0 -93.0 -94.0 -91.0 -92.0 -89.0 -84.0 -85.0 -82.0 -75.0 -74.0 -71.0 -72.0 -71.0 -68.0 -61.0 -64.0 -67.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -47.0 -44.0 -45.0 -40.0 -37.0 -38.0 -37.0 -32.0 -32.0 -29.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -14.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 0.0 -1.0 4.0 2.0 2.0 4.0 7.0 14.0 14.0 5.0 4.0 -1.0 0.0 -3.0 -6.0 105 -218.0 -215.0 -210.0 -213.0 -210.0 -205.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -177.0 -176.0 -175.0 -170.0 -171.0 -168.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -139.0 -134.0 -139.0 -132.0 -131.0 -134.0 -129.0 -128.0 -121.0 -116.0 -115.0 -116.0 -109.0 -112.0 -105.0 -104.0 -103.0 -96.0 -93.0 -94.0 -93.0 -92.0 -89.0 -84.0 -85.0 -80.0 -75.0 -74.0 -71.0 -72.0 -71.0 -70.0 -61.0 -64.0 -65.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -45.0 -44.0 -45.0 -40.0 -37.0 -38.0 -36.0 -31.0 -30.0 -27.0 -26.0 -25.0 -18.0 -22.0 -18.0 -15.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 -2.0 2.0 -1.0 4.0 2.0 4.0 6.0 5.0 14.0 12.0 5.0 4.0 -1.0 2.0 -3.0 106 -219.0 -220.0 -215.0 -210.0 -213.0 -212.0 -205.0 -208.0 -205.0 -200.0 -199.0 -198.0 -197.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -175.0 -170.0 -171.0 -170.0 -167.0 -164.0 -159.0 -160.0 -158.0 -157.0 -156.0 -151.0 -152.0 -151.0 -144.0 -141.0 -136.0 -137.0 -134.0 -139.0 -132.0 -131.0 -132.0 -129.0 -126.0 -121.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -104.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -91.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -64.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -47.0 -42.0 -37.0 -37.0 -36.0 -29.0 -30.0 -29.0 -26.0 -23.0 -16.0 -20.0 -16.0 -13.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 0.0 2.0 -1.0 6.0 2.0 6.0 6.0 5.0 14.0 10.0 5.0 4.0 -1.0 2.0 107 -220.0 -219.0 -218.0 -215.0 -210.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -197.0 -198.0 -195.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -173.0 -170.0 -171.0 -168.0 -166.0 -163.0 -159.0 -160.0 -158.0 -157.0 -154.0 -151.0 -152.0 -149.0 -142.0 -139.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -130.0 -127.0 -124.0 -119.0 -114.0 -113.0 -114.0 -109.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -88.0 -89.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -62.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -45.0 -42.0 -37.0 -35.0 -34.0 -29.0 -30.0 -29.0 -24.0 -23.0 -16.0 -19.0 -16.0 -15.0 -12.0 -11.0 -10.0 -11.0 -4.0 1.0 0.0 2.0 1.0 8.0 2.0 6.0 6.0 6.0 14.0 8.0 5.0 4.0 -1.0 108 -223.0 -220.0 -219.0 -218.0 -217.0 -210.0 -209.0 -212.0 -205.0 -206.0 -203.0 -202.0 -197.0 -196.0 -195.0 -194.0 -193.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -176.0 -173.0 -170.0 -171.0 -169.0 -166.0 -163.0 -159.0 -161.0 -160.0 -155.0 -154.0 -153.0 -152.0 -147.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -128.0 -127.0 -122.0 -117.0 -112.0 -113.0 -114.0 -107.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -91.0 -86.0 -87.0 -82.0 -85.0 -80.0 -75.0 -72.0 -71.0 -70.0 -71.0 -70.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -47.0 -48.0 -44.0 -41.0 -39.0 -35.0 -34.0 -29.0 -30.0 -27.0 -22.0 -21.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -9.0 -4.0 1.0 0.0 2.0 0.0 8.0 2.0 6.0 8.0 6.0 14.0 8.0 5.0 4.0 109 -222.0 -223.0 -218.0 -219.0 -218.0 -217.0 -210.0 -209.0 -210.0 -203.0 -206.0 -201.0 -202.0 -197.0 -196.0 -195.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -174.0 -173.0 -170.0 -170.0 -167.0 -166.0 -163.0 -159.0 -161.0 -158.0 -155.0 -154.0 -153.0 -150.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -129.0 -126.0 -125.0 -120.0 -115.0 -112.0 -113.0 -112.0 -105.0 -104.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -89.0 -86.0 -87.0 -82.0 -83.0 -78.0 -75.0 -72.0 -71.0 -70.0 -71.0 -68.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -49.0 -47.0 -44.0 -39.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -22.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -7.0 -4.0 1.0 2.0 2.0 2.0 8.0 2.0 8.0 8.0 6.0 14.0 8.0 5.0 110 -227.0 -222.0 -223.0 -218.0 -219.0 -216.0 -215.0 -210.0 -209.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -191.0 -186.0 -187.0 -184.0 -181.0 -180.0 -177.0 -174.0 -171.0 -169.0 -168.0 -167.0 -166.0 -163.0 -159.0 -159.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -127.0 -124.0 -123.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -102.0 -101.0 -96.0 -91.0 -92.0 -89.0 -86.0 -87.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -49.0 -47.0 -42.0 -37.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -20.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 4.0 4.0 2.0 8.0 4.0 8.0 8.0 4.0 14.0 8.0 111 -228.0 -229.0 -222.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -203.0 -206.0 -201.0 -202.0 -199.0 -196.0 -195.0 -192.0 -191.0 -186.0 -187.0 -186.0 -183.0 -178.0 -179.0 -174.0 -173.0 -171.0 -170.0 -167.0 -164.0 -165.0 -161.0 -161.0 -160.0 -157.0 -154.0 -149.0 -146.0 -145.0 -144.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -129.0 -124.0 -121.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -100.0 -99.0 -96.0 -89.0 -90.0 -89.0 -86.0 -87.0 -80.0 -79.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -48.0 -45.0 -40.0 -35.0 -39.0 -39.0 -32.0 -27.0 -26.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -17.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 6.0 4.0 2.0 8.0 4.0 8.0 8.0 6.0 14.0 112 -233.0 -228.0 -227.0 -224.0 -227.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -197.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -170.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -157.0 -154.0 -151.0 -148.0 -145.0 -146.0 -139.0 -136.0 -135.0 -134.0 -133.0 -128.0 -127.0 -122.0 -121.0 -118.0 -113.0 -112.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -97.0 -94.0 -89.0 -90.0 -89.0 -86.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -46.0 -43.0 -40.0 -35.0 -40.0 -37.0 -32.0 -27.0 -24.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -15.0 -10.0 -11.0 -8.0 -5.0 -2.0 3.0 6.0 4.0 4.0 8.0 4.0 6.0 8.0 8.0 113 -234.0 -233.0 -228.0 -227.0 -224.0 -225.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -195.0 -192.0 -189.0 -188.0 -187.0 -182.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -168.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -133.0 -134.0 -133.0 -128.0 -125.0 -122.0 -121.0 -118.0 -113.0 -110.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -95.0 -92.0 -89.0 -90.0 -89.0 -86.0 -83.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -66.0 -61.0 -58.0 -55.0 -56.0 -55.0 -52.0 -52.0 -47.0 -44.0 -43.0 -40.0 -35.0 -38.0 -35.0 -30.0 -25.0 -22.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -13.0 -10.0 -11.0 -8.0 -3.0 0.0 3.0 6.0 4.0 4.0 8.0 6.0 6.0 8.0 114 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -199.0 -194.0 -197.0 -192.0 -189.0 -190.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -161.0 -158.0 -155.0 -152.0 -151.0 -150.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -131.0 -128.0 -125.0 -120.0 -119.0 -116.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -103.0 -98.0 -93.0 -92.0 -89.0 -90.0 -89.0 -84.0 -83.0 -80.0 -81.0 -78.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -54.0 -52.0 -50.0 -45.0 -42.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -23.0 -22.0 -25.0 -18.0 -19.0 -14.0 -17.0 -14.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 8.0 4.0 4.0 8.0 8.0 8.0 115 -238.0 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -194.0 -195.0 -192.0 -189.0 -188.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -159.0 -156.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -129.0 -128.0 -123.0 -120.0 -119.0 -114.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -101.0 -96.0 -93.0 -92.0 -89.0 -90.0 -87.0 -84.0 -83.0 -80.0 -81.0 -76.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -56.0 -52.0 -51.0 -48.0 -43.0 -42.0 -43.0 -40.0 -33.0 -34.0 -31.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 2.0 5.0 8.0 4.0 6.0 8.0 8.0 116 -241.0 -240.0 -235.0 -234.0 -235.0 -230.0 -229.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -210.0 -205.0 -206.0 -201.0 -200.0 -199.0 -194.0 -195.0 -194.0 -191.0 -190.0 -187.0 -184.0 -179.0 -177.0 -180.0 -175.0 -174.0 -171.0 -170.0 -171.0 -166.0 -165.0 -160.0 -159.0 -158.0 -155.0 -154.0 -151.0 -150.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -126.0 -125.0 -122.0 -119.0 -116.0 -111.0 -112.0 -109.0 -110.0 -103.0 -104.0 -101.0 -98.0 -95.0 -94.0 -89.0 -90.0 -87.0 -84.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -55.0 -50.0 -49.0 -46.0 -43.0 -42.0 -41.0 -38.0 -31.0 -32.0 -29.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -11.0 -6.0 -5.0 -4.0 1.0 2.0 5.0 8.0 4.0 8.0 8.0 117 -242.0 -243.0 -238.0 -235.0 -236.0 -233.0 -228.0 -231.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -212.0 -205.0 -208.0 -203.0 -200.0 -201.0 -194.0 -193.0 -192.0 -191.0 -190.0 -188.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -169.0 -168.0 -163.0 -158.0 -159.0 -160.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -124.0 -123.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -108.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -87.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -66.0 -63.0 -57.0 -55.0 -55.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -38.0 -31.0 -30.0 -31.0 -30.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -12.0 -11.0 -4.0 -5.0 -4.0 3.0 0.0 5.0 10.0 6.0 10.0 118 -243.0 -242.0 -241.0 -238.0 -235.0 -236.0 -231.0 -228.0 -229.0 -224.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -201.0 -194.0 -191.0 -192.0 -189.0 -189.0 -186.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -167.0 -166.0 -163.0 -158.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -143.0 -142.0 -139.0 -136.0 -131.0 -130.0 -129.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -106.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -64.0 -62.0 -57.0 -54.0 -53.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -36.0 -31.0 -30.0 -31.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -5.0 -2.0 3.0 0.0 5.0 10.0 8.0 119 -246.0 -243.0 -242.0 -241.0 -238.0 -235.0 -234.0 -231.0 -228.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -215.0 -212.0 -209.0 -210.0 -205.0 -206.0 -203.0 -200.0 -199.0 -194.0 -191.0 -190.0 -188.0 -187.0 -186.0 -185.0 -181.0 -177.0 -178.0 -177.0 -172.0 -171.0 -170.0 -167.0 -164.0 -163.0 -158.0 -159.0 -156.0 -153.0 -152.0 -147.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -128.0 -127.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -112.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -95.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -79.0 -80.0 -77.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -63.0 -60.0 -57.0 -54.0 -51.0 -48.0 -49.0 -46.0 -43.0 -40.0 -37.0 -34.0 -31.0 -30.0 -29.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -3.0 -2.0 3.0 2.0 7.0 12.0 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-5.html"},{"title":"混合ガウス分布のEMアルゴリズム","text":"クラスタリング で省略した、混合ガウス分布のEMアルゴリズムの計算過程を記述します。 EMアルゴリズム 観測データ \\(\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) に対する対数尤度関数は、 \\((9.7)\\) から以下のように書けます。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ E step $$\\begin{aligned} p(z_{k}=1|\\mathbf{x}) &\\equiv \\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{p(\\mathbf{x})}\\qquad (\\because\\text{Bayes' theorem})\\\\ &\\propto p(z_{k}=1)p(\\mathbf{x}|z_{k}=1) \\\\ &=\\pi_k\\mathcal{N}(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ なので、総和が \\(1\\) になるように正規化を行えば 負担率 が以下のように求まります。 $$\\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) =\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13)$$ ※ なお、この時分母である \\(\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})\\) が \\(p(\\mathbf{x})\\) であることは有用です。 （ 生物データマイニング論 第1回 では、これを用いて可視化していました。） Maximization step ※ 対数尤度関数 \\((9.14)\\) を \\(\\ln L\\) と記述します。 \\(\\boldsymbol{\\mu}_k\\) 対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\mu}_k\\) で微分します。この時 正規分布は \\(e&#94;{\\text{hoge}}\\) という形をしており、微分しても形が変わらないので、 $$\\begin{aligned} \\frac{\\partial\\ln L}{\\partial\\boldsymbol{\\mu}_k} &= \\sum_{i=n}&#94;N \\frac{\\pi_k\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= \\boldsymbol{\\Sigma}_k&#94;{-1}\\sum_{n=1}&#94;N \\gamma_{nk}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= 0\\\\ \\therefore\\boldsymbol{\\mu}_k&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.17)\\\\ \\end{aligned}$$ と最適解が求まりました。 \\(\\pi_k\\) パラメータ \\(\\pi_k\\) については、 \\(\\sum_{k=1}&#94;K \\pi_k = 1\\) という制約に注意する必要があります。ですが、 隠れマルコフモデルの最尤推定 で行なった能登同様に、ラグランジュの未定乗数 \\(\\lambda\\) を導入すればこの問題は解けます。 $$L_{\\lambda} = \\log L + \\lambda\\left(\\sum_{c=1}&#94;K \\pi_c - 1\\right)$$ の導関数が \\(0\\) となる条件を求める事になるので、 $$\\begin{aligned} \\frac{\\partial L_{\\lambda}}{\\partial\\pi_k} &= \\sum_{n=1}&#94;N \\frac{\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_k \\pi_k \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)} + \\lambda\\\\ &= \\sum_{n=1}&#94;N \\frac{\\gamma_{nk}}{\\pi_k} + \\lambda = 0 &\\therefore \\pi_k = -\\frac{1}{\\lambda}\\sum_{n=1}&#94;N \\gamma_{ic}\\\\ \\frac{\\partial L_{\\lambda}}{\\partial\\lambda} &= \\sum_{k=1}&#94;K \\pi_k - 1\\\\ &= \\left(-\\frac{1}{\\lambda}\\sum_{k=1}&#94;K\\sum_{n=1}&#94;N \\gamma_{nk}\\right) - 1 = 0 &\\therefore \\lambda = -n \\end{aligned}$$ より、 $$\\pi_k&#94;{\\star} = \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} \\qquad(9.22)$$ と最適解が求まりました。 \\(\\boldsymbol{\\Sigma}_k\\) \\(\\boldsymbol{\\mu}_k\\) と同様に、対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\Sigma}_k\\) で微分します。すると、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\log L = \\sum_{n=1}&#94;N\\frac{\\pi_k\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}$$ となります。ここで、 \\(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\) を計算すると、 $$\\begin{aligned} &\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\biggr)\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\left(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\right)\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(-\\frac{1}{2}\\biggr)|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\quad (\\ast1)\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\frac{1}{2}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\quad (\\ast2)\\\\ =&-\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)+\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{1}{2}\\left\\{\\boldsymbol{\\Sigma}_k&#94;{-1}-\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\right\\}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ したがって、 $$ \\boldsymbol{\\Sigma}_k&#94;{\\star}= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.19) $$ と最適解が求まりました。 ※ \\(\\ast1,\\ast2\\) の式変形は以下でより詳細に説明します。 が、その前にいくつか基本事項の定義を振り返ります。 行列式 $$\\det A=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)\\prod_{i=1}&#94;na_{i\\sigma(i)}=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)a_{1\\sigma(1)}a_{2\\sigma(2)}\\cdots a_{n\\sigma(n)}$$ \\(\\sigma\\) は \\(1\\) から \\(n\\) の置換（順列）を表す。 \\(\\mathrm{sgn}(\\sigma)\\) は置換の符号を表す。なお、\b置換の符号は 互\b換の数 に注目しており、奇置換（互換の数が奇数個）なら \\(-1\\) 、偶置換なら \\(+1\\) \b\b 余韻子 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\(i\\) 行と \\(i\\) 列を \\(1\\) つずつ取り去って作られる小行列を \\(M_{ij}\\) とする。つまり、 $$ M_{ij} = \\small \\left[ \\begin{array}{ccc} a_{11} & \\cdots &a_{1\\hspace{1mm}j-1} & a_{1\\hspace{1mm}j+1} & \\cdots & a_{1n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{i-1 \\hspace{1mm} 1} & \\cdots &a_{i-1\\hspace{1mm}j-1} & a_{i-1\\hspace{1mm}j+1} & \\cdots & a_{i-1 \\hspace{1mm}n} \\\\ a_{i+1 \\hspace{1mm} 1} & \\cdots &a_{i+1\\hspace{1mm}j-1} & a_{i+1\\hspace{1mm}j+1} & \\cdots & a_{i+1 \\hspace{1mm}n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{n1} &\\cdots &a_{n\\hspace{1mm}j-1} & a_{n\\hspace{1mm}j+1} &\\cdots &a_{nn} \\end{array} \\right] $$ です。ここで、 \\(\\Delta_{ij}=(-1)&#94;{i+j}|M_{ij}|\\) とすると、以下の 余因子展開 ができます。 \\(A\\) の行列式は \\(j\\) 列に関して、以下のように展開されます。 $$\\det A=\\Delta_{1j}a_{1j}+\\Delta_{2j}a_{2j}+\\cdots+\\Delta_{nj}a_{nj}$$ \\(A\\) の行列式は \\(i\\) 行に関して、以下のように展開されます。 $$\\det A=\\Delta_{i1}a_{i1}+\\Delta_{i2}a_{i2}+\\cdots+\\Delta_{in}a_{in}$$ \b 余韻子行列 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\((i, j)\\) 余因子を \\((j, i)\\) 成分に持つ行列 $$\\tilde{A} := \\begin{pmatrix}&\\Delta_{11}&\\Delta_{21}&\\cdots&\\Delta_{n1}\\\\&\\Delta_{21}&\\Delta_{22}&\\ldots&\\Delta_{n2}\\\\&\\vdots&\\vdots&\\ddots&\\vdots\\\\&\\Delta_{n1}&\\Delta_{n2}&\\cdots&\\Delta_{nn}\\end{pmatrix}$$ を 余韻子行列 と呼びます。ここで、余韻子展開を考えれば、余韻子行列に関して、 $$\\tilde{A}A=A\\tilde{A}=\\det(A)I_n$$ が成り立つことがわかります。 \\(\\ast1\\) の変形 以上を踏まえると、 \\(\\frac{\\partial\\det(A)}{\\partial a_{ij}} = \\Delta_{ij}\\) なので、 $$\\frac{\\partial|\\Sigma|}{\\partial\\Sigma} =\\tilde\\Sigma = |\\Sigma|\\Sigma&#94;{-1}$$ が成り立ち、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}} =-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-\\frac{3}{2}}\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\boldsymbol{\\Sigma_k}=-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma_k}&#94;{-1}$$ となることがわかります。 トレースと固有値の関係性 【命題】 トレースには、 \\(Tr(A) = \\sum_{k=1}&#94;{n}\\lambda_{k}\\) という関係がある。 トレース： \\(n\\times n\\) の正方行列 \\(A\\) に対して、\b対角成分の和 \\(\\sum_{k=1}&#94;{n}a_{kk}\\) を \\(A\\) のトレースと呼び、 \\(\\mathrm{Tr}(A),\\mathrm{tr}A\\) \b と表す。 【証明】 まず、固有方程式は、 $$\\phi(t) = |A-tI| = \\left|\\begin{array}{cccc} a_{11}-t & a_{12} & \\ldots & a_{1n} \\\\ a_{21} & a_{22}-t & \\ldots & a_{2n} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_{n1} & a_{n2} & \\ldots & a_{nn}-t \\end{array} \\right|$$ である。ここで、 \\(t\\) の係数に着目する。 \\(t&#94;n\\) の係数 これは、対角成分を全て掛け合わせた次の多項式 $$(a_{11}-t)(a_{22}-t)\\ldots(a_{nn}-t)$$ における \\(t&#94;n\\) の係数と等しくなる。よって、係数は「 \\((-1)&#94;n\\) 」 \\(t&#94;{n-1}\\) の係数 これも\b、先ほどの多項式の \\(t&#94;{n-1}\\) の係数と等しくなる。（ \\(\\because\\) 余韻子展開を考える。 \\(\\sigma\\) が全単射のため、１行（列）対角成分ではないものがあると、\b少なくともあと１つは体格成分でないものがあることがわかる。） 定数項 これは、\b余韻子展開を考えれば \\(|A|\\) そのもの。 よって、係数は「 \\((-1)&#94;{n-1}(a_{11}+a_{22}+\\ldots+a_{nn})\\) 」であり、これは対角和を用いて「 $(-1)&#94;{n-1}\\mathrm{Tr}(A) $ 」とも書ける。 一方先ほどの固有方程式は固有値を解に持つ。 つまり、 \\(A\\) の固有値を \\(\\lambda_1\\) 〜 \\(\\lambda_n\\) として、 $$\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)$$ とかける。（ \\((-1)&#94;n\\) によって、 \\(t&#94;n\\) の係数を合わせている。） この式を展開すると、 \\(t&#94;{n-1}\\) の係数が「 \\((-1)&#94;{n-1}(\\lambda_1+\\lambda_2+\\ldots+\\lambda_n)\\) 」であることから $$\\mathrm{Tr}(A) = \\lambda_1+\\lambda_2+\\ldots+\\lambda_n$$ ※ちなみに、 \\(\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)\\) の定数項を考えることで、 $$|A| = \\lambda_1\\lambda_2\\ldots\\lambda_n$$ であることもわかる。 トレースの循環性 \\(A\\) を \\(m \\times n\\) 、 \\(B\\) を \\(n \\times m\\) の行列とすると、 \\(AB\\) は \\(m \\times m\\) の行列であり、 $$ \\begin{aligned} \\mathrm{Tr}[AB]&= \\sum_{i=1}&#94;{m} (AB)_{ii} \\\\&= \\sum_{i=1}&#94;{m}\\sum_{j=1}&#94;{n} A_{ij}B_{ji} \\\\&= \\sum_{j=1}&#94;{n} \\sum_{i=1}&#94;{m} B_{ji} A_{ij} \\\\&= \\sum_{j=1}&#94;{n} (BA)_{jj} \\\\&= \\mathrm{Tr}[BA] \\end{aligned} $$ となる。これを応用すれば、以下の 循環性 が証明できる。 \\(A,B,C\\) をそれぞれ \\(m\\times n,n \\times l,l \\times m\\) の行列とするとき、 $$\\begin{aligned} \\mathrm{Tr}[ABC] =& \\mathrm{Tr}[BCA] \\\\=& \\mathrm{Tr}[CAB] \\end{aligned} $$ が成り立つ。（ \\(\\because\\) ２つの\b行列積をセットで考えれば明らか） 逆行列の微分 正則行列 \\(A\\) に対して、 \\(A&#94;{-1}A=I\\) が成立するので、\bこの等式の両辺を \\(A\\) で微分して、 $$\\begin{aligned} \\biggr(\\frac{\\partial }{\\partial A}A&#94;{-1}\\biggl)A + A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl) = 0\\\\ \\biggr(\\frac{\\partial A&#94;{-1}}{\\partial A}\\biggl) = -A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl)A&#94;{-1} \\end{aligned}$$ シングルエントリ行列 \\((i,j)\\) 成分のみが \\(1\\) で、残りが全て \\(0\\) の行列 \\(\\mathbf{J}&#94;{ij}\\) を シングルエントリ行列 と呼ぶ。なお、\b以下の式が成り立つ。 $$\\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{ij}\\bigl)=\\mathbf{A}_{ji}$$ \b \\(2 \\times 2\\) の行列でこれを示す。 $$\\begin{aligned} \\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{12}\\bigl)&=\\mathrm{Tr}\\biggr(\\begin{pmatrix}a_{11}&a_{12}\\\\a_{21}&a_{22}\\end{pmatrix}\\begin{pmatrix}0&1\\\\0&0\\end{pmatrix}\\biggl)\\\\ &=\\mathrm{Tr}\\begin{pmatrix}0&a_{11}\\\\0&a_{21}\\end{pmatrix}\\\\ &=a_{21}\\\\ &=\\mathbf{A}_{21} \\end{aligned}$$ \\(\\ast2\\) の変形 以上を踏まえれば、 $$\\begin{aligned} \\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu}) &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr((\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\biggl)\\\\ &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\frac{\\partial\\boldsymbol{\\Sigma}}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\biggl)\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ji}\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ij}\\\\ \\end{aligned}$$ よって、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})=-\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html"},{"title":"クラスタリング","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 講義の方針 データ解析アルゴリズムは、生物学の研究に不可欠 R や python のパッケージとして、すぐダウンロードして使うことができる。 しかし、原理を知らずに使うと、アルゴリズムの出す結果を盲信することになり危険。 正しい理解：結果を疑えるようになること。 階層的クラスタリング クラスタリング データ点を クラスタ（互いに類似したグループ） に分割する。 距離尺度：ユークリッド距離、コサイン距離など。 階層的クラスタリング 最初は各点がクラスタとなる。 二つのクラスタを選んで合併していく。 Single Link ：二つのクラスタをまたぐ最近点の距離 chaining により、ゆるいクラスタができる （非推奨） Complete Link ：二つのクラスタをまたぐ最遠点の距離 最も固いクラスタができるが、細かく分け過ぎる傾向がある。 Average Link ：二つのクラスタをまたぐ点対の平均距離 最もバランスがとれており、通常はこれを用いる。 最後は一つのクラスタになる。 デンドログラム ：合併の過程を樹形図の形で表したもの。 K-Means 分割的クラスタリング の一手法。$K$ クラスにデータ点を分割する。 以下を繰り返す。 各データ点 $\\mathbf{x}$ を最も近い中心点 $\\mu_k$ に割り当てて、クラスタ $c_1,\\ldots,c_K$ を作成する。 割当を元に中心点を計算しなおす。 $$\\mu_k = \\sum_{j\\in C_i} \\mathbf{x}_j$$ 実装 In [1]: import numpy as np import matplotlib.pyplot as plt Data. In [2]: np . random . seed ( 0 ) In [3]: N = 30 ; K = 5 vmin = 0 ; vmax = 1 In [4]: # Training Data. data = np . random . uniform ( vmin , vmax , ( N , 2 )) x , y = data . T In [5]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [6]: # Background Color Xs , Ys = np . meshgrid ( np . linspace ( vmin , vmax , 100 ), np . linspace ( vmin , vmax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.KMeans.KMeans ） を使って学習させます。 In [7]: from kerasy.ML.KMeans import KMeans In [8]: model = KMeans ( K = K , random_state = 0 ) In [9]: model . fit ( data ) Visualization. In [10]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [11]: # For Visualization. plt_model = KMeans ( K = K ) In [12]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( idx , mu ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Plot Representative points(µk) of each class. mux , muy = mu . T ax . scatter ( mux , muy , marker = 'x' , c = \"red\" , s = 200 ) # Background. plt_model . mu = mu Z , _ = plt_model . predict ( XYs ) Zs = Z . reshape ( Xs . shape ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( vmin , vmax ) ax . set_ylim ( vmin , vmax ) ax . set_title ( f \"Iteration. {i:>02} \" ) plt . show () 混合ガウス分布 混合ガウス分布は、次のように混合係数 $\\pi_k$ でガウス分布を線形重ね合わせした形でかける。 $$p(\\mathbf{x}) = \\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\qquad (9.7)$$ ここで、 二値ベクトル（1-of-K符号化法） $\\mathbf{z}$ の周辺分布は、$0\\leq\\pi_k\\leq1$ と $\\sum_{k=1}&#94;K\\pi_k = 1 $ を満たす $\\pi_k$ を用いて、 $$p\\left(\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\pi_k&#94;{z_k}\\qquad (9.9)$$ と書ける。また、$\\mathbf{z}$ が与えられた時の $\\mathbf{x}$ の事後分布は当然ながら次のガウス分布である。 $$p\\left(\\mathbf{x}|\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)&#94;{z_k}\\qquad(9.11)$$ EMアルゴリズム 観測データ $\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}$ に対する対数尤度関数は、$(9.7)$ から以下のように書ける。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ Expectation step M stepで必要となる $\\gamma(z_{nk})$ を求める。 この値は、$\\mathbf{x}$ が与えられた下での $\\mathbf{z}$ の条件付き確率であり、混合要素 $k$ が $\\mathbf{x}$ の観測を 「説明する」 度合いを表す 負担率(responsibility) として解釈することもできる。 $$ \\begin{aligned} \\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) &=\\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{\\sum_{j=1}&#94;{K}p(z_{j}=1)p(\\mathbf{x}|z_{j}=1)}\\\\ &=\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13) \\end{aligned} $$ Maximization step M stepでは、尤度関数を最大化するように各パラメータの値を更新する。 ※ 導出過程は 混合ガウス分布のEMアルゴリズム に載せています。 $$ \\begin{aligned} \\boldsymbol{\\mu}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.17)\\\\ \\boldsymbol{\\Sigma}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.19)\\\\ \\pi_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} & (9.22) \\end{aligned} $$ 実装 Data. In [13]: np . random . seed ( 0 ) In [14]: N = 150 ; K = 3 In [15]: # Train Data. data = np . concatenate ([ np . random . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 0 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [16]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [17]: # Background Color xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.MixedDistribution.MixedGaussian ） を使って学習させます。 In [18]: from kerasy.ML.MixedDistribution import MixedGaussian In [19]: model = MixedGaussian ( K = K , random_state = 1234 ) In [20]: model . fit ( data , span = 20 ) Visualization. In [21]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [22]: # For Visualization. plt_model = MixedGaussian ( K = K ) plt_model . N , plt_model . M = data . shape In [23]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( epoch , idx , mu , S , pi ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Background. plt_model . mu = mu plt_model . S = S plt_model . pi = pi Z = plt_model . predict ( XYs ) Zs = np . sum ( Z , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( xmin , xmax ) ax . set_ylim ( ymin , ymax ) ax . set_title ( f \" {epoch:>02} epochs.\" ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html"},{"title":"イントロダクション","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 講義予定 前半（山崎担当） 画像の操作 画像の特徴抽出・内容理解・構造化 機械学習一般 後半（相澤担当） 画像を撮る：カメラの内部処理・センサ・レンズ・標本化 画像を表現する。色の知覚・表現 画像の基礎的な処理。周波数変換、線形・非線形フィルタリング # 日付 担当 内容 1 9/30(月) 山崎 画像・映像を中心とした現在の技術動向の紹介、低次・領域・局所画像特徴 2 10/7(月) 山崎 特徴選択、特徴表現 3 10/21(月) 山崎 機械学習概論、教師なし学習、クラスタリング 4 10/28(月) 山崎 機械学習 (NN, SVM, RF) 5 11/7(木) 山崎 深層学習 (Deep Neural Networks) 6 11/11(月) 山崎 動画像処理 (ブロックマッチング、背景差分、オプティカルフロー) 7 11/13(水) 山崎 3次元空間情報の取得と処理 8 11/18(月) 相澤 9 11/25(月) 相澤 10 12/9(月) 相澤 11 12/16(月) 相澤 12 12/23(月) 相澤 13 1/@@ テスト パターン認識一般 現在は、90%位が 学習ベース(data-driven) 。残りが解析的手法。最近はこのhybridも。 全体的な流れ 学習(training) 検証(validation)←パラメータ最適化 推論(test, inference) なぜ今 学習ベース なのか？ データの大規模化：インターネット上から大量に収集可。 計算機の進化：ムーアの法則による高速化。さらにはクラウド 労働力のクラウド化 画像特徴 低次特徴量 色ヒストグラム（RGB,HSV,L*a*b*）：単純計算すると \\(256&#94;3\\) 個binができるので、注意。 色共起ヒストグラム（Correlogram）：隣接ピクセルの色を踏まえたヒストグラム 円、コーナー直線の数・大きさ・長さ 物体の円度、曲率等 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html"},{"title":"matplotlibチートシート","text":"In [1]: import numpy as np import matplotlib.pyplot as plt $N$ 枚の画像を plot Vsize , Hsize = () # 画像の横の長さと縦の長さ。 n_fig = \"画像の枚数\" n_col = \"横に並ぶ数\" n_row = n_fig // n_col + 1 if n_fig % n_col != 0 else n_fig // n_col # 行数を計算。 fig = plt . figure ( figsize = ( Vsize * n_col , Hsize * n_row )) for i , hoge in enumerate ( HOGEs ): ax = fig . add_subplot ( row , col , i + 1 ) \"\"\" 描きたいオブジェクトをプロット \"\"\" plt . tight_layout () plt . show () gifの画像の作成 上のようにやって全ての画像をまとめた一枚の画像を出力しても良いが、 n_fig = \"画像の枚数\" digit = len ( str ( N )) for i , hoge in enumerate ( HOGEs ): ax = fig . add_subplot ( row , col , i + 1 ) plt . figure ( figsize = \"サイズ\" ) \"\"\" 描きたいオブジェクトをプロット \"\"\" plt . savefig ( f \"img{i:>0{digit}}.png\" ) として連番の画像を作成し、それを以下のプログラムでgif画像にした方が見やすい場合もある from PIL import Image N = 30 digit = len ( str ( N )) images = [] for i in range ( N ): img = Image . open ( f \"{i:>0{digit}}.png\" ) images . append ( img ) images [ 0 ] . save ( 'out.gif' , save_all = True , append_images = images [ 1 :], loop = 0 , duration = 300 ) # loop=0: 無限ループ # duration: 一枚あたりの表示時間[ms] cmaps In [2]: cmaps = [ 'Accent' , 'Blues' , 'BrBG' , 'BuGn' , 'BuPu' , 'CMRmap' , 'Dark2' , 'GnBu' , 'Greens' , 'Greys' , 'OrRd' , 'Oranges' , 'PRGn' , 'Paired' , 'Pastel1' , 'Pastel2' , 'PiYG' , 'PuBu' , 'PuBuGn' , 'PuOr' , 'PuRd' , 'Purples' , 'RdBu' , 'RdGy' , 'RdPu' , 'RdYlBu' , 'RdYlGn' , 'Reds' , 'Set1' , 'Set2' , 'Set3' , 'Spectral' , 'Wistia' , 'YlGn' , 'YlGnBu' , 'YlOrBr' , 'YlOrRd' , 'afmhot' , 'autumn' , 'binary' , 'bone' , 'brg' , 'bwr' , 'cividis' , 'cool' , 'coolwarm' , 'copper' , 'cubehelix' , 'flag' , 'gist_earth' , 'gist_gray' , 'gist_heat' , 'gist_ncar' , 'gist_rainbow' , 'gist_stern' , 'gist_yarg' , 'gnuplot' , 'gnuplot2' , 'gray' , 'hot' , 'hsv' , 'inferno' , 'jet' , 'magma' , 'nipy_spectral' , 'ocean' , 'pink' , 'plasma' , 'prism' , 'rainbow' , 'seismic' , 'spring' , 'summer' , 'tab10' , 'tab20' , 'tab20b' , 'tab20c' , 'terrain' , 'viridis' , 'winter' ] In [3]: matrix = np . arange ( 100 ) . reshape ( 10 , 10 ) In [4]: Vsize , Hsize = ( 4 , 4 ) n_fig = len ( cmaps ) n_col = 4 n_row = n_fig // n_col + 1 if n_fig % n_col != 0 else n_fig//n_col In [5]: fig = plt . figure ( figsize = ( Vsize * n_col , Hsize * n_row )) for i , cmap in enumerate ( cmaps ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) ax . matshow ( matrix , cmap = cmap ) ax . set_title ( f \"↓ {cmap} ↓\" , fontsize = 24 ), ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-0.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-0.html"},{"title":"生物物理学 第1回","text":"講師： 能瀬聡直 講義資料： 生物物理学 参考書： 神経科学 -脳の探求- 参考書： ニューロンの生物物理 講義概要 生物物理学とは 遺伝情報の流れ 蛋白質の構造と機能 細胞内タンパク質のダイナミックス 遺伝子操作技術 ゲノム科学とバイオインフォマティックス バイオイメージング、生体分子計測 脳・神経系の生物物理 講義日程 # 日付 担当 1 9/25 能瀬 2 10/2 樋口 3 10/9 樋口 4 10/16 樋口 5 10/23 樋口 6 10/30 樋口 7 11/6 樋口 8 11/20 能瀬 9 11/27 能瀬 10 12/4 樋口 11 12/11 能瀬 12 12/18 能瀬 13 1/8 能瀬 14 1/15 能瀬 生物物理学とは？ 物理の手法で生物を見る。 生体分子の機能や構造の研究。 対象は広範囲、ただし物理的理念を背景にもつ。 生体高分子の構造・機能、脳・神経機構など単なる記述中心の従来の生物学と異なり、論理的な思考法を用い、より普遍的な原理を見いだすことを目指している。 生物物理の代表的発見 DNA二重螺旋構造の発見（1953年、1962年ノーベル生理医学賞） 蛋白質の高次構造の解析（1960年、1962年ノーベル化学賞） 神経活動のイオン機構の解明（1953年、1963年ノーベル生理医学賞） 最近の技術革新 ヒトゲノム計画 ヒトの全遺伝子の設計図解読の終了（2000年） イメージング技術 蛍光蛋白質・レーザー顕微鏡（1990年代） 1分子観測・1分子操作 溶液中での蛋白質1分子の観察（1990年代） 神経回路の作動原理の解明に向けた従来の3つのアプローチ 解剖学(Anatomy) 神経の配線を明らかにする。 生理学(Physiology) 神経活動を測定・操作する。 理論 神経活動パターンから原理を抽出 Part1. Introduction 脳神経系における情報の流れ ニューロンの構成 脳とコンピューター 半導体 ↔︎ 半導体素子 ↔︎ 集積回路 ↔︎ コンピューター 分子 ↔︎ 神経細胞 グリア細胞 ↔︎ 神経回路 ↔︎ 脳 活動電位の特徴 全か無か： \\(\\mathrm{Na}\\) チャネル活性化に閾値がある。 一過性： \\(\\mathrm{Na}\\) チャネル不活性化 確実に伝播 一体、どのような構造を持った神経回路の中を、どのように信号が伝わることで特定の演算が創発されるのか。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html"},{"title":"HMMをpythonで実装","text":"（kerasy.ML.HMM.HMM） の使い方 自作のモジュール （kerasy.ML.HMM.HMM） を使って実装をします。 In [1]: from kerasy.ML.HMM import HMM In [2]: model = HMM () In [3]: # 以下のようなパラメタファイルを読み込む。 ! cat params.json { \"M\": 4, \"K\": 4, \"basetypes\": [\"a\", \"c\", \"g\", \"u\"], \"pi\": [0.7, 0.1, 0.1, 0.1], \"A\": [[0.8, 0.1, 0.1, 0.0], [0.0, 0.8, 0.1, 0.1], [0.1, 0.0, 0.8, 0.1], [0.1, 0.0, 0.1, 0.8]], \"phi\": [[0.4, 0.1, 0.1, 0.4], [0.25, 0.25, 0.25, 0.25], [0.1, 0.4, 0.4, 0.1], [0.3, 0.2, 0.2, 0.3]] } In [4]: model . load_params ( \"params.json\" ) In [5]: # インスタンスに読み込まれた各種パラメータ model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 In [6]: # なお、この時以下のような辞書を同時に作成しています。 print ( model . base2int ) print ( model . int2base ) {'a': 0, 'c': 1, 'g': 2, 'u': 3} {0: 'a', 1: 'c', 2: 'g', 3: 'u'} In [7]: # また、パラメータはnumpyの行列の形で読み込まれています。 print ( type ( model . pi )) print ( type ( model . A )) print ( type ( model . phi )) In [8]: # 以下のようにすれば、学習したパラメタを同じ形式で出力することができます。 model . save_params ( \"out.json\" ) Viterbi algorithm HMMのViterbiアルゴリズムを実装して、尤もらしいサンプル配列の隠れ状態列を推定します。 In [9]: from kerasy.utils.bio import alignStr , readMonoSeq , readMultiSeq # ファイルの中身 cat seq1.fasta ``` sample-RNA gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc ``` In [10]: # ファイルの読み込み seq1 = readMonoSeq ( 'seq1.fasta' ) print ( f \"Input Sequence: \\n {alignStr(seq1[0])}\" ) Input Sequence: gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc In [11]: # この時、文字列をリストに格納しています。 print ( type ( seq1 )) In [12]: pred1 = model . predict ( sequences = seq1 , asai = True ) In [13]: # 変数asaiは、隠れ状態がZero-based numberingかどうかを決めるものであり、特に意味はありません。（課題の形式に対応したものがasai=True.） print ( f \"Hidden Indexes: \\n {alignStr(pred1[0])}\" ) Hidden Indexesn [14]: # もちろんパラメタの更新は行われていません。 model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 Baum-Welch algorithm HMMのBaum-Welchアルゴリズムを実装して、モデルを学習させてます。 In [15]: model = HMM () model . load_params ( \"params2.json\" ) model . params () # 文字が \"acgu\"→\"ACGT\"に変わっただけです。 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.4000 0.2500 0.1000 0.3000 C 0.1000 0.2500 0.4000 0.2000 G 0.1000 0.2500 0.4000 0.2000 T 0.4000 0.2500 0.1000 0.3000 cat seq2.txt ``` >Vitis_vinifera_chr14.trna15-AlaAGC (28776087-28776159) Ala (AGC) 73 bp Sc: 68.12 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAGGTACGGGGATCGATA CCCCGCATCTCCA >Vitis_vinifera_chr13.trna5-ArgCCG (2691241-2691313) Arg (CCG) 73 bp Sc: 83.85 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAGGTCGTGGGTTCGAAT CCCACTGCGATCG >Vitis_vinifera_chr3.trna6-GlnCTG (5807449-5807520) Gln (CTG) 72 bp Sc: 71.93 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTAACCCGAGTTCAAATC TCGGTGGGACCT >Vitis_vinifera_chr14.trna19-LeuAAG (25640120-25640040) Leu (AAG) 81 bp Sc: 62.71 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTGTCCGAAAGGGCGTGG GTTCAAATCCCACTCTCCACA >Vitis_vinifera_chr18.trna9-MetCAT (2896034-2896118) Met (CAT) 85 bp Sc: 60.66 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCGAGTAATCCTGAGGTC GAGAGTTCGAGCCTCTCTCACCCCA >Vitis_vinifera_chr3.trna30-ProTGG (7498415-7498344) Pro (TGG) 72 bp Sc: 68.98 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGGTCCCGAGTTCGATTC TCGGAATGACCC >Vitis_vinifera_chr5.trna13-GluTTC (21745120-21745048) Glu (TTC) 73 bp Sc: 36.67 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTGGTCGTGGGTTCGAGC CCTATTGGTGGTT >Vitis_vinifera_chr5.trna3-TyrGTA (7422575-7422666) Tyr (GTA) 92 bp Sc: 33.68 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTGACCCAATAGATATCC TTAGGTCGTTAGTTTGAATCCAACAGGTCTAA >Vitis_vinifera_chr1.trna8-ValCAC (11396083-11396156) Val (CAC) 74 bp Sc: 66.86 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGAGGTCCCTAGTTCGAA CCCAGGCTCAGATA >Vitis_vinifera_chr14.trna2-SerTGA (4021381-4021462) Ser (TGA) 82 bp Sc: 80.82 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTGGGCTTCGCCCGCGCA GGTTCGAACCCTGCTGTCGACG ``` In [16]: seq2 = readMultiSeq ( 'seq2.txt' ) In [17]: for i , seq in enumerate ( seq2 ): print ( f \"No. {i:>02} \\n {alignStr(seq, width=45)}\" ) No.00 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAG GTACGGGGATCGATACCCCGCATCTCCA No.01 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAG GTCGTGGGTTCGAATCCCACTGCGATCG No.02 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTA ACCCGAGTTCAAATCTCGGTGGGACCT No.03 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTG TCCGAAAGGGCGTGGGTTCAAATCCCACTCTCCACA No.04 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCG AGTAATCCTGAGGTCGAGAGTTCGAGCCTCTCTCACCCCA No.05 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGG TCCCGAGTTCGATTCTCGGAATGACCC No.06 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTG GTCGTGGGTTCGAGCCCTATTGGTGGTT No.07 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTG ACCCAATAGATATCCTTAGGTCGTTAGTTTGAATCCAACAGGTCT AA No.08 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGA GGTCCCTAGTTCGAACCCAGGCTCAGATA No.09 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTG GGCTTCGCCCGCGCAGGTTCGAACCCTGCTGTCGACG In [18]: # 学習させる。 model . fit ( sequences = seq2 , epochs = 2000 , verbose = False ) In [19]: import matplotlib.pyplot as plt In [20]: def plotHistory ( model ): \"\"\" 学習の過程をプロットする関数 \"\"\" plt . plot ( model . history ) plt . title ( f \"Mean Log Likelihood Transition (eoochs= {model.epoch} )\" ) plt . xlabel ( \"epochs\" ) plt . ylabel ( \"Mean Log Likelihood\" ) plt . show () In [21]: plotHistory ( model ) In [22]: model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.1024 0.0000 0.8976 0.0000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.2819 0.7181 0.0000 0.0000 z(2) 0.0000 0.5670 0.0000 0.4330 z(3) 0.0521 0.0000 0.3415 0.6064 z(4) 0.5158 0.0000 0.0000 0.4842 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.3436 0.3099 0.1059 0.0055 C 0.2538 0.0592 0.0970 0.4297 G 0.4026 0.4418 0.7971 0.0345 T 0.0000 0.1891 0.0000 0.5304 ※ 隠れ状態ごとにかなり偏った遷移を行なう。 また、 遷移行列の対角成分がそこまで大きい値では無い。 → 特定の構造が、 ある程度の長さのゆとりを持って 繰り返されていると予想される。 In [23]: pred2 = model . predict ( sequences = seq2 , asai = True ) In [24]: for i , pred in enumerate ( pred2 ): print ( f \"No. {i:>02} Hidden Indexes: \\n {alignStr(pred, width=45)}\" ) No.00 Hidden Indexes: 333334122244412241241222224412444124122412222 2411222224412224441241244441 No.01 Hidden Indexes: 334411241241222412241241124412244441224441222 2412412244412244412441122441 No.02 Hidden Indexes: 334441241244412412441222412412244441224441241 244412244412244441241222444 No.03 Hidden Indexes: 341222241244122441244412222244122441222444441 244122222241222244412244412444441241 No.04 Hidden Indexes: 333341241241122441244124112412244412412444441 2241244441222441222244412244444441244441 No.05 Hidden Indexes: 333412441244412412412224444124444122224122222 444412244412444441222412444 No.06 Hidden Indexes: 334441241244412441244122411222244444124444122 2412412244412244441241241244 No.07 Hidden Indexes: 341244441244412441241222412222241241241222441 244412412241244441224124412444122444124122444 12 No.08 Hidden Indexes: 344412241241222441244124112441244412411244122 22444441244412244412244412241 No.09 Hidden Indexes: 344124122444122412441222222412244412224441241 2244412444112412244412244441122441241 補足：上記プログラムにバグがないかの確認 Baum-Welchアルゴリズムが正しく実装できていたか、極端な配列を学習させることで確認します。 In [25]: model = HMM () model . load_params ( \"params3.json\" ) model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 0.7000 0.1000 0.2000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.8000 0.1000 0.1000 z(2) 0.1000 0.8000 0.1000 z(3) 0.1000 0.1000 0.1000 ------------------------------ *emission probability z(1) z(2) z(3) A 0.4000 0.2500 0.1000 C 0.1000 0.2500 0.4000 G 0.1000 0.2500 0.4000 T 0.4000 0.2500 0.1000 In [26]: seq_extreme = readMonoSeq ( 'seq3.txt' ) In [27]: # かなり極端な配列の例で実装してみる。 print ( f \"Input Sequence: \\n {alignStr(seq_extreme[0])}\" ) Input Sequence: TCTTTTTCCTCCTCTCTCCTTTCCCTCTTTTCCCTTCTTCTCTCCCTTTTCCTTCTCTTC TCTCTTTTCTTCCCCTTTTCCTTTTCTCCTCCCTCCCTTTCTTCCCTCCTTCCTCCCCCC CTCCCCTTTCCTTCCTTTCTCCTTCTCCCCATATGGCCATTTACTTCAGCTGATAGACAC CGAGTAACAACAATAAAGCGTTAGGTGGACGAATGCTCTACTCTGACCTCTAGCTTGTGG GTTCGCGGCTTGCCGAACGCTGGCCTCTGCCCGTCGAACCAATAAATGTTTATCCAGGAC ACCCCGTTCTTTGGTGATATCCCTCGCTCGAGTTATAGCATTGAAACCTCCATATCCGGC GATAAGAGCTACGGACCGTATACTGGGCGCCGGTAATTGGTTGCACTCGCCCTCGGTCTT TTTCTTTTTGGTTTAGCAGAGCAAGGCGTGGAAAAGGAGAGAGGGAGAAAAGGGAAAGGG AAAAGAGGAGAAGAAAGAAAAAGGAAGGGGGGAAGAGGAGAGAAGGGAAGGGAAGGGGGA GAAAGAGGGAAAGAGGAGAAAAAAGGAGGGGGAAGAAGGAAGGGGGAAAGGGGGGGAAAG 上の配列は、以下の構造を持っていることがわかります。 index type 1~150 pyrimidine base 151~450 both 451~600 purine base In [28]: model . fit ( sequences = seq_extreme , epochs = 100 , verbose = False ) In [29]: plotHistory ( model ) In [30]: model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 1.0000 0.0000 0.0000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.9933 0.0000 0.0067 z(2) 0.0000 1.0000 0.0000 z(3) 0.0000 0.0033 0.9967 ------------------------------ *emission probability z(1) z(2) z(3) A 0.0000 0.4851 0.2199 C 0.5034 0.0000 0.2627 G 0.0000 0.5149 0.2415 T 0.4966 0.0000 0.2760 In [31]: pred_extreme = model . predict ( sequences = seq_extreme ) In [32]: print ( f \"Hidden Indexes: \\n {alignStr(pred_extreme[0])}\" ) Hidden Indexesうまく傾向をつかんでいることから、学習アルゴリズムに大きな誤りはなさそうです。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-4.html"},{"title":"生物統計論 第1回","text":"講師： 木立尚孝 講義概要 09/27 (Fri) 10:25-12:10 10/04 (Fri) 10:25-12:10 10/11 (Fri) 10:25-12:10 10/18 (Fri) 10:25-12:10 10/25 (Fri) 10:25-12:10 11/08 (Fri) 10:25-12:10 11/15 (Fri) 10:25-11:30(Lecture) / 11:30-12:10: (Test) Section1.1 STATISTICAL ANALYSIS Genomic data has recently become available, so the analyzing methods still its infancy at the century scale. It is very important how much information can be extracted from genomic and other omic data. Data-driven Research Development of measurement, communication, computing technologies. data science, e-science Statistics, computer skill, artificial intelligence, machine learning. Statistical Analysis Subjects and measurements are often conclude the random events , such as noise. Aiming for finding the \"True\" distribution, and inferencing on that distribution. Power of Statistical Methods Amount of information we can extract \"Many and high\" / \"Few or low\" quality Event infinite number of data cannot answer all questions. ex) we couldn't answer \"what is the number of eyes on the next dice.\" Data dependency. Section1.2 PROBABILITY DEFINITIONS Probability: Mathematical Probability: The probability of an event consisting of n out of m possible equally likely occurrences, defined to be n / m Statistical Probability: Each event is random, but if you repeat it a lot, you can see the probability that each event occurs. Subjective Probability: A type of probability derived from an individual's personal judgment or own experience about whether a specific outcome is likely to occur. ※ Mathematical Probability is the most strict and basic. Probability space \\(\\left(\\Omega, E, P\\right)\\) $$\\begin{aligned}&\\Omega: \\text{Set, Samplemspace}\\\\&E: \\text{Events,}\\sigma\\text{-algebra}\\\\&P: \\text{Probability measure}\\end{aligned}$$ Sample Space The sets of elementary events. ex.) The number of eyes on the dice. All possible genomes. All possible gene expression profiles \\(\\omega_i\\in\\Omega\\) is the identifier of possible individual stochastic phenomena. \\(\\sigma\\) -algebra $$ \\begin{aligned} &\\varepsilon= \\left\\{E_1,E_2,\\cdots|E_i\\subseteq\\Omega:\\text{event}:\\sigma\\text{-algebra} \\right\\}\\\\ &\\Rightarrow \\varnothing,\\Omega,\\left(E_i\\setminus E_j\\right),\\left(\\bigcup_{i=1}&#94;{\\infty}E_i\\right),\\left(\\bigcap_{i=1}&#94;{\\infty}E_i\\right)\\in\\varepsilon \\end{aligned} $$ The sets of Events. Each event \\(E_i\\subseteq\\Omega\\) Include Empty set \\(\\varnothing\\) , universal set \\(\\Omega\\) Closure to variable \"Set Operation\". (ex. Union, intersection, complement) example) discrete set Real set Power set Borel set \\(\\mathcal{A}\\) Probability measure $$\\begin{aligned}&\\mathbb{P} : \\mathcal{E} \\rightarrow \\mathbb{R} \\\\& 0 \\leq \\mathbb{P}(E) \\leq 1, E \\in \\mathcal{E} \\\\&\\mathbb{P}(\\Omega)=1, \\mathbb{P}(\\varnothing)=0 \\\\&\\text { For } E_{1}, E_{2}, \\cdots \\in \\mathcal{E}, \\text{ s.t. } E_{i} \\cap E_{j}=\\varnothing, \\forall i \\neq j \\\\&\\mathbb{P}\\left(\\bigcup_{i=1}&#94;{\\infty} E_{i}\\right)=\\sum_{i=1}&#94;{\\infty} \\mathbb{P}\\left(E_{i}\\right)\\end{aligned}$$ Each event is assigned a value that indicates the likelihood or probability of occurrence. Random variable $$\\begin{aligned}X: &\\text{random variable}\\\\\\Leftrightarrow &X : \\Omega \\rightarrow \\mathbb{R} \\\\ &\\text { s.t. } X&#94;{-1}(A) \\in \\mathcal{E}, \\forall A \\in \\mathcal{A} \\\\&X&#94;{-1}(A) :=\\{\\omega \\in \\Omega \\mid X(\\omega) \\in A\\}\\end{aligned}$$ Section1.3 PROBABILITY TERMS AND PROPERTIES Probability distribution function \\(F_x\\) (cumulative distribution) Probability density function \\(f_x\\) $$F_x\\left(x+dx\\right)-F_x\\left(x\\right)=:f_x(x)dx$$ Conditional Probability Joint Probability distribution $$(X,Y): \\Omega\\rightarrow\\mathbb{R}&#94;2; (X,Y)(\\omega) = \\left(X(\\omega),Y(\\omega)\\right)\\\\\\left(X,Y\\right)&#94;{-1}(A) = \\left\\{\\omega\\in\\Omega|\\left(X(\\omega),Y(\\omega)\\right)\\in A\\right\\}$$ Independent random variables Expected Value Variance Covariance: $$\\begin{cases}X,Y: \\text{independent random variables}\\Rightarrow \\mathrm{Cov}(X,Y) = 0\\\\X,Y: \\text{independent random variables}\\not\\Leftarrow \\mathrm{Cov}(X,Y) = 0 \\end{cases}$$ Indicator Function: $$\\mathbb{I}_A(x)=\\begin{cases}1 & x\\in A\\\\0 & x\\notin A\\end{cases},A\\in\\mathcal{A}$$ Marginalization Section1.4 PROBABILITY DISTRIBUTIONS Look Here!! if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html"},{"title":"生物統計論 第0回","text":"Section1.4 PROBABILITY DISTRIBUTIONS In [1]: import numpy as np import collections import matplotlib.pyplot as plt In [2]: N = 100000 Bernoulli Distribution In [3]: def BernoulliVar ( q , N , seed = None ): rng = np . random . RandomState ( seed ) if seed is not None else np . random return np . var ( rng . rand ( N ) < q ) In [4]: qs = np . linspace ( 0 , 1 , 1000 ) In [5]: probs = [ BernoulliVar ( q , N ) for q in qs ] In [6]: plt . title ( \"Bernoulli distribution\" ) plt . plot ( qs , probs , label = \"$Var(X)$\" ) plt . xlabel ( \"q\" ) plt . ylabel ( \"$Var(X)$\" ) plt . legend () plt . show () Binomial Distribution In [7]: def BinomialProb ( n , p , N , seed = None , color = None , ax = None ): if ax == None : fig , ax = plt . subplots () rng = np . random . RandomState ( seed ) if seed is not None else np . random counter = collections . Counter ( rng . binomial ( n , p , N )) count , freqs = zip ( * sorted ( counter . most_common ())) probs = [ freq / N for freq in freqs ] ax . plot ( count , probs , color = color , label = f \"p= {p} and n= {n} \" ) ax . scatter ( count , probs , color = color ) return ax In [8]: ax = BinomialProb ( 20 , 0.5 , N , seed = 0 , color = \"blue\" ) ax = BinomialProb ( 20 , 0.7 , N , seed = 0 , color = \"green\" , ax = ax ) ax = BinomialProb ( 40 , 0.5 , N , seed = 0 , color = \"red\" , ax = ax ) plt . legend () plt . show () Normal Distribution In [9]: from scipy import stats In [10]: def NormalProb ( mu , sigma ): X = np . arange ( mu - 3.5 * sigma , mu + 3.5 * sigma , sigma / 50 ) Y = stats . norm . pdf ( X , mu , sigma ) for i in np . arange ( - 3 , 4 , 1 ): idx = np . argmin ( abs ( X - ( mu + i * sigma ))) plt . plot ([ X [ idx ], X [ idx ]], [ 0 , Y [ idx ]], 'k-' ) plt . scatter ( X [ idx ], Y [ idx ], color = \"black\" ) plt . plot ( X , Y , color = \"black\" ) In [11]: NormalProb ( mu = 0 , sigma = 0.1 ) Multivariate Normal Distribution In [12]: from scipy.stats import multivariate_normal In [13]: x , y = np . mgrid [ - 3 : 3.5 : . 01 , - 3 : 3 : . 01 ] pos = np . dstack (( x , y )) rv = multivariate_normal ([ 0.5 , - 0.2 ], [[ 2.0 , 2.3 ], [ 0.3 , 0.8 ]]) plt . contourf ( x , y , rv . pdf ( pos )) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html"},{"title":"HMMのスケーリング","text":"HMMを実装する際に課題となるのが、forward-algorithm で \\(\\alpha\\) を再帰的に求める際に、 \\(\\alpha\\left(\\mathbf{z}_{n-1}\\right)\\) に \\(p(\\mathbf{z}_n|\\mathbf{z}_{n-1})\\) と \\(p(\\mathbf{x}_n|\\mathbf{z}_n)\\) をかけるため、値が非常に小さくなり、計算機の ダイナミックレンジ を超えてしまうことです。 そこで、ここでは \\(\\alpha\\left(\\mathbf{z}_{n}\\right)\\) と \\(\\beta\\left(\\mathbf{z}_{n}\\right)\\) にスケーリングを施し、それらの値が \\(1\\) のオーダーに止まるようにする手法を説明します。 forward-backward \\(\\alpha,\\beta\\) forward-backward algorithm で用いられていた \\(\\alpha,\\beta\\) は以下のように定義されていました。 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ Scaling factors まず、スケーリングされた \\(\\alpha,\\beta\\) は以下のように表されます。スケーリングによって、 \\(\\alpha\\) は高々 \\(K\\) 個の変数上の確率分布 、 \\(\\beta\\) は2つの条件付き確率の比 になることがわかります。 $$ \\begin{aligned} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.55)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\frac{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)}=\\frac{\\beta\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.61) \\end{aligned} $$ ここで、これらと \\(\\alpha,\\beta\\) を関連付けるためのスケーリング係数 \\(c\\) を導入します。 $$ c_{n}=p\\left(\\mathbf{x}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}\\right)\\qquad (13.56) $$ すると、 $$ \\begin{aligned} p\\left(\\mathbf{x}_1,\\ldots,\\mathbf{x}_n\\right) &= p\\left(\\mathbf{x}_n | \\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\cdots p\\left(\\mathbf{x}_3 | \\mathbf{x}_1,\\mathbf{x}_{2}\\right)p\\left(\\mathbf{x}_2 | \\mathbf{x}_1\\right)p(\\mathbf{x}_1)\\\\ &= c_n\\cdots c_3c_2c_1\\\\ &= \\prod_{m=1}&#94;{n} c_{m} \\end{aligned}\\qquad (13.58) $$ と展開することができるので、 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\left(\\prod_{m=1}&#94;{n} c_{m}\\right) \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) & (13.58)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)\\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) = \\left(\\prod_{m=n+1}&#94;{N} c_{m}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.60) \\end{aligned} $$ と対応関係がわかります。 \\(\\gamma,\\xi\\) 続いて、 \\(\\gamma,\\xi\\) と \\(\\widehat{\\alpha},\\widehat{\\beta}\\) の対応関係を求めます。 \\(\\alpha,\\beta\\) \\(\\alpha,\\beta\\) を用いると、以下のように表されていました。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} &(13.43) \\end{aligned}$$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) 先の対応関係を用いれば、 \\(\\widehat{\\alpha},\\widehat{\\beta}\\) を用いると、 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=\\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.64)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\left(c_{n}\\right)&#94;{-1} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.65) \\end{aligned} $$ と表されることがわかります。 Recursion 最後に、再帰式の対応関係も求めます。 \\(\\alpha,\\beta\\) $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) $$ \\begin{aligned} c_{n} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.58)\\\\ \\widehat{\\alpha}\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{z}_{1}| \\mathbf{x}_{1}\\right)=\\frac{p\\left(\\mathbf{z}_{1}\\right)p\\left(\\mathbf{x}_{1}| \\mathbf{z}_{1}\\right)}{p\\left(\\mathbf{x}_{1}\\right)} = \\frac{\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}}}{p\\left(\\mathbf{x}_{1}\\right)}\\\\ c_{n+1} \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\widehat{\\beta}\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) &(13.62)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)}{\\widehat{\\alpha}\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)}{p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} = 1 & (13.30) \\end{aligned} $$ なお、ここで \\((13.58)\\) でどのようにして \\(c_n\\) を求めるかですが、 $$ \\begin{aligned} \\mathrm{R.H.S}\\ (13.58) &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}}p\\left(\\mathbf{z}_{n-1}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\\\ &=p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) \\end{aligned} $$ となることから、 \\((13.58)\\) の右辺を \\(\\mathbf{z}_n\\) について周辺化すれば、 $$\\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = p\\left(\\mathbf{x}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = c_n$$ となるので、 \\(c_n\\) が求められることがわかります。 おまけ（尤度関数） 尤度関数はスケーリング係数 \\(c\\) を用いるだけで簡単に求められることがわかります。 $$p(\\mathbf{X})=\\prod_{n=1}&#94;{N} c_{n}\\qquad (13.63)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-3.html"},{"title":"HMMの最尤推定の計算過程","text":"ここでは、 HMMの最尤推定 で省略した計算過程について記述します。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) $$ \\begin{aligned} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})&=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10)\\\\ &=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\left[ \\prod_{n=2}&#94;{N}\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}} \\right] \\prod_{m=1}&#94;{N}\\prod_{i=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{i k}&#94;{x_{ni} z_{nk}}\\\\ \\therefore\\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta}) &=\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k\\left[\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk}\\right]\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;Kx_{ni}z_{nk}\\ln\\phi_{ik} \\end{aligned} $$ であるから、これを \\((13.12)\\) に代入して、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=&\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12)\\\\ =& \\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;Kx_{ni}z_{nk}\\ln\\phi_{ik} \\end{aligned} $$ ここで、 \\(\\sum_{\\mathbf{Z}} = \\sum_{\\mathbf{z_1},\\mathbf{z_2},\\ldots,\\mathbf{z_N}}\\) なので、それぞれ 関係の無い部分を周辺化 でき、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\sum_{\\mathbf{z_1}} p\\left(\\mathbf{z_1} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{1k}\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\sum_{\\mathbf{z_{n-1},z_n}}p\\left(\\mathbf{z_{n-1},z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;K\\sum_{\\mathbf{z_n}}p\\left(\\mathbf{z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)x_{ni}z_{nk}\\ln\\phi_{ik}\\\\ \\end{aligned}$$ となります。また、 \\(\\gamma,\\xi\\) の定義 を用いることで $$\\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_1}} \\gamma\\left(\\mathbf{z}_1\\right)z_{1k}\\right)\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\left(\\sum_{\\mathbf{z_{n-1},z_n}}\\xi\\left(\\mathbf{z_{n-1},z_{n}}\\right) z_{n-1,j}z_{nk}\\right)\\ln A_{jk}\\\\ &+\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_n}}\\gamma\\left(\\mathbf{z}_n\\right)x_{ni}z_{nk}\\right)\\ln\\phi_{ik} \\end{aligned} $$ と書き直せます。この時、潜在変数が離散なので、 \\(\\gamma,\\xi\\) はそれぞれ和が \\(1\\) となる \\(K,\\left(K\\times K\\right)\\) 個の非負の数の集合を用いて以下のように記述できます。 $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ したがって、これらを用いて上記の式を書き直すと、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} \\end{aligned}\\qquad (13.17) $$ Maximization step ここでは、上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) 関数を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化する際の ラグランジュの未定乗数法 を書き下します。 \\(\\boldsymbol{\\pi}\\) $$ \\begin{aligned} L\\left(\\boldsymbol{\\pi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) &= \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k} + \\lambda_1\\left(\\sum_{k=1}&#94;K\\pi_k - 1\\right)\\\\ \\frac{\\partial L}{\\partial \\pi_k}&=\\frac{\\gamma\\left(z_{1 k}\\right)}{\\pi_k} + \\lambda_1 = 0\\quad \\therefore \\pi_k = -\\frac{\\gamma\\left(z_{1 k}\\right)}{\\lambda_1}\\\\ \\frac{\\partial L}{\\partial \\lambda_1}&=\\sum_{k=1}&#94;K\\pi_k - 1 = 0\\quad \\therefore\\lambda_1 = -\\sum_{k=1}&#94;K\\gamma\\left(z_{1 k}\\right)\\\\ \\therefore\\pi_k&#94;{\\star} &= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} \\end{aligned} $$ \\(\\boldsymbol{A}\\) $$\\begin{aligned} L\\left(\\boldsymbol{A},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} + \\sum_{j=1}&#94;K\\lambda_{2,j}\\left(\\sum_{k=1}&#94;K A_{jk} - 1\\right)\\\\ \\frac{\\partial L}{\\partial A_{jk}} &= \\sum_{n=2}&#94;{N}\\frac{\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{A_{jk}} + \\lambda_{2,j} = 0\\quad \\therefore A_{jk} = -\\frac{\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\lambda_{2,j}}\\\\ \\frac{\\partial L}{\\partial \\lambda_{2,j}} &= \\sum_{k=1}&#94;K A_{jk} - 1 = 0\\quad \\therefore \\lambda_{2,j} = -\\sum_{k=1}&#94;K\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)\\\\ \\therefore A_{jk}&#94;{\\star}&=\\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\end{aligned}$$ \\(\\boldsymbol{\\phi}\\) $$\\begin{aligned} L\\left(\\boldsymbol{\\phi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} + \\sum_{k=1}&#94;K\\lambda_{3,k}\\left( \\sum_{i=1}&#94;D\\phi_{ik} - 1\\right)\\\\ \\frac{\\partial L}{\\partial\\phi_{ik}} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\phi_{ik}} + \\lambda_{3,k}=0\\quad \\therefore \\phi_{ik} = -\\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\lambda_{3,k}}\\\\ \\frac{\\partial L}{\\partial\\lambda_{3,k}} &= \\sum_{i=1}&#94;D\\phi_{ik} - 1 = 0 \\quad \\therefore \\lambda_{3,k} = -\\sum_{i=1}&#94;D\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni} = -\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)\\\\ \\therefore \\phi_{ik}&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)} \\end{aligned}$$ Expectation step $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14)\\\\ \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35)\\\\ \\end{aligned} $$ forward-algorithm \\((\\alpha)\\) $$\\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha(\\mathbf{z}_{n-1})p(\\mathbf{z} | \\mathbf{z}_{n-1})\\\\ \\end{aligned}$$ backward-algorithm \\((\\beta)\\) $$\\begin{aligned} \\beta\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N}, \\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}, \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+2}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} \\beta(\\mathbf{z}_{n+1})p(\\mathbf{x}_{n+1}|\\mathbf{z}_{n+1})p(\\mathbf{z}_{n+1}|\\mathbf{z}_n)\\qquad (13.38) \\end{aligned}$$ \\(\\gamma,\\xi\\) $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$\\begin{aligned} \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}\\right) \\\\ &=\\frac{p(\\mathbf{X} | \\mathbf{z}_{n-1}, \\mathbf{z}_{n}) p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{Bayes' theorem})\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{x}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43) \\end{aligned}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-2.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-2.html"},{"title":"HMMの最尤推定","text":"※ かなり導出部分を省略しています。導出は適宜 HMMの最尤推定の計算過程 を参照してください。 隠れマルコフモデルは、一般に以下の式で表されます。 $$ p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10) $$ \\(\\mathbf{X} = \\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) : \\(\\mathbf{Z} = \\{\\mathbf{z}_1,\\ldots,\\mathbf{z}_N\\}\\) \\(\\boldsymbol{\\theta}=\\{\\boldsymbol{\\pi}, \\mathbf{A}, \\boldsymbol{\\phi}\\}\\) ※ 一般に放出確率 \\(p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\boldsymbol{\\phi}\\right)\\) は、 二値のベクトル \\(\\mathbf{z}_n\\) の \\(K\\) 個の可能な状態に対応した \\(K\\) 個の要素を持つベクトルからなる任意の分布 $$ p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\phi\\right)=\\prod_{k=1}&#94;{K} p\\left(\\mathbf{x}_{n} | \\phi_{k}\\right)&#94;{z_{n k}}\\qquad (13.9) $$ を考えることも可能ですが、今回は下記の離散多項分布を考えます。 Name Probability Conditional Distribution initial state \\(\\pi_{k} \\equiv p\\left(z_{1 k}=1\\right)\\) \\(p\\left(\\mathbf{z}_{1} \\mid \\boldsymbol{\\pi}\\right)=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\quad (13.8)\\) transition probability \\(A_{j k} \\equiv p\\left(z_{n k}=1\\mid z_{n-1, j}=1\\right)\\) \\(p\\left(\\mathbf{z}_{n} \\mid \\mathbf{z}_{n-1}, \\mathbf{A}\\right)=\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}}\\quad (13.7)\\) emission probability \\(\\phi_{i k}\\equiv p\\left(x_{n i}=1 \\mid z_{n k}=1\\right)\\) \\(p(\\mathbf{x}_n \\mid \\mathbf{z}_n, \\boldsymbol{\\phi})=\\prod_{i=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{i k}&#94;{x_{ni} z_{nk}}\\quad (13.22)\\) 尤度関数 ここで、データ集合 \\(\\mathbf{X}\\) が観測された際に、上記の同時分布を潜在変数 \\(\\mathbf{Z}\\) について周辺化することで、尤度関数は以下のように記述されます。 $$ p(\\mathbf{X} | \\boldsymbol{\\theta})=\\sum_{\\mathbf{Z}} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.11) $$ しかし、この尤度関数は \\(n\\) について分解できない（ \\(\\mathbf{z}_n\\) ）ごとに和を取れないので、 条件付き独立 の性質を活かして 尤度関数の対数の期待値 を最大化する Baum-Welch algorithm (EM algorithm) を用います。 Baum-Welch (EM) パラメータ \\(\\boldsymbol{\\theta}&#94;{\\text {old }}\\) を用いて \\(p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化する。 対数尤度関数の期待値 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を求める。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化するパラメータに更新する。 \\(\\boldsymbol{\\theta}\\rightarrow\\boldsymbol{\\theta}&#94;{\\text {old }}\\) 1に戻る。 $$ Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12) $$ ここで、表記を簡単にするために、 γ 、 ξ を導入します。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14) \\end{aligned} $$ なお、潜在変数が離散なので、以下のように記述し直せます。（ \\(\\pi_{k},A_{j k},\\phi_{j k}\\) と同様。） $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ これらを用いると、 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) が以下のように書き下せます。 （計算過程） $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} \\end{aligned}\\qquad (13.17) $$ Maximization step ※ 実際の計算の順番からは前後しますが、先にM stepを説明します。 上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化するのは（別ブロックに別れているから）簡単で、それぞれ 適当なラグランジュ乗数を導入する ことで、以下のように求まります。 （計算過程） $$ \\begin{aligned} \\pi_{k}&= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} & (13.18)\\\\ A_{j k}&= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} & (13.19)\\\\ \\phi_{i k}&=\\frac{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right) x_{n i}}{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right)} & (13.23) \\end{aligned} $$ Expectation step M step で必要となる \\(\\gamma,\\xi\\) は、 条件付き独立性 を用いることで効率的に計算することができます。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ 条件付き独立性を用いてそれぞれ変形すると、以下の再帰式を導くことができます。 （計算過程） $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ ※ なお、ここで \\(\\alpha\\) の再起式を forward-algorithm 、 \\(\\beta\\) の再起式を backward-algorithm と呼ぶことがあります。 また、これらを用いて \\(\\xi\\) を記述することもでき、以下のように表せます。 （計算過程） $$\\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ 以上でBaum-Welchに必要な計算式が求まりました。 おまけ（尤度関数） 尤度関数は、アルゴリズムの停止条件に用いられるなど、値を求めることが非常に有用です。 求める際は、 $$ \\gamma\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad (13.33) $$ の両辺を \\(\\mathbf{z}_n\\) について周辺化すれば、左辺は $$\\sum_{\\mathbf{z}_{n}} \\gamma\\left(\\mathbf{z}_{n}\\right) = \\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right) = 1$$ となることが明らかなので、以下のように求まります。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{n}} \\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)\\qquad (13.41)$$ また、上記の式は任意の \\(n\\) について成立するので、 \\(n=N\\) の場合を考えれば \\(\\alpha\\) のみを用いて求めることができます。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{N}} \\alpha\\left(\\mathbf{z}_{N}\\right)\\qquad (13.42)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-1.html"},{"title":"Numpyの行列計算チートシート","text":"はじめに 様々なアルゴリズムを実装する際に漸化式は出るけど実装時にうまくいかない。ということは良くあります。また、 Python を使って実装する場合、そのほとんどが行列の取り扱いです。 （柔軟であるが故にエラーを吐かずに動いてしまう…笑） そこで、まずは行列計算のチートシートを作成します。（随時加筆修正していきます。） 目次 基本事項 内積（行列積） 外積 In [1]: import numpy as np 基本事項 In [2]: N = 3 A = np . arange ( N ) B = np . arange ( N ) . reshape ( - 1 , N ) # np.expand_dims(A, axis=0), A[None,:] C = np . arange ( N ) . reshape ( N , - 1 ) # np.expand_dims(A, axis=1), A[:,None] D = np . arange ( N * N ) . reshape ( N , N ) In [3]: print ( f \"A = {A} \" ) print ( f \"B = {B} \" ) print ( f \"C = {C} \" ) print ( f \"D = {D} \" ) A = [0 1 2] B = [[0 1 2]] C = [[0] [1] [2]] D = [[0 1 2] [3 4 5] [6 7 8]] In [4]: print ( f \"A.shape = {A.shape} \" ) print ( f \"B.shape = {B.shape} \" ) print ( f \"C.shape = {C.shape} \" ) print ( f \"D.shape = {D.shape} \" ) A.shape = (3,) B.shape = (1, 3) C.shape = (3, 1) D.shape = (3, 3) In [5]: print ( f \"A.ndim = {A.ndim} \" ) print ( f \"B.ndim = {B.ndim} \" ) print ( f \"C.ndim = {C.ndim} \" ) print ( f \"D.ndim = {D.ndim} \" ) A.ndim = 1 B.ndim = 2 C.ndim = 2 D.ndim = 2 ndim ex. scalar $(0)$ 1 , 2 ,... vector $1$ A matrix $\\geq2$ B , C , D 内積（行列積） vector & scalar / matrix & scalar スカラーが絡むと、各要素とスカラーの積となる。 shape の変化はない。 どちらから掛けてもエラーは起こらない。 In [6]: print ( f \"np.dot(A,2) = {np.dot(A,2)}\" ) # vector & scalar print ( f \"np.dot(B,2) = {np.dot(B,2)}\" ) # matrix & scalar print ( f \"np.dot(C,2) = {np.dot(C,2)}\" ) # matrix & scalar print ( f \"np.dot(D,2) = {np.dot(D,2)}\" ) # matrix & scalar np.dot(A,2) = [0 2 4] np.dot(B,2) = [[0 2 4]] np.dot(C,2) = [[0] [2] [4]] np.dot(D,2) = [[ 0 2 4] [ 6 8 10] [12 14 16]] vector & vector 内積となる。 結果はスカラーとなる。 shape が異なると、エラーが起きる。 In [7]: print ( f \"np.dot(A,A) = {np.dot(A,A)}\" ) # vector & vector np.dot(A,A) = 5 In [8]: np . dot ( A , np . arange ( N - 1 )) # shape=(3,) & shape=(2,) ValueError : shapes (3,) and (2,) not aligned: 3 (dim 0) != 2 (dim 0) vector & matrix 行列積となる。 ベクトルは、位置によって変換のされ方が異なる。 左がベクトルの場合： np.dot((x,) (y,z)) = np.dot((1,x) (y,z)) 右がベクトルの場合： np.dot((y,z) (x,)) = np.dot((y,z) (x,1)) 行列積であるので、結果の shape は np.dot((x,y) (y,z)) = (x,z) となる。 上で y が異なるとエラーが生じる。 In [9]: print ( np . dot ( A , B )) # np.dot((3,)(1,3)) print ( np . dot ( A , C )) # np.dot((3,)(3,1)) print ( np . dot ( B , A )) # np.dot((1,3)(3,)) print ( np . dot ( C , A )) # np.dot((3,1)(3,)) ValueError : shapes (3,) and (1,3) not aligned: 3 (dim 0) != 3 (dim 0) [5] [5] ValueError : shapes (3,1) and (3,) not aligned: 1 (dim 1) != 3 (dim 0) matrix & matrix c = np.dot(a,b) a.shape=(a1,a2,...,aN,X) b.shape=(b1,b2,...,X,bM) c.shape=(a1,a2,...,aN,b1,b2,...,bM) c[i1,i2,...,iN,j1,j2,...,jM] == a[i1,i2,...,iM,:].dot(b[j1,j2,...,jM-1,:,jM]) In [10]: import itertools def checkNPdot ( shape1 , shape2 ): \"\"\" 計算可能なshapeの関係を列挙する。 \"\"\" a = np . arange ( np . prod ( shape1 )) b = np . arange ( np . prod ( shape2 )) for comb1 in itertools . permutations ( shape1 , len ( shape1 )): for comb2 in itertools . permutations ( shape2 , len ( shape2 )): try : print ( f \" {comb1} .dot( {comb2} ) = {(a.reshape(comb1).dot(b.reshape(comb2))).shape}\" ) except : pass 以下で具体的に見ていく！ np.dot(2D, 3D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,X,k) c.shape=(i,j,k) c[i,j,k] == a[i,:].dot(b[j,:,k]) In [11]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) c = np . dot ( a , b ) In [12]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3) b.shape = (2, 3, 4) np.dot(a,b).shape = (2, 2, 4) In [13]: I , J , K = c . shape In [14]: np . all ([ c [ i , j , k ] == a [ i ,:] . dot ( b [ j ,:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[14]: True np.dot(3D,2D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(X,k) c.shape=(i,j,k) c[i,j,k] == a[i,j,:].dot(b[:,k]) In [15]: a = np . arange ( 24 ) . reshape ( 4 , 2 , 3 ) b = np . arange ( 6 ) . reshape ( 3 , 2 ) c = np . dot ( a , b ) In [16]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (4, 2, 3) b.shape = (3, 2) np.dot(a,b).shape = (4, 2, 2) In [17]: I , J , K = c . shape In [18]: np . all ([ c [ i , j , k ] == a [ i , j ,:] . dot ( b [:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[18]: True np.dot(3D,3D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) In [19]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 60 ) . reshape ( 3 , 4 , 5 ) c = np . dot ( a , b ) In [20]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4) b.shape = (3, 4, 5) np.dot(a,b).shape = (2, 3, 3, 5) In [21]: I , J , K , L = c . shape In [22]: np . all ([ c [ i , j , k , l ] == a [ i , j ,:] . dot ( b [ k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[22]: True np.dot(2D,4D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,:].dot(b[j,k,:,l]) In [23]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 120 ) . reshape ( 2 , 4 , 3 , 5 ) c = np . dot ( a , b ) In [24]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) # c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) a.shape = (2, 3) b.shape = (2, 4, 3, 5) np.dot(a,b).shape = (2, 2, 4, 5) In [25]: I , J , K , L = c . shape In [26]: np . all ([ c [ i , j , k , l ] == a [ i ,:] . dot ( b [ j , k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[26]: True np.dot(3D,4D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,l,X,m) c.shape=(i,j,k,l,m) c[i,j,k,l,m] == a[i,j,:].dot(b[k,l,:,m]) In [27]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 360 ) . reshape ( 3 , 5 , 4 , 6 ) c = np . dot ( a , b ) In [28]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4) b.shape = (3, 5, 4, 6) np.dot(a,b).shape = (2, 3, 3, 5, 6) In [29]: I , J , K , L , M = c . shape In [30]: np . all ([ c [ i , j , k , l , m ] == a [ i , j ,:] . dot ( b [ k , l ,:, m ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M )]) Out[30]: True np.dot(4D,4D) c = np.dot(a,b) a.shape=(i,j,k,X) b.shape=(l,m,X,n) c.shape=(i,j,k,l,m,n) c[i,j,k,l,m,n] == a[i,j,k,:].dot(b[l,m,:,n]) In [31]: a = np . arange ( 120 ) . reshape ( 2 , 3 , 4 , 5 ) b = np . arange ( 360 ) . reshape ( 3 , 4 , 5 , 6 ) c = np . dot ( a , b ) In [32]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4, 5) b.shape = (3, 4, 5, 6) np.dot(a,b).shape = (2, 3, 4, 3, 4, 6) In [33]: I , J , K , L , M , N = c . shape In [34]: np . all ([ c [ i , j , k , l , m , n ] == a [ i , j , k ,:] . dot ( b [ l , m ,:, n ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M ) for n in range ( N )]) Out[34]: True 外積 c = np.outer(a,b) c[i][j] = a.reshape(-1,)[i]*b.reshape(-1,)[j] In [35]: c = np . outer ( a , b ) In [36]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) a.shape = (a1,a2,...,aN) b.shape = (b1,b2,...,bM) In [37]: Na = np . prod ( a . shape ) Nb = np . prod ( b . shape ) In [38]: print ( f \"Na = {Na} \" ) print ( f \"Nb = {Nb} \" ) Na = a1*a2*・・・*aN Nb = b1*b2*・・・*bM In [39]: print ( c . shape ) (Na, Nb) In [40]: np . all ([ c [ i ][ j ] == a . reshape ( - 1 ,)[ i ] * b . reshape ( - 1 ,)[ j ] for i in range ( Na ) for j in range ( Nb )]) Out[40]: True In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-0.html"},{"title":"分子生命科学Ⅲ 第1回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 講義概要 この授業最大の目的は、 「将来僕らが脳を対象とすることになった時に敷居を低くする」 こと。 # タイトル 内容 日付 1 神経系の構造と機能 中枢神経系の構造・機能 末梢神経系の構造・機能 9/26,10/3 2 感覚神経系 感覚系の構成 体性感覚系 視覚系（末梢視覚系・平衡感覚系） 聴覚と平衡感覚（聴覚系・平衡感覚系） 化学感覚系（嗅覚系・味覚系） 10/10,17,24,31 3 運動系 脊髄による運動制御 脳による運動制御 11/14,21 4 脳と行動の化学的制御 11/28 5 摂食行動 12/12 6 脳のリズムと睡眠 脳波 睡眠 概日リズム 12/19 7 精神疾患 統合失調症 感情障害 不安障害 12/26 8 神経変性疾患 アルツハイマー病 パーキンソン病 ALS 1/9 神経系の構造と機能（１） 神経系の機能的構成 神経系は、 感覚系 、 統合系 、 運動系 の３つに分けることができる。 感覚系は、感覚器で何かを感じると、 陽イオン が神経細胞の末端に流れ込み、 活動電位 が上がり、電気的なシグナルとして 中枢神経系(CNS)特に、大脳皮質の感覚野 にこの入力を伝える。 運動系は、逆向きで、脳の運動野からのシグナルが 末梢神経系 に伝わる。 神経系の構成成分 ニューロン(神経細胞,neuron) グリア細胞(glial cells) 血管(blood vessels) ニューロン(neuron) 極性のある細胞で、 細胞体(cell body or soma) 、 樹状突起(dendrites) 、 軸索(axon) からなり、（ほとんどの場合） 活動電位(action potential) を発生する。 膝蓋腱反射(knee-jerk reflex) ニューロンがどのように神経回路に含まれているか、を示す良い例。 医師が膝蓋骨の下の腱を軽く叩くと、大腿四頭筋が伸ばされ、その信号が脊髄まで伝わる。この信号が脊髄で 運動ニューロン に直結しており、運動ニューロンが発火して少し離れた部分の筋肉を収縮させる。その反動で足が上がる。 グリア細胞(glia cells) グリア細胞はニューロン（ヒトでは \\(1\\) - \\(2\\times10&#94;{11}\\) 個）の \\(3\\) - \\(10\\) 倍（マウスだと同数程度）存在し、脳の体積の約半分を占める。 長い軸索と興奮性膜を特徴とするニューロンに対して、グリア細胞の突起は細胞体の周辺に留まり、活動電位を発生しない。 ニューロンの生存や発達、機能発言のための液性環境維持と代謝的支援、神経伝達の調節等を行なっている。 と、ニューロンの補助的な役割だと今までは考えられていたが、最近ではもっと積極的な意味があるのでは無いかと研究されている。 中枢神経系のグリア細胞が下の4種からなる。 アストロサイト(astrocyte)（アストログリア、星状膠細胞） オリゴデンドロサイト(oligodendrocyte)（オリゴデンドログリア、稀突起膠細胞） 上衣細胞(ependymal cell) ミクログリア(microglia)（小膠細胞） アストロサイト(astrocyte)の機能 血液脳関門 を形成してがんが脳に転移しないように防御したりしている。 神経伝達物質の最取り込み（神経伝達物質が出てすぐに取り込まないと、麻薬や覚せい剤のような影響が出てしまう。）。 オリゴデンドロサイト(oligodendrocyte) 中枢神経系 において、 髄鞘（ミエリン・myelin） を形成する。（ 末梢 では シュワン細胞 が髄鞘を形成する。） 上衣細胞(ependymal cells) ミクログリア(microglia) 上衣細胞は脳室と脊髄中心管を覆う一層の上皮性細胞で、脳を脳脊髄液から遮断する（脳脊髄液脳関門(cerebro-spinal fluid brain barrier)） ミクログリアは損傷に際して活性化する脳内の免疫性細胞で貪食能を持つ。アストログリア、オリゴデンドロサイト、上衣細胞が 外胚葉 由来なのに対し、ミクログリアは 中胚葉 由来である。 脳の構造 哺乳動物の脳は、ほぼ共通の構造を持っている。ヒトの特徴は、 連合野 が広いということである。 解剖学用語 解剖学用語 解剖学的切断面 神経系の構成 中枢神経系(CNS: central nervous system) 脳(brain) 大脳(cerebrum) 小脳(cerebellum) 脳幹(brain stem) 脊髄(spinal cord) 末梢神経系(PNS: peripheral nervous system) 体性神経系(somatic nervous system) 脳神経(cranial nerve) 脊髄神経(spinal nerve) 自律神経系(autonomic nervous system) 小脳(cerebellum) 脳幹（延髄・橋・中脳・間脳）の背後に位置する。 大脳や脊髄と広範な連絡を持つ運動制御中枢 言語や思考などの高次脳機能に関与 小脳の 同 側の身体の運動に関与 脳幹(brain stem) 間脳→中脳→橋→延髄からなり、上方で間脳に、下方で脊髄に連なる（狭義では間脳を含めない）。 大脳から脊髄・小脳への情報、逆に脊髄・小脳から大脳への情報を中継 呼吸、意識、体温調節等の生命維持機能を制御 （大脳・小脳の損傷では生存できるが、脳幹の損傷は通常早急な死に至る） 錐体交叉 脳の運動ニューロンの軸索が延髄の後ろで一旦交叉（ 錐体交叉 ）して反対側にいっているから、反対側の機能がうまく制限できなくなる。 一方で 小脳 は同側なので、そのようなことは起こらない。 脊髄(spinal cord) 脊髄は脊柱管にあり、延髄に続いて錐体交叉下端より始まり、脊髄円錐にて終わる。 皮膚・関節・筋肉から脳への情報、逆に脳からの情報を伝える主経路 末梢神経の脊髄神経で身体と通ずる。 脊髄に入る情報を運ぶ軸索は 後根(dorsal root) に含まれ、脊髄から出ていく情報を運ぶ軸索は 前根(ventral root) に含まれる。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html"}]};