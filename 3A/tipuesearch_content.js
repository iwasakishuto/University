var tipuesearch = {"pages":[{"title":"RNA-seqデータ解析（バッチスクリプト版）","text":"KLBhkJA94yrxs0pVfMlyZQ==;2x1FsfiWxhIW0JMhI96/o++K/ZFNXKpEUsfGz5Mp0ci+mIGWjb4CQ/Ssc2K2uXgL6gkwsdUF/a6N9lr/qGPnaIbsA43ityNVkYE0UnqfJVVn5ENOejaU2h1MxNrkapHlGY7T0p+XAFyzXQXP/7+QmLv8Ox0jAd21tD2IqlAesWxKt9HFCSdkUo9LmN1iALMW6jCySeU1E3zsARt5Sh+jY61z2zxux1wfbBzoOkqBB++9O1sNGPRsHjZ4OayewuSXkdP9HtnrU/6d9W5p3qPmAp0lYE+tZv9PD/zPiUrtgJOflh922u0j9tp8+BYEsH75wzGgCjsloVFAz++rptagtRDhfcQ+bn85Z7HQmb1VOOpbzkpMQh82On3Fxm7/iQgqJGXEG7WnAm8DLAPzRsT6kjUn1sfWFPCJQnRXRsg6ebeufaMYimlUUCzSyJYKMqitdiX3hlWcbNRQyreIb05ai2mRJzWwIiHYtINnetB9UnJlLDwk4QYMWDFRj3073N8y+etdlXYt3tfSdZz/Mx6Id2pYVUUN+9x+LobNsknmbhdeQLbml0b5qNsbNZaA6J44MVlnmN/wtuLEJHd/bNNoIb7vZ6E1mk9edkNTBAABgCgGLenCe46UB+2C3ozXGLMA1Hnap6sHklao6TRo2iTxKNF6Wg7W/9ZxsQsdOpK11/MoflHIqF4fEFidW86yYa0TTrCy8OtjEtyII+aTOEx7TBuVjAZVpwc/CTJJj+RCVLhg1LaIkqWubKoin+/7GPn8pnlkp4td7ngaCwfJfGn/xehVhUnsk0yIxxL+dzVcl/u9W2MHwELvEnIJIQ00QFBtWATXM5QQH7SewR0zx2ltyUsrlRJNY3yzFhka58xIomUVHn23Fw1a2Jh5aPRyfpu27/Z86ZEKWLdaZ2fNN7XYz0EVdhG3HKzD9LVC00gdgEDagcyp4vSVaxWlmk5xdhgvh2IBQrxDmFGkFom7TJnAyi1W8MPH+LYhE6VcHXMF7LMvv/2G6zuYu7GC4ERaPZBuDNxkYA2CYkSEaj6d0XjR6ATiQ0L0DpL/RWURJadKz8z1x3JRlhNie3lsEZywaceo1vBBidPvmArUBaIydOtKiRaZybZrcOmfY7fiamBAl1vEzUZyp5MU9f60GHQ54Ds+BdG3jbuBEPZIK6u8itA8TUASND+GLoWBcpPTOi9cQsTNeWxhXkEg7cpvlZWs454/0JK09aem8aH2YTYw0rukTbRpC7D1LfvXn654mW5IakqdPE2DAxjbeNQpBOGGcRIggVpv6E+845l0jRuaUs/6UVUCYJtd4j3J43rhQAXL9ohjBpcihtXcNADyrgvsblFjap9Y0E/HRfe9Lsjb3lEopux82GQSi+ol63xEFfcnEiw2w1tXabNBwyHGMmElle+p99iUFey8MqjzCxOTkqex52Uw1f9ofzvi1rL4GQVaQfWutJQaL2iYgawmS7YKjwrFSq8Dvm43dl6U/tmb9tK3V8R4DVwXbh/gkiSYEpxhyCmRotCPkDY9f1sjpbHuVeXDMRRUszhJ5jbkghXAtrudr5pEdFo36vMYhqnR5Sg48u+Cxc1lmRsn1ybneU6fV0bP0PdvDCGi59gklbxkFStixw==;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験-12.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験-12.html"},{"title":"RNA-seqデータ解析（対話モード版）","text":"Jp67psQ4yEcgYU6SoLtKLw==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験-11.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験-11.html"},{"title":"ゲノム解析ツールの環境構築","text":"tBLoWm8SedWX4WKp0/O6DA==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験-10.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験-10.html"},{"title":"生物統計論 第3回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section3.1 Multiple Test Correction \"The more inferences are made, the more likely erroneous inferences are to occur.\" (ex. Even if the type1 error rate is 1% for each data, 10 out of 1000 sample will be rejected on average.) Terminology FWER(Family-wise error rate) : the probability of making at least one type I error (FP) in the family. FDR(False discovery rate) : the expected type I error (FP) rate in rejected data. FDR(False discovery rate) Null hypotheses: $H_1,\\ldots,H_{g_j}$ Alternative hypotheses: $H_{g_j+1},\\ldots,H_g$ Procedure to reject hypotheses : $d_{\\alpha}: \\left(P_1,P_2,\\ldots,P_g\\right)\\rightarrow\\left\\{H_{i_1},\\ldots,H_{i_K}\\right\\}$ Expected ratio of FP in rejected hypotheses: $\\mathrm{FP}=\\sum_{k=1}&#94;K\\mathbb{I}(1\\leq i_k\\leq g_j),\\quad \\mathrm{TP}=K-\\mathrm{FP}$ $\\mathcal{Q} = \\begin{cases}0 & \\text{if }K=(\\mathrm{FP+TP})=0\\\\\\frac{\\mathrm{FP}}{\\mathrm{FP}+\\mathrm{TP}} & \\text{if }K>0\\end{cases}$ $$\\mathrm{FDR}(d_{\\alpha})=\\mathbb{E}\\left(\\mathcal{Q}|H_1,\\ldots,H_g\\right)$$ Methods to counteract this problem Bonferroni Correction Set $\\alpha\\left(=s_{\\alpha}\\leq S_h|H_0\\right)\\leftarrow 1/g\\cdot\\alpha_{\\mathrm{FWER}}$ ($g$: sample size) Therefore, we have: $$\\mathbb{P}\\left(\\{s_{\\alpha}\\leq S_1\\}\\cup\\cdots\\cup\\{s_{\\alpha}\\leq S_g\\}|H_0\\right)\\leq\\sum_{h=1}&#94;g\\mathbb{P}\\left(s_{\\alpha}\\leq S_h|H_0\\right) = g\\cdot\\left(\\frac{1}{g}\\alpha_{\\mathrm{FWER}}\\right) = \\alpha_{\\mathrm{FWER}}$$ Benjamini-Hochberg Procedure (B-H Procedure) If we assume data are distributed independently, we have: $$\\left(P_1,\\ldots,P_g\\right)\\sim\\mathrm{Unif}\\left(0,1\\right)&#94;{\\times g_j}\\times\\mathbb{P}\\left(P|H_{\\text{alternative}}\\right)&#94;{\\times\\left(g-g_j\\right)}$$ We sort the p-value as $p_1\\leq\\cdots\\leq p_g$ Then, $$ \\begin{aligned} d_{\\alpha_{\\mathrm{FDR}}}&#94;{\\mathrm{B-H}}(p_1,\\cdots,p_g) &:=\\mathrm{Reject}\\left\\{H_i|1\\leq i\\max\\left\\{n|p_n\\leq\\left(\\frac{n}{g}\\alpha_{\\mathrm{FDR}}\\right)\\right\\}\\right\\}\\\\ &\\Rightarrow \\mathrm{FDR}\\left(d_{\\alpha_{\\mathrm{FDR}}&#94;{\\mathrm{B-H}}}\\right)\\leq\\alpha_{\\mathrm{FDR}} \\end{aligned} $$ Example. $H_i$ $G_1$ $G_2$ $G_3$ $G_4$ $G_5$ $G_6$ $G_7$ $G_8$ $G_9$ $G_{10}$ $p_i$ $0.1$ $0.4$ $0.8$ $0.035$ $0.9$ $0.04$ $0.001$ $0.002$ $0.6$ $0.7$ In [2]: alpha_FDR = 0.1 g = 10 In [3]: idx = np . array ([ i + 1 for i in range ( g )]) p_value = data = np . array ([ 0.1 , 0.4 , 0.8 , 0.035 , 0.9 , 0.04 , 0.001 , 0.002 , 0.6 , 0.7 ]) q = np . array ([( i + 1 ) / g * alpha_FDR for i in range ( g )]) In [4]: p_value_rank = np . argsort ( p_value ) In [5]: for i in reversed ( range ( g )): if q [ i ] >= p_value [ p_value_rank [ i ]]: break In [6]: print ( f \"Reject: {[f'G {idx} ' for idx in idx[p_value_rank[:i+1]]]}\" ) Reject: ['G7', 'G8', 'G4', 'G6'] Quantile-Quantile plot In [7]: x = - np . log10 ( np . array ([( i + 1 ) / g for i in range ( g )])) y = - np . log10 ( p_value [ p_value_rank ]) In [8]: plt . plot ( x , y , color = \"red\" , label = \"observed\" ) plt . plot (( 0 , min ( x [ 0 ], y [ 0 ])),( 0 , min ( x [ 0 ], y [ 0 ])), color = \"black\" , label = \"$y=x$\" ) plt . title ( \"Quantile-Quantile plot\" ) plt . xlabel ( \"$-\\log_ {10} $ expected P-value\" ) plt . ylabel ( \"$-\\log_ {10} $ observed P-value\" ) plt . legend () plt . grid () plt . show () Section3.2 Probabilistic Models Hypothesis Testing Probabilistic Modeling Models data generation processes in uninteresting scenarios $H_0$ Models data generation processes under interesting biological scenario $H_1$ (possibly as well as $H_0$) Show inconsistency with $H_0$ Check fit of the model to the data Problems of Hypothesis Testing Approaches Difficult to model satisfactory, uninteresting scenarios Does not model interesting biological scenarios A rejected hypothesis does not necessarily tell anything interesting Still useful for many small parts of a full analysis probabilistic Modeling Strong regularity from the probability condition Can include various biological knowledge Adjustable to the quality, amount, randomness of the data Conditional probability makes it easy to integrate multiple models Once a satisfactory model is obtained, we can extract various information from expectation values Powerful general tools are available Maximal Likelihood EM algorithms Bayesian inference MCMC sampling etc... Section3.3 Likelihood Q. How to adjust parameters?? A. Maximize the Likelihood likelihood observed data: $\\mathbf{D} = \\left\\{x&#94;{(h)}|h=1,\\cdots,n\\right\\}$ parametrized model distribution: $\\mathbb{P}(x|\\theta)$ Likelihood: $L(\\theta|D) = \\mathbb{P}(D|\\theta) = \\prod_{h=1}&#94;n\\mathbb{P}\\left(x&#94;{(h)}|\\theta\\right)$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html"},{"title":"レポート課題(10/10出題)","text":"kDR3Isabbb6YS9JLz1pdNg==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html"},{"title":"連続最適化(1)制約なし最適化","text":"講師： 佐藤一誠 参考書： 最適化手法 参考書： 機械学習のための連続最適化 In [1]: import numpy as np import matplotlib.pyplot as plt 講義概要 凸最適化問題 最急降下法 ニュートン法 準ニュートン法 凸最適化問題 凸関数 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、以下が成り立つような関数を 凸関数(convex function) と呼ぶ。 $$f\\left(\\left(1-\\theta\\right)x + \\theta x&#94;{\\prime}\\right)\\leq\\left(1-\\theta\\right)f(x) + \\theta f\\left(x&#94;{\\prime}\\right)$$ $f$ が一階微分可能の時、$f$ が凸関数になるための必要十分条件は、感覚的には接戦が常に関数の下に来ることで、 $$\\forall x,x&#94;{\\prime}\\in\\mathcal{X},\\quad f\\left(x&#94;{\\prime}\\right)\\geq f(x) + \\nabla f(x)&#94;T\\left(x&#94;{\\prime}-x\\right)$$ $f$ が二階微分可能の時、$f$ が凸関数になるための必要十分条件は、 ヘッセ行列(Hessian matrix) $\\nabla&#94;2f(x)$ が 半正定値(positive semi-definite) ↔︎$\\nabla&#94;2f(x)$ の 固有値(eigenvalue) が全て非負 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、$(1-\\theta)x+\\theta x&#94;{\\prime}$ も $\\mathcal{X}$ に属するとき、$\\mathcal{X}$ を 凸集合(convex set) と呼ぶ。$x$ と $x&#94;{\\prime}$ を結ぶ線分上の全ての点が $\\mathcal{X}$ に属するということ。 最適化 最適化問題(optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 最適化アルゴリズム(optimization algorithm)： 収束する点列の生成アルゴリズム 最適性条件：最適化問題の最適解であるための必要条件 制約なし最適化問題(unconstrained optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 $f$ を 目的関数(objective function) と呼ぶ。 目的関数は 微分可能(differentiable) と仮定する。 最適性条件：$\\mathbf{x}&#94;{\\star}$ が最適解のとき $$\\nabla f(\\mathbf{x}&#94;{\\star}) = 0$$ 凸最適化問題(convex optimization problem)： 関数 $f$ が凸で集合 $\\mathcal{X}$ も凸 最適解（の集合）が 一意に定まる。 最適解の必要十分条件： 勾配(gradient) がゼロ（凸でない場合は 必要条件 ） 最急降下法 最急降下法(steepest descent method) ※ 勾配法(gradient method)とも。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\quad (\\varepsilon_k>0\\text{ : step size})$$ 凸最適化問題の場合、 大域的最適解(global optimization solution) が求まる 非凸最適化問題の場合、 局所最適解(local optimization solution) しか求められず、様々な初期値から何回か学習して最適解を採用する、ことしかできない。 ステップ幅(step size)の選択 焼きなまし(annealing) ：「最初は大きく、徐々に小さく」。しかし、適切に実装することは容易でない。 正規化(normalization) ：$\\varepsilon_k = \\varepsilon_k&#94;{\\prime}/\\|\\nabla f(\\mathbf{x}_k)\\|$ 勾配が大きいとき安定するが、勾配が小さいときは不安定 厳密直線探索(exact line search) 目的関数の値を最小にするステップ幅を求める。 $$\\underset{\\varepsilon_k>0}{\\min}f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)$$ $f$ が 単峰関数(unimodal function) の場合は、 二分探索法(binary search) や 黄金分割探索(golden section search) などの探索によって最小値を探す。 一般に、一次元の非線形最小化問題を解く必要があるため、最適なステップ幅の探索に時間がかかる。 厳密直線探索を用いた最急降下法は、 一次収束(linear convergence) する。 $$\\text{Q-linear convergence: }\\|\\mathbf{x}_{k+1}-\\mathbf{x}&#94;{\\star}\\| c\\leq \\|\\mathbf{x}_k-\\mathbf{x}&#94;{\\star}\\|&#94;q,\\quad 0 In [2]: ITERATION = 10 N = 100 fsize = 4 In [3]: a = 10 ; b = 1 A = 2 * np . diag ([ a , b ]) func = lambda x , y : a * x ** 2 + b * y ** 2 In [4]: x1min =- 5 ; x1max = 5 ; x2min =- 5 ; x2max = 5 initialX = np . array ([ x1min + 1 , x2max - 2 ]) x1 = np . linspace ( x1min , x1max , N ) x2 = np . linspace ( x2min , x2max , N ) X1 , X2 = np . meshgrid ( x1 , x2 ) Z = func ( X1 , X2 ) In [5]: def find_step_size ( method , f , X , A , ** kwargs ): df = A . dot ( X ) if method == \"fixed\" : epsilon = 1e-1 elif method == \"exact line search\" : epsilon = np . sum ( np . square ( df )) / np . sum ( np . square ( df ) * A . diagonal ()) elif method == \"backtracking line search\" : epsilon = 1 alpha = kwargs [ \"alpha\" ]; beta = kwargs [ \"beta\" ] while True : newX = X - epsilon * df if f ( newX [ 0 ], newX [ 1 ]) - f ( X [ 0 ], X [ 1 ]) <= - alpha * epsilon * np . sum ( np . square ( df )): break epsilon = beta * epsilon return epsilon In [6]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [7]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 例：$f(x) = 1/2\\mathbf{x}&#94;T\\mathbf{Ax}$ $$ \\begin{aligned} \\frac{\\partial f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)}{\\partial\\varepsilon_k} &= \\frac{\\partial}{\\partial\\varepsilon_k}\\frac{1}{2}\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)&#94;T\\mathbf{A}\\left(\\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\\\ &= \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right) - \\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{Ax}_k\\\\ &=0\\\\ \\therefore \\varepsilon_k&#94;{\\star} &= \\frac{\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2}{\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right)}\\qquad (\\nabla f\\left(\\mathbf{x}_k\\right) = \\mathbf{Ax}) \\end{aligned} $$ バックトラック直線探索(backtracking line search) $\\varepsilon_k=1$ に初期化 アルミホ基準(Armijo rule) ： $$f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right) - f\\left(\\mathbf{x}_k\\right)\\right) \\leq\\alpha\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2$$ が成り立つまで $\\varepsilon_k$ を $\\varepsilon_k\\leftarrow\\beta\\varepsilon_k$ と減衰させる。（$0<\\alpha, \\beta<1$） 目的関数の減少量の線形予測値の $\\alpha$ 倍の減少を保証している。 $f$ の真の減少量： $$g\\left(\\varepsilon_k\\right) = f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right) - f\\left(\\mathbf{x}_k\\right)$$ $f$ の減少量の 線形予測値 $$\\begin{aligned}\\varepsilon_kg&#94;{\\prime}(0) &=\\varepsilon_k\\cdot\\left( -\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k-0\\cdot\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\right)\\\\&=-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k\\right)\\\\&=-\\varepsilon_k\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2 \\end{aligned}$$ In [8]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [9]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 微分不可能な場合 目的関数 $f$ が 微分不可能(non-differentiable) の場合は、微分の概念を一般化した 劣微分 を用いる。 凸関数 $f$ の $\\mathbf{x}&#94;{\\prime}$ での 劣勾配(sub-gradient) とは、全ての $\\mathbf{x}\\in\\mathcal{X}$ に対して次式を満たす $\\mathbf{\\xi}$ $$f(\\mathbf{x})\\geq f\\left(\\mathbf{x}&#94;{\\prime}\\right) + \\mathbf{\\xi}&#94;T\\left(\\mathbf{x}-\\mathbf{x}&#94;{\\prime}\\right)$$ $f$ が微分可能な時、$\\mathbf{\\xi} = \\nabla f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ 上式を満たす $\\mathbf{\\xi}$ 全体を $\\partial f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ で表し、 劣微分(sub-differential) と呼ぶ。 微分不可能な点では、劣微分のどれかの値を用いる。 ニュートン法 一般にニュートン法という名称は、方程式の解を求めるアルゴリズムを指すが、以下を表すことが多い。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ 勾配法では一階微分しか用いていないので、二階微分も用いることで反復回数を減らすことが狙い。実際 $k$ が十分大きい時、最適解 $\\mathbf{x}&#94;{\\star}$ の近傍で 二次収束(quadratic convergence) するが、逆行列を求める計算コストが大きい。 二次の テーラー展開(Taylor expansion) を用いて $f$ を現在の解 $\\mathbf{x}_k$ の周りで近似 $\\left(f(\\mathbf{x})\\approx f_k(\\mathbf{x})\\right)$ し、その二次近似を最小にする $\\mathbf{x}_k$ に更新する。 $$f_k(\\mathbf{x}) = f(\\mathbf{x}_k) + \\nabla f(\\mathbf{x}_k)&#94;T\\left(\\mathbf{x}-\\mathbf{x}_k\\right) + \\frac{1}{2}\\left(\\mathbf{x}-\\mathbf{x}_k\\right)&#94;T\\nabla&#94;2f(\\mathbf{x}_k)(\\mathbf{x}-\\mathbf{x}_k)$$ $f_k$ の勾配をゼロと置いた方程式 $$\\nabla f_k(\\mathbf{x}) = \\frac{\\partial f_k(\\mathbf{x})}{\\partial \\mathbf{x}}= \\nabla f(\\mathbf{x}_k) + \\nabla&#94;2f(\\mathbf{x}_k)\\left(\\mathbf{x}-\\mathbf{x}_k\\right) = \\mathbf{0}$$ を解けば、$f_k$ の最小解が以下のように求まる $$\\mathbf{x}&#94;{\\star} = \\mathbf{x}_k - \\left(\\nabla&#94;2 f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ なお、ヘッセ行列が逆行列を持たない時は、 単位行列の定数倍を加えて対処する（正則化, regularization） らしい。 $$\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right) + \\mu\\mathbf{I}\\right)&#94;{-1},\\quad\\mu>0$$ 準ニュートン法 ニュートン法の近似。ニュートン法ではヘッセ行列の逆行列を求めるのに計算コストがかかるので、勾配ベクトル $\\nabla f(\\mathbf{x})$ を用いて近似計算する。 BFGSアルゴリズムを用いたヘッセ行列の更新式が有名 なお、 レポート課題 で詳しく記述しているが、BFGSアルゴリズムのヘッセ行列の更新式は以下で表される。 $$ \\mathbf{H}_{k+1} =\\mathbf{H}_k+\\frac{\\mathbf{t}_k\\mathbf{t}_k&#94;T}{\\mathbf{s}_k&#94;T\\mathbf{t}_k}-\\frac{\\mathbf{H}_k\\mathbf{s}_k\\mathbf{s}_k&#94;T\\mathbf{H}_k}{\\mathbf{s}_k&#94;T\\mathbf{H}_k\\mathbf{s}_k} $$ なお、この時 $$ \\begin{aligned} \\begin{cases} \\mathbf{s}_k &= \\mathbf{x}_{k+1} - \\mathbf{x}_k\\\\ \\mathbf{t}_k &= \\nabla f(\\mathbf{x}_{k+1}) - \\nabla f(\\mathbf{x}_k) \\end{cases} \\end{aligned} $$ まとめ 凸最適化問題 目的関数が凸関数で定義域が凸集合 最適解が一意に定まる 最急降下法 勾配を降下するように値を更新 ステップ幅の選択が重要 目的関数が微分不可能な場合は、劣勾配法や近接勾配法を用いる ニュートン法 二階微分の情報を利用する ヘッセ行列の近似を用いる準ニュートン法が実用的 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html"},{"title":"生物物理学 第3回","text":"タンパク質の構造と安定性 タンパク質の定義 特定のアミノ酸（20種類）が重合した重合体である。 特定の立体構造をとる。 （これがないと ポリペプチド ） 機能 説明 分子認識 ミオグロビンは酸素を結合。抗体は抗原と結合。 触媒（酵素） 化学反応の反応速度は \\(10&#94;8\\) ~ \\(10&#94;{17}\\) 倍にも加速される。 制御 基質の結合や環境の変化に伴い構造を変化し、タンパク質の反応を制御する。 エネルギー変換 光を電位に換え、ATP分解を力に換える。 構造形成・維持 タンパク質重合体は細胞や細胞内器官の構造を支える。 タンパク質を構成するアミノ酸 d-グリセルアルデヒドの立体配置を基準として、この立体配置を崩さずにできる化合物をD-体、その鏡像異性体がL-体。 ※ タンパク質はL体 構造 名前 略（三文字） 略（一文字） アラニン Ala A アルギニン Arg R アスパラギン Asn N アスパラギン酸 Asp D システイン Cys C グルタミン酸 Glu E グルタミン Gln Q グリシン Gly G ヒスチジン His H イソロイシン Ile I ロイシン Leu L リシン Lys K メチオニン Met M フェニルアラニン Phe F プロリン Pro P セリン Ser S トレオニン Thr T トリプトファン Trp W チロシン Tyr Y バリン Val V # 上記の表は以下のコードを応用して作成した。 url = \"https://ja.wikipedia.org/wiki/タンパク質を構成するアミノ酸\" soup = BeautifulSoup ( requests . get ( url ) . content , 'lxml' ) for li in soup . findAll ( \"li\" , { \"class\" : \"gallerybox\" }): text = str ( li ) . replace ( ' \\n ' , '' ) src = re . findall ( r '<img.*src=\"(.+?)\".*>' , text )[ 0 ] name , l3 , l1 = re . findall ( r '<p>.*title=\"(.+?)\".*<br/>\\((.+?)\\xa0\\/\\xa0(.+?)\\)</p>' , text )[ 0 ] 理論的構造決定法 アミノ酸配列→量子力学→タンパク質の構造とエネルギー状態を決定 シュレディンガー方程式は水素原子のみ解析的に解くことができ、それ以外は近似を行う必要がある。 現在、高精度に計算（第一原理分子動力学法）できるのは1つの構造に対して100原子程度である。 水分子を考慮しなければ、タンパク質の構造や電子軌道を精度よく求めることはできない。 アミノ酸がポリペプチド結合した重合体から機能を持つ立体構造を創り構造を維持するためには、 立体構造が熱力学的に安定でなければならない。 → Gibbs自由エネルギー \\(G\\) を見る。 準安定なのは、 \\(G\\) が極小の時。 最も安定なのは、 \\(G\\) が最小の時。 まとめ 生体の機能を主に担っているのは、タンパク質である。（RNAも機能に重要である。） タンパク質は分子認識・触媒・制御・エネルギー変換・構造形成維持などの機能を有している。 アミノ酸配列から計算によってタンパク質構造を決定することに成功していない。（部分構造はできている。） 酵素機能を行うとき、酵素の多くの場所が構造変化を行う。 第6回目の講義(11/6)の小テスト 指定課題： 第1,2,3回の講義の中で、最も興味のある事柄について300~500字でまとめる。 この事柄と関連する内容を調べるなどして、自分の意見を300~500字で述べる。 図や式を使いわかりやすく説明すること。図や式は文字数に含めない。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html"},{"title":"領域分割","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt import matplotlib.patches as patches # 円を描画 領域分割 色によるクラス分け（画像のみ） k-means法 mean-shift法 色によるクラス分け（画像のみ） 例えば、画素(RGB)や位置(x,y)の似たものをグループ分けする。 二値分類(FG/BG分類)で有名なのが クロマキー （ 青色・緑色 背景） k-means法 予めクラス数 $k$ を指定してクラスタリング。 $k$ 個の代表点をランダムにサンプリング（$k$ 個をデータの中からとってきても良いし、完全にランダムでばらまいても良い。） 全てのデータ点から一番近い代表点を $1$ つ探す。 $k$ 個のグループの重心を計算し、それを新たな代表点とする。 2,3を繰り返す。 In [2]: from kerasy.ML.KMeans import KMeans In [3]: def decomposeImg ( path , K ): imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== KMeans === x = rgb_img . reshape ( - 1 , 3 ) model = KMeans ( K = K , random_state = 0 ) model . fit ( x ) cls , mu = model . predict ( x ) mu = mu . astype ( int ) for k in range ( K ): x [ cls == k ] = mu [ k ] # KMeansed Image. ax_K = fig . add_subplot ( 1 , 2 , 2 ) ax_K . imshow ( x . reshape ( img_shape )) ax_K . set_title ( f \"K= {K} \" ), ax_K . set_xticks ([]), ax_K . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No.{i+1:<0{len(str(K))}}, rgb=({','.join(mu[k].astype(int).astype(str))})\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () In [4]: decomposeImg ( path = \"lenna.png\" , K = 8 ) mean-shift法 画像領域の分割や対象画像の追跡に用いられる手法。 $d$ 次元の特徴量（ex. $\\mathrm{R,G,B},x,y$）を持った $N$ 個のデータ点 $\\mathbf{x}_i$ が分布しているときに、この点群 $\\mathbf{x}_i$ を標本点として得られるような確率密度関数 $f(\\mathbf{x})$ を考え、その標本点から確率密度関数 $f(\\mathbf{x})$ の極大点を探索する手法。 点群が集中している場所は確率密度関数 $f(\\mathbf{x})$ の値が高く、まばらな場所は低くなる。 ある任意の観測点 $\\mathbf{y}_j$ から半径 $h$ の超球を考え、その範囲にある点群 $\\mathbf{x}_i$ の平均 $\\mathbf{x}_c$ を計算し、その位置に観測点 $\\mathbf{y}_{j+1}$ を移動する。 この操作を繰り返すと観測点は最大勾配の方向に移動し、やがて極大点に収束する。 このように、 「近傍の点群の平均(mean)位置に移動(shift)を繰り返し、極大点を求める方法」 から ミーンシフト法(mean-shift) と呼ばれる。 In [5]: fig , ax = plt . subplots ( figsize = ( 6 , 6 )) # Circle r = 0.7 c = patches . Circle ( xy = ( 0 , 0 ), radius = r , ec = 'black' , fill = False ) ax . add_patch ( c ) # Sample Data X , Y = np . random . RandomState ( 123 ) . uniform ( low =- 0.3 , high = 1 , size = ( 2 , 50 )) cls = np . sqrt ( X ** 2 + Y ** 2 ) < r ax . scatter ( X , Y , c = cls , cmap = \"Set1_r\" , alpha = 0.7 ) # Center ax . scatter ( 0 , 0 , color = \"black\" , s = 100 ) ax . text ( 0.05 , - 0.05 , \"$\\mathbf {y} _ {j} $\" , fontsize = 12 ) # Mean mux , muy = np . mean ( X [ cls ]), np . mean ( Y [ cls ]) ax . scatter ( mux , muy , color = \"black\" , marker = '*' , s = 100 ) ax . text ( mux + 0.05 , muy , \"$\\mathbf {x} _c(=\\mathbf {y} _{j+1})$\" , fontsize = 12 ) # Arrow ax . annotate ( '' , xy = ( mux , muy ), xytext = ( 0 , 0 ), arrowprops = dict ( width = 2 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'blue' , edgecolor = 'blue' ) ) # Radius ax . plot (( 0 , 0 ),( 0 , - r ), color = \"black\" ) ax . text ( 0.05 , - r / 2 , \"r\" , fontsize = 12 ) ax . set_xlim ( - 1 , 1 ) ax . set_ylim ( - 1 , 1 ) plt . show () カーネル密度関数を用いた確率密度関数の推定 $d$ 次元空間内の $N$ 個の点群 $\\mathbf{x}_i$ を考える。この点群をある確率分布に従う標本と考えたとき、$d$ 次元空間内の任意の点 $\\mathbf{x}$ における確率密度関数 $f(\\mathbf{x})$ は、以下の方法で推定される。 $$f(\\mathbf{x}) = \\frac{c_{kd}}{Nh&#94;{d}}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)$$ $c_{hd}$ は、確率密度関数 $f(\\mathbf{x})$ 全体の積分を $1$ にするための正規化係数。 $k(t)$ は、カーネル関数 $K(t)$ の プロファイル で、$K(t)=k(|t|&#94;2)$ 以下の２つのカーネルが代表的である。 ガウシアンカーネル(Gaussian) エパネックニコフカーネル(Epanechnikov) $$K(t) = \\exp\\left(-\\frac{\\mid t\\mid&#94;2}{2}\\right)$$ $$K(t) = \\begin{cases}1- \\mid t\\mid&#94;2 & (\\mid t\\mid\\leq1)\\\\0 & (\\text{otherwise})\\end{cases}$$ 確率密度関数の勾配 勾配法(gradient method) を用いて極大点を逐次的に求めるために、確率密度関数の勾配 $\\nabla f(\\mathbf{x})$ を求める。 $$ \\begin{aligned} \\nabla f(\\mathbf{x}) &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;Nk'\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)\\left(\\mathbf{x}-\\mathbf{x}_i\\right)\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;N\\left(g_i\\mathbf{x}_i-g_i\\mathbf{x}\\right), \\quad g(t) = -k'(t),g'(t)=g\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|\\right)&#94;2\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\} \\end{aligned} $$ 項 説明 $$\\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}$$ ガウシアンカーネルやエパネックニコフカーネルを用いた場合、正になる。 $$\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\}$$ ミーンシフト と呼ばれる項で、観測点 $\\mathbf{x}$ の近傍のデータ点群 $\\mathbf{x}_i$ の加重平均位置と $\\mathbf{x}$ 自身の差分ベクトルを示す。 勾配法を用いた極大点探索（ミーンシフト法） 初期化：$\\mathbf{y}_0\\leftarrow\\mathbf{x}$ 更新（ミーンシフト） $$\\mathbf{y}_{j+1}\\leftarrow \\mathbf{y}_j + \\left(\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{y}_j\\right) = \\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}$$ $|\\mathbf{y}_{j+1}-\\mathbf{y}_j|<\\text{threshold}$ となるまで2を繰り返す。 収束した $\\mathbf{y}_{j+1}$ を極大点として出力する。 ※ 一般的な勾配法では、更新式 $\\mathbf{y}_{j+1}\\rightarrow\\mathbf{y}_i + \\alpha\\nabla f$ のステップ数 $\\alpha$ を与える必要があるが、ミーンシフト法では ベクトルの大きさは自動的に計算される ので、$\\alpha$ を与える必要がない（らしい…）。 ミーンシフト法を用いたクラスタリングへの応用 $d$ 次元空間中の $N$ 個の点群 $\\mathbf{x}_i$ が与えられた時に、密に分布する点群をクラスタとして分割する。 各点にミーンシフト法を適用し、収束位置 $\\mathbf{x}_i&#94;c$ を計算する。 任意の2個の点 $\\mathbf{x}_i,\\mathbf{x}_j$ について、その収束位置が閾値以下なら（$|\\mathbf{x}_i-\\mathbf{x}_j|<\\text{threshold}$）、この2点を同じ極大点として同じクラスタに入れる。 1,2より、全ての点群 $\\mathbf{x}_i$ を 同じ収束位置（極大点）に属するものごとにクラスタに識別する。 全ての点 $\\mathbf{x}_i$ でこの処理を行わなければならないが、並行化できる。 k-means手法とは異なり、クラスタの数を予め指定する必要がない。 ミーンシフト法を用いたカラー画像の領域分割 カラー画像の $N$ 個の各画素の位置 $\\mathbf{x}_i$ とその画素値 $\\mathbf{v}_i=\\left(R_i,G_i,B_i\\right)$ とし、画素位置-画素値を結合した5次元空間内の点 $\\mathbf{z}_i=(\\mathbf{x}_i,\\mathbf{v}_i)$ を考える。 「距離および色が近い画素が5次元空間内でクラスタを形成している」 とみて、ミーンシフト法で各画素をクラスタリングする。 画素位置に関するバンド幅 $h_s$、画素値に関するバンド幅 $h_r$ を与え、全ての $z_i$ にミーンシフトを行い、収束位置 $\\mathbf{z}&#94;c=(\\mathbf{x}&#94;c,\\mathbf{v}&#94;c)$ を計算する。 $\\mathbf{x}_i$ の画素値を、収束位置の画素の値 $(R&#94;c,G&#94;c,B&#94;c)$ に置き換えることによって、画像の平滑化ができる。 ミーンシフトは、以下の通り計算する。 $$f(\\mathbf{x}) = \\frac{c}{Nh_s&#94;2h_r&#94;3}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}&#94;s-\\mathbf{x}&#94;s_i}{h_s}\\right|&#94;2\\right)k\\left(\\left|\\frac{\\mathbf{x}&#94;r-\\mathbf{x}&#94;r_i}{h_r}\\right|&#94;2\\right)$$ したがって、以下のとおりに位置を更新する。 $$\\mathbf{y}&#94;{s}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;s\\mathbf{x}_i&#94;s}{\\sum_{i=1}&#94;Ng_i&#94;s},\\quad\\mathbf{y}&#94;{r}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;r\\mathbf{x}_i&#94;r}{\\sum_{i=1}&#94;Ng_i&#94;r}$$ $(h_s,h_r)$ のパラメータを大きくすると、より大きな領域に同色が統合され、大まかに分割される。 In [6]: from sklearn.cluster import MeanShift In [7]: import time s = time . time () imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) path = \"lenna.png\" bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== MeanShift === x = rgb_img . reshape ( - 1 , 3 ) model = MeanShift () model . fit ( x ) cls = model . predict ( x ) mu = model . cluster_centers_ . astype ( int ) K = max ( cls ) + 1 for k in range ( K ): x [ cls == k ] = mu [ k ] # MeanShifted Image. ax_Mean = fig . add_subplot ( 1 , 2 , 2 ) ax_Mean . imshow ( x . reshape ( img_shape )) ax_Mean . set_title ( f \"n_cluster= {K} \" ), ax_Mean . set_xticks ([]), ax_Mean . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No.{i+1:<0{len(str(K))}}, rgb=({','.join(mu[k].astype(int).astype(str))})\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () e = time . time () print ( f \"Processing time: {int((e-s)//60):>02}m {(e-s)%60:.3f}s\" ) plt . show () Processing time: 31m 13.287s In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html"},{"title":"領域処理のための特徴量","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 領域の特徴量 フーリエ変換 ガボールフィルタ(Gabor Filter) 同時生起確率 In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt （２次元）フーリエ変換 画像は、フーリエ変換によって周波数領域における別の形で表現される。 フーリエ変換の結果は、画像に含まれるそれぞれの周波数成分を表している。 フーリエ変換後の各周波数成分の大きさを成分ごとに変えることにより、元の画像の性質を変えることができる。 （周波数フィルタリング(frequency filtering)） ローパスフィルタ(lowpass fileter) ：画像に含まれる空間周波数成分のうち、低周波数成分は残し、高周波数成分は除去するようなフィルタ。 ハイパスフィルタ(highpass filter) ：上の逆。高周波数成分は残し、低周波数成分を除去するようなフィルタ。 バンドパスフィルタ(bandpass filter) ：ある中間的な周波数の範囲を残すようなフィルタ。 高域強調フィルタ(high-emphasis filter) ：画像の低周波数成分はそのまま保ちつつ、高周波数成分を強調するフィルタ。 $1$ 次元フーリエ変換 簡単のため、まずは一次元フーリエ変換をみる。 名前 数式 説明 フーリエ変換 $$F(\\omega) = \\int_{-\\infty}&#94;{\\infty}f(t)e&#94;{-i\\omega t}dt$$ 数直線上の表現 （空間領域） から周波数による表現 （周波数領域） への変換 逆フーリエ変換 $$f(x) = \\int_{-\\infty}&#94;{\\infty}F(\\omega)e&#94;{i\\omega x}d\\omega$$ 周波数領域にある関数を元の空間領域に戻す変換 実装 二つの正弦波を重ねた波から、それぞれの成分を取り出すことができるか確かめる。なお、ここでは numpy.fft.fft を利用しています。 これは、 高速フーリエ変換(Fast Fourier Transform) と呼ばれる、 高速に「離散フーリエ変換」を行うアルゴリズム を実装したものです。 In [2]: N = 10000 dt = 0.01 time = np . arange ( 0 , N * dt , dt ) freq = np . linspace ( 0 , 1.0 / dt , N ) In [3]: def sin ( A , f , p ): \"\"\" @param A: Amplitude @param f: Frequency[Hz] @param p: phase \"\"\" func = lambda t : A * np . sin ( 2 * np . pi * f * t + p1 ) return func In [4]: # parameters f1 , f2 = 5 , 8 # frequency[Hz] A1 , A2 = 5 , 3 # Amplitude p1 , p2 = 0 , 1 / 2 * np . pi # phase In [5]: y1 = sin ( A1 , f1 , p1 )( time ) y2 = sin ( A2 , f2 , p2 )( time ) y = y1 + y2 # superposition In [6]: # Computes the discrete Fourier transform (DFT) of a sequence yf = np . fft . fft ( y ) / ( N / 2 ) # Fast Fourier transform. In [7]: fig = plt . figure ( figsize = ( 8 , 4 )) ax1 = fig . add_subplot ( 2 , 1 , 1 ) ax1 . set_ylabel ( \"amplitude\" ) ax1 . set_xlabel ( \"time\" ) ax1 . set_xlim ( 0 , 1 ) ax1 . plot ( time , y , label = \"y(y1+y2)\" , color = \"blue\" ) ax1 . plot ( time , y1 , label = f \"y1(A= {A1} ,f= {f1} )\" , alpha = 0.3 , color = \"green\" ) ax1 . plot ( time , y2 , label = f \"y2(A= {A2} ,f= {f2} )\" , alpha = 0.3 , color = \"red\" ) ax1 . axhline ( 0 , alpha = 0.3 , color = \"black\" ) ax1 . legend () ax2 = fig . add_subplot ( 2 , 1 , 2 ) ax2 . set_ylabel ( \"amplitude\" ) ax2 . set_xlabel ( \"frequency\" ) ax2 . set_xlim ( 0 , 10 ) ax2 . plot ( freq , abs ( yf ), color = \"blue\" ) plt . tight_layout () plt . show () 見事に、二つの周波数成分を取り出すことができました。 $2$ 次元フーリエ変換 ※ 一般に画像は2次元空間で定義されたある関数 $f(x,y)$ として表現することができる！ 名前 数式 フーリエ変換 $$F(u,v) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x,y)\\exp\\left\\{-j2\\pi\\left(ux+vy\\right)\\right\\}dxdy$$ 逆フーリエ変換 $$f(x,y) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}F(u,v)\\exp\\left\\{j2\\pi\\left(ux+vy\\right)\\right\\}dudv$$ ここで、以下の値に注目することがよくある。 名前 数式 説明 振幅スペクトル(amplitude spectrum) $$\\mid F(u,v)\\mid = \\sqrt{\\mathrm{Re}\\left\\{F(u,v)\\right\\}&#94;2 + \\mathrm{Im}\\left\\{F(u,v)\\right\\}&#94;2}$$ 絶対値 位相スペクトル(phase spectrum) $$\\arg\\left\\{F(u,v)\\right\\} = \\tan&#94;{-1}\\frac{\\mathrm{Im}\\left\\{F(u,v)\\right\\}}{\\mathrm{Re}\\left\\{F(u,v)\\right\\}}$$ 偏角 パワースペクトル(power spectrum) $$\\mid F(u,v)\\mid&#94;2$$ In [8]: img = cv2 . imread ( 'lenna.png' , 0 ) f = np . fft . fft2 ( img ) fshift = np . fft . fftshift ( f ) magnitude_spectrum = 20 * np . log ( np . abs ( fshift )) plt . subplot ( 121 ), plt . imshow ( img , cmap = 'gray' ) plt . title ( 'Input Image' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'x' ), plt . ylabel ( 'y' ) plt . subplot ( 122 ), plt . imshow ( magnitude_spectrum , cmap = 'gray' ) plt . title ( 'Magnitude Spectrum' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'u' ), plt . ylabel ( 'v' ) plt . show () ガボールフィルタ(Gabor Filter) 正弦波とガウス関数の積で表される。（例：2次元ガボールフィルタ） $$g(x,y,\\lambda,\\phi) = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\exp\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 実数部： $$\\mathrm{Re}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\cos\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 虚数部： $$\\mathrm{Im}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\sin\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ フーリエ変換では、所望の周波数成分が領域のどこにあるのかわからないのに対し、ガボールフィルタは、 「領域のどの位置にどの方向の周波数が、どの強度であるか」 を知ることができる。 パラメータを操作して様々な方向と強度を持つフィルタ （フィルタバンク(filter bank)） を多数準備 し、特徴抽出を行う。また、ここで抽出された特徴量群は texton と呼ばれる。 入力された画像に対してガボールフィルタを畳み込んで（たたみ込み＝二次元の内積＝類似度を反映）、特徴量 $G(x,y,\\lambda,\\phi)$ を求める式は以下となる。 $$G(x,y,\\lambda,\\phi) = \\sum_u\\sum_vI(x,y)\\ast g(x-u, y-v, \\lambda, \\phi)$$ OpenCVの cv2.getGaborKerne を用いることで簡単にガボールフィルタを生成することができる、 引数 説明 ksize Size of the filter returned. sigma Standard deviation of the gaussian envelope. theta Orientation of the normal to the parallel stripes of a Gabor function. lambd Wavelength of the sinusoidal factor. gamma Spatial aspect ratio. psi Phase offset. In [9]: default_gabor = { \"ksize\" : ( 50 , 50 ), \"sigma\" : 4 , \"theta\" : 0 , \"lambd\" : 10 , \"gamma\" : 0.5 , \"psi\" : 0 , } In [10]: gabor = cv2 . getGaborKernel ( ** default_gabor ) plt . imshow ( gabor , cmap = \"gray\" ) plt . title ( \"default\" ) plt . show () In [11]: def argsGaborRelation ( key , vals ): global default_gabor defaul_val = default_gabor [ key ] N = len ( vals ) n_col = 4 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i , val in enumerate ( vals ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) ax . imshow ( gabor , cmap = \"gray\" ) ax . set_title ( f \" {key} = {val} \" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [12]: argsGaborRelation ( key = \"ksize\" , vals = [( 30 , 30 ),( 20 , 40 ),( 40 , 20 ),( 50 , 50 )]) In [13]: argsGaborRelation ( key = \"sigma\" , vals = [ x for x in range ( 8 )]) In [14]: argsGaborRelation ( key = \"theta\" , vals = [ np . radians ( x ) for x in range ( 0 , 180 , 45 )]) In [15]: argsGaborRelation ( key = \"gamma\" , vals = [ x for x in range ( 4 )]) In [16]: argsGaborRelation ( key = \"psi\" , vals = [ np . radians ( x ) for x in range ( 0 , 360 , 45 )]) In [17]: img = cv2 . imread ( 'lenna.png' , 0 ) color_img = cv2 . imread ( 'lenna.png' ) In [18]: def argsGaborSuperposition ( key , vals ): global default_gabor , img defaul_val = default_gabor [ key ] N = len ( vals ) * 2 n_col = 8 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) dests = 0 for i , val in enumerate ( vals ): default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) dest = cv2 . filter2D ( img , cv2 . CV_32F , gabor ) dests += dest ax_dst = fig . add_subplot ( n_row , n_col , 2 * i + 1 ) ax_dst . imshow ( np . power ( dest , 2 ), cmap = \"gray\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) ax_gab = fig . add_subplot ( n_row , n_col , 2 * i + 2 ) ax_gab . imshow ( gabor , cmap = \"gray\" ), ax_gab . set_xticks ([]), ax_gab . set_yticks ([]) # Superposition fig = plt . figure ( figsize = ( 8 , 16 )) ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( cv2 . cvtColor ( color_img , cv2 . COLOR_BGR2RGB )) ax_org . set_title ( \"original image\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) ax_dst = fig . add_subplot ( 1 , 2 , 2 ) ax_dst . imshow ( dests , cmap = \"gray\" ) ax_dst . set_title ( f \"Superposition of dst (key= {key} )\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [19]: argsGaborSuperposition ( key = \"theta\" , vals = [ np . radians ( x ) for x in np . linspace ( 0 , 180 , 8 )]) ※ 入力画像の８分割した全ての方向のエッジを重ね合わせると、元の画像をかなり高い精度で復元していることがわかる。 同時生起確率 テクスチャの統計的特徴量を求める。 離れた２つの場所にある画素対の値から、画素値の 一様性 ・ 方向性 ・ コントラスト などの性質を表す特徴量を求める。 ある画素 $i$ と、$i$ から離れた位置にある画素 $j$ の画素対を考え、画素 $i$ と画素 $j$ の相対的な位置を $\\delta=\\langle d,\\theta\\rangle$ とする。 それぞれの画素値を $L_i,L_j$ とし、画素値の対 $(L_i,L_j)$ が生じる出現頻度で、ある同時生起行列 $\\mathbf{H}_{\\delta}(L_i,L_j)$ を考える。ここで、出現頻度の総数で $\\mathbf{H}_{\\delta}(L_1,L_2)$ を正規化し、確率に変換した同時生起行列を $\\mathbf{P}_{\\delta}(L_i,L_j)$ とする。 確率に変換した同時生起行列を用いて計算する主な特徴量には次の $7$ 種類がある。（ここで、画素値のレベル数は $L$ である。）他にも様々な統計量を計算できるが、テクスチャの物理的な意味と直接には結びつかない数値もある。 $$ \\begin{aligned} \\mathrm{ENR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left\\{P_{\\delta}(L_i,L_j)\\right\\}&#94;2 & (\\text{energy})\\\\ \\mathrm{CNT} &= \\sum_{k=0}&#94;{L-1}k&#94;2P_{x-y}(k) & (\\text{contrast})\\\\ \\mathrm{CRR} &= \\frac{\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}L_iL_jP_{\\delta}(L_i,L_j) - \\mu_x\\mu_y}{\\delta_x\\delta_y} & (\\text{correlation})\\\\ \\mathrm{VAR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left(L_i-\\mu_x\\right)&#94;2P_{\\delta}(L_i,L_j) & (\\text{variance})\\\\ \\mathrm{EPY} &= -\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\log\\left\\{P_{\\delta}(L_i,L_j)\\right\\} & (\\text{entropy})\\\\ \\mathrm{SEP} &= -\\sum_{k=0}&#94;{2L-2}P_{x+y}(k)\\log\\left\\{P_{x+y}(k)\\right\\} & (\\text{sum entropy})\\\\ \\mathrm{IDM} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\frac{1}{1+(L_i-L_j)&#94;2}P_{\\delta}(L_i,L_j) & (\\text{inverse difference moment})\\\\ \\end{aligned} $$ ただし、 $$ \\mu_x = \\sum_{L_i=0}&#94;{L-1}L_iP_x(L_i), \\quad \\mu_y = \\sum_{L_j=0}&#94;{L-1}L_jP_y(L_j)\\\\ \\delta_x&#94;2 = \\sum_{L_i=0}&#94;{L-1}(L_i-\\mu_x)&#94;2P_x(L_i), \\quad \\delta_y&#94;2 = \\sum_{L_j=0}&#94;{L-1}(L_j-\\mu_y)&#94;2P_y(L_j)\\\\ P_x(L_i) = \\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j), \\quad P_y(L_j) = \\sum_{L_i=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\\\ P_{x-y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i-L_j|= k\\\\ P_{x+y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i+L_j|= k\\\\ $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html"},{"title":"主成分分析(PCA)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 主成分分析(PCA) 次元削減・非可逆データ圧縮・特徴抽出・データの可視化などに使われる。 主部分空間(principal subspace) と呼ばれる低次元の線形空間の上への、データ点の直交射影として、以下の2つの定義方法がある。 「射影されたデータの分散が最大化されるような直交射影」 として定義。→ 分散最大化による定式化 「データ点と射影した点の間の2乗距離の平均値で定義される 射影コスト関数 の期待値を最小化するような線形射影」 として定義。（要はデータ点からの距離を最小化）→ 誤差最小化による定式化 Pythonによる実装 分散最大化による定式化 次元 $D$ のユークリッド空間内のデータ集合 $\\{\\mathbf{x}_n\\}(n=1,\\ldots,N)$ を考える。ここで、 「射影されたデータ点の分散を最大化しながら、データを次元 $M ことを考える。 1次元空間の上への射影（$M=1$） この空間の方向を $D$ 次元ベクトル $\\mathbf{u}_1$ として表す。ここで、興味があるのは $\\mathbf{u}_1$ の方向だけであるので、$\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ としても一般性を失わない。 したがって、各データ点 $\\mathbf{x}_n$ は スカラー値 $\\mathbf{u}_1&#94;T\\mathbf{x}_n$ の上に射影される。ここで、射影されたデータの平均・分散は以下のようになる。 統計量 平均値 $$\\mathbf{u}_1&#94;T\\bar{\\mathbf{x}}\\qquad\\bar{\\mathbf{x}} = \\frac{1}{N}\\sum_{n=1}&#94;N\\mathbf{x}_n\\qquad (12.1)$$ 分散 $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1\\qquad\\mathbf{S} = \\frac{1}{N}\\sum_{n=1}&#94;N\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\qquad (12.3)$$ ここで、 射影されたデータの分散を、$\\mathbf{u}_1$ に関して最大化 することを考える。 制約条件 $\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ をラグランジュ乗数 $\\lambda_1$ を利用して導入して $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1 + \\lambda_1\\left(1-\\mathbf{u}&#94;T_1\\mathbf{u}_1\\right)\\qquad (12.4)$$ を最大化すれば良い。$\\mathbf{u}_1$ に関する微分を $0$ とおくことにより、停留条件は $$\\mathbf{Su}_1 = \\lambda_1\\mathbf{u}_1\\qquad (12.5)$$ となることがわかる。これは、 $\\mathbf{u}_1$ が $\\mathbf{S}$ の固有ベクトルであること を示している。左から $\\mathbf{u}&#94;T_1$ をかけると、 $$\\text{Variance} = \\mathbf{u}&#94;T_1\\mathbf{Su}_1 = \\lambda_1 \\qquad (12.6)$$ となる。よって、 分散は $\\mathbf{u}_1$ を、最大固有値 $\\lambda_1$ に属する固有ベクトルに選んだ時に最大になる ことがわかる。 $M$ 次元空間の上への射影（一般解） 演習12.1 帰納法を用いて、 射影されたデータの分散を最大化するようなM次元部分空間の上への線形写像が、データ共分散行列Sの上位M個の固有値に属するM本の固有ベクトルによって定義される ことを示す。 仮定 $M$ に対して上記が成り立つ。 データ空間に対する新しい方向ベクトル $\\mathbf{u}_{M+1}$ は、次を満たす。 $\\mathbf{u}_{M+1}$ は、$\\mathbf{u}_1,\\ldots,\\mathbf{u}_M$ と直交する。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0$） 単位長に規格化されている。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{M+1}=1$） 制約条件を踏まえると、 $$L = \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\lambda_{M+1}\\left(1-\\mathbf{u}&#94;T_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_j$$ 両辺を $\\mathbf{u}_{M+1}$ で微分すると、 $$0 = \\frac{\\partial L}{\\partial \\mathbf{u}_{M+1}} = 2\\left(\\mathbf{Su}_{M+1} - \\lambda_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_j\\cdots(\\ast)$$ これに左から $\\mathbf{u}&#94;T_{j}$ をかけると、 $$0 = \\lambda&#94;{\\prime}_j\\quad(\\because \\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0)$$ となるので、これを $(\\ast)$ に代入して、 $$\\mathbf{Su}_{M+1} = \\lambda_{M+1}\\mathbf{u}_{M+1}$$ また、この時分散は $$\\begin{aligned} \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i &= \\sum_{i=1}&#94;{M}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\mathbf{u}&#94;T_{M+1}\\mathbf{Su}_{M+1}\\\\ &= \\sum_{i=1}&#94;{M}\\lambda_i + \\lambda_{M+1} \\end{aligned}$$ ここで、仮定より $\\lambda_i$ は、データ共分散行列 $\\mathbf{S}$ の上位 $M$ 個の固有値なので、この分散を最大する $\\lambda_{M+1}$ は、$M+1$ 番目に大きい固有値となる。 誤差最小化による定式化 続いて、射影誤差の最小化に基づいた主成分分析の定式化を考える。 まず、$D$ 次元の基底ベクトル $\\{\\mathbf{u}_i\\}$ から成る完全正規直交系を導入する。（$\\mathbf{u}_i&#94;T\\mathbf{u}_i = \\delta_{ij}$） すると、各データ点はこれらの基底ベクトルの線形結合なので、以下の形で表すことができる。 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\alpha_{ni}\\mathbf{u}_i\\qquad (12.8)$$ なお、ここで式 $(12.8)$ は、各データ点 $\\{\\mathbf{x}_n\\}$ を、もともとの座標系から $\\{\\mathbf{u}_i\\}$ で表される新しい座標系への回転を表していると解釈できる （もともと $D$ 個の成分 $\\{x_{n1},\\ldots,x_{nD}\\}$ が、等価な集合 $\\{a_{n1},\\ldots,a_{nD}\\}$ に置き換えられている） 。 上式と $\\mathbf{u}_j$ との内積を取り、正規直交性を使うと、$\\alpha_{nj} = \\mathbf{x}_n&#94;T\\mathbf{u}_j$ を得るので、 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right)\\mathbf{u}_i\\qquad (12.9)$$ $D$ 次元から $M$ 次元への近似 ここで、$M （$M$ 次元空間で完全に $\\mathbf{x}_n$ を表現するのは一般に不可能なので、近似する。） したがって、各データ点を $$\\tilde{\\mathbf{x}}_n = \\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\qquad (12.10)$$ $\\{z_{ni}\\}$ は特定のデータ点に依存。 $\\{b_i\\}$ は全てのデータ点に共通な定数。 と近似して表す。つまり、 $\\{\\mathbf{u}_i\\}$ と $\\{z_{ni}\\}$ と $\\{b_i\\}$ を調整することで、次元が減ることによってもたらされる歪みを最小化すること がここでの目的となる。 近似による歪み尺度 $J$ 近似による歪みの尺度として、元々のデータ点 $\\mathbf{x}_n$ とその近似 $\\tilde{\\mathbf{x}}_n$ の間の2乗距離をデータ集合に渡って平均したものを採用する。 $$\\begin{aligned} J &= \\frac{1}{N}\\sum_{n=1}&#94;N\\|\\mathbf{x}_n-\\tilde{\\mathbf{x}}_n\\|&#94;2\\qquad (12.11)\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\left\\|\\mathbf{x}_n-\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)\\right\\|&#94;2 \\end{aligned}$$ そこで、各変数についての微分を $0$ としてこれを最小化する変数を求める。 $\\{z_{ni}\\}$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial z_{ni}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\left\\|\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\sum_{i=1}&#94;Mz_{ni}&#94;2-2\\sum_{i=1}&#94;Mz_{ni}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=1}&#94;M2\\left\\{z_{ni}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore z_{ni}&#94;{\\star} &= \\mathbf{x}_n&#94;T\\mathbf{u}_i \\qquad (12.12) \\end{aligned} $$ $b_i$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial b_{i}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\left\\|\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\sum_{i=M+1}&#94;Db_{i}&#94;2-2\\sum_{i=M+1}&#94;Db_{i}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D2\\left\\{b_{i}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore b_{i}&#94;{\\star} &= \\bar{\\mathbf{x}}_n&#94;T\\mathbf{u}_i \\qquad (12.13) \\end{aligned} $$ $J$ の整頓 ここで、$(12.10)$ の $z_{ni},b_i$ を置き換えると、 $$ \\begin{aligned} \\mathbf{x}_n-\\tilde{\\mathbf{x}}_n &= \\mathbf{x}_n-\\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=1}&#94;D\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i - \\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=M+1}&#94;D\\left\\{\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\mathbf{u}_i\\right\\}\\mathbf{u}_i\\qquad (12.14) \\end{aligned} $$ と表すことができる。この式から、 $\\tilde{\\mathbf{x}}_n$ から $\\mathbf{x}_n$ への変位を表すベクトルは、主部分空間に直交する空間にあることがわかる。 以上より、歪み尺度 $J$ に対する表現を、純粋に $\\{\\mathbf{u}_i\\}$ の関数として、以下のような形で得られることがわかる。 $$J = \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i-\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\right)&#94;2 = \\sum_{i=M+1}&#94;D\\mathbf{u}&#94;T_i\\mathbf{Su}_i\\qquad (12.15)$$ したがって、あとは$J$ を $\\{\\mathbf{u}_i\\}$ に対して最小化すれば良い。 $M=1,D=2$ の場合 $M=1,D=2$ の場合、 「規格化条件 $\\mathbf{u}&#94;T_2\\mathbf{u}_2 = 1$ の下で、方向 $\\mathbf{u}_2$ を、$J=\\mathbf{u}&#94;T_2\\mathbf{Su}_2$ が最小化されるように選ぶ」 問題となる。 つまり、ラグランジュ乗数を用いて、 $$\\tilde{J} =\\mathbf{u}&#94;T_2\\mathbf{Su}_2 + \\lambda_2\\left(1-\\mathbf{u}&#94;T_2\\mathbf{u}_2\\right)\\qquad (12.16)$$ を最小化する問題となる。 $\\mathbf{u}_i$ についての微分を $0$ とおくと、$\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を得る。つまり、$\\mathbf{u}_2$ は固有値 $\\lambda_2$ に属する $\\mathbf{S}$ の固有ベクトルであるので、 任意の固有ベクトルは、この歪み尺度の停留点を定義することとなる。 $(12.16)$ に $\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を代入すると、$J=\\lambda_2$ となる。ゆえに、 「$\\mathbf{u}_2$ を、2つある固有値のうち小さい方に対応した固有ベクトルを選ぶことにより、$J$ の最小値を得ることができる」 （↔︎ 主部分空間では大きい方 ） 任意の $D$ と任意の $M 任意の $D$ と任意の $M $$\\mathbf{Su}_i = \\lambda_i\\mathbf{u}_i\\qquad (12.17)$$ で与えられる共分散行列の固有ベクトルに選ぶことによって得られる。ここで $i=1,\\ldots,D$ であり、固有ベクトル $\\{\\mathbf{u}_i\\}$ は正規直交するように選ばれる。 また、対応する歪み尺度の値は、 $$J = \\sum_{i=M+1}&#94;D\\lambda_i\\qquad (12.18)$$ のように、 主部分空間に直交する固有ベクトルの固有値についての単なる和 で与えられる。したがって、$J$ の最小値は、小さい順から $D-M$ 個の固有値に対応する固有ベクトルを選ぶことによって得られ、つまり主部分空間を定義する固有ベクトルは大きい順から $M$ 個の固有値に対応する固有ベクトルになる。 実装 Wine Data Set (UCI Machine Learning Repository) のデータを利用し、13次元、178データ、3種類のワインの属性データから、2つの主成分を取って可視化を行います。 また、PCAは自作のモジュール （ kerasy.ML.decomposition.PCA ） を用います。 In [1]: # データ取得。 ! wget https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt --2019-10-07 13:20:45-- https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.228.133 Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.228.133|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 12173 (12K) [text/plain] Saving to: `wine.txt' wine.txt 100%[===================>] 11.89K --.-KB/s in 0s 2019-10-07 13:20:45 (40.4 MB/s) - `wine.txt' saved [12173/12173] In [2]: from kerasy.ML.decomposition import PCA In [3]: import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib.colors import LinearSegmentedColormap In [4]: colors = [( 1 , 0 , 0 ), ( 0 , 0 , 1 ), ( 0 , 1 , 0 )] n_bin = len ( colors ) cmap_name = 'my_list' cm = LinearSegmentedColormap . from_list ( cmap_name , colors , N = n_bin ) In [5]: df = pd . read_csv ( \"wine.txt\" , sep = \" \\t \" , index_col = 0 ) In [6]: df . head ( 3 ) Out[6]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } class Alcohol Malic acid Ash Alcalinity of ash Magnesium Total phenols Flavanoids Nonflavanoid phenols Proanthocyanins Color intensity Hue OD280/OD315 of diluted wines Proline 0 1 14.23 1.71 2.43 15.6 127 2.80 3.06 0.28 2.29 5.64 1.04 3.92 1065 1 1 13.20 1.78 2.14 11.2 100 2.65 2.76 0.26 1.28 4.38 1.05 3.40 1050 2 1 13.16 2.36 2.67 18.6 101 2.80 3.24 0.30 2.81 5.68 1.03 3.17 1185 class カラムがワインの種類を表しているので、この列は主成分分析から取り除きます。 In [7]: cls = df . iloc [:, 0 ] . values In [8]: df_use = df . iloc [:, 1 :] また、 データの標準化 を行います。 In [9]: df_std = df_use . apply ( lambda x : ( x - x . mean ()) / x . std (), axis = 0 ) In [10]: data = np . array ( df_std ) データの準備ができたので、主成分分析を行います。 In [11]: pca = PCA () pca . fit ( data ) features = pca . transform ( data ) In [12]: plt . figure ( figsize = ( 6 , 6 )) plt . scatter ( features [:, 0 ], features [:, 1 ], c = cls , cmap = cm , edgecolors = 'black' ) plt . title ( \"Same fig with slide :)\" ) plt . xlabel ( \"PC1\" ) plt . ylabel ( \"PC2\" ) plt . grid () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html"},{"title":"Nussinov Algorithm","text":"Nussinov Algorithmは、最もシンプルな二次構造予測アルゴリズムである。 「最大いくつの塩基対を作ることができるか」 を調べる。 動的計画法を用いて効率的に調べるために、以下のような Pseudoknot は無視している。様々な重要なRNAが、Pseudoknotの形をとることが確認されているが、相対的にこのような構造をとる確率は低いので、計算の効率を優先し、これらを無視する。 Algorithm ※「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 今回の実装では $j-i-1<3$ の時は、$i,j$ が塩基対を作れないものとしている。 ポイントはRecursionの最後の式で、 「$i$ から $k$ までの部分塩基配列」 と 「$k+1$ から $j$ までの部分塩基配列」 を足し合わせる操作を行う。 （Bifurcation） Initialization: $$\\begin{aligned} \\gamma(i,i)&=0&\\text{ for }i=1\\text{ to }L\\\\ \\gamma(i,i-1)&=0&\\text{ for }i=2\\text{ to }L \\end{aligned}$$ Recursion: $$ \\gamma(i,j) = \\max \\begin{cases} \\gamma(i+1,j)\\\\ \\gamma(i,j-1)\\\\ \\gamma(i+1,j-1)+\\delta(i,j)\\\\ \\max_{i\\leq k TraceBack 基本的なアルゴリズムは同じですが、 Bifurcationが起きた際にトレースバックポインターを複数用意する必要があることには注意が必要です。 bp = [] stack = [( 0 , N - 1 )] while ( stack ): i , j = stack . pop ( 0 ) delta = 1 if self . _is_bp ( sequence [ i ], sequence [ j ]) and ( j - i > 3 ) else 0 if ( i >= j ): continue elif gamma [ i + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( i + 1 , j )) elif gamma [ i ][ j - 1 ] == gamma [ i ][ j ]: stack . append (( i , j - 1 )) elif gamma [ i + 1 ][ j - 1 ] + delta == gamma [ i ][ j ]: bp . append (( i , j )); stack . append (( i + 1 , j - 1 )) else : # Bifurcation for k in range ( i , j ): if gamma [ i ][ k ] + gamma [ k + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( k + 1 , j )) stack . append (( i , k )) break 自作のモジュール （kerasy.Bio.structure.Nussinov） を使って実装します。 In [1]: from kerasy.Bio.structure import Nussinov In [2]: model = Nussinov () In [3]: # 以下の形のパラメタファイルを受け取ります。 ! cat params.json { \"type\": \"DNA\", \"Watson_Crick\": true, \"Wobble\": true } In [4]: model . load_params ( \"params.json\" ) In [5]: model . params () | parameter |value| -------------------- |type | DNA| |Watson_Crick| 1| |Wobble | 1| In [6]: # サンプル配列 sequence = \"GCGGAAACGGGGTCA\" In [7]: # 最大ペアの配列 model . predict ( sequence , memorize = True , traceback = True ) Nussinov Algorithm Score: 3 ================================================================= seq: GCGGAAACGGGGTCA : ( (( ))) ================================================================= In [8]: gamma = model . gamma In [9]: # DP行列は以下のようになっています。 model . _printAsTerai ( gamma , sequence ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 1 2 2 2 2 2 3 3 C - 0 0 0 0 0 0 1 2 2 2 2 2 3 3 G - - 0 0 0 0 0 1 1 1 1 1 2 3 3 G - - - 0 0 0 0 1 1 1 1 1 2 3 3 A - - - - 0 0 0 0 0 0 0 1 2 2 2 A - - - - - 0 0 0 0 0 0 1 2 2 2 A - - - - - - 0 0 0 0 0 1 2 2 2 C - - - - - - - 0 0 0 0 1 1 1 1 G - - - - - - - - 0 0 0 0 0 1 1 G - - - - - - - - - 0 0 0 0 1 1 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 $i,j$ が塩基対を組むときの塩基対最大化 塩基 $i,j$ が塩基対を組むという制約がある場合を考えます。これは、「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を保持した $\\omega(i,j)$ と $\\gamma(i,j)$ を組み合わせることで効率的に求めることができます。 Algorithm 「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を $\\omega(i,j)$ が保持している。 Initialization: $$\\omega(i,L) = 0$$ Recursion: $$ \\omega(i,j) = \\max \\begin{cases} \\omega(i-1,j)\\\\ \\omega(i,j+1)\\\\ \\omega(i-1,j+1)+\\delta(i-1,j+1)\\\\ \\max_{1\\leq k In [10]: model . outside ( sequence , memorize = True ) In [11]: omega = model . omega In [12]: # DP行列は以下のようになっています。 model . _printAsTerai ( omega , sequence ) \\ G C G G A A A C G G G G T C A G 3 3 3 2 2 2 1 1 1 0 0 0 0 0 0 C - 3 3 3 3 3 2 1 1 1 1 1 1 0 0 G - - 3 3 3 3 2 2 2 2 2 1 1 0 0 G - - - 3 3 3 2 2 2 2 2 1 1 0 0 A - - - - 3 3 2 2 2 2 2 1 1 0 0 A - - - - - 3 3 2 2 2 2 2 1 0 0 A - - - - - - 3 2 2 2 2 2 1 0 0 C - - - - - - - 2 2 2 2 2 1 0 0 G - - - - - - - - 3 3 3 2 2 1 1 G - - - - - - - - - 3 3 3 3 2 2 G - - - - - - - - - - 3 3 3 2 2 G - - - - - - - - - - - 3 3 2 2 T - - - - - - - - - - - - 3 2 2 C - - - - - - - - - - - - - 2 2 A - - - - - - - - - - - - - - 3 $Z(i,j)$ の計算 variable definition $\\gamma\\left(i,j\\right)$ the maximum number of base-pairs for subsequence from $i$ to $j$. $\\omega\\left(i,j\\right)$ the maximum number of base-pairs excluding subsequence from $i$ to $j$. 上記の定義より、$\\gamma,\\omega$ を用いて $Z(i,j)$ が以下のように求まることがわかります。 $$Z(i,j) = \\begin{cases} \\gamma\\left(i+1,j-1\\right) + 1 + \\omega\\left(i,j\\right) & (\\text{if }i\\text{ and }j\\text{-th nucleotides can form a base-pair})\\\\ 0 & (\\text{otherwise}) \\end{cases}$$ In [13]: model . ConstrainedMaximize ( sequence , memorize = False ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 2 0 0 0 0 0 3 0 C - 0 0 0 0 0 0 0 3 3 3 3 0 0 0 G - - 0 0 0 0 0 3 0 0 0 0 0 3 0 G - - - 0 0 0 0 3 0 0 0 0 0 3 0 A - - - - 0 0 0 0 0 0 0 0 3 0 0 A - - - - - 0 0 0 0 0 0 0 3 0 0 A - - - - - - 0 0 0 0 0 0 3 0 0 C - - - - - - - 0 0 0 0 3 0 0 0 G - - - - - - - - 0 0 0 0 0 2 0 G - - - - - - - - - 0 0 0 0 3 0 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 備忘録 Nussinov Algorithmでは、これまでの動的計画法とは異なり、 $i,j$ を斜め方向に舐める必要がありました。 そこで、その際に使用したコードを備忘録として残しておきます。 In [14]: import numpy as np In [15]: N = 4 In [16]: # Nussinov Algorithm (γ) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for ini_i in reversed ( range ( N )): diff = N - ini_i for i in reversed ( range ( ini_i )): arr [ i ][ i + diff ] = idx idx += 1 print ( arr ) [[0 3 5 6] [0 0 2 4] [0 0 0 1] [0 0 0 0]] In [17]: # Nussinov outsie (ω) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for j in reversed ( range ( N )): for i in range ( N - j ): arr [ i ][ j + i ] = idx idx += 1 print ( arr ) [[ 7 4 2 1] [ 0 8 5 3] [ 0 0 9 6] [ 0 0 0 10]] In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験-8.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験-8.html"},{"title":"Pair HMM の最尤推定","text":"Baum-Welch Pair HMMとは、二本の配列を受け取ってペアワイズアラインメントを出力するHMMで、 「アラインメントの確率的な解釈が可能になる」 （アラインメントのどの部分が信頼できるかを確率的に評価できる） という利点があります。 このPair HMMは、一般的なHMMと同様にBaum-Welchアルゴリズムによってパラメータを最尤推定していきます。 \\(\\xi\\) HMM 一般的なHMMでは、例えば 遷移確率 \\(A_{jk}\\) （状態 \\(j\\) から状態 \\(k\\) に遷移する確率） を最尤推定する際は、 直感的には 「状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「状態 \\(j\\) から遷移する回数」 で割れば最尤解が求まる。 実際の隠れ状態の遷移が確定していないので、 「 期待される 状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「 期待される 状態 \\(j\\) から遷移する回数」 で割れば良い。 \\(\\mathbf{z}_{n-1}\\) で状態 \\(j\\) におり、 \\(\\mathbf{z}_n\\) で状態 \\(k\\) にいる確率 \\(\\xi\\left(z_{n-1,j},z_{nk}\\right)\\) は、forward-backward algorithmの \\(\\alpha,\\beta\\) を用いれば以下のように求めることができる。 $$\\xi_n\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ \\(\\xi\\) を用いて、最尤推定を行う。 $$A_{j k}= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\qquad (13.19)$$ という様に行いますが、Pair HMMは、 挿入・欠失を考えるため、 \\(n\\) で配列 \\(\\mathbf{X,Y}\\) のどの要素（ \\(\\mathbf{x}_u,\\mathbf{y}_v\\) ）を考えているのか一意に定まらない という点で普通のHMMとは異なります。 Pair HMM そこで、 「 \\(n\\) ではなく \\(u,v\\) に注目する」 ことで、 \\((13.43)\\) の式を以下のように書き換えます。 $$\\xi_{u,v}\\left(i,j\\right)=\\frac{f_i\\left(u,v\\right)A_{ij}\\phi_j\\left(\\diamond_1\\right)b_j\\left(\\diamond_2,\\diamond_3\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ ここで、分子に注目すると、各変数の意味が variable meaning \\(f_i\\left(u,v\\right)\\) The probability of ending up in state \\(i\\) after aligning the two sequences \\(\\mathbf{X,Y}\\) up to observation \\(u\\) and \\(v\\) respectively. \\(A_{ij}\\) the transition probability from state \\(i\\) to state \\(j\\) . \\(\\phi_j\\left(\\diamond_1\\right)\\) the emission probability of emitting \\(\\diamond_1\\) in state \\(j\\) . \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) the probability of being in state \\(j\\) , given the sequences \\(\\mathbf{X,Y}\\) are aligned from observation \\(\\diamond_2+1\\) and \\(\\diamond_3+1\\) to the end of the sequences respectively. であるので、 \\(\\diamond\\) は状態によって異なり、具体的に書き下すと以下のようになります。 state\\variable \\(\\phi_j\\left(\\diamond_1\\right)\\) \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) \\(M\\) \\(e\\left(x_{u+1},y_{v+1}\\right)\\) \\(b_j\\left(u+1,v+1\\right)\\) \\(X\\) \\(e\\left(x_{u+1}\\right)\\) \\(b_j\\left(u+1,v\\right)\\) \\(Y\\) \\(e\\left(y_{v+1}\\right)\\) \\(b_j\\left(u,v+1\\right)\\) \\(\\gamma\\) 同様に \\(\\gamma\\) も考えると、 $$ \\gamma_n\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad(13.33)$$ から、 $$\\gamma_i\\left(u,v\\right)=\\frac{f_i\\left(u,v\\right)b_j\\left(u,v\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ のように書き換えることになります。 Maximization step ここまでで \\(\\gamma,\\xi\\) が求まったので、M stepで各パラメータを更新します。なお、以下で \\(w\\) は全ての記号の組を表します。 $$w\\in\\left\\{(k_x,k_y)|k_x,k_y\\in\\left\\{A,T,G,C,\\epsilon \\right\\}\\right\\}\\setminus(\\epsilon,\\epsilon)$$ \\(\\pi_k\\) $$\\pi&#94;{\\star}_i = \\sum_w\\gamma_i&#94;w(0,0)$$ \\(A_{ij}\\) $$A&#94;{\\star}_{ij} = \\frac{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\sum_{j}&#94;{K}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}$$ final emitting state \\(\\tilde{U}\\) \\(\\tilde{V}\\) \\(M\\) \\(U-1\\) \\(V-1\\) \\(X\\) \\(U-1\\) \\(V\\) \\(Y\\) \\(U\\) \\(V-1\\) \\(\\phi_{i}(k)\\) $$\\phi_i\\left(k\\right) = \\frac{\\sum_w\\sum_{u=0}&#94;{U\\ast1}\\sum_{v=0}&#94;{V\\ast2}\\gamma_i&#94;w\\left(u,v\\right)}{\\sum_w\\sum_{u=0}&#94;U\\sum_{v=0}&#94;V\\gamma_i&#94;w\\left(u,v\\right)}$$ \\(\\ast1\\) ： \\(x_u=k_x\\) and state \\(i\\) equals the state \\(M\\) or \\(X\\) . (in the state \\(Y\\) , a gap is present in observation stream \\(x\\) therefore \\(k_x\\) is not present.) \\(\\ast2\\) ： \\(y_v=k_y\\) and state \\(j\\) equals the state \\(M\\) or \\(Y\\) . Reference Wahle, Johannes and Armin Buch. \"Alignment and word comparison with Pair Hidden Markov Models.\" (2013). pp.22-31 Martijn B. Wieling. \"Comparison of Dutch Dialects\" (2007) pp.36-50 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験-7.html"},{"title":"生物統計論 第2回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section2.1 Central Limit Theorem Law of Large Numbers Estimation is accurate with many samples. Foundation of repeated measurement. Regardless of true distribution. Assuming independence. Theorem Let $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ be an independent trials process, with finite expected value $\\mu = \\mathbb{E}\\left(\\mathbf{X}_i\\right)$ Let $\\bar{\\mathbf{X}}_n = \\frac{1}{n}\\left(\\mathbf{X}_1,\\mathbf{X}_2+\\cdots+\\mathbf{X}_n\\right)$ be a sample mean. Weak law : $$\\lim_{n\\rightarrow\\infty}P\\left(|\\bar{\\mathbf{X}}_n-\\mu|>\\varepsilon\\right) = 0 \\quad\\left(\\forall\\varepsilon>0\\right)$$ Strong law $$P\\left(\\lim_{n\\rightarrow\\infty}\\bar{\\mathbf{X}}_n = \\mu\\right) = 1$$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Chebyshev Inequality Let $\\mathbf{X}$ be a discrete random variable with expected value $\\mu=\\mathbb{E}\\left(\\mathbf{X}\\right)$ $$ P \\left(|\\mathbf{X}-\\mu|>\\varepsilon\\right)\\leq\\frac{\\mathbb{V}\\left(\\mathbf{X}\\right)}{\\varepsilon&#94;2}$$ Example In [2]: N = 1000 seed = 0 In [3]: trials = np . arange ( 1 , N + 1 ) In [4]: dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = N ) ave_dices = np . cumsum ( dices ) / trials In [5]: plt . axhline ( 3.5 , color = \"blue\" , label = \"Theoretical mean\" ) plt . plot ( trials , ave_dices , label = \"Observed average\" , color = \"green\" ) plt . ylim ( 1 , 6 ) plt . title ( \"Average dice roll by number of rolls\" ) plt . ylabel ( \"Average\" ) plt . xlabel ( \"Number of trials\" ) plt . grid () plt . legend () plt . show () If we keep rolling the dice over and over again, the sample average of dice roll will converge to the true average. Exception The law of large numbers assumes the existance of expected values . Therefore, it will not hold when there is no expected value. (ex. Cauchy distribution ) Cauchy distribution $$ \\begin{aligned} f(x;x_0,\\gamma) &= \\frac{1}{\\pi\\gamma\\left[1 + \\left(\\frac{x-x_0}{\\gamma}\\right)&#94;2\\right]} = \\frac{1}{\\pi}\\frac{\\gamma}{\\left(x-x_0\\right)&#94;2 + \\gamma&#94;2} & \\begin{cases}x_0: \\text{Location paramete}\\\\\\gamma: \\text{Scale parameter}\\end{cases}\\\\ f(x;0,1) &= \\frac{1}{\\pi\\left(1+x&#94;2\\right)} & (\\text{standard cauchy distribution}) \\end{aligned} $$ In [6]: N = 5000 K = 3 seed = 1 In [7]: trials = np . arange ( 1 , N + 1 ) In [8]: samples = np . random . RandomState ( seed ) . standard_cauchy ( size = ( K * N )) . reshape (( K , N )) ave_samples = np . cumsum ( samples , axis = 1 ) / trials In [9]: for k in range ( K ): plt . plot ( trials , ave_samples [ k ], label = f \"Observation {k+1}\" ) plt . ylabel ( \"$(\\mathbf {X} _1+\\cdots+\\mathbf {X} _n)/n$\" ) plt . xlabel ( \"n\" ) plt . legend () plt . grid () Central Limit Theorem Sample mean follows normal distribution. Foundation of many statistical tests. Regardless of true distribution. Assuming independence. Theorem Let $\\{\\mathbf{X}_1,\\ldots,\\mathbf{X}_n\\}$ be a random sample of size $n$, which is a sequence of independent and identically distributed random variables drawn from a distribution. expected value given by $\\mu$. finite variance given by $\\sigma&#94;2$. Let $S_n:=\\sum_{k=1}&#94;n\\mathbf{X}_k$ $$P\\left(\\frac{S_n-n\\mu}{\\sqrt{n}\\sigma}\\leq\\alpha\\right)\\rightarrow\\frac{1}{\\sqrt{2\\pi}}\\int_{-\\infty}&#94;{\\alpha}e&#94;{-\\frac{x&#94;2}{2}}dx\\quad(n\\rightarrow\\infty)$$ Therefore: $$ \\begin{aligned} S_n&\\sim\\mathcal{N}\\left(n\\mu, n\\sigma&#94;2\\right) & (n\\rightarrow\\infty)\\\\ \\bar{\\mathbf{X}}_n = \\left(\\mathbf{X}_1+\\cdots+\\mathbf{X}_n\\right)/n&\\sim\\mathcal{N}\\left(\\mu,\\sigma&#94;2/n\\right) & (n\\rightarrow\\infty) \\end{aligned} $$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Example In [10]: N = 10000 ns = [ 10 , 100 , 1000 , 10000 ] roll = 4 seed = 0 In [11]: fig = plt . figure ( figsize = ( 12 , 6 )) ax_all = plt . subplot2grid (( 2 , len ( ns )), ( 0 , 0 ), colspan = len ( ns )) for i , n in enumerate ( ns ): ax = plt . subplot2grid (( 2 , len ( ns )), ( 1 , i )) dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = ( n , N )) rate_dice_eq_4 = np . count_nonzero ( dices == roll , axis = 1 ) / N freqs , bins , patches = ax . hist ( rate_dice_eq_4 , bins = 20 , density = True ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] ax_all . plot ( cent_bins , freqs , label = f \"n= {n} \" ) ax . set_title ( f \"n= {n} \" ) ax . set_xlabel ( f \"Probability of {roll} roll.\" ) ax . set_ylabel ( \"freq\" ) ax_all . set_title ( \"Central Limit Theorem\" ) ax_all . legend () plt . tight_layout () plt . show () Section2.2 ChIP-seq Peak Detection ChIP-sequencing, also known as ChIP-seq, is a method used to analyze protein interactions with DNA. ChIP-seq combines chromatin immunoprecipitation (ChIP) with massively parallel DNA sequencing to identify the binding sites of DNA-associated proteins. It can be used to map global binding sites precisely for any protein of interest. Previously, ChIP-on-chip was the most common technique utilized to study these protein–DNA relations. Peak calling Problem: How to identify transcription factor binding sites and histone modification enriched regions? Random Read Model Assume that read appears with equal probability in any region. Calcurate the p-value (the Probability of obtaining more or equally extreme value than observed value under the random model.) → Smaller is more significant. Setting the threshold (p-value) manually. We could calcurate the threshold ($n_{obs}$) → If the $n_{obs}$ exceeds this threshold, it is determined as the peak region. In [12]: from scipy.special import comb In [13]: g = 10000 # total DNA length n = 1000 # total number of reads l = 100 # bin size q = l / g n_bins = g / l lambda_ = n * q # mean read count seed = 0 xmax = 30 In [14]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) read_points = np . random . RandomState ( seed ) . randint ( 0 , g , size = n ) axL . scatter ( read_points , np . zeros ( shape = n ), s = 3 , label = \"read\" , color = \"black\" ) ledge = 0 read_counts = [] for edge in range ( l , g + 1 , l ): middl = ( ledge + edge ) / 2 count = np . count_nonzero ([( ledge <= read_points ) & ( read_points < edge )]) read_counts . append ( count ) if edge <= l * 10 : axL . axvline ( edge , color = \"red\" ) axL . text ( x = middl , y = 1e-3 , s = count , horizontalalignment = 'center' ) ledge = edge axL . set_xlim ( 0 , l * 10 ) axL . set_ylim ( - 1e-3 , 2e-3 ) axL . set_yticks ([]) axL . legend () Poisson = [ comb ( n , i , exact = True ) * ( q ** i ) * (( 1 - q ) ** ( n - i )) for i in range ( n )] axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axR . plot ([ read_counts . count ( i ) / n_bins for i in range ( n )], color = \"red\" , label = \"Observed\" ) axR . set_xlim ( 0 , xmax ) axR . set_xlabel ( \"Read count for each bin\" ) axR . set_ylabel ( \"Frequency\" ) axR . legend () plt . show () In [15]: n_obs = 15 p_values = np . cumsum ( Poisson [:: - 1 ])[:: - 1 ] # Calcurate p-value for each n_obs. thresh_p = 1e-2 bp = np . argmax ( p_values <= thresh_p ) In [16]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axL . fill_between ( np . arange ( n_obs , xmax ), y1 = Poisson [ n_obs : xmax ], y2 = 0 , facecolor = 'red' ) axL . annotate ( 'p-value \\n = $\\mathbb {P} (n_ {obs} \\leq N)$ \\n $=\\sum_{i=n_ {obs} }&#94;{\\infty}(\\lambda&#94;i/i!)\\cdot e&#94;{-\\lambda}$' , xy = ( 17 , 1e-2 ), xytext = ( 20 , 4e-2 ), fontsize = 12 , arrowprops = dict ( width = 1 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'black' ) ) axL . set_xlim ( 0 , 30 ) axL . set_title ( \"Poisson distribution\" ) axL . set_xlabel ( \"N\" ) axL . set_ylabel ( \"Freq\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( p_values , color = \"black\" ) axR . scatter ( n_obs , p_values [ n_obs ], color = \"red\" , label = \"pvalue($n_ {obs} $=\" + f \" {n_obs} )\" ) axR . scatter ( bp , p_values [ bp ], color = \"blue\" , label = \"Boundary point\" ) axR . axhline ( thresh_p , color = \"blue\" , label = f \"threshold(p_value= {thresh_p} )\" ) axR . axvspan ( xmin = bp , xmax = xmax , color = \"blue\" , alpha = 0.3 ) axR . set_xlim ( 0 , xmax ) axR . set_title ( \"The relationship between p-value and $n_ {obs} $\" ) axR . set_xlabel ( \"$n_ {obs} $\" ) axR . set_ylabel ( \"p-value\" ) axR . legend () plt . show () In this case, we could say the threshold($n_{obs}$) = 19(=bp). ※ In ChIP-seq, we have to do \"Tag shift\" due to the DNA strand asymmetry. （→ more: MACS ） Section2.3 Hypothesis Testing Terminology In [17]: fig , ax = plt . subplots ( figsize = ( 6 , 4 )) X = np . arange ( 10 , 100 , 1 ) Y = 1 / X # Null distribution ax . plot ( X , Y , color = \"red\" ), ax . text ( x = 15 , y = 8e-2 , s = \"Null distribution \\n $f_S(s|H)$\" , fontsize = 15 ) # Thereshold: Sα ax . plot (( 50 , 50 ),( 0 , 7e-2 ), color = \"black\" ), ax . text ( x = 48 , y = 7.5e-2 , s = \"$S_ {α} $\" , fontsize = 12 ) # Reject & Accept ax . annotate ( '' , xy = ( 75 , 5e-2 ), xytext = ( 52 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 55 , y = 5.5e-2 , s = \"reject\" , fontsize = 12 ) # Reject ax . annotate ( '' , xy = ( 25 , 5e-2 ), xytext = ( 48 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 35 , y = 5.5e-2 , s = \"accept\" , fontsize = 12 ) # Accept # Observation sample. ax . plot (( 70 , 70 ),( 0 , 1 / 70 ), color = \"black\" ), ax . scatter ( 70 , 1 / 70 , color = \"black\" ), ax . text ( x = 68 , y = 2e-2 , s = \"$S_ {obs} $\" , fontsize = 12 ) ax . set_xticks ([]), ax . set_yticks ([]) ax . set_xlabel ( \"S\" ), ax . set_ylabel ( \"freq\" ) ax . set_xlim ( min ( X ), max ( X )), ax . set_ylim ( min ( Y ), max ( Y )) plt . show () Null Hypothesis $H_0$ Alternative Hypothesis $H_1$ Test Static $S$ Null distribution Significance threshold Reject/Accept $H_0$ Null hypothesis is True Null hypothesis is False Do not reject Null hypothesis ($H_0$) Correct Type2 error (False negative) Reject Null hypothesis ($H_0$) Type1 error (False positive) Correct P-value distribute uniformly under $H_0$ Proof. p-value is the probability of obtaining more or equally extreme value than observed value under the null distribution. $$p = \\mathbb{P}\\left(S\\geq s|H_0\\right) = 1-\\mathbb{P}\\left(S By noting $F_0$ the cumulative distribution function of $S$ under $H_0$, we obtain: $$p = 1-F_0(s)$$ Thanks to the fact that the cdf is monotonic, increasing and (left-)continuous: $$\\mathbb{P}\\left(S\\geq s|H_0\\right) = \\mathbb{P}\\left(F_0\\left(S\\right)\\geq F_0\\left(s\\right)\\right) = 1-\\mathbb{P}\\left(F_0\\left(S\\right)< F_0\\left(s\\right)\\right)$$ Therefore, we have: $$\\mathbb{P}\\left(F_0\\left(S\\right) Which means that $F_0\\left(S\\right)$ is following a uniform distribution. And, as this means also that $1-F_0\\left(S\\right)$ is following a uniform distributed, then we can conclude that p-value are uniformly distributed under the null hypothesis. In [18]: from scipy.stats import norm In [19]: N = 10000 loc = 0 scale = 1 seed = 0 In [20]: obs = np . random . RandomState ( seed ) . normal ( loc = loc , scale = scale , size = N ) # observation sample \"s\". p_value = 1 - norm . cdf ( x = obs , loc = loc , scale = scale ) # p-value = 1 - F(s) In [21]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) freqs , bins , patches = axL . hist ( obs , bins = 50 , density = True , color = \"blue\" , alpha = 0.7 ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] axL . plot ( cent_bins , freqs , color = \"blue\" ) axL . set_title ( \"Histogram of observation sample s \\n under the null distribution (This time: Normal distribution)\" ), axL . set_xlabel ( \"observation s\" ), axL . set_ylabel ( \"Frequency\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . hist ( p_value , bins = 20 , edgecolor = \"black\" ) axR . set_title ( \"Histogram of p-value\" ), axR . set_xlabel ( \"p-value\" ), axR . set_ylabel ( \"Frequency\" ) plt . tight_layout () plt . show () ※ We could argue about the p-value under the null hypothesis, but we could not confirm whether null hypothesis is true or not. Section2.4 Hypothesis Test Example $\\chi&#94;2$-test Any statistical hypothesis test where the sampling distribution of the test statistic is a chi-squared distribution when the null hypothesis is true. Used to determine whether there is a significant difference between the expected frequencies and the observed frequencies in one or more categories. $\\chi&#94;2$-distribution $Y_i\\sim\\mathcal{N}\\left(0,1\\right), i=1,\\ldots,\\nu$: i.i.d. $X=Y_1&#94;2+\\cdots+Y_{\\nu}$ $\\rightarrow X\\sim\\chi&#94;2(\\nu), X\\in \\mathbb{R}_{\\geq0}$ $$ \\begin{aligned} f_X(x) &= \\frac{1}{2&#94;{\\nu/2}\\Gamma(\\nu/2)}x&#94;{\\nu/2-1}e&#94;{-x/2}\\\\ \\Gamma(z) &= \\int_{0}&#94;{\\infty}t&#94;{z-1}e&#94;{-t}dt(\\mathrm{Re}(z)>0)\\\\ \\mathbb{E}(X) &= \\nu\\\\ \\mathbb{V}(X) &= 2\\nu \\end{aligned} $$ In [22]: from scipy.stats import chi2 In [23]: K = 5 In [24]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( 0 , 8 , 1000 ) for k in range ( 1 , K + 1 ): plt . plot ( X , chi2 . pdf ( X , k ), label = f \"$k= {k} $\" ) plt . xlim ( 0 , 8 ), plt . ylim ( 0 , 1.0 ) plt . title ( \"$\\chi&#94;2$-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Pearson's chi-square test goodness of fit test # $C_1$ $C_2$ $\\cdots$ $C_k$ total Observation frequency $n_1$ $n_2$ $\\cdots$ $n_k$ $n$ Theoretical probability (under $H_0$) $p_1$ $p_2$ $\\cdots$ $p_k$ $1$ Theoretical frequency $m_1=np_1$ $m_2=np_2$ $\\cdots$ $m_k=np_k$ $n$ Null Hypothesis($H_0$): $P(C_i) = p_i\\quad(i=1,2,\\ldots,k)$ If null hypothesis is true, $U$ are distributed as $\\chi&#94;2(k-1)$. $$ U=\\sum_{i=1}&#94;k\\frac{(n_i-m_i)&#94;2}{m_i}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ test for independence A\\B $B_1$ $B_2$ $\\cdots$ $B_b$ total $A_1$ $n_{11}$ $n_{12}$ $\\cdots$ $n_{1b}$ $n_{1\\cdot}$ $A_2$ $n_{21}$ $n_{22}$ $\\cdots$ $n_{2b}$ $n_{2\\cdot}$ $\\vdots$ $\\vdots$ $\\vdots$ $\\cdots$ $\\ddots$ $\\vdots$ $A_a$ $n_{a1}$ $n_{a2}$ $\\cdots$ $n_{ab}$ $n_a$ total $n_{\\cdot1}$ $n_{\\cdot2}$ $\\cdots$ $n_{\\cdot b}$ $n_{a\\cdot}$ $P(A_i) = p_i,P(B_j)=q_j,\\quad (1\\leq i\\leq a,1\\leq j\\leq b)$ Null Hypothesis($H_0$): $A$ and $B$ are independence. $$P(A_i\\cap B_j) = p_iq_j$$ If null hypothesis is true, we could presume: $\\bar{p_i}=n_{i\\cdot}/n$, $\\bar{q_j}=n_{\\cdot j}/n$. $m_{ij} = n\\bar{p_i}\\bar{q_j}$ (Theoretical frequency) $$ U=\\sum_{i=1}&#94;a\\sum_{j=1}&#94;b\\frac{(n_{ij}-m_{ij})&#94;2}{m_{ij}}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ t-test One-sample test: Determine whether a sample of observations could have been generated by a process with a specific mean $\\mu$. Two-sample test: Compare the average values of the two data sets and determine if they came from the same population. t-distribution $$ \\begin{aligned} f_{t(\\nu)}(x) &= \\frac{\\Gamma\\left(\\frac{\\nu+1}{2}\\right)}{\\sqrt{\\nu\\pi}\\Gamma\\left(\\frac{\\nu}{2}\\right)}\\left(1+\\frac{x&#94;2}{\\nu}\\right)&#94;{-\\frac{\\nu+1}{2}}\\\\ \\mathbb{E}(X) &= 0(\\nu>1)\\\\ \\mathbb{V}(X) &= \\begin{cases}\\infty&(1<\\nu\\leq2)\\\\\\frac{\\nu}{\\nu-2}&(2<\\nu)\\end{cases} \\end{aligned} $$ In [25]: from scipy.stats import t as tdist In [26]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( - 6 , 6 , 1000 ) nus = [ 1 , 2 , 5 , 1000 ] for nu in nus : plt . plot ( X , tdist . pdf ( X , nu ), label = f \"$ν= {nu} $\" ) plt . plot ( X , norm . pdf ( X , 0 , 1 ), linestyle = ':' , linewidth = 5 , label = \"Standard Normal Distribution\" ) plt . xlim ( - 6 , 6 ), plt . ylim ( 0 , 0.4 ) plt . title ( \"t-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Student's t-test One-sample test: $$ X_1,\\ldots,X_n\\sim\\mathcal{N}(\\mu,\\sigma)\\text{: i.i.d.}\\\\ \\bar{X} = \\frac{X_1,\\ldots,X_n}{n}, S = \\frac{\\left(X_1-\\bar{X}\\right)&#94;2 + \\cdots+\\left(X_n-\\bar{X}\\right)&#94;2}{n-1}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}-\\mu\\sqrt{n}\\right)}{S}\\sim t(n-1) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{X_{11}+\\cdots+X_{1m}}{m}\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{X_{21}+\\cdots+X_{2n}}{n}\\\\ S=\\frac{\\sum_{i=1}&#94;m\\left(X_{1i}-\\bar{X}_1\\right)&#94;2 + \\sum_{i=1}&#94;n\\left(X_{2i}-\\bar{X}_2\\right)&#94;2}{m+n-2}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)\\sqrt{mn}}{S\\sqrt{m+n}}\\sim t(m+n-2) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{\\sum_{i=1}&#94;mX_{1i}}{m}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{1i} - \\bar{X}_1\\right)&#94;2}{m-1}, A=S_1/m\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{\\sum_{i=1}&#94;mX_{2i}}{n}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{2i} - \\bar{X}_2\\right)&#94;2}{n-1}, B=S_2/n\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)}{S\\sqrt{A+B}}\\approx t(\\nu), \\nu=\\frac{(A+B)&#94;2}{A&#94;2/(m-1)+B&#94;2/(n-1)} $$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html"},{"title":"レポート課題(10/3出題)","text":"fok8HKuW7Kjfjr3zCk+Ocw==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html"},{"title":"イントロダクション","text":"講義計画 確率と統計の基礎 ： 最先端の機械学習技術の数学的基盤 探索と最適化 ： 広大な探索空間から最適解を効率よく探索 機械学習 ： データの背後に潜む知識を発見 自然言語処理 ： 人工知能技術の応用例 # 日付 内容 担当 1 10/3 概要 杉山 2 10/10 最適化（連続1） 佐藤 3 10/17 最適化（連続2） 佐藤 4 10/24 最適化（探索） 本多 5 10/31 確率と統計 本多 6 11/14 確率と統計 本多 7 11/21 確率と統計 本多 8 11/28 機械学習（教師付き学習） 本多 9 12/5 機械学習（教師付き学習） 佐藤 10 12/12 自然言語処理 宮尾 11 12/19 自然言語処理 宮尾 12 12/26 自然言語処理 宮尾 13 1/9 機械学習（強化学習） 杉山 1 1/16 試験 佐藤 人工知能とは 1956年：\"The Dartmouth Summer Research Project on Artificial Intelligence\" にて Artificial Intelligence という言葉が提唱された。 Watoson Nature AlphaGo 人工知能関連分野の発展 人工知能研究 1960年頃(1次ブーム)：記号処理、論理推論 1980年頃(2次ブーム)：エキスパートシステム ニューラルネット研究 1960年頃(1次ブーム)：パーセプトロン（１層） 1990年頃(2次ブーム)：誤差逆伝播ほう（多層） 機械学習研究 1995年頃〜：統計・凸最適化 1995年頃〜：ベイズ推論 2010年頃〜：深層学習 3種類の機械学習 教師付き学習 ：人間が教師となり、コンピュータの学習を手伝う。 教師なし学習 ：コンピュータが人間の手を介さずに自発的に学習する。 強化学習 ：ロボットが人間の手を介さずに自発的に意思決定を行う。 まとめ 人工知能 ： 知的なコンピュータシステムを作る 数学・プログラミング・実世界応用をつなぐ架け橋 探索 ： 広大な探索空間を効率よく探索 機械学習 ： データの背後に潜む知識を発見","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html"},{"title":"Pair HMM","text":"※実装時のパラメータ PairHMMによるアラインメントを実装していく。なお、 （ kerasy.Bio.alignment.PairHMM ） に定義してあります。 In [1]: from kerasy.Bio.alignment import PairHMM In [2]: # サンプル配列 seqX = \"CCAGAGCTGTGGCAGACAGTGGCT\" seqY = \"CCAGCTGTGCAGACACTGGCTT\" In [3]: model = PairHMM () In [4]: ! cat params.json { \"delta\": \"1/10\", \"epsilon\": \"1/5\", \"tau\": \"1/30\", \"px_e_y\": \"1/8\", \"px_ne_y\": \"1/24\", \"qx\": \"1/4\", \"qy\": \"1/4\" } In [5]: model . set_params ( path = \"params.json\" ) Pair HMM とその利点 HMMのために開発されたアルゴリズムを使える。（らしい←正解ラベルの無いアラインメントでBaum-Welchアルゴリズムをどのように使うのかは現在考察中です。） アラインメントの確率的な解釈が可能になる。 グローバルアラインメントを出力する Pair-HMM Mは $x$ と $y$ がマッチした状態。（$x_i$ と $y_j$ がアライン） Iは $x$ に挿入が起きている状態。（$x_i$ と $-$ がアライン） Dは $x$ に欠失が起きている状態。（$-$ と $y_j$ がアライン） （以下では上から $V&#94;M,V&#94;X,V&#94;Y$ と記述している。） Pair HMMのためのViterbiアルゴリズム 2本数の配列 $x,y$ を与えると確率最大のアラインメントを求めるアルゴリズム。 Initialization: $$ \\begin{cases} V&#94;M(0,0)=1, V&#94;M(i,0)=V&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ V&#94;X(0,0)=0, V&#94;X(1,0)=\\delta q_{x_1} V&#94;X(i,0)=\\varepsilon q_{x_i}V&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ V&#94;Y(0,0)=0, V&#94;Y(0,1)=\\delta q_{y_1} V&#94;Y(0,j)=\\varepsilon q_{y_j}V&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} V&#94;M(i,j) &= p_{x_iy_j}\\max\\begin{cases}(1-2\\delta-\\tau)V&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;Y(i-1,j-1)\\end{cases}\\\\ V&#94;X(i,j) &= q_{x_i}\\max\\begin{cases}\\delta V&#94;M(i-1,j)\\\\\\varepsilon V&#94;X(i-1,j)\\end{cases}\\\\ V&#94;Y(i,j) &= q_{y_j}\\max\\begin{cases}\\delta V&#94;M(i,j-1)\\\\\\varepsilon V&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$v_e = \\tau\\max\\left(V&#94;M(n,m),V&#94;X(n,m),V&#94;Y(n,m)\\right)$$ In [6]: P_optimal = model . align ( seqX , seqY , return_score = True ) Pair HMM (Viterbi) Alignment score: 3.551370651291424e-30 |parameter| value | -------------------------------- |delta | 0.1| |epsilon | 0.2| |tau | 0.03333333333333333| |px_e_y | 0.125| |px_ne_y |0.041666666666666664| |qx | 0.25| |qy | 0.25| =============================================================== X: CCAGAGCTGTGGCAGACAGTGGC-T Y: CC--AGCTGT-GCAGACACTGGCTT =============================================================== In [7]: print ( f \"π*= {P_optimal} \" ) π*=3.551370651291424e-30 アラインメントの信頼性 配列 $x,y$ が与えられた時、アラインメント $\\pi$ が得られる条件付き確率を考えることができ、それが アラインメントの信頼度 を表していると考ることができる。 $$ P(\\pi|x,y) = \\frac{P(x,y,\\pi)}{P(x,y)}\\\\ P(x,y) = \\sum_{\\text{alignments }\\pi}P(x,y,\\pi) $$ ※ なお、ここで $P(x,y)$ は $x,y$ に関する全ての可能なアラインメントについて確率を足し合わせたもの であり、Forwardアルゴリズムで計算することができる。 Pair HMMのためのForwardアルゴリズム ※ Viterbiの $\\max$ を $\\text{sum}$ に変更しただけ。 Initialization: $$ \\begin{cases} F&#94;M(0,0)=1, F&#94;M(i,0)=F&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ F&#94;X(0,0)=0, F&#94;X(1,0)=\\delta q_{x_1} F&#94;X(i,0)=\\varepsilon q_{x_i}F&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ F&#94;Y(0,0)=0, F&#94;Y(0,1)=\\delta q_{y_1} F&#94;Y(0,j)=\\varepsilon q_{y_j}F&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} F&#94;M(i,j) &= p_{x_iy_j}\\text{sum}\\begin{cases}(1-2\\delta-\\tau)F&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;Y(i-1,j-1)\\end{cases}\\\\ F&#94;X(i,j) &= q_{x_i}\\text{sum}\\begin{cases}\\delta F&#94;M(i-1,j)\\\\\\varepsilon F&#94;X(i-1,j)\\end{cases}\\\\ F&#94;Y(i,j) &= q_{y_j}\\text{sum}\\begin{cases}\\delta F&#94;M(i,j-1)\\\\\\varepsilon F&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$F_e = \\tau\\ \\text{sum}\\left(F&#94;M(n,m),F&#94;X(n,m),F&#94;Y(n,m)\\right)$$ In [8]: F , P_all = model . forward ( seqX , seqY ) In [9]: print ( f \"𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)= {P_all} \" ) 𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)=2.0457988072916236e-28 In [10]: print ( f \"P(π*|x, y)={P_optimal/P_all}\" ) P(π*|x, y)=0.017359334840912267 $x_i$ と $y_j$ がアラインされる確率 次の式で表される。 $$ \\begin{aligned} P(x_i\\diamondsuit y_i|x,y) &= \\frac{\\sum_{\\pi\\in\\Omega_{ij}}P(x,y,\\pi)}{P(x,y)}\\\\ &= \\frac{F&#94;M(i,j)\\cdot B&#94;M(i,j)}{P(x,y)} \\end{aligned}$$ ※ $\\Omega_{ij}$：$x_i$ と $y_j$ がアラインされるアラインメントの集合 Pair HMMのためのBackwardアルゴリズム Needleman-Wunsh-Gotoh のBackwardアルゴリズムとの類似性に注目！ Initialization: $$ \\begin{cases} B&#94;M(n,m)=B&#94;X(n,m)=B&#94;Y(n,m)=\\tau\\\\ B&#94;X(i,m)=\\varepsilon q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;Y(i,m)=\\varepsilon q_{y_{j+1}}B&#94;X(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ B&#94;M(i,m)=\\delta q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;M(n,j)=\\delta q_{y_{j+1}}B&#94;Y(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ \\end{cases} $$ Recursion: $i=n-1,\\ldots,1,\\quad j=m-1,\\ldots,1$ $$ \\begin{aligned} B&#94;M(i,j) &= \\text{sum}\\begin{cases}(1-2\\delta-\\tau)p_{x_iy_j}B&#94;M(i+1,j+1)\\\\\\delta q_{x_{i+1}}B(i+1,j)\\\\\\delta q_{y_{j+1}}B&#94;Y(i,j+1)\\end{cases}\\\\ B&#94;X(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{x_{i+1}}B&#94;X(i+1,j)\\\\ B&#94;Y(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{y_{j+1}}B&#94;Y(i,j+1)\\\\ \\end{aligned} $$ In [11]: B = model . backward ( seqX , seqY ) In [12]: Pij = ( F * B ) / P_all In [13]: import seaborn as sns import matplotlib.pyplot as plt In [14]: sns . heatmap ( Pij ) plt . show () In [15]: # 可視化のために pandas を使用。 import pandas as pd r , c = Pij . shape pd . set_option ( 'display.max_rows' , r ) pd . set_option ( 'display.max_columns' , c ) In [16]: df = pd . DataFrame ( Pij ) In [17]: df Out[17]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 0 1.139605e+00 1.145169e-02 1.061625e-04 9.380071e-06 7.330898e-07 1.256616e-08 5.467340e-10 2.910714e-11 5.763005e-12 3.410212e-13 5.102192e-15 2.187247e-16 1.988821e-17 1.147484e-18 1.367416e-20 6.720910e-22 4.976161e-24 7.098501e-26 9.237930e-28 2.211060e-29 3.898762e-32 1.763484e-40 1 1.002452e-01 9.915333e-01 6.192125e-03 1.868999e-04 4.332564e-05 9.546525e-07 4.066396e-08 2.157028e-09 9.465879e-11 4.846141e-11 4.058759e-13 3.267685e-14 8.754145e-16 1.928520e-16 1.373420e-18 1.082830e-19 9.927246e-22 1.394016e-23 1.508549e-25 4.777080e-27 9.963503e-30 8.788027e-38 2 2.530997e-02 1.110298e-01 7.189425e-01 4.724160e-03 2.510915e-04 4.961792e-05 1.187062e-06 1.017255e-07 3.970235e-09 2.068131e-10 9.703401e-11 7.255597e-13 1.565563e-13 2.611280e-15 3.254769e-16 2.694314e-18 1.079695e-19 1.562036e-21 1.545424e-23 1.735256e-25 1.265060e-27 2.215960e-35 3 1.439692e-03 1.313691e-01 9.101842e-02 4.446381e-01 5.912097e-03 3.126913e-04 8.585244e-05 1.538885e-06 1.919091e-07 8.250641e-09 2.393023e-10 1.283784e-10 1.387610e-12 2.250638e-13 4.821068e-15 2.111543e-16 4.457287e-18 2.448800e-19 3.227733e-21 1.284984e-23 8.240296e-26 3.335362e-33 4 3.517101e-05 3.000139e-03 4.131934e-01 8.504087e-02 1.663724e-01 9.561056e-03 2.917045e-04 9.039141e-05 1.788740e-06 1.312414e-07 2.869640e-08 4.101759e-10 1.507867e-10 3.456004e-12 5.959996e-13 5.757530e-15 2.024716e-16 4.111221e-18 7.279991e-20 1.060049e-21 6.121304e-24 4.843531e-31 5 9.934762e-06 1.458875e-04 3.927027e-03 6.740773e-01 8.441291e-02 7.234362e-02 1.094905e-02 1.879103e-04 1.252776e-04 1.454564e-06 1.059818e-07 2.729047e-08 9.494833e-10 8.082013e-11 1.033243e-11 3.411004e-13 6.554134e-15 3.958672e-16 8.201302e-18 3.482706e-20 2.714352e-22 4.461969e-29 6 5.322130e-07 6.381400e-05 4.257593e-04 6.688387e-03 9.174344e-01 4.917686e-02 4.329939e-02 3.819221e-03 1.763480e-04 1.328334e-04 1.940120e-06 9.105133e-08 1.541103e-08 2.609538e-09 8.150731e-11 2.404569e-11 1.889654e-13 3.985572e-15 1.024288e-16 6.839760e-18 1.341414e-20 4.476503e-27 7 5.863612e-10 7.892422e-07 1.012986e-04 1.397365e-03 1.342858e-02 1.002812e+00 2.593641e-02 3.890025e-02 1.670263e-03 1.614886e-04 8.871868e-05 1.756325e-06 1.155298e-07 1.122902e-08 2.203971e-09 1.028948e-10 2.509711e-11 1.531285e-13 2.099939e-15 4.258022e-17 2.374690e-18 1.208869e-24 8 1.171184e-11 2.035729e-09 3.700419e-07 2.397639e-04 4.844063e-03 2.599346e-02 9.949710e-01 1.502418e-02 2.712144e-02 1.478651e-03 1.433184e-04 6.712671e-05 1.454730e-06 9.766789e-08 9.072910e-09 2.328874e-09 6.340026e-11 1.502027e-11 1.916941e-13 1.314758e-15 1.242412e-17 4.691715e-23 9 3.005919e-13 6.399055e-11 5.515662e-09 3.748097e-07 1.153167e-04 1.497122e-02 6.310820e-02 8.863944e-01 1.030851e-02 1.491223e-02 2.002265e-03 8.941933e-05 3.530505e-05 1.470719e-06 9.754840e-08 8.043302e-09 3.375435e-09 3.679377e-11 2.917845e-12 5.484419e-14 1.471719e-15 4.178025e-21 10 1.792807e-15 1.557812e-12 1.844985e-10 1.289502e-08 7.545128e-07 6.340240e-05 2.061627e-02 1.787166e-01 5.419262e-01 1.188051e-02 1.024380e-02 2.347055e-03 7.577232e-05 1.796622e-05 1.114937e-06 7.069534e-08 8.011504e-09 2.756012e-09 4.374664e-11 6.704524e-13 1.075503e-14 1.217530e-19 11 1.923711e-17 4.362099e-15 1.941124e-12 6.147024e-10 1.551641e-08 5.550653e-07 1.380449e-04 9.537258e-03 5.398937e-01 1.863598e-01 1.452105e-02 9.548898e-03 1.837989e-03 5.136835e-05 1.397535e-05 6.835406e-07 5.429499e-08 8.819330e-09 1.851138e-09 1.231506e-11 1.775772e-13 2.576473e-18 12 5.638842e-19 1.455168e-16 9.139939e-15 1.547158e-12 1.037887e-09 2.248539e-08 1.151600e-06 9.872926e-05 5.973776e-03 8.862574e-01 6.786997e-02 1.624026e-02 4.029496e-03 2.179139e-03 2.921118e-05 1.601828e-05 5.561847e-07 3.123249e-08 2.978327e-09 9.604760e-10 3.744283e-12 9.636167e-17 13 3.331427e-21 7.494769e-19 2.963338e-16 6.987305e-15 4.315679e-12 6.087761e-10 3.497465e-08 3.604967e-06 8.639915e-05 5.915526e-03 9.923696e-01 2.749764e-02 2.345296e-02 2.411435e-03 1.600356e-03 2.967960e-05 1.263876e-05 5.535990e-07 1.777340e-08 1.086922e-09 1.497803e-10 4.715717e-15 14 8.334075e-23 3.113616e-20 1.885485e-18 4.096232e-16 1.085250e-14 2.877122e-12 9.801182e-10 2.465783e-08 7.111413e-06 1.332057e-04 5.532024e-03 1.019408e+00 1.546140e-02 2.230611e-02 1.326417e-03 7.657518e-04 3.756285e-05 1.397395e-05 7.084890e-07 8.614586e-09 3.251784e-10 1.560898e-13 15 2.761536e-24 1.577325e-22 1.652226e-19 6.855680e-18 4.640406e-16 1.789313e-14 1.881340e-12 7.696555e-10 3.721167e-08 3.131924e-06 2.768933e-04 5.432195e-03 1.019385e+00 1.220031e-02 2.678270e-02 1.012065e-03 4.234835e-04 2.691482e-05 8.312535e-06 2.735984e-07 4.296980e-09 1.264609e-12 16 1.125679e-25 3.526855e-23 5.295754e-22 1.029758e-19 2.954167e-17 8.415539e-16 3.337555e-14 1.886064e-12 3.708635e-10 8.103999e-08 2.979865e-06 2.717052e-04 5.867388e-03 1.008690e+00 1.398136e-02 2.796359e-02 1.094449e-03 2.222028e-04 1.653854e-05 6.727102e-06 7.321521e-08 3.095212e-11 17 5.314132e-29 1.371847e-25 1.002377e-22 1.431441e-21 2.329882e-19 2.824449e-17 1.264033e-15 1.039492e-13 1.896385e-12 2.117496e-10 8.676212e-08 1.428983e-06 4.224040e-04 7.551663e-03 9.828098e-01 2.577489e-02 2.154489e-02 1.348560e-03 1.271999e-04 1.123527e-05 1.554246e-06 1.061734e-09 18 1.311292e-30 3.344026e-28 1.039987e-25 1.917693e-22 4.842995e-21 2.644625e-19 5.424283e-17 1.016892e-15 2.466777e-13 3.876336e-12 1.412328e-10 6.644843e-08 1.307534e-06 2.267450e-04 1.352321e-02 9.236001e-01 4.123399e-02 2.242045e-02 1.780378e-03 1.137684e-04 4.658387e-06 2.707169e-08 19 3.685034e-32 1.308860e-29 1.727006e-27 1.846830e-25 9.168694e-23 2.025241e-20 2.015727e-19 7.009128e-17 1.110761e-15 2.135974e-13 8.991483e-12 3.294862e-10 2.170110e-08 1.342768e-06 1.738901e-04 1.366663e-02 9.157034e-01 5.085192e-02 1.134612e-02 1.333942e-03 1.601513e-04 7.755075e-07 20 2.627187e-34 3.307561e-31 6.412082e-29 8.638204e-27 5.130913e-25 5.421429e-23 2.735844e-20 4.581117e-19 4.673008e-17 1.996269e-15 1.567873e-13 2.425635e-11 7.144030e-10 2.339911e-08 4.401237e-07 1.583398e-04 8.993801e-03 8.715290e-01 1.032744e-01 9.301698e-03 8.040002e-04 1.264439e-05 21 3.712503e-36 1.248259e-33 7.484327e-31 4.015876e-28 1.275117e-26 7.126689e-25 1.294296e-22 1.126902e-20 1.562753e-18 3.245370e-17 8.822502e-16 3.618329e-13 1.719160e-11 9.436607e-10 3.634534e-08 4.567520e-07 2.489897e-05 1.031566e-02 8.313752e-01 1.337435e-01 9.529909e-03 1.755113e-04 22 1.081603e-37 4.975375e-35 3.859345e-33 1.396911e-30 8.994506e-28 2.233130e-26 1.907603e-24 1.395483e-22 7.223861e-21 2.385762e-18 3.020013e-17 1.437842e-15 1.876938e-13 2.135337e-11 5.432165e-10 7.346489e-08 4.608162e-07 1.776497e-05 2.915009e-03 7.255898e-01 2.520881e-01 4.862597e-03 23 7.053935e-40 3.695478e-37 9.639089e-35 1.470014e-32 2.795455e-30 1.235666e-27 2.213410e-26 7.771768e-24 1.829949e-22 1.539068e-20 1.623359e-18 3.985091e-17 3.521057e-15 1.986472e-13 1.486597e-11 3.334896e-10 7.576041e-08 5.116867e-07 2.834710e-05 1.528768e-03 3.676275e-01 6.239253e-01 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験-6.html"},{"title":"生物物理学 第2回","text":"講師： 樋口秀男 生命体（生物）の一般的定義 生物とは、以下の四つの条件を満たす物質システム 自己と外界との境界 エネルギーと物質の代謝 自己複製 恒常性 電子 分子 細胞数 整体の階層性 $10&#94;{28}$ $10&#94;{23}$ $10&#94;{13}$ ヒト 意識・運動・代謝 $10&#94;{24}$ $10&#94;{19}$ $10&#94;{9}$ 心臓 循環・拡散 $10&#94;{15}$ $10&#94;{10}$ $10&#94;{0}$ 心筋細胞 生理的なリズム単位 $10&#94;{5}$ $10&#94;{5}$ 筋節 ゆらぎを制した振動 $10&#94;{0}$ タンパク質 反応のゆらぎ $10&#94;{2}$ アミノ酸 タンパク質の性質の起源 $10&#94;{0}$ 電子 量子力学の支配領域 生命科学を覆う謎 生命誕生の謎（+生命の進化、分化の謎） タンパク質構造の決定と機能との関係の謎 細胞が超多種分子（タンパク質、脂質、小分子、イオン、…）の濃度・種類・機能の制御を行う謎 個体（臓器、器官等）の構造と機能構築の謎 生命誕生の謎 元素誕生は超新星の爆発→重金属ができる。 現宇宙の元素の割合と人体内の元素比が非常に似通っている。 RNAワールド プロテインワールド 原始地球上に存在したと仮定される、RNA からなる自己複製系のこと。また、これがかつて存在し、現生生物へと進化したという仮説。 まずアミノ酸ができ、重合してポリペプチド、さらにタンパク質が作り出され、これが触媒として働いて生命を作り出したという仮説。 生命誕生を示唆した実験事実 ミラーの放電によるアミノ酸合成(1953) $\\mathrm{CH_3,NH_3,H_2,H_2O}$ を含む気体に放電（落雷を模した）をする。 実験２週間後に以下の化合物 （アミノ酸） ができた。 グリシン アラニン グルタル酸 酢酸（脂肪酸） 塩基や糖（リボース）、核酸基、RNA、タンパク質なども化学合成可能。 生命基本物質の化学合成が成功した理由 地球には、エネルギーの高い（海底火山、紫外線、雷、高音）場所と低く安定な場所が共存していたので、分子は 高エネルギー環境で合成され、低エネルギー環境で安定化する ことができた。 $$A\\overset{k_1}{{\\longrightarrow}}B\\overset{k_2}{{\\longrightarrow}}C$$ In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: def simulate ( ax , color , tp , A = 1 , B = 0 , C = 0 , dt = 1e-3 , k1 = 0.07 , k2 = 0.02 , K = 1 ): time = np . arange ( 0 , 100 , dt ) As = np . zeros ( shape = len ( time )) Bs = np . zeros ( shape = len ( time )) Cs = np . zeros ( shape = len ( time )) for i , t in enumerate ( time ): dA = ( - k1 * A ) * dt * K dB = ( k1 * A - k2 * B ) * dt * K dC = ( k2 * B ) * dt * K A += dA ; B += dB ; C += dC As [ i ] = A ; Bs [ i ] = B ; Cs [ i ] = C if t > tp : K = 1e-6 # 温度を下げ、反応速度が1e-6倍になったことをシミュレーション ax . plot ( time , As , color = color ) ax . plot ( time , Bs , color = color ) ax . plot ( time , Cs , color = color ) if tp < 100 : ax . vlines ( x = tp , ymin = 0 , ymax = 1 , linestyle = \":\" ) return ax In [3]: fig , ax = plt . subplots () ax = simulate ( ax = ax , color = \"red\" , tp = 20 ) ax = simulate ( ax = ax , color = \"black\" , tp = 100 ) ax . set_xlabel ( \"Time\" ) ax . set_ylabel ( \"RQ\" ) ax . set_title ( \"Simulation Result\" ) plt . show () 上記のシミュレーション結果から、$A,B$ 分子を得るためには、 途中で（温度が下がるなどの結果）反応速度が下がる必要がある ことがわかる。 生体分子が濃縮され、多次反応による分子合成速度が上がった。 地球は巨大で多様な反応槽であったため、合成確率が上がった。 考えられる生物 地球型炭素生物 地球環境のように水と二酸化炭素（あるいはメタン）が豊富な惑星であるなら、情報記憶（DNA）→伝令（mRNA）→機能（タンパク質、RNA）のような地球型の仕事を分担した炭素生物が生まれる可能性は高い。 炭素生物 vs ケイ素生物 常温常圧で安定な炭素ー炭素結合 とは違い、 ケイ素ーケイ素結合はパイ結合やシグマ結合による二重三重結合を作る傾向がほとんど無く、非常に不安定 である。 炭素ーケイ素結合は安定 なので、炭素生物の中にケイ素が含まれるだろう。したがって、ケイ素生物の存在する確率は非常に低い。 金属生物 常温において金属結合が安定であり、分子としての機能を持つことは困難であるため、生物の中心にはならないだろう。ただし、金属イオンや錯体として、炭素生物やケイ素生物に利用されることはありうる。 講義のまとめ 生命分子や細胞の種類は多く、構造や機能をどのように理解するかが、 生命科学全体の 課題である。 生命は 宇宙の元素を効率よく利用した。 地球上の 高↔︎低エネルギーを行き交い 、多様な環境や濃縮により高確率かつ安定的に生体分子が合成された。 これが生命の誕生の確率を大きくした。 初めにRNAが合成され、それを鋳型としてタンパク質が合成され、原子生命が誕生したと想像される。 系外惑星にも、炭素生命体が存在する可能性がある。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html"},{"title":"ペアワイズアラインメント","text":"ペアワイズアラインメントとは 2本のDNAの塩基配列（タンパク質のアミノ酸配列）を比較する方法の一つ バイオインフォマティクスでは最も基本的な解析手法 なぜDNA配列の比較をするのか DNAの機能を知りたい （∵ DNAの配列が似ていると機能が似ている） DNAのどの部分が重要かを知りたい。 （∵ 「保存されている＝重要」だと考えられる） 生物の進化系統樹を知りたい 新型シーケンサーで読まれたDNAの由来を知りたい DNAの変異や新型シークエンサーの読み取りエラーでは 長さが異なる ことがあるので、 長さの変化を考慮し効率の良い動的計画法 を用いる アラインメントの種類 説明 例 グローバルアラインメント 2本の配列の 全体 をアラインメントする。 Needleman-Wunsch ローカルアラインメント 2本の配列の 似ている部分を検出 し、その部分をアランメントする Smith-Waterman 実装 各種アラインメントを実装していく。なお、全て Affine gap penalty を利用する。 In [1]: from kerasy.Bio.alignment import NeedlemanWunshGotoh , SmithWaterman , BackwardNeedlemanWunshGotoh In [2]: # サンプル配列 seqX = \"GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACGGAGCTGTGGCAGACCTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGCGAGGACTG\" seqY = \"CGCATGCGGAGTGAGGGGAGCAGTTGGGAACAGATGGTCCCGCCGAGGGACCGGTGGGCAGACGGGGCCAGCTGTGGCAGACACTGGCTTCTAACCACCGAACGTTCTTTCCGCTCCGC\" Needleman-Wunsch-Gotoh 自作のモジュール （ kerasy.Bio.alignment.NeedlemanWunshGotoh ） を使ってアラインメントをします。 In [3]: model = NeedlemanWunshGotoh () In [4]: model . align ( seqX , seqY ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== Smith-Waterman 自作のモジュール （ kerasy.Bio.alignment.SmithWaterman ） を使ってアラインメントをします。 In [5]: model = SmithWaterman () In [6]: model . align ( seqX , seqY ) Smith-Waterman Alignment score: 37.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== Aligned positions: X[0,111] Y[7,118] X: GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACG Y: GGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GGGCAGACG X: G----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGC Y: GGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCTCCGC =============================================================== 制約付きアラインメント $x_i$ と $y_j$ がアラインされるという制約下で最大のアラインメントスコアを求める。 全てのパターンを列挙すると $\\mathcal{O}(n&#94;2m&#94;2)$ の時間がかかるが、 後ろ向きアラインメント と組み合わせることで全てのパターンを $\\mathcal{O}(nm)$ で計算可能。 前向き：xiとyjがアラインされる時の、iまでとjまでの配列の最大アラインメントスコアを保持。 後ろ向き：xiとyjがアラインされる時の、i+1以降とj+1以降の配列の最大アラインメントスコアを保持。 Needleman-Wunsch-Gotohの逆向きアラインメントは （ kerasy.Bio.alignment.BackwardNeedlemanWunshGotoh ） に定義してあります。 In [7]: model_forward = NeedlemanWunshGotoh () model_backward = BackwardNeedlemanWunshGotoh () In [8]: model_forward . align ( seqX , seqY , memorize = True ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== In [9]: model_backward . align ( seqX , seqY , memorize = True ) Backward Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGGAACA-GATGGTCC-CGCCGAGGGACCGGTGG- X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTTC-TAACCACCGAACGTTCTTTCCG-CT X: CCGCGAGGACT Y: CCGC------- =============================================================== In [10]: k = 3 n = len ( seqX ) + 1 m = len ( seqY ) + 1 In [11]: M = model_forward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] bM = model_backward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] In [12]: A = M + bM In [13]: # 上の配列を見れば、seqX[0] と seqY[7] がアラインされている時に最大スコア14を取ることがわかるので、それを確かめる。 print ( A [ 0 , 7 ]) 14.0 In [14]: # 可視化のために pandas を使用。 import pandas as pd pd . set_option ( 'display.max_rows' , m ) pd . set_option ( 'display.max_columns' , n ) In [15]: df = pd . DataFrame ( A ) In [16]: df Out[16]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 0 12.0 10.0 8.0 8.0 8.0 10.0 8.0 14.0 7.0 2.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -17.0 -20.0 -25.0 -26.0 -31.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -51.0 -54.0 -55.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -129.0 -132.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -150.0 -156.0 -156.0 -159.0 -160.0 -163.0 -164.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -181.0 -184.0 -187.0 -190.0 -193.0 -194.0 -197.0 -198.0 -201.0 -200.0 -203.0 -206.0 -209.0 -210.0 -211.0 -214.0 -217.0 -218.0 -221.0 -224.0 -225.0 -228.0 -229.0 -230.0 -235.0 -238.0 -241.0 -242.0 -243.0 -246.0 1 5.0 12.0 8.0 6.0 6.0 8.0 8.0 8.0 14.0 5.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -14.0 -17.0 -22.0 -25.0 -26.0 -33.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -53.0 -54.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -131.0 -132.0 -135.0 -140.0 -141.0 -144.0 -147.0 -148.0 -150.0 -157.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -171.0 -174.0 -179.0 -180.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -200.0 -203.0 -206.0 -211.0 -210.0 -211.0 -216.0 -217.0 -220.0 -223.0 -224.0 -227.0 -228.0 -229.0 -232.0 -237.0 -240.0 -243.0 -242.0 -243.0 2 2.0 3.0 10.0 8.0 6.0 6.0 6.0 6.0 6.0 14.0 3.0 0.0 -3.0 -4.0 -9.0 -12.0 -13.0 -16.0 -17.0 -24.0 -27.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -47.0 -48.0 -53.0 -54.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -125.0 -126.0 -131.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -150.0 -150.0 -157.0 -156.0 -159.0 -158.0 -163.0 -166.0 -169.0 -172.0 -171.0 -176.0 -177.0 -180.0 -183.0 -184.0 -187.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -200.0 -203.0 -204.0 -209.0 -210.0 -213.0 -214.0 -217.0 -220.0 -221.0 -224.0 -225.0 -228.0 -231.0 -234.0 -237.0 -238.0 -241.0 -242.0 3 -1.0 2.0 3.0 8.0 6.0 6.0 4.0 6.0 6.0 4.0 14.0 1.0 0.0 -5.0 -4.0 -9.0 -12.0 -13.0 -18.0 -17.0 -24.0 -29.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -49.0 -48.0 -55.0 -56.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -127.0 -126.0 -133.0 -136.0 -137.0 -142.0 -143.0 -146.0 -150.0 -151.0 -150.0 -157.0 -156.0 -159.0 -160.0 -165.0 -166.0 -169.0 -172.0 -171.0 -176.0 -179.0 -182.0 -185.0 -186.0 -187.0 -192.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -209.0 -212.0 -213.0 -216.0 -217.0 -220.0 -223.0 -224.0 -225.0 -230.0 -233.0 -236.0 -239.0 -238.0 -241.0 4 -4.0 -3.0 0.0 1.0 8.0 4.0 4.0 2.0 4.0 4.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -11.0 -14.0 -15.0 -20.0 -19.0 -22.0 -27.0 -26.0 -29.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -60.0 -63.0 -64.0 -67.0 -66.0 -69.0 -68.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -87.0 -92.0 -91.0 -94.0 -95.0 -100.0 -103.0 -100.0 -105.0 -106.0 -109.0 -112.0 -113.0 -116.0 -119.0 -118.0 -121.0 -124.0 -127.0 -128.0 -131.0 -136.0 -137.0 -142.0 -145.0 -148.0 -148.0 -153.0 -150.0 -155.0 -156.0 -159.0 -160.0 -165.0 -168.0 -169.0 -170.0 -171.0 -176.0 -177.0 -182.0 -185.0 -186.0 -189.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -220.0 -221.0 -224.0 -227.0 -228.0 -233.0 -234.0 -237.0 -238.0 5 -7.0 -4.0 -3.0 -2.0 -1.0 8.0 2.0 4.0 4.0 2.0 4.0 2.0 14.0 1.0 0.0 -3.0 -6.0 -9.0 -14.0 -15.0 -20.0 -21.0 -20.0 -25.0 -26.0 -29.0 -32.0 -33.0 -36.0 -39.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -59.0 -60.0 -61.0 -64.0 -65.0 -64.0 -67.0 -66.0 -73.0 -74.0 -77.0 -76.0 -81.0 -78.0 -83.0 -84.0 -85.0 -90.0 -91.0 -92.0 -95.0 -98.0 -101.0 -98.0 -103.0 -106.0 -107.0 -110.0 -111.0 -114.0 -117.0 -118.0 -121.0 -122.0 -127.0 -130.0 -131.0 -136.0 -137.0 -140.0 -144.0 -147.0 -146.0 -151.0 -150.0 -153.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -173.0 -176.0 -179.0 -182.0 -183.0 -184.0 -187.0 -190.0 -191.0 -190.0 -195.0 -198.0 -201.0 -200.0 -203.0 -206.0 -207.0 -210.0 -213.0 -214.0 -217.0 -218.0 -219.0 -224.0 -227.0 -230.0 -233.0 -232.0 -235.0 6 -10.0 -9.0 -6.0 -3.0 -4.0 -1.0 6.0 2.0 2.0 4.0 2.0 2.0 2.0 14.0 1.0 -2.0 -5.0 -8.0 -9.0 -14.0 -17.0 -18.0 -23.0 -20.0 -23.0 -28.0 -31.0 -34.0 -33.0 -34.0 -37.0 -38.0 -43.0 -44.0 -49.0 -52.0 -55.0 -56.0 -57.0 -58.0 -61.0 -64.0 -66.0 -62.0 -65.0 -66.0 -71.0 -74.0 -77.0 -76.0 -79.0 -76.0 -81.0 -84.0 -85.0 -88.0 -91.0 -94.0 -97.0 -96.0 -99.0 -98.0 -101.0 -104.0 -107.0 -110.0 -113.0 -114.0 -115.0 -116.0 -121.0 -124.0 -127.0 -130.0 -133.0 -136.0 -139.0 -141.0 -142.0 -147.0 -146.0 -149.0 -148.0 -153.0 -156.0 -159.0 -162.0 -163.0 -166.0 -167.0 -170.0 -173.0 -174.0 -177.0 -180.0 -183.0 -182.0 -187.0 -188.0 -191.0 -190.0 -193.0 -196.0 -199.0 -200.0 -203.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -218.0 -221.0 -224.0 -227.0 -228.0 -231.0 -232.0 7 -13.0 -10.0 -9.0 -8.0 -5.0 -2.0 -1.0 6.0 2.0 0.0 4.0 0.0 2.0 1.0 14.0 3.0 0.0 -3.0 -8.0 -9.0 -14.0 -17.0 -18.0 -22.0 -18.0 -21.0 -26.0 -29.0 -32.0 -33.0 -34.0 -37.0 -38.0 -43.0 -46.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -59.0 -64.0 -64.0 -60.0 -63.0 -66.0 -69.0 -72.0 -75.0 -76.0 -77.0 -74.0 -79.0 -82.0 -83.0 -86.0 -89.0 -94.0 -95.0 -96.0 -97.0 -98.0 -99.0 -102.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -121.0 -124.0 -125.0 -130.0 -131.0 -134.0 -139.0 -139.0 -142.0 -145.0 -146.0 -147.0 -150.0 -153.0 -154.0 -157.0 -160.0 -163.0 -164.0 -167.0 -170.0 -173.0 -176.0 -177.0 -180.0 -181.0 -184.0 -185.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -204.0 -207.0 -208.0 -211.0 -212.0 -213.0 -218.0 -221.0 -224.0 -225.0 -226.0 -229.0 8 -16.0 -13.0 -12.0 -11.0 -10.0 -5.0 -4.0 -1.0 6.0 0.0 2.0 2.0 2.0 0.0 3.0 14.0 3.0 0.0 -5.0 -6.0 -11.0 -14.0 -15.0 -18.0 -21.0 -16.0 -21.0 -26.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -52.0 -55.0 -56.0 -59.0 -64.0 -62.0 -60.0 -61.0 -66.0 -69.0 -72.0 -75.0 -74.0 -75.0 -74.0 -79.0 -80.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -95.0 -96.0 -99.0 -102.0 -105.0 -108.0 -109.0 -112.0 -113.0 -118.0 -121.0 -122.0 -127.0 -128.0 -131.0 -135.0 -138.0 -137.0 -142.0 -143.0 -144.0 -147.0 -150.0 -151.0 -154.0 -157.0 -160.0 -161.0 -164.0 -167.0 -170.0 -173.0 -174.0 -177.0 -178.0 -179.0 -182.0 -183.0 -186.0 -189.0 -190.0 -191.0 -194.0 -197.0 -198.0 -201.0 -204.0 -205.0 -208.0 -209.0 -210.0 -215.0 -218.0 -221.0 -222.0 -223.0 -226.0 9 -19.0 -16.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 4.0 2.0 0.0 2.0 0.0 2.0 3.0 14.0 3.0 -2.0 -3.0 -8.0 -11.0 -12.0 -17.0 -16.0 -19.0 -16.0 -21.0 -26.0 -27.0 -28.0 -31.0 -32.0 -37.0 -40.0 -39.0 -44.0 -47.0 -48.0 -49.0 -52.0 -53.0 -58.0 -57.0 -62.0 -62.0 -58.0 -61.0 -66.0 -69.0 -72.0 -73.0 -72.0 -75.0 -74.0 -77.0 -80.0 -83.0 -88.0 -89.0 -90.0 -95.0 -94.0 -93.0 -96.0 -99.0 -102.0 -105.0 -106.0 -109.0 -110.0 -115.0 -118.0 -119.0 -124.0 -125.0 -128.0 -132.0 -133.0 -136.0 -137.0 -140.0 -141.0 -144.0 -147.0 -148.0 -151.0 -154.0 -157.0 -158.0 -161.0 -164.0 -167.0 -170.0 -171.0 -174.0 -175.0 -178.0 -177.0 -180.0 -183.0 -186.0 -187.0 -188.0 -191.0 -194.0 -195.0 -198.0 -201.0 -202.0 -205.0 -206.0 -207.0 -212.0 -215.0 -218.0 -219.0 -220.0 -223.0 10 -22.0 -19.0 -18.0 -17.0 -16.0 -11.0 -10.0 -7.0 -4.0 -3.0 4.0 0.0 0.0 0.0 0.0 2.0 3.0 14.0 1.0 0.0 -5.0 -8.0 -9.0 -14.0 -15.0 -14.0 -19.0 -16.0 -21.0 -24.0 -25.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -44.0 -45.0 -46.0 -49.0 -50.0 -55.0 -58.0 -55.0 -62.0 -60.0 -58.0 -61.0 -66.0 -69.0 -70.0 -71.0 -72.0 -77.0 -72.0 -77.0 -80.0 -83.0 -88.0 -87.0 -90.0 -93.0 -92.0 -93.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -112.0 -115.0 -116.0 -121.0 -122.0 -125.0 -129.0 -130.0 -131.0 -136.0 -135.0 -138.0 -141.0 -144.0 -145.0 -148.0 -151.0 -154.0 -155.0 -158.0 -161.0 -162.0 -167.0 -168.0 -169.0 -172.0 -175.0 -176.0 -175.0 -180.0 -183.0 -186.0 -185.0 -188.0 -191.0 -192.0 -195.0 -198.0 -199.0 -202.0 -203.0 -204.0 -209.0 -212.0 -213.0 -218.0 -217.0 -220.0 11 -22.0 -24.0 -21.0 -18.0 -19.0 -16.0 -12.0 -12.0 -9.0 -4.0 -5.0 2.0 -2.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -13.0 -14.0 -19.0 -16.0 -19.0 -22.0 -23.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -42.0 -43.0 -46.0 -49.0 -52.0 -55.0 -58.0 -55.0 -60.0 -60.0 -58.0 -61.0 -66.0 -67.0 -68.0 -71.0 -74.0 -75.0 -72.0 -79.0 -82.0 -81.0 -86.0 -87.0 -88.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -120.0 -124.0 -127.0 -127.0 -128.0 -131.0 -134.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -151.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -168.0 -167.0 -172.0 -173.0 -176.0 -175.0 -178.0 -181.0 -184.0 -185.0 -188.0 -189.0 -192.0 -195.0 -196.0 -199.0 -200.0 -203.0 -206.0 -209.0 -212.0 -211.0 -216.0 -217.0 12 -28.0 -22.0 -24.0 -23.0 -20.0 -17.0 -16.0 -12.0 -10.0 -9.0 -4.0 -4.0 2.0 -4.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -11.0 -12.0 -17.0 -16.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -35.0 -36.0 -37.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -55.0 -58.0 -58.0 -56.0 -61.0 -64.0 -65.0 -66.0 -71.0 -72.0 -73.0 -70.0 -79.0 -80.0 -81.0 -84.0 -87.0 -86.0 -89.0 -90.0 -91.0 -94.0 -97.0 -100.0 -101.0 -106.0 -109.0 -110.0 -115.0 -116.0 -118.0 -124.0 -126.0 -127.0 -126.0 -131.0 -132.0 -135.0 -138.0 -139.0 -140.0 -145.0 -148.0 -149.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -166.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -179.0 -182.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -198.0 -203.0 -206.0 -209.0 -212.0 -209.0 -214.0 13 -29.0 -30.0 -22.0 -26.0 -25.0 -22.0 -17.0 -17.0 -12.0 -12.0 -10.0 -6.0 -4.0 0.0 -4.0 -2.0 -4.0 -3.0 -2.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -9.0 -12.0 -11.0 -12.0 -15.0 -14.0 -19.0 -22.0 -25.0 -28.0 -31.0 -34.0 -35.0 -34.0 -35.0 -38.0 -43.0 -44.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -60.0 -54.0 -59.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -70.0 -77.0 -78.0 -81.0 -82.0 -85.0 -88.0 -89.0 -92.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -124.0 -127.0 -124.0 -129.0 -130.0 -135.0 -138.0 -141.0 -140.0 -145.0 -146.0 -147.0 -152.0 -155.0 -158.0 -157.0 -158.0 -163.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -178.0 -179.0 -182.0 -181.0 -186.0 -189.0 -190.0 -191.0 -192.0 -197.0 -198.0 -203.0 -204.0 -207.0 -210.0 -209.0 14 -33.0 -30.0 -29.0 -22.0 -27.0 -25.0 -21.0 -18.0 -15.0 -10.0 -12.0 -8.0 -8.0 -2.0 -1.0 -5.0 -3.0 -6.0 -2.0 -2.0 4.0 14.0 1.0 -2.0 -3.0 -6.0 -7.0 -10.0 -9.0 -10.0 -13.0 -14.0 -19.0 -20.0 -25.0 -26.0 -31.0 -32.0 -33.0 -34.0 -37.0 -40.0 -43.0 -44.0 -49.0 -48.0 -51.0 -52.0 -53.0 -56.0 -58.0 -54.0 -59.0 -62.0 -65.0 -66.0 -69.0 -72.0 -73.0 -70.0 -75.0 -76.0 -79.0 -82.0 -83.0 -86.0 -89.0 -90.0 -91.0 -92.0 -97.0 -100.0 -103.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -122.0 -125.0 -124.0 -129.0 -132.0 -135.0 -136.0 -139.0 -142.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -159.0 -158.0 -163.0 -164.0 -167.0 -166.0 -169.0 -170.0 -175.0 -176.0 -179.0 -180.0 -183.0 -186.0 -187.0 -190.0 -191.0 -194.0 -197.0 -200.0 -203.0 -204.0 -207.0 -208.0 15 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -7.0 -2.0 -1.0 6.0 14.0 3.0 0.0 -1.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -14.0 -19.0 -22.0 -23.0 -24.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -42.0 -47.0 -48.0 -49.0 -50.0 -51.0 -56.0 -57.0 -52.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -73.0 -70.0 -73.0 -76.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -107.0 -110.0 -115.0 -117.0 -118.0 -121.0 -122.0 -123.0 -126.0 -129.0 -130.0 -133.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -152.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -165.0 -168.0 -169.0 -168.0 -173.0 -176.0 -177.0 -178.0 -181.0 -184.0 -187.0 -188.0 -189.0 -194.0 -197.0 -200.0 -203.0 -202.0 -205.0 16 -37.0 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -5.0 -2.0 1.0 8.0 14.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -13.0 -14.0 -17.0 -22.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -37.0 -40.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -49.0 -54.0 -55.0 -52.0 -57.0 -62.0 -63.0 -66.0 -67.0 -70.0 -71.0 -70.0 -71.0 -74.0 -79.0 -80.0 -83.0 -84.0 -85.0 -88.0 -91.0 -94.0 -95.0 -100.0 -101.0 -106.0 -109.0 -112.0 -114.0 -117.0 -118.0 -119.0 -120.0 -123.0 -124.0 -129.0 -132.0 -133.0 -132.0 -135.0 -140.0 -141.0 -146.0 -149.0 -150.0 -153.0 -154.0 -157.0 -158.0 -161.0 -162.0 -165.0 -168.0 -167.0 -168.0 -171.0 -174.0 -175.0 -176.0 -179.0 -184.0 -185.0 -188.0 -191.0 -192.0 -197.0 -200.0 -201.0 -202.0 17 -38.0 -37.0 -32.0 -33.0 -30.0 -29.0 -22.0 -25.0 -23.0 -19.0 -19.0 -11.0 -11.0 -8.0 -8.0 -9.0 -2.0 -3.0 -5.0 -3.0 -5.0 0.0 1.0 10.0 14.0 5.0 4.0 -1.0 -2.0 -3.0 -4.0 -7.0 -10.0 -13.0 -12.0 -17.0 -22.0 -21.0 -24.0 -25.0 -28.0 -31.0 -34.0 -35.0 -38.0 -37.0 -40.0 -43.0 -46.0 -47.0 -48.0 -47.0 -52.0 -53.0 -50.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -68.0 -69.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -97.0 -98.0 -103.0 -106.0 -108.0 -111.0 -114.0 -115.0 -116.0 -117.0 -120.0 -121.0 -126.0 -129.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -146.0 -147.0 -150.0 -151.0 -154.0 -155.0 -158.0 -159.0 -162.0 -163.0 -166.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -181.0 -182.0 -185.0 -188.0 -189.0 -194.0 -195.0 -198.0 -199.0 18 -39.0 -38.0 -37.0 -32.0 -35.0 -30.0 -27.0 -22.0 -23.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -5.0 -3.0 -3.0 2.0 3.0 10.0 14.0 7.0 6.0 1.0 0.0 -1.0 -4.0 -5.0 -10.0 -13.0 -12.0 -15.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -34.0 -33.0 -36.0 -35.0 -38.0 -41.0 -46.0 -45.0 -46.0 -45.0 -50.0 -51.0 -50.0 -55.0 -58.0 -61.0 -62.0 -63.0 -68.0 -67.0 -66.0 -67.0 -70.0 -75.0 -78.0 -79.0 -82.0 -83.0 -88.0 -91.0 -92.0 -96.0 -98.0 -101.0 -106.0 -106.0 -109.0 -112.0 -113.0 -114.0 -117.0 -118.0 -121.0 -124.0 -127.0 -130.0 -131.0 -134.0 -137.0 -140.0 -143.0 -144.0 -147.0 -148.0 -151.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -168.0 -171.0 -174.0 -175.0 -178.0 -179.0 -180.0 -185.0 -188.0 -189.0 -192.0 -193.0 -196.0 19 -40.0 -39.0 -38.0 -37.0 -32.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -7.0 -2.0 -1.0 2.0 5.0 12.0 14.0 7.0 6.0 3.0 2.0 -1.0 -2.0 -7.0 -10.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -33.0 -34.0 -35.0 -38.0 -41.0 -44.0 -43.0 -44.0 -45.0 -50.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -65.0 -66.0 -65.0 -66.0 -67.0 -70.0 -75.0 -76.0 -79.0 -80.0 -85.0 -88.0 -89.0 -94.0 -94.0 -98.0 -103.0 -105.0 -104.0 -109.0 -110.0 -111.0 -114.0 -117.0 -116.0 -121.0 -124.0 -127.0 -128.0 -131.0 -134.0 -137.0 -140.0 -141.0 -142.0 -145.0 -148.0 -149.0 -150.0 -153.0 -156.0 -157.0 -158.0 -161.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -177.0 -182.0 -185.0 -188.0 -187.0 -190.0 -193.0 20 -45.0 -40.0 -39.0 -40.0 -39.0 -30.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -7.0 0.0 -1.0 4.0 7.0 12.0 14.0 7.0 8.0 5.0 2.0 1.0 -4.0 -7.0 -8.0 -11.0 -12.0 -13.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -32.0 -31.0 -34.0 -35.0 -38.0 -39.0 -42.0 -41.0 -44.0 -45.0 -48.0 -49.0 -50.0 -55.0 -58.0 -57.0 -60.0 -63.0 -64.0 -65.0 -66.0 -67.0 -70.0 -73.0 -76.0 -77.0 -82.0 -85.0 -86.0 -91.0 -92.0 -94.0 -100.0 -102.0 -103.0 -104.0 -107.0 -108.0 -111.0 -114.0 -115.0 -116.0 -121.0 -124.0 -125.0 -128.0 -131.0 -134.0 -135.0 -138.0 -141.0 -140.0 -143.0 -146.0 -147.0 -150.0 -153.0 -154.0 -155.0 -158.0 -159.0 -162.0 -165.0 -168.0 -169.0 -170.0 -173.0 -174.0 -179.0 -182.0 -185.0 -188.0 -185.0 -190.0 21 -44.0 -45.0 -40.0 -39.0 -40.0 -37.0 -30.0 -33.0 -30.0 -27.0 -22.0 -25.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -5.0 0.0 1.0 6.0 7.0 12.0 14.0 9.0 10.0 5.0 2.0 -1.0 -4.0 -7.0 -8.0 -11.0 -10.0 -11.0 -14.0 -19.0 -20.0 -23.0 -28.0 -29.0 -30.0 -31.0 -34.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -48.0 -51.0 -50.0 -55.0 -56.0 -59.0 -58.0 -61.0 -64.0 -65.0 -68.0 -67.0 -68.0 -73.0 -76.0 -77.0 -82.0 -85.0 -88.0 -91.0 -94.0 -94.0 -99.0 -100.0 -103.0 -102.0 -105.0 -106.0 -111.0 -114.0 -117.0 -116.0 -119.0 -122.0 -123.0 -128.0 -131.0 -134.0 -133.0 -136.0 -139.0 -138.0 -141.0 -146.0 -147.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -166.0 -167.0 -168.0 -173.0 -174.0 -179.0 -180.0 -183.0 -186.0 -185.0 22 -47.0 -44.0 -45.0 -42.0 -39.0 -40.0 -35.0 -30.0 -33.0 -28.0 -29.0 -20.0 -25.0 -20.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 3.0 8.0 9.0 14.0 14.0 9.0 8.0 3.0 0.0 -1.0 -6.0 -9.0 -8.0 -11.0 -10.0 -13.0 -16.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -55.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -67.0 -70.0 -75.0 -78.0 -77.0 -84.0 -85.0 -89.0 -93.0 -95.0 -94.0 -99.0 -100.0 -103.0 -102.0 -107.0 -106.0 -113.0 -116.0 -117.0 -116.0 -119.0 -124.0 -123.0 -130.0 -133.0 -134.0 -135.0 -136.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -168.0 -167.0 -170.0 -175.0 -174.0 -181.0 -180.0 -183.0 -186.0 23 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 5.0 10.0 11.0 14.0 14.0 7.0 8.0 1.0 -2.0 -1.0 -6.0 -9.0 -8.0 -11.0 -12.0 -13.0 -18.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -44.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -70.0 -77.0 -80.0 -77.0 -86.0 -85.0 -89.0 -94.0 -95.0 -94.0 -99.0 -100.0 -103.0 -104.0 -109.0 -106.0 -113.0 -116.0 -119.0 -116.0 -121.0 -126.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -148.0 -151.0 -150.0 -151.0 -154.0 -155.0 -160.0 -159.0 -162.0 -165.0 -168.0 -167.0 -172.0 -177.0 -176.0 -183.0 -180.0 -183.0 24 -51.0 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -4.0 -1.0 2.0 5.0 10.0 11.0 14.0 14.0 5.0 8.0 -1.0 -4.0 -3.0 -6.0 -9.0 -8.0 -13.0 -14.0 -13.0 -20.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -39.0 -36.0 -37.0 -44.0 -41.0 -46.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -63.0 -64.0 -67.0 -68.0 -71.0 -72.0 -79.0 -82.0 -79.0 -86.0 -87.0 -89.0 -92.0 -93.0 -94.0 -97.0 -98.0 -103.0 -106.0 -109.0 -108.0 -113.0 -116.0 -117.0 -118.0 -123.0 -124.0 -125.0 -130.0 -131.0 -132.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -150.0 -153.0 -154.0 -157.0 -160.0 -159.0 -164.0 -165.0 -168.0 -169.0 -174.0 -177.0 -178.0 -181.0 -180.0 25 -54.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -41.0 -38.0 -33.0 -32.0 -31.0 -30.0 -25.0 -22.0 -25.0 -22.0 -21.0 -16.0 -13.0 -14.0 -8.0 -10.0 -9.0 -4.0 -4.0 -1.0 2.0 7.0 10.0 9.0 14.0 12.0 7.0 6.0 -1.0 -4.0 -3.0 -6.0 -7.0 -10.0 -13.0 -16.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -64.0 -65.0 -70.0 -73.0 -74.0 -79.0 -82.0 -81.0 -88.0 -89.0 -89.0 -94.0 -93.0 -94.0 -97.0 -100.0 -105.0 -108.0 -111.0 -108.0 -115.0 -116.0 -119.0 -120.0 -123.0 -124.0 -125.0 -132.0 -131.0 -134.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -170.0 -171.0 -176.0 -177.0 -178.0 -181.0 26 -57.0 -54.0 -52.0 -52.0 -49.0 -46.0 -45.0 -42.0 -39.0 -38.0 -33.0 -34.0 -31.0 -30.0 -25.0 -22.0 -23.0 -22.0 -23.0 -16.0 -15.0 -15.0 -8.0 -12.0 -10.0 -4.0 -2.0 1.0 2.0 5.0 8.0 7.0 14.0 10.0 5.0 6.0 -1.0 -4.0 -3.0 -6.0 -9.0 -10.0 -15.0 -18.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -32.0 -29.0 -34.0 -39.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -66.0 -65.0 -72.0 -75.0 -74.0 -81.0 -82.0 -81.0 -89.0 -90.0 -89.0 -94.0 -93.0 -94.0 -99.0 -102.0 -105.0 -108.0 -111.0 -110.0 -115.0 -118.0 -121.0 -122.0 -125.0 -124.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -167.0 -170.0 -173.0 -176.0 -175.0 -178.0 27 -60.0 -59.0 -56.0 -52.0 -54.0 -51.0 -48.0 -46.0 -44.0 -39.0 -39.0 -35.0 -35.0 -31.0 -31.0 -26.0 -24.0 -25.0 -22.0 -23.0 -18.0 -15.0 -15.0 -8.0 -12.0 -9.0 -6.0 -4.0 1.0 2.0 3.0 8.0 6.0 14.0 8.0 3.0 6.0 -1.0 -2.0 -3.0 -6.0 -9.0 -12.0 -13.0 -16.0 -13.0 -20.0 -21.0 -20.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -46.0 -43.0 -48.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -61.0 -66.0 -67.0 -72.0 -75.0 -76.0 -81.0 -83.0 -83.0 -87.0 -92.0 -89.0 -94.0 -93.0 -96.0 -101.0 -104.0 -107.0 -108.0 -109.0 -110.0 -115.0 -118.0 -119.0 -122.0 -125.0 -126.0 -125.0 -132.0 -133.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -163.0 -164.0 -169.0 -172.0 -175.0 -176.0 -175.0 28 -62.0 -62.0 -59.0 -57.0 -52.0 -54.0 -50.0 -49.0 -44.0 -43.0 -41.0 -37.0 -36.0 -33.0 -32.0 -31.0 -26.0 -26.0 -26.0 -24.0 -24.0 -19.0 -17.0 -13.0 -8.0 -10.0 -7.0 -7.0 -4.0 -1.0 0.0 2.0 6.0 6.0 14.0 8.0 1.0 6.0 -1.0 -2.0 -5.0 -8.0 -11.0 -14.0 -13.0 -16.0 -13.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -38.0 -37.0 -42.0 -43.0 -48.0 -43.0 -48.0 -49.0 -50.0 -57.0 -58.0 -59.0 -62.0 -63.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -83.0 -84.0 -89.0 -92.0 -89.0 -94.0 -95.0 -96.0 -103.0 -106.0 -107.0 -108.0 -109.0 -112.0 -115.0 -120.0 -121.0 -122.0 -127.0 -126.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -158.0 -159.0 -162.0 -165.0 -164.0 -171.0 -172.0 -175.0 -176.0 29 -65.0 -62.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -42.0 -43.0 -42.0 -37.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -25.0 -22.0 -19.0 -18.0 -13.0 -8.0 -8.0 -5.0 -6.0 -5.0 -2.0 -1.0 2.0 5.0 6.0 14.0 8.0 1.0 6.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -11.0 -14.0 -13.0 -18.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -35.0 -40.0 -37.0 -40.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -56.0 -59.0 -60.0 -65.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -81.0 -84.0 -89.0 -90.0 -89.0 -94.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -111.0 -114.0 -117.0 -120.0 -121.0 -124.0 -125.0 -128.0 -127.0 -130.0 -133.0 -136.0 -135.0 -136.0 -141.0 -140.0 -143.0 -148.0 -151.0 -152.0 -155.0 -156.0 -157.0 -162.0 -165.0 -166.0 -169.0 -170.0 -173.0 30 -64.0 -65.0 -64.0 -61.0 -60.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -18.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 2.0 6.0 -1.0 -2.0 -5.0 -10.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -40.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -59.0 -62.0 -67.0 -68.0 -69.0 -74.0 -75.0 -80.0 -84.0 -81.0 -84.0 -89.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -113.0 -116.0 -117.0 -120.0 -123.0 -124.0 -125.0 -128.0 -127.0 -130.0 -135.0 -138.0 -135.0 -136.0 -143.0 -140.0 -145.0 -148.0 -151.0 -154.0 -155.0 -156.0 -159.0 -164.0 -167.0 -166.0 -169.0 -170.0 31 -67.0 -64.0 -65.0 -64.0 -61.0 -58.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -17.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 4.0 4.0 -2.0 -4.0 -7.0 -11.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -27.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -38.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -61.0 -62.0 -67.0 -68.0 -71.0 -75.0 -76.0 -81.0 -82.0 -81.0 -84.0 -87.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -102.0 -107.0 -106.0 -113.0 -114.0 -115.0 -120.0 -121.0 -122.0 -123.0 -128.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -141.0 -140.0 -145.0 -146.0 -149.0 -152.0 -155.0 -158.0 -159.0 -164.0 -167.0 -166.0 -169.0 32 -68.0 -67.0 -62.0 -65.0 -64.0 -61.0 -56.0 -55.0 -52.0 -51.0 -50.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -25.0 -22.0 -19.0 -15.0 -10.0 -8.0 -8.0 -5.0 -6.0 -3.0 -4.0 -1.0 2.0 3.0 10.0 14.0 9.0 6.0 2.0 0.0 -3.0 -6.0 -9.0 -10.0 -11.0 -10.0 -16.0 -13.0 -19.0 -22.0 -21.0 -26.0 -24.0 -28.0 -31.0 -29.0 -32.0 -36.0 -39.0 -36.0 -43.0 -44.0 -45.0 -45.0 -46.0 -47.0 -52.0 -56.0 -57.0 -62.0 -64.0 -68.0 -70.0 -73.0 -74.0 -76.0 -80.0 -81.0 -80.0 -84.0 -86.0 -91.0 -93.0 -97.0 -96.0 -98.0 -101.0 -102.0 -108.0 -106.0 -114.0 -113.0 -114.0 -119.0 -120.0 -121.0 -122.0 -127.0 -129.0 -131.0 -134.0 -135.0 -137.0 -136.0 -142.0 -142.0 -145.0 -146.0 -148.0 -153.0 -154.0 -159.0 -159.0 -163.0 -166.0 -165.0 33 -71.0 -68.0 -65.0 -62.0 -65.0 -62.0 -59.0 -56.0 -53.0 -50.0 -51.0 -48.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -24.0 -21.0 -18.0 -13.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -4.0 -1.0 2.0 5.0 12.0 14.0 7.0 4.0 1.0 -2.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -15.0 -15.0 -19.0 -22.0 -19.0 -24.0 -24.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -47.0 -53.0 -56.0 -59.0 -62.0 -65.0 -68.0 -71.0 -73.0 -74.0 -75.0 -78.0 -79.0 -80.0 -85.0 -88.0 -91.0 -94.0 -95.0 -98.0 -98.0 -102.0 -104.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -120.0 -121.0 -120.0 -125.0 -130.0 -131.0 -132.0 -135.0 -136.0 -138.0 -142.0 -142.0 -146.0 -146.0 -150.0 -153.0 -154.0 -159.0 -159.0 -163.0 -164.0 34 -72.0 -71.0 -68.0 -65.0 -62.0 -63.0 -60.0 -59.0 -56.0 -51.0 -50.0 -49.0 -48.0 -43.0 -42.0 -43.0 -40.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -25.0 -22.0 -19.0 -16.0 -11.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -2.0 1.0 4.0 7.0 14.0 12.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -15.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -49.0 -55.0 -58.0 -61.0 -64.0 -67.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -82.0 -87.0 -90.0 -91.0 -94.0 -97.0 -98.0 -100.0 -104.0 -104.0 -106.0 -105.0 -114.0 -113.0 -114.0 -119.0 -122.0 -121.0 -120.0 -127.0 -130.0 -131.0 -132.0 -135.0 -138.0 -140.0 -142.0 -142.0 -146.0 -148.0 -152.0 -155.0 -154.0 -161.0 -159.0 -163.0 35 -73.0 -74.0 -69.0 -70.0 -66.0 -64.0 -61.0 -62.0 -59.0 -56.0 -53.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -42.0 -41.0 -38.0 -33.0 -34.0 -31.0 -28.0 -28.0 -25.0 -22.0 -19.0 -16.0 -13.0 -8.0 -10.0 -10.0 -7.0 -6.0 -5.0 -2.0 1.0 6.0 9.0 14.0 10.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -47.0 -48.0 -49.0 -57.0 -60.0 -63.0 -65.0 -69.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -84.0 -87.0 -92.0 -91.0 -96.0 -97.0 -98.0 -102.0 -106.0 -106.0 -106.0 -105.0 -114.0 -113.0 -114.0 -121.0 -122.0 -123.0 -120.0 -127.0 -130.0 -133.0 -132.0 -137.0 -138.0 -140.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -161.0 -159.0 36 -78.0 -73.0 -74.0 -71.0 -72.0 -66.0 -66.0 -61.0 -60.0 -59.0 -56.0 -55.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -30.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -10.0 -12.0 -9.0 -6.0 -3.0 -2.0 1.0 4.0 7.0 14.0 8.0 3.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -45.0 -47.0 -50.0 -51.0 -56.0 -61.0 -62.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -80.0 -81.0 -84.0 -86.0 -91.0 -93.0 -95.0 -98.0 -100.0 -102.0 -105.0 -106.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -120.0 -127.0 -128.0 -131.0 -134.0 -137.0 -136.0 -139.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -159.0 37 -79.0 -80.0 -73.0 -76.0 -73.0 -71.0 -66.0 -68.0 -63.0 -62.0 -60.0 -58.0 -57.0 -54.0 -53.0 -49.0 -47.0 -46.0 -45.0 -44.0 -39.0 -39.0 -37.0 -36.0 -34.0 -31.0 -28.0 -25.0 -22.0 -21.0 -18.0 -17.0 -12.0 -12.0 -14.0 -11.0 -8.0 -5.0 0.0 3.0 4.0 5.0 14.0 8.0 1.0 0.0 -1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -39.0 -44.0 -47.0 -47.0 -52.0 -53.0 -58.0 -62.0 -64.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -82.0 -83.0 -84.0 -86.0 -92.0 -93.0 -94.0 -99.0 -102.0 -101.0 -104.0 -106.0 -106.0 -105.0 -112.0 -115.0 -114.0 -119.0 -122.0 -125.0 -120.0 -125.0 -126.0 -131.0 -134.0 -135.0 -134.0 -137.0 -142.0 -142.0 -148.0 -147.0 -152.0 -153.0 -154.0 38 -81.0 -80.0 -78.0 -75.0 -77.0 -75.0 -69.0 -66.0 -68.0 -64.0 -64.0 -58.0 -59.0 -56.0 -55.0 -54.0 -49.0 -49.0 -47.0 -46.0 -44.0 -40.0 -39.0 -39.0 -37.0 -34.0 -30.0 -28.0 -25.0 -24.0 -21.0 -19.0 -19.0 -14.0 -14.0 -14.0 -11.0 -8.0 -3.0 0.0 3.0 2.0 5.0 14.0 6.0 -1.0 -1.0 1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -41.0 -46.0 -47.0 -49.0 -54.0 -55.0 -60.0 -63.0 -64.0 -64.0 -72.0 -71.0 -71.0 -73.0 -76.0 -77.0 -84.0 -85.0 -84.0 -88.0 -92.0 -93.0 -96.0 -101.0 -104.0 -101.0 -104.0 -108.0 -106.0 -105.0 -114.0 -115.0 -116.0 -119.0 -122.0 -124.0 -122.0 -125.0 -128.0 -133.0 -134.0 -135.0 -134.0 -139.0 -142.0 -144.0 -148.0 -147.0 -152.0 -153.0 39 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -46.0 -45.0 -40.0 -37.0 -39.0 -35.0 -32.0 -28.0 -28.0 -27.0 -25.0 -23.0 -19.0 -21.0 -16.0 -14.0 -12.0 -11.0 -8.0 -5.0 -2.0 3.0 0.0 4.0 14.0 4.0 0.0 -1.0 2.0 -3.0 -5.0 -4.0 -7.0 -7.0 -11.0 -8.0 -16.0 -17.0 -18.0 -22.0 -19.0 -23.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -38.0 -41.0 -47.0 -49.0 -49.0 -56.0 -55.0 -60.0 -62.0 -65.0 -64.0 -71.0 -70.0 -71.0 -75.0 -78.0 -77.0 -83.0 -85.0 -86.0 -88.0 -93.0 -95.0 -98.0 -102.0 -105.0 -101.0 -106.0 -108.0 -106.0 -105.0 -114.0 -117.0 -118.0 -119.0 -122.0 -125.0 -122.0 -127.0 -130.0 -133.0 -136.0 -135.0 -134.0 -141.0 -144.0 -146.0 -150.0 -147.0 -152.0 40 -87.0 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -44.0 -45.0 -40.0 -36.0 -37.0 -36.0 -34.0 -28.0 -28.0 -29.0 -23.0 -25.0 -19.0 -22.0 -17.0 -16.0 -14.0 -11.0 -8.0 -6.0 -4.0 1.0 -1.0 4.0 14.0 2.0 -1.0 -2.0 2.0 -1.0 -4.0 -4.0 -7.0 -7.0 -10.0 -8.0 -16.0 -17.0 -16.0 -21.0 -19.0 -21.0 -24.0 -26.0 -29.0 -33.0 -31.0 -35.0 -36.0 -40.0 -43.0 -47.0 -50.0 -51.0 -56.0 -57.0 -61.0 -60.0 -67.0 -64.0 -69.0 -68.0 -73.0 -76.0 -79.0 -79.0 -83.0 -86.0 -86.0 -90.0 -93.0 -94.0 -97.0 -102.0 -103.0 -100.0 -106.0 -108.0 -108.0 -105.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -124.0 -129.0 -130.0 -133.0 -134.0 -137.0 -136.0 -143.0 -146.0 -146.0 -150.0 -147.0 41 -90.0 -87.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -54.0 -49.0 -52.0 -49.0 -44.0 -45.0 -42.0 -34.0 -35.0 -34.0 -33.0 -28.0 -29.0 -28.0 -23.0 -26.0 -19.0 -20.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -5.0 0.0 1.0 6.0 14.0 3.0 1.0 -1.0 2.0 1.0 -2.0 -3.0 -6.0 -5.0 -8.0 -8.0 -14.0 -15.0 -16.0 -21.0 -19.0 -19.0 -22.0 -25.0 -28.0 -31.0 -31.0 -35.0 -36.0 -41.0 -44.0 -45.0 -50.0 -51.0 -54.0 -58.0 -59.0 -60.0 -65.0 -64.0 -67.0 -70.0 -73.0 -74.0 -77.0 -79.0 -83.0 -84.0 -87.0 -90.0 -93.0 -96.0 -99.0 -100.0 -103.0 -100.0 -105.0 -106.0 -108.0 -107.0 -112.0 -113.0 -116.0 -119.0 -120.0 -123.0 -126.0 -127.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -144.0 -145.0 -148.0 42 -93.0 -90.0 -89.0 -88.0 -85.0 -82.0 -81.0 -76.0 -75.0 -74.0 -71.0 -66.0 -67.0 -66.0 -63.0 -58.0 -57.0 -56.0 -57.0 -54.0 -51.0 -52.0 -49.0 -46.0 -46.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -28.0 -25.0 -28.0 -19.0 -20.0 -19.0 -16.0 -13.0 -12.0 -9.0 -8.0 -5.0 0.0 -1.0 8.0 14.0 3.0 1.0 1.0 4.0 3.0 -2.0 -3.0 -4.0 -5.0 -8.0 -8.0 -12.0 -13.0 -18.0 -19.0 -18.0 -19.0 -22.0 -25.0 -28.0 -29.0 -32.0 -33.0 -38.0 -41.0 -42.0 -47.0 -48.0 -51.0 -55.0 -56.0 -57.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -98.0 -103.0 -106.0 -109.0 -107.0 -111.0 -113.0 -117.0 -118.0 -121.0 -124.0 -125.0 -128.0 -129.0 -130.0 -134.0 -138.0 -140.0 -142.0 -143.0 -145.0 43 -96.0 -93.0 -90.0 -91.0 -90.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -51.0 -48.0 -44.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -20.0 -19.0 -16.0 -15.0 -12.0 -9.0 -10.0 -3.0 -2.0 1.0 8.0 14.0 1.0 3.0 3.0 6.0 3.0 -2.0 -1.0 -4.0 -5.0 -8.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -19.0 -22.0 -25.0 -26.0 -29.0 -30.0 -35.0 -38.0 -39.0 -44.0 -45.0 -48.0 -52.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -78.0 -81.0 -84.0 -87.0 -90.0 -91.0 -92.0 -97.0 -98.0 -99.0 -96.0 -103.0 -106.0 -109.0 -107.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 -125.0 -126.0 -127.0 -132.0 -135.0 -138.0 -141.0 -140.0 -143.0 44 -97.0 -96.0 -93.0 -90.0 -91.0 -88.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -50.0 -47.0 -44.0 -41.0 -34.0 -35.0 -36.0 -31.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -18.0 -17.0 -16.0 -15.0 -12.0 -9.0 -8.0 -3.0 -2.0 1.0 8.0 14.0 3.0 5.0 5.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -6.0 -5.0 -10.0 -13.0 -16.0 -17.0 -18.0 -19.0 -22.0 -23.0 -24.0 -29.0 -32.0 -35.0 -38.0 -41.0 -44.0 -47.0 -49.0 -50.0 -51.0 -54.0 -55.0 -56.0 -61.0 -64.0 -67.0 -70.0 -71.0 -74.0 -75.0 -78.0 -81.0 -82.0 -85.0 -90.0 -89.0 -90.0 -95.0 -98.0 -97.0 -96.0 -101.0 -106.0 -107.0 -107.0 -111.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -126.0 -129.0 -132.0 -135.0 -136.0 -139.0 -140.0 45 -100.0 -97.0 -96.0 -93.0 -92.0 -89.0 -88.0 -85.0 -84.0 -79.0 -78.0 -77.0 -76.0 -71.0 -68.0 -71.0 -68.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -53.0 -51.0 -50.0 -47.0 -44.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -30.0 -32.0 -29.0 -24.0 -19.0 -16.0 -19.0 -16.0 -13.0 -14.0 -7.0 -6.0 -5.0 -2.0 1.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 0.0 1.0 -2.0 -3.0 -6.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -20.0 -21.0 -26.0 -29.0 -32.0 -35.0 -38.0 -41.0 -43.0 -46.0 -47.0 -52.0 -49.0 -54.0 -53.0 -58.0 -61.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -78.0 -79.0 -82.0 -85.0 -88.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -105.0 -106.0 -109.0 -112.0 -115.0 -116.0 -117.0 -120.0 -123.0 -126.0 -129.0 -130.0 -135.0 -134.0 -137.0 46 -99.0 -100.0 -95.0 -96.0 -93.0 -92.0 -87.0 -88.0 -83.0 -82.0 -79.0 -78.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -52.0 -49.0 -48.0 -45.0 -42.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -31.0 -30.0 -27.0 -22.0 -17.0 -16.0 -19.0 -14.0 -13.0 -12.0 -5.0 -6.0 -3.0 -2.0 3.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 -2.0 1.0 -2.0 -3.0 -8.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -22.0 -23.0 -26.0 -31.0 -34.0 -37.0 -40.0 -43.0 -43.0 -46.0 -49.0 -52.0 -49.0 -54.0 -53.0 -60.0 -63.0 -66.0 -65.0 -70.0 -71.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -90.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -107.0 -106.0 -111.0 -114.0 -115.0 -116.0 -117.0 -122.0 -123.0 -128.0 -129.0 -130.0 -135.0 -134.0 47 -104.0 -99.0 -100.0 -97.0 -98.0 -93.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -78.0 -77.0 -74.0 -71.0 -68.0 -67.0 -68.0 -63.0 -60.0 -59.0 -60.0 -59.0 -55.0 -50.0 -47.0 -46.0 -45.0 -44.0 -41.0 -36.0 -37.0 -36.0 -35.0 -28.0 -31.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -10.0 -3.0 -4.0 -1.0 0.0 5.0 10.0 14.0 7.0 9.0 9.0 10.0 7.0 0.0 1.0 0.0 -5.0 -6.0 -3.0 -8.0 -9.0 -12.0 -15.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -34.0 -35.0 -38.0 -42.0 -43.0 -44.0 -49.0 -50.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -80.0 -83.0 -82.0 -87.0 -88.0 -87.0 -90.0 -93.0 -96.0 -95.0 -96.0 -101.0 -104.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -117.0 -122.0 -125.0 -128.0 -129.0 -130.0 -133.0 48 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -62.0 -60.0 -53.0 -50.0 -47.0 -48.0 -45.0 -44.0 -41.0 -36.0 -39.0 -38.0 -35.0 -28.0 -33.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -8.0 -3.0 -4.0 -3.0 2.0 5.0 10.0 14.0 5.0 11.0 9.0 10.0 7.0 2.0 3.0 -2.0 -3.0 -4.0 -3.0 -8.0 -9.0 -12.0 -13.0 -16.0 -17.0 -22.0 -25.0 -26.0 -31.0 -32.0 -35.0 -40.0 -40.0 -41.0 -44.0 -47.0 -48.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -68.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -85.0 -86.0 -87.0 -90.0 -93.0 -96.0 -93.0 -96.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -128.0 -127.0 -130.0 49 -106.0 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -89.0 -86.0 -81.0 -82.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -58.0 -53.0 -50.0 -47.0 -48.0 -45.0 -42.0 -41.0 -38.0 -39.0 -40.0 -35.0 -28.0 -31.0 -28.0 -27.0 -24.0 -17.0 -16.0 -15.0 -16.0 -11.0 -8.0 -3.0 -4.0 -1.0 2.0 7.0 10.0 14.0 7.0 11.0 9.0 10.0 9.0 4.0 3.0 0.0 -3.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -16.0 -19.0 -20.0 -25.0 -26.0 -31.0 -34.0 -36.0 -39.0 -38.0 -41.0 -42.0 -45.0 -48.0 -49.0 -54.0 -57.0 -58.0 -59.0 -60.0 -65.0 -66.0 -71.0 -74.0 -77.0 -78.0 -81.0 -82.0 -83.0 -84.0 -87.0 -90.0 -93.0 -94.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -109.0 -110.0 -113.0 -116.0 -117.0 -122.0 -125.0 -126.0 -127.0 50 -111.0 -106.0 -105.0 -104.0 -101.0 -102.0 -97.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -56.0 -51.0 -48.0 -47.0 -48.0 -43.0 -42.0 -39.0 -38.0 -39.0 -38.0 -33.0 -28.0 -29.0 -28.0 -27.0 -22.0 -17.0 -16.0 -13.0 -14.0 -9.0 -6.0 -1.0 -2.0 -1.0 4.0 9.0 12.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -1.0 -4.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -22.0 -25.0 -28.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -40.0 -45.0 -48.0 -51.0 -54.0 -55.0 -58.0 -59.0 -62.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -79.0 -80.0 -81.0 -82.0 -85.0 -90.0 -91.0 -92.0 -95.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -110.0 -113.0 -116.0 -119.0 -122.0 -123.0 -124.0 51 -112.0 -111.0 -104.0 -105.0 -104.0 -101.0 -100.0 -97.0 -94.0 -91.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -78.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -59.0 -54.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -39.0 -36.0 -31.0 -26.0 -29.0 -28.0 -25.0 -22.0 -17.0 -14.0 -13.0 -12.0 -7.0 -4.0 -1.0 -2.0 1.0 6.0 11.0 14.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -42.0 -47.0 -50.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -91.0 -94.0 -95.0 -98.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -115.0 -118.0 -121.0 -122.0 -123.0 52 -113.0 -112.0 -109.0 -104.0 -105.0 -104.0 -99.0 -100.0 -95.0 -92.0 -91.0 -90.0 -89.0 -82.0 -81.0 -80.0 -81.0 -76.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -63.0 -61.0 -59.0 -57.0 -52.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -37.0 -34.0 -29.0 -26.0 -29.0 -26.0 -25.0 -20.0 -15.0 -14.0 -11.0 -10.0 -5.0 -4.0 -1.0 0.0 3.0 8.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -9.0 -12.0 -17.0 -20.0 -23.0 -25.0 -29.0 -31.0 -30.0 -35.0 -34.0 -37.0 -36.0 -41.0 -42.0 -49.0 -52.0 -53.0 -56.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -104.0 -105.0 -108.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 53 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -76.0 -75.0 -76.0 -71.0 -68.0 -71.0 -66.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -29.0 -26.0 -23.0 -18.0 -15.0 -12.0 -9.0 -8.0 -7.0 -4.0 1.0 2.0 5.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -7.0 -6.0 -11.0 -14.0 -17.0 -22.0 -23.0 -25.0 -31.0 -31.0 -30.0 -35.0 -34.0 -37.0 -38.0 -43.0 -42.0 -49.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -66.0 -67.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -82.0 -81.0 -82.0 -87.0 -92.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -105.0 -110.0 -113.0 -116.0 -115.0 -118.0 -121.0 54 -117.0 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -69.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -36.0 -33.0 -34.0 -29.0 -26.0 -29.0 -24.0 -23.0 -16.0 -15.0 -12.0 -9.0 -6.0 -7.0 -2.0 1.0 2.0 7.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -8.0 -13.0 -14.0 -19.0 -22.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -39.0 -40.0 -43.0 -42.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -63.0 -66.0 -67.0 -70.0 -69.0 -74.0 -75.0 -76.0 -81.0 -84.0 -81.0 -82.0 -87.0 -90.0 -93.0 -96.0 -97.0 -98.0 -101.0 -102.0 -107.0 -110.0 -111.0 -116.0 -113.0 -118.0 55 -116.0 -117.0 -112.0 -113.0 -112.0 -109.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -68.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -37.0 -34.0 -33.0 -34.0 -29.0 -26.0 -27.0 -24.0 -21.0 -16.0 -15.0 -12.0 -7.0 -6.0 -5.0 -2.0 1.0 4.0 7.0 10.0 13.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -10.0 -15.0 -16.0 -21.0 -24.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -41.0 -42.0 -45.0 -42.0 -51.0 -52.0 -53.0 -58.0 -61.0 -64.0 -61.0 -66.0 -69.0 -70.0 -69.0 -74.0 -75.0 -78.0 -79.0 -84.0 -81.0 -84.0 -87.0 -92.0 -95.0 -96.0 -97.0 -98.0 -103.0 -102.0 -109.0 -110.0 -111.0 -116.0 -113.0 56 -121.0 -116.0 -117.0 -114.0 -113.0 -110.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -93.0 -94.0 -91.0 -90.0 -87.0 -82.0 -83.0 -80.0 -81.0 -76.0 -75.0 -76.0 -73.0 -68.0 -66.0 -63.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -39.0 -36.0 -33.0 -34.0 -31.0 -26.0 -27.0 -22.0 -19.0 -14.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 3.0 4.0 7.0 8.0 11.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 0.0 -3.0 -8.0 -9.0 -10.0 -17.0 -16.0 -21.0 -25.0 -24.0 -25.0 -32.0 -31.0 -30.0 -37.0 -36.0 -41.0 -42.0 -45.0 -44.0 -49.0 -52.0 -55.0 -58.0 -61.0 -64.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -77.0 -80.0 -79.0 -82.0 -83.0 -84.0 -89.0 -92.0 -93.0 -96.0 -97.0 -98.0 -103.0 -104.0 -109.0 -110.0 -111.0 -114.0 57 -124.0 -123.0 -118.0 -117.0 -116.0 -111.0 -112.0 -111.0 -106.0 -103.0 -104.0 -101.0 -98.0 -93.0 -94.0 -93.0 -92.0 -89.0 -82.0 -83.0 -82.0 -81.0 -78.0 -75.0 -74.0 -74.0 -70.0 -68.0 -63.0 -60.0 -63.0 -58.0 -59.0 -52.0 -55.0 -52.0 -49.0 -48.0 -43.0 -40.0 -41.0 -36.0 -33.0 -36.0 -31.0 -26.0 -27.0 -24.0 -21.0 -14.0 -11.0 -14.0 -11.0 -6.0 -3.0 -2.0 1.0 4.0 5.0 8.0 9.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 -2.0 -5.0 -8.0 -11.0 -12.0 -17.0 -17.0 -23.0 -23.0 -26.0 -25.0 -30.0 -29.0 -32.0 -37.0 -38.0 -41.0 -42.0 -47.0 -44.0 -51.0 -54.0 -55.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -79.0 -80.0 -79.0 -82.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -105.0 -104.0 -111.0 -110.0 -111.0 58 -123.0 -126.0 -121.0 -118.0 -117.0 -116.0 -109.0 -112.0 -109.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -89.0 -84.0 -83.0 -82.0 -83.0 -78.0 -75.0 -73.0 -72.0 -71.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -55.0 -54.0 -51.0 -46.0 -41.0 -40.0 -43.0 -36.0 -33.0 -34.0 -29.0 -26.0 -25.0 -24.0 -21.0 -14.0 -11.0 -12.0 -9.0 -4.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 11.0 4.0 3.0 -2.0 -7.0 -10.0 -13.0 -14.0 -19.0 -17.0 -24.0 -23.0 -26.0 -25.0 -30.0 -29.0 -34.0 -39.0 -40.0 -41.0 -44.0 -47.0 -44.0 -53.0 -56.0 -57.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -71.0 -72.0 -79.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -93.0 -98.0 -99.0 -102.0 -105.0 -104.0 -111.0 -110.0 59 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -90.0 -87.0 -84.0 -83.0 -82.0 -83.0 -78.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -52.0 -49.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -32.0 -27.0 -24.0 -23.0 -22.0 -19.0 -14.0 -11.0 -10.0 -7.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 9.0 4.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -17.0 -22.0 -23.0 -26.0 -25.0 -30.0 -31.0 -34.0 -37.0 -40.0 -43.0 -44.0 -47.0 -46.0 -53.0 -56.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -69.0 -72.0 -71.0 -72.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -93.0 -98.0 -101.0 -104.0 -105.0 -104.0 -109.0 60 -129.0 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -88.0 -87.0 -84.0 -83.0 -82.0 -81.0 -77.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -30.0 -27.0 -24.0 -23.0 -20.0 -19.0 -14.0 -11.0 -10.0 -5.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 13.0 10.0 9.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -15.0 -20.0 -17.0 -22.0 -23.0 -26.0 -27.0 -32.0 -31.0 -34.0 -37.0 -42.0 -43.0 -46.0 -49.0 -48.0 -55.0 -58.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -71.0 -74.0 -71.0 -72.0 -79.0 -80.0 -83.0 -86.0 -87.0 -90.0 -91.0 -92.0 -95.0 -100.0 -101.0 -106.0 -105.0 -104.0 61 -132.0 -131.0 -128.0 -123.0 -126.0 -123.0 -120.0 -119.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -95.0 -92.0 -93.0 -90.0 -87.0 -86.0 -85.0 -84.0 -82.0 -79.0 -76.0 -71.0 -70.0 -71.0 -66.0 -67.0 -60.0 -63.0 -62.0 -59.0 -54.0 -53.0 -50.0 -49.0 -48.0 -43.0 -42.0 -41.0 -36.0 -35.0 -32.0 -29.0 -24.0 -23.0 -22.0 -19.0 -16.0 -13.0 -10.0 -7.0 -4.0 -3.0 -2.0 -3.0 4.0 3.0 4.0 7.0 12.0 9.0 8.0 11.0 14.0 8.0 7.0 0.0 -3.0 -6.0 -9.0 -12.0 -13.0 -15.0 -18.0 -17.0 -22.0 -21.0 -26.0 -29.0 -30.0 -33.0 -34.0 -39.0 -40.0 -43.0 -46.0 -47.0 -48.0 -55.0 -56.0 -57.0 -62.0 -61.0 -64.0 -61.0 -66.0 -69.0 -72.0 -71.0 -74.0 -77.0 -80.0 -83.0 -84.0 -87.0 -88.0 -91.0 -94.0 -97.0 -100.0 -99.0 -104.0 -105.0 62 -135.0 -132.0 -131.0 -130.0 -125.0 -124.0 -123.0 -120.0 -117.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -97.0 -92.0 -95.0 -92.0 -87.0 -88.0 -87.0 -83.0 -80.0 -77.0 -76.0 -73.0 -72.0 -71.0 -66.0 -67.0 -62.0 -63.0 -60.0 -59.0 -56.0 -53.0 -52.0 -49.0 -48.0 -45.0 -42.0 -41.0 -36.0 -33.0 -30.0 -29.0 -26.0 -25.0 -20.0 -17.0 -16.0 -11.0 -10.0 -7.0 -6.0 -5.0 -2.0 -5.0 2.0 3.0 4.0 7.0 12.0 7.0 6.0 9.0 14.0 6.0 5.0 0.0 -5.0 -6.0 -9.0 -14.0 -14.0 -15.0 -18.0 -17.0 -22.0 -23.0 -28.0 -29.0 -30.0 -33.0 -36.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -57.0 -56.0 -57.0 -62.0 -61.0 -64.0 -63.0 -66.0 -69.0 -72.0 -71.0 -74.0 -79.0 -82.0 -83.0 -84.0 -87.0 -88.0 -93.0 -96.0 -99.0 -102.0 -99.0 -104.0 63 -136.0 -137.0 -132.0 -133.0 -132.0 -127.0 -124.0 -125.0 -122.0 -119.0 -118.0 -111.0 -114.0 -111.0 -110.0 -105.0 -106.0 -103.0 -100.0 -99.0 -92.0 -97.0 -94.0 -89.0 -90.0 -88.0 -85.0 -82.0 -79.0 -78.0 -73.0 -74.0 -73.0 -68.0 -69.0 -64.0 -65.0 -62.0 -57.0 -54.0 -53.0 -54.0 -49.0 -48.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -27.0 -26.0 -25.0 -22.0 -19.0 -16.0 -13.0 -12.0 -7.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 2.0 5.0 12.0 8.0 6.0 7.0 14.0 4.0 3.0 -2.0 -6.0 -8.0 -9.0 -14.0 -16.0 -15.0 -17.0 -17.0 -21.0 -25.0 -29.0 -31.0 -30.0 -33.0 -36.0 -38.0 -43.0 -46.0 -49.0 -49.0 -50.0 -56.0 -55.0 -57.0 -61.0 -61.0 -63.0 -63.0 -66.0 -69.0 -73.0 -71.0 -76.0 -78.0 -81.0 -82.0 -83.0 -88.0 -88.0 -94.0 -95.0 -98.0 -101.0 -99.0 64 -141.0 -138.0 -137.0 -134.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -113.0 -114.0 -113.0 -112.0 -107.0 -106.0 -105.0 -102.0 -101.0 -94.0 -98.0 -94.0 -89.0 -91.0 -88.0 -85.0 -82.0 -81.0 -80.0 -75.0 -76.0 -73.0 -68.0 -71.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -54.0 -51.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -29.0 -28.0 -25.0 -20.0 -19.0 -18.0 -15.0 -14.0 -9.0 -10.0 -9.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 10.0 6.0 6.0 6.0 14.0 3.0 3.0 -3.0 -5.0 -9.0 -10.0 -14.0 -15.0 -15.0 -17.0 -19.0 -21.0 -26.0 -29.0 -30.0 -30.0 -32.0 -37.0 -38.0 -43.0 -46.0 -49.0 -51.0 -50.0 -56.0 -55.0 -57.0 -59.0 -62.0 -61.0 -63.0 -65.0 -68.0 -71.0 -71.0 -75.0 -76.0 -81.0 -82.0 -85.0 -88.0 -88.0 -94.0 -95.0 -98.0 -99.0 65 -144.0 -141.0 -140.0 -139.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -113.0 -110.0 -107.0 -108.0 -103.0 -104.0 -101.0 -94.0 -99.0 -96.0 -89.0 -89.0 -86.0 -85.0 -84.0 -83.0 -80.0 -75.0 -76.0 -75.0 -68.0 -69.0 -68.0 -65.0 -62.0 -61.0 -56.0 -57.0 -56.0 -51.0 -50.0 -45.0 -42.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -17.0 -16.0 -9.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 8.0 6.0 4.0 4.0 14.0 1.0 3.0 -3.0 -5.0 -10.0 -10.0 -14.0 -15.0 -15.0 -17.0 -21.0 -21.0 -26.0 -29.0 -30.0 -30.0 -34.0 -39.0 -40.0 -45.0 -48.0 -51.0 -51.0 -50.0 -56.0 -55.0 -57.0 -61.0 -64.0 -61.0 -63.0 -67.0 -68.0 -73.0 -71.0 -75.0 -78.0 -81.0 -82.0 -87.0 -90.0 -90.0 -96.0 -95.0 -98.0 66 -147.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -109.0 -108.0 -105.0 -104.0 -103.0 -94.0 -97.0 -97.0 -91.0 -91.0 -88.0 -87.0 -86.0 -83.0 -82.0 -77.0 -76.0 -77.0 -70.0 -69.0 -68.0 -65.0 -64.0 -63.0 -58.0 -59.0 -56.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -37.0 -34.0 -31.0 -26.0 -21.0 -22.0 -21.0 -20.0 -19.0 -18.0 -11.0 -14.0 -13.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 6.0 4.0 4.0 2.0 14.0 1.0 1.0 -5.0 -3.0 -10.0 -10.0 -12.0 -13.0 -16.0 -15.0 -22.0 -23.0 -26.0 -27.0 -28.0 -32.0 -34.0 -39.0 -42.0 -43.0 -46.0 -49.0 -50.0 -50.0 -54.0 -55.0 -58.0 -59.0 -62.0 -61.0 -63.0 -67.0 -68.0 -71.0 -71.0 -77.0 -78.0 -81.0 -84.0 -85.0 -88.0 -90.0 -94.0 -95.0 67 -150.0 -147.0 -146.0 -145.0 -144.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -113.0 -114.0 -109.0 -110.0 -107.0 -104.0 -103.0 -96.0 -97.0 -95.0 -91.0 -91.0 -90.0 -89.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -68.0 -67.0 -64.0 -63.0 -60.0 -57.0 -56.0 -51.0 -48.0 -45.0 -44.0 -41.0 -40.0 -35.0 -32.0 -31.0 -26.0 -21.0 -22.0 -23.0 -22.0 -19.0 -18.0 -13.0 -14.0 -11.0 -8.0 -7.0 -6.0 -3.0 -2.0 1.0 4.0 2.0 4.0 1.0 14.0 3.0 0.0 -4.0 -1.0 -8.0 -9.0 -10.0 -13.0 -16.0 -15.0 -20.0 -23.0 -26.0 -27.0 -30.0 -33.0 -36.0 -39.0 -42.0 -41.0 -44.0 -47.0 -48.0 -49.0 -52.0 -55.0 -56.0 -57.0 -60.0 -63.0 -63.0 -67.0 -70.0 -71.0 -73.0 -75.0 -76.0 -81.0 -84.0 -87.0 -86.0 -89.0 -92.0 68 -153.0 -150.0 -149.0 -148.0 -147.0 -142.0 -141.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -124.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -111.0 -110.0 -107.0 -106.0 -103.0 -96.0 -97.0 -95.0 -93.0 -91.0 -92.0 -89.0 -86.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -70.0 -67.0 -66.0 -65.0 -60.0 -59.0 -54.0 -51.0 -48.0 -47.0 -44.0 -43.0 -38.0 -35.0 -34.0 -29.0 -26.0 -21.0 -24.0 -25.0 -22.0 -21.0 -20.0 -13.0 -14.0 -11.0 -8.0 -8.0 -6.0 -5.0 -2.0 -1.0 2.0 2.0 2.0 3.0 14.0 2.0 1.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -27.0 -30.0 -33.0 -36.0 -37.0 -42.0 -39.0 -42.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -72.0 -73.0 -78.0 -81.0 -84.0 -87.0 -84.0 -89.0 69 -154.0 -155.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -140.0 -137.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -120.0 -119.0 -118.0 -117.0 -112.0 -113.0 -112.0 -109.0 -106.0 -105.0 -98.0 -99.0 -97.0 -95.0 -91.0 -92.0 -91.0 -88.0 -87.0 -86.0 -81.0 -78.0 -75.0 -72.0 -71.0 -72.0 -67.0 -66.0 -65.0 -62.0 -57.0 -56.0 -53.0 -50.0 -45.0 -44.0 -43.0 -40.0 -37.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -24.0 -21.0 -22.0 -15.0 -16.0 -13.0 -8.0 -6.0 -8.0 -7.0 -2.0 -3.0 0.0 0.0 0.0 1.0 14.0 4.0 3.0 -2.0 1.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -20.0 -21.0 -22.0 -27.0 -30.0 -33.0 -34.0 -35.0 -40.0 -37.0 -40.0 -43.0 -46.0 -49.0 -50.0 -53.0 -54.0 -57.0 -56.0 -61.0 -64.0 -65.0 -66.0 -67.0 -72.0 -73.0 -78.0 -79.0 -82.0 -85.0 -84.0 70 -159.0 -156.0 -155.0 -150.0 -153.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -125.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -108.0 -103.0 -98.0 -98.0 -97.0 -97.0 -91.0 -94.0 -89.0 -90.0 -87.0 -86.0 -83.0 -80.0 -77.0 -72.0 -73.0 -72.0 -67.0 -68.0 -63.0 -62.0 -55.0 -56.0 -51.0 -50.0 -47.0 -46.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -21.0 -28.0 -25.0 -26.0 -22.0 -20.0 -15.0 -18.0 -14.0 -10.0 -6.0 -10.0 -9.0 -4.0 -5.0 0.0 -2.0 -2.0 1.0 14.0 6.0 5.0 0.0 1.0 -4.0 -7.0 -10.0 -13.0 -14.0 -17.0 -18.0 -21.0 -24.0 -25.0 -28.0 -31.0 -36.0 -35.0 -40.0 -37.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -66.0 -69.0 -72.0 -75.0 -78.0 -79.0 -82.0 -83.0 71 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -84.0 -81.0 -80.0 -77.0 -72.0 -75.0 -74.0 -67.0 -68.0 -63.0 -60.0 -53.0 -54.0 -53.0 -52.0 -47.0 -44.0 -43.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -30.0 -27.0 -26.0 -22.0 -18.0 -15.0 -18.0 -12.0 -10.0 -6.0 -12.0 -11.0 -4.0 -7.0 0.0 -2.0 0.0 1.0 14.0 8.0 5.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -14.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -29.0 -34.0 -37.0 -38.0 -35.0 -38.0 -43.0 -46.0 -45.0 -48.0 -51.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -64.0 -69.0 -72.0 -75.0 -76.0 -77.0 -80.0 72 -161.0 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -118.0 -119.0 -112.0 -113.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -82.0 -79.0 -80.0 -77.0 -72.0 -75.0 -72.0 -67.0 -66.0 -63.0 -60.0 -53.0 -52.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -29.0 -27.0 -26.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -11.0 -4.0 -7.0 0.0 -2.0 2.0 3.0 14.0 10.0 7.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -27.0 -28.0 -27.0 -32.0 -35.0 -36.0 -35.0 -36.0 -43.0 -44.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -60.0 -63.0 -66.0 -69.0 -72.0 -73.0 -74.0 -77.0 73 -162.0 -161.0 -158.0 -159.0 -156.0 -155.0 -150.0 -151.0 -148.0 -145.0 -142.0 -141.0 -138.0 -137.0 -134.0 -135.0 -130.0 -129.0 -128.0 -123.0 -122.0 -119.0 -118.0 -117.0 -112.0 -113.0 -110.0 -108.0 -105.0 -102.0 -98.0 -100.0 -97.0 -96.0 -91.0 -94.0 -91.0 -88.0 -83.0 -80.0 -79.0 -80.0 -75.0 -72.0 -73.0 -70.0 -67.0 -64.0 -61.0 -58.0 -53.0 -52.0 -51.0 -48.0 -45.0 -42.0 -41.0 -38.0 -35.0 -36.0 -33.0 -30.0 -21.0 -27.0 -27.0 -24.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -9.0 -4.0 -7.0 0.0 -1.0 2.0 5.0 14.0 12.0 7.0 2.0 -1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -15.0 -18.0 -21.0 -22.0 -25.0 -26.0 -27.0 -30.0 -33.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -44.0 -49.0 -52.0 -53.0 -52.0 -55.0 -60.0 -61.0 -66.0 -67.0 -70.0 -71.0 -72.0 74 -165.0 -164.0 -159.0 -158.0 -161.0 -156.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -137.0 -136.0 -133.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -113.0 -111.0 -108.0 -107.0 -102.0 -100.0 -100.0 -97.0 -98.0 -93.0 -94.0 -91.0 -86.0 -83.0 -80.0 -81.0 -78.0 -75.0 -74.0 -73.0 -70.0 -67.0 -64.0 -61.0 -56.0 -53.0 -54.0 -50.0 -47.0 -45.0 -44.0 -43.0 -38.0 -37.0 -36.0 -33.0 -28.0 -21.0 -27.0 -27.0 -26.0 -20.0 -18.0 -17.0 -18.0 -12.0 -12.0 -6.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 2.0 7.0 13.0 14.0 5.0 2.0 -1.0 0.0 -3.0 -6.0 -7.0 -12.0 -15.0 -18.0 -19.0 -22.0 -25.0 -24.0 -27.0 -30.0 -31.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 -57.0 -58.0 -63.0 -64.0 -67.0 -70.0 -69.0 75 -166.0 -167.0 -166.0 -159.0 -158.0 -159.0 -154.0 -153.0 -152.0 -149.0 -148.0 -143.0 -144.0 -139.0 -138.0 -137.0 -136.0 -131.0 -132.0 -127.0 -128.0 -123.0 -126.0 -121.0 -116.0 -117.0 -114.0 -114.0 -111.0 -110.0 -107.0 -102.0 -100.0 -98.0 -97.0 -99.0 -93.0 -92.0 -91.0 -86.0 -84.0 -82.0 -83.0 -79.0 -77.0 -75.0 -72.0 -69.0 -67.0 -64.0 -60.0 -56.0 -54.0 -54.0 -48.0 -45.0 -46.0 -46.0 -45.0 -39.0 -39.0 -36.0 -32.0 -29.0 -21.0 -28.0 -29.0 -26.0 -20.0 -19.0 -19.0 -18.0 -12.0 -14.0 -6.0 -13.0 -13.0 -8.0 -6.0 -4.0 0.0 2.0 5.0 13.0 14.0 3.0 0.0 -1.0 0.0 -3.0 -8.0 -7.0 -14.0 -17.0 -20.0 -21.0 -22.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -52.0 -51.0 -54.0 -59.0 -58.0 -63.0 -64.0 -67.0 -70.0 76 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -126.0 -123.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -110.0 -105.0 -102.0 -100.0 -98.0 -97.0 -97.0 -93.0 -93.0 -90.0 -86.0 -84.0 -83.0 -84.0 -79.0 -78.0 -73.0 -70.0 -67.0 -66.0 -63.0 -60.0 -56.0 -54.0 -53.0 -48.0 -45.0 -46.0 -47.0 -44.0 -39.0 -38.0 -35.0 -30.0 -29.0 -21.0 -28.0 -28.0 -25.0 -20.0 -19.0 -20.0 -19.0 -12.0 -15.0 -6.0 -12.0 -12.0 -9.0 -4.0 -3.0 2.0 3.0 4.0 13.0 14.0 3.0 0.0 -3.0 0.0 -5.0 -10.0 -9.0 -16.0 -19.0 -22.0 -21.0 -24.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -44.0 -43.0 -46.0 -49.0 -52.0 -51.0 -56.0 -61.0 -60.0 -63.0 -64.0 -67.0 77 -172.0 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -113.0 -108.0 -105.0 -104.0 -100.0 -98.0 -97.0 -97.0 -91.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -81.0 -76.0 -73.0 -70.0 -67.0 -64.0 -64.0 -58.0 -56.0 -56.0 -51.0 -48.0 -45.0 -47.0 -47.0 -42.0 -39.0 -38.0 -33.0 -30.0 -29.0 -21.0 -28.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -14.0 -12.0 -7.0 -4.0 -3.0 4.0 1.0 2.0 13.0 14.0 3.0 0.0 -1.0 -2.0 -7.0 -10.0 -9.0 -16.0 -19.0 -20.0 -21.0 -24.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -35.0 -36.0 -41.0 -44.0 -43.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -62.0 -61.0 -64.0 78 -171.0 -172.0 -167.0 -166.0 -167.0 -164.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -108.0 -105.0 -104.0 -100.0 -98.0 -98.0 -95.0 -89.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -79.0 -76.0 -73.0 -70.0 -65.0 -64.0 -62.0 -58.0 -56.0 -54.0 -51.0 -48.0 -45.0 -47.0 -45.0 -42.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -12.0 -10.0 -7.0 -2.0 -1.0 4.0 1.0 2.0 13.0 14.0 5.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -22.0 -23.0 -26.0 -25.0 -26.0 -31.0 -34.0 -33.0 -34.0 -39.0 -42.0 -43.0 -44.0 -49.0 -50.0 -55.0 -56.0 -59.0 -62.0 -61.0 79 -174.0 -173.0 -172.0 -167.0 -166.0 -167.0 -164.0 -161.0 -160.0 -157.0 -156.0 -151.0 -152.0 -149.0 -148.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -130.0 -123.0 -124.0 -125.0 -122.0 -120.0 -116.0 -115.0 -113.0 -112.0 -111.0 -106.0 -105.0 -104.0 -99.0 -96.0 -98.0 -95.0 -89.0 -91.0 -90.0 -86.0 -84.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -65.0 -64.0 -60.0 -56.0 -54.0 -54.0 -51.0 -48.0 -45.0 -45.0 -43.0 -40.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -26.0 -25.0 -20.0 -21.0 -18.0 -19.0 -14.0 -13.0 -6.0 -10.0 -8.0 -5.0 -2.0 -1.0 4.0 1.0 4.0 13.0 14.0 7.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -20.0 -23.0 -26.0 -25.0 -24.0 -29.0 -32.0 -33.0 -32.0 -37.0 -42.0 -43.0 -46.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 80 -177.0 -174.0 -175.0 -174.0 -167.0 -166.0 -167.0 -166.0 -161.0 -160.0 -159.0 -154.0 -153.0 -150.0 -149.0 -150.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -128.0 -123.0 -126.0 -123.0 -123.0 -118.0 -116.0 -117.0 -111.0 -114.0 -109.0 -106.0 -107.0 -104.0 -97.0 -96.0 -96.0 -96.0 -89.0 -91.0 -92.0 -86.0 -85.0 -83.0 -80.0 -77.0 -72.0 -69.0 -69.0 -67.0 -63.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -43.0 -43.0 -40.0 -39.0 -37.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -17.0 -16.0 -13.0 -8.0 -9.0 -8.0 -3.0 -4.0 -1.0 2.0 3.0 3.0 13.0 14.0 5.0 4.0 -1.0 -2.0 -7.0 -8.0 -7.0 -12.0 -15.0 -16.0 -17.0 -18.0 -23.0 -24.0 -23.0 -24.0 -29.0 -30.0 -33.0 -32.0 -37.0 -40.0 -43.0 -46.0 -47.0 -52.0 -53.0 -54.0 -57.0 81 -178.0 -177.0 -172.0 -175.0 -174.0 -167.0 -164.0 -167.0 -164.0 -159.0 -160.0 -157.0 -154.0 -153.0 -150.0 -149.0 -148.0 -145.0 -144.0 -139.0 -138.0 -135.0 -134.0 -133.0 -128.0 -123.0 -126.0 -122.0 -121.0 -118.0 -116.0 -116.0 -111.0 -112.0 -109.0 -106.0 -108.0 -102.0 -97.0 -94.0 -96.0 -96.0 -89.0 -91.0 -90.0 -84.0 -83.0 -81.0 -78.0 -75.0 -70.0 -69.0 -67.0 -65.0 -61.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -41.0 -41.0 -40.0 -39.0 -35.0 -31.0 -28.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -15.0 -14.0 -13.0 -8.0 -7.0 -6.0 -3.0 -4.0 -1.0 2.0 4.0 5.0 13.0 14.0 5.0 2.0 -1.0 0.0 -5.0 -6.0 -5.0 -10.0 -13.0 -14.0 -17.0 -16.0 -21.0 -22.0 -23.0 -24.0 -29.0 -32.0 -33.0 -32.0 -35.0 -40.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 82 -179.0 -178.0 -175.0 -172.0 -175.0 -172.0 -167.0 -164.0 -165.0 -162.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -123.0 -125.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -109.0 -106.0 -107.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -92.0 -89.0 -82.0 -81.0 -81.0 -78.0 -73.0 -70.0 -71.0 -65.0 -64.0 -59.0 -58.0 -57.0 -54.0 -55.0 -53.0 -50.0 -45.0 -41.0 -42.0 -42.0 -38.0 -33.0 -31.0 -30.0 -31.0 -21.0 -28.0 -30.0 -27.0 -24.0 -23.0 -18.0 -17.0 -16.0 -15.0 -8.0 -9.0 -6.0 -5.0 -6.0 -3.0 2.0 2.0 5.0 14.0 12.0 5.0 2.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -11.0 -14.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -30.0 -31.0 -32.0 -37.0 -38.0 -43.0 -44.0 -47.0 -50.0 -49.0 83 -182.0 -179.0 -178.0 -175.0 -172.0 -173.0 -170.0 -167.0 -164.0 -163.0 -162.0 -157.0 -158.0 -155.0 -154.0 -153.0 -148.0 -145.0 -146.0 -143.0 -142.0 -139.0 -138.0 -133.0 -130.0 -131.0 -126.0 -122.0 -123.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -107.0 -104.0 -105.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -90.0 -87.0 -80.0 -79.0 -80.0 -77.0 -74.0 -71.0 -70.0 -63.0 -62.0 -59.0 -58.0 -57.0 -54.0 -53.0 -52.0 -49.0 -46.0 -41.0 -42.0 -41.0 -36.0 -33.0 -33.0 -32.0 -32.0 -21.0 -28.0 -28.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -11.0 -6.0 -7.0 -6.0 -4.0 2.0 4.0 5.0 14.0 10.0 3.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -32.0 -31.0 -34.0 -39.0 -38.0 -45.0 -46.0 -47.0 -50.0 84 -183.0 -182.0 -179.0 -178.0 -175.0 -174.0 -173.0 -172.0 -167.0 -162.0 -165.0 -162.0 -157.0 -156.0 -157.0 -156.0 -153.0 -146.0 -145.0 -146.0 -143.0 -140.0 -141.0 -138.0 -135.0 -130.0 -131.0 -125.0 -120.0 -123.0 -120.0 -119.0 -118.0 -115.0 -116.0 -109.0 -110.0 -105.0 -104.0 -103.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -88.0 -85.0 -78.0 -77.0 -78.0 -77.0 -74.0 -71.0 -68.0 -63.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -50.0 -47.0 -46.0 -41.0 -40.0 -39.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -26.0 -29.0 -29.0 -26.0 -21.0 -21.0 -19.0 -18.0 -13.0 -12.0 -13.0 -8.0 -9.0 -7.0 -4.0 0.0 2.0 5.0 14.0 10.0 1.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -15.0 -16.0 -15.0 -18.0 -19.0 -24.0 -21.0 -26.0 -29.0 -32.0 -33.0 -36.0 -41.0 -40.0 -45.0 -46.0 -47.0 85 -182.0 -183.0 -180.0 -179.0 -178.0 -175.0 -174.0 -173.0 -170.0 -165.0 -162.0 -163.0 -162.0 -157.0 -156.0 -157.0 -154.0 -151.0 -146.0 -145.0 -146.0 -141.0 -140.0 -139.0 -136.0 -135.0 -130.0 -130.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -102.0 -103.0 -100.0 -97.0 -94.0 -97.0 -92.0 -89.0 -88.0 -83.0 -76.0 -77.0 -78.0 -75.0 -72.0 -69.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -50.0 -51.0 -48.0 -47.0 -46.0 -39.0 -38.0 -37.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -26.0 -29.0 -29.0 -24.0 -22.0 -21.0 -21.0 -16.0 -15.0 -14.0 -15.0 -10.0 -10.0 -7.0 -3.0 -1.0 2.0 5.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -4.0 -5.0 -12.0 -13.0 -14.0 -15.0 -18.0 -21.0 -24.0 -21.0 -26.0 -29.0 -32.0 -35.0 -36.0 -41.0 -40.0 -43.0 -46.0 86 -185.0 -182.0 -181.0 -180.0 -179.0 -178.0 -173.0 -174.0 -171.0 -168.0 -165.0 -162.0 -163.0 -160.0 -157.0 -156.0 -155.0 -152.0 -151.0 -146.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -133.0 -129.0 -128.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -114.0 -107.0 -106.0 -101.0 -102.0 -103.0 -98.0 -97.0 -94.0 -95.0 -92.0 -87.0 -86.0 -81.0 -76.0 -77.0 -76.0 -73.0 -70.0 -67.0 -66.0 -63.0 -62.0 -57.0 -56.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -37.0 -36.0 -37.0 -34.0 -33.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -27.0 -26.0 -22.0 -21.0 -21.0 -16.0 -16.0 -16.0 -15.0 -10.0 -10.0 -7.0 -1.0 1.0 1.0 3.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -6.0 -5.0 -12.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -21.0 -26.0 -31.0 -32.0 -37.0 -36.0 -41.0 -40.0 -43.0 87 -182.0 -186.0 -180.0 -183.0 -180.0 -181.0 -176.0 -173.0 -172.0 -169.0 -170.0 -165.0 -162.0 -163.0 -160.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -147.0 -146.0 -143.0 -140.0 -139.0 -136.0 -132.0 -127.0 -130.0 -123.0 -122.0 -123.0 -118.0 -121.0 -118.0 -115.0 -112.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -97.0 -92.0 -93.0 -90.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -68.0 -67.0 -66.0 -63.0 -62.0 -55.0 -54.0 -51.0 -50.0 -51.0 -48.0 -45.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -27.0 -27.0 -27.0 -22.0 -21.0 -21.0 -18.0 -16.0 -18.0 -14.0 -11.0 -9.0 -5.0 -1.0 1.0 1.0 3.0 14.0 10.0 3.0 2.0 1.0 2.0 -5.0 -6.0 -5.0 -10.0 -13.0 -12.0 -17.0 -20.0 -21.0 -22.0 -21.0 -28.0 -29.0 -34.0 -35.0 -36.0 -41.0 -40.0 88 -189.0 -182.0 -187.0 -180.0 -183.0 -178.0 -179.0 -176.0 -173.0 -170.0 -169.0 -168.0 -165.0 -160.0 -163.0 -160.0 -159.0 -156.0 -153.0 -150.0 -149.0 -146.0 -147.0 -144.0 -141.0 -140.0 -137.0 -135.0 -130.0 -127.0 -130.0 -123.0 -122.0 -121.0 -118.0 -121.0 -118.0 -113.0 -110.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -90.0 -92.0 -90.0 -83.0 -82.0 -79.0 -78.0 -75.0 -72.0 -71.0 -70.0 -67.0 -66.0 -63.0 -62.0 -53.0 -52.0 -51.0 -50.0 -51.0 -46.0 -43.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -29.0 -27.0 -27.0 -22.0 -21.0 -22.0 -18.0 -16.0 -18.0 -15.0 -10.0 -7.0 -6.0 -1.0 1.0 3.0 2.0 14.0 10.0 1.0 2.0 1.0 3.0 -4.0 -6.0 -5.0 -9.0 -12.0 -14.0 -18.0 -19.0 -20.0 -22.0 -23.0 -29.0 -31.0 -33.0 -37.0 -36.0 -40.0 89 -188.0 -189.0 -182.0 -187.0 -180.0 -183.0 -176.0 -179.0 -176.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -163.0 -158.0 -157.0 -156.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -141.0 -138.0 -136.0 -133.0 -130.0 -127.0 -128.0 -123.0 -122.0 -121.0 -118.0 -119.0 -116.0 -111.0 -108.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -88.0 -91.0 -88.0 -83.0 -82.0 -79.0 -78.0 -73.0 -70.0 -71.0 -70.0 -67.0 -64.0 -63.0 -60.0 -53.0 -50.0 -51.0 -50.0 -49.0 -44.0 -41.0 -42.0 -37.0 -36.0 -35.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -27.0 -29.0 -27.0 -25.0 -22.0 -21.0 -22.0 -18.0 -15.0 -18.0 -13.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 4.0 14.0 10.0 2.0 2.0 1.0 3.0 -2.0 -5.0 -7.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -23.0 -23.0 -29.0 -30.0 -31.0 -36.0 -35.0 90 -189.0 -188.0 -187.0 -182.0 -189.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -159.0 -154.0 -153.0 -152.0 -147.0 -146.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -119.0 -116.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -86.0 -89.0 -88.0 -85.0 -82.0 -77.0 -78.0 -71.0 -70.0 -71.0 -70.0 -67.0 -62.0 -63.0 -60.0 -53.0 -50.0 -51.0 -48.0 -49.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -33.0 -30.0 -21.0 -27.0 -27.0 -27.0 -25.0 -23.0 -21.0 -22.0 -18.0 -15.0 -16.0 -11.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 6.0 14.0 10.0 4.0 3.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -17.0 -18.0 -23.0 -25.0 -29.0 -30.0 -31.0 -34.0 91 -194.0 -189.0 -190.0 -187.0 -182.0 -187.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -154.0 -151.0 -152.0 -147.0 -144.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -117.0 -114.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -99.0 -96.0 -93.0 -86.0 -87.0 -88.0 -85.0 -82.0 -77.0 -76.0 -71.0 -70.0 -71.0 -68.0 -65.0 -62.0 -61.0 -58.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -31.0 -30.0 -21.0 -27.0 -25.0 -28.0 -25.0 -23.0 -21.0 -22.0 -17.0 -13.0 -14.0 -9.0 -8.0 -5.0 -4.0 1.0 3.0 7.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 -31.0 92 -193.0 -194.0 -187.0 -190.0 -187.0 -182.0 -185.0 -180.0 -183.0 -176.0 -179.0 -174.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -156.0 -151.0 -150.0 -147.0 -146.0 -145.0 -143.0 -138.0 -137.0 -134.0 -133.0 -134.0 -131.0 -130.0 -125.0 -126.0 -121.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -108.0 -105.0 -102.0 -99.0 -94.0 -91.0 -84.0 -87.0 -86.0 -83.0 -80.0 -77.0 -76.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -59.0 -58.0 -53.0 -50.0 -49.0 -46.0 -49.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -21.0 -17.0 -13.0 -12.0 -9.0 -8.0 -3.0 -2.0 3.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -7.0 -8.0 -7.0 -8.0 -13.0 -18.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 93 -196.0 -193.0 -192.0 -187.0 -190.0 -185.0 -182.0 -185.0 -180.0 -181.0 -176.0 -177.0 -174.0 -171.0 -170.0 -167.0 -166.0 -161.0 -160.0 -159.0 -156.0 -157.0 -156.0 -149.0 -148.0 -147.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -133.0 -131.0 -130.0 -127.0 -124.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -108.0 -103.0 -102.0 -97.0 -92.0 -89.0 -84.0 -87.0 -84.0 -81.0 -80.0 -79.0 -78.0 -71.0 -72.0 -71.0 -64.0 -61.0 -62.0 -59.0 -60.0 -53.0 -48.0 -49.0 -46.0 -49.0 -44.0 -43.0 -42.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -19.0 -15.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 5.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 -2.0 -9.0 -8.0 -7.0 -8.0 -15.0 -18.0 -21.0 -20.0 -23.0 -25.0 -29.0 94 -197.0 -196.0 -193.0 -192.0 -187.0 -190.0 -183.0 -182.0 -185.0 -178.0 -181.0 -174.0 -177.0 -172.0 -171.0 -170.0 -165.0 -164.0 -161.0 -158.0 -159.0 -156.0 -157.0 -154.0 -147.0 -148.0 -145.0 -146.0 -142.0 -141.0 -138.0 -137.0 -134.0 -131.0 -133.0 -131.0 -128.0 -127.0 -122.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -106.0 -101.0 -100.0 -95.0 -90.0 -89.0 -84.0 -85.0 -82.0 -79.0 -80.0 -79.0 -78.0 -71.0 -72.0 -69.0 -62.0 -61.0 -62.0 -59.0 -60.0 -51.0 -48.0 -49.0 -46.0 -49.0 -44.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -36.0 -31.0 -28.0 -21.0 -25.0 -25.0 -26.0 -24.0 -24.0 -18.0 -17.0 -16.0 -13.0 -12.0 -9.0 -6.0 -3.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 4.0 0.0 1.0 1.0 -4.0 -7.0 -8.0 -7.0 -10.0 -15.0 -20.0 -21.0 -20.0 -23.0 -25.0 95 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -164.0 -159.0 -158.0 -160.0 -156.0 -155.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -141.0 -138.0 -137.0 -132.0 -131.0 -133.0 -129.0 -126.0 -127.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -110.0 -103.0 -104.0 -99.0 -98.0 -93.0 -90.0 -89.0 -84.0 -83.0 -80.0 -79.0 -80.0 -79.0 -78.0 -71.0 -70.0 -67.0 -62.0 -61.0 -62.0 -57.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -34.0 -31.0 -28.0 -21.0 -25.0 -25.0 -25.0 -24.0 -23.0 -16.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 2.0 1.0 -1.0 1.0 -4.0 -9.0 -8.0 -7.0 -12.0 -17.0 -22.0 -23.0 -20.0 -23.0 96 -201.0 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -162.0 -159.0 -156.0 -161.0 -156.0 -153.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -139.0 -138.0 -137.0 -132.0 -131.0 -134.0 -129.0 -124.0 -125.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -104.0 -99.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -77.0 -76.0 -71.0 -68.0 -65.0 -62.0 -61.0 -62.0 -57.0 -56.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -42.0 -39.0 -40.0 -35.0 -34.0 -35.0 -32.0 -31.0 -28.0 -21.0 -25.0 -25.0 -23.0 -22.0 -21.0 -14.0 -17.0 -16.0 -11.0 -8.0 -7.0 -4.0 1.0 0.0 5.0 4.0 9.0 10.0 14.0 10.0 4.0 3.0 0.0 1.0 -6.0 -7.0 -10.0 -9.0 -12.0 -19.0 -20.0 -23.0 -20.0 97 -200.0 -201.0 -200.0 -197.0 -200.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -170.0 -163.0 -162.0 -159.0 -156.0 -159.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -144.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -132.0 -129.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -109.0 -106.0 -101.0 -102.0 -97.0 -96.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -75.0 -74.0 -69.0 -66.0 -65.0 -62.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -34.0 -35.0 -32.0 -33.0 -28.0 -21.0 -25.0 -24.0 -23.0 -22.0 -19.0 -14.0 -17.0 -14.0 -9.0 -6.0 -5.0 -2.0 1.0 0.0 5.0 4.0 9.0 12.0 14.0 10.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -18.0 -21.0 98 -205.0 -200.0 -201.0 -200.0 -197.0 -198.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -168.0 -163.0 -160.0 -159.0 -156.0 -157.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -142.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -130.0 -127.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -112.0 -111.0 -106.0 -101.0 -102.0 -97.0 -94.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -78.0 -75.0 -72.0 -67.0 -68.0 -67.0 -62.0 -63.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -32.0 -33.0 -28.0 -21.0 -24.0 -22.0 -21.0 -20.0 -19.0 -14.0 -17.0 -12.0 -7.0 -4.0 -4.0 -4.0 0.0 -2.0 3.0 4.0 9.0 14.0 14.0 10.0 6.0 3.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -16.0 -19.0 -18.0 99 -206.0 -205.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -192.0 -185.0 -186.0 -181.0 -182.0 -181.0 -178.0 -179.0 -174.0 -173.0 -172.0 -169.0 -168.0 -163.0 -160.0 -157.0 -156.0 -157.0 -154.0 -153.0 -151.0 -146.0 -145.0 -142.0 -142.0 -138.0 -139.0 -136.0 -135.0 -132.0 -129.0 -128.0 -127.0 -122.0 -123.0 -122.0 -119.0 -116.0 -113.0 -110.0 -109.0 -104.0 -99.0 -102.0 -95.0 -92.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -77.0 -76.0 -73.0 -70.0 -67.0 -68.0 -67.0 -62.0 -61.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -34.0 -31.0 -28.0 -21.0 -24.0 -22.0 -19.0 -20.0 -19.0 -14.0 -15.0 -10.0 -5.0 -2.0 -4.0 -4.0 0.0 -2.0 3.0 6.0 9.0 14.0 14.0 10.0 6.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -15.0 -16.0 -19.0 100 -207.0 -206.0 -203.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -185.0 -184.0 -181.0 -182.0 -181.0 -178.0 -179.0 -172.0 -175.0 -172.0 -169.0 -166.0 -163.0 -158.0 -157.0 -156.0 -157.0 -153.0 -152.0 -151.0 -146.0 -143.0 -142.0 -140.0 -138.0 -139.0 -136.0 -133.0 -132.0 -127.0 -128.0 -127.0 -120.0 -123.0 -120.0 -117.0 -114.0 -111.0 -108.0 -107.0 -102.0 -99.0 -100.0 -93.0 -90.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -75.0 -74.0 -71.0 -70.0 -67.0 -68.0 -65.0 -60.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -44.0 -39.0 -40.0 -37.0 -32.0 -36.0 -36.0 -30.0 -27.0 -21.0 -24.0 -20.0 -19.0 -20.0 -17.0 -12.0 -13.0 -8.0 -3.0 -2.0 -4.0 -5.0 0.0 0.0 3.0 6.0 7.0 14.0 14.0 10.0 4.0 1.0 -2.0 -5.0 -6.0 -7.0 -14.0 -15.0 -16.0 101 -208.0 -209.0 -206.0 -205.0 -198.0 -203.0 -198.0 -197.0 -196.0 -191.0 -192.0 -183.0 -184.0 -181.0 -182.0 -181.0 -178.0 -177.0 -172.0 -173.0 -172.0 -167.0 -166.0 -161.0 -158.0 -157.0 -156.0 -156.0 -151.0 -152.0 -151.0 -144.0 -143.0 -140.0 -140.0 -138.0 -139.0 -134.0 -133.0 -130.0 -127.0 -128.0 -125.0 -120.0 -121.0 -118.0 -115.0 -112.0 -109.0 -106.0 -105.0 -102.0 -97.0 -98.0 -91.0 -90.0 -89.0 -88.0 -89.0 -84.0 -79.0 -78.0 -73.0 -72.0 -71.0 -70.0 -65.0 -66.0 -65.0 -60.0 -63.0 -62.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -42.0 -37.0 -40.0 -37.0 -32.0 -37.0 -35.0 -28.0 -27.0 -21.0 -22.0 -20.0 -19.0 -20.0 -15.0 -10.0 -11.0 -6.0 -3.0 -2.0 -4.0 -5.0 0.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 4.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -13.0 102 -213.0 -208.0 -207.0 -208.0 -207.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -177.0 -170.0 -173.0 -170.0 -167.0 -164.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -152.0 -149.0 -144.0 -141.0 -140.0 -140.0 -138.0 -137.0 -134.0 -131.0 -132.0 -127.0 -126.0 -127.0 -118.0 -119.0 -116.0 -113.0 -110.0 -107.0 -104.0 -105.0 -100.0 -95.0 -96.0 -91.0 -90.0 -89.0 -88.0 -87.0 -82.0 -77.0 -76.0 -71.0 -72.0 -71.0 -68.0 -63.0 -64.0 -65.0 -60.0 -63.0 -60.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -45.0 -40.0 -37.0 -40.0 -37.0 -32.0 -36.0 -33.0 -28.0 -27.0 -20.0 -22.0 -20.0 -19.0 -18.0 -13.0 -8.0 -9.0 -6.0 -3.0 -2.0 -4.0 -3.0 2.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 6.0 1.0 0.0 -3.0 -8.0 -5.0 -10.0 103 -210.0 -213.0 -208.0 -207.0 -208.0 -205.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -175.0 -170.0 -171.0 -170.0 -167.0 -162.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -140.0 -141.0 -138.0 -135.0 -132.0 -131.0 -132.0 -127.0 -126.0 -125.0 -118.0 -117.0 -116.0 -113.0 -112.0 -105.0 -104.0 -103.0 -100.0 -95.0 -94.0 -91.0 -92.0 -89.0 -86.0 -87.0 -84.0 -75.0 -74.0 -71.0 -72.0 -73.0 -68.0 -61.0 -64.0 -65.0 -60.0 -61.0 -58.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -43.0 -40.0 -37.0 -40.0 -37.0 -32.0 -34.0 -31.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -16.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 -2.0 -3.0 4.0 2.0 2.0 2.0 5.0 14.0 14.0 6.0 6.0 -1.0 0.0 -3.0 -8.0 -5.0 104 -215.0 -210.0 -213.0 -210.0 -207.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -179.0 -176.0 -177.0 -170.0 -171.0 -170.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -156.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -141.0 -136.0 -137.0 -132.0 -131.0 -132.0 -129.0 -126.0 -123.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -104.0 -101.0 -98.0 -93.0 -94.0 -91.0 -92.0 -89.0 -84.0 -85.0 -82.0 -75.0 -74.0 -71.0 -72.0 -71.0 -68.0 -61.0 -64.0 -67.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -47.0 -44.0 -45.0 -40.0 -37.0 -38.0 -37.0 -32.0 -32.0 -29.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -14.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 0.0 -1.0 4.0 2.0 2.0 4.0 7.0 14.0 14.0 5.0 4.0 -1.0 0.0 -3.0 -6.0 105 -218.0 -215.0 -210.0 -213.0 -210.0 -205.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -177.0 -176.0 -175.0 -170.0 -171.0 -168.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -139.0 -134.0 -139.0 -132.0 -131.0 -134.0 -129.0 -128.0 -121.0 -116.0 -115.0 -116.0 -109.0 -112.0 -105.0 -104.0 -103.0 -96.0 -93.0 -94.0 -93.0 -92.0 -89.0 -84.0 -85.0 -80.0 -75.0 -74.0 -71.0 -72.0 -71.0 -70.0 -61.0 -64.0 -65.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -45.0 -44.0 -45.0 -40.0 -37.0 -38.0 -36.0 -31.0 -30.0 -27.0 -26.0 -25.0 -18.0 -22.0 -18.0 -15.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 -2.0 2.0 -1.0 4.0 2.0 4.0 6.0 5.0 14.0 12.0 5.0 4.0 -1.0 2.0 -3.0 106 -219.0 -220.0 -215.0 -210.0 -213.0 -212.0 -205.0 -208.0 -205.0 -200.0 -199.0 -198.0 -197.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -175.0 -170.0 -171.0 -170.0 -167.0 -164.0 -159.0 -160.0 -158.0 -157.0 -156.0 -151.0 -152.0 -151.0 -144.0 -141.0 -136.0 -137.0 -134.0 -139.0 -132.0 -131.0 -132.0 -129.0 -126.0 -121.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -104.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -91.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -64.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -47.0 -42.0 -37.0 -37.0 -36.0 -29.0 -30.0 -29.0 -26.0 -23.0 -16.0 -20.0 -16.0 -13.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 0.0 2.0 -1.0 6.0 2.0 6.0 6.0 5.0 14.0 10.0 5.0 4.0 -1.0 2.0 107 -220.0 -219.0 -218.0 -215.0 -210.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -197.0 -198.0 -195.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -173.0 -170.0 -171.0 -168.0 -166.0 -163.0 -159.0 -160.0 -158.0 -157.0 -154.0 -151.0 -152.0 -149.0 -142.0 -139.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -130.0 -127.0 -124.0 -119.0 -114.0 -113.0 -114.0 -109.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -88.0 -89.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -62.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -45.0 -42.0 -37.0 -35.0 -34.0 -29.0 -30.0 -29.0 -24.0 -23.0 -16.0 -19.0 -16.0 -15.0 -12.0 -11.0 -10.0 -11.0 -4.0 1.0 0.0 2.0 1.0 8.0 2.0 6.0 6.0 6.0 14.0 8.0 5.0 4.0 -1.0 108 -223.0 -220.0 -219.0 -218.0 -217.0 -210.0 -209.0 -212.0 -205.0 -206.0 -203.0 -202.0 -197.0 -196.0 -195.0 -194.0 -193.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -176.0 -173.0 -170.0 -171.0 -169.0 -166.0 -163.0 -159.0 -161.0 -160.0 -155.0 -154.0 -153.0 -152.0 -147.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -128.0 -127.0 -122.0 -117.0 -112.0 -113.0 -114.0 -107.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -91.0 -86.0 -87.0 -82.0 -85.0 -80.0 -75.0 -72.0 -71.0 -70.0 -71.0 -70.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -47.0 -48.0 -44.0 -41.0 -39.0 -35.0 -34.0 -29.0 -30.0 -27.0 -22.0 -21.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -9.0 -4.0 1.0 0.0 2.0 0.0 8.0 2.0 6.0 8.0 6.0 14.0 8.0 5.0 4.0 109 -222.0 -223.0 -218.0 -219.0 -218.0 -217.0 -210.0 -209.0 -210.0 -203.0 -206.0 -201.0 -202.0 -197.0 -196.0 -195.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -174.0 -173.0 -170.0 -170.0 -167.0 -166.0 -163.0 -159.0 -161.0 -158.0 -155.0 -154.0 -153.0 -150.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -129.0 -126.0 -125.0 -120.0 -115.0 -112.0 -113.0 -112.0 -105.0 -104.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -89.0 -86.0 -87.0 -82.0 -83.0 -78.0 -75.0 -72.0 -71.0 -70.0 -71.0 -68.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -49.0 -47.0 -44.0 -39.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -22.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -7.0 -4.0 1.0 2.0 2.0 2.0 8.0 2.0 8.0 8.0 6.0 14.0 8.0 5.0 110 -227.0 -222.0 -223.0 -218.0 -219.0 -216.0 -215.0 -210.0 -209.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -191.0 -186.0 -187.0 -184.0 -181.0 -180.0 -177.0 -174.0 -171.0 -169.0 -168.0 -167.0 -166.0 -163.0 -159.0 -159.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -127.0 -124.0 -123.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -102.0 -101.0 -96.0 -91.0 -92.0 -89.0 -86.0 -87.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -49.0 -47.0 -42.0 -37.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -20.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 4.0 4.0 2.0 8.0 4.0 8.0 8.0 4.0 14.0 8.0 111 -228.0 -229.0 -222.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -203.0 -206.0 -201.0 -202.0 -199.0 -196.0 -195.0 -192.0 -191.0 -186.0 -187.0 -186.0 -183.0 -178.0 -179.0 -174.0 -173.0 -171.0 -170.0 -167.0 -164.0 -165.0 -161.0 -161.0 -160.0 -157.0 -154.0 -149.0 -146.0 -145.0 -144.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -129.0 -124.0 -121.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -100.0 -99.0 -96.0 -89.0 -90.0 -89.0 -86.0 -87.0 -80.0 -79.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -48.0 -45.0 -40.0 -35.0 -39.0 -39.0 -32.0 -27.0 -26.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -17.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 6.0 4.0 2.0 8.0 4.0 8.0 8.0 6.0 14.0 112 -233.0 -228.0 -227.0 -224.0 -227.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -197.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -170.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -157.0 -154.0 -151.0 -148.0 -145.0 -146.0 -139.0 -136.0 -135.0 -134.0 -133.0 -128.0 -127.0 -122.0 -121.0 -118.0 -113.0 -112.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -97.0 -94.0 -89.0 -90.0 -89.0 -86.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -46.0 -43.0 -40.0 -35.0 -40.0 -37.0 -32.0 -27.0 -24.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -15.0 -10.0 -11.0 -8.0 -5.0 -2.0 3.0 6.0 4.0 4.0 8.0 4.0 6.0 8.0 8.0 113 -234.0 -233.0 -228.0 -227.0 -224.0 -225.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -195.0 -192.0 -189.0 -188.0 -187.0 -182.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -168.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -133.0 -134.0 -133.0 -128.0 -125.0 -122.0 -121.0 -118.0 -113.0 -110.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -95.0 -92.0 -89.0 -90.0 -89.0 -86.0 -83.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -66.0 -61.0 -58.0 -55.0 -56.0 -55.0 -52.0 -52.0 -47.0 -44.0 -43.0 -40.0 -35.0 -38.0 -35.0 -30.0 -25.0 -22.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -13.0 -10.0 -11.0 -8.0 -3.0 0.0 3.0 6.0 4.0 4.0 8.0 6.0 6.0 8.0 114 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -199.0 -194.0 -197.0 -192.0 -189.0 -190.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -161.0 -158.0 -155.0 -152.0 -151.0 -150.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -131.0 -128.0 -125.0 -120.0 -119.0 -116.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -103.0 -98.0 -93.0 -92.0 -89.0 -90.0 -89.0 -84.0 -83.0 -80.0 -81.0 -78.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -54.0 -52.0 -50.0 -45.0 -42.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -23.0 -22.0 -25.0 -18.0 -19.0 -14.0 -17.0 -14.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 8.0 4.0 4.0 8.0 8.0 8.0 115 -238.0 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -194.0 -195.0 -192.0 -189.0 -188.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -159.0 -156.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -129.0 -128.0 -123.0 -120.0 -119.0 -114.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -101.0 -96.0 -93.0 -92.0 -89.0 -90.0 -87.0 -84.0 -83.0 -80.0 -81.0 -76.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -56.0 -52.0 -51.0 -48.0 -43.0 -42.0 -43.0 -40.0 -33.0 -34.0 -31.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 2.0 5.0 8.0 4.0 6.0 8.0 8.0 116 -241.0 -240.0 -235.0 -234.0 -235.0 -230.0 -229.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -210.0 -205.0 -206.0 -201.0 -200.0 -199.0 -194.0 -195.0 -194.0 -191.0 -190.0 -187.0 -184.0 -179.0 -177.0 -180.0 -175.0 -174.0 -171.0 -170.0 -171.0 -166.0 -165.0 -160.0 -159.0 -158.0 -155.0 -154.0 -151.0 -150.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -126.0 -125.0 -122.0 -119.0 -116.0 -111.0 -112.0 -109.0 -110.0 -103.0 -104.0 -101.0 -98.0 -95.0 -94.0 -89.0 -90.0 -87.0 -84.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -55.0 -50.0 -49.0 -46.0 -43.0 -42.0 -41.0 -38.0 -31.0 -32.0 -29.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -11.0 -6.0 -5.0 -4.0 1.0 2.0 5.0 8.0 4.0 8.0 8.0 117 -242.0 -243.0 -238.0 -235.0 -236.0 -233.0 -228.0 -231.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -212.0 -205.0 -208.0 -203.0 -200.0 -201.0 -194.0 -193.0 -192.0 -191.0 -190.0 -188.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -169.0 -168.0 -163.0 -158.0 -159.0 -160.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -124.0 -123.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -108.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -87.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -66.0 -63.0 -57.0 -55.0 -55.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -38.0 -31.0 -30.0 -31.0 -30.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -12.0 -11.0 -4.0 -5.0 -4.0 3.0 0.0 5.0 10.0 6.0 10.0 118 -243.0 -242.0 -241.0 -238.0 -235.0 -236.0 -231.0 -228.0 -229.0 -224.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -201.0 -194.0 -191.0 -192.0 -189.0 -189.0 -186.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -167.0 -166.0 -163.0 -158.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -143.0 -142.0 -139.0 -136.0 -131.0 -130.0 -129.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -106.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -64.0 -62.0 -57.0 -54.0 -53.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -36.0 -31.0 -30.0 -31.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -5.0 -2.0 3.0 0.0 5.0 10.0 8.0 119 -246.0 -243.0 -242.0 -241.0 -238.0 -235.0 -234.0 -231.0 -228.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -215.0 -212.0 -209.0 -210.0 -205.0 -206.0 -203.0 -200.0 -199.0 -194.0 -191.0 -190.0 -188.0 -187.0 -186.0 -185.0 -181.0 -177.0 -178.0 -177.0 -172.0 -171.0 -170.0 -167.0 -164.0 -163.0 -158.0 -159.0 -156.0 -153.0 -152.0 -147.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -128.0 -127.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -112.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -95.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -79.0 -80.0 -77.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -63.0 -60.0 -57.0 -54.0 -51.0 -48.0 -49.0 -46.0 -43.0 -40.0 -37.0 -34.0 -31.0 -30.0 -29.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -3.0 -2.0 3.0 2.0 7.0 12.0 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験-5.html"},{"title":"生物データマイニング論 第1回（補足）","text":"生物データマイニング論 第1回 で省略した、混合ガウス分布のEMアルゴリズムの計算過程を記述します。 EMアルゴリズム 観測データ \\(\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) に対する対数尤度関数は、 \\((9.7)\\) から以下のように書けます。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ E step $$\\begin{aligned} p(z_{k}=1|\\mathbf{x}) &\\equiv \\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{p(\\mathbf{x})}\\qquad (\\because\\text{Bayes' theorem})\\\\ &\\propto p(z_{k}=1)p(\\mathbf{x}|z_{k}=1) \\\\ &=\\pi_k\\mathcal{N}(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ なので、総和が \\(1\\) になるように正規化を行えば 負担率 が以下のように求まります。 $$\\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) =\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13)$$ ※ なお、この時分母である \\(\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})\\) が \\(p(\\mathbf{x})\\) であることは有用です。 （ 生物データマイニング論 第1回 では、これを用いて可視化していました。） Maximization step ※ 対数尤度関数 \\((9.14)\\) を \\(\\ln L\\) と記述します。 \\(\\boldsymbol{\\mu}_k\\) 対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\mu}_k\\) で微分します。この時 正規分布は \\(e&#94;{\\text{hoge}}\\) という形をしており、微分しても形が変わらないので、 $$\\begin{aligned} \\frac{\\partial\\ln L}{\\partial\\boldsymbol{\\mu}_k} &= \\sum_{i=n}&#94;N \\frac{\\pi_k\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= \\boldsymbol{\\Sigma}_k&#94;{-1}\\sum_{n=1}&#94;N \\gamma_{nk}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= 0\\\\ \\therefore\\boldsymbol{\\mu}_k&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.17)\\\\ \\end{aligned}$$ と最適解が求まりました。 \\(\\pi_k\\) パラメータ \\(\\pi_k\\) については、 \\(\\sum_{k=1}&#94;K \\pi_k = 1\\) という制約に注意する必要があります。ですが、 隠れマルコフモデルの最尤推定 で行なった能登同様に、ラグランジュの未定乗数 \\(\\lambda\\) を導入すればこの問題は解けます。 $$L_{\\lambda} = \\log L + \\lambda\\left(\\sum_{c=1}&#94;K \\pi_c - 1\\right)$$ の導関数が \\(0\\) となる条件を求める事になるので、 $$\\begin{aligned} \\frac{\\partial L_{\\lambda}}{\\partial\\pi_k} &= \\sum_{n=1}&#94;N \\frac{\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_k \\pi_k \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)} + \\lambda\\\\ &= \\sum_{n=1}&#94;N \\frac{\\gamma_{nk}}{\\pi_k} + \\lambda = 0 &\\therefore \\pi_k = -\\frac{1}{\\lambda}\\sum_{n=1}&#94;N \\gamma_{ic}\\\\ \\frac{\\partial L_{\\lambda}}{\\partial\\lambda} &= \\sum_{k=1}&#94;K \\pi_k - 1\\\\ &= \\left(-\\frac{1}{\\lambda}\\sum_{k=1}&#94;K\\sum_{n=1}&#94;N \\gamma_{nk}\\right) - 1 = 0 &\\therefore \\lambda = -n \\end{aligned}$$ より、 $$\\pi_k&#94;{\\star} = \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} \\qquad(9.22)$$ と最適解が求まりました。 \\(\\boldsymbol{\\Sigma}_k\\) \\(\\boldsymbol{\\mu}_k\\) と同様に、対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\Sigma}_k\\) で微分します。すると、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\log L = \\sum_{n=1}&#94;N\\frac{\\pi_k\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}$$ となります。ここで、 \\(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\) を計算すると、 $$\\begin{aligned} &\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\biggr)\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\left(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\right)\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(-\\frac{1}{2}\\biggr)|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\quad (\\ast1)\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\frac{1}{2}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\quad (\\ast2)\\\\ =&-\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)+\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{1}{2}\\left\\{\\boldsymbol{\\Sigma}_k&#94;{-1}-\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\right\\}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ したがって、 $$ \\boldsymbol{\\Sigma}_k&#94;{\\star}= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.19) $$ と最適解が求まりました。 ※ \\(\\ast1,\\ast2\\) の式変形は以下でより詳細に説明します。 が、その前にいくつか基本事項の定義を振り返ります。 行列式 $$\\det A=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)\\prod_{i=1}&#94;na_{i\\sigma(i)}=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)a_{1\\sigma(1)}a_{2\\sigma(2)}\\cdots a_{n\\sigma(n)}$$ \\(\\sigma\\) は \\(1\\) から \\(n\\) の置換（順列）を表す。 \\(\\mathrm{sgn}(\\sigma)\\) は置換の符号を表す。なお、\b置換の符号は 互\b換の数 に注目しており、奇置換（互換の数が奇数個）なら \\(-1\\) 、偶置換なら \\(+1\\) \b\b 余韻子 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\(i\\) 行と \\(i\\) 列を \\(1\\) つずつ取り去って作られる小行列を \\(M_{ij}\\) とする。つまり、 $$ M_{ij} = \\small \\left[ \\begin{array}{ccc} a_{11} & \\cdots &a_{1\\hspace{1mm}j-1} & a_{1\\hspace{1mm}j+1} & \\cdots & a_{1n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{i-1 \\hspace{1mm} 1} & \\cdots &a_{i-1\\hspace{1mm}j-1} & a_{i-1\\hspace{1mm}j+1} & \\cdots & a_{i-1 \\hspace{1mm}n} \\\\ a_{i+1 \\hspace{1mm} 1} & \\cdots &a_{i+1\\hspace{1mm}j-1} & a_{i+1\\hspace{1mm}j+1} & \\cdots & a_{i+1 \\hspace{1mm}n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{n1} &\\cdots &a_{n\\hspace{1mm}j-1} & a_{n\\hspace{1mm}j+1} &\\cdots &a_{nn} \\end{array} \\right] $$ です。ここで、 \\(\\Delta_{ij}=(-1)&#94;{i+j}|M_{ij}|\\) とすると、以下の 余因子展開 ができます。 \\(A\\) の行列式は \\(j\\) 列に関して、以下のように展開されます。 $$\\det A=\\Delta_{1j}a_{1j}+\\Delta_{2j}a_{2j}+\\cdots+\\Delta_{nj}a_{nj}$$ \\(A\\) の行列式は \\(i\\) 行に関して、以下のように展開されます。 $$\\det A=\\Delta_{i1}a_{i1}+\\Delta_{i2}a_{i2}+\\cdots+\\Delta_{in}a_{in}$$ \b 余韻子行列 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\((i, j)\\) 余因子を \\((j, i)\\) 成分に持つ行列 $$\\tilde{A} := \\begin{pmatrix}&\\Delta_{11}&\\Delta_{21}&\\cdots&\\Delta_{n1}\\\\&\\Delta_{21}&\\Delta_{22}&\\ldots&\\Delta_{n2}\\\\&\\vdots&\\vdots&\\ddots&\\vdots\\\\&\\Delta_{n1}&\\Delta_{n2}&\\cdots&\\Delta_{nn}\\end{pmatrix}$$ を 余韻子行列 と呼びます。ここで、余韻子展開を考えれば、余韻子行列に関して、 $$\\tilde{A}A=A\\tilde{A}=\\det(A)I_n$$ が成り立つことがわかります。 \\(\\ast1\\) の変形 以上を踏まえると、 \\(\\frac{\\partial\\det(A)}{\\partial a_{ij}} = \\Delta_{ij}\\) なので、 $$\\frac{\\partial|\\Sigma|}{\\partial\\Sigma} =\\tilde\\Sigma = |\\Sigma|\\Sigma&#94;{-1}$$ が成り立ち、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}} =-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-\\frac{3}{2}}\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\boldsymbol{\\Sigma_k}=-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma_k}&#94;{-1}$$ となることがわかります。 トレースと固有値の関係性 【命題】 トレースには、 \\(Tr(A) = \\sum_{k=1}&#94;{n}\\lambda_{k}\\) という関係がある。 トレース： \\(n\\times n\\) の正方行列 \\(A\\) に対して、\b対角成分の和 \\(\\sum_{k=1}&#94;{n}a_{kk}\\) を \\(A\\) のトレースと呼び、 \\(\\mathrm{Tr}(A),\\mathrm{tr}A\\) \b と表す。 【証明】 まず、固有方程式は、 $$\\phi(t) = |A-tI| = \\left|\\begin{array}{cccc} a_{11}-t & a_{12} & \\ldots & a_{1n} \\\\ a_{21} & a_{22}-t & \\ldots & a_{2n} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_{n1} & a_{n2} & \\ldots & a_{nn}-t \\end{array} \\right|$$ である。ここで、 \\(t\\) の係数に着目する。 \\(t&#94;n\\) の係数 これは、対角成分を全て掛け合わせた次の多項式 $$(a_{11}-t)(a_{22}-t)\\ldots(a_{nn}-t)$$ における \\(t&#94;n\\) の係数と等しくなる。よって、係数は「 \\((-1)&#94;n\\) 」 \\(t&#94;{n-1}\\) の係数 これも\b、先ほどの多項式の \\(t&#94;{n-1}\\) の係数と等しくなる。（ \\(\\because\\) 余韻子展開を考える。 \\(\\sigma\\) が全単射のため、１行（列）対角成分ではないものがあると、\b少なくともあと１つは体格成分でないものがあることがわかる。） 定数項 これは、\b余韻子展開を考えれば \\(|A|\\) そのもの。 よって、係数は「 \\((-1)&#94;{n-1}(a_{11}+a_{22}+\\ldots+a_{nn})\\) 」であり、これは対角和を用いて「 $(-1)&#94;{n-1}\\mathrm{Tr}(A) $ 」とも書ける。 一方先ほどの固有方程式は固有値を解に持つ。 つまり、 \\(A\\) の固有値を \\(\\lambda_1\\) 〜 \\(\\lambda_n\\) として、 $$\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)$$ とかける。（ \\((-1)&#94;n\\) によって、 \\(t&#94;n\\) の係数を合わせている。） この式を展開すると、 \\(t&#94;{n-1}\\) の係数が「 \\((-1)&#94;{n-1}(\\lambda_1+\\lambda_2+\\ldots+\\lambda_n)\\) 」であることから $$\\mathrm{Tr}(A) = \\lambda_1+\\lambda_2+\\ldots+\\lambda_n$$ ※ちなみに、 \\(\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)\\) の定数項を考えることで、 $$|A| = \\lambda_1\\lambda_2\\ldots\\lambda_n$$ であることもわかる。 トレースの循環性 \\(A\\) を \\(m \\times n\\) 、 \\(B\\) を \\(n \\times m\\) の行列とすると、 \\(AB\\) は \\(m \\times m\\) の行列であり、 $$ \\begin{aligned} \\mathrm{Tr}[AB]&= \\sum_{i=1}&#94;{m} (AB)_{ii} \\\\&= \\sum_{i=1}&#94;{m}\\sum_{j=1}&#94;{n} A_{ij}B_{ji} \\\\&= \\sum_{j=1}&#94;{n} \\sum_{i=1}&#94;{m} B_{ji} A_{ij} \\\\&= \\sum_{j=1}&#94;{n} (BA)_{jj} \\\\&= \\mathrm{Tr}[BA] \\end{aligned} $$ となる。これを応用すれば、以下の 循環性 が証明できる。 \\(A,B,C\\) をそれぞれ \\(m\\times n,n \\times l,l \\times m\\) の行列とするとき、 $$\\begin{aligned} \\mathrm{Tr}[ABC] =& \\mathrm{Tr}[BCA] \\\\=& \\mathrm{Tr}[CAB] \\end{aligned} $$ が成り立つ。（ \\(\\because\\) ２つの\b行列積をセットで考えれば明らか） 逆行列の微分 正則行列 \\(A\\) に対して、 \\(A&#94;{-1}A=I\\) が成立するので、\bこの等式の両辺を \\(A\\) で微分して、 $$\\begin{aligned} \\biggr(\\frac{\\partial }{\\partial A}A&#94;{-1}\\biggl)A + A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl) = 0\\\\ \\biggr(\\frac{\\partial A&#94;{-1}}{\\partial A}\\biggl) = -A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl)A&#94;{-1} \\end{aligned}$$ シングルエントリ行列 \\((i,j)\\) 成分のみが \\(1\\) で、残りが全て \\(0\\) の行列 \\(\\mathbf{J}&#94;{ij}\\) を シングルエントリ行列 と呼ぶ。なお、\b以下の式が成り立つ。 $$\\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{ij}\\bigl)=\\mathbf{A}_{ji}$$ \b \\(2 \\times 2\\) の行列でこれを示す。 $$\\begin{aligned} \\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{12}\\bigl)&=\\mathrm{Tr}\\biggr(\\begin{pmatrix}a_{11}&a_{12}\\\\a_{21}&a_{22}\\end{pmatrix}\\begin{pmatrix}0&1\\\\0&0\\end{pmatrix}\\biggl)\\\\ &=\\mathrm{Tr}\\begin{pmatrix}0&a_{11}\\\\0&a_{21}\\end{pmatrix}\\\\ &=a_{21}\\\\ &=\\mathbf{A}_{21} \\end{aligned}$$ \\(\\ast2\\) の変形 以上を踏まえれば、 $$\\begin{aligned} \\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu}) &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr((\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\biggl)\\\\ &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\frac{\\partial\\boldsymbol{\\Sigma}}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\biggl)\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ji}\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ij}\\\\ \\end{aligned}$$ よって、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})=-\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html"},{"title":"クラスタリング","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 講義の方針 データ解析アルゴリズムは、生物学の研究に不可欠 R や python のパッケージとして、すぐダウンロードして使うことができる。 しかし、原理を知らずに使うと、アルゴリズムの出す結果を盲信することになり危険。 正しい理解：結果を疑えるようになること。 階層的クラスタリング クラスタリング データ点を クラスタ（互いに類似したグループ） に分割する。 距離尺度：ユークリッド距離、コサイン距離など。 階層的クラスタリング 最初は各点がクラスタとなる。 二つのクラスタを選んで合併していく。 Single Link ：二つのクラスタをまたぐ最近点の距離 chaining により、ゆるいクラスタができる （非推奨） Complete Link ：二つのクラスタをまたぐ最遠点の距離 最も固いクラスタができるが、細かく分け過ぎる傾向がある。 Average Link ：二つのクラスタをまたぐ点対の平均距離 最もバランスがとれており、通常はこれを用いる。 最後は一つのクラスタになる。 デンドログラム ：合併の過程を樹形図の形で表したもの。 K-Means 分割的クラスタリング の一手法。$K$ クラスにデータ点を分割する。 以下を繰り返す。 各データ点 $\\mathbf{x}$ を最も近い中心点 $\\mu_k$ に割り当てて、クラスタ $c_1,\\ldots,c_K$ を作成する。 割当を元に中心点を計算しなおす。 $$\\mu_k = \\sum_{j\\in C_i} \\mathbf{x}_j$$ 実装 In [1]: import numpy as np import matplotlib.pyplot as plt Data. In [2]: np . random . seed ( 0 ) In [3]: N = 30 ; K = 5 vmin = 0 ; vmax = 1 In [4]: # Training Data. data = np . random . uniform ( vmin , vmax , ( N , 2 )) x , y = data . T In [5]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [6]: # Background Color Xs , Ys = np . meshgrid ( np . linspace ( vmin , vmax , 100 ), np . linspace ( vmin , vmax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.KMeans.KMeans ） を使って学習させます。 In [7]: from kerasy.ML.KMeans import KMeans In [8]: model = KMeans ( K = K , random_state = 0 ) In [9]: model . fit ( data ) Visualization. In [10]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [11]: # For Visualization. plt_model = KMeans ( K = K ) In [12]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( idx , mu ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Plot Representative points(µk) of each class. mux , muy = mu . T ax . scatter ( mux , muy , marker = 'x' , c = \"red\" , s = 200 ) # Background. plt_model . mu = mu Z , _ = plt_model . predict ( XYs ) Zs = Z . reshape ( Xs . shape ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( vmin , vmax ) ax . set_ylim ( vmin , vmax ) ax . set_title ( f \"Iteration. {i:>02} \" ) plt . show () 混合ガウス分布 混合ガウス分布は、次のように混合係数 $\\pi_k$ でガウス分布を線形重ね合わせした形でかける。 $$p(\\mathbf{x}) = \\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\qquad (9.7)$$ ここで、 二値ベクトル（1-of-K符号化法） $\\mathbf{z}$ の周辺分布は、$0\\leq\\pi_k\\leq1$ と $\\sum_{k=1}&#94;K\\pi_k = 1 $ を満たす $\\pi_k$ を用いて、 $$p\\left(\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\pi_k&#94;{z_k}\\qquad (9.9)$$ と書ける。また、$\\mathbf{z}$ が与えられた時の $\\mathbf{x}$ の事後分布は当然ながら次のガウス分布である。 $$p\\left(\\mathbf{x}|\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)&#94;{z_k}\\qquad(9.11)$$ EMアルゴリズム 観測データ $\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}$ に対する対数尤度関数は、$(9.7)$ から以下のように書ける。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ Expectation step M stepで必要となる $\\gamma(z_{nk})$ を求める。 この値は、$\\mathbf{x}$ が与えられた下での $\\mathbf{z}$ の条件付き確率であり、混合要素 $k$ が $\\mathbf{x}$ の観測を 「説明する」 度合いを表す 負担率(responsibility) として解釈することもできる。 $$ \\begin{aligned} \\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) &=\\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{\\sum_{j=1}&#94;{K}p(z_{j}=1)p(\\mathbf{x}|z_{j}=1)}\\\\ &=\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13) \\end{aligned} $$ Maximization step M stepでは、尤度関数を最大化するように各パラメータの値を更新する。 ※ 導出過程は 生物データマイニング論 第1回（補足） に載せています。 $$ \\begin{aligned} \\boldsymbol{\\mu}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.17)\\\\ \\boldsymbol{\\Sigma}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.19)\\\\ \\pi_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} & (9.22) \\end{aligned} $$ 実装 Data. In [13]: np . random . seed ( 0 ) In [14]: N = 150 ; K = 3 In [15]: # Train Data. data = np . concatenate ([ np . random . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 0 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [16]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [17]: # Background Color xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.MixedDistribution.MixedGaussian ） を使って学習させます。 In [18]: from kerasy.ML.MixedDistribution import MixedGaussian In [19]: model = MixedGaussian ( K = K , random_state = 1234 ) In [20]: model . fit ( data , span = 20 ) Visualization. In [21]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [22]: # For Visualization. plt_model = MixedGaussian ( K = K ) plt_model . N , plt_model . M = data . shape In [23]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( epoch , idx , mu , S , pi ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Background. plt_model . mu = mu plt_model . S = S plt_model . pi = pi Z = plt_model . predict ( XYs ) Zs = np . sum ( Z , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( xmin , xmax ) ax . set_ylim ( ymin , ymax ) ax . set_title ( f \" {epoch:>02} epochs.\" ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html"},{"title":"イントロダクション","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 講義予定 前半（山崎担当） 画像の操作 画像の特徴抽出・内容理解・構造化 機械学習一般 後半（相澤担当） 画像を撮る：カメラの内部処理・センサ・レンズ・標本化 画像を表現する。色の知覚・表現 画像の基礎的な処理。周波数変換、線形・非線形フィルタリング # 日付 担当 内容 1 9/30(月) 山崎 画像・映像を中心とした現在の技術動向の紹介、低次・領域・局所画像特徴 2 10/7(月) 山崎 特徴選択、特徴表現 3 10/21(月) 山崎 機械学習概論、教師なし学習、クラスタリング 4 10/28(月) 山崎 機械学習 (NN, SVM, RF) 5 11/7(木) 山崎 深層学習 (Deep Neural Networks) 6 11/11(月) 山崎 動画像処理 (ブロックマッチング、背景差分、オプティカルフロー) 7 11/13(水) 山崎 3次元空間情報の取得と処理 8 11/18(月) 相澤 9 11/25(月) 相澤 10 12/9(月) 相澤 11 12/16(月) 相澤 12 12/23(月) 相澤 13 1/@@ テスト パターン認識一般 現在は、90%位が 学習ベース(data-driven) 。残りが解析的手法。最近はこのhybridも。 全体的な流れ 学習(training) 検証(validation)←パラメータ最適化 推論(test, inference) なぜ今 学習ベース なのか？ データの大規模化：インターネット上から大量に収集可。 計算機の進化：ムーアの法則による高速化。さらにはクラウド 労働力のクラウド化 画像特徴 低次特徴量 色ヒストグラム（RGB,HSV,L*a*b*）：単純計算すると \\(256&#94;3\\) 個binができるので、注意。 色共起ヒストグラム（Correlogram）：隣接ピクセルの色を踏まえたヒストグラム 円、コーナー直線の数・大きさ・長さ 物体の円度、曲率等 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html"},{"title":"生物物理学 第1回","text":"講師： 能瀬聡直 講義資料： 生物物理学 参考書： 神経科学 -脳の探求- 参考書： ニューロンの生物物理 講義概要 生物物理学とは 遺伝情報の流れ 蛋白質の構造と機能 細胞内タンパク質のダイナミックス 遺伝子操作技術 ゲノム科学とバイオインフォマティックス バイオイメージング、生体分子計測 脳・神経系の生物物理 講義日程 # 日付 担当 1 9/25 能瀬 2 10/2 樋口 3 10/9 樋口 4 10/16 樋口 5 10/23 樋口 6 10/30 樋口 7 11/6 樋口 8 11/20 能瀬 9 11/27 能瀬 10 12/4 樋口 11 12/11 能瀬 12 12/18 能瀬 13 1/8 能瀬 14 1/15 能瀬 生物物理学とは？ 物理の手法で生物を見る。 生体分子の機能や構造の研究。 対象は広範囲、ただし物理的理念を背景にもつ。 生体高分子の構造・機能、脳・神経機構など単なる記述中心の従来の生物学と異なり、論理的な思考法を用い、より普遍的な原理を見いだすことを目指している。 生物物理の代表的発見 DNA二重螺旋構造の発見（1953年、1962年ノーベル生理医学賞） 蛋白質の高次構造の解析（1960年、1962年ノーベル化学賞） 神経活動のイオン機構の解明（1953年、1963年ノーベル生理医学賞） 最近の技術革新 ヒトゲノム計画 ヒトの全遺伝子の設計図解読の終了（2000年） イメージング技術 蛍光蛋白質・レーザー顕微鏡（1990年代） 1分子観測・1分子操作 溶液中での蛋白質1分子の観察（1990年代） 神経回路の作動原理の解明に向けた従来の3つのアプローチ 解剖学(Anatomy) 神経の配線を明らかにする。 生理学(Physiology) 神経活動を測定・操作する。 理論 神経活動パターンから原理を抽出 Part1. Introduction 脳神経系における情報の流れ ニューロンの構成 脳とコンピューター 半導体 ↔︎ 半導体素子 ↔︎ 集積回路 ↔︎ コンピューター 分子 ↔︎ 神経細胞 グリア細胞 ↔︎ 神経回路 ↔︎ 脳 活動電位の特徴 全か無か： \\(\\mathrm{Na}\\) チャネル活性化に閾値がある。 一過性： \\(\\mathrm{Na}\\) チャネル不活性化 確実に伝播 一体、どのような構造を持った神経回路の中を、どのように信号が伝わることで特定の演算が創発されるのか。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html"},{"title":"HMMをpythonで実装","text":"（kerasy.ML.HMM.HMM） の使い方 自作のモジュール （kerasy.ML.HMM.HMM） を使って実装をします。 In [1]: from kerasy.ML.HMM import HMM In [2]: model = HMM () In [3]: # 以下のようなパラメタファイルを読み込む。 ! cat params.json { \"M\": 4, \"K\": 4, \"basetypes\": [\"a\", \"c\", \"g\", \"u\"], \"pi\": [0.7, 0.1, 0.1, 0.1], \"A\": [[0.8, 0.1, 0.1, 0.0], [0.0, 0.8, 0.1, 0.1], [0.1, 0.0, 0.8, 0.1], [0.1, 0.0, 0.1, 0.8]], \"phi\": [[0.4, 0.1, 0.1, 0.4], [0.25, 0.25, 0.25, 0.25], [0.1, 0.4, 0.4, 0.1], [0.3, 0.2, 0.2, 0.3]] } In [4]: model . load_params ( \"params.json\" ) In [5]: # インスタンスに読み込まれた各種パラメータ model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 In [6]: # なお、この時以下のような辞書を同時に作成しています。 print ( model . base2int ) print ( model . int2base ) {'a': 0, 'c': 1, 'g': 2, 'u': 3} {0: 'a', 1: 'c', 2: 'g', 3: 'u'} In [7]: # また、パラメータはnumpyの行列の形で読み込まれています。 print ( type ( model . pi )) print ( type ( model . A )) print ( type ( model . phi )) In [8]: # 以下のようにすれば、学習したパラメタを同じ形式で出力することができます。 model . save_params ( \"out.json\" ) Viterbi algorithm HMMのViterbiアルゴリズムを実装して、尤もらしいサンプル配列の隠れ状態列を推定します。 In [9]: from kerasy.utils.bio import alignStr , readMonoSeq , readMultiSeq # ファイルの中身 cat seq1.fasta ``` sample-RNA gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc ``` In [10]: # ファイルの読み込み seq1 = readMonoSeq ( 'seq1.fasta' ) print ( f \"Input Sequence: \\n {alignStr(seq1[0])}\" ) Input Sequence: gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc In [11]: # この時、文字列をリストに格納しています。 print ( type ( seq1 )) In [12]: pred1 = model . predict ( sequences = seq1 , asai = True ) In [13]: # 変数asaiは、隠れ状態がZero-based numberingかどうかを決めるものであり、特に意味はありません。（課題の形式に対応したものがasai=True.） print ( f \"Hidden Indexes: \\n {alignStr(pred1[0])}\" ) Hidden Indexesn [14]: # もちろんパラメタの更新は行われていません。 model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 Baum-Welch algorithm HMMのBaum-Welchアルゴリズムを実装して、モデルを学習させてます。 In [15]: model = HMM () model . load_params ( \"params2.json\" ) model . params () # 文字が \"acgu\"→\"ACGT\"に変わっただけです。 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.4000 0.2500 0.1000 0.3000 C 0.1000 0.2500 0.4000 0.2000 G 0.1000 0.2500 0.4000 0.2000 T 0.4000 0.2500 0.1000 0.3000 cat seq2.txt ``` >Vitis_vinifera_chr14.trna15-AlaAGC (28776087-28776159) Ala (AGC) 73 bp Sc: 68.12 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAGGTACGGGGATCGATA CCCCGCATCTCCA >Vitis_vinifera_chr13.trna5-ArgCCG (2691241-2691313) Arg (CCG) 73 bp Sc: 83.85 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAGGTCGTGGGTTCGAAT CCCACTGCGATCG >Vitis_vinifera_chr3.trna6-GlnCTG (5807449-5807520) Gln (CTG) 72 bp Sc: 71.93 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTAACCCGAGTTCAAATC TCGGTGGGACCT >Vitis_vinifera_chr14.trna19-LeuAAG (25640120-25640040) Leu (AAG) 81 bp Sc: 62.71 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTGTCCGAAAGGGCGTGG GTTCAAATCCCACTCTCCACA >Vitis_vinifera_chr18.trna9-MetCAT (2896034-2896118) Met (CAT) 85 bp Sc: 60.66 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCGAGTAATCCTGAGGTC GAGAGTTCGAGCCTCTCTCACCCCA >Vitis_vinifera_chr3.trna30-ProTGG (7498415-7498344) Pro (TGG) 72 bp Sc: 68.98 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGGTCCCGAGTTCGATTC TCGGAATGACCC >Vitis_vinifera_chr5.trna13-GluTTC (21745120-21745048) Glu (TTC) 73 bp Sc: 36.67 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTGGTCGTGGGTTCGAGC CCTATTGGTGGTT >Vitis_vinifera_chr5.trna3-TyrGTA (7422575-7422666) Tyr (GTA) 92 bp Sc: 33.68 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTGACCCAATAGATATCC TTAGGTCGTTAGTTTGAATCCAACAGGTCTAA >Vitis_vinifera_chr1.trna8-ValCAC (11396083-11396156) Val (CAC) 74 bp Sc: 66.86 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGAGGTCCCTAGTTCGAA CCCAGGCTCAGATA >Vitis_vinifera_chr14.trna2-SerTGA (4021381-4021462) Ser (TGA) 82 bp Sc: 80.82 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTGGGCTTCGCCCGCGCA GGTTCGAACCCTGCTGTCGACG ``` In [16]: seq2 = readMultiSeq ( 'seq2.txt' ) In [17]: for i , seq in enumerate ( seq2 ): print ( f \"No. {i:>02} \\n {alignStr(seq, width=45)}\" ) No.00 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAG GTACGGGGATCGATACCCCGCATCTCCA No.01 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAG GTCGTGGGTTCGAATCCCACTGCGATCG No.02 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTA ACCCGAGTTCAAATCTCGGTGGGACCT No.03 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTG TCCGAAAGGGCGTGGGTTCAAATCCCACTCTCCACA No.04 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCG AGTAATCCTGAGGTCGAGAGTTCGAGCCTCTCTCACCCCA No.05 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGG TCCCGAGTTCGATTCTCGGAATGACCC No.06 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTG GTCGTGGGTTCGAGCCCTATTGGTGGTT No.07 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTG ACCCAATAGATATCCTTAGGTCGTTAGTTTGAATCCAACAGGTCT AA No.08 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGA GGTCCCTAGTTCGAACCCAGGCTCAGATA No.09 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTG GGCTTCGCCCGCGCAGGTTCGAACCCTGCTGTCGACG In [18]: # 学習させる。 model . fit ( sequences = seq2 , epochs = 2000 , verbose = False ) In [19]: import matplotlib.pyplot as plt In [20]: def plotHistory ( model ): \"\"\" 学習の過程をプロットする関数 \"\"\" plt . plot ( model . history ) plt . title ( f \"Mean Log Likelihood Transition (eoochs= {model.epoch} )\" ) plt . xlabel ( \"epochs\" ) plt . ylabel ( \"Mean Log Likelihood\" ) plt . show () In [21]: plotHistory ( model ) In [22]: model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.1024 0.0000 0.8976 0.0000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.2819 0.7181 0.0000 0.0000 z(2) 0.0000 0.5670 0.0000 0.4330 z(3) 0.0521 0.0000 0.3415 0.6064 z(4) 0.5158 0.0000 0.0000 0.4842 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.3436 0.3099 0.1059 0.0055 C 0.2538 0.0592 0.0970 0.4297 G 0.4026 0.4418 0.7971 0.0345 T 0.0000 0.1891 0.0000 0.5304 ※ 隠れ状態ごとにかなり偏った遷移を行なう。 また、 遷移行列の対角成分がそこまで大きい値では無い。 → 特定の構造が、 ある程度の長さのゆとりを持って 繰り返されていると予想される。 In [23]: pred2 = model . predict ( sequences = seq2 , asai = True ) In [24]: for i , pred in enumerate ( pred2 ): print ( f \"No. {i:>02} Hidden Indexes: \\n {alignStr(pred, width=45)}\" ) No.00 Hidden Indexes: 333334122244412241241222224412444124122412222 2411222224412224441241244441 No.01 Hidden Indexes: 334411241241222412241241124412244441224441222 2412412244412244412441122441 No.02 Hidden Indexes: 334441241244412412441222412412244441224441241 244412244412244441241222444 No.03 Hidden Indexes: 341222241244122441244412222244122441222444441 244122222241222244412244412444441241 No.04 Hidden Indexes: 333341241241122441244124112412244412412444441 2241244441222441222244412244444441244441 No.05 Hidden Indexes: 333412441244412412412224444124444122224122222 444412244412444441222412444 No.06 Hidden Indexes: 334441241244412441244122411222244444124444122 2412412244412244441241241244 No.07 Hidden Indexes: 341244441244412441241222412222241241241222441 244412412241244441224124412444122444124122444 12 No.08 Hidden Indexes: 344412241241222441244124112441244412411244122 22444441244412244412244412241 No.09 Hidden Indexes: 344124122444122412441222222412244412224441241 2244412444112412244412244441122441241 補足：上記プログラムにバグがないかの確認 Baum-Welchアルゴリズムが正しく実装できていたか、極端な配列を学習させることで確認します。 In [25]: model = HMM () model . load_params ( \"params3.json\" ) model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 0.7000 0.1000 0.2000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.8000 0.1000 0.1000 z(2) 0.1000 0.8000 0.1000 z(3) 0.1000 0.1000 0.1000 ------------------------------ *emission probability z(1) z(2) z(3) A 0.4000 0.2500 0.1000 C 0.1000 0.2500 0.4000 G 0.1000 0.2500 0.4000 T 0.4000 0.2500 0.1000 In [26]: seq_extreme = readMonoSeq ( 'seq3.txt' ) In [27]: # かなり極端な配列の例で実装してみる。 print ( f \"Input Sequence: \\n {alignStr(seq_extreme[0])}\" ) Input Sequence: TCTTTTTCCTCCTCTCTCCTTTCCCTCTTTTCCCTTCTTCTCTCCCTTTTCCTTCTCTTC TCTCTTTTCTTCCCCTTTTCCTTTTCTCCTCCCTCCCTTTCTTCCCTCCTTCCTCCCCCC CTCCCCTTTCCTTCCTTTCTCCTTCTCCCCATATGGCCATTTACTTCAGCTGATAGACAC CGAGTAACAACAATAAAGCGTTAGGTGGACGAATGCTCTACTCTGACCTCTAGCTTGTGG GTTCGCGGCTTGCCGAACGCTGGCCTCTGCCCGTCGAACCAATAAATGTTTATCCAGGAC ACCCCGTTCTTTGGTGATATCCCTCGCTCGAGTTATAGCATTGAAACCTCCATATCCGGC GATAAGAGCTACGGACCGTATACTGGGCGCCGGTAATTGGTTGCACTCGCCCTCGGTCTT TTTCTTTTTGGTTTAGCAGAGCAAGGCGTGGAAAAGGAGAGAGGGAGAAAAGGGAAAGGG AAAAGAGGAGAAGAAAGAAAAAGGAAGGGGGGAAGAGGAGAGAAGGGAAGGGAAGGGGGA GAAAGAGGGAAAGAGGAGAAAAAAGGAGGGGGAAGAAGGAAGGGGGAAAGGGGGGGAAAG 上の配列は、以下の構造を持っていることがわかります。 index type 1~150 pyrimidine base 151~450 both 451~600 purine base In [28]: model . fit ( sequences = seq_extreme , epochs = 100 , verbose = False ) In [29]: plotHistory ( model ) In [30]: model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 1.0000 0.0000 0.0000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.9933 0.0000 0.0067 z(2) 0.0000 1.0000 0.0000 z(3) 0.0000 0.0033 0.9967 ------------------------------ *emission probability z(1) z(2) z(3) A 0.0000 0.4851 0.2199 C 0.5034 0.0000 0.2627 G 0.0000 0.5149 0.2415 T 0.4966 0.0000 0.2760 In [31]: pred_extreme = model . predict ( sequences = seq_extreme ) In [32]: print ( f \"Hidden Indexes: \\n {alignStr(pred_extreme[0])}\" ) Hidden Indexesうまく傾向をつかんでいることから、学習アルゴリズムに大きな誤りはなさそうです。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験-4.html"},{"title":"生物統計論 第1回","text":"講師： 木立尚孝 講義概要 09/27 (Fri) 10:25-12:10 10/04 (Fri) 10:25-12:10 10/11 (Fri) 10:25-12:10 10/18 (Fri) 10:25-12:10 10/25 (Fri) 10:25-12:10 11/08 (Fri) 10:25-12:10 11/15 (Fri) 10:25-11:30(Lecture) / 11:30-12:10: (Test) Section1.1 STATISTICAL ANALYSIS Genomic data has recently become available, so the analyzing methods still its infancy at the century scale. It is very important how much information can be extracted from genomic and other omic data. Data-driven Research Development of measurement, communication, computing technologies. data science, e-science Statistics, computer skill, artificial intelligence, machine learning. Statistical Analysis Subjects and measurements are often conclude the random events , such as noise. Aiming for finding the \"True\" distribution, and inferencing on that distribution. Power of Statistical Methods Amount of information we can extract \"Many and high\" / \"Few or low\" quality Event infinite number of data cannot answer all questions. ex) we couldn't answer \"what is the number of eyes on the next dice.\" Data dependency. Section1.2 PROBABILITY DEFINITIONS Probability: Mathematical Probability: The probability of an event consisting of n out of m possible equally likely occurrences, defined to be n / m Statistical Probability: Each event is random, but if you repeat it a lot, you can see the probability that each event occurs. Subjective Probability: A type of probability derived from an individual's personal judgment or own experience about whether a specific outcome is likely to occur. ※ Mathematical Probability is the most strict and basic. Probability space \\(\\left(\\Omega, E, P\\right)\\) $$\\begin{aligned}&\\Omega: \\text{Set, Samplemspace}\\\\&E: \\text{Events,}\\sigma\\text{-algebra}\\\\&P: \\text{Probability measure}\\end{aligned}$$ Sample Space The sets of elementary events. ex.) The number of eyes on the dice. All possible genomes. All possible gene expression profiles \\(\\omega_i\\in\\Omega\\) is the identifier of possible individual stochastic phenomena. \\(\\sigma\\) -algebra $$ \\begin{aligned} &\\varepsilon= \\left\\{E_1,E_2,\\cdots|E_i\\subseteq\\Omega:\\text{event}:\\sigma\\text{-algebra} \\right\\}\\\\ &\\Rightarrow \\varnothing,\\Omega,\\left(E_i\\setminus E_j\\right),\\left(\\bigcup_{i=1}&#94;{\\infty}E_i\\right),\\left(\\bigcap_{i=1}&#94;{\\infty}E_i\\right)\\in\\varepsilon \\end{aligned} $$ The sets of Events. Each event \\(E_i\\subseteq\\Omega\\) Include Empty set \\(\\varnothing\\) , universal set \\(\\Omega\\) Closure to variable \"Set Operation\". (ex. Union, intersection, complement) example) discrete set Real set Power set Borel set \\(\\mathcal{A}\\) Probability measure $$\\begin{aligned}&\\mathbb{P} : \\mathcal{E} \\rightarrow \\mathbb{R} \\\\& 0 \\leq \\mathbb{P}(E) \\leq 1, E \\in \\mathcal{E} \\\\&\\mathbb{P}(\\Omega)=1, \\mathbb{P}(\\varnothing)=0 \\\\&\\text { For } E_{1}, E_{2}, \\cdots \\in \\mathcal{E}, \\text{ s.t. } E_{i} \\cap E_{j}=\\varnothing, \\forall i \\neq j \\\\&\\mathbb{P}\\left(\\bigcup_{i=1}&#94;{\\infty} E_{i}\\right)=\\sum_{i=1}&#94;{\\infty} \\mathbb{P}\\left(E_{i}\\right)\\end{aligned}$$ Each event is assigned a value that indicates the likelihood or probability of occurrence. Random variable $$\\begin{aligned}X: &\\text{random variable}\\\\\\Leftrightarrow &X : \\Omega \\rightarrow \\mathbb{R} \\\\ &\\text { s.t. } X&#94;{-1}(A) \\in \\mathcal{E}, \\forall A \\in \\mathcal{A} \\\\&X&#94;{-1}(A) :=\\{\\omega \\in \\Omega \\mid X(\\omega) \\in A\\}\\end{aligned}$$ Section1.3 PROBABILITY TERMS AND PROPERTIES Probability distribution function \\(F_x\\) (cumulative distribution) Probability density function \\(f_x\\) $$F_x\\left(x+dx\\right)-F_x\\left(x\\right)=:f_x(x)dx$$ Conditional Probability Joint Probability distribution $$(X,Y): \\Omega\\rightarrow\\mathbb{R}&#94;2; (X,Y)(\\omega) = \\left(X(\\omega),Y(\\omega)\\right)\\\\\\left(X,Y\\right)&#94;{-1}(A) = \\left\\{\\omega\\in\\Omega|\\left(X(\\omega),Y(\\omega)\\right)\\in A\\right\\}$$ Independent random variables Expected Value Variance Covariance: $$\\begin{cases}X,Y: \\text{independent random variables}\\Rightarrow \\mathrm{Cov}(X,Y) = 0\\\\X,Y: \\text{independent random variables}\\not\\Leftarrow \\mathrm{Cov}(X,Y) = 0 \\end{cases}$$ Indicator Function: $$\\mathbb{I}_A(x)=\\begin{cases}1 & x\\in A\\\\0 & x\\notin A\\end{cases},A\\in\\mathcal{A}$$ Marginalization Section1.4 PROBABILITY DISTRIBUTIONS Look Here!! if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html"},{"title":"生物統計論 第0回","text":"Section1.4 PROBABILITY DISTRIBUTIONS In [1]: import numpy as np import collections import matplotlib.pyplot as plt In [2]: N = 100000 Bernoulli Distribution In [3]: def BernoulliVar ( q , N , seed = None ): rng = np . random . RandomState ( seed ) if seed is not None else np . random return np . var ( rng . rand ( N ) < q ) In [4]: qs = np . linspace ( 0 , 1 , 1000 ) In [5]: probs = [ BernoulliVar ( q , N ) for q in qs ] In [6]: plt . title ( \"Bernoulli distribution\" ) plt . plot ( qs , probs , label = \"$Var(X)$\" ) plt . xlabel ( \"q\" ) plt . ylabel ( \"$Var(X)$\" ) plt . legend () plt . show () Binomial Distribution In [7]: def BinomialProb ( n , p , N , seed = None , color = None , ax = None ): if ax == None : fig , ax = plt . subplots () rng = np . random . RandomState ( seed ) if seed is not None else np . random counter = collections . Counter ( rng . binomial ( n , p , N )) count , freqs = zip ( * sorted ( counter . most_common ())) probs = [ freq / N for freq in freqs ] ax . plot ( count , probs , color = color , label = f \"p= {p} and n= {n} \" ) ax . scatter ( count , probs , color = color ) return ax In [8]: ax = BinomialProb ( 20 , 0.5 , N , seed = 0 , color = \"blue\" ) ax = BinomialProb ( 20 , 0.7 , N , seed = 0 , color = \"green\" , ax = ax ) ax = BinomialProb ( 40 , 0.5 , N , seed = 0 , color = \"red\" , ax = ax ) plt . legend () plt . show () Normal Distribution In [9]: from scipy import stats In [10]: def NormalProb ( mu , sigma ): X = np . arange ( mu - 3.5 * sigma , mu + 3.5 * sigma , sigma / 50 ) Y = stats . norm . pdf ( X , mu , sigma ) for i in np . arange ( - 3 , 4 , 1 ): idx = np . argmin ( abs ( X - ( mu + i * sigma ))) plt . plot ([ X [ idx ], X [ idx ]], [ 0 , Y [ idx ]], 'k-' ) plt . scatter ( X [ idx ], Y [ idx ], color = \"black\" ) plt . plot ( X , Y , color = \"black\" ) In [11]: NormalProb ( mu = 0 , sigma = 0.1 ) Multivariate Normal Distribution In [12]: from scipy.stats import multivariate_normal In [13]: x , y = np . mgrid [ - 3 : 3.5 : . 01 , - 3 : 3 : . 01 ] pos = np . dstack (( x , y )) rv = multivariate_normal ([ 0.5 , - 0.2 ], [[ 2.0 , 2.3 ], [ 0.3 , 0.8 ]]) plt . contourf ( x , y , rv . pdf ( pos )) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html"},{"title":"HMMのスケーリング","text":"HMMを実装する際に課題となるのが、forward-algorithm で \\(\\alpha\\) を再帰的に求める際に、 \\(\\alpha\\left(\\mathbf{z}_{n-1}\\right)\\) に \\(p(\\mathbf{z}_n|\\mathbf{z}_{n-1})\\) と \\(p(\\mathbf{x}_n|\\mathbf{z}_n)\\) をかけるため、値が非常に小さくなり、計算機の ダイナミックレンジ を超えてしまうことです。 そこで、ここでは \\(\\alpha\\left(\\mathbf{z}_{n}\\right)\\) と \\(\\beta\\left(\\mathbf{z}_{n}\\right)\\) にスケーリングを施し、それらの値が \\(1\\) のオーダーに止まるようにする手法を説明します。 forward-backward \\(\\alpha,\\beta\\) forward-backward algorithm で用いられていた \\(\\alpha,\\beta\\) は以下のように定義されていました。 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ Scaling factors まず、スケーリングされた \\(\\alpha,\\beta\\) は以下のように表されます。スケーリングによって、 \\(\\alpha\\) は高々 \\(K\\) 個の変数上の確率分布 、 \\(\\beta\\) は2つの条件付き確率の比 になることがわかります。 $$ \\begin{aligned} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.55)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\frac{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)}=\\frac{\\beta\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.61) \\end{aligned} $$ ここで、これらと \\(\\alpha,\\beta\\) を関連付けるためのスケーリング係数 \\(c\\) を導入します。 $$ c_{n}=p\\left(\\mathbf{x}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}\\right)\\qquad (13.56) $$ すると、 $$ \\begin{aligned} p\\left(\\mathbf{x}_1,\\ldots,\\mathbf{x}_n\\right) &= p\\left(\\mathbf{x}_n | \\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\cdots p\\left(\\mathbf{x}_3 | \\mathbf{x}_1,\\mathbf{x}_{2}\\right)p\\left(\\mathbf{x}_2 | \\mathbf{x}_1\\right)p(\\mathbf{x}_1)\\\\ &= c_n\\cdots c_3c_2c_1\\\\ &= \\prod_{m=1}&#94;{n} c_{m} \\end{aligned}\\qquad (13.58) $$ と展開することができるので、 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\left(\\prod_{m=1}&#94;{n} c_{m}\\right) \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) & (13.58)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)\\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) = \\left(\\prod_{m=n+1}&#94;{N} c_{m}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.60) \\end{aligned} $$ と対応関係がわかります。 \\(\\gamma,\\xi\\) 続いて、 \\(\\gamma,\\xi\\) と \\(\\widehat{\\alpha},\\widehat{\\beta}\\) の対応関係を求めます。 \\(\\alpha,\\beta\\) \\(\\alpha,\\beta\\) を用いると、以下のように表されていました。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} &(13.43) \\end{aligned}$$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) 先の対応関係を用いれば、 \\(\\widehat{\\alpha},\\widehat{\\beta}\\) を用いると、 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=\\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.64)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\left(c_{n}\\right)&#94;{-1} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.65) \\end{aligned} $$ と表されることがわかります。 Recursion 最後に、再帰式の対応関係も求めます。 \\(\\alpha,\\beta\\) $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) $$ \\begin{aligned} c_{n} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.58)\\\\ \\widehat{\\alpha}\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{z}_{1}| \\mathbf{x}_{1}\\right)=\\frac{p\\left(\\mathbf{z}_{1}\\right)p\\left(\\mathbf{x}_{1}| \\mathbf{z}_{1}\\right)}{p\\left(\\mathbf{x}_{1}\\right)} = \\frac{\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}}}{p\\left(\\mathbf{x}_{1}\\right)}\\\\ c_{n+1} \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\widehat{\\beta}\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) &(13.62)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)}{\\widehat{\\alpha}\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)}{p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} = 1 & (13.30) \\end{aligned} $$ なお、ここで \\((13.58)\\) でどのようにして \\(c_n\\) を求めるかですが、 $$ \\begin{aligned} \\mathrm{R.H.S}\\ (13.58) &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}}p\\left(\\mathbf{z}_{n-1}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\\\ &=p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) \\end{aligned} $$ となることから、 \\((13.58)\\) の右辺を \\(\\mathbf{z}_n\\) について周辺化すれば、 $$\\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = p\\left(\\mathbf{x}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = c_n$$ となるので、 \\(c_n\\) が求められることがわかります。 おまけ（尤度関数） 尤度関数はスケーリング係数 \\(c\\) を用いるだけで簡単に求められることがわかります。 $$p(\\mathbf{X})=\\prod_{n=1}&#94;{N} c_{n}\\qquad (13.63)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験-3.html"},{"title":"HMMの最尤推定の計算過程","text":"ここでは、 HMMの最尤推定 で省略した計算過程について記述します。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) $$ \\begin{aligned} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})&=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10)\\\\ &=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\left[ \\prod_{n=2}&#94;{N}\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}} \\right] \\prod_{m=1}&#94;{N}\\prod_{i=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{i k}&#94;{x_{ni} z_{nk}}\\\\ \\therefore\\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta}) &=\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k\\left[\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk}\\right]\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;Kx_{ni}z_{nk}\\ln\\phi_{ik} \\end{aligned} $$ であるから、これを \\((13.12)\\) に代入して、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=&\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12)\\\\ =& \\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;Kx_{ni}z_{nk}\\ln\\phi_{ik} \\end{aligned} $$ ここで、 \\(\\sum_{\\mathbf{Z}} = \\sum_{\\mathbf{z_1},\\mathbf{z_2},\\ldots,\\mathbf{z_N}}\\) なので、それぞれ 関係の無い部分を周辺化 でき、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\sum_{\\mathbf{z_1}} p\\left(\\mathbf{z_1} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{1k}\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\sum_{\\mathbf{z_{n-1},z_n}}p\\left(\\mathbf{z_{n-1},z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;K\\sum_{\\mathbf{z_n}}p\\left(\\mathbf{z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)x_{ni}z_{nk}\\ln\\phi_{ik}\\\\ \\end{aligned}$$ となります。また、 \\(\\gamma,\\xi\\) の定義 を用いることで $$\\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_1}} \\gamma\\left(\\mathbf{z}_1\\right)z_{1k}\\right)\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\left(\\sum_{\\mathbf{z_{n-1},z_n}}\\xi\\left(\\mathbf{z_{n-1},z_{n}}\\right) z_{n-1,j}z_{nk}\\right)\\ln A_{jk}\\\\ &+\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_n}}\\gamma\\left(\\mathbf{z}_n\\right)x_{ni}z_{nk}\\right)\\ln\\phi_{ik} \\end{aligned} $$ と書き直せます。この時、潜在変数が離散なので、 \\(\\gamma,\\xi\\) はそれぞれ和が \\(1\\) となる \\(K,\\left(K\\times K\\right)\\) 個の非負の数の集合を用いて以下のように記述できます。 $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ したがって、これらを用いて上記の式を書き直すと、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} \\end{aligned}\\qquad (13.17) $$ Maximization step ここでは、上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) 関数を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化する際の ラグランジュの未定乗数法 を書き下します。 \\(\\boldsymbol{\\pi}\\) $$ \\begin{aligned} L\\left(\\boldsymbol{\\pi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) &= \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k} + \\lambda_1\\left(\\sum_{k=1}&#94;K\\pi_k - 1\\right)\\\\ \\frac{\\partial L}{\\partial \\pi_k}&=\\frac{\\gamma\\left(z_{1 k}\\right)}{\\pi_k} + \\lambda_1 = 0\\quad \\therefore \\pi_k = -\\frac{\\gamma\\left(z_{1 k}\\right)}{\\lambda_1}\\\\ \\frac{\\partial L}{\\partial \\lambda_1}&=\\sum_{k=1}&#94;K\\pi_k - 1 = 0\\quad \\therefore\\lambda_1 = -\\sum_{k=1}&#94;K\\gamma\\left(z_{1 k}\\right)\\\\ \\therefore\\pi_k&#94;{\\star} &= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} \\end{aligned} $$ \\(\\boldsymbol{A}\\) $$\\begin{aligned} L\\left(\\boldsymbol{A},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} + \\sum_{j=1}&#94;K\\lambda_{2,j}\\left(\\sum_{k=1}&#94;K A_{jk} - 1\\right)\\\\ \\frac{\\partial L}{\\partial A_{jk}} &= \\sum_{n=2}&#94;{N}\\frac{\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{A_{jk}} + \\lambda_{2,j} = 0\\quad \\therefore A_{jk} = -\\frac{\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\lambda_{2,j}}\\\\ \\frac{\\partial L}{\\partial \\lambda_{2,j}} &= \\sum_{k=1}&#94;K A_{jk} - 1 = 0\\quad \\therefore \\lambda_{2,j} = -\\sum_{k=1}&#94;K\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)\\\\ \\therefore A_{jk}&#94;{\\star}&=\\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\end{aligned}$$ \\(\\boldsymbol{\\phi}\\) $$\\begin{aligned} L\\left(\\boldsymbol{\\phi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} + \\sum_{k=1}&#94;K\\lambda_{3,k}\\left( \\sum_{i=1}&#94;D\\phi_{ik} - 1\\right)\\\\ \\frac{\\partial L}{\\partial\\phi_{ik}} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\phi_{ik}} + \\lambda_{3,k}=0\\quad \\therefore \\phi_{ik} = -\\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\lambda_{3,k}}\\\\ \\frac{\\partial L}{\\partial\\lambda_{3,k}} &= \\sum_{i=1}&#94;D\\phi_{ik} - 1 = 0 \\quad \\therefore \\lambda_{3,k} = -\\sum_{i=1}&#94;D\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni} = -\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)\\\\ \\therefore \\phi_{ik}&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)} \\end{aligned}$$ Expectation step $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14)\\\\ \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35)\\\\ \\end{aligned} $$ forward-algorithm \\((\\alpha)\\) $$\\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha(\\mathbf{z}_{n-1})p(\\mathbf{z} | \\mathbf{z}_{n-1})\\\\ \\end{aligned}$$ backward-algorithm \\((\\beta)\\) $$\\begin{aligned} \\beta\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N}, \\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}, \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+2}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} \\beta(\\mathbf{z}_{n+1})p(\\mathbf{x}_{n+1}|\\mathbf{z}_{n+1})p(\\mathbf{z}_{n+1}|\\mathbf{z}_n)\\qquad (13.38) \\end{aligned}$$ \\(\\gamma,\\xi\\) $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$\\begin{aligned} \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}\\right) \\\\ &=\\frac{p(\\mathbf{X} | \\mathbf{z}_{n-1}, \\mathbf{z}_{n}) p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{Bayes' theorem})\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{x}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43) \\end{aligned}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験-2.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験-2.html"},{"title":"HMMの最尤推定","text":"※ かなり導出部分を省略しています。導出は適宜 HMMの最尤推定の計算過程 を参照してください。 隠れマルコフモデルは、一般に以下の式で表されます。 $$ p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10) $$ \\(\\mathbf{X} = \\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) : \\(\\mathbf{Z} = \\{\\mathbf{z}_1,\\ldots,\\mathbf{z}_N\\}\\) \\(\\boldsymbol{\\theta}=\\{\\boldsymbol{\\pi}, \\mathbf{A}, \\boldsymbol{\\phi}\\}\\) ※ 一般に放出確率 \\(p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\boldsymbol{\\phi}\\right)\\) は、 二値のベクトル \\(\\mathbf{z}_n\\) の \\(K\\) 個の可能な状態に対応した \\(K\\) 個の要素を持つベクトルからなる任意の分布 $$ p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\phi\\right)=\\prod_{k=1}&#94;{K} p\\left(\\mathbf{x}_{n} | \\phi_{k}\\right)&#94;{z_{n k}}\\qquad (13.9) $$ を考えることも可能ですが、今回は下記の離散多項分布を考えます。 Name Probability Conditional Distribution initial state \\(\\pi_{k} \\equiv p\\left(z_{1 k}=1\\right)\\) \\(p\\left(\\mathbf{z}_{1} \\mid \\boldsymbol{\\pi}\\right)=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\quad (13.8)\\) transition probability \\(A_{j k} \\equiv p\\left(z_{n k}=1\\mid z_{n-1, j}=1\\right)\\) \\(p\\left(\\mathbf{z}_{n} \\mid \\mathbf{z}_{n-1}, \\mathbf{A}\\right)=\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}}\\quad (13.7)\\) emission probability \\(\\phi_{i k}\\equiv p\\left(x_{n i}=1 \\mid z_{n k}=1\\right)\\) \\(p(\\mathbf{x}_n \\mid \\mathbf{z}_n, \\boldsymbol{\\phi})=\\prod_{i=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{i k}&#94;{x_{ni} z_{nk}}\\quad (13.22)\\) 尤度関数 ここで、データ集合 \\(\\mathbf{X}\\) が観測された際に、上記の同時分布を潜在変数 \\(\\mathbf{Z}\\) について周辺化することで、尤度関数は以下のように記述されます。 $$ p(\\mathbf{X} | \\boldsymbol{\\theta})=\\sum_{\\mathbf{Z}} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.11) $$ しかし、この尤度関数は \\(n\\) について分解できない（ \\(\\mathbf{z}_n\\) ）ごとに和を取れないので、 条件付き独立 の性質を活かして 尤度関数の対数の期待値 を最大化する Baum-Welch algorithm (EM algorithm) を用います。 Baum-Welch (EM) パラメータ \\(\\boldsymbol{\\theta}&#94;{\\text {old }}\\) を用いて \\(p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化する。 対数尤度関数の期待値 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を求める。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化するパラメータに更新する。 \\(\\boldsymbol{\\theta}\\rightarrow\\boldsymbol{\\theta}&#94;{\\text {old }}\\) 1に戻る。 $$ Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12) $$ ここで、表記を簡単にするために、 γ 、 ξ を導入します。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14) \\end{aligned} $$ なお、潜在変数が離散なので、以下のように記述し直せます。（ \\(\\pi_{k},A_{j k},\\phi_{j k}\\) と同様。） $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ これらを用いると、 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) が以下のように書き下せます。 （計算過程） $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} \\end{aligned}\\qquad (13.17) $$ Maximization step ※ 実際の計算の順番からは前後しますが、先にM stepを説明します。 上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化するのは（別ブロックに別れているから）簡単で、それぞれ 適当なラグランジュ乗数を導入する ことで、以下のように求まります。 （計算過程） $$ \\begin{aligned} \\pi_{k}&= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} & (13.18)\\\\ A_{j k}&= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} & (13.19)\\\\ \\phi_{i k}&=\\frac{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right) x_{n i}}{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right)} & (13.23) \\end{aligned} $$ Expectation step M step で必要となる \\(\\gamma,\\xi\\) は、 条件付き独立性 を用いることで効率的に計算することができます。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ 条件付き独立性を用いてそれぞれ変形すると、以下の再帰式を導くことができます。 （計算過程） $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ ※ なお、ここで \\(\\alpha\\) の再起式を forward-algorithm 、 \\(\\beta\\) の再起式を backward-algorithm と呼ぶことがあります。 また、これらを用いて \\(\\xi\\) を記述することもでき、以下のように表せます。 （計算過程） $$\\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ 以上でBaum-Welchに必要な計算式が求まりました。 おまけ（尤度関数） 尤度関数は、アルゴリズムの停止条件に用いられるなど、値を求めることが非常に有用です。 求める際は、 $$ \\gamma\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad (13.33) $$ の両辺を \\(\\mathbf{z}_n\\) について周辺化すれば、左辺は $$\\sum_{\\mathbf{z}_{n}} \\gamma\\left(\\mathbf{z}_{n}\\right) = \\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right) = 1$$ となることが明らかなので、以下のように求まります。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{n}} \\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)\\qquad (13.41)$$ また、上記の式は任意の \\(n\\) について成立するので、 \\(n=N\\) の場合を考えれば \\(\\alpha\\) のみを用いて求めることができます。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{N}} \\alpha\\left(\\mathbf{z}_{N}\\right)\\qquad (13.42)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験-1.html"},{"title":"Numpyの行列計算チートシート","text":"はじめに 様々なアルゴリズムを実装する際に漸化式は出るけど実装時にうまくいかない。ということは良くあります。また、 Python を使って実装する場合、そのほとんどが行列の取り扱いです。 （柔軟であるが故にエラーを吐かずに動いてしまう…笑） そこで、まずは行列計算のチートシートを作成します。（随時加筆修正していきます。） 目次 基本事項 内積（行列積） 外積 In [1]: import numpy as np 基本事項 In [2]: N = 3 A = np . arange ( N ) B = np . arange ( N ) . reshape ( - 1 , N ) # np.expand_dims(A, axis=0), A[None,:] C = np . arange ( N ) . reshape ( N , - 1 ) # np.expand_dims(A, axis=1), A[:,None] D = np . arange ( N * N ) . reshape ( N , N ) In [3]: print ( f \"A = {A} \" ) print ( f \"B = {B} \" ) print ( f \"C = {C} \" ) print ( f \"D = {D} \" ) A = [0 1 2] B = [[0 1 2]] C = [[0] [1] [2]] D = [[0 1 2] [3 4 5] [6 7 8]] In [4]: print ( f \"A.shape = {A.shape} \" ) print ( f \"B.shape = {B.shape} \" ) print ( f \"C.shape = {C.shape} \" ) print ( f \"D.shape = {D.shape} \" ) A.shape = (3,) B.shape = (1, 3) C.shape = (3, 1) D.shape = (3, 3) In [5]: print ( f \"A.ndim = {A.ndim} \" ) print ( f \"B.ndim = {B.ndim} \" ) print ( f \"C.ndim = {C.ndim} \" ) print ( f \"D.ndim = {D.ndim} \" ) A.ndim = 1 B.ndim = 2 C.ndim = 2 D.ndim = 2 ndim ex. scalar $(0)$ 1 , 2 ,... vector $1$ A matrix $\\geq2$ B , C , D 内積（行列積） vector & scalar / matrix & scalar スカラーが絡むと、各要素とスカラーの積となる。 shape の変化はない。 どちらから掛けてもエラーは起こらない。 In [6]: print ( f \"np.dot(A,2) = {np.dot(A,2)}\" ) # vector & scalar print ( f \"np.dot(B,2) = {np.dot(B,2)}\" ) # matrix & scalar print ( f \"np.dot(C,2) = {np.dot(C,2)}\" ) # matrix & scalar print ( f \"np.dot(D,2) = {np.dot(D,2)}\" ) # matrix & scalar np.dot(A,2) = [0 2 4] np.dot(B,2) = [[0 2 4]] np.dot(C,2) = [[0] [2] [4]] np.dot(D,2) = [[ 0 2 4] [ 6 8 10] [12 14 16]] vector & vector 内積となる。 結果はスカラーとなる。 shape が異なると、エラーが起きる。 In [7]: print ( f \"np.dot(A,A) = {np.dot(A,A)}\" ) # vector & vector np.dot(A,A) = 5 In [8]: np . dot ( A , np . arange ( N - 1 )) # shape=(3,) & shape=(2,) ValueError : shapes (3,) and (2,) not aligned: 3 (dim 0) != 2 (dim 0) vector & matrix 行列積となる。 ベクトルは、位置によって変換のされ方が異なる。 左がベクトルの場合： np.dot((x,) (y,z)) = np.dot((1,x) (y,z)) 右がベクトルの場合： np.dot((y,z) (x,)) = np.dot((y,z) (x,1)) 行列積であるので、結果の shape は np.dot((x,y) (y,z)) = (x,z) となる。 上で y が異なるとエラーが生じる。 In [9]: print ( np . dot ( A , B )) # np.dot((3,)(1,3)) print ( np . dot ( A , C )) # np.dot((3,)(3,1)) print ( np . dot ( B , A )) # np.dot((1,3)(3,)) print ( np . dot ( C , A )) # np.dot((3,1)(3,)) ValueError : shapes (3,) and (1,3) not aligned: 3 (dim 0) != 3 (dim 0) [5] [5] ValueError : shapes (3,1) and (3,) not aligned: 1 (dim 1) != 3 (dim 0) matrix & matrix c = np.dot(a,b) a.shape=(a1,a2,...,aN,X) b.shape=(b1,b2,...,X,bM) c.shape=(a1,a2,...,aN,b1,b2,...,bM) c[i1,i2,...,iN,j1,j2,...,jM] == a[i1,i2,...,iM,:].dot(b[j1,j2,...,jM-1,:,jM]) In [10]: import itertools def checkNPdot ( shape1 , shape2 ): \"\"\" 計算可能なshapeの関係を列挙する。 \"\"\" a = np . arange ( np . prod ( shape1 )) b = np . arange ( np . prod ( shape2 )) for comb1 in itertools . permutations ( shape1 , len ( shape1 )): for comb2 in itertools . permutations ( shape2 , len ( shape2 )): try : print ( f \" {comb1} .dot( {comb2} ) = {(a.reshape(comb1).dot(b.reshape(comb2))).shape}\" ) except : pass 以下で具体的に見ていく！ np.dot(2D, 3D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,X,k) c.shape=(i,j,k) c[i,j,k] == a[i,:].dot(b[j,:,k]) In [11]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) c = np . dot ( a , b ) In [12]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3) b.shape = (2, 3, 4) np.dot(a,b).shape = (2, 2, 4) In [13]: I , J , K = c . shape In [14]: np . all ([ c [ i , j , k ] == a [ i ,:] . dot ( b [ j ,:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[14]: True np.dot(3D,2D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(X,k) c.shape=(i,j,k) c[i,j,k] == a[i,j,:].dot(b[:,k]) In [15]: a = np . arange ( 24 ) . reshape ( 4 , 2 , 3 ) b = np . arange ( 6 ) . reshape ( 3 , 2 ) c = np . dot ( a , b ) In [16]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (4, 2, 3) b.shape = (3, 2) np.dot(a,b).shape = (4, 2, 2) In [17]: I , J , K = c . shape In [18]: np . all ([ c [ i , j , k ] == a [ i , j ,:] . dot ( b [:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[18]: True np.dot(3D,3D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) In [19]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 60 ) . reshape ( 3 , 4 , 5 ) c = np . dot ( a , b ) In [20]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4) b.shape = (3, 4, 5) np.dot(a,b).shape = (2, 3, 3, 5) In [21]: I , J , K , L = c . shape In [22]: np . all ([ c [ i , j , k , l ] == a [ i , j ,:] . dot ( b [ k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[22]: True np.dot(2D,4D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,:].dot(b[j,k,:,l]) In [23]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 120 ) . reshape ( 2 , 4 , 3 , 5 ) c = np . dot ( a , b ) In [24]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) # c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) a.shape = (2, 3) b.shape = (2, 4, 3, 5) np.dot(a,b).shape = (2, 2, 4, 5) In [25]: I , J , K , L = c . shape In [26]: np . all ([ c [ i , j , k , l ] == a [ i ,:] . dot ( b [ j , k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[26]: True np.dot(3D,4D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,l,X,m) c.shape=(i,j,k,l,m) c[i,j,k,l,m] == a[i,j,:].dot(b[k,l,:,m]) In [27]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 360 ) . reshape ( 3 , 5 , 4 , 6 ) c = np . dot ( a , b ) In [28]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4) b.shape = (3, 5, 4, 6) np.dot(a,b).shape = (2, 3, 3, 5, 6) In [29]: I , J , K , L , M = c . shape In [30]: np . all ([ c [ i , j , k , l , m ] == a [ i , j ,:] . dot ( b [ k , l ,:, m ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M )]) Out[30]: True np.dot(4D,4D) c = np.dot(a,b) a.shape=(i,j,k,X) b.shape=(l,m,X,n) c.shape=(i,j,k,l,m,n) c[i,j,k,l,m,n] == a[i,j,k,:].dot(b[l,m,:,n]) In [31]: a = np . arange ( 120 ) . reshape ( 2 , 3 , 4 , 5 ) b = np . arange ( 360 ) . reshape ( 3 , 4 , 5 , 6 ) c = np . dot ( a , b ) In [32]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4, 5) b.shape = (3, 4, 5, 6) np.dot(a,b).shape = (2, 3, 4, 3, 4, 6) In [33]: I , J , K , L , M , N = c . shape In [34]: np . all ([ c [ i , j , k , l , m , n ] == a [ i , j , k ,:] . dot ( b [ l , m ,:, n ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M ) for n in range ( N )]) Out[34]: True 外積 c = np.outer(a,b) c[i][j] = a.reshape(-1,)[i]*b.reshape(-1,)[j] In [35]: c = np . outer ( a , b ) In [36]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) a.shape = (a1,a2,...,aN) b.shape = (b1,b2,...,bM) In [37]: Na = np . prod ( a . shape ) Nb = np . prod ( b . shape ) In [38]: print ( f \"Na = {Na} \" ) print ( f \"Nb = {Nb} \" ) Na = a1*a2*・・・*aN Nb = b1*b2*・・・*bM In [39]: print ( c . shape ) (Na, Nb) In [40]: np . all ([ c [ i ][ j ] == a . reshape ( - 1 ,)[ i ] * b . reshape ( - 1 ,)[ j ] for i in range ( Na ) for j in range ( Nb )]) Out[40]: True In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験-0.html"},{"title":"分子生命科学Ⅲ 第1回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 講義概要 この授業最大の目的は、 「将来僕らが脳を対象とすることになった時に敷居を低くする」 こと。 # タイトル 内容 日付 1 神経系の構造と機能 中枢神経系の構造・機能 末梢神経系の構造・機能 9/26,10/3 2 感覚神経系 感覚系の構成 体性感覚系 視覚系（末梢視覚系・平衡感覚系） 聴覚と平衡感覚（聴覚系・平衡感覚系） 化学感覚系（嗅覚系・味覚系） 10/10,17,24,31 3 運動系 脊髄による運動制御 脳による運動制御 11/14,21 4 脳と行動の化学的制御 11/28 5 摂食行動 12/12 6 脳のリズムと睡眠 脳波 睡眠 概日リズム 12/19 7 精神疾患 統合失調症 感情障害 不安障害 12/26 8 神経変性疾患 アルツハイマー病 パーキンソン病 ALS 1/9 神経系の構造と機能（１） 神経系の機能的構成 神経系は、 感覚系 、 統合系 、 運動系 の３つに分けることができる。 感覚系は、感覚器で何かを感じると、 陽イオン が神経細胞の末端に流れ込み、 活動電位 が上がり、電気的なシグナルとして 中枢神経系(CNS)特に、大脳皮質の感覚野 にこの入力を伝える。 運動系は、逆向きで、脳の運動野からのシグナルが 末梢神経系 に伝わる。 神経系の構成成分 ニューロン(神経細胞,neuron) グリア細胞(glial cells) 血管(blood vessels) ニューロン(neuron) 極性のある細胞で、 細胞体(cell body or soma) 、 樹状突起(dendrites) 、 軸索(axon) からなり、（ほとんどの場合） 活動電位(action potential) を発生する。 膝蓋腱反射(knee-jerk reflex) ニューロンがどのように神経回路に含まれているか、を示す良い例。 医師が膝蓋骨の下の腱を軽く叩くと、大腿四頭筋が伸ばされ、その信号が脊髄まで伝わる。この信号が脊髄で 運動ニューロン に直結しており、運動ニューロンが発火して少し離れた部分の筋肉を収縮させる。その反動で足が上がる。 グリア細胞(glia cells) グリア細胞はニューロン（ヒトでは \\(1\\) - \\(2\\times10&#94;{11}\\) 個）の \\(3\\) - \\(10\\) 倍（マウスだと同数程度）存在し、脳の体積の約半分を占める。 長い軸索と興奮性膜を特徴とするニューロンに対して、グリア細胞の突起は細胞体の周辺に留まり、活動電位を発生しない。 ニューロンの生存や発達、機能発言のための液性環境維持と代謝的支援、神経伝達の調節等を行なっている。 と、ニューロンの補助的な役割だと今までは考えられていたが、最近ではもっと積極的な意味があるのでは無いかと研究されている。 中枢神経系のグリア細胞が下の4種からなる。 アストロサイト(astrocyte)（アストログリア、星状膠細胞） オリゴデンドロサイト(oligodendrocyte)（オリゴデンドログリア、稀突起膠細胞） 上衣細胞(ependymal cell) ミクログリア(microglia)（小膠細胞） アストロサイト(astrocyte)の機能 血液脳関門 を形成してがんが脳に転移しないように防御したりしている。 神経伝達物質の最取り込み（神経伝達物質が出てすぐに取り込まないと、麻薬や覚せい剤のような影響が出てしまう。）。 オリゴデンドロサイト(oligodendrocyte) 中枢神経系 において、 髄鞘（ミエリン・myelin） を形成する。（ 末梢 では シュワン細胞 が髄鞘を形成する。） 上衣細胞(ependymal cells) ミクログリア(microglia) 上衣細胞は脳室と脊髄中心管を覆う一層の上皮性細胞で、脳を脳脊髄液から遮断する（脳脊髄液脳関門(cerebro-spinal fluid brain barrier)） ミクログリアは損傷に際して活性化する脳内の免疫性細胞で貪食能を持つ。アストログリア、オリゴデンドロサイト、上衣細胞が 外胚葉 由来なのに対し、ミクログリアは 中胚葉 由来である。 脳の構造 哺乳動物の脳は、ほぼ共通の構造を持っている。ヒトの特徴は、 連合野 が広いということである。 解剖学用語 解剖学用語 解剖学的切断面 神経系の構成 中枢神経系(CNS: central nervous system) 脳(brain) 大脳(cerebrum) 小脳(cerebellum) 脳幹(brain stem) 脊髄(spinal cord) 末梢神経系(PNS: peripheral nervous system) 体性神経系(somatic nervous system) 脳神経(cranial nerve) 脊髄神経(spinal nerve) 自律神経系(autonomic nervous system) 小脳(cerebellum) 脳幹（延髄・橋・中脳・間脳）の背後に位置する。 大脳や脊髄と広範な連絡を持つ運動制御中枢 言語や思考などの高次脳機能に関与 小脳の 同 側の身体の運動に関与 脳幹(brain stem) 間脳→中脳→橋→延髄からなり、上方で間脳に、下方で脊髄に連なる（狭義では間脳を含めない）。 大脳から脊髄・小脳への情報、逆に脊髄・小脳から大脳への情報を中継 呼吸、意識、体温調節等の生命維持機能を制御 （大脳・小脳の損傷では生存できるが、脳幹の損傷は通常早急な死に至る） 錐体交叉 脳の運動ニューロンの軸索が延髄の後ろで一旦交叉（ 錐体交叉 ）して反対側にいっているから、反対側の機能がうまく制限できなくなる。 一方で 小脳 は同側なので、そのようなことは起こらない。 脊髄(spinal cord) 脊髄は脊柱管にあり、延髄に続いて錐体交叉下端より始まり、脊髄円錐にて終わる。 皮膚・関節・筋肉から脳への情報、逆に脳からの情報を伝える主経路 末梢神経の脊髄神経で身体と通ずる。 脊髄に入る情報を運ぶ軸索は 後根(dorsal root) に含まれ、脊髄から出ていく情報を運ぶ軸索は 前根(ventral root) に含まれる。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html"}]};