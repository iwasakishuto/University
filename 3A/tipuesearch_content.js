var tipuesearch = {"pages":[{"title":"デジタルカメラ系","text":"講師： 相澤清晴 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 講義内容（相澤先生） 入力・カメラ系：デジタルカメラでの撮像過程 表色系 フィルタリング・画像復元 特徴抽出(Global features, Local features, Deep features) 画像符号化 デジタルカメラ系 ポイントは、 「空間方向の標本化」 と 「色信号の量子化」 人間の眼と電子の眼の ダイナミックレンジ は、 人の視覚：8桁（星空〜太陽光下） フィルム：4桁 CCD,CMOS：3桁 デジタルカメラ構造 CMOSセンサー・CCDセンサー CMOS(Complementary Metal Oxide Semiconductor・相補性金属酸化膜半導体)センサー は、 CCD(Charge-Coupled Device)センサー と同じように、光を感じて電気信号に変える半導体センサーである。 CMOSセンサーには 受光素子と電気信号を増幅するアンプがたくさん並んでついている ため、CCDセンサーに比べて低い電圧で動作し、読み出しを高速化することが容易である。 More: キヤノン：技術のご紹介 | サイエンスラボ CMOSセンサー デモザイキング 単板式（↔︎3板式） カメラは画素ごとに 「 R ・ G ・ B 」 のどの色を読み取るかが決まっており、その並び方を ベイヤー配列 と呼ぶ。 この場合、欠損した画素値を補完する必要がある。 このような画素ごとに色チャネルが異なる1枚のグレースケール画像（モザイク状のカラー画像）から1枚のRGBカラー画像を再構成する処理を （カラー）デモザイキング と呼ぶ。 周囲の色情報から線形補完する バイリニア補間 や、エッジの方向を判別して、滑らかに変化する方向のが措置だけを用いて補完する エッジセンシング補完 などがある。 3板式 ダイクロイックプリズム を用いて入射光を3つの波長帯域に分解して、それぞれを専用の撮像素子で撮像する。 最初の反射面は青の波長帯域だけを反射して残りの波長帯域は通過、次の反射面は赤の波長帯域だけを反射して緑の波長帯域を通過、といった感じ。 高画質なカラー画像を撮影できるが、レンズ光学系と撮像素子の間にダイクロイックプリズムを配置する必要があることと、3つの撮像素子が必要なことから、コストやカメラサイズの面では不利な場合もある。 放送や取材などのための業務用のカメラではこちらが使われる。 コントラストAF コントラストは、 「画像のヒストグラムの分布の広がり」 のこと。画素値の最大値を \\(I_{\\max}\\) 、最小値を \\(I_{\\min}\\) とすると、以下のような求め方がある。 $$\\begin{cases}\\begin{aligned}C_1 &= I_{\\max}-I_{\\min}\\\\C_2 &= \\left(I_{\\max}-I_{\\min}\\right)/\\left(I_{\\max}+I_{\\min}\\right)\\end{aligned}\\end{cases}$$ いずれの求め方でも画像中に1画素でも極端に大きな（小さな）画素が含まれると、画像全体から受ける印象は同じにも関わらずコントラストが異なってしまう。このため、 頻度が一定値よりも小さな画素値を考慮しない などの工夫がある。 コントラストAF(Auto Focus) は、撮像素子に映った映像をもとに、ピントレンズを動かしながら 明暗差（コントラスト） が大きなところを探してピントを合わせる方式。 撮像素子とAF用センサーを兼用できるのでカメラ本体の 小型化が可能 となるため、コンパクトデジカメで広く使われる方式である。 （スマホでも使われている。） レンズを動かして （フォーカスを動かしながら） AFエリアの輝度を把握しないといけないので、後述の位相差AF方式に比べて、ピント検出に時間がかかる 位相差AF 位相差AF は、レンズから入った光を2つに分けて専用のセンサーへ導き、結像した2つの画像の間隔からピントの方向と量を判断する方式。 コントラストAFに比べると、レンズを動かしながらピントを探る必要がないので 高速にピント合わせを行うことができる。 専用センサーとレンズから入った光を撮像素子と専用センサーへ分岐させる仕組みが必要となるために カメラ本体の小型化が難しい。 AE&AGC AE: Auto Exposure.自動露出。露出（絞り値とシャッター速度の組み合わせ）を自動で決定する機能のこと。 AGC: オートゲインコントロール(Auto Gain Control)。撮影場所が薄暗い場合などに、光を増幅し、明るい映像に調整する機能。この値を大きくすればするほど、より暗い場所を明るく撮影できるが、その分ノイズが増える。 画像処理 \\(\\gamma\\) 補正 デジタル画像を表示する際、それぞれに色情報の伝送を行いますが各機器には固有の発色特性があり、入力された色情報をそのまま表示することが出来ない。 このとき生じる誤差を \\(\\gamma\\) 特性 と呼び、画像を自然の色に近くなるよう輝度や彩度の誤差を修正する機能を \\(\\gamma\\) 補正 と呼ぶ。 AWB（オートホワイトバランス） 異なる照明下でも、白が白に写るような色の調整、赤と青の利得調整をすることが多い。 照明とカメラの温度関係によって、画像に 青みがかかったり 、 赤みがかかったり する。 白い対象を写し、白と見えるようにバランス調整を行う。 あらかじめ、白熱灯、蛍光灯、太陽光などの何種類かの補正係数を求めておき、切り替えて使う。 心理学の世界では 灰色世界仮説 というものもある。 非常に難しい。綺麗に解決できれば有名になれるXD AS（オートスラビライゼーション） 手ぶれ補正 揺れの検出： 映像〜動きベクトル センサ〜角速度ベクトル 揺れの補正： 映像の切り出し 可変頂角プリズム（光軸の変化） 撮像デバイス駆動 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-8.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-8.html"},{"title":"3次元空間情報の取得と処理","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 大きく分けて2種類ある。 アクティブ法 ：光やレーザーなど、エネルギーを当てて反応を観測。 パッシブ法 ：カメラなど、エネルギーを放出しないもののみを使う。 アクティブ法 手法 説明 特徴 time-of-flight法(ToF) 光を照射して戻るまでの時間から算出。直接は計算できないので、変調をかけて位相差等から計算する。 （計算可能な範囲が指定されるのはこの為。） 高精度だが、時間がかかる。そのため、動物体に弱い。 XBox2(Microsoft)のKinect2というコントローラや自動運転用のLIDARなどで使われている。 スリット光照射法 線状のレーザー光等を照射し、線の歪みから計算する。（→ エポピーラ幾何学 p.312 を参照） Structured light 法 細かさの異なる市松模様（チェッカーボードパターン）や、パターンが既知のランダムドット等を照射し、位置ずれから計算 XBoxのKinectで使われていた。 パッシブ法 手法 説明 ステレオ法 複数のカメラを用いて、見え方の違いから奥行推定 平行ステレオ法 近くのものは大きくズレ、遠くのものはズレない。正確には 以下 照度差ステレオ法 複数の見え方があれば良いので、カメラを1台にして照明を変化させても良い。詳細は 以下 Shape-from-motion(SfM) 首里城プロジェクトや \"Building Roma in a Day\" などで使用されている。詳細は 以下 ) 平行ステレオ法 物体の3次位置：$(X,Y,Z)$ 2カメラの距離：$b$ それぞれのカメラで点 $(X,Y,Z)$ が見えている画素位置 $(u,v),(u&#94;{\\prime},v&#94;{\\prime})$ イメージセンサのピクセル間隔：$\\delta$（縦・横とも） カメラの焦点距離：$f$ 画像面と光軸の交点が画像座標原点 このとき、視差（$=u-v$）がわかると、奥行き情報 $Z$ がわかる。なお、視差は ブロックマッチング法 等で見つける。 照度差ステレオ法 最も簡単な反射モデル （均等拡散反射のみ。鏡面反射なし。） で行う。 $$\\text{Lambert model: }I_x\\left(\\text{Brightness}\\right)=\\rho L\\mathbf{n}\\cdot\\mathbf{S} = \\rho L \\cos\\theta$$ $\\rho, \\mathbf{S},L$ は予め知ることができる。 未知なのは、$\\mathbf{n} = \\left(n_x,n_y,n_z\\right)$ の3変数のみ。（$n_z = \\sqrt{1-\\left(n_x&#94;2+n_y&#94;2\\right)}$ とすると2変数） 2~3通りの位置から観測すると、$\\mathbf{n}$ がわかる。 通常は20~100の位置に照明をおき、最小2乗法で解く。 Shape-from-motion(SfM) 2枚の視点の異なる画像があるとする。 3次元中の点 $p$ がそれぞれの画像中で点 $(u.v),(u&#94;{\\prime},v&#94;{\\prime})$ で見えていたとする。 2つの視点間には回転 $\\mathbf{R}(3\\times3)$ と平行移動 $\\mathbf{t}(3\\times1)$ から成る行列で次の関係がある。 $$ \\left(u&#94;{\\prime},v&#94;{\\prime},1\\right)\\begin{pmatrix} f_{11} & & \\\\ & \\ddots & \\\\&&f;_{33} \\end{pmatrix}\\begin{pmatrix} u\\\\v\\\\1 \\end{pmatrix} = \\mathbf{0} $$ 逆に $\\mathbf{F}$ がわかれば2枚の画像の全てのピクセルで対応がとれているはず。対応点がわかっている点が9点以上あると、最小2乗法で解ける。 しかし、実は $\\mathbf{F}$ は規格化できるので、$8$ パラメータが決まれば残り $1$ つは自動的に決定できる。 （自由度 $8$, eight-point algorithmと呼ぶ。） 今は five-point algorithm まで進化。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-7.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-7.html"},{"title":"動画像処理","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt 動画像は、静止画の集まり（パラパラ漫画） 10~15[fps]あると、人は動画だと感じる。 映画：24[fps] TV、インターネット動画：30~60[fps] ロボット制御に必要な速度（アクチュエーターの反応速度が~ms）：1,000[fps] 自動運転 ~ 10,000[fps] 10[fps] 25[fps] 50[fps] Start Stop → 何をするか？ 動物体の検出・解析 動画の編集 動画の理解・認識 動物体の検出・解析 背景差分・フレーム間差分 【問題】 照明変化（屋外では良く起こる）、背景の変化（木の揺れ等）に弱い。 背景画像をどうやって作るかもポイント。 【統計的背景差分】 各ピクセルで時間的に統計情報を取ってもう少しsmartに背景差分することを考える。背景クラスを $w_b$ 前景クラスを $w_f$ とすると、やることは、$\\left(p\\left(w_f | I(x,y)\\right), p\\left(w_b | I(x,y)\\right)\\right)$ のうち確率の高いクラスを採用する。 ここで、ベイズの定理より、 $$ \\begin{cases} \\begin{aligned} p\\left(w_f | I(x,y)\\right) &= \\frac{p(w_f)p(I\\left(x,y)|w_f\\right)}{p(I(x,y))}\\propto p(w_f)p\\left(I(x,y)|w_f\\right)\\\\ p\\left(w_b | I(x,y)\\right) &= \\frac{p(w_b)p(I\\left(x,y)|w_b\\right)}{p(I(x,y))}\\propto p(w_b)p\\left(I(x,y)|w_b\\right) \\end{aligned} \\end{cases} $$ $p(w_b, w_f)$：その画素が $w_b, w_f$ である事前確率（例：木の上に人や車はいないので、$p_b$ 大, $p_f$：小） $p(I|w_c)$：$w_c$ だった時に、どの程度の確率でその画素値が観測されるか。 動き量の計算 【ブロックマッチング(Block Matching)】 ある時刻 $t$ におけるある領域に最も似ている時刻 $t+1$ の領域を、以下の手法等を用いて探す。 SSD(Sum of Squared Difference) SAD(Sum of Absolute Difference) NCC(Normalized Cross Correlation) 動画像圧縮では、この動きベクトル(motion vector)と差分を符号化することで圧縮を実現。 【オプティカルフロー(optical flow)】 2枚の画像間で、変化が微小だとすると、 $$\\begin{aligned}I(x+\\Delta x, y+\\Delta y, t+\\Delta t) &\\simeq I(x,y,t) + \\frac{\\partial I}{\\partial x}\\Delta x + \\frac{\\partial I}{\\partial y} \\Delta y+ \\frac{\\partial I}{\\partial t} \\Delta t + \\cdots\\\\\\rightarrow I_x\\Delta x + I_y\\Delta y + I_t\\Delta t&\\simeq0\\\\ I_x\\frac{\\Delta x}{\\Delta t} + I_y\\frac{\\Delta y}{\\Delta t} + I_t &= 0\\\\\\left(\\Delta t\\rightarrow0\\right)\\qquad I_xu+I_yv+I &= 0\\\\(u,v) &= \\left(\\frac{dx}{dt},\\frac{dy}{dt}\\right)\\end{aligned}$$ これだけだと、自由度が高すぎて一意に決まらないので、微小領域では動きが滑らかという仮定を置く。（Lucas-Kanada法, 1981） $$\\mathbf{G} = \\left[\\begin{array}{c}I_{x_1} &I;_{y_1} \\\\\\vdots&\\vdots\\\\I_{x_m}&I;_{y_m}\\end{array}\\right],\\quad \\mathbf{f} = \\left[\\begin{array}{c}u \\\\v\\end{array}\\right],\\quad\\mathbf{b} = \\left[\\begin{array}{c}I_{t_1} \\\\\\vdots\\\\I_{t_m}\\end{array}\\right]$$ 上記のように定義し、滑らかさの条件を使うと、 $$\\begin{aligned}\\mathbf{Gf}+\\mathbf{b} &= \\mathbf{0}\\\\\\therefore\\mathbf{f}&#94;{\\ast}&=-\\left(\\mathbf{G}&#94;T\\mathbf{G}\\right)&#94;{-1}\\mathbf{G}&#94;T\\mathbf{b}\\quad \\left(\\because\\text{Least squares}\\right)\\end{aligned}$$ 【DNNによる映像処理】 (x,y,t)の3次元をどう扱うか？ 画像（2次元）と時間の情報を分ける。 3D Convolution：空間情報と時間情報を同時に畳み込む。 仮想3D Convolution：空間情報を畳み込んで、その後時間方向に畳み込む。 動画の編集 In [ ]: 動画の理解・認識 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-6.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-6.html"},{"title":"4.Guided NEST exercises (intermediate)","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Thomas Burns Lecture Material https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-4_Plasticity-and-Learning Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial4.py In [1]: import sys sys . path . append ( \"path/to/library/\" ) Part 1: STDP and its varities Part-2:-Unsupervised-pattern-detection-using-STDP Make a training data NEST-simulation Part 1: STDP and its varities STDP alters the weights of synapses depending on the relative spike timing between the postsynaptic neuron and the presynaptic neuron. _STDP overview (from Sjöström J, Gerstner W (2010) Spike-timing dependent plasticity. Scholarpedia )_ Within some time windows: if \"PRE before POST\" , we get Long-Term Potentiation (LTP) if \"POST before PRE\" , we get Long-Term Depression (LTD) The time windows for LTP and LTD are generally on the order of tens of milliseconds . The LTD window is generally longer than the LTP window. Implementation To implement STDP in spiking neural network models, different STDP rules can be used. In general, different rules result in different distributions of synaptic weights over the course of learning. Examples of such weight distributions are shown below. STDP rules (from Gilson M, Fukai T (2011) Stability versus Neuronal Specialization for STDP. PLoS ONE ) Additive STDP tends to produce competition between synapses but needs to have its weights bound to ensure network stability (e.g. to avoid over-excitation) Multiplicative STDP tends to produce less competition between synapses but owing to its weight-dependent manipulation of synaptic weights does not require artificial bounds. Logorithmic STDP attempts to reconcile the two. Additive STDP rule In the following exercise, we will use the additive STDP rule , sometimes also called the exponential STDP rule : $$ \\Delta w_j= \\begin{cases} a&#94;+ \\cdot e&#94;{\\big( \\dfrac{t_j-t_i}{\\tau&#94;+} \\big)} & \\text{if}\\ t_j \\leq t_i & \\text{(LTP)} \\\\ -a&#94;- \\cdot e&#94;{\\big( - \\dfrac{t_j-t_i}{\\tau&#94;-} \\big)} & \\text{if}\\ t_j > t_i & \\text{(LTD)} \\end{cases} $$ variable Meaning $a&#94;+$ learning rate for LTP $a&#94;-$ learning rate for LTD $t_j$ spike time of the presynaptic neuron $j$ $t_i$ spike time of the postsynaptic neuron $i$ $\\tau&#94;+$ time constant for LTP (ms) $\\tau&#94;-$ time constant for LTD (ms) Using pre-defined paramaters which we will use in the second part of this tutorial , let's plot **\"how the this STDP rule changes weights depending on the timing of presynaptic and postsynaptic spikes.\"** In [2]: import numpy as np import matplotlib.pyplot as plt In [3]: from OIST.tutorial4 import AddSTDP In [4]: add_STDP_paramaters = { 'a_LTP' : 0.03125 , 'a_LTD' : 0.85 * 0.03125 , 'tau_LTP' : 16.8 , 'tau_LTD' : 33.7 } In [5]: model = AddSTDP () model . load_params ( ** add_STDP_paramaters ) In [6]: time_differences = np . linspace ( - 125 , 125 , 1000 ) In [7]: model . simulate ( time_differences ) Exercise 1 What features do you notice in this STDP curve? Experiment with different values in add_STDP_paramaters . How do each of the values change the shape of the STDP curve? How, in a network of neurons, could this STDP rule lead to over-excitation or network instability? The closer the spike timing between the postsynaptic neuron and the presynaptic neuron are, the bigger the influence is. If a becomes larger, the STDP curve expand in the y-axis direction , and if tau becomes larger, the STDP curve shrink in the x-axis direction . When the time difference gets ver close to 0, weight changes will diverge and lead to over-excitation or network instability. Part 2: Unsupervised pattern-detection using STDP In this part of the tutorial we will be replicating the results from [Masquelier et al. (2008) Spike Timing Dependent Plasticity Finds the Start of Repeating Patterns in Continuous Spike Trains. PLoS ONE](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0001377) . (In fact, we already reproduced Figure 2 from their paper in the first part of this tutorial.) Masquelier et al. (2008) create a spiking neural network with 2,000 presynaptic neurons just one postsynpatic neuron. They implement additative STDP in this network, which allows the \"postsynaptic neuron\" to learn to detect the beginning of repeating patterns of spiking activity arriving from the 2,000 presynaptic neurons. Importantly, the presynaptic neurons also have periods of random , non-patterned activity and have additional noisy spiking activity at all times. Let's begin by constructing the spike trains of the 2,000 presynaptic neurons. We will run our simulations for 450s, so we will create 450s worth of spike trains for these neurons. The first step is construct random activity with the following properties: Each presynpatic neuron will emit spikes independently generated by a Poisson process with a variable instantaneous firing rate $r$ $r$ varies randomly beteen $0$ and $90$ Hz. The rate of change in $r$ is modified by $dr$ $dr$ starts at $0$ $dr$ is modified by $ds$, randomly picked from a uniform distribution over $[−360,+360]$ Hz/s. $dr$ is clipped to within $[-1800,1800]$ Hz/s we will also manually add some additional spikes to guarantee that \"in every 50ms time bin, each neuron spikes at least once\" Make a training data In [8]: from OIST.tutorial4 import PoissonProcessGenerator , plotPatternRaster In [9]: poisson_params = { \"min_span\" : 50 , # [ms] \"starting_Hz\" : 54 , # [Hz] \"min_r\" : 0 , # [Hz] \"max_r\" : 90 , # [Hz] \"min_ds\" : - 3.6e-1 , # [Hz/ms] \"max_ds\" : 3.6e-1 , # [Hz/ms] \"min_dr\" : - 1.8 , # [Hz/ms] \"max_dr\" : 1.8 , # [Hz/ms] \"segment_length\" : 50 , # [ms] Length of 1 Presynaptic spiking segment length. } In [10]: seed = 0 In [11]: num_presynaptic_neurons = 2000 # Number of the presynaptic neurons. simulation_length = 1000 # [ms] In [12]: poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) In [13]: spikes = poisson_generator . generate_spikes ( simulation_length , num_presynaptic_neurons , seed = seed ) Processing Time: 0.708[s] Now we will Divide the presynaptic spiking activity into segments of 50ms Select a random 50ms segment to be considered as the \"pattern\" Copy and paste this pattern across the raster plot in a certain proportion of segments. Add 10Hz Noises to all neurons at all times. Divide and Select \"Pattern\" In [14]: poisson_generator . select_segment ( seed = seed ) Spikes divided into 20 segments. 13-th segment was selected as a Pattern. In [15]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( spikes , ax = ax ) plt . tight_layout () plt . show () Copy and Paste this \"Pattern\" In [16]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [17]: pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) Number of spikes added: 250000.0 Spikes are saved as `self.pattern_repeated_spikes`. Add Poisson Noises In [18]: frequency = 10 # [Hz] In [19]: noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes are saved as `self.noise_added_spikes`. In [20]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) plt . tight_layout () plt . show () Firing Rates In [21]: from OIST.tutorial4 import plotFiringRates In [22]: fig = plt . figure ( figsize = ( 12 , 4 )) fig = plotFiringRates ( noise_added_spikes , fig = fig ) plt . show () Check the Repeated Position In [23]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) ax = plotPatternRaster ( output_identities , cmap = \"RdGy_r\" , ax = ax , alpha = 0.7 ) plt . tight_layout () plt . show () With these paramaters, we can embed a repeating pattern within some pseduo-random, spontaneous activity. However, learning takes time! And we have only been simulating 1s of activity. In this task, the authors reported they needed 13.5s of activity (or 700 pattern presentations) for the neuron to show signs of learning to recognise the pattern. Figure 4 from Masquelier et al. 2008: Overview of the 450 s simulation. Here we plotted the membrane potential as a function of simulation time, at the beginning, middle, and end of the simulation. Grey rectangles indicate pattern presentations. (a) At the beginning of the simulation the neuron is non-selective because the synaptic weights are all equal. It thus fires periodically, both inside and outside the pattern. (b) At t≈13.5 s, after about 70 pattern presentations and 700 discharges, selectivity to the pattern is emerging: gradually the neuron almost stops discharging outside the pattern (no false alarms), while it does discharge most of the time the pattern is present (high hit rate), here even twice (c) End of the simulation. The system has converged (by saturation). Postsynaptic spike latency is about 4 ms. Hit rate is 99.1% with no false alarms (estimated on the last 150 s). It is therefore necessary to use some pre-computed spontaneous activity prepared earlier, found in the file spont_100s_alt.npy . It contains 100s of pseduo-random, spontaneous activity for us to use in our simulations. Warning, it is a large file at ~1.6GB! $ wget --content-disposition https://www.dropbox.com/sh/p9ml6l402znbzmy/AAA2LP7W1bcvwSgYnmx9ahyga?dl = 0 & preview = spont_100s_alt.npy # Pattern1. Download pre-computed files. pre_spikes_wrepeats_100s = np . load ( \"path/to/spont_100s_alt.npy\" ) poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) poisson_generator . memorize ( pre_spikes_wrepeats_100s , repeated = False ) # Pattern2. Make by myself. simulation_length_100s = 100 _000 num_presynaptic_neurons = 2 _000 poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) pre_spikes_wrepeats_100s = poisson_generator . generate_spikes ( simulation_length_100s , num_presynaptic_neurons , seed = seed ) In [24]: # Pattern.1 pre_spikes_wrepeats_100s = np . load ( \"path/to/spont_100s_alt.npy\" ) poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) poisson_generator . memorize ( pre_spikes_wrepeats_100s , repeated = False ) [Before] simulation length: None Number of the presynaptic neurons: None Memorizing... [After] simulation length: 100000 Number of the presynaptic neurons: 2000 In [25]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [26]: # Repeat & Paste. poisson_generator . select_segment ( seed = seed ) pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes divided into 2000 segments. 685-th segment was selected as a Pattern. Number of spikes added: 25000000.0 Spikes are saved as `self.pattern_repeated_spikes`. Spikes are saved as `self.noise_added_spikes`. In [27]: repeated_idxes = np . any ( poisson_generator . repeated_position , axis = 1 ) In [28]: print ( f \"Pattern shape = {poisson_generator.pattern_spikes.shape} \" ) print ( f \"Poisson Process shape = {noise_added_spikes.shape} \" ) Pattern shape = (2000, 50) Poisson Process shape = (2000, 100000) Now we are ready to use these spike trains to train a postsynaptic neuron! ... or are we? Creating a model conceptually or mathematically is just the first step. Next we have to figure out how to simulate it computationally. NEST simulation In [29]: import nest NEST contains many STDP synapse rules. Which one should we use? We said earlier that we will use an additive/exponential STDP rule, however that is not the only parameter to consider. Another consideration is \"how to pair two continuous spikes trains\" such that we can apply STDP appropriately to all presynaptic spikes $j$ coming to the postsynaptic neuron $i$. A list of STDP models implemented in NEST can be found here: https://nest-simulator.readthedocs.io/en/latest/models/stdp.html The following models correspond to the below figure for pairing of spikes for STDP: stdp_nn_symm_synapse (panel A) stdp_nn_pre-centered_synapse (panel B) stdp_nn_restr_synapse (panel C) Figure 7 from Morrison et al. 2008 . Examples of nearest neighbor spike pairing schemes for a presynaptic neuron j and a postsynaptic neuron i. In each case, the dark gray indicate which pairings contribute toward depression of a synapse, and light gray indicate which pairings contribute toward potentiation. Symmetric interpretation : each presynaptic spike is paired with the last postsynaptic spike, and each postsynaptic spike is paired with the last presynaptic spike (Morrison et al. 2007). Presynaptic centered interpretation : each presynaptic spike is paired with the last postsynaptic spike and the next postsynaptic spike (Izhikevich and Desai 2003; Burkitt et al. 2004: Model II). Reduced symmetric interpretation : as in c but only for immediate pairings (Burkitt et al. 2004: Model IV, also implemented in hardware by Schemmel et al. 2006) [Masquelier et al. (2008)](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0001377) uses something akin to panel C In the (unreleased) NEST 3.0 there is a stdp_nn_restr_synapse model which is quite similar. (However, we are using NEST 2.X. now.) After going through the available STDP models, none appeared to be capable of replicating the paper due to this paper requiring a particular spike-pairing method which doesn't seem to be represented in any of the currently-implemented STDP models in NEST. Therefore, we need to make some changes to our experiment! But before we do that, let's simulate the current model using some different synapses which are available to us. Start with the static synapse and then experiment with some STDP synapse models to see what goes wrong and \"how different paramaters affect the results.\" # Check what model we can use. nest . Models ( 'synapses' ) In [30]: from OIST.tutorial4 import NeuronalNetwork In [31]: simulation_times = 1000 In [32]: spike_indicies = [ np . where ( is_spike )[ 0 ] for is_spike in noise_added_spikes == 1 ] In [33]: STDP_paramaters = { 'a_LTP' : 0.03125 , 'a_LTD' : 0.85 * 0.03125 , 'tau_LTP' : 16.8 , 'tau_LTD' : 33.7 , } In [34]: model = NeuronalNetwork ( ** STDP_paramaters ) In [35]: model . build ( spike_indicies ) Created 2000 spike generators. Created 2000 parrot neurons. Created 1 post_neuron. Created spike detector. Created voltmeter. In [36]: model . compile ( synapse_model = \"static\" , ex = 1 ) Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: static_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [37]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [38]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [39]: model . compile ( synapse_model = \"standard\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [40]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [41]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [42]: model . compile ( synapse_model = \"triplet\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_triplet_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [43]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [44]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [45]: model . compile ( synapse_model = \"FACETS\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_facetshw_synapse_hom Connected post neuron to spike detector Connected voltmeter to post neuron In [46]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [47]: ax = model . plotWeights ( repeated_idxes ) plt . show () Couldn't recognize the patterns. Exercise 2 What are some general problems with the STDP synapses? How do these synapse models cause failure of our model to replicate the original paper? What can we do to the task or the model which might help? In [48]: model = NeuronalNetwork ( ** STDP_paramaters ) model . build ( spike_indicies ) Created 2000 spike generators. Created 2000 parrot neurons. Created 1 post_neuron. Created spike detector. Created voltmeter. In [49]: gaussian_params = { \"simulation_length_pulses\" : 10000.0 , \"proportion_of_neurons_pulsing\" : 0.5 , \"number_of_pulses\" : 50 , \"spikes_per_pulse\" : 5 , \"std_spikes_per_pulse\" : 5.0 } In [50]: # Overwrite the spike generator. noise_rate = 35.0 # firing rate of Poisson neurons (Hz) model . spike_generator = nest . Create ( \"poisson_generator\" , model . num_presynaptic_neurons , params = { 'rate' : noise_rate }) In [51]: # Add the gaussian Packets as an additional input. model . addGaussianPackets ( ** gaussian_params ) In [52]: model . compile ( synapse_model = \"standard\" , ex = 2 ) Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [53]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [54]: ax = model . plotWeights ( repeated_idxes ) plt . show () Difficult to find a best parameter :( → How about using Bayesian optimization ?? 【Challenge Exercise】 Consider whether and how your network could learn multiple patterns, e.g. would you need to add more post-synaptic neurons to the network? Hint: see [Masquelier et al. (2009) Competitive STDP-Based Spike Pattern Learning. Neural Computation](https://www.ncbi.nlm.nih.gov/pubmed/19718815) . In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-4.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-4.html"},{"title":"3.Guided NEST exercises (basic)","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Milena Menezes Carvalho Lecture Material https://github.com/oist-ncbc/skill-pill-plus/blob/master/Tutorial-3_Synapses-and-Networks Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial3.py In [1]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Synapses Neuronal connectivity Neurons are connected at specific sites called synapses . Usually, the axon of a presynaptic neuron will make contact with the dendrite (or soma ) of a postsynaptic in what's called a chemical synapse : neurotransmitters are transferred via the tiny gap between the two neurons ( synaptic cleft ) thanks to biochemical processes. This generates a change in membrane potential at the postsynaptic site, called postsynaptic potential . Electrical synapses , also known as gap junctions , can also be present -- in this case, specialized proteins make a direct electrical connection between neurons. [1] from [2] In this tutorial we will connect two or more neurons in NEST to create our first neuronal networks. First, we will learn the basic commands following [3] and [4] Then apply these to a well-known balanced network known as the Brunel network . By the end of this tutorial, you should be able to understand that a network's stability and activity behavior is deeply influenced by its parametrization. Sources: [1] Wulfram Gerstner and Werner M. Kistler, \"Spiking Neuron Models\". Cambridge University Press, 2002 [2] Peter Dayan and L. F. Abbot, \"Theoretical Neuroscience: Computational and Mathematical Modeling of Neural Systems\". The MIT Press, 2001 [3] PyNEST tutorial: Part 2, Populations of Neurons [4] PyNEST tutorial: Part 3, Connecting Networks with Synapses Synapse types The simplest synapse type is the static_synapse . The synaptic weight , a measure of how strong is the influence of the presynaptic neuron on the postsynaptic neuron, is static , i.e. does not change over time. The synaptic transmission, however , is not instantaneous. The synaptic delay is defined as the \"time\" between the presynaptic neuron activation ( action potential ) and the moment the postsynaptic potential is generated. In NEST, we can check the default values for all parameters using the GetDefaults function: nest.GetDefaults('static_synapse') The common model which is more suit to real biological event is spike-time dependent plasticity . The synaptic weight changes according to the temporal order between pre and postsynaptic spike times. In NEST, the most common STDP mechanisms are implemented in stdp_synapse . The change for normalized synaptic weights is described by $$ \\begin{aligned} \\Delta w &= \\begin{cases} \\lambda f {-}(w) \\times K -(\\Delta t) & \\text{if $\\Delta t \\leq 0$,} \\ \\lambda f {+}(w) \\times K +(\\Delta t) & \\text{if $\\Delta t > 0$,} \\end{cases}\\ \\Delta t &\\equiv t {post} - t {pre}\\ K {(+,-)}(\\Delta t) &= \\exp(-|\\Delta t| / \\tau {(+,-)}) \\end{aligned} $$ The update functions $$f_{+}(w) = (1-w)&#94;{\\mu_{+}} \\text{ and } f_{-}(w) = \\alpha w&#94;{\\mu_{-}}$$ create synaptic potentiation (stronger weights) when causal spiking is detected ($\\Delta t > 0$), otherwise generating synaptic depression (weaker weights). This rule is also known as temporally asymmetric Hebbian plasticity and has been thoroughly studied under different parametrizations. (below) STDP Type Parametrization Ref. multiplicative STDP $\\mu_{+}=\\mu_{-}=1.0$ [6] additive STDP $\\mu_{+}=\\mu_{-}=0.0$ [7] Guetig STDP $\\mu_{+}=\\mu_{-}=[0.0, 1.0]$ [5] van Rossum STDP $\\mu_{+}=0.0, \\mu_{-} = 1.0$ [8] Sources: [5] Guetig et al. (2003). Learning input correlations through nonlinear temporally asymmetric hebbian plasticity. Journal of Neuroscience, 23:3697-3714 DOI: https://doi.org/10.1523/JNEUROSCI.23-09-03697.2003 [6] Rubin J, Lee D, Sompolinsky H (2001). Equilibrium properties of temporally asymmetric Hebbian plasticity. Physical Review Letters, 86:364-367. DOI: https://doi.org/10.1103/PhysRevLett.86.364 [7] Song S, Miller KD, Abbott LF (2000). Competitive Hebbian learning through spike-timing-dependent synaptic plasticity. Nature Neuroscience 3(9):919-926. DOI: https://doi.org/10.1038/78829 [8] van Rossum MCW, Bi G-Q, Turrigiano GG (2000). Stable Hebbian learning from spike timing-dependent plasticity. Journal of Neuroscience, 20(23):8812-8821. DOI: https://doi.org/10.1523/JNEUROSCI.20-23-08812.2000 Introduction: synapses in NEST Check the synapse types you can call Found in the following link: [9] NEST Docs: All synapse models Running the following command: import nest nest . Models ( 'synapses' ) For STDP synaptic models, the time constant of the depressing window of STDP ( tau_minus ) is exceptionally a parameter of the post-synaptic neuron. nest . Create ( \"iaf_psc_alpha\" , params = { \"tau_minus\" : 30.0 }) However, tau_plus is a synapse parameter. nest . SetDefaults ( \"stdp_synapse\" ,{ \"tau_plus\" : 15.0 }) Customized variants of a synapse model can be created using CopyModel() , and can be used anywhere that a built-in model name can be used. nest . CopyModel ( \"stdp_synapse\" , \"layer1_stdp_synapse\" ,{ \"Wmax\" : 90.0 }) Connectivity rules for multiple neurons can be defined. Please check [3] to learn more details about creating and connecting neuron populations. Synaptic parameters can also be randomly distributed by assigning a dictionary to the parameter. This should contain the target distribution and its optional parameters, as listed below: Distributions Keys normal mu , sigma lognormal mu , sigma uniform low , high uniform_int low , high binomial n , p exponential lambda gamma order , scale poisson lambda Synapse information can be retrieved from its origin, target and synapse model using GetConnections() : Example. num_nurons = 10 epop1 = nest . Create ( \"iaf_psc_delta\" , num_nurons , params = { \"tau_m\" : 30.0 }) epop2 = nest . Create ( \"iaf_psc_delta\" , num_nurons ) conn_dict = { \"rule\" : \"fixed_indegree\" , \"indegree\" : 5 } syn_dict = { \"model\" : \"stdp_synapse\" , \"alpha\" : 1.0 } nest . Connect ( epop1 , epop2 , conn_dict , syn_dict ) neuron = nest . Create ( \"iaf_psc_alpha\" ) syn_dict = { \"model\" : \"stdp_synapse\" , \"alpha\" : { \"distribution\" : \"uniform\" , \"low\" : 0.1 , \"high\" : 2. }, \"weight\" : { \"distribution\" : \"uniform\" , \"low\" : 0.5 , \"high\" : 5. }, \"delay\" : 1.0 } nest . Connect ( epop1 , neuron , \"all_to_all\" , syn_dict ) # Synapse information can be retrieved print ( nest . GetConnections ( epop1 , target = epop2 , synapse_model = \"stdp_synapse\" )) # We can then extract the data using `GetStatus()`. # Specific information can be retrieved by providing a list of desired parameters. conns = nest . GetConnections ( epop1 , synapse_model = \"stdp_synapse\" ) conn_vals = nest . GetStatus ( conns , [ \"target\" , \"weight\" ]) Networks Example1: connecting two neurons In this example, we will create and connect two neurons, A and B. Neuron A is of type iaf_psc_delta : Receives external current $I_e = 376.0 pA$. This current is sufficient to elicit a spike every $\\approx$ 50ms. Neuron B is solely connected to neuron A: Can only spike if the input from A is strong enough. Let's observe how B can be influenced by A. In [2]: import nest import matplotlib.pyplot as plt In [3]: from OIST.tutorial3 import NeuronA , NeuronB , plotMultipleNeurons In [4]: # First, verify the activity of neuron A. nest . ResetKernel () modelA = NeuronA () modelA . build () In [5]: ax = plotMultipleNeurons ( modelA ) plt . show () Now let's create neuron B as iaf_psc_delta with no external current: In [6]: modelB = NeuronB () modelB . build () In [7]: ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Neuron B is still inactive. We need to connect both neurons: In [8]: nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) In [9]: ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Q. Suggest at least 3 alterations we can make in this example to elicit spiking activity from B. Lower the threshold V_th : nest.SetStatus(neuron_B,{'V_th': -69.}) # default: -55 Higher thr current I_e Highre the weights between nuron_A and nuron_B In [10]: # Lower the threshold V_th. nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , V_th =- 69. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () In [11]: # Higher the current I_e. nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , I_e = 350. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () In [12]: # Highre the weights between \"nuron_A\" and \"nuron_B\" nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 14.9 }) nest . Simulate ( 300. ) nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 15. }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Because of the shape of B, and scale of observation, we couldn't find the spikes but neuron B also spikes after connection weight increased. Q. Check what happens if the neuron model is different: for example, change `iaf_psc_delta` to `hh_psc_alpha`. In [13]: # Lower the threshold V_th. nest . ResetKernel () modelA = NeuronA ( model_name = \"hh_psc_alpha\" ) modelA . set_params ( \"neuron\" , I_e = 250. ) modelA . build () modelB = NeuronB ( model_name = \"hh_psc_alpha\" ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Q. connect B to A reciprocally and check their dynamics. How can you describe their behavior? In [14]: nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , V_th =- 65. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 5. }) nest . Connect ( modelB . neuron , modelA . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 1 }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Example2: Random Balanced Network We will now simulate a network of integrate-and-fire (IAF) , excitatory and inhibitory spiking neurons connected randomly with fixed weights . This network (called Brunel Network ) was proposed and studied in [10]: The network is composed of excitatory neurons (80%) inhibitory neurons (20%) connection probability $\\epsilon = 10\\%$ ( epsilon ). All neuron types can be connected (E$\\rightarrow$E, E$\\rightarrow$I, I$\\rightarrow$E and I$\\rightarrow$I). Neurons receive external input from oustide the network modeled by a Poisson spike train generator [11] rate nu_ex , $\\nu_{ex} = \\eta * \\nu_{th}$ threshold rate $\\nu_{th}$ ( nu_th ) is calculated using $$\\nu_{th} = \\frac{\\theta}{J * \\text{CE} * \\tau_{m}}$$ In general, the interspike intervals drawn are exponentially distributed. The synaptic input current on each neuron is calculated as $$I_i(t) = \\tau \\sum_j J_j \\sum_k \\delta(t-\\delta-t_j&#94;k)$$ Sum over $j$ covers all synapses (internal and external to the network) Sum over $k$ covers all spikes arriving at times $t&#94;k_j$ with delay $\\delta$ ( delta ). This simple postsynaptic current model is called delta synapse , in which stimulation is applied in a single point in time for simplicity using the Dirac delta function . In biological systems, synaptic models are diverse and can vary within the same neuron depending on the function of the synapse, for example. In NEST, we will create a network of iaf_psc_delta neurons connected using static_synapse with weights $J_E$ and $J_I = -g*J_E$. We will study how this network changes its behavior depending on its parametrization. Sources: [10] Brunel N (2000). Dynamics of sparsely connected networks of excitatory and inhibitory spiking neurons. Journal of Computational Neuroscience 8, 183-208. [11] Poisson distribution m In [15]: from OIST.tutorial3 import BrunelNetwork In [16]: model = BrunelNetwork () In [17]: # Model parameters. model . __dict__ Out[17]: {'g': 5.0, 'eta': 2.0, 'delay': 1.5, 'dt': 0.1, 'epsilon': 0.1} $$ \\begin{aligned} \\begin{cases} \\epsilon &= 10\\%\\\\ v_{ex} &= \\eta v_{th}\\\\ \\delta\\\\ J_I &= -gJ_E \\end{cases} \\end{aligned} $$ In [18]: neuron_params = { \"C_m\" : 1.0 , \"tau_m\" : 20.0 , \"t_ref\" : 2.0 , \"E_L\" : 0.0 , \"V_reset\" : 0.0 , \"V_m\" : 0.0 , \"V_th\" : 20.0 } In [19]: model . build ( N_total_neuron = 12500 , N_rec_volt = 5 , N_rec = 50 , J = 0.1 , ** neuron_params ) Number of neurons : 12500 Excitatory: 10000 Inhibitory: 2500 Number of synapses: 15625000 Excitatory: 12500000 Inhibitory: 3125000 Building time : 4.58 s In [20]: model . simulate ( T = 900. ) Simulation time : 900.0 ms Processing time : 56.00 s Completed. Please use following methods to plot results. - `plotVoltageEx(n)`, `plotVoltageIn(n)` - `plotVoltageCompare(idx=0)` - `plotRaster()` Below we plot the voltage, raster, and activity rate of the excitatory and inhibitory populations. In [21]: model . plotVoltageEx () \u001b Membrane potential plots [Excitatory Neurons] In [22]: model . plotVoltageIn () \u001b Membrane potential plots [Inhibitory Neurons] In [23]: model . plotVoltageCompare ( 0 ) \u001b Membrane potential Compaison. In [24]: model . plotRaster () \u001b Raster Plot.(N=50) One of the main findings in Brunel's paper is the different activity states that can be observed in this network depending on $g$: the ratio between inhibitory and excitatory synaptic weights $\\eta$: the external excitation rate relative to the threshold rate $\\delta$: the synaptic delay $\\epsilon$: the connection probability . By altering these arguments, he observed different collective behaviors identified as asynchronous irregular (AI) asynchronous regular (AR) synchronous irregular (SI) synchronous regular (SR). These behaviors are exemplified in the images below. from [1] Q. Use the graphs as a starting point. Try to elaborate on how each of the four parameters affects the state of this network. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-3.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-3.html"},{"title":"2.Introduction to NEST Simulator","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Gastón Sivori Lecture Material https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-2_NEST-Introduction Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial2.py In [1]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Agenda Installation leaky integrate-and-fire (LIF) HH-neuron model Connecting nodes with different inputs F-I curve Installation Documentation: https://nest-simulator.readthedocs.io/en/latest/installation/ Github: https://github.com/nest/nest-simulator/tree/v2.18.0 Memo(What I did) pip $ pip install python-nest ※ This `nest` has lack of some module (ex. `nest.Create`) cmake # Install dependencies via Homebrew $ brew install gcc cmake gsl open-mpi libtool $ mkdir NEST $ cd NEST # Clone source files from Github. $ wget --content-disposition https://github.com/nest/nest-simulat or/archive/v2.16.0.tar.gz $ tar zxf nest-simulator-2.16.0.tar.gz $ mkir bld $ cd bld # Configure and build NEST inside the build directory # (replacing gcc-9 and g++-9 with the GCC compiler versions you installed with brew). # You can check it with `g++ -v` or `gcc -v` command. $ cmake -DCMAKE_INSTALL_PREFIX:PATH = . \\ -DCMAKE_C_COMPILER = gcc-9 \\ -DCMAKE_CXX_COMPILER = g++-9 \\ ../nest-simulator-2.16.0/ $ make -j4 $ make install $ make installcheck ※ This `nest` also has lack of some module (ex. `nest.Create`) Anacond # If you want to use jupyter notebook, please include \"jupyter\" $ conda create --name skill-pill-plus -c conda-forge nest-simulator python jupyter # path/to/activate is like \"/Users/iwasakishuto/.pyenv/versions/anaconda3-5.0.1/bin/activate\" $ source skill-pill-plus # Activated!! ( skill-pill-plus ) $ If you want to use this environment on the jupyter notebook, please follow this. $ pip install environment_kernels $ jupyter notebook --generate-config $ vi ~/.jupyter/jupyter_notebook_config.py # Add these line >>> c.NotebookApp.kernel_spec_manager_class = 'environment_kernels.EnvironmentKernelSpecManager' >>> c.EnvironmentKernelSpecManager.conda_env_dirs =[ '/Users/iwasakishuto/.pyenv/versions/anaconda3-5.0.1/env' ] $ jupyter notebook # If successful, you can chose your ideal environment at [Kernel → Change kernel] # NOTE: You should install `jupyter` in the environment. # If you not, please run `conda install --name \"Your Environment Name\" jupyter` ※ This `nest` has all modules :) In [2]: import nest import numpy as np import matplotlib.pyplot as plt # If you need to import other packages like scipy or scikit-learn # You should import these \"before\" nest!! For NEST to simulate different experiments, its kernel (core functionality) needs to be reseted ( nest.ResetKernel() ) for every new simulation. Please remember to run this code before running each simulation. About NEST Conceptually, neural networks consists of neurons and connections . Nodes can be neurons , sub-networks or devices inside the NEST framework. We will use devices to stimulate neurons and to measure their membrane potential. Sub-networks , on the other hand, are arrangements of neurons whose parameters may be modified as a group. We will look at sub-networks in the following lectures. leaky integrate-and-fire (LIF) For now, we will focus on constructing a leaky integrate-and-fire (LIF) neuron with delta-shaped synaptic currents: In this figure, a delta-shaped pulse $\\delta(t-t_j&#94;f)$ from neuron $j$ is being transmitted along its axon until it reaches neuron $i$'s dendrites through a synapse. Synapses are modelled as low-pass RC circuit filters which output a current $\\alpha(t-t_j&#94;f)$. These presynaptic currents reach the soma as an input current $I(t)$ which charges the capacitor $C$ (integration) while some of it leaks out through the resistance $R$. ($I(t) = I_R + I_C$) The electrical components here represent a circuit modelization of the biological mechanisms happening at the synapse and the soma. In this model, the membrane's potential is represented by capacitor $C$ such that when it has enough charge and reaches the threshold potential $\\vartheta$, a spike $\\delta(t-t_i&#94;f)$ is generated and transmitted. In [3]: from OIST.tutorial2 import LIFmodel In [4]: model = LIFmodel ( model_name = \"iaf_psc_alpha\" ) Create LIF neuron with alpha-function shaped synaptic currents. Created a spike_generator. Created a voltmeter. Created a spike detector. In [5]: # Check the neuron params. model . neuron_params () C_m : 250.0 pF E_L : -70.0 mV I_e : 0.0 pA V_m : -70.0 mV V_reset: -70.0 mV V_th : -55.0 mV t_ref : 2.0 ms tau_m : 10.0 ms Q1. You might have noticed that there is no parameter for the membrane resistance `R_m` as shown in the previous figure. Do you know why? The membrane time constant tau_m corresponds to the membrane capacitance C_m and membrane resistance R_m as observed in the electrical circuit above. Therefore it's possible to calculate what is the R_m value given the following formula: $$ \\tau_m = C_m R_m $$ In [6]: # Retrieve a particular set of parameters model . neuron_params ( \"V_reset\" , \"V_th\" ) Out[6]: ((-70.0, -55.0),) In [7]: # Modify spike generation to values 10 and 50 ms print ( f \"Before: {model.spike_params('spike_times')}\" ) model . set_params ( node = \"spike_generator\" , spike_times = [ 10. , 50. ]) print ( f \"After : {model.spike_params('spike_times')}\" ) Before: ((array([], dtype=float64),),) After : ((array([10., 50.]),),) In [8]: # Connect the spike generator and the voltmeter to the neuron. model . build ( weight = 1e3 ) Connect spike generator with a given synaptic specification ({'weight': 1000.0}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. Simulate for 100 ms and observe the results In [9]: ax = model . simulate ( ms = 100 ) plt . show () Q2. What can we observe here? Are these neuron spikes? We can observe the membrane trace of the LIF neuron model excited with alpha-function shaped spikes at times 10 ms and 50 ms. The observed peaks in the membrane trace are not spikes since the membrane threshold V_th is -55mV. If we modify the external current or lower the membrane's threshold potential we should be able to observe spikes. In [10]: # Modifying the threshold model = LIFmodel ( model_name = \"iaf_psc_alpha\" , display = False ) model . set_params ( \"neuron\" , V_th =- 58. ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . build ( weight = 1e3 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () In [11]: # modifying external current to LIF neuron model = LIFmodel ( model_name = \"iaf_psc_alpha\" , display = False ) model . set_params ( \"neuron\" , I_e = 300. ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e3 , display = False ) model . simulate ( ms = 100 ) plt . show () In this neuron model, the membrane potential does not follow the biologically observed dynamics that neurons have. Their use is limited to understand and experiment with network dynamics and spiking activity :( HH-neuron model For comparison, let's observe the membrane potential of a HH-neuron model (Hodgkin and Huxley, 1952). This model was the \"conclusion of a series of papers\" concerned with the flow of electric current through the surface membrane of the giant nerve fibre in the squid. Using voltage-clamp experiments and by varying extracellular sodium and potassium concentrations, Hodgkin and Huxley developed a model in which the properties of an excitable cell are described by a set of ordinary differential equations. For simplicity, we will not focus on these equations. NEST's framework integrates these equations to obtain the instantaneous membrane potential. The following figure represents an electric circuit model of the neuron's membrane. The HH-model (Hodgkin and Huxley, 1952) considers the ionic channels present on the cellular membrane. These channels allows the conduction of specific types of ions. Sodium channels (Na+) are scarce inside the cell , so that when sodium channel opens, positive charges rush into the cell to cause excitation. Potassium ions (K+) are rich inside the cell , so that when potassium channel opens, positive charges rush out of the cell to cause inhibition. The model assumes a leak current composed of all other remaining ionic currents (Cl, Mg, etc.) This model is based on careful data analysis and follows the following equation : $$C_m \\frac{dV}{dt} = \\bar{g_{Na}}m&#94;3h(E_{Na}-V) + \\bar{g_K}n&#94;4(E_K-V) + g_{Leak}(E_{Leak}-V) + I$$ Where the conductances $g_{Na}$ and $g_{K}$ are: $$ g_{Na} = \\bar{g_{Na}}m&#94;3h $$$$ g_{K} = \\bar{g_K}n&#94;4 $$ Let's see these parameters in NEST by creating a hh_psc_alpha neuron. A HH-model neuron with delta-shaped synaptic currents. In [12]: from OIST.tutorial2 import HHmodel In [13]: model = HHmodel () Create Hodgkin-Huxley neuron with alpha-function shaped synaptic currents. Created a spike_generator. Created a voltmeter. Created a spike detector. In [14]: model . neuron_params () C_m : 100.0 pF E_K : -77.0 mV E_L : -54.402 mV E_Na : 50.0 mV g_K : 3600.0 nS g_L : 30.0 nS g_Na : 12000.0 nS I_e : 0.0 pA V_m : -65.0 mV t_ref: 2.0 ms In [15]: model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e3 ) Connect spike generator with a given synaptic specification ({'weight': 1000.0}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. In [16]: ax = model . simulate ( ms = 100 ) plt . show () Q3. Modify the previous example to observe spikes. In [17]: # modifying the synaptic strength (w) to observe spikes model = HHmodel ( display = False ) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e4 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () In [18]: print ( f \"Number of spikes: {model.spikes} \" ) Number of spikes: 2 Could you observe the spikes? Just after a spike, the membrane potential resets to -77 mV and a short refractory period of 2 ms (check these parameter value t_ref from the parameter list shown above!). During this period, the neuron is unable to react to excitation. Q4. Can you try exciting the neuron during this period to observe this phenomena? In [19]: # In the following example the spike generator generates spikes at times 10ms, 11ms, 50ms and 52ms. model = HHmodel ( display = False ) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 11.0 , 50. , 52.0 ]) # Add!! model . build ( weight = 1e4 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () The figure is the same as before due to the refractory period of the neuron. Connecting nodes with different inputs To compare neurons with different inputs, let's see how the parameters of the input affect the neurons' output. In the following example, we will use constant input current and belows with the same mean strength as the constant input current. a Poisson spike train The probability density function and firing rates of neurons will be shaped given by these inputs. First, let us define the parameters of the simulation and input currents. In [20]: T = 1.2e3 # simulation time nu_ext = 15e3 # firing rate of external Poisson source J = 0.08 # synaptic weight d = 0.1 # delay C = 250.0 # membrane potential capacitance mu = J * 1e-3 * nu_ext * C # mean input in pAa I_ext = mu # external current In [21]: neuron_params = { 'C_m' : C , # (pF) 'E_L' : 0. , # (mV) 'I_e' : 0.0 , # (pA) 'V_m' : 0. , # (mV) 'V_reset' : 0. , # (mV) 'V_th' : 15. , # (mV) 't_ref' : 2.0 , # (ms) 'tau_m' : 10.0 , # (ms) } In [22]: plot_infos = { \"color\" : [ \"blue\" , \"red\" ], \"label\" : [ \"constant input\" , \"Poisson input\" ] } Then, make two types of models and compare them. In [23]: from OIST.tutorial2 import mkMultiDetectors , plotMultResults In [24]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) Create LIF neuron with delta-shaped synaptic currents. Created a voltmeter. Created a spike detector. In [25]: poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d ) Create LIF neuron with delta-shaped synaptic currents. Created a poisson_generator. Created a voltmeter. Created a spike detector. Connect spike generator with a given synaptic specification ({'weight': 0.08, 'delay': 0.1}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. In [26]: neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) Created 2 multimeter to record membrane potential of the neurons. Created 2 spike detectors to record spikes times and neuron identifiers, but not record from file. In [27]: nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axR . legend (), axR . set_xlim ( 0 , T ) plt . show () What!? There are no spikes?! Well, look at the figures and consider the threshold potential value V_th . Let's try increasing the synaptic strengh J . The neuron receiving Poisson input will be in different firing rate regimes! In [28]: print ( f \"poisson_model.neuron_params('V_th') = {poisson_model.neuron_params('V_th')[0][0]}\" ) print ( f \"const_model.neuron_params('V_th') = {const_model.neuron_params('V_th')[0][0]}\" ) poisson_model.neuron_params('V_th') = 15.0 const_model.neuron_params('V_th') = 15.0 Q5. Try to make the neuron fire at an irregular regime. In [29]: T = 1.2e3 # nu_ext = 15e3 # J = 0.09 # From 0.08 to 0.09. d = 0.1 # C = 250.0 # mu = J * 1e-3 * nu_ext * C # I_ext = mu # In [30]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axR . legend (), axR . set_xlim ( 0 , T ) plt . show () Q6. Try to make the neuron spike at a regular regime. In [31]: T = 1.2e3 # nu_ext = 15e3 # J = 0.11 # From 0.08 to 0.11. d = 0.1 # C = 250.0 # mu = J * 1e-3 * nu_ext * C # I_ext = mu # In [32]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axL . legend (), axR . legend (), axR . set_xlim ( 0 , T ) plt . show () Since we are using the LIF neuron model with a membrane threshold potential V_th at 15mV , you will not be able to see proper spikes. Instead, you will only see the after-spike dynamics (membrane potential reset and refractory period). Q7. Try to make HH neuron models spike at a regular regime for both input conditions. In [33]: T = 500.0 # simulation time nu_ext = 15e3 # firing rate of external Poisson source J = 0.08 # synaptic weight d = 0.1 # delay C = 100.0 # membrane potential capacitance mu = J * 1e-3 * nu_ext * C # mean input in pAa I_ext = mu # external current In [34]: neuron_params = { 'g_K' : 3000.0 , 'g_Na' : 16000.0 , 'g_L' : 60.0 } In [35]: const_model = HHmodel ( model_name = \"hh_psc_alpha\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = HHmodel ( model_name = \"hh_psc_alpha\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , ** plot_infos ) axL . legend (), axR . legend (), axR . set_xlim ( 0 , T ), axR . set_ylim ( - 80 , 40 ) plt . show () Rate of neuron stimulated with constant input input: 56.112 Rate of neuron stimulated with Poisson input input: 48.096 F-I curve As you have seen in the past figures, the firing rate of the neuron can change given different external current I_e . It's possible to plot this relationship and its usually referred to as the F-I curve . In [36]: from OIST.tutorial2 import FiringRate In [37]: neuron_params = { 'C_m' : 250.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [38]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () As you can observe from this figure, given the parameter setup, the neuron in a leaky-integrate-and-fire model starts to fire spikes at around 370 pA of external input current I_e . For this particular case, V_th was chosen to be low to observe the trend of the firing rate as external current is increasing. Modifying the value of the capacitance C_m moves this curve in the x-axis Modifying the refractory period t_ref slows down the firing rate i.e. more current is required for a given firing rate. Q8. Observe these changes in the F-I curve by modifying the neuron model parameters. In [39]: neuron_params = { 'C_m' : 150.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [40]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () In [41]: neuron_params = { 'C_m' : 350.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [42]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () In [43]: neuron_params = { 'C_m' : 250.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 1.0 , 'tau_m' : 10.0 , } In [44]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () Q10. Repeat these simulations with the HH neuron model hh_psc_alpha by modifying channel conductances. In [45]: neuron_params = { 'g_K' : 3600.0 , 'g_Na' : 12000.0 , 'g_L' : 30.0 } In [46]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [47]: neuron_params = { 'g_K' : 3600.0 , 'g_Na' : 13000.0 , 'g_L' : 30.0 } In [48]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [49]: neuron_params = { 'g_K' : 3800.0 , 'g_Na' : 12000.0 , 'g_L' : 30.0 } In [50]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-2.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-2.html"},{"title":"1.Mathematical Models and Numerical Methods of Computational Neuroscience","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Alan Func Lecture Materials https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-1_Ordinary-Differential-Equations Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial1.py In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Agenda Brief introduction of Differential Equations Neuronal Models Numerical Method to Simulate Neuronal Models How the Network can be trained Brief introduction of Differential Equations Ordinary Differential Equations A fundamental tool in theoretical Science The differential equation gives the dependence of derivatives $$F\\left[\\frac{d&#94;nx(t)}{dt&#94;n},\\cdots,\\frac{dx(t)}{dt},C\\right] = 0$$ As we can calculate the whole path ways if we know the velocity($v=dx(t)/dt$), by knowing the slopes, one may trace the whole curve!! Examples of Models and Theories Simple Harmonic Oscillator Heat Equation(1-D) An oscillator that is neither driven nor damped. How the distribution of some quantity (such as heat) evolves over time in a solid medium $$\\underset{\\text{Acceleration}}{\\frac{d&#94;2x(t)}{dt&#94;2}}+\\underset{\\text{Returning Force}}{\\omega&#94;2x(t)} = 0$$ $$\\underset{\\text{Rate of Heat}}{\\frac{\\partial u(x,t)}{\\partial t}}+\\underset{\\text{Returning Force}}{\\alpha\\frac{\\partial&#94;2u(x,t)}{\\partial x&#94;2}} = 0$$ Implementation by Numerical Method Euler Method Runge-Kutta Methods Euler Method Euler method has a relatively large error. There are some extensions of the Euler method(one of them are Mid-Point method. ) In [3]: X = np . arange ( - 1.0 , 6.5 , 0.5 ) Y = 1 / 6 * X ** 3 dYdX = 1 / 2 * X ** 2 In [4]: Euler_dYdX_bigger = ( Y [ 2 :] - Y [: - 2 ])[ 2 :] # step size=1 dY/dX(t) = X(t+1)-X(t) Euler_dYdX_smaller = ( Y [ 1 :] - Y [: - 1 ])[ 2 : - 1 ] / 0.5 # step size=0.5 dY/dX(t) = (X(t+0.5)-X(t))/0.5 MidPointEuler_dYdX = ( Y [ 2 :] - Y [: - 2 ])[ 1 : - 1 ] # step size=1 dY/dX(t) = X(t+0.5)-X(t-0.5) In [5]: def CompareNumerical ( ax , X , Y , label , marker , color ): ax . scatter ( X [ 2 : - 2 ], Y , label = label , marker = marker , color = color ) ax . plot ( X [ 2 : - 2 ], Y , color = color , alpha = 0.5 ) return ax In [6]: fig , ax = plt . subplots () ax = CompareNumerical ( ax , X , Euler_dYdX_bigger , \"Step = 1.0\" , \"s\" , \"b\" ) ax = CompareNumerical ( ax , X , Euler_dYdX_smaller , \"Step = 0.5\" , \"o\" , \"r\" ) ax = CompareNumerical ( ax , X , MidPointEuler_dYdX , \"Mid-point h=1.0\" , \"&#94;\" , \"g\" ) ax . plot ( X [ 2 : - 2 ], dYdX [ 2 : - 2 ], linestyle = \"--\" , label = \"Analytic\" , color = \"black\" ) ax . legend (), ax . grid (), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$y$\" ) plt . show () The mid-point method is surprisingly good!! Runge-Kutta Methods A family of implicit and explicit iterative methods. More: Wikipedia Neuronal Models To Model a Neuron... Neurons can be excited by current injection . If the membrance potential(Voltage) is larger than some thresholds , an action potential will be triggered. Membrance potential means the potential difference across the neuron membrance. → Relative can be controlled by concentrations of irons($\\mathrm{Na}&#94;+,\\mathrm{K}&#94;+,\\mathrm{Cl}&#94;-$) is maintained by their ion bumps , and at the resting state, it is around $65\\mathrm{mV}$. sometimes across the threshold , and when it occurs, the neuron fires works like a capacitor with a leaky current. Leaky Integrate-and-Fire(LIF) model In 1907, Lapicque proposed a simple model(which is just the time derivative of the law of capacitance ($Q=CV$) .) for neurons: $$I(t)-\\frac{V_m(t) - V_{rest}}{R_m} = C_m\\frac{dV_m(t)}{dt}$$ $I$: Input current (=const.) $V_m$: Membrance potential $V_{rest}$: Resting potential of the membrance $R_m$: Membrane resistance (we find it is not a perfect insulator as assumed previously) $C_m$: Capacity of the membrance. When an input current is applied, the membrane voltage increases with time until it reaches a constant threshold $V_{th}$ At the point, a delta function spike occurs and the voltage is reset to its resting potential($V_{rest}$). The LIF neuron fired more frequently as the input current increases. Leak Conductance Ion permeability at resting membrane potential, allowing a constant flow of current through the cell membrane due to channels that remain open at resting membrane potential (Ref: Encyclopedia of Neuroscience ) In [7]: from OIST.tutorial1 import LIFsimulation , LITSpikeFrequency In [8]: params = { 'V_rest' : - 65 , 'V_thre' : - 40 , 'V_reset' : - 70 , 'V_fire' : 20 , 'C' : 2e-4 , 'R' : 7.5e4 , 'I' : 5e-4 , 'dt' : 0.1 , 'T' : 100 , } In [9]: time , Vm = LIFsimulation ( ** params ) plt . plot ( time , Vm , color = \"black\" ) plt . xlabel ( \"time[ms]\" ), plt . ylabel ( \"V[mV]\" ), plt . grid () plt . show () In [10]: Is = [ 0.5e-3 , 1e-3 , 1.5e-3 , 2.0e-3 , 2.5e-3 , 3.0e-3 ] freqs = LITSpikeFrequency ( Is , ** params ) plt . plot ( Is , freqs , color = \"blue\" ), plt . scatter ( Is , freqs , color = \"blue\" , marker = \"s\" ) plt . title ( \"How Spiking Frequency Depends on Input Current\" ), plt . xlabel ( \"Input Current: I [uA]\" ), plt . ylabel ( \"Spiking Frequency [Hz]\" ), plt . grid () plt . show () ※ The LIF neuron fired more frequently as the input current increases. Hodgkin-Huxley model $$ I = C_m + \\frac{dV_m}{dt} + g_{\\mathrm{l}}\\left(V_m-V_{\\mathrm{l}}\\right) + g_{\\mathrm{K}}n&#94;4\\left(V_m-V_{\\mathrm{K}}\\right) + g_{\\mathrm{Na}}m&#94;3h\\left(V_m-V_{\\mathrm{Na}}\\right)\\\\ \\begin{cases} \\begin{aligned} \\frac{dn}{dt} &= \\alpha_n(V_m)(1-n) + \\beta_n(V_m)n\\\\ \\frac{dm}{dt} &= \\alpha_m(V_m)(1-m) + \\beta_m(V_m)m\\\\ \\frac{dh}{dt} &= \\alpha_h(V_m)(1-h) + \\beta_h(V_m)h\\\\ \\end{aligned} \\end{cases} $$ Proposed by Hodgkin and Huxley in 1952 (They received the 1963 Nobel Prize in Physiology or medicin for this work.) Like Leaky Integrate-and-Fire(LIF) model , the input current (const.) charges up the membrance capacitor. Leaky conductance This model considers also ion currents invoving potassium ion ($\\mathrm{K}&#94;+$) and Sodium ion ($\\mathrm{Na}&#94;{+}$) induced by the potential difference. Sodium ion : has a reversal potential depolarizing the membrance. The conductivity is voltage-gated. Potassium ion : has a reversal potential hyper-polarizing the membrance. The conductivity is voltage-gated. The individual gates act like a first order chemical reaction with two states: $$\\text{Shut}\\overset{\\alpha}{\\underset{\\beta}{\\rightleftarrows}}\\text{Open}$$ Propose that Each $\\mathrm{K}$ channel has $4$ identical activation gates.( $\\mathbb{P}_{\\text{open}}=n$ ) Each $Na$ channel has $3$ avtivation gates( $\\mathbb{P}_{\\text{open}}=m$ ), and $1$ inactivation gate( $\\mathbb{P}_{\\text{open}}=h$ ). Action Potential Stimulas raises the membrane potential. (Depolarization) If membrance potential over the Threshold , voltage-gated sodium channels will open, and due to the sodium concentration gradient (ex > in) , sodium ion flow into the cell. This process raises the membrance potential, and it gets further depolarized. As the membrance become **\"too large\"**, sodium ion channel closes , and after that ( there is a delay ), voltage-gated potassium channel will open. When the membrance potential return to the resting state, potassium channel closes, but as this response takes time, the membrance potential will be lower than the initial voltage. (Hyperpolarization) (※ Resting membrance potential means the equilibrium point between \"electrical gradient\" and \"concentration gradient\".) How the Network can be trained Long-term Synaptic Plasticity Stimulas are passed through a glutamate . Glutamate connects with AMPA receptor and it causes sodium channels opening. If Depolarization occurs, NMDA channel (which was closed by Magnesium) open, and Calcium flows into the cell. The amount of Calcium is Large : LTP(Long-term potentiation) occurs. Increase the AMPA. Small : LTD(Long-term depression) occurs. Decrease the AMPA. Spike-Timing-Depenent Plasticity (Classical) The change in $w_{ji}$ depends on the spike timings In order to perform STDP with differential equatins, an online implementation of STDP is proposed $$ \\begin{aligned} \\tau_+\\frac{dx}{dt} &= -x + a_+(x)\\sum_{t_f}\\delta(t-t_f)\\\\ \\tau_-\\frac{dy}{dt} &= -y + a_-(y)\\sum_{t_n}\\delta(t-t_n)\\\\ \\Longrightarrow \\frac{dw}{dt} &= A_+(w)x(t)\\sum_{t_n}\\delta(t-t_n) - A_-(w)y(t)\\sum_{t_f}\\delta(t-t_f) \\end{aligned} $$ In [11]: from OIST.tutorial1 import STDPsimulation In [12]: time , Results , Info = STDPsimulation ( pre = 10 , post = 30 ) In [13]: fig = plt . figure ( figsize = ( 14 , 6 )) for i , vals in enumerate ( Results ): ax = fig . add_subplot ( 3 , 2 , i + 1 ) ax . plot ( time , vals , color = Info . get ( \"color\" )[ i ]) ax . set_xlabel ( \"time\" ), ax . set_ylabel ( Info . get ( \"label\" )[ i ]), ax . set_title ( Info . get ( \"label\" )[ i ]) plt . tight_layout () plt . show () ※ As \"Pre - Post\" changes... In [14]: pre = 40 for diff in range ( - 40 , 40 ): _ , Results , _ = STDPsimulation ( pre = pre , post = pre - diff ) dws = Results [ - 1 ] dw = dws [ np . argmax ( np . abs ( dws ))] plt . scatter ( diff , dw , color = \"black\" , s = 10 ) plt . grid (), plt . xlabel ( \"$t_ {pre} - t_ {post} $\" , fontsize = 20 ), plt . ylabel ( \"$\\Delta w$\" , fontsize = 20 ) plt . show () Then, with an appropriate firing sequence, the network can be trained!! Take-Home Message Some neuronal behaviors can be mathematically modeled. Networks of neurons has the potential to do different computations. Those networks can be trained. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-1.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-1.html"},{"title":"生物物理学 第7回(小テスト)","text":"9EFwXAbUJU4o0uggkezaZA==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-7-quiz.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-7-quiz.html"},{"title":"Pro.4 Itemset mining algorithm","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-19.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-19.html"},{"title":"Pro.3 Gene Network Inference","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-18.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-18.html"},{"title":"Pro.2 最適行動列アルゴリズム","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-17.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-17.html"},{"title":"Pro.1 配列モチーフ探索","text":"In [7]: import numpy as np Problem Setting Identify the common sequencial features(sequence motif) from large amount of sequences data containing tf-binding regions. DeepBind Link: Paper Software tool \"Deep Learning\" techniques to ascertain the sequence specificities of DNA- and RNA-binding proteins from experimental data . outperforms other state-of-the-art methods. (Published: 27 July 2015) Results are readily visualized as a weighted ensemble of position weight matrices(PWMs) a mutation map that indicates how variations affect binding within a specific sequence. computes a binding score $f(s)$ using four stages: $$f(s) = \\text{Neural Network}_W\\left(\\text{pool}\\left(\\text{rect}_b\\left(\\text{conv}_M(s)\\right)\\right)\\right)$$ Convolution : Scan a set of motif detectors (length=$L$) with parameters $M&#94;{(j)}$ $$\\text{conv}_M(s)_{ij} = \\sum_{k=0}&#94;{K-1}\\sum_{l=0}&#94;{L-1}M&#94;{(j)}_{k,i+l}s_{ki}$$ Rectification : Extract some positions $$\\text{rect}_b(x_{ij}) =\\begin{cases} x_{ij} + b & (\\text{if }x_{ij} + b>0)\\\\0 & (\\text{otherwise})\\end{cases}$$ Pooling : Compute the maximum and average of each $\\text{rect}_b\\left(\\cdot\\right)$ across the sequence. Maximizing : identify the presence of longer motifs . Averaging : identify cumulative effects of short motifs $$\\text{pool}_{\\alpha}(x_{ij}) = \\alpha\\max_i\\left(x_{ij}\\right) + \\left(1-\\alpha\\right)\\underset{i}{\\text{ave}}\\left(x_{ij}\\right)$$ Neural Network : Combines the responses to produce a score. a: Five independent sequences being processed in parallel by single DeepBind model. b: The calibration, training and testing procedure. Implementation In [11]: # from kerasy.Bio.deepbind import DeepBind In [ ]: In [1]: nuc = [ \"A\" , \"C\" , \"G\" , \"T\" ] def nuc_to_code ( nuc ): return { 'A' : [ 1 , 0 , 0 , 0 ], 'C' : [ 0 , 1 , 0 , 0 ], 'G' : [ 0 , 0 , 1 , 0 ], 'T' : [ 0 , 0 , 0 , 1 ], } . get ( nuc , [ 0 , 0 , 0 , 0 ]) def generate_dataset ( n_p , n_n , length , motif , nuc ): m = len ( motif ) y = ([ 1 ] * n_p + [ 0 ] * n_n ) x = [ None ] * ( n_p + n_n ) for i in range ( n_p + n_n ): seq = np . random . choice ( nuc , size = length ) # random seq if i < n_p : # embed motif at random position j = np . random . randint ( length - m + 1 ) for k in range ( m ): seq [ j + k ] = np . random . choice ( nuc , p = motif [ k ]) x [ i ] = '' . join ( seq ) return ( x , y ) motif = [[ 0.0 , 1.0 , 0.0 , 0.0 ], # C [ 0.5 , 0.0 , 0.0 , 0.5 ], # A/T [ 0.0 , 0.5 , 0.5 , 0.0 ], # C/G [ 0.0 , 0.0 , 1.0 , 0.0 ], # G [ 0.0 , 0.0 , 0.0 , 1.0 ]] # T seq_len = 20 np_train = 1000 nn_train = 1000 np_test = 100 nn_test = 100 In [2]: x_train , y_train = generate_dataset ( np_train , nn_train , seq_len , motif , nuc ) x_test , y_test = generate_dataset ( np_test , nn_test , seq_len , motif , nuc ) In [ ]: - [ Enhanced ]( https : // arxiv . org / pdf / 1611.05777 . pdf ) In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-16.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-16.html"},{"title":"Ex.15 Neural Network","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-15.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-15.html"},{"title":"Ex.14 Brownian motion","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-14.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-14.html"},{"title":"Ex.13 Sparse Modeling","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-13.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-13.html"},{"title":"Ex.12 Order Statistics","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-12.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-12.html"},{"title":"Ex.11 Data Assimilation","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-11.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-11.html"},{"title":"Ex.10 Expectation Maximization Algorithm","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-10.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-10.html"},{"title":"Ex.9 Kullback-Leibler Divergence","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-9.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-9.html"},{"title":"Ex.8 Multivariate Normal Distribution","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-8.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-8.html"},{"title":"Ex.7 Positive Definite Symmetric Matrix","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-7.html"},{"title":"Ex.6 Multinomial Distribution","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-6.html"},{"title":"Ex.5 Categorical Distribution","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-5.html"},{"title":"Ex4. Exponential Distribution","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-4.html"},{"title":"EX3. Law of Large Numbers","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-3.html"},{"title":"EX2. Characteristic function","text":"解答 1 $$\\varphi_{X}(0) = \\mathbb{E}\\left(e&#94;{i\\cdot0\\cdot X}\\right) = \\mathbb{E}(1) = 1$$ 2 $$ \\begin{aligned} \\frac{d&#94;m\\varphi_{X}}{dt&#94;m} &= \\underset{\\text{m個}}{0+\\cdots+0} + \\frac{m!\\cdot i&#94;m}{m!}\\mathbb{E}\\left(X&#94;m\\right) \\\\&+\\frac{\\left\\{(m+1)\\cdot m\\cdots 3\\cdot2\\right\\} i&#94;m\\cdot(it)}{(m+1)!}\\mathbb{E}\\left(X&#94;{m+1}\\right) + \\frac{\\left\\{(m+2)\\cdot (m+1)\\cdots 4\\cdot3\\right\\}i&#94;m\\cdot(it)&#94;2}{(m+2)!}\\mathbb{E}\\left(X&#94;{m+2}\\right)+\\cdots\\\\ &= \\frac{m!\\cdot i&#94;m}{m!}\\mathbb{E}\\left(X&#94;m\\right) + \\sum_{n}&#94;{\\infty}\\frac{i&#94;m(it)&#94;n}{n!}\\mathbb{E}\\left(m+n\\right)\\\\ \\therefore\\left.\\frac{d&#94;{m} \\varphi_{x}}{d t&#94;{m}}\\right|_{t=0} &= i&#94;m \\mathbb{E}\\left(X&#94;m\\right) + 0\\qquad \\\\ \\therefore \\frac{1}{i&#94;m}\\left.\\frac{d&#94;{m} \\varphi_{x}}{d t&#94;{m}}\\right|_{t=0} &=\\mathbb{E}\\left(X&#94;m\\right)\\\\ \\end{aligned} $$ 3 $$\\begin{aligned} \\varphi_X(t) &= \\sum_{n=0}&#94;{\\infty}\\frac{\\lambda&#94;k}{k!}e&#94;{-\\lambda}e&#94;{itk}\\\\ &=\\sum_{n=0}&#94;{\\infty}\\frac{\\left(\\lambda e&#94;{it}\\right)&#94;k}{k!}e&#94;{-\\lambda}\\\\ &= e&#94;{\\lambda e&#94;{it}}e&#94;{-\\lambda}\\\\ &= e&#94;{\\lambda\\left(e&#94;{it}-1\\right)} \\end{aligned}$$ 4 オイラーの公式より、 $$e&#94;{it} = \\cos t+i\\sin t$$ が成り立つので、 $$ \\begin{aligned} e&#94;{it\\left(aX+bY\\right)} =& e&#94;{itaX}e&#94;{itbY}\\\\ =& \\left(\\cos \\left(taX\\right) + i\\sin\\left(taX\\right)\\right)\\left(\\cos \\left(tbY\\right) + i\\sin\\left(tbY\\right)\\right)\\\\ =& \\left(\\cos\\left(taX\\right)\\cos\\left(tbY\\right) - \\sin\\left(taX\\right)\\sin\\left(tbY\\right)\\right) \\\\ &+ i\\left(\\cos \\left(taX\\right)\\sin\\left(tbY\\right) + \\sin\\left(taX\\right)\\cos \\left(tbY\\right)\\right) \\end{aligned} $$ と分解できる。したがって、 \\(X,Y\\) が独立なので、 $$ \\begin{aligned} \\varphi_{aX+bY}(t) =&\\mathbb{E}\\left(e&#94;{it\\left(aX+bY\\right)}\\right)\\\\ =& \\mathbb{E}\\left(\\cos\\left(taX\\right)\\right)\\mathbb{E}\\left(\\cos\\left(tbY\\right)\\right) - \\mathbb{E}\\left(\\sin\\left(taX\\right)\\right)\\mathbb{E}\\left(\\sin\\left(tbY\\right)\\right) \\\\ &+ i\\left(\\mathbb{E}\\left(\\cos \\left(taX\\right)\\right)\\mathbb{E}\\left(\\sin\\left(tbY\\right)\\right) + \\mathbb{E}\\left(\\sin\\left(taX\\right)\\right)\\mathbb{E}\\left(\\cos \\left(tbY\\right)\\right)\\right)\\\\ =& \\left(\\mathbb{E}\\left(\\cos taX\\right) + i\\mathbb{E}\\left(\\sin taX\\right)\\right)\\cdot\\left(\\mathbb{E}\\left(\\cos tbY\\right) + i\\mathbb{E}\\left(\\sin tbY\\right)\\right)\\\\ =&\\mathbb{E}\\left(e&#94;{itaX}\\right)\\cdot\\mathbb{E}\\left(e&#94;{itbY}\\right)\\\\ =&\\varphi_{X}(at)\\varphi_{Y}(bt) \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-2.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-2.html"},{"title":"EX1. Covariance","text":"解答 1 $$ \\begin{aligned} \\mathbb{E}\\left(\\left(X-\\mu_X\\right)\\left(Y-\\mu_Y\\right)\\right) &= \\mathbb{E}\\left(XY - \\mu_YX-\\mu_XY + \\mu_X\\mu_Y\\right)\\\\ &= \\mathbb{E}\\left(XY\\right) - \\mu_Y\\mathbb{E}(X) - \\mu_X\\mathbb{E}(Y) + \\mu_X\\mu_Y\\\\ &= \\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\quad (\\because\\mu_X=\\mathbb{E}(X),\\mu_Y=\\mathbb{E}(Y)) \\end{aligned} $$ 2 連続型確率変数の場合で証明する。（離散型は \\(\\int\\rightarrow\\sum\\) ） $$ \\begin{aligned} \\mathbb{E}(XY) &= \\int_{x}\\int_{y} xy\\mathbb{P}(X=x,Y=y)dxdy\\\\ &= \\int_{x}\\int_{y} xy\\mathbb{P}(X=x)\\mathbb{P}(Y=y)dxdy\\quad(\\because X,Y: \\text{independent})\\\\ &= \\int_{x} x\\mathbb{P}(X=x)dx\\int_{y}y\\mathbb{P}(Y=y)dy\\\\ &= \\mathbb{E}(X)\\mathbb{E}(Y) \\end{aligned} $$ となるので、 \\((1)\\) より、 $$ \\begin{aligned} \\mathrm{Cov}(X,Y) &= \\mathbb{E}\\left(\\left(X-\\mu_X\\right)\\left(Y-\\mu_Y\\right)\\right)\\\\ &=\\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\\\ &=0 \\end{aligned} $$ 3 $$ \\begin{aligned} \\mathrm{Var}(X+Y) &= \\mathbb{E}\\left((X+Y)&#94;2\\right) - \\left(\\mathbb{E}\\left(X+Y\\right)\\right)&#94;2\\\\ &= \\mathbb{E}\\left(X&#94;2 + 2XY + Y&#94;2\\right) - \\left(\\mathbb{E}(X) + \\mathbb{E}(Y)\\right)&#94;2 \\\\ &= \\left(\\mathbb{E}(X&#94;2) - \\mathbb{E}(X)&#94;2\\right) + \\left(\\mathbb{E}(Y&#94;2) - \\mathbb{E}(Y)&#94;2\\right) + 2\\left(\\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\right)\\\\ &= \\mathrm{Var}(X) + \\mathrm{Var}(Y) + 2\\mathrm{Cov}(X,Y) \\end{aligned} $$ 4 $$ \\begin{aligned} \\mathrm{Cov}\\left(aX+bY,cZ+dW\\right) &= \\mathbb{E}\\left(\\left(aX+bY\\right)\\left(cZ+dW\\right)\\right) - \\mathbb{E}\\left(aX+bY\\right)\\mathbb{E}\\left(cZ+dW\\right)\\\\ &= \\left(\\mathbb{E}\\left(aXcZ\\right) + \\cdots + \\mathbb{E}\\left(bYdW\\right)\\right) - \\left(\\mathbb{E}(aX)\\mathbb{E}(cZ) + \\cdots + \\mathbb{E}(bY)\\mathbb{E}(dW) \\right)\\\\ &= \\left\\{\\mathbb{E}\\left(aXcZ\\right) - \\mathbb{E}(aX)\\mathbb{E}(cZ) \\right\\} + \\cdots + \\left\\{\\mathbb{E}\\left(bYdW\\right) - \\mathbb{E}(bY)\\mathbb{E}(dW) \\right\\}\\\\ &= ac\\left\\{\\mathbb{E}\\left(XZ\\right) - \\mathbb{E}(X)\\mathbb{E}(Z)\\right\\} + \\cdots + bd\\left\\{\\mathbb{E}\\left(YW\\right) - \\mathbb{E}(Y)\\mathbb{E}(W)\\right\\}\\\\ &= ac\\mathrm{Cov}(X,Z) + ad\\mathrm{Cov}(X,W) + bc\\mathrm{Cov}(Y,Z) + bd\\mathrm{Cov}(Y,W) \\end{aligned} $$ 5 $$ \\begin{aligned} \\mathrm{Cov}\\left(X,Y\\right)&#94;2 &= \\left(\\sum_{x,y}(x-\\mu_X)(y-\\mu_Y)\\mathbb{P}(X=x,Y=y)\\right)&#94;2\\\\ &= \\left(\\sum_{z,w}zw\\mathbb{P}(X=x,Y=y)\\right)&#94;2\\\\ &= \\left(\\sum_{z,w}zwP_{zw}\\right)\\left(\\sum_{z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime}w&#94;{\\prime}P_{z&#94;{\\prime}w&#94;{\\prime}}\\right)\\\\ &=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}zwz&#94;{\\prime}w&#94;{\\prime}P_{zw}P_{z&#94;{\\prime}w&#94;{\\prime}}\\quad\\left(\\because\\text{expansion}\\right)\\\\ \\mathrm{Var}(X)\\mathrm{Var}(Y) &= \\left(\\sum_{x}\\left(x-\\mu_X\\right)&#94;2\\mathbb{P}(X=x)\\right)\\left(\\sum_{y}\\left(y-\\mu_Y\\right)&#94;2\\mathbb{P}(Y=y)\\right)\\\\ &= \\left(\\sum_{x,y}\\left(x-\\mu_X\\right)&#94;2\\mathbb{P}(X=x,Y=y)\\right)\\left(\\sum_{x,y}\\left(y-\\mu_Y\\right)&#94;2\\mathbb{P}(X=x,Y=y)\\right)\\\\ &= \\left(\\sum_{z,w}z&#94;2P_{x,y}\\right)\\left(\\sum_{z,w}w&#94;2P_{x,y}\\right)\\\\ &=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\left(=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\right)\\\\ &=\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}+\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}} \\end{aligned} $$ と変形できるので、 $$ \\begin{aligned} \\mathrm{Var}(X)\\mathrm{Var}(Y) - \\mathrm{Cov}\\left(X,Y\\right)&#94;2 &= \\left(\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}+\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\right) - \\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}zwz&#94;{\\prime}w&#94;{\\prime}P_{zw}P_{z&#94;{\\prime}w&#94;{\\prime}}\\\\ &= \\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}\\left(z&#94;2w&#94;{\\prime2} + z&#94;{\\prime2}w&#94;2 - 2zwz&#94;{\\prime}w&#94;{\\prime}\\right)P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\\\ &=\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}\\left(zw&#94;{\\prime} - z&#94;{\\prime}w\\right)&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\\\ &\\geq0\\\\ \\therefore\\mathrm{Var}(X)\\mathrm{Var}(Y) &\\geq \\mathrm{Cov}\\left(X,Y\\right)&#94;2 \\end{aligned} $$ memo 任意の \\(n,m\\) に対して以下が成り立つ時、等号条件が成立（？） $$\\mathbb{P}\\left(X=x_n,Y=y_m\\right) = \\mathbb{P}\\left(X=x_n\\right)\\delta_{nm}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-1.html"},{"title":"Neural Networks","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開)","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-5.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-5.html"},{"title":"レポート課題5(10/31出題)","text":"6P3EZXbPHsH8F0HlKfGF9g==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report5.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report5.html"},{"title":"確率と統計(1)基礎概念","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 In [1]: import numpy as np import matplotlib.pyplot as plt 講義概要 確率変数と確率分布 確率分布の性質を表す指標 同時確率 条件付き確率 確率変数と確率分布 用語 意味 確率(probability) 事象の起こりやすさを定量的に示す $0$ から $1$ の値 確率変数(random variable) その変数に関する任意の事象に対して確率が定義されている変数 確率分布(probability distribution) 確率変数に関する各事象に対してその確率を与える関数 離散型(discrete type)確率変数 ある可算集合 $\\mathcal{X}$ の中のいずれかの値をとる確率変数 確率質量関数(probability mass function) $f(x)$ $$f(x)\\geq0,\\quad \\sum_{x\\in\\mathcal{X}}f(x) = 1$$ 連続型(continuous type)確率変数 連続値をとる確率変数 確率密度関数(probability density function) $f(x)$ $$f(x)\\geq0,\\quad\\int_{-\\infty}&#94;{\\infty}f(x)dx=1$$ 累積分布関数(cumulative distribution function) $F(x)$ $$F(x) = P(X\\leq x)=\\int_{-\\infty}&#94;{x}f(u)du\\ \\text{ or } \\sum_{i:i\\leq x}f(i)$$ 確率分布の性質を表す指標 用語 数式 説明 期待値(expectation) $$E(X) = \\sum_xxf(x)\\ \\text{ or }\\int xf(x)dx$$ 確率変数の値の平均（正確には確率による重み付きの平均） 確率変数を代表する値を表す指標 ※ 外れ値(outlier)に敏感 中央値(median) $P(X\\leq x)=1/2$ を満たす $x$ データを大きい順（または小さい順）に並べたときの真ん中の値。 最頻値(mode) $f(x)$ を最大にする $x$ データの中で最も頻度が高い値 分散(variance) $$\\begin{aligned}V(X) &= E\\left\\{(X-E[X])&#94;2\\right\\}\\\\&=E\\left\\{X&#94;2-2E[X]X+(E[X])&#94;2\\right\\}\\\\&=E[X&#94;2]-E\\left[2E[X]X\\right]+(E[X])&#94;2\\\\&=E[X&#94;2]-2E[X]E[X]+(E[X])&#94;2\\\\&=E[X&#94;2]-(E[X])&#94;2\\end{aligned}$$ 確率変数の散らばり具合を表す指標 標準偏差(standard devariation) $\\sqrt{V(X)}$ 分散の平方根 標準化(standardization) $$Z=\\frac{X-E(X)}{\\sqrt{V(X)}}$$ 任意の確率変数 $X$ に対して、期待値 $0$、分散 $1$ の確率変数 $Z$ が定義できる。 歪度(skewness) $$\\alpha_3 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;3\\right\\}}{\\left\\{V(X)\\right\\}&#94;{3/2}}$$ 確率変数の非対称性を表す。 劣度(kurtosis) $$\\beta_4 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;4\\right\\}}{\\left\\{V(X)\\right\\}&#94;{2}}-3$$ 確率分布の尖り具合を表す。 積率(moment) $$\\mu_r = E\\left[X&#94;r\\right]$$ 期待値・分散・歪度・劣度などを表すパラメータ。全ての次数の積率を指定すれば、確率分布を一位に決定することができる。（左は $r$ 次の積率） 積率母関数(moment generating function) $$M_X(t) = E[e&#94;{tX}]=\\begin{cases}\\sum_xe&#94;{tx}f(x)\\\\\\int e&#94;{tx}f(x)dx\\end{cases}\\\\ M_X&#94;{(r)}(0)=\\mu_r$$ 全ての次数の積率を生成する関数。存在しない（無限大に発散する）こともある。 In [2]: def computation_variance ( n = 10000 , mu = 0 , sigma = 1 , seed = None ): X = np . random . RandomState ( seed ) . normal ( loc = mu , scale = sigma , size = n ) EX = sum ( X ) / n EX2 = sum ( X ** 2 ) / n # Calculate variance in 3 ways. var1 = np . var ( X ) var2 = sum (( X - EX ) ** 2 ) / n var3 = EX2 - EX ** 2 print ( \"`np.var(X)` =\" , var1 ) print ( \"E{(X - E[X])&#94;2} =\" , var2 ) print ( \"E[X&#94;2] - (E[X])&#94;2 =\" , var3 ) In [3]: computation_variance ( mu = 100 , seed = 0 ) `np.var(X)` = 0.9752679753477969 E{(X - E[X])&#94;2} = 0.9752679753477979 E[X&#94;2] - (E[X])&#94;2 = 0.9752679752218683 In [4]: computation_variance ( mu = 1e8 , seed = 1 ) `np.var(X)` = 0.9975731614280597 E{(X - E[X])&#94;2} = 0.9975731614281662 E[X&#94;2] - (E[X])&#94;2 = -98.0 ※ 「二乗の平均 - 平均の二乗」は丸め誤差の影響を受けやすい 歪度(skewness) 確率変数の非対称性を表す。 $$\\alpha_3 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;3\\right\\}}{\\left\\{V(X)\\right\\}&#94;{3/2}}$$ In [5]: def plot_skewness ( ax = None , seed = None , n = 100 ): if ax == None : fig , ax = plt . subplots () X = np . random . RandomState ( seed ) . randint ( low = 1 , high = 7 , size = n ) ax . hist ( X , density = True , bins = 6 , color = \"blue\" , align = 'left' ) EX = np . mean ( X ) VX = np . var ( X ) skewness = np . mean (( X - EX ) ** 3 ) / VX ** ( 3 / 2 ) ax . set_title ( f \"skewness = {skewness:.3f} \" ) return ax In [6]: fig = plt . figure ( figsize = ( 12 , 3 )) for i , seed in enumerate ([ 44756 , 96331 , 76432 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plot_skewness ( ax = ax , seed = seed ) plt . show () 劣度(kurtosis) 確率分布の尖り具合を表す。 $$\\beta_4 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;4\\right\\}}{\\left\\{V(X)\\right\\}&#94;{2}}-3$$ In [7]: X = np . linspace ( - 5 , 5 , 10000 ) In [8]: f1 = lambda x : 1 / 1250 * ( 5 - abs ( x )) ** 4 f2 = lambda x , mu = 0 , sigma = 1 : 1 / np . sqrt ( 2 * np . pi * sigma ** 2 ) * np . exp ( - ( x - mu ) ** 2 / 2 * sigma ** 2 ) f3 = lambda x : 1 / 4 if abs ( x ) <= 2 else 0 In [9]: def plot_kurtosis ( X , func , ax = None ): if ax == None : fig , ax = plt . subplots () Y = np . array ([ func ( x ) for x in X ]) ax . plot ( X , Y , color = \"red\" ) Y /= sum ( Y ) EX = np . sum ( Y * X ) VX = np . sum ( Y * ( X - EX ) ** 2 ) kurtosis = np . sum ( Y * ( X - EX ) ** 4 ) / VX ** 2 - 3 ax . set_title ( f \"kurtosis = {kurtosis:.3f} \" ) return ax In [10]: fig = plt . figure ( figsize = ( 12 , 3 )) for i , func in enumerate ([ f1 , f2 , f3 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plot_kurtosis ( X = X , func = func , ax = ax ) ax . set_xlim ( - 5 , 5 ); ax . set_ylim ( 0 , 1 ) plt . show () 同時確率 用語 数式 説明 同時確率(joint probability) 複数の確率変数が関わる確率 同時確率質量関数 $$P(X=x,Y=y) = f(x,y)\\\\f(x,y)\\geq0,\\quad\\sum_{x\\in\\mathcal{X}}\\sum_{y\\in\\mathcal{Y}}f(x,y)=1$$ 離散型の同時確率 同時確率密度関数 $$P(a\\leq X\\leq b,c\\leq Y\\leq d) = \\int_c&#94;d\\int_a&#94;bf(x,y)dxdy\\\\f(x,y)\\geq0,\\quad\\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x,y)dxdy=1$$ 連続型の同時確率 共分散 $X$ と $X&#94;{\\prime}$ の 共分散(covariance) ： $$\\mathrm{Cov}(X,X&#94;{\\prime}) = E\\left[(X-E[X])(X&#94;{\\prime}-E[X&#94;{\\prime}])\\right]$$ $\\mathrm{Cov}(X,X&#94;{\\prime})>0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 同傾向 $\\mathrm{Cov}(X,X&#94;{\\prime})<0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 逆傾向 $\\mathrm{Cov}(X,X&#94;{\\prime})=0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 無関係 共分散は、以下の形でも表されるので、A社の株価を $X$、B社の株価を $X&#94;{\\prime}$ とすると、以下の解釈も可能 $$V(X+X&#94;{\\prime}) = V(X) + V(X&#94;{\\prime}) + 2\\mathrm{Cov}(X,X&#94;{\\prime})$$ $\\mathrm{Cov}(X,X&#94;{\\prime})>0\\Longleftrightarrow V(X+X&#94;{\\prime})>V(X)+V(X&#94;{\\prime})$ なので、A,B両者の株を買うと分散が 拡大 する → 変動リスクが増大し、資産価値は不安定 $0>\\mathrm{Cov}(X,X&#94;{\\prime})\\Longleftrightarrow V(X)+V(X&#94;{\\prime})>V(X+X&#94;{\\prime})$ なので、A,B両者の株を買うと分散が 縮小 する → 変動リスクが抑制され、資産価値は安定 独立性 全ての $(x,y)$ で $p_{X,Y}(x,y) = p_X(x)p_Y(y)$ の時、$X$ と $Y$ は互いに 独立(independent) 2つの確率変数が独立の時、 積の期待値は各々の期待値の積と一致 $$E[XY] = E[X]E[Y]$$ 和の積率母関数は各々の積率母関数の積と一致 $$M_{X+Y}(t) = M_X(t)M_Y(t)$$ ２つの確率変数は無相関 $$\\mathrm{Cov}(X,Y) = 0$$ 2つの確率変数が独立ならば無相関であるが、逆は一般には正しくない。 条件付き確率 ベイズの定理(Bayes' theorem) $$P(X|Y) = \\frac{P(Y|X)P(X)}{P(Y)}$$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-5.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-5.html"},{"title":"生物物理学 第6回","text":"講師： 樋口秀男 エネルギー生産系の仕組み（細胞内小器官） 光関連の現象 細胞・器官 たんぱく質等 眼で見る 視細胞（桿体、錐体細胞） ロドプシン等 光合成 葉緑体 光システム（タンパク質複合体） 蛍の光 発色細胞 ルシフェリン+ルシフェラーゼ クラゲの光 発色細胞 エコーリン、GFP(green fluorescence protein) 日焼け 色素形成細胞（メラノサイト） メラニン（チロシンの重合体） 体内時計 目のメラノプシン発現網膜神経細胞 メラノプシン ATPを作るプロセス 光合成(photosynthesis) は、高等植物や緑藻（青色細菌）が 葉緑体（クロロプラスト） 内で行う、二酸化炭素の固定反応である。 この過程で水が酸素に酸化され、二酸化炭素は還元されて糖になる。 光合成は大きく2つの段階に区別される。 1つは 明反応 と呼ばれ、光のエネルギーを利用して水が酸素に酸化されるとともに、二酸化炭素の還元に必要な \\(\\mathrm{NADPH}_2&#94;+\\) と \\(\\mathrm{ATP}\\) をつくりだす。 もう1つの段階は 暗反応 と呼ばれ、 \\(\\mathrm{NADPH}_2&#94;+\\) と \\(\\mathrm{ATP}\\) を利用して二酸化炭素から種々の糖がつくられる。 クロロプラスト中の大部分のクロロフィルは 光を集めるアンテナ の役割を果たす。吸収された光子のエネルギーはアンテナクロロフィル間を励起エネルギーとして移動し、 アンテナクロロフィル よりも励起エネルギーの 低い 反応中心クロロフィル に集められる。 FRET(Fluorescence resonance energy transfer) $$\\text{Transfer Efficiency at two rates: } E= \\frac{k_T}{k_T+k_F} = \\frac{1}{1 + \\frac{k_F}{k_T}}$$ \\(k_T\\) ：Donor から Acceptor に移動する速度 \\(k_F\\) ：Donor が吸収する速度 Chl(from) Chl(to) 移動効率（移動距離） b(F) a(A) 高 b(F) b(A) 中 a(F) a(A) 中 a(F) b(A) 低 幅 \\(L\\) の中の電子のエネルギー準位： \\(E_n = \\frac{1}{8m}\\left(\\frac{nh}{L&#94;{\\prime}}\\right)&#94;2\\) フェミルの黄金律 時間的に変化しない弱い相互作用（摂動）のある電子系が、あるエネルギー固有状態から別のエネルギー固有状態へ移る際の単位時間あたりの遷移確率は、摂動法（時間で展開）の最低次数として近似計算できる。 遷移速度 \\(k_T\\) は、エネルギー固有状態の単位時間あたりの遷移確率である。 $$\\Psi_{\\mathrm{Da}}\\Psi_{\\mathrm{Ab}}\\underset{k_T}{\\longrightarrow}\\Psi_{\\mathrm{Db}}\\Psi_{\\mathrm{Aa}}$$ Da: Active state of Donor Ab: Ground state of Acceptor 光合成の概要 水を分解して、電子を膜間に入れる。 光を用いて電子の酸化還元電位を上げる。 酸化還元電位を利用してチラコイド外のプロトンを内側に輸送する。 内側のプロトンのケミカルポテンシャルを利用してATPを合成する。 まとめ 共役長が長くなる と吸収波長は長くなり、可視光の利用が可能となる。 分子間距離が近いと エネルギー移動や電子移動 が起こる。電子移動の方向は、酸化還元電位に依存する。 エネルギーを 酸化還元電位 に交換する（逆も） 生物は、 多数のタンパク質が 上記1-3の原理を巧みに利用して、光化学反応（葉緑体内の光合成）や電子伝達（ミトコンドリア内）の機能を行う。 ATP を合成するF1,F0は高効率でATPを合成する。特に、F1は仕事効率が約100%である。 .prompt { /* This is for jupyter blog.*/ min-width: 0; /* This padding is tuned to match the padding on the CodeMirror editor. */ padding: 0em 0.4em 0em 0em; margin: 0px; font-family: monaco; } /*蛍光ペン(pink)*/ .marker-pink { color: #c45a5a; background: linear-gradient(transparent 70%, #ff66ff 60%); font-weight: bold; } /*蛍光ペン(blue) & hover info*/ .marker-info { color: #5C7DC4; background: linear-gradient(transparent 70%, #66FFCC 60%); font-weight: bold; position: relative; cursor: pointer; } .marker-info:hover:before { opacity: 1; z-index: 2; } .marker-info:before { content: attr(aria-label); opacity: 0; position: absolute; top: 30px; right: -90px; font-size: 14px; width: 300px; padding: 10px; color: #fff; background-color: #555; border-radius: 3px; pointer-events: none; } /* 枠囲み */ .frame { border: solid 1.0px #000000; padding: 0.5em 1em; margin: 2em 0; } /* 暗記用 question box */ span .qbox{ display: none; } span.qbox-wrapper:hover .qbox-default{ display: none; } span.qbox-wrapper:hover .qbox{ display: inline; } .qbox-wrapper{ font-weight: bold; padding: 5px 10px; border-radius: 5px; border: solid 2px #000000; margin: 5px } .qbox-wrapper:hover{ text-shadow: 0px 0px 6px rgba(255, 255, 255, 1); -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); transition: all 0.4s ease 0s; } /* 画像吹き出し */ .balloon { display: table; width: 100%; } .balloon_img { display: table-cell; vertical-align: middle; width: 50%; padding-right: 10px; } .balloon_comment { border: #83274e solid 4px; position: relative; background: #fff; padding: 12px; border-radius: 13px; display: block } .balloon_comment::before { content: \"\"; position: absolute; border-right: 23px solid #83274e; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -23px; } .balloon_comment::after { content: \"\"; position: absolute; border-right: 24px solid #fff; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -17px; } if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-6.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-6.html"},{"title":"Introduction","text":"講師： 木立 尚孝 （ 生物データマイニング論 も担当されている方） 計算演習 # リンク 問題 1 Covariance 2 Characteristic function 3 Law of Large Numbers 4 Exponential Distribution 5 Categorical Distribution 6 Multinomial Distribution 7 Positive Definite Symmetric Matrix 8 Multivariate Normal Distribution 9 Kullback-Leibler Divergence 10 Expectation Maximization Algorithm 11 Data Assimilation 12 Order Statistics 13 Sparse Modeling 14 Brownian motion 15 Neural Network プログラミング演習 配列モチーフ探索 最適行動列アルゴリズム Gene Network Inference Itemset mining algorithm","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-0.html"},{"title":"頻度パターンマイニング","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 参考資料： 頻出パターン発見アルゴリズム入門 -アイテム集合からグラフまで- Data Mining A formal study of efficient methods for extracting interesting rules and patterns from massive data. Frequent itemset mining. Closed pattern mining. Structured data mining. Itemset Mining Frequent Itemset Mining Closed Itemset Mining Closure Extension LCM Itemset Mining Frequent Itemset Mining Finding all \"frequent\" sets of elements(items) appearing $\\sigma$ times or more in a database. Definitions Database A set $\\Sigma = \\{1,\\ldots,n\\}$ of items(elements). Tramsaction database A set $T=\\{t_1,\\ldots,t_m\\}$ of subsets of $\\Sigma$ Each subset $t\\subseteq\\Sigma$ is called a transaction Frequent sets Itemset $X$ appears in transaction t: $X\\subseteq t$ Occurrence of $X$ in database $T$: $$\\mathrm{Occ}(X,T) = \\left\\{t\\in T: X\\subseteq t\\right\\}$$ Frequency of $X$: $\\mathrm{Fr}(X,T) = |\\mathrm{Occ}(X,T)|$ Minimum support (minsup): $0\\leq\\sigma\\leq|T|$ $X$ is frequent in $T$ if $\\mathrm{Fr}(X,T)\\geq\\sigma$ Market Basket Data Popular application of itemset mining. Business and Market data analysis. ※ Visit \"The Instacart Online Grocery Shopping Dataset 2017\" and Download \"instacart_2017_05_01\" Folder. In [1]: ! tree instacart_2017_05_01 instacart_2017_05_01 ├── aisles.csv ├── departments.csv ├── order_products__prior.csv ├── order_products__train.csv ├── orders.csv └── products.csv 0 directories, 6 files In [2]: import numpy as np import pandas as pd products.csv In [3]: df_products = pd . read_csv ( \"./instacart_2017_05_01/products.csv\" ) df_products . head ( 3 ) Out[3]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } product_id product_name aisle_id department_id 0 1 Chocolate Sandwich Cookies 61 19 1 2 All-Seasons Salt 104 13 2 3 Robust Golden Unsweetened Oolong Tea 94 7 In [4]: print ( f \"`products.csv` data num: {len(df_products)}\" ) `products.csv` data num: 49688 In [5]: id2name = dict ( zip ( df_products . product_id , df_products . product_name )) order_products__train.csv In [6]: df_order_products = pd . read_csv ( \"./instacart_2017_05_01/order_products__train.csv\" ) df_order_products . head ( 3 ) Out[6]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } order_id product_id add_to_cart_order reordered 0 1 49302 1 1 1 1 11109 2 1 2 1 10246 3 0 In [7]: N_transactions_total = len ( df_order_products . groupby ( \"order_id\" )) print ( f \"Total number of transactions: {N_transactions_total} \" ) Total number of transactions: 131209 Extract Only N products In [8]: N = 10 In [9]: extracted_ids = df_order_products . groupby ( \"product_id\" ) . size () . reset_index () . sort_values ( by = 0 , ascending = False ) . product_id [: N ] . values In [10]: # Only focus on N products. df_order_products_extracted = df_order_products [ df_order_products . product_id . apply ( lambda x : x in extracted_ids )] In [11]: N_transactions_extracted = len ( df_order_products_extracted . groupby ( \"order_id\" )) print ( f \"Transactions: {N_transactions_extracted} / {N_transactions_total} \" ) Transactions: 59887/131209 In [12]: for i , extracted_id in enumerate ( extracted_ids ): print ( f \"No.{i+1:>0{len(str(N))}}: {id2name[extracted_id]} \" ) No.01: Banana No.02: Bag of Organic Bananas No.03: Organic Strawberries No.04: Organic Baby Spinach No.05: Large Lemon No.06: Organic Avocado No.07: Organic Hass Avocado No.08: Strawberries No.09: Limes No.10: Organic Raspberries In [13]: df_product_id_OneHot = pd . get_dummies ( df_order_products_extracted . product_id ) In [14]: df_order_OneHot = pd . concat ([ df_order_products_extracted . order_id , df_product_id_OneHot ], axis = 1 ) In [15]: df = df_order_OneHot . groupby ( \"order_id\" ) . sum () . reset_index () In [16]: df . head ( 3 ) Out[16]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } order_id 13176 16797 21137 21903 24852 26209 27966 47209 47626 47766 0 1 1 0 0 0 0 0 0 1 0 0 1 96 0 0 0 0 0 0 1 0 0 0 2 98 1 0 0 0 0 0 1 0 0 0 In [17]: database = np . array ( df [ df . columns [ 1 :]]) In [18]: database Out[18]: array([[1, 0, 0, ..., 1, 0, 0], [0, 0, 0, ..., 0, 0, 0], [1, 0, 0, ..., 0, 0, 0], ..., [0, 0, 1, ..., 0, 0, 0], [0, 0, 0, ..., 0, 0, 0], [0, 0, 1, ..., 0, 0, 0]], dtype=uint8) In [19]: N , M = database . shape In [20]: print ( f \"n_samples: {N} \" ) print ( f \"n_features: {M} \" ) n_samples: 59887 n_features: 10 In [21]: from kerasy.search.itemset import FrequentSet In [22]: model = FrequentSet ( threshold = 100 ) In [23]: model . fit ( database ) In [24]: # Frequent Itemset. (frq >= threshold) model . all Out[24]: [None, array([0]), array([0, 1]), array([0, 1, 3]), array([0, 2]), array([0, 2, 3]), array([0, 2, 3, 6]), array([0, 2, 3, 7]), array([0, 2, 5]), array([0, 2, 6]), array([0, 2, 6, 7]), array([0, 2, 7]), array([0, 2, 8]), array([0, 2, 9]), array([0, 3]), array([0, 3, 5]), array([0, 3, 6]), array([0, 3, 6, 7]), array([0, 3, 7]), array([0, 3, 8]), array([0, 3, 9]), array([0, 5]), array([0, 5, 6]), array([0, 5, 7]), array([0, 5, 8]), array([0, 5, 9]), array([0, 6]), array([0, 6, 7]), array([0, 6, 8]), array([0, 6, 9]), array([0, 7]), array([0, 7, 8]), array([0, 8]), array([0, 8, 9]), array([0, 9]), array([1]), array([1, 3]), array([1, 3, 4]), array([1, 3, 9]), array([1, 4]), array([1, 4, 5]), array([1, 4, 8]), array([1, 4, 9]), array([1, 5]), array([1, 5, 8]), array([1, 6]), array([1, 7]), array([1, 8]), array([1, 8, 9]), array([1, 9]), array([2]), array([2, 3]), array([2, 3, 4]), array([2, 3, 5]), array([2, 3, 6]), array([2, 3, 7]), array([2, 3, 8]), array([2, 3, 9]), array([2, 4]), array([2, 4, 5]), array([2, 4, 6]), array([2, 4, 7]), array([2, 4, 8]), array([2, 4, 9]), array([2, 5]), array([2, 5, 6]), array([2, 5, 7]), array([2, 5, 8]), array([2, 5, 9]), array([2, 6]), array([2, 6, 7]), array([2, 6, 8]), array([2, 6, 9]), array([2, 7]), array([2, 7, 8]), array([2, 8]), array([2, 8, 9]), array([2, 9]), array([3]), array([3, 4]), array([3, 4, 5]), array([3, 4, 5, 8]), array([3, 4, 6]), array([3, 4, 7]), array([3, 4, 8]), array([3, 4, 8, 9]), array([3, 4, 9]), array([3, 5]), array([3, 5, 7]), array([3, 5, 8]), array([3, 5, 8, 9]), array([3, 5, 9]), array([3, 6]), array([3, 6, 7]), array([3, 6, 8]), array([3, 6, 9]), array([3, 7]), array([3, 7, 8]), array([3, 8]), array([3, 8, 9]), array([3, 9]), array([4]), array([4, 5]), array([4, 5, 7]), array([4, 5, 8]), array([4, 5, 8, 9]), array([4, 5, 9]), array([4, 6]), array([4, 6, 8]), array([4, 6, 9]), array([4, 7]), array([4, 7, 8]), array([4, 8]), array([4, 8, 9]), array([4, 9]), array([5]), array([5, 6]), array([5, 6, 7]), array([5, 6, 8]), array([5, 7]), array([5, 7, 8]), array([5, 8]), array([5, 8, 9]), array([5, 9]), array([6]), array([6, 7]), array([6, 8]), array([6, 8, 9]), array([6, 9]), array([7]), array([7, 8]), array([8]), array([8, 9]), array([9])] Association Rule Mining Confidence : $\\mathrm{Supp}(A\\text{ and }B)/\\mathrm{Supp}(A)$ (Probability of $B$, Given $A$) What item is likely to be bought when $A$ is bought. Search: large support, confidence large Post-processing of itemset mining Summary Itemset mining is the simplest of all mining algorithms. Need to maintain occurrence of each pattern in database. Tree by lexicographical order is (implicitly) used. Closed Itemset Mining [Problem] in Frequent Pattern Mining Huge Number of frequent itemsets Hard to analyze Most of them are similar [Solution] Closed Pattern Mining Find only closed patterns Observation : Most frequent itemset $X$ can be extended without changing occurrence by adding new elements. definition : An itemset $X$ is a \"closed set\" if and only if there is no proper superset of $X$ with the same frequency (thus the same occurrence set). A closed itemset is the maximal set among all itemsets with the same occurrences. Equivalence class $[X] =\\left\\{Y | \\mathrm{Occ}(X)=\\mathrm{Occ}(Y)\\right\\}$ Implementation. Brute-force: Stupid Baseline ALGORITHM: Bruteforcel First, generate all frequent itemsets. Check them one by one via maximality test Finally, extract all closed sets Maximality test for each candidate frequent set $X$ Add some element $e$ in $\\Sigma$ to $X$ If $\\mathrm{Freq}(X U \\{e\\})$ is properly less than $\\mathrm{Freq}(X)$ then reject $X$. ※ Number of patterns usually exponential to input size, so Brute-force is exponential delay w.r.t. pattern size. Reverse Search A general mathematical framework to design enumeration algorithms. Can be used to prove the correctness of the algorithm. Popular in computational geometry. Data mining algorithms can be explained in remarkable simplicity. How to do reverse Search? Native Backtracking → Duplication Duplication chack by Marking → Exponential Memory. Reduction Map : Mapping from a children to the parent. LCM(Linear Time Closed Sets Miner) Key Algorithm: Prefix Preserving Closure Extension = Children generation from the reduction map. 飽和集合列挙アルゴリズムを用いた大規模データベースからのルール発見手法 Python Implementation: I'm doing now XD Summary Closure Extension: Jump from closed set to closed set. LCM: Linear Delay. Very fast in practice, too (Winner of FIMI'04(Frequent Itemset Mining Implementation Workshop)). Relation to clique enumeration. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-5.html"},{"title":"機械学習概論","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 教師付き学習(Supervised learning) 大量の教師データがあれば、DNNですごい性能を出せるので、今の研究の主流は以下。 transfer learning (転移学習) few-shot learning (一枚だけで汎化性能を得る。) zero-shot learning (文字の情報を用いて画像の識別を行う。) メタ学習 (どうやって学習すれば良いかを学ぶ。) Nearest Neighbor法 決定木(decision tree) Support Vector Machine(SVM) アンサンブル学習 Neural Network Nearest Neighbor法 In [2]: N = 150 ; K = 3 In [3]: data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 1 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [4]: cls = np . concatenate ([ np . full ( shape = int ( N / 3 ), fill_value = 0 ), np . full ( shape = int ( N / 3 ), fill_value = 1 ), np . full ( shape = int ( N / 3 ), fill_value = 2 ), ]) In [5]: xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [6]: # Nearest Neighbor Zs = np . asarray ([ cls [ np . argmin ( np . sum ( np . square ( xy - data ), axis = 1 ))] for xy in XYs ], dtype = int ) . reshape ( Xs . shape ) In [7]: plt . figure ( figsize = ( 8 , 6 )) plt . scatter ( x , y , c = cls , s = 50 ) plt . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) plt . title ( \"Nearest Neighbor\" ), plt . xlim ( xmin , xmax ), plt . ylim ( ymin , ymax ) plt . xticks ([]), plt . yticks ([]) plt . show () 決定木(decision tree) $M$ 個のクラスに分割したとして、 $$\\text{Information gain} = \\text{Entropy}(S) - \\left\\{\\text{Entropy}(S_1) + \\cdots + \\text{Entropy}(S_M)\\right\\}$$ が最大になるように条件を設定する。 In [8]: from kerasy.ML.tree import DecisionTreeClassifier In [9]: N = 150 ; K = 3 In [10]: data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 1 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [11]: cls = np . concatenate ([ np . full ( shape = int ( N / 3 ), fill_value = 0 ), np . full ( shape = int ( N / 3 ), fill_value = 1 ), np . full ( shape = int ( N / 3 ), fill_value = 2 ), ]) In [12]: xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [13]: model = DecisionTreeClassifier ( criterion = \"gini\" , max_depth = 3 , random_state = 0 ) model . fit ( data , cls ) predictions = model . predict ( data ) In [14]: # Decision Tree Zs = model . predict ( XYs ) . reshape ( Xs . shape ) In [15]: fig = plt . figure ( figsize = ( 18 , 4 )) for i , seed in enumerate ([ 0 , 1 , 5 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) model = DecisionTreeClassifier ( criterion = \"gini\" , max_depth = 3 , random_state = seed ) model . fit ( data , cls ) predictions = model . predict ( data ) Zs = model . predict ( XYs ) . reshape ( Xs . shape ) ax . scatter ( x , y , c = predictions , s = 50 ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_title ( f \"Decision Tree seed= {seed} \" ), ax . set_xlim ( xmin , xmax ), ax . set_ylim ( ymin , ymax ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () Support Vector Machine(SVM) $$f(\\mathbf{x}) = \\mathbf{w}\\cdot\\mathbf{x} + \\mathbf{b} = \\mathbf{0}$$ $\\|\\mathbf{w}\\|$ を決定するためには、黄色の線上にある点(support vector)のみ寄与。SVMの重要なところは、通常 $$\\mathrm{Error}_{\\text{世の中全体}}>\\mathrm{Error}_{\\text{見たことのある世界}}$$ であるが、発明者 Vapnic が $$\\mathrm{Error}_{\\text{世の中全体}}\\leq\\mathrm{Error}_{\\text{見たことのある世界}} + \\alpha$$ を証明してしまった。なお、$\\alpha$ も $\\|\\mathbf{w}\\|$ の最小化で最小化できるため、$\\|\\mathbf{w}\\|$ の最小化をひたすら頑張るだけで良い。 ※ 実装は ここ アンサンブル学習 名前 説明 強学習器 bagging トレーニングデータをランダムにサンプリングして学習器 $f&#94;b(\\mathbf{x}),(b=1,2,\\ldots,B)$ を作る。 $$f(\\mathbf{x}) = \\frac{1}{B}\\sum_b&#94;Bf&#94;b(\\mathbf{x})$$ Random Forest (RF) 決定木 $f&#94;r(\\mathbf{x}),(r=1,2,\\ldots,R)$ をランダムに作る。木がたくさんあるので森(forest)になる。 $$f(\\mathbf{x}) = \\frac{1}{R}\\sum_r&#94;Rf&#94;r(\\mathbf{x})$$ boosting 弱学習器 $f&#94;t(\\mathbf{x})$ の精度に応じた重み付き多数決を行う。なお、$\\alpha$ の決め方はadaboostやXGboostなど様々ある。 $$f(\\mathbf{x}) = \\frac{1}{T}\\sum_t&#94;T\\alpha&#94;tf&#94;t(\\mathbf{x})$$ Neural Network パーセプトロン $\\mathbf{w}$ を法線と考えると、超平面のあっちとこっちを判定しているだけ＝SVMと同じ。 perceptronの学習アルゴリズムは、下記の流れで収束することが知られている。 重み（法線）ベクトルをランダムに設定 2クラス $0,1$ があったとして、training dataから順に取り出して、$y$ を出力してみる（平面のどちら側か） 合っていたら何もしない。間違っていたら $$ \\begin{cases} \\mathbf{w}\\longleftarrow\\mathbf{w} +\\rho \\mathbf{x} & (\\text{クラス1を0と誤判定した時})\\\\ \\mathbf{w}\\longleftarrow\\mathbf{w} -\\rho \\mathbf{x} & (\\text{クラス0を1と誤判定した時}) \\end{cases}$$ 2,3を全てのtraining dataに対して行う。 全てのtraining dataに対して正解が規定回数に達したら終了。それ以外の場合、2に戻る。 # Pythonでプログラム化すると以下。 while True : n_true = 0 for x , c in zip ( data , cls ): if c == 1 and sum ( w * x ) < 0 : w += rho * x elif c == 0 and sum ( w * x ) >= 0 : w -= rho * x else : n_true += 1 if n_true > N * true_rate : break In [16]: n_cls0 = 30 ; n_cls1 = 40 N = n_cls0 + n_cls1 In [17]: w = np . random . RandomState ( 0 ) . uniform ( size = 2 ) # Initialization. rho = 1e-3 # step size. true_rate = 0.9 In [18]: # train_x data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 2 , 4 ], cov = np . eye ( 2 ), size = n_cls0 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 1 ], cov = np . eye ( 2 ), size = n_cls1 ), ]) X1 , X2 = data . T # train_t cls = np . concatenate ([ np . zeros ( shape = ( n_cls0 ), dtype = int ), np . ones ( shape = ( n_cls1 ), dtype = int ) ]) In [19]: while True : n_true = 0 for x , c in zip ( data , cls ): if c == 1 and sum ( w * x ) < 0 : w += rho * x elif c == 0 and sum ( w * x ) >= 0 : w -= rho * x else : n_true += 1 if n_true > N * true_rate : break In [20]: X = np . linspace ( min ( X1 ), max ( X2 ), 1000 ) Y = ( - w [ 0 ] / w [ 1 ]) * X In [21]: plt . scatter ( X1 , X2 , c = cls ) plt . plot ( X , Y , color = \"red\" ) plt . xlabel ( \"$x_1$\" , fontsize = 18 ), plt . ylabel ( \"$x_2$\" , fontsize = 18 ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-4.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-4.html"},{"title":"生物統計論 第5回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section5.1 Bayesian Model Comparison Overfitting In [2]: N = 15 Ms = [ 2 , 4 , 8 , 16 ] seed = 0 In [3]: # Training data. x = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = N ) Noise = np . random . RandomState ( seed ) . normal ( loc = 0 , scale = 0.1 , size = N ) t = np . sin ( 2 * np . pi * x ) + Noise In [4]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Varying Component Number In [5]: from kerasy.ML.MixedDistribution import MixedGaussian from kerasy.utils.data_generator import generateMultivariateNormal In [6]: N = 200 cls = 6 seed = 123 In [7]: data , means = generateMultivariateNormal ( cls = cls , N = N , scale = 8e-3 , same = False , seed = seed ) x , y = data . T mux , muy = means . T In [8]: # Background Color xmin , ymin = np . min ( data , axis = 0 ); xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [9]: Nfig = cls col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col fig = plt . figure ( figsize = ( 6 * col , 4 * row )) Likelihoods = [] for i , K in enumerate ( range ( 1 , cls + 1 )): ax = fig . add_subplot ( row , col , i + 1 ) model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data , span = 20 ) Z = model . predict ( XYs ) idx = np . argmax ( model . predict ( data ), axis = 1 ) Zs = np . sum ( Z , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. likelihood = np . sum ( Z ) ax . scatter ( x , y , c = idx ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( xmin , xmax ) ax . set_ylim ( ymin , ymax ) ax . set_title ( f \"K= {K} , {np.sum(Z):.1f}\" ) Likelihoods . append ( likelihood ) plt . tight_layout () plt . show () In [10]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . scatter ( x , y , label = \"data\" ) axL . scatter ( mux , muy , label = \"mean\" , marker = \"*\" , color = \"red\" , s = 150 ) axL . set_title ( \"Training Data.\" ) axL . legend () axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( np . arange ( cls ) + 1 , Likelihoods ) axR . scatter ( np . arange ( cls ) + 1 , Likelihoods ) axR . set_xlabel ( \"num comp\" ) axR . set_ylabel ( \"likelihoods\" ) axR . set_title ( \"Log likelihood vs num comp\" , fontsize = 18 ) plt . tight_layout () plt . show () Cross Validation ※ Not Bayesian estimate the skill of a machine learning model on unseen data. use a limited sample in order to estimate how the model is expected to perform in general when used to make predictions on data not used during the training of the model. In [11]: n_fold = 5 size = N // n_fold Kmax = 30 In [12]: Likelihoods = [] CrossValidationLikelihoods = [] for i , K in enumerate ( range ( 1 , Kmax + 1 )): H = 0 for h in range ( n_fold ): mask = np . ones ( shape = N , dtype = bool ) mask [ h * size :( h + 1 ) * size ] = False model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data [ mask ], span = 20 ) Z = model . predict ( data [ np . logical_not ( mask )]) H += np . sum ( Z ) model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data , span = 20 ) Z = model . predict ( data ) Likelihoods . append ( np . sum ( Z )) CrossValidationLikelihoods . append ( H ) In [13]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . plot ( np . arange ( Kmax ) + 1 , CrossValidationLikelihoods ) axL . scatter ( np . arange ( Kmax ) + 1 , CrossValidationLikelihoods ) axL . set_xlabel ( \"num comp\" ), axL . set_ylabel ( \"Cross Validation likelihoods\" ), axL . set_title ( \"Cross Validation Log likelihood vs num comp\" , fontsize = 18 ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( np . arange ( Kmax ) + 1 , Likelihoods ) axR . scatter ( np . arange ( Kmax ) + 1 , Likelihoods ) axR . set_xlabel ( \"num comp\" ), axR . set_ylabel ( \"likelihoods\" ), axR . set_title ( \"Log likelihood vs num comp\" , fontsize = 18 ) plt . tight_layout () plt . show () Cross Entropy of Prediction ※ Not Bayesian empirical distribution $D = \\left\\{\\mathbf{x}&#94;{(h)}|h=1,\\ldots,n\\right\\}$ $x\\sim\\mathrm{Emp}(D)$ $f_X(\\mathbf{X}) = \\frac{1}{n}\\sum_{h=1}&#94;n\\delta\\left(\\mathbf{x}-\\mathbf{x}&#94;{(h)}\\right)$ $\\mathbb{E}\\left(g(\\mathbf{x})\\right) = \\frac{1}{n}\\sum_{h=1}&#94;n\\int d\\mathbf{x}g(\\mathbf{x})\\delta\\left(\\mathbf{x}-\\mathbf{x}&#94;{(h)}\\right) = \\frac{1}{n}\\sum_{h=1}&#94;ng\\left(\\mathbf{x}&#94;{(h)}\\right)$ In [14]: seed = 0 N = 1000 In [15]: data = np . random . RandomState ( seed ) . normal ( size = N ) In [16]: Emp = dict ( zip ( data , np . zeros ( N ))) for x in data : Emp [ x ] += 1 / N In [17]: for X , Y in sorted ( Emp . items ()): plt . plot (( X , X ),( 0 , Y ), color = \"black\" , alpha = 0.1 ) plt . title ( \"Empirical distribution (Normal)\" ) plt . xlabel ( \"x\" ) plt . show () We can assume Empirical distribution as a true distribution . Cross Entropy $$ \\begin{aligned} H(D,\\boldsymbol{\\theta}) &= \\text{Cross Entropy between }f_{\\text{Emp}(D)} \\text{ and }f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)\\\\ &= \\mathbb{E}_{\\text{Emp}(D)}\\left(-\\log f\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right)\\right)\\\\ &= -\\int f_{\\text{Emp}(D)}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &= -\\frac{1}{n}\\sum_{h=1}&#94;n\\log f\\left(\\mathbf{x}&#94;{(h)}|\\boldsymbol{\\theta}\\right)\\\\ &= -\\bar{l}&#94;{(n)}\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right) \\end{aligned} $$ We can also say that: $$ \\begin{aligned} H(D,\\boldsymbol{\\theta}) &= -\\int f_{\\text{Emp}}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &\\Rightarrow \\int f_{\\text{Emp}}(\\mathbf{x})\\log f_{\\text{Emp}}(\\mathbf{x})d\\mathbf{x} -\\int f_{\\text{Emp}}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &= -\\int f_{\\text{Emp}}(\\mathbf{x})\\log\\left\\{\\frac{f_{\\text{Emp}}(\\mathbf{x})}{f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)}\\right\\}d\\mathbf{x}\\\\ &= \\mathrm{KL}\\left(f_{\\text{Emp}}\\|f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)\\right)\\\\ &= \\text{Kullback-Leibler divergence between}f_{\\text{Emp}(D)} \\text{ and }f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right) \\end{aligned} $$ Evidence Approximation ※ Yes Bayesian In a fully Bayesian treatment of the linear basis function model, we would introduce prior distributions over the hyperparameters $\\alpha$, and $\\beta$. $$ \\begin{aligned} p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x},\\alpha,\\beta) &= \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)d\\mathbf{w}& (3.57)\\\\ &\\Rightarrow \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)p(\\alpha,\\beta|\\mathbf{t},\\mathbf{X})d\\mathbf{w}d\\alpha d\\beta& (3.74) \\end{aligned} $$ Marginalize with respect to these hyperparameters as well as with respect to the parameters $\\mathbf{w}$ to make predictions. Complete marginalization over all of these variables is analytically intractable. We will maximize $(3.74)$ in line with the framework of empirical Bayes (or type 2 maximum likelihood , generalized maximum likelihood , evidence approximation ) Obtain the marginal likelihoo function by first integrating over the parameters $\\mathbf{w}$ $$p(\\mathbf{t}|\\alpha,\\beta) = \\int p(\\mathbf{t}|\\mathbf{w},\\mathbf{X},\\beta)p(\\mathbf{w}|\\alpha)d\\mathbf{w}\\qquad (3.77)$$ Maximize $p(\\mathbf{t}|\\alpha,\\beta)$ with respect to $\\alpha$ and $\\beta$. In [18]: from kerasy.utils.preprocessing import PolynomialBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian from kerasy.ML.linear import EvidenceApproxBayesianRegression In [19]: N = 20 Ms = np . arange ( 10 ) xmin = 0 ; xmax = 1 seed = 0 In [20]: x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 0.15 , seed = seed ) y_train += 1 + y_noise In [21]: alpha = 100 beta = 100 In [22]: evidences = [] history = [] for M in Ms : phi = PolynomialBaseTransformer ( M = M ) x_train_features = phi . transform ( x_train ) model = EvidenceApproxBayesianRegression ( alpha = alpha , beta = beta , iter_max = 10000 ) model . fit ( x_train_features , y_train ) evidences . append ( model . evidence ( x_train_features , y_train )) history . append ( model ) best_M = np . argmax ( evidences [ 1 :]) + 1 best_model = history [ best_M ] In [23]: x_test = np . linspace ( xmin , xmax , 1000 ) phi = PolynomialBaseTransformer ( M = best_M ) x_test_features = phi . transform ( x_test ) y_test = 1 + np . sin ( 2 * np . pi * x_test ) y_pred , y_std = best_model . predict ( x_test_features ) In [24]: fig = plt . figure ( figsize = ( 12 , 4 )) axEVI = fig . add_subplot ( 1 , 2 , 1 ) axEVI . plot ( Ms , evidences ) axEVI . scatter ( Ms , evidences ) axEVI . set_title ( \"The relationship between 'model evidence' and $M$\" ), axEVI . set_xlabel ( \"$M$\" ), axEVI . set_ylabel ( \"$\\log({model\\ evidence})$\" , fontsize = 16 ) axBest = fig . add_subplot ( 1 , 2 , 2 ) axBest . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) axBest . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) axBest . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) axBest . scatter ( x_train , y_train , s = 50 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) axBest . set_ylim ( - 0.5 , 2.5 ), axBest . legend (), axBest . set_title ( f \"Bayesian Linear Regression (M= {best_M} )\" ) plt . tight_layout () plt . show () In [25]: print ( \"[Best Parameter]\" ) print ( f \"M = {best_M} \" ) print ( f \"alpha = {best_model.alpha} \" ) print ( f \"beta = {best_model.beta} \" ) [Best Parameter] M = 3 alpha = 0.0025750535934692723 beta = 56.07833727501231 Section5.2 Markov Process Biological Diversity Single Origin of Life \"Nothing in Biology Makes Sense Except in the Light of Evolution\" C.T. Dobzhansky Stochastic Transcription (Stochasticity vs Regulation) Stochasticity in Development Stochastic Process Mathematical description of stochastic behaviors. data: $\\left\\{\\mathbf{X}_t|t=1,\\ldots,n\\right\\}$ Probability: $\\mathbb{P}\\left(\\mathbf{X}_{t_m} = \\mathbf{x}_{t_m},\\ldots,\\mathbf{X}_{t_2} = \\mathbf{x}_{t_2},\\mathbf{X}_{t_1} = \\mathbf{x}_{t_1}\\right)$ $\\omega$ is one of the random paths. $\\mathbf{X}_t$ is a map indicats which state random paths $\\omega$ is in at time $t$ Events $E$ is a constraint on the value of $\\mathbf{X}_t$ at some times. $P(E)$ is the probability if the random paths satisfy the constraint $E$. markov Process $$\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t|\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right) = \\mathbb{P}\\left(\\mathbf{X}_t=\\mathbf{x}_t|\\mathbf{X}_{t-1}=\\mathbf{x_{t-1}}\\right)$$ Decomposition of Joint Distribution $$ \\begin{aligned} &\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t,\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &=\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &=\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1} | \\mathbf{X}_{t-2} = \\mathbf{x}_{t-2},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_{t-2} = \\mathbf{x}_{t-2},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &= \\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\cdots \\times\\mathbb{P}\\left(\\mathbf{X}_2=\\mathbf{x}_2|\\mathbf{X}_1=\\mathbf{x}_1,\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_1=\\mathbf{x}_1|\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_0=\\mathbf{x}_0\\right)\\\\ &= \\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1}\\right) \\times \\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1} | \\mathbf{X}_{t-2} = \\mathbf{x}_{t-2}\\right)\\times \\cdots\\times\\mathbb{P}\\left(\\mathbf{X}_1=\\mathbf{x}_1|\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_0=\\mathbf{x}_0\\right)\\quad\\left(\\because \\text{Markov Process}\\right) \\end{aligned} $$ Transition Matrix (Assume Time Independence ): $$P = \\left\\{P_{ij}\\right\\} = \\left\\{\\mathbb{P}\\left(\\mathbf{X}_t=i|\\mathbf{X}_{t-1}=j\\right)\\right\\},\\quad P_{ij}\\geq0,\\sum_i P_{ij}=1$$ Computing transition probability Birth and Death process $$ P= \\left(\\begin{matrix}1-\\lambda_0&\\mu_1&0&0\\\\\\lambda_0&1-\\lambda_1-\\mu_1&\\mu_2&0\\\\0&\\lambda_1&1-\\lambda_2-\\mu_2&\\mu_3\\\\0&0&\\lambda_2&1-\\mu_3\\end{matrix}\\right) $$ $P = U\\Lambda U&#94;{-1}$: Eigen decomposition $P&#94;n = U\\Lambda&#94;n U&#94;{-1}$ In [26]: def makeRandomP ( N , seed = 123 ): lambdas = np . r_ [ np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 / N , size = N - 1 ), np . zeros ( shape = 1 )] mus = np . r_ [ np . zeros ( shape = 1 ), np . random . RandomState ( seed + 1 ) . uniform ( low = 0 , high = 1 / N , size = N - 1 )] P = np . zeros ( shape = ( N , N )) for i in range ( N ): P [ i , - 1 + i ] = mus [ i ]; P [ i , i ] = 1 - mus [ i ] - lambdas [ i ]; P [ i , 1 + i if 1 + i < N else 1 + i - N ] = lambdas [ i ] return P In [27]: def LongTimeBehaviors ( P , even = True ): inf = 50 if even else 51 eigenvals , eigenvecs = np . linalg . eig ( P ) Lambda = np . diag ( eigenvals ) eigenvecs_inv = np . linalg . inv ( eigenvecs ) Pn = np . dot ( eigenvecs , np . dot ( Lambda ** inf , eigenvecs_inv )) Pn = np . where ( Pn < 1e-5 , 0 , Pn ) return Pn example Periodic In [28]: P = np . array ([ [ 0 , 1 , 0 ], [ 1 / 2 , 0 , 1 / 2 ], [ 0 , 1 , 0 ] ]) In [29]: print ( f \"P&#94;2n: \\n {LongTimeBehaviors(P, even=True)} \\n \" ) print ( f \"P&#94;2n+1: \\n {LongTimeBehaviors(P, even=False)}\" ) P&#94;2n: [[0.5 0. 0.5] [0. 1. 0. ] [0.5 0. 0.5]] P&#94;2n+1: [[0. 1. 0. ] [0.5 0. 0.5] [0. 1. 0. ]] Reducible In [30]: P = np . array ([ [ 1 / 3 , 3 / 4 , 0 , 0 ], [ 2 / 3 , 1 / 4 , 0 , 0 ], [ 0 , 0 , 1 / 3 , 3 / 4 ], [ 0 , 0 , 2 / 3 , 1 / 4 ] ]) In [31]: LongTimeBehaviors ( P ) Out[31]: array([[0.52941176, 0.52941176, 0. , 0. ], [0.47058824, 0.47058824, 0. , 0. ], [0. , 0. , 0.52941176, 0.52941176], [0. , 0. , 0.47058824, 0.47058824]]) Absorbing In [32]: P = np . array ([ [ 1 , 1 / 2 , 0 , 0 ], [ 0 , 0 , 1 / 2 , 0 ], [ 0 , 1 / 2 , 0 , 0 ], [ 0 , 0 , 1 / 2 , 1 ] ]) In [33]: LongTimeBehaviors ( P ) Out[33]: array([[1. , 0.66666667, 0.33333333, 0. ], [0. , 0. , 0. , 0. ], [0. , 0. , 0. , 0. ], [0. , 0.33333333, 0.66666667, 1. ]]) Irreducible, Aperiodic In [34]: P = np . array ([ [ 2 / 3 , 1 / 12 , 0 ], [ 1 / 3 , 5 / 8 , 1 / 8 ], [ 0 , 7 / 24 , 7 / 8 ], ]) In [35]: LongTimeBehaviors ( P ) Out[35]: array([[0.06976762, 0.06976748, 0.06976741], [0.27906992, 0.2790698 , 0.27906974], [0.65116246, 0.65116272, 0.65116286]]) In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-5.html"},{"title":"レポート課題4(10/24出題)","text":"Z5XNQ8+Ws5sjJzKi98c3lQ==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report4.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report4.html"},{"title":"探索","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 講義概要 状態空間 15パズル 迷路 コスト無しグラフの探索 コスト付きグラフの探索 ゲーム木の探索 状態空間 ありうる局面の１つ１つを 状態 と言う。 状態全体からなる集合を 状態空間 と言う。 目的： 初期状態から出発して、許される 状態遷移 を繰り返し、最終状態へたどり着くこと。 これは、 グラフ(graph) の 探索(search) 問題と等価 （ノードが状態に、エッジが状態遷移にそれぞれ対応する。） 15パズル ルール： 一度に動かせるのは1パネルのみ。 飽きますに隣のパネルをずらす操作のみ可能 目標： 「できるだけ少ない手数で」 与えられた配置から元の配置に戻すこと。 元に戻すことが不可能な問題を識別する。 迷路 目的：スタートからゴールまで誘導する。 状態(state) $s$：移動できる場所 行動(action) $a$：進む方向 コスト無しグラフの探索 用語 意味 オープンリスト(open list) これから探索するノードの候補リスト クローズドリスト(closed list) 探索が終わったノードのリスト キュー(queue) 先入れ先出し スタック(stack) 後入れ先出し 探索の基本アルゴリズム open_list = [ initial_state ] # オープンリストは初期化状態のみ closed_list = [] # クローズドリストは空 while ( open_list ): # オープンリストが空になるまで以下を繰り返す。 state = getOptimalState ( open_list ) # オープンリストから（何らかの基準で）状態sを取り出す。 closed_list . append ( state ) # sをクローズドリストに追加する。 if state == last_state : break # sが最終状態ならば探索終了 open_list += [ s for s in state . transibles () if s not in closed_list ] # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストに追加する。 深さ優先探索 行き止まりに当たるまで進み、ゴールが見つからなかったら直近の分岐に戻って別の道を探す探索法。 メモリ使用量が少ない ゴールが近くにあっても、他の深い別れ道に迷い込むと時間がかかる ゴールが複数ある時、一番近くのものが見つかるとは限らない オープンリストは スタック （後入れ先出し） にする。 open_list = [ initial_state ] closed_list = [] while ( open_list ): state = open_list . pop ( 0 ) # オープンリストの先頭の状態sを取り出す。 closed_list . append ( state ) if state == last_state : break open_list . push ([ s for s in state . transibles () if s not in closed_list ]) # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストの\"先頭に\"追加する。 幅優先探索 分かれ道に来たらそれぞれの道を一歩ずつ進み，ゴールが見つからなかったらそれぞれの道をもう一歩ずつ進む探索法。 ゴールが近くにある時、早く見つかる。 ゴールが複数ある時、一番近くのものが見つかる。 分かれ道での分岐数が多いとメモリ使用量が多い。 オープンリストは キュー （先入れ後出し） にする。 open_list = [ initial_state ] closed_list = [] while ( open_list ): state = open_list . pop ( - 1 ) # オープンリストの\"末尾\"の状態sを取り出す。 closed_list . append ( state ) if state == last_state : break open_list . push ([ s for s in state . transibles () if s not in closed_list ]) # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストの\"先頭に\"追加する。 反復深化探索 深さに制限をつけて深さ優先探索を行い、徐々に深さを深くしていく探索法 ゴールが近くにある時、早く見つかる ゴールが複数ある時、一番近くのものが見つかる 同じノードを何度も訪れる（分岐が多いと影響小） まとめ 深さ優先探索・幅優先探索・反復深化探索は、グラフに関する特別な知識を使わずにオープンリストから状態を選択することから、 ブラインド探索(blined search) と呼ばれる。 # 探さ優先探索 幅優先探索 反復深化探索 完全性（必ず解が見つかるか） (completeness) $m$ が有限なら Yes Yes Yes 時間計算量 (time complexity) $\\mathrm{O}(b&#94;m)$ $\\mathrm{O}(b&#94;d)$ $\\mathrm{O}(b&#94;d)$ 空間計算量(space complexity) $\\mathrm{O}(bm)$ $\\mathrm{O}(b&#94;d)$ $\\mathrm{O}(bd)$ 最適性（一番近くの解が見つかるか） (optimality) Yes Yes Yes $b$：最大分岐数 $d$：一番浅い解の深さ $m$：最大の深さ コスト付きグラフの探索 各エッジに 遷移コスト が割り当てられている場合の最適遷移パス探索問題。 ブラインド探索 ：グラフに関する特別な知識を使わずにオープンリストから状態を選択。 貪欲探索(greedy search)：現在の状態からの遷移コストが最小の状態を選ぶ。 （深さ優先探索に対応） 最適探索(optimal search)：初期状態からの遷移コスト和が最小の状態を選ぶ。 （各コストが1だと幅優先探索になる。ダイクストラ法とも。） ヒューリスティック探索（最良優先探索, best-first search） ：グラフに関する何らかの知識を使ってオープンリストから適切と思われる状態を選択。 貪欲最良優先探索 $A&#94;{\\ast}$ 探索 貪欲最良優先探索 $\\hat{h}(s)$ を最小にする状態を選ぶ $h(s)$：$s$ から最終状態までの遷移コスト和の最小値 $\\hat{h}(s)$：$h(s)$ の推定（ヒューリスティック関数） 一度オープンリストに入ったの評価値更新は不要 ヒューリスティック関数の選び方： ユーザが 事前知識 により構築（例：直線距離） データから 機械学習 により自動構築 一般には完全性も最適性もないが、実用上は（そこそこ）うまくいくことが（それなりに）多い。 $A&#94;{\\ast}$ 探索(A-start search) $s$ を経由する場合の遷移コスト和の推定値 $\\left(\\hat{g}(s)+\\hat{h}(s)\\right)$ を最小にする状態を選ぶ。 $g(s)$：初期状態から $s$ までの遷移コスト和の最小値 $\\hat{g}(s)$：探索済みノードから $s$ に遷移する場合の最小値（ダイクストラ法と同じ） ノード $s$ を訪れると隣接ノードの $\\hat{g}(s&#94;{\\prime})$ が更新される。 $h(s)$：$s$ から最終状態までの遷移コスト和の最小値 $\\hat{h}(s)$：$h(s)$ のヒューリスティック推定値 最適経路上の $s$ ではいずれも $g(s)+h(s)$ が最小、経路外の点ではそれより大きい値をとることを利用 $\\forall s, 0\\leq\\hat{h}(s)\\leq h(s)$ が成り立つ時、$\\hat{h}(s)$ は 許容的(admissible) であるといい、この場合には $A&#94;{\\ast}$ 探索は最適性を持つ。 ※ 実装等は、 レポート課題 に記載。 In [1]: from kerasy.search.Astar import OptimalTransit In [2]: n = 3 m = 3 initial_str = \"2,-1,6,1,3,4,7,5,8\" last_str = \"1,2,3,4,5,6,7,8,-1\" In [3]: OptimalTransit ( n , m , initial_str , last_str , heuristic_method = \"Manhattan_distance\" , n_row = 5 ) n_transition = 9 ゲーム木の探索 2人のプレイヤーが交互に遷移先を決めるゲーム（ex. 将棋・囲碁・リバーシ・◯×など）における最適遷移探索問題 ミニマックス探索 自分は一番良い（点数を最大化する）手を選ぶ 相手は一番悪い（点数を最小化する）手を選ぶ アルファ・ベータ探索 ミニ・マックス探索では、全ての局面に対する点数を求める必要があり、時間がかかる。 不要な点数計算を省略することで効率化 $\\alpha$：max計算の際の下界値 $\\beta$：min計算の際の上界値 モンテカルロ木探索 アルファ・ベータ法を用いても、ゲーム木を深く探索するのは困難（$b&#94;d$ が $b&#94;{d/2}$ になる程度。） そこで、 ランダムに 手を打つ。 囲碁やスケジューリングなどで活用されている。 まとめ 広大な状態空間を効率よく探索したい コスト無しグラフの探索 コスト付きグラフの探索 ゲーム木の探索 膨大な状態空間の探索には，近似的な手法が有用 事前知識や機械学習によるヒューリスティック関数の構築 モンテカル 木探索 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-4.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-4.html"},{"title":"ガウシアンプロセスとベイズ最適化","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt import seaborn as sns データ駆動科学とベイズ最適化 データ駆動科学では、データに基づいて、新たな知見・事柄を発見することが求められる 単に予測を行うだけでなく、それに基づいて「行動」を設計することが必要 これらは、「ベイズ最適化」の枠組みに乗ることが多い 概要 ベイズ線形回帰 ガウシアンプロセス ベイズ最適化 ベイズ線形回帰 線形回帰モデルのパラメータを 最尤推定 によって決める場合、 解こうとしている問題に合わせてモデルの複雑さを適切に決めることが必要 ↑は、単純に尤度を最大化するだけでは 過学習 を引き起こしてしまう。 データの一部を独立なテスト用データとして取っておく ことでモデルの汎化性能を評価できるが、この方法は 計算量が大きく 、 データの無駄遣い となり得る。 これらの問題に対処するため、線形回帰モデルをベイズ的に取り扱うことで最尤推定の過学習を回避するとともに 「訓練データだけからモデルの複雑さを自動的に決定する。」 概要 解こうとしている問題に沿った 尤度関数(likelihood function) （ $p(\\mathbf{t}|\\mathbf{X},\\mathbf{w})$ ） を定義する。 モデルパラメータの 事前分布(prior distribution) （ $p(\\mathbf{w})$ ） を、 尤度関数 の 共役事前分布(conjugate prior) の形で定義する。 ベイズの公式より、 事後分布(posterior distribution) は 事前分布 と 尤度関数 の積に比例する。 （ $p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})\\propto p(\\mathbf{t}|\\mathbf{X},\\mathbf{w})\\cdot p(\\mathbf{w})$ ） あるパラメータ （ $\\mathbf{w}$ ） 下で入力 $\\mathbf{x}$ が与えられた時の確率分布 （ $p(t|\\mathbf{w},\\mathbf{x})$ ） を、3で求めた 事後分布 （ $p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})$ ） で重み付けしながら 周辺化(marginalization) する （ $p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x}) = \\int p(t|\\mathbf{w},\\mathbf{x})p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})d\\mathbf{w}$ ） ことで、 予測分布(predivtive distribution) （ $p(t|\\mathbf{w},\\mathbf{x})$ ） を得る。 具体例 ※ $D$ 次元の説明変数 $\\mathbf{x}$ で一次元の目標変数 $t$ を線形回帰するモデルをベイズ的に取り扱う。 目標変数 $t$ が決定論的な関数 $y(\\mathbf{x},\\mathbf{w})$ と加法性のガウスノイズの和で与えられる場合を考える。 $$t = y(\\mathbf{x},\\mathbf{w}) + \\epsilon\\qquad (3.7)$$ ここで、$\\epsilon$ は期待値が $0$ で精度が $\\beta$ のガウス確率変数である。すなわち、以下で表すことができる。 $$p(t|\\mathbf{x},\\mathbf{w},\\beta) = \\mathcal{N}\\left(t|y(\\mathbf{x},\\mathbf{w}),\\beta&#94;{-1}\\right)\\qquad (3.8)$$ データ点が $(3.8)$ の分布から 独立に生成された と仮定すると、尤度関数を次のように表せる。 $$p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) = \\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)\\qquad (3.10)$$ モデルパラメータ $\\mathbf{w}$ の事前分布を導入する。 ここで、 $\\beta$ が既知 と仮定すると、上記の尤度関数の共役事前分布である、期待値 $\\mathbf{m}_0$ 共分散 $\\mathbf{S}_0$ を持つガウス分布で表すのが適当である。 $$p(\\mathbf{w}) = \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)\\qquad (3.48)$$ ※ なお、$\\mathbf{w},\\beta$ の両方が未知である場合、共役事前分布は ガウス-ガンマ分布 隣、予測分布は スチューデントのt分布 となる。 ベイズの公式より、 事後分布は事前分布と尤度関数の積に比例する ので、これを解くことで事後分布を次の形で書き出すことができる。 （導出） $$ p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) = \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N) \\qquad (3.49)\\\\ \\begin{cases} \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51) \\end{cases} $$ $\\mathbf{w}$ で周辺化することで、予測分布を求めるが、議論の簡単のために、 「モデルパラメータ $\\mathbf{w}$ の事前分布 $p(\\mathbf{w})$ が、単一の制度パラメータ $\\alpha$ で記述される期待値が $0$ の等方的ガウス分布である」 とする。 $$p(\\mathbf{w}|\\alpha) = \\mathcal{N}\\left(\\mathbf{w}|\\mathbf{0},\\alpha&#94;{-1}\\mathbf{I}\\right)\\qquad (3.52)$$ この時、上記の $\\mathbf{w}$ の事後分布 $(3.49)$ の形は変わらず、$\\mathbf{m}_N,\\mathbf{S}_N$ の値が $$ \\begin{cases} \\mathbf{m}_N &= \\beta\\mathbf{S}_N\\boldsymbol{\\Phi}&#94;T\\mathbf{t} & (3.53)\\\\ \\mathbf{S}_N&#94;{-1} &= \\alpha\\mathbf{I} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.54) \\end{cases} $$ となる。この条件下で周辺化すると、以下の結果を得る。 （導出） $$ \\begin{aligned} p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x},\\alpha,\\beta) &= \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)d\\mathbf{w}& (3.57)\\\\ &= \\mathcal{N}\\left(t|\\mathbf{m}_N&#94;T\\phi(\\mathbf{x}),\\sigma_N&#94;2(\\mathbf{x})\\right) & (3.58)\\\\ \\sigma_N&#94;2(\\mathbf{x}) &= \\frac{1}{\\beta} + \\phi(\\mathbf{x})&#94;T\\mathbf{S}\\phi(\\mathbf{x}) & (3.59) \\end{aligned} $$ ※ ここで、$(3.59)$ の第1項はデータに含まれるノイズを、第2項は $\\mathbf{w}$ に関する不確かさを反映している。 事後分布の計算の導出過程 $$ \\begin{aligned} \\text{likelihood function : } p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) &= \\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)& (3.10)\\\\ \\text{prior distribution : } p(\\mathbf{w}) &= \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)& (3.48)\\\\ \\text{posterior distribution : } p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) &= \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N) & (3.49)\\\\ \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51)\\\\ \\mathcal{N}(x|\\mu,\\sigma&#94;2) &= \\frac{1}{\\left(2\\pi\\sigma&#94;2\\right)&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2\\sigma&#94;2}(x-\\mu)&#94;2\\right\\} & (2.42)\\\\ \\mathcal{N}(\\mathbf{x}|\\boldsymbol{\\mu},\\boldsymbol{\\Sigma}) &= \\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}|&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)\\right\\} & (2.43) \\end{aligned} $$ $$ \\begin{aligned} p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) &\\propto p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) p(\\mathbf{w}) \\\\ &=\\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)\\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)\\\\ &\\propto\\prod_{n=1}&#94;N\\exp\\left\\{-\\frac{\\beta}{2}\\left(t_n-\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\right)&#94;2\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &=\\exp\\left\\{-\\frac{\\beta}{2}\\sum_{n=1}&#94;N\\left(t_n-\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\right)&#94;2\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &= \\exp\\left\\{-\\frac{\\beta}{2}\\left( \\begin{array}{c}t_1 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_1)\\\\ t_2 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_2) \\\\ \\vdots \\\\ t_N - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_N) \\end{array} \\right)&#94;T\\left( \\begin{array}{c}t_1 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_1)\\\\ t_2 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_2) \\\\ \\vdots \\\\ t_N - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_N) \\end{array} \\right) \\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &= \\exp\\left\\{-\\frac{\\beta}{2}\\left(\\mathbf{t}-\\boldsymbol{\\Phi}\\mathbf{w}\\right)&#94;T\\left(\\mathbf{t}-\\boldsymbol{\\Phi}\\mathbf{w}\\right)\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\}\\\\ &= \\exp\\left\\{ -\\frac{1}{2} \\left(\\beta\\mathbf{t}&#94;T\\mathbf{t} - \\beta\\mathbf{t}&#94;T\\boldsymbol{\\Phi}\\mathbf{w} - \\beta\\mathbf{w}&#94;T\\boldsymbol{\\Phi}&#94;T\\mathbf{t} + \\beta\\mathbf{w}&#94;T\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi}\\mathbf{w} + \\mathbf{w}&#94;T\\mathbf{S}_0&#94;{-1}\\mathbf{w} - \\mathbf{w}&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0 - \\mathbf{m}_0&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{w} + \\mathbf{m}_0&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right)\\right\\}\\\\ &= \\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}&#94;T\\left(\\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} + \\mathbf{S}&#94;{-1}_0\\right)\\mathbf{w} - \\mathbf{w}&#94;T\\left(\\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t} + \\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right) - \\left(\\beta\\mathbf{t}&#94;T\\boldsymbol{\\Phi} + \\mathbf{m}_0\\mathbf{S}&#94;{-1}_0\\right)\\mathbf{w} + \\left(\\beta\\mathbf{t}&#94;T\\mathbf{t} + \\mathbf{m_0}&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right)\\right)\\right\\} \\\\ &=\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w} - \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right)\\right)&#94;T\\mathbf{S}_N&#94;{-1}\\left(\\mathbf{w} - \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right)\\right) + \\mathrm{C} \\right\\}\\\\ &\\propto\\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N)\\\\ &\\begin{cases} \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51)\\\\\\end{cases} \\end{aligned}\\\\ $$ 周辺化計算の導出過程 以下の「ガウス分布の周辺分布と条件付き分布の関係」の $(2.115)$ の結果を用いる。 $\\mathbf{x}$ の周辺ガウス分布と、$\\mathbf{x}$ が与えられた時の $\\mathbf{y}$ の条件付きガウス分布が次式で与えられたとする。 $$ \\begin{aligned} p(\\mathbf{x}) &=\\mathcal{N}\\left(\\mathbf{x} | \\boldsymbol{\\mu}, \\mathbf{\\Lambda}&#94;{-1}\\right) & (2.113)\\\\ p(\\mathbf{y} | \\mathbf{x}) &=\\mathcal{N}\\left(\\mathbf{y} | \\mathbf{A} \\mathbf{x}+\\mathbf{b}, \\mathbf{L}&#94;{-1}\\right) & (2.114)\\end{aligned} $$ この時、$\\mathbf{y}$ の周辺分布と、$\\mathbf{y}$ が与えられた時の $\\mathbf{x}$ の条件付き分布は $$ \\begin{aligned} p(\\mathbf{y}) &=\\mathcal{N}\\left(\\mathbf{y} | \\mathbf{A} \\boldsymbol{\\mu}+\\mathbf{b}, \\mathbf{L}&#94;{-1}+\\mathbf{A} \\mathbf{\\Lambda}&#94;{-1} \\mathbf{A}&#94;{\\mathrm{T}}\\right) & (2.115)\\\\ p(\\mathbf{x} | \\mathbf{y}) &=\\mathcal{N}\\left(\\mathbf{x} | \\mathbf{\\Sigma}\\left\\{\\mathbf{A}&#94;{\\mathrm{T}} \\mathbf{L}(\\mathbf{y}-\\mathbf{b})+\\mathbf{\\Lambda} \\boldsymbol{\\mu}\\right\\}, \\mathbf{\\Sigma}\\right) & (2.116) \\end{aligned} $$ で与えられる。ただし、 $$\\mathbf{\\Sigma} = \\left(\\mathbf{\\Lambda} + \\mathbf{A}&#94;T\\mathbf{LA}\\right)&#94;{-1}\\qquad (2.117)$$ である。 実装 In [2]: from kerasy.ML.linear import BayesianLinearRegression from kerasy.utils.preprocessing import GaussianBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian In [3]: N = 25 ; D = 1 ; M = 25 xmin = 0 ; xmax = 1 seed = 10 In [4]: alpha = 1 beta = 25 In [5]: x_test = np . linspace ( xmin , xmax , 1000 ) y_test = np . sin ( 2 * np . pi * x_test ) x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 1 / beta , seed = seed ) y_train += y_noise In [6]: # transform mu = np . linspace ( xmin , xmax , M ); sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) x_train_features = phi . transform ( x_train ) x_test_features = phi . transform ( x_test ) In [7]: random_idx = np . random . RandomState ( seed ) . choice ( N , N ) In [8]: fig = plt . figure ( figsize = ( 16 , 8 )) for i , n in enumerate ([ 1 , 2 , 4 , 25 ]): ax = fig . add_subplot ( 2 , 2 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( x_train_features [ random_idx [: n ]], y_train [ random_idx [: n ]]) y_pred , y_std = model . predict ( x_test_features ) ax . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) ax . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( x_train [ random_idx [: n ]], y_train [ random_idx [: n ]], s = 150 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) ax . set_ylim ( - 1.5 , 1.5 ), ax . legend (), ax . set_title ( f \"Bayesian Linear Regression (N= {n} )\" ) plt . tight_layout () plt . show () ガウシアンプロセス 回帰分析のための カーネル法 テストサンプルに対して、 予測値だけでなく、予測分散も与えることができる。 線形回帰のモデルは、以下で表されていた。 $$y(\\mathbf{x},\\mathbf{w}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x})\\qquad (3.3)$$ この結果に、ベイズ線形回帰の結果 $(3.53)$ を代入すると、 $$ \\begin{aligned} y(\\mathbf{x},\\mathbf{m}_N) &= \\mathbf{m}_N\\phi(\\mathbf{x}) = \\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\boldsymbol{\\Phi}&#94;T\\mathbf{t} \\\\ &= \\sum_{n=1}&#94;N\\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}_n)t_n & (3.60)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51) \\end{aligned} $$ したがって、点 $\\mathbf{x}$ での予測分布の平均は訓練データの目標変数 $t_n$ の線型結合で与えられるので、 $$ \\begin{aligned} y(\\mathbf{x},\\mathbf{m}_N) &= \\sum_{n=1}&#94;Nk(\\mathbf{x}, \\mathbf{x}_n)t_n & (3.61)\\\\ k(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}) &= \\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}&#94;{\\prime}) & (3.62)\\\\ &= \\left(\\beta&#94;{1/2}\\mathbf{S}_N&#94;{1/2}\\phi(\\mathbf{x})\\right)&#94;T\\left(\\beta&#94;{1/2}\\mathbf{S}_N&#94;{1/2}\\phi(\\mathbf{x})\\right) & (3.65) \\end{aligned} $$ とかける。なお、$k(\\mathbf{x}, \\mathbf{x}&#94;{\\prime})$ を 平滑化行列(smoother matrix) 、または 等価カーネル(equivalent kernel) と呼ぶ。（$(3.65)$ から、等価カーネルが通常のカーネル関数が満たすべき性質を満たしていることがわかる。） また、訓練データの目標値の線型結合を取ることで予測を行う上記のような回帰関数を 線形平滑器(linear smoother) と呼ぶ。 In [9]: from kerasy.utils.preprocessing import GaussianBaseTransformer , SigmoidBaseTransformer , PolynomialBaseTransformer In [10]: X = np . linspace ( - 1 , 1 , 200 ) M = 15 mu = np . linspace ( - 0.9 , 0.9 , M ); sigma = 0.1 gausian_phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) In [11]: def mkSmootherMatrix ( X , phi , alpha = 1 , beta = 25 ): X_feature = phi . transform ( X ) N , M = X_feature . shape SN = np . linalg . inv ( alpha * np . eye ( M ) + beta * X_feature . T . dot ( X_feature )) K = beta * np . dot ( X_feature , np . dot ( SN , X_feature . T )) return K In [12]: K = mkSmootherMatrix ( X , gausian_phi ) In [13]: SP = [ 30 , 120 , 150 ] colors = [ \"red\" , \"salmon\" , \"pink\" ] In [14]: fig = plt . figure ( figsize = ( 12 , 6 )) axKernel = plt . subplot2grid (( 3 , 2 ), ( 0 , 1 ), rowspan = 3 ) axKernel = sns . heatmap ( K , vmin = np . min ( K ), vmax = np . max ( K ), cmap = \"jet\" , cbar = False , square = True , ax = axKernel ) axKernel . set_xticks ([]), axKernel . set_yticks ([]) axKernel . set_xlabel ( \"$x$\" , fontsize = 18 ), axKernel . set_ylabel ( \"$x&#94;{\\prime}$\" , fontsize = 18 ) for i in range ( 3 ): axL = plt . subplot2grid (( 3 , 2 ), ( i , 0 )) axL . set_facecolor ( 'lightcyan' ) axL . plot ( K [ SP [ i ]], color = colors [ i ], linewidth = 4 ) axL . set_xticks ([]), axL . set_yticks ([]) axKernel . axhline ( SP [ i ], color = colors [ i ], linewidth = 10 , alpha = 0.7 ) plt . tight_layout () plt . show () In [15]: Transformers = [ ( GaussianBaseTransformer , mu ), ( SigmoidBaseTransformer , mu ), ( PolynomialBaseTransformer , 10 ), ] In [16]: fig = plt . figure ( figsize = ( 12 , 4 )) for i ,( phi_func , param ) in enumerate ( Transformers ): ax = fig . add_subplot ( 1 , 3 , i + 1 ) phi = phi_func ( param ) K = mkSmootherMatrix ( X , phi ) ax . plot ( K [ 100 ], color = \"blue\" ) ax . scatter ( 100 , 0 , color = \"red\" , marker = \"x\" , s = 150 , label = \"$x&#94;{\\prime}$\" ) ax . set_xticks ([]), ax . set_yticks ([]), ax . set_title ( f \"$k(x,x')$: {phi.__name__} \" , fontsize = 16 ) ax . set_xlabel ( \"$x$\" , fontsize = 18 ), ax . legend () plt . tight_layout () plt . show () カーネル関数の例 を見ればわかるよう、 対応する基底関数が局所的でないにも関わらず、等価カーネルは $x&#94;{\\prime}$ に関して局所的な関数となっていることがわかる！！ また、$y(\\mathbf{x})$ と $y(\\mathbf{x}&#94;{\\prime})$ の共分散を考えると、 $$ \\begin{aligned} \\mathrm{cov}\\left[y(\\mathbf{x}),y(\\mathbf{x}&#94;{\\prime})\\right] &= \\mathrm{cov}\\left[\\phi(\\mathbf{x})&#94;T\\mathbf{w}, \\mathbf{w}&#94;T\\phi(\\mathbf{x})\\right]\\\\ &= \\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}&#94;{\\prime}) = \\beta&#94;{-1}k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})\\quad(3.63) \\end{aligned} $$ となる。ここで、上述の等価カーネルの形状を考えると、 近接での予測平均は互いに強い相関を持っている一方で、より離れた点の組では相関は小さくなることがわかる。 ベイズ線形回帰 のように基底関数の集合を明示的に定義するのではなく、局所的なカーネルを直接定義し、観測された訓練集合が与えられた時、この局所的なカーネルを用いて新たな入力ベクトル $\\mathbf{x}$ に対する予測値を求めることができる。 この定式化から、回帰（と分類）に対する実用的な枠組みである ガウス過程(Gaussian process) が得られる。 ベイズ最適化 $M$ 個の候補点があり、この中から最大の観測値を持つものを探したい。 できるだけ実験数を少なくしたい。 $N$ 個の候補点に対する実験が終わった。$M-N$ 個の候補点が残っている。 次の $N+1$ 個目の候補点を最適に選びたい。 $N$ 個の化合物から予測モデルを学習し、それを用いて、残りの候補点を スコアリング し決定。 Maximum Probability of Improvement: Current Maxを超える確率。 Maximum Expected Improvement: (観測値-Current Max)の期待値。 Thompson Sampling: 残りのM-N個候補点に対して、条件つき結合確率からサンプリングを行い、そのサンプリング値をスコアとする。 In [17]: xmin = 0 ; xmax = 1 N = 1000 ; M = 25 seed = 1 In [18]: alpha = 1 beta = 25 In [19]: X = np . linspace ( xmin , xmax , N ) Y = 5e1 * X * ( X - 0.2 ) * ( X - 0.3 ) * ( X - 0.7 ) * ( X - 1 ) _ , noise = generateGausian ( size = 1000 , x = X , loc = 0 , scale = 1 / beta , seed = seed ) Y_ob = Y + noise In [20]: mu = np . linspace ( xmin , xmax , M ) sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) In [21]: X_features = phi . transform ( X ) In [22]: fig = plt . figure ( figsize = ( 18 , 8 )) idx = np . random . RandomState ( seed ) . choice ( N , 2 ) # Initialization. next_idx = idx for i , _ in enumerate ( range ( 12 )): ax = fig . add_subplot ( 3 , 4 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( X_features [ idx ], Y_ob [ idx ]) y_pred , y_std = model . predict ( X_features ) current_max = np . max ( Y_ob [ idx ]) max_improve_id = np . argmax ( y_pred ) ax . plot ( X , Y , color = \"black\" , label = \"True distribution\" ) ax . plot ( X , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( X , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( X [ idx ], Y_ob [ idx ], s = 50 , edgecolors = 'black' , facecolor = \"white\" , label = \"Observation\" ) ax . scatter ( X [ next_idx ], Y_ob [ next_idx ], s = 150 , edgecolors = 'black' , facecolor = \"black\" , label = \"New Obsevation\" ) ax . set_xlabel ( \"Explanatory Variable\" ), ax . set_ylabel ( \"Measured Value\" ), ax . set_title ( f \"N={len(idx)}, Max= {current_max:.3f} \" ) ax . set_ylim ( - 0.5 , 0.3 ), ax . set_xticks ([]), ax . set_yticks ([]) ax . axhline ( current_max , color = \"green\" , label = \"Current Maximum\" ) ax . axvline ( np . max ( X [ max_improve_id ]), color = \"blue\" , label = \"Maximum Probability of Improvement\" ) next_idx = max_improve_id if np . random . uniform () > 0.5 else np . random . choice ( N , 1 ) idx = np . r_ [ idx , next_idx ] ax . legend () plt . tight_layout () plt . show () おわりに（データ駆動科学） データ駆動科学では、データに基づいて、新たな知見・事柄を発見することが求められる。 単に予測を行うだけでなく、それに基づいて次の「行動」を設計することが必要 これらは、ベイズ最適化の枠組みに乗ることが多い。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-4.html"},{"title":"特徴選択","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 主成分分析(PCA) In [2]: N = 20 seed = 0 In [3]: X = np . linspace ( 0 , 1 , N ) Y = X + np . random . RandomState ( N ) . normal ( loc = 0 , scale = 5e-2 , size = N ) data = np . vstack (( X , Y )) In [4]: def Rotate ( x , radian ): A = np . array ([ [ np . cos ( radian ), - np . sin ( radian )], [ np . sin ( radian ), np . cos ( radian )] ]) return np . dot ( A , data ) In [5]: fig = plt . figure ( figsize = ( 10 , 4 )) ax = fig . add_subplot ( 1 , 2 , 1 ) ax . scatter ( X , Y , color = \"black\" ), ax . set_title ( \"Original\" ) X_tra , Y_tra = Rotate ( data , radian =- 1 / 4 * np . pi ) ax = fig . add_subplot ( 1 , 2 , 2 ) ax . scatter ( X_tra , Y_tra , color = \"red\" ), ax . set_title ( \"Rotated\" ), ax . set_ylim ( - 1 / 2 * np . sqrt ( 2 ), 1 / 2 * np . sqrt ( 2 )) plt . tight_layout () plt . show () $2$ 次元空間で左上図のようなデータがあったとする。この時、このデータを表現するのに $(x,y)$ の二次元が必要だろうか？ データ全体を右に $1/4\\pi$ 回転させると、右上図のようなデータれるとなる。この場合、$y&#94;{\\prime}$ 軸方向はノイズとみなせ、$x&#94;{\\prime}$ 軸のみでデータを表現していると言える。 この例のように、$K$ 次元のデータであっても、で０他の偏りによって $M( こういった場合に、 「$M$ 方向の軸をどのように決めるか？」 、 「$M$ をどうやって決めるか？」 などが問題となる。 ※ 詳しくは 主成分分析(PCA) に記載。 線形判別分析(LDA) 入力ベクトル $\\mathbf{x}$ を $K$ クラスの一つ $C_k$ に割り当てる関数である識別（決定面が超平面となるとき、 線形識別(linear discriminant) ）を、 「次元の削減」 という観点から捉えることができる。 2クラス分類 $D$ 次元入力ベクトルを得て、それを以下の式で $1$ 次元に射影するとする。 $$y = \\mathbf{w}&#94;T\\mathbf{x}\\qquad (4.20)$$ ある閾値を設定し、$y\\geq-w_0$ の場合クラス $C_1$、そうでない場合クラス $C_2$ であるとすると、 標準的な線形分類器が得られる。 一般に、$D$ 次元から $1$ 次元へ射影することによって相当量の情報量の損失を発生させる。 重みベクトル $\\mathbf{w}$ の要素を調整することで、 クラスの分離を最大にする射影を選択したい。 $\\mathbf{w}$ 上へ射影された際のクラス分離度の最も簡単な測定法は、 射影されたクラスの平均の分離度（以下の式） を見ることである。 $$m_2-m_1 = \\mathbf{w}&#94;T\\left(\\mathbf{m}_2-\\mathbf{m}_1\\right) = \\mathbf{w}&#94;T\\left(\\frac{1}{N_2}\\sum_{n\\in C_2}\\mathbf{x}_n -\\frac{1}{N_1}\\sum_{n\\in C_1}\\mathbf{x}_n\\right)\\qquad (4.21)\\ \\&\\ (4.22)$$ 上の式は $\\mathbf{w}$ の値を大きくすればいくらでも大きな値にすることができるので、 $\\mathbf{w}$ が単位長である（$\\sum_i w_i&#94;2 = 1$）という制約を加える。 ラグランジュ乗数を用いてこれを解くと、$\\mathbf{w}\\propto(\\mathbf{m}_2-\\mathbf{m}_1)$ が得られる。 クラス分布の非対角な共分散が強い場合など、一般に、 各クラスの平均値だけを見ていても上手く判別する事ができない。 そこでフィッシャーが提案した方法が、 「射影されたクラス平均間の分離度を大きくすると同時に、各クラス内では小さな分散を与える関数を最大化する」 クラス $C_k$ から射影されたデータのクラス内分散は以下で与えられる。 $$s_k&#94;2 = \\sum_{n\\in C_k}(y_n-m_k)&#94;2\\qquad (4.2)$$ 全データ集合に対する総クラス内分散が $s_1&#94;2+s_2&#94;2$ であると定義する。 フィッシャーの判別基準は、 クラス間分離度 と クラス内分散 の比率で表される。 $$ \\begin{aligned} J(\\mathbf{w}) &= \\frac{(m_2-m_1)&#94;2}{s_1&#94;2 + s_2&#94;2} & (4.25)\\\\ &= \\frac{\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}}{\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}} & (4.27)\\\\ \\mathbf{S}_{\\mathrm{B}} &= (\\mathbf{m}_2-\\mathbf{m}_1)(\\mathbf{m}_2-\\mathbf{m}_1)&#94;T & (4.27)\\\\ \\mathbf{S}_{\\mathrm{W}} &= \\sum_{n\\in C_1}(\\mathbf{x}_n-\\mathbf{m}_1)(\\mathbf{x}_n-\\mathbf{m}_1)&#94;T + \\sum_{n\\in C_2}(\\mathbf{x}_n-\\mathbf{m}_2)(\\mathbf{x}_n-\\mathbf{m}_2)&#94;T& (4.27)\\\\ \\end{aligned} $$ $\\mathbf{S}_{\\mathrm{B}}$ を クラス間共分散行列(between-class covariance matrix) と呼ぶ。 $\\mathbf{S}_{\\mathrm{W}}$ を (総)クラス内共分散行列(within-class covariance matrix) と呼ぶ。 $J(\\mathbf{w})$ を $\\mathbf{w}$ に関して微分すると、以下の式が満たされる場合に $J(\\mathbf{w})$ が最大となる事がわかる。 $$ \\begin{aligned} \\frac{dJ(\\mathbf{w})}{d\\mathbf{w}} &= \\frac{\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}} + \\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right) - \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}} + \\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)}{\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)&#94;2}\\\\ \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}} + \\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right) &= \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}} + \\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)\\\\ \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}&= \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\qquad (4.29) \\end{aligned} $$ $(4.27)$ から、 $\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}$ は常に $(\\mathbf{m}_2-\\mathbf{m}_1)$ と同じ方向を持つ。 $\\mathbf{w}$ の方向だけが重要で、 大きさは考慮する必要がないので、スカラーファクタ $\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)$ と $\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)$ を無視できる。 $(4.29)$ の両辺に $\\mathbf{S}_{\\mathrm{W}}&#94;{-1}$ を左からかけて、 フィッシャーの線形判別(Fisher's linear discriminant) が得られる。 $$\\mathbf{w}\\propto\\mathbf{S}_{\\mathrm{W}}&#94;{-1}(\\mathbf{m}_2-\\mathbf{m}_1)\\qquad (4.30)$$ フィッシャーの線形判別(Fisher's linear discriminant) は、厳密には識別子ではなく、 むしろ $1$ 次元へ削減する際のデータの射影方向の選択を行なっている。 In [6]: from kerasy.ML.decomposition import LDA In [7]: N1 = 100 ; N2 = 100 cov = [[ 10 , 1 ],[ 1 , 3 ]] In [8]: x1 = np . random . RandomState ( seed ) . multivariate_normal ([ 0 , 7 ], cov , N1 ) x2 = np . random . RandomState ( seed + 1 ) . multivariate_normal ([ 8 , 6 ], cov , N2 ) x1min = np . min ( x1 ); x1max = np . max ( x1 ) x2min = np . min ( x2 ); x2max = np . max ( x2 ) m1 = np . mean ( x1 , axis = 0 ); m2 = np . mean ( x2 , axis = 0 ) m = ( m1 + m2 ) / 2 data = np . r_ [ x1 , x2 ] In [9]: X = np . linspace ( - 100 , 100 , 1000 ) In [10]: fig = plt . figure ( figsize = ( 12 , 6 )) for i , tf in enumerate ([ True , False ]): model = LDA () model . fit ( x1 , x2 , mean_only = tf ) w1 , w2 = model . w alpha = - w2 / w1 beta = m [ 1 ] - alpha * m [ 0 ] x_features = model . transform ( data ) axT = fig . add_subplot ( 2 , 2 , i + 1 ) axT . plot ( X , X * ( - w2 / w1 ) + beta , color = \"black\" , label = \"linear discriminant\" ) axT . scatter ( x1 [:, 0 ], x1 [:, 1 ], color = \"blue\" , label = \"class1\" ) axT . scatter ( x2 [:, 0 ], x2 [:, 1 ], color = \"red\" , label = \"class2\" ) axT . scatter ( m1 [ 0 ], m1 [ 1 ], color = \"green\" , marker = \"*\" , s = 200 ), axT . scatter ( m2 [ 0 ], m2 [ 1 ], color = \"green\" , marker = \"*\" , s = 200 , label = \"mean\" ) axT . set_xlim ( x1min , x1max ), axT . set_ylim ( x2min , x2max ) axT . set_xticks ([]), axT . set_yticks ([]), axT . legend (), axT . set_title ( \"Only Mean\" if tf else \"Fisher's linear discriminant\" ) axB = fig . add_subplot ( 2 , 2 , 3 + i ) axB . hist ( x_features [: N1 ], alpha = 0.3 , color = \"blue\" , label = \"class1\" ) axB . hist ( x_features [ N1 :], alpha = 0.3 , color = \"red\" , label = \"class2\" ) axB . set_xticks ([]), axB . set_yticks ([]), axB . legend () plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-3.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-3.html"},{"title":"生物統計論 第4回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section4.1 Expectation Maximization Algorithm The expectation maximization algorithm, or EM algorithm, is a general technique for finding maximum likelihood solutions for probabilistic models having latent variable. Consider a probabilistic model in which we collectively denote all of the observed variables by $\\mathbf{X}$ all of the hidden variables by $\\mathbf{Z}$ (assuming discrete, but discussion is identical if continuous) joint distribution by $p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)$ Goal is to maximize the likelihood function that is given by $$p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) = \\sum_{\\mathbf{Z}}p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)\\qquad (9.69)$$ Properties Guaranteed to terminate Likelihood always increases Solving M-step is often easy No need to traverse the data Separation of parameter dependency $\\log(pq)=\\log(p)+\\log(q)$ Sometimes solved exactly Often a few times faster than gradient descent (if stopping condition is not too stringent) Expectation values characterize the optimized model Lower Bound of Likelihood $\\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right)$ and $\\mathrm{KL}\\left(q\\|p\\right)$ We shall suppose that direct optimization of $p(\\mathbf{X}|\\boldsymbol{\\theta})$ is difficult the optimization of the complete-data likelihood function $p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)$ is significantly easier We introduce a distribution $q\\left(\\mathbf{Z}\\right)$ defined over the latent variables. For any choice of $q\\left(\\mathbf{Z}\\right)$, the following decomposition holds $$ \\begin{aligned} \\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) &= \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) + \\mathrm{KL}\\left(q\\|p\\right) &(9.70)\\\\ \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.71)\\\\ \\mathrm{KL}\\left(q\\|p\\right) &= -\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.72) \\end{aligned} $$ NOTE : $\\mathcal{L}(q,\\boldsymbol{\\theta})$ is a functional of the distribution $q(\\mathbf{Z})$, and a function of the parameters $\\boldsymbol{\\theta}$ $$ \\begin{aligned} \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) + \\mathrm{KL}\\left(q\\|p\\right) &=\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} -\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\}\\\\ &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}\\right\\}\\\\ &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right)\\\\ &= \\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) \\end{aligned}$$ From $(9.72)$, we see that $\\mathrm{KL}(q\\|p)$ is the Kullback-Leibler divergence between $q(\\mathbf{Z})$ and the posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta})$ Kullback-Leibler divergence satisfies $\\mathrm{KL}(q\\|p)\\geq0$ with eqyality if, and only if, $q(\\mathbf{Z})=p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta})$. Therefore, $\\mathcal{L}(q,\\boldsymbol{\\theta})\\leq\\ln p(\\mathbf{X}|\\boldsymbol{\\theta})$, in other words that $\\mathcal{L}(q,\\boldsymbol{\\theta})$ is a lower bound on $\\ln p(\\mathbf{X}|\\boldsymbol{\\theta})$ E step In the E step, the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ is maximized with respect to $q(\\mathbf{Z})$ while holding $\\boldsymbol{\\theta}&#94;{\\text{old}}$ fixed. $\\ln p(\\mathbf{X}|\\boldsymbol{\\theta}&#94;{\\text{old}})$ does not depend on $q(\\mathbf{Z})$ the largest value of $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ will occur when the Kullback-Leibler divergence vanishes. ∴ When $q(\\mathbf{Z})$ is equal to the posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}})$, $\\mathrm{KL}(q\\|p)=0$ and the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ will be maximized. M step In the M step, the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ is maximized with respect to $\\boldsymbol{\\theta}$ to give some new value $\\boldsymbol{\\theta}&#94;{\\text{new}}$ while holding $q(\\mathbf{Z})$ fixed. This will cause the lower bound $\\mathcal{L}$ to increase This will necessarily cause the corrresponding log likelihood function to increase. Because $q$ is held fixed during the M step, it will not equal the new posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}})$ $\\left(\\mathrm{KL}(q\\|p)\\neq0\\right)$ $\\mathcal{Q}(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}})$ $$ \\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)=\\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right) \\qquad (9.33)\\\\ $$ If we substitute $q(\\mathbf{Z}) = p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)$ into $(9.71)$, $$ \\begin{aligned} \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.71)\\\\ &= \\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right) - \\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\\\ &= \\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right) + \\text{const.} \\end{aligned} $$ ∴ \"Maximizing $\\mathcal{L}(q,\\boldsymbol{\\theta})$\" is equal to \"Maximizing $\\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)$\". In [2]: from kerasy.ML.MixedDistribution import MixedGaussian In [3]: # Train Data. data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = 50 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 5 ], cov = np . eye ( 2 ), size = 50 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = 50 ), ]) X , Y = data . T K = 3 In [4]: # Back Ground Color xmin , ymin = np . min ( data , axis = 0 ) - 0.3 xmax , ymax = np . max ( data , axis = 0 ) + 0.3 Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [5]: model = MixedGaussian ( K = 3 , random_state = 1234 ) model . fit ( data , memo_span = 1 ) ll_hist = [ ll for _ , _ , _ , ll in model . history ] mu_hist = [ mu for _ , _ ,( mu , _ , _ ), _ in model . history ] In [6]: plt_model = MixedGaussian ( K = 3 ) plt_model . N , plt_model . M = data . shape L_old = min ( ll_hist ) - 300 for epoch , idx ,( mu , S , pi ), ll in model . history [: - 1 ]: fig = plt . figure ( figsize = ( 12 , 8 )) ll_old = ll_hist [ epoch ]; ll_new = ll_hist [ epoch + 1 ] mu_old = mu_hist [ epoch ]; mu_new = mu_hist [ epoch + 1 ] L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 dL_old = ll_old - L_old ; dL_new = L_new - ll_old ; dll_old = ll_new - ll_old ax1 = fig . add_subplot ( 2 , 2 , 1 ) plt_model . mu = mu ; plt_model . S = S ; plt_model . pi = pi gammas = plt_model . predict ( XYs ) Zs = np . sum ( gammas , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. ax1 . pcolor ( Xs , Ys , Zs , alpha =. 5 , cmap = \"jet\" ) ax1 . scatter ( X , Y , c = idx , cmap = \"prism\" ) ax1 . set_xlim ( xmin , xmax ), ax1 . set_ylim ( ymin , ymax ), ax1 . set_title ( f \"epochs: {epoch:>02}\" , fontsize = 18 ) ax2 = fig . add_subplot ( 2 , 2 , 2 ) ax2 . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linewidth = 3 ) ax2 . axhline ( L_old , color = \"black\" , label = \"$L(q,θold)$\" , linestyle = \":\" ) ax2 . arrow ( x = 0.3 , y = L_old , dx = 0 , dy = dL_old , head_width = dL_old / 6000 , head_length = dL_old * 0.1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax2 . set_title ( f \"E step (Epoch={epoch})\" , fontsize = 18 ), ax2 . legend (), ax2 . set_xticks ([]), ax2 . set_ylim ( - 600 , - 570 ) ax3 = fig . add_subplot ( 2 , 2 , 3 ) for k in range ( K ): xb , yb = mu_old [ k ]; xa , ya = mu_new [ k ] ax3 . plot (( xb , xa ),( yb , ya ), color = \"black\" ) ax3 . scatter ( xb , yb , color = \"black\" , s = 50 ) ax3 . scatter ( xa , ya , color = \"red\" , marker = \"*\" , s = 150 ) ax3 . set_xlim ( xmin , xmax ), ax3 . set_ylim ( ymin , ymax ), ax3 . set_title ( \"θ → θnew\" ) ax3 . grid () ax4 = fig . add_subplot ( 2 , 2 , 4 ) L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 ax4 . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linestyle = \"--\" ) ax4 . axhline ( ll_new , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θnew)$\" , linewidth = 3 ) ax4 . axhline ( L_new , color = \"black\" , label = \"$L(q,θnew)$\" , linestyle = \":\" ) ax4 . arrow ( x = 0.7 , y = ll_old , dx = 0 , dy = dll_old , head_width = dll_old / 6000 , head_length = dll_old * 0.1 , fc = 'k' , ec = 'k' , length_includes_head = True ) ax4 . arrow ( x = 0.3 , y = ll_old , dx = 0 , dy = dL_new , head_width = dL_new / 6000 , head_length = dL_new * 0.1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax4 . set_title ( f \"M step (Epoch={epoch})\" , fontsize = 18 ), ax4 . legend (), ax4 . set_xticks ([]), ax4 . set_ylim ( - 600 , - 570 ) plt . tight_layout () plt . savefig ( f \"img/img{epoch:>02}\" ) L_old = L_new fig_no = 0 L_old = min ( ll_hist ) - 300 for epoch in range ( len ( model . history ) - 1 ): ll_old = ll_hist [ epoch ]; ll_new = ll_hist [ epoch + 1 ] L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 dL_old = ll_old - L_old ; dL_new = L_new - ll_old ; dll_old = ll_new - ll_old # Estep fig = plt . figure ( figsize = ( 3 , 10 )) ax = fig . add_subplot ( 1 , 1 , 1 ) ax . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linewidth = 3 ) ax . axhline ( L_old , color = \"black\" , label = \"$L(q,θold)$\" , linestyle = \":\" ) ax . arrow ( x = 0.3 , y = L_old , dx = 0 , dy = dL_old , head_width = dL_old / 60 , head_length = dL_old * 2e-1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax . set_title ( f \"E step (Epoch={epoch})\" , fontsize = 18 ), ax . legend (), ax . set_xticks ([]), ax . set_ylim ( - 600 , - 570 ) plt . savefig ( f \"img/img{fig_no:>02}\" ); fig_no += 1 plt . clf () # Mstep fig = plt . figure ( figsize = ( 3 , 10 )) ax = fig . add_subplot ( 1 , 1 , 1 ) L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 ax . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linestyle = \"--\" ) ax . axhline ( ll_new , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θnew)$\" , linewidth = 3 ) ax . axhline ( L_new , color = \"black\" , label = \"$L(q,θnew)$\" , linestyle = \":\" ) ax . arrow ( x = 0.7 , y = ll_old , dx = 0 , dy = dll_old , head_width = dll_old / 60 , head_length = dll_old * 2e-1 , fc = 'k' , ec = 'k' , length_includes_head = True ) ax . arrow ( x = 0.3 , y = ll_old , dx = 0 , dy = dL_new , head_width = dL_new / 60 , head_length = dL_new * 2e-1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax . set_title ( f \"M step (Epoch={epoch})\" , fontsize = 18 ), ax . legend (), ax . set_xticks ([]), ax . set_ylim ( - 600 , - 570 ) plt . savefig ( f \"img/img{fig_no:>02}\" ); fig_no += 1 plt . clf () L_old = L_new Section4.2 Mixture Model Implementation Gaussian Mixture Distribution k-means clustering Section4.3 Linear Regression Least Squares polynomial function we observe a real-value input variable $x$ and we wish to use this observation to predict the value of a real-valued target variable $t$. In the most simplest approach based on curve fitting, we shall fit the data using a polynomial function of the form : $$y(x,\\mathbf{w}) = w_0+w_1x+w_2x&#94;2+\\cdots+w_Mx&#94;M=\\sum_{j=0}&#94;Mw_jx&#94;j\\qquad (1.1)$$ data we are given a training set comprising $N$ observation of $x$, written $\\mathbf{X}\\equiv(\\mathbf{x_1},\\ldots,\\mathbf{x}_N)&#94;T$ with corresponding observation of the values of $t$, denoted $\\mathbf{t}\\equiv(t_1\\ldots,t_N)&#94;T$ we can difine $M$, which is the order of the polynomial. The values of the coefficients($w_j$) will be determined by fitting the polynomial to the training data. This can be done by minimizing an error function that measures the misfit between the function $y(x,\\mathbf{w})$ and the training set data points. One simple choice of error function, which is widely used, is given by the sum of the squares of the errors $$E(\\mathbf{w}) = \\frac{1}{2}\\mathrm{RSS} = \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\{y(\\mathbf{x}_n,\\mathbf{w}) - t_n\\right\\}&#94;2\\qquad (1.2)$$ (the factor of $1/2$ is included for later convenience.) Trainig Aim: find the best $\\mathbf{w}&#94;{\\star}=\\underset{w\\in\\mathbb{R}}{\\mathrm{argmin}}\\left\\{\\mathrm{RSS}(\\mathbf{w})\\right\\}$ $\\mathbf{t} = \\left(\\begin{matrix}t_1\\\\\\vdots\\\\t_N\\end{matrix}\\right),\\quad\\mathbf{X} = \\left(\\begin{matrix}x_1&#94;0&x;_1&#94;1&\\cdots&x;_1&#94;M\\\\x_2&#94;0&x;_2&#94;1&\\cdots&x;_2&#94;M\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\x_N&#94;0&x;_N&#94;1&\\cdots&x;_N&#94;M\\end{matrix}\\right),\\quad\\mathbf{w}=\\left(\\begin{matrix}w_1\\\\\\vdots\\\\w_M\\end{matrix}\\right)$ $\\mathrm{RSS}(\\mathbf{w}) = \\left(\\mathbf{t} - \\mathbf{Xw}\\right)&#94;T\\left(\\mathbf{t} - \\mathbf{Xw}\\right)$ Solution: $$ \\begin{aligned} \\frac{\\partial E(\\mathbf{w})}{\\partial\\mathbf{w}} &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\|\\mathbf{t}-\\mathbf{Xw}\\|&#94;2\\\\ &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\|\\mathbf{t}\\|&#94;2 - 2\\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{t} + \\|\\mathbf{Xw}\\|&#94;2\\right)\\\\ &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\|\\mathbf{t}\\|&#94;2 - 2\\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{t} + \\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{Xw}\\right)\\\\ &=\\frac{1}{2} \\left(-2\\mathbf{X}&#94;T\\mathbf{t} + \\left(\\mathbf{X}&#94;T\\mathbf{X} + \\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;T\\right)\\mathbf{w}\\right)\\\\ &= -\\mathbf{X}&#94;T\\mathbf{t}+\\mathbf{X}&#94;T\\mathbf{Xw}=\\mathbf{0}\\\\ \\therefore\\mathbf{w}&#94;{\\star} &= \\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{t} \\end{aligned}$$ ※ In the following programs, I use np.linalg.solve to calcurate $\\mathbf{w}&#94;{\\ast}$ equation program $$\\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)\\mathbf{w}&#94;{\\star} = \\mathbf{X}&#94;T\\mathbf{t}$$ w = np.linalg.solve(X.T.dot(X), X.T.dot(t)) In [7]: N = 15 Ms = [ 2 , 4 , 8 , 16 ] seed = 0 In [8]: # Training data. x = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = N ) Noise = np . random . RandomState ( seed ) . normal ( loc = 0 , scale = 0.1 , size = N ) t = np . sin ( 2 * np . pi * x ) + Noise In [9]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Regularized Least Square $$ \\begin{aligned} E(\\mathbf{w}) &= E_{D}(\\mathbf{w}) + \\lambda E_W(\\mathbf{w}) & (3.24)\\\\ &= \\frac{1}{2}\\mathrm{RSS} + \\lambda\\frac{1}{2}\\mathbf{w}&#94;T\\mathbf{w}\\\\ &= \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\{y(\\mathbf{x}_n,\\mathbf{w}) - t_n\\right\\}&#94;2+\\frac{1}{2}\\mathbf{w}&#94;T\\mathbf{w} & (3.27)\\\\ \\therefore\\mathbf{w}&#94;{\\star} &= \\left(\\lambda\\mathbf{I} + \\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{t} & (3.28) \\end{aligned} $$ In [10]: lambda_ = 1e-4 In [11]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( lambda_ * np . identity ( M + 1 ) + X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $,$\\lambda= {lambda_} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Section4.4 Bayesian Inference Maximal Likelihood Estimate $$ l(\\boldsymbol{\\theta}|D) = \\log L(\\boldsymbol{\\theta}|D) = \\log\\mathbb{P}(D|\\boldsymbol{\\theta})\\\\ \\hat{\\boldsymbol{\\theta}}_{\\text{ML}} = \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}l(\\boldsymbol{\\theta}|D) $$ ※ $l$: large → High probability of observing $D$ from the model $\\boldsymbol{\\theta}$ Maximum a Posteriori Estimate Maximum a posteriori estimate $$ \\begin{aligned} \\hat{\\boldsymbol{\\theta}_{\\text{MAP}}} &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}f(\\boldsymbol{\\theta}|D)\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}f(D|\\boldsymbol{\\theta})f(\\boldsymbol{\\theta})\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}\\left\\{l(\\boldsymbol{\\theta}|D) L \\log f(\\boldsymbol{\\theta})\\right\\}\\\\ \\end{aligned} $$ Posterior mean estimate $$ \\hat{\\boldsymbol{\\theta}_{\\text{PME}}} = \\int\\boldsymbol{\\theta}f(\\boldsymbol{\\theta}|D)d\\boldsymbol{\\theta} $$ Implementation of Gaussian Prior for Regression. In [12]: seed = 123 In [13]: from kerasy.ML.linear import BayesianLinearRegression from kerasy.utils.preprocessing import GaussianBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian In [14]: N = 25 ; D = 1 ; M = 25 xmin = 0 ; xmax = 1 In [15]: alpha = 1 beta = 25 In [16]: x_test = np . linspace ( xmin , xmax , 1000 ) y_test = np . sin ( 2 * np . pi * x_test ) x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 1 / beta , seed = seed ) y_train += y_noise In [17]: # transform mu = np . linspace ( xmin , xmax , M ); sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) x_train_features = phi . transform ( x_train ) x_test_features = phi . transform ( x_test ) In [18]: random_idx = np . random . RandomState ( seed ) . choice ( N , N ) In [19]: fig = plt . figure ( figsize = ( 16 , 8 )) for i , n in enumerate ([ 1 , 2 , 4 , 25 ]): ax = fig . add_subplot ( 2 , 2 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( x_train_features [ random_idx [: n ]], y_train [ random_idx [: n ]]) y_pred , y_std = model . predict ( x_test_features ) ax . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) ax . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( x_train [ random_idx [: n ]], y_train [ random_idx [: n ]], s = 150 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) ax . set_ylim ( - 1.5 , 1.5 ), ax . legend (), ax . set_title ( f \"Bayesian Linear Regression (N= {n} )\" ) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-4.html"},{"title":"レポート課題3(10/17出題)","text":"tRYlNwqCkIFlJDxP9gwvkg==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report3.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report3.html"},{"title":"連続最適化(2)制約付き最適化","text":"講師： 佐藤一誠 参考書： 最適化手法 参考書： 機械学習のための連続最適化 講義概要 等式制約付き最適化問題 ラグランジュ未定乗数法 ラグランジュ双対問題 双対変数の最適化 不等式制約付き最適化問題 制約なし最適化問題への変換 双対問題 まとめ 制約付き最適化問題(constrained optimization problem) \\(\\mathcal{X}\\subset\\mathbb{R}&#94;d\\) 上に定義される関数 \\(f:\\mathcal{X}\\rightarrow\\mathbb{R}\\) の最小値を求める。 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ &h(\\mathbf{x})\\leq\\mathbf{0} \\end{aligned} $$ \"subject to\"は、 「…を条件として」 という意味。 \\(g_i,h_i\\) は互いに 一次独立(linearly independent) であると仮定。 実行可能解(feasible solution) ：全ての制約条件を満たす \\(\\mathbf{x}\\) 凸最適化問題(convex optimization problem) ：関数 \\(f\\) が凸、集合 \\(\\mathcal{X}\\) が凸、制約条件 \\(\\mathbf{g},\\mathbf{h}\\) が凸であれば、最適値が一意に定まる。 ※ 以下、凸最適化問題を考える。 等式制約付き最適化問題 等式制約付き最適化問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ \\end{aligned} $$ \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) + c_k\\|\\mathbf{g}(x)\\|&#94;2$$ \\(c_k\\) の値を徐々に増やしていく。 $$0 < c_1 < c_2 < \\cdots$$ ラグランジュ未定乗数法 詳しくは ラグランジュ未定乗数法 に記載されているので、ここでは具体例を紹介する。 問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{min : }}&3x&#94;2 + 2y&#94;2\\\\ \\text{subject to : }&x+y=1\\\\ \\end{aligned} $$ 解答 ラグランジュ関数は、 $$L(x,y,\\lambda) = 3x&#94;2 + 2y&#94;2 + \\lambda(x+y-1)$$ となるから、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x} &= 6x+\\lambda=0 &\\therefore x = -\\frac{1}{6}\\lambda\\\\ \\frac{\\partial L}{\\partial y} &= 4y+\\lambda=0 &\\therefore y = -\\frac{1}{4}\\lambda\\\\ \\frac{\\partial L}{\\partial \\lambda} &= x+y-1=0 &\\therefore \\lambda = -\\frac{12}{5}\\\\ \\end{aligned} $$ よって、 \\((x,y) = (0.4,0.6)\\) ラグランジュ双対問題 これも、詳しくは ラグランジュ双対問題 に記載されているので、ここでは具体例を紹介する。 問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{min : }}&3x&#94;2 + 2y&#94;2\\\\ \\text{subject to : }&x+y=1\\\\ \\end{aligned} $$ 解答 ラグランジュ関数は、 $$L(x,y,\\lambda) = 3x&#94;2 + 2y&#94;2 + \\lambda(x+y-1)$$ となるから、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x} &= 6x+\\lambda=0 &\\therefore x = -\\frac{1}{6}\\lambda\\\\ \\frac{\\partial L}{\\partial y} &= 4y+\\lambda=0 &\\therefore y = -\\frac{1}{4}\\lambda \\end{aligned} $$ よって、これらを \\(L(x,y,\\lambda)\\) に代入して、 $$\\omega(\\lambda) = \\underset{x,y\\in\\mathbb{R}}{\\inf}L(x,y,\\lambda) = -\\frac{5}{24}\\lambda&#94;2-\\lambda$$ したがって、 \\(\\underset{\\lambda\\in\\mathbb{R}}{\\text{argmax}}\\omega(\\lambda) = -\\frac{12}{5}\\Longrightarrow(x,y) = (0.4,0.6)\\) 双対変数の最適化 上の問題では、双対変数 \\(\\lambda\\) の最適化問題を解析的に解けたが、解析的に解くことができない問題もある。その場合に使うのが 双対上昇法 や 乗数法 と呼ばれる 双対変数の勾配上昇 を行う手法である。 手法 数式 解説 双対上昇法 $$\\begin{aligned}\\mathbf{x}_{k+1} &= \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}L(\\mathbf{x},\\boldsymbol{\\lambda}_{k})\\\\\\boldsymbol{\\lambda}_{k+1} &= \\boldsymbol{\\lambda}_k + \\varepsilon_k\\nabla\\omega(\\mathbf{\\boldsymbol{\\lambda}}_k) \\\\&= \\boldsymbol{\\lambda}_k + \\varepsilon_k\\mathbf{g}(\\mathbf{x}_{k+1})\\end{aligned}$$ 適当な初期値から，ラグランジュ関数の最小化と双対変数の勾配上昇を交互に実行 乗数法 $$\\begin{aligned}\\mathbf{x}_{k+1} &= \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}L_c(\\mathbf{x},\\boldsymbol{\\lambda}_{k})\\\\\\boldsymbol{\\lambda}_{k+1} &= \\boldsymbol{\\lambda}_k + c\\nabla\\omega(\\mathbf{\\boldsymbol{\\lambda}}_k) \\\\&= \\boldsymbol{\\lambda}_k + c\\mathbf{g}(\\mathbf{x}_{k+1})\\end{aligned}$$ 適当な初期値から， 拡張ラグランジュ関数 の最小化と双対変数の勾配上昇を交互に実行 なお、 拡張ラグランジュ関数(augmented Lagrangian) は、以下で表される関数で、二次の項を加えることで凸性を増している。 $$L_c(\\mathbf{x},\\boldsymbol{\\lambda}) = f(\\mathbf{x}) + \\boldsymbol{\\lambda}&#94;T\\mathbf{g}(\\mathbf{x}) + \\frac{c}{2}\\|\\mathbf{g}(\\mathbf{x})\\|&#94;2$$ ※実装は レポート課題3 に記載。 不等式制約付き最適化問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&h(\\mathbf{x})\\leq\\mathbf{0}\\\\ \\end{aligned} $$ 実行可能解 \\(\\mathbf{x}\\) において \\(h_i(\\mathbf{x}) = 0\\) の時、この制約を 有効制約(active constraint) と呼ぶ。 実行可能解 \\(\\mathbf{x}\\) においてそれ以外の時、この制約を 無効制約(inactive constraint) と呼ぶ。 制約なし最適化問題への変換 障壁法(barrier method) 初期値を \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の制約なし最適化問題を解く。 $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) - c_k\\log(-h(\\mathbf{x}))$$ \\(c_k\\) の値を徐々に減らしていく。 途中の解 \\(\\mathbf{x}_{k+1}\\) が常に \\(h(\\mathbf{x}_{k+1})\\leq0\\) を満たす （つまり、実行可能領域の内側にある） ことから、 内点法(interior-point method) ともよばれる。 \\(c_k\\) の決め方が難しい。 罰則法(penalty method) 初期値を \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の制約なし最適化問題を解く。 $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) + c_k\\max(0,h(\\mathbf{x}))&#94;2$$ \\(c_k\\) の値を徐々に増やしていく。 途中の解 \\(\\mathbf{x}_{k+1}\\) が一般に \\(h(\\mathbf{x}_{k+1})>0\\) を満たす （つまり、実行可能領域の外側にある） ことから、 外点法(exterior-point method) ともよばれる。 \\(c_k\\) の決め方が難しい。 射影勾配法(projected gradient method) 勾配降下（ \\(\\tilde{\\mathbf{x}}_{k+1} = \\mathbf{x}_k-\\varepsilon_k\\nabla f(\\mathbf{x}_k)\\) ）と実行可能領域への射影（ \\(\\mathbf{x}_{k+1} = \\mathbf{P}_k\\tilde{\\mathbf{x}}_{k+1}\\) ）を繰り返す。 まとめると $$\\mathbf{x}_{k+1} = \\mathbf{P}_k\\left(\\mathbf{x}_k - \\varepsilon_k\\nabla f(\\mathbf{x}_k)\\right)$$ 射影が簡単に計算できる時、効率が良い。 双対問題 詳しくは ラグランジュ未定乗数法 に記載。 まとめ 制約付き最適化問題： $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ &h(\\mathbf{x})\\leq\\mathbf{0} \\end{aligned} $$ ラグランジュ関数： $$L\\left(\\mathbf{x},\\boldsymbol{\\lambda},\\boldsymbol{\\mu}\\right) = f(\\mathbf{x}) + \\boldsymbol{\\lambda}&#94;Tg(\\mathbf{x}) + \\boldsymbol{\\mu}&#94;Th(\\mathbf{x})$$ 双対問題： $$ \\begin{aligned} \\underset{\\boldsymbol{\\lambda,\\mu},\\ \\mathbf{x}\\in\\mathcal{X}}{\\text{maximization : }}&L\\left(\\mathbf{x},\\boldsymbol{\\lambda},\\boldsymbol{\\mu}\\right)\\\\ \\text{subject to : }&\\boldsymbol{\\mu}\\geq\\mathbf{0}\\\\ \\end{aligned} $$ KKT条件： $$ \\begin{aligned} \\begin{cases} \\nabla_{\\mathbf{x}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) = \\mathbf{0}\\\\ \\nabla_{\\boldsymbol{\\lambda}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) = \\mathbf{0} & \\boldsymbol{\\mu}&#94;{\\ast}\\geq\\mathbf{0}\\\\ \\nabla_{\\boldsymbol{\\mu}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) \\leq \\mathbf{0} & \\mu_i&#94;{\\ast}h_i(\\mathbf{x}&#94;{\\ast}) = 0,\\ \\forall i \\end{cases} \\end{aligned} $$ .prompt { /* This is for jupyter blog.*/ min-width: 0; /* This padding is tuned to match the padding on the CodeMirror editor. */ padding: 0em 0.4em 0em 0em; margin: 0px; font-family: monaco; } /*蛍光ペン(pink)*/ .marker-pink { color: #c45a5a; background: linear-gradient(transparent 70%, #ff66ff 60%); font-weight: bold; } /*蛍光ペン(blue) & hover info*/ .marker-info { color: #5C7DC4; background: linear-gradient(transparent 70%, #66FFCC 60%); font-weight: bold; position: relative; cursor: pointer; } .marker-info:hover:before { opacity: 1; z-index: 2; } .marker-info:before { content: attr(aria-label); opacity: 0; position: absolute; top: 30px; right: -90px; font-size: 14px; width: 300px; padding: 10px; color: #fff; background-color: #555; border-radius: 3px; pointer-events: none; } /* 枠囲み */ .frame { border: solid 1.0px #000000; padding: 0.5em 1em; margin: 2em 0; } /* 暗記用 question box */ span .qbox{ display: none; } span.qbox-wrapper:hover .qbox-default{ display: none; } span.qbox-wrapper:hover .qbox{ display: inline; } .qbox-wrapper{ font-weight: bold; padding: 5px 10px; border-radius: 5px; border: solid 2px #000000; margin: 5px } .qbox-wrapper:hover{ text-shadow: 0px 0px 6px rgba(255, 255, 255, 1); -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); transition: all 0.4s ease 0s; } /* 画像吹き出し */ .balloon { display: table; width: 100%; } .balloon_img { display: table-cell; vertical-align: middle; width: 50%; padding-right: 10px; } .balloon_comment { border: #83274e solid 4px; position: relative; background: #fff; padding: 12px; border-radius: 13px; display: block } .balloon_comment::before { content: \"\"; position: absolute; border-right: 23px solid #83274e; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -23px; } .balloon_comment::after { content: \"\"; position: absolute; border-right: 24px solid #fff; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -17px; } if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-3.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-3.html"},{"title":"RNA-seqデータ解析（バッチスクリプト版）","text":"blTwPG/au171wY7lv0uqCQ==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-12.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-12.html"},{"title":"RNA-seqデータ解析（対話モード版）","text":"H3eqfc83J4GFuawqNod/eQ==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-11.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-11.html"},{"title":"ゲノム解析ツールの環境構築","text":"AGOy05zZXWTcHTQgSUix7Q==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-10.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-10.html"},{"title":"逐次最小問題最適化法(SMO)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt 二次計画問題を解くアルゴリズム概観 アルゴリズム 説明 伝統的な二次計画法のアルゴリズム 計算コスト及びメモリ使用量の面で現実的には厳しい。 チャンキング(chunking) カーネル行列からラグランジュ乗数が $0$ となるデータに対応する行および列を取り除いても、ラグランジュ関数が不変であることを利用し、元々の二次計画問題は、より次元数の小さな問題を順番に解くことで、最終的には $0$ とならないラグランジュ乗数だけを残す、という問題に帰着する。 射影共役勾配法(projected conjugate gradient method) チャンキングを実装する手法 分解法(decomposition method) チャンキングと同様 サイズの小さな二次計画問題を繰り返し解く という手法だが、ここの部分問題の大きさが一定であるため、任意の大きさのデータに対応できる。 逐次最小問題最適化法(SMO;sequential minimal optimization) 分解法の計算コストを削減した手法。たった２つのラグランジュ乗数を含む部分問題を逐次解いていくことで最終的な解を得る。 逐次最小問題最適化法(SMO;sequential minimal optimization) ラグランジュ双対問題 を以下のように定義する。 $$ \\begin{aligned} \\tilde{L}(\\mathbf{a}) &=\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)& (7.10)\\\\ a_n & \\geq 0,\\quad n=1,\\ldots,N & (7.11)\\\\ \\sum_{n=1}&#94;Na_nt_n &= 0 & (7.12) \\end{aligned} $$ 逐次最小問題最適化法(SMO;sequential minimal optimization) は反復法である。 適当な初期値 $\\mathbf{a}&#94;{(0)}$ から出発して、更新 $\\mathbf{a}&#94;{(k)} \\rightarrow \\mathbf{a}&#94;{(k+1)}$ を繰り返す。 この際、 １度には2つの成分しか動かさない。 ここで、$a_p$ と $a_q$ だけ動かすことを考える。 （他の $a_n$ は定数とみなす） この時、制約条件より $$ a_pt_p + a_qt_q = 0-\\sum_{n\\neq p,q} a_nt_n = \\mathrm{const.}$$ が成立する。したがって、 $$ \\frac{\\partial a_q}{\\partial a_p} = -\\frac{t_p}{t_q} =-t_pt_q \\cdots (\\ast)$$ と解析的に偏微分を求めることが可能である。 目的関数 $\\tilde{L}$ の変化量 以下、$K_{ij} = k\\left(\\mathrm{x}_i,\\mathrm{x}_j\\right)$ とおく。ここで、 $$a_p\\mapsto a_p+\\Delta_p, \\quad a_q\\mapsto a_q+\\Delta_q$$ と更新した時、目的関数 $\\tilde{L}$ の変化量 $\\Delta\\tilde{L}$ は、 $$ \\begin{aligned} \\Delta\\tilde{L} &= \\Delta_p + \\Delta_q - \\Delta_pt_p\\sum_{n=1}&#94;Na_nt_nk(\\mathbf{x}_p,\\mathbf{x}_n) - \\Delta_qt_q\\sum_{n=1}&#94;Na_nt_nk(\\mathbf{x}_q,\\mathbf{x}_n)\\\\ &-\\frac{1}{2}\\left[\\Delta_p&#94;2k(\\mathbf{x}_p,\\mathbf{x}_p) + 2\\Delta_p\\Delta_qt_pt_qk(\\mathbf{x}_p,\\mathbf{x}_q) + \\Delta_q&#94;2k(\\mathbf{x}_q,\\mathbf{x}_q)\\right] \\end{aligned} $$ となる。 $(\\ast)$ より $\\Delta_q = -t_pt_q\\Delta_p$ である。 $t_p=t_q(\\Longleftrightarrow\\Delta_q=-\\Delta_p)$ の時と $t_p\\neq t_q$ の時に場合分けをし、それぞれ $\\Delta_p$ で変化量を偏微分して $0$ とおく。 結果は共に等しく、以下で表される。 $$ \\begin{aligned} \\Delta_p &= \\frac{1-t_pt_q + t_p\\left(\\sum_{n=1}&#94;Na_nt_nK_{qn} - \\sum_{n=1}&#94;Na_nt_nK_{pn}\\right)}{K_{pp} - 2K_{pq} + K_{qq}}\\\\ &= \\frac{1-t_pt_q + t_p\\left(y(\\mathbf{x_q}) - y(\\mathbf{x}_q)\\right)}{K_{pp} - 2K_{pq} + K_{qq}}\\\\ \\end{aligned} $$ クリッピング この時、 $t_pa_p+t_qa_q=c$ $a_p\\geq0$ $a_q\\geq0$ が成立していなければならないので、以下を満たすように $\\Delta_p$ の クリッピング を行う必要がある。 $t_p=t_q$ のときは $ 0 \\leq a_p + \\Delta_p \\leq c/t_p$ $t_p=-t_q$ のときは $ \\mathrm{max}\\{0,c/t_p\\}\\leq a_p+\\Delta_p$ 変数の選択方法 最後に、動かす $\\mu_p,\\mu_q$ の選択基準であるが、SMO法の発見者である $John C. Platt$ の論文に従うならば以下の様になる。 $KTT$条件を破る$a_p$を$1$つ目に選ぶ。 続いて、$\\left|y\\left(\\mathbf{x_q}\\right)-y\\left(\\mathbf{x_p}\\right)\\right|$ が最大となる$a_p$を次に選ぶ。 これは、$\\left|y\\left(\\mathbf{x_q}\\right)-y\\left(\\mathbf{x_p}\\right)\\right|$ が大きければそれだけステップ幅も大きくなるため収束が早くなるというヒューリスティックス（直感）である。 これを繰り返して、$\\tilde{L}$ が収束するまで反復を繰り返せば学習完了である。 実装例 kerasy.ML.svm.BaseSVM に記載。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-5.html"},{"title":"ラグランジュ双対問題","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) はじめに このノートは、 Qiita記事『ラグランジュ双対問題について解説』 を引用しています。 ラグランジュ双対関数 ラグランジアン 次の最小化問題を考える. $$ \\begin{aligned} \\min_{x\\in\\mathbb{R}&#94;n} &~ f_0(x)\\\\ \\mathrm{s.t.} &~ f_i(x)\\le 0,~ i=1,\\ldots,m\\\\ &~ h_i(x)=0, ~i=1,\\ldots, p \\end{aligned} $$ 実行可能領域は 空でない とする この最適化問題の 最適値 を \\(p&#94;\\star\\) と書く 凸性は特に仮定しない 主問題 という ラグランジアンは次のように定義される。 $$L(x, \\lambda, \\nu):=f_0(x)+\\sum_{i=1}&#94;m\\lambda_i f_i(x)+\\sum_{i=1}&#94;p\\nu_i h_i(x)$$ \\(\\lambda_i, \\nu_i\\) はラグランジュ未定乗数 ラグランジュ双対関数 ラグランジュ双対関数は次のように定義される. $$ \\begin{aligned} g(\\lambda,\\nu)&:=\\inf_{x\\in D} L(x, \\lambda, \\nu)\\\\ &=\\inf_{x\\in D} \\left(f_0(x)+\\sum_{i=1}&#94;m\\lambda_i f_i(x)+\\sum_{i=1}&#94;p\\nu_i h_i(x)\\right) \\end{aligned} $$ \\(D:=\\bigcap_{i=0}&#94;m \\mathrm{dom}(f_i) \\cap \\bigcap_{i=1}&#94;p \\mathrm{dom}(h_i)\\) 双対関数は, \\((\\lambda,\\nu)\\) のアフィン関数の各点でのinfになっているため, 必ずconcave(上に凸)となる (もとの問題が凸でなくても) 証明してみた: $$ \\begin{aligned} & g(t\\lambda_a+(1-t)\\lambda_b, t\\nu_a+(1-t)\\nu_b)\\\\ =&\\inf_{x\\in\\mathcal{D}}\\left(tL(x,\\lambda_a,\\nu_a)+(1-t)L(x,\\lambda_b,\\nu_b)\\right)\\\\ \\ge& t\\inf_{x\\in\\mathcal{D}}L(x,\\lambda_a,\\nu_a)+(1-t)L(x,\\lambda_b,\\nu_b)\\\\ =& tg(\\lambda_a,\\nu_a)+(1-t)g(\\lambda_b,\\nu_b) \\end{aligned} $$ 最適値の下限 任意の \\(\\lambda\\ge0, \\nu\\) に対して, 次が成り立つ. \\($g(\\lambda,\\nu)\\le p&#94;\\star\\) 証明: \\(\\tilde{x}\\) を実行可能解とする: \\(f_i(\\tilde{x})\\le 0, h_i(\\tilde{x}) = 0\\) \\(\\lambda\\ge 0\\) を仮定 このとき, \\(L(\\tilde{x},\\lambda,\\nu)\\) の値は, \\(f_0(\\tilde{x})\\) でおさえられる: $$ L(\\tilde{x},\\lambda,\\nu)=f_0(\\tilde{x})+\\underbrace{\\sum_{i=1}&#94;{m}\\lambda_if_i(\\tilde{x})}_{\\le0}+\\underbrace{\\sum_{i=1}&#94;{p}\\nu_ih_i(\\tilde{x})}_{=0}\\le f_0(\\tilde{x}) $$ ゆえに, \\(g(\\lambda, \\nu)\\) は \\(f_0(\\tilde{x})\\) でおさえられる: $$ \\therefore~g(\\lambda, \\nu)=\\inf_{x\\in\\mathcal{D}}L(x,\\lambda,\\nu)\\le L(\\tilde{x},\\lambda,\\nu)\\le f_0(\\tilde{x}) $$ 任意の \\(\\tilde{x}\\) に対して, \\(g(\\lambda, \\nu)\\le f_0(\\tilde{x})\\) が成り立つため, \\(g(\\lambda, \\nu)\\le p&#94;\\star\\) が成り立つ. 結論: 双対関数の値は, 主問題の最適値を超えない 線形近似による解釈 元の主問題と等価な次の最小化問題を考える. $$ \\min_{x}~f_0(x)+\\sum_{i=1}&#94;{m}I_-(f_i(x))+\\sum_{i=1}&#94;{p}I_0(h_i(x)) $$ ただし, \\(I_{-},I_{0}\\) は 指示関数 : $$ I_-(u):=\\begin{cases} 0&u\\le 0\\\\ \\infty& u>0 \\end{cases},~~~ I_0(u):=\\begin{cases} 0&u = 0\\\\ \\infty& u\\ne 0 \\end{cases} $$ 最小化するのが目的であるが, 指示関数は制約を満たさないと無限大になってしまう. この指示関数は, 制約違反に対する不満度 を表していると解釈できる. ここで, \\(I_-(u)\\) を \\(\\lambda_i u (\\lambda_i\\ge 0)\\) \\(I_0(u)\\) を \\(\\nu_iu\\) というように指示関数を近似する. $$ \\min_{x}~L(x,\\lambda,\\nu)=f_0(x)+\\sum_{i=1}&#94;{m}\\lambda_i f_i(x)+\\sum_{i=1}&#94;{p}\\nu_i h_i(x) $$ これは制約違反をソフトに近似したものと考えられる もちろん, 制約を違反するほど不満度は上昇するようになっている 不等式制約に関して, 違反しているとき \\(f_i(x)>0\\) であり, \\(\\lambda_if_i(x)\\ge0\\) 任意の \\(u\\) に関して, \\(\\lambda_iu \\le I_-(u)\\) と \\(\\nu_iu \\le I_0(u)\\) が成り立つため, 双対関数が元の主問題の下限を与えることがわかる 共役関数 \\(f\\) の共役関数 \\(f&#94;\\ast\\) は次で定義される. $$ f&#94;*(y)=\\sup_{x\\in\\mathrm{dom} f}(y&#94;\\top x-f(x)). $$ 共役関数と双対問題には密接な関係がある. ( フェンシェル双対定理 ) たとえば, 機械学習のよくある形 $$ \\min_{w\\in\\mathbb{R}&#94;d} f(Xw)+g(w) $$ の双対問題は, $$ \\max_{\\alpha\\in\\mathbb{R}&#94;n} -f&#94;\\ast(-\\alpha)-g&#94;\\ast(X&#94;\\top\\alpha) $$ というように共役関数を使って表現できる. そのため, 凸共役 を覚えておけば, 形式的に双対問題を導出できる. 証明は簡単で, ラグランジアン \\(L(w,z,\\alpha)=f(z)+g(w)+\\alpha&#94;\\top(z-Xw)\\) を考えて, 双対関数の定義にしたがって \\(w\\in\\mathbb{R}&#94;d,z\\in\\mathbb{R}&#94;n\\) に関して最小化するだけだ. ちなみに, このとき最適解 \\(w&#94;\\star,\\alpha&#94;\\star\\) に関して $$ w&#94;\\star \\in \\partial g&#94;\\ast(X&#94;\\top \\alpha&#94;\\star), \\quad \\alpha&#94;\\star \\in -\\partial f(Xw&#94;\\star) $$ が成立する (KKT条件). ラグランジュ双対問題 双対関数から双対問題へ. ラグランジュ双対問題 ここまでで, 双対関数が主問題の下限を与えることを示した. 自然な疑問は, 「ラグランジュ双対関数から得られる最も良い下限はどれくらいなのか?」ということだ. 最も良い下限は次の最大化問題を解くことで得られる. $$ \\begin{aligned} \\max_{\\lambda,\\nu}~&g(\\lambda,\\nu)\\\\ \\mathrm{s.t.} ~&\\lambda\\ge0 \\end{aligned} $$ $ これは, ラグランジュ双対問題 と呼ばれる 双対実行可能領域: \\((\\lambda,\\nu)\\) に関して, \\(\\lambda\\ge0\\) かつ \\(g(\\lambda,\\nu)>-\\infty\\) \\((\\lambda&#94;\\star,\\nu&#94;\\star)\\) : 双対問題の最適解 \\(d&#94;\\star\\) : 双対問題の最適値 双対問題は必ず凸最適化問題 目的関数が必ずconcaveで, 制約が凸であるため これは, 主問題が凸最適化でなくても成り立つ 弱双対性 $$ d&#94;\\star\\le p&#94;\\star $$ 主問題の凸性にかかわらず, 成り立つ この不等式は, \\(p&#94;\\star, d&#94;\\star\\) が発散しないときに成り立つ \\(p&#94;\\star - d&#94;\\star\\) を 双対ギャップ という よく最適化アルゴリズムの停止条件に使われる \\(p&#94;\\star\\) を求めるのことが難しいときに \\(d&#94;\\star\\) を求めることで, \\(p&#94;\\star\\) の下限を知ることができる 双対問題は必ず凸であるため, 多くの場合効率的に解ける 強双対性 $$ d&#94;\\star=p&#94;\\star $$ 主問題の最適値が双対問題の最適値と一致するという性質 強双対性は常には成り立たない もし主問題が凸, すなわち: $$ \\begin{aligned} \\min_{x\\in\\mathbb{R}&#94;n} &~ f_0(x)\\\\ \\mathrm{s.t.} &~ f_i(x)\\le 0, ~i=1,\\ldots,m\\\\ &~ Ax=b \\end{aligned} $$ で \\(f_0,\\ldots,f_m\\) が 凸なら, たいていは(いつもではない)強双対性が成り立つ. たとえば, SVMの最適化問題は凸であり, 強双対性が成り立つため, 主問題/双対問題のどちらを解いてもよい. スレーター条件 次を満たすような \\(x\\in\\mathrm{relint}(D)\\) が存在することをいう. $$ f_i(x)<0,~i=1,\\ldots,m,~~~Ax=b $$ $ 主問題が凸でスレーター条件を満たすとき, 強双対性が成り立つ スレーター条件は強双対性の十分条件である (必要十分ではない) もし, \\(f_1,\\ldots,f_k\\) がアフィンなら, より弱い条件が成り立てばよい: $$ f_i(x)\\le 0,~i=1,\\ldots,k,~~~f_i(x)<0,~i=k+1,\\ldots,m,~~~Ax=b $$ 言い換えれば, アフィンの不等式制約は等号を含んでもよい 補足: int(内部)とrelint(相対的内部) \\(\\mathrm{int}(S)\\) : Sに含まれる最大開集合 Sから境界上の点を取り除いたもの \\(\\mathrm{relint}(S)\\) : Sによって拘束される線形空間上で, Sから境界上の点を取り除いたもの. intとrelintの違いのイメージとしては, まっすぐな下敷きのような平面を考えたとき, intは下敷きの平面ごと取り除いてしまい空集合になるのに対して, relintは下敷きの縁を削って残った部分. Example1 \\(S=\\lbrace(x_1,x_2)\\mid 0\\le x_1\\le 1,x_2=0\\rbrace\\) $$ \\mathrm{int}(S)=\\emptyset, \\mathrm{relint}(S)=\\{(x_1,x_2)\\mid 0 < x_1 < 1,x_2=0\\}, (\\mathrm{aff}(S)=\\{(x_1,x_2)\\in\\mathbb{R}&#94;2\\mid x_2=0\\}) $$ Example2 \\(S= \\lbrace (x_1,x_2)\\mid 0\\le x_1\\le 1,0\\le x_2\\le 1\\rbrace\\) $$ \\mathrm{int}(S)=\\mathrm{relint}(S)=\\{(x_1,x_2)\\mid 0 < x_1 < 1,0<x_2<1\\}, (\\mathrm{aff}(S)=\\{(x_1,x_2)\\in\\mathbb{R}&#94;2\\}) $$ 最適性条件 特に主問題の凸性を仮定しない. 相補性条件 特に, 強双対性条件を満たすと仮定すると, $$ \\begin{aligned} f_0(x&#94;\\star)&=g(\\lambda&#94;\\star,\\nu&#94;\\star)\\\\ &=\\inf_{x\\in D} \\left(f_0(x)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star h_i(x)\\right)\\\\ &\\le f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star h_i(x&#94;\\star)\\\\ &\\le f_0(x&#94;\\star) \\end{aligned} $$ 1行目: 強双対性 2行目: 双対関数の定義 3行目: \\(\\inf\\) の定義 4行目: \\(\\lambda_i&#94;\\star\\ge0, f_i(x&#94;\\star)\\le0, ~i=1,\\ldots,m\\) と \\(h_i(x&#94;\\star)=0, ~i=1,\\ldots,p\\) 1,3行目と3,4行目を考慮すると, $$ \\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x&#94;\\star)=0. $$ 和の各項は非負であるため, $$ \\lambda_i&#94;\\star f_i(x&#94;\\star)=0,~~~i=1,\\ldots,m. $$ これを相補性条件という もし \\(\\lambda_i&#94;\\star>0\\) なら, \\(f_i(x&#94;\\star)=0\\) もし \\(f_i(x&#94;\\star)<0\\) なら, \\(\\lambda_i&#94;\\star=0\\) KKT条件 (Karush-Kuhn-Tucker条件) 強双対性を仮定すると, \\(x&#94;\\star\\) は \\(L(x,\\lambda&#94;\\star,\\nu&#94;\\star)\\) を最小化するため, \\(x&#94;\\star\\) における勾配は0である: $$ \\nabla f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star \\nabla f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star\\nabla h_i(x&#94;\\star)=0 $$ ゆえに, 最適解で成り立つ式を列挙すると: \\(f_i(x&#94;\\star)\\le 0,~i=1,\\ldots,m\\) \\(h_i(x&#94;\\star)= 0,~i=1,\\ldots,p\\) \\(\\lambda_i\\ge0,~i=1,\\ldots,m\\) \\(\\lambda_i f_i(x&#94;\\star)= 0,~i=1,\\ldots,m\\) \\(\\nabla f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star \\nabla f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star\\nabla h_i(x&#94;\\star)=0\\) これがいわゆる KKT条件 である. (必要条件) まとめると, 強双対性を満たすなら, 最適解において主変数と双対変数はKKT条件を満たさなければならない. 主問題が凸であるとき, KKT条件は十分条件にもなる. つまり, ある点 \\(\\tilde{x},\\tilde{\\lambda}, \\tilde{\\nu}\\) がKKT条件を満たすなら, \\(\\tilde{x}=x&#94;\\star, \\tilde{\\lambda}=\\lambda&#94;\\star, \\tilde{\\nu}=\\nu&#94;\\star\\) . 十分条件の証明: $$ \\begin{aligned} g(\\tilde{\\lambda},\\tilde{\\nu})&=L(\\tilde{x},\\tilde{\\lambda},\\tilde{\\nu})\\\\ &= f_0(\\tilde{x})+\\sum_{i=1}&#94;m\\tilde{\\lambda}_i f_i(\\tilde{x})+\\sum_{i=1}&#94;p\\tilde{\\nu}_i h_i(\\tilde{x})\\\\ &= f_0(\\tilde{x}) \\end{aligned} $$ 1行目: \\(\\tilde{x}\\) がKKT条件の最後の条件を満たすため 主問題が凸であるため, \\(L(x,\\tilde{\\lambda},\\tilde{\\nu})\\) は \\(x\\) に関して凸である ( \\(\\because\\tilde{\\lambda}_i\\ge0\\) ) \\(\\therefore~L\\) を最小化する \\(x\\) は, 勾配が0である 2行目: ラグランジアンの定義 3行目: \\(\\tilde{x}\\) がKKT条件の2つ目と4つ目を満たすため この式は, 双対ギャップが0であることを意味するため, \\(\\tilde{x},\\tilde{\\lambda}, \\tilde{\\nu}\\) は最適解である. 結論: スレーター条件を満たすとき, KKT条件は最適性の必要十分条件となる if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-4.html"},{"title":"サポートベクターマシーン(SVM)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: seed = 0 サポートベクターマシーン(SVM) マージン最大化 に基づく線形識別器 カーネル関数と組み合わせることによって非線形な識別も可能 サンプル間の類似度にしか依存しない （→非ベクトルデータの分類にも適用可能 ） まとめ マージン最大化 という方針で誤差関数を定義する。 汎化性能を高めるために、 スラック変数 を導入して ソフトなマージン最大化に緩和 する ラグランジュ未定乗数法 を用いてラグランジュ関数を得る。 各パラメータについて微分する。 ラグランジュ関数に代入して 双対問題 を得る。 SMO法 などを用いて二次計画問題である双対問題を解く。 無効制約のデータ点は識別関数に影響しなくなる。 （SVMが疎になる。） マージン最大化 「個々のデータに関して確率計算をし、何らかの識別面を求める」 のではなく、 「汎化性能の最も高い識別面を直接考える」 そこで、 「マージン最大化」 という方針で識別面を最適化する。（正則化理論・VC理論により正当化されている。） 最も近いデータ $\\phi(\\mathbf{x}_n)$ までの距離（ マージン ）が最大となるような識別面を選ぶ。（ここでは、距離＝ユークリッド距離とする。） 識別面からちょうどマージンの分だけ離れた面上に乗る特徴ベクトル（一般に複数）を、(広義の) サポートベクトル (support vector) と呼ぶ。 学習法の定式化（2クラス分類） ※ 二クラスが線形分離可能であると仮定する。 線形識別関数が $y(\\mathbf{x}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x})+b$ で表され、$y(\\mathbf{x})$ の正負でクラスを識別するとする。 $y(\\mathbf{x})>0$ の時 $t=1$ $y(\\mathbf{x})<0$ の時 $t=-1$ したがって、 $t_ny(\\mathbf{x}_n)>0$ が全てのデータ $(\\mathbf{x}_n,t_n)$ に対して成り立つ （∵特徴空間で線形分離可能） 学習の目的は「パラメータ $\\mathbf{w}$ と $b$ を決定すること」。 データと識別面の最小距離は $1 / \\|\\mathbf{w}\\|$ で表される。（理由は以下） ※ 記述を簡単にするために線形識別問題の場合で考えるが、非線形写像 $\\phi$ を通しても同様の議論が成り立つ。 点 $\\mathbf{x}_n$ から識別面に下ろした垂線の足を $\\mathbf{x}_{n\\perp}$ 点 $\\mathbf{x}_n$ から識別面までの符号付き距離を $d_n$ と定義すると、 $\\mathbf{w}$ が識別面の法ベクトルであるから、 $\\mathbf{x}_{n\\perp} = \\mathbf{x}_n - d_n\\frac{\\mathbf{w}}{\\|\\mathbf{w}\\|}$ と表せる。 $\\mathbf{x}_{n\\perp}$ は識別面上にあるので、$\\mathbf{w}&#94;T\\mathbf{x}_{n\\perp} + b = 0$ が成り立つ。 したがって、 $$\\mathbf{w}&#94;T\\left(\\mathbf{x}_n - d_n\\frac{\\mathbf{w}}{\\|\\mathbf{w}\\|}\\right) + b = 0\\qquad \\therefore d_n = \\frac{\\mathbf{w}&#94;T\\mathbf{x}_n + b}{\\|\\mathbf{w}\\|}$$ として距離 $d_n$ が定義できる。ここで、$(\\mathbf{w},b)\\rightarrow(k\\mathbf{w},kb)$ としても $d_n$ の値は不変なので、 $$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n + b \\right)= 1\\qquad (7.4)$$ とスケーリングしても一般性を失わない。 なお、 このスケーリング下では、全てのデータ $\\mathbf{x}_n$ に対して $$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n + b \\right) \\geq 1\\qquad (7.5)$$ が成り立つ。 ここまでをまとめると、 マージン最大 は、 『$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n+b\\right)\\geq1\\quad(i=1,\\ldots,n)$ という条件下で、$\\frac{1}{2}||\\mathbf{w}||&#94;2$ を最小化する問題』 であると言える。 この制約付き最適化問題を解くために、$(7.5)$ の各制約式ごとにラグランジュ乗数 $a_n\\geq0$ を導入すると、次のラグランジュ関数が得られる。 $$L(\\mathbf{w},b,\\mathbf{a}) = \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2 - \\sum_{n=1}&#94;{N}a_n\\left\\{t_n\\left(\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n) + b\\right) - 1\\right\\}\\qquad (7.7)$$ よって、$\\mathbf{w},b$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) =0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) & (7.8)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_nt_n = 0 \\quad\\therefore\\sum_{n=1}&#94;Na_n&#94;{\\ast}t_n = 0 & (7.9)\\\\ \\end{aligned} $$ が得られる。これらの結果を $(7.7)$ に代入して $\\mathbf{w},b$ を消去すると、元の問題は以下の 双対問題 に変換される。 $$ \\tilde{L}(\\mathbf{a}) =\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.10)$$ なお、$\\mathbf{a}$ は以下の制約を満たす。 $$ \\begin{aligned} a_n & \\geq 0,\\quad n=1,\\ldots,N & (7.11)\\\\ \\sum_{n=1}&#94;Na_nt_n &= 0 & (7.12) \\end{aligned} $$ また、カーネル関数 $k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ は、$k(\\mathbf{x},\\mathbf{x}&#94;{\\prime}) = \\phi(\\mathbf{x})&#94;T\\phi(\\mathbf{x})$ と定義される。 この双対問題は二次計画問題であり、 逐次最小問題最適化法(SMO;sequential minimal optimization) などで解くことができる。 なお、今回の場合、 制約条件が全て線形 であることから 実行可能域が凸領域 であることがわかるので、 任意の局所解が大局解になる。 一旦最適な $\\mathbf{a}$ が求まると、識別関数 $y(\\mathbf{x})$ は、 $$y(\\mathbf{x}) = \\mathbf{w}&#94;{\\ast T}\\phi(\\mathbf{x})+b = \\sum_{n=1}&#94;N a_nt_nk(\\mathbf{x},\\mathbf{x}_n) + b \\qquad (7.13)$$ として表すことができる。ここで、 KKT条件より $a_n=0\\Leftrightarrow t_ny(\\mathbf{x}_n)-1>0$ のデータは識別関数に影響しないので、計算から除外することができる。（SVMが疎になる理由） なお、バイアスパタメータ $b$ は、任意のサポートベクトル $\\mathbf{x}_n$ が $t_ny(\\mathbf{x}_n) = 1$ を満たすことから、 $$ \\begin{aligned} &t;_n\\left(\\sum_{m\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m) + b\\right) = 1 & (7.17)\\\\ &\\therefore b&#94;{\\ast}= \\frac{1}{N_{\\mathcal{S}}}\\sum_{n\\in\\mathcal{S}}\\left(t_n-\\sum_{n\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\right)&(7.18) \\end{aligned} $$ として求めることができる。（数値計算の誤差の影響を小さくするため、$(7.17)$ の両辺に $t_n$ をかけ、全てのサポートベクトルで平均をとった。 In [3]: from kerasy.ML.svm import hardSVC In [4]: n_cls1 = 20 ; n_cls2 = 20 N = n_cls1 + n_cls2 In [5]: train_x = np . concatenate ([ np . random . RandomState ( seed ) . normal ( loc = [ 0.5 , 0 ], scale = [ 0.2 , 0.4 ], size = ( n_cls1 , 2 )), np . random . RandomState ( seed ) . normal ( loc = [ - 0.5 , 0 ], scale = [ 0.2 , 0.4 ], size = ( n_cls2 , 2 )) ]) train_y = np . concatenate ([ np . ones ( shape = n_cls1 ), - np . ones ( shape = n_cls2 ) ]) In [6]: X , Y = np . meshgrid ( np . linspace ( - 1 , 1 , 100 ), np . linspace ( - 1 , 1 , 100 )) In [7]: kernels = [ \"linear\" , \"polynomial\" , \"gaussian\" , \"sigmoid\" , \"laplacian\" , \"inverse_multiquadric\" ] In [8]: n_fig = len ( kernels ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i , kernel in enumerate ( kernels ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) model = hardSVC ( kernel = kernel ) model . fit ( train_x , train_y , max_iter = 1500 , sparse_memorize = False ) Z = np . vectorize ( lambda x , y : model . predict ( np . array ([ x , y ]) . reshape ( 1 , - 1 )))( X , Y ) == 1 ax . pcolor ( X , Y , Z , alpha = 0.3 ) for i in range ( N ): alpha = 1 if i in model . isSV () else 0.3 color = \"red\" if train_y [ i ] == 1 else \"blue\" ax . plot ( train_x [ i , 0 ], train_x [ i , 1 ], marker = \"o\" , color = color , markersize = 10 , alpha = alpha ) ax . set_title ( f \" {kernel} kernel\" ) ax . set_xlim ( - 1 , 1 ), ax . set_ylim ( - 1 , 1 ) plt . tight_layout () plt . show () ソフトマージン ここまで、 「二クラスが線形分離可能である」 という仮定を置いていたが、実際の問題では クラスの分布が重なる場合 があり、そのような場合訓練データを完全に分離する解が汎化能力に優れるとは限らない（というより、過学習する。） そこで、各学習データ $(\\mathbf{x}_n,t_n)$ に対して、 スラック変数 (slack variable) $\\xi_n\\geq 0$ を導入して、 $$ t_ny(\\mathbf{x}_n) \\geq 1 \\Longrightarrow t_ny(\\mathbf{x}_n) \\geq 1 - \\xi_n \\qquad (7.20)$$ と条件を緩める。 （ハードマージンの制約のソフトマージンへの緩和） つまり、 $\\xi_n > 1$ となるデータは誤識別している事になる。 ここでの目標は 『マージンよりも内側（$\\xi_n>0$）のデータ $n$ に対してソフトにペナルティを与えつつマージンを最大化する』 ことである。したがって、次の目的関数を最小化する。 $$C\\sum_{n=1}&#94;N\\xi_n + \\frac{1}{2}\\|\\mathbf{x}_n\\| \\qquad (7.21)$$ なお、$C>0$ は スラック変数を用いて表されるペナルティとマージンの大きさの間の トレードオフを制御するパラメータ である。 したがって、この最小化問題のラグランジュ関数は、新たにラグランジュ乗数 $\\{\\mu_n\\}$ を導入して以下のようになる。 $$L(\\mathbf{w},b,\\boldsymbol{\\xi},\\mathbf{a},\\boldsymbol{\\mu}) = \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2 + C\\sum_{n=1}&#94;N\\xi_n - \\sum_{n=1}&#94;{N}a_n\\left\\{t_n\\left(\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n) + b\\right) - 1 + \\xi_n\\right\\} - \\sum_{n=1}&#94;N\\mu_n\\xi_n\\qquad (7.22)$$ 先程同様 $\\mathbf{w},b,\\xi_n$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) =0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) & (7.29)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_nt_n = 0 \\quad\\therefore\\sum_{n=1}&#94;Na_n&#94;{\\ast}t_n = 0 & (7.30)\\\\ \\frac{\\partial L}{\\partial \\xi_n} &= C-a_n-\\mu_n \\quad\\therefore a_n = C-\\mu_n & (7.31) \\end{aligned} $$ が得られる。これらの結果を $(7.22)$ に代入すると、以下の 双対形のラグランジュ関数 が得られる。 $$ \\tilde{L}(\\mathbf{a}) =\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.32)$$ これは、先程の $(7.10)$ と同様の形である。なお、制約式は $$ \\begin{aligned} &a;_n \\geq 0,\\mu_n\\geq 0 \\quad n=1,\\ldots,N\\\\ &\\therefore 0\\leq a_n \\leq C & (7.33)\\\\ &\\sum_{n=1}&#94;Na_nt_n = 0 & (7.34) \\end{aligned} $$ である。 なお、バイアスパタメータ $b$ は、サポートベクトルは $a_n>0$ を満たすが、KKT条件より $a_n$ $\\mu_n$ $\\xi_n$ 説明 $a_n=0$ 識別関数に影響を及ぼさない。 $a_n $\\mu_n>0$ $\\xi_n=0$ ちょうどマージン境界上ある。 $a_n=C$ $\\mu_n=0$ $\\xi_n>0$ マージン内に侵入している。 となることから、$0 $$ \\begin{aligned} &t;_n\\left(\\sum_{m\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m) + b\\right) = 1 & (7.36)\\\\ &\\therefore b&#94;{\\ast}= \\frac{1}{N_{\\mathcal{M}}}\\sum_{n\\in\\mathcal{M}}\\left(t_n-\\sum_{n\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\right)&(7.37) \\end{aligned} $$ として求めることができる。 In [9]: from kerasy.ML.svm import SVC In [10]: train_x = np . concatenate ([ np . random . RandomState ( seed ) . normal ( loc = [ 0.2 , 0.2 ], scale = [ 0.2 , 0.4 ], size = ( n_cls1 , 2 )), np . random . RandomState ( seed ) . normal ( loc = [ - 0.2 , - 0.2 ], scale = [ 0.3 , 0.2 ], size = ( n_cls2 , 2 )) ]) train_y = np . concatenate ([ np . ones ( shape = n_cls1 ), - np . ones ( shape = n_cls2 ) ]) In [11]: params = [ ( 1e-2 , 1e-2 ),( 1e-2 , 1e0 ),( 1e-2 , 1e2 ), ( 1e1 , 1e-2 ),( 1e1 , 1e0 ),( 1e1 , 1e2 ), ( 1e4 , 1e-2 ),( 1e4 , 1e0 ),( 1e4 , 1e2 ), ] In [12]: n_fig = len ( params ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i ,( C , sigma ) in enumerate ( params ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) model = SVC ( kernel = \"gaussian\" , C = C , sigma = sigma ) model . fit ( train_x , train_y , max_iter = 1500 , sparse_memorize = False ) Z = np . vectorize ( lambda x , y : model . predict ( np . array ([ x , y ]) . reshape ( 1 , - 1 )))( X , Y ) == 1 ax . pcolor ( X , Y , Z , alpha = 0.3 ) for i in range ( N ): alpha = 1 if i in model . isSV () else 0.3 color = \"red\" if train_y [ i ] == 1 else \"blue\" ax . plot ( train_x [ i , 0 ], train_x [ i , 1 ], marker = \"o\" , color = color , markersize = 10 , alpha = alpha ) ax . set_title ( f \"gaussian kernel (C= {C} , $\\sigma= {sigma} $)\" ) ax . set_xlim ( - 1 , 1 ), ax . set_ylim ( - 1 , 1 ) plt . tight_layout () plt . show () 多クラスSVM SVMは本来2クラス識別の為の分類器であるが、これを複数組み合わせるなどの方法によって $K>2$クラスの識別に利用する事が出来る。最もよく用いられる方法は、 one-versus-the-rest方式 と呼ばれる方法であり、「データ $\\mathbf{x}$ が クラス $k$ かそれ以外であるか を識別するSVM $y_k(\\mathbf{x})$ を $K$ クラスそれぞれについて構築し、$ y(\\mathbf{x}) = \\mathop{\\rm arg~max}\\limits_{k}y_k(\\mathbf{x})$ によって $\\mathbf{x}$ のクラスを決定する」 SVM回帰 単純な線形回帰問題においては、次の式で定義される正則化された誤差関数を最小化する。 $$\\frac{1}{2}\\sum_{n=1}&#94;N\\{y_n-t_n\\}&#94;2 + \\frac{\\lambda}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.50)$$ 疎な解を得るために、二条誤差関数を $\\epsilon$ 許容誤差関数($\\epsilon$-insentive error function) で置き換える。つまり、予測値 $y(\\mathbf{x})$ と観測値 $t$ の差が $\\epsilon(>0)$ 未満のときは、$\\epsilon$ 許容誤差関数の値は $0$ となる。$\\epsilon$ 許容誤差関数の簡単な例は、 「許容範囲外の値に関しては線形のコストを生じさせる」 ものである。 $$ \\begin{aligned} E_{\\epsilon}\\left(y(\\mathbf{x})-t\\right) = \\begin{cases} 0 & (\\text{ when }|y(\\mathbf{x} - t)| < \\epsilon)\\\\ |y(\\mathbf{x} - t)| - \\epsilon & (\\text{ otherwise }) \\end{cases}\\qquad (7.51) \\end{aligned} $$ In [13]: squareError = lambda x , y_true : 1 / 2 * ( x - y_true ) ** 2 # Sum of Squares Error function epsilonError = lambda x , y_true , epsilon = 1 : 0 if abs ( x - y_true ) < epsilon else abs ( x - y_true ) - epsilon In [14]: X = np . linspace ( - 2 , 2 , 1000 ) plt . plot ( X ,[ squareError ( x , y_true = 0 ) for x in X ], color = \"black\" , label = \"sum of squares error function\" , linestyle = \"--\" ) plt . plot ( X ,[ epsilonError ( x , y_true = 0 ) for x in X ], color = \"black\" , label = \"$\\epsilon$-insentive error function\" ) plt . scatter ( 0 , 0 , marker = \"x\" , color = \"red\" , label = \"y_true\" ) plt . title ( \"Error function comparison\" , fontsize = 16 ), plt . xlim ( - 2 , 2 ), plt . ylim ( -. 1 , 2 ) plt . xlabel ( \"$x$\" , fontsize = 16 ), plt . ylabel ( \"$E(x)$\" , fontsize = 16 ) plt . legend () plt . show () この $\\epsilon$ 許容誤差関数を用いると、結局次の正則化された誤差関数を最小化することになる。 $$C\\sum_{n=1}&#94;NE_{\\epsilon}\\left(y(\\mathbf{x}_n)-t_n\\right) + \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.52)$$ 分類問題と同様、この最適化問題をスラック変数 $\\xi_n,\\hat{\\xi}_n$ を導入して表現する。 $\\epsilon$ チューブの中に位置するという条件は $y_n-\\epsilon\\leq t_n \\leq y_n+\\epsilon$ と表せるので、チューブの外側にデータ点が存在することを許すような制約条件は以下のようにかける。 $$ \\begin{aligned} t_n&\\leq y(\\mathbf{x}_n) + \\epsilon + \\xi_n & (7.53)\\\\ t_n&\\geq y(\\mathbf{x}_n) - \\epsilon - \\xi_n & (7.54)\\\\ \\end{aligned} $$ よって、スラック変数を用いると、SVM回帰の誤差関数は次のようにかける。 $$C\\sum_{n=1}&#94;N\\left(\\xi_n + \\hat{\\xi}_n\\right) + \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.55)$$ したがって、この最小化問題のラグランジュ関数は、ラグランジュ乗数 $a_n,\\hat{a}_n,\\mu_n,\\hat{\\mu}_n$ を導入して以下のようになる。（$y(\\mathbf{x}_n)= \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)+b$） $$ \\begin{aligned} L &=C\\sum_{n=1}&#94;N\\left(\\xi_n+\\hat{\\xi}_n\\right)+\\frac{1}{2}\\|\\mathbf{w}\\|&#94;2-\\sum_{n=1}&#94;N\\left(\\mu_n\\xi_n+\\hat{\\mu}_n\\hat{\\xi}_n\\right)\\\\ &-\\sum_{n=1}&#94;Na_n\\left(\\epsilon + \\xi_n + y_n - t_n \\right)-\\sum_{n=1}&#94;N\\hat{a}_n\\left(\\epsilon + \\hat{\\xi}_n - y_n + t_n\\right) \\qquad (7.56)\\\\ \\end{aligned} $$ これまで同様 $\\mathbf{w},b,\\xi_n,\\hat{\\xi}_n$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;Na_n\\phi(\\mathbf{x}_n)-\\sum_{n=1}&#94;N\\hat{a}_n\\phi(\\mathbf{x}_n)=0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N \\left(a_n-\\hat{a}_n\\right)\\phi(\\mathbf{x}_n) & (7.57)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_n + \\sum_{n=1}&#94;N\\hat{a}_n = 0 \\quad\\therefore\\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right) = 0 & (7.58)\\\\ \\frac{\\partial L}{\\partial \\xi_n} &= C-a_n-\\mu_n \\quad\\therefore a_n + \\mu_n = C & (7.59)\\\\ \\frac{\\partial L}{\\partial \\hat{\\xi}_n} &= C-\\hat{a}_n-\\hat{\\mu}_n \\quad\\therefore \\hat{a}_n + \\hat{\\mu}_n = C & (7.60)\\\\ \\end{aligned} $$ が得られる。これらの結果を $(7.56)$ に代入すると、以下の 双対形のラグランジュ関数 が得られる。 $$ \\begin{aligned} \\tilde{L}(\\mathbf{a},\\hat{\\mathbf{a}}) &= -\\frac{1}{2}\\sum_{n=1}&#94;N\\sum_{m=1}&#94;N\\left(a_n-\\hat{a}_n\\right)\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\\\ &- \\epsilon\\sum_{n=1}&#94;N\\left(a_n + \\hat{a}_n\\right) + \\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right)t_n \\end{aligned} \\qquad (7.61) $$ なお、制約式は $$ \\begin{aligned} 0 \\leq a_n &\\leq C & (7.62)\\\\ 0 \\leq \\hat{a}_n &\\leq C & (7.63) \\end{aligned} $$ である。したがって、新しい入力に対する予測値は $$y(\\mathbf{x}) = \\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right)k(\\mathbf{x},\\mathbf{x}_n) + b\\qquad (7.64)$$ とカーネル関数のみを用いて計算できることがわかる。 なお、バイアスパタメータ $b$ は次のように計算できる。 $C>a_n>0$ が成り立つデータ点についてはKKT条件より $\\xi_n = 0 \\quad \\therefore \\epsilon+y_n-t_n=0$ が成り立つ。よって、 $$ \\begin{aligned} b &= t_n - \\epsilon - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\\\ &= t_n - \\epsilon - \\sum_{m=1}&#94;N\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.69) \\end{aligned} $$ $C>\\hat{a}_n>0$ が成り立つデータ点についてはKKT条件より $\\hat{\\xi}_n = 0 \\quad \\therefore \\epsilon+y_n-t_n=0$ が成り立つ。よって、 $$ \\begin{aligned} b &= t_n - \\epsilon - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\\\ &= t_n - \\epsilon - \\sum_{m=1}&#94;N\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.69) \\end{aligned} $$ なお、このようにして得られた $b$ の値を全て平均した結果を用いると数値誤差の影響を小さくできる。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-3.html"},{"title":"ラグランジュ未定乗数法","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 条件なし最適化 ある関数 \\(f\\) が与えられた時、それが最小値を取る点を見つけ出す。 $$\\text{min : } f(\\mathbf{x})$$ したがって、微分をとって \\(0\\) になる点を見つければ良い。 $$\\frac{\\partial}{\\partial x}f(x) = 0\\Longrightarrow x&#94;{\\ast}$$ 等式制約付き最適化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g(\\mathbf{x})=0\\\\ \\end{aligned} $$ ラグランジュ乗数(Lagrangian multiplier) と呼ばれるパラメータ \\(\\lambda\\) を導入した ラグランジュ関数(Lagrangian function) $$L(\\mathbf{x},\\lambda) \\equiv f(\\mathbf{x})+\\lambda g(\\mathbf{x})\\qquad (E.4)$$ の \\(\\mathbf{x}\\) と \\(\\lambda\\) の両方に対する停留点（鞍点）を見つければ、制約付き問題の最適解が得られる。 理由 以下２つの理由より、 \\(\\nabla f\\) と \\(\\nabla g\\) は、 向きが逆の場合も含めて 平行なベクトルとなる。したがって、 あるパラメータ \\(\\lambda\\neq0\\) が存在して、 $$\\nabla f + \\lambda\\nabla g = 0\\qquad (E.3)$$ が成立しなければならない。これは、 \\(\\nabla_{\\mathbf{x}}L=0\\) と表されることがわかる。また、 \\(\\partial L/\\partial\\lambda = 0\\) より、制約式 \\(g(\\mathbf{x})=0\\) も導かれる。 1) \\(\\nabla g(\\mathbf{x})\\) が制約面 \\(g(\\mathbf{x})=0\\) に対して常に垂直 制約面 \\(g(\\mathbf{x})\\) 上の点 \\(\\mathbf{x}\\) と \\(\\mathbf{x}+\\boldsymbol{\\varepsilon}\\) を考える。 すると、 \\(\\mathbf{x}\\) の周りでの \\(g(\\mathbf{x})\\) のテイラー展開より、 $$g(\\mathbf{x} + \\boldsymbol{\\varepsilon}) \\sim g(\\mathbf{x}) + \\boldsymbol{\\varepsilon}&#94;T\\nabla g(\\mathbf{x})\\qquad (E.2)$$ いま、 \\(\\mathbf{x}\\) と \\(\\mathbf{x}+\\boldsymbol{\\varepsilon}\\) は共に制約面上に存在するので $$g(\\mathbf{x})=g(\\mathbf{x}+\\boldsymbol{\\varepsilon})=0$$ が成り立つ。ゆえに、 \\(\\|\\boldsymbol{\\varepsilon}\\|\\rightarrow0\\) の極限では \\(\\boldsymbol{\\varepsilon}&#94;T\\nabla g(\\mathbf{x})\\sim0\\) が成り立つ。 \\(\\boldsymbol{\\varepsilon}&#94;T\\) は制約面上の接線である。 より、ベクトル \\(\\nabla g(\\mathbf{x})\\) は制約面 \\(g(\\mathbf{x})=0\\) に対して垂直である。 2) \\(\\nabla f(\\mathbf{x}&#94;{\\ast})\\) も制約面に対して垂直 もし \\(\\nabla f(\\mathbf{x}&#94;{\\ast})\\) が制約面に対して垂直でないとすると、制約面にそって \\(f(\\mathbf{x})\\) の値がさらに大きくなるように点を動かすことができるはずである。 したがって、制約面上の点で \\(f(\\mathbf{x})\\) を最大化する点 \\(\\mathbf{x}&#94;{\\ast}\\) においては、ベクトル \\(\\nabla f(\\mathbf{x})\\) も制約面に対して垂直でなければならない。 不等式制約付き最適化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g(\\mathbf{x})\\leq0\\\\ \\end{aligned} $$ ここで、解 \\(\\mathbf{x}&#94;{\\ast}\\in\\Omega\\) には、 無効制約(inactive constraint) \\(\\overset{\\text{def}}{\\Longleftrightarrow}g(\\mathbf{x}&#94;{\\ast}) < 0\\) 有効制約(active constraint) \\(\\overset{\\text{def}}{\\Longleftrightarrow}g(\\mathbf{x}&#94;{\\ast}) = 0\\) の2つの可能性がある。 $$ \\Omega:= \\left\\{\\mathbf{x}\\in\\mathbb{R}&#94;D: g(\\mathbf{x})<0 \\right\\} $$ 無効制約の場合 無効制約 \\(\\left(g(\\mathbf{x})<0\\right)\\) の場合、関数 \\(g(\\mathbf{x})\\) は何も制約を課していないのと同様なので、停留条件は単に \\(\\nabla f(\\mathbf{x}) = 0\\) となる。 なお、これは上記の 等式制約におけるラグランジュ関数 \\((E.4)\\) において \\(\\lambda=0\\) とした場合の停留条件に等しい。 有効制約の場合 有効制約 \\(\\left(g(\\mathbf{x})=0\\right)\\) の場合、 等式制約におけるラグランジュ関数 \\((E.4)\\) において \\(\\lambda\\neq0\\) とした場合の停留条件に等しい。 ただし、 \\(-\\nabla f(\\mathbf{x}&#94;{\\ast})\\) は \\(g(\\mathbf{x})<0\\) の外側へと向かうはず だから、 あるパラメータ \\(\\lambda>0\\) が存在して、 $$\\nabla f(\\mathbf{x}) = -\\lambda\\nabla g (\\mathbf{x})$$ が成立しなければならない。 勾配 意味 最適化問題における問題における意味 \\(\\nabla f(\\mathbf{x})\\) \\(f\\) が大きくなる方向 目的とは別の方向 \\(\\nabla g(\\mathbf{x})\\) \\(g\\) が大きくなる方向 \\(g(\\mathbf{x})<0\\) の外側へと向かう方向 KKT条件 上記の無効制約・有効制約のどちらの場合にせよ、 \\(\\lambda g(\\mathbf{x})=0\\) が成立することがわかる。 したがって、 \\(g(\\mathbf{x})\\leq0\\) という制約の下で \\(f(\\mathbf{x})\\) を最小化するには、以下の Karush-Kuhn-Tucker(KKT)条件 のもとで、 \\(\\mathbf{x},\\lambda\\) に関して ラグランジュ関数 \\((E.4)\\) の停留点を求めれば良い。 $$ \\begin{aligned} \\begin{cases} \\text{Primal feasibility} &g(\\mathbf{x})\\leq0 & (E.9)\\\\ \\text{Dual feasibility} &\\lambda \\geq 0 & (E.10)\\\\ \\text{Complementary slackness} &\\lambda g(\\mathbf{x}) = 0 & (E.11) \\end{cases} \\end{aligned} $$ なお、当然ではあるが、「制約条件の符号の向き」と「目的関数の最大化・最小化」には以下の関係がある。（ \\(\\lambda\\geq0\\) ） 目的関数 \\(f(\\mathbf{x})\\) 制約条件 \\(g(\\mathbf{x})\\) ラグランジュ関数 \\(L(\\mathbf{x},\\lambda)\\) \\(\\min f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\leq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) + \\lambda g(\\mathbf{x})\\) \\(\\min f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\geq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) - \\lambda g(\\mathbf{x})\\) \\(\\max f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\leq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) - \\lambda g(\\mathbf{x})\\) \\(\\max f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\geq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) + \\lambda g(\\mathbf{x})\\) 一般化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g_j(\\mathbf{x})=0 & (j=1,\\ldots,J)\\\\ & h_k(\\mathbf{x})\\leq0 & (k=1,\\ldots,K)\\\\ \\end{aligned} $$ 以下のラグランジュ関数を最適化する。 $$L\\left(\\mathbf{x},\\{\\lambda_j\\},\\{\\mu_k\\}\\right) = f(\\mathbf{x}) + \\sum_{j=1}&#94;J\\lambda_jg_j(\\mathbf{x}) + \\sum_{k=1}&#94;K\\mu_kh_k(\\mathbf{x})\\qquad (E.12)$$ ここで、KKT条件は、以下となる。 $$ \\begin{aligned} \\begin{cases} \\text{Primal feasibility} &g_j(\\mathbf{x})=0,h_k(\\mathbf{x})\\leq0 \\\\ \\text{Dual feasibility} &\\mu_k \\geq 0\\\\ \\text{Complementary slackness} &\\mu_kh_k(\\mathbf{x}) = 0 \\end{cases} \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-2.html"},{"title":"カーネル法","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt 講義の構成 パターン認識 カーネル法の紹介 最適化理論の復習 サポートベクターマシーン パターン認識 対象を識別するルールを訓練データより、自動的に取得する。 各対象を全データ共通次元のベクトルで表現すれば、識別関数 $f(\\mathbf{x})$ は、特徴空間上に定義される。 元の空間 （入力空間） を非線形に写像すれば、写像先 （特徴空間） で線形識別することで非線形識別が達成される。 $$\\phi:\\mathbf{X}\\rightarrow\\mathbb{R}&#94;m$$ どのように写像を定めるかは難しい問題。 カーネル法の紹介 上で紹介した写像を、 類似度関数（カーネル関数） に基づいて決める手法。（例：ガウシアンカーネル $K(\\mathbf{x},\\mathbf{x}&#94;{\\prime}) = \\exp\\left(-\\frac{\\|\\mathbf{x}-\\mathbf{x}&#94;{\\prime}\\|}{\\sigma}\\right)$） 類似度さえ定義できればどのような対象（例：生物学的ネットワーク上のタンパク質の分類）にでも適用できる。 複雑な問題になると非常に高い次元に写像する必要があるが、カーネル関数さえ求められれば写像 $\\phi$ を陽に求める必要はない （カーネルトリック） 。 $k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ が有効なカーネル関数であるための必要十分条件は、任意の $\\{\\mathbf{x}_n\\}$ に対して、要素が $k(\\mathbf{x}_n,\\mathbf{x}_m)$ で与えられるグラム行列 $\\mathbf{K}$ が半正定値であること。 新しいカーネル関数を定義してそれが有効な関数かを確認するのは大変なので、次の性質を用いて新たな関数を定義することが多い。 新たなカーネル関数を構築するための方法 有効なカーネルとして $k_1(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ と $k_2(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ が与えられた時、次の関数もやはりカーネル関数として有効である。 $$\\begin{aligned} k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=c k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) & (6.13)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=f(\\mathbf{x}) k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) f\\left(\\mathbf{x}&#94;{\\prime}\\right) & (6.14)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=q\\left(k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.15)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=\\exp \\left(k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.16)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)+k_{2}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)& (6.17)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) k_{2}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) & (6.18)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{3}\\left(\\phi(\\mathbf{x}), \\phi\\left(\\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.19)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=\\mathbf{x}&#94;{\\mathrm{T}} \\mathbf{A} \\mathbf{x}&#94;{\\prime}& (6.20) \\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{a}\\left(\\mathbf{x}_{a}, \\mathbf{x}_{a}&#94;{\\prime}\\right)+k_{b}\\left(\\mathbf{x}_{b}, \\mathbf{x}_{b}&#94;{\\prime}\\right) & (6.21)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{a}\\left(\\mathbf{x}_{a}, \\mathbf{x}_{a}&#94;{\\prime}\\right) k_{b}\\left(\\mathbf{x}_{b}, \\mathbf{x}_{b}&#94;{\\prime}\\right) & (6.22) \\end{aligned}$$ ※ ここで、それぞれの変数は以下の意味を持つ。 変数 説明 $c>0$ 定数 $f(\\cdot)$ 任意の関数 $q(\\cdot)$ 非負の係数を持つ多項式 $\\phi(\\mathbf{x})$ $\\mathbf{x}$ から $\\mathbb{R}&#94;{M}$ への関数 $k_3(\\cdot,\\cdot)$ $\\mathbb{R}&#94;{M}$ で定義された有効なカーネル $\\mathbf{A}$ 対象な半正定値行列 $\\mathbf{x}_a,\\mathbf{x}_b$ $\\mathbf{x}=(\\mathbf{x}_a,\\mathbf{x}_b)$ であるような変数（必ずしも互いに素である必要はない） $k_a,k_b$ それぞれの特徴空間において有効なカーネル関数 カーネル関数の例 $$k(x,x&#94;{\\prime}) = \\boldsymbol{\\phi}(x)&#94;T\\boldsymbol{\\phi}(x&#94;{\\prime}) = \\sum_{i=1}&#94;M\\phi_i(x)\\phi_i(x&#94;{\\prime})\\qquad (6.10)$$ # 多項式 ガウス シグモイド 基底関数 $$\\phi_j(x) = cx&#94;j$$ $$\\phi_j(x) = \\exp\\left\\{-\\frac{(x-\\mu_j)&#94;2}{2s&#94;2}\\right\\}\\qquad(3.4)$$ $$\\begin{aligned}\\phi_j(x) &= \\sigma\\left(\\frac{x-\\mu_j}{s}\\right) & (3.5)\\\\\\sigma(a) &=\\frac{1}{1+\\exp(-a)} & (3.6)\\end{aligned}$$ In [2]: # mapping function def polynomial ( x , d , c = 1 ): return c * x ** d def gaussian ( x , mu , s = 0.1 ): return np . exp ( - (( x - mu ) ** 2 ) / ( 2 * s ** 2 ) ) def logistic ( x , mu , s = 0.1 ): return 1 / ( 1 + np . exp ( - ( x - mu ) / s )) In [3]: # mapping function kernel = lambda phi , x_prime , X , key = None , ** params : np . array ([ sum ([ phi ( x_prime , ** { key : val }) * phi ( x , ** { key : val }) for val in params [ key ]]) for x in X ]) In [4]: params = [ ( polynomial , - 0.5 , \"d\" , np . linspace ( 1 , 11 , 11 )), ( gaussian , 0 , \"mu\" , np . linspace ( - 1 , 1 , 11 )), ( logistic , 0 , \"mu\" , np . linspace ( - 1 , 1 , 11 )), ] In [5]: X = np . linspace ( - 1 , 1 , 1000 ) In [6]: ncol = len ( params ) fig = plt . figure ( figsize = ( 12 , 6 )) for i , param in enumerate ( params ): phi , x_prime , key , vals = param ax_base = plt . subplot2grid (( 5 , ncol ),( 0 , i ), rowspan = 3 ) for val in vals : Y = phi ( X , ** { key : val }) ax_base . plot ( X , Y ) ax_base . set_title ( phi . __name__ ) ax_kernel = plt . subplot2grid (( 5 , ncol ),( 3 , i ), rowspan = 2 ) ax_kernel . plot ( X , kernel ( phi , x_prime , X , key , ** { key : vals })) ax_kernel . scatter ( x_prime , min ( ax_kernel . get_ylim ()), marker = \"x\" , color = \"black\" , label = \"$x&#94;{\\prime}$\" ) ax_kernel . set_xlabel ( \"$x$\" ), ax_kernel . set_title ( \"$k(x,x&#94;{\\prime})$\" ), ax_kernel . legend () plt . tight_layout () plt . show () 様々なカーネル 生物学的配列のカーネル Spectrum kernel (Leslie et al., 2002) Marginalized kernel (Tsuda et al., 2002) Profile kernel (Kuang et al., 2004) Local alignment kernel (Saigo et al., 2004) 木構造に関するカーネル Kernel for phylogenetic profiles (Vert, 2002) Kernel for natural language (Suzuki et al., 2003) Kernel for RNA sequences (Kin et al., 2002) ※ 詳しくは、 Kernel Methods in Computational Biology, MIT Press, 2004 を参照 最適化理論の復習 ラグランジュ未定乗数法 に記載。 サポートベクターマシーン マージン最大化 に基づく線形識別器 カーネル関数と組み合わせることによって非線形な識別も可能 サンプル間の類似度にしか依存しない （→非ベクトルデータの分類にも適用可能） 詳しくは サポートベクターマシン(SVM) に記載。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-1.html"},{"title":"生物統計論 第3回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section3.1 Multiple Test Correction \"The more inferences are made, the more likely erroneous inferences are to occur.\" (ex. Even if the type1 error rate is 1% for each data, 10 out of 1000 sample will be rejected on average.) Terminology FWER(Family-wise error rate) : the probability of making at least one type I error (FP) in the family. FDR(False discovery rate) : the expected type I error (FP) rate in rejected data. FDR(False discovery rate) Null hypotheses: $H_1,\\ldots,H_{g_j}$ Alternative hypotheses: $H_{g_j+1},\\ldots,H_g$ Procedure to reject hypotheses : $d_{\\alpha}: \\left(P_1,P_2,\\ldots,P_g\\right)\\rightarrow\\left\\{H_{i_1},\\ldots,H_{i_K}\\right\\}$ Expected ratio of FP in rejected hypotheses: $\\mathrm{FP}=\\sum_{k=1}&#94;K\\mathbb{I}(1\\leq i_k\\leq g_j),\\quad \\mathrm{TP}=K-\\mathrm{FP}$ $\\mathcal{Q} = \\begin{cases}0 & \\text{if }K=(\\mathrm{FP+TP})=0\\\\\\frac{\\mathrm{FP}}{\\mathrm{FP}+\\mathrm{TP}} & \\text{if }K>0\\end{cases}$ $$\\mathrm{FDR}(d_{\\alpha})=\\mathbb{E}\\left(\\mathcal{Q}|H_1,\\ldots,H_g\\right)$$ Methods to counteract this problem Bonferroni Correction Set $\\alpha\\left(=s_{\\alpha}\\leq S_h|H_0\\right)\\leftarrow 1/g\\cdot\\alpha_{\\mathrm{FWER}}$ ($g$: sample size) Therefore, we have: $$\\mathbb{P}\\left(\\{s_{\\alpha}\\leq S_1\\}\\cup\\cdots\\cup\\{s_{\\alpha}\\leq S_g\\}|H_0\\right)\\leq\\sum_{h=1}&#94;g\\mathbb{P}\\left(s_{\\alpha}\\leq S_h|H_0\\right) = g\\cdot\\left(\\frac{1}{g}\\alpha_{\\mathrm{FWER}}\\right) = \\alpha_{\\mathrm{FWER}}$$ Benjamini-Hochberg Procedure (B-H Procedure) If we assume data are distributed independently, we have: $$\\left(P_1,\\ldots,P_g\\right)\\sim\\mathrm{Unif}\\left(0,1\\right)&#94;{\\times g_j}\\times\\mathbb{P}\\left(P|H_{\\text{alternative}}\\right)&#94;{\\times\\left(g-g_j\\right)}$$ We sort the p-value as $p_1\\leq\\cdots\\leq p_g$ Then, $$ \\begin{aligned} d_{\\alpha_{\\mathrm{FDR}}}&#94;{\\mathrm{B-H}}(p_1,\\cdots,p_g) &:=\\mathrm{Reject}\\left\\{H_i|1\\leq i\\max\\left\\{n|p_n\\leq\\left(\\frac{n}{g}\\alpha_{\\mathrm{FDR}}\\right)\\right\\}\\right\\}\\\\ &\\Rightarrow \\mathrm{FDR}\\left(d_{\\alpha_{\\mathrm{FDR}}&#94;{\\mathrm{B-H}}}\\right)\\leq\\alpha_{\\mathrm{FDR}} \\end{aligned} $$ Example. $H_i$ $G_1$ $G_2$ $G_3$ $G_4$ $G_5$ $G_6$ $G_7$ $G_8$ $G_9$ $G_{10}$ $p_i$ $0.1$ $0.4$ $0.8$ $0.035$ $0.9$ $0.04$ $0.001$ $0.002$ $0.6$ $0.7$ In [2]: alpha_FDR = 0.1 g = 10 In [3]: idx = np . array ([ i + 1 for i in range ( g )]) p_value = data = np . array ([ 0.1 , 0.4 , 0.8 , 0.035 , 0.9 , 0.04 , 0.001 , 0.002 , 0.6 , 0.7 ]) q = np . array ([( i + 1 ) / g * alpha_FDR for i in range ( g )]) In [4]: p_value_rank = np . argsort ( p_value ) In [5]: for i in reversed ( range ( g )): if q [ i ] >= p_value [ p_value_rank [ i ]]: break In [6]: print ( f \"Reject: {[f'G {idx} ' for idx in idx[p_value_rank[:i+1]]]}\" ) Reject: ['G7', 'G8', 'G4', 'G6'] Quantile-Quantile plot In [7]: x = - np . log10 ( np . array ([( i + 1 ) / g for i in range ( g )])) y = - np . log10 ( p_value [ p_value_rank ]) In [8]: plt . plot ( x , y , color = \"red\" , label = \"observed\" ) plt . plot (( 0 , min ( x [ 0 ], y [ 0 ])),( 0 , min ( x [ 0 ], y [ 0 ])), color = \"black\" , label = \"$y=x$\" ) plt . title ( \"Quantile-Quantile plot\" ) plt . xlabel ( \"$-\\log_ {10} $ expected P-value\" ) plt . ylabel ( \"$-\\log_ {10} $ observed P-value\" ) plt . legend () plt . grid () plt . show () Section3.2 Probabilistic Models Hypothesis Testing Probabilistic Modeling Models data generation processes in uninteresting scenarios $H_0$ Models data generation processes under interesting biological scenario $H_1$ (possibly as well as $H_0$) Show inconsistency with $H_0$ Check fit of the model to the data Problems of Hypothesis Testing Approaches Difficult to model satisfactory, uninteresting scenarios Does not model interesting biological scenarios A rejected hypothesis does not necessarily tell anything interesting Still useful for many small parts of a full analysis probabilistic Modeling Strong regularity from the probability condition Can include various biological knowledge Adjustable to the quality, amount, randomness of the data Conditional probability makes it easy to integrate multiple models Once a satisfactory model is obtained, we can extract various information from expectation values Powerful general tools are available Maximal Likelihood EM algorithms Bayesian inference MCMC sampling etc... Section3.3 Likelihood Q. How to adjust parameters?? A. Maximize the Likelihood likelihood observed data: $\\mathbf{D} = \\left\\{x&#94;{(h)}|h=1,\\cdots,n\\right\\}$ parametrized model distribution: $\\mathbb{P}(x|\\theta)$ Likelihood: $L(\\theta|D) = \\mathbb{P}(D|\\theta) = \\prod_{h=1}&#94;n\\mathbb{P}\\left(x&#94;{(h)}|\\theta\\right)$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html"},{"title":"レポート課題2(10/10出題)","text":"r/Qvf3/Wjx8UD7ZRTBd8CQ==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html"},{"title":"連続最適化(1)制約なし最適化","text":"講師： 佐藤一誠 参考書： 最適化手法 参考書： 機械学習のための連続最適化 In [1]: import numpy as np import matplotlib.pyplot as plt 講義概要 凸最適化問題 最急降下法 ニュートン法 準ニュートン法 凸最適化問題 凸関数 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、以下が成り立つような関数を 凸関数(convex function) と呼ぶ。 $$f\\left(\\left(1-\\theta\\right)x + \\theta x&#94;{\\prime}\\right)\\leq\\left(1-\\theta\\right)f(x) + \\theta f\\left(x&#94;{\\prime}\\right)$$ $f$ が一階微分可能の時、$f$ が凸関数になるための必要十分条件は、感覚的には接戦が常に関数の下に来ることで、 $$\\forall x,x&#94;{\\prime}\\in\\mathcal{X},\\quad f\\left(x&#94;{\\prime}\\right)\\geq f(x) + \\nabla f(x)&#94;T\\left(x&#94;{\\prime}-x\\right)$$ $f$ が二階微分可能の時、$f$ が凸関数になるための必要十分条件は、 ヘッセ行列(Hessian matrix) $\\nabla&#94;2f(x)$ が 半正定値(positive semi-definite) ↔︎$\\nabla&#94;2f(x)$ の 固有値(eigenvalue) が全て非負 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、$(1-\\theta)x+\\theta x&#94;{\\prime}$ も $\\mathcal{X}$ に属するとき、$\\mathcal{X}$ を 凸集合(convex set) と呼ぶ。$x$ と $x&#94;{\\prime}$ を結ぶ線分上の全ての点が $\\mathcal{X}$ に属するということ。 最適化 最適化問題(optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 最適化アルゴリズム(optimization algorithm)： 収束する点列の生成アルゴリズム 最適性条件：最適化問題の最適解であるための必要条件 制約なし最適化問題(unconstrained optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 $f$ を 目的関数(objective function) と呼ぶ。 目的関数は 微分可能(differentiable) と仮定する。 最適性条件：$\\mathbf{x}&#94;{\\star}$ が最適解のとき $$\\nabla f(\\mathbf{x}&#94;{\\star}) = 0$$ 凸最適化問題(convex optimization problem)： 関数 $f$ が凸で集合 $\\mathcal{X}$ も凸 最適解（の集合）が 一意に定まる。 最適解の必要十分条件： 勾配(gradient) がゼロ（凸でない場合は 必要条件 ） 最急降下法 最急降下法(steepest descent method) ※ 勾配法(gradient method)とも。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\quad (\\varepsilon_k>0\\text{ : step size})$$ 凸最適化問題の場合、 大域的最適解(global optimization solution) が求まる 非凸最適化問題の場合、 局所最適解(local optimization solution) しか求められず、様々な初期値から何回か学習して最適解を採用する、ことしかできない。 ステップ幅(step size)の選択 焼きなまし(annealing) ：「最初は大きく、徐々に小さく」。しかし、適切に実装することは容易でない。 正規化(normalization) ：$\\varepsilon_k = \\varepsilon_k&#94;{\\prime}/\\|\\nabla f(\\mathbf{x}_k)\\|$ 勾配が大きいとき安定するが、勾配が小さいときは不安定 厳密直線探索(exact line search) 目的関数の値を最小にするステップ幅を求める。 $$\\underset{\\varepsilon_k>0}{\\min}f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)$$ $f$ が 単峰関数(unimodal function) の場合は、 二分探索法(binary search) や 黄金分割探索(golden section search) などの探索によって最小値を探す。 一般に、一次元の非線形最小化問題を解く必要があるため、最適なステップ幅の探索に時間がかかる。 厳密直線探索を用いた最急降下法は、 一次収束(linear convergence) する。 $$\\text{Q-linear convergence: }\\|\\mathbf{x}_{k+1}-\\mathbf{x}&#94;{\\star}\\| c\\leq \\|\\mathbf{x}_k-\\mathbf{x}&#94;{\\star}\\|&#94;q,\\quad 0 In [2]: ITERATION = 10 N = 100 fsize = 4 In [3]: a = 10 ; b = 1 A = 2 * np . diag ([ a , b ]) func = lambda x , y : a * x ** 2 + b * y ** 2 In [4]: x1min =- 5 ; x1max = 5 ; x2min =- 5 ; x2max = 5 initialX = np . array ([ x1min + 1 , x2max - 2 ]) x1 = np . linspace ( x1min , x1max , N ) x2 = np . linspace ( x2min , x2max , N ) X1 , X2 = np . meshgrid ( x1 , x2 ) Z = func ( X1 , X2 ) In [5]: def find_step_size ( method , f , X , A , ** kwargs ): df = A . dot ( X ) if method == \"fixed\" : epsilon = 1e-1 elif method == \"exact line search\" : epsilon = np . sum ( np . square ( df )) / np . sum ( np . square ( df ) * A . diagonal ()) elif method == \"backtracking line search\" : epsilon = 1 alpha = kwargs [ \"alpha\" ]; beta = kwargs [ \"beta\" ] while True : newX = X - epsilon * df if f ( newX [ 0 ], newX [ 1 ]) - f ( X [ 0 ], X [ 1 ]) <= - alpha * epsilon * np . sum ( np . square ( df )): break epsilon = beta * epsilon return epsilon In [6]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [7]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 例：$f(x) = 1/2\\mathbf{x}&#94;T\\mathbf{Ax}$ $$ \\begin{aligned} \\frac{\\partial f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)}{\\partial\\varepsilon_k} &= \\frac{\\partial}{\\partial\\varepsilon_k}\\frac{1}{2}\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)&#94;T\\mathbf{A}\\left(\\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\\\ &= \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right) - \\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{Ax}_k\\\\ &=0\\\\ \\therefore \\varepsilon_k&#94;{\\star} &= \\frac{\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2}{\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right)}\\qquad (\\nabla f\\left(\\mathbf{x}_k\\right) = \\mathbf{Ax}) \\end{aligned} $$ バックトラック直線探索(backtracking line search) $\\varepsilon_k=1$ に初期化 アルミホ基準(Armijo rule) ： $$f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right) - f\\left(\\mathbf{x}_k\\right)\\right) \\leq\\alpha\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2$$ が成り立つまで $\\varepsilon_k$ を $\\varepsilon_k\\leftarrow\\beta\\varepsilon_k$ と減衰させる。（$0<\\alpha, \\beta<1$） 目的関数の減少量の線形予測値の $\\alpha$ 倍の減少を保証している。 $f$ の真の減少量： $$g\\left(\\varepsilon_k\\right) = f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right) - f\\left(\\mathbf{x}_k\\right)$$ $f$ の減少量の 線形予測値 $$\\begin{aligned}\\varepsilon_kg&#94;{\\prime}(0) &=\\varepsilon_k\\cdot\\left( -\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k-0\\cdot\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\right)\\\\&=-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k\\right)\\\\&=-\\varepsilon_k\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2 \\end{aligned}$$ In [8]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [9]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 微分不可能な場合 目的関数 $f$ が 微分不可能(non-differentiable) の場合は、微分の概念を一般化した 劣微分 を用いる。 凸関数 $f$ の $\\mathbf{x}&#94;{\\prime}$ での 劣勾配(sub-gradient) とは、全ての $\\mathbf{x}\\in\\mathcal{X}$ に対して次式を満たす $\\mathbf{\\xi}$ $$f(\\mathbf{x})\\geq f\\left(\\mathbf{x}&#94;{\\prime}\\right) + \\mathbf{\\xi}&#94;T\\left(\\mathbf{x}-\\mathbf{x}&#94;{\\prime}\\right)$$ $f$ が微分可能な時、$\\mathbf{\\xi} = \\nabla f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ 上式を満たす $\\mathbf{\\xi}$ 全体を $\\partial f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ で表し、 劣微分(sub-differential) と呼ぶ。 微分不可能な点では、劣微分のどれかの値を用いる。 ニュートン法 一般にニュートン法という名称は、方程式の解を求めるアルゴリズムを指すが、以下を表すことが多い。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ 勾配法では一階微分しか用いていないので、二階微分も用いることで反復回数を減らすことが狙い。実際 $k$ が十分大きい時、最適解 $\\mathbf{x}&#94;{\\star}$ の近傍で 二次収束(quadratic convergence) するが、逆行列を求める計算コストが大きい。 二次の テーラー展開(Taylor expansion) を用いて $f$ を現在の解 $\\mathbf{x}_k$ の周りで近似 $\\left(f(\\mathbf{x})\\approx f_k(\\mathbf{x})\\right)$ し、その二次近似を最小にする $\\mathbf{x}_k$ に更新する。 $$f_k(\\mathbf{x}) = f(\\mathbf{x}_k) + \\nabla f(\\mathbf{x}_k)&#94;T\\left(\\mathbf{x}-\\mathbf{x}_k\\right) + \\frac{1}{2}\\left(\\mathbf{x}-\\mathbf{x}_k\\right)&#94;T\\nabla&#94;2f(\\mathbf{x}_k)(\\mathbf{x}-\\mathbf{x}_k)$$ $f_k$ の勾配をゼロと置いた方程式 $$\\nabla f_k(\\mathbf{x}) = \\frac{\\partial f_k(\\mathbf{x})}{\\partial \\mathbf{x}}= \\nabla f(\\mathbf{x}_k) + \\nabla&#94;2f(\\mathbf{x}_k)\\left(\\mathbf{x}-\\mathbf{x}_k\\right) = \\mathbf{0}$$ を解けば、$f_k$ の最小解が以下のように求まる $$\\mathbf{x}&#94;{\\star} = \\mathbf{x}_k - \\left(\\nabla&#94;2 f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ なお、ヘッセ行列が逆行列を持たない時は、 単位行列の定数倍を加えて対処する（正則化, regularization） らしい。 $$\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right) + \\mu\\mathbf{I}\\right)&#94;{-1},\\quad\\mu>0$$ 準ニュートン法 ニュートン法の近似。ニュートン法ではヘッセ行列の逆行列を求めるのに計算コストがかかるので、勾配ベクトル $\\nabla f(\\mathbf{x})$ を用いて近似計算する。 BFGSアルゴリズムを用いたヘッセ行列の更新式が有名 なお、 レポート課題 で詳しく記述しているが、BFGSアルゴリズムのヘッセ行列の更新式は以下で表される。 $$ \\mathbf{H}_{k+1} =\\mathbf{H}_k+\\frac{\\mathbf{t}_k\\mathbf{t}_k&#94;T}{\\mathbf{s}_k&#94;T\\mathbf{t}_k}-\\frac{\\mathbf{H}_k\\mathbf{s}_k\\mathbf{s}_k&#94;T\\mathbf{H}_k}{\\mathbf{s}_k&#94;T\\mathbf{H}_k\\mathbf{s}_k} $$ なお、この時 $$ \\begin{aligned} \\begin{cases} \\mathbf{s}_k &= \\mathbf{x}_{k+1} - \\mathbf{x}_k\\\\ \\mathbf{t}_k &= \\nabla f(\\mathbf{x}_{k+1}) - \\nabla f(\\mathbf{x}_k) \\end{cases} \\end{aligned} $$ まとめ 凸最適化問題 目的関数が凸関数で定義域が凸集合 最適解が一意に定まる 最急降下法 勾配を降下するように値を更新 ステップ幅の選択が重要 目的関数が微分不可能な場合は、劣勾配法や近接勾配法を用いる ニュートン法 二階微分の情報を利用する ヘッセ行列の近似を用いる準ニュートン法が実用的 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html"},{"title":"Zuker Algorithm","text":"Free energy minimization of RNA seconary structure. In cells, RNAs are likely to form energetically stable secondary structure. The correctness of secondary structure should be evaluated based on the free energy, rather than the number of base-pairs ( Nussinov Algorithm ) We first describe a way to calculate the free energy of a particular RNA secondary structure. We describe the Zuker algorithm which calculates the RNA secondary structure with the minimum free energy (MFE). Free energy of RNA secondary structure The free energy of a secondary structure is approximated as the sum of the free energy of \"loops\". $$E = \\sum_iE_i$$ The free energy of individual loop is given by experimental data. (ex. $\\mathrm{C-G: }-3.4\\mathrm{kcal/mol}$, $\\mathrm{U-A: }-0.9\\mathrm{kcal/mol}$) Five types of \"loops\" hairpin loop stacking bulge loop internal loop multi-loop F1(i,j) F2(i,j,h,l) Fm=a+bk+cu a,b,c: constant k: the number of base-pairs in a multi-loop u: the number of single stranded nucleotides in a multi-loop Algorithm variable meaning $W(i,j)$ the minimum free energy of subsequence from $i$ to $j$. $V(i,j)$ the minimum free energy of subsequence from $i$ to $j$ when $i$ to $j$ forms a base-pair. $M(i,j)$ the minimum free energy of subsequence closed by two or more base pairs. $M1(i,j)$ the minimum free energy of subsequence closed by one or more base pairs. Recursion $$ \\begin{aligned} W(i,j) &= \\min \\begin{cases} W(i+1,j)\\\\W(i,j-1)\\\\V(i,j)\\\\\\min_{i\\leq k Initialization In [1]: from kerasy.Bio.structure import Zuker from kerasy.utils.bio import readMonoSeq In [2]: model = Zuker () In [3]: # 以下の形のパラメタファイルを受け取ります。 ! cat params.json { \"inf\": 1e3, \"type\": \"RNA\", \"Watson_Crick\": true, \"Wobble\": true, \"hairpin\": [Infinity, Infinity, 4.4, 4.6, 4.7, 4.4, 5.0, 4.5, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 5.9, 6.0, 6.1, 6.1, 6.2, 6.2, 6.3, 6.3, 6.4, 6.4, 6.5, 6.5, 6.5, 6.6, 6.6, 6.7, Infinity], \"internal\": [Infinity, 1.0, 1.0, 1.1, 2.0, 2.0, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9, 3.0, 3.1, 3.1, 3.2, 3.3, 3.3, 3.4, 3.4, 3.5, 3.5, 3.5, 3.6, 3.6, 3.7, 3.7, Infinity], \"buldge\": [1.0, 1.0, 1.0, 1.1, 2.0, 2.0, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9, 3.0, 3.1, 3.1, 3.2, 3.3, 3.3, 3.4, 3.4, 3.5, 3.5, 3.5, 3.6, 3.6, 3.7, 3.7, Infinity], \"a\": 6.0, \"b\": -1.0, \"c\": 0.1, \"stacking_cols\": [\"CG\", \"AU\", \"GU\"], \"stacking_score\": [[-3.0, -2.0, -2.0], [-2.0, -0.5, -0.5], [-2.0, -0.5, -0.5]] } In [4]: model . load_params ( \"params.json\" ) In [5]: model . params () | parameter |value | --------------------- |a | 6.0| |b | -1.0| |c | 0.1| |inf |1000.0| |type | RNA| |Watson_Crick| 1| |Wobble | 1| In [6]: model . stacking_cols Out[6]: array(['CG', 'AU', 'GU'], dtype=' In [7]: model . stacking_score Out[7]: array([[-3.e+00, -2.e+00, -2.e+00, 1.e+03], [-2.e+00, -5.e-01, -5.e-01, 1.e+03], [-2.e+00, -5.e-01, -5.e-01, 1.e+03], [ 1.e+03, 1.e+03, 1.e+03, 1.e+03]]) In [8]: # サンプル配列 sequence = readMonoSeq ( path = \"sample_seq4.fasta\" ) In [9]: print ( sequence ) ['CCACCUCGCCGCGAAGAUUGGAUGUAAUGUUCACUUAAGCCUAGGCGUUCGCAAAGAAAUACCUAUGGUAAUUUGACUAGCGGUAACAAUGAAAGAAAAGGUGUAGGCGAGGUGGG'] In [10]: # 最大ペアの配列 model . predict ( sequence [ 0 ]) Zuker Algorithm Score: -37.5 ================================================================= seq: CCACCUCGCCGCGAAGAUUGGAUGUAAUGUUCACUUAAGCCUAGGCGUUCGCAAAGAAAU : ((((((((((((((((..((((((...)))))))))..((((....((((((..(((((( seq: ACCUAUGGUAAUUUGACUAGCGGUAACAAUGAAAGAAAAGGUGUAGGCGAGGUGGG : (((...))))))))..)).))))..))...........)))))).)))))))))). ================================================================= In [11]: model . W Out[11]: array([[ 0. , 0. , 0. , ..., -34.5, -37.5, -37.5], [ 0. , 0. , 0. , ..., -34.5, -34.5, -34.5], [ 0. , 0. , 0. , ..., -32.5, -32.5, -32.5], ..., [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ]]) In [12]: model . M Out[12]: array([[1000. , 999. , 999. , ..., -35.4, -38.5, -38.4], [1000. , 1000. , 999. , ..., -35.5, -35.4, -35.3], [1000. , 1000. , 1000. , ..., -33.4, -33.3, -33.2], ..., [1000. , 1000. , 1000. , ..., 1000. , 999. , 999. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 999. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ]]) In [13]: model . V Out[13]: array([[1000. , 1000. , 1000. , ..., -31.5, -37.5, -34.5], [1000. , 1000. , 1000. , ..., -34.5, -31.5, -31.5], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], ..., [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ]]) if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-9.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-9.html"},{"title":"生物物理学 第3回","text":"講師： 樋口秀男 タンパク質の構造と安定性 タンパク質の定義 特定のアミノ酸（20種類）が重合した重合体である。 特定の立体構造をとる。 （これがないと ポリペプチド ） 機能 説明 分子認識 ミオグロビンは酸素を結合。抗体は抗原と結合。 触媒（酵素） 化学反応の反応速度は \\(10&#94;8\\) ~ \\(10&#94;{17}\\) 倍にも加速される。 制御 基質の結合や環境の変化に伴い構造を変化し、タンパク質の反応を制御する。 エネルギー変換 光を電位に換え、ATP分解を力に換える。 構造形成・維持 タンパク質重合体は細胞や細胞内器官の構造を支える。 タンパク質を構成するアミノ酸 d-グリセルアルデヒドの立体配置を基準として、この立体配置を崩さずにできる化合物をD-体、その鏡像異性体がL-体。 ※ タンパク質はL体 構造 名前 略（三文字） 略（一文字） アラニン Ala A アルギニン Arg R アスパラギン Asn N アスパラギン酸 Asp D システイン Cys C グルタミン酸 Glu E グルタミン Gln Q グリシン Gly G ヒスチジン His H イソロイシン Ile I ロイシン Leu L リシン Lys K メチオニン Met M フェニルアラニン Phe F プロリン Pro P セリン Ser S トレオニン Thr T トリプトファン Trp W チロシン Tyr Y バリン Val V # 上記の表は以下のコードを応用して作成した。 url = \"https://ja.wikipedia.org/wiki/タンパク質を構成するアミノ酸\" soup = BeautifulSoup ( requests . get ( url ) . content , 'lxml' ) for li in soup . findAll ( \"li\" , { \"class\" : \"gallerybox\" }): text = str ( li ) . replace ( ' \\n ' , '' ) src = re . findall ( r '<img.*src=\"(.+?)\".*>' , text )[ 0 ] name , l3 , l1 = re . findall ( r '<p>.*title=\"(.+?)\".*<br/>\\((.+?)\\xa0\\/\\xa0(.+?)\\)</p>' , text )[ 0 ] 理論的構造決定法 アミノ酸配列→量子力学→タンパク質の構造とエネルギー状態を決定 シュレディンガー方程式は水素原子のみ解析的に解くことができ、それ以外は近似を行う必要がある。 現在、高精度に計算（第一原理分子動力学法）できるのは1つの構造に対して100原子程度である。 水分子を考慮しなければ、タンパク質の構造や電子軌道を精度よく求めることはできない。 アミノ酸がポリペプチド結合した重合体から機能を持つ立体構造を創り構造を維持するためには、 立体構造が熱力学的に安定でなければならない。 → Gibbs自由エネルギー \\(G\\) を見る。 準安定なのは、 \\(G\\) が極小の時。 最も安定なのは、 \\(G\\) が最小の時。 まとめ 生体の機能を主に担っているのは、タンパク質である。（RNAも機能に重要である。） タンパク質は分子認識・触媒・制御・エネルギー変換・構造形成維持などの機能を有している。 アミノ酸配列から計算によってタンパク質構造を決定することに成功していない。（部分構造はできている。） 酵素機能を行うとき、酵素の多くの場所が構造変化を行う。 第7回目の講義(11/6)の小テスト 指定課題： 第1,2,3回の講義の中で、最も興味のある事柄について300~500字でまとめる。 この事柄と関連する内容を調べるなどして、自分の意見を300~500字で述べる。 図や式を使いわかりやすく説明すること。図や式は文字数に含めない。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html"},{"title":"領域分割","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt import matplotlib.patches as patches # 円を描画 領域分割 色によるクラス分け（画像のみ） k-means法 mean-shift法 色によるクラス分け（画像のみ） 例えば、画素(RGB)や位置(x,y)の似たものをグループ分けする。 二値分類(FG/BG分類)で有名なのが クロマキー （ 青色・緑色 背景） k-means法 予めクラス数 $k$ を指定してクラスタリング。 $k$ 個の代表点をランダムにサンプリング（$k$ 個をデータの中からとってきても良いし、完全にランダムでばらまいても良い。） 全てのデータ点から一番近い代表点を $1$ つ探す。 $k$ 個のグループの重心を計算し、それを新たな代表点とする。 2,3を繰り返す。 In [2]: from kerasy.ML.KMeans import KMeans In [3]: def decomposeImg ( path , K ): imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== KMeans === x = rgb_img . reshape ( - 1 , 3 ) model = KMeans ( K = K , random_state = 0 ) model . fit ( x ) cls , mu = model . predict ( x ) mu = mu . astype ( int ) for k in range ( K ): x [ cls == k ] = mu [ k ] # KMeansed Image. ax_K = fig . add_subplot ( 1 , 2 , 2 ) ax_K . imshow ( x . reshape ( img_shape )) ax_K . set_title ( f \"K= {K} \" ), ax_K . set_xticks ([]), ax_K . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No.{i+1:<0{len(str(K))}}, rgb=({','.join(mu[k].astype(int).astype(str))})\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () In [4]: decomposeImg ( path = \"lenna.png\" , K = 8 ) mean-shift法 画像領域の分割や対象画像の追跡に用いられる手法。 $d$ 次元の特徴量（ex. $\\mathrm{R,G,B},x,y$）を持った $N$ 個のデータ点 $\\mathbf{x}_i$ が分布しているときに、この点群 $\\mathbf{x}_i$ を標本点として得られるような確率密度関数 $f(\\mathbf{x})$ を考え、その標本点から確率密度関数 $f(\\mathbf{x})$ の極大点を探索する手法。 点群が集中している場所は確率密度関数 $f(\\mathbf{x})$ の値が高く、まばらな場所は低くなる。 ある任意の観測点 $\\mathbf{y}_j$ から半径 $h$ の超球を考え、その範囲にある点群 $\\mathbf{x}_i$ の平均 $\\mathbf{x}_c$ を計算し、その位置に観測点 $\\mathbf{y}_{j+1}$ を移動する。 この操作を繰り返すと観測点は最大勾配の方向に移動し、やがて極大点に収束する。 このように、 「近傍の点群の平均(mean)位置に移動(shift)を繰り返し、極大点を求める方法」 から ミーンシフト法(mean-shift) と呼ばれる。 In [5]: fig , ax = plt . subplots ( figsize = ( 6 , 6 )) # Circle r = 0.7 c = patches . Circle ( xy = ( 0 , 0 ), radius = r , ec = 'black' , fill = False ) ax . add_patch ( c ) # Sample Data X , Y = np . random . RandomState ( 123 ) . uniform ( low =- 0.3 , high = 1 , size = ( 2 , 50 )) cls = np . sqrt ( X ** 2 + Y ** 2 ) < r ax . scatter ( X , Y , c = cls , cmap = \"Set1_r\" , alpha = 0.7 ) # Center ax . scatter ( 0 , 0 , color = \"black\" , s = 100 ) ax . text ( 0.05 , - 0.05 , \"$\\mathbf {y} _ {j} $\" , fontsize = 12 ) # Mean mux , muy = np . mean ( X [ cls ]), np . mean ( Y [ cls ]) ax . scatter ( mux , muy , color = \"black\" , marker = '*' , s = 100 ) ax . text ( mux + 0.05 , muy , \"$\\mathbf {x} _c(=\\mathbf {y} _{j+1})$\" , fontsize = 12 ) # Arrow ax . annotate ( '' , xy = ( mux , muy ), xytext = ( 0 , 0 ), arrowprops = dict ( width = 2 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'blue' , edgecolor = 'blue' ) ) # Radius ax . plot (( 0 , 0 ),( 0 , - r ), color = \"black\" ) ax . text ( 0.05 , - r / 2 , \"r\" , fontsize = 12 ) ax . set_xlim ( - 1 , 1 ) ax . set_ylim ( - 1 , 1 ) plt . show () カーネル密度関数を用いた確率密度関数の推定 $d$ 次元空間内の $N$ 個の点群 $\\mathbf{x}_i$ を考える。この点群をある確率分布に従う標本と考えたとき、$d$ 次元空間内の任意の点 $\\mathbf{x}$ における確率密度関数 $f(\\mathbf{x})$ は、以下の方法で推定される。 $$f(\\mathbf{x}) = \\frac{c_{kd}}{Nh&#94;{d}}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)$$ $c_{hd}$ は、確率密度関数 $f(\\mathbf{x})$ 全体の積分を $1$ にするための正規化係数。 $k(t)$ は、カーネル関数 $K(t)$ の プロファイル で、$K(t)=k(|t|&#94;2)$ 以下の２つのカーネルが代表的である。 ガウシアンカーネル(Gaussian) エパネックニコフカーネル(Epanechnikov) $$K(t) = \\exp\\left(-\\frac{\\mid t\\mid&#94;2}{2}\\right)$$ $$K(t) = \\begin{cases}1- \\mid t\\mid&#94;2 & (\\mid t\\mid\\leq1)\\\\0 & (\\text{otherwise})\\end{cases}$$ 確率密度関数の勾配 勾配法(gradient method) を用いて極大点を逐次的に求めるために、確率密度関数の勾配 $\\nabla f(\\mathbf{x})$ を求める。 $$ \\begin{aligned} \\nabla f(\\mathbf{x}) &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;Nk'\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)\\left(\\mathbf{x}-\\mathbf{x}_i\\right)\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;N\\left(g_i\\mathbf{x}_i-g_i\\mathbf{x}\\right), \\quad g(t) = -k'(t),g'(t)=g\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|\\right)&#94;2\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\} \\end{aligned} $$ 項 説明 $$\\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}$$ ガウシアンカーネルやエパネックニコフカーネルを用いた場合、正になる。 $$\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\}$$ ミーンシフト と呼ばれる項で、観測点 $\\mathbf{x}$ の近傍のデータ点群 $\\mathbf{x}_i$ の加重平均位置と $\\mathbf{x}$ 自身の差分ベクトルを示す。 勾配法を用いた極大点探索（ミーンシフト法） 初期化：$\\mathbf{y}_0\\leftarrow\\mathbf{x}$ 更新（ミーンシフト） $$\\mathbf{y}_{j+1}\\leftarrow \\mathbf{y}_j + \\left(\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{y}_j\\right) = \\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}$$ $|\\mathbf{y}_{j+1}-\\mathbf{y}_j|<\\text{threshold}$ となるまで2を繰り返す。 収束した $\\mathbf{y}_{j+1}$ を極大点として出力する。 ※ 一般的な勾配法では、更新式 $\\mathbf{y}_{j+1}\\rightarrow\\mathbf{y}_i + \\alpha\\nabla f$ のステップ数 $\\alpha$ を与える必要があるが、ミーンシフト法では ベクトルの大きさは自動的に計算される ので、$\\alpha$ を与える必要がない（らしい…）。 ミーンシフト法を用いたクラスタリングへの応用 $d$ 次元空間中の $N$ 個の点群 $\\mathbf{x}_i$ が与えられた時に、密に分布する点群をクラスタとして分割する。 各点にミーンシフト法を適用し、収束位置 $\\mathbf{x}_i&#94;c$ を計算する。 任意の2個の点 $\\mathbf{x}_i,\\mathbf{x}_j$ について、その収束位置が閾値以下なら（$|\\mathbf{x}_i-\\mathbf{x}_j|<\\text{threshold}$）、この2点を同じ極大点として同じクラスタに入れる。 1,2より、全ての点群 $\\mathbf{x}_i$ を 同じ収束位置（極大点）に属するものごとにクラスタに識別する。 全ての点 $\\mathbf{x}_i$ でこの処理を行わなければならないが、並行化できる。 k-means手法とは異なり、クラスタの数を予め指定する必要がない。 ミーンシフト法を用いたカラー画像の領域分割 カラー画像の $N$ 個の各画素の位置 $\\mathbf{x}_i$ とその画素値 $\\mathbf{v}_i=\\left(R_i,G_i,B_i\\right)$ とし、画素位置-画素値を結合した5次元空間内の点 $\\mathbf{z}_i=(\\mathbf{x}_i,\\mathbf{v}_i)$ を考える。 「距離および色が近い画素が5次元空間内でクラスタを形成している」 とみて、ミーンシフト法で各画素をクラスタリングする。 画素位置に関するバンド幅 $h_s$、画素値に関するバンド幅 $h_r$ を与え、全ての $z_i$ にミーンシフトを行い、収束位置 $\\mathbf{z}&#94;c=(\\mathbf{x}&#94;c,\\mathbf{v}&#94;c)$ を計算する。 $\\mathbf{x}_i$ の画素値を、収束位置の画素の値 $(R&#94;c,G&#94;c,B&#94;c)$ に置き換えることによって、画像の平滑化ができる。 ミーンシフトは、以下の通り計算する。 $$f(\\mathbf{x}) = \\frac{c}{Nh_s&#94;2h_r&#94;3}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}&#94;s-\\mathbf{x}&#94;s_i}{h_s}\\right|&#94;2\\right)k\\left(\\left|\\frac{\\mathbf{x}&#94;r-\\mathbf{x}&#94;r_i}{h_r}\\right|&#94;2\\right)$$ したがって、以下のとおりに位置を更新する。 $$\\mathbf{y}&#94;{s}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;s\\mathbf{x}_i&#94;s}{\\sum_{i=1}&#94;Ng_i&#94;s},\\quad\\mathbf{y}&#94;{r}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;r\\mathbf{x}_i&#94;r}{\\sum_{i=1}&#94;Ng_i&#94;r}$$ $(h_s,h_r)$ のパラメータを大きくすると、より大きな領域に同色が統合され、大まかに分割される。 In [6]: from sklearn.cluster import MeanShift In [7]: import time s = time . time () imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) path = \"lenna.png\" bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== MeanShift === x = rgb_img . reshape ( - 1 , 3 ) model = MeanShift () model . fit ( x ) cls = model . predict ( x ) mu = model . cluster_centers_ . astype ( int ) K = max ( cls ) + 1 for k in range ( K ): x [ cls == k ] = mu [ k ] # MeanShifted Image. ax_Mean = fig . add_subplot ( 1 , 2 , 2 ) ax_Mean . imshow ( x . reshape ( img_shape )) ax_Mean . set_title ( f \"n_cluster= {K} \" ), ax_Mean . set_xticks ([]), ax_Mean . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No.{i+1:<0{len(str(K))}}, rgb=({','.join(mu[k].astype(int).astype(str))})\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () e = time . time () print ( f \"Processing time: {int((e-s)//60):>02}m {(e-s)%60:.3f}s\" ) plt . show () Processing time: 31m 13.287s In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html"},{"title":"領域処理のための特徴量","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 領域の特徴量 フーリエ変換 ガボールフィルタ(Gabor Filter) 同時生起確率 In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt （２次元）フーリエ変換 画像は、フーリエ変換によって周波数領域における別の形で表現される。 フーリエ変換の結果は、画像に含まれるそれぞれの周波数成分を表している。 フーリエ変換後の各周波数成分の大きさを成分ごとに変えることにより、元の画像の性質を変えることができる。 （周波数フィルタリング(frequency filtering)） ローパスフィルタ(lowpass fileter) ：画像に含まれる空間周波数成分のうち、低周波数成分は残し、高周波数成分は除去するようなフィルタ。 ハイパスフィルタ(highpass filter) ：上の逆。高周波数成分は残し、低周波数成分を除去するようなフィルタ。 バンドパスフィルタ(bandpass filter) ：ある中間的な周波数の範囲を残すようなフィルタ。 高域強調フィルタ(high-emphasis filter) ：画像の低周波数成分はそのまま保ちつつ、高周波数成分を強調するフィルタ。 $1$ 次元フーリエ変換 簡単のため、まずは一次元フーリエ変換をみる。 名前 数式 説明 フーリエ変換 $$F(\\omega) = \\int_{-\\infty}&#94;{\\infty}f(t)e&#94;{-i\\omega t}dt$$ 数直線上の表現 （空間領域） から周波数による表現 （周波数領域） への変換 逆フーリエ変換 $$f(x) = \\int_{-\\infty}&#94;{\\infty}F(\\omega)e&#94;{i\\omega x}d\\omega$$ 周波数領域にある関数を元の空間領域に戻す変換 実装 二つの正弦波を重ねた波から、それぞれの成分を取り出すことができるか確かめる。なお、ここでは numpy.fft.fft を利用しています。 これは、 高速フーリエ変換(Fast Fourier Transform) と呼ばれる、 高速に「離散フーリエ変換」を行うアルゴリズム を実装したものです。 In [2]: N = 10000 dt = 0.01 time = np . arange ( 0 , N * dt , dt ) freq = np . linspace ( 0 , 1.0 / dt , N ) In [3]: def sin ( A , f , p ): \"\"\" @param A: Amplitude @param f: Frequency[Hz] @param p: phase \"\"\" func = lambda t : A * np . sin ( 2 * np . pi * f * t + p1 ) return func In [4]: # parameters f1 , f2 = 5 , 8 # frequency[Hz] A1 , A2 = 5 , 3 # Amplitude p1 , p2 = 0 , 1 / 2 * np . pi # phase In [5]: y1 = sin ( A1 , f1 , p1 )( time ) y2 = sin ( A2 , f2 , p2 )( time ) y = y1 + y2 # superposition In [6]: # Computes the discrete Fourier transform (DFT) of a sequence yf = np . fft . fft ( y ) / ( N / 2 ) # Fast Fourier transform. In [7]: fig = plt . figure ( figsize = ( 8 , 4 )) ax1 = fig . add_subplot ( 2 , 1 , 1 ) ax1 . set_ylabel ( \"amplitude\" ) ax1 . set_xlabel ( \"time\" ) ax1 . set_xlim ( 0 , 1 ) ax1 . plot ( time , y , label = \"y(y1+y2)\" , color = \"blue\" ) ax1 . plot ( time , y1 , label = f \"y1(A= {A1} ,f= {f1} )\" , alpha = 0.3 , color = \"green\" ) ax1 . plot ( time , y2 , label = f \"y2(A= {A2} ,f= {f2} )\" , alpha = 0.3 , color = \"red\" ) ax1 . axhline ( 0 , alpha = 0.3 , color = \"black\" ) ax1 . legend () ax2 = fig . add_subplot ( 2 , 1 , 2 ) ax2 . set_ylabel ( \"amplitude\" ) ax2 . set_xlabel ( \"frequency\" ) ax2 . set_xlim ( 0 , 10 ) ax2 . plot ( freq , abs ( yf ), color = \"blue\" ) plt . tight_layout () plt . show () 見事に、二つの周波数成分を取り出すことができました。 $2$ 次元フーリエ変換 ※ 一般に画像は2次元空間で定義されたある関数 $f(x,y)$ として表現することができる！ 名前 数式 フーリエ変換 $$F(u,v) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x,y)\\exp\\left\\{-j2\\pi\\left(ux+vy\\right)\\right\\}dxdy$$ 逆フーリエ変換 $$f(x,y) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}F(u,v)\\exp\\left\\{j2\\pi\\left(ux+vy\\right)\\right\\}dudv$$ ここで、以下の値に注目することがよくある。 名前 数式 説明 振幅スペクトル(amplitude spectrum) $$\\mid F(u,v)\\mid = \\sqrt{\\mathrm{Re}\\left\\{F(u,v)\\right\\}&#94;2 + \\mathrm{Im}\\left\\{F(u,v)\\right\\}&#94;2}$$ 絶対値 位相スペクトル(phase spectrum) $$\\arg\\left\\{F(u,v)\\right\\} = \\tan&#94;{-1}\\frac{\\mathrm{Im}\\left\\{F(u,v)\\right\\}}{\\mathrm{Re}\\left\\{F(u,v)\\right\\}}$$ 偏角 パワースペクトル(power spectrum) $$\\mid F(u,v)\\mid&#94;2$$ In [8]: img = cv2 . imread ( 'lenna.png' , 0 ) f = np . fft . fft2 ( img ) fshift = np . fft . fftshift ( f ) magnitude_spectrum = 20 * np . log ( np . abs ( fshift )) plt . subplot ( 121 ), plt . imshow ( img , cmap = 'gray' ) plt . title ( 'Input Image' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'x' ), plt . ylabel ( 'y' ) plt . subplot ( 122 ), plt . imshow ( magnitude_spectrum , cmap = 'gray' ) plt . title ( 'Magnitude Spectrum' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'u' ), plt . ylabel ( 'v' ) plt . show () ガボールフィルタ(Gabor Filter) 正弦波とガウス関数の積で表される。（例：2次元ガボールフィルタ） $$g(x,y,\\lambda,\\phi) = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\exp\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 実数部： $$\\mathrm{Re}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\cos\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 虚数部： $$\\mathrm{Im}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\sin\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ フーリエ変換では、所望の周波数成分が領域のどこにあるのかわからないのに対し、ガボールフィルタは、 「領域のどの位置にどの方向の周波数が、どの強度であるか」 を知ることができる。 パラメータを操作して様々な方向と強度を持つフィルタ （フィルタバンク(filter bank)） を多数準備 し、特徴抽出を行う。また、ここで抽出された特徴量群は texton と呼ばれる。 入力された画像に対してガボールフィルタを畳み込んで（たたみ込み＝二次元の内積＝類似度を反映）、特徴量 $G(x,y,\\lambda,\\phi)$ を求める式は以下となる。 $$G(x,y,\\lambda,\\phi) = \\sum_u\\sum_vI(x,y)\\ast g(x-u, y-v, \\lambda, \\phi)$$ OpenCVの cv2.getGaborKerne を用いることで簡単にガボールフィルタを生成することができる、 引数 説明 ksize Size of the filter returned. sigma Standard deviation of the gaussian envelope. theta Orientation of the normal to the parallel stripes of a Gabor function. lambd Wavelength of the sinusoidal factor. gamma Spatial aspect ratio. psi Phase offset. In [9]: default_gabor = { \"ksize\" : ( 50 , 50 ), \"sigma\" : 4 , \"theta\" : 0 , \"lambd\" : 10 , \"gamma\" : 0.5 , \"psi\" : 0 , } In [10]: gabor = cv2 . getGaborKernel ( ** default_gabor ) plt . imshow ( gabor , cmap = \"gray\" ) plt . title ( \"default\" ) plt . show () In [11]: def argsGaborRelation ( key , vals ): global default_gabor defaul_val = default_gabor [ key ] N = len ( vals ) n_col = 4 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i , val in enumerate ( vals ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) ax . imshow ( gabor , cmap = \"gray\" ) ax . set_title ( f \" {key} = {val} \" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [12]: argsGaborRelation ( key = \"ksize\" , vals = [( 30 , 30 ),( 20 , 40 ),( 40 , 20 ),( 50 , 50 )]) In [13]: argsGaborRelation ( key = \"sigma\" , vals = [ x for x in range ( 8 )]) In [14]: argsGaborRelation ( key = \"theta\" , vals = [ np . radians ( x ) for x in range ( 0 , 180 , 45 )]) In [15]: argsGaborRelation ( key = \"gamma\" , vals = [ x for x in range ( 4 )]) In [16]: argsGaborRelation ( key = \"psi\" , vals = [ np . radians ( x ) for x in range ( 0 , 360 , 45 )]) In [17]: img = cv2 . imread ( 'lenna.png' , 0 ) color_img = cv2 . imread ( 'lenna.png' ) In [18]: def argsGaborSuperposition ( key , vals ): global default_gabor , img defaul_val = default_gabor [ key ] N = len ( vals ) * 2 n_col = 8 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) dests = 0 for i , val in enumerate ( vals ): default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) dest = cv2 . filter2D ( img , cv2 . CV_32F , gabor ) dests += dest ax_dst = fig . add_subplot ( n_row , n_col , 2 * i + 1 ) ax_dst . imshow ( np . power ( dest , 2 ), cmap = \"gray\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) ax_gab = fig . add_subplot ( n_row , n_col , 2 * i + 2 ) ax_gab . imshow ( gabor , cmap = \"gray\" ), ax_gab . set_xticks ([]), ax_gab . set_yticks ([]) # Superposition fig = plt . figure ( figsize = ( 8 , 16 )) ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( cv2 . cvtColor ( color_img , cv2 . COLOR_BGR2RGB )) ax_org . set_title ( \"original image\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) ax_dst = fig . add_subplot ( 1 , 2 , 2 ) ax_dst . imshow ( dests , cmap = \"gray\" ) ax_dst . set_title ( f \"Superposition of dst (key= {key} )\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [19]: argsGaborSuperposition ( key = \"theta\" , vals = [ np . radians ( x ) for x in np . linspace ( 0 , 180 , 8 )]) ※ 入力画像の８分割した全ての方向のエッジを重ね合わせると、元の画像をかなり高い精度で復元していることがわかる。 同時生起確率 テクスチャの統計的特徴量を求める。 離れた２つの場所にある画素対の値から、画素値の 一様性 ・ 方向性 ・ コントラスト などの性質を表す特徴量を求める。 ある画素 $i$ と、$i$ から離れた位置にある画素 $j$ の画素対を考え、画素 $i$ と画素 $j$ の相対的な位置を $\\delta=\\langle d,\\theta\\rangle$ とする。 それぞれの画素値を $L_i,L_j$ とし、画素値の対 $(L_i,L_j)$ が生じる出現頻度で、ある同時生起行列 $\\mathbf{H}_{\\delta}(L_i,L_j)$ を考える。ここで、出現頻度の総数で $\\mathbf{H}_{\\delta}(L_1,L_2)$ を正規化し、確率に変換した同時生起行列を $\\mathbf{P}_{\\delta}(L_i,L_j)$ とする。 確率に変換した同時生起行列を用いて計算する主な特徴量には次の $7$ 種類がある。（ここで、画素値のレベル数は $L$ である。）他にも様々な統計量を計算できるが、テクスチャの物理的な意味と直接には結びつかない数値もある。 $$ \\begin{aligned} \\mathrm{ENR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left\\{P_{\\delta}(L_i,L_j)\\right\\}&#94;2 & (\\text{energy})\\\\ \\mathrm{CNT} &= \\sum_{k=0}&#94;{L-1}k&#94;2P_{x-y}(k) & (\\text{contrast})\\\\ \\mathrm{CRR} &= \\frac{\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}L_iL_jP_{\\delta}(L_i,L_j) - \\mu_x\\mu_y}{\\delta_x\\delta_y} & (\\text{correlation})\\\\ \\mathrm{VAR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left(L_i-\\mu_x\\right)&#94;2P_{\\delta}(L_i,L_j) & (\\text{variance})\\\\ \\mathrm{EPY} &= -\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\log\\left\\{P_{\\delta}(L_i,L_j)\\right\\} & (\\text{entropy})\\\\ \\mathrm{SEP} &= -\\sum_{k=0}&#94;{2L-2}P_{x+y}(k)\\log\\left\\{P_{x+y}(k)\\right\\} & (\\text{sum entropy})\\\\ \\mathrm{IDM} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\frac{1}{1+(L_i-L_j)&#94;2}P_{\\delta}(L_i,L_j) & (\\text{inverse difference moment})\\\\ \\end{aligned} $$ ただし、 $$ \\mu_x = \\sum_{L_i=0}&#94;{L-1}L_iP_x(L_i), \\quad \\mu_y = \\sum_{L_j=0}&#94;{L-1}L_jP_y(L_j)\\\\ \\delta_x&#94;2 = \\sum_{L_i=0}&#94;{L-1}(L_i-\\mu_x)&#94;2P_x(L_i), \\quad \\delta_y&#94;2 = \\sum_{L_j=0}&#94;{L-1}(L_j-\\mu_y)&#94;2P_y(L_j)\\\\ P_x(L_i) = \\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j), \\quad P_y(L_j) = \\sum_{L_i=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\\\ P_{x-y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i-L_j|= k\\\\ P_{x+y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i+L_j|= k\\\\ $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html"},{"title":"主成分分析(PCA)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 主成分分析(PCA) 次元削減・非可逆データ圧縮・特徴抽出・データの可視化などに使われる。 主部分空間(principal subspace) と呼ばれる低次元の線形空間の上への、データ点の直交射影として、以下の2つの定義方法がある。 「射影されたデータの分散が最大化されるような直交射影」 として定義。→ 分散最大化による定式化 「データ点と射影した点の間の2乗距離の平均値で定義される 射影コスト関数 の期待値を最小化するような線形射影」 として定義。（要はデータ点からの距離を最小化）→ 誤差最小化による定式化 Pythonによる実装 分散最大化による定式化 次元 $D$ のユークリッド空間内のデータ集合 $\\{\\mathbf{x}_n\\}(n=1,\\ldots,N)$ を考える。ここで、 「射影されたデータ点の分散を最大化しながら、データを次元 $M ことを考える。 1次元空間の上への射影（$M=1$） この空間の方向を $D$ 次元ベクトル $\\mathbf{u}_1$ として表す。ここで、興味があるのは $\\mathbf{u}_1$ の方向だけであるので、$\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ としても一般性を失わない。 したがって、各データ点 $\\mathbf{x}_n$ は スカラー値 $\\mathbf{u}_1&#94;T\\mathbf{x}_n$ の上に射影される。ここで、射影されたデータの平均・分散は以下のようになる。 統計量 平均値 $$\\mathbf{u}_1&#94;T\\bar{\\mathbf{x}}\\qquad\\bar{\\mathbf{x}} = \\frac{1}{N}\\sum_{n=1}&#94;N\\mathbf{x}_n\\qquad (12.1)$$ 分散 $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1\\qquad\\mathbf{S} = \\frac{1}{N}\\sum_{n=1}&#94;N\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\qquad (12.3)$$ ここで、 射影されたデータの分散を、$\\mathbf{u}_1$ に関して最大化 することを考える。 制約条件 $\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ をラグランジュ乗数 $\\lambda_1$ を利用して導入して $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1 + \\lambda_1\\left(1-\\mathbf{u}&#94;T_1\\mathbf{u}_1\\right)\\qquad (12.4)$$ を最大化すれば良い。$\\mathbf{u}_1$ に関する微分を $0$ とおくことにより、停留条件は $$\\mathbf{Su}_1 = \\lambda_1\\mathbf{u}_1\\qquad (12.5)$$ となることがわかる。これは、 $\\mathbf{u}_1$ が $\\mathbf{S}$ の固有ベクトルであること を示している。左から $\\mathbf{u}&#94;T_1$ をかけると、 $$\\text{Variance} = \\mathbf{u}&#94;T_1\\mathbf{Su}_1 = \\lambda_1 \\qquad (12.6)$$ となる。よって、 分散は $\\mathbf{u}_1$ を、最大固有値 $\\lambda_1$ に属する固有ベクトルに選んだ時に最大になる ことがわかる。 $M$ 次元空間の上への射影（一般解） 演習12.1 帰納法を用いて、 射影されたデータの分散を最大化するようなM次元部分空間の上への線形写像が、データ共分散行列Sの上位M個の固有値に属するM本の固有ベクトルによって定義される ことを示す。 仮定 $M$ に対して上記が成り立つ。 データ空間に対する新しい方向ベクトル $\\mathbf{u}_{M+1}$ は、次を満たす。 $\\mathbf{u}_{M+1}$ は、$\\mathbf{u}_1,\\ldots,\\mathbf{u}_M$ と直交する。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0$） 単位長に規格化されている。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{M+1}=1$） 制約条件を踏まえると、 $$L = \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\lambda_{M+1}\\left(1-\\mathbf{u}&#94;T_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_j$$ 両辺を $\\mathbf{u}_{M+1}$ で微分すると、 $$0 = \\frac{\\partial L}{\\partial \\mathbf{u}_{M+1}} = 2\\left(\\mathbf{Su}_{M+1} - \\lambda_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_j\\cdots(\\ast)$$ これに左から $\\mathbf{u}&#94;T_{j}$ をかけると、 $$0 = \\lambda&#94;{\\prime}_j\\quad(\\because \\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0)$$ となるので、これを $(\\ast)$ に代入して、 $$\\mathbf{Su}_{M+1} = \\lambda_{M+1}\\mathbf{u}_{M+1}$$ また、この時分散は $$\\begin{aligned} \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i &= \\sum_{i=1}&#94;{M}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\mathbf{u}&#94;T_{M+1}\\mathbf{Su}_{M+1}\\\\ &= \\sum_{i=1}&#94;{M}\\lambda_i + \\lambda_{M+1} \\end{aligned}$$ ここで、仮定より $\\lambda_i$ は、データ共分散行列 $\\mathbf{S}$ の上位 $M$ 個の固有値なので、この分散を最大する $\\lambda_{M+1}$ は、$M+1$ 番目に大きい固有値となる。 誤差最小化による定式化 続いて、射影誤差の最小化に基づいた主成分分析の定式化を考える。 まず、$D$ 次元の基底ベクトル $\\{\\mathbf{u}_i\\}$ から成る完全正規直交系を導入する。（$\\mathbf{u}_i&#94;T\\mathbf{u}_i = \\delta_{ij}$） すると、各データ点はこれらの基底ベクトルの線形結合なので、以下の形で表すことができる。 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\alpha_{ni}\\mathbf{u}_i\\qquad (12.8)$$ なお、ここで式 $(12.8)$ は、各データ点 $\\{\\mathbf{x}_n\\}$ を、もともとの座標系から $\\{\\mathbf{u}_i\\}$ で表される新しい座標系への回転を表していると解釈できる （もともと $D$ 個の成分 $\\{x_{n1},\\ldots,x_{nD}\\}$ が、等価な集合 $\\{a_{n1},\\ldots,a_{nD}\\}$ に置き換えられている） 。 上式と $\\mathbf{u}_j$ との内積を取り、正規直交性を使うと、$\\alpha_{nj} = \\mathbf{x}_n&#94;T\\mathbf{u}_j$ を得るので、 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right)\\mathbf{u}_i\\qquad (12.9)$$ $D$ 次元から $M$ 次元への近似 ここで、$M （$M$ 次元空間で完全に $\\mathbf{x}_n$ を表現するのは一般に不可能なので、近似する。） したがって、各データ点を $$\\tilde{\\mathbf{x}}_n = \\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\qquad (12.10)$$ $\\{z_{ni}\\}$ は特定のデータ点に依存。 $\\{b_i\\}$ は全てのデータ点に共通な定数。 と近似して表す。つまり、 $\\{\\mathbf{u}_i\\}$ と $\\{z_{ni}\\}$ と $\\{b_i\\}$ を調整することで、次元が減ることによってもたらされる歪みを最小化すること がここでの目的となる。 近似による歪み尺度 $J$ 近似による歪みの尺度として、元々のデータ点 $\\mathbf{x}_n$ とその近似 $\\tilde{\\mathbf{x}}_n$ の間の2乗距離をデータ集合に渡って平均したものを採用する。 $$\\begin{aligned} J &= \\frac{1}{N}\\sum_{n=1}&#94;N\\|\\mathbf{x}_n-\\tilde{\\mathbf{x}}_n\\|&#94;2\\qquad (12.11)\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\left\\|\\mathbf{x}_n-\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)\\right\\|&#94;2 \\end{aligned}$$ そこで、各変数についての微分を $0$ としてこれを最小化する変数を求める。 $\\{z_{ni}\\}$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial z_{ni}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\left\\|\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\sum_{i=1}&#94;Mz_{ni}&#94;2-2\\sum_{i=1}&#94;Mz_{ni}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=1}&#94;M2\\left\\{z_{ni}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore z_{ni}&#94;{\\star} &= \\mathbf{x}_n&#94;T\\mathbf{u}_i \\qquad (12.12) \\end{aligned} $$ $b_i$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial b_{i}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\left\\|\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\sum_{i=M+1}&#94;Db_{i}&#94;2-2\\sum_{i=M+1}&#94;Db_{i}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D2\\left\\{b_{i}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore b_{i}&#94;{\\star} &= \\bar{\\mathbf{x}}_n&#94;T\\mathbf{u}_i \\qquad (12.13) \\end{aligned} $$ $J$ の整頓 ここで、$(12.10)$ の $z_{ni},b_i$ を置き換えると、 $$ \\begin{aligned} \\mathbf{x}_n-\\tilde{\\mathbf{x}}_n &= \\mathbf{x}_n-\\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=1}&#94;D\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i - \\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=M+1}&#94;D\\left\\{\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\mathbf{u}_i\\right\\}\\mathbf{u}_i\\qquad (12.14) \\end{aligned} $$ と表すことができる。この式から、 $\\tilde{\\mathbf{x}}_n$ から $\\mathbf{x}_n$ への変位を表すベクトルは、主部分空間に直交する空間にあることがわかる。 以上より、歪み尺度 $J$ に対する表現を、純粋に $\\{\\mathbf{u}_i\\}$ の関数として、以下のような形で得られることがわかる。 $$J = \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i-\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\right)&#94;2 = \\sum_{i=M+1}&#94;D\\mathbf{u}&#94;T_i\\mathbf{Su}_i\\qquad (12.15)$$ したがって、あとは$J$ を $\\{\\mathbf{u}_i\\}$ に対して最小化すれば良い。 $M=1,D=2$ の場合 $M=1,D=2$ の場合、 「規格化条件 $\\mathbf{u}&#94;T_2\\mathbf{u}_2 = 1$ の下で、方向 $\\mathbf{u}_2$ を、$J=\\mathbf{u}&#94;T_2\\mathbf{Su}_2$ が最小化されるように選ぶ」 問題となる。 つまり、ラグランジュ乗数を用いて、 $$\\tilde{J} =\\mathbf{u}&#94;T_2\\mathbf{Su}_2 + \\lambda_2\\left(1-\\mathbf{u}&#94;T_2\\mathbf{u}_2\\right)\\qquad (12.16)$$ を最小化する問題となる。 $\\mathbf{u}_i$ についての微分を $0$ とおくと、$\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を得る。つまり、$\\mathbf{u}_2$ は固有値 $\\lambda_2$ に属する $\\mathbf{S}$ の固有ベクトルであるので、 任意の固有ベクトルは、この歪み尺度の停留点を定義することとなる。 $(12.16)$ に $\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を代入すると、$J=\\lambda_2$ となる。ゆえに、 「$\\mathbf{u}_2$ を、2つある固有値のうち小さい方に対応した固有ベクトルを選ぶことにより、$J$ の最小値を得ることができる」 （↔︎ 主部分空間では大きい方 ） 任意の $D$ と任意の $M 任意の $D$ と任意の $M $$\\mathbf{Su}_i = \\lambda_i\\mathbf{u}_i\\qquad (12.17)$$ で与えられる共分散行列の固有ベクトルに選ぶことによって得られる。ここで $i=1,\\ldots,D$ であり、固有ベクトル $\\{\\mathbf{u}_i\\}$ は正規直交するように選ばれる。 また、対応する歪み尺度の値は、 $$J = \\sum_{i=M+1}&#94;D\\lambda_i\\qquad (12.18)$$ のように、 主部分空間に直交する固有ベクトルの固有値についての単なる和 で与えられる。したがって、$J$ の最小値は、小さい順から $D-M$ 個の固有値に対応する固有ベクトルを選ぶことによって得られ、つまり主部分空間を定義する固有ベクトルは大きい順から $M$ 個の固有値に対応する固有ベクトルになる。 実装 Wine Data Set (UCI Machine Learning Repository) のデータを利用し、13次元、178データ、3種類のワインの属性データから、2つの主成分を取って可視化を行います。 また、PCAは自作のモジュール （ kerasy.ML.decomposition.PCA ） を用います。 In [1]: # データ取得。 ! wget https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt --2019-10-07 13:20:45-- https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.228.133 Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.228.133|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 12173 (12K) [text/plain] Saving to: `wine.txt' wine.txt 100%[===================>] 11.89K --.-KB/s in 0s 2019-10-07 13:20:45 (40.4 MB/s) - `wine.txt' saved [12173/12173] In [2]: from kerasy.ML.decomposition import PCA In [3]: import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib.colors import LinearSegmentedColormap In [4]: colors = [( 1 , 0 , 0 ), ( 0 , 0 , 1 ), ( 0 , 1 , 0 )] n_bin = len ( colors ) cmap_name = 'my_list' cm = LinearSegmentedColormap . from_list ( cmap_name , colors , N = n_bin ) In [5]: df = pd . read_csv ( \"wine.txt\" , sep = \" \\t \" , index_col = 0 ) In [6]: df . head ( 3 ) Out[6]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } class Alcohol Malic acid Ash Alcalinity of ash Magnesium Total phenols Flavanoids Nonflavanoid phenols Proanthocyanins Color intensity Hue OD280/OD315 of diluted wines Proline 0 1 14.23 1.71 2.43 15.6 127 2.80 3.06 0.28 2.29 5.64 1.04 3.92 1065 1 1 13.20 1.78 2.14 11.2 100 2.65 2.76 0.26 1.28 4.38 1.05 3.40 1050 2 1 13.16 2.36 2.67 18.6 101 2.80 3.24 0.30 2.81 5.68 1.03 3.17 1185 class カラムがワインの種類を表しているので、この列は主成分分析から取り除きます。 In [7]: cls = df . iloc [:, 0 ] . values In [8]: df_use = df . iloc [:, 1 :] また、 データの標準化 を行います。 In [9]: df_std = df_use . apply ( lambda x : ( x - x . mean ()) / x . std (), axis = 0 ) In [10]: data = np . array ( df_std ) データの準備ができたので、主成分分析を行います。 In [11]: pca = PCA () pca . fit ( data ) features = pca . transform ( data ) In [12]: plt . figure ( figsize = ( 6 , 6 )) plt . scatter ( features [:, 0 ], features [:, 1 ], c = cls , cmap = cm , edgecolors = 'black' ) plt . title ( \"Same fig with slide :)\" ) plt . xlabel ( \"PC1\" ) plt . ylabel ( \"PC2\" ) plt . grid () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html"},{"title":"Nussinov Algorithm","text":"Nussinov Algorithmは、最もシンプルな二次構造予測アルゴリズムである。 「最大いくつの塩基対を作ることができるか」 を調べる。 動的計画法を用いて効率的に調べるために、以下のような Pseudoknot は無視している。様々な重要なRNAが、Pseudoknotの形をとることが確認されているが、相対的にこのような構造をとる確率は低いので、計算の効率を優先し、これらを無視する。 Algorithm ※「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 今回の実装では $j-i-1<3$ の時は、$i,j$ が塩基対を作れないものとしている。 ポイントはRecursionの最後の式で、 「$i$ から $k$ までの部分塩基配列」 と 「$k+1$ から $j$ までの部分塩基配列」 を足し合わせる操作を行う。 （Bifurcation） Initialization: $$\\begin{aligned} \\gamma(i,i)&=0&\\text{ for }i=1\\text{ to }L\\\\ \\gamma(i,i-1)&=0&\\text{ for }i=2\\text{ to }L \\end{aligned}$$ Recursion: $$ \\gamma(i,j) = \\max \\begin{cases} \\gamma(i+1,j)\\\\ \\gamma(i,j-1)\\\\ \\gamma(i+1,j-1)+\\delta(i,j)\\\\ \\max_{i\\leq k\\verb|<|j}\\left[\\gamma(i,k) + \\gamma(k+1,j)\\right] \\end{cases} $$ TraceBack 基本的なアルゴリズムは同じですが、 Bifurcationが起きた際にトレースバックポインターを複数用意する必要があることには注意が必要です。 bp = [] stack = [( 0 , N - 1 )] while ( stack ): i , j = stack . pop ( 0 ) delta = 1 if self . _is_bp ( sequence [ i ], sequence [ j ]) and ( j - i > 3 ) else 0 if ( i >= j ): continue elif gamma [ i + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( i + 1 , j )) elif gamma [ i ][ j - 1 ] == gamma [ i ][ j ]: stack . append (( i , j - 1 )) elif gamma [ i + 1 ][ j - 1 ] + delta == gamma [ i ][ j ]: bp . append (( i , j )); stack . append (( i + 1 , j - 1 )) else : # Bifurcation for k in range ( i , j ): if gamma [ i ][ k ] + gamma [ k + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( k + 1 , j )) stack . append (( i , k )) break 自作のモジュール （kerasy.Bio.structure.Nussinov） を使って実装します。 In [1]: from kerasy.Bio.structure import Nussinov In [2]: model = Nussinov () In [3]: # 以下の形のパラメタファイルを受け取ります。 ! cat params.json { \"type\": \"DNA\", \"Watson_Crick\": true, \"Wobble\": true } In [4]: model . load_params ( \"params.json\" ) In [5]: model . params () | parameter |value| -------------------- |type | DNA| |Watson_Crick| 1| |Wobble | 1| In [6]: # サンプル配列 sequence = \"GCGGAAACGGGGTCA\" In [7]: # 最大ペアの配列 model . predict ( sequence , memorize = True , traceback = True ) Nussinov Algorithm Score: 3 ================================================================= seq: GCGGAAACGGGGTCA : ( (( ))) ================================================================= In [8]: gamma = model . gamma In [9]: # DP行列は以下のようになっています。 model . _printAsTerai ( gamma , sequence ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 1 2 2 2 2 2 3 3 C - 0 0 0 0 0 0 1 2 2 2 2 2 3 3 G - - 0 0 0 0 0 1 1 1 1 1 2 3 3 G - - - 0 0 0 0 1 1 1 1 1 2 3 3 A - - - - 0 0 0 0 0 0 0 1 2 2 2 A - - - - - 0 0 0 0 0 0 1 2 2 2 A - - - - - - 0 0 0 0 0 1 2 2 2 C - - - - - - - 0 0 0 0 1 1 1 1 G - - - - - - - - 0 0 0 0 0 1 1 G - - - - - - - - - 0 0 0 0 1 1 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 $i,j$ が塩基対を組むときの塩基対最大化 塩基 $i,j$ が塩基対を組むという制約がある場合を考えます。これは、「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を保持した $\\omega(i,j)$ と $\\gamma(i,j)$ を組み合わせることで効率的に求めることができます。 Algorithm 「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を $\\omega(i,j)$ が保持している。 Initialization: $$\\omega(i,L) = 0$$ Recursion: $$ \\omega(i,j) = \\max \\begin{cases} \\omega(i-1,j)\\\\ \\omega(i,j+1)\\\\ \\omega(i-1,j+1)+\\delta(i-1,j+1)\\\\ \\max_{1\\leq k\\verb|<|i}\\left[\\omega(k,j) + \\gamma(k,i-1)\\right]\\\\ \\max_{j\\verb|<| k\\leq L}\\left[\\omega(j+1,k) + \\gamma(i,k)\\right] \\end{cases} $$ In [10]: model . outside ( sequence , memorize = True ) In [11]: omega = model . omega In [12]: # DP行列は以下のようになっています。 model . _printAsTerai ( omega , sequence ) \\ G C G G A A A C G G G G T C A G 3 3 3 2 2 2 1 1 1 0 0 0 0 0 0 C - 3 3 3 3 3 2 1 1 1 1 1 1 0 0 G - - 3 3 3 3 2 2 2 2 2 1 1 0 0 G - - - 3 3 3 2 2 2 2 2 1 1 0 0 A - - - - 3 3 2 2 2 2 2 1 1 0 0 A - - - - - 3 3 2 2 2 2 2 1 0 0 A - - - - - - 3 2 2 2 2 2 1 0 0 C - - - - - - - 2 2 2 2 2 1 0 0 G - - - - - - - - 3 3 3 2 2 1 1 G - - - - - - - - - 3 3 3 3 2 2 G - - - - - - - - - - 3 3 3 2 2 G - - - - - - - - - - - 3 3 2 2 T - - - - - - - - - - - - 3 2 2 C - - - - - - - - - - - - - 2 2 A - - - - - - - - - - - - - - 3 $Z(i,j)$ の計算 variable definition $\\gamma\\left(i,j\\right)$ the maximum number of base-pairs for subsequence from $i$ to $j$. $\\omega\\left(i,j\\right)$ the maximum number of base-pairs excluding subsequence from $i$ to $j$. 上記の定義より、$\\gamma,\\omega$ を用いて $Z(i,j)$ が以下のように求まることがわかります。 $$Z(i,j) = \\begin{cases} \\gamma\\left(i+1,j-1\\right) + 1 + \\omega\\left(i,j\\right) & (\\text{if }i\\text{ and }j\\text{-th nucleotides can form a base-pair})\\\\ 0 & (\\text{otherwise}) \\end{cases}$$ In [13]: model . ConstrainedMaximize ( sequence , memorize = False ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 2 0 0 0 0 0 3 0 C - 0 0 0 0 0 0 0 3 3 3 3 0 0 0 G - - 0 0 0 0 0 3 0 0 0 0 0 3 0 G - - - 0 0 0 0 3 0 0 0 0 0 3 0 A - - - - 0 0 0 0 0 0 0 0 3 0 0 A - - - - - 0 0 0 0 0 0 0 3 0 0 A - - - - - - 0 0 0 0 0 0 3 0 0 C - - - - - - - 0 0 0 0 3 0 0 0 G - - - - - - - - 0 0 0 0 0 2 0 G - - - - - - - - - 0 0 0 0 3 0 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 備忘録 Nussinov Algorithmでは、これまでの動的計画法とは異なり、 $i,j$ を斜め方向に舐める必要がありました。 そこで、その際に使用したコードを備忘録として残しておきます。 In [14]: import numpy as np In [15]: N = 4 In [16]: # Nussinov Algorithm (γ) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for ini_i in reversed ( range ( N )): diff = N - ini_i for i in reversed ( range ( ini_i )): arr [ i ][ i + diff ] = idx idx += 1 print ( arr ) [[0 3 5 6] [0 0 2 4] [0 0 0 1] [0 0 0 0]] In [17]: # Nussinov outsie (ω) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for j in reversed ( range ( N )): for i in range ( N - j ): arr [ i ][ j + i ] = idx idx += 1 print ( arr ) [[ 7 4 2 1] [ 0 8 5 3] [ 0 0 9 6] [ 0 0 0 10]] In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-8.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-8.html"},{"title":"Pair HMM の最尤推定","text":"Baum-Welch Pair HMMとは、二本の配列を受け取ってペアワイズアラインメントを出力するHMMで、 「アラインメントの確率的な解釈が可能になる」 （アラインメントのどの部分が信頼できるかを確率的に評価できる） という利点があります。 このPair HMMは、一般的なHMMと同様にBaum-Welchアルゴリズムによってパラメータを最尤推定していきます。 \\(\\xi\\) HMM 一般的なHMMでは、例えば 遷移確率 \\(A_{jk}\\) （状態 \\(j\\) から状態 \\(k\\) に遷移する確率） を最尤推定する際は、 直感的には 「状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「状態 \\(j\\) から遷移する回数」 で割れば最尤解が求まる。 実際の隠れ状態の遷移が確定していないので、 「 期待される 状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「 期待される 状態 \\(j\\) から遷移する回数」 で割れば良い。 \\(\\mathbf{z}_{n-1}\\) で状態 \\(j\\) におり、 \\(\\mathbf{z}_n\\) で状態 \\(k\\) にいる確率 \\(\\xi\\left(z_{n-1,j},z_{nk}\\right)\\) は、forward-backward algorithmの \\(\\alpha,\\beta\\) を用いれば以下のように求めることができる。 $$\\xi_n\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ \\(\\xi\\) を用いて、最尤推定を行う。 $$A_{j k}= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\qquad (13.19)$$ という様に行いますが、Pair HMMは、 挿入・欠失を考えるため、 \\(n\\) で配列 \\(\\mathbf{X,Y}\\) のどの要素（ \\(\\mathbf{x}_u,\\mathbf{y}_v\\) ）を考えているのか一意に定まらない という点で普通のHMMとは異なります。 Pair HMM そこで、 「 \\(n\\) ではなく \\(u,v\\) に注目する」 ことで、 \\((13.43)\\) の式を以下のように書き換えます。 $$\\xi_{u,v}\\left(i,j\\right)=\\frac{f_i\\left(u,v\\right)A_{ij}\\phi_j\\left(\\diamond_1\\right)b_j\\left(\\diamond_2,\\diamond_3\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ ここで、分子に注目すると、各変数の意味が variable meaning \\(f_i\\left(u,v\\right)\\) The probability of ending up in state \\(i\\) after aligning the two sequences \\(\\mathbf{X,Y}\\) up to observation \\(u\\) and \\(v\\) respectively. \\(A_{ij}\\) the transition probability from state \\(i\\) to state \\(j\\) . \\(\\phi_j\\left(\\diamond_1\\right)\\) the emission probability of emitting \\(\\diamond_1\\) in state \\(j\\) . \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) the probability of being in state \\(j\\) , given the sequences \\(\\mathbf{X,Y}\\) are aligned from observation \\(\\diamond_2+1\\) and \\(\\diamond_3+1\\) to the end of the sequences respectively. であるので、 \\(\\diamond\\) は状態によって異なり、具体的に書き下すと以下のようになります。 state\\variable \\(\\phi_j\\left(\\diamond_1\\right)\\) \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) \\(M\\) \\(e\\left(x_{u+1},y_{v+1}\\right)\\) \\(b_j\\left(u+1,v+1\\right)\\) \\(X\\) \\(e\\left(x_{u+1}\\right)\\) \\(b_j\\left(u+1,v\\right)\\) \\(Y\\) \\(e\\left(y_{v+1}\\right)\\) \\(b_j\\left(u,v+1\\right)\\) \\(\\gamma\\) 同様に \\(\\gamma\\) も考えると、 $$ \\gamma_n\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad(13.33)$$ から、 $$\\gamma_i\\left(u,v\\right)=\\frac{f_i\\left(u,v\\right)b_j\\left(u,v\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ のように書き換えることになります。 Maximization step ここまでで \\(\\gamma,\\xi\\) が求まったので、M stepで各パラメータを更新します。なお、以下で \\(w\\) は全ての記号の組を表します。 $$w\\in\\left\\{(k_x,k_y)|k_x,k_y\\in\\left\\{A,T,G,C,\\epsilon \\right\\}\\right\\}\\setminus(\\epsilon,\\epsilon)$$ \\(\\pi_k\\) $$\\pi&#94;{\\star}_i = \\sum_w\\gamma_i&#94;w(0,0)$$ \\(A_{ij}\\) $$A&#94;{\\star}_{ij} = \\frac{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\sum_{j}&#94;{K}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}$$ final emitting state \\(\\tilde{U}\\) \\(\\tilde{V}\\) \\(M\\) \\(U-1\\) \\(V-1\\) \\(X\\) \\(U-1\\) \\(V\\) \\(Y\\) \\(U\\) \\(V-1\\) \\(\\phi_{i}(k)\\) $$\\phi_i\\left(k\\right) = \\frac{\\sum_w\\sum_{u=0}&#94;{U\\ast1}\\sum_{v=0}&#94;{V\\ast2}\\gamma_i&#94;w\\left(u,v\\right)}{\\sum_w\\sum_{u=0}&#94;U\\sum_{v=0}&#94;V\\gamma_i&#94;w\\left(u,v\\right)}$$ \\(\\ast1\\) ： \\(x_u=k_x\\) and state \\(i\\) equals the state \\(M\\) or \\(X\\) . (in the state \\(Y\\) , a gap is present in observation stream \\(x\\) therefore \\(k_x\\) is not present.) \\(\\ast2\\) ： \\(y_v=k_y\\) and state \\(j\\) equals the state \\(M\\) or \\(Y\\) . Reference Wahle, Johannes and Armin Buch. \"Alignment and word comparison with Pair Hidden Markov Models.\" (2013). pp.22-31 Martijn B. Wieling. \"Comparison of Dutch Dialects\" (2007) pp.36-50 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-7.html"},{"title":"生物統計論 第2回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section2.1 Central Limit Theorem Law of Large Numbers Estimation is accurate with many samples. Foundation of repeated measurement. Regardless of true distribution. Assuming independence. Theorem Let $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ be an independent trials process, with finite expected value $\\mu = \\mathbb{E}\\left(\\mathbf{X}_i\\right)$ Let $\\bar{\\mathbf{X}}_n = \\frac{1}{n}\\left(\\mathbf{X}_1,\\mathbf{X}_2+\\cdots+\\mathbf{X}_n\\right)$ be a sample mean. Weak law : $$\\lim_{n\\rightarrow\\infty}P\\left(|\\bar{\\mathbf{X}}_n-\\mu|>\\varepsilon\\right) = 0 \\quad\\left(\\forall\\varepsilon>0\\right)$$ Strong law $$P\\left(\\lim_{n\\rightarrow\\infty}\\bar{\\mathbf{X}}_n = \\mu\\right) = 1$$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Chebyshev Inequality Let $\\mathbf{X}$ be a discrete random variable with expected value $\\mu=\\mathbb{E}\\left(\\mathbf{X}\\right)$ $$ P \\left(|\\mathbf{X}-\\mu|>\\varepsilon\\right)\\leq\\frac{\\mathbb{V}\\left(\\mathbf{X}\\right)}{\\varepsilon&#94;2}$$ Example In [2]: N = 1000 seed = 0 In [3]: trials = np . arange ( 1 , N + 1 ) In [4]: dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = N ) ave_dices = np . cumsum ( dices ) / trials In [5]: plt . axhline ( 3.5 , color = \"blue\" , label = \"Theoretical mean\" ) plt . plot ( trials , ave_dices , label = \"Observed average\" , color = \"green\" ) plt . ylim ( 1 , 6 ) plt . title ( \"Average dice roll by number of rolls\" ) plt . ylabel ( \"Average\" ) plt . xlabel ( \"Number of trials\" ) plt . grid () plt . legend () plt . show () If we keep rolling the dice over and over again, the sample average of dice roll will converge to the true average. Exception The law of large numbers assumes the existance of expected values . Therefore, it will not hold when there is no expected value. (ex. Cauchy distribution ) Cauchy distribution $$ \\begin{aligned} f(x;x_0,\\gamma) &= \\frac{1}{\\pi\\gamma\\left[1 + \\left(\\frac{x-x_0}{\\gamma}\\right)&#94;2\\right]} = \\frac{1}{\\pi}\\frac{\\gamma}{\\left(x-x_0\\right)&#94;2 + \\gamma&#94;2} & \\begin{cases}x_0: \\text{Location paramete}\\\\\\gamma: \\text{Scale parameter}\\end{cases}\\\\ f(x;0,1) &= \\frac{1}{\\pi\\left(1+x&#94;2\\right)} & (\\text{standard cauchy distribution}) \\end{aligned} $$ In [6]: N = 5000 K = 3 seed = 1 In [7]: trials = np . arange ( 1 , N + 1 ) In [8]: samples = np . random . RandomState ( seed ) . standard_cauchy ( size = ( K * N )) . reshape (( K , N )) ave_samples = np . cumsum ( samples , axis = 1 ) / trials In [9]: for k in range ( K ): plt . plot ( trials , ave_samples [ k ], label = f \"Observation {k+1}\" ) plt . ylabel ( \"$(\\mathbf {X} _1+\\cdots+\\mathbf {X} _n)/n$\" ) plt . xlabel ( \"n\" ) plt . legend () plt . grid () Central Limit Theorem Sample mean follows normal distribution. Foundation of many statistical tests. Regardless of true distribution. Assuming independence. Theorem Let $\\{\\mathbf{X}_1,\\ldots,\\mathbf{X}_n\\}$ be a random sample of size $n$, which is a sequence of independent and identically distributed random variables drawn from a distribution. expected value given by $\\mu$. finite variance given by $\\sigma&#94;2$. Let $S_n:=\\sum_{k=1}&#94;n\\mathbf{X}_k$ $$P\\left(\\frac{S_n-n\\mu}{\\sqrt{n}\\sigma}\\leq\\alpha\\right)\\rightarrow\\frac{1}{\\sqrt{2\\pi}}\\int_{-\\infty}&#94;{\\alpha}e&#94;{-\\frac{x&#94;2}{2}}dx\\quad(n\\rightarrow\\infty)$$ Therefore: $$ \\begin{aligned} S_n&\\sim\\mathcal{N}\\left(n\\mu, n\\sigma&#94;2\\right) & (n\\rightarrow\\infty)\\\\ \\bar{\\mathbf{X}}_n = \\left(\\mathbf{X}_1+\\cdots+\\mathbf{X}_n\\right)/n&\\sim\\mathcal{N}\\left(\\mu,\\sigma&#94;2/n\\right) & (n\\rightarrow\\infty) \\end{aligned} $$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Example In [10]: N = 10000 ns = [ 10 , 100 , 1000 , 10000 ] roll = 4 seed = 0 In [11]: fig = plt . figure ( figsize = ( 12 , 6 )) ax_all = plt . subplot2grid (( 2 , len ( ns )), ( 0 , 0 ), colspan = len ( ns )) for i , n in enumerate ( ns ): ax = plt . subplot2grid (( 2 , len ( ns )), ( 1 , i )) dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = ( n , N )) rate_dice_eq_4 = np . count_nonzero ( dices == roll , axis = 1 ) / N freqs , bins , patches = ax . hist ( rate_dice_eq_4 , bins = 20 , density = True ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] ax_all . plot ( cent_bins , freqs , label = f \"n= {n} \" ) ax . set_title ( f \"n= {n} \" ) ax . set_xlabel ( f \"Probability of {roll} roll.\" ) ax . set_ylabel ( \"freq\" ) ax_all . set_title ( \"Central Limit Theorem\" ) ax_all . legend () plt . tight_layout () plt . show () Section2.2 ChIP-seq Peak Detection ChIP-sequencing, also known as ChIP-seq, is a method used to analyze protein interactions with DNA. ChIP-seq combines chromatin immunoprecipitation (ChIP) with massively parallel DNA sequencing to identify the binding sites of DNA-associated proteins. It can be used to map global binding sites precisely for any protein of interest. Previously, ChIP-on-chip was the most common technique utilized to study these protein–DNA relations. Peak calling Problem: How to identify transcription factor binding sites and histone modification enriched regions? Random Read Model Assume that read appears with equal probability in any region. Calcurate the p-value (the Probability of obtaining more or equally extreme value than observed value under the random model.) → Smaller is more significant. Setting the threshold (p-value) manually. We could calcurate the threshold ($n_{obs}$) → If the $n_{obs}$ exceeds this threshold, it is determined as the peak region. In [12]: from scipy.special import comb In [13]: g = 10000 # total DNA length n = 1000 # total number of reads l = 100 # bin size q = l / g n_bins = g / l lambda_ = n * q # mean read count seed = 0 xmax = 30 In [14]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) read_points = np . random . RandomState ( seed ) . randint ( 0 , g , size = n ) axL . scatter ( read_points , np . zeros ( shape = n ), s = 3 , label = \"read\" , color = \"black\" ) ledge = 0 read_counts = [] for edge in range ( l , g + 1 , l ): middl = ( ledge + edge ) / 2 count = np . count_nonzero ([( ledge <= read_points ) & ( read_points < edge )]) read_counts . append ( count ) if edge <= l * 10 : axL . axvline ( edge , color = \"red\" ) axL . text ( x = middl , y = 1e-3 , s = count , horizontalalignment = 'center' ) ledge = edge axL . set_xlim ( 0 , l * 10 ) axL . set_ylim ( - 1e-3 , 2e-3 ) axL . set_yticks ([]) axL . legend () Poisson = [ comb ( n , i , exact = True ) * ( q ** i ) * (( 1 - q ) ** ( n - i )) for i in range ( n )] axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axR . plot ([ read_counts . count ( i ) / n_bins for i in range ( n )], color = \"red\" , label = \"Observed\" ) axR . set_xlim ( 0 , xmax ) axR . set_xlabel ( \"Read count for each bin\" ) axR . set_ylabel ( \"Frequency\" ) axR . legend () plt . show () In [15]: n_obs = 15 p_values = np . cumsum ( Poisson [:: - 1 ])[:: - 1 ] # Calcurate p-value for each n_obs. thresh_p = 1e-2 bp = np . argmax ( p_values <= thresh_p ) In [16]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axL . fill_between ( np . arange ( n_obs , xmax ), y1 = Poisson [ n_obs : xmax ], y2 = 0 , facecolor = 'red' ) axL . annotate ( 'p-value \\n = $\\mathbb {P} (n_ {obs} \\leq N)$ \\n $=\\sum_{i=n_ {obs} }&#94;{\\infty}(\\lambda&#94;i/i!)\\cdot e&#94;{-\\lambda}$' , xy = ( 17 , 1e-2 ), xytext = ( 20 , 4e-2 ), fontsize = 12 , arrowprops = dict ( width = 1 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'black' ) ) axL . set_xlim ( 0 , 30 ) axL . set_title ( \"Poisson distribution\" ) axL . set_xlabel ( \"N\" ) axL . set_ylabel ( \"Freq\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( p_values , color = \"black\" ) axR . scatter ( n_obs , p_values [ n_obs ], color = \"red\" , label = \"pvalue($n_ {obs} $=\" + f \" {n_obs} )\" ) axR . scatter ( bp , p_values [ bp ], color = \"blue\" , label = \"Boundary point\" ) axR . axhline ( thresh_p , color = \"blue\" , label = f \"threshold(p_value= {thresh_p} )\" ) axR . axvspan ( xmin = bp , xmax = xmax , color = \"blue\" , alpha = 0.3 ) axR . set_xlim ( 0 , xmax ) axR . set_title ( \"The relationship between p-value and $n_ {obs} $\" ) axR . set_xlabel ( \"$n_ {obs} $\" ) axR . set_ylabel ( \"p-value\" ) axR . legend () plt . show () In this case, we could say the threshold($n_{obs}$) = 19(=bp). ※ In ChIP-seq, we have to do \"Tag shift\" due to the DNA strand asymmetry. （→ more: MACS ） Section2.3 Hypothesis Testing Terminology In [17]: fig , ax = plt . subplots ( figsize = ( 6 , 4 )) X = np . arange ( 10 , 100 , 1 ) Y = 1 / X # Null distribution ax . plot ( X , Y , color = \"red\" ), ax . text ( x = 15 , y = 8e-2 , s = \"Null distribution \\n $f_S(s|H)$\" , fontsize = 15 ) # Thereshold: Sα ax . plot (( 50 , 50 ),( 0 , 7e-2 ), color = \"black\" ), ax . text ( x = 48 , y = 7.5e-2 , s = \"$S_ {α} $\" , fontsize = 12 ) # Reject & Accept ax . annotate ( '' , xy = ( 75 , 5e-2 ), xytext = ( 52 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 55 , y = 5.5e-2 , s = \"reject\" , fontsize = 12 ) # Reject ax . annotate ( '' , xy = ( 25 , 5e-2 ), xytext = ( 48 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 35 , y = 5.5e-2 , s = \"accept\" , fontsize = 12 ) # Accept # Observation sample. ax . plot (( 70 , 70 ),( 0 , 1 / 70 ), color = \"black\" ), ax . scatter ( 70 , 1 / 70 , color = \"black\" ), ax . text ( x = 68 , y = 2e-2 , s = \"$S_ {obs} $\" , fontsize = 12 ) ax . set_xticks ([]), ax . set_yticks ([]) ax . set_xlabel ( \"S\" ), ax . set_ylabel ( \"freq\" ) ax . set_xlim ( min ( X ), max ( X )), ax . set_ylim ( min ( Y ), max ( Y )) plt . show () Null Hypothesis $H_0$ Alternative Hypothesis $H_1$ Test Static $S$ Null distribution Significance threshold Reject/Accept $H_0$ Null hypothesis is True Null hypothesis is False Do not reject Null hypothesis ($H_0$) Correct Type2 error (False negative) Reject Null hypothesis ($H_0$) Type1 error (False positive) Correct P-value distribute uniformly under $H_0$ Proof. p-value is the probability of obtaining more or equally extreme value than observed value under the null distribution. $$p = \\mathbb{P}\\left(S\\geq s|H_0\\right) = 1-\\mathbb{P}\\left(S< s|H_0\\right)$$ By noting $F_0$ the cumulative distribution function of $S$ under $H_0$, we obtain: $$p = 1-F_0(s)$$ Thanks to the fact that the cdf is monotonic, increasing and (left-)continuous: $$\\mathbb{P}\\left(S\\geq s|H_0\\right) = \\mathbb{P}\\left(F_0\\left(S\\right)\\geq F_0\\left(s\\right)\\right) = 1-\\mathbb{P}\\left(F_0\\left(S\\right)< F_0\\left(s\\right)\\right)$$ Therefore, we have: $$\\mathbb{P}\\left(F_0\\left(S\\right)< F_0\\left(s\\right)\\right) = F_0\\left(s\\right)$$ Which means that $F_0\\left(S\\right)$ is following a uniform distribution. And, as this means also that $1-F_0\\left(S\\right)$ is following a uniform distributed, then we can conclude that p-value are uniformly distributed under the null hypothesis. In [18]: from scipy.stats import norm In [19]: N = 10000 loc = 0 scale = 1 seed = 0 In [20]: obs = np . random . RandomState ( seed ) . normal ( loc = loc , scale = scale , size = N ) # observation sample \"s\". p_value = 1 - norm . cdf ( x = obs , loc = loc , scale = scale ) # p-value = 1 - F(s) In [21]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) freqs , bins , patches = axL . hist ( obs , bins = 50 , density = True , color = \"blue\" , alpha = 0.7 ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] axL . plot ( cent_bins , freqs , color = \"blue\" ) axL . set_title ( \"Histogram of observation sample s \\n under the null distribution (This time: Normal distribution)\" ), axL . set_xlabel ( \"observation s\" ), axL . set_ylabel ( \"Frequency\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . hist ( p_value , bins = 20 , edgecolor = \"black\" ) axR . set_title ( \"Histogram of p-value\" ), axR . set_xlabel ( \"p-value\" ), axR . set_ylabel ( \"Frequency\" ) plt . tight_layout () plt . show () ※ We could argue about the p-value under the null hypothesis, but we could not confirm whether null hypothesis is true or not. Section2.4 Hypothesis Test Example $\\chi&#94;2$-test Any statistical hypothesis test where the sampling distribution of the test statistic is a chi-squared distribution when the null hypothesis is true. Used to determine whether there is a significant difference between the expected frequencies and the observed frequencies in one or more categories. $\\chi&#94;2$-distribution $Y_i\\sim\\mathcal{N}\\left(0,1\\right), i=1,\\ldots,\\nu$: i.i.d. $X=Y_1&#94;2+\\cdots+Y_{\\nu}$ $\\rightarrow X\\sim\\chi&#94;2(\\nu), X\\in \\mathbb{R}_{\\geq0}$ $$ \\begin{aligned} f_X(x) &= \\frac{1}{2&#94;{\\nu/2}\\Gamma(\\nu/2)}x&#94;{\\nu/2-1}e&#94;{-x/2}\\\\ \\Gamma(z) &= \\int_{0}&#94;{\\infty}t&#94;{z-1}e&#94;{-t}dt(\\mathrm{Re}(z)>0)\\\\ \\mathbb{E}(X) &= \\nu\\\\ \\mathbb{V}(X) &= 2\\nu \\end{aligned} $$ In [22]: from scipy.stats import chi2 In [23]: K = 5 In [24]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( 0 , 8 , 1000 ) for k in range ( 1 , K + 1 ): plt . plot ( X , chi2 . pdf ( X , k ), label = f \"$k= {k} $\" ) plt . xlim ( 0 , 8 ), plt . ylim ( 0 , 1.0 ) plt . title ( \"$\\chi&#94;2$-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Pearson's chi-square test goodness of fit test # $C_1$ $C_2$ $\\cdots$ $C_k$ total Observation frequency $n_1$ $n_2$ $\\cdots$ $n_k$ $n$ Theoretical probability (under $H_0$) $p_1$ $p_2$ $\\cdots$ $p_k$ $1$ Theoretical frequency $m_1=np_1$ $m_2=np_2$ $\\cdots$ $m_k=np_k$ $n$ Null Hypothesis($H_0$): $P(C_i) = p_i\\quad(i=1,2,\\ldots,k)$ If null hypothesis is true, $U$ are distributed as $\\chi&#94;2(k-1)$. $$ U=\\sum_{i=1}&#94;k\\frac{(n_i-m_i)&#94;2}{m_i}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ test for independence A\\B $B_1$ $B_2$ $\\cdots$ $B_b$ total $A_1$ $n_{11}$ $n_{12}$ $\\cdots$ $n_{1b}$ $n_{1\\cdot}$ $A_2$ $n_{21}$ $n_{22}$ $\\cdots$ $n_{2b}$ $n_{2\\cdot}$ $\\vdots$ $\\vdots$ $\\vdots$ $\\cdots$ $\\ddots$ $\\vdots$ $A_a$ $n_{a1}$ $n_{a2}$ $\\cdots$ $n_{ab}$ $n_a$ total $n_{\\cdot1}$ $n_{\\cdot2}$ $\\cdots$ $n_{\\cdot b}$ $n_{a\\cdot}$ $P(A_i) = p_i,P(B_j)=q_j,\\quad (1\\leq i\\leq a,1\\leq j\\leq b)$ Null Hypothesis($H_0$): $A$ and $B$ are independence. $$P(A_i\\cap B_j) = p_iq_j$$ If null hypothesis is true, we could presume: $\\bar{p_i}=n_{i\\cdot}/n$, $\\bar{q_j}=n_{\\cdot j}/n$. $m_{ij} = n\\bar{p_i}\\bar{q_j}$ (Theoretical frequency) $$ U=\\sum_{i=1}&#94;a\\sum_{j=1}&#94;b\\frac{(n_{ij}-m_{ij})&#94;2}{m_{ij}}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ t-test One-sample test: Determine whether a sample of observations could have been generated by a process with a specific mean $\\mu$. Two-sample test: Compare the average values of the two data sets and determine if they came from the same population. t-distribution $$ \\begin{aligned} f_{t(\\nu)}(x) &= \\frac{\\Gamma\\left(\\frac{\\nu+1}{2}\\right)}{\\sqrt{\\nu\\pi}\\Gamma\\left(\\frac{\\nu}{2}\\right)}\\left(1+\\frac{x&#94;2}{\\nu}\\right)&#94;{-\\frac{\\nu+1}{2}}\\\\ \\mathbb{E}(X) &= 0(\\nu>1)\\\\ \\mathbb{V}(X) &= \\begin{cases}\\infty&(1<\\nu\\leq2)\\\\\\frac{\\nu}{\\nu-2}&(2<\\nu)\\end{cases} \\end{aligned} $$ In [25]: from scipy.stats import t as tdist In [26]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( - 6 , 6 , 1000 ) nus = [ 1 , 2 , 5 , 1000 ] for nu in nus : plt . plot ( X , tdist . pdf ( X , nu ), label = f \"$ν= {nu} $\" ) plt . plot ( X , norm . pdf ( X , 0 , 1 ), linestyle = ':' , linewidth = 5 , label = \"Standard Normal Distribution\" ) plt . xlim ( - 6 , 6 ), plt . ylim ( 0 , 0.4 ) plt . title ( \"t-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Student's t-test One-sample test: $$ X_1,\\ldots,X_n\\sim\\mathcal{N}(\\mu,\\sigma)\\text{: i.i.d.}\\\\ \\bar{X} = \\frac{X_1,\\ldots,X_n}{n}, S = \\frac{\\left(X_1-\\bar{X}\\right)&#94;2 + \\cdots+\\left(X_n-\\bar{X}\\right)&#94;2}{n-1}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}-\\mu\\sqrt{n}\\right)}{S}\\sim t(n-1) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{X_{11}+\\cdots+X_{1m}}{m}\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{X_{21}+\\cdots+X_{2n}}{n}\\\\ S=\\frac{\\sum_{i=1}&#94;m\\left(X_{1i}-\\bar{X}_1\\right)&#94;2 + \\sum_{i=1}&#94;n\\left(X_{2i}-\\bar{X}_2\\right)&#94;2}{m+n-2}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)\\sqrt{mn}}{S\\sqrt{m+n}}\\sim t(m+n-2) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{\\sum_{i=1}&#94;mX_{1i}}{m}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{1i} - \\bar{X}_1\\right)&#94;2}{m-1}, A=S_1/m\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{\\sum_{i=1}&#94;mX_{2i}}{n}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{2i} - \\bar{X}_2\\right)&#94;2}{n-1}, B=S_2/n\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)}{S\\sqrt{A+B}}\\approx t(\\nu), \\nu=\\frac{(A+B)&#94;2}{A&#94;2/(m-1)+B&#94;2/(n-1)} $$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html"},{"title":"レポート課題1(10/3出題)","text":"gEAxgB+aX7dlt93io4zQcw==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html"},{"title":"イントロダクション","text":"講義計画 確率と統計の基礎 ： 最先端の機械学習技術の数学的基盤 探索と最適化 ： 広大な探索空間から最適解を効率よく探索 機械学習 ： データの背後に潜む知識を発見 自然言語処理 ： 人工知能技術の応用例 # 日付 内容 担当 1 10/3 概要 杉山 2 10/10 最適化（連続1） 佐藤 3 10/17 最適化（連続2） 佐藤 4 10/24 最適化（探索） 本多 5 10/31 確率と統計 本多 6 11/14 確率と統計 本多 7 11/21 確率と統計 本多 8 11/28 機械学習（教師付き学習） 本多 9 12/5 機械学習（教師付き学習） 佐藤 10 12/12 自然言語処理 宮尾 11 12/19 自然言語処理 宮尾 12 12/26 自然言語処理 宮尾 13 1/9 機械学習（強化学習） 杉山 1 1/16 試験 佐藤 人工知能とは 1956年：\"The Dartmouth Summer Research Project on Artificial Intelligence\" にて Artificial Intelligence という言葉が提唱された。 Watoson Nature AlphaGo 人工知能関連分野の発展 人工知能研究 1960年頃(1次ブーム)：記号処理、論理推論 1980年頃(2次ブーム)：エキスパートシステム ニューラルネット研究 1960年頃(1次ブーム)：パーセプトロン（１層） 1990年頃(2次ブーム)：誤差逆伝播ほう（多層） 機械学習研究 1995年頃〜：統計・凸最適化 1995年頃〜：ベイズ推論 2010年頃〜：深層学習 3種類の機械学習 教師付き学習 ：人間が教師となり、コンピュータの学習を手伝う。 教師なし学習 ：コンピュータが人間の手を介さずに自発的に学習する。 強化学習 ：ロボットが人間の手を介さずに自発的に意思決定を行う。 まとめ 人工知能 ： 知的なコンピュータシステムを作る 数学・プログラミング・実世界応用をつなぐ架け橋 探索 ： 広大な探索空間を効率よく探索 機械学習 ： データの背後に潜む知識を発見","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html"},{"title":"Pair HMM","text":"※実装時のパラメータ PairHMMによるアラインメントを実装していく。なお、 （ kerasy.Bio.alignment.PairHMM ） に定義してあります。 In [1]: from kerasy.Bio.alignment import PairHMM In [2]: # サンプル配列 seqX = \"CCAGAGCTGTGGCAGACAGTGGCT\" seqY = \"CCAGCTGTGCAGACACTGGCTT\" In [3]: model = PairHMM () In [4]: ! cat params.json { \"delta\": \"1/10\", \"epsilon\": \"1/5\", \"tau\": \"1/30\", \"px_e_y\": \"1/8\", \"px_ne_y\": \"1/24\", \"qx\": \"1/4\", \"qy\": \"1/4\" } In [5]: model . set_params ( path = \"params.json\" ) Pair HMM とその利点 HMMのために開発されたアルゴリズムを使える。（らしい←正解ラベルの無いアラインメントでBaum-Welchアルゴリズムをどのように使うのかは現在考察中です。） アラインメントの確率的な解釈が可能になる。 グローバルアラインメントを出力する Pair-HMM Mは $x$ と $y$ がマッチした状態。（$x_i$ と $y_j$ がアライン） Iは $x$ に挿入が起きている状態。（$x_i$ と $-$ がアライン） Dは $x$ に欠失が起きている状態。（$-$ と $y_j$ がアライン） （以下では上から $V&#94;M,V&#94;X,V&#94;Y$ と記述している。） Pair HMMのためのViterbiアルゴリズム 2本数の配列 $x,y$ を与えると確率最大のアラインメントを求めるアルゴリズム。 Initialization: $$ \\begin{cases} V&#94;M(0,0)=1, V&#94;M(i,0)=V&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ V&#94;X(0,0)=0, V&#94;X(1,0)=\\delta q_{x_1} V&#94;X(i,0)=\\varepsilon q_{x_i}V&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ V&#94;Y(0,0)=0, V&#94;Y(0,1)=\\delta q_{y_1} V&#94;Y(0,j)=\\varepsilon q_{y_j}V&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} V&#94;M(i,j) &= p_{x_iy_j}\\max\\begin{cases}(1-2\\delta-\\tau)V&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;Y(i-1,j-1)\\end{cases}\\\\ V&#94;X(i,j) &= q_{x_i}\\max\\begin{cases}\\delta V&#94;M(i-1,j)\\\\\\varepsilon V&#94;X(i-1,j)\\end{cases}\\\\ V&#94;Y(i,j) &= q_{y_j}\\max\\begin{cases}\\delta V&#94;M(i,j-1)\\\\\\varepsilon V&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$v_e = \\tau\\max\\left(V&#94;M(n,m),V&#94;X(n,m),V&#94;Y(n,m)\\right)$$ In [6]: P_optimal = model . align ( seqX , seqY , return_score = True ) Pair HMM (Viterbi) Alignment score: 3.551370651291424e-30 |parameter| value | -------------------------------- |delta | 0.1| |epsilon | 0.2| |tau | 0.03333333333333333| |px_e_y | 0.125| |px_ne_y |0.041666666666666664| |qx | 0.25| |qy | 0.25| =============================================================== X: CCAGAGCTGTGGCAGACAGTGGC-T Y: CC--AGCTGT-GCAGACACTGGCTT =============================================================== In [7]: print ( f \"π*= {P_optimal} \" ) π*=3.551370651291424e-30 アラインメントの信頼性 配列 $x,y$ が与えられた時、アラインメント $\\pi$ が得られる条件付き確率を考えることができ、それが アラインメントの信頼度 を表していると考ることができる。 $$ P(\\pi|x,y) = \\frac{P(x,y,\\pi)}{P(x,y)}\\\\ P(x,y) = \\sum_{\\text{alignments }\\pi}P(x,y,\\pi) $$ ※ なお、ここで $P(x,y)$ は $x,y$ に関する全ての可能なアラインメントについて確率を足し合わせたもの であり、Forwardアルゴリズムで計算することができる。 Pair HMMのためのForwardアルゴリズム ※ Viterbiの $\\max$ を $\\text{sum}$ に変更しただけ。 Initialization: $$ \\begin{cases} F&#94;M(0,0)=1, F&#94;M(i,0)=F&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ F&#94;X(0,0)=0, F&#94;X(1,0)=\\delta q_{x_1} F&#94;X(i,0)=\\varepsilon q_{x_i}F&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ F&#94;Y(0,0)=0, F&#94;Y(0,1)=\\delta q_{y_1} F&#94;Y(0,j)=\\varepsilon q_{y_j}F&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} F&#94;M(i,j) &= p_{x_iy_j}\\text{sum}\\begin{cases}(1-2\\delta-\\tau)F&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;Y(i-1,j-1)\\end{cases}\\\\ F&#94;X(i,j) &= q_{x_i}\\text{sum}\\begin{cases}\\delta F&#94;M(i-1,j)\\\\\\varepsilon F&#94;X(i-1,j)\\end{cases}\\\\ F&#94;Y(i,j) &= q_{y_j}\\text{sum}\\begin{cases}\\delta F&#94;M(i,j-1)\\\\\\varepsilon F&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$F_e = \\tau\\ \\text{sum}\\left(F&#94;M(n,m),F&#94;X(n,m),F&#94;Y(n,m)\\right)$$ In [8]: F , P_all = model . forward ( seqX , seqY ) In [9]: print ( f \"𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)= {P_all} \" ) 𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)=2.0457988072916236e-28 In [10]: print ( f \"P(π*|x, y)={P_optimal/P_all}\" ) P(π*|x, y)=0.017359334840912267 $x_i$ と $y_j$ がアラインされる確率 次の式で表される。 $$ \\begin{aligned} P(x_i\\diamondsuit y_i|x,y) &= \\frac{\\sum_{\\pi\\in\\Omega_{ij}}P(x,y,\\pi)}{P(x,y)}\\\\ &= \\frac{F&#94;M(i,j)\\cdot B&#94;M(i,j)}{P(x,y)} \\end{aligned}$$ ※ $\\Omega_{ij}$：$x_i$ と $y_j$ がアラインされるアラインメントの集合 Pair HMMのためのBackwardアルゴリズム Needleman-Wunsh-Gotoh のBackwardアルゴリズムとの類似性に注目！ Initialization: $$ \\begin{cases} B&#94;M(n,m)=B&#94;X(n,m)=B&#94;Y(n,m)=\\tau\\\\ B&#94;X(i,m)=\\varepsilon q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;Y(i,m)=\\varepsilon q_{y_{j+1}}B&#94;X(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ B&#94;M(i,m)=\\delta q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;M(n,j)=\\delta q_{y_{j+1}}B&#94;Y(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ \\end{cases} $$ Recursion: $i=n-1,\\ldots,1,\\quad j=m-1,\\ldots,1$ $$ \\begin{aligned} B&#94;M(i,j) &= \\text{sum}\\begin{cases}(1-2\\delta-\\tau)p_{x_iy_j}B&#94;M(i+1,j+1)\\\\\\delta q_{x_{i+1}}B(i+1,j)\\\\\\delta q_{y_{j+1}}B&#94;Y(i,j+1)\\end{cases}\\\\ B&#94;X(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{x_{i+1}}B&#94;X(i+1,j)\\\\ B&#94;Y(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{y_{j+1}}B&#94;Y(i,j+1)\\\\ \\end{aligned} $$ In [11]: B = model . backward ( seqX , seqY ) In [12]: Pij = ( F * B ) / P_all In [13]: import seaborn as sns import matplotlib.pyplot as plt In [14]: sns . heatmap ( Pij ) plt . show () In [15]: # 可視化のために pandas を使用。 import pandas as pd r , c = Pij . shape pd . set_option ( 'display.max_rows' , r ) pd . set_option ( 'display.max_columns' , c ) In [16]: df = pd . DataFrame ( Pij ) In [17]: df Out[17]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 0 1.139605e+00 1.145169e-02 1.061625e-04 9.380071e-06 7.330898e-07 1.256616e-08 5.467340e-10 2.910714e-11 5.763005e-12 3.410212e-13 5.102192e-15 2.187247e-16 1.988821e-17 1.147484e-18 1.367416e-20 6.720910e-22 4.976161e-24 7.098501e-26 9.237930e-28 2.211060e-29 3.898762e-32 1.763484e-40 1 1.002452e-01 9.915333e-01 6.192125e-03 1.868999e-04 4.332564e-05 9.546525e-07 4.066396e-08 2.157028e-09 9.465879e-11 4.846141e-11 4.058759e-13 3.267685e-14 8.754145e-16 1.928520e-16 1.373420e-18 1.082830e-19 9.927246e-22 1.394016e-23 1.508549e-25 4.777080e-27 9.963503e-30 8.788027e-38 2 2.530997e-02 1.110298e-01 7.189425e-01 4.724160e-03 2.510915e-04 4.961792e-05 1.187062e-06 1.017255e-07 3.970235e-09 2.068131e-10 9.703401e-11 7.255597e-13 1.565563e-13 2.611280e-15 3.254769e-16 2.694314e-18 1.079695e-19 1.562036e-21 1.545424e-23 1.735256e-25 1.265060e-27 2.215960e-35 3 1.439692e-03 1.313691e-01 9.101842e-02 4.446381e-01 5.912097e-03 3.126913e-04 8.585244e-05 1.538885e-06 1.919091e-07 8.250641e-09 2.393023e-10 1.283784e-10 1.387610e-12 2.250638e-13 4.821068e-15 2.111543e-16 4.457287e-18 2.448800e-19 3.227733e-21 1.284984e-23 8.240296e-26 3.335362e-33 4 3.517101e-05 3.000139e-03 4.131934e-01 8.504087e-02 1.663724e-01 9.561056e-03 2.917045e-04 9.039141e-05 1.788740e-06 1.312414e-07 2.869640e-08 4.101759e-10 1.507867e-10 3.456004e-12 5.959996e-13 5.757530e-15 2.024716e-16 4.111221e-18 7.279991e-20 1.060049e-21 6.121304e-24 4.843531e-31 5 9.934762e-06 1.458875e-04 3.927027e-03 6.740773e-01 8.441291e-02 7.234362e-02 1.094905e-02 1.879103e-04 1.252776e-04 1.454564e-06 1.059818e-07 2.729047e-08 9.494833e-10 8.082013e-11 1.033243e-11 3.411004e-13 6.554134e-15 3.958672e-16 8.201302e-18 3.482706e-20 2.714352e-22 4.461969e-29 6 5.322130e-07 6.381400e-05 4.257593e-04 6.688387e-03 9.174344e-01 4.917686e-02 4.329939e-02 3.819221e-03 1.763480e-04 1.328334e-04 1.940120e-06 9.105133e-08 1.541103e-08 2.609538e-09 8.150731e-11 2.404569e-11 1.889654e-13 3.985572e-15 1.024288e-16 6.839760e-18 1.341414e-20 4.476503e-27 7 5.863612e-10 7.892422e-07 1.012986e-04 1.397365e-03 1.342858e-02 1.002812e+00 2.593641e-02 3.890025e-02 1.670263e-03 1.614886e-04 8.871868e-05 1.756325e-06 1.155298e-07 1.122902e-08 2.203971e-09 1.028948e-10 2.509711e-11 1.531285e-13 2.099939e-15 4.258022e-17 2.374690e-18 1.208869e-24 8 1.171184e-11 2.035729e-09 3.700419e-07 2.397639e-04 4.844063e-03 2.599346e-02 9.949710e-01 1.502418e-02 2.712144e-02 1.478651e-03 1.433184e-04 6.712671e-05 1.454730e-06 9.766789e-08 9.072910e-09 2.328874e-09 6.340026e-11 1.502027e-11 1.916941e-13 1.314758e-15 1.242412e-17 4.691715e-23 9 3.005919e-13 6.399055e-11 5.515662e-09 3.748097e-07 1.153167e-04 1.497122e-02 6.310820e-02 8.863944e-01 1.030851e-02 1.491223e-02 2.002265e-03 8.941933e-05 3.530505e-05 1.470719e-06 9.754840e-08 8.043302e-09 3.375435e-09 3.679377e-11 2.917845e-12 5.484419e-14 1.471719e-15 4.178025e-21 10 1.792807e-15 1.557812e-12 1.844985e-10 1.289502e-08 7.545128e-07 6.340240e-05 2.061627e-02 1.787166e-01 5.419262e-01 1.188051e-02 1.024380e-02 2.347055e-03 7.577232e-05 1.796622e-05 1.114937e-06 7.069534e-08 8.011504e-09 2.756012e-09 4.374664e-11 6.704524e-13 1.075503e-14 1.217530e-19 11 1.923711e-17 4.362099e-15 1.941124e-12 6.147024e-10 1.551641e-08 5.550653e-07 1.380449e-04 9.537258e-03 5.398937e-01 1.863598e-01 1.452105e-02 9.548898e-03 1.837989e-03 5.136835e-05 1.397535e-05 6.835406e-07 5.429499e-08 8.819330e-09 1.851138e-09 1.231506e-11 1.775772e-13 2.576473e-18 12 5.638842e-19 1.455168e-16 9.139939e-15 1.547158e-12 1.037887e-09 2.248539e-08 1.151600e-06 9.872926e-05 5.973776e-03 8.862574e-01 6.786997e-02 1.624026e-02 4.029496e-03 2.179139e-03 2.921118e-05 1.601828e-05 5.561847e-07 3.123249e-08 2.978327e-09 9.604760e-10 3.744283e-12 9.636167e-17 13 3.331427e-21 7.494769e-19 2.963338e-16 6.987305e-15 4.315679e-12 6.087761e-10 3.497465e-08 3.604967e-06 8.639915e-05 5.915526e-03 9.923696e-01 2.749764e-02 2.345296e-02 2.411435e-03 1.600356e-03 2.967960e-05 1.263876e-05 5.535990e-07 1.777340e-08 1.086922e-09 1.497803e-10 4.715717e-15 14 8.334075e-23 3.113616e-20 1.885485e-18 4.096232e-16 1.085250e-14 2.877122e-12 9.801182e-10 2.465783e-08 7.111413e-06 1.332057e-04 5.532024e-03 1.019408e+00 1.546140e-02 2.230611e-02 1.326417e-03 7.657518e-04 3.756285e-05 1.397395e-05 7.084890e-07 8.614586e-09 3.251784e-10 1.560898e-13 15 2.761536e-24 1.577325e-22 1.652226e-19 6.855680e-18 4.640406e-16 1.789313e-14 1.881340e-12 7.696555e-10 3.721167e-08 3.131924e-06 2.768933e-04 5.432195e-03 1.019385e+00 1.220031e-02 2.678270e-02 1.012065e-03 4.234835e-04 2.691482e-05 8.312535e-06 2.735984e-07 4.296980e-09 1.264609e-12 16 1.125679e-25 3.526855e-23 5.295754e-22 1.029758e-19 2.954167e-17 8.415539e-16 3.337555e-14 1.886064e-12 3.708635e-10 8.103999e-08 2.979865e-06 2.717052e-04 5.867388e-03 1.008690e+00 1.398136e-02 2.796359e-02 1.094449e-03 2.222028e-04 1.653854e-05 6.727102e-06 7.321521e-08 3.095212e-11 17 5.314132e-29 1.371847e-25 1.002377e-22 1.431441e-21 2.329882e-19 2.824449e-17 1.264033e-15 1.039492e-13 1.896385e-12 2.117496e-10 8.676212e-08 1.428983e-06 4.224040e-04 7.551663e-03 9.828098e-01 2.577489e-02 2.154489e-02 1.348560e-03 1.271999e-04 1.123527e-05 1.554246e-06 1.061734e-09 18 1.311292e-30 3.344026e-28 1.039987e-25 1.917693e-22 4.842995e-21 2.644625e-19 5.424283e-17 1.016892e-15 2.466777e-13 3.876336e-12 1.412328e-10 6.644843e-08 1.307534e-06 2.267450e-04 1.352321e-02 9.236001e-01 4.123399e-02 2.242045e-02 1.780378e-03 1.137684e-04 4.658387e-06 2.707169e-08 19 3.685034e-32 1.308860e-29 1.727006e-27 1.846830e-25 9.168694e-23 2.025241e-20 2.015727e-19 7.009128e-17 1.110761e-15 2.135974e-13 8.991483e-12 3.294862e-10 2.170110e-08 1.342768e-06 1.738901e-04 1.366663e-02 9.157034e-01 5.085192e-02 1.134612e-02 1.333942e-03 1.601513e-04 7.755075e-07 20 2.627187e-34 3.307561e-31 6.412082e-29 8.638204e-27 5.130913e-25 5.421429e-23 2.735844e-20 4.581117e-19 4.673008e-17 1.996269e-15 1.567873e-13 2.425635e-11 7.144030e-10 2.339911e-08 4.401237e-07 1.583398e-04 8.993801e-03 8.715290e-01 1.032744e-01 9.301698e-03 8.040002e-04 1.264439e-05 21 3.712503e-36 1.248259e-33 7.484327e-31 4.015876e-28 1.275117e-26 7.126689e-25 1.294296e-22 1.126902e-20 1.562753e-18 3.245370e-17 8.822502e-16 3.618329e-13 1.719160e-11 9.436607e-10 3.634534e-08 4.567520e-07 2.489897e-05 1.031566e-02 8.313752e-01 1.337435e-01 9.529909e-03 1.755113e-04 22 1.081603e-37 4.975375e-35 3.859345e-33 1.396911e-30 8.994506e-28 2.233130e-26 1.907603e-24 1.395483e-22 7.223861e-21 2.385762e-18 3.020013e-17 1.437842e-15 1.876938e-13 2.135337e-11 5.432165e-10 7.346489e-08 4.608162e-07 1.776497e-05 2.915009e-03 7.255898e-01 2.520881e-01 4.862597e-03 23 7.053935e-40 3.695478e-37 9.639089e-35 1.470014e-32 2.795455e-30 1.235666e-27 2.213410e-26 7.771768e-24 1.829949e-22 1.539068e-20 1.623359e-18 3.985091e-17 3.521057e-15 1.986472e-13 1.486597e-11 3.334896e-10 7.576041e-08 5.116867e-07 2.834710e-05 1.528768e-03 3.676275e-01 6.239253e-01 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-6.html"},{"title":"生物物理学 第2回","text":"講師： 樋口秀男 生命体（生物）の一般的定義 生物とは、以下の四つの条件を満たす物質システム 自己と外界との境界 エネルギーと物質の代謝 自己複製 恒常性 電子 分子 細胞数 整体の階層性 $10&#94;{28}$ $10&#94;{23}$ $10&#94;{13}$ ヒト 意識・運動・代謝 $10&#94;{24}$ $10&#94;{19}$ $10&#94;{9}$ 心臓 循環・拡散 $10&#94;{15}$ $10&#94;{10}$ $10&#94;{0}$ 心筋細胞 生理的なリズム単位 $10&#94;{5}$ $10&#94;{5}$ 筋節 ゆらぎを制した振動 $10&#94;{0}$ タンパク質 反応のゆらぎ $10&#94;{2}$ アミノ酸 タンパク質の性質の起源 $10&#94;{0}$ 電子 量子力学の支配領域 生命科学を覆う謎 生命誕生の謎（+生命の進化、分化の謎） タンパク質構造の決定と機能との関係の謎 細胞が超多種分子（タンパク質、脂質、小分子、イオン、…）の濃度・種類・機能の制御を行う謎 個体（臓器、器官等）の構造と機能構築の謎 生命誕生の謎 元素誕生は超新星の爆発→重金属ができる。 現宇宙の元素の割合と人体内の元素比が非常に似通っている。 RNAワールド プロテインワールド 原始地球上に存在したと仮定される、RNA からなる自己複製系のこと。また、これがかつて存在し、現生生物へと進化したという仮説。 まずアミノ酸ができ、重合してポリペプチド、さらにタンパク質が作り出され、これが触媒として働いて生命を作り出したという仮説。 生命誕生を示唆した実験事実 ミラーの放電によるアミノ酸合成(1953) $\\mathrm{CH_3,NH_3,H_2,H_2O}$ を含む気体に放電（落雷を模した）をする。 実験２週間後に以下の化合物 （アミノ酸） ができた。 グリシン アラニン グルタル酸 酢酸（脂肪酸） 塩基や糖（リボース）、核酸基、RNA、タンパク質なども化学合成可能。 生命基本物質の化学合成が成功した理由 地球には、エネルギーの高い（海底火山、紫外線、雷、高音）場所と低く安定な場所が共存していたので、分子は 高エネルギー環境で合成され、低エネルギー環境で安定化する ことができた。 $$A\\overset{k_1}{{\\longrightarrow}}B\\overset{k_2}{{\\longrightarrow}}C$$ In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: def simulate ( ax , color , tp , A = 1 , B = 0 , C = 0 , dt = 1e-3 , k1 = 0.07 , k2 = 0.02 , K = 1 ): time = np . arange ( 0 , 100 , dt ) As = np . zeros ( shape = len ( time )) Bs = np . zeros ( shape = len ( time )) Cs = np . zeros ( shape = len ( time )) for i , t in enumerate ( time ): dA = ( - k1 * A ) * dt * K dB = ( k1 * A - k2 * B ) * dt * K dC = ( k2 * B ) * dt * K A += dA ; B += dB ; C += dC As [ i ] = A ; Bs [ i ] = B ; Cs [ i ] = C if t > tp : K = 1e-6 # 温度を下げ、反応速度が1e-6倍になったことをシミュレーション ax . plot ( time , As , color = color ) ax . plot ( time , Bs , color = color ) ax . plot ( time , Cs , color = color ) if tp < 100 : ax . vlines ( x = tp , ymin = 0 , ymax = 1 , linestyle = \":\" ) return ax In [3]: fig , ax = plt . subplots () ax = simulate ( ax = ax , color = \"red\" , tp = 20 ) ax = simulate ( ax = ax , color = \"black\" , tp = 100 ) ax . set_xlabel ( \"Time\" ) ax . set_ylabel ( \"RQ\" ) ax . set_title ( \"Simulation Result\" ) plt . show () 上記のシミュレーション結果から、$A,B$ 分子を得るためには、 途中で（温度が下がるなどの結果）反応速度が下がる必要がある ことがわかる。 生体分子が濃縮され、多次反応による分子合成速度が上がった。 地球は巨大で多様な反応槽であったため、合成確率が上がった。 考えられる生物 地球型炭素生物 地球環境のように水と二酸化炭素（あるいはメタン）が豊富な惑星であるなら、情報記憶（DNA）→伝令（mRNA）→機能（タンパク質、RNA）のような地球型の仕事を分担した炭素生物が生まれる可能性は高い。 炭素生物 vs ケイ素生物 常温常圧で安定な炭素ー炭素結合 とは違い、 ケイ素ーケイ素結合はパイ結合やシグマ結合による二重三重結合を作る傾向がほとんど無く、非常に不安定 である。 炭素ーケイ素結合は安定 なので、炭素生物の中にケイ素が含まれるだろう。したがって、ケイ素生物の存在する確率は非常に低い。 金属生物 常温において金属結合が安定であり、分子としての機能を持つことは困難であるため、生物の中心にはならないだろう。ただし、金属イオンや錯体として、炭素生物やケイ素生物に利用されることはありうる。 講義のまとめ 生命分子や細胞の種類は多く、構造や機能をどのように理解するかが、 生命科学全体の 課題である。 生命は 宇宙の元素を効率よく利用した。 地球上の 高↔︎低エネルギーを行き交い 、多様な環境や濃縮により高確率かつ安定的に生体分子が合成された。 これが生命の誕生の確率を大きくした。 初めにRNAが合成され、それを鋳型としてタンパク質が合成され、原子生命が誕生したと想像される。 系外惑星にも、炭素生命体が存在する可能性がある。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html"},{"title":"ペアワイズアラインメント","text":"ペアワイズアラインメントとは 2本のDNAの塩基配列（タンパク質のアミノ酸配列）を比較する方法の一つ バイオインフォマティクスでは最も基本的な解析手法 なぜDNA配列の比較をするのか DNAの機能を知りたい （∵ DNAの配列が似ていると機能が似ている） DNAのどの部分が重要かを知りたい。 （∵ 「保存されている＝重要」だと考えられる） 生物の進化系統樹を知りたい 新型シーケンサーで読まれたDNAの由来を知りたい DNAの変異や新型シークエンサーの読み取りエラーでは 長さが異なる ことがあるので、 長さの変化を考慮し効率の良い動的計画法 を用いる アラインメントの種類 説明 例 グローバルアラインメント 2本の配列の 全体 をアラインメントする。 Needleman-Wunsch ローカルアラインメント 2本の配列の 似ている部分を検出 し、その部分をアランメントする Smith-Waterman 実装 各種アラインメントを実装していく。なお、全て Affine gap penalty を利用する。 In [1]: from kerasy.Bio.alignment import NeedlemanWunshGotoh , SmithWaterman , BackwardNeedlemanWunshGotoh In [2]: # サンプル配列 seqX = \"GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACGGAGCTGTGGCAGACCTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGCGAGGACTG\" seqY = \"CGCATGCGGAGTGAGGGGAGCAGTTGGGAACAGATGGTCCCGCCGAGGGACCGGTGGGCAGACGGGGCCAGCTGTGGCAGACACTGGCTTCTAACCACCGAACGTTCTTTCCGCTCCGC\" Needleman-Wunsch-Gotoh 自作のモジュール （ kerasy.Bio.alignment.NeedlemanWunshGotoh ） を使ってアラインメントをします。 In [3]: model = NeedlemanWunshGotoh () In [4]: model . align ( seqX , seqY ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== Smith-Waterman 自作のモジュール （ kerasy.Bio.alignment.SmithWaterman ） を使ってアラインメントをします。 In [5]: model = SmithWaterman () In [6]: model . align ( seqX , seqY ) Smith-Waterman Alignment score: 37.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== Aligned positions: X[0,111] Y[7,118] X: GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACG Y: GGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GGGCAGACG X: G----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGC Y: GGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCTCCGC =============================================================== 制約付きアラインメント $x_i$ と $y_j$ がアラインされるという制約下で最大のアラインメントスコアを求める。 全てのパターンを列挙すると $\\mathcal{O}(n&#94;2m&#94;2)$ の時間がかかるが、 後ろ向きアラインメント と組み合わせることで全てのパターンを $\\mathcal{O}(nm)$ で計算可能。 前向き：xiとyjがアラインされる時の、iまでとjまでの配列の最大アラインメントスコアを保持。 後ろ向き：xiとyjがアラインされる時の、i+1以降とj+1以降の配列の最大アラインメントスコアを保持。 Needleman-Wunsch-Gotohの逆向きアラインメントは （ kerasy.Bio.alignment.BackwardNeedlemanWunshGotoh ） に定義してあります。 In [7]: model_forward = NeedlemanWunshGotoh () model_backward = BackwardNeedlemanWunshGotoh () In [8]: model_forward . align ( seqX , seqY , memorize = True ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== In [9]: model_backward . align ( seqX , seqY , memorize = True ) Backward Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGGAACA-GATGGTCC-CGCCGAGGGACCGGTGG- X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTTC-TAACCACCGAACGTTCTTTCCG-CT X: CCGCGAGGACT Y: CCGC------- =============================================================== In [10]: k = 3 n = len ( seqX ) + 1 m = len ( seqY ) + 1 In [11]: M = model_forward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] bM = model_backward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] In [12]: A = M + bM In [13]: # 上の配列を見れば、seqX[0] と seqY[7] がアラインされている時に最大スコア14を取ることがわかるので、それを確かめる。 print ( A [ 0 , 7 ]) 14.0 In [14]: # 可視化のために pandas を使用。 import pandas as pd pd . set_option ( 'display.max_rows' , m ) pd . set_option ( 'display.max_columns' , n ) In [15]: df = pd . DataFrame ( A ) In [16]: df Out[16]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 0 12.0 10.0 8.0 8.0 8.0 10.0 8.0 14.0 7.0 2.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -17.0 -20.0 -25.0 -26.0 -31.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -51.0 -54.0 -55.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -129.0 -132.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -150.0 -156.0 -156.0 -159.0 -160.0 -163.0 -164.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -181.0 -184.0 -187.0 -190.0 -193.0 -194.0 -197.0 -198.0 -201.0 -200.0 -203.0 -206.0 -209.0 -210.0 -211.0 -214.0 -217.0 -218.0 -221.0 -224.0 -225.0 -228.0 -229.0 -230.0 -235.0 -238.0 -241.0 -242.0 -243.0 -246.0 1 5.0 12.0 8.0 6.0 6.0 8.0 8.0 8.0 14.0 5.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -14.0 -17.0 -22.0 -25.0 -26.0 -33.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -53.0 -54.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -131.0 -132.0 -135.0 -140.0 -141.0 -144.0 -147.0 -148.0 -150.0 -157.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -171.0 -174.0 -179.0 -180.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -200.0 -203.0 -206.0 -211.0 -210.0 -211.0 -216.0 -217.0 -220.0 -223.0 -224.0 -227.0 -228.0 -229.0 -232.0 -237.0 -240.0 -243.0 -242.0 -243.0 2 2.0 3.0 10.0 8.0 6.0 6.0 6.0 6.0 6.0 14.0 3.0 0.0 -3.0 -4.0 -9.0 -12.0 -13.0 -16.0 -17.0 -24.0 -27.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -47.0 -48.0 -53.0 -54.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -125.0 -126.0 -131.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -150.0 -150.0 -157.0 -156.0 -159.0 -158.0 -163.0 -166.0 -169.0 -172.0 -171.0 -176.0 -177.0 -180.0 -183.0 -184.0 -187.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -200.0 -203.0 -204.0 -209.0 -210.0 -213.0 -214.0 -217.0 -220.0 -221.0 -224.0 -225.0 -228.0 -231.0 -234.0 -237.0 -238.0 -241.0 -242.0 3 -1.0 2.0 3.0 8.0 6.0 6.0 4.0 6.0 6.0 4.0 14.0 1.0 0.0 -5.0 -4.0 -9.0 -12.0 -13.0 -18.0 -17.0 -24.0 -29.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -49.0 -48.0 -55.0 -56.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -127.0 -126.0 -133.0 -136.0 -137.0 -142.0 -143.0 -146.0 -150.0 -151.0 -150.0 -157.0 -156.0 -159.0 -160.0 -165.0 -166.0 -169.0 -172.0 -171.0 -176.0 -179.0 -182.0 -185.0 -186.0 -187.0 -192.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -209.0 -212.0 -213.0 -216.0 -217.0 -220.0 -223.0 -224.0 -225.0 -230.0 -233.0 -236.0 -239.0 -238.0 -241.0 4 -4.0 -3.0 0.0 1.0 8.0 4.0 4.0 2.0 4.0 4.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -11.0 -14.0 -15.0 -20.0 -19.0 -22.0 -27.0 -26.0 -29.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -60.0 -63.0 -64.0 -67.0 -66.0 -69.0 -68.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -87.0 -92.0 -91.0 -94.0 -95.0 -100.0 -103.0 -100.0 -105.0 -106.0 -109.0 -112.0 -113.0 -116.0 -119.0 -118.0 -121.0 -124.0 -127.0 -128.0 -131.0 -136.0 -137.0 -142.0 -145.0 -148.0 -148.0 -153.0 -150.0 -155.0 -156.0 -159.0 -160.0 -165.0 -168.0 -169.0 -170.0 -171.0 -176.0 -177.0 -182.0 -185.0 -186.0 -189.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -220.0 -221.0 -224.0 -227.0 -228.0 -233.0 -234.0 -237.0 -238.0 5 -7.0 -4.0 -3.0 -2.0 -1.0 8.0 2.0 4.0 4.0 2.0 4.0 2.0 14.0 1.0 0.0 -3.0 -6.0 -9.0 -14.0 -15.0 -20.0 -21.0 -20.0 -25.0 -26.0 -29.0 -32.0 -33.0 -36.0 -39.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -59.0 -60.0 -61.0 -64.0 -65.0 -64.0 -67.0 -66.0 -73.0 -74.0 -77.0 -76.0 -81.0 -78.0 -83.0 -84.0 -85.0 -90.0 -91.0 -92.0 -95.0 -98.0 -101.0 -98.0 -103.0 -106.0 -107.0 -110.0 -111.0 -114.0 -117.0 -118.0 -121.0 -122.0 -127.0 -130.0 -131.0 -136.0 -137.0 -140.0 -144.0 -147.0 -146.0 -151.0 -150.0 -153.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -173.0 -176.0 -179.0 -182.0 -183.0 -184.0 -187.0 -190.0 -191.0 -190.0 -195.0 -198.0 -201.0 -200.0 -203.0 -206.0 -207.0 -210.0 -213.0 -214.0 -217.0 -218.0 -219.0 -224.0 -227.0 -230.0 -233.0 -232.0 -235.0 6 -10.0 -9.0 -6.0 -3.0 -4.0 -1.0 6.0 2.0 2.0 4.0 2.0 2.0 2.0 14.0 1.0 -2.0 -5.0 -8.0 -9.0 -14.0 -17.0 -18.0 -23.0 -20.0 -23.0 -28.0 -31.0 -34.0 -33.0 -34.0 -37.0 -38.0 -43.0 -44.0 -49.0 -52.0 -55.0 -56.0 -57.0 -58.0 -61.0 -64.0 -66.0 -62.0 -65.0 -66.0 -71.0 -74.0 -77.0 -76.0 -79.0 -76.0 -81.0 -84.0 -85.0 -88.0 -91.0 -94.0 -97.0 -96.0 -99.0 -98.0 -101.0 -104.0 -107.0 -110.0 -113.0 -114.0 -115.0 -116.0 -121.0 -124.0 -127.0 -130.0 -133.0 -136.0 -139.0 -141.0 -142.0 -147.0 -146.0 -149.0 -148.0 -153.0 -156.0 -159.0 -162.0 -163.0 -166.0 -167.0 -170.0 -173.0 -174.0 -177.0 -180.0 -183.0 -182.0 -187.0 -188.0 -191.0 -190.0 -193.0 -196.0 -199.0 -200.0 -203.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -218.0 -221.0 -224.0 -227.0 -228.0 -231.0 -232.0 7 -13.0 -10.0 -9.0 -8.0 -5.0 -2.0 -1.0 6.0 2.0 0.0 4.0 0.0 2.0 1.0 14.0 3.0 0.0 -3.0 -8.0 -9.0 -14.0 -17.0 -18.0 -22.0 -18.0 -21.0 -26.0 -29.0 -32.0 -33.0 -34.0 -37.0 -38.0 -43.0 -46.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -59.0 -64.0 -64.0 -60.0 -63.0 -66.0 -69.0 -72.0 -75.0 -76.0 -77.0 -74.0 -79.0 -82.0 -83.0 -86.0 -89.0 -94.0 -95.0 -96.0 -97.0 -98.0 -99.0 -102.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -121.0 -124.0 -125.0 -130.0 -131.0 -134.0 -139.0 -139.0 -142.0 -145.0 -146.0 -147.0 -150.0 -153.0 -154.0 -157.0 -160.0 -163.0 -164.0 -167.0 -170.0 -173.0 -176.0 -177.0 -180.0 -181.0 -184.0 -185.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -204.0 -207.0 -208.0 -211.0 -212.0 -213.0 -218.0 -221.0 -224.0 -225.0 -226.0 -229.0 8 -16.0 -13.0 -12.0 -11.0 -10.0 -5.0 -4.0 -1.0 6.0 0.0 2.0 2.0 2.0 0.0 3.0 14.0 3.0 0.0 -5.0 -6.0 -11.0 -14.0 -15.0 -18.0 -21.0 -16.0 -21.0 -26.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -52.0 -55.0 -56.0 -59.0 -64.0 -62.0 -60.0 -61.0 -66.0 -69.0 -72.0 -75.0 -74.0 -75.0 -74.0 -79.0 -80.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -95.0 -96.0 -99.0 -102.0 -105.0 -108.0 -109.0 -112.0 -113.0 -118.0 -121.0 -122.0 -127.0 -128.0 -131.0 -135.0 -138.0 -137.0 -142.0 -143.0 -144.0 -147.0 -150.0 -151.0 -154.0 -157.0 -160.0 -161.0 -164.0 -167.0 -170.0 -173.0 -174.0 -177.0 -178.0 -179.0 -182.0 -183.0 -186.0 -189.0 -190.0 -191.0 -194.0 -197.0 -198.0 -201.0 -204.0 -205.0 -208.0 -209.0 -210.0 -215.0 -218.0 -221.0 -222.0 -223.0 -226.0 9 -19.0 -16.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 4.0 2.0 0.0 2.0 0.0 2.0 3.0 14.0 3.0 -2.0 -3.0 -8.0 -11.0 -12.0 -17.0 -16.0 -19.0 -16.0 -21.0 -26.0 -27.0 -28.0 -31.0 -32.0 -37.0 -40.0 -39.0 -44.0 -47.0 -48.0 -49.0 -52.0 -53.0 -58.0 -57.0 -62.0 -62.0 -58.0 -61.0 -66.0 -69.0 -72.0 -73.0 -72.0 -75.0 -74.0 -77.0 -80.0 -83.0 -88.0 -89.0 -90.0 -95.0 -94.0 -93.0 -96.0 -99.0 -102.0 -105.0 -106.0 -109.0 -110.0 -115.0 -118.0 -119.0 -124.0 -125.0 -128.0 -132.0 -133.0 -136.0 -137.0 -140.0 -141.0 -144.0 -147.0 -148.0 -151.0 -154.0 -157.0 -158.0 -161.0 -164.0 -167.0 -170.0 -171.0 -174.0 -175.0 -178.0 -177.0 -180.0 -183.0 -186.0 -187.0 -188.0 -191.0 -194.0 -195.0 -198.0 -201.0 -202.0 -205.0 -206.0 -207.0 -212.0 -215.0 -218.0 -219.0 -220.0 -223.0 10 -22.0 -19.0 -18.0 -17.0 -16.0 -11.0 -10.0 -7.0 -4.0 -3.0 4.0 0.0 0.0 0.0 0.0 2.0 3.0 14.0 1.0 0.0 -5.0 -8.0 -9.0 -14.0 -15.0 -14.0 -19.0 -16.0 -21.0 -24.0 -25.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -44.0 -45.0 -46.0 -49.0 -50.0 -55.0 -58.0 -55.0 -62.0 -60.0 -58.0 -61.0 -66.0 -69.0 -70.0 -71.0 -72.0 -77.0 -72.0 -77.0 -80.0 -83.0 -88.0 -87.0 -90.0 -93.0 -92.0 -93.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -112.0 -115.0 -116.0 -121.0 -122.0 -125.0 -129.0 -130.0 -131.0 -136.0 -135.0 -138.0 -141.0 -144.0 -145.0 -148.0 -151.0 -154.0 -155.0 -158.0 -161.0 -162.0 -167.0 -168.0 -169.0 -172.0 -175.0 -176.0 -175.0 -180.0 -183.0 -186.0 -185.0 -188.0 -191.0 -192.0 -195.0 -198.0 -199.0 -202.0 -203.0 -204.0 -209.0 -212.0 -213.0 -218.0 -217.0 -220.0 11 -22.0 -24.0 -21.0 -18.0 -19.0 -16.0 -12.0 -12.0 -9.0 -4.0 -5.0 2.0 -2.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -13.0 -14.0 -19.0 -16.0 -19.0 -22.0 -23.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -42.0 -43.0 -46.0 -49.0 -52.0 -55.0 -58.0 -55.0 -60.0 -60.0 -58.0 -61.0 -66.0 -67.0 -68.0 -71.0 -74.0 -75.0 -72.0 -79.0 -82.0 -81.0 -86.0 -87.0 -88.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -120.0 -124.0 -127.0 -127.0 -128.0 -131.0 -134.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -151.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -168.0 -167.0 -172.0 -173.0 -176.0 -175.0 -178.0 -181.0 -184.0 -185.0 -188.0 -189.0 -192.0 -195.0 -196.0 -199.0 -200.0 -203.0 -206.0 -209.0 -212.0 -211.0 -216.0 -217.0 12 -28.0 -22.0 -24.0 -23.0 -20.0 -17.0 -16.0 -12.0 -10.0 -9.0 -4.0 -4.0 2.0 -4.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -11.0 -12.0 -17.0 -16.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -35.0 -36.0 -37.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -55.0 -58.0 -58.0 -56.0 -61.0 -64.0 -65.0 -66.0 -71.0 -72.0 -73.0 -70.0 -79.0 -80.0 -81.0 -84.0 -87.0 -86.0 -89.0 -90.0 -91.0 -94.0 -97.0 -100.0 -101.0 -106.0 -109.0 -110.0 -115.0 -116.0 -118.0 -124.0 -126.0 -127.0 -126.0 -131.0 -132.0 -135.0 -138.0 -139.0 -140.0 -145.0 -148.0 -149.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -166.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -179.0 -182.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -198.0 -203.0 -206.0 -209.0 -212.0 -209.0 -214.0 13 -29.0 -30.0 -22.0 -26.0 -25.0 -22.0 -17.0 -17.0 -12.0 -12.0 -10.0 -6.0 -4.0 0.0 -4.0 -2.0 -4.0 -3.0 -2.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -9.0 -12.0 -11.0 -12.0 -15.0 -14.0 -19.0 -22.0 -25.0 -28.0 -31.0 -34.0 -35.0 -34.0 -35.0 -38.0 -43.0 -44.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -60.0 -54.0 -59.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -70.0 -77.0 -78.0 -81.0 -82.0 -85.0 -88.0 -89.0 -92.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -124.0 -127.0 -124.0 -129.0 -130.0 -135.0 -138.0 -141.0 -140.0 -145.0 -146.0 -147.0 -152.0 -155.0 -158.0 -157.0 -158.0 -163.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -178.0 -179.0 -182.0 -181.0 -186.0 -189.0 -190.0 -191.0 -192.0 -197.0 -198.0 -203.0 -204.0 -207.0 -210.0 -209.0 14 -33.0 -30.0 -29.0 -22.0 -27.0 -25.0 -21.0 -18.0 -15.0 -10.0 -12.0 -8.0 -8.0 -2.0 -1.0 -5.0 -3.0 -6.0 -2.0 -2.0 4.0 14.0 1.0 -2.0 -3.0 -6.0 -7.0 -10.0 -9.0 -10.0 -13.0 -14.0 -19.0 -20.0 -25.0 -26.0 -31.0 -32.0 -33.0 -34.0 -37.0 -40.0 -43.0 -44.0 -49.0 -48.0 -51.0 -52.0 -53.0 -56.0 -58.0 -54.0 -59.0 -62.0 -65.0 -66.0 -69.0 -72.0 -73.0 -70.0 -75.0 -76.0 -79.0 -82.0 -83.0 -86.0 -89.0 -90.0 -91.0 -92.0 -97.0 -100.0 -103.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -122.0 -125.0 -124.0 -129.0 -132.0 -135.0 -136.0 -139.0 -142.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -159.0 -158.0 -163.0 -164.0 -167.0 -166.0 -169.0 -170.0 -175.0 -176.0 -179.0 -180.0 -183.0 -186.0 -187.0 -190.0 -191.0 -194.0 -197.0 -200.0 -203.0 -204.0 -207.0 -208.0 15 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -7.0 -2.0 -1.0 6.0 14.0 3.0 0.0 -1.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -14.0 -19.0 -22.0 -23.0 -24.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -42.0 -47.0 -48.0 -49.0 -50.0 -51.0 -56.0 -57.0 -52.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -73.0 -70.0 -73.0 -76.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -107.0 -110.0 -115.0 -117.0 -118.0 -121.0 -122.0 -123.0 -126.0 -129.0 -130.0 -133.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -152.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -165.0 -168.0 -169.0 -168.0 -173.0 -176.0 -177.0 -178.0 -181.0 -184.0 -187.0 -188.0 -189.0 -194.0 -197.0 -200.0 -203.0 -202.0 -205.0 16 -37.0 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -5.0 -2.0 1.0 8.0 14.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -13.0 -14.0 -17.0 -22.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -37.0 -40.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -49.0 -54.0 -55.0 -52.0 -57.0 -62.0 -63.0 -66.0 -67.0 -70.0 -71.0 -70.0 -71.0 -74.0 -79.0 -80.0 -83.0 -84.0 -85.0 -88.0 -91.0 -94.0 -95.0 -100.0 -101.0 -106.0 -109.0 -112.0 -114.0 -117.0 -118.0 -119.0 -120.0 -123.0 -124.0 -129.0 -132.0 -133.0 -132.0 -135.0 -140.0 -141.0 -146.0 -149.0 -150.0 -153.0 -154.0 -157.0 -158.0 -161.0 -162.0 -165.0 -168.0 -167.0 -168.0 -171.0 -174.0 -175.0 -176.0 -179.0 -184.0 -185.0 -188.0 -191.0 -192.0 -197.0 -200.0 -201.0 -202.0 17 -38.0 -37.0 -32.0 -33.0 -30.0 -29.0 -22.0 -25.0 -23.0 -19.0 -19.0 -11.0 -11.0 -8.0 -8.0 -9.0 -2.0 -3.0 -5.0 -3.0 -5.0 0.0 1.0 10.0 14.0 5.0 4.0 -1.0 -2.0 -3.0 -4.0 -7.0 -10.0 -13.0 -12.0 -17.0 -22.0 -21.0 -24.0 -25.0 -28.0 -31.0 -34.0 -35.0 -38.0 -37.0 -40.0 -43.0 -46.0 -47.0 -48.0 -47.0 -52.0 -53.0 -50.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -68.0 -69.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -97.0 -98.0 -103.0 -106.0 -108.0 -111.0 -114.0 -115.0 -116.0 -117.0 -120.0 -121.0 -126.0 -129.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -146.0 -147.0 -150.0 -151.0 -154.0 -155.0 -158.0 -159.0 -162.0 -163.0 -166.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -181.0 -182.0 -185.0 -188.0 -189.0 -194.0 -195.0 -198.0 -199.0 18 -39.0 -38.0 -37.0 -32.0 -35.0 -30.0 -27.0 -22.0 -23.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -5.0 -3.0 -3.0 2.0 3.0 10.0 14.0 7.0 6.0 1.0 0.0 -1.0 -4.0 -5.0 -10.0 -13.0 -12.0 -15.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -34.0 -33.0 -36.0 -35.0 -38.0 -41.0 -46.0 -45.0 -46.0 -45.0 -50.0 -51.0 -50.0 -55.0 -58.0 -61.0 -62.0 -63.0 -68.0 -67.0 -66.0 -67.0 -70.0 -75.0 -78.0 -79.0 -82.0 -83.0 -88.0 -91.0 -92.0 -96.0 -98.0 -101.0 -106.0 -106.0 -109.0 -112.0 -113.0 -114.0 -117.0 -118.0 -121.0 -124.0 -127.0 -130.0 -131.0 -134.0 -137.0 -140.0 -143.0 -144.0 -147.0 -148.0 -151.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -168.0 -171.0 -174.0 -175.0 -178.0 -179.0 -180.0 -185.0 -188.0 -189.0 -192.0 -193.0 -196.0 19 -40.0 -39.0 -38.0 -37.0 -32.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -7.0 -2.0 -1.0 2.0 5.0 12.0 14.0 7.0 6.0 3.0 2.0 -1.0 -2.0 -7.0 -10.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -33.0 -34.0 -35.0 -38.0 -41.0 -44.0 -43.0 -44.0 -45.0 -50.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -65.0 -66.0 -65.0 -66.0 -67.0 -70.0 -75.0 -76.0 -79.0 -80.0 -85.0 -88.0 -89.0 -94.0 -94.0 -98.0 -103.0 -105.0 -104.0 -109.0 -110.0 -111.0 -114.0 -117.0 -116.0 -121.0 -124.0 -127.0 -128.0 -131.0 -134.0 -137.0 -140.0 -141.0 -142.0 -145.0 -148.0 -149.0 -150.0 -153.0 -156.0 -157.0 -158.0 -161.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -177.0 -182.0 -185.0 -188.0 -187.0 -190.0 -193.0 20 -45.0 -40.0 -39.0 -40.0 -39.0 -30.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -7.0 0.0 -1.0 4.0 7.0 12.0 14.0 7.0 8.0 5.0 2.0 1.0 -4.0 -7.0 -8.0 -11.0 -12.0 -13.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -32.0 -31.0 -34.0 -35.0 -38.0 -39.0 -42.0 -41.0 -44.0 -45.0 -48.0 -49.0 -50.0 -55.0 -58.0 -57.0 -60.0 -63.0 -64.0 -65.0 -66.0 -67.0 -70.0 -73.0 -76.0 -77.0 -82.0 -85.0 -86.0 -91.0 -92.0 -94.0 -100.0 -102.0 -103.0 -104.0 -107.0 -108.0 -111.0 -114.0 -115.0 -116.0 -121.0 -124.0 -125.0 -128.0 -131.0 -134.0 -135.0 -138.0 -141.0 -140.0 -143.0 -146.0 -147.0 -150.0 -153.0 -154.0 -155.0 -158.0 -159.0 -162.0 -165.0 -168.0 -169.0 -170.0 -173.0 -174.0 -179.0 -182.0 -185.0 -188.0 -185.0 -190.0 21 -44.0 -45.0 -40.0 -39.0 -40.0 -37.0 -30.0 -33.0 -30.0 -27.0 -22.0 -25.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -5.0 0.0 1.0 6.0 7.0 12.0 14.0 9.0 10.0 5.0 2.0 -1.0 -4.0 -7.0 -8.0 -11.0 -10.0 -11.0 -14.0 -19.0 -20.0 -23.0 -28.0 -29.0 -30.0 -31.0 -34.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -48.0 -51.0 -50.0 -55.0 -56.0 -59.0 -58.0 -61.0 -64.0 -65.0 -68.0 -67.0 -68.0 -73.0 -76.0 -77.0 -82.0 -85.0 -88.0 -91.0 -94.0 -94.0 -99.0 -100.0 -103.0 -102.0 -105.0 -106.0 -111.0 -114.0 -117.0 -116.0 -119.0 -122.0 -123.0 -128.0 -131.0 -134.0 -133.0 -136.0 -139.0 -138.0 -141.0 -146.0 -147.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -166.0 -167.0 -168.0 -173.0 -174.0 -179.0 -180.0 -183.0 -186.0 -185.0 22 -47.0 -44.0 -45.0 -42.0 -39.0 -40.0 -35.0 -30.0 -33.0 -28.0 -29.0 -20.0 -25.0 -20.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 3.0 8.0 9.0 14.0 14.0 9.0 8.0 3.0 0.0 -1.0 -6.0 -9.0 -8.0 -11.0 -10.0 -13.0 -16.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -55.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -67.0 -70.0 -75.0 -78.0 -77.0 -84.0 -85.0 -89.0 -93.0 -95.0 -94.0 -99.0 -100.0 -103.0 -102.0 -107.0 -106.0 -113.0 -116.0 -117.0 -116.0 -119.0 -124.0 -123.0 -130.0 -133.0 -134.0 -135.0 -136.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -168.0 -167.0 -170.0 -175.0 -174.0 -181.0 -180.0 -183.0 -186.0 23 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 5.0 10.0 11.0 14.0 14.0 7.0 8.0 1.0 -2.0 -1.0 -6.0 -9.0 -8.0 -11.0 -12.0 -13.0 -18.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -44.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -70.0 -77.0 -80.0 -77.0 -86.0 -85.0 -89.0 -94.0 -95.0 -94.0 -99.0 -100.0 -103.0 -104.0 -109.0 -106.0 -113.0 -116.0 -119.0 -116.0 -121.0 -126.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -148.0 -151.0 -150.0 -151.0 -154.0 -155.0 -160.0 -159.0 -162.0 -165.0 -168.0 -167.0 -172.0 -177.0 -176.0 -183.0 -180.0 -183.0 24 -51.0 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -4.0 -1.0 2.0 5.0 10.0 11.0 14.0 14.0 5.0 8.0 -1.0 -4.0 -3.0 -6.0 -9.0 -8.0 -13.0 -14.0 -13.0 -20.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -39.0 -36.0 -37.0 -44.0 -41.0 -46.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -63.0 -64.0 -67.0 -68.0 -71.0 -72.0 -79.0 -82.0 -79.0 -86.0 -87.0 -89.0 -92.0 -93.0 -94.0 -97.0 -98.0 -103.0 -106.0 -109.0 -108.0 -113.0 -116.0 -117.0 -118.0 -123.0 -124.0 -125.0 -130.0 -131.0 -132.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -150.0 -153.0 -154.0 -157.0 -160.0 -159.0 -164.0 -165.0 -168.0 -169.0 -174.0 -177.0 -178.0 -181.0 -180.0 25 -54.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -41.0 -38.0 -33.0 -32.0 -31.0 -30.0 -25.0 -22.0 -25.0 -22.0 -21.0 -16.0 -13.0 -14.0 -8.0 -10.0 -9.0 -4.0 -4.0 -1.0 2.0 7.0 10.0 9.0 14.0 12.0 7.0 6.0 -1.0 -4.0 -3.0 -6.0 -7.0 -10.0 -13.0 -16.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -64.0 -65.0 -70.0 -73.0 -74.0 -79.0 -82.0 -81.0 -88.0 -89.0 -89.0 -94.0 -93.0 -94.0 -97.0 -100.0 -105.0 -108.0 -111.0 -108.0 -115.0 -116.0 -119.0 -120.0 -123.0 -124.0 -125.0 -132.0 -131.0 -134.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -170.0 -171.0 -176.0 -177.0 -178.0 -181.0 26 -57.0 -54.0 -52.0 -52.0 -49.0 -46.0 -45.0 -42.0 -39.0 -38.0 -33.0 -34.0 -31.0 -30.0 -25.0 -22.0 -23.0 -22.0 -23.0 -16.0 -15.0 -15.0 -8.0 -12.0 -10.0 -4.0 -2.0 1.0 2.0 5.0 8.0 7.0 14.0 10.0 5.0 6.0 -1.0 -4.0 -3.0 -6.0 -9.0 -10.0 -15.0 -18.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -32.0 -29.0 -34.0 -39.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -66.0 -65.0 -72.0 -75.0 -74.0 -81.0 -82.0 -81.0 -89.0 -90.0 -89.0 -94.0 -93.0 -94.0 -99.0 -102.0 -105.0 -108.0 -111.0 -110.0 -115.0 -118.0 -121.0 -122.0 -125.0 -124.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -167.0 -170.0 -173.0 -176.0 -175.0 -178.0 27 -60.0 -59.0 -56.0 -52.0 -54.0 -51.0 -48.0 -46.0 -44.0 -39.0 -39.0 -35.0 -35.0 -31.0 -31.0 -26.0 -24.0 -25.0 -22.0 -23.0 -18.0 -15.0 -15.0 -8.0 -12.0 -9.0 -6.0 -4.0 1.0 2.0 3.0 8.0 6.0 14.0 8.0 3.0 6.0 -1.0 -2.0 -3.0 -6.0 -9.0 -12.0 -13.0 -16.0 -13.0 -20.0 -21.0 -20.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -46.0 -43.0 -48.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -61.0 -66.0 -67.0 -72.0 -75.0 -76.0 -81.0 -83.0 -83.0 -87.0 -92.0 -89.0 -94.0 -93.0 -96.0 -101.0 -104.0 -107.0 -108.0 -109.0 -110.0 -115.0 -118.0 -119.0 -122.0 -125.0 -126.0 -125.0 -132.0 -133.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -163.0 -164.0 -169.0 -172.0 -175.0 -176.0 -175.0 28 -62.0 -62.0 -59.0 -57.0 -52.0 -54.0 -50.0 -49.0 -44.0 -43.0 -41.0 -37.0 -36.0 -33.0 -32.0 -31.0 -26.0 -26.0 -26.0 -24.0 -24.0 -19.0 -17.0 -13.0 -8.0 -10.0 -7.0 -7.0 -4.0 -1.0 0.0 2.0 6.0 6.0 14.0 8.0 1.0 6.0 -1.0 -2.0 -5.0 -8.0 -11.0 -14.0 -13.0 -16.0 -13.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -38.0 -37.0 -42.0 -43.0 -48.0 -43.0 -48.0 -49.0 -50.0 -57.0 -58.0 -59.0 -62.0 -63.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -83.0 -84.0 -89.0 -92.0 -89.0 -94.0 -95.0 -96.0 -103.0 -106.0 -107.0 -108.0 -109.0 -112.0 -115.0 -120.0 -121.0 -122.0 -127.0 -126.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -158.0 -159.0 -162.0 -165.0 -164.0 -171.0 -172.0 -175.0 -176.0 29 -65.0 -62.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -42.0 -43.0 -42.0 -37.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -25.0 -22.0 -19.0 -18.0 -13.0 -8.0 -8.0 -5.0 -6.0 -5.0 -2.0 -1.0 2.0 5.0 6.0 14.0 8.0 1.0 6.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -11.0 -14.0 -13.0 -18.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -35.0 -40.0 -37.0 -40.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -56.0 -59.0 -60.0 -65.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -81.0 -84.0 -89.0 -90.0 -89.0 -94.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -111.0 -114.0 -117.0 -120.0 -121.0 -124.0 -125.0 -128.0 -127.0 -130.0 -133.0 -136.0 -135.0 -136.0 -141.0 -140.0 -143.0 -148.0 -151.0 -152.0 -155.0 -156.0 -157.0 -162.0 -165.0 -166.0 -169.0 -170.0 -173.0 30 -64.0 -65.0 -64.0 -61.0 -60.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -18.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 2.0 6.0 -1.0 -2.0 -5.0 -10.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -40.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -59.0 -62.0 -67.0 -68.0 -69.0 -74.0 -75.0 -80.0 -84.0 -81.0 -84.0 -89.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -113.0 -116.0 -117.0 -120.0 -123.0 -124.0 -125.0 -128.0 -127.0 -130.0 -135.0 -138.0 -135.0 -136.0 -143.0 -140.0 -145.0 -148.0 -151.0 -154.0 -155.0 -156.0 -159.0 -164.0 -167.0 -166.0 -169.0 -170.0 31 -67.0 -64.0 -65.0 -64.0 -61.0 -58.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -17.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 4.0 4.0 -2.0 -4.0 -7.0 -11.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -27.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -38.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -61.0 -62.0 -67.0 -68.0 -71.0 -75.0 -76.0 -81.0 -82.0 -81.0 -84.0 -87.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -102.0 -107.0 -106.0 -113.0 -114.0 -115.0 -120.0 -121.0 -122.0 -123.0 -128.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -141.0 -140.0 -145.0 -146.0 -149.0 -152.0 -155.0 -158.0 -159.0 -164.0 -167.0 -166.0 -169.0 32 -68.0 -67.0 -62.0 -65.0 -64.0 -61.0 -56.0 -55.0 -52.0 -51.0 -50.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -25.0 -22.0 -19.0 -15.0 -10.0 -8.0 -8.0 -5.0 -6.0 -3.0 -4.0 -1.0 2.0 3.0 10.0 14.0 9.0 6.0 2.0 0.0 -3.0 -6.0 -9.0 -10.0 -11.0 -10.0 -16.0 -13.0 -19.0 -22.0 -21.0 -26.0 -24.0 -28.0 -31.0 -29.0 -32.0 -36.0 -39.0 -36.0 -43.0 -44.0 -45.0 -45.0 -46.0 -47.0 -52.0 -56.0 -57.0 -62.0 -64.0 -68.0 -70.0 -73.0 -74.0 -76.0 -80.0 -81.0 -80.0 -84.0 -86.0 -91.0 -93.0 -97.0 -96.0 -98.0 -101.0 -102.0 -108.0 -106.0 -114.0 -113.0 -114.0 -119.0 -120.0 -121.0 -122.0 -127.0 -129.0 -131.0 -134.0 -135.0 -137.0 -136.0 -142.0 -142.0 -145.0 -146.0 -148.0 -153.0 -154.0 -159.0 -159.0 -163.0 -166.0 -165.0 33 -71.0 -68.0 -65.0 -62.0 -65.0 -62.0 -59.0 -56.0 -53.0 -50.0 -51.0 -48.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -24.0 -21.0 -18.0 -13.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -4.0 -1.0 2.0 5.0 12.0 14.0 7.0 4.0 1.0 -2.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -15.0 -15.0 -19.0 -22.0 -19.0 -24.0 -24.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -47.0 -53.0 -56.0 -59.0 -62.0 -65.0 -68.0 -71.0 -73.0 -74.0 -75.0 -78.0 -79.0 -80.0 -85.0 -88.0 -91.0 -94.0 -95.0 -98.0 -98.0 -102.0 -104.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -120.0 -121.0 -120.0 -125.0 -130.0 -131.0 -132.0 -135.0 -136.0 -138.0 -142.0 -142.0 -146.0 -146.0 -150.0 -153.0 -154.0 -159.0 -159.0 -163.0 -164.0 34 -72.0 -71.0 -68.0 -65.0 -62.0 -63.0 -60.0 -59.0 -56.0 -51.0 -50.0 -49.0 -48.0 -43.0 -42.0 -43.0 -40.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -25.0 -22.0 -19.0 -16.0 -11.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -2.0 1.0 4.0 7.0 14.0 12.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -15.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -49.0 -55.0 -58.0 -61.0 -64.0 -67.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -82.0 -87.0 -90.0 -91.0 -94.0 -97.0 -98.0 -100.0 -104.0 -104.0 -106.0 -105.0 -114.0 -113.0 -114.0 -119.0 -122.0 -121.0 -120.0 -127.0 -130.0 -131.0 -132.0 -135.0 -138.0 -140.0 -142.0 -142.0 -146.0 -148.0 -152.0 -155.0 -154.0 -161.0 -159.0 -163.0 35 -73.0 -74.0 -69.0 -70.0 -66.0 -64.0 -61.0 -62.0 -59.0 -56.0 -53.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -42.0 -41.0 -38.0 -33.0 -34.0 -31.0 -28.0 -28.0 -25.0 -22.0 -19.0 -16.0 -13.0 -8.0 -10.0 -10.0 -7.0 -6.0 -5.0 -2.0 1.0 6.0 9.0 14.0 10.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -47.0 -48.0 -49.0 -57.0 -60.0 -63.0 -65.0 -69.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -84.0 -87.0 -92.0 -91.0 -96.0 -97.0 -98.0 -102.0 -106.0 -106.0 -106.0 -105.0 -114.0 -113.0 -114.0 -121.0 -122.0 -123.0 -120.0 -127.0 -130.0 -133.0 -132.0 -137.0 -138.0 -140.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -161.0 -159.0 36 -78.0 -73.0 -74.0 -71.0 -72.0 -66.0 -66.0 -61.0 -60.0 -59.0 -56.0 -55.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -30.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -10.0 -12.0 -9.0 -6.0 -3.0 -2.0 1.0 4.0 7.0 14.0 8.0 3.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -45.0 -47.0 -50.0 -51.0 -56.0 -61.0 -62.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -80.0 -81.0 -84.0 -86.0 -91.0 -93.0 -95.0 -98.0 -100.0 -102.0 -105.0 -106.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -120.0 -127.0 -128.0 -131.0 -134.0 -137.0 -136.0 -139.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -159.0 37 -79.0 -80.0 -73.0 -76.0 -73.0 -71.0 -66.0 -68.0 -63.0 -62.0 -60.0 -58.0 -57.0 -54.0 -53.0 -49.0 -47.0 -46.0 -45.0 -44.0 -39.0 -39.0 -37.0 -36.0 -34.0 -31.0 -28.0 -25.0 -22.0 -21.0 -18.0 -17.0 -12.0 -12.0 -14.0 -11.0 -8.0 -5.0 0.0 3.0 4.0 5.0 14.0 8.0 1.0 0.0 -1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -39.0 -44.0 -47.0 -47.0 -52.0 -53.0 -58.0 -62.0 -64.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -82.0 -83.0 -84.0 -86.0 -92.0 -93.0 -94.0 -99.0 -102.0 -101.0 -104.0 -106.0 -106.0 -105.0 -112.0 -115.0 -114.0 -119.0 -122.0 -125.0 -120.0 -125.0 -126.0 -131.0 -134.0 -135.0 -134.0 -137.0 -142.0 -142.0 -148.0 -147.0 -152.0 -153.0 -154.0 38 -81.0 -80.0 -78.0 -75.0 -77.0 -75.0 -69.0 -66.0 -68.0 -64.0 -64.0 -58.0 -59.0 -56.0 -55.0 -54.0 -49.0 -49.0 -47.0 -46.0 -44.0 -40.0 -39.0 -39.0 -37.0 -34.0 -30.0 -28.0 -25.0 -24.0 -21.0 -19.0 -19.0 -14.0 -14.0 -14.0 -11.0 -8.0 -3.0 0.0 3.0 2.0 5.0 14.0 6.0 -1.0 -1.0 1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -41.0 -46.0 -47.0 -49.0 -54.0 -55.0 -60.0 -63.0 -64.0 -64.0 -72.0 -71.0 -71.0 -73.0 -76.0 -77.0 -84.0 -85.0 -84.0 -88.0 -92.0 -93.0 -96.0 -101.0 -104.0 -101.0 -104.0 -108.0 -106.0 -105.0 -114.0 -115.0 -116.0 -119.0 -122.0 -124.0 -122.0 -125.0 -128.0 -133.0 -134.0 -135.0 -134.0 -139.0 -142.0 -144.0 -148.0 -147.0 -152.0 -153.0 39 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -46.0 -45.0 -40.0 -37.0 -39.0 -35.0 -32.0 -28.0 -28.0 -27.0 -25.0 -23.0 -19.0 -21.0 -16.0 -14.0 -12.0 -11.0 -8.0 -5.0 -2.0 3.0 0.0 4.0 14.0 4.0 0.0 -1.0 2.0 -3.0 -5.0 -4.0 -7.0 -7.0 -11.0 -8.0 -16.0 -17.0 -18.0 -22.0 -19.0 -23.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -38.0 -41.0 -47.0 -49.0 -49.0 -56.0 -55.0 -60.0 -62.0 -65.0 -64.0 -71.0 -70.0 -71.0 -75.0 -78.0 -77.0 -83.0 -85.0 -86.0 -88.0 -93.0 -95.0 -98.0 -102.0 -105.0 -101.0 -106.0 -108.0 -106.0 -105.0 -114.0 -117.0 -118.0 -119.0 -122.0 -125.0 -122.0 -127.0 -130.0 -133.0 -136.0 -135.0 -134.0 -141.0 -144.0 -146.0 -150.0 -147.0 -152.0 40 -87.0 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -44.0 -45.0 -40.0 -36.0 -37.0 -36.0 -34.0 -28.0 -28.0 -29.0 -23.0 -25.0 -19.0 -22.0 -17.0 -16.0 -14.0 -11.0 -8.0 -6.0 -4.0 1.0 -1.0 4.0 14.0 2.0 -1.0 -2.0 2.0 -1.0 -4.0 -4.0 -7.0 -7.0 -10.0 -8.0 -16.0 -17.0 -16.0 -21.0 -19.0 -21.0 -24.0 -26.0 -29.0 -33.0 -31.0 -35.0 -36.0 -40.0 -43.0 -47.0 -50.0 -51.0 -56.0 -57.0 -61.0 -60.0 -67.0 -64.0 -69.0 -68.0 -73.0 -76.0 -79.0 -79.0 -83.0 -86.0 -86.0 -90.0 -93.0 -94.0 -97.0 -102.0 -103.0 -100.0 -106.0 -108.0 -108.0 -105.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -124.0 -129.0 -130.0 -133.0 -134.0 -137.0 -136.0 -143.0 -146.0 -146.0 -150.0 -147.0 41 -90.0 -87.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -54.0 -49.0 -52.0 -49.0 -44.0 -45.0 -42.0 -34.0 -35.0 -34.0 -33.0 -28.0 -29.0 -28.0 -23.0 -26.0 -19.0 -20.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -5.0 0.0 1.0 6.0 14.0 3.0 1.0 -1.0 2.0 1.0 -2.0 -3.0 -6.0 -5.0 -8.0 -8.0 -14.0 -15.0 -16.0 -21.0 -19.0 -19.0 -22.0 -25.0 -28.0 -31.0 -31.0 -35.0 -36.0 -41.0 -44.0 -45.0 -50.0 -51.0 -54.0 -58.0 -59.0 -60.0 -65.0 -64.0 -67.0 -70.0 -73.0 -74.0 -77.0 -79.0 -83.0 -84.0 -87.0 -90.0 -93.0 -96.0 -99.0 -100.0 -103.0 -100.0 -105.0 -106.0 -108.0 -107.0 -112.0 -113.0 -116.0 -119.0 -120.0 -123.0 -126.0 -127.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -144.0 -145.0 -148.0 42 -93.0 -90.0 -89.0 -88.0 -85.0 -82.0 -81.0 -76.0 -75.0 -74.0 -71.0 -66.0 -67.0 -66.0 -63.0 -58.0 -57.0 -56.0 -57.0 -54.0 -51.0 -52.0 -49.0 -46.0 -46.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -28.0 -25.0 -28.0 -19.0 -20.0 -19.0 -16.0 -13.0 -12.0 -9.0 -8.0 -5.0 0.0 -1.0 8.0 14.0 3.0 1.0 1.0 4.0 3.0 -2.0 -3.0 -4.0 -5.0 -8.0 -8.0 -12.0 -13.0 -18.0 -19.0 -18.0 -19.0 -22.0 -25.0 -28.0 -29.0 -32.0 -33.0 -38.0 -41.0 -42.0 -47.0 -48.0 -51.0 -55.0 -56.0 -57.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -98.0 -103.0 -106.0 -109.0 -107.0 -111.0 -113.0 -117.0 -118.0 -121.0 -124.0 -125.0 -128.0 -129.0 -130.0 -134.0 -138.0 -140.0 -142.0 -143.0 -145.0 43 -96.0 -93.0 -90.0 -91.0 -90.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -51.0 -48.0 -44.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -20.0 -19.0 -16.0 -15.0 -12.0 -9.0 -10.0 -3.0 -2.0 1.0 8.0 14.0 1.0 3.0 3.0 6.0 3.0 -2.0 -1.0 -4.0 -5.0 -8.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -19.0 -22.0 -25.0 -26.0 -29.0 -30.0 -35.0 -38.0 -39.0 -44.0 -45.0 -48.0 -52.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -78.0 -81.0 -84.0 -87.0 -90.0 -91.0 -92.0 -97.0 -98.0 -99.0 -96.0 -103.0 -106.0 -109.0 -107.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 -125.0 -126.0 -127.0 -132.0 -135.0 -138.0 -141.0 -140.0 -143.0 44 -97.0 -96.0 -93.0 -90.0 -91.0 -88.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -50.0 -47.0 -44.0 -41.0 -34.0 -35.0 -36.0 -31.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -18.0 -17.0 -16.0 -15.0 -12.0 -9.0 -8.0 -3.0 -2.0 1.0 8.0 14.0 3.0 5.0 5.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -6.0 -5.0 -10.0 -13.0 -16.0 -17.0 -18.0 -19.0 -22.0 -23.0 -24.0 -29.0 -32.0 -35.0 -38.0 -41.0 -44.0 -47.0 -49.0 -50.0 -51.0 -54.0 -55.0 -56.0 -61.0 -64.0 -67.0 -70.0 -71.0 -74.0 -75.0 -78.0 -81.0 -82.0 -85.0 -90.0 -89.0 -90.0 -95.0 -98.0 -97.0 -96.0 -101.0 -106.0 -107.0 -107.0 -111.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -126.0 -129.0 -132.0 -135.0 -136.0 -139.0 -140.0 45 -100.0 -97.0 -96.0 -93.0 -92.0 -89.0 -88.0 -85.0 -84.0 -79.0 -78.0 -77.0 -76.0 -71.0 -68.0 -71.0 -68.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -53.0 -51.0 -50.0 -47.0 -44.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -30.0 -32.0 -29.0 -24.0 -19.0 -16.0 -19.0 -16.0 -13.0 -14.0 -7.0 -6.0 -5.0 -2.0 1.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 0.0 1.0 -2.0 -3.0 -6.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -20.0 -21.0 -26.0 -29.0 -32.0 -35.0 -38.0 -41.0 -43.0 -46.0 -47.0 -52.0 -49.0 -54.0 -53.0 -58.0 -61.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -78.0 -79.0 -82.0 -85.0 -88.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -105.0 -106.0 -109.0 -112.0 -115.0 -116.0 -117.0 -120.0 -123.0 -126.0 -129.0 -130.0 -135.0 -134.0 -137.0 46 -99.0 -100.0 -95.0 -96.0 -93.0 -92.0 -87.0 -88.0 -83.0 -82.0 -79.0 -78.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -52.0 -49.0 -48.0 -45.0 -42.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -31.0 -30.0 -27.0 -22.0 -17.0 -16.0 -19.0 -14.0 -13.0 -12.0 -5.0 -6.0 -3.0 -2.0 3.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 -2.0 1.0 -2.0 -3.0 -8.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -22.0 -23.0 -26.0 -31.0 -34.0 -37.0 -40.0 -43.0 -43.0 -46.0 -49.0 -52.0 -49.0 -54.0 -53.0 -60.0 -63.0 -66.0 -65.0 -70.0 -71.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -90.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -107.0 -106.0 -111.0 -114.0 -115.0 -116.0 -117.0 -122.0 -123.0 -128.0 -129.0 -130.0 -135.0 -134.0 47 -104.0 -99.0 -100.0 -97.0 -98.0 -93.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -78.0 -77.0 -74.0 -71.0 -68.0 -67.0 -68.0 -63.0 -60.0 -59.0 -60.0 -59.0 -55.0 -50.0 -47.0 -46.0 -45.0 -44.0 -41.0 -36.0 -37.0 -36.0 -35.0 -28.0 -31.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -10.0 -3.0 -4.0 -1.0 0.0 5.0 10.0 14.0 7.0 9.0 9.0 10.0 7.0 0.0 1.0 0.0 -5.0 -6.0 -3.0 -8.0 -9.0 -12.0 -15.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -34.0 -35.0 -38.0 -42.0 -43.0 -44.0 -49.0 -50.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -80.0 -83.0 -82.0 -87.0 -88.0 -87.0 -90.0 -93.0 -96.0 -95.0 -96.0 -101.0 -104.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -117.0 -122.0 -125.0 -128.0 -129.0 -130.0 -133.0 48 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -62.0 -60.0 -53.0 -50.0 -47.0 -48.0 -45.0 -44.0 -41.0 -36.0 -39.0 -38.0 -35.0 -28.0 -33.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -8.0 -3.0 -4.0 -3.0 2.0 5.0 10.0 14.0 5.0 11.0 9.0 10.0 7.0 2.0 3.0 -2.0 -3.0 -4.0 -3.0 -8.0 -9.0 -12.0 -13.0 -16.0 -17.0 -22.0 -25.0 -26.0 -31.0 -32.0 -35.0 -40.0 -40.0 -41.0 -44.0 -47.0 -48.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -68.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -85.0 -86.0 -87.0 -90.0 -93.0 -96.0 -93.0 -96.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -128.0 -127.0 -130.0 49 -106.0 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -89.0 -86.0 -81.0 -82.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -58.0 -53.0 -50.0 -47.0 -48.0 -45.0 -42.0 -41.0 -38.0 -39.0 -40.0 -35.0 -28.0 -31.0 -28.0 -27.0 -24.0 -17.0 -16.0 -15.0 -16.0 -11.0 -8.0 -3.0 -4.0 -1.0 2.0 7.0 10.0 14.0 7.0 11.0 9.0 10.0 9.0 4.0 3.0 0.0 -3.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -16.0 -19.0 -20.0 -25.0 -26.0 -31.0 -34.0 -36.0 -39.0 -38.0 -41.0 -42.0 -45.0 -48.0 -49.0 -54.0 -57.0 -58.0 -59.0 -60.0 -65.0 -66.0 -71.0 -74.0 -77.0 -78.0 -81.0 -82.0 -83.0 -84.0 -87.0 -90.0 -93.0 -94.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -109.0 -110.0 -113.0 -116.0 -117.0 -122.0 -125.0 -126.0 -127.0 50 -111.0 -106.0 -105.0 -104.0 -101.0 -102.0 -97.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -56.0 -51.0 -48.0 -47.0 -48.0 -43.0 -42.0 -39.0 -38.0 -39.0 -38.0 -33.0 -28.0 -29.0 -28.0 -27.0 -22.0 -17.0 -16.0 -13.0 -14.0 -9.0 -6.0 -1.0 -2.0 -1.0 4.0 9.0 12.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -1.0 -4.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -22.0 -25.0 -28.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -40.0 -45.0 -48.0 -51.0 -54.0 -55.0 -58.0 -59.0 -62.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -79.0 -80.0 -81.0 -82.0 -85.0 -90.0 -91.0 -92.0 -95.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -110.0 -113.0 -116.0 -119.0 -122.0 -123.0 -124.0 51 -112.0 -111.0 -104.0 -105.0 -104.0 -101.0 -100.0 -97.0 -94.0 -91.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -78.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -59.0 -54.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -39.0 -36.0 -31.0 -26.0 -29.0 -28.0 -25.0 -22.0 -17.0 -14.0 -13.0 -12.0 -7.0 -4.0 -1.0 -2.0 1.0 6.0 11.0 14.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -42.0 -47.0 -50.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -91.0 -94.0 -95.0 -98.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -115.0 -118.0 -121.0 -122.0 -123.0 52 -113.0 -112.0 -109.0 -104.0 -105.0 -104.0 -99.0 -100.0 -95.0 -92.0 -91.0 -90.0 -89.0 -82.0 -81.0 -80.0 -81.0 -76.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -63.0 -61.0 -59.0 -57.0 -52.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -37.0 -34.0 -29.0 -26.0 -29.0 -26.0 -25.0 -20.0 -15.0 -14.0 -11.0 -10.0 -5.0 -4.0 -1.0 0.0 3.0 8.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -9.0 -12.0 -17.0 -20.0 -23.0 -25.0 -29.0 -31.0 -30.0 -35.0 -34.0 -37.0 -36.0 -41.0 -42.0 -49.0 -52.0 -53.0 -56.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -104.0 -105.0 -108.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 53 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -76.0 -75.0 -76.0 -71.0 -68.0 -71.0 -66.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -29.0 -26.0 -23.0 -18.0 -15.0 -12.0 -9.0 -8.0 -7.0 -4.0 1.0 2.0 5.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -7.0 -6.0 -11.0 -14.0 -17.0 -22.0 -23.0 -25.0 -31.0 -31.0 -30.0 -35.0 -34.0 -37.0 -38.0 -43.0 -42.0 -49.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -66.0 -67.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -82.0 -81.0 -82.0 -87.0 -92.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -105.0 -110.0 -113.0 -116.0 -115.0 -118.0 -121.0 54 -117.0 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -69.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -36.0 -33.0 -34.0 -29.0 -26.0 -29.0 -24.0 -23.0 -16.0 -15.0 -12.0 -9.0 -6.0 -7.0 -2.0 1.0 2.0 7.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -8.0 -13.0 -14.0 -19.0 -22.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -39.0 -40.0 -43.0 -42.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -63.0 -66.0 -67.0 -70.0 -69.0 -74.0 -75.0 -76.0 -81.0 -84.0 -81.0 -82.0 -87.0 -90.0 -93.0 -96.0 -97.0 -98.0 -101.0 -102.0 -107.0 -110.0 -111.0 -116.0 -113.0 -118.0 55 -116.0 -117.0 -112.0 -113.0 -112.0 -109.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -68.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -37.0 -34.0 -33.0 -34.0 -29.0 -26.0 -27.0 -24.0 -21.0 -16.0 -15.0 -12.0 -7.0 -6.0 -5.0 -2.0 1.0 4.0 7.0 10.0 13.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -10.0 -15.0 -16.0 -21.0 -24.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -41.0 -42.0 -45.0 -42.0 -51.0 -52.0 -53.0 -58.0 -61.0 -64.0 -61.0 -66.0 -69.0 -70.0 -69.0 -74.0 -75.0 -78.0 -79.0 -84.0 -81.0 -84.0 -87.0 -92.0 -95.0 -96.0 -97.0 -98.0 -103.0 -102.0 -109.0 -110.0 -111.0 -116.0 -113.0 56 -121.0 -116.0 -117.0 -114.0 -113.0 -110.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -93.0 -94.0 -91.0 -90.0 -87.0 -82.0 -83.0 -80.0 -81.0 -76.0 -75.0 -76.0 -73.0 -68.0 -66.0 -63.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -39.0 -36.0 -33.0 -34.0 -31.0 -26.0 -27.0 -22.0 -19.0 -14.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 3.0 4.0 7.0 8.0 11.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 0.0 -3.0 -8.0 -9.0 -10.0 -17.0 -16.0 -21.0 -25.0 -24.0 -25.0 -32.0 -31.0 -30.0 -37.0 -36.0 -41.0 -42.0 -45.0 -44.0 -49.0 -52.0 -55.0 -58.0 -61.0 -64.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -77.0 -80.0 -79.0 -82.0 -83.0 -84.0 -89.0 -92.0 -93.0 -96.0 -97.0 -98.0 -103.0 -104.0 -109.0 -110.0 -111.0 -114.0 57 -124.0 -123.0 -118.0 -117.0 -116.0 -111.0 -112.0 -111.0 -106.0 -103.0 -104.0 -101.0 -98.0 -93.0 -94.0 -93.0 -92.0 -89.0 -82.0 -83.0 -82.0 -81.0 -78.0 -75.0 -74.0 -74.0 -70.0 -68.0 -63.0 -60.0 -63.0 -58.0 -59.0 -52.0 -55.0 -52.0 -49.0 -48.0 -43.0 -40.0 -41.0 -36.0 -33.0 -36.0 -31.0 -26.0 -27.0 -24.0 -21.0 -14.0 -11.0 -14.0 -11.0 -6.0 -3.0 -2.0 1.0 4.0 5.0 8.0 9.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 -2.0 -5.0 -8.0 -11.0 -12.0 -17.0 -17.0 -23.0 -23.0 -26.0 -25.0 -30.0 -29.0 -32.0 -37.0 -38.0 -41.0 -42.0 -47.0 -44.0 -51.0 -54.0 -55.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -79.0 -80.0 -79.0 -82.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -105.0 -104.0 -111.0 -110.0 -111.0 58 -123.0 -126.0 -121.0 -118.0 -117.0 -116.0 -109.0 -112.0 -109.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -89.0 -84.0 -83.0 -82.0 -83.0 -78.0 -75.0 -73.0 -72.0 -71.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -55.0 -54.0 -51.0 -46.0 -41.0 -40.0 -43.0 -36.0 -33.0 -34.0 -29.0 -26.0 -25.0 -24.0 -21.0 -14.0 -11.0 -12.0 -9.0 -4.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 11.0 4.0 3.0 -2.0 -7.0 -10.0 -13.0 -14.0 -19.0 -17.0 -24.0 -23.0 -26.0 -25.0 -30.0 -29.0 -34.0 -39.0 -40.0 -41.0 -44.0 -47.0 -44.0 -53.0 -56.0 -57.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -71.0 -72.0 -79.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -93.0 -98.0 -99.0 -102.0 -105.0 -104.0 -111.0 -110.0 59 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -90.0 -87.0 -84.0 -83.0 -82.0 -83.0 -78.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -52.0 -49.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -32.0 -27.0 -24.0 -23.0 -22.0 -19.0 -14.0 -11.0 -10.0 -7.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 9.0 4.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -17.0 -22.0 -23.0 -26.0 -25.0 -30.0 -31.0 -34.0 -37.0 -40.0 -43.0 -44.0 -47.0 -46.0 -53.0 -56.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -69.0 -72.0 -71.0 -72.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -93.0 -98.0 -101.0 -104.0 -105.0 -104.0 -109.0 60 -129.0 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -88.0 -87.0 -84.0 -83.0 -82.0 -81.0 -77.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -30.0 -27.0 -24.0 -23.0 -20.0 -19.0 -14.0 -11.0 -10.0 -5.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 13.0 10.0 9.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -15.0 -20.0 -17.0 -22.0 -23.0 -26.0 -27.0 -32.0 -31.0 -34.0 -37.0 -42.0 -43.0 -46.0 -49.0 -48.0 -55.0 -58.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -71.0 -74.0 -71.0 -72.0 -79.0 -80.0 -83.0 -86.0 -87.0 -90.0 -91.0 -92.0 -95.0 -100.0 -101.0 -106.0 -105.0 -104.0 61 -132.0 -131.0 -128.0 -123.0 -126.0 -123.0 -120.0 -119.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -95.0 -92.0 -93.0 -90.0 -87.0 -86.0 -85.0 -84.0 -82.0 -79.0 -76.0 -71.0 -70.0 -71.0 -66.0 -67.0 -60.0 -63.0 -62.0 -59.0 -54.0 -53.0 -50.0 -49.0 -48.0 -43.0 -42.0 -41.0 -36.0 -35.0 -32.0 -29.0 -24.0 -23.0 -22.0 -19.0 -16.0 -13.0 -10.0 -7.0 -4.0 -3.0 -2.0 -3.0 4.0 3.0 4.0 7.0 12.0 9.0 8.0 11.0 14.0 8.0 7.0 0.0 -3.0 -6.0 -9.0 -12.0 -13.0 -15.0 -18.0 -17.0 -22.0 -21.0 -26.0 -29.0 -30.0 -33.0 -34.0 -39.0 -40.0 -43.0 -46.0 -47.0 -48.0 -55.0 -56.0 -57.0 -62.0 -61.0 -64.0 -61.0 -66.0 -69.0 -72.0 -71.0 -74.0 -77.0 -80.0 -83.0 -84.0 -87.0 -88.0 -91.0 -94.0 -97.0 -100.0 -99.0 -104.0 -105.0 62 -135.0 -132.0 -131.0 -130.0 -125.0 -124.0 -123.0 -120.0 -117.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -97.0 -92.0 -95.0 -92.0 -87.0 -88.0 -87.0 -83.0 -80.0 -77.0 -76.0 -73.0 -72.0 -71.0 -66.0 -67.0 -62.0 -63.0 -60.0 -59.0 -56.0 -53.0 -52.0 -49.0 -48.0 -45.0 -42.0 -41.0 -36.0 -33.0 -30.0 -29.0 -26.0 -25.0 -20.0 -17.0 -16.0 -11.0 -10.0 -7.0 -6.0 -5.0 -2.0 -5.0 2.0 3.0 4.0 7.0 12.0 7.0 6.0 9.0 14.0 6.0 5.0 0.0 -5.0 -6.0 -9.0 -14.0 -14.0 -15.0 -18.0 -17.0 -22.0 -23.0 -28.0 -29.0 -30.0 -33.0 -36.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -57.0 -56.0 -57.0 -62.0 -61.0 -64.0 -63.0 -66.0 -69.0 -72.0 -71.0 -74.0 -79.0 -82.0 -83.0 -84.0 -87.0 -88.0 -93.0 -96.0 -99.0 -102.0 -99.0 -104.0 63 -136.0 -137.0 -132.0 -133.0 -132.0 -127.0 -124.0 -125.0 -122.0 -119.0 -118.0 -111.0 -114.0 -111.0 -110.0 -105.0 -106.0 -103.0 -100.0 -99.0 -92.0 -97.0 -94.0 -89.0 -90.0 -88.0 -85.0 -82.0 -79.0 -78.0 -73.0 -74.0 -73.0 -68.0 -69.0 -64.0 -65.0 -62.0 -57.0 -54.0 -53.0 -54.0 -49.0 -48.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -27.0 -26.0 -25.0 -22.0 -19.0 -16.0 -13.0 -12.0 -7.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 2.0 5.0 12.0 8.0 6.0 7.0 14.0 4.0 3.0 -2.0 -6.0 -8.0 -9.0 -14.0 -16.0 -15.0 -17.0 -17.0 -21.0 -25.0 -29.0 -31.0 -30.0 -33.0 -36.0 -38.0 -43.0 -46.0 -49.0 -49.0 -50.0 -56.0 -55.0 -57.0 -61.0 -61.0 -63.0 -63.0 -66.0 -69.0 -73.0 -71.0 -76.0 -78.0 -81.0 -82.0 -83.0 -88.0 -88.0 -94.0 -95.0 -98.0 -101.0 -99.0 64 -141.0 -138.0 -137.0 -134.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -113.0 -114.0 -113.0 -112.0 -107.0 -106.0 -105.0 -102.0 -101.0 -94.0 -98.0 -94.0 -89.0 -91.0 -88.0 -85.0 -82.0 -81.0 -80.0 -75.0 -76.0 -73.0 -68.0 -71.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -54.0 -51.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -29.0 -28.0 -25.0 -20.0 -19.0 -18.0 -15.0 -14.0 -9.0 -10.0 -9.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 10.0 6.0 6.0 6.0 14.0 3.0 3.0 -3.0 -5.0 -9.0 -10.0 -14.0 -15.0 -15.0 -17.0 -19.0 -21.0 -26.0 -29.0 -30.0 -30.0 -32.0 -37.0 -38.0 -43.0 -46.0 -49.0 -51.0 -50.0 -56.0 -55.0 -57.0 -59.0 -62.0 -61.0 -63.0 -65.0 -68.0 -71.0 -71.0 -75.0 -76.0 -81.0 -82.0 -85.0 -88.0 -88.0 -94.0 -95.0 -98.0 -99.0 65 -144.0 -141.0 -140.0 -139.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -113.0 -110.0 -107.0 -108.0 -103.0 -104.0 -101.0 -94.0 -99.0 -96.0 -89.0 -89.0 -86.0 -85.0 -84.0 -83.0 -80.0 -75.0 -76.0 -75.0 -68.0 -69.0 -68.0 -65.0 -62.0 -61.0 -56.0 -57.0 -56.0 -51.0 -50.0 -45.0 -42.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -17.0 -16.0 -9.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 8.0 6.0 4.0 4.0 14.0 1.0 3.0 -3.0 -5.0 -10.0 -10.0 -14.0 -15.0 -15.0 -17.0 -21.0 -21.0 -26.0 -29.0 -30.0 -30.0 -34.0 -39.0 -40.0 -45.0 -48.0 -51.0 -51.0 -50.0 -56.0 -55.0 -57.0 -61.0 -64.0 -61.0 -63.0 -67.0 -68.0 -73.0 -71.0 -75.0 -78.0 -81.0 -82.0 -87.0 -90.0 -90.0 -96.0 -95.0 -98.0 66 -147.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -109.0 -108.0 -105.0 -104.0 -103.0 -94.0 -97.0 -97.0 -91.0 -91.0 -88.0 -87.0 -86.0 -83.0 -82.0 -77.0 -76.0 -77.0 -70.0 -69.0 -68.0 -65.0 -64.0 -63.0 -58.0 -59.0 -56.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -37.0 -34.0 -31.0 -26.0 -21.0 -22.0 -21.0 -20.0 -19.0 -18.0 -11.0 -14.0 -13.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 6.0 4.0 4.0 2.0 14.0 1.0 1.0 -5.0 -3.0 -10.0 -10.0 -12.0 -13.0 -16.0 -15.0 -22.0 -23.0 -26.0 -27.0 -28.0 -32.0 -34.0 -39.0 -42.0 -43.0 -46.0 -49.0 -50.0 -50.0 -54.0 -55.0 -58.0 -59.0 -62.0 -61.0 -63.0 -67.0 -68.0 -71.0 -71.0 -77.0 -78.0 -81.0 -84.0 -85.0 -88.0 -90.0 -94.0 -95.0 67 -150.0 -147.0 -146.0 -145.0 -144.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -113.0 -114.0 -109.0 -110.0 -107.0 -104.0 -103.0 -96.0 -97.0 -95.0 -91.0 -91.0 -90.0 -89.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -68.0 -67.0 -64.0 -63.0 -60.0 -57.0 -56.0 -51.0 -48.0 -45.0 -44.0 -41.0 -40.0 -35.0 -32.0 -31.0 -26.0 -21.0 -22.0 -23.0 -22.0 -19.0 -18.0 -13.0 -14.0 -11.0 -8.0 -7.0 -6.0 -3.0 -2.0 1.0 4.0 2.0 4.0 1.0 14.0 3.0 0.0 -4.0 -1.0 -8.0 -9.0 -10.0 -13.0 -16.0 -15.0 -20.0 -23.0 -26.0 -27.0 -30.0 -33.0 -36.0 -39.0 -42.0 -41.0 -44.0 -47.0 -48.0 -49.0 -52.0 -55.0 -56.0 -57.0 -60.0 -63.0 -63.0 -67.0 -70.0 -71.0 -73.0 -75.0 -76.0 -81.0 -84.0 -87.0 -86.0 -89.0 -92.0 68 -153.0 -150.0 -149.0 -148.0 -147.0 -142.0 -141.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -124.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -111.0 -110.0 -107.0 -106.0 -103.0 -96.0 -97.0 -95.0 -93.0 -91.0 -92.0 -89.0 -86.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -70.0 -67.0 -66.0 -65.0 -60.0 -59.0 -54.0 -51.0 -48.0 -47.0 -44.0 -43.0 -38.0 -35.0 -34.0 -29.0 -26.0 -21.0 -24.0 -25.0 -22.0 -21.0 -20.0 -13.0 -14.0 -11.0 -8.0 -8.0 -6.0 -5.0 -2.0 -1.0 2.0 2.0 2.0 3.0 14.0 2.0 1.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -27.0 -30.0 -33.0 -36.0 -37.0 -42.0 -39.0 -42.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -72.0 -73.0 -78.0 -81.0 -84.0 -87.0 -84.0 -89.0 69 -154.0 -155.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -140.0 -137.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -120.0 -119.0 -118.0 -117.0 -112.0 -113.0 -112.0 -109.0 -106.0 -105.0 -98.0 -99.0 -97.0 -95.0 -91.0 -92.0 -91.0 -88.0 -87.0 -86.0 -81.0 -78.0 -75.0 -72.0 -71.0 -72.0 -67.0 -66.0 -65.0 -62.0 -57.0 -56.0 -53.0 -50.0 -45.0 -44.0 -43.0 -40.0 -37.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -24.0 -21.0 -22.0 -15.0 -16.0 -13.0 -8.0 -6.0 -8.0 -7.0 -2.0 -3.0 0.0 0.0 0.0 1.0 14.0 4.0 3.0 -2.0 1.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -20.0 -21.0 -22.0 -27.0 -30.0 -33.0 -34.0 -35.0 -40.0 -37.0 -40.0 -43.0 -46.0 -49.0 -50.0 -53.0 -54.0 -57.0 -56.0 -61.0 -64.0 -65.0 -66.0 -67.0 -72.0 -73.0 -78.0 -79.0 -82.0 -85.0 -84.0 70 -159.0 -156.0 -155.0 -150.0 -153.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -125.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -108.0 -103.0 -98.0 -98.0 -97.0 -97.0 -91.0 -94.0 -89.0 -90.0 -87.0 -86.0 -83.0 -80.0 -77.0 -72.0 -73.0 -72.0 -67.0 -68.0 -63.0 -62.0 -55.0 -56.0 -51.0 -50.0 -47.0 -46.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -21.0 -28.0 -25.0 -26.0 -22.0 -20.0 -15.0 -18.0 -14.0 -10.0 -6.0 -10.0 -9.0 -4.0 -5.0 0.0 -2.0 -2.0 1.0 14.0 6.0 5.0 0.0 1.0 -4.0 -7.0 -10.0 -13.0 -14.0 -17.0 -18.0 -21.0 -24.0 -25.0 -28.0 -31.0 -36.0 -35.0 -40.0 -37.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -66.0 -69.0 -72.0 -75.0 -78.0 -79.0 -82.0 -83.0 71 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -84.0 -81.0 -80.0 -77.0 -72.0 -75.0 -74.0 -67.0 -68.0 -63.0 -60.0 -53.0 -54.0 -53.0 -52.0 -47.0 -44.0 -43.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -30.0 -27.0 -26.0 -22.0 -18.0 -15.0 -18.0 -12.0 -10.0 -6.0 -12.0 -11.0 -4.0 -7.0 0.0 -2.0 0.0 1.0 14.0 8.0 5.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -14.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -29.0 -34.0 -37.0 -38.0 -35.0 -38.0 -43.0 -46.0 -45.0 -48.0 -51.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -64.0 -69.0 -72.0 -75.0 -76.0 -77.0 -80.0 72 -161.0 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -118.0 -119.0 -112.0 -113.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -82.0 -79.0 -80.0 -77.0 -72.0 -75.0 -72.0 -67.0 -66.0 -63.0 -60.0 -53.0 -52.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -29.0 -27.0 -26.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -11.0 -4.0 -7.0 0.0 -2.0 2.0 3.0 14.0 10.0 7.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -27.0 -28.0 -27.0 -32.0 -35.0 -36.0 -35.0 -36.0 -43.0 -44.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -60.0 -63.0 -66.0 -69.0 -72.0 -73.0 -74.0 -77.0 73 -162.0 -161.0 -158.0 -159.0 -156.0 -155.0 -150.0 -151.0 -148.0 -145.0 -142.0 -141.0 -138.0 -137.0 -134.0 -135.0 -130.0 -129.0 -128.0 -123.0 -122.0 -119.0 -118.0 -117.0 -112.0 -113.0 -110.0 -108.0 -105.0 -102.0 -98.0 -100.0 -97.0 -96.0 -91.0 -94.0 -91.0 -88.0 -83.0 -80.0 -79.0 -80.0 -75.0 -72.0 -73.0 -70.0 -67.0 -64.0 -61.0 -58.0 -53.0 -52.0 -51.0 -48.0 -45.0 -42.0 -41.0 -38.0 -35.0 -36.0 -33.0 -30.0 -21.0 -27.0 -27.0 -24.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -9.0 -4.0 -7.0 0.0 -1.0 2.0 5.0 14.0 12.0 7.0 2.0 -1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -15.0 -18.0 -21.0 -22.0 -25.0 -26.0 -27.0 -30.0 -33.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -44.0 -49.0 -52.0 -53.0 -52.0 -55.0 -60.0 -61.0 -66.0 -67.0 -70.0 -71.0 -72.0 74 -165.0 -164.0 -159.0 -158.0 -161.0 -156.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -137.0 -136.0 -133.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -113.0 -111.0 -108.0 -107.0 -102.0 -100.0 -100.0 -97.0 -98.0 -93.0 -94.0 -91.0 -86.0 -83.0 -80.0 -81.0 -78.0 -75.0 -74.0 -73.0 -70.0 -67.0 -64.0 -61.0 -56.0 -53.0 -54.0 -50.0 -47.0 -45.0 -44.0 -43.0 -38.0 -37.0 -36.0 -33.0 -28.0 -21.0 -27.0 -27.0 -26.0 -20.0 -18.0 -17.0 -18.0 -12.0 -12.0 -6.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 2.0 7.0 13.0 14.0 5.0 2.0 -1.0 0.0 -3.0 -6.0 -7.0 -12.0 -15.0 -18.0 -19.0 -22.0 -25.0 -24.0 -27.0 -30.0 -31.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 -57.0 -58.0 -63.0 -64.0 -67.0 -70.0 -69.0 75 -166.0 -167.0 -166.0 -159.0 -158.0 -159.0 -154.0 -153.0 -152.0 -149.0 -148.0 -143.0 -144.0 -139.0 -138.0 -137.0 -136.0 -131.0 -132.0 -127.0 -128.0 -123.0 -126.0 -121.0 -116.0 -117.0 -114.0 -114.0 -111.0 -110.0 -107.0 -102.0 -100.0 -98.0 -97.0 -99.0 -93.0 -92.0 -91.0 -86.0 -84.0 -82.0 -83.0 -79.0 -77.0 -75.0 -72.0 -69.0 -67.0 -64.0 -60.0 -56.0 -54.0 -54.0 -48.0 -45.0 -46.0 -46.0 -45.0 -39.0 -39.0 -36.0 -32.0 -29.0 -21.0 -28.0 -29.0 -26.0 -20.0 -19.0 -19.0 -18.0 -12.0 -14.0 -6.0 -13.0 -13.0 -8.0 -6.0 -4.0 0.0 2.0 5.0 13.0 14.0 3.0 0.0 -1.0 0.0 -3.0 -8.0 -7.0 -14.0 -17.0 -20.0 -21.0 -22.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -52.0 -51.0 -54.0 -59.0 -58.0 -63.0 -64.0 -67.0 -70.0 76 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -126.0 -123.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -110.0 -105.0 -102.0 -100.0 -98.0 -97.0 -97.0 -93.0 -93.0 -90.0 -86.0 -84.0 -83.0 -84.0 -79.0 -78.0 -73.0 -70.0 -67.0 -66.0 -63.0 -60.0 -56.0 -54.0 -53.0 -48.0 -45.0 -46.0 -47.0 -44.0 -39.0 -38.0 -35.0 -30.0 -29.0 -21.0 -28.0 -28.0 -25.0 -20.0 -19.0 -20.0 -19.0 -12.0 -15.0 -6.0 -12.0 -12.0 -9.0 -4.0 -3.0 2.0 3.0 4.0 13.0 14.0 3.0 0.0 -3.0 0.0 -5.0 -10.0 -9.0 -16.0 -19.0 -22.0 -21.0 -24.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -44.0 -43.0 -46.0 -49.0 -52.0 -51.0 -56.0 -61.0 -60.0 -63.0 -64.0 -67.0 77 -172.0 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -113.0 -108.0 -105.0 -104.0 -100.0 -98.0 -97.0 -97.0 -91.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -81.0 -76.0 -73.0 -70.0 -67.0 -64.0 -64.0 -58.0 -56.0 -56.0 -51.0 -48.0 -45.0 -47.0 -47.0 -42.0 -39.0 -38.0 -33.0 -30.0 -29.0 -21.0 -28.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -14.0 -12.0 -7.0 -4.0 -3.0 4.0 1.0 2.0 13.0 14.0 3.0 0.0 -1.0 -2.0 -7.0 -10.0 -9.0 -16.0 -19.0 -20.0 -21.0 -24.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -35.0 -36.0 -41.0 -44.0 -43.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -62.0 -61.0 -64.0 78 -171.0 -172.0 -167.0 -166.0 -167.0 -164.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -108.0 -105.0 -104.0 -100.0 -98.0 -98.0 -95.0 -89.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -79.0 -76.0 -73.0 -70.0 -65.0 -64.0 -62.0 -58.0 -56.0 -54.0 -51.0 -48.0 -45.0 -47.0 -45.0 -42.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -12.0 -10.0 -7.0 -2.0 -1.0 4.0 1.0 2.0 13.0 14.0 5.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -22.0 -23.0 -26.0 -25.0 -26.0 -31.0 -34.0 -33.0 -34.0 -39.0 -42.0 -43.0 -44.0 -49.0 -50.0 -55.0 -56.0 -59.0 -62.0 -61.0 79 -174.0 -173.0 -172.0 -167.0 -166.0 -167.0 -164.0 -161.0 -160.0 -157.0 -156.0 -151.0 -152.0 -149.0 -148.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -130.0 -123.0 -124.0 -125.0 -122.0 -120.0 -116.0 -115.0 -113.0 -112.0 -111.0 -106.0 -105.0 -104.0 -99.0 -96.0 -98.0 -95.0 -89.0 -91.0 -90.0 -86.0 -84.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -65.0 -64.0 -60.0 -56.0 -54.0 -54.0 -51.0 -48.0 -45.0 -45.0 -43.0 -40.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -26.0 -25.0 -20.0 -21.0 -18.0 -19.0 -14.0 -13.0 -6.0 -10.0 -8.0 -5.0 -2.0 -1.0 4.0 1.0 4.0 13.0 14.0 7.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -20.0 -23.0 -26.0 -25.0 -24.0 -29.0 -32.0 -33.0 -32.0 -37.0 -42.0 -43.0 -46.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 80 -177.0 -174.0 -175.0 -174.0 -167.0 -166.0 -167.0 -166.0 -161.0 -160.0 -159.0 -154.0 -153.0 -150.0 -149.0 -150.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -128.0 -123.0 -126.0 -123.0 -123.0 -118.0 -116.0 -117.0 -111.0 -114.0 -109.0 -106.0 -107.0 -104.0 -97.0 -96.0 -96.0 -96.0 -89.0 -91.0 -92.0 -86.0 -85.0 -83.0 -80.0 -77.0 -72.0 -69.0 -69.0 -67.0 -63.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -43.0 -43.0 -40.0 -39.0 -37.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -17.0 -16.0 -13.0 -8.0 -9.0 -8.0 -3.0 -4.0 -1.0 2.0 3.0 3.0 13.0 14.0 5.0 4.0 -1.0 -2.0 -7.0 -8.0 -7.0 -12.0 -15.0 -16.0 -17.0 -18.0 -23.0 -24.0 -23.0 -24.0 -29.0 -30.0 -33.0 -32.0 -37.0 -40.0 -43.0 -46.0 -47.0 -52.0 -53.0 -54.0 -57.0 81 -178.0 -177.0 -172.0 -175.0 -174.0 -167.0 -164.0 -167.0 -164.0 -159.0 -160.0 -157.0 -154.0 -153.0 -150.0 -149.0 -148.0 -145.0 -144.0 -139.0 -138.0 -135.0 -134.0 -133.0 -128.0 -123.0 -126.0 -122.0 -121.0 -118.0 -116.0 -116.0 -111.0 -112.0 -109.0 -106.0 -108.0 -102.0 -97.0 -94.0 -96.0 -96.0 -89.0 -91.0 -90.0 -84.0 -83.0 -81.0 -78.0 -75.0 -70.0 -69.0 -67.0 -65.0 -61.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -41.0 -41.0 -40.0 -39.0 -35.0 -31.0 -28.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -15.0 -14.0 -13.0 -8.0 -7.0 -6.0 -3.0 -4.0 -1.0 2.0 4.0 5.0 13.0 14.0 5.0 2.0 -1.0 0.0 -5.0 -6.0 -5.0 -10.0 -13.0 -14.0 -17.0 -16.0 -21.0 -22.0 -23.0 -24.0 -29.0 -32.0 -33.0 -32.0 -35.0 -40.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 82 -179.0 -178.0 -175.0 -172.0 -175.0 -172.0 -167.0 -164.0 -165.0 -162.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -123.0 -125.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -109.0 -106.0 -107.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -92.0 -89.0 -82.0 -81.0 -81.0 -78.0 -73.0 -70.0 -71.0 -65.0 -64.0 -59.0 -58.0 -57.0 -54.0 -55.0 -53.0 -50.0 -45.0 -41.0 -42.0 -42.0 -38.0 -33.0 -31.0 -30.0 -31.0 -21.0 -28.0 -30.0 -27.0 -24.0 -23.0 -18.0 -17.0 -16.0 -15.0 -8.0 -9.0 -6.0 -5.0 -6.0 -3.0 2.0 2.0 5.0 14.0 12.0 5.0 2.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -11.0 -14.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -30.0 -31.0 -32.0 -37.0 -38.0 -43.0 -44.0 -47.0 -50.0 -49.0 83 -182.0 -179.0 -178.0 -175.0 -172.0 -173.0 -170.0 -167.0 -164.0 -163.0 -162.0 -157.0 -158.0 -155.0 -154.0 -153.0 -148.0 -145.0 -146.0 -143.0 -142.0 -139.0 -138.0 -133.0 -130.0 -131.0 -126.0 -122.0 -123.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -107.0 -104.0 -105.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -90.0 -87.0 -80.0 -79.0 -80.0 -77.0 -74.0 -71.0 -70.0 -63.0 -62.0 -59.0 -58.0 -57.0 -54.0 -53.0 -52.0 -49.0 -46.0 -41.0 -42.0 -41.0 -36.0 -33.0 -33.0 -32.0 -32.0 -21.0 -28.0 -28.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -11.0 -6.0 -7.0 -6.0 -4.0 2.0 4.0 5.0 14.0 10.0 3.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -32.0 -31.0 -34.0 -39.0 -38.0 -45.0 -46.0 -47.0 -50.0 84 -183.0 -182.0 -179.0 -178.0 -175.0 -174.0 -173.0 -172.0 -167.0 -162.0 -165.0 -162.0 -157.0 -156.0 -157.0 -156.0 -153.0 -146.0 -145.0 -146.0 -143.0 -140.0 -141.0 -138.0 -135.0 -130.0 -131.0 -125.0 -120.0 -123.0 -120.0 -119.0 -118.0 -115.0 -116.0 -109.0 -110.0 -105.0 -104.0 -103.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -88.0 -85.0 -78.0 -77.0 -78.0 -77.0 -74.0 -71.0 -68.0 -63.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -50.0 -47.0 -46.0 -41.0 -40.0 -39.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -26.0 -29.0 -29.0 -26.0 -21.0 -21.0 -19.0 -18.0 -13.0 -12.0 -13.0 -8.0 -9.0 -7.0 -4.0 0.0 2.0 5.0 14.0 10.0 1.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -15.0 -16.0 -15.0 -18.0 -19.0 -24.0 -21.0 -26.0 -29.0 -32.0 -33.0 -36.0 -41.0 -40.0 -45.0 -46.0 -47.0 85 -182.0 -183.0 -180.0 -179.0 -178.0 -175.0 -174.0 -173.0 -170.0 -165.0 -162.0 -163.0 -162.0 -157.0 -156.0 -157.0 -154.0 -151.0 -146.0 -145.0 -146.0 -141.0 -140.0 -139.0 -136.0 -135.0 -130.0 -130.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -102.0 -103.0 -100.0 -97.0 -94.0 -97.0 -92.0 -89.0 -88.0 -83.0 -76.0 -77.0 -78.0 -75.0 -72.0 -69.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -50.0 -51.0 -48.0 -47.0 -46.0 -39.0 -38.0 -37.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -26.0 -29.0 -29.0 -24.0 -22.0 -21.0 -21.0 -16.0 -15.0 -14.0 -15.0 -10.0 -10.0 -7.0 -3.0 -1.0 2.0 5.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -4.0 -5.0 -12.0 -13.0 -14.0 -15.0 -18.0 -21.0 -24.0 -21.0 -26.0 -29.0 -32.0 -35.0 -36.0 -41.0 -40.0 -43.0 -46.0 86 -185.0 -182.0 -181.0 -180.0 -179.0 -178.0 -173.0 -174.0 -171.0 -168.0 -165.0 -162.0 -163.0 -160.0 -157.0 -156.0 -155.0 -152.0 -151.0 -146.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -133.0 -129.0 -128.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -114.0 -107.0 -106.0 -101.0 -102.0 -103.0 -98.0 -97.0 -94.0 -95.0 -92.0 -87.0 -86.0 -81.0 -76.0 -77.0 -76.0 -73.0 -70.0 -67.0 -66.0 -63.0 -62.0 -57.0 -56.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -37.0 -36.0 -37.0 -34.0 -33.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -27.0 -26.0 -22.0 -21.0 -21.0 -16.0 -16.0 -16.0 -15.0 -10.0 -10.0 -7.0 -1.0 1.0 1.0 3.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -6.0 -5.0 -12.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -21.0 -26.0 -31.0 -32.0 -37.0 -36.0 -41.0 -40.0 -43.0 87 -182.0 -186.0 -180.0 -183.0 -180.0 -181.0 -176.0 -173.0 -172.0 -169.0 -170.0 -165.0 -162.0 -163.0 -160.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -147.0 -146.0 -143.0 -140.0 -139.0 -136.0 -132.0 -127.0 -130.0 -123.0 -122.0 -123.0 -118.0 -121.0 -118.0 -115.0 -112.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -97.0 -92.0 -93.0 -90.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -68.0 -67.0 -66.0 -63.0 -62.0 -55.0 -54.0 -51.0 -50.0 -51.0 -48.0 -45.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -27.0 -27.0 -27.0 -22.0 -21.0 -21.0 -18.0 -16.0 -18.0 -14.0 -11.0 -9.0 -5.0 -1.0 1.0 1.0 3.0 14.0 10.0 3.0 2.0 1.0 2.0 -5.0 -6.0 -5.0 -10.0 -13.0 -12.0 -17.0 -20.0 -21.0 -22.0 -21.0 -28.0 -29.0 -34.0 -35.0 -36.0 -41.0 -40.0 88 -189.0 -182.0 -187.0 -180.0 -183.0 -178.0 -179.0 -176.0 -173.0 -170.0 -169.0 -168.0 -165.0 -160.0 -163.0 -160.0 -159.0 -156.0 -153.0 -150.0 -149.0 -146.0 -147.0 -144.0 -141.0 -140.0 -137.0 -135.0 -130.0 -127.0 -130.0 -123.0 -122.0 -121.0 -118.0 -121.0 -118.0 -113.0 -110.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -90.0 -92.0 -90.0 -83.0 -82.0 -79.0 -78.0 -75.0 -72.0 -71.0 -70.0 -67.0 -66.0 -63.0 -62.0 -53.0 -52.0 -51.0 -50.0 -51.0 -46.0 -43.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -29.0 -27.0 -27.0 -22.0 -21.0 -22.0 -18.0 -16.0 -18.0 -15.0 -10.0 -7.0 -6.0 -1.0 1.0 3.0 2.0 14.0 10.0 1.0 2.0 1.0 3.0 -4.0 -6.0 -5.0 -9.0 -12.0 -14.0 -18.0 -19.0 -20.0 -22.0 -23.0 -29.0 -31.0 -33.0 -37.0 -36.0 -40.0 89 -188.0 -189.0 -182.0 -187.0 -180.0 -183.0 -176.0 -179.0 -176.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -163.0 -158.0 -157.0 -156.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -141.0 -138.0 -136.0 -133.0 -130.0 -127.0 -128.0 -123.0 -122.0 -121.0 -118.0 -119.0 -116.0 -111.0 -108.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -88.0 -91.0 -88.0 -83.0 -82.0 -79.0 -78.0 -73.0 -70.0 -71.0 -70.0 -67.0 -64.0 -63.0 -60.0 -53.0 -50.0 -51.0 -50.0 -49.0 -44.0 -41.0 -42.0 -37.0 -36.0 -35.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -27.0 -29.0 -27.0 -25.0 -22.0 -21.0 -22.0 -18.0 -15.0 -18.0 -13.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 4.0 14.0 10.0 2.0 2.0 1.0 3.0 -2.0 -5.0 -7.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -23.0 -23.0 -29.0 -30.0 -31.0 -36.0 -35.0 90 -189.0 -188.0 -187.0 -182.0 -189.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -159.0 -154.0 -153.0 -152.0 -147.0 -146.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -119.0 -116.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -86.0 -89.0 -88.0 -85.0 -82.0 -77.0 -78.0 -71.0 -70.0 -71.0 -70.0 -67.0 -62.0 -63.0 -60.0 -53.0 -50.0 -51.0 -48.0 -49.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -33.0 -30.0 -21.0 -27.0 -27.0 -27.0 -25.0 -23.0 -21.0 -22.0 -18.0 -15.0 -16.0 -11.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 6.0 14.0 10.0 4.0 3.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -17.0 -18.0 -23.0 -25.0 -29.0 -30.0 -31.0 -34.0 91 -194.0 -189.0 -190.0 -187.0 -182.0 -187.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -154.0 -151.0 -152.0 -147.0 -144.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -117.0 -114.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -99.0 -96.0 -93.0 -86.0 -87.0 -88.0 -85.0 -82.0 -77.0 -76.0 -71.0 -70.0 -71.0 -68.0 -65.0 -62.0 -61.0 -58.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -31.0 -30.0 -21.0 -27.0 -25.0 -28.0 -25.0 -23.0 -21.0 -22.0 -17.0 -13.0 -14.0 -9.0 -8.0 -5.0 -4.0 1.0 3.0 7.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 -31.0 92 -193.0 -194.0 -187.0 -190.0 -187.0 -182.0 -185.0 -180.0 -183.0 -176.0 -179.0 -174.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -156.0 -151.0 -150.0 -147.0 -146.0 -145.0 -143.0 -138.0 -137.0 -134.0 -133.0 -134.0 -131.0 -130.0 -125.0 -126.0 -121.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -108.0 -105.0 -102.0 -99.0 -94.0 -91.0 -84.0 -87.0 -86.0 -83.0 -80.0 -77.0 -76.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -59.0 -58.0 -53.0 -50.0 -49.0 -46.0 -49.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -21.0 -17.0 -13.0 -12.0 -9.0 -8.0 -3.0 -2.0 3.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -7.0 -8.0 -7.0 -8.0 -13.0 -18.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 93 -196.0 -193.0 -192.0 -187.0 -190.0 -185.0 -182.0 -185.0 -180.0 -181.0 -176.0 -177.0 -174.0 -171.0 -170.0 -167.0 -166.0 -161.0 -160.0 -159.0 -156.0 -157.0 -156.0 -149.0 -148.0 -147.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -133.0 -131.0 -130.0 -127.0 -124.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -108.0 -103.0 -102.0 -97.0 -92.0 -89.0 -84.0 -87.0 -84.0 -81.0 -80.0 -79.0 -78.0 -71.0 -72.0 -71.0 -64.0 -61.0 -62.0 -59.0 -60.0 -53.0 -48.0 -49.0 -46.0 -49.0 -44.0 -43.0 -42.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -19.0 -15.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 5.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 -2.0 -9.0 -8.0 -7.0 -8.0 -15.0 -18.0 -21.0 -20.0 -23.0 -25.0 -29.0 94 -197.0 -196.0 -193.0 -192.0 -187.0 -190.0 -183.0 -182.0 -185.0 -178.0 -181.0 -174.0 -177.0 -172.0 -171.0 -170.0 -165.0 -164.0 -161.0 -158.0 -159.0 -156.0 -157.0 -154.0 -147.0 -148.0 -145.0 -146.0 -142.0 -141.0 -138.0 -137.0 -134.0 -131.0 -133.0 -131.0 -128.0 -127.0 -122.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -106.0 -101.0 -100.0 -95.0 -90.0 -89.0 -84.0 -85.0 -82.0 -79.0 -80.0 -79.0 -78.0 -71.0 -72.0 -69.0 -62.0 -61.0 -62.0 -59.0 -60.0 -51.0 -48.0 -49.0 -46.0 -49.0 -44.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -36.0 -31.0 -28.0 -21.0 -25.0 -25.0 -26.0 -24.0 -24.0 -18.0 -17.0 -16.0 -13.0 -12.0 -9.0 -6.0 -3.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 4.0 0.0 1.0 1.0 -4.0 -7.0 -8.0 -7.0 -10.0 -15.0 -20.0 -21.0 -20.0 -23.0 -25.0 95 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -164.0 -159.0 -158.0 -160.0 -156.0 -155.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -141.0 -138.0 -137.0 -132.0 -131.0 -133.0 -129.0 -126.0 -127.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -110.0 -103.0 -104.0 -99.0 -98.0 -93.0 -90.0 -89.0 -84.0 -83.0 -80.0 -79.0 -80.0 -79.0 -78.0 -71.0 -70.0 -67.0 -62.0 -61.0 -62.0 -57.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -34.0 -31.0 -28.0 -21.0 -25.0 -25.0 -25.0 -24.0 -23.0 -16.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 2.0 1.0 -1.0 1.0 -4.0 -9.0 -8.0 -7.0 -12.0 -17.0 -22.0 -23.0 -20.0 -23.0 96 -201.0 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -162.0 -159.0 -156.0 -161.0 -156.0 -153.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -139.0 -138.0 -137.0 -132.0 -131.0 -134.0 -129.0 -124.0 -125.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -104.0 -99.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -77.0 -76.0 -71.0 -68.0 -65.0 -62.0 -61.0 -62.0 -57.0 -56.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -42.0 -39.0 -40.0 -35.0 -34.0 -35.0 -32.0 -31.0 -28.0 -21.0 -25.0 -25.0 -23.0 -22.0 -21.0 -14.0 -17.0 -16.0 -11.0 -8.0 -7.0 -4.0 1.0 0.0 5.0 4.0 9.0 10.0 14.0 10.0 4.0 3.0 0.0 1.0 -6.0 -7.0 -10.0 -9.0 -12.0 -19.0 -20.0 -23.0 -20.0 97 -200.0 -201.0 -200.0 -197.0 -200.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -170.0 -163.0 -162.0 -159.0 -156.0 -159.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -144.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -132.0 -129.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -109.0 -106.0 -101.0 -102.0 -97.0 -96.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -75.0 -74.0 -69.0 -66.0 -65.0 -62.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -34.0 -35.0 -32.0 -33.0 -28.0 -21.0 -25.0 -24.0 -23.0 -22.0 -19.0 -14.0 -17.0 -14.0 -9.0 -6.0 -5.0 -2.0 1.0 0.0 5.0 4.0 9.0 12.0 14.0 10.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -18.0 -21.0 98 -205.0 -200.0 -201.0 -200.0 -197.0 -198.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -168.0 -163.0 -160.0 -159.0 -156.0 -157.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -142.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -130.0 -127.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -112.0 -111.0 -106.0 -101.0 -102.0 -97.0 -94.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -78.0 -75.0 -72.0 -67.0 -68.0 -67.0 -62.0 -63.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -32.0 -33.0 -28.0 -21.0 -24.0 -22.0 -21.0 -20.0 -19.0 -14.0 -17.0 -12.0 -7.0 -4.0 -4.0 -4.0 0.0 -2.0 3.0 4.0 9.0 14.0 14.0 10.0 6.0 3.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -16.0 -19.0 -18.0 99 -206.0 -205.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -192.0 -185.0 -186.0 -181.0 -182.0 -181.0 -178.0 -179.0 -174.0 -173.0 -172.0 -169.0 -168.0 -163.0 -160.0 -157.0 -156.0 -157.0 -154.0 -153.0 -151.0 -146.0 -145.0 -142.0 -142.0 -138.0 -139.0 -136.0 -135.0 -132.0 -129.0 -128.0 -127.0 -122.0 -123.0 -122.0 -119.0 -116.0 -113.0 -110.0 -109.0 -104.0 -99.0 -102.0 -95.0 -92.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -77.0 -76.0 -73.0 -70.0 -67.0 -68.0 -67.0 -62.0 -61.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -34.0 -31.0 -28.0 -21.0 -24.0 -22.0 -19.0 -20.0 -19.0 -14.0 -15.0 -10.0 -5.0 -2.0 -4.0 -4.0 0.0 -2.0 3.0 6.0 9.0 14.0 14.0 10.0 6.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -15.0 -16.0 -19.0 100 -207.0 -206.0 -203.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -185.0 -184.0 -181.0 -182.0 -181.0 -178.0 -179.0 -172.0 -175.0 -172.0 -169.0 -166.0 -163.0 -158.0 -157.0 -156.0 -157.0 -153.0 -152.0 -151.0 -146.0 -143.0 -142.0 -140.0 -138.0 -139.0 -136.0 -133.0 -132.0 -127.0 -128.0 -127.0 -120.0 -123.0 -120.0 -117.0 -114.0 -111.0 -108.0 -107.0 -102.0 -99.0 -100.0 -93.0 -90.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -75.0 -74.0 -71.0 -70.0 -67.0 -68.0 -65.0 -60.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -44.0 -39.0 -40.0 -37.0 -32.0 -36.0 -36.0 -30.0 -27.0 -21.0 -24.0 -20.0 -19.0 -20.0 -17.0 -12.0 -13.0 -8.0 -3.0 -2.0 -4.0 -5.0 0.0 0.0 3.0 6.0 7.0 14.0 14.0 10.0 4.0 1.0 -2.0 -5.0 -6.0 -7.0 -14.0 -15.0 -16.0 101 -208.0 -209.0 -206.0 -205.0 -198.0 -203.0 -198.0 -197.0 -196.0 -191.0 -192.0 -183.0 -184.0 -181.0 -182.0 -181.0 -178.0 -177.0 -172.0 -173.0 -172.0 -167.0 -166.0 -161.0 -158.0 -157.0 -156.0 -156.0 -151.0 -152.0 -151.0 -144.0 -143.0 -140.0 -140.0 -138.0 -139.0 -134.0 -133.0 -130.0 -127.0 -128.0 -125.0 -120.0 -121.0 -118.0 -115.0 -112.0 -109.0 -106.0 -105.0 -102.0 -97.0 -98.0 -91.0 -90.0 -89.0 -88.0 -89.0 -84.0 -79.0 -78.0 -73.0 -72.0 -71.0 -70.0 -65.0 -66.0 -65.0 -60.0 -63.0 -62.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -42.0 -37.0 -40.0 -37.0 -32.0 -37.0 -35.0 -28.0 -27.0 -21.0 -22.0 -20.0 -19.0 -20.0 -15.0 -10.0 -11.0 -6.0 -3.0 -2.0 -4.0 -5.0 0.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 4.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -13.0 102 -213.0 -208.0 -207.0 -208.0 -207.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -177.0 -170.0 -173.0 -170.0 -167.0 -164.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -152.0 -149.0 -144.0 -141.0 -140.0 -140.0 -138.0 -137.0 -134.0 -131.0 -132.0 -127.0 -126.0 -127.0 -118.0 -119.0 -116.0 -113.0 -110.0 -107.0 -104.0 -105.0 -100.0 -95.0 -96.0 -91.0 -90.0 -89.0 -88.0 -87.0 -82.0 -77.0 -76.0 -71.0 -72.0 -71.0 -68.0 -63.0 -64.0 -65.0 -60.0 -63.0 -60.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -45.0 -40.0 -37.0 -40.0 -37.0 -32.0 -36.0 -33.0 -28.0 -27.0 -20.0 -22.0 -20.0 -19.0 -18.0 -13.0 -8.0 -9.0 -6.0 -3.0 -2.0 -4.0 -3.0 2.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 6.0 1.0 0.0 -3.0 -8.0 -5.0 -10.0 103 -210.0 -213.0 -208.0 -207.0 -208.0 -205.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -175.0 -170.0 -171.0 -170.0 -167.0 -162.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -140.0 -141.0 -138.0 -135.0 -132.0 -131.0 -132.0 -127.0 -126.0 -125.0 -118.0 -117.0 -116.0 -113.0 -112.0 -105.0 -104.0 -103.0 -100.0 -95.0 -94.0 -91.0 -92.0 -89.0 -86.0 -87.0 -84.0 -75.0 -74.0 -71.0 -72.0 -73.0 -68.0 -61.0 -64.0 -65.0 -60.0 -61.0 -58.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -43.0 -40.0 -37.0 -40.0 -37.0 -32.0 -34.0 -31.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -16.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 -2.0 -3.0 4.0 2.0 2.0 2.0 5.0 14.0 14.0 6.0 6.0 -1.0 0.0 -3.0 -8.0 -5.0 104 -215.0 -210.0 -213.0 -210.0 -207.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -179.0 -176.0 -177.0 -170.0 -171.0 -170.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -156.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -141.0 -136.0 -137.0 -132.0 -131.0 -132.0 -129.0 -126.0 -123.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -104.0 -101.0 -98.0 -93.0 -94.0 -91.0 -92.0 -89.0 -84.0 -85.0 -82.0 -75.0 -74.0 -71.0 -72.0 -71.0 -68.0 -61.0 -64.0 -67.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -47.0 -44.0 -45.0 -40.0 -37.0 -38.0 -37.0 -32.0 -32.0 -29.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -14.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 0.0 -1.0 4.0 2.0 2.0 4.0 7.0 14.0 14.0 5.0 4.0 -1.0 0.0 -3.0 -6.0 105 -218.0 -215.0 -210.0 -213.0 -210.0 -205.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -177.0 -176.0 -175.0 -170.0 -171.0 -168.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -139.0 -134.0 -139.0 -132.0 -131.0 -134.0 -129.0 -128.0 -121.0 -116.0 -115.0 -116.0 -109.0 -112.0 -105.0 -104.0 -103.0 -96.0 -93.0 -94.0 -93.0 -92.0 -89.0 -84.0 -85.0 -80.0 -75.0 -74.0 -71.0 -72.0 -71.0 -70.0 -61.0 -64.0 -65.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -45.0 -44.0 -45.0 -40.0 -37.0 -38.0 -36.0 -31.0 -30.0 -27.0 -26.0 -25.0 -18.0 -22.0 -18.0 -15.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 -2.0 2.0 -1.0 4.0 2.0 4.0 6.0 5.0 14.0 12.0 5.0 4.0 -1.0 2.0 -3.0 106 -219.0 -220.0 -215.0 -210.0 -213.0 -212.0 -205.0 -208.0 -205.0 -200.0 -199.0 -198.0 -197.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -175.0 -170.0 -171.0 -170.0 -167.0 -164.0 -159.0 -160.0 -158.0 -157.0 -156.0 -151.0 -152.0 -151.0 -144.0 -141.0 -136.0 -137.0 -134.0 -139.0 -132.0 -131.0 -132.0 -129.0 -126.0 -121.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -104.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -91.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -64.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -47.0 -42.0 -37.0 -37.0 -36.0 -29.0 -30.0 -29.0 -26.0 -23.0 -16.0 -20.0 -16.0 -13.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 0.0 2.0 -1.0 6.0 2.0 6.0 6.0 5.0 14.0 10.0 5.0 4.0 -1.0 2.0 107 -220.0 -219.0 -218.0 -215.0 -210.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -197.0 -198.0 -195.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -173.0 -170.0 -171.0 -168.0 -166.0 -163.0 -159.0 -160.0 -158.0 -157.0 -154.0 -151.0 -152.0 -149.0 -142.0 -139.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -130.0 -127.0 -124.0 -119.0 -114.0 -113.0 -114.0 -109.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -88.0 -89.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -62.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -45.0 -42.0 -37.0 -35.0 -34.0 -29.0 -30.0 -29.0 -24.0 -23.0 -16.0 -19.0 -16.0 -15.0 -12.0 -11.0 -10.0 -11.0 -4.0 1.0 0.0 2.0 1.0 8.0 2.0 6.0 6.0 6.0 14.0 8.0 5.0 4.0 -1.0 108 -223.0 -220.0 -219.0 -218.0 -217.0 -210.0 -209.0 -212.0 -205.0 -206.0 -203.0 -202.0 -197.0 -196.0 -195.0 -194.0 -193.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -176.0 -173.0 -170.0 -171.0 -169.0 -166.0 -163.0 -159.0 -161.0 -160.0 -155.0 -154.0 -153.0 -152.0 -147.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -128.0 -127.0 -122.0 -117.0 -112.0 -113.0 -114.0 -107.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -91.0 -86.0 -87.0 -82.0 -85.0 -80.0 -75.0 -72.0 -71.0 -70.0 -71.0 -70.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -47.0 -48.0 -44.0 -41.0 -39.0 -35.0 -34.0 -29.0 -30.0 -27.0 -22.0 -21.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -9.0 -4.0 1.0 0.0 2.0 0.0 8.0 2.0 6.0 8.0 6.0 14.0 8.0 5.0 4.0 109 -222.0 -223.0 -218.0 -219.0 -218.0 -217.0 -210.0 -209.0 -210.0 -203.0 -206.0 -201.0 -202.0 -197.0 -196.0 -195.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -174.0 -173.0 -170.0 -170.0 -167.0 -166.0 -163.0 -159.0 -161.0 -158.0 -155.0 -154.0 -153.0 -150.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -129.0 -126.0 -125.0 -120.0 -115.0 -112.0 -113.0 -112.0 -105.0 -104.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -89.0 -86.0 -87.0 -82.0 -83.0 -78.0 -75.0 -72.0 -71.0 -70.0 -71.0 -68.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -49.0 -47.0 -44.0 -39.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -22.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -7.0 -4.0 1.0 2.0 2.0 2.0 8.0 2.0 8.0 8.0 6.0 14.0 8.0 5.0 110 -227.0 -222.0 -223.0 -218.0 -219.0 -216.0 -215.0 -210.0 -209.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -191.0 -186.0 -187.0 -184.0 -181.0 -180.0 -177.0 -174.0 -171.0 -169.0 -168.0 -167.0 -166.0 -163.0 -159.0 -159.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -127.0 -124.0 -123.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -102.0 -101.0 -96.0 -91.0 -92.0 -89.0 -86.0 -87.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -49.0 -47.0 -42.0 -37.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -20.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 4.0 4.0 2.0 8.0 4.0 8.0 8.0 4.0 14.0 8.0 111 -228.0 -229.0 -222.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -203.0 -206.0 -201.0 -202.0 -199.0 -196.0 -195.0 -192.0 -191.0 -186.0 -187.0 -186.0 -183.0 -178.0 -179.0 -174.0 -173.0 -171.0 -170.0 -167.0 -164.0 -165.0 -161.0 -161.0 -160.0 -157.0 -154.0 -149.0 -146.0 -145.0 -144.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -129.0 -124.0 -121.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -100.0 -99.0 -96.0 -89.0 -90.0 -89.0 -86.0 -87.0 -80.0 -79.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -48.0 -45.0 -40.0 -35.0 -39.0 -39.0 -32.0 -27.0 -26.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -17.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 6.0 4.0 2.0 8.0 4.0 8.0 8.0 6.0 14.0 112 -233.0 -228.0 -227.0 -224.0 -227.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -197.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -170.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -157.0 -154.0 -151.0 -148.0 -145.0 -146.0 -139.0 -136.0 -135.0 -134.0 -133.0 -128.0 -127.0 -122.0 -121.0 -118.0 -113.0 -112.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -97.0 -94.0 -89.0 -90.0 -89.0 -86.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -46.0 -43.0 -40.0 -35.0 -40.0 -37.0 -32.0 -27.0 -24.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -15.0 -10.0 -11.0 -8.0 -5.0 -2.0 3.0 6.0 4.0 4.0 8.0 4.0 6.0 8.0 8.0 113 -234.0 -233.0 -228.0 -227.0 -224.0 -225.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -195.0 -192.0 -189.0 -188.0 -187.0 -182.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -168.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -133.0 -134.0 -133.0 -128.0 -125.0 -122.0 -121.0 -118.0 -113.0 -110.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -95.0 -92.0 -89.0 -90.0 -89.0 -86.0 -83.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -66.0 -61.0 -58.0 -55.0 -56.0 -55.0 -52.0 -52.0 -47.0 -44.0 -43.0 -40.0 -35.0 -38.0 -35.0 -30.0 -25.0 -22.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -13.0 -10.0 -11.0 -8.0 -3.0 0.0 3.0 6.0 4.0 4.0 8.0 6.0 6.0 8.0 114 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -199.0 -194.0 -197.0 -192.0 -189.0 -190.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -161.0 -158.0 -155.0 -152.0 -151.0 -150.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -131.0 -128.0 -125.0 -120.0 -119.0 -116.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -103.0 -98.0 -93.0 -92.0 -89.0 -90.0 -89.0 -84.0 -83.0 -80.0 -81.0 -78.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -54.0 -52.0 -50.0 -45.0 -42.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -23.0 -22.0 -25.0 -18.0 -19.0 -14.0 -17.0 -14.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 8.0 4.0 4.0 8.0 8.0 8.0 115 -238.0 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -194.0 -195.0 -192.0 -189.0 -188.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -159.0 -156.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -129.0 -128.0 -123.0 -120.0 -119.0 -114.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -101.0 -96.0 -93.0 -92.0 -89.0 -90.0 -87.0 -84.0 -83.0 -80.0 -81.0 -76.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -56.0 -52.0 -51.0 -48.0 -43.0 -42.0 -43.0 -40.0 -33.0 -34.0 -31.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 2.0 5.0 8.0 4.0 6.0 8.0 8.0 116 -241.0 -240.0 -235.0 -234.0 -235.0 -230.0 -229.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -210.0 -205.0 -206.0 -201.0 -200.0 -199.0 -194.0 -195.0 -194.0 -191.0 -190.0 -187.0 -184.0 -179.0 -177.0 -180.0 -175.0 -174.0 -171.0 -170.0 -171.0 -166.0 -165.0 -160.0 -159.0 -158.0 -155.0 -154.0 -151.0 -150.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -126.0 -125.0 -122.0 -119.0 -116.0 -111.0 -112.0 -109.0 -110.0 -103.0 -104.0 -101.0 -98.0 -95.0 -94.0 -89.0 -90.0 -87.0 -84.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -55.0 -50.0 -49.0 -46.0 -43.0 -42.0 -41.0 -38.0 -31.0 -32.0 -29.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -11.0 -6.0 -5.0 -4.0 1.0 2.0 5.0 8.0 4.0 8.0 8.0 117 -242.0 -243.0 -238.0 -235.0 -236.0 -233.0 -228.0 -231.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -212.0 -205.0 -208.0 -203.0 -200.0 -201.0 -194.0 -193.0 -192.0 -191.0 -190.0 -188.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -169.0 -168.0 -163.0 -158.0 -159.0 -160.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -124.0 -123.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -108.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -87.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -66.0 -63.0 -57.0 -55.0 -55.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -38.0 -31.0 -30.0 -31.0 -30.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -12.0 -11.0 -4.0 -5.0 -4.0 3.0 0.0 5.0 10.0 6.0 10.0 118 -243.0 -242.0 -241.0 -238.0 -235.0 -236.0 -231.0 -228.0 -229.0 -224.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -201.0 -194.0 -191.0 -192.0 -189.0 -189.0 -186.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -167.0 -166.0 -163.0 -158.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -143.0 -142.0 -139.0 -136.0 -131.0 -130.0 -129.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -106.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -64.0 -62.0 -57.0 -54.0 -53.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -36.0 -31.0 -30.0 -31.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -5.0 -2.0 3.0 0.0 5.0 10.0 8.0 119 -246.0 -243.0 -242.0 -241.0 -238.0 -235.0 -234.0 -231.0 -228.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -215.0 -212.0 -209.0 -210.0 -205.0 -206.0 -203.0 -200.0 -199.0 -194.0 -191.0 -190.0 -188.0 -187.0 -186.0 -185.0 -181.0 -177.0 -178.0 -177.0 -172.0 -171.0 -170.0 -167.0 -164.0 -163.0 -158.0 -159.0 -156.0 -153.0 -152.0 -147.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -128.0 -127.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -112.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -95.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -79.0 -80.0 -77.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -63.0 -60.0 -57.0 -54.0 -51.0 -48.0 -49.0 -46.0 -43.0 -40.0 -37.0 -34.0 -31.0 -30.0 -29.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -3.0 -2.0 3.0 2.0 7.0 12.0 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-5.html"},{"title":"混合ガウス分布のEMアルゴリズム","text":"クラスタリング で省略した、混合ガウス分布のEMアルゴリズムの計算過程を記述します。 EMアルゴリズム 観測データ \\(\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) に対する対数尤度関数は、 \\((9.7)\\) から以下のように書けます。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ E step $$\\begin{aligned} p(z_{k}=1|\\mathbf{x}) &\\equiv \\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{p(\\mathbf{x})}\\qquad (\\because\\text{Bayes' theorem})\\\\ &\\propto p(z_{k}=1)p(\\mathbf{x}|z_{k}=1) \\\\ &=\\pi_k\\mathcal{N}(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ なので、総和が \\(1\\) になるように正規化を行えば 負担率 が以下のように求まります。 $$\\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) =\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13)$$ ※ なお、この時分母である \\(\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})\\) が \\(p(\\mathbf{x})\\) であることは有用です。 （ 生物データマイニング論 第1回 では、これを用いて可視化していました。） Maximization step ※ 対数尤度関数 \\((9.14)\\) を \\(\\ln L\\) と記述します。 \\(\\boldsymbol{\\mu}_k\\) 対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\mu}_k\\) で微分します。この時 正規分布は \\(e&#94;{\\text{hoge}}\\) という形をしており、微分しても形が変わらないので、 $$\\begin{aligned} \\frac{\\partial\\ln L}{\\partial\\boldsymbol{\\mu}_k} &= \\sum_{i=n}&#94;N \\frac{\\pi_k\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= \\boldsymbol{\\Sigma}_k&#94;{-1}\\sum_{n=1}&#94;N \\gamma_{nk}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= 0\\\\ \\therefore\\boldsymbol{\\mu}_k&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.17)\\\\ \\end{aligned}$$ と最適解が求まりました。 \\(\\pi_k\\) パラメータ \\(\\pi_k\\) については、 \\(\\sum_{k=1}&#94;K \\pi_k = 1\\) という制約に注意する必要があります。ですが、 隠れマルコフモデルの最尤推定 で行なった能登同様に、ラグランジュの未定乗数 \\(\\lambda\\) を導入すればこの問題は解けます。 $$L_{\\lambda} = \\log L + \\lambda\\left(\\sum_{c=1}&#94;K \\pi_c - 1\\right)$$ の導関数が \\(0\\) となる条件を求める事になるので、 $$\\begin{aligned} \\frac{\\partial L_{\\lambda}}{\\partial\\pi_k} &= \\sum_{n=1}&#94;N \\frac{\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_k \\pi_k \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)} + \\lambda\\\\ &= \\sum_{n=1}&#94;N \\frac{\\gamma_{nk}}{\\pi_k} + \\lambda = 0 &\\therefore \\pi_k = -\\frac{1}{\\lambda}\\sum_{n=1}&#94;N \\gamma_{ic}\\\\ \\frac{\\partial L_{\\lambda}}{\\partial\\lambda} &= \\sum_{k=1}&#94;K \\pi_k - 1\\\\ &= \\left(-\\frac{1}{\\lambda}\\sum_{k=1}&#94;K\\sum_{n=1}&#94;N \\gamma_{nk}\\right) - 1 = 0 &\\therefore \\lambda = -n \\end{aligned}$$ より、 $$\\pi_k&#94;{\\star} = \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} \\qquad(9.22)$$ と最適解が求まりました。 \\(\\boldsymbol{\\Sigma}_k\\) \\(\\boldsymbol{\\mu}_k\\) と同様に、対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\Sigma}_k\\) で微分します。すると、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\log L = \\sum_{n=1}&#94;N\\frac{\\pi_k\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}$$ となります。ここで、 \\(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\) を計算すると、 $$\\begin{aligned} &\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\biggr)\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\left(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\right)\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(-\\frac{1}{2}\\biggr)|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\quad (\\ast1)\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\frac{1}{2}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\quad (\\ast2)\\\\ =&-\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)+\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{1}{2}\\left\\{\\boldsymbol{\\Sigma}_k&#94;{-1}-\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\right\\}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ したがって、 $$ \\boldsymbol{\\Sigma}_k&#94;{\\star}= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.19) $$ と最適解が求まりました。 ※ \\(\\ast1,\\ast2\\) の式変形は以下でより詳細に説明します。 が、その前にいくつか基本事項の定義を振り返ります。 行列式 $$\\det A=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)\\prod_{i=1}&#94;na_{i\\sigma(i)}=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)a_{1\\sigma(1)}a_{2\\sigma(2)}\\cdots a_{n\\sigma(n)}$$ \\(\\sigma\\) は \\(1\\) から \\(n\\) の置換（順列）を表す。 \\(\\mathrm{sgn}(\\sigma)\\) は置換の符号を表す。なお、\b置換の符号は 互\b換の数 に注目しており、奇置換（互換の数が奇数個）なら \\(-1\\) 、偶置換なら \\(+1\\) \b\b 余韻子 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\(i\\) 行と \\(i\\) 列を \\(1\\) つずつ取り去って作られる小行列を \\(M_{ij}\\) とする。つまり、 $$ M_{ij} = \\small \\left[ \\begin{array}{ccc} a_{11} & \\cdots &a_{1\\hspace{1mm}j-1} & a_{1\\hspace{1mm}j+1} & \\cdots & a_{1n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{i-1 \\hspace{1mm} 1} & \\cdots &a_{i-1\\hspace{1mm}j-1} & a_{i-1\\hspace{1mm}j+1} & \\cdots & a_{i-1 \\hspace{1mm}n} \\\\ a_{i+1 \\hspace{1mm} 1} & \\cdots &a_{i+1\\hspace{1mm}j-1} & a_{i+1\\hspace{1mm}j+1} & \\cdots & a_{i+1 \\hspace{1mm}n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{n1} &\\cdots &a_{n\\hspace{1mm}j-1} & a_{n\\hspace{1mm}j+1} &\\cdots &a_{nn} \\end{array} \\right] $$ です。ここで、 \\(\\Delta_{ij}=(-1)&#94;{i+j}|M_{ij}|\\) とすると、以下の 余因子展開 ができます。 \\(A\\) の行列式は \\(j\\) 列に関して、以下のように展開されます。 $$\\det A=\\Delta_{1j}a_{1j}+\\Delta_{2j}a_{2j}+\\cdots+\\Delta_{nj}a_{nj}$$ \\(A\\) の行列式は \\(i\\) 行に関して、以下のように展開されます。 $$\\det A=\\Delta_{i1}a_{i1}+\\Delta_{i2}a_{i2}+\\cdots+\\Delta_{in}a_{in}$$ \b 余韻子行列 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\((i, j)\\) 余因子を \\((j, i)\\) 成分に持つ行列 $$\\tilde{A} := \\begin{pmatrix}&\\Delta_{11}&\\Delta_{21}&\\cdots&\\Delta_{n1}\\\\&\\Delta_{21}&\\Delta_{22}&\\ldots&\\Delta_{n2}\\\\&\\vdots&\\vdots&\\ddots&\\vdots\\\\&\\Delta_{n1}&\\Delta_{n2}&\\cdots&\\Delta_{nn}\\end{pmatrix}$$ を 余韻子行列 と呼びます。ここで、余韻子展開を考えれば、余韻子行列に関して、 $$\\tilde{A}A=A\\tilde{A}=\\det(A)I_n$$ が成り立つことがわかります。 \\(\\ast1\\) の変形 以上を踏まえると、 \\(\\frac{\\partial\\det(A)}{\\partial a_{ij}} = \\Delta_{ij}\\) なので、 $$\\frac{\\partial|\\Sigma|}{\\partial\\Sigma} =\\tilde\\Sigma = |\\Sigma|\\Sigma&#94;{-1}$$ が成り立ち、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}} =-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-\\frac{3}{2}}\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\boldsymbol{\\Sigma_k}=-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma_k}&#94;{-1}$$ となることがわかります。 トレースと固有値の関係性 【命題】 トレースには、 \\(Tr(A) = \\sum_{k=1}&#94;{n}\\lambda_{k}\\) という関係がある。 トレース： \\(n\\times n\\) の正方行列 \\(A\\) に対して、\b対角成分の和 \\(\\sum_{k=1}&#94;{n}a_{kk}\\) を \\(A\\) のトレースと呼び、 \\(\\mathrm{Tr}(A),\\mathrm{tr}A\\) \b と表す。 【証明】 まず、固有方程式は、 $$\\phi(t) = |A-tI| = \\left|\\begin{array}{cccc} a_{11}-t & a_{12} & \\ldots & a_{1n} \\\\ a_{21} & a_{22}-t & \\ldots & a_{2n} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_{n1} & a_{n2} & \\ldots & a_{nn}-t \\end{array} \\right|$$ である。ここで、 \\(t\\) の係数に着目する。 \\(t&#94;n\\) の係数 これは、対角成分を全て掛け合わせた次の多項式 $$(a_{11}-t)(a_{22}-t)\\ldots(a_{nn}-t)$$ における \\(t&#94;n\\) の係数と等しくなる。よって、係数は「 \\((-1)&#94;n\\) 」 \\(t&#94;{n-1}\\) の係数 これも\b、先ほどの多項式の \\(t&#94;{n-1}\\) の係数と等しくなる。（ \\(\\because\\) 余韻子展開を考える。 \\(\\sigma\\) が全単射のため、１行（列）対角成分ではないものがあると、\b少なくともあと１つは体格成分でないものがあることがわかる。） 定数項 これは、\b余韻子展開を考えれば \\(|A|\\) そのもの。 よって、係数は「 \\((-1)&#94;{n-1}(a_{11}+a_{22}+\\ldots+a_{nn})\\) 」であり、これは対角和を用いて「 $(-1)&#94;{n-1}\\mathrm{Tr}(A) $ 」とも書ける。 一方先ほどの固有方程式は固有値を解に持つ。 つまり、 \\(A\\) の固有値を \\(\\lambda_1\\) 〜 \\(\\lambda_n\\) として、 $$\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)$$ とかける。（ \\((-1)&#94;n\\) によって、 \\(t&#94;n\\) の係数を合わせている。） この式を展開すると、 \\(t&#94;{n-1}\\) の係数が「 \\((-1)&#94;{n-1}(\\lambda_1+\\lambda_2+\\ldots+\\lambda_n)\\) 」であることから $$\\mathrm{Tr}(A) = \\lambda_1+\\lambda_2+\\ldots+\\lambda_n$$ ※ちなみに、 \\(\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)\\) の定数項を考えることで、 $$|A| = \\lambda_1\\lambda_2\\ldots\\lambda_n$$ であることもわかる。 トレースの循環性 \\(A\\) を \\(m \\times n\\) 、 \\(B\\) を \\(n \\times m\\) の行列とすると、 \\(AB\\) は \\(m \\times m\\) の行列であり、 $$ \\begin{aligned} \\mathrm{Tr}[AB]&= \\sum_{i=1}&#94;{m} (AB)_{ii} \\\\&= \\sum_{i=1}&#94;{m}\\sum_{j=1}&#94;{n} A_{ij}B_{ji} \\\\&= \\sum_{j=1}&#94;{n} \\sum_{i=1}&#94;{m} B_{ji} A_{ij} \\\\&= \\sum_{j=1}&#94;{n} (BA)_{jj} \\\\&= \\mathrm{Tr}[BA] \\end{aligned} $$ となる。これを応用すれば、以下の 循環性 が証明できる。 \\(A,B,C\\) をそれぞれ \\(m\\times n,n \\times l,l \\times m\\) の行列とするとき、 $$\\begin{aligned} \\mathrm{Tr}[ABC] =& \\mathrm{Tr}[BCA] \\\\=& \\mathrm{Tr}[CAB] \\end{aligned} $$ が成り立つ。（ \\(\\because\\) ２つの\b行列積をセットで考えれば明らか） 逆行列の微分 正則行列 \\(A\\) に対して、 \\(A&#94;{-1}A=I\\) が成立するので、\bこの等式の両辺を \\(A\\) で微分して、 $$\\begin{aligned} \\biggr(\\frac{\\partial }{\\partial A}A&#94;{-1}\\biggl)A + A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl) = 0\\\\ \\biggr(\\frac{\\partial A&#94;{-1}}{\\partial A}\\biggl) = -A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl)A&#94;{-1} \\end{aligned}$$ シングルエントリ行列 \\((i,j)\\) 成分のみが \\(1\\) で、残りが全て \\(0\\) の行列 \\(\\mathbf{J}&#94;{ij}\\) を シングルエントリ行列 と呼ぶ。なお、\b以下の式が成り立つ。 $$\\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{ij}\\bigl)=\\mathbf{A}_{ji}$$ \b \\(2 \\times 2\\) の行列でこれを示す。 $$\\begin{aligned} \\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{12}\\bigl)&=\\mathrm{Tr}\\biggr(\\begin{pmatrix}a_{11}&a_{12}\\\\a_{21}&a_{22}\\end{pmatrix}\\begin{pmatrix}0&1\\\\0&0\\end{pmatrix}\\biggl)\\\\ &=\\mathrm{Tr}\\begin{pmatrix}0&a_{11}\\\\0&a_{21}\\end{pmatrix}\\\\ &=a_{21}\\\\ &=\\mathbf{A}_{21} \\end{aligned}$$ \\(\\ast2\\) の変形 以上を踏まえれば、 $$\\begin{aligned} \\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu}) &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr((\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\biggl)\\\\ &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\frac{\\partial\\boldsymbol{\\Sigma}}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\biggl)\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ji}\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ij}\\\\ \\end{aligned}$$ よって、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})=-\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html"},{"title":"クラスタリング","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 講義の方針 データ解析アルゴリズムは、生物学の研究に不可欠 R や python のパッケージとして、すぐダウンロードして使うことができる。 しかし、原理を知らずに使うと、アルゴリズムの出す結果を盲信することになり危険。 正しい理解：結果を疑えるようになること。 階層的クラスタリング クラスタリング データ点を クラスタ（互いに類似したグループ） に分割する。 距離尺度：ユークリッド距離、コサイン距離など。 階層的クラスタリング 最初は各点がクラスタとなる。 二つのクラスタを選んで合併していく。 Single Link ：二つのクラスタをまたぐ最近点の距離 chaining により、ゆるいクラスタができる （非推奨） Complete Link ：二つのクラスタをまたぐ最遠点の距離 最も固いクラスタができるが、細かく分け過ぎる傾向がある。 Average Link ：二つのクラスタをまたぐ点対の平均距離 最もバランスがとれており、通常はこれを用いる。 最後は一つのクラスタになる。 デンドログラム ：合併の過程を樹形図の形で表したもの。 K-Means 分割的クラスタリング の一手法。$K$ クラスにデータ点を分割する。 以下を繰り返す。 各データ点 $\\mathbf{x}$ を最も近い中心点 $\\mu_k$ に割り当てて、クラスタ $c_1,\\ldots,c_K$ を作成する。 割当を元に中心点を計算しなおす。 $$\\mu_k = \\sum_{j\\in C_i} \\mathbf{x}_j$$ 実装 In [1]: import numpy as np import matplotlib.pyplot as plt Data. In [2]: np . random . seed ( 0 ) In [3]: N = 30 ; K = 5 vmin = 0 ; vmax = 1 In [4]: # Training Data. data = np . random . uniform ( vmin , vmax , ( N , 2 )) x , y = data . T In [5]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [6]: # Background Color Xs , Ys = np . meshgrid ( np . linspace ( vmin , vmax , 100 ), np . linspace ( vmin , vmax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.KMeans.KMeans ） を使って学習させます。 In [7]: from kerasy.ML.KMeans import KMeans In [8]: model = KMeans ( K = K , random_state = 0 ) In [9]: model . fit ( data ) Visualization. In [10]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [11]: # For Visualization. plt_model = KMeans ( K = K ) In [12]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( idx , mu ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Plot Representative points(µk) of each class. mux , muy = mu . T ax . scatter ( mux , muy , marker = 'x' , c = \"red\" , s = 200 ) # Background. plt_model . mu = mu Z , _ = plt_model . predict ( XYs ) Zs = Z . reshape ( Xs . shape ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( vmin , vmax ) ax . set_ylim ( vmin , vmax ) ax . set_title ( f \"Iteration. {i:>02} \" ) plt . show () 混合ガウス分布 混合ガウス分布は、次のように混合係数 $\\pi_k$ でガウス分布を線形重ね合わせした形でかける。 $$p(\\mathbf{x}) = \\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\qquad (9.7)$$ ここで、 二値ベクトル（1-of-K符号化法） $\\mathbf{z}$ の周辺分布は、$0\\leq\\pi_k\\leq1$ と $\\sum_{k=1}&#94;K\\pi_k = 1 $ を満たす $\\pi_k$ を用いて、 $$p\\left(\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\pi_k&#94;{z_k}\\qquad (9.9)$$ と書ける。また、$\\mathbf{z}$ が与えられた時の $\\mathbf{x}$ の事後分布は当然ながら次のガウス分布である。 $$p\\left(\\mathbf{x}|\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)&#94;{z_k}\\qquad(9.11)$$ EMアルゴリズム 観測データ $\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}$ に対する対数尤度関数は、$(9.7)$ から以下のように書ける。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ Expectation step M stepで必要となる $\\gamma(z_{nk})$ を求める。 この値は、$\\mathbf{x}$ が与えられた下での $\\mathbf{z}$ の条件付き確率であり、混合要素 $k$ が $\\mathbf{x}$ の観測を 「説明する」 度合いを表す 負担率(responsibility) として解釈することもできる。 $$ \\begin{aligned} \\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) &=\\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{\\sum_{j=1}&#94;{K}p(z_{j}=1)p(\\mathbf{x}|z_{j}=1)}\\\\ &=\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13) \\end{aligned} $$ Maximization step M stepでは、尤度関数を最大化するように各パラメータの値を更新する。 ※ 導出過程は 混合ガウス分布のEMアルゴリズム に載せています。 $$ \\begin{aligned} \\boldsymbol{\\mu}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.17)\\\\ \\boldsymbol{\\Sigma}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.19)\\\\ \\pi_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} & (9.22) \\end{aligned} $$ 実装 Data. In [13]: np . random . seed ( 0 ) In [14]: N = 150 ; K = 3 In [15]: # Train Data. data = np . concatenate ([ np . random . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 0 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [16]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [17]: # Background Color xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.MixedDistribution.MixedGaussian ） を使って学習させます。 In [18]: from kerasy.ML.MixedDistribution import MixedGaussian In [19]: model = MixedGaussian ( K = K , random_state = 1234 ) In [20]: model . fit ( data , span = 20 ) Visualization. In [21]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [22]: # For Visualization. plt_model = MixedGaussian ( K = K ) plt_model . N , plt_model . M = data . shape In [23]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( epoch , idx , mu , S , pi ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Background. plt_model . mu = mu plt_model . S = S plt_model . pi = pi Z = plt_model . predict ( XYs ) Zs = np . sum ( Z , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( xmin , xmax ) ax . set_ylim ( ymin , ymax ) ax . set_title ( f \" {epoch:>02} epochs.\" ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html"},{"title":"イントロダクション","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 講義予定 前半（山崎担当） 画像の操作 画像の特徴抽出・内容理解・構造化 機械学習一般 後半（相澤担当） 画像を撮る：カメラの内部処理・センサ・レンズ・標本化 画像を表現する。色の知覚・表現 画像の基礎的な処理。周波数変換、線形・非線形フィルタリング # 日付 担当 内容 1 9/30(月) 山崎 画像・映像を中心とした現在の技術動向の紹介、低次・領域・局所画像特徴 2 10/7(月) 山崎 特徴選択、特徴表現 3 10/21(月) 山崎 機械学習概論、教師なし学習、クラスタリング 4 10/28(月) 山崎 機械学習 (NN, SVM, RF) 5 11/7(木) 山崎 深層学習 (Deep Neural Networks) 6 11/11(月) 山崎 動画像処理 (ブロックマッチング、背景差分、オプティカルフロー) 7 11/13(水) 山崎 3次元空間情報の取得と処理 8 11/18(月) 相澤 デジタルカメラ系 9 11/25(月) 相澤 表色系 10 12/9(月) 相澤 フィルタリング・画像復元 11 12/16(月) 相澤 特徴抽出 12 12/23(月) 相澤 画像符号化 13 1/@@ テスト パターン認識一般 現在は、90%位が 学習ベース(data-driven) 。残りが解析的手法。最近はこのhybridも。 全体的な流れ 学習(training) 検証(validation)←パラメータ最適化 推論(test, inference) なぜ今 学習ベース なのか？ データの大規模化：インターネット上から大量に収集可。 計算機の進化：ムーアの法則による高速化。さらにはクラウド 労働力のクラウド化 画像特徴 低次特徴量 色ヒストグラム（RGB,HSV,L*a*b*）：単純計算すると \\(256&#94;3\\) 個binができるので、注意。 色共起ヒストグラム（Correlogram）：隣接ピクセルの色を踏まえたヒストグラム 円、コーナー直線の数・大きさ・長さ 物体の円度、曲率等 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html"},{"title":"matplotlibチートシート","text":"In [1]: import numpy as np import matplotlib.pyplot as plt $N$ 枚の画像を plot Vsize , Hsize = () # 画像の横の長さと縦の長さ。 n_fig = \"画像の枚数\" n_col = \"横に並ぶ数\" n_row = n_fig // n_col + 1 if n_fig % n_col != 0 else n_fig // n_col # 行数を計算。 fig = plt . figure ( figsize = ( Vsize * n_col , Hsize * n_row )) for i , hoge in enumerate ( HOGEs ): ax = fig . add_subplot ( row , col , i + 1 ) \"\"\" 描きたいオブジェクトをプロット \"\"\" plt . tight_layout () plt . show () gifの画像の作成 上のようにやって全ての画像をまとめた一枚の画像を出力しても良いが、 n_fig = \"画像の枚数\" digit = len ( str ( N )) for i , hoge in enumerate ( HOGEs ): ax = fig . add_subplot ( row , col , i + 1 ) plt . figure ( figsize = \"サイズ\" ) \"\"\" 描きたいオブジェクトをプロット \"\"\" plt . savefig ( f \"img{i:>0{digit}}.png\" ) として連番の画像を作成し、それを以下のプログラムでgif画像にした方が見やすい場合もある from PIL import Image N = 30 digit = len ( str ( N )) images = [] for i in range ( N ): img = Image . open ( f \"{i:>0{digit}}.png\" ) images . append ( img ) images [ 0 ] . save ( 'out.gif' , save_all = True , append_images = images [ 1 :], loop = 0 , duration = 300 ) # loop=0: 無限ループ # duration: 一枚あたりの表示時間[ms] cmaps In [2]: cmaps = [ 'Accent' , 'Blues' , 'BrBG' , 'BuGn' , 'BuPu' , 'CMRmap' , 'Dark2' , 'GnBu' , 'Greens' , 'Greys' , 'OrRd' , 'Oranges' , 'PRGn' , 'Paired' , 'Pastel1' , 'Pastel2' , 'PiYG' , 'PuBu' , 'PuBuGn' , 'PuOr' , 'PuRd' , 'Purples' , 'RdBu' , 'RdGy' , 'RdPu' , 'RdYlBu' , 'RdYlGn' , 'Reds' , 'Set1' , 'Set2' , 'Set3' , 'Spectral' , 'Wistia' , 'YlGn' , 'YlGnBu' , 'YlOrBr' , 'YlOrRd' , 'afmhot' , 'autumn' , 'binary' , 'bone' , 'brg' , 'bwr' , 'cividis' , 'cool' , 'coolwarm' , 'copper' , 'cubehelix' , 'flag' , 'gist_earth' , 'gist_gray' , 'gist_heat' , 'gist_ncar' , 'gist_rainbow' , 'gist_stern' , 'gist_yarg' , 'gnuplot' , 'gnuplot2' , 'gray' , 'hot' , 'hsv' , 'inferno' , 'jet' , 'magma' , 'nipy_spectral' , 'ocean' , 'pink' , 'plasma' , 'prism' , 'rainbow' , 'seismic' , 'spring' , 'summer' , 'tab10' , 'tab20' , 'tab20b' , 'tab20c' , 'terrain' , 'viridis' , 'winter' ] In [3]: matrix = np . arange ( 100 ) . reshape ( 10 , 10 ) In [4]: Vsize , Hsize = ( 4 , 4 ) n_fig = len ( cmaps ) n_col = 4 n_row = n_fig // n_col + 1 if n_fig % n_col != 0 else n_fig//n_col In [5]: fig = plt . figure ( figsize = ( Vsize * n_col , Hsize * n_row )) for i , cmap in enumerate ( cmaps ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) ax . matshow ( matrix , cmap = cmap ) ax . set_title ( f \"↓ {cmap} ↓\" , fontsize = 24 ), ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-0.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-0.html"},{"title":"生物物理学 第1回","text":"講師： 能瀬聡直 講義資料： 生物物理学 参考書： 神経科学 -脳の探求- 参考書： ニューロンの生物物理 講義概要 生物物理学とは 遺伝情報の流れ 蛋白質の構造と機能 細胞内タンパク質のダイナミックス 遺伝子操作技術 ゲノム科学とバイオインフォマティックス バイオイメージング、生体分子計測 脳・神経系の生物物理 講義日程 # 日付 担当 1 9/25 能瀬 2 10/2 樋口 3 10/9 樋口 4 10/16 樋口 5 10/23 樋口 6 10/30 樋口 7 11/6 樋口 8 11/20 能瀬 9 11/27 能瀬 10 12/4 樋口 11 12/11 能瀬 12 12/18 能瀬 13 1/8 能瀬 14 1/15 能瀬 生物物理学とは？ 物理の手法で生物を見る。 生体分子の機能や構造の研究。 対象は広範囲、ただし物理的理念を背景にもつ。 生体高分子の構造・機能、脳・神経機構など単なる記述中心の従来の生物学と異なり、論理的な思考法を用い、より普遍的な原理を見いだすことを目指している。 生物物理の代表的発見 DNA二重螺旋構造の発見（1953年、1962年ノーベル生理医学賞） 蛋白質の高次構造の解析（1960年、1962年ノーベル化学賞） 神経活動のイオン機構の解明（1953年、1963年ノーベル生理医学賞） 最近の技術革新 ヒトゲノム計画 ヒトの全遺伝子の設計図解読の終了（2000年） イメージング技術 蛍光蛋白質・レーザー顕微鏡（1990年代） 1分子観測・1分子操作 溶液中での蛋白質1分子の観察（1990年代） 神経回路の作動原理の解明に向けた従来の3つのアプローチ 解剖学(Anatomy) 神経の配線を明らかにする。 生理学(Physiology) 神経活動を測定・操作する。 理論 神経活動パターンから原理を抽出 Part1. Introduction 脳神経系における情報の流れ ニューロンの構成 脳とコンピューター 半導体 ↔︎ 半導体素子 ↔︎ 集積回路 ↔︎ コンピューター 分子 ↔︎ 神経細胞 グリア細胞 ↔︎ 神経回路 ↔︎ 脳 活動電位の特徴 全か無か： \\(\\mathrm{Na}\\) チャネル活性化に閾値がある。 一過性： \\(\\mathrm{Na}\\) チャネル不活性化 確実に伝播 一体、どのような構造を持った神経回路の中を、どのように信号が伝わることで特定の演算が創発されるのか。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html"},{"title":"HMMをpythonで実装","text":"（kerasy.ML.HMM.HMM） の使い方 自作のモジュール （kerasy.ML.HMM.HMM） を使って実装をします。 In [1]: from kerasy.ML.HMM import HMM In [2]: model = HMM () In [3]: # 以下のようなパラメタファイルを読み込む。 ! cat params.json { \"M\": 4, \"K\": 4, \"basetypes\": [\"a\", \"c\", \"g\", \"u\"], \"pi\": [0.7, 0.1, 0.1, 0.1], \"A\": [[0.8, 0.1, 0.1, 0.0], [0.0, 0.8, 0.1, 0.1], [0.1, 0.0, 0.8, 0.1], [0.1, 0.0, 0.1, 0.8]], \"phi\": [[0.4, 0.1, 0.1, 0.4], [0.25, 0.25, 0.25, 0.25], [0.1, 0.4, 0.4, 0.1], [0.3, 0.2, 0.2, 0.3]] } In [4]: model . load_params ( \"params.json\" ) In [5]: # インスタンスに読み込まれた各種パラメータ model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 In [6]: # なお、この時以下のような辞書を同時に作成しています。 print ( model . base2int ) print ( model . int2base ) {'a': 0, 'c': 1, 'g': 2, 'u': 3} {0: 'a', 1: 'c', 2: 'g', 3: 'u'} In [7]: # また、パラメータはnumpyの行列の形で読み込まれています。 print ( type ( model . pi )) print ( type ( model . A )) print ( type ( model . phi )) In [8]: # 以下のようにすれば、学習したパラメタを同じ形式で出力することができます。 model . save_params ( \"out.json\" ) Viterbi algorithm HMMのViterbiアルゴリズムを実装して、尤もらしいサンプル配列の隠れ状態列を推定します。 In [9]: from kerasy.utils.bio import alignStr , readMonoSeq , readMultiSeq # ファイルの中身 cat seq1.fasta ``` sample-RNA gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc ``` In [10]: # ファイルの読み込み seq1 = readMonoSeq ( 'seq1.fasta' ) print ( f \"Input Sequence: \\n {alignStr(seq1[0])}\" ) Input Sequence: gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc In [11]: # この時、文字列をリストに格納しています。 print ( type ( seq1 )) In [12]: pred1 = model . predict ( sequences = seq1 , asai = True ) In [13]: # 変数asaiは、隠れ状態がZero-based numberingかどうかを決めるものであり、特に意味はありません。（課題の形式に対応したものがasai=True.） print ( f \"Hidden Indexes: \\n {alignStr(pred1[0])}\" ) Hidden Indexesn [14]: # もちろんパラメタの更新は行われていません。 model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 Baum-Welch algorithm HMMのBaum-Welchアルゴリズムを実装して、モデルを学習させてます。 In [15]: model = HMM () model . load_params ( \"params2.json\" ) model . params () # 文字が \"acgu\"→\"ACGT\"に変わっただけです。 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.4000 0.2500 0.1000 0.3000 C 0.1000 0.2500 0.4000 0.2000 G 0.1000 0.2500 0.4000 0.2000 T 0.4000 0.2500 0.1000 0.3000 cat seq2.txt ``` >Vitis_vinifera_chr14.trna15-AlaAGC (28776087-28776159) Ala (AGC) 73 bp Sc: 68.12 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAGGTACGGGGATCGATA CCCCGCATCTCCA >Vitis_vinifera_chr13.trna5-ArgCCG (2691241-2691313) Arg (CCG) 73 bp Sc: 83.85 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAGGTCGTGGGTTCGAAT CCCACTGCGATCG >Vitis_vinifera_chr3.trna6-GlnCTG (5807449-5807520) Gln (CTG) 72 bp Sc: 71.93 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTAACCCGAGTTCAAATC TCGGTGGGACCT >Vitis_vinifera_chr14.trna19-LeuAAG (25640120-25640040) Leu (AAG) 81 bp Sc: 62.71 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTGTCCGAAAGGGCGTGG GTTCAAATCCCACTCTCCACA >Vitis_vinifera_chr18.trna9-MetCAT (2896034-2896118) Met (CAT) 85 bp Sc: 60.66 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCGAGTAATCCTGAGGTC GAGAGTTCGAGCCTCTCTCACCCCA >Vitis_vinifera_chr3.trna30-ProTGG (7498415-7498344) Pro (TGG) 72 bp Sc: 68.98 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGGTCCCGAGTTCGATTC TCGGAATGACCC >Vitis_vinifera_chr5.trna13-GluTTC (21745120-21745048) Glu (TTC) 73 bp Sc: 36.67 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTGGTCGTGGGTTCGAGC CCTATTGGTGGTT >Vitis_vinifera_chr5.trna3-TyrGTA (7422575-7422666) Tyr (GTA) 92 bp Sc: 33.68 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTGACCCAATAGATATCC TTAGGTCGTTAGTTTGAATCCAACAGGTCTAA >Vitis_vinifera_chr1.trna8-ValCAC (11396083-11396156) Val (CAC) 74 bp Sc: 66.86 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGAGGTCCCTAGTTCGAA CCCAGGCTCAGATA >Vitis_vinifera_chr14.trna2-SerTGA (4021381-4021462) Ser (TGA) 82 bp Sc: 80.82 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTGGGCTTCGCCCGCGCA GGTTCGAACCCTGCTGTCGACG ``` In [16]: seq2 = readMultiSeq ( 'seq2.txt' ) In [17]: for i , seq in enumerate ( seq2 ): print ( f \"No. {i:>02} \\n {alignStr(seq, width=45)}\" ) No.00 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAG GTACGGGGATCGATACCCCGCATCTCCA No.01 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAG GTCGTGGGTTCGAATCCCACTGCGATCG No.02 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTA ACCCGAGTTCAAATCTCGGTGGGACCT No.03 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTG TCCGAAAGGGCGTGGGTTCAAATCCCACTCTCCACA No.04 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCG AGTAATCCTGAGGTCGAGAGTTCGAGCCTCTCTCACCCCA No.05 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGG TCCCGAGTTCGATTCTCGGAATGACCC No.06 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTG GTCGTGGGTTCGAGCCCTATTGGTGGTT No.07 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTG ACCCAATAGATATCCTTAGGTCGTTAGTTTGAATCCAACAGGTCT AA No.08 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGA GGTCCCTAGTTCGAACCCAGGCTCAGATA No.09 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTG GGCTTCGCCCGCGCAGGTTCGAACCCTGCTGTCGACG In [18]: # 学習させる。 model . fit ( sequences = seq2 , epochs = 2000 , verbose = False ) In [19]: import matplotlib.pyplot as plt In [20]: def plotHistory ( model ): \"\"\" 学習の過程をプロットする関数 \"\"\" plt . plot ( model . history ) plt . title ( f \"Mean Log Likelihood Transition (eoochs= {model.epoch} )\" ) plt . xlabel ( \"epochs\" ) plt . ylabel ( \"Mean Log Likelihood\" ) plt . show () In [21]: plotHistory ( model ) In [22]: model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.1024 0.0000 0.8976 0.0000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.2819 0.7181 0.0000 0.0000 z(2) 0.0000 0.5670 0.0000 0.4330 z(3) 0.0521 0.0000 0.3415 0.6064 z(4) 0.5158 0.0000 0.0000 0.4842 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.3436 0.3099 0.1059 0.0055 C 0.2538 0.0592 0.0970 0.4297 G 0.4026 0.4418 0.7971 0.0345 T 0.0000 0.1891 0.0000 0.5304 ※ 隠れ状態ごとにかなり偏った遷移を行なう。 また、 遷移行列の対角成分がそこまで大きい値では無い。 → 特定の構造が、 ある程度の長さのゆとりを持って 繰り返されていると予想される。 In [23]: pred2 = model . predict ( sequences = seq2 , asai = True ) In [24]: for i , pred in enumerate ( pred2 ): print ( f \"No. {i:>02} Hidden Indexes: \\n {alignStr(pred, width=45)}\" ) No.00 Hidden Indexes: 333334122244412241241222224412444124122412222 2411222224412224441241244441 No.01 Hidden Indexes: 334411241241222412241241124412244441224441222 2412412244412244412441122441 No.02 Hidden Indexes: 334441241244412412441222412412244441224441241 244412244412244441241222444 No.03 Hidden Indexes: 341222241244122441244412222244122441222444441 244122222241222244412244412444441241 No.04 Hidden Indexes: 333341241241122441244124112412244412412444441 2241244441222441222244412244444441244441 No.05 Hidden Indexes: 333412441244412412412224444124444122224122222 444412244412444441222412444 No.06 Hidden Indexes: 334441241244412441244122411222244444124444122 2412412244412244441241241244 No.07 Hidden Indexes: 341244441244412441241222412222241241241222441 244412412241244441224124412444122444124122444 12 No.08 Hidden Indexes: 344412241241222441244124112441244412411244122 22444441244412244412244412241 No.09 Hidden Indexes: 344124122444122412441222222412244412224441241 2244412444112412244412244441122441241 補足：上記プログラムにバグがないかの確認 Baum-Welchアルゴリズムが正しく実装できていたか、極端な配列を学習させることで確認します。 In [25]: model = HMM () model . load_params ( \"params3.json\" ) model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 0.7000 0.1000 0.2000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.8000 0.1000 0.1000 z(2) 0.1000 0.8000 0.1000 z(3) 0.1000 0.1000 0.1000 ------------------------------ *emission probability z(1) z(2) z(3) A 0.4000 0.2500 0.1000 C 0.1000 0.2500 0.4000 G 0.1000 0.2500 0.4000 T 0.4000 0.2500 0.1000 In [26]: seq_extreme = readMonoSeq ( 'seq3.txt' ) In [27]: # かなり極端な配列の例で実装してみる。 print ( f \"Input Sequence: \\n {alignStr(seq_extreme[0])}\" ) Input Sequence: TCTTTTTCCTCCTCTCTCCTTTCCCTCTTTTCCCTTCTTCTCTCCCTTTTCCTTCTCTTC TCTCTTTTCTTCCCCTTTTCCTTTTCTCCTCCCTCCCTTTCTTCCCTCCTTCCTCCCCCC CTCCCCTTTCCTTCCTTTCTCCTTCTCCCCATATGGCCATTTACTTCAGCTGATAGACAC CGAGTAACAACAATAAAGCGTTAGGTGGACGAATGCTCTACTCTGACCTCTAGCTTGTGG GTTCGCGGCTTGCCGAACGCTGGCCTCTGCCCGTCGAACCAATAAATGTTTATCCAGGAC ACCCCGTTCTTTGGTGATATCCCTCGCTCGAGTTATAGCATTGAAACCTCCATATCCGGC GATAAGAGCTACGGACCGTATACTGGGCGCCGGTAATTGGTTGCACTCGCCCTCGGTCTT TTTCTTTTTGGTTTAGCAGAGCAAGGCGTGGAAAAGGAGAGAGGGAGAAAAGGGAAAGGG AAAAGAGGAGAAGAAAGAAAAAGGAAGGGGGGAAGAGGAGAGAAGGGAAGGGAAGGGGGA GAAAGAGGGAAAGAGGAGAAAAAAGGAGGGGGAAGAAGGAAGGGGGAAAGGGGGGGAAAG 上の配列は、以下の構造を持っていることがわかります。 index type 1~150 pyrimidine base 151~450 both 451~600 purine base In [28]: model . fit ( sequences = seq_extreme , epochs = 100 , verbose = False ) In [29]: plotHistory ( model ) In [30]: model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 1.0000 0.0000 0.0000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.9933 0.0000 0.0067 z(2) 0.0000 1.0000 0.0000 z(3) 0.0000 0.0033 0.9967 ------------------------------ *emission probability z(1) z(2) z(3) A 0.0000 0.4851 0.2199 C 0.5034 0.0000 0.2627 G 0.0000 0.5149 0.2415 T 0.4966 0.0000 0.2760 In [31]: pred_extreme = model . predict ( sequences = seq_extreme ) In [32]: print ( f \"Hidden Indexes: \\n {alignStr(pred_extreme[0])}\" ) Hidden Indexes: 111111111111111111111111111111111111111111111111111111111111 111111111111111111111111111111111111111111111111111111111111 111111111111111111111111111111333333333333333333333333333333 333333333333333333333333333333333333333333333333333333333333 333333333333333333333333333333333333333333333333333333333333 333333333333333333333333333333333333333333333333333333333333 333333333333333333333333333333333333333333333333333333333333 333333333333333333333333333332222222222222222222222222222222 222222222222222222222222222222222222222222222222222222222222 222222222222222222222222222222222222222222222222222222222222 うまく傾向をつかんでいることから、学習アルゴリズムに大きな誤りはなさそうです。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-4.html"},{"title":"生物統計論 第1回","text":"講師： 木立尚孝 講義概要 09/27 (Fri) 10:25-12:10 10/04 (Fri) 10:25-12:10 10/11 (Fri) 10:25-12:10 10/18 (Fri) 10:25-12:10 10/25 (Fri) 10:25-12:10 11/08 (Fri) 10:25-12:10 11/15 (Fri) 10:25-11:30(Lecture) / 11:30-12:10: (Test) Section1.1 STATISTICAL ANALYSIS Genomic data has recently become available, so the analyzing methods still its infancy at the century scale. It is very important how much information can be extracted from genomic and other omic data. Data-driven Research Development of measurement, communication, computing technologies. data science, e-science Statistics, computer skill, artificial intelligence, machine learning. Statistical Analysis Subjects and measurements are often conclude the random events , such as noise. Aiming for finding the \"True\" distribution, and inferencing on that distribution. Power of Statistical Methods Amount of information we can extract \"Many and high\" / \"Few or low\" quality Event infinite number of data cannot answer all questions. ex) we couldn't answer \"what is the number of eyes on the next dice.\" Data dependency. Section1.2 PROBABILITY DEFINITIONS Probability: Mathematical Probability: The probability of an event consisting of n out of m possible equally likely occurrences, defined to be n / m Statistical Probability: Each event is random, but if you repeat it a lot, you can see the probability that each event occurs. Subjective Probability: A type of probability derived from an individual's personal judgment or own experience about whether a specific outcome is likely to occur. ※ Mathematical Probability is the most strict and basic. Probability space \\(\\left(\\Omega, E, P\\right)\\) $$\\begin{aligned}&\\Omega: \\text{Set, Samplemspace}\\\\&E: \\text{Events,}\\sigma\\text{-algebra}\\\\&P: \\text{Probability measure}\\end{aligned}$$ Sample Space The sets of elementary events. ex.) The number of eyes on the dice. All possible genomes. All possible gene expression profiles \\(\\omega_i\\in\\Omega\\) is the identifier of possible individual stochastic phenomena. \\(\\sigma\\) -algebra $$ \\begin{aligned} &\\varepsilon= \\left\\{E_1,E_2,\\cdots|E_i\\subseteq\\Omega:\\text{event}:\\sigma\\text{-algebra} \\right\\}\\\\ &\\Rightarrow \\varnothing,\\Omega,\\left(E_i\\setminus E_j\\right),\\left(\\bigcup_{i=1}&#94;{\\infty}E_i\\right),\\left(\\bigcap_{i=1}&#94;{\\infty}E_i\\right)\\in\\varepsilon \\end{aligned} $$ The sets of Events. Each event \\(E_i\\subseteq\\Omega\\) Include Empty set \\(\\varnothing\\) , universal set \\(\\Omega\\) Closure to variable \"Set Operation\". (ex. Union, intersection, complement) example) discrete set Real set Power set Borel set \\(\\mathcal{A}\\) Probability measure $$\\begin{aligned}&\\mathbb{P} : \\mathcal{E} \\rightarrow \\mathbb{R} \\\\& 0 \\leq \\mathbb{P}(E) \\leq 1, E \\in \\mathcal{E} \\\\&\\mathbb{P}(\\Omega)=1, \\mathbb{P}(\\varnothing)=0 \\\\&\\text { For } E_{1}, E_{2}, \\cdots \\in \\mathcal{E}, \\text{ s.t. } E_{i} \\cap E_{j}=\\varnothing, \\forall i \\neq j \\\\&\\mathbb{P}\\left(\\bigcup_{i=1}&#94;{\\infty} E_{i}\\right)=\\sum_{i=1}&#94;{\\infty} \\mathbb{P}\\left(E_{i}\\right)\\end{aligned}$$ Each event is assigned a value that indicates the likelihood or probability of occurrence. Random variable $$\\begin{aligned}X: &\\text{random variable}\\\\\\Leftrightarrow &X : \\Omega \\rightarrow \\mathbb{R} \\\\ &\\text { s.t. } X&#94;{-1}(A) \\in \\mathcal{E}, \\forall A \\in \\mathcal{A} \\\\&X&#94;{-1}(A) :=\\{\\omega \\in \\Omega \\mid X(\\omega) \\in A\\}\\end{aligned}$$ Section1.3 PROBABILITY TERMS AND PROPERTIES Probability distribution function \\(F_x\\) (cumulative distribution) Probability density function \\(f_x\\) $$F_x\\left(x+dx\\right)-F_x\\left(x\\right)=:f_x(x)dx$$ Conditional Probability Joint Probability distribution $$(X,Y): \\Omega\\rightarrow\\mathbb{R}&#94;2; (X,Y)(\\omega) = \\left(X(\\omega),Y(\\omega)\\right)\\\\\\left(X,Y\\right)&#94;{-1}(A) = \\left\\{\\omega\\in\\Omega|\\left(X(\\omega),Y(\\omega)\\right)\\in A\\right\\}$$ Independent random variables Expected Value Variance Covariance: $$\\begin{cases}X,Y: \\text{independent random variables}\\Rightarrow \\mathrm{Cov}(X,Y) = 0\\\\X,Y: \\text{independent random variables}\\not\\Leftarrow \\mathrm{Cov}(X,Y) = 0 \\end{cases}$$ Indicator Function: $$\\mathbb{I}_A(x)=\\begin{cases}1 & x\\in A\\\\0 & x\\notin A\\end{cases},A\\in\\mathcal{A}$$ Marginalization Section1.4 PROBABILITY DISTRIBUTIONS Look Here!! if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html"},{"title":"生物統計論 第0回","text":"Section1.4 PROBABILITY DISTRIBUTIONS In [1]: import numpy as np import collections import matplotlib.pyplot as plt In [2]: N = 100000 Bernoulli Distribution In [3]: def BernoulliVar ( q , N , seed = None ): rng = np . random . RandomState ( seed ) if seed is not None else np . random return np . var ( rng . rand ( N ) < q ) In [4]: qs = np . linspace ( 0 , 1 , 1000 ) In [5]: probs = [ BernoulliVar ( q , N ) for q in qs ] In [6]: plt . title ( \"Bernoulli distribution\" ) plt . plot ( qs , probs , label = \"$Var(X)$\" ) plt . xlabel ( \"q\" ) plt . ylabel ( \"$Var(X)$\" ) plt . legend () plt . show () Binomial Distribution In [7]: def BinomialProb ( n , p , N , seed = None , color = None , ax = None ): if ax == None : fig , ax = plt . subplots () rng = np . random . RandomState ( seed ) if seed is not None else np . random counter = collections . Counter ( rng . binomial ( n , p , N )) count , freqs = zip ( * sorted ( counter . most_common ())) probs = [ freq / N for freq in freqs ] ax . plot ( count , probs , color = color , label = f \"p= {p} and n= {n} \" ) ax . scatter ( count , probs , color = color ) return ax In [8]: ax = BinomialProb ( 20 , 0.5 , N , seed = 0 , color = \"blue\" ) ax = BinomialProb ( 20 , 0.7 , N , seed = 0 , color = \"green\" , ax = ax ) ax = BinomialProb ( 40 , 0.5 , N , seed = 0 , color = \"red\" , ax = ax ) plt . legend () plt . show () Normal Distribution In [9]: from scipy import stats In [10]: def NormalProb ( mu , sigma ): X = np . arange ( mu - 3.5 * sigma , mu + 3.5 * sigma , sigma / 50 ) Y = stats . norm . pdf ( X , mu , sigma ) for i in np . arange ( - 3 , 4 , 1 ): idx = np . argmin ( abs ( X - ( mu + i * sigma ))) plt . plot ([ X [ idx ], X [ idx ]], [ 0 , Y [ idx ]], 'k-' ) plt . scatter ( X [ idx ], Y [ idx ], color = \"black\" ) plt . plot ( X , Y , color = \"black\" ) In [11]: NormalProb ( mu = 0 , sigma = 0.1 ) Multivariate Normal Distribution In [12]: from scipy.stats import multivariate_normal In [13]: x , y = np . mgrid [ - 3 : 3.5 : . 01 , - 3 : 3 : . 01 ] pos = np . dstack (( x , y )) rv = multivariate_normal ([ 0.5 , - 0.2 ], [[ 2.0 , 2.3 ], [ 0.3 , 0.8 ]]) plt . contourf ( x , y , rv . pdf ( pos )) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html"},{"title":"HMMのスケーリング","text":"HMMを実装する際に課題となるのが、forward-algorithm で \\(\\alpha\\) を再帰的に求める際に、 \\(\\alpha\\left(\\mathbf{z}_{n-1}\\right)\\) に \\(p(\\mathbf{z}_n|\\mathbf{z}_{n-1})\\) と \\(p(\\mathbf{x}_n|\\mathbf{z}_n)\\) をかけるため、値が非常に小さくなり、計算機の ダイナミックレンジ を超えてしまうことです。 そこで、ここでは \\(\\alpha\\left(\\mathbf{z}_{n}\\right)\\) と \\(\\beta\\left(\\mathbf{z}_{n}\\right)\\) にスケーリングを施し、それらの値が \\(1\\) のオーダーに止まるようにする手法を説明します。 forward-backward \\(\\alpha,\\beta\\) forward-backward algorithm で用いられていた \\(\\alpha,\\beta\\) は以下のように定義されていました。 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ Scaling factors まず、スケーリングされた \\(\\alpha,\\beta\\) は以下のように表されます。スケーリングによって、 \\(\\alpha\\) は高々 \\(K\\) 個の変数上の確率分布 、 \\(\\beta\\) は2つの条件付き確率の比 になることがわかります。 $$ \\begin{aligned} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.55)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\frac{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)}=\\frac{\\beta\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.61) \\end{aligned} $$ ここで、これらと \\(\\alpha,\\beta\\) を関連付けるためのスケーリング係数 \\(c\\) を導入します。 $$ c_{n}=p\\left(\\mathbf{x}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}\\right)\\qquad (13.56) $$ すると、 $$ \\begin{aligned} p\\left(\\mathbf{x}_1,\\ldots,\\mathbf{x}_n\\right) &= p\\left(\\mathbf{x}_n | \\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\cdots p\\left(\\mathbf{x}_3 | \\mathbf{x}_1,\\mathbf{x}_{2}\\right)p\\left(\\mathbf{x}_2 | \\mathbf{x}_1\\right)p(\\mathbf{x}_1)\\\\ &= c_n\\cdots c_3c_2c_1\\\\ &= \\prod_{m=1}&#94;{n} c_{m} \\end{aligned}\\qquad (13.58) $$ と展開することができるので、 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\left(\\prod_{m=1}&#94;{n} c_{m}\\right) \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) & (13.58)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)\\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) = \\left(\\prod_{m=n+1}&#94;{N} c_{m}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.60) \\end{aligned} $$ と対応関係がわかります。 \\(\\gamma,\\xi\\) 続いて、 \\(\\gamma,\\xi\\) と \\(\\widehat{\\alpha},\\widehat{\\beta}\\) の対応関係を求めます。 \\(\\alpha,\\beta\\) \\(\\alpha,\\beta\\) を用いると、以下のように表されていました。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} &(13.43) \\end{aligned}$$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) 先の対応関係を用いれば、 \\(\\widehat{\\alpha},\\widehat{\\beta}\\) を用いると、 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=\\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.64)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\left(c_{n}\\right)&#94;{-1} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.65) \\end{aligned} $$ と表されることがわかります。 Recursion 最後に、再帰式の対応関係も求めます。 \\(\\alpha,\\beta\\) $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) $$ \\begin{aligned} c_{n} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.58)\\\\ \\widehat{\\alpha}\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{z}_{1}| \\mathbf{x}_{1}\\right)=\\frac{p\\left(\\mathbf{z}_{1}\\right)p\\left(\\mathbf{x}_{1}| \\mathbf{z}_{1}\\right)}{p\\left(\\mathbf{x}_{1}\\right)} = \\frac{\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}}}{p\\left(\\mathbf{x}_{1}\\right)}\\\\ c_{n+1} \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\widehat{\\beta}\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) &(13.62)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)}{\\widehat{\\alpha}\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)}{p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} = 1 & (13.30) \\end{aligned} $$ なお、ここで \\((13.58)\\) でどのようにして \\(c_n\\) を求めるかですが、 $$ \\begin{aligned} \\mathrm{R.H.S}\\ (13.58) &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}}p\\left(\\mathbf{z}_{n-1}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\\\ &=p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) \\end{aligned} $$ となることから、 \\((13.58)\\) の右辺を \\(\\mathbf{z}_n\\) について周辺化すれば、 $$\\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = p\\left(\\mathbf{x}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = c_n$$ となるので、 \\(c_n\\) が求められることがわかります。 おまけ（尤度関数） 尤度関数はスケーリング係数 \\(c\\) を用いるだけで簡単に求められることがわかります。 $$p(\\mathbf{X})=\\prod_{n=1}&#94;{N} c_{n}\\qquad (13.63)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-3.html"},{"title":"HMMの最尤推定の計算過程","text":"ここでは、 HMMの最尤推定 で省略した計算過程について記述します。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) $$ \\begin{aligned} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})&=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10)\\\\ &=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\left[ \\prod_{n=2}&#94;{N}\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}} \\right] \\prod_{m=1}&#94;{N}\\prod_{i=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{i k}&#94;{x_{ni} z_{nk}}\\\\ \\therefore\\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta}) &=\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k\\left[\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk}\\right]\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;Kx_{ni}z_{nk}\\ln\\phi_{ik} \\end{aligned} $$ であるから、これを \\((13.12)\\) に代入して、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=&\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12)\\\\ =& \\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;Kx_{ni}z_{nk}\\ln\\phi_{ik} \\end{aligned} $$ ここで、 \\(\\sum_{\\mathbf{Z}} = \\sum_{\\mathbf{z_1},\\mathbf{z_2},\\ldots,\\mathbf{z_N}}\\) なので、それぞれ 関係の無い部分を周辺化 でき、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\sum_{\\mathbf{z_1}} p\\left(\\mathbf{z_1} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{1k}\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\sum_{\\mathbf{z_{n-1},z_n}}p\\left(\\mathbf{z_{n-1},z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;K\\sum_{\\mathbf{z_n}}p\\left(\\mathbf{z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)x_{ni}z_{nk}\\ln\\phi_{ik}\\\\ \\end{aligned}$$ となります。また、 \\(\\gamma,\\xi\\) の定義 を用いることで $$\\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_1}} \\gamma\\left(\\mathbf{z}_1\\right)z_{1k}\\right)\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\left(\\sum_{\\mathbf{z_{n-1},z_n}}\\xi\\left(\\mathbf{z_{n-1},z_{n}}\\right) z_{n-1,j}z_{nk}\\right)\\ln A_{jk}\\\\ &+\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_n}}\\gamma\\left(\\mathbf{z}_n\\right)x_{ni}z_{nk}\\right)\\ln\\phi_{ik} \\end{aligned} $$ と書き直せます。この時、潜在変数が離散なので、 \\(\\gamma,\\xi\\) はそれぞれ和が \\(1\\) となる \\(K,\\left(K\\times K\\right)\\) 個の非負の数の集合を用いて以下のように記述できます。 $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ したがって、これらを用いて上記の式を書き直すと、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} \\end{aligned}\\qquad (13.17) $$ Maximization step ここでは、上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) 関数を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化する際の ラグランジュの未定乗数法 を書き下します。 \\(\\boldsymbol{\\pi}\\) $$ \\begin{aligned} L\\left(\\boldsymbol{\\pi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) &= \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k} + \\lambda_1\\left(\\sum_{k=1}&#94;K\\pi_k - 1\\right)\\\\ \\frac{\\partial L}{\\partial \\pi_k}&=\\frac{\\gamma\\left(z_{1 k}\\right)}{\\pi_k} + \\lambda_1 = 0\\quad \\therefore \\pi_k = -\\frac{\\gamma\\left(z_{1 k}\\right)}{\\lambda_1}\\\\ \\frac{\\partial L}{\\partial \\lambda_1}&=\\sum_{k=1}&#94;K\\pi_k - 1 = 0\\quad \\therefore\\lambda_1 = -\\sum_{k=1}&#94;K\\gamma\\left(z_{1 k}\\right)\\\\ \\therefore\\pi_k&#94;{\\star} &= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} \\end{aligned} $$ \\(\\boldsymbol{A}\\) $$\\begin{aligned} L\\left(\\boldsymbol{A},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} + \\sum_{j=1}&#94;K\\lambda_{2,j}\\left(\\sum_{k=1}&#94;K A_{jk} - 1\\right)\\\\ \\frac{\\partial L}{\\partial A_{jk}} &= \\sum_{n=2}&#94;{N}\\frac{\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{A_{jk}} + \\lambda_{2,j} = 0\\quad \\therefore A_{jk} = -\\frac{\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\lambda_{2,j}}\\\\ \\frac{\\partial L}{\\partial \\lambda_{2,j}} &= \\sum_{k=1}&#94;K A_{jk} - 1 = 0\\quad \\therefore \\lambda_{2,j} = -\\sum_{k=1}&#94;K\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)\\\\ \\therefore A_{jk}&#94;{\\star}&=\\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\end{aligned}$$ \\(\\boldsymbol{\\phi}\\) $$\\begin{aligned} L\\left(\\boldsymbol{\\phi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} + \\sum_{k=1}&#94;K\\lambda_{3,k}\\left( \\sum_{i=1}&#94;D\\phi_{ik} - 1\\right)\\\\ \\frac{\\partial L}{\\partial\\phi_{ik}} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\phi_{ik}} + \\lambda_{3,k}=0\\quad \\therefore \\phi_{ik} = -\\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\lambda_{3,k}}\\\\ \\frac{\\partial L}{\\partial\\lambda_{3,k}} &= \\sum_{i=1}&#94;D\\phi_{ik} - 1 = 0 \\quad \\therefore \\lambda_{3,k} = -\\sum_{i=1}&#94;D\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni} = -\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)\\\\ \\therefore \\phi_{ik}&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)} \\end{aligned}$$ Expectation step $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14)\\\\ \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35)\\\\ \\end{aligned} $$ forward-algorithm \\((\\alpha)\\) $$\\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha(\\mathbf{z}_{n-1})p(\\mathbf{z} | \\mathbf{z}_{n-1})\\\\ \\end{aligned}$$ backward-algorithm \\((\\beta)\\) $$\\begin{aligned} \\beta\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N}, \\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}, \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+2}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} \\beta(\\mathbf{z}_{n+1})p(\\mathbf{x}_{n+1}|\\mathbf{z}_{n+1})p(\\mathbf{z}_{n+1}|\\mathbf{z}_n)\\qquad (13.38) \\end{aligned}$$ \\(\\gamma,\\xi\\) $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$\\begin{aligned} \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}\\right) \\\\ &=\\frac{p(\\mathbf{X} | \\mathbf{z}_{n-1}, \\mathbf{z}_{n}) p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{Bayes' theorem})\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{x}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43) \\end{aligned}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-2.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-2.html"},{"title":"HMMの最尤推定","text":"※ かなり導出部分を省略しています。導出は適宜 HMMの最尤推定の計算過程 を参照してください。 隠れマルコフモデルは、一般に以下の式で表されます。 $$ p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10) $$ \\(\\mathbf{X} = \\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) : \\(\\mathbf{Z} = \\{\\mathbf{z}_1,\\ldots,\\mathbf{z}_N\\}\\) \\(\\boldsymbol{\\theta}=\\{\\boldsymbol{\\pi}, \\mathbf{A}, \\boldsymbol{\\phi}\\}\\) ※ 一般に放出確率 \\(p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\boldsymbol{\\phi}\\right)\\) は、 二値のベクトル \\(\\mathbf{z}_n\\) の \\(K\\) 個の可能な状態に対応した \\(K\\) 個の要素を持つベクトルからなる任意の分布 $$ p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\phi\\right)=\\prod_{k=1}&#94;{K} p\\left(\\mathbf{x}_{n} | \\phi_{k}\\right)&#94;{z_{n k}}\\qquad (13.9) $$ を考えることも可能ですが、今回は下記の離散多項分布を考えます。 Name Probability Conditional Distribution initial state \\(\\pi_{k} \\equiv p\\left(z_{1 k}=1\\right)\\) \\(p\\left(\\mathbf{z}_{1} \\mid \\boldsymbol{\\pi}\\right)=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\quad (13.8)\\) transition probability \\(A_{j k} \\equiv p\\left(z_{n k}=1\\mid z_{n-1, j}=1\\right)\\) \\(p\\left(\\mathbf{z}_{n} \\mid \\mathbf{z}_{n-1}, \\mathbf{A}\\right)=\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}}\\quad (13.7)\\) emission probability \\(\\phi_{i k}\\equiv p\\left(x_{n i}=1 \\mid z_{n k}=1\\right)\\) \\(p(\\mathbf{x}_n \\mid \\mathbf{z}_n, \\boldsymbol{\\phi})=\\prod_{i=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{i k}&#94;{x_{ni} z_{nk}}\\quad (13.22)\\) 尤度関数 ここで、データ集合 \\(\\mathbf{X}\\) が観測された際に、上記の同時分布を潜在変数 \\(\\mathbf{Z}\\) について周辺化することで、尤度関数は以下のように記述されます。 $$ p(\\mathbf{X} | \\boldsymbol{\\theta})=\\sum_{\\mathbf{Z}} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.11) $$ しかし、この尤度関数は \\(n\\) について分解できない（ \\(\\mathbf{z}_n\\) ）ごとに和を取れないので、 条件付き独立 の性質を活かして 尤度関数の対数の期待値 を最大化する Baum-Welch algorithm (EM algorithm) を用います。 Baum-Welch (EM) パラメータ \\(\\boldsymbol{\\theta}&#94;{\\text {old }}\\) を用いて \\(p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化する。 対数尤度関数の期待値 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を求める。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化するパラメータに更新する。 \\(\\boldsymbol{\\theta}\\rightarrow\\boldsymbol{\\theta}&#94;{\\text {old }}\\) 1に戻る。 $$ Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12) $$ ここで、表記を簡単にするために、 γ 、 ξ を導入します。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14) \\end{aligned} $$ なお、潜在変数が離散なので、以下のように記述し直せます。（ \\(\\pi_{k},A_{j k},\\phi_{j k}\\) と同様。） $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ これらを用いると、 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) が以下のように書き下せます。 （計算過程） $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} \\end{aligned}\\qquad (13.17) $$ Maximization step ※ 実際の計算の順番からは前後しますが、先にM stepを説明します。 上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化するのは（別ブロックに別れているから）簡単で、それぞれ 適当なラグランジュ乗数を導入する ことで、以下のように求まります。 （計算過程） $$ \\begin{aligned} \\pi_{k}&= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} & (13.18)\\\\ A_{j k}&= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} & (13.19)\\\\ \\phi_{i k}&=\\frac{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right) x_{n i}}{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right)} & (13.23) \\end{aligned} $$ Expectation step M step で必要となる \\(\\gamma,\\xi\\) は、 条件付き独立性 を用いることで効率的に計算することができます。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ 条件付き独立性を用いてそれぞれ変形すると、以下の再帰式を導くことができます。 （計算過程） $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ ※ なお、ここで \\(\\alpha\\) の再起式を forward-algorithm 、 \\(\\beta\\) の再起式を backward-algorithm と呼ぶことがあります。 また、これらを用いて \\(\\xi\\) を記述することもでき、以下のように表せます。 （計算過程） $$\\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ 以上でBaum-Welchに必要な計算式が求まりました。 おまけ（尤度関数） 尤度関数は、アルゴリズムの停止条件に用いられるなど、値を求めることが非常に有用です。 求める際は、 $$ \\gamma\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad (13.33) $$ の両辺を \\(\\mathbf{z}_n\\) について周辺化すれば、左辺は $$\\sum_{\\mathbf{z}_{n}} \\gamma\\left(\\mathbf{z}_{n}\\right) = \\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right) = 1$$ となることが明らかなので、以下のように求まります。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{n}} \\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)\\qquad (13.41)$$ また、上記の式は任意の \\(n\\) について成立するので、 \\(n=N\\) の場合を考えれば \\(\\alpha\\) のみを用いて求めることができます。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{N}} \\alpha\\left(\\mathbf{z}_{N}\\right)\\qquad (13.42)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-1.html"},{"title":"Numpyの行列計算チートシート","text":"はじめに 様々なアルゴリズムを実装する際に漸化式は出るけど実装時にうまくいかない。ということは良くあります。また、 Python を使って実装する場合、そのほとんどが行列の取り扱いです。 （柔軟であるが故にエラーを吐かずに動いてしまう…笑） そこで、まずは行列計算のチートシートを作成します。（随時加筆修正していきます。） 目次 基本事項 内積（行列積） 外積 In [1]: import numpy as np 基本事項 In [2]: N = 3 A = np . arange ( N ) B = np . arange ( N ) . reshape ( - 1 , N ) # np.expand_dims(A, axis=0), A[None,:] C = np . arange ( N ) . reshape ( N , - 1 ) # np.expand_dims(A, axis=1), A[:,None] D = np . arange ( N * N ) . reshape ( N , N ) In [3]: print ( f \"A = {A} \" ) print ( f \"B = {B} \" ) print ( f \"C = {C} \" ) print ( f \"D = {D} \" ) A = [0 1 2] B = [[0 1 2]] C = [[0] [1] [2]] D = [[0 1 2] [3 4 5] [6 7 8]] In [4]: print ( f \"A.shape = {A.shape} \" ) print ( f \"B.shape = {B.shape} \" ) print ( f \"C.shape = {C.shape} \" ) print ( f \"D.shape = {D.shape} \" ) A.shape = (3,) B.shape = (1, 3) C.shape = (3, 1) D.shape = (3, 3) In [5]: print ( f \"A.ndim = {A.ndim} \" ) print ( f \"B.ndim = {B.ndim} \" ) print ( f \"C.ndim = {C.ndim} \" ) print ( f \"D.ndim = {D.ndim} \" ) A.ndim = 1 B.ndim = 2 C.ndim = 2 D.ndim = 2 ndim ex. scalar $(0)$ 1 , 2 ,... vector $1$ A matrix $\\geq2$ B , C , D 内積（行列積） vector & scalar / matrix & scalar スカラーが絡むと、各要素とスカラーの積となる。 shape の変化はない。 どちらから掛けてもエラーは起こらない。 In [6]: print ( f \"np.dot(A,2) = {np.dot(A,2)}\" ) # vector & scalar print ( f \"np.dot(B,2) = {np.dot(B,2)}\" ) # matrix & scalar print ( f \"np.dot(C,2) = {np.dot(C,2)}\" ) # matrix & scalar print ( f \"np.dot(D,2) = {np.dot(D,2)}\" ) # matrix & scalar np.dot(A,2) = [0 2 4] np.dot(B,2) = [[0 2 4]] np.dot(C,2) = [[0] [2] [4]] np.dot(D,2) = [[ 0 2 4] [ 6 8 10] [12 14 16]] vector & vector 内積となる。 結果はスカラーとなる。 shape が異なると、エラーが起きる。 In [7]: print ( f \"np.dot(A,A) = {np.dot(A,A)}\" ) # vector & vector np.dot(A,A) = 5 In [8]: np . dot ( A , np . arange ( N - 1 )) # shape=(3,) & shape=(2,) ValueError : shapes (3,) and (2,) not aligned: 3 (dim 0) != 2 (dim 0) vector & matrix 行列積となる。 ベクトルは、位置によって変換のされ方が異なる。 左がベクトルの場合： np.dot((x,) (y,z)) = np.dot((1,x) (y,z)) 右がベクトルの場合： np.dot((y,z) (x,)) = np.dot((y,z) (x,1)) 行列積であるので、結果の shape は np.dot((x,y) (y,z)) = (x,z) となる。 上で y が異なるとエラーが生じる。 In [9]: print ( np . dot ( A , B )) # np.dot((3,)(1,3)) print ( np . dot ( A , C )) # np.dot((3,)(3,1)) print ( np . dot ( B , A )) # np.dot((1,3)(3,)) print ( np . dot ( C , A )) # np.dot((3,1)(3,)) ValueError : shapes (3,) and (1,3) not aligned: 3 (dim 0) != 3 (dim 0) [5] [5] ValueError : shapes (3,1) and (3,) not aligned: 1 (dim 1) != 3 (dim 0) matrix & matrix c = np.dot(a,b) a.shape=(a1,a2,...,aN,X) b.shape=(b1,b2,...,X,bM) c.shape=(a1,a2,...,aN,b1,b2,...,bM) c[i1,i2,...,iN,j1,j2,...,jM] == a[i1,i2,...,iM,:].dot(b[j1,j2,...,jM-1,:,jM]) In [10]: import itertools def checkNPdot ( shape1 , shape2 ): \"\"\" 計算可能なshapeの関係を列挙する。 \"\"\" a = np . arange ( np . prod ( shape1 )) b = np . arange ( np . prod ( shape2 )) for comb1 in itertools . permutations ( shape1 , len ( shape1 )): for comb2 in itertools . permutations ( shape2 , len ( shape2 )): try : print ( f \" {comb1} .dot( {comb2} ) = {(a.reshape(comb1).dot(b.reshape(comb2))).shape}\" ) except : pass 以下で具体的に見ていく！ np.dot(2D, 3D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,X,k) c.shape=(i,j,k) c[i,j,k] == a[i,:].dot(b[j,:,k]) In [11]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) c = np . dot ( a , b ) In [12]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3) b.shape = (2, 3, 4) np.dot(a,b).shape = (2, 2, 4) In [13]: I , J , K = c . shape In [14]: np . all ([ c [ i , j , k ] == a [ i ,:] . dot ( b [ j ,:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[14]: True np.dot(3D,2D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(X,k) c.shape=(i,j,k) c[i,j,k] == a[i,j,:].dot(b[:,k]) In [15]: a = np . arange ( 24 ) . reshape ( 4 , 2 , 3 ) b = np . arange ( 6 ) . reshape ( 3 , 2 ) c = np . dot ( a , b ) In [16]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (4, 2, 3) b.shape = (3, 2) np.dot(a,b).shape = (4, 2, 2) In [17]: I , J , K = c . shape In [18]: np . all ([ c [ i , j , k ] == a [ i , j ,:] . dot ( b [:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[18]: True np.dot(3D,3D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) In [19]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 60 ) . reshape ( 3 , 4 , 5 ) c = np . dot ( a , b ) In [20]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4) b.shape = (3, 4, 5) np.dot(a,b).shape = (2, 3, 3, 5) In [21]: I , J , K , L = c . shape In [22]: np . all ([ c [ i , j , k , l ] == a [ i , j ,:] . dot ( b [ k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[22]: True np.dot(2D,4D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,:].dot(b[j,k,:,l]) In [23]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 120 ) . reshape ( 2 , 4 , 3 , 5 ) c = np . dot ( a , b ) In [24]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) # c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) a.shape = (2, 3) b.shape = (2, 4, 3, 5) np.dot(a,b).shape = (2, 2, 4, 5) In [25]: I , J , K , L = c . shape In [26]: np . all ([ c [ i , j , k , l ] == a [ i ,:] . dot ( b [ j , k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[26]: True np.dot(3D,4D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,l,X,m) c.shape=(i,j,k,l,m) c[i,j,k,l,m] == a[i,j,:].dot(b[k,l,:,m]) In [27]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 360 ) . reshape ( 3 , 5 , 4 , 6 ) c = np . dot ( a , b ) In [28]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4) b.shape = (3, 5, 4, 6) np.dot(a,b).shape = (2, 3, 3, 5, 6) In [29]: I , J , K , L , M = c . shape In [30]: np . all ([ c [ i , j , k , l , m ] == a [ i , j ,:] . dot ( b [ k , l ,:, m ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M )]) Out[30]: True np.dot(4D,4D) c = np.dot(a,b) a.shape=(i,j,k,X) b.shape=(l,m,X,n) c.shape=(i,j,k,l,m,n) c[i,j,k,l,m,n] == a[i,j,k,:].dot(b[l,m,:,n]) In [31]: a = np . arange ( 120 ) . reshape ( 2 , 3 , 4 , 5 ) b = np . arange ( 360 ) . reshape ( 3 , 4 , 5 , 6 ) c = np . dot ( a , b ) In [32]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4, 5) b.shape = (3, 4, 5, 6) np.dot(a,b).shape = (2, 3, 4, 3, 4, 6) In [33]: I , J , K , L , M , N = c . shape In [34]: np . all ([ c [ i , j , k , l , m , n ] == a [ i , j , k ,:] . dot ( b [ l , m ,:, n ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M ) for n in range ( N )]) Out[34]: True 外積 c = np.outer(a,b) c[i][j] = a.reshape(-1,)[i]*b.reshape(-1,)[j] In [35]: c = np . outer ( a , b ) In [36]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) a.shape = (a1,a2,...,aN) b.shape = (b1,b2,...,bM) In [37]: Na = np . prod ( a . shape ) Nb = np . prod ( b . shape ) In [38]: print ( f \"Na = {Na} \" ) print ( f \"Nb = {Nb} \" ) Na = a1*a2*・・・*aN Nb = b1*b2*・・・*bM In [39]: print ( c . shape ) (Na, Nb) In [40]: np . all ([ c [ i ][ j ] == a . reshape ( - 1 ,)[ i ] * b . reshape ( - 1 ,)[ j ] for i in range ( Na ) for j in range ( Nb )]) Out[40]: True In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-0.html"},{"title":"分子生命科学Ⅲ 第1回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 講義概要 この授業最大の目的は、 「将来僕らが脳を対象とすることになった時に敷居を低くする」 こと。 # タイトル 内容 日付 1 神経系の構造と機能 中枢神経系の構造・機能 末梢神経系の構造・機能 9/26,10/3 2 感覚神経系 感覚系の構成 体性感覚系 視覚系（末梢視覚系・平衡感覚系） 聴覚と平衡感覚（聴覚系・平衡感覚系） 化学感覚系（嗅覚系・味覚系） 10/10,17,24,31 3 運動系 脊髄による運動制御 脳による運動制御 11/14,21 4 脳と行動の化学的制御 11/28 5 摂食行動 12/12 6 脳のリズムと睡眠 脳波 睡眠 概日リズム 12/19 7 精神疾患 統合失調症 感情障害 不安障害 12/26 8 神経変性疾患 アルツハイマー病 パーキンソン病 ALS 1/9 神経系の構造と機能（１） 神経系の機能的構成 神経系は、 感覚系 、 統合系 、 運動系 の３つに分けることができる。 感覚系は、感覚器で何かを感じると、 陽イオン が神経細胞の末端に流れ込み、 活動電位 が上がり、電気的なシグナルとして 中枢神経系(CNS)特に、大脳皮質の感覚野 にこの入力を伝える。 運動系は、逆向きで、脳の運動野からのシグナルが 末梢神経系 に伝わる。 神経系の構成成分 ニューロン(神経細胞,neuron) グリア細胞(glial cells) 血管(blood vessels) ニューロン(neuron) 極性のある細胞で、 細胞体(cell body or soma) 、 樹状突起(dendrites) 、 軸索(axon) からなり、（ほとんどの場合） 活動電位(action potential) を発生する。 膝蓋腱反射(knee-jerk reflex) ニューロンがどのように神経回路に含まれているか、を示す良い例。 医師が膝蓋骨の下の腱を軽く叩くと、大腿四頭筋が伸ばされ、その信号が脊髄まで伝わる。この信号が脊髄で 運動ニューロン に直結しており、運動ニューロンが発火して少し離れた部分の筋肉を収縮させる。その反動で足が上がる。 グリア細胞(glia cells) グリア細胞はニューロン（ヒトでは \\(1\\) - \\(2\\times10&#94;{11}\\) 個）の \\(3\\) - \\(10\\) 倍（マウスだと同数程度）存在し、脳の体積の約半分を占める。 長い軸索と興奮性膜を特徴とするニューロンに対して、グリア細胞の突起は細胞体の周辺に留まり、活動電位を発生しない。 ニューロンの生存や発達、機能発言のための液性環境維持と代謝的支援、神経伝達の調節等を行なっている。 と、ニューロンの補助的な役割だと今までは考えられていたが、最近ではもっと積極的な意味があるのでは無いかと研究されている。 中枢神経系のグリア細胞が下の4種からなる。 アストロサイト(astrocyte)（アストログリア、星状膠細胞） オリゴデンドロサイト(oligodendrocyte)（オリゴデンドログリア、稀突起膠細胞） 上衣細胞(ependymal cell) ミクログリア(microglia)（小膠細胞） アストロサイト(astrocyte)の機能 血液脳関門 を形成してがんが脳に転移しないように防御したりしている。 神経伝達物質の最取り込み（神経伝達物質が出てすぐに取り込まないと、麻薬や覚せい剤のような影響が出てしまう。）。 オリゴデンドロサイト(oligodendrocyte) 中枢神経系 において、 髄鞘（ミエリン・myelin） を形成する。（ 末梢 では シュワン細胞 が髄鞘を形成する。） 上衣細胞(ependymal cells) ミクログリア(microglia) 上衣細胞は脳室と脊髄中心管を覆う一層の上皮性細胞で、脳を脳脊髄液から遮断する（脳脊髄液脳関門(cerebro-spinal fluid brain barrier)） ミクログリアは損傷に際して活性化する脳内の免疫性細胞で貪食能を持つ。アストログリア、オリゴデンドロサイト、上衣細胞が 外胚葉 由来なのに対し、ミクログリアは 中胚葉 由来である。 脳の構造 哺乳動物の脳は、ほぼ共通の構造を持っている。ヒトの特徴は、 連合野 が広いということである。 解剖学用語 解剖学用語 解剖学的切断面 神経系の構成 中枢神経系(CNS: central nervous system) 脳(brain) 大脳(cerebrum) 小脳(cerebellum) 脳幹(brain stem) 脊髄(spinal cord) 末梢神経系(PNS: peripheral nervous system) 体性神経系(somatic nervous system) 脳神経(cranial nerve) 脊髄神経(spinal nerve) 自律神経系(autonomic nervous system) 小脳(cerebellum) 脳幹（延髄・橋・中脳・間脳）の背後に位置する。 大脳や脊髄と広範な連絡を持つ運動制御中枢 言語や思考などの高次脳機能に関与 小脳の 同 側の身体の運動に関与 脳幹(brain stem) 間脳→中脳→橋→延髄からなり、上方で間脳に、下方で脊髄に連なる（狭義では間脳を含めない）。 大脳から脊髄・小脳への情報、逆に脊髄・小脳から大脳への情報を中継 呼吸、意識、体温調節等の生命維持機能を制御 （大脳・小脳の損傷では生存できるが、脳幹の損傷は通常早急な死に至る） 錐体交叉 脳の運動ニューロンの軸索が延髄の後ろで一旦交叉（ 錐体交叉 ）して反対側にいっているから、反対側の機能がうまく制限できなくなる。 一方で 小脳 は同側なので、そのようなことは起こらない。 脊髄(spinal cord) 脊髄は脊柱管にあり、延髄に続いて錐体交叉下端より始まり、脊髄円錐にて終わる。 皮膚・関節・筋肉から脳への情報、逆に脳からの情報を伝える主経路 末梢神経の脊髄神経で身体と通ずる。 脊髄に入る情報を運ぶ軸索は 後根(dorsal root) に含まれ、脊髄から出ていく情報を運ぶ軸索は 前根(ventral root) に含まれる。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html"}]};