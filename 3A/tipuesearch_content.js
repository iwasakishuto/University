var tipuesearch = {"pages":[{"title":"3次元空間情報の取得と処理","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 大きく分けて2種類ある。 アクティブ法 ：光やレーザーなど、エネルギーを当てて反応を観測。 パッシブ法 ：カメラなど、エネルギーを放出しないもののみを使う。 アクティブ法 手法 説明 特徴 time-of-flight法(ToF) 光を照射して戻るまでの時間から算出。直接は計算できないので、変調をかけて位相差等から計算する。 （計算可能な範囲が指定されるのはこの為。） 高精度だが、時間がかかる。そのため、動物体に弱い。 XBox2(Microsoft)のKinect2というコントローラや自動運転用のLIDARなどで使われている。 スリット光照射法 線状のレーザー光等を照射し、線の歪みから計算する。（→ エポピーラ幾何学 p.312 を参照） Structured light 法 細かさの異なる市松模様（チェッカーボードパターン）や、パターンが既知のランダムドット等を照射し、位置ずれから計算 XBoxのKinectで使われていた。 パッシブ法 手法 説明 ステレオ法 複数のカメラを用いて、見え方の違いから奥行推定 平行ステレオ法 近くのものは大きくズレ、遠くのものはズレない。正確には 以下 照度差ステレオ法 複数の見え方があれば良いので、カメラを1台にして照明を変化させても良い。詳細は 以下 Shape-from-motion(SfM) 首里城プロジェクトや \"Building Roma in a Day\" などで使用されている。詳細は 以下 ) 平行ステレオ法 物体の3次位置：$(X,Y,Z)$ 2カメラの距離：$b$ それぞれのカメラで点 $(X,Y,Z)$ が見えている画素位置 $(u,v),(u&#94;{\\prime},v&#94;{\\prime})$ イメージセンサのピクセル間隔：$\\delta$（縦・横とも） カメラの焦点距離：$f$ 画像面と光軸の交点が画像座標原点 このとき、視差（$=u-v$）がわかると、奥行き情報 $Z$ がわかる。なお、視差は ブロックマッチング法 等で見つける。 照度差ステレオ法 最も簡単な反射モデル （均等拡散反射のみ。鏡面反射なし。） で行う。 $$\\text{Lambert model: }I_x\\left(\\text{Brightness}\\right)=\\rho L\\mathbf{n}\\cdot\\mathbf{S} = \\rho L \\cos\\theta$$ $\\rho, \\mathbf{S},L$ は予め知ることができる。 未知なのは、$\\mathbf{n} = \\left(n_x,n_y,n_z\\right)$ の3変数のみ。（$n_z = \\sqrt{1-\\left(n_x&#94;2+n_y&#94;2\\right)}$ とすると2変数） 2~3通りの位置から観測すると、$\\mathbf{n}$ がわかる。 通常は20~100の位置に照明をおき、最小2乗法で解く。 Shape-from-motion(SfM) 2枚の視点の異なる画像があるとする。 3次元中の点 $p$ がそれぞれの画像中で点 $(u.v),(u&#94;{\\prime},v&#94;{\\prime})$ で見えていたとする。 2つの視点間には回転 $\\mathbf{R}(3\\times3)$ と平行移動 $\\mathbf{t}(3\\times1)$ から成る行列で次の関係がある。 $$ \\left(u&#94;{\\prime},v&#94;{\\prime},1\\right)\\begin{pmatrix} f_{11} & & \\\\ & \\ddots & \\\\&&f;_{33} \\end{pmatrix}\\begin{pmatrix} u\\\\v\\\\1 \\end{pmatrix} = \\mathbf{0} $$ 逆に $\\mathbf{F}$ がわかれば2枚の画像の全てのピクセルで対応がとれているはず。対応点がわかっている点が9点以上あると、最小2乗法で解ける。 しかし、実は $\\mathbf{F}$ は規格化できるので、$8$ パラメータが決まれば残り $1$ つは自動的に決定できる。 （自由度 $8$, eight-point algorithmと呼ぶ。） 今は five-point algorithm まで進化。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-7.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-7.html"},{"title":"動画像処理","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt 動画像は、静止画の集まり（パラパラ漫画） 10~15[fps]あると、人は動画だと感じる。 映画：24[fps] TV、インターネット動画：30~60[fps] ロボット制御に必要な速度（アクチュエーターの反応速度が~ms）：1,000[fps] 自動運転 ~ 10,000[fps] 10[fps] 25[fps] 50[fps] Start Stop → 何をするか？ 動物体の検出・解析 動画の編集 動画の理解・認識 動物体の検出・解析 背景差分・フレーム間差分 【問題】 照明変化（屋外では良く起こる）、背景の変化（木の揺れ等）に弱い。 背景画像をどうやって作るかもポイント。 【統計的背景差分】 各ピクセルで時間的に統計情報を取ってもう少しsmartに背景差分することを考える。背景クラスを $w_b$ 前景クラスを $w_f$ とすると、やることは、$\\left(p\\left(w_f | I(x,y)\\right), p\\left(w_b | I(x,y)\\right)\\right)$ のうち確率の高いクラスを採用する。 ここで、ベイズの定理より、 $$ \\begin{cases} \\begin{aligned} p\\left(w_f | I(x,y)\\right) &= \\frac{p(w_f)p(I\\left(x,y)|w_f\\right)}{p(I(x,y))}\\propto p(w_f)p\\left(I(x,y)|w_f\\right)\\\\ p\\left(w_b | I(x,y)\\right) &= \\frac{p(w_b)p(I\\left(x,y)|w_b\\right)}{p(I(x,y))}\\propto p(w_b)p\\left(I(x,y)|w_b\\right) \\end{aligned} \\end{cases} $$ $p(w_b, w_f)$：その画素が $w_b, w_f$ である事前確率（例：木の上に人や車はいないので、$p_b$ 大, $p_f$：小） $p(I|w_c)$：$w_c$ だった時に、どの程度の確率でその画素値が観測されるか。 動き量の計算 【ブロックマッチング(Block Matching)】 ある時刻 $t$ におけるある領域に最も似ている時刻 $t+1$ の領域を、以下の手法等を用いて探す。 SSD(Sum of Squared Difference) SAD(Sum of Absolute Difference) NCC(Normalized Cross Correlation) 動画像圧縮では、この動きベクトル(motion vector)と差分を符号化することで圧縮を実現。 【オプティカルフロー(optical flow)】 2枚の画像間で、変化が微小だとすると、 $$\\begin{aligned}I(x+\\Delta x, y+\\Delta y, t+\\Delta t) &\\simeq I(x,y,t) + \\frac{\\partial I}{\\partial x}\\Delta x + \\frac{\\partial I}{\\partial y} \\Delta y+ \\frac{\\partial I}{\\partial t} \\Delta t + \\cdots\\\\\\rightarrow I_x\\Delta x + I_y\\Delta y + I_t\\Delta t&\\simeq0\\\\ I_x\\frac{\\Delta x}{\\Delta t} + I_y\\frac{\\Delta y}{\\Delta t} + I_t &= 0\\\\\\left(\\Delta t\\rightarrow0\\right)\\qquad I_xu+I_yv+I &= 0\\\\(u,v) &= \\left(\\frac{dx}{dt},\\frac{dy}{dt}\\right)\\end{aligned}$$ これだけだと、自由度が高すぎて一意に決まらないので、微小領域では動きが滑らかという仮定を置く。（Lucas-Kanada法, 1981） $$\\mathbf{G} = \\left[\\begin{array}{c}I_{x_1} &I;_{y_1} \\\\\\vdots&\\vdots\\\\I_{x_m}&I;_{y_m}\\end{array}\\right],\\quad \\mathbf{f} = \\left[\\begin{array}{c}u \\\\v\\end{array}\\right],\\quad\\mathbf{b} = \\left[\\begin{array}{c}I_{t_1} \\\\\\vdots\\\\I_{t_m}\\end{array}\\right]$$ 上記のように定義し、滑らかさの条件を使うと、 $$\\begin{aligned}\\mathbf{Gf}+\\mathbf{b} &= \\mathbf{0}\\\\\\therefore\\mathbf{f}&#94;{\\ast}&=-\\left(\\mathbf{G}&#94;T\\mathbf{G}\\right)&#94;{-1}\\mathbf{G}&#94;T\\mathbf{b}\\quad \\left(\\because\\text{Least squares}\\right)\\end{aligned}$$ 【DNNによる映像処理】 (x,y,t)の3次元をどう扱うか？ 画像（2次元）と時間の情報を分ける。 3D Convolution：空間情報と時間情報を同時に畳み込む。 仮想3D Convolution：空間情報を畳み込んで、その後時間方向に畳み込む。 動画の編集 In [ ]: 動画の理解・認識 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-6.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-6.html"},{"title":"4.Guided NEST exercises (intermediate)","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Thomas Burns Lecture Material https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-4_Plasticity-and-Learning Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial4.py In [1]: import sys sys . path . append ( \"path/to/library/\" ) Part 1: STDP and its varities Part-2:-Unsupervised-pattern-detection-using-STDP Make a training data NEST-simulation Part 1: STDP and its varities STDP alters the weights of synapses depending on the relative spike timing between the postsynaptic neuron and the presynaptic neuron. _STDP overview (from Sjöström J, Gerstner W (2010) Spike-timing dependent plasticity. Scholarpedia )_ Within some time windows: if \"PRE before POST\" , we get Long-Term Potentiation (LTP) if \"POST before PRE\" , we get Long-Term Depression (LTD) The time windows for LTP and LTD are generally on the order of tens of milliseconds . The LTD window is generally longer than the LTP window. Implementation To implement STDP in spiking neural network models, different STDP rules can be used. In general, different rules result in different distributions of synaptic weights over the course of learning. Examples of such weight distributions are shown below. STDP rules (from Gilson M, Fukai T (2011) Stability versus Neuronal Specialization for STDP. PLoS ONE ) Additive STDP tends to produce competition between synapses but needs to have its weights bound to ensure network stability (e.g. to avoid over-excitation) Multiplicative STDP tends to produce less competition between synapses but owing to its weight-dependent manipulation of synaptic weights does not require artificial bounds. Logorithmic STDP attempts to reconcile the two. Additive STDP rule In the following exercise, we will use the additive STDP rule , sometimes also called the exponential STDP rule : $$ \\Delta w_j= \\begin{cases} a&#94;+ \\cdot e&#94;{\\big( \\dfrac{t_j-t_i}{\\tau&#94;+} \\big)} & \\text{if}\\ t_j \\leq t_i & \\text{(LTP)} \\\\ -a&#94;- \\cdot e&#94;{\\big( - \\dfrac{t_j-t_i}{\\tau&#94;-} \\big)} & \\text{if}\\ t_j > t_i & \\text{(LTD)} \\end{cases} $$ variable Meaning $a&#94;+$ learning rate for LTP $a&#94;-$ learning rate for LTD $t_j$ spike time of the presynaptic neuron $j$ $t_i$ spike time of the postsynaptic neuron $i$ $\\tau&#94;+$ time constant for LTP (ms) $\\tau&#94;-$ time constant for LTD (ms) Using pre-defined paramaters which we will use in the second part of this tutorial , let's plot **\"how the this STDP rule changes weights depending on the timing of presynaptic and postsynaptic spikes.\"** In [2]: import numpy as np import matplotlib.pyplot as plt In [3]: from OIST.tutorial4 import AddSTDP In [4]: add_STDP_paramaters = { 'a_LTP' : 0.03125 , 'a_LTD' : 0.85 * 0.03125 , 'tau_LTP' : 16.8 , 'tau_LTD' : 33.7 } In [5]: model = AddSTDP () model . load_params ( ** add_STDP_paramaters ) In [6]: time_differences = np . linspace ( - 125 , 125 , 1000 ) In [7]: model . simulate ( time_differences ) Exercise 1 What features do you notice in this STDP curve? Experiment with different values in add_STDP_paramaters . How do each of the values change the shape of the STDP curve? How, in a network of neurons, could this STDP rule lead to over-excitation or network instability? The closer the spike timing between the postsynaptic neuron and the presynaptic neuron are, the bigger the influence is. If a becomes larger, the STDP curve expand in the y-axis direction , and if tau becomes larger, the STDP curve shrink in the x-axis direction . When the time difference gets ver close to 0, weight changes will diverge and lead to over-excitation or network instability. Part 2: Unsupervised pattern-detection using STDP In this part of the tutorial we will be replicating the results from [Masquelier et al. (2008) Spike Timing Dependent Plasticity Finds the Start of Repeating Patterns in Continuous Spike Trains. PLoS ONE](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0001377) . (In fact, we already reproduced Figure 2 from their paper in the first part of this tutorial.) Masquelier et al. (2008) create a spiking neural network with 2,000 presynaptic neurons just one postsynpatic neuron. They implement additative STDP in this network, which allows the \"postsynaptic neuron\" to learn to detect the beginning of repeating patterns of spiking activity arriving from the 2,000 presynaptic neurons. Importantly, the presynaptic neurons also have periods of random , non-patterned activity and have additional noisy spiking activity at all times. Let's begin by constructing the spike trains of the 2,000 presynaptic neurons. We will run our simulations for 450s, so we will create 450s worth of spike trains for these neurons. The first step is construct random activity with the following properties: Each presynpatic neuron will emit spikes independently generated by a Poisson process with a variable instantaneous firing rate $r$ $r$ varies randomly beteen $0$ and $90$ Hz. The rate of change in $r$ is modified by $dr$ $dr$ starts at $0$ $dr$ is modified by $ds$, randomly picked from a uniform distribution over $[−360,+360]$ Hz/s. $dr$ is clipped to within $[-1800,1800]$ Hz/s we will also manually add some additional spikes to guarantee that \"in every 50ms time bin, each neuron spikes at least once\" Make a training data In [8]: from OIST.tutorial4 import PoissonProcessGenerator , plotPatternRaster In [9]: poisson_params = { \"min_span\" : 50 , # [ms] \"starting_Hz\" : 54 , # [Hz] \"min_r\" : 0 , # [Hz] \"max_r\" : 90 , # [Hz] \"min_ds\" : - 3.6e-1 , # [Hz/ms] \"max_ds\" : 3.6e-1 , # [Hz/ms] \"min_dr\" : - 1.8 , # [Hz/ms] \"max_dr\" : 1.8 , # [Hz/ms] \"segment_length\" : 50 , # [ms] Length of 1 Presynaptic spiking segment length. } In [10]: seed = 0 In [11]: num_presynaptic_neurons = 2000 # Number of the presynaptic neurons. simulation_length = 1000 # [ms] In [12]: poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) In [13]: spikes = poisson_generator . generate_spikes ( simulation_length , num_presynaptic_neurons , seed = seed ) Processing Time: 0.708[s] Now we will Divide the presynaptic spiking activity into segments of 50ms Select a random 50ms segment to be considered as the \"pattern\" Copy and paste this pattern across the raster plot in a certain proportion of segments. Add 10Hz Noises to all neurons at all times. Divide and Select \"Pattern\" In [14]: poisson_generator . select_segment ( seed = seed ) Spikes divided into 20 segments. 13-th segment was selected as a Pattern. In [15]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( spikes , ax = ax ) plt . tight_layout () plt . show () Copy and Paste this \"Pattern\" In [16]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [17]: pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) Number of spikes added: 250000.0 Spikes are saved as `self.pattern_repeated_spikes`. Add Poisson Noises In [18]: frequency = 10 # [Hz] In [19]: noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes are saved as `self.noise_added_spikes`. In [20]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) plt . tight_layout () plt . show () Firing Rates In [21]: from OIST.tutorial4 import plotFiringRates In [22]: fig = plt . figure ( figsize = ( 12 , 4 )) fig = plotFiringRates ( noise_added_spikes , fig = fig ) plt . show () Check the Repeated Position In [23]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) ax = plotPatternRaster ( output_identities , cmap = \"RdGy_r\" , ax = ax , alpha = 0.7 ) plt . tight_layout () plt . show () With these paramaters, we can embed a repeating pattern within some pseduo-random, spontaneous activity. However, learning takes time! And we have only been simulating 1s of activity. In this task, the authors reported they needed 13.5s of activity (or 700 pattern presentations) for the neuron to show signs of learning to recognise the pattern. Figure 4 from Masquelier et al. 2008: Overview of the 450 s simulation. Here we plotted the membrane potential as a function of simulation time, at the beginning, middle, and end of the simulation. Grey rectangles indicate pattern presentations. (a) At the beginning of the simulation the neuron is non-selective because the synaptic weights are all equal. It thus fires periodically, both inside and outside the pattern. (b) At t≈13.5 s, after about 70 pattern presentations and 700 discharges, selectivity to the pattern is emerging: gradually the neuron almost stops discharging outside the pattern (no false alarms), while it does discharge most of the time the pattern is present (high hit rate), here even twice (c) End of the simulation. The system has converged (by saturation). Postsynaptic spike latency is about 4 ms. Hit rate is 99.1% with no false alarms (estimated on the last 150 s). It is therefore necessary to use some pre-computed spontaneous activity prepared earlier, found in the file spont_100s_alt.npy . It contains 100s of pseduo-random, spontaneous activity for us to use in our simulations. Warning, it is a large file at ~1.6GB! $ wget --content-disposition https://www.dropbox.com/sh/p9ml6l402znbzmy/AAA2LP7W1bcvwSgYnmx9ahyga?dl = 0 & preview = spont_100s_alt.npy # Pattern1. Download pre-computed files. pre_spikes_wrepeats_100s = np . load ( \"path/to/spont_100s_alt.npy\" ) poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) poisson_generator . memorize ( pre_spikes_wrepeats_100s , repeated = False ) # Pattern2. Make by myself. simulation_length_100s = 100 _000 num_presynaptic_neurons = 2 _000 poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) pre_spikes_wrepeats_100s = poisson_generator . generate_spikes ( simulation_length_100s , num_presynaptic_neurons , seed = seed ) In [24]: # Pattern.1 pre_spikes_wrepeats_100s = np . load ( \"path/to/spont_100s_alt.npy\" ) poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) poisson_generator . memorize ( pre_spikes_wrepeats_100s , repeated = False ) [Before] simulation length: None Number of the presynaptic neurons: None Memorizing... [After] simulation length: 100000 Number of the presynaptic neurons: 2000 In [25]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [26]: # Repeat & Paste. poisson_generator . select_segment ( seed = seed ) pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes divided into 2000 segments. 685-th segment was selected as a Pattern. Number of spikes added: 25000000.0 Spikes are saved as `self.pattern_repeated_spikes`. Spikes are saved as `self.noise_added_spikes`. In [27]: repeated_idxes = np . any ( poisson_generator . repeated_position , axis = 1 ) In [28]: print ( f \"Pattern shape = {poisson_generator.pattern_spikes.shape} \" ) print ( f \"Poisson Process shape = {noise_added_spikes.shape} \" ) Pattern shape = (2000, 50) Poisson Process shape = (2000, 100000) Now we are ready to use these spike trains to train a postsynaptic neuron! ... or are we? Creating a model conceptually or mathematically is just the first step. Next we have to figure out how to simulate it computationally. NEST simulation In [29]: import nest NEST contains many STDP synapse rules. Which one should we use? We said earlier that we will use an additive/exponential STDP rule, however that is not the only parameter to consider. Another consideration is \"how to pair two continuous spikes trains\" such that we can apply STDP appropriately to all presynaptic spikes $j$ coming to the postsynaptic neuron $i$. A list of STDP models implemented in NEST can be found here: https://nest-simulator.readthedocs.io/en/latest/models/stdp.html The following models correspond to the below figure for pairing of spikes for STDP: stdp_nn_symm_synapse (panel A) stdp_nn_pre-centered_synapse (panel B) stdp_nn_restr_synapse (panel C) Figure 7 from Morrison et al. 2008 . Examples of nearest neighbor spike pairing schemes for a presynaptic neuron j and a postsynaptic neuron i. In each case, the dark gray indicate which pairings contribute toward depression of a synapse, and light gray indicate which pairings contribute toward potentiation. Symmetric interpretation : each presynaptic spike is paired with the last postsynaptic spike, and each postsynaptic spike is paired with the last presynaptic spike (Morrison et al. 2007). Presynaptic centered interpretation : each presynaptic spike is paired with the last postsynaptic spike and the next postsynaptic spike (Izhikevich and Desai 2003; Burkitt et al. 2004: Model II). Reduced symmetric interpretation : as in c but only for immediate pairings (Burkitt et al. 2004: Model IV, also implemented in hardware by Schemmel et al. 2006) [Masquelier et al. (2008)](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0001377) uses something akin to panel C In the (unreleased) NEST 3.0 there is a stdp_nn_restr_synapse model which is quite similar. (However, we are using NEST 2.X. now.) After going through the available STDP models, none appeared to be capable of replicating the paper due to this paper requiring a particular spike-pairing method which doesn't seem to be represented in any of the currently-implemented STDP models in NEST. Therefore, we need to make some changes to our experiment! But before we do that, let's simulate the current model using some different synapses which are available to us. Start with the static synapse and then experiment with some STDP synapse models to see what goes wrong and \"how different paramaters affect the results.\" # Check what model we can use. nest . Models ( 'synapses' ) In [30]: from OIST.tutorial4 import NeuronalNetwork In [31]: simulation_times = 1000 In [32]: spike_indicies = [ np . where ( is_spike )[ 0 ] for is_spike in noise_added_spikes == 1 ] In [33]: STDP_paramaters = { 'a_LTP' : 0.03125 , 'a_LTD' : 0.85 * 0.03125 , 'tau_LTP' : 16.8 , 'tau_LTD' : 33.7 , } In [34]: model = NeuronalNetwork ( ** STDP_paramaters ) In [35]: model . build ( spike_indicies ) Created 2000 spike generators. Created 2000 parrot neurons. Created 1 post_neuron. Created spike detector. Created voltmeter. In [36]: model . compile ( synapse_model = \"static\" , ex = 1 ) Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: static_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [37]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [38]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [39]: model . compile ( synapse_model = \"standard\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [40]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [41]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [42]: model . compile ( synapse_model = \"triplet\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_triplet_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [43]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [44]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [45]: model . compile ( synapse_model = \"FACETS\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_facetshw_synapse_hom Connected post neuron to spike detector Connected voltmeter to post neuron In [46]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [47]: ax = model . plotWeights ( repeated_idxes ) plt . show () Couldn't recognize the patterns. Exercise 2 What are some general problems with the STDP synapses? How do these synapse models cause failure of our model to replicate the original paper? What can we do to the task or the model which might help? In [48]: model = NeuronalNetwork ( ** STDP_paramaters ) model . build ( spike_indicies ) Created 2000 spike generators. Created 2000 parrot neurons. Created 1 post_neuron. Created spike detector. Created voltmeter. In [49]: gaussian_params = { \"simulation_length_pulses\" : 10000.0 , \"proportion_of_neurons_pulsing\" : 0.5 , \"number_of_pulses\" : 50 , \"spikes_per_pulse\" : 5 , \"std_spikes_per_pulse\" : 5.0 } In [50]: # Overwrite the spike generator. noise_rate = 35.0 # firing rate of Poisson neurons (Hz) model . spike_generator = nest . Create ( \"poisson_generator\" , model . num_presynaptic_neurons , params = { 'rate' : noise_rate }) In [51]: # Add the gaussian Packets as an additional input. model . addGaussianPackets ( ** gaussian_params ) In [52]: model . compile ( synapse_model = \"standard\" , ex = 2 ) Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [53]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [54]: ax = model . plotWeights ( repeated_idxes ) plt . show () Difficult to find a best parameter :( → How about using Bayesian optimization ?? 【Challenge Exercise】 Consider whether and how your network could learn multiple patterns, e.g. would you need to add more post-synaptic neurons to the network? Hint: see [Masquelier et al. (2009) Competitive STDP-Based Spike Pattern Learning. Neural Computation](https://www.ncbi.nlm.nih.gov/pubmed/19718815) . In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-4.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-4.html"},{"title":"3.Guided NEST exercises (basic)","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Milena Menezes Carvalho Lecture Material https://github.com/oist-ncbc/skill-pill-plus/blob/master/Tutorial-3_Synapses-and-Networks Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial3.py In [1]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Synapses Neuronal connectivity Neurons are connected at specific sites called synapses . Usually, the axon of a presynaptic neuron will make contact with the dendrite (or soma ) of a postsynaptic in what's called a chemical synapse : neurotransmitters are transferred via the tiny gap between the two neurons ( synaptic cleft ) thanks to biochemical processes. This generates a change in membrane potential at the postsynaptic site, called postsynaptic potential . Electrical synapses , also known as gap junctions , can also be present -- in this case, specialized proteins make a direct electrical connection between neurons. [1] from [2] In this tutorial we will connect two or more neurons in NEST to create our first neuronal networks. First, we will learn the basic commands following [3] and [4] Then apply these to a well-known balanced network known as the Brunel network . By the end of this tutorial, you should be able to understand that a network's stability and activity behavior is deeply influenced by its parametrization. Sources: [1] Wulfram Gerstner and Werner M. Kistler, \"Spiking Neuron Models\". Cambridge University Press, 2002 [2] Peter Dayan and L. F. Abbot, \"Theoretical Neuroscience: Computational and Mathematical Modeling of Neural Systems\". The MIT Press, 2001 [3] PyNEST tutorial: Part 2, Populations of Neurons [4] PyNEST tutorial: Part 3, Connecting Networks with Synapses Synapse types The simplest synapse type is the static_synapse . The synaptic weight , a measure of how strong is the influence of the presynaptic neuron on the postsynaptic neuron, is static , i.e. does not change over time. The synaptic transmission, however , is not instantaneous. The synaptic delay is defined as the \"time\" between the presynaptic neuron activation ( action potential ) and the moment the postsynaptic potential is generated. In NEST, we can check the default values for all parameters using the GetDefaults function: nest.GetDefaults('static_synapse') The common model which is more suit to real biological event is spike-time dependent plasticity . The synaptic weight changes according to the temporal order between pre and postsynaptic spike times. In NEST, the most common STDP mechanisms are implemented in stdp_synapse . The change for normalized synaptic weights is described by $$ \\begin{aligned} \\Delta w &= \\begin{cases} \\lambda f {-}(w) \\times K -(\\Delta t) & \\text{if $\\Delta t \\leq 0$,} \\ \\lambda f {+}(w) \\times K +(\\Delta t) & \\text{if $\\Delta t > 0$,} \\end{cases}\\ \\Delta t &\\equiv t {post} - t {pre}\\ K {(+,-)}(\\Delta t) &= \\exp(-|\\Delta t| / \\tau {(+,-)}) \\end{aligned} $$ The update functions $$f_{+}(w) = (1-w)&#94;{\\mu_{+}} \\text{ and } f_{-}(w) = \\alpha w&#94;{\\mu_{-}}$$ create synaptic potentiation (stronger weights) when causal spiking is detected ($\\Delta t > 0$), otherwise generating synaptic depression (weaker weights). This rule is also known as temporally asymmetric Hebbian plasticity and has been thoroughly studied under different parametrizations. (below) STDP Type Parametrization Ref. multiplicative STDP $\\mu_{+}=\\mu_{-}=1.0$ [6] additive STDP $\\mu_{+}=\\mu_{-}=0.0$ [7] Guetig STDP $\\mu_{+}=\\mu_{-}=[0.0, 1.0]$ [5] van Rossum STDP $\\mu_{+}=0.0, \\mu_{-} = 1.0$ [8] Sources: [5] Guetig et al. (2003). Learning input correlations through nonlinear temporally asymmetric hebbian plasticity. Journal of Neuroscience, 23:3697-3714 DOI: https://doi.org/10.1523/JNEUROSCI.23-09-03697.2003 [6] Rubin J, Lee D, Sompolinsky H (2001). Equilibrium properties of temporally asymmetric Hebbian plasticity. Physical Review Letters, 86:364-367. DOI: https://doi.org/10.1103/PhysRevLett.86.364 [7] Song S, Miller KD, Abbott LF (2000). Competitive Hebbian learning through spike-timing-dependent synaptic plasticity. Nature Neuroscience 3(9):919-926. DOI: https://doi.org/10.1038/78829 [8] van Rossum MCW, Bi G-Q, Turrigiano GG (2000). Stable Hebbian learning from spike timing-dependent plasticity. Journal of Neuroscience, 20(23):8812-8821. DOI: https://doi.org/10.1523/JNEUROSCI.20-23-08812.2000 Introduction: synapses in NEST Check the synapse types you can call Found in the following link: [9] NEST Docs: All synapse models Running the following command: import nest nest . Models ( 'synapses' ) For STDP synaptic models, the time constant of the depressing window of STDP ( tau_minus ) is exceptionally a parameter of the post-synaptic neuron. nest . Create ( \"iaf_psc_alpha\" , params = { \"tau_minus\" : 30.0 }) However, tau_plus is a synapse parameter. nest . SetDefaults ( \"stdp_synapse\" ,{ \"tau_plus\" : 15.0 }) Customized variants of a synapse model can be created using CopyModel() , and can be used anywhere that a built-in model name can be used. nest . CopyModel ( \"stdp_synapse\" , \"layer1_stdp_synapse\" ,{ \"Wmax\" : 90.0 }) Connectivity rules for multiple neurons can be defined. Please check [3] to learn more details about creating and connecting neuron populations. Synaptic parameters can also be randomly distributed by assigning a dictionary to the parameter. This should contain the target distribution and its optional parameters, as listed below: Distributions Keys normal mu , sigma lognormal mu , sigma uniform low , high uniform_int low , high binomial n , p exponential lambda gamma order , scale poisson lambda Synapse information can be retrieved from its origin, target and synapse model using GetConnections() : Example. num_nurons = 10 epop1 = nest . Create ( \"iaf_psc_delta\" , num_nurons , params = { \"tau_m\" : 30.0 }) epop2 = nest . Create ( \"iaf_psc_delta\" , num_nurons ) conn_dict = { \"rule\" : \"fixed_indegree\" , \"indegree\" : 5 } syn_dict = { \"model\" : \"stdp_synapse\" , \"alpha\" : 1.0 } nest . Connect ( epop1 , epop2 , conn_dict , syn_dict ) neuron = nest . Create ( \"iaf_psc_alpha\" ) syn_dict = { \"model\" : \"stdp_synapse\" , \"alpha\" : { \"distribution\" : \"uniform\" , \"low\" : 0.1 , \"high\" : 2. }, \"weight\" : { \"distribution\" : \"uniform\" , \"low\" : 0.5 , \"high\" : 5. }, \"delay\" : 1.0 } nest . Connect ( epop1 , neuron , \"all_to_all\" , syn_dict ) # Synapse information can be retrieved print ( nest . GetConnections ( epop1 , target = epop2 , synapse_model = \"stdp_synapse\" )) # We can then extract the data using `GetStatus()`. # Specific information can be retrieved by providing a list of desired parameters. conns = nest . GetConnections ( epop1 , synapse_model = \"stdp_synapse\" ) conn_vals = nest . GetStatus ( conns , [ \"target\" , \"weight\" ]) Networks Example1: connecting two neurons In this example, we will create and connect two neurons, A and B. Neuron A is of type iaf_psc_delta : Receives external current $I_e = 376.0 pA$. This current is sufficient to elicit a spike every $\\approx$ 50ms. Neuron B is solely connected to neuron A: Can only spike if the input from A is strong enough. Let's observe how B can be influenced by A. In [2]: import nest import matplotlib.pyplot as plt In [3]: from OIST.tutorial3 import NeuronA , NeuronB , plotMultipleNeurons In [4]: # First, verify the activity of neuron A. nest . ResetKernel () modelA = NeuronA () modelA . build () In [5]: ax = plotMultipleNeurons ( modelA ) plt . show () Now let's create neuron B as iaf_psc_delta with no external current: In [6]: modelB = NeuronB () modelB . build () In [7]: ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Neuron B is still inactive. We need to connect both neurons: In [8]: nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) In [9]: ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Q. Suggest at least 3 alterations we can make in this example to elicit spiking activity from B. Lower the threshold V_th : nest.SetStatus(neuron_B,{'V_th': -69.}) # default: -55 Higher thr current I_e Highre the weights between nuron_A and nuron_B In [10]: # Lower the threshold V_th. nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , V_th =- 69. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () In [11]: # Higher the current I_e. nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , I_e = 350. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () In [12]: # Highre the weights between \"nuron_A\" and \"nuron_B\" nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 14.9 }) nest . Simulate ( 300. ) nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 15. }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Because of the shape of B, and scale of observation, we couldn't find the spikes but neuron B also spikes after connection weight increased. Q. Check what happens if the neuron model is different: for example, change `iaf_psc_delta` to `hh_psc_alpha`. In [13]: # Lower the threshold V_th. nest . ResetKernel () modelA = NeuronA ( model_name = \"hh_psc_alpha\" ) modelA . set_params ( \"neuron\" , I_e = 250. ) modelA . build () modelB = NeuronB ( model_name = \"hh_psc_alpha\" ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Q. connect B to A reciprocally and check their dynamics. How can you describe their behavior? In [14]: nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , V_th =- 65. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 5. }) nest . Connect ( modelB . neuron , modelA . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 1 }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Example2: Random Balanced Network We will now simulate a network of integrate-and-fire (IAF) , excitatory and inhibitory spiking neurons connected randomly with fixed weights . This network (called Brunel Network ) was proposed and studied in [10]: The network is composed of excitatory neurons (80%) inhibitory neurons (20%) connection probability $\\epsilon = 10\\%$ ( epsilon ). All neuron types can be connected (E$\\rightarrow$E, E$\\rightarrow$I, I$\\rightarrow$E and I$\\rightarrow$I). Neurons receive external input from oustide the network modeled by a Poisson spike train generator [11] rate nu_ex , $\\nu_{ex} = \\eta * \\nu_{th}$ threshold rate $\\nu_{th}$ ( nu_th ) is calculated using $$\\nu_{th} = \\frac{\\theta}{J * \\text{CE} * \\tau_{m}}$$ In general, the interspike intervals drawn are exponentially distributed. The synaptic input current on each neuron is calculated as $$I_i(t) = \\tau \\sum_j J_j \\sum_k \\delta(t-\\delta-t_j&#94;k)$$ Sum over $j$ covers all synapses (internal and external to the network) Sum over $k$ covers all spikes arriving at times $t&#94;k_j$ with delay $\\delta$ ( delta ). This simple postsynaptic current model is called delta synapse , in which stimulation is applied in a single point in time for simplicity using the Dirac delta function . In biological systems, synaptic models are diverse and can vary within the same neuron depending on the function of the synapse, for example. In NEST, we will create a network of iaf_psc_delta neurons connected using static_synapse with weights $J_E$ and $J_I = -g*J_E$. We will study how this network changes its behavior depending on its parametrization. Sources: [10] Brunel N (2000). Dynamics of sparsely connected networks of excitatory and inhibitory spiking neurons. Journal of Computational Neuroscience 8, 183-208. [11] Poisson distribution m In [15]: from OIST.tutorial3 import BrunelNetwork In [16]: model = BrunelNetwork () In [17]: # Model parameters. model . __dict__ Out[17]: {'g': 5.0, 'eta': 2.0, 'delay': 1.5, 'dt': 0.1, 'epsilon': 0.1} $$ \\begin{aligned} \\begin{cases} \\epsilon &= 10\\%\\\\ v_{ex} &= \\eta v_{th}\\\\ \\delta\\\\ J_I &= -gJ_E \\end{cases} \\end{aligned} $$ In [18]: neuron_params = { \"C_m\" : 1.0 , \"tau_m\" : 20.0 , \"t_ref\" : 2.0 , \"E_L\" : 0.0 , \"V_reset\" : 0.0 , \"V_m\" : 0.0 , \"V_th\" : 20.0 } In [19]: model . build ( N_total_neuron = 12500 , N_rec_volt = 5 , N_rec = 50 , J = 0.1 , ** neuron_params ) Number of neurons : 12500 Excitatory: 10000 Inhibitory: 2500 Number of synapses: 15625000 Excitatory: 12500000 Inhibitory: 3125000 Building time : 4.58 s In [20]: model . simulate ( T = 900. ) Simulation time : 900.0 ms Processing time : 56.00 s Completed. Please use following methods to plot results. - `plotVoltageEx(n)`, `plotVoltageIn(n)` - `plotVoltageCompare(idx=0)` - `plotRaster()` Below we plot the voltage, raster, and activity rate of the excitatory and inhibitory populations. In [21]: model . plotVoltageEx () \u001b Membrane potential plots [Excitatory Neurons] In [22]: model . plotVoltageIn () \u001b Membrane potential plots [Inhibitory Neurons] In [23]: model . plotVoltageCompare ( 0 ) \u001b Membrane potential Compaison. In [24]: model . plotRaster () \u001b Raster Plot.(N=50) One of the main findings in Brunel's paper is the different activity states that can be observed in this network depending on $g$: the ratio between inhibitory and excitatory synaptic weights $\\eta$: the external excitation rate relative to the threshold rate $\\delta$: the synaptic delay $\\epsilon$: the connection probability . By altering these arguments, he observed different collective behaviors identified as asynchronous irregular (AI) asynchronous regular (AR) synchronous irregular (SI) synchronous regular (SR). These behaviors are exemplified in the images below. from [1] Q. Use the graphs as a starting point. Try to elaborate on how each of the four parameters affects the state of this network. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-3.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-3.html"},{"title":"2.Introduction to NEST Simulator","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Gastón Sivori Lecture Material https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-2_NEST-Introduction Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial2.py In [1]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Agenda Installation leaky integrate-and-fire (LIF) HH-neuron model Connecting nodes with different inputs F-I curve Installation Documentation: https://nest-simulator.readthedocs.io/en/latest/installation/ Github: https://github.com/nest/nest-simulator/tree/v2.18.0 Memo(What I did) pip $ pip install python-nest ※ This `nest` has lack of some module (ex. `nest.Create`) cmake # Install dependencies via Homebrew $ brew install gcc cmake gsl open-mpi libtool $ mkdir NEST $ cd NEST # Clone source files from Github. $ wget --content-disposition https://github.com/nest/nest-simulat or/archive/v2.16.0.tar.gz $ tar zxf nest-simulator-2.16.0.tar.gz $ mkir bld $ cd bld # Configure and build NEST inside the build directory # (replacing gcc-9 and g++-9 with the GCC compiler versions you installed with brew). # You can check it with `g++ -v` or `gcc -v` command. $ cmake -DCMAKE_INSTALL_PREFIX:PATH = . \\ -DCMAKE_C_COMPILER = gcc-9 \\ -DCMAKE_CXX_COMPILER = g++-9 \\ ../nest-simulator-2.16.0/ $ make -j4 $ make install $ make installcheck ※ This `nest` also has lack of some module (ex. `nest.Create`) Anacond # If you want to use jupyter notebook, please include \"jupyter\" $ conda create --name skill-pill-plus -c conda-forge nest-simulator python jupyter # path/to/activate is like \"/Users/iwasakishuto/.pyenv/versions/anaconda3-5.0.1/bin/activate\" $ source skill-pill-plus # Activated!! ( skill-pill-plus ) $ If you want to use this environment on the jupyter notebook, please follow this. $ pip install environment_kernels $ jupyter notebook --generate-config $ vi ~/.jupyter/jupyter_notebook_config.py # Add these line >>> c.NotebookApp.kernel_spec_manager_class = 'environment_kernels.EnvironmentKernelSpecManager' >>> c.EnvironmentKernelSpecManager.conda_env_dirs =[ '/Users/iwasakishuto/.pyenv/versions/anaconda3-5.0.1/env' ] $ jupyter notebook # If successful, you can chose your ideal environment at [Kernel → Change kernel] # NOTE: You should install `jupyter` in the environment. # If you not, please run `conda install --name \"Your Environment Name\" jupyter` ※ This `nest` has all modules :) In [2]: import nest import numpy as np import matplotlib.pyplot as plt # If you need to import other packages like scipy or scikit-learn # You should import these \"before\" nest!! For NEST to simulate different experiments, its kernel (core functionality) needs to be reseted ( nest.ResetKernel() ) for every new simulation. Please remember to run this code before running each simulation. About NEST Conceptually, neural networks consists of neurons and connections . Nodes can be neurons , sub-networks or devices inside the NEST framework. We will use devices to stimulate neurons and to measure their membrane potential. Sub-networks , on the other hand, are arrangements of neurons whose parameters may be modified as a group. We will look at sub-networks in the following lectures. leaky integrate-and-fire (LIF) For now, we will focus on constructing a leaky integrate-and-fire (LIF) neuron with delta-shaped synaptic currents: In this figure, a delta-shaped pulse $\\delta(t-t_j&#94;f)$ from neuron $j$ is being transmitted along its axon until it reaches neuron $i$'s dendrites through a synapse. Synapses are modelled as low-pass RC circuit filters which output a current $\\alpha(t-t_j&#94;f)$. These presynaptic currents reach the soma as an input current $I(t)$ which charges the capacitor $C$ (integration) while some of it leaks out through the resistance $R$. ($I(t) = I_R + I_C$) The electrical components here represent a circuit modelization of the biological mechanisms happening at the synapse and the soma. In this model, the membrane's potential is represented by capacitor $C$ such that when it has enough charge and reaches the threshold potential $\\vartheta$, a spike $\\delta(t-t_i&#94;f)$ is generated and transmitted. In [3]: from OIST.tutorial2 import LIFmodel In [4]: model = LIFmodel ( model_name = \"iaf_psc_alpha\" ) Create LIF neuron with alpha-function shaped synaptic currents. Created a spike_generator. Created a voltmeter. Created a spike detector. In [5]: # Check the neuron params. model . neuron_params () C_m : 250.0 pF E_L : -70.0 mV I_e : 0.0 pA V_m : -70.0 mV V_reset: -70.0 mV V_th : -55.0 mV t_ref : 2.0 ms tau_m : 10.0 ms Q1. You might have noticed that there is no parameter for the membrane resistance `R_m` as shown in the previous figure. Do you know why? The membrane time constant tau_m corresponds to the membrane capacitance C_m and membrane resistance R_m as observed in the electrical circuit above. Therefore it's possible to calculate what is the R_m value given the following formula: $$ \\tau_m = C_m R_m $$ In [6]: # Retrieve a particular set of parameters model . neuron_params ( \"V_reset\" , \"V_th\" ) Out[6]: ((-70.0, -55.0),) In [7]: # Modify spike generation to values 10 and 50 ms print ( f \"Before: {model.spike_params('spike_times')}\" ) model . set_params ( node = \"spike_generator\" , spike_times = [ 10. , 50. ]) print ( f \"After : {model.spike_params('spike_times')}\" ) Before: ((array([], dtype=float64),),) After : ((array([10., 50.]),),) In [8]: # Connect the spike generator and the voltmeter to the neuron. model . build ( weight = 1e3 ) Connect spike generator with a given synaptic specification ({'weight': 1000.0}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. Simulate for 100 ms and observe the results In [9]: ax = model . simulate ( ms = 100 ) plt . show () Q2. What can we observe here? Are these neuron spikes? We can observe the membrane trace of the LIF neuron model excited with alpha-function shaped spikes at times 10 ms and 50 ms. The observed peaks in the membrane trace are not spikes since the membrane threshold V_th is -55mV. If we modify the external current or lower the membrane's threshold potential we should be able to observe spikes. In [10]: # Modifying the threshold model = LIFmodel ( model_name = \"iaf_psc_alpha\" , display = False ) model . set_params ( \"neuron\" , V_th =- 58. ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . build ( weight = 1e3 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () In [11]: # modifying external current to LIF neuron model = LIFmodel ( model_name = \"iaf_psc_alpha\" , display = False ) model . set_params ( \"neuron\" , I_e = 300. ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e3 , display = False ) model . simulate ( ms = 100 ) plt . show () In this neuron model, the membrane potential does not follow the biologically observed dynamics that neurons have. Their use is limited to understand and experiment with network dynamics and spiking activity :( HH-neuron model For comparison, let's observe the membrane potential of a HH-neuron model (Hodgkin and Huxley, 1952). This model was the \"conclusion of a series of papers\" concerned with the flow of electric current through the surface membrane of the giant nerve fibre in the squid. Using voltage-clamp experiments and by varying extracellular sodium and potassium concentrations, Hodgkin and Huxley developed a model in which the properties of an excitable cell are described by a set of ordinary differential equations. For simplicity, we will not focus on these equations. NEST's framework integrates these equations to obtain the instantaneous membrane potential. The following figure represents an electric circuit model of the neuron's membrane. The HH-model (Hodgkin and Huxley, 1952) considers the ionic channels present on the cellular membrane. These channels allows the conduction of specific types of ions. Sodium channels (Na+) are scarce inside the cell , so that when sodium channel opens, positive charges rush into the cell to cause excitation. Potassium ions (K+) are rich inside the cell , so that when potassium channel opens, positive charges rush out of the cell to cause inhibition. The model assumes a leak current composed of all other remaining ionic currents (Cl, Mg, etc.) This model is based on careful data analysis and follows the following equation : $$C_m \\frac{dV}{dt} = \\bar{g_{Na}}m&#94;3h(E_{Na}-V) + \\bar{g_K}n&#94;4(E_K-V) + g_{Leak}(E_{Leak}-V) + I$$ Where the conductances $g_{Na}$ and $g_{K}$ are: $$ g_{Na} = \\bar{g_{Na}}m&#94;3h $$$$ g_{K} = \\bar{g_K}n&#94;4 $$ Let's see these parameters in NEST by creating a hh_psc_alpha neuron. A HH-model neuron with delta-shaped synaptic currents. In [12]: from OIST.tutorial2 import HHmodel In [13]: model = HHmodel () Create Hodgkin-Huxley neuron with alpha-function shaped synaptic currents. Created a spike_generator. Created a voltmeter. Created a spike detector. In [14]: model . neuron_params () C_m : 100.0 pF E_K : -77.0 mV E_L : -54.402 mV E_Na : 50.0 mV g_K : 3600.0 nS g_L : 30.0 nS g_Na : 12000.0 nS I_e : 0.0 pA V_m : -65.0 mV t_ref: 2.0 ms In [15]: model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e3 ) Connect spike generator with a given synaptic specification ({'weight': 1000.0}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. In [16]: ax = model . simulate ( ms = 100 ) plt . show () Q3. Modify the previous example to observe spikes. In [17]: # modifying the synaptic strength (w) to observe spikes model = HHmodel ( display = False ) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e4 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () In [18]: print ( f \"Number of spikes: {model.spikes} \" ) Number of spikes: 2 Could you observe the spikes? Just after a spike, the membrane potential resets to -77 mV and a short refractory period of 2 ms (check these parameter value t_ref from the parameter list shown above!). During this period, the neuron is unable to react to excitation. Q4. Can you try exciting the neuron during this period to observe this phenomena? In [19]: # In the following example the spike generator generates spikes at times 10ms, 11ms, 50ms and 52ms. model = HHmodel ( display = False ) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 11.0 , 50. , 52.0 ]) # Add!! model . build ( weight = 1e4 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () The figure is the same as before due to the refractory period of the neuron. Connecting nodes with different inputs To compare neurons with different inputs, let's see how the parameters of the input affect the neurons' output. In the following example, we will use constant input current and belows with the same mean strength as the constant input current. a Poisson spike train The probability density function and firing rates of neurons will be shaped given by these inputs. First, let us define the parameters of the simulation and input currents. In [20]: T = 1.2e3 # simulation time nu_ext = 15e3 # firing rate of external Poisson source J = 0.08 # synaptic weight d = 0.1 # delay C = 250.0 # membrane potential capacitance mu = J * 1e-3 * nu_ext * C # mean input in pAa I_ext = mu # external current In [21]: neuron_params = { 'C_m' : C , # (pF) 'E_L' : 0. , # (mV) 'I_e' : 0.0 , # (pA) 'V_m' : 0. , # (mV) 'V_reset' : 0. , # (mV) 'V_th' : 15. , # (mV) 't_ref' : 2.0 , # (ms) 'tau_m' : 10.0 , # (ms) } In [22]: plot_infos = { \"color\" : [ \"blue\" , \"red\" ], \"label\" : [ \"constant input\" , \"Poisson input\" ] } Then, make two types of models and compare them. In [23]: from OIST.tutorial2 import mkMultiDetectors , plotMultResults In [24]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) Create LIF neuron with delta-shaped synaptic currents. Created a voltmeter. Created a spike detector. In [25]: poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d ) Create LIF neuron with delta-shaped synaptic currents. Created a poisson_generator. Created a voltmeter. Created a spike detector. Connect spike generator with a given synaptic specification ({'weight': 0.08, 'delay': 0.1}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. In [26]: neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) Created 2 multimeter to record membrane potential of the neurons. Created 2 spike detectors to record spikes times and neuron identifiers, but not record from file. In [27]: nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axR . legend (), axR . set_xlim ( 0 , T ) plt . show () What!? There are no spikes?! Well, look at the figures and consider the threshold potential value V_th . Let's try increasing the synaptic strengh J . The neuron receiving Poisson input will be in different firing rate regimes! In [28]: print ( f \"poisson_model.neuron_params('V_th') = {poisson_model.neuron_params('V_th')[0][0]}\" ) print ( f \"const_model.neuron_params('V_th') = {const_model.neuron_params('V_th')[0][0]}\" ) poisson_model.neuron_params('V_th') = 15.0 const_model.neuron_params('V_th') = 15.0 Q5. Try to make the neuron fire at an irregular regime. In [29]: T = 1.2e3 # nu_ext = 15e3 # J = 0.09 # From 0.08 to 0.09. d = 0.1 # C = 250.0 # mu = J * 1e-3 * nu_ext * C # I_ext = mu # In [30]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axR . legend (), axR . set_xlim ( 0 , T ) plt . show () Q6. Try to make the neuron spike at a regular regime. In [31]: T = 1.2e3 # nu_ext = 15e3 # J = 0.11 # From 0.08 to 0.11. d = 0.1 # C = 250.0 # mu = J * 1e-3 * nu_ext * C # I_ext = mu # In [32]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axL . legend (), axR . legend (), axR . set_xlim ( 0 , T ) plt . show () Since we are using the LIF neuron model with a membrane threshold potential V_th at 15mV , you will not be able to see proper spikes. Instead, you will only see the after-spike dynamics (membrane potential reset and refractory period). Q7. Try to make HH neuron models spike at a regular regime for both input conditions. In [33]: T = 500.0 # simulation time nu_ext = 15e3 # firing rate of external Poisson source J = 0.08 # synaptic weight d = 0.1 # delay C = 100.0 # membrane potential capacitance mu = J * 1e-3 * nu_ext * C # mean input in pAa I_ext = mu # external current In [34]: neuron_params = { 'g_K' : 3000.0 , 'g_Na' : 16000.0 , 'g_L' : 60.0 } In [35]: const_model = HHmodel ( model_name = \"hh_psc_alpha\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = HHmodel ( model_name = \"hh_psc_alpha\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , ** plot_infos ) axL . legend (), axR . legend (), axR . set_xlim ( 0 , T ), axR . set_ylim ( - 80 , 40 ) plt . show () Rate of neuron stimulated with constant input input: 56.112 Rate of neuron stimulated with Poisson input input: 48.096 F-I curve As you have seen in the past figures, the firing rate of the neuron can change given different external current I_e . It's possible to plot this relationship and its usually referred to as the F-I curve . In [36]: from OIST.tutorial2 import FiringRate In [37]: neuron_params = { 'C_m' : 250.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [38]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () As you can observe from this figure, given the parameter setup, the neuron in a leaky-integrate-and-fire model starts to fire spikes at around 370 pA of external input current I_e . For this particular case, V_th was chosen to be low to observe the trend of the firing rate as external current is increasing. Modifying the value of the capacitance C_m moves this curve in the x-axis Modifying the refractory period t_ref slows down the firing rate i.e. more current is required for a given firing rate. Q8. Observe these changes in the F-I curve by modifying the neuron model parameters. In [39]: neuron_params = { 'C_m' : 150.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [40]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () In [41]: neuron_params = { 'C_m' : 350.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [42]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () In [43]: neuron_params = { 'C_m' : 250.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 1.0 , 'tau_m' : 10.0 , } In [44]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () Q10. Repeat these simulations with the HH neuron model hh_psc_alpha by modifying channel conductances. In [45]: neuron_params = { 'g_K' : 3600.0 , 'g_Na' : 12000.0 , 'g_L' : 30.0 } In [46]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [47]: neuron_params = { 'g_K' : 3600.0 , 'g_Na' : 13000.0 , 'g_L' : 30.0 } In [48]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [49]: neuron_params = { 'g_K' : 3800.0 , 'g_Na' : 12000.0 , 'g_L' : 30.0 } In [50]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-2.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-2.html"},{"title":"1.Mathematical Models and Numerical Methods of Computational Neuroscience","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Alan Func Lecture Materials https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-1_Ordinary-Differential-Equations Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial1.py In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Agenda Brief introduction of Differential Equations Neuronal Models Numerical Method to Simulate Neuronal Models How the Network can be trained Brief introduction of Differential Equations Ordinary Differential Equations A fundamental tool in theoretical Science The differential equation gives the dependence of derivatives $$F\\left[\\frac{d&#94;nx(t)}{dt&#94;n},\\cdots,\\frac{dx(t)}{dt},C\\right] = 0$$ As we can calculate the whole path ways if we know the velocity($v=dx(t)/dt$), by knowing the slopes, one may trace the whole curve!! Examples of Models and Theories Simple Harmonic Oscillator Heat Equation(1-D) An oscillator that is neither driven nor damped. How the distribution of some quantity (such as heat) evolves over time in a solid medium $$\\underset{\\text{Acceleration}}{\\frac{d&#94;2x(t)}{dt&#94;2}}+\\underset{\\text{Returning Force}}{\\omega&#94;2x(t)} = 0$$ $$\\underset{\\text{Rate of Heat}}{\\frac{\\partial u(x,t)}{\\partial t}}+\\underset{\\text{Returning Force}}{\\alpha\\frac{\\partial&#94;2u(x,t)}{\\partial x&#94;2}} = 0$$ Implementation by Numerical Method Euler Method Runge-Kutta Methods Euler Method Euler method has a relatively large error. There are some extensions of the Euler method(one of them are Mid-Point method. ) In [3]: X = np . arange ( - 1.0 , 6.5 , 0.5 ) Y = 1 / 6 * X ** 3 dYdX = 1 / 2 * X ** 2 In [4]: Euler_dYdX_bigger = ( Y [ 2 :] - Y [: - 2 ])[ 2 :] # step size=1 dY/dX(t) = X(t+1)-X(t) Euler_dYdX_smaller = ( Y [ 1 :] - Y [: - 1 ])[ 2 : - 1 ] / 0.5 # step size=0.5 dY/dX(t) = (X(t+0.5)-X(t))/0.5 MidPointEuler_dYdX = ( Y [ 2 :] - Y [: - 2 ])[ 1 : - 1 ] # step size=1 dY/dX(t) = X(t+0.5)-X(t-0.5) In [5]: def CompareNumerical ( ax , X , Y , label , marker , color ): ax . scatter ( X [ 2 : - 2 ], Y , label = label , marker = marker , color = color ) ax . plot ( X [ 2 : - 2 ], Y , color = color , alpha = 0.5 ) return ax In [6]: fig , ax = plt . subplots () ax = CompareNumerical ( ax , X , Euler_dYdX_bigger , \"Step = 1.0\" , \"s\" , \"b\" ) ax = CompareNumerical ( ax , X , Euler_dYdX_smaller , \"Step = 0.5\" , \"o\" , \"r\" ) ax = CompareNumerical ( ax , X , MidPointEuler_dYdX , \"Mid-point h=1.0\" , \"&#94;\" , \"g\" ) ax . plot ( X [ 2 : - 2 ], dYdX [ 2 : - 2 ], linestyle = \"--\" , label = \"Analytic\" , color = \"black\" ) ax . legend (), ax . grid (), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$y$\" ) plt . show () The mid-point method is surprisingly good!! Runge-Kutta Methods A family of implicit and explicit iterative methods. More: Wikipedia Neuronal Models To Model a Neuron... Neurons can be excited by current injection . If the membrance potential(Voltage) is larger than some thresholds , an action potential will be triggered. Membrance potential means the potential difference across the neuron membrance. → Relative can be controlled by concentrations of irons($\\mathrm{Na}&#94;+,\\mathrm{K}&#94;+,\\mathrm{Cl}&#94;-$) is maintained by their ion bumps , and at the resting state, it is around $65\\mathrm{mV}$. sometimes across the threshold , and when it occurs, the neuron fires works like a capacitor with a leaky current. Leaky Integrate-and-Fire(LIF) model In 1907, Lapicque proposed a simple model(which is just the time derivative of the law of capacitance ($Q=CV$) .) for neurons: $$I(t)-\\frac{V_m(t) - V_{rest}}{R_m} = C_m\\frac{dV_m(t)}{dt}$$ $I$: Input current (=const.) $V_m$: Membrance potential $V_{rest}$: Resting potential of the membrance $R_m$: Membrane resistance (we find it is not a perfect insulator as assumed previously) $C_m$: Capacity of the membrance. When an input current is applied, the membrane voltage increases with time until it reaches a constant threshold $V_{th}$ At the point, a delta function spike occurs and the voltage is reset to its resting potential($V_{rest}$). The LIF neuron fired more frequently as the input current increases. Leak Conductance Ion permeability at resting membrane potential, allowing a constant flow of current through the cell membrane due to channels that remain open at resting membrane potential (Ref: Encyclopedia of Neuroscience ) In [7]: from OIST.tutorial1 import LIFsimulation , LITSpikeFrequency In [8]: params = { 'V_rest' : - 65 , 'V_thre' : - 40 , 'V_reset' : - 70 , 'V_fire' : 20 , 'C' : 2e-4 , 'R' : 7.5e4 , 'I' : 5e-4 , 'dt' : 0.1 , 'T' : 100 , } In [9]: time , Vm = LIFsimulation ( ** params ) plt . plot ( time , Vm , color = \"black\" ) plt . xlabel ( \"time[ms]\" ), plt . ylabel ( \"V[mV]\" ), plt . grid () plt . show () In [10]: Is = [ 0.5e-3 , 1e-3 , 1.5e-3 , 2.0e-3 , 2.5e-3 , 3.0e-3 ] freqs = LITSpikeFrequency ( Is , ** params ) plt . plot ( Is , freqs , color = \"blue\" ), plt . scatter ( Is , freqs , color = \"blue\" , marker = \"s\" ) plt . title ( \"How Spiking Frequency Depends on Input Current\" ), plt . xlabel ( \"Input Current: I [uA]\" ), plt . ylabel ( \"Spiking Frequency [Hz]\" ), plt . grid () plt . show () ※ The LIF neuron fired more frequently as the input current increases. Hodgkin-Huxley model $$ I = C_m + \\frac{dV_m}{dt} + g_{\\mathrm{l}}\\left(V_m-V_{\\mathrm{l}}\\right) + g_{\\mathrm{K}}n&#94;4\\left(V_m-V_{\\mathrm{K}}\\right) + g_{\\mathrm{Na}}m&#94;3h\\left(V_m-V_{\\mathrm{Na}}\\right)\\\\ \\begin{cases} \\begin{aligned} \\frac{dn}{dt} &= \\alpha_n(V_m)(1-n) + \\beta_n(V_m)n\\\\ \\frac{dm}{dt} &= \\alpha_m(V_m)(1-m) + \\beta_m(V_m)m\\\\ \\frac{dh}{dt} &= \\alpha_h(V_m)(1-h) + \\beta_h(V_m)h\\\\ \\end{aligned} \\end{cases} $$ Proposed by Hodgkin and Huxley in 1952 (They received the 1963 Nobel Prize in Physiology or medicin for this work.) Like Leaky Integrate-and-Fire(LIF) model , the input current (const.) charges up the membrance capacitor. Leaky conductance This model considers also ion currents invoving potassium ion ($\\mathrm{K}&#94;+$) and Sodium ion ($\\mathrm{Na}&#94;{+}$) induced by the potential difference. Sodium ion : has a reversal potential depolarizing the membrance. The conductivity is voltage-gated. Potassium ion : has a reversal potential hyper-polarizing the membrance. The conductivity is voltage-gated. The individual gates act like a first order chemical reaction with two states: $$\\text{Shut}\\overset{\\alpha}{\\underset{\\beta}{\\rightleftarrows}}\\text{Open}$$ Propose that Each $\\mathrm{K}$ channel has $4$ identical activation gates.( $\\mathbb{P}_{\\text{open}}=n$ ) Each $Na$ channel has $3$ avtivation gates( $\\mathbb{P}_{\\text{open}}=m$ ), and $1$ inactivation gate( $\\mathbb{P}_{\\text{open}}=h$ ). Action Potential Stimulas raises the membrane potential. (Depolarization) If membrance potential over the Threshold , voltage-gated sodium channels will open, and due to the sodium concentration gradient (ex > in) , sodium ion flow into the cell. This process raises the membrance potential, and it gets further depolarized. As the membrance become **\"too large\"**, sodium ion channel closes , and after that ( there is a delay ), voltage-gated potassium channel will open. When the membrance potential return to the resting state, potassium channel closes, but as this response takes time, the membrance potential will be lower than the initial voltage. (Hyperpolarization) (※ Resting membrance potential means the equilibrium point between \"electrical gradient\" and \"concentration gradient\".) How the Network can be trained Long-term Synaptic Plasticity Stimulas are passed through a glutamate . Glutamate connects with AMPA receptor and it causes sodium channels opening. If Depolarization occurs, NMDA channel (which was closed by Magnesium) open, and Calcium flows into the cell. The amount of Calcium is Large : LTP(Long-term potentiation) occurs. Increase the AMPA. Small : LTD(Long-term depression) occurs. Decrease the AMPA. Spike-Timing-Depenent Plasticity (Classical) The change in $w_{ji}$ depends on the spike timings In order to perform STDP with differential equatins, an online implementation of STDP is proposed $$ \\begin{aligned} \\tau_+\\frac{dx}{dt} &= -x + a_+(x)\\sum_{t_f}\\delta(t-t_f)\\\\ \\tau_-\\frac{dy}{dt} &= -y + a_-(y)\\sum_{t_n}\\delta(t-t_n)\\\\ \\Longrightarrow \\frac{dw}{dt} &= A_+(w)x(t)\\sum_{t_n}\\delta(t-t_n) - A_-(w)y(t)\\sum_{t_f}\\delta(t-t_f) \\end{aligned} $$ In [11]: from OIST.tutorial1 import STDPsimulation In [12]: time , Results , Info = STDPsimulation ( pre = 10 , post = 30 ) In [13]: fig = plt . figure ( figsize = ( 14 , 6 )) for i , vals in enumerate ( Results ): ax = fig . add_subplot ( 3 , 2 , i + 1 ) ax . plot ( time , vals , color = Info . get ( \"color\" )[ i ]) ax . set_xlabel ( \"time\" ), ax . set_ylabel ( Info . get ( \"label\" )[ i ]), ax . set_title ( Info . get ( \"label\" )[ i ]) plt . tight_layout () plt . show () ※ As \"Pre - Post\" changes... In [14]: pre = 40 for diff in range ( - 40 , 40 ): _ , Results , _ = STDPsimulation ( pre = pre , post = pre - diff ) dws = Results [ - 1 ] dw = dws [ np . argmax ( np . abs ( dws ))] plt . scatter ( diff , dw , color = \"black\" , s = 10 ) plt . grid (), plt . xlabel ( \"$t_ {pre} - t_ {post} $\" , fontsize = 20 ), plt . ylabel ( \"$\\Delta w$\" , fontsize = 20 ) plt . show () Then, with an appropriate firing sequence, the network can be trained!! Take-Home Message Some neuronal behaviors can be mathematically modeled. Networks of neurons has the potential to do different computations. Those networks can be trained. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-1.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-1.html"},{"title":"生物物理学 第7回(小テスト)","text":"c8CQT8vUrmL+rt6PpSAJxQ==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-7-quiz.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-7-quiz.html"},{"title":"Pro.4 Itemset mining algorithm","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-19.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-19.html"},{"title":"Pro.3 Gene Network Inference","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-18.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-18.html"},{"title":"Pro.2 最適行動列アルゴリズム","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-17.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-17.html"},{"title":"Pro.1 配列モチーフ探索","text":"In [7]: import numpy as np Problem Setting Identify the common sequencial features(sequence motif) from large amount of sequences data containing tf-binding regions. DeepBind Link: Paper Software tool \"Deep Learning\" techniques to ascertain the sequence specificities of DNA- and RNA-binding proteins from experimental data . outperforms other state-of-the-art methods. (Published: 27 July 2015) Results are readily visualized as a weighted ensemble of position weight matrices(PWMs) a mutation map that indicates how variations affect binding within a specific sequence. computes a binding score $f(s)$ using four stages: $$f(s) = \\text{Neural Network}_W\\left(\\text{pool}\\left(\\text{rect}_b\\left(\\text{conv}_M(s)\\right)\\right)\\right)$$ Convolution : Scan a set of motif detectors (length=$L$) with parameters $M&#94;{(j)}$ $$\\text{conv}_M(s)_{ij} = \\sum_{k=0}&#94;{K-1}\\sum_{l=0}&#94;{L-1}M&#94;{(j)}_{k,i+l}s_{ki}$$ Rectification : Extract some positions $$\\text{rect}_b(x_{ij}) =\\begin{cases} x_{ij} + b & (\\text{if }x_{ij} + b>0)\\\\0 & (\\text{otherwise})\\end{cases}$$ Pooling : Compute the maximum and average of each $\\text{rect}_b\\left(\\cdot\\right)$ across the sequence. Maximizing : identify the presence of longer motifs . Averaging : identify cumulative effects of short motifs $$\\text{pool}_{\\alpha}(x_{ij}) = \\alpha\\max_i\\left(x_{ij}\\right) + \\left(1-\\alpha\\right)\\underset{i}{\\text{ave}}\\left(x_{ij}\\right)$$ Neural Network : Combines the responses to produce a score. a: Five independent sequences being processed in parallel by single DeepBind model. b: The calibration, training and testing procedure. Implementation In [11]: # from kerasy.Bio.deepbind import DeepBind In [ ]: In [1]: nuc = [ \"A\" , \"C\" , \"G\" , \"T\" ] def nuc_to_code ( nuc ): return { 'A' : [ 1 , 0 , 0 , 0 ], 'C' : [ 0 , 1 , 0 , 0 ], 'G' : [ 0 , 0 , 1 , 0 ], 'T' : [ 0 , 0 , 0 , 1 ], } . get ( nuc , [ 0 , 0 , 0 , 0 ]) def generate_dataset ( n_p , n_n , length , motif , nuc ): m = len ( motif ) y = ([ 1 ] * n_p + [ 0 ] * n_n ) x = [ None ] * ( n_p + n_n ) for i in range ( n_p + n_n ): seq = np . random . choice ( nuc , size = length ) # random seq if i < n_p : # embed motif at random position j = np . random . randint ( length - m + 1 ) for k in range ( m ): seq [ j + k ] = np . random . choice ( nuc , p = motif [ k ]) x [ i ] = '' . join ( seq ) return ( x , y ) motif = [[ 0.0 , 1.0 , 0.0 , 0.0 ], # C [ 0.5 , 0.0 , 0.0 , 0.5 ], # A/T [ 0.0 , 0.5 , 0.5 , 0.0 ], # C/G [ 0.0 , 0.0 , 1.0 , 0.0 ], # G [ 0.0 , 0.0 , 0.0 , 1.0 ]] # T seq_len = 20 np_train = 1000 nn_train = 1000 np_test = 100 nn_test = 100 In [2]: x_train , y_train = generate_dataset ( np_train , nn_train , seq_len , motif , nuc ) x_test , y_test = generate_dataset ( np_test , nn_test , seq_len , motif , nuc ) In [ ]: - [ Enhanced ]( https : // arxiv . org / pdf / 1611.05777 . pdf ) In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-16.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-16.html"},{"title":"Ex.15 Neural Network","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-15.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-15.html"},{"title":"Ex.14 Brownian motion","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-14.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-14.html"},{"title":"Ex.13 Sparse Modeling","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-13.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-13.html"},{"title":"Ex.12 Order Statistics","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-12.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-12.html"},{"title":"Ex.11 Data Assimilation","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-11.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-11.html"},{"title":"Ex.10 Expectation Maximization Algorithm","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-10.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-10.html"},{"title":"Ex.9 Kullback-Leibler Divergence","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-9.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-9.html"},{"title":"Ex.8 Multivariate Normal Distribution","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-8.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-8.html"},{"title":"Ex.7 Positive Definite Symmetric Matrix","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-7.html"},{"title":"Ex.6 Multinomial Distribution","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-6.html"},{"title":"Ex.5 Categorical Distribution","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-5.html"},{"title":"Ex4. Exponential Distribution","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-4.html"},{"title":"EX3. Law of Large Numbers","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-3.html"},{"title":"EX2. Characteristic function","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-2.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-2.html"},{"title":"EX1. Covariance","text":"解答 1 $$ \\begin{aligned} \\mathbb{E}\\left(\\left(X-\\mu_X\\right)\\left(Y-\\mu_Y\\right)\\right) &= \\mathbb{E}\\left(XY - \\mu_YX-\\mu_XY + \\mu_X\\mu_Y\\right)\\\\ &= \\mathbb{E}\\left(XY\\right) - \\mu_Y\\mathbb{E}(X) - \\mu_X\\mathbb{E}(Y) + \\mu_X\\mu_Y\\\\ &= \\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\quad (\\because\\mu_X=\\mathbb{E}(X),\\mu_Y=\\mathbb{E}(Y)) \\end{aligned} $$ 2 連続型確率変数の場合で証明する。（離散型は \\(\\int\\rightarrow\\sum\\) ） $$ \\begin{aligned} \\mathbb{E}(XY) &= \\int_{x}\\int_{y} xy\\mathbb{P}(X=x,Y=y)dxdy\\\\ &= \\int_{x}\\int_{y} xy\\mathbb{P}(X=x)\\mathbb{P}(Y=y)dxdy\\quad(\\because X,Y: \\text{independent})\\\\ &= \\int_{x} x\\mathbb{P}(X=x)dx\\int_{y}y\\mathbb{P}(Y=y)dy\\\\ &= \\mathbb{E}(X)\\mathbb{E}(Y) \\end{aligned} $$ となるので、 \\((1)\\) より、 $$ \\begin{aligned} \\mathrm{Cov}(X,Y) &= \\mathbb{E}\\left(\\left(X-\\mu_X\\right)\\left(Y-\\mu_Y\\right)\\right)\\\\ &=\\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\\\ &=0 \\end{aligned} $$ 3 $$ \\begin{aligned} \\mathrm{Var}(X+Y) &= \\mathbb{E}\\left((X+Y)&#94;2\\right) - \\left(\\mathbb{E}\\left(X+Y\\right)\\right)&#94;2\\\\ &= \\mathbb{E}\\left(X&#94;2 + 2XY + Y&#94;2\\right) - \\left(\\mathbb{E}(X) + \\mathbb{E}(Y)\\right)&#94;2 \\\\ &= \\left(\\mathbb{E}(X&#94;2) - \\mathbb{E}(X)&#94;2\\right) + \\left(\\mathbb{E}(Y&#94;2) - \\mathbb{E}(Y)&#94;2\\right) + 2\\left(\\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\right)\\\\ &= \\mathrm{Var}(X) + \\mathrm{Var}(Y) + 2\\mathrm{Cov}(X,Y) \\end{aligned} $$ 4 $$ \\begin{aligned} \\mathrm{Cov}\\left(aX+bY,cZ+dW\\right) &= \\mathbb{E}\\left(\\left(aX+bY\\right)\\left(cZ+dW\\right)\\right) - \\mathbb{E}\\left(aX+bY\\right)\\mathbb{E}\\left(cZ+dW\\right)\\\\ &= \\left(\\mathbb{E}\\left(aXcZ\\right) + \\cdots + \\mathbb{E}\\left(bYdW\\right)\\right) - \\left(\\mathbb{E}(aX)\\mathbb{E}(cZ) + \\cdots + \\mathbb{E}(bY)\\mathbb{E}(dW) \\right)\\\\ &= \\left\\{\\mathbb{E}\\left(aXcZ\\right) - \\mathbb{E}(aX)\\mathbb{E}(cZ) \\right\\} + \\cdots + \\left\\{\\mathbb{E}\\left(bYdW\\right) - \\mathbb{E}(bY)\\mathbb{E}(dW) \\right\\}\\\\ &= ac\\left\\{\\mathbb{E}\\left(XZ\\right) - \\mathbb{E}(X)\\mathbb{E}(Z)\\right\\} + \\cdots + bd\\left\\{\\mathbb{E}\\left(YW\\right) - \\mathbb{E}(Y)\\mathbb{E}(W)\\right\\}\\\\ &= ac\\mathrm{Cov}(X,Z) + ad\\mathrm{Cov}(X,W) + bc\\mathrm{Cov}(Y,Z) + bd\\mathrm{Cov}(Y,W) \\end{aligned} $$ 5 $$ \\begin{aligned} \\mathrm{Cov}\\left(X,Y\\right)&#94;2 &= \\left(\\sum_{x,y}(x-\\mu_X)(y-\\mu_Y)\\mathbb{P}(X=x,Y=y)\\right)&#94;2\\\\ &= \\left(\\sum_{z,w}zw\\mathbb{P}(X=x,Y=y)\\right)&#94;2\\\\ &= \\left(\\sum_{z,w}zwP_{zw}\\right)\\left(\\sum_{z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime}w&#94;{\\prime}P_{z&#94;{\\prime}w&#94;{\\prime}}\\right)\\\\ &=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}zwz&#94;{\\prime}w&#94;{\\prime}P_{zw}P_{z&#94;{\\prime}w&#94;{\\prime}}\\quad\\left(\\because\\text{expansion}\\right)\\\\ \\mathrm{Var}(X)\\mathrm{Var}(Y) &= \\left(\\sum_{x}\\left(x-\\mu_X\\right)&#94;2\\mathbb{P}(X=x)\\right)\\left(\\sum_{y}\\left(y-\\mu_Y\\right)&#94;2\\mathbb{P}(Y=y)\\right)\\\\ &= \\left(\\sum_{x,y}\\left(x-\\mu_X\\right)&#94;2\\mathbb{P}(X=x,Y=y)\\right)\\left(\\sum_{x,y}\\left(y-\\mu_Y\\right)&#94;2\\mathbb{P}(X=x,Y=y)\\right)\\\\ &= \\left(\\sum_{z,w}z&#94;2P_{x,y}\\right)\\left(\\sum_{z,w}w&#94;2P_{x,y}\\right)\\\\ &=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\left(=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\right)\\\\ &=\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}+\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}} \\end{aligned} $$ と変形できるので、 $$ \\begin{aligned} \\mathrm{Var}(X)\\mathrm{Var}(Y) - \\mathrm{Cov}\\left(X,Y\\right)&#94;2 &= \\left(\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}+\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\right) - \\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}zwz&#94;{\\prime}w&#94;{\\prime}P_{zw}P_{z&#94;{\\prime}w&#94;{\\prime}}\\\\ &= \\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}\\left(z&#94;2w&#94;{\\prime2} + z&#94;{\\prime2}w&#94;2 - 2zwz&#94;{\\prime}w&#94;{\\prime}\\right)P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\\\ &=\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}\\left(zw&#94;{\\prime} - z&#94;{\\prime}w\\right)&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\\\ &\\geq0\\\\ \\therefore\\mathrm{Var}(X)\\mathrm{Var}(Y) &\\geq \\mathrm{Cov}\\left(X,Y\\right)&#94;2 \\end{aligned} $$ memo 任意の \\(n,m\\) に対して以下が成り立つ時、等号条件が成立（？） $$\\mathbb{P}\\left(X=x_n,Y=y_m\\right) = \\mathbb{P}\\left(X=x_n\\right)\\delta_{nm}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-1.html"},{"title":"Neural Networks","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開)","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-5.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-5.html"},{"title":"レポート課題5(10/31出題)","text":"K2o8twXlMVbE8kDlXbmH4w==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report5.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report5.html"},{"title":"確率と統計(1)基礎概念","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 In [1]: import numpy as np import matplotlib.pyplot as plt 講義概要 確率変数と確率分布 確率分布の性質を表す指標 同時確率 条件付き確率 確率変数と確率分布 用語 意味 確率(probability) 事象の起こりやすさを定量的に示す $0$ から $1$ の値 確率変数(random variable) その変数に関する任意の事象に対して確率が定義されている変数 確率分布(probability distribution) 確率変数に関する各事象に対してその確率を与える関数 離散型(discrete type)確率変数 ある可算集合 $\\mathcal{X}$ の中のいずれかの値をとる確率変数 確率質量関数(probability mass function) $f(x)$ $$f(x)\\geq0,\\quad \\sum_{x\\in\\mathcal{X}}f(x) = 1$$ 連続型(continuous type)確率変数 連続値をとる確率変数 確率密度関数(probability density function) $f(x)$ $$f(x)\\geq0,\\quad\\int_{-\\infty}&#94;{\\infty}f(x)dx=1$$ 累積分布関数(cumulative distribution function) $F(x)$ $$F(x) = P(X\\leq x)=\\int_{-\\infty}&#94;{x}f(u)du\\ \\text{ or } \\sum_{i:i\\leq x}f(i)$$ 確率分布の性質を表す指標 用語 数式 説明 期待値(expectation) $$E(X) = \\sum_xxf(x)\\ \\text{ or }\\int xf(x)dx$$ 確率変数の値の平均（正確には確率による重み付きの平均） 確率変数を代表する値を表す指標 ※ 外れ値(outlier)に敏感 中央値(median) $P(X\\leq x)=1/2$ を満たす $x$ データを大きい順（または小さい順）に並べたときの真ん中の値。 最頻値(mode) $f(x)$ を最大にする $x$ データの中で最も頻度が高い値 分散(variance) $$\\begin{aligned}V(X) &= E\\left\\{(X-E[X])&#94;2\\right\\}\\\\&=E\\left\\{X&#94;2-2E[X]X+(E[X])&#94;2\\right\\}\\\\&=E[X&#94;2]-E\\left[2E[X]X\\right]+(E[X])&#94;2\\\\&=E[X&#94;2]-2E[X]E[X]+(E[X])&#94;2\\\\&=E[X&#94;2]-(E[X])&#94;2\\end{aligned}$$ 確率変数の散らばり具合を表す指標 標準偏差(standard devariation) $\\sqrt{V(X)}$ 分散の平方根 標準化(standardization) $$Z=\\frac{X-E(X)}{\\sqrt{V(X)}}$$ 任意の確率変数 $X$ に対して、期待値 $0$、分散 $1$ の確率変数 $Z$ が定義できる。 歪度(skewness) $$\\alpha_3 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;3\\right\\}}{\\left\\{V(X)\\right\\}&#94;{3/2}}$$ 確率変数の非対称性を表す。 劣度(kurtosis) $$\\beta_4 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;4\\right\\}}{\\left\\{V(X)\\right\\}&#94;{2}}-3$$ 確率分布の尖り具合を表す。 積率(moment) $$\\mu_r = E\\left[X&#94;r\\right]$$ 期待値・分散・歪度・劣度などを表すパラメータ。全ての次数の積率を指定すれば、確率分布を一位に決定することができる。（左は $r$ 次の積率） 積率母関数(moment generating function) $$M_X(t) = E[e&#94;{tX}]=\\begin{cases}\\sum_xe&#94;{tx}f(x)\\\\\\int e&#94;{tx}f(x)dx\\end{cases}\\\\ M_X&#94;{(r)}(0)=\\mu_r$$ 全ての次数の積率を生成する関数。存在しない（無限大に発散する）こともある。 In [2]: def computation_variance ( n = 10000 , mu = 0 , sigma = 1 , seed = None ): X = np . random . RandomState ( seed ) . normal ( loc = mu , scale = sigma , size = n ) EX = sum ( X ) / n EX2 = sum ( X ** 2 ) / n # Calculate variance in 3 ways. var1 = np . var ( X ) var2 = sum (( X - EX ) ** 2 ) / n var3 = EX2 - EX ** 2 print ( \"`np.var(X)` =\" , var1 ) print ( \"E{(X - E[X])&#94;2} =\" , var2 ) print ( \"E[X&#94;2] - (E[X])&#94;2 =\" , var3 ) In [3]: computation_variance ( mu = 100 , seed = 0 ) `np.var(X)` = 0.9752679753477969 E{(X - E[X])&#94;2} = 0.9752679753477979 E[X&#94;2] - (E[X])&#94;2 = 0.9752679752218683 In [4]: computation_variance ( mu = 1e8 , seed = 1 ) `np.var(X)` = 0.9975731614280597 E{(X - E[X])&#94;2} = 0.9975731614281662 E[X&#94;2] - (E[X])&#94;2 = -98.0 ※ 「二乗の平均 - 平均の二乗」は丸め誤差の影響を受けやすい 歪度(skewness) 確率変数の非対称性を表す。 $$\\alpha_3 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;3\\right\\}}{\\left\\{V(X)\\right\\}&#94;{3/2}}$$ In [5]: def plot_skewness ( ax = None , seed = None , n = 100 ): if ax == None : fig , ax = plt . subplots () X = np . random . RandomState ( seed ) . randint ( low = 1 , high = 7 , size = n ) ax . hist ( X , density = True , bins = 6 , color = \"blue\" , align = 'left' ) EX = np . mean ( X ) VX = np . var ( X ) skewness = np . mean (( X - EX ) ** 3 ) / VX ** ( 3 / 2 ) ax . set_title ( f \"skewness = {skewness:.3f} \" ) return ax In [6]: fig = plt . figure ( figsize = ( 12 , 3 )) for i , seed in enumerate ([ 44756 , 96331 , 76432 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plot_skewness ( ax = ax , seed = seed ) plt . show () 劣度(kurtosis) 確率分布の尖り具合を表す。 $$\\beta_4 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;4\\right\\}}{\\left\\{V(X)\\right\\}&#94;{2}}-3$$ In [7]: X = np . linspace ( - 5 , 5 , 10000 ) In [8]: f1 = lambda x : 1 / 1250 * ( 5 - abs ( x )) ** 4 f2 = lambda x , mu = 0 , sigma = 1 : 1 / np . sqrt ( 2 * np . pi * sigma ** 2 ) * np . exp ( - ( x - mu ) ** 2 / 2 * sigma ** 2 ) f3 = lambda x : 1 / 4 if abs ( x ) <= 2 else 0 In [9]: def plot_kurtosis ( X , func , ax = None ): if ax == None : fig , ax = plt . subplots () Y = np . array ([ func ( x ) for x in X ]) ax . plot ( X , Y , color = \"red\" ) Y /= sum ( Y ) EX = np . sum ( Y * X ) VX = np . sum ( Y * ( X - EX ) ** 2 ) kurtosis = np . sum ( Y * ( X - EX ) ** 4 ) / VX ** 2 - 3 ax . set_title ( f \"kurtosis = {kurtosis:.3f} \" ) return ax In [10]: fig = plt . figure ( figsize = ( 12 , 3 )) for i , func in enumerate ([ f1 , f2 , f3 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plot_kurtosis ( X = X , func = func , ax = ax ) ax . set_xlim ( - 5 , 5 ); ax . set_ylim ( 0 , 1 ) plt . show () 同時確率 用語 数式 説明 同時確率(joint probability) 複数の確率変数が関わる確率 同時確率質量関数 $$P(X=x,Y=y) = f(x,y)\\\\f(x,y)\\geq0,\\quad\\sum_{x\\in\\mathcal{X}}\\sum_{y\\in\\mathcal{Y}}f(x,y)=1$$ 離散型の同時確率 同時確率密度関数 $$P(a\\leq X\\leq b,c\\leq Y\\leq d) = \\int_c&#94;d\\int_a&#94;bf(x,y)dxdy\\\\f(x,y)\\geq0,\\quad\\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x,y)dxdy=1$$ 連続型の同時確率 共分散 $X$ と $X&#94;{\\prime}$ の 共分散(covariance) ： $$\\mathrm{Cov}(X,X&#94;{\\prime}) = E\\left[(X-E[X])(X&#94;{\\prime}-E[X&#94;{\\prime}])\\right]$$ $\\mathrm{Cov}(X,X&#94;{\\prime})>0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 同傾向 $\\mathrm{Cov}(X,X&#94;{\\prime})<0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 逆傾向 $\\mathrm{Cov}(X,X&#94;{\\prime})=0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 無関係 共分散は、以下の形でも表されるので、A社の株価を $X$、B社の株価を $X&#94;{\\prime}$ とすると、以下の解釈も可能 $$V(X+X&#94;{\\prime}) = V(X) + V(X&#94;{\\prime}) + 2\\mathrm{Cov}(X,X&#94;{\\prime})$$ $\\mathrm{Cov}(X,X&#94;{\\prime})>0\\Longleftrightarrow V(X+X&#94;{\\prime})>V(X)+V(X&#94;{\\prime})$ なので、A,B両者の株を買うと分散が 拡大 する → 変動リスクが増大し、資産価値は不安定 $0>\\mathrm{Cov}(X,X&#94;{\\prime})\\Longleftrightarrow V(X)+V(X&#94;{\\prime})>V(X+X&#94;{\\prime})$ なので、A,B両者の株を買うと分散が 縮小 する → 変動リスクが抑制され、資産価値は安定 独立性 全ての $(x,y)$ で $p_{X,Y}(x,y) = p_X(x)p_Y(y)$ の時、$X$ と $Y$ は互いに 独立(independent) 2つの確率変数が独立の時、 積の期待値は各々の期待値の積と一致 $$E[XY] = E[X]E[Y]$$ 和の積率母関数は各々の積率母関数の積と一致 $$M_{X+Y}(t) = M_X(t)M_Y(t)$$ ２つの確率変数は無相関 $$\\mathrm{Cov}(X,Y) = 0$$ 2つの確率変数が独立ならば無相関であるが、逆は一般には正しくない。 条件付き確率 ベイズの定理(Bayes' theorem) $$P(X|Y) = \\frac{P(Y|X)P(X)}{P(Y)}$$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-5.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-5.html"},{"title":"生物物理学 第6回","text":"講師： 樋口秀男 エネルギー生産系の仕組み（細胞内小器官） 光関連の現象 細胞・器官 たんぱく質等 眼で見る 視細胞（桿体、錐体細胞） ロドプシン等 光合成 葉緑体 光システム（タンパク質複合体） 蛍の光 発色細胞 ルシフェリン+ルシフェラーゼ クラゲの光 発色細胞 エコーリン、GFP(green fluorescence protein) 日焼け 色素形成細胞（メラノサイト） メラニン（チロシンの重合体） 体内時計 目のメラノプシン発現網膜神経細胞 メラノプシン ATPを作るプロセス 光合成(photosynthesis) は、高等植物や緑藻（青色細菌）が 葉緑体（クロロプラスト） 内で行う、二酸化炭素の固定反応である。 この過程で水が酸素に酸化され、二酸化炭素は還元されて糖になる。 光合成は大きく2つの段階に区別される。 1つは 明反応 と呼ばれ、光のエネルギーを利用して水が酸素に酸化されるとともに、二酸化炭素の還元に必要な \\(\\mathrm{NADPH}_2&#94;+\\) と \\(\\mathrm{ATP}\\) をつくりだす。 もう1つの段階は 暗反応 と呼ばれ、 \\(\\mathrm{NADPH}_2&#94;+\\) と \\(\\mathrm{ATP}\\) を利用して二酸化炭素から種々の糖がつくられる。 クロロプラスト中の大部分のクロロフィルは 光を集めるアンテナ の役割を果たす。吸収された光子のエネルギーはアンテナクロロフィル間を励起エネルギーとして移動し、 アンテナクロロフィル よりも励起エネルギーの 低い 反応中心クロロフィル に集められる。 FRET(Fluorescence resonance energy transfer) $$\\text{Transfer Efficiency at two rates: } E= \\frac{k_T}{k_T+k_F} = \\frac{1}{1 + \\frac{k_F}{k_T}}$$ \\(k_T\\) ：Donor から Acceptor に移動する速度 \\(k_F\\) ：Donor が吸収する速度 Chl(from) Chl(to) 移動効率（移動距離） b(F) a(A) 高 b(F) b(A) 中 a(F) a(A) 中 a(F) b(A) 低 幅 \\(L\\) の中の電子のエネルギー準位： \\(E_n = \\frac{1}{8m}\\left(\\frac{nh}{L&#94;{\\prime}}\\right)&#94;2\\) フェミルの黄金律 時間的に変化しない弱い相互作用（摂動）のある電子系が、あるエネルギー固有状態から別のエネルギー固有状態へ移る際の単位時間あたりの遷移確率は、摂動法（時間で展開）の最低次数として近似計算できる。 遷移速度 \\(k_T\\) は、エネルギー固有状態の単位時間あたりの遷移確率である。 $$\\Psi_{\\mathrm{Da}}\\Psi_{\\mathrm{Ab}}\\underset{k_T}{\\longrightarrow}\\Psi_{\\mathrm{Db}}\\Psi_{\\mathrm{Aa}}$$ Da: Active state of Donor Ab: Ground state of Acceptor 光合成の概要 水を分解して、電子を膜間に入れる。 光を用いて電子の酸化還元電位を上げる。 酸化還元電位を利用してチラコイド外のプロトンを内側に輸送する。 内側のプロトンのケミカルポテンシャルを利用してATPを合成する。 まとめ 共役長が長くなる と吸収波長は長くなり、可視光の利用が可能となる。 分子間距離が近いと エネルギー移動や電子移動 が起こる。電子移動の方向は、酸化還元電位に依存する。 エネルギーを 酸化還元電位 に交換する（逆も） 生物は、 多数のタンパク質が 上記1-3の原理を巧みに利用して、光化学反応（葉緑体内の光合成）や電子伝達（ミトコンドリア内）の機能を行う。 ATP を合成するF1,F0は高効率でATPを合成する。特に、F1は仕事効率が約100%である。 .prompt { /* This is for jupyter blog.*/ min-width: 0; /* This padding is tuned to match the padding on the CodeMirror editor. */ padding: 0em 0.4em 0em 0em; margin: 0px; font-family: monaco; } /*蛍光ペン(pink)*/ .marker-pink { color: #c45a5a; background: linear-gradient(transparent 70%, #ff66ff 60%); font-weight: bold; } /*蛍光ペン(blue) & hover info*/ .marker-info { color: #5C7DC4; background: linear-gradient(transparent 70%, #66FFCC 60%); font-weight: bold; position: relative; cursor: pointer; } .marker-info:hover:before { opacity: 1; z-index: 2; } .marker-info:before { content: attr(aria-label); opacity: 0; position: absolute; top: 30px; right: -90px; font-size: 14px; width: 300px; padding: 10px; color: #fff; background-color: #555; border-radius: 3px; pointer-events: none; } /* 枠囲み */ .frame { border: solid 1.0px #000000; padding: 0.5em 1em; margin: 2em 0; } /* 暗記用 question box */ span .qbox{ display: none; } span.qbox-wrapper:hover .qbox-default{ display: none; } span.qbox-wrapper:hover .qbox{ display: inline; } .qbox-wrapper{ font-weight: bold; padding: 5px 10px; border-radius: 5px; border: solid 2px #000000; margin: 5px } .qbox-wrapper:hover{ text-shadow: 0px 0px 6px rgba(255, 255, 255, 1); -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); transition: all 0.4s ease 0s; } /* 画像吹き出し */ .balloon { display: table; width: 100%; } .balloon_img { display: table-cell; vertical-align: middle; width: 50%; padding-right: 10px; } .balloon_comment { border: #83274e solid 4px; position: relative; background: #fff; padding: 12px; border-radius: 13px; display: block } .balloon_comment::before { content: \"\"; position: absolute; border-right: 23px solid #83274e; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -23px; } .balloon_comment::after { content: \"\"; position: absolute; border-right: 24px solid #fff; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -17px; } if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-6.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-6.html"},{"title":"Introduction","text":"講師： 木立 尚孝 （ 生物データマイニング論 も担当されている方） 計算演習 # リンク 問題 1 Covariance 2 Characteristic function 3 Law of Large Numbers 4 Exponential Distribution 5 Categorical Distribution 6 Multinomial Distribution 7 Positive Definite Symmetric Matrix 8 Multivariate Normal Distribution 9 Kullback-Leibler Divergence 10 Expectation Maximization Algorithm 11 Data Assimilation 12 Order Statistics 13 Sparse Modeling 14 Brownian motion 15 Neural Network プログラミング演習 配列モチーフ探索 最適行動列アルゴリズム Gene Network Inference Itemset mining algorithm","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-0.html"},{"title":"頻度パターンマイニング","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 参考資料： 頻出パターン発見アルゴリズム入門 -アイテム集合からグラフまで- Data Mining A formal study of efficient methods for extracting interesting rules and patterns from massive data. Frequent itemset mining. Closed pattern mining. Structured data mining. Itemset Mining Frequent Itemset Mining Closed Itemset Mining Closure Extension LCM Itemset Mining Frequent Itemset Mining Finding all \"frequent\" sets of elements(items) appearing $\\sigma$ times or more in a database. Definitions Database A set $\\Sigma = \\{1,\\ldots,n\\}$ of items(elements). Tramsaction database A set $T=\\{t_1,\\ldots,t_m\\}$ of subsets of $\\Sigma$ Each subset $t\\subseteq\\Sigma$ is called a transaction Frequent sets Itemset $X$ appears in transaction t: $X\\subseteq t$ Occurrence of $X$ in database $T$: $$\\mathrm{Occ}(X,T) = \\left\\{t\\in T: X\\subseteq t\\right\\}$$ Frequency of $X$: $\\mathrm{Fr}(X,T) = |\\mathrm{Occ}(X,T)|$ Minimum support (minsup): $0\\leq\\sigma\\leq|T|$ $X$ is frequent in $T$ if $\\mathrm{Fr}(X,T)\\geq\\sigma$ Market Basket Data Popular application of itemset mining. Business and Market data analysis. ※ Visit \"The Instacart Online Grocery Shopping Dataset 2017\" and Download \"instacart_2017_05_01\" Folder. In [1]: ! tree instacart_2017_05_01 instacart_2017_05_01 ├── aisles.csv ├── departments.csv ├── order_products__prior.csv ├── order_products__train.csv ├── orders.csv └── products.csv 0 directories, 6 files In [2]: import numpy as np import pandas as pd products.csv In [3]: df_products = pd . read_csv ( \"./instacart_2017_05_01/products.csv\" ) df_products . head ( 3 ) Out[3]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } product_id product_name aisle_id department_id 0 1 Chocolate Sandwich Cookies 61 19 1 2 All-Seasons Salt 104 13 2 3 Robust Golden Unsweetened Oolong Tea 94 7 In [4]: print ( f \"`products.csv` data num: {len(df_products)}\" ) `products.csv` data num: 49688 In [5]: id2name = dict ( zip ( df_products . product_id , df_products . product_name )) order_products__train.csv In [6]: df_order_products = pd . read_csv ( \"./instacart_2017_05_01/order_products__train.csv\" ) df_order_products . head ( 3 ) Out[6]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } order_id product_id add_to_cart_order reordered 0 1 49302 1 1 1 1 11109 2 1 2 1 10246 3 0 In [7]: N_transactions_total = len ( df_order_products . groupby ( \"order_id\" )) print ( f \"Total number of transactions: {N_transactions_total} \" ) Total number of transactions: 131209 Extract Only N products In [8]: N = 10 In [9]: extracted_ids = df_order_products . groupby ( \"product_id\" ) . size () . reset_index () . sort_values ( by = 0 , ascending = False ) . product_id [: N ] . values In [10]: # Only focus on N products. df_order_products_extracted = df_order_products [ df_order_products . product_id . apply ( lambda x : x in extracted_ids )] In [11]: N_transactions_extracted = len ( df_order_products_extracted . groupby ( \"order_id\" )) print ( f \"Transactions: {N_transactions_extracted} / {N_transactions_total} \" ) Transactions: 59887/131209 In [12]: for i , extracted_id in enumerate ( extracted_ids ): print ( f \"No.{i+1:>0{len(str(N))}}: {id2name[extracted_id]} \" ) No.01: Banana No.02: Bag of Organic Bananas No.03: Organic Strawberries No.04: Organic Baby Spinach No.05: Large Lemon No.06: Organic Avocado No.07: Organic Hass Avocado No.08: Strawberries No.09: Limes No.10: Organic Raspberries In [13]: df_product_id_OneHot = pd . get_dummies ( df_order_products_extracted . product_id ) In [14]: df_order_OneHot = pd . concat ([ df_order_products_extracted . order_id , df_product_id_OneHot ], axis = 1 ) In [15]: df = df_order_OneHot . groupby ( \"order_id\" ) . sum () . reset_index () In [16]: df . head ( 3 ) Out[16]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } order_id 13176 16797 21137 21903 24852 26209 27966 47209 47626 47766 0 1 1 0 0 0 0 0 0 1 0 0 1 96 0 0 0 0 0 0 1 0 0 0 2 98 1 0 0 0 0 0 1 0 0 0 In [17]: database = np . array ( df [ df . columns [ 1 :]]) In [18]: database Out[18]: array([[1, 0, 0, ..., 1, 0, 0], [0, 0, 0, ..., 0, 0, 0], [1, 0, 0, ..., 0, 0, 0], ..., [0, 0, 1, ..., 0, 0, 0], [0, 0, 0, ..., 0, 0, 0], [0, 0, 1, ..., 0, 0, 0]], dtype=uint8) In [19]: N , M = database . shape In [20]: print ( f \"n_samples: {N} \" ) print ( f \"n_features: {M} \" ) n_samples: 59887 n_features: 10 In [21]: from kerasy.search.itemset import FrequentSet In [22]: model = FrequentSet ( threshold = 100 ) In [23]: model . fit ( database ) In [24]: # Frequent Itemset. (frq >= threshold) model . all Out[24]: [None, array([0]), array([0, 1]), array([0, 1, 3]), array([0, 2]), array([0, 2, 3]), array([0, 2, 3, 6]), array([0, 2, 3, 7]), array([0, 2, 5]), array([0, 2, 6]), array([0, 2, 6, 7]), array([0, 2, 7]), array([0, 2, 8]), array([0, 2, 9]), array([0, 3]), array([0, 3, 5]), array([0, 3, 6]), array([0, 3, 6, 7]), array([0, 3, 7]), array([0, 3, 8]), array([0, 3, 9]), array([0, 5]), array([0, 5, 6]), array([0, 5, 7]), array([0, 5, 8]), array([0, 5, 9]), array([0, 6]), array([0, 6, 7]), array([0, 6, 8]), array([0, 6, 9]), array([0, 7]), array([0, 7, 8]), array([0, 8]), array([0, 8, 9]), array([0, 9]), array([1]), array([1, 3]), array([1, 3, 4]), array([1, 3, 9]), array([1, 4]), array([1, 4, 5]), array([1, 4, 8]), array([1, 4, 9]), array([1, 5]), array([1, 5, 8]), array([1, 6]), array([1, 7]), array([1, 8]), array([1, 8, 9]), array([1, 9]), array([2]), array([2, 3]), array([2, 3, 4]), array([2, 3, 5]), array([2, 3, 6]), array([2, 3, 7]), array([2, 3, 8]), array([2, 3, 9]), array([2, 4]), array([2, 4, 5]), array([2, 4, 6]), array([2, 4, 7]), array([2, 4, 8]), array([2, 4, 9]), array([2, 5]), array([2, 5, 6]), array([2, 5, 7]), array([2, 5, 8]), array([2, 5, 9]), array([2, 6]), array([2, 6, 7]), array([2, 6, 8]), array([2, 6, 9]), array([2, 7]), array([2, 7, 8]), array([2, 8]), array([2, 8, 9]), array([2, 9]), array([3]), array([3, 4]), array([3, 4, 5]), array([3, 4, 5, 8]), array([3, 4, 6]), array([3, 4, 7]), array([3, 4, 8]), array([3, 4, 8, 9]), array([3, 4, 9]), array([3, 5]), array([3, 5, 7]), array([3, 5, 8]), array([3, 5, 8, 9]), array([3, 5, 9]), array([3, 6]), array([3, 6, 7]), array([3, 6, 8]), array([3, 6, 9]), array([3, 7]), array([3, 7, 8]), array([3, 8]), array([3, 8, 9]), array([3, 9]), array([4]), array([4, 5]), array([4, 5, 7]), array([4, 5, 8]), array([4, 5, 8, 9]), array([4, 5, 9]), array([4, 6]), array([4, 6, 8]), array([4, 6, 9]), array([4, 7]), array([4, 7, 8]), array([4, 8]), array([4, 8, 9]), array([4, 9]), array([5]), array([5, 6]), array([5, 6, 7]), array([5, 6, 8]), array([5, 7]), array([5, 7, 8]), array([5, 8]), array([5, 8, 9]), array([5, 9]), array([6]), array([6, 7]), array([6, 8]), array([6, 8, 9]), array([6, 9]), array([7]), array([7, 8]), array([8]), array([8, 9]), array([9])] Association Rule Mining Confidence : $\\mathrm{Supp}(A\\text{ and }B)/\\mathrm{Supp}(A)$ (Probability of $B$, Given $A$) What item is likely to be bought when $A$ is bought. Search: large support, confidence large Post-processing of itemset mining Summary Itemset mining is the simplest of all mining algorithms. Need to maintain occurrence of each pattern in database. Tree by lexicographical order is (implicitly) used. Closed Itemset Mining [Problem] in Frequent Pattern Mining Huge Number of frequent itemsets Hard to analyze Most of them are similar [Solution] Closed Pattern Mining Find only closed patterns Observation : Most frequent itemset $X$ can be extended without changing occurrence by adding new elements. definition : An itemset $X$ is a \"closed set\" if and only if there is no proper superset of $X$ with the same frequency (thus the same occurrence set). A closed itemset is the maximal set among all itemsets with the same occurrences. Equivalence class $[X] =\\left\\{Y | \\mathrm{Occ}(X)=\\mathrm{Occ}(Y)\\right\\}$ Implementation. Brute-force: Stupid Baseline ALGORITHM: Bruteforcel First, generate all frequent itemsets. Check them one by one via maximality test Finally, extract all closed sets Maximality test for each candidate frequent set $X$ Add some element $e$ in $\\Sigma$ to $X$ If $\\mathrm{Freq}(X U \\{e\\})$ is properly less than $\\mathrm{Freq}(X)$ then reject $X$. ※ Number of patterns usually exponential to input size, so Brute-force is exponential delay w.r.t. pattern size. Reverse Search A general mathematical framework to design enumeration algorithms. Can be used to prove the correctness of the algorithm. Popular in computational geometry. Data mining algorithms can be explained in remarkable simplicity. How to do reverse Search? Native Backtracking → Duplication Duplication chack by Marking → Exponential Memory. Reduction Map : Mapping from a children to the parent. LCM(Linear Time Closed Sets Miner) Key Algorithm: Prefix Preserving Closure Extension = Children generation from the reduction map. 飽和集合列挙アルゴリズムを用いた大規模データベースからのルール発見手法 Python Implementation: I'm doing now XD Summary Closure Extension: Jump from closed set to closed set. LCM: Linear Delay. Very fast in practice, too (Winner of FIMI'04(Frequent Itemset Mining Implementation Workshop)). Relation to clique enumeration. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-5.html"},{"title":"機械学習概論","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 教師付き学習(Supervised learning) 大量の教師データがあれば、DNNですごい性能を出せるので、今の研究の主流は以下。 transfer learning (転移学習) few-shot learning (一枚だけで汎化性能を得る。) zero-shot learning (文字の情報を用いて画像の識別を行う。) メタ学習 (どうやって学習すれば良いかを学ぶ。) Nearest Neighbor法 決定木(decision tree) Support Vector Machine(SVM) アンサンブル学習 Neural Network Nearest Neighbor法 In [2]: N = 150 ; K = 3 In [3]: data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 1 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [4]: cls = np . concatenate ([ np . full ( shape = int ( N / 3 ), fill_value = 0 ), np . full ( shape = int ( N / 3 ), fill_value = 1 ), np . full ( shape = int ( N / 3 ), fill_value = 2 ), ]) In [5]: xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [6]: # Nearest Neighbor Zs = np . asarray ([ cls [ np . argmin ( np . sum ( np . square ( xy - data ), axis = 1 ))] for xy in XYs ], dtype = int ) . reshape ( Xs . shape ) In [7]: plt . figure ( figsize = ( 8 , 6 )) plt . scatter ( x , y , c = cls , s = 50 ) plt . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) plt . title ( \"Nearest Neighbor\" ), plt . xlim ( xmin , xmax ), plt . ylim ( ymin , ymax ) plt . xticks ([]), plt . yticks ([]) plt . show () 決定木(decision tree) $M$ 個のクラスに分割したとして、 $$\\text{Information gain} = \\text{Entropy}(S) - \\left\\{\\text{Entropy}(S_1) + \\cdots + \\text{Entropy}(S_M)\\right\\}$$ が最大になるように条件を設定する。 In [8]: from kerasy.ML.tree import DecisionTreeClassifier In [9]: N = 150 ; K = 3 In [10]: data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 1 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [11]: cls = np . concatenate ([ np . full ( shape = int ( N / 3 ), fill_value = 0 ), np . full ( shape = int ( N / 3 ), fill_value = 1 ), np . full ( shape = int ( N / 3 ), fill_value = 2 ), ]) In [12]: xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [13]: model = DecisionTreeClassifier ( criterion = \"gini\" , max_depth = 3 , random_state = 0 ) model . fit ( data , cls ) predictions = model . predict ( data ) In [14]: # Decision Tree Zs = model . predict ( XYs ) . reshape ( Xs . shape ) In [15]: fig = plt . figure ( figsize = ( 18 , 4 )) for i , seed in enumerate ([ 0 , 1 , 5 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) model = DecisionTreeClassifier ( criterion = \"gini\" , max_depth = 3 , random_state = seed ) model . fit ( data , cls ) predictions = model . predict ( data ) Zs = model . predict ( XYs ) . reshape ( Xs . shape ) ax . scatter ( x , y , c = predictions , s = 50 ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_title ( f \"Decision Tree seed= {seed} \" ), ax . set_xlim ( xmin , xmax ), ax . set_ylim ( ymin , ymax ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () Support Vector Machine(SVM) $$f(\\mathbf{x}) = \\mathbf{w}\\cdot\\mathbf{x} + \\mathbf{b} = \\mathbf{0}$$ $\\|\\mathbf{w}\\|$ を決定するためには、黄色の線上にある点(support vector)のみ寄与。SVMの重要なところは、通常 $$\\mathrm{Error}_{\\text{世の中全体}}>\\mathrm{Error}_{\\text{見たことのある世界}}$$ であるが、発明者 Vapnic が $$\\mathrm{Error}_{\\text{世の中全体}}\\leq\\mathrm{Error}_{\\text{見たことのある世界}} + \\alpha$$ を証明してしまった。なお、$\\alpha$ も $\\|\\mathbf{w}\\|$ の最小化で最小化できるため、$\\|\\mathbf{w}\\|$ の最小化をひたすら頑張るだけで良い。 ※ 実装は ここ アンサンブル学習 名前 説明 強学習器 bagging トレーニングデータをランダムにサンプリングして学習器 $f&#94;b(\\mathbf{x}),(b=1,2,\\ldots,B)$ を作る。 $$f(\\mathbf{x}) = \\frac{1}{B}\\sum_b&#94;Bf&#94;b(\\mathbf{x})$$ Random Forest (RF) 決定木 $f&#94;r(\\mathbf{x}),(r=1,2,\\ldots,R)$ をランダムに作る。木がたくさんあるので森(forest)になる。 $$f(\\mathbf{x}) = \\frac{1}{R}\\sum_r&#94;Rf&#94;r(\\mathbf{x})$$ boosting 弱学習器 $f&#94;t(\\mathbf{x})$ の精度に応じた重み付き多数決を行う。なお、$\\alpha$ の決め方はadaboostやXGboostなど様々ある。 $$f(\\mathbf{x}) = \\frac{1}{T}\\sum_t&#94;T\\alpha&#94;tf&#94;t(\\mathbf{x})$$ Neural Network パーセプトロン $\\mathbf{w}$ を法線と考えると、超平面のあっちとこっちを判定しているだけ＝SVMと同じ。 perceptronの学習アルゴリズムは、下記の流れで収束することが知られている。 重み（法線）ベクトルをランダムに設定 2クラス $0,1$ があったとして、training dataから順に取り出して、$y$ を出力してみる（平面のどちら側か） 合っていたら何もしない。間違っていたら $$ \\begin{cases} \\mathbf{w}\\longleftarrow\\mathbf{w} +\\rho \\mathbf{x} & (\\text{クラス1を0と誤判定した時})\\\\ \\mathbf{w}\\longleftarrow\\mathbf{w} -\\rho \\mathbf{x} & (\\text{クラス0を1と誤判定した時}) \\end{cases}$$ 2,3を全てのtraining dataに対して行う。 全てのtraining dataに対して正解が規定回数に達したら終了。それ以外の場合、2に戻る。 # Pythonでプログラム化すると以下。 while True : n_true = 0 for x , c in zip ( data , cls ): if c == 1 and sum ( w * x ) < 0 : w += rho * x elif c == 0 and sum ( w * x ) >= 0 : w -= rho * x else : n_true += 1 if n_true > N * true_rate : break In [16]: n_cls0 = 30 ; n_cls1 = 40 N = n_cls0 + n_cls1 In [17]: w = np . random . RandomState ( 0 ) . uniform ( size = 2 ) # Initialization. rho = 1e-3 # step size. true_rate = 0.9 In [18]: # train_x data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 2 , 4 ], cov = np . eye ( 2 ), size = n_cls0 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 1 ], cov = np . eye ( 2 ), size = n_cls1 ), ]) X1 , X2 = data . T # train_t cls = np . concatenate ([ np . zeros ( shape = ( n_cls0 ), dtype = int ), np . ones ( shape = ( n_cls1 ), dtype = int ) ]) In [19]: while True : n_true = 0 for x , c in zip ( data , cls ): if c == 1 and sum ( w * x ) < 0 : w += rho * x elif c == 0 and sum ( w * x ) >= 0 : w -= rho * x else : n_true += 1 if n_true > N * true_rate : break In [20]: X = np . linspace ( min ( X1 ), max ( X2 ), 1000 ) Y = ( - w [ 0 ] / w [ 1 ]) * X In [21]: plt . scatter ( X1 , X2 , c = cls ) plt . plot ( X , Y , color = \"red\" ) plt . xlabel ( \"$x_1$\" , fontsize = 18 ), plt . ylabel ( \"$x_2$\" , fontsize = 18 ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-4.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-4.html"},{"title":"生物統計論 第5回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section5.1 Bayesian Model Comparison Overfitting In [2]: N = 15 Ms = [ 2 , 4 , 8 , 16 ] seed = 0 In [3]: # Training data. x = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = N ) Noise = np . random . RandomState ( seed ) . normal ( loc = 0 , scale = 0.1 , size = N ) t = np . sin ( 2 * np . pi * x ) + Noise In [4]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Varying Component Number In [5]: from kerasy.ML.MixedDistribution import MixedGaussian from kerasy.utils.data_generator import generateMultivariateNormal In [6]: N = 200 cls = 6 seed = 123 In [7]: data , means = generateMultivariateNormal ( cls = cls , N = N , scale = 8e-3 , same = False , seed = seed ) x , y = data . T mux , muy = means . T In [8]: # Background Color xmin , ymin = np . min ( data , axis = 0 ); xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [9]: Nfig = cls col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col fig = plt . figure ( figsize = ( 6 * col , 4 * row )) Likelihoods = [] for i , K in enumerate ( range ( 1 , cls + 1 )): ax = fig . add_subplot ( row , col , i + 1 ) model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data , span = 20 ) Z = model . predict ( XYs ) idx = np . argmax ( model . predict ( data ), axis = 1 ) Zs = np . sum ( Z , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. likelihood = np . sum ( Z ) ax . scatter ( x , y , c = idx ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( xmin , xmax ) ax . set_ylim ( ymin , ymax ) ax . set_title ( f \"K= {K} , {np.sum(Z):.1f}\" ) Likelihoods . append ( likelihood ) plt . tight_layout () plt . show () In [10]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . scatter ( x , y , label = \"data\" ) axL . scatter ( mux , muy , label = \"mean\" , marker = \"*\" , color = \"red\" , s = 150 ) axL . set_title ( \"Training Data.\" ) axL . legend () axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( np . arange ( cls ) + 1 , Likelihoods ) axR . scatter ( np . arange ( cls ) + 1 , Likelihoods ) axR . set_xlabel ( \"num comp\" ) axR . set_ylabel ( \"likelihoods\" ) axR . set_title ( \"Log likelihood vs num comp\" , fontsize = 18 ) plt . tight_layout () plt . show () Cross Validation ※ Not Bayesian estimate the skill of a machine learning model on unseen data. use a limited sample in order to estimate how the model is expected to perform in general when used to make predictions on data not used during the training of the model. In [11]: n_fold = 5 size = N // n_fold Kmax = 30 In [12]: Likelihoods = [] CrossValidationLikelihoods = [] for i , K in enumerate ( range ( 1 , Kmax + 1 )): H = 0 for h in range ( n_fold ): mask = np . ones ( shape = N , dtype = bool ) mask [ h * size :( h + 1 ) * size ] = False model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data [ mask ], span = 20 ) Z = model . predict ( data [ np . logical_not ( mask )]) H += np . sum ( Z ) model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data , span = 20 ) Z = model . predict ( data ) Likelihoods . append ( np . sum ( Z )) CrossValidationLikelihoods . append ( H ) In [13]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . plot ( np . arange ( Kmax ) + 1 , CrossValidationLikelihoods ) axL . scatter ( np . arange ( Kmax ) + 1 , CrossValidationLikelihoods ) axL . set_xlabel ( \"num comp\" ), axL . set_ylabel ( \"Cross Validation likelihoods\" ), axL . set_title ( \"Cross Validation Log likelihood vs num comp\" , fontsize = 18 ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( np . arange ( Kmax ) + 1 , Likelihoods ) axR . scatter ( np . arange ( Kmax ) + 1 , Likelihoods ) axR . set_xlabel ( \"num comp\" ), axR . set_ylabel ( \"likelihoods\" ), axR . set_title ( \"Log likelihood vs num comp\" , fontsize = 18 ) plt . tight_layout () plt . show () Cross Entropy of Prediction ※ Not Bayesian empirical distribution $D = \\left\\{\\mathbf{x}&#94;{(h)}|h=1,\\ldots,n\\right\\}$ $x\\sim\\mathrm{Emp}(D)$ $f_X(\\mathbf{X}) = \\frac{1}{n}\\sum_{h=1}&#94;n\\delta\\left(\\mathbf{x}-\\mathbf{x}&#94;{(h)}\\right)$ $\\mathbb{E}\\left(g(\\mathbf{x})\\right) = \\frac{1}{n}\\sum_{h=1}&#94;n\\int d\\mathbf{x}g(\\mathbf{x})\\delta\\left(\\mathbf{x}-\\mathbf{x}&#94;{(h)}\\right) = \\frac{1}{n}\\sum_{h=1}&#94;ng\\left(\\mathbf{x}&#94;{(h)}\\right)$ In [14]: seed = 0 N = 1000 In [15]: data = np . random . RandomState ( seed ) . normal ( size = N ) In [16]: Emp = dict ( zip ( data , np . zeros ( N ))) for x in data : Emp [ x ] += 1 / N In [17]: for X , Y in sorted ( Emp . items ()): plt . plot (( X , X ),( 0 , Y ), color = \"black\" , alpha = 0.1 ) plt . title ( \"Empirical distribution (Normal)\" ) plt . xlabel ( \"x\" ) plt . show () We can assume Empirical distribution as a true distribution . Cross Entropy $$ \\begin{aligned} H(D,\\boldsymbol{\\theta}) &= \\text{Cross Entropy between }f_{\\text{Emp}(D)} \\text{ and }f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)\\\\ &= \\mathbb{E}_{\\text{Emp}(D)}\\left(-\\log f\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right)\\right)\\\\ &= -\\int f_{\\text{Emp}(D)}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &= -\\frac{1}{n}\\sum_{h=1}&#94;n\\log f\\left(\\mathbf{x}&#94;{(h)}|\\boldsymbol{\\theta}\\right)\\\\ &= -\\bar{l}&#94;{(n)}\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right) \\end{aligned} $$ We can also say that: $$ \\begin{aligned} H(D,\\boldsymbol{\\theta}) &= -\\int f_{\\text{Emp}}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &\\Rightarrow \\int f_{\\text{Emp}}(\\mathbf{x})\\log f_{\\text{Emp}}(\\mathbf{x})d\\mathbf{x} -\\int f_{\\text{Emp}}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &= -\\int f_{\\text{Emp}}(\\mathbf{x})\\log\\left\\{\\frac{f_{\\text{Emp}}(\\mathbf{x})}{f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)}\\right\\}d\\mathbf{x}\\\\ &= \\mathrm{KL}\\left(f_{\\text{Emp}}\\|f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)\\right)\\\\ &= \\text{Kullback-Leibler divergence between}f_{\\text{Emp}(D)} \\text{ and }f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right) \\end{aligned} $$ Evidence Approximation ※ Yes Bayesian In a fully Bayesian treatment of the linear basis function model, we would introduce prior distributions over the hyperparameters $\\alpha$, and $\\beta$. $$ \\begin{aligned} p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x},\\alpha,\\beta) &= \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)d\\mathbf{w}& (3.57)\\\\ &\\Rightarrow \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)p(\\alpha,\\beta|\\mathbf{t},\\mathbf{X})d\\mathbf{w}d\\alpha d\\beta& (3.74) \\end{aligned} $$ Marginalize with respect to these hyperparameters as well as with respect to the parameters $\\mathbf{w}$ to make predictions. Complete marginalization over all of these variables is analytically intractable. We will maximize $(3.74)$ in line with the framework of empirical Bayes (or type 2 maximum likelihood , generalized maximum likelihood , evidence approximation ) Obtain the marginal likelihoo function by first integrating over the parameters $\\mathbf{w}$ $$p(\\mathbf{t}|\\alpha,\\beta) = \\int p(\\mathbf{t}|\\mathbf{w},\\mathbf{X},\\beta)p(\\mathbf{w}|\\alpha)d\\mathbf{w}\\qquad (3.77)$$ Maximize $p(\\mathbf{t}|\\alpha,\\beta)$ with respect to $\\alpha$ and $\\beta$. In [18]: from kerasy.utils.preprocessing import PolynomialBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian from kerasy.ML.linear import EvidenceApproxBayesianRegression In [19]: N = 20 Ms = np . arange ( 10 ) xmin = 0 ; xmax = 1 seed = 0 In [20]: x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 0.15 , seed = seed ) y_train += 1 + y_noise In [21]: alpha = 100 beta = 100 In [22]: evidences = [] history = [] for M in Ms : phi = PolynomialBaseTransformer ( M = M ) x_train_features = phi . transform ( x_train ) model = EvidenceApproxBayesianRegression ( alpha = alpha , beta = beta , iter_max = 10000 ) model . fit ( x_train_features , y_train ) evidences . append ( model . evidence ( x_train_features , y_train )) history . append ( model ) best_M = np . argmax ( evidences [ 1 :]) + 1 best_model = history [ best_M ] In [23]: x_test = np . linspace ( xmin , xmax , 1000 ) phi = PolynomialBaseTransformer ( M = best_M ) x_test_features = phi . transform ( x_test ) y_test = 1 + np . sin ( 2 * np . pi * x_test ) y_pred , y_std = best_model . predict ( x_test_features ) In [24]: fig = plt . figure ( figsize = ( 12 , 4 )) axEVI = fig . add_subplot ( 1 , 2 , 1 ) axEVI . plot ( Ms , evidences ) axEVI . scatter ( Ms , evidences ) axEVI . set_title ( \"The relationship between 'model evidence' and $M$\" ), axEVI . set_xlabel ( \"$M$\" ), axEVI . set_ylabel ( \"$\\log({model\\ evidence})$\" , fontsize = 16 ) axBest = fig . add_subplot ( 1 , 2 , 2 ) axBest . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) axBest . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) axBest . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) axBest . scatter ( x_train , y_train , s = 50 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) axBest . set_ylim ( - 0.5 , 2.5 ), axBest . legend (), axBest . set_title ( f \"Bayesian Linear Regression (M= {best_M} )\" ) plt . tight_layout () plt . show () In [25]: print ( \"[Best Parameter]\" ) print ( f \"M = {best_M} \" ) print ( f \"alpha = {best_model.alpha} \" ) print ( f \"beta = {best_model.beta} \" ) [Best Parameter] M = 3 alpha = 0.0025750535934692723 beta = 56.07833727501231 Section5.2 Markov Process Biological Diversity Single Origin of Life \"Nothing in Biology Makes Sense Except in the Light of Evolution\" C.T. Dobzhansky Stochastic Transcription (Stochasticity vs Regulation) Stochasticity in Development Stochastic Process Mathematical description of stochastic behaviors. data: $\\left\\{\\mathbf{X}_t|t=1,\\ldots,n\\right\\}$ Probability: $\\mathbb{P}\\left(\\mathbf{X}_{t_m} = \\mathbf{x}_{t_m},\\ldots,\\mathbf{X}_{t_2} = \\mathbf{x}_{t_2},\\mathbf{X}_{t_1} = \\mathbf{x}_{t_1}\\right)$ $\\omega$ is one of the random paths. $\\mathbf{X}_t$ is a map indicats which state random paths $\\omega$ is in at time $t$ Events $E$ is a constraint on the value of $\\mathbf{X}_t$ at some times. $P(E)$ is the probability if the random paths satisfy the constraint $E$. markov Process $$\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t|\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right) = \\mathbb{P}\\left(\\mathbf{X}_t=\\mathbf{x}_t|\\mathbf{X}_{t-1}=\\mathbf{x_{t-1}}\\right)$$ Decomposition of Joint Distribution $$ \\begin{aligned} &\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t,\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &=\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &=\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1} | \\mathbf{X}_{t-2} = \\mathbf{x}_{t-2},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_{t-2} = \\mathbf{x}_{t-2},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &= \\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\cdots \\times\\mathbb{P}\\left(\\mathbf{X}_2=\\mathbf{x}_2|\\mathbf{X}_1=\\mathbf{x}_1,\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_1=\\mathbf{x}_1|\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_0=\\mathbf{x}_0\\right)\\\\ &= \\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1}\\right) \\times \\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1} | \\mathbf{X}_{t-2} = \\mathbf{x}_{t-2}\\right)\\times \\cdots\\times\\mathbb{P}\\left(\\mathbf{X}_1=\\mathbf{x}_1|\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_0=\\mathbf{x}_0\\right)\\quad\\left(\\because \\text{Markov Process}\\right) \\end{aligned} $$ Transition Matrix (Assume Time Independence ): $$P = \\left\\{P_{ij}\\right\\} = \\left\\{\\mathbb{P}\\left(\\mathbf{X}_t=i|\\mathbf{X}_{t-1}=j\\right)\\right\\},\\quad P_{ij}\\geq0,\\sum_i P_{ij}=1$$ Computing transition probability Birth and Death process $$ P= \\left(\\begin{matrix}1-\\lambda_0&\\mu_1&0&0\\\\\\lambda_0&1-\\lambda_1-\\mu_1&\\mu_2&0\\\\0&\\lambda_1&1-\\lambda_2-\\mu_2&\\mu_3\\\\0&0&\\lambda_2&1-\\mu_3\\end{matrix}\\right) $$ $P = U\\Lambda U&#94;{-1}$: Eigen decomposition $P&#94;n = U\\Lambda&#94;n U&#94;{-1}$ In [26]: def makeRandomP ( N , seed = 123 ): lambdas = np . r_ [ np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 / N , size = N - 1 ), np . zeros ( shape = 1 )] mus = np . r_ [ np . zeros ( shape = 1 ), np . random . RandomState ( seed + 1 ) . uniform ( low = 0 , high = 1 / N , size = N - 1 )] P = np . zeros ( shape = ( N , N )) for i in range ( N ): P [ i , - 1 + i ] = mus [ i ]; P [ i , i ] = 1 - mus [ i ] - lambdas [ i ]; P [ i , 1 + i if 1 + i < N else 1 + i - N ] = lambdas [ i ] return P In [27]: def LongTimeBehaviors ( P , even = True ): inf = 50 if even else 51 eigenvals , eigenvecs = np . linalg . eig ( P ) Lambda = np . diag ( eigenvals ) eigenvecs_inv = np . linalg . inv ( eigenvecs ) Pn = np . dot ( eigenvecs , np . dot ( Lambda ** inf , eigenvecs_inv )) Pn = np . where ( Pn < 1e-5 , 0 , Pn ) return Pn example Periodic In [28]: P = np . array ([ [ 0 , 1 , 0 ], [ 1 / 2 , 0 , 1 / 2 ], [ 0 , 1 , 0 ] ]) In [29]: print ( f \"P&#94;2n: \\n {LongTimeBehaviors(P, even=True)} \\n \" ) print ( f \"P&#94;2n+1: \\n {LongTimeBehaviors(P, even=False)}\" ) P&#94;2n: [[0.5 0. 0.5] [0. 1. 0. ] [0.5 0. 0.5]] P&#94;2n+1: [[0. 1. 0. ] [0.5 0. 0.5] [0. 1. 0. ]] Reducible In [30]: P = np . array ([ [ 1 / 3 , 3 / 4 , 0 , 0 ], [ 2 / 3 , 1 / 4 , 0 , 0 ], [ 0 , 0 , 1 / 3 , 3 / 4 ], [ 0 , 0 , 2 / 3 , 1 / 4 ] ]) In [31]: LongTimeBehaviors ( P ) Out[31]: array([[0.52941176, 0.52941176, 0. , 0. ], [0.47058824, 0.47058824, 0. , 0. ], [0. , 0. , 0.52941176, 0.52941176], [0. , 0. , 0.47058824, 0.47058824]]) Absorbing In [32]: P = np . array ([ [ 1 , 1 / 2 , 0 , 0 ], [ 0 , 0 , 1 / 2 , 0 ], [ 0 , 1 / 2 , 0 , 0 ], [ 0 , 0 , 1 / 2 , 1 ] ]) In [33]: LongTimeBehaviors ( P ) Out[33]: array([[1. , 0.66666667, 0.33333333, 0. ], [0. , 0. , 0. , 0. ], [0. , 0. , 0. , 0. ], [0. , 0.33333333, 0.66666667, 1. ]]) Irreducible, Aperiodic In [34]: P = np . array ([ [ 2 / 3 , 1 / 12 , 0 ], [ 1 / 3 , 5 / 8 , 1 / 8 ], [ 0 , 7 / 24 , 7 / 8 ], ]) In [35]: LongTimeBehaviors ( P ) Out[35]: array([[0.06976762, 0.06976748, 0.06976741], [0.27906992, 0.2790698 , 0.27906974], [0.65116246, 0.65116272, 0.65116286]]) In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-5.html"},{"title":"レポート課題4(10/24出題)","text":"AeTGyxx0DYGeT7Pwl+yI/Q==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report4.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report4.html"},{"title":"探索","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 講義概要 状態空間 15パズル 迷路 コスト無しグラフの探索 コスト付きグラフの探索 ゲーム木の探索 状態空間 ありうる局面の１つ１つを 状態 と言う。 状態全体からなる集合を 状態空間 と言う。 目的： 初期状態から出発して、許される 状態遷移 を繰り返し、最終状態へたどり着くこと。 これは、 グラフ(graph) の 探索(search) 問題と等価 （ノードが状態に、エッジが状態遷移にそれぞれ対応する。） 15パズル ルール： 一度に動かせるのは1パネルのみ。 飽きますに隣のパネルをずらす操作のみ可能 目標： 「できるだけ少ない手数で」 与えられた配置から元の配置に戻すこと。 元に戻すことが不可能な問題を識別する。 迷路 目的：スタートからゴールまで誘導する。 状態(state) $s$：移動できる場所 行動(action) $a$：進む方向 コスト無しグラフの探索 用語 意味 オープンリスト(open list) これから探索するノードの候補リスト クローズドリスト(closed list) 探索が終わったノードのリスト キュー(queue) 先入れ先出し スタック(stack) 後入れ先出し 探索の基本アルゴリズム open_list = [ initial_state ] # オープンリストは初期化状態のみ closed_list = [] # クローズドリストは空 while ( open_list ): # オープンリストが空になるまで以下を繰り返す。 state = getOptimalState ( open_list ) # オープンリストから（何らかの基準で）状態sを取り出す。 closed_list . append ( state ) # sをクローズドリストに追加する。 if state == last_state : break # sが最終状態ならば探索終了 open_list += [ s for s in state . transibles () if s not in closed_list ] # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストに追加する。 深さ優先探索 行き止まりに当たるまで進み、ゴールが見つからなかったら直近の分岐に戻って別の道を探す探索法。 メモリ使用量が少ない ゴールが近くにあっても、他の深い別れ道に迷い込むと時間がかかる ゴールが複数ある時、一番近くのものが見つかるとは限らない オープンリストは スタック （後入れ先出し） にする。 open_list = [ initial_state ] closed_list = [] while ( open_list ): state = open_list . pop ( 0 ) # オープンリストの先頭の状態sを取り出す。 closed_list . append ( state ) if state == last_state : break open_list . push ([ s for s in state . transibles () if s not in closed_list ]) # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストの\"先頭に\"追加する。 幅優先探索 分かれ道に来たらそれぞれの道を一歩ずつ進み，ゴールが見つからなかったらそれぞれの道をもう一歩ずつ進む探索法。 ゴールが近くにある時、早く見つかる。 ゴールが複数ある時、一番近くのものが見つかる。 分かれ道での分岐数が多いとメモリ使用量が多い。 オープンリストは キュー （先入れ後出し） にする。 open_list = [ initial_state ] closed_list = [] while ( open_list ): state = open_list . pop ( - 1 ) # オープンリストの\"末尾\"の状態sを取り出す。 closed_list . append ( state ) if state == last_state : break open_list . push ([ s for s in state . transibles () if s not in closed_list ]) # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストの\"先頭に\"追加する。 反復深化探索 深さに制限をつけて深さ優先探索を行い、徐々に深さを深くしていく探索法 ゴールが近くにある時、早く見つかる ゴールが複数ある時、一番近くのものが見つかる 同じノードを何度も訪れる（分岐が多いと影響小） まとめ 深さ優先探索・幅優先探索・反復深化探索は、グラフに関する特別な知識を使わずにオープンリストから状態を選択することから、 ブラインド探索(blined search) と呼ばれる。 # 探さ優先探索 幅優先探索 反復深化探索 完全性（必ず解が見つかるか） (completeness) $m$ が有限なら Yes Yes Yes 時間計算量 (time complexity) $\\mathrm{O}(b&#94;m)$ $\\mathrm{O}(b&#94;d)$ $\\mathrm{O}(b&#94;d)$ 空間計算量(space complexity) $\\mathrm{O}(bm)$ $\\mathrm{O}(b&#94;d)$ $\\mathrm{O}(bd)$ 最適性（一番近くの解が見つかるか） (optimality) Yes Yes Yes $b$：最大分岐数 $d$：一番浅い解の深さ $m$：最大の深さ コスト付きグラフの探索 各エッジに 遷移コスト が割り当てられている場合の最適遷移パス探索問題。 ブラインド探索 ：グラフに関する特別な知識を使わずにオープンリストから状態を選択。 貪欲探索(greedy search)：現在の状態からの遷移コストが最小の状態を選ぶ。 （深さ優先探索に対応） 最適探索(optimal search)：初期状態からの遷移コスト和が最小の状態を選ぶ。 （各コストが1だと幅優先探索になる。ダイクストラ法とも。） ヒューリスティック探索（最良優先探索, best-first search） ：グラフに関する何らかの知識を使ってオープンリストから適切と思われる状態を選択。 貪欲最良優先探索 $A&#94;{\\ast}$ 探索 貪欲最良優先探索 $\\hat{h}(s)$ を最小にする状態を選ぶ $h(s)$：$s$ から最終状態までの遷移コスト和の最小値 $\\hat{h}(s)$：$h(s)$ の推定（ヒューリスティック関数） 一度オープンリストに入ったの評価値更新は不要 ヒューリスティック関数の選び方： ユーザが 事前知識 により構築（例：直線距離） データから 機械学習 により自動構築 一般には完全性も最適性もないが、実用上は（そこそこ）うまくいくことが（それなりに）多い。 $A&#94;{\\ast}$ 探索(A-start search) $s$ を経由する場合の遷移コスト和の推定値 $\\left(\\hat{g}(s)+\\hat{h}(s)\\right)$ を最小にする状態を選ぶ。 $g(s)$：初期状態から $s$ までの遷移コスト和の最小値 $\\hat{g}(s)$：探索済みノードから $s$ に遷移する場合の最小値（ダイクストラ法と同じ） ノード $s$ を訪れると隣接ノードの $\\hat{g}(s&#94;{\\prime})$ が更新される。 $h(s)$：$s$ から最終状態までの遷移コスト和の最小値 $\\hat{h}(s)$：$h(s)$ のヒューリスティック推定値 最適経路上の $s$ ではいずれも $g(s)+h(s)$ が最小、経路外の点ではそれより大きい値をとることを利用 $\\forall s, 0\\leq\\hat{h}(s)\\leq h(s)$ が成り立つ時、$\\hat{h}(s)$ は 許容的(admissible) であるといい、この場合には $A&#94;{\\ast}$ 探索は最適性を持つ。 ※ 実装等は、 レポート課題 に記載。 In [1]: from kerasy.search.Astar import OptimalTransit In [2]: n = 3 m = 3 initial_str = \"2,-1,6,1,3,4,7,5,8\" last_str = \"1,2,3,4,5,6,7,8,-1\" In [3]: OptimalTransit ( n , m , initial_str , last_str , heuristic_method = \"Manhattan_distance\" , n_row = 5 ) n_transition = 9 ゲーム木の探索 2人のプレイヤーが交互に遷移先を決めるゲーム（ex. 将棋・囲碁・リバーシ・◯×など）における最適遷移探索問題 ミニマックス探索 自分は一番良い（点数を最大化する）手を選ぶ 相手は一番悪い（点数を最小化する）手を選ぶ アルファ・ベータ探索 ミニ・マックス探索では、全ての局面に対する点数を求める必要があり、時間がかかる。 不要な点数計算を省略することで効率化 $\\alpha$：max計算の際の下界値 $\\beta$：min計算の際の上界値 モンテカルロ木探索 アルファ・ベータ法を用いても、ゲーム木を深く探索するのは困難（$b&#94;d$ が $b&#94;{d/2}$ になる程度。） そこで、 ランダムに 手を打つ。 囲碁やスケジューリングなどで活用されている。 まとめ 広大な状態空間を効率よく探索したい コスト無しグラフの探索 コスト付きグラフの探索 ゲーム木の探索 膨大な状態空間の探索には，近似的な手法が有用 事前知識や機械学習によるヒューリスティック関数の構築 モンテカル 木探索 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-4.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-4.html"},{"title":"ガウシアンプロセスとベイズ最適化","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt import seaborn as sns データ駆動科学とベイズ最適化 データ駆動科学では、データに基づいて、新たな知見・事柄を発見することが求められる 単に予測を行うだけでなく、それに基づいて「行動」を設計することが必要 これらは、「ベイズ最適化」の枠組みに乗ることが多い 概要 ベイズ線形回帰 ガウシアンプロセス ベイズ最適化 ベイズ線形回帰 線形回帰モデルのパラメータを 最尤推定 によって決める場合、 解こうとしている問題に合わせてモデルの複雑さを適切に決めることが必要 ↑は、単純に尤度を最大化するだけでは 過学習 を引き起こしてしまう。 データの一部を独立なテスト用データとして取っておく ことでモデルの汎化性能を評価できるが、この方法は 計算量が大きく 、 データの無駄遣い となり得る。 これらの問題に対処するため、線形回帰モデルをベイズ的に取り扱うことで最尤推定の過学習を回避するとともに 「訓練データだけからモデルの複雑さを自動的に決定する。」 概要 解こうとしている問題に沿った 尤度関数(likelihood function) （ $p(\\mathbf{t}|\\mathbf{X},\\mathbf{w})$ ） を定義する。 モデルパラメータの 事前分布(prior distribution) （ $p(\\mathbf{w})$ ） を、 尤度関数 の 共役事前分布(conjugate prior) の形で定義する。 ベイズの公式より、 事後分布(posterior distribution) は 事前分布 と 尤度関数 の積に比例する。 （ $p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})\\propto p(\\mathbf{t}|\\mathbf{X},\\mathbf{w})\\cdot p(\\mathbf{w})$ ） あるパラメータ （ $\\mathbf{w}$ ） 下で入力 $\\mathbf{x}$ が与えられた時の確率分布 （ $p(t|\\mathbf{w},\\mathbf{x})$ ） を、3で求めた 事後分布 （ $p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})$ ） で重み付けしながら 周辺化(marginalization) する （ $p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x}) = \\int p(t|\\mathbf{w},\\mathbf{x})p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})d\\mathbf{w}$ ） ことで、 予測分布(predivtive distribution) （ $p(t|\\mathbf{w},\\mathbf{x})$ ） を得る。 具体例 ※ $D$ 次元の説明変数 $\\mathbf{x}$ で一次元の目標変数 $t$ を線形回帰するモデルをベイズ的に取り扱う。 目標変数 $t$ が決定論的な関数 $y(\\mathbf{x},\\mathbf{w})$ と加法性のガウスノイズの和で与えられる場合を考える。 $$t = y(\\mathbf{x},\\mathbf{w}) + \\epsilon\\qquad (3.7)$$ ここで、$\\epsilon$ は期待値が $0$ で精度が $\\beta$ のガウス確率変数である。すなわち、以下で表すことができる。 $$p(t|\\mathbf{x},\\mathbf{w},\\beta) = \\mathcal{N}\\left(t|y(\\mathbf{x},\\mathbf{w}),\\beta&#94;{-1}\\right)\\qquad (3.8)$$ データ点が $(3.8)$ の分布から 独立に生成された と仮定すると、尤度関数を次のように表せる。 $$p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) = \\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)\\qquad (3.10)$$ モデルパラメータ $\\mathbf{w}$ の事前分布を導入する。 ここで、 $\\beta$ が既知 と仮定すると、上記の尤度関数の共役事前分布である、期待値 $\\mathbf{m}_0$ 共分散 $\\mathbf{S}_0$ を持つガウス分布で表すのが適当である。 $$p(\\mathbf{w}) = \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)\\qquad (3.48)$$ ※ なお、$\\mathbf{w},\\beta$ の両方が未知である場合、共役事前分布は ガウス-ガンマ分布 隣、予測分布は スチューデントのt分布 となる。 ベイズの公式より、 事後分布は事前分布と尤度関数の積に比例する ので、これを解くことで事後分布を次の形で書き出すことができる。 （導出） $$ p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) = \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N) \\qquad (3.49)\\\\ \\begin{cases} \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51) \\end{cases} $$ $\\mathbf{w}$ で周辺化することで、予測分布を求めるが、議論の簡単のために、 「モデルパラメータ $\\mathbf{w}$ の事前分布 $p(\\mathbf{w})$ が、単一の制度パラメータ $\\alpha$ で記述される期待値が $0$ の等方的ガウス分布である」 とする。 $$p(\\mathbf{w}|\\alpha) = \\mathcal{N}\\left(\\mathbf{w}|\\mathbf{0},\\alpha&#94;{-1}\\mathbf{I}\\right)\\qquad (3.52)$$ この時、上記の $\\mathbf{w}$ の事後分布 $(3.49)$ の形は変わらず、$\\mathbf{m}_N,\\mathbf{S}_N$ の値が $$ \\begin{cases} \\mathbf{m}_N &= \\beta\\mathbf{S}_N\\boldsymbol{\\Phi}&#94;T\\mathbf{t} & (3.53)\\\\ \\mathbf{S}_N&#94;{-1} &= \\alpha\\mathbf{I} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.54) \\end{cases} $$ となる。この条件下で周辺化すると、以下の結果を得る。 （導出） $$ \\begin{aligned} p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x},\\alpha,\\beta) &= \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)d\\mathbf{w}& (3.57)\\\\ &= \\mathcal{N}\\left(t|\\mathbf{m}_N&#94;T\\phi(\\mathbf{x}),\\sigma_N&#94;2(\\mathbf{x})\\right) & (3.58)\\\\ \\sigma_N&#94;2(\\mathbf{x}) &= \\frac{1}{\\beta} + \\phi(\\mathbf{x})&#94;T\\mathbf{S}\\phi(\\mathbf{x}) & (3.59) \\end{aligned} $$ ※ ここで、$(3.59)$ の第1項はデータに含まれるノイズを、第2項は $\\mathbf{w}$ に関する不確かさを反映している。 事後分布の計算の導出過程 $$ \\begin{aligned} \\text{likelihood function : } p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) &= \\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)& (3.10)\\\\ \\text{prior distribution : } p(\\mathbf{w}) &= \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)& (3.48)\\\\ \\text{posterior distribution : } p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) &= \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N) & (3.49)\\\\ \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51)\\\\ \\mathcal{N}(x|\\mu,\\sigma&#94;2) &= \\frac{1}{\\left(2\\pi\\sigma&#94;2\\right)&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2\\sigma&#94;2}(x-\\mu)&#94;2\\right\\} & (2.42)\\\\ \\mathcal{N}(\\mathbf{x}|\\boldsymbol{\\mu},\\boldsymbol{\\Sigma}) &= \\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}|&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)\\right\\} & (2.43) \\end{aligned} $$ $$ \\begin{aligned} p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) &\\propto p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) p(\\mathbf{w}) \\\\ &=\\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)\\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)\\\\ &\\propto\\prod_{n=1}&#94;N\\exp\\left\\{-\\frac{\\beta}{2}\\left(t_n-\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\right)&#94;2\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &=\\exp\\left\\{-\\frac{\\beta}{2}\\sum_{n=1}&#94;N\\left(t_n-\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\right)&#94;2\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &= \\exp\\left\\{-\\frac{\\beta}{2}\\left( \\begin{array}{c}t_1 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_1)\\\\ t_2 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_2) \\\\ \\vdots \\\\ t_N - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_N) \\end{array} \\right)&#94;T\\left( \\begin{array}{c}t_1 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_1)\\\\ t_2 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_2) \\\\ \\vdots \\\\ t_N - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_N) \\end{array} \\right) \\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &= \\exp\\left\\{-\\frac{\\beta}{2}\\left(\\mathbf{t}-\\boldsymbol{\\Phi}\\mathbf{w}\\right)&#94;T\\left(\\mathbf{t}-\\boldsymbol{\\Phi}\\mathbf{w}\\right)\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\}\\\\ &= \\exp\\left\\{ -\\frac{1}{2} \\left(\\beta\\mathbf{t}&#94;T\\mathbf{t} - \\beta\\mathbf{t}&#94;T\\boldsymbol{\\Phi}\\mathbf{w} - \\beta\\mathbf{w}&#94;T\\boldsymbol{\\Phi}&#94;T\\mathbf{t} + \\beta\\mathbf{w}&#94;T\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi}\\mathbf{w} + \\mathbf{w}&#94;T\\mathbf{S}_0&#94;{-1}\\mathbf{w} - \\mathbf{w}&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0 - \\mathbf{m}_0&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{w} + \\mathbf{m}_0&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right)\\right\\}\\\\ &= \\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}&#94;T\\left(\\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} + \\mathbf{S}&#94;{-1}_0\\right)\\mathbf{w} - \\mathbf{w}&#94;T\\left(\\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t} + \\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right) - \\left(\\beta\\mathbf{t}&#94;T\\boldsymbol{\\Phi} + \\mathbf{m}_0\\mathbf{S}&#94;{-1}_0\\right)\\mathbf{w} + \\left(\\beta\\mathbf{t}&#94;T\\mathbf{t} + \\mathbf{m_0}&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right)\\right)\\right\\} \\\\ &=\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w} - \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right)\\right)&#94;T\\mathbf{S}_N&#94;{-1}\\left(\\mathbf{w} - \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right)\\right) + \\mathrm{C} \\right\\}\\\\ &\\propto\\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N)\\\\ &\\begin{cases} \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51)\\\\\\end{cases} \\end{aligned}\\\\ $$ 周辺化計算の導出過程 以下の「ガウス分布の周辺分布と条件付き分布の関係」の $(2.115)$ の結果を用いる。 $\\mathbf{x}$ の周辺ガウス分布と、$\\mathbf{x}$ が与えられた時の $\\mathbf{y}$ の条件付きガウス分布が次式で与えられたとする。 $$ \\begin{aligned} p(\\mathbf{x}) &=\\mathcal{N}\\left(\\mathbf{x} | \\boldsymbol{\\mu}, \\mathbf{\\Lambda}&#94;{-1}\\right) & (2.113)\\\\ p(\\mathbf{y} | \\mathbf{x}) &=\\mathcal{N}\\left(\\mathbf{y} | \\mathbf{A} \\mathbf{x}+\\mathbf{b}, \\mathbf{L}&#94;{-1}\\right) & (2.114)\\end{aligned} $$ この時、$\\mathbf{y}$ の周辺分布と、$\\mathbf{y}$ が与えられた時の $\\mathbf{x}$ の条件付き分布は $$ \\begin{aligned} p(\\mathbf{y}) &=\\mathcal{N}\\left(\\mathbf{y} | \\mathbf{A} \\boldsymbol{\\mu}+\\mathbf{b}, \\mathbf{L}&#94;{-1}+\\mathbf{A} \\mathbf{\\Lambda}&#94;{-1} \\mathbf{A}&#94;{\\mathrm{T}}\\right) & (2.115)\\\\ p(\\mathbf{x} | \\mathbf{y}) &=\\mathcal{N}\\left(\\mathbf{x} | \\mathbf{\\Sigma}\\left\\{\\mathbf{A}&#94;{\\mathrm{T}} \\mathbf{L}(\\mathbf{y}-\\mathbf{b})+\\mathbf{\\Lambda} \\boldsymbol{\\mu}\\right\\}, \\mathbf{\\Sigma}\\right) & (2.116) \\end{aligned} $$ で与えられる。ただし、 $$\\mathbf{\\Sigma} = \\left(\\mathbf{\\Lambda} + \\mathbf{A}&#94;T\\mathbf{LA}\\right)&#94;{-1}\\qquad (2.117)$$ である。 実装 In [2]: from kerasy.ML.linear import BayesianLinearRegression from kerasy.utils.preprocessing import GaussianBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian In [3]: N = 25 ; D = 1 ; M = 25 xmin = 0 ; xmax = 1 seed = 10 In [4]: alpha = 1 beta = 25 In [5]: x_test = np . linspace ( xmin , xmax , 1000 ) y_test = np . sin ( 2 * np . pi * x_test ) x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 1 / beta , seed = seed ) y_train += y_noise In [6]: # transform mu = np . linspace ( xmin , xmax , M ); sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) x_train_features = phi . transform ( x_train ) x_test_features = phi . transform ( x_test ) In [7]: random_idx = np . random . RandomState ( seed ) . choice ( N , N ) In [8]: fig = plt . figure ( figsize = ( 16 , 8 )) for i , n in enumerate ([ 1 , 2 , 4 , 25 ]): ax = fig . add_subplot ( 2 , 2 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( x_train_features [ random_idx [: n ]], y_train [ random_idx [: n ]]) y_pred , y_std = model . predict ( x_test_features ) ax . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) ax . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( x_train [ random_idx [: n ]], y_train [ random_idx [: n ]], s = 150 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) ax . set_ylim ( - 1.5 , 1.5 ), ax . legend (), ax . set_title ( f \"Bayesian Linear Regression (N= {n} )\" ) plt . tight_layout () plt . show () ガウシアンプロセス 回帰分析のための カーネル法 テストサンプルに対して、 予測値だけでなく、予測分散も与えることができる。 線形回帰のモデルは、以下で表されていた。 $$y(\\mathbf{x},\\mathbf{w}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x})\\qquad (3.3)$$ この結果に、ベイズ線形回帰の結果 $(3.53)$ を代入すると、 $$ \\begin{aligned} y(\\mathbf{x},\\mathbf{m}_N) &= \\mathbf{m}_N\\phi(\\mathbf{x}) = \\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\boldsymbol{\\Phi}&#94;T\\mathbf{t} \\\\ &= \\sum_{n=1}&#94;N\\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}_n)t_n & (3.60)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51) \\end{aligned} $$ したがって、点 $\\mathbf{x}$ での予測分布の平均は訓練データの目標変数 $t_n$ の線型結合で与えられるので、 $$ \\begin{aligned} y(\\mathbf{x},\\mathbf{m}_N) &= \\sum_{n=1}&#94;Nk(\\mathbf{x}, \\mathbf{x}_n)t_n & (3.61)\\\\ k(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}) &= \\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}&#94;{\\prime}) & (3.62)\\\\ &= \\left(\\beta&#94;{1/2}\\mathbf{S}_N&#94;{1/2}\\phi(\\mathbf{x})\\right)&#94;T\\left(\\beta&#94;{1/2}\\mathbf{S}_N&#94;{1/2}\\phi(\\mathbf{x})\\right) & (3.65) \\end{aligned} $$ とかける。なお、$k(\\mathbf{x}, \\mathbf{x}&#94;{\\prime})$ を 平滑化行列(smoother matrix) 、または 等価カーネル(equivalent kernel) と呼ぶ。（$(3.65)$ から、等価カーネルが通常のカーネル関数が満たすべき性質を満たしていることがわかる。） また、訓練データの目標値の線型結合を取ることで予測を行う上記のような回帰関数を 線形平滑器(linear smoother) と呼ぶ。 In [9]: from kerasy.utils.preprocessing import GaussianBaseTransformer , SigmoidBaseTransformer , PolynomialBaseTransformer In [10]: X = np . linspace ( - 1 , 1 , 200 ) M = 15 mu = np . linspace ( - 0.9 , 0.9 , M ); sigma = 0.1 gausian_phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) In [11]: def mkSmootherMatrix ( X , phi , alpha = 1 , beta = 25 ): X_feature = phi . transform ( X ) N , M = X_feature . shape SN = np . linalg . inv ( alpha * np . eye ( M ) + beta * X_feature . T . dot ( X_feature )) K = beta * np . dot ( X_feature , np . dot ( SN , X_feature . T )) return K In [12]: K = mkSmootherMatrix ( X , gausian_phi ) In [13]: SP = [ 30 , 120 , 150 ] colors = [ \"red\" , \"salmon\" , \"pink\" ] In [14]: fig = plt . figure ( figsize = ( 12 , 6 )) axKernel = plt . subplot2grid (( 3 , 2 ), ( 0 , 1 ), rowspan = 3 ) axKernel = sns . heatmap ( K , vmin = np . min ( K ), vmax = np . max ( K ), cmap = \"jet\" , cbar = False , square = True , ax = axKernel ) axKernel . set_xticks ([]), axKernel . set_yticks ([]) axKernel . set_xlabel ( \"$x$\" , fontsize = 18 ), axKernel . set_ylabel ( \"$x&#94;{\\prime}$\" , fontsize = 18 ) for i in range ( 3 ): axL = plt . subplot2grid (( 3 , 2 ), ( i , 0 )) axL . set_facecolor ( 'lightcyan' ) axL . plot ( K [ SP [ i ]], color = colors [ i ], linewidth = 4 ) axL . set_xticks ([]), axL . set_yticks ([]) axKernel . axhline ( SP [ i ], color = colors [ i ], linewidth = 10 , alpha = 0.7 ) plt . tight_layout () plt . show () In [15]: Transformers = [ ( GaussianBaseTransformer , mu ), ( SigmoidBaseTransformer , mu ), ( PolynomialBaseTransformer , 10 ), ] In [16]: fig = plt . figure ( figsize = ( 12 , 4 )) for i ,( phi_func , param ) in enumerate ( Transformers ): ax = fig . add_subplot ( 1 , 3 , i + 1 ) phi = phi_func ( param ) K = mkSmootherMatrix ( X , phi ) ax . plot ( K [ 100 ], color = \"blue\" ) ax . scatter ( 100 , 0 , color = \"red\" , marker = \"x\" , s = 150 , label = \"$x&#94;{\\prime}$\" ) ax . set_xticks ([]), ax . set_yticks ([]), ax . set_title ( f \"$k(x,x')$: {phi.__name__} \" , fontsize = 16 ) ax . set_xlabel ( \"$x$\" , fontsize = 18 ), ax . legend () plt . tight_layout () plt . show () カーネル関数の例 を見ればわかるよう、 対応する基底関数が局所的でないにも関わらず、等価カーネルは $x&#94;{\\prime}$ に関して局所的な関数となっていることがわかる！！ また、$y(\\mathbf{x})$ と $y(\\mathbf{x}&#94;{\\prime})$ の共分散を考えると、 $$ \\begin{aligned} \\mathrm{cov}\\left[y(\\mathbf{x}),y(\\mathbf{x}&#94;{\\prime})\\right] &= \\mathrm{cov}\\left[\\phi(\\mathbf{x})&#94;T\\mathbf{w}, \\mathbf{w}&#94;T\\phi(\\mathbf{x})\\right]\\\\ &= \\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}&#94;{\\prime}) = \\beta&#94;{-1}k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})\\quad(3.63) \\end{aligned} $$ となる。ここで、上述の等価カーネルの形状を考えると、 近接での予測平均は互いに強い相関を持っている一方で、より離れた点の組では相関は小さくなることがわかる。 ベイズ線形回帰 のように基底関数の集合を明示的に定義するのではなく、局所的なカーネルを直接定義し、観測された訓練集合が与えられた時、この局所的なカーネルを用いて新たな入力ベクトル $\\mathbf{x}$ に対する予測値を求めることができる。 この定式化から、回帰（と分類）に対する実用的な枠組みである ガウス過程(Gaussian process) が得られる。 ベイズ最適化 $M$ 個の候補点があり、この中から最大の観測値を持つものを探したい。 できるだけ実験数を少なくしたい。 $N$ 個の候補点に対する実験が終わった。$M-N$ 個の候補点が残っている。 次の $N+1$ 個目の候補点を最適に選びたい。 $N$ 個の化合物から予測モデルを学習し、それを用いて、残りの候補点を スコアリング し決定。 Maximum Probability of Improvement: Current Maxを超える確率。 Maximum Expected Improvement: (観測値-Current Max)の期待値。 Thompson Sampling: 残りのM-N個候補点に対して、条件つき結合確率からサンプリングを行い、そのサンプリング値をスコアとする。 In [17]: xmin = 0 ; xmax = 1 N = 1000 ; M = 25 seed = 1 In [18]: alpha = 1 beta = 25 In [19]: X = np . linspace ( xmin , xmax , N ) Y = 5e1 * X * ( X - 0.2 ) * ( X - 0.3 ) * ( X - 0.7 ) * ( X - 1 ) _ , noise = generateGausian ( size = 1000 , x = X , loc = 0 , scale = 1 / beta , seed = seed ) Y_ob = Y + noise In [20]: mu = np . linspace ( xmin , xmax , M ) sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) In [21]: X_features = phi . transform ( X ) In [22]: fig = plt . figure ( figsize = ( 18 , 8 )) idx = np . random . RandomState ( seed ) . choice ( N , 2 ) # Initialization. next_idx = idx for i , _ in enumerate ( range ( 12 )): ax = fig . add_subplot ( 3 , 4 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( X_features [ idx ], Y_ob [ idx ]) y_pred , y_std = model . predict ( X_features ) current_max = np . max ( Y_ob [ idx ]) max_improve_id = np . argmax ( y_pred ) ax . plot ( X , Y , color = \"black\" , label = \"True distribution\" ) ax . plot ( X , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( X , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( X [ idx ], Y_ob [ idx ], s = 50 , edgecolors = 'black' , facecolor = \"white\" , label = \"Observation\" ) ax . scatter ( X [ next_idx ], Y_ob [ next_idx ], s = 150 , edgecolors = 'black' , facecolor = \"black\" , label = \"New Obsevation\" ) ax . set_xlabel ( \"Explanatory Variable\" ), ax . set_ylabel ( \"Measured Value\" ), ax . set_title ( f \"N={len(idx)}, Max= {current_max:.3f} \" ) ax . set_ylim ( - 0.5 , 0.3 ), ax . set_xticks ([]), ax . set_yticks ([]) ax . axhline ( current_max , color = \"green\" , label = \"Current Maximum\" ) ax . axvline ( np . max ( X [ max_improve_id ]), color = \"blue\" , label = \"Maximum Probability of Improvement\" ) next_idx = max_improve_id if np . random . uniform () > 0.5 else np . random . choice ( N , 1 ) idx = np . r_ [ idx , next_idx ] ax . legend () plt . tight_layout () plt . show () おわりに（データ駆動科学） データ駆動科学では、データに基づいて、新たな知見・事柄を発見することが求められる。 単に予測を行うだけでなく、それに基づいて次の「行動」を設計することが必要 これらは、ベイズ最適化の枠組みに乗ることが多い。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-4.html"},{"title":"特徴選択","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 主成分分析(PCA) In [2]: N = 20 seed = 0 In [3]: X = np . linspace ( 0 , 1 , N ) Y = X + np . random . RandomState ( N ) . normal ( loc = 0 , scale = 5e-2 , size = N ) data = np . vstack (( X , Y )) In [4]: def Rotate ( x , radian ): A = np . array ([ [ np . cos ( radian ), - np . sin ( radian )], [ np . sin ( radian ), np . cos ( radian )] ]) return np . dot ( A , data ) In [5]: fig = plt . figure ( figsize = ( 10 , 4 )) ax = fig . add_subplot ( 1 , 2 , 1 ) ax . scatter ( X , Y , color = \"black\" ), ax . set_title ( \"Original\" ) X_tra , Y_tra = Rotate ( data , radian =- 1 / 4 * np . pi ) ax = fig . add_subplot ( 1 , 2 , 2 ) ax . scatter ( X_tra , Y_tra , color = \"red\" ), ax . set_title ( \"Rotated\" ), ax . set_ylim ( - 1 / 2 * np . sqrt ( 2 ), 1 / 2 * np . sqrt ( 2 )) plt . tight_layout () plt . show () $2$ 次元空間で左上図のようなデータがあったとする。この時、このデータを表現するのに $(x,y)$ の二次元が必要だろうか？ データ全体を右に $1/4\\pi$ 回転させると、右上図のようなデータれるとなる。この場合、$y&#94;{\\prime}$ 軸方向はノイズとみなせ、$x&#94;{\\prime}$ 軸のみでデータを表現していると言える。 この例のように、$K$ 次元のデータであっても、で０他の偏りによって $M( こういった場合に、 「$M$ 方向の軸をどのように決めるか？」 、 「$M$ をどうやって決めるか？」 などが問題となる。 ※ 詳しくは 主成分分析(PCA) に記載。 線形判別分析(LDA) 入力ベクトル $\\mathbf{x}$ を $K$ クラスの一つ $C_k$ に割り当てる関数である識別（決定面が超平面となるとき、 線形識別(linear discriminant) ）を、 「次元の削減」 という観点から捉えることができる。 2クラス分類 $D$ 次元入力ベクトルを得て、それを以下の式で $1$ 次元に射影するとする。 $$y = \\mathbf{w}&#94;T\\mathbf{x}\\qquad (4.20)$$ ある閾値を設定し、$y\\geq-w_0$ の場合クラス $C_1$、そうでない場合クラス $C_2$ であるとすると、 標準的な線形分類器が得られる。 一般に、$D$ 次元から $1$ 次元へ射影することによって相当量の情報量の損失を発生させる。 重みベクトル $\\mathbf{w}$ の要素を調整することで、 クラスの分離を最大にする射影を選択したい。 $\\mathbf{w}$ 上へ射影された際のクラス分離度の最も簡単な測定法は、 射影されたクラスの平均の分離度（以下の式） を見ることである。 $$m_2-m_1 = \\mathbf{w}&#94;T\\left(\\mathbf{m}_2-\\mathbf{m}_1\\right) = \\mathbf{w}&#94;T\\left(\\frac{1}{N_2}\\sum_{n\\in C_2}\\mathbf{x}_n -\\frac{1}{N_1}\\sum_{n\\in C_1}\\mathbf{x}_n\\right)\\qquad (4.21)\\ \\&\\ (4.22)$$ 上の式は $\\mathbf{w}$ の値を大きくすればいくらでも大きな値にすることができるので、 $\\mathbf{w}$ が単位長である（$\\sum_i w_i&#94;2 = 1$）という制約を加える。 ラグランジュ乗数を用いてこれを解くと、$\\mathbf{w}\\propto(\\mathbf{m}_2-\\mathbf{m}_1)$ が得られる。 クラス分布の非対角な共分散が強い場合など、一般に、 各クラスの平均値だけを見ていても上手く判別する事ができない。 そこでフィッシャーが提案した方法が、 「射影されたクラス平均間の分離度を大きくすると同時に、各クラス内では小さな分散を与える関数を最大化する」 クラス $C_k$ から射影されたデータのクラス内分散は以下で与えられる。 $$s_k&#94;2 = \\sum_{n\\in C_k}(y_n-m_k)&#94;2\\qquad (4.2)$$ 全データ集合に対する総クラス内分散が $s_1&#94;2+s_2&#94;2$ であると定義する。 フィッシャーの判別基準は、 クラス間分離度 と クラス内分散 の比率で表される。 $$ \\begin{aligned} J(\\mathbf{w}) &= \\frac{(m_2-m_1)&#94;2}{s_1&#94;2 + s_2&#94;2} & (4.25)\\\\ &= \\frac{\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}}{\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}} & (4.27)\\\\ \\mathbf{S}_{\\mathrm{B}} &= (\\mathbf{m}_2-\\mathbf{m}_1)(\\mathbf{m}_2-\\mathbf{m}_1)&#94;T & (4.27)\\\\ \\mathbf{S}_{\\mathrm{W}} &= \\sum_{n\\in C_1}(\\mathbf{x}_n-\\mathbf{m}_1)(\\mathbf{x}_n-\\mathbf{m}_1)&#94;T + \\sum_{n\\in C_2}(\\mathbf{x}_n-\\mathbf{m}_2)(\\mathbf{x}_n-\\mathbf{m}_2)&#94;T& (4.27)\\\\ \\end{aligned} $$ $\\mathbf{S}_{\\mathrm{B}}$ を クラス間共分散行列(between-class covariance matrix) と呼ぶ。 $\\mathbf{S}_{\\mathrm{W}}$ を (総)クラス内共分散行列(within-class covariance matrix) と呼ぶ。 $J(\\mathbf{w})$ を $\\mathbf{w}$ に関して微分すると、以下の式が満たされる場合に $J(\\mathbf{w})$ が最大となる事がわかる。 $$ \\begin{aligned} \\frac{dJ(\\mathbf{w})}{d\\mathbf{w}} &= \\frac{\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}} + \\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right) - \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}} + \\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)}{\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)&#94;2}\\\\ \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}} + \\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right) &= \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}} + \\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)\\\\ \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}&= \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\qquad (4.29) \\end{aligned} $$ $(4.27)$ から、 $\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}$ は常に $(\\mathbf{m}_2-\\mathbf{m}_1)$ と同じ方向を持つ。 $\\mathbf{w}$ の方向だけが重要で、 大きさは考慮する必要がないので、スカラーファクタ $\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)$ と $\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)$ を無視できる。 $(4.29)$ の両辺に $\\mathbf{S}_{\\mathrm{W}}&#94;{-1}$ を左からかけて、 フィッシャーの線形判別(Fisher's linear discriminant) が得られる。 $$\\mathbf{w}\\propto\\mathbf{S}_{\\mathrm{W}}&#94;{-1}(\\mathbf{m}_2-\\mathbf{m}_1)\\qquad (4.30)$$ フィッシャーの線形判別(Fisher's linear discriminant) は、厳密には識別子ではなく、 むしろ $1$ 次元へ削減する際のデータの射影方向の選択を行なっている。 In [6]: from kerasy.ML.decomposition import LDA In [7]: N1 = 100 ; N2 = 100 cov = [[ 10 , 1 ],[ 1 , 3 ]] In [8]: x1 = np . random . RandomState ( seed ) . multivariate_normal ([ 0 , 7 ], cov , N1 ) x2 = np . random . RandomState ( seed + 1 ) . multivariate_normal ([ 8 , 6 ], cov , N2 ) x1min = np . min ( x1 ); x1max = np . max ( x1 ) x2min = np . min ( x2 ); x2max = np . max ( x2 ) m1 = np . mean ( x1 , axis = 0 ); m2 = np . mean ( x2 , axis = 0 ) m = ( m1 + m2 ) / 2 data = np . r_ [ x1 , x2 ] In [9]: X = np . linspace ( - 100 , 100 , 1000 ) In [10]: fig = plt . figure ( figsize = ( 12 , 6 )) for i , tf in enumerate ([ True , False ]): model = LDA () model . fit ( x1 , x2 , mean_only = tf ) w1 , w2 = model . w alpha = - w2 / w1 beta = m [ 1 ] - alpha * m [ 0 ] x_features = model . transform ( data ) axT = fig . add_subplot ( 2 , 2 , i + 1 ) axT . plot ( X , X * ( - w2 / w1 ) + beta , color = \"black\" , label = \"linear discriminant\" ) axT . scatter ( x1 [:, 0 ], x1 [:, 1 ], color = \"blue\" , label = \"class1\" ) axT . scatter ( x2 [:, 0 ], x2 [:, 1 ], color = \"red\" , label = \"class2\" ) axT . scatter ( m1 [ 0 ], m1 [ 1 ], color = \"green\" , marker = \"*\" , s = 200 ), axT . scatter ( m2 [ 0 ], m2 [ 1 ], color = \"green\" , marker = \"*\" , s = 200 , label = \"mean\" ) axT . set_xlim ( x1min , x1max ), axT . set_ylim ( x2min , x2max ) axT . set_xticks ([]), axT . set_yticks ([]), axT . legend (), axT . set_title ( \"Only Mean\" if tf else \"Fisher's linear discriminant\" ) axB = fig . add_subplot ( 2 , 2 , 3 + i ) axB . hist ( x_features [: N1 ], alpha = 0.3 , color = \"blue\" , label = \"class1\" ) axB . hist ( x_features [ N1 :], alpha = 0.3 , color = \"red\" , label = \"class2\" ) axB . set_xticks ([]), axB . set_yticks ([]), axB . legend () plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-3.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-3.html"},{"title":"生物統計論 第4回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section4.1 Expectation Maximization Algorithm The expectation maximization algorithm, or EM algorithm, is a general technique for finding maximum likelihood solutions for probabilistic models having latent variable. Consider a probabilistic model in which we collectively denote all of the observed variables by $\\mathbf{X}$ all of the hidden variables by $\\mathbf{Z}$ (assuming discrete, but discussion is identical if continuous) joint distribution by $p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)$ Goal is to maximize the likelihood function that is given by $$p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) = \\sum_{\\mathbf{Z}}p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)\\qquad (9.69)$$ Properties Guaranteed to terminate Likelihood always increases Solving M-step is often easy No need to traverse the data Separation of parameter dependency $\\log(pq)=\\log(p)+\\log(q)$ Sometimes solved exactly Often a few times faster than gradient descent (if stopping condition is not too stringent) Expectation values characterize the optimized model Lower Bound of Likelihood $\\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right)$ and $\\mathrm{KL}\\left(q\\|p\\right)$ We shall suppose that direct optimization of $p(\\mathbf{X}|\\boldsymbol{\\theta})$ is difficult the optimization of the complete-data likelihood function $p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)$ is significantly easier We introduce a distribution $q\\left(\\mathbf{Z}\\right)$ defined over the latent variables. For any choice of $q\\left(\\mathbf{Z}\\right)$, the following decomposition holds $$ \\begin{aligned} \\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) &= \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) + \\mathrm{KL}\\left(q\\|p\\right) &(9.70)\\\\ \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.71)\\\\ \\mathrm{KL}\\left(q\\|p\\right) &= -\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.72) \\end{aligned} $$ NOTE : $\\mathcal{L}(q,\\boldsymbol{\\theta})$ is a functional of the distribution $q(\\mathbf{Z})$, and a function of the parameters $\\boldsymbol{\\theta}$ $$ \\begin{aligned} \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) + \\mathrm{KL}\\left(q\\|p\\right) &=\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} -\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\}\\\\ &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}\\right\\}\\\\ &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right)\\\\ &= \\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) \\end{aligned}$$ From $(9.72)$, we see that $\\mathrm{KL}(q\\|p)$ is the Kullback-Leibler divergence between $q(\\mathbf{Z})$ and the posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta})$ Kullback-Leibler divergence satisfies $\\mathrm{KL}(q\\|p)\\geq0$ with eqyality if, and only if, $q(\\mathbf{Z})=p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta})$. Therefore, $\\mathcal{L}(q,\\boldsymbol{\\theta})\\leq\\ln p(\\mathbf{X}|\\boldsymbol{\\theta})$, in other words that $\\mathcal{L}(q,\\boldsymbol{\\theta})$ is a lower bound on $\\ln p(\\mathbf{X}|\\boldsymbol{\\theta})$ E step In the E step, the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ is maximized with respect to $q(\\mathbf{Z})$ while holding $\\boldsymbol{\\theta}&#94;{\\text{old}}$ fixed. $\\ln p(\\mathbf{X}|\\boldsymbol{\\theta}&#94;{\\text{old}})$ does not depend on $q(\\mathbf{Z})$ the largest value of $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ will occur when the Kullback-Leibler divergence vanishes. ∴ When $q(\\mathbf{Z})$ is equal to the posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}})$, $\\mathrm{KL}(q\\|p)=0$ and the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ will be maximized. M step In the M step, the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ is maximized with respect to $\\boldsymbol{\\theta}$ to give some new value $\\boldsymbol{\\theta}&#94;{\\text{new}}$ while holding $q(\\mathbf{Z})$ fixed. This will cause the lower bound $\\mathcal{L}$ to increase This will necessarily cause the corrresponding log likelihood function to increase. Because $q$ is held fixed during the M step, it will not equal the new posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}})$ $\\left(\\mathrm{KL}(q\\|p)\\neq0\\right)$ $\\mathcal{Q}(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}})$ $$ \\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)=\\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right) \\qquad (9.33)\\\\ $$ If we substitute $q(\\mathbf{Z}) = p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)$ into $(9.71)$, $$ \\begin{aligned} \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.71)\\\\ &= \\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right) - \\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\\\ &= \\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right) + \\text{const.} \\end{aligned} $$ ∴ \"Maximizing $\\mathcal{L}(q,\\boldsymbol{\\theta})$\" is equal to \"Maximizing $\\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)$\". In [2]: from kerasy.ML.MixedDistribution import MixedGaussian In [3]: # Train Data. data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = 50 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 5 ], cov = np . eye ( 2 ), size = 50 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = 50 ), ]) X , Y = data . T K = 3 In [4]: # Back Ground Color xmin , ymin = np . min ( data , axis = 0 ) - 0.3 xmax , ymax = np . max ( data , axis = 0 ) + 0.3 Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [5]: model = MixedGaussian ( K = 3 , random_state = 1234 ) model . fit ( data , memo_span = 1 ) ll_hist = [ ll for _ , _ , _ , ll in model . history ] mu_hist = [ mu for _ , _ ,( mu , _ , _ ), _ in model . history ] In [6]: plt_model = MixedGaussian ( K = 3 ) plt_model . N , plt_model . M = data . shape L_old = min ( ll_hist ) - 300 for epoch , idx ,( mu , S , pi ), ll in model . history [: - 1 ]: fig = plt . figure ( figsize = ( 12 , 8 )) ll_old = ll_hist [ epoch ]; ll_new = ll_hist [ epoch + 1 ] mu_old = mu_hist [ epoch ]; mu_new = mu_hist [ epoch + 1 ] L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 dL_old = ll_old - L_old ; dL_new = L_new - ll_old ; dll_old = ll_new - ll_old ax1 = fig . add_subplot ( 2 , 2 , 1 ) plt_model . mu = mu ; plt_model . S = S ; plt_model . pi = pi gammas = plt_model . predict ( XYs ) Zs = np . sum ( gammas , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. ax1 . pcolor ( Xs , Ys , Zs , alpha =. 5 , cmap = \"jet\" ) ax1 . scatter ( X , Y , c = idx , cmap = \"prism\" ) ax1 . set_xlim ( xmin , xmax ), ax1 . set_ylim ( ymin , ymax ), ax1 . set_title ( f \"epochs: {epoch:>02}\" , fontsize = 18 ) ax2 = fig . add_subplot ( 2 , 2 , 2 ) ax2 . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linewidth = 3 ) ax2 . axhline ( L_old , color = \"black\" , label = \"$L(q,θold)$\" , linestyle = \":\" ) ax2 . arrow ( x = 0.3 , y = L_old , dx = 0 , dy = dL_old , head_width = dL_old / 6000 , head_length = dL_old * 0.1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax2 . set_title ( f \"E step (Epoch={epoch})\" , fontsize = 18 ), ax2 . legend (), ax2 . set_xticks ([]), ax2 . set_ylim ( - 600 , - 570 ) ax3 = fig . add_subplot ( 2 , 2 , 3 ) for k in range ( K ): xb , yb = mu_old [ k ]; xa , ya = mu_new [ k ] ax3 . plot (( xb , xa ),( yb , ya ), color = \"black\" ) ax3 . scatter ( xb , yb , color = \"black\" , s = 50 ) ax3 . scatter ( xa , ya , color = \"red\" , marker = \"*\" , s = 150 ) ax3 . set_xlim ( xmin , xmax ), ax3 . set_ylim ( ymin , ymax ), ax3 . set_title ( \"θ → θnew\" ) ax3 . grid () ax4 = fig . add_subplot ( 2 , 2 , 4 ) L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 ax4 . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linestyle = \"--\" ) ax4 . axhline ( ll_new , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θnew)$\" , linewidth = 3 ) ax4 . axhline ( L_new , color = \"black\" , label = \"$L(q,θnew)$\" , linestyle = \":\" ) ax4 . arrow ( x = 0.7 , y = ll_old , dx = 0 , dy = dll_old , head_width = dll_old / 6000 , head_length = dll_old * 0.1 , fc = 'k' , ec = 'k' , length_includes_head = True ) ax4 . arrow ( x = 0.3 , y = ll_old , dx = 0 , dy = dL_new , head_width = dL_new / 6000 , head_length = dL_new * 0.1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax4 . set_title ( f \"M step (Epoch={epoch})\" , fontsize = 18 ), ax4 . legend (), ax4 . set_xticks ([]), ax4 . set_ylim ( - 600 , - 570 ) plt . tight_layout () plt . savefig ( f \"img/img{epoch:>02}\" ) L_old = L_new fig_no = 0 L_old = min ( ll_hist ) - 300 for epoch in range ( len ( model . history ) - 1 ): ll_old = ll_hist [ epoch ]; ll_new = ll_hist [ epoch + 1 ] L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 dL_old = ll_old - L_old ; dL_new = L_new - ll_old ; dll_old = ll_new - ll_old # Estep fig = plt . figure ( figsize = ( 3 , 10 )) ax = fig . add_subplot ( 1 , 1 , 1 ) ax . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linewidth = 3 ) ax . axhline ( L_old , color = \"black\" , label = \"$L(q,θold)$\" , linestyle = \":\" ) ax . arrow ( x = 0.3 , y = L_old , dx = 0 , dy = dL_old , head_width = dL_old / 60 , head_length = dL_old * 2e-1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax . set_title ( f \"E step (Epoch={epoch})\" , fontsize = 18 ), ax . legend (), ax . set_xticks ([]), ax . set_ylim ( - 600 , - 570 ) plt . savefig ( f \"img/img{fig_no:>02}\" ); fig_no += 1 plt . clf () # Mstep fig = plt . figure ( figsize = ( 3 , 10 )) ax = fig . add_subplot ( 1 , 1 , 1 ) L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 ax . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linestyle = \"--\" ) ax . axhline ( ll_new , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θnew)$\" , linewidth = 3 ) ax . axhline ( L_new , color = \"black\" , label = \"$L(q,θnew)$\" , linestyle = \":\" ) ax . arrow ( x = 0.7 , y = ll_old , dx = 0 , dy = dll_old , head_width = dll_old / 60 , head_length = dll_old * 2e-1 , fc = 'k' , ec = 'k' , length_includes_head = True ) ax . arrow ( x = 0.3 , y = ll_old , dx = 0 , dy = dL_new , head_width = dL_new / 60 , head_length = dL_new * 2e-1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax . set_title ( f \"M step (Epoch={epoch})\" , fontsize = 18 ), ax . legend (), ax . set_xticks ([]), ax . set_ylim ( - 600 , - 570 ) plt . savefig ( f \"img/img{fig_no:>02}\" ); fig_no += 1 plt . clf () L_old = L_new Section4.2 Mixture Model Implementation Gaussian Mixture Distribution k-means clustering Section4.3 Linear Regression Least Squares polynomial function we observe a real-value input variable $x$ and we wish to use this observation to predict the value of a real-valued target variable $t$. In the most simplest approach based on curve fitting, we shall fit the data using a polynomial function of the form : $$y(x,\\mathbf{w}) = w_0+w_1x+w_2x&#94;2+\\cdots+w_Mx&#94;M=\\sum_{j=0}&#94;Mw_jx&#94;j\\qquad (1.1)$$ data we are given a training set comprising $N$ observation of $x$, written $\\mathbf{X}\\equiv(\\mathbf{x_1},\\ldots,\\mathbf{x}_N)&#94;T$ with corresponding observation of the values of $t$, denoted $\\mathbf{t}\\equiv(t_1\\ldots,t_N)&#94;T$ we can difine $M$, which is the order of the polynomial. The values of the coefficients($w_j$) will be determined by fitting the polynomial to the training data. This can be done by minimizing an error function that measures the misfit between the function $y(x,\\mathbf{w})$ and the training set data points. One simple choice of error function, which is widely used, is given by the sum of the squares of the errors $$E(\\mathbf{w}) = \\frac{1}{2}\\mathrm{RSS} = \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\{y(\\mathbf{x}_n,\\mathbf{w}) - t_n\\right\\}&#94;2\\qquad (1.2)$$ (the factor of $1/2$ is included for later convenience.) Trainig Aim: find the best $\\mathbf{w}&#94;{\\star}=\\underset{w\\in\\mathbb{R}}{\\mathrm{argmin}}\\left\\{\\mathrm{RSS}(\\mathbf{w})\\right\\}$ $\\mathbf{t} = \\left(\\begin{matrix}t_1\\\\\\vdots\\\\t_N\\end{matrix}\\right),\\quad\\mathbf{X} = \\left(\\begin{matrix}x_1&#94;0&x;_1&#94;1&\\cdots&x;_1&#94;M\\\\x_2&#94;0&x;_2&#94;1&\\cdots&x;_2&#94;M\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\x_N&#94;0&x;_N&#94;1&\\cdots&x;_N&#94;M\\end{matrix}\\right),\\quad\\mathbf{w}=\\left(\\begin{matrix}w_1\\\\\\vdots\\\\w_M\\end{matrix}\\right)$ $\\mathrm{RSS}(\\mathbf{w}) = \\left(\\mathbf{t} - \\mathbf{Xw}\\right)&#94;T\\left(\\mathbf{t} - \\mathbf{Xw}\\right)$ Solution: $$ \\begin{aligned} \\frac{\\partial E(\\mathbf{w})}{\\partial\\mathbf{w}} &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\|\\mathbf{t}-\\mathbf{Xw}\\|&#94;2\\\\ &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\|\\mathbf{t}\\|&#94;2 - 2\\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{t} + \\|\\mathbf{Xw}\\|&#94;2\\right)\\\\ &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\|\\mathbf{t}\\|&#94;2 - 2\\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{t} + \\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{Xw}\\right)\\\\ &=\\frac{1}{2} \\left(-2\\mathbf{X}&#94;T\\mathbf{t} + \\left(\\mathbf{X}&#94;T\\mathbf{X} + \\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;T\\right)\\mathbf{w}\\right)\\\\ &= -\\mathbf{X}&#94;T\\mathbf{t}+\\mathbf{X}&#94;T\\mathbf{Xw}=\\mathbf{0}\\\\ \\therefore\\mathbf{w}&#94;{\\star} &= \\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{t} \\end{aligned}$$ ※ In the following programs, I use np.linalg.solve to calcurate $\\mathbf{w}&#94;{\\ast}$ equation program $$\\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)\\mathbf{w}&#94;{\\star} = \\mathbf{X}&#94;T\\mathbf{t}$$ w = np.linalg.solve(X.T.dot(X), X.T.dot(t)) In [7]: N = 15 Ms = [ 2 , 4 , 8 , 16 ] seed = 0 In [8]: # Training data. x = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = N ) Noise = np . random . RandomState ( seed ) . normal ( loc = 0 , scale = 0.1 , size = N ) t = np . sin ( 2 * np . pi * x ) + Noise In [9]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Regularized Least Square $$ \\begin{aligned} E(\\mathbf{w}) &= E_{D}(\\mathbf{w}) + \\lambda E_W(\\mathbf{w}) & (3.24)\\\\ &= \\frac{1}{2}\\mathrm{RSS} + \\lambda\\frac{1}{2}\\mathbf{w}&#94;T\\mathbf{w}\\\\ &= \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\{y(\\mathbf{x}_n,\\mathbf{w}) - t_n\\right\\}&#94;2+\\frac{1}{2}\\mathbf{w}&#94;T\\mathbf{w} & (3.27)\\\\ \\therefore\\mathbf{w}&#94;{\\star} &= \\left(\\lambda\\mathbf{I} + \\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{t} & (3.28) \\end{aligned} $$ In [10]: lambda_ = 1e-4 In [11]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( lambda_ * np . identity ( M + 1 ) + X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $,$\\lambda= {lambda_} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Section4.4 Bayesian Inference Maximal Likelihood Estimate $$ l(\\boldsymbol{\\theta}|D) = \\log L(\\boldsymbol{\\theta}|D) = \\log\\mathbb{P}(D|\\boldsymbol{\\theta})\\\\ \\hat{\\boldsymbol{\\theta}}_{\\text{ML}} = \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}l(\\boldsymbol{\\theta}|D) $$ ※ $l$: large → High probability of observing $D$ from the model $\\boldsymbol{\\theta}$ Maximum a Posteriori Estimate Maximum a posteriori estimate $$ \\begin{aligned} \\hat{\\boldsymbol{\\theta}_{\\text{MAP}}} &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}f(\\boldsymbol{\\theta}|D)\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}f(D|\\boldsymbol{\\theta})f(\\boldsymbol{\\theta})\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}\\left\\{l(\\boldsymbol{\\theta}|D) L \\log f(\\boldsymbol{\\theta})\\right\\}\\\\ \\end{aligned} $$ Posterior mean estimate $$ \\hat{\\boldsymbol{\\theta}_{\\text{PME}}} = \\int\\boldsymbol{\\theta}f(\\boldsymbol{\\theta}|D)d\\boldsymbol{\\theta} $$ Implementation of Gaussian Prior for Regression. In [12]: seed = 123 In [13]: from kerasy.ML.linear import BayesianLinearRegression from kerasy.utils.preprocessing import GaussianBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian In [14]: N = 25 ; D = 1 ; M = 25 xmin = 0 ; xmax = 1 In [15]: alpha = 1 beta = 25 In [16]: x_test = np . linspace ( xmin , xmax , 1000 ) y_test = np . sin ( 2 * np . pi * x_test ) x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 1 / beta , seed = seed ) y_train += y_noise In [17]: # transform mu = np . linspace ( xmin , xmax , M ); sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) x_train_features = phi . transform ( x_train ) x_test_features = phi . transform ( x_test ) In [18]: random_idx = np . random . RandomState ( seed ) . choice ( N , N ) In [19]: fig = plt . figure ( figsize = ( 16 , 8 )) for i , n in enumerate ([ 1 , 2 , 4 , 25 ]): ax = fig . add_subplot ( 2 , 2 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( x_train_features [ random_idx [: n ]], y_train [ random_idx [: n ]]) y_pred , y_std = model . predict ( x_test_features ) ax . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) ax . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( x_train [ random_idx [: n ]], y_train [ random_idx [: n ]], s = 150 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) ax . set_ylim ( - 1.5 , 1.5 ), ax . legend (), ax . set_title ( f \"Bayesian Linear Regression (N= {n} )\" ) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-4.html"},{"title":"レポート課題3(10/17出題)","text":"wiJ1hGc/keD86s+A30BlFg==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report3.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report3.html"},{"title":"連続最適化(2)制約付き最適化","text":"講師： 佐藤一誠 参考書： 最適化手法 参考書： 機械学習のための連続最適化 講義概要 等式制約付き最適化問題 ラグランジュ未定乗数法 ラグランジュ双対問題 双対変数の最適化 不等式制約付き最適化問題 制約なし最適化問題への変換 双対問題 まとめ 制約付き最適化問題(constrained optimization problem) \\(\\mathcal{X}\\subset\\mathbb{R}&#94;d\\) 上に定義される関数 \\(f:\\mathcal{X}\\rightarrow\\mathbb{R}\\) の最小値を求める。 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ &h(\\mathbf{x})\\leq\\mathbf{0} \\end{aligned} $$ \"subject to\"は、 「…を条件として」 という意味。 \\(g_i,h_i\\) は互いに 一次独立(linearly independent) であると仮定。 実行可能解(feasible solution) ：全ての制約条件を満たす \\(\\mathbf{x}\\) 凸最適化問題(convex optimization problem) ：関数 \\(f\\) が凸、集合 \\(\\mathcal{X}\\) が凸、制約条件 \\(\\mathbf{g},\\mathbf{h}\\) が凸であれば、最適値が一意に定まる。 ※ 以下、凸最適化問題を考える。 等式制約付き最適化問題 等式制約付き最適化問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ \\end{aligned} $$ \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) + c_k\\|\\mathbf{g}(x)\\|&#94;2$$ \\(c_k\\) の値を徐々に増やしていく。 $$0 < c_1 < c_2 < \\cdots$$ ラグランジュ未定乗数法 詳しくは ラグランジュ未定乗数法 に記載されているので、ここでは具体例を紹介する。 問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{min : }}&3x&#94;2 + 2y&#94;2\\\\ \\text{subject to : }&x+y=1\\\\ \\end{aligned} $$ 解答 ラグランジュ関数は、 $$L(x,y,\\lambda) = 3x&#94;2 + 2y&#94;2 + \\lambda(x+y-1)$$ となるから、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x} &= 6x+\\lambda=0 &\\therefore x = -\\frac{1}{6}\\lambda\\\\ \\frac{\\partial L}{\\partial y} &= 4y+\\lambda=0 &\\therefore y = -\\frac{1}{4}\\lambda\\\\ \\frac{\\partial L}{\\partial \\lambda} &= x+y-1=0 &\\therefore \\lambda = -\\frac{12}{5}\\\\ \\end{aligned} $$ よって、 \\((x,y) = (0.4,0.6)\\) ラグランジュ双対問題 これも、詳しくは ラグランジュ双対問題 に記載されているので、ここでは具体例を紹介する。 問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{min : }}&3x&#94;2 + 2y&#94;2\\\\ \\text{subject to : }&x+y=1\\\\ \\end{aligned} $$ 解答 ラグランジュ関数は、 $$L(x,y,\\lambda) = 3x&#94;2 + 2y&#94;2 + \\lambda(x+y-1)$$ となるから、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x} &= 6x+\\lambda=0 &\\therefore x = -\\frac{1}{6}\\lambda\\\\ \\frac{\\partial L}{\\partial y} &= 4y+\\lambda=0 &\\therefore y = -\\frac{1}{4}\\lambda \\end{aligned} $$ よって、これらを \\(L(x,y,\\lambda)\\) に代入して、 $$\\omega(\\lambda) = \\underset{x,y\\in\\mathbb{R}}{\\inf}L(x,y,\\lambda) = -\\frac{5}{24}\\lambda&#94;2-\\lambda$$ したがって、 \\(\\underset{\\lambda\\in\\mathbb{R}}{\\text{argmax}}\\omega(\\lambda) = -\\frac{12}{5}\\Longrightarrow(x,y) = (0.4,0.6)\\) 双対変数の最適化 上の問題では、双対変数 \\(\\lambda\\) の最適化問題を解析的に解けたが、解析的に解くことができない問題もある。その場合に使うのが 双対上昇法 や 乗数法 と呼ばれる 双対変数の勾配上昇 を行う手法である。 手法 数式 解説 双対上昇法 $$\\begin{aligned}\\mathbf{x}_{k+1} &= \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}L(\\mathbf{x},\\boldsymbol{\\lambda}_{k})\\\\\\boldsymbol{\\lambda}_{k+1} &= \\boldsymbol{\\lambda}_k + \\varepsilon_k\\nabla\\omega(\\mathbf{\\boldsymbol{\\lambda}}_k) \\\\&= \\boldsymbol{\\lambda}_k + \\varepsilon_k\\mathbf{g}(\\mathbf{x}_{k+1})\\end{aligned}$$ 適当な初期値から，ラグランジュ関数の最小化と双対変数の勾配上昇を交互に実行 乗数法 $$\\begin{aligned}\\mathbf{x}_{k+1} &= \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}L_c(\\mathbf{x},\\boldsymbol{\\lambda}_{k})\\\\\\boldsymbol{\\lambda}_{k+1} &= \\boldsymbol{\\lambda}_k + c\\nabla\\omega(\\mathbf{\\boldsymbol{\\lambda}}_k) \\\\&= \\boldsymbol{\\lambda}_k + c\\mathbf{g}(\\mathbf{x}_{k+1})\\end{aligned}$$ 適当な初期値から， 拡張ラグランジュ関数 の最小化と双対変数の勾配上昇を交互に実行 なお、 拡張ラグランジュ関数(augmented Lagrangian) は、以下で表される関数で、二次の項を加えることで凸性を増している。 $$L_c(\\mathbf{x},\\boldsymbol{\\lambda}) = f(\\mathbf{x}) + \\boldsymbol{\\lambda}&#94;T\\mathbf{g}(\\mathbf{x}) + \\frac{c}{2}\\|\\mathbf{g}(\\mathbf{x})\\|&#94;2$$ ※実装は レポート課題3 に記載。 不等式制約付き最適化問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&h(\\mathbf{x})\\leq\\mathbf{0}\\\\ \\end{aligned} $$ 実行可能解 \\(\\mathbf{x}\\) において \\(h_i(\\mathbf{x}) = 0\\) の時、この制約を 有効制約(active constraint) と呼ぶ。 実行可能解 \\(\\mathbf{x}\\) においてそれ以外の時、この制約を 無効制約(inactive constraint) と呼ぶ。 制約なし最適化問題への変換 障壁法(barrier method) 初期値を \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の制約なし最適化問題を解く。 $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) - c_k\\log(-h(\\mathbf{x}))$$ \\(c_k\\) の値を徐々に減らしていく。 途中の解 \\(\\mathbf{x}_{k+1}\\) が常に \\(h(\\mathbf{x}_{k+1})\\leq0\\) を満たす （つまり、実行可能領域の内側にある） ことから、 内点法(interior-point method) ともよばれる。 \\(c_k\\) の決め方が難しい。 罰則法(penalty method) 初期値を \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の制約なし最適化問題を解く。 $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) + c_k\\max(0,h(\\mathbf{x}))&#94;2$$ \\(c_k\\) の値を徐々に増やしていく。 途中の解 \\(\\mathbf{x}_{k+1}\\) が一般に \\(h(\\mathbf{x}_{k+1})>0\\) を満たす （つまり、実行可能領域の外側にある） ことから、 外点法(exterior-point method) ともよばれる。 \\(c_k\\) の決め方が難しい。 射影勾配法(projected gradient method) 勾配降下（ \\(\\tilde{\\mathbf{x}}_{k+1} = \\mathbf{x}_k-\\varepsilon_k\\nabla f(\\mathbf{x}_k)\\) ）と実行可能領域への射影（ \\(\\mathbf{x}_{k+1} = \\mathbf{P}_k\\tilde{\\mathbf{x}}_{k+1}\\) ）を繰り返す。 まとめると $$\\mathbf{x}_{k+1} = \\mathbf{P}_k\\left(\\mathbf{x}_k - \\varepsilon_k\\nabla f(\\mathbf{x}_k)\\right)$$ 射影が簡単に計算できる時、効率が良い。 双対問題 詳しくは ラグランジュ未定乗数法 に記載。 まとめ 制約付き最適化問題： $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ &h(\\mathbf{x})\\leq\\mathbf{0} \\end{aligned} $$ ラグランジュ関数： $$L\\left(\\mathbf{x},\\boldsymbol{\\lambda},\\boldsymbol{\\mu}\\right) = f(\\mathbf{x}) + \\boldsymbol{\\lambda}&#94;Tg(\\mathbf{x}) + \\boldsymbol{\\mu}&#94;Th(\\mathbf{x})$$ 双対問題： $$ \\begin{aligned} \\underset{\\boldsymbol{\\lambda,\\mu},\\ \\mathbf{x}\\in\\mathcal{X}}{\\text{maximization : }}&L\\left(\\mathbf{x},\\boldsymbol{\\lambda},\\boldsymbol{\\mu}\\right)\\\\ \\text{subject to : }&\\boldsymbol{\\mu}\\geq\\mathbf{0}\\\\ \\end{aligned} $$ KKT条件： $$ \\begin{aligned} \\begin{cases} \\nabla_{\\mathbf{x}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) = \\mathbf{0}\\\\ \\nabla_{\\boldsymbol{\\lambda}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) = \\mathbf{0} & \\boldsymbol{\\mu}&#94;{\\ast}\\geq\\mathbf{0}\\\\ \\nabla_{\\boldsymbol{\\mu}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) \\leq \\mathbf{0} & \\mu_i&#94;{\\ast}h_i(\\mathbf{x}&#94;{\\ast}) = 0,\\ \\forall i \\end{cases} \\end{aligned} $$ .prompt { /* This is for jupyter blog.*/ min-width: 0; /* This padding is tuned to match the padding on the CodeMirror editor. */ padding: 0em 0.4em 0em 0em; margin: 0px; font-family: monaco; } /*蛍光ペン(pink)*/ .marker-pink { color: #c45a5a; background: linear-gradient(transparent 70%, #ff66ff 60%); font-weight: bold; } /*蛍光ペン(blue) & hover info*/ .marker-info { color: #5C7DC4; background: linear-gradient(transparent 70%, #66FFCC 60%); font-weight: bold; position: relative; cursor: pointer; } .marker-info:hover:before { opacity: 1; z-index: 2; } .marker-info:before { content: attr(aria-label); opacity: 0; position: absolute; top: 30px; right: -90px; font-size: 14px; width: 300px; padding: 10px; color: #fff; background-color: #555; border-radius: 3px; pointer-events: none; } /* 枠囲み */ .frame { border: solid 1.0px #000000; padding: 0.5em 1em; margin: 2em 0; } /* 暗記用 question box */ span .qbox{ display: none; } span.qbox-wrapper:hover .qbox-default{ display: none; } span.qbox-wrapper:hover .qbox{ display: inline; } .qbox-wrapper{ font-weight: bold; padding: 5px 10px; border-radius: 5px; border: solid 2px #000000; margin: 5px } .qbox-wrapper:hover{ text-shadow: 0px 0px 6px rgba(255, 255, 255, 1); -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); transition: all 0.4s ease 0s; } /* 画像吹き出し */ .balloon { display: table; width: 100%; } .balloon_img { display: table-cell; vertical-align: middle; width: 50%; padding-right: 10px; } .balloon_comment { border: #83274e solid 4px; position: relative; background: #fff; padding: 12px; border-radius: 13px; display: block } .balloon_comment::before { content: \"\"; position: absolute; border-right: 23px solid #83274e; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -23px; } .balloon_comment::after { content: \"\"; position: absolute; border-right: 24px solid #fff; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -17px; } if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-3.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-3.html"},{"title":"RNA-seqデータ解析（バッチスクリプト版）","text":"InTXA3StZTEG94crOWNxYA==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-12.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-12.html"},{"title":"RNA-seqデータ解析（対話モード版）","text":"k9RCPP3+zED79HVQA0ngkQ==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-11.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-11.html"},{"title":"ゲノム解析ツールの環境構築","text":"okrtfaK0zKRFPA6gCbc1GA==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-10.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-10.html"},{"title":"逐次最小問題最適化法(SMO)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt 二次計画問題を解くアルゴリズム概観 アルゴリズム 説明 伝統的な二次計画法のアルゴリズム 計算コスト及びメモリ使用量の面で現実的には厳しい。 チャンキング(chunking) カーネル行列からラグランジュ乗数が $0$ となるデータに対応する行および列を取り除いても、ラグランジュ関数が不変であることを利用し、元々の二次計画問題は、より次元数の小さな問題を順番に解くことで、最終的には $0$ とならないラグランジュ乗数だけを残す、という問題に帰着する。 射影共役勾配法(projected conjugate gradient method) チャンキングを実装する手法 分解法(decomposition method) チャンキングと同様 サイズの小さな二次計画問題を繰り返し解く という手法だが、ここの部分問題の大きさが一定であるため、任意の大きさのデータに対応できる。 逐次最小問題最適化法(SMO;sequential minimal optimization) 分解法の計算コストを削減した手法。たった２つのラグランジュ乗数を含む部分問題を逐次解いていくことで最終的な解を得る。 逐次最小問題最適化法(SMO;sequential minimal optimization) ラグランジュ双対問題 を以下のように定義する。 $$ \\begin{aligned} \\tilde{L}(\\mathbf{a}) &=\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)& (7.10)\\\\ a_n & \\geq 0,\\quad n=1,\\ldots,N & (7.11)\\\\ \\sum_{n=1}&#94;Na_nt_n &= 0 & (7.12) \\end{aligned} $$ 逐次最小問題最適化法(SMO;sequential minimal optimization) は反復法である。 適当な初期値 $\\mathbf{a}&#94;{(0)}$ から出発して、更新 $\\mathbf{a}&#94;{(k)} \\rightarrow \\mathbf{a}&#94;{(k+1)}$ を繰り返す。 この際、 １度には2つの成分しか動かさない。 ここで、$a_p$ と $a_q$ だけ動かすことを考える。 （他の $a_n$ は定数とみなす） この時、制約条件より $$ a_pt_p + a_qt_q = 0-\\sum_{n\\neq p,q} a_nt_n = \\mathrm{const.}$$ が成立する。したがって、 $$ \\frac{\\partial a_q}{\\partial a_p} = -\\frac{t_p}{t_q} =-t_pt_q \\cdots (\\ast)$$ と解析的に偏微分を求めることが可能である。 目的関数 $\\tilde{L}$ の変化量 以下、$K_{ij} = k\\left(\\mathrm{x}_i,\\mathrm{x}_j\\right)$ とおく。ここで、 $$a_p\\mapsto a_p+\\Delta_p, \\quad a_q\\mapsto a_q+\\Delta_q$$ と更新した時、目的関数 $\\tilde{L}$ の変化量 $\\Delta\\tilde{L}$ は、 $$ \\begin{aligned} \\Delta\\tilde{L} &= \\Delta_p + \\Delta_q - \\Delta_pt_p\\sum_{n=1}&#94;Na_nt_nk(\\mathbf{x}_p,\\mathbf{x}_n) - \\Delta_qt_q\\sum_{n=1}&#94;Na_nt_nk(\\mathbf{x}_q,\\mathbf{x}_n)\\\\ &-\\frac{1}{2}\\left[\\Delta_p&#94;2k(\\mathbf{x}_p,\\mathbf{x}_p) + 2\\Delta_p\\Delta_qt_pt_qk(\\mathbf{x}_p,\\mathbf{x}_q) + \\Delta_q&#94;2k(\\mathbf{x}_q,\\mathbf{x}_q)\\right] \\end{aligned} $$ となる。 $(\\ast)$ より $\\Delta_q = -t_pt_q\\Delta_p$ である。 $t_p=t_q(\\Longleftrightarrow\\Delta_q=-\\Delta_p)$ の時と $t_p\\neq t_q$ の時に場合分けをし、それぞれ $\\Delta_p$ で変化量を偏微分して $0$ とおく。 結果は共に等しく、以下で表される。 $$ \\begin{aligned} \\Delta_p &= \\frac{1-t_pt_q + t_p\\left(\\sum_{n=1}&#94;Na_nt_nK_{qn} - \\sum_{n=1}&#94;Na_nt_nK_{pn}\\right)}{K_{pp} - 2K_{pq} + K_{qq}}\\\\ &= \\frac{1-t_pt_q + t_p\\left(y(\\mathbf{x_q}) - y(\\mathbf{x}_q)\\right)}{K_{pp} - 2K_{pq} + K_{qq}}\\\\ \\end{aligned} $$ クリッピング この時、 $t_pa_p+t_qa_q=c$ $a_p\\geq0$ $a_q\\geq0$ が成立していなければならないので、以下を満たすように $\\Delta_p$ の クリッピング を行う必要がある。 $t_p=t_q$ のときは $ 0 \\leq a_p + \\Delta_p \\leq c/t_p$ $t_p=-t_q$ のときは $ \\mathrm{max}\\{0,c/t_p\\}\\leq a_p+\\Delta_p$ 変数の選択方法 最後に、動かす $\\mu_p,\\mu_q$ の選択基準であるが、SMO法の発見者である $John C. Platt$ の論文に従うならば以下の様になる。 $KTT$条件を破る$a_p$を$1$つ目に選ぶ。 続いて、$\\left|y\\left(\\mathbf{x_q}\\right)-y\\left(\\mathbf{x_p}\\right)\\right|$ が最大となる$a_p$を次に選ぶ。 これは、$\\left|y\\left(\\mathbf{x_q}\\right)-y\\left(\\mathbf{x_p}\\right)\\right|$ が大きければそれだけステップ幅も大きくなるため収束が早くなるというヒューリスティックス（直感）である。 これを繰り返して、$\\tilde{L}$ が収束するまで反復を繰り返せば学習完了である。 実装例 kerasy.ML.svm.BaseSVM に記載。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-5.html"},{"title":"ラグランジュ双対問題","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) はじめに このノートは、 Qiita記事『ラグランジュ双対問題について解説』 を引用しています。 ラグランジュ双対関数 ラグランジアン 次の最小化問題を考える. $$ \\begin{aligned} \\min_{x\\in\\mathbb{R}&#94;n} &~ f_0(x)\\\\ \\mathrm{s.t.} &~ f_i(x)\\le 0,~ i=1,\\ldots,m\\\\ &~ h_i(x)=0, ~i=1,\\ldots, p \\end{aligned} $$ 実行可能領域は 空でない とする この最適化問題の 最適値 を \\(p&#94;\\star\\) と書く 凸性は特に仮定しない 主問題 という ラグランジアンは次のように定義される。 $$L(x, \\lambda, \\nu):=f_0(x)+\\sum_{i=1}&#94;m\\lambda_i f_i(x)+\\sum_{i=1}&#94;p\\nu_i h_i(x)$$ \\(\\lambda_i, \\nu_i\\) はラグランジュ未定乗数 ラグランジュ双対関数 ラグランジュ双対関数は次のように定義される. $$ \\begin{aligned} g(\\lambda,\\nu)&:=\\inf_{x\\in D} L(x, \\lambda, \\nu)\\\\ &=\\inf_{x\\in D} \\left(f_0(x)+\\sum_{i=1}&#94;m\\lambda_i f_i(x)+\\sum_{i=1}&#94;p\\nu_i h_i(x)\\right) \\end{aligned} $$ \\(D:=\\bigcap_{i=0}&#94;m \\mathrm{dom}(f_i) \\cap \\bigcap_{i=1}&#94;p \\mathrm{dom}(h_i)\\) 双対関数は, \\((\\lambda,\\nu)\\) のアフィン関数の各点でのinfになっているため, 必ずconcave(上に凸)となる (もとの問題が凸でなくても) 証明してみた: $$ \\begin{aligned} & g(t\\lambda_a+(1-t)\\lambda_b, t\\nu_a+(1-t)\\nu_b)\\\\ =&\\inf_{x\\in\\mathcal{D}}\\left(tL(x,\\lambda_a,\\nu_a)+(1-t)L(x,\\lambda_b,\\nu_b)\\right)\\\\ \\ge& t\\inf_{x\\in\\mathcal{D}}L(x,\\lambda_a,\\nu_a)+(1-t)L(x,\\lambda_b,\\nu_b)\\\\ =& tg(\\lambda_a,\\nu_a)+(1-t)g(\\lambda_b,\\nu_b) \\end{aligned} $$ 最適値の下限 任意の \\(\\lambda\\ge0, \\nu\\) に対して, 次が成り立つ. \\($g(\\lambda,\\nu)\\le p&#94;\\star\\) 証明: \\(\\tilde{x}\\) を実行可能解とする: \\(f_i(\\tilde{x})\\le 0, h_i(\\tilde{x}) = 0\\) \\(\\lambda\\ge 0\\) を仮定 このとき, \\(L(\\tilde{x},\\lambda,\\nu)\\) の値は, \\(f_0(\\tilde{x})\\) でおさえられる: $$ L(\\tilde{x},\\lambda,\\nu)=f_0(\\tilde{x})+\\underbrace{\\sum_{i=1}&#94;{m}\\lambda_if_i(\\tilde{x})}_{\\le0}+\\underbrace{\\sum_{i=1}&#94;{p}\\nu_ih_i(\\tilde{x})}_{=0}\\le f_0(\\tilde{x}) $$ ゆえに, \\(g(\\lambda, \\nu)\\) は \\(f_0(\\tilde{x})\\) でおさえられる: $$ \\therefore~g(\\lambda, \\nu)=\\inf_{x\\in\\mathcal{D}}L(x,\\lambda,\\nu)\\le L(\\tilde{x},\\lambda,\\nu)\\le f_0(\\tilde{x}) $$ 任意の \\(\\tilde{x}\\) に対して, \\(g(\\lambda, \\nu)\\le f_0(\\tilde{x})\\) が成り立つため, \\(g(\\lambda, \\nu)\\le p&#94;\\star\\) が成り立つ. 結論: 双対関数の値は, 主問題の最適値を超えない 線形近似による解釈 元の主問題と等価な次の最小化問題を考える. $$ \\min_{x}~f_0(x)+\\sum_{i=1}&#94;{m}I_-(f_i(x))+\\sum_{i=1}&#94;{p}I_0(h_i(x)) $$ ただし, \\(I_{-},I_{0}\\) は 指示関数 : $$ I_-(u):=\\begin{cases} 0&u\\le 0\\\\ \\infty& u>0 \\end{cases},~~~ I_0(u):=\\begin{cases} 0&u = 0\\\\ \\infty& u\\ne 0 \\end{cases} $$ 最小化するのが目的であるが, 指示関数は制約を満たさないと無限大になってしまう. この指示関数は, 制約違反に対する不満度 を表していると解釈できる. ここで, \\(I_-(u)\\) を \\(\\lambda_i u (\\lambda_i\\ge 0)\\) \\(I_0(u)\\) を \\(\\nu_iu\\) というように指示関数を近似する. $$ \\min_{x}~L(x,\\lambda,\\nu)=f_0(x)+\\sum_{i=1}&#94;{m}\\lambda_i f_i(x)+\\sum_{i=1}&#94;{p}\\nu_i h_i(x) $$ これは制約違反をソフトに近似したものと考えられる もちろん, 制約を違反するほど不満度は上昇するようになっている 不等式制約に関して, 違反しているとき \\(f_i(x)>0\\) であり, \\(\\lambda_if_i(x)\\ge0\\) 任意の \\(u\\) に関して, \\(\\lambda_iu \\le I_-(u)\\) と \\(\\nu_iu \\le I_0(u)\\) が成り立つため, 双対関数が元の主問題の下限を与えることがわかる 共役関数 \\(f\\) の共役関数 \\(f&#94;\\ast\\) は次で定義される. $$ f&#94;*(y)=\\sup_{x\\in\\mathrm{dom} f}(y&#94;\\top x-f(x)). $$ 共役関数と双対問題には密接な関係がある. ( フェンシェル双対定理 ) たとえば, 機械学習のよくある形 $$ \\min_{w\\in\\mathbb{R}&#94;d} f(Xw)+g(w) $$ の双対問題は, $$ \\max_{\\alpha\\in\\mathbb{R}&#94;n} -f&#94;\\ast(-\\alpha)-g&#94;\\ast(X&#94;\\top\\alpha) $$ というように共役関数を使って表現できる. そのため, 凸共役 を覚えておけば, 形式的に双対問題を導出できる. 証明は簡単で, ラグランジアン \\(L(w,z,\\alpha)=f(z)+g(w)+\\alpha&#94;\\top(z-Xw)\\) を考えて, 双対関数の定義にしたがって \\(w\\in\\mathbb{R}&#94;d,z\\in\\mathbb{R}&#94;n\\) に関して最小化するだけだ. ちなみに, このとき最適解 \\(w&#94;\\star,\\alpha&#94;\\star\\) に関して $$ w&#94;\\star \\in \\partial g&#94;\\ast(X&#94;\\top \\alpha&#94;\\star), \\quad \\alpha&#94;\\star \\in -\\partial f(Xw&#94;\\star) $$ が成立する (KKT条件). ラグランジュ双対問題 双対関数から双対問題へ. ラグランジュ双対問題 ここまでで, 双対関数が主問題の下限を与えることを示した. 自然な疑問は, 「ラグランジュ双対関数から得られる最も良い下限はどれくらいなのか?」ということだ. 最も良い下限は次の最大化問題を解くことで得られる. $$ \\begin{aligned} \\max_{\\lambda,\\nu}~&g(\\lambda,\\nu)\\\\ \\mathrm{s.t.} ~&\\lambda\\ge0 \\end{aligned} $$ $ これは, ラグランジュ双対問題 と呼ばれる 双対実行可能領域: \\((\\lambda,\\nu)\\) に関して, \\(\\lambda\\ge0\\) かつ \\(g(\\lambda,\\nu)>-\\infty\\) \\((\\lambda&#94;\\star,\\nu&#94;\\star)\\) : 双対問題の最適解 \\(d&#94;\\star\\) : 双対問題の最適値 双対問題は必ず凸最適化問題 目的関数が必ずconcaveで, 制約が凸であるため これは, 主問題が凸最適化でなくても成り立つ 弱双対性 $$ d&#94;\\star\\le p&#94;\\star $$ 主問題の凸性にかかわらず, 成り立つ この不等式は, \\(p&#94;\\star, d&#94;\\star\\) が発散しないときに成り立つ \\(p&#94;\\star - d&#94;\\star\\) を 双対ギャップ という よく最適化アルゴリズムの停止条件に使われる \\(p&#94;\\star\\) を求めるのことが難しいときに \\(d&#94;\\star\\) を求めることで, \\(p&#94;\\star\\) の下限を知ることができる 双対問題は必ず凸であるため, 多くの場合効率的に解ける 強双対性 $$ d&#94;\\star=p&#94;\\star $$ 主問題の最適値が双対問題の最適値と一致するという性質 強双対性は常には成り立たない もし主問題が凸, すなわち: $$ \\begin{aligned} \\min_{x\\in\\mathbb{R}&#94;n} &~ f_0(x)\\\\ \\mathrm{s.t.} &~ f_i(x)\\le 0, ~i=1,\\ldots,m\\\\ &~ Ax=b \\end{aligned} $$ で \\(f_0,\\ldots,f_m\\) が 凸なら, たいていは(いつもではない)強双対性が成り立つ. たとえば, SVMの最適化問題は凸であり, 強双対性が成り立つため, 主問題/双対問題のどちらを解いてもよい. スレーター条件 次を満たすような \\(x\\in\\mathrm{relint}(D)\\) が存在することをいう. $$ f_i(x)<0,~i=1,\\ldots,m,~~~Ax=b $$ $ 主問題が凸でスレーター条件を満たすとき, 強双対性が成り立つ スレーター条件は強双対性の十分条件である (必要十分ではない) もし, \\(f_1,\\ldots,f_k\\) がアフィンなら, より弱い条件が成り立てばよい: $$ f_i(x)\\le 0,~i=1,\\ldots,k,~~~f_i(x)<0,~i=k+1,\\ldots,m,~~~Ax=b $$ 言い換えれば, アフィンの不等式制約は等号を含んでもよい 補足: int(内部)とrelint(相対的内部) \\(\\mathrm{int}(S)\\) : Sに含まれる最大開集合 Sから境界上の点を取り除いたもの \\(\\mathrm{relint}(S)\\) : Sによって拘束される線形空間上で, Sから境界上の点を取り除いたもの. intとrelintの違いのイメージとしては, まっすぐな下敷きのような平面を考えたとき, intは下敷きの平面ごと取り除いてしまい空集合になるのに対して, relintは下敷きの縁を削って残った部分. Example1 \\(S=\\lbrace(x_1,x_2)\\mid 0\\le x_1\\le 1,x_2=0\\rbrace\\) $$ \\mathrm{int}(S)=\\emptyset, \\mathrm{relint}(S)=\\{(x_1,x_2)\\mid 0 < x_1 < 1,x_2=0\\}, (\\mathrm{aff}(S)=\\{(x_1,x_2)\\in\\mathbb{R}&#94;2\\mid x_2=0\\}) $$ Example2 \\(S= \\lbrace (x_1,x_2)\\mid 0\\le x_1\\le 1,0\\le x_2\\le 1\\rbrace\\) $$ \\mathrm{int}(S)=\\mathrm{relint}(S)=\\{(x_1,x_2)\\mid 0 < x_1 < 1,0<x_2<1\\}, (\\mathrm{aff}(S)=\\{(x_1,x_2)\\in\\mathbb{R}&#94;2\\}) $$ 最適性条件 特に主問題の凸性を仮定しない. 相補性条件 特に, 強双対性条件を満たすと仮定すると, $$ \\begin{aligned} f_0(x&#94;\\star)&=g(\\lambda&#94;\\star,\\nu&#94;\\star)\\\\ &=\\inf_{x\\in D} \\left(f_0(x)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star h_i(x)\\right)\\\\ &\\le f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star h_i(x&#94;\\star)\\\\ &\\le f_0(x&#94;\\star) \\end{aligned} $$ 1行目: 強双対性 2行目: 双対関数の定義 3行目: \\(\\inf\\) の定義 4行目: \\(\\lambda_i&#94;\\star\\ge0, f_i(x&#94;\\star)\\le0, ~i=1,\\ldots,m\\) と \\(h_i(x&#94;\\star)=0, ~i=1,\\ldots,p\\) 1,3行目と3,4行目を考慮すると, $$ \\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x&#94;\\star)=0. $$ 和の各項は非負であるため, $$ \\lambda_i&#94;\\star f_i(x&#94;\\star)=0,~~~i=1,\\ldots,m. $$ これを相補性条件という もし \\(\\lambda_i&#94;\\star>0\\) なら, \\(f_i(x&#94;\\star)=0\\) もし \\(f_i(x&#94;\\star)<0\\) なら, \\(\\lambda_i&#94;\\star=0\\) KKT条件 (Karush-Kuhn-Tucker条件) 強双対性を仮定すると, \\(x&#94;\\star\\) は \\(L(x,\\lambda&#94;\\star,\\nu&#94;\\star)\\) を最小化するため, \\(x&#94;\\star\\) における勾配は0である: $$ \\nabla f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star \\nabla f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star\\nabla h_i(x&#94;\\star)=0 $$ ゆえに, 最適解で成り立つ式を列挙すると: \\(f_i(x&#94;\\star)\\le 0,~i=1,\\ldots,m\\) \\(h_i(x&#94;\\star)= 0,~i=1,\\ldots,p\\) \\(\\lambda_i\\ge0,~i=1,\\ldots,m\\) \\(\\lambda_i f_i(x&#94;\\star)= 0,~i=1,\\ldots,m\\) \\(\\nabla f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star \\nabla f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star\\nabla h_i(x&#94;\\star)=0\\) これがいわゆる KKT条件 である. (必要条件) まとめると, 強双対性を満たすなら, 最適解において主変数と双対変数はKKT条件を満たさなければならない. 主問題が凸であるとき, KKT条件は十分条件にもなる. つまり, ある点 \\(\\tilde{x},\\tilde{\\lambda}, \\tilde{\\nu}\\) がKKT条件を満たすなら, \\(\\tilde{x}=x&#94;\\star, \\tilde{\\lambda}=\\lambda&#94;\\star, \\tilde{\\nu}=\\nu&#94;\\star\\) . 十分条件の証明: $$ \\begin{aligned} g(\\tilde{\\lambda},\\tilde{\\nu})&=L(\\tilde{x},\\tilde{\\lambda},\\tilde{\\nu})\\\\ &= f_0(\\tilde{x})+\\sum_{i=1}&#94;m\\tilde{\\lambda}_i f_i(\\tilde{x})+\\sum_{i=1}&#94;p\\tilde{\\nu}_i h_i(\\tilde{x})\\\\ &= f_0(\\tilde{x}) \\end{aligned} $$ 1行目: \\(\\tilde{x}\\) がKKT条件の最後の条件を満たすため 主問題が凸であるため, \\(L(x,\\tilde{\\lambda},\\tilde{\\nu})\\) は \\(x\\) に関して凸である ( \\(\\because\\tilde{\\lambda}_i\\ge0\\) ) \\(\\therefore~L\\) を最小化する \\(x\\) は, 勾配が0である 2行目: ラグランジアンの定義 3行目: \\(\\tilde{x}\\) がKKT条件の2つ目と4つ目を満たすため この式は, 双対ギャップが0であることを意味するため, \\(\\tilde{x},\\tilde{\\lambda}, \\tilde{\\nu}\\) は最適解である. 結論: スレーター条件を満たすとき, KKT条件は最適性の必要十分条件となる if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-4.html"},{"title":"サポートベクターマシーン(SVM)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: seed = 0 サポートベクターマシーン(SVM) マージン最大化 に基づく線形識別器 カーネル関数と組み合わせることによって非線形な識別も可能 サンプル間の類似度にしか依存しない （→非ベクトルデータの分類にも適用可能 ） まとめ マージン最大化 という方針で誤差関数を定義する。 汎化性能を高めるために、 スラック変数 を導入して ソフトなマージン最大化に緩和 する ラグランジュ未定乗数法 を用いてラグランジュ関数を得る。 各パラメータについて微分する。 ラグランジュ関数に代入して 双対問題 を得る。 SMO法 などを用いて二次計画問題である双対問題を解く。 無効制約のデータ点は識別関数に影響しなくなる。 （SVMが疎になる。） マージン最大化 「個々のデータに関して確率計算をし、何らかの識別面を求める」 のではなく、 「汎化性能の最も高い識別面を直接考える」 そこで、 「マージン最大化」 という方針で識別面を最適化する。（正則化理論・VC理論により正当化されている。） 最も近いデータ $\\phi(\\mathbf{x}_n)$ までの距離（ マージン ）が最大となるような識別面を選ぶ。（ここでは、距離＝ユークリッド距離とする。） 識別面からちょうどマージンの分だけ離れた面上に乗る特徴ベクトル（一般に複数）を、(広義の) サポートベクトル (support vector) と呼ぶ。 学習法の定式化（2クラス分類） ※ 二クラスが線形分離可能であると仮定する。 線形識別関数が $y(\\mathbf{x}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x})+b$ で表され、$y(\\mathbf{x})$ の正負でクラスを識別するとする。 $y(\\mathbf{x})>0$ の時 $t=1$ $y(\\mathbf{x})<0$ の時 $t=-1$ したがって、 $t_ny(\\mathbf{x}_n)>0$ が全てのデータ $(\\mathbf{x}_n,t_n)$ に対して成り立つ （∵特徴空間で線形分離可能） 学習の目的は「パラメータ $\\mathbf{w}$ と $b$ を決定すること」。 データと識別面の最小距離は $1 / \\|\\mathbf{w}\\|$ で表される。（理由は以下） ※ 記述を簡単にするために線形識別問題の場合で考えるが、非線形写像 $\\phi$ を通しても同様の議論が成り立つ。 点 $\\mathbf{x}_n$ から識別面に下ろした垂線の足を $\\mathbf{x}_{n\\perp}$ 点 $\\mathbf{x}_n$ から識別面までの符号付き距離を $d_n$ と定義すると、 $\\mathbf{w}$ が識別面の法ベクトルであるから、 $\\mathbf{x}_{n\\perp} = \\mathbf{x}_n - d_n\\frac{\\mathbf{w}}{\\|\\mathbf{w}\\|}$ と表せる。 $\\mathbf{x}_{n\\perp}$ は識別面上にあるので、$\\mathbf{w}&#94;T\\mathbf{x}_{n\\perp} + b = 0$ が成り立つ。 したがって、 $$\\mathbf{w}&#94;T\\left(\\mathbf{x}_n - d_n\\frac{\\mathbf{w}}{\\|\\mathbf{w}\\|}\\right) + b = 0\\qquad \\therefore d_n = \\frac{\\mathbf{w}&#94;T\\mathbf{x}_n + b}{\\|\\mathbf{w}\\|}$$ として距離 $d_n$ が定義できる。ここで、$(\\mathbf{w},b)\\rightarrow(k\\mathbf{w},kb)$ としても $d_n$ の値は不変なので、 $$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n + b \\right)= 1\\qquad (7.4)$$ とスケーリングしても一般性を失わない。 なお、 このスケーリング下では、全てのデータ $\\mathbf{x}_n$ に対して $$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n + b \\right) \\geq 1\\qquad (7.5)$$ が成り立つ。 ここまでをまとめると、 マージン最大 は、 『$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n+b\\right)\\geq1\\quad(i=1,\\ldots,n)$ という条件下で、$\\frac{1}{2}||\\mathbf{w}||&#94;2$ を最小化する問題』 であると言える。 この制約付き最適化問題を解くために、$(7.5)$ の各制約式ごとにラグランジュ乗数 $a_n\\geq0$ を導入すると、次のラグランジュ関数が得られる。 $$L(\\mathbf{w},b,\\mathbf{a}) = \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2 - \\sum_{n=1}&#94;{N}a_n\\left\\{t_n\\left(\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n) + b\\right) - 1\\right\\}\\qquad (7.7)$$ よって、$\\mathbf{w},b$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) =0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) & (7.8)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_nt_n = 0 \\quad\\therefore\\sum_{n=1}&#94;Na_n&#94;{\\ast}t_n = 0 & (7.9)\\\\ \\end{aligned} $$ が得られる。これらの結果を $(7.7)$ に代入して $\\mathbf{w},b$ を消去すると、元の問題は以下の 双対問題 に変換される。 $$ \\tilde{L}(\\mathbf{a}) =\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.10)$$ なお、$\\mathbf{a}$ は以下の制約を満たす。 $$ \\begin{aligned} a_n & \\geq 0,\\quad n=1,\\ldots,N & (7.11)\\\\ \\sum_{n=1}&#94;Na_nt_n &= 0 & (7.12) \\end{aligned} $$ また、カーネル関数 $k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ は、$k(\\mathbf{x},\\mathbf{x}&#94;{\\prime}) = \\phi(\\mathbf{x})&#94;T\\phi(\\mathbf{x})$ と定義される。 この双対問題は二次計画問題であり、 逐次最小問題最適化法(SMO;sequential minimal optimization) などで解くことができる。 なお、今回の場合、 制約条件が全て線形 であることから 実行可能域が凸領域 であることがわかるので、 任意の局所解が大局解になる。 一旦最適な $\\mathbf{a}$ が求まると、識別関数 $y(\\mathbf{x})$ は、 $$y(\\mathbf{x}) = \\mathbf{w}&#94;{\\ast T}\\phi(\\mathbf{x})+b = \\sum_{n=1}&#94;N a_nt_nk(\\mathbf{x},\\mathbf{x}_n) + b \\qquad (7.13)$$ として表すことができる。ここで、 KKT条件より $a_n=0\\Leftrightarrow t_ny(\\mathbf{x}_n)-1>0$ のデータは識別関数に影響しないので、計算から除外することができる。（SVMが疎になる理由） なお、バイアスパタメータ $b$ は、任意のサポートベクトル $\\mathbf{x}_n$ が $t_ny(\\mathbf{x}_n) = 1$ を満たすことから、 $$ \\begin{aligned} &t;_n\\left(\\sum_{m\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m) + b\\right) = 1 & (7.17)\\\\ &\\therefore b&#94;{\\ast}= \\frac{1}{N_{\\mathcal{S}}}\\sum_{n\\in\\mathcal{S}}\\left(t_n-\\sum_{n\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\right)&(7.18) \\end{aligned} $$ として求めることができる。（数値計算の誤差の影響を小さくするため、$(7.17)$ の両辺に $t_n$ をかけ、全てのサポートベクトルで平均をとった。 In [3]: from kerasy.ML.svm import hardSVC In [4]: n_cls1 = 20 ; n_cls2 = 20 N = n_cls1 + n_cls2 In [5]: train_x = np . concatenate ([ np . random . RandomState ( seed ) . normal ( loc = [ 0.5 , 0 ], scale = [ 0.2 , 0.4 ], size = ( n_cls1 , 2 )), np . random . RandomState ( seed ) . normal ( loc = [ - 0.5 , 0 ], scale = [ 0.2 , 0.4 ], size = ( n_cls2 , 2 )) ]) train_y = np . concatenate ([ np . ones ( shape = n_cls1 ), - np . ones ( shape = n_cls2 ) ]) In [6]: X , Y = np . meshgrid ( np . linspace ( - 1 , 1 , 100 ), np . linspace ( - 1 , 1 , 100 )) In [7]: kernels = [ \"linear\" , \"polynomial\" , \"gaussian\" , \"sigmoid\" , \"laplacian\" , \"inverse_multiquadric\" ] In [8]: n_fig = len ( kernels ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i , kernel in enumerate ( kernels ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) model = hardSVC ( kernel = kernel ) model . fit ( train_x , train_y , max_iter = 1500 , sparse_memorize = False ) Z = np . vectorize ( lambda x , y : model . predict ( np . array ([ x , y ]) . reshape ( 1 , - 1 )))( X , Y ) == 1 ax . pcolor ( X , Y , Z , alpha = 0.3 ) for i in range ( N ): alpha = 1 if i in model . isSV () else 0.3 color = \"red\" if train_y [ i ] == 1 else \"blue\" ax . plot ( train_x [ i , 0 ], train_x [ i , 1 ], marker = \"o\" , color = color , markersize = 10 , alpha = alpha ) ax . set_title ( f \" {kernel} kernel\" ) ax . set_xlim ( - 1 , 1 ), ax . set_ylim ( - 1 , 1 ) plt . tight_layout () plt . show () ソフトマージン ここまで、 「二クラスが線形分離可能である」 という仮定を置いていたが、実際の問題では クラスの分布が重なる場合 があり、そのような場合訓練データを完全に分離する解が汎化能力に優れるとは限らない（というより、過学習する。） そこで、各学習データ $(\\mathbf{x}_n,t_n)$ に対して、 スラック変数 (slack variable) $\\xi_n\\geq 0$ を導入して、 $$ t_ny(\\mathbf{x}_n) \\geq 1 \\Longrightarrow t_ny(\\mathbf{x}_n) \\geq 1 - \\xi_n \\qquad (7.20)$$ と条件を緩める。 （ハードマージンの制約のソフトマージンへの緩和） つまり、 $\\xi_n > 1$ となるデータは誤識別している事になる。 ここでの目標は 『マージンよりも内側（$\\xi_n>0$）のデータ $n$ に対してソフトにペナルティを与えつつマージンを最大化する』 ことである。したがって、次の目的関数を最小化する。 $$C\\sum_{n=1}&#94;N\\xi_n + \\frac{1}{2}\\|\\mathbf{x}_n\\| \\qquad (7.21)$$ なお、$C>0$ は スラック変数を用いて表されるペナルティとマージンの大きさの間の トレードオフを制御するパラメータ である。 したがって、この最小化問題のラグランジュ関数は、新たにラグランジュ乗数 $\\{\\mu_n\\}$ を導入して以下のようになる。 $$L(\\mathbf{w},b,\\boldsymbol{\\xi},\\mathbf{a},\\boldsymbol{\\mu}) = \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2 + C\\sum_{n=1}&#94;N\\xi_n - \\sum_{n=1}&#94;{N}a_n\\left\\{t_n\\left(\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n) + b\\right) - 1 + \\xi_n\\right\\} - \\sum_{n=1}&#94;N\\mu_n\\xi_n\\qquad (7.22)$$ 先程同様 $\\mathbf{w},b,\\xi_n$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) =0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) & (7.29)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_nt_n = 0 \\quad\\therefore\\sum_{n=1}&#94;Na_n&#94;{\\ast}t_n = 0 & (7.30)\\\\ \\frac{\\partial L}{\\partial \\xi_n} &= C-a_n-\\mu_n \\quad\\therefore a_n = C-\\mu_n & (7.31) \\end{aligned} $$ が得られる。これらの結果を $(7.22)$ に代入すると、以下の 双対形のラグランジュ関数 が得られる。 $$ \\tilde{L}(\\mathbf{a}) =\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.32)$$ これは、先程の $(7.10)$ と同様の形である。なお、制約式は $$ \\begin{aligned} &a;_n \\geq 0,\\mu_n\\geq 0 \\quad n=1,\\ldots,N\\\\ &\\therefore 0\\leq a_n \\leq C & (7.33)\\\\ &\\sum_{n=1}&#94;Na_nt_n = 0 & (7.34) \\end{aligned} $$ である。 なお、バイアスパタメータ $b$ は、サポートベクトルは $a_n>0$ を満たすが、KKT条件より $a_n$ $\\mu_n$ $\\xi_n$ 説明 $a_n=0$ 識別関数に影響を及ぼさない。 $a_n $\\mu_n>0$ $\\xi_n=0$ ちょうどマージン境界上ある。 $a_n=C$ $\\mu_n=0$ $\\xi_n>0$ マージン内に侵入している。 となることから、$0 $$ \\begin{aligned} &t;_n\\left(\\sum_{m\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m) + b\\right) = 1 & (7.36)\\\\ &\\therefore b&#94;{\\ast}= \\frac{1}{N_{\\mathcal{M}}}\\sum_{n\\in\\mathcal{M}}\\left(t_n-\\sum_{n\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\right)&(7.37) \\end{aligned} $$ として求めることができる。 In [9]: from kerasy.ML.svm import SVC In [10]: train_x = np . concatenate ([ np . random . RandomState ( seed ) . normal ( loc = [ 0.2 , 0.2 ], scale = [ 0.2 , 0.4 ], size = ( n_cls1 , 2 )), np . random . RandomState ( seed ) . normal ( loc = [ - 0.2 , - 0.2 ], scale = [ 0.3 , 0.2 ], size = ( n_cls2 , 2 )) ]) train_y = np . concatenate ([ np . ones ( shape = n_cls1 ), - np . ones ( shape = n_cls2 ) ]) In [11]: params = [ ( 1e-2 , 1e-2 ),( 1e-2 , 1e0 ),( 1e-2 , 1e2 ), ( 1e1 , 1e-2 ),( 1e1 , 1e0 ),( 1e1 , 1e2 ), ( 1e4 , 1e-2 ),( 1e4 , 1e0 ),( 1e4 , 1e2 ), ] In [12]: n_fig = len ( params ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i ,( C , sigma ) in enumerate ( params ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) model = SVC ( kernel = \"gaussian\" , C = C , sigma = sigma ) model . fit ( train_x , train_y , max_iter = 1500 , sparse_memorize = False ) Z = np . vectorize ( lambda x , y : model . predict ( np . array ([ x , y ]) . reshape ( 1 , - 1 )))( X , Y ) == 1 ax . pcolor ( X , Y , Z , alpha = 0.3 ) for i in range ( N ): alpha = 1 if i in model . isSV () else 0.3 color = \"red\" if train_y [ i ] == 1 else \"blue\" ax . plot ( train_x [ i , 0 ], train_x [ i , 1 ], marker = \"o\" , color = color , markersize = 10 , alpha = alpha ) ax . set_title ( f \"gaussian kernel (C= {C} , $\\sigma= {sigma} $)\" ) ax . set_xlim ( - 1 , 1 ), ax . set_ylim ( - 1 , 1 ) plt . tight_layout () plt . show () 多クラスSVM SVMは本来2クラス識別の為の分類器であるが、これを複数組み合わせるなどの方法によって $K>2$クラスの識別に利用する事が出来る。最もよく用いられる方法は、 one-versus-the-rest方式 と呼ばれる方法であり、「データ $\\mathbf{x}$ が クラス $k$ かそれ以外であるか を識別するSVM $y_k(\\mathbf{x})$ を $K$ クラスそれぞれについて構築し、$ y(\\mathbf{x}) = \\mathop{\\rm arg~max}\\limits_{k}y_k(\\mathbf{x})$ によって $\\mathbf{x}$ のクラスを決定する」 SVM回帰 単純な線形回帰問題においては、次の式で定義される正則化された誤差関数を最小化する。 $$\\frac{1}{2}\\sum_{n=1}&#94;N\\{y_n-t_n\\}&#94;2 + \\frac{\\lambda}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.50)$$ 疎な解を得るために、二条誤差関数を $\\epsilon$ 許容誤差関数($\\epsilon$-insentive error function) で置き換える。つまり、予測値 $y(\\mathbf{x})$ と観測値 $t$ の差が $\\epsilon(>0)$ 未満のときは、$\\epsilon$ 許容誤差関数の値は $0$ となる。$\\epsilon$ 許容誤差関数の簡単な例は、 「許容範囲外の値に関しては線形のコストを生じさせる」 ものである。 $$ \\begin{aligned} E_{\\epsilon}\\left(y(\\mathbf{x})-t\\right) = \\begin{cases} 0 & (\\text{ when }|y(\\mathbf{x} - t)| < \\epsilon)\\\\ |y(\\mathbf{x} - t)| - \\epsilon & (\\text{ otherwise }) \\end{cases}\\qquad (7.51) \\end{aligned} $$ In [13]: squareError = lambda x , y_true : 1 / 2 * ( x - y_true ) ** 2 # Sum of Squares Error function epsilonError = lambda x , y_true , epsilon = 1 : 0 if abs ( x - y_true ) < epsilon else abs ( x - y_true ) - epsilon In [14]: X = np . linspace ( - 2 , 2 , 1000 ) plt . plot ( X ,[ squareError ( x , y_true = 0 ) for x in X ], color = \"black\" , label = \"sum of squares error function\" , linestyle = \"--\" ) plt . plot ( X ,[ epsilonError ( x , y_true = 0 ) for x in X ], color = \"black\" , label = \"$\\epsilon$-insentive error function\" ) plt . scatter ( 0 , 0 , marker = \"x\" , color = \"red\" , label = \"y_true\" ) plt . title ( \"Error function comparison\" , fontsize = 16 ), plt . xlim ( - 2 , 2 ), plt . ylim ( -. 1 , 2 ) plt . xlabel ( \"$x$\" , fontsize = 16 ), plt . ylabel ( \"$E(x)$\" , fontsize = 16 ) plt . legend () plt . show () この $\\epsilon$ 許容誤差関数を用いると、結局次の正則化された誤差関数を最小化することになる。 $$C\\sum_{n=1}&#94;NE_{\\epsilon}\\left(y(\\mathbf{x}_n)-t_n\\right) + \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.52)$$ 分類問題と同様、この最適化問題をスラック変数 $\\xi_n,\\hat{\\xi}_n$ を導入して表現する。 $\\epsilon$ チューブの中に位置するという条件は $y_n-\\epsilon\\leq t_n \\leq y_n+\\epsilon$ と表せるので、チューブの外側にデータ点が存在することを許すような制約条件は以下のようにかける。 $$ \\begin{aligned} t_n&\\leq y(\\mathbf{x}_n) + \\epsilon + \\xi_n & (7.53)\\\\ t_n&\\geq y(\\mathbf{x}_n) - \\epsilon - \\xi_n & (7.54)\\\\ \\end{aligned} $$ よって、スラック変数を用いると、SVM回帰の誤差関数は次のようにかける。 $$C\\sum_{n=1}&#94;N\\left(\\xi_n + \\hat{\\xi}_n\\right) + \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.55)$$ したがって、この最小化問題のラグランジュ関数は、ラグランジュ乗数 $a_n,\\hat{a}_n,\\mu_n,\\hat{\\mu}_n$ を導入して以下のようになる。（$y(\\mathbf{x}_n)= \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)+b$） $$ \\begin{aligned} L &=C\\sum_{n=1}&#94;N\\left(\\xi_n+\\hat{\\xi}_n\\right)+\\frac{1}{2}\\|\\mathbf{w}\\|&#94;2-\\sum_{n=1}&#94;N\\left(\\mu_n\\xi_n+\\hat{\\mu}_n\\hat{\\xi}_n\\right)\\\\ &-\\sum_{n=1}&#94;Na_n\\left(\\epsilon + \\xi_n + y_n - t_n \\right)-\\sum_{n=1}&#94;N\\hat{a}_n\\left(\\epsilon + \\hat{\\xi}_n - y_n + t_n\\right) \\qquad (7.56)\\\\ \\end{aligned} $$ これまで同様 $\\mathbf{w},b,\\xi_n,\\hat{\\xi}_n$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;Na_n\\phi(\\mathbf{x}_n)-\\sum_{n=1}&#94;N\\hat{a}_n\\phi(\\mathbf{x}_n)=0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N \\left(a_n-\\hat{a}_n\\right)\\phi(\\mathbf{x}_n) & (7.57)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_n + \\sum_{n=1}&#94;N\\hat{a}_n = 0 \\quad\\therefore\\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right) = 0 & (7.58)\\\\ \\frac{\\partial L}{\\partial \\xi_n} &= C-a_n-\\mu_n \\quad\\therefore a_n + \\mu_n = C & (7.59)\\\\ \\frac{\\partial L}{\\partial \\hat{\\xi}_n} &= C-\\hat{a}_n-\\hat{\\mu}_n \\quad\\therefore \\hat{a}_n + \\hat{\\mu}_n = C & (7.60)\\\\ \\end{aligned} $$ が得られる。これらの結果を $(7.56)$ に代入すると、以下の 双対形のラグランジュ関数 が得られる。 $$ \\begin{aligned} \\tilde{L}(\\mathbf{a},\\hat{\\mathbf{a}}) &= -\\frac{1}{2}\\sum_{n=1}&#94;N\\sum_{m=1}&#94;N\\left(a_n-\\hat{a}_n\\right)\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\\\ &- \\epsilon\\sum_{n=1}&#94;N\\left(a_n + \\hat{a}_n\\right) + \\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right)t_n \\end{aligned} \\qquad (7.61) $$ なお、制約式は $$ \\begin{aligned} 0 \\leq a_n &\\leq C & (7.62)\\\\ 0 \\leq \\hat{a}_n &\\leq C & (7.63) \\end{aligned} $$ である。したがって、新しい入力に対する予測値は $$y(\\mathbf{x}) = \\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right)k(\\mathbf{x},\\mathbf{x}_n) + b\\qquad (7.64)$$ とカーネル関数のみを用いて計算できることがわかる。 なお、バイアスパタメータ $b$ は次のように計算できる。 $C>a_n>0$ が成り立つデータ点についてはKKT条件より $\\xi_n = 0 \\quad \\therefore \\epsilon+y_n-t_n=0$ が成り立つ。よって、 $$ \\begin{aligned} b &= t_n - \\epsilon - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\\\ &= t_n - \\epsilon - \\sum_{m=1}&#94;N\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.69) \\end{aligned} $$ $C>\\hat{a}_n>0$ が成り立つデータ点についてはKKT条件より $\\hat{\\xi}_n = 0 \\quad \\therefore \\epsilon+y_n-t_n=0$ が成り立つ。よって、 $$ \\begin{aligned} b &= t_n - \\epsilon - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\\\ &= t_n - \\epsilon - \\sum_{m=1}&#94;N\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.69) \\end{aligned} $$ なお、このようにして得られた $b$ の値を全て平均した結果を用いると数値誤差の影響を小さくできる。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-3.html"},{"title":"ラグランジュ未定乗数法","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 条件なし最適化 ある関数 \\(f\\) が与えられた時、それが最小値を取る点を見つけ出す。 $$\\text{min : } f(\\mathbf{x})$$ したがって、微分をとって \\(0\\) になる点を見つければ良い。 $$\\frac{\\partial}{\\partial x}f(x) = 0\\Longrightarrow x&#94;{\\ast}$$ 等式制約付き最適化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g(\\mathbf{x})=0\\\\ \\end{aligned} $$ ラグランジュ乗数(Lagrangian multiplier) と呼ばれるパラメータ \\(\\lambda\\) を導入した ラグランジュ関数(Lagrangian function) $$L(\\mathbf{x},\\lambda) \\equiv f(\\mathbf{x})+\\lambda g(\\mathbf{x})\\qquad (E.4)$$ の \\(\\mathbf{x}\\) と \\(\\lambda\\) の両方に対する停留点（鞍点）を見つければ、制約付き問題の最適解が得られる。 理由 以下２つの理由より、 \\(\\nabla f\\) と \\(\\nabla g\\) は、 向きが逆の場合も含めて 平行なベクトルとなる。したがって、 あるパラメータ \\(\\lambda\\neq0\\) が存在して、 $$\\nabla f + \\lambda\\nabla g = 0\\qquad (E.3)$$ が成立しなければならない。これは、 \\(\\nabla_{\\mathbf{x}}L=0\\) と表されることがわかる。また、 \\(\\partial L/\\partial\\lambda = 0\\) より、制約式 \\(g(\\mathbf{x})=0\\) も導かれる。 1) \\(\\nabla g(\\mathbf{x})\\) が制約面 \\(g(\\mathbf{x})=0\\) に対して常に垂直 制約面 \\(g(\\mathbf{x})\\) 上の点 \\(\\mathbf{x}\\) と \\(\\mathbf{x}+\\boldsymbol{\\varepsilon}\\) を考える。 すると、 \\(\\mathbf{x}\\) の周りでの \\(g(\\mathbf{x})\\) のテイラー展開より、 $$g(\\mathbf{x} + \\boldsymbol{\\varepsilon}) \\sim g(\\mathbf{x}) + \\boldsymbol{\\varepsilon}&#94;T\\nabla g(\\mathbf{x})\\qquad (E.2)$$ いま、 \\(\\mathbf{x}\\) と \\(\\mathbf{x}+\\boldsymbol{\\varepsilon}\\) は共に制約面上に存在するので $$g(\\mathbf{x})=g(\\mathbf{x}+\\boldsymbol{\\varepsilon})=0$$ が成り立つ。ゆえに、 \\(\\|\\boldsymbol{\\varepsilon}\\|\\rightarrow0\\) の極限では \\(\\boldsymbol{\\varepsilon}&#94;T\\nabla g(\\mathbf{x})\\sim0\\) が成り立つ。 \\(\\boldsymbol{\\varepsilon}&#94;T\\) は制約面上の接線である。 より、ベクトル \\(\\nabla g(\\mathbf{x})\\) は制約面 \\(g(\\mathbf{x})=0\\) に対して垂直である。 2) \\(\\nabla f(\\mathbf{x}&#94;{\\ast})\\) も制約面に対して垂直 もし \\(\\nabla f(\\mathbf{x}&#94;{\\ast})\\) が制約面に対して垂直でないとすると、制約面にそって \\(f(\\mathbf{x})\\) の値がさらに大きくなるように点を動かすことができるはずである。 したがって、制約面上の点で \\(f(\\mathbf{x})\\) を最大化する点 \\(\\mathbf{x}&#94;{\\ast}\\) においては、ベクトル \\(\\nabla f(\\mathbf{x})\\) も制約面に対して垂直でなければならない。 不等式制約付き最適化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g(\\mathbf{x})\\leq0\\\\ \\end{aligned} $$ ここで、解 \\(\\mathbf{x}&#94;{\\ast}\\in\\Omega\\) には、 無効制約(inactive constraint) \\(\\overset{\\text{def}}{\\Longleftrightarrow}g(\\mathbf{x}&#94;{\\ast}) < 0\\) 有効制約(active constraint) \\(\\overset{\\text{def}}{\\Longleftrightarrow}g(\\mathbf{x}&#94;{\\ast}) = 0\\) の2つの可能性がある。 $$ \\Omega:= \\left\\{\\mathbf{x}\\in\\mathbb{R}&#94;D: g(\\mathbf{x})<0 \\right\\} $$ 無効制約の場合 無効制約 \\(\\left(g(\\mathbf{x})<0\\right)\\) の場合、関数 \\(g(\\mathbf{x})\\) は何も制約を課していないのと同様なので、停留条件は単に \\(\\nabla f(\\mathbf{x}) = 0\\) となる。 なお、これは上記の 等式制約におけるラグランジュ関数 \\((E.4)\\) において \\(\\lambda=0\\) とした場合の停留条件に等しい。 有効制約の場合 有効制約 \\(\\left(g(\\mathbf{x})=0\\right)\\) の場合、 等式制約におけるラグランジュ関数 \\((E.4)\\) において \\(\\lambda\\neq0\\) とした場合の停留条件に等しい。 ただし、 \\(-\\nabla f(\\mathbf{x}&#94;{\\ast})\\) は \\(g(\\mathbf{x})<0\\) の外側へと向かうはず だから、 あるパラメータ \\(\\lambda>0\\) が存在して、 $$\\nabla f(\\mathbf{x}) = -\\lambda\\nabla g (\\mathbf{x})$$ が成立しなければならない。 勾配 意味 最適化問題における問題における意味 \\(\\nabla f(\\mathbf{x})\\) \\(f\\) が大きくなる方向 目的とは別の方向 \\(\\nabla g(\\mathbf{x})\\) \\(g\\) が大きくなる方向 \\(g(\\mathbf{x})<0\\) の外側へと向かう方向 KKT条件 上記の無効制約・有効制約のどちらの場合にせよ、 \\(\\lambda g(\\mathbf{x})=0\\) が成立することがわかる。 したがって、 \\(g(\\mathbf{x})\\leq0\\) という制約の下で \\(f(\\mathbf{x})\\) を最小化するには、以下の Karush-Kuhn-Tucker(KKT)条件 のもとで、 \\(\\mathbf{x},\\lambda\\) に関して ラグランジュ関数 \\((E.4)\\) の停留点を求めれば良い。 $$ \\begin{aligned} \\begin{cases} \\text{Primal feasibility} &g(\\mathbf{x})\\leq0 & (E.9)\\\\ \\text{Dual feasibility} &\\lambda \\geq 0 & (E.10)\\\\ \\text{Complementary slackness} &\\lambda g(\\mathbf{x}) = 0 & (E.11) \\end{cases} \\end{aligned} $$ なお、当然ではあるが、「制約条件の符号の向き」と「目的関数の最大化・最小化」には以下の関係がある。（ \\(\\lambda\\geq0\\) ） 目的関数 \\(f(\\mathbf{x})\\) 制約条件 \\(g(\\mathbf{x})\\) ラグランジュ関数 \\(L(\\mathbf{x},\\lambda)\\) \\(\\min f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\leq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) + \\lambda g(\\mathbf{x})\\) \\(\\min f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\geq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) - \\lambda g(\\mathbf{x})\\) \\(\\max f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\leq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) - \\lambda g(\\mathbf{x})\\) \\(\\max f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\geq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) + \\lambda g(\\mathbf{x})\\) 一般化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g_j(\\mathbf{x})=0 & (j=1,\\ldots,J)\\\\ & h_k(\\mathbf{x})\\leq0 & (k=1,\\ldots,K)\\\\ \\end{aligned} $$ 以下のラグランジュ関数を最適化する。 $$L\\left(\\mathbf{x},\\{\\lambda_j\\},\\{\\mu_k\\}\\right) = f(\\mathbf{x}) + \\sum_{j=1}&#94;J\\lambda_jg_j(\\mathbf{x}) + \\sum_{k=1}&#94;K\\mu_kh_k(\\mathbf{x})\\qquad (E.12)$$ ここで、KKT条件は、以下となる。 $$ \\begin{aligned} \\begin{cases} \\text{Primal feasibility} &g_j(\\mathbf{x})=0,h_k(\\mathbf{x})\\leq0 \\\\ \\text{Dual feasibility} &\\mu_k \\geq 0\\\\ \\text{Complementary slackness} &\\mu_kh_k(\\mathbf{x}) = 0 \\end{cases} \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-2.html"},{"title":"カーネル法","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt 講義の構成 パターン認識 カーネル法の紹介 最適化理論の復習 サポートベクターマシーン パターン認識 対象を識別するルールを訓練データより、自動的に取得する。 各対象を全データ共通次元のベクトルで表現すれば、識別関数 $f(\\mathbf{x})$ は、特徴空間上に定義される。 元の空間 （入力空間） を非線形に写像すれば、写像先 （特徴空間） で線形識別することで非線形識別が達成される。 $$\\phi:\\mathbf{X}\\rightarrow\\mathbb{R}&#94;m$$ どのように写像を定めるかは難しい問題。 カーネル法の紹介 上で紹介した写像を、 類似度関数（カーネル関数） に基づいて決める手法。（例：ガウシアンカーネル $K(\\mathbf{x},\\mathbf{x}&#94;{\\prime}) = \\exp\\left(-\\frac{\\|\\mathbf{x}-\\mathbf{x}&#94;{\\prime}\\|}{\\sigma}\\right)$） 類似度さえ定義できればどのような対象（例：生物学的ネットワーク上のタンパク質の分類）にでも適用できる。 複雑な問題になると非常に高い次元に写像する必要があるが、カーネル関数さえ求められれば写像 $\\phi$ を陽に求める必要はない （カーネルトリック） 。 $k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ が有効なカーネル関数であるための必要十分条件は、任意の $\\{\\mathbf{x}_n\\}$ に対して、要素が $k(\\mathbf{x}_n,\\mathbf{x}_m)$ で与えられるグラム行列 $\\mathbf{K}$ が半正定値であること。 新しいカーネル関数を定義してそれが有効な関数かを確認するのは大変なので、次の性質を用いて新たな関数を定義することが多い。 新たなカーネル関数を構築するための方法 有効なカーネルとして $k_1(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ と $k_2(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ が与えられた時、次の関数もやはりカーネル関数として有効である。 $$\\begin{aligned} k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=c k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) & (6.13)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=f(\\mathbf{x}) k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) f\\left(\\mathbf{x}&#94;{\\prime}\\right) & (6.14)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=q\\left(k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.15)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=\\exp \\left(k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.16)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)+k_{2}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)& (6.17)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) k_{2}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) & (6.18)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{3}\\left(\\phi(\\mathbf{x}), \\phi\\left(\\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.19)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=\\mathbf{x}&#94;{\\mathrm{T}} \\mathbf{A} \\mathbf{x}&#94;{\\prime}& (6.20) \\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{a}\\left(\\mathbf{x}_{a}, \\mathbf{x}_{a}&#94;{\\prime}\\right)+k_{b}\\left(\\mathbf{x}_{b}, \\mathbf{x}_{b}&#94;{\\prime}\\right) & (6.21)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{a}\\left(\\mathbf{x}_{a}, \\mathbf{x}_{a}&#94;{\\prime}\\right) k_{b}\\left(\\mathbf{x}_{b}, \\mathbf{x}_{b}&#94;{\\prime}\\right) & (6.22) \\end{aligned}$$ ※ ここで、それぞれの変数は以下の意味を持つ。 変数 説明 $c>0$ 定数 $f(\\cdot)$ 任意の関数 $q(\\cdot)$ 非負の係数を持つ多項式 $\\phi(\\mathbf{x})$ $\\mathbf{x}$ から $\\mathbb{R}&#94;{M}$ への関数 $k_3(\\cdot,\\cdot)$ $\\mathbb{R}&#94;{M}$ で定義された有効なカーネル $\\mathbf{A}$ 対象な半正定値行列 $\\mathbf{x}_a,\\mathbf{x}_b$ $\\mathbf{x}=(\\mathbf{x}_a,\\mathbf{x}_b)$ であるような変数（必ずしも互いに素である必要はない） $k_a,k_b$ それぞれの特徴空間において有効なカーネル関数 カーネル関数の例 $$k(x,x&#94;{\\prime}) = \\boldsymbol{\\phi}(x)&#94;T\\boldsymbol{\\phi}(x&#94;{\\prime}) = \\sum_{i=1}&#94;M\\phi_i(x)\\phi_i(x&#94;{\\prime})\\qquad (6.10)$$ # 多項式 ガウス シグモイド 基底関数 $$\\phi_j(x) = cx&#94;j$$ $$\\phi_j(x) = \\exp\\left\\{-\\frac{(x-\\mu_j)&#94;2}{2s&#94;2}\\right\\}\\qquad(3.4)$$ $$\\begin{aligned}\\phi_j(x) &= \\sigma\\left(\\frac{x-\\mu_j}{s}\\right) & (3.5)\\\\\\sigma(a) &=\\frac{1}{1+\\exp(-a)} & (3.6)\\end{aligned}$$ In [2]: # mapping function def polynomial ( x , d , c = 1 ): return c * x ** d def gaussian ( x , mu , s = 0.1 ): return np . exp ( - (( x - mu ) ** 2 ) / ( 2 * s ** 2 ) ) def logistic ( x , mu , s = 0.1 ): return 1 / ( 1 + np . exp ( - ( x - mu ) / s )) In [3]: # mapping function kernel = lambda phi , x_prime , X , key = None , ** params : np . array ([ sum ([ phi ( x_prime , ** { key : val }) * phi ( x , ** { key : val }) for val in params [ key ]]) for x in X ]) In [4]: params = [ ( polynomial , - 0.5 , \"d\" , np . linspace ( 1 , 11 , 11 )), ( gaussian , 0 , \"mu\" , np . linspace ( - 1 , 1 , 11 )), ( logistic , 0 , \"mu\" , np . linspace ( - 1 , 1 , 11 )), ] In [5]: X = np . linspace ( - 1 , 1 , 1000 ) In [6]: ncol = len ( params ) fig = plt . figure ( figsize = ( 12 , 6 )) for i , param in enumerate ( params ): phi , x_prime , key , vals = param ax_base = plt . subplot2grid (( 5 , ncol ),( 0 , i ), rowspan = 3 ) for val in vals : Y = phi ( X , ** { key : val }) ax_base . plot ( X , Y ) ax_base . set_title ( phi . __name__ ) ax_kernel = plt . subplot2grid (( 5 , ncol ),( 3 , i ), rowspan = 2 ) ax_kernel . plot ( X , kernel ( phi , x_prime , X , key , ** { key : vals })) ax_kernel . scatter ( x_prime , min ( ax_kernel . get_ylim ()), marker = \"x\" , color = \"black\" , label = \"$x&#94;{\\prime}$\" ) ax_kernel . set_xlabel ( \"$x$\" ), ax_kernel . set_title ( \"$k(x,x&#94;{\\prime})$\" ), ax_kernel . legend () plt . tight_layout () plt . show () 様々なカーネル 生物学的配列のカーネル Spectrum kernel (Leslie et al., 2002) Marginalized kernel (Tsuda et al., 2002) Profile kernel (Kuang et al., 2004) Local alignment kernel (Saigo et al., 2004) 木構造に関するカーネル Kernel for phylogenetic profiles (Vert, 2002) Kernel for natural language (Suzuki et al., 2003) Kernel for RNA sequences (Kin et al., 2002) ※ 詳しくは、 Kernel Methods in Computational Biology, MIT Press, 2004 を参照 最適化理論の復習 ラグランジュ未定乗数法 に記載。 サポートベクターマシーン マージン最大化 に基づく線形識別器 カーネル関数と組み合わせることによって非線形な識別も可能 サンプル間の類似度にしか依存しない （→非ベクトルデータの分類にも適用可能） 詳しくは サポートベクターマシン(SVM) に記載。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-1.html"},{"title":"生物統計論 第3回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section3.1 Multiple Test Correction \"The more inferences are made, the more likely erroneous inferences are to occur.\" (ex. Even if the type1 error rate is 1% for each data, 10 out of 1000 sample will be rejected on average.) Terminology FWER(Family-wise error rate) : the probability of making at least one type I error (FP) in the family. FDR(False discovery rate) : the expected type I error (FP) rate in rejected data. FDR(False discovery rate) Null hypotheses: $H_1,\\ldots,H_{g_j}$ Alternative hypotheses: $H_{g_j+1},\\ldots,H_g$ Procedure to reject hypotheses : $d_{\\alpha}: \\left(P_1,P_2,\\ldots,P_g\\right)\\rightarrow\\left\\{H_{i_1},\\ldots,H_{i_K}\\right\\}$ Expected ratio of FP in rejected hypotheses: $\\mathrm{FP}=\\sum_{k=1}&#94;K\\mathbb{I}(1\\leq i_k\\leq g_j),\\quad \\mathrm{TP}=K-\\mathrm{FP}$ $\\mathcal{Q} = \\begin{cases}0 & \\text{if }K=(\\mathrm{FP+TP})=0\\\\\\frac{\\mathrm{FP}}{\\mathrm{FP}+\\mathrm{TP}} & \\text{if }K>0\\end{cases}$ $$\\mathrm{FDR}(d_{\\alpha})=\\mathbb{E}\\left(\\mathcal{Q}|H_1,\\ldots,H_g\\right)$$ Methods to counteract this problem Bonferroni Correction Set $\\alpha\\left(=s_{\\alpha}\\leq S_h|H_0\\right)\\leftarrow 1/g\\cdot\\alpha_{\\mathrm{FWER}}$ ($g$: sample size) Therefore, we have: $$\\mathbb{P}\\left(\\{s_{\\alpha}\\leq S_1\\}\\cup\\cdots\\cup\\{s_{\\alpha}\\leq S_g\\}|H_0\\right)\\leq\\sum_{h=1}&#94;g\\mathbb{P}\\left(s_{\\alpha}\\leq S_h|H_0\\right) = g\\cdot\\left(\\frac{1}{g}\\alpha_{\\mathrm{FWER}}\\right) = \\alpha_{\\mathrm{FWER}}$$ Benjamini-Hochberg Procedure (B-H Procedure) If we assume data are distributed independently, we have: $$\\left(P_1,\\ldots,P_g\\right)\\sim\\mathrm{Unif}\\left(0,1\\right)&#94;{\\times g_j}\\times\\mathbb{P}\\left(P|H_{\\text{alternative}}\\right)&#94;{\\times\\left(g-g_j\\right)}$$ We sort the p-value as $p_1\\leq\\cdots\\leq p_g$ Then, $$ \\begin{aligned} d_{\\alpha_{\\mathrm{FDR}}}&#94;{\\mathrm{B-H}}(p_1,\\cdots,p_g) &:=\\mathrm{Reject}\\left\\{H_i|1\\leq i\\max\\left\\{n|p_n\\leq\\left(\\frac{n}{g}\\alpha_{\\mathrm{FDR}}\\right)\\right\\}\\right\\}\\\\ &\\Rightarrow \\mathrm{FDR}\\left(d_{\\alpha_{\\mathrm{FDR}}&#94;{\\mathrm{B-H}}}\\right)\\leq\\alpha_{\\mathrm{FDR}} \\end{aligned} $$ Example. $H_i$ $G_1$ $G_2$ $G_3$ $G_4$ $G_5$ $G_6$ $G_7$ $G_8$ $G_9$ $G_{10}$ $p_i$ $0.1$ $0.4$ $0.8$ $0.035$ $0.9$ $0.04$ $0.001$ $0.002$ $0.6$ $0.7$ In [2]: alpha_FDR = 0.1 g = 10 In [3]: idx = np . array ([ i + 1 for i in range ( g )]) p_value = data = np . array ([ 0.1 , 0.4 , 0.8 , 0.035 , 0.9 , 0.04 , 0.001 , 0.002 , 0.6 , 0.7 ]) q = np . array ([( i + 1 ) / g * alpha_FDR for i in range ( g )]) In [4]: p_value_rank = np . argsort ( p_value ) In [5]: for i in reversed ( range ( g )): if q [ i ] >= p_value [ p_value_rank [ i ]]: break In [6]: print ( f \"Reject: {[f'G {idx} ' for idx in idx[p_value_rank[:i+1]]]}\" ) Reject: ['G7', 'G8', 'G4', 'G6'] Quantile-Quantile plot In [7]: x = - np . log10 ( np . array ([( i + 1 ) / g for i in range ( g )])) y = - np . log10 ( p_value [ p_value_rank ]) In [8]: plt . plot ( x , y , color = \"red\" , label = \"observed\" ) plt . plot (( 0 , min ( x [ 0 ], y [ 0 ])),( 0 , min ( x [ 0 ], y [ 0 ])), color = \"black\" , label = \"$y=x$\" ) plt . title ( \"Quantile-Quantile plot\" ) plt . xlabel ( \"$-\\log_ {10} $ expected P-value\" ) plt . ylabel ( \"$-\\log_ {10} $ observed P-value\" ) plt . legend () plt . grid () plt . show () Section3.2 Probabilistic Models Hypothesis Testing Probabilistic Modeling Models data generation processes in uninteresting scenarios $H_0$ Models data generation processes under interesting biological scenario $H_1$ (possibly as well as $H_0$) Show inconsistency with $H_0$ Check fit of the model to the data Problems of Hypothesis Testing Approaches Difficult to model satisfactory, uninteresting scenarios Does not model interesting biological scenarios A rejected hypothesis does not necessarily tell anything interesting Still useful for many small parts of a full analysis probabilistic Modeling Strong regularity from the probability condition Can include various biological knowledge Adjustable to the quality, amount, randomness of the data Conditional probability makes it easy to integrate multiple models Once a satisfactory model is obtained, we can extract various information from expectation values Powerful general tools are available Maximal Likelihood EM algorithms Bayesian inference MCMC sampling etc... Section3.3 Likelihood Q. How to adjust parameters?? A. Maximize the Likelihood likelihood observed data: $\\mathbf{D} = \\left\\{x&#94;{(h)}|h=1,\\cdots,n\\right\\}$ parametrized model distribution: $\\mathbb{P}(x|\\theta)$ Likelihood: $L(\\theta|D) = \\mathbb{P}(D|\\theta) = \\prod_{h=1}&#94;n\\mathbb{P}\\left(x&#94;{(h)}|\\theta\\right)$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html"},{"title":"レポート課題2(10/10出題)","text":"PClhuDns9uTW7tcIKmCPOg==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html"},{"title":"連続最適化(1)制約なし最適化","text":"講師： 佐藤一誠 参考書： 最適化手法 参考書： 機械学習のための連続最適化 In [1]: import numpy as np import matplotlib.pyplot as plt 講義概要 凸最適化問題 最急降下法 ニュートン法 準ニュートン法 凸最適化問題 凸関数 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、以下が成り立つような関数を 凸関数(convex function) と呼ぶ。 $$f\\left(\\left(1-\\theta\\right)x + \\theta x&#94;{\\prime}\\right)\\leq\\left(1-\\theta\\right)f(x) + \\theta f\\left(x&#94;{\\prime}\\right)$$ $f$ が一階微分可能の時、$f$ が凸関数になるための必要十分条件は、感覚的には接戦が常に関数の下に来ることで、 $$\\forall x,x&#94;{\\prime}\\in\\mathcal{X},\\quad f\\left(x&#94;{\\prime}\\right)\\geq f(x) + \\nabla f(x)&#94;T\\left(x&#94;{\\prime}-x\\right)$$ $f$ が二階微分可能の時、$f$ が凸関数になるための必要十分条件は、 ヘッセ行列(Hessian matrix) $\\nabla&#94;2f(x)$ が 半正定値(positive semi-definite) ↔︎$\\nabla&#94;2f(x)$ の 固有値(eigenvalue) が全て非負 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、$(1-\\theta)x+\\theta x&#94;{\\prime}$ も $\\mathcal{X}$ に属するとき、$\\mathcal{X}$ を 凸集合(convex set) と呼ぶ。$x$ と $x&#94;{\\prime}$ を結ぶ線分上の全ての点が $\\mathcal{X}$ に属するということ。 最適化 最適化問題(optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 最適化アルゴリズム(optimization algorithm)： 収束する点列の生成アルゴリズム 最適性条件：最適化問題の最適解であるための必要条件 制約なし最適化問題(unconstrained optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 $f$ を 目的関数(objective function) と呼ぶ。 目的関数は 微分可能(differentiable) と仮定する。 最適性条件：$\\mathbf{x}&#94;{\\star}$ が最適解のとき $$\\nabla f(\\mathbf{x}&#94;{\\star}) = 0$$ 凸最適化問題(convex optimization problem)： 関数 $f$ が凸で集合 $\\mathcal{X}$ も凸 最適解（の集合）が 一意に定まる。 最適解の必要十分条件： 勾配(gradient) がゼロ（凸でない場合は 必要条件 ） 最急降下法 最急降下法(steepest descent method) ※ 勾配法(gradient method)とも。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\quad (\\varepsilon_k>0\\text{ : step size})$$ 凸最適化問題の場合、 大域的最適解(global optimization solution) が求まる 非凸最適化問題の場合、 局所最適解(local optimization solution) しか求められず、様々な初期値から何回か学習して最適解を採用する、ことしかできない。 ステップ幅(step size)の選択 焼きなまし(annealing) ：「最初は大きく、徐々に小さく」。しかし、適切に実装することは容易でない。 正規化(normalization) ：$\\varepsilon_k = \\varepsilon_k&#94;{\\prime}/\\|\\nabla f(\\mathbf{x}_k)\\|$ 勾配が大きいとき安定するが、勾配が小さいときは不安定 厳密直線探索(exact line search) 目的関数の値を最小にするステップ幅を求める。 $$\\underset{\\varepsilon_k>0}{\\min}f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)$$ $f$ が 単峰関数(unimodal function) の場合は、 二分探索法(binary search) や 黄金分割探索(golden section search) などの探索によって最小値を探す。 一般に、一次元の非線形最小化問題を解く必要があるため、最適なステップ幅の探索に時間がかかる。 厳密直線探索を用いた最急降下法は、 一次収束(linear convergence) する。 $$\\text{Q-linear convergence: }\\|\\mathbf{x}_{k+1}-\\mathbf{x}&#94;{\\star}\\| c\\leq \\|\\mathbf{x}_k-\\mathbf{x}&#94;{\\star}\\|&#94;q,\\quad 0 In [2]: ITERATION = 10 N = 100 fsize = 4 In [3]: a = 10 ; b = 1 A = 2 * np . diag ([ a , b ]) func = lambda x , y : a * x ** 2 + b * y ** 2 In [4]: x1min =- 5 ; x1max = 5 ; x2min =- 5 ; x2max = 5 initialX = np . array ([ x1min + 1 , x2max - 2 ]) x1 = np . linspace ( x1min , x1max , N ) x2 = np . linspace ( x2min , x2max , N ) X1 , X2 = np . meshgrid ( x1 , x2 ) Z = func ( X1 , X2 ) In [5]: def find_step_size ( method , f , X , A , ** kwargs ): df = A . dot ( X ) if method == \"fixed\" : epsilon = 1e-1 elif method == \"exact line search\" : epsilon = np . sum ( np . square ( df )) / np . sum ( np . square ( df ) * A . diagonal ()) elif method == \"backtracking line search\" : epsilon = 1 alpha = kwargs [ \"alpha\" ]; beta = kwargs [ \"beta\" ] while True : newX = X - epsilon * df if f ( newX [ 0 ], newX [ 1 ]) - f ( X [ 0 ], X [ 1 ]) <= - alpha * epsilon * np . sum ( np . square ( df )): break epsilon = beta * epsilon return epsilon In [6]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [7]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 例：$f(x) = 1/2\\mathbf{x}&#94;T\\mathbf{Ax}$ $$ \\begin{aligned} \\frac{\\partial f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)}{\\partial\\varepsilon_k} &= \\frac{\\partial}{\\partial\\varepsilon_k}\\frac{1}{2}\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)&#94;T\\mathbf{A}\\left(\\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\\\ &= \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right) - \\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{Ax}_k\\\\ &=0\\\\ \\therefore \\varepsilon_k&#94;{\\star} &= \\frac{\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2}{\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right)}\\qquad (\\nabla f\\left(\\mathbf{x}_k\\right) = \\mathbf{Ax}) \\end{aligned} $$ バックトラック直線探索(backtracking line search) $\\varepsilon_k=1$ に初期化 アルミホ基準(Armijo rule) ： $$f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right) - f\\left(\\mathbf{x}_k\\right)\\right) \\leq\\alpha\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2$$ が成り立つまで $\\varepsilon_k$ を $\\varepsilon_k\\leftarrow\\beta\\varepsilon_k$ と減衰させる。（$0<\\alpha, \\beta<1$） 目的関数の減少量の線形予測値の $\\alpha$ 倍の減少を保証している。 $f$ の真の減少量： $$g\\left(\\varepsilon_k\\right) = f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right) - f\\left(\\mathbf{x}_k\\right)$$ $f$ の減少量の 線形予測値 $$\\begin{aligned}\\varepsilon_kg&#94;{\\prime}(0) &=\\varepsilon_k\\cdot\\left( -\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k-0\\cdot\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\right)\\\\&=-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k\\right)\\\\&=-\\varepsilon_k\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2 \\end{aligned}$$ In [8]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [9]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 微分不可能な場合 目的関数 $f$ が 微分不可能(non-differentiable) の場合は、微分の概念を一般化した 劣微分 を用いる。 凸関数 $f$ の $\\mathbf{x}&#94;{\\prime}$ での 劣勾配(sub-gradient) とは、全ての $\\mathbf{x}\\in\\mathcal{X}$ に対して次式を満たす $\\mathbf{\\xi}$ $$f(\\mathbf{x})\\geq f\\left(\\mathbf{x}&#94;{\\prime}\\right) + \\mathbf{\\xi}&#94;T\\left(\\mathbf{x}-\\mathbf{x}&#94;{\\prime}\\right)$$ $f$ が微分可能な時、$\\mathbf{\\xi} = \\nabla f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ 上式を満たす $\\mathbf{\\xi}$ 全体を $\\partial f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ で表し、 劣微分(sub-differential) と呼ぶ。 微分不可能な点では、劣微分のどれかの値を用いる。 ニュートン法 一般にニュートン法という名称は、方程式の解を求めるアルゴリズムを指すが、以下を表すことが多い。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ 勾配法では一階微分しか用いていないので、二階微分も用いることで反復回数を減らすことが狙い。実際 $k$ が十分大きい時、最適解 $\\mathbf{x}&#94;{\\star}$ の近傍で 二次収束(quadratic convergence) するが、逆行列を求める計算コストが大きい。 二次の テーラー展開(Taylor expansion) を用いて $f$ を現在の解 $\\mathbf{x}_k$ の周りで近似 $\\left(f(\\mathbf{x})\\approx f_k(\\mathbf{x})\\right)$ し、その二次近似を最小にする $\\mathbf{x}_k$ に更新する。 $$f_k(\\mathbf{x}) = f(\\mathbf{x}_k) + \\nabla f(\\mathbf{x}_k)&#94;T\\left(\\mathbf{x}-\\mathbf{x}_k\\right) + \\frac{1}{2}\\left(\\mathbf{x}-\\mathbf{x}_k\\right)&#94;T\\nabla&#94;2f(\\mathbf{x}_k)(\\mathbf{x}-\\mathbf{x}_k)$$ $f_k$ の勾配をゼロと置いた方程式 $$\\nabla f_k(\\mathbf{x}) = \\frac{\\partial f_k(\\mathbf{x})}{\\partial \\mathbf{x}}= \\nabla f(\\mathbf{x}_k) + \\nabla&#94;2f(\\mathbf{x}_k)\\left(\\mathbf{x}-\\mathbf{x}_k\\right) = \\mathbf{0}$$ を解けば、$f_k$ の最小解が以下のように求まる $$\\mathbf{x}&#94;{\\star} = \\mathbf{x}_k - \\left(\\nabla&#94;2 f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ なお、ヘッセ行列が逆行列を持たない時は、 単位行列の定数倍を加えて対処する（正則化, regularization） らしい。 $$\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right) + \\mu\\mathbf{I}\\right)&#94;{-1},\\quad\\mu>0$$ 準ニュートン法 ニュートン法の近似。ニュートン法ではヘッセ行列の逆行列を求めるのに計算コストがかかるので、勾配ベクトル $\\nabla f(\\mathbf{x})$ を用いて近似計算する。 BFGSアルゴリズムを用いたヘッセ行列の更新式が有名 なお、 レポート課題 で詳しく記述しているが、BFGSアルゴリズムのヘッセ行列の更新式は以下で表される。 $$ \\mathbf{H}_{k+1} =\\mathbf{H}_k+\\frac{\\mathbf{t}_k\\mathbf{t}_k&#94;T}{\\mathbf{s}_k&#94;T\\mathbf{t}_k}-\\frac{\\mathbf{H}_k\\mathbf{s}_k\\mathbf{s}_k&#94;T\\mathbf{H}_k}{\\mathbf{s}_k&#94;T\\mathbf{H}_k\\mathbf{s}_k} $$ なお、この時 $$ \\begin{aligned} \\begin{cases} \\mathbf{s}_k &= \\mathbf{x}_{k+1} - \\mathbf{x}_k\\\\ \\mathbf{t}_k &= \\nabla f(\\mathbf{x}_{k+1}) - \\nabla f(\\mathbf{x}_k) \\end{cases} \\end{aligned} $$ まとめ 凸最適化問題 目的関数が凸関数で定義域が凸集合 最適解が一意に定まる 最急降下法 勾配を降下するように値を更新 ステップ幅の選択が重要 目的関数が微分不可能な場合は、劣勾配法や近接勾配法を用いる ニュートン法 二階微分の情報を利用する ヘッセ行列の近似を用いる準ニュートン法が実用的 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html"},{"title":"Zuker Algorithm","text":"Free energy minimization of RNA seconary structure. In cells, RNAs are likely to form energetically stable secondary structure. The correctness of secondary structure should be evaluated based on the free energy, rather than the number of base-pairs ( Nussinov Algorithm ) We first describe a way to calculate the free energy of a particular RNA secondary structure. We describe the Zuker algorithm which calculates the RNA secondary structure with the minimum free energy (MFE). Free energy of RNA secondary structure The free energy of a secondary structure is approximated as the sum of the free energy of \"loops\". $$E = \\sum_iE_i$$ The free energy of individual loop is given by experimental data. (ex. $\\mathrm{C-G: }-3.4\\mathrm{kcal/mol}$, $\\mathrm{U-A: }-0.9\\mathrm{kcal/mol}$) Five types of \"loops\" hairpin loop stacking bulge loop internal loop multi-loop F1(i,j) F2(i,j,h,l) Fm=a+bk+cu a,b,c: constant k: the number of base-pairs in a multi-loop u: the number of single stranded nucleotides in a multi-loop Algorithm variable meaning $W(i,j)$ the minimum free energy of subsequence from $i$ to $j$. $V(i,j)$ the minimum free energy of subsequence from $i$ to $j$ when $i$ to $j$ forms a base-pair. $M(i,j)$ the minimum free energy of subsequence closed by two or more base pairs. $M1(i,j)$ the minimum free energy of subsequence closed by one or more base pairs. Recursion $$ \\begin{aligned} W(i,j) &= \\min \\begin{cases} W(i+1,j)\\\\W(i,j-1)\\\\V(i,j)\\\\\\min_{i\\leq k Initialization In [1]: from kerasy.Bio.structure import Zuker from kerasy.utils.bio import readMonoSeq In [2]: model = Zuker () In [3]: # 以下の形のパラメタファイルを受け取ります。 ! cat params.json { \"inf\": 1e3, \"type\": \"RNA\", \"Watson_Crick\": true, \"Wobble\": true, \"hairpin\": [Infinity, Infinity, 4.4, 4.6, 4.7, 4.4, 5.0, 4.5, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 5.9, 6.0, 6.1, 6.1, 6.2, 6.2, 6.3, 6.3, 6.4, 6.4, 6.5, 6.5, 6.5, 6.6, 6.6, 6.7, Infinity], \"internal\": [Infinity, 1.0, 1.0, 1.1, 2.0, 2.0, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9, 3.0, 3.1, 3.1, 3.2, 3.3, 3.3, 3.4, 3.4, 3.5, 3.5, 3.5, 3.6, 3.6, 3.7, 3.7, Infinity], \"buldge\": [1.0, 1.0, 1.0, 1.1, 2.0, 2.0, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9, 3.0, 3.1, 3.1, 3.2, 3.3, 3.3, 3.4, 3.4, 3.5, 3.5, 3.5, 3.6, 3.6, 3.7, 3.7, Infinity], \"a\": 6.0, \"b\": -1.0, \"c\": 0.1, \"stacking_cols\": [\"CG\", \"AU\", \"GU\"], \"stacking_score\": [[-3.0, -2.0, -2.0], [-2.0, -0.5, -0.5], [-2.0, -0.5, -0.5]] } In [4]: model . load_params ( \"params.json\" ) In [5]: model . params () | parameter |value | --------------------- |a | 6.0| |b | -1.0| |c | 0.1| |inf |1000.0| |type | RNA| |Watson_Crick| 1| |Wobble | 1| In [6]: model . stacking_cols Out[6]: array(['CG', 'AU', 'GU'], dtype=' In [7]: model . stacking_score Out[7]: array([[-3.e+00, -2.e+00, -2.e+00, 1.e+03], [-2.e+00, -5.e-01, -5.e-01, 1.e+03], [-2.e+00, -5.e-01, -5.e-01, 1.e+03], [ 1.e+03, 1.e+03, 1.e+03, 1.e+03]]) In [8]: # サンプル配列 sequence = readMonoSeq ( path = \"sample_seq4.fasta\" ) In [9]: print ( sequence ) ['CCACCUCGCCGCGAAGAUUGGAUGUAAUGUUCACUUAAGCCUAGGCGUUCGCAAAGAAAUACCUAUGGUAAUUUGACUAGCGGUAACAAUGAAAGAAAAGGUGUAGGCGAGGUGGG'] In [10]: # 最大ペアの配列 model . predict ( sequence [ 0 ]) Zuker Algorithm Score: -37.5 ================================================================= seq: CCACCUCGCCGCGAAGAUUGGAUGUAAUGUUCACUUAAGCCUAGGCGUUCGCAAAGAAAU : ((((((((((((((((..((((((...)))))))))..((((....((((((..(((((( seq: ACCUAUGGUAAUUUGACUAGCGGUAACAAUGAAAGAAAAGGUGUAGGCGAGGUGGG : (((...))))))))..)).))))..))...........)))))).)))))))))). ================================================================= In [11]: model . W Out[11]: array([[ 0. , 0. , 0. , ..., -34.5, -37.5, -37.5], [ 0. , 0. , 0. , ..., -34.5, -34.5, -34.5], [ 0. , 0. , 0. , ..., -32.5, -32.5, -32.5], ..., [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ]]) In [12]: model . M Out[12]: array([[1000. , 999. , 999. , ..., -35.4, -38.5, -38.4], [1000. , 1000. , 999. , ..., -35.5, -35.4, -35.3], [1000. , 1000. , 1000. , ..., -33.4, -33.3, -33.2], ..., [1000. , 1000. , 1000. , ..., 1000. , 999. , 999. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 999. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ]]) In [13]: model . V Out[13]: array([[1000. , 1000. , 1000. , ..., -31.5, -37.5, -34.5], [1000. , 1000. , 1000. , ..., -34.5, -31.5, -31.5], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], ..., [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ]]) if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-9.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-9.html"},{"title":"生物物理学 第3回","text":"講師： 樋口秀男 タンパク質の構造と安定性 タンパク質の定義 特定のアミノ酸（20種類）が重合した重合体である。 特定の立体構造をとる。 （これがないと ポリペプチド ） 機能 説明 分子認識 ミオグロビンは酸素を結合。抗体は抗原と結合。 触媒（酵素） 化学反応の反応速度は \\(10&#94;8\\) ~ \\(10&#94;{17}\\) 倍にも加速される。 制御 基質の結合や環境の変化に伴い構造を変化し、タンパク質の反応を制御する。 エネルギー変換 光を電位に換え、ATP分解を力に換える。 構造形成・維持 タンパク質重合体は細胞や細胞内器官の構造を支える。 タンパク質を構成するアミノ酸 d-グリセルアルデヒドの立体配置を基準として、この立体配置を崩さずにできる化合物をD-体、その鏡像異性体がL-体。 ※ タンパク質はL体 構造 名前 略（三文字） 略（一文字） アラニン Ala A アルギニン Arg R アスパラギン Asn N アスパラギン酸 Asp D システイン Cys C グルタミン酸 Glu E グルタミン Gln Q グリシン Gly G ヒスチジン His H イソロイシン Ile I ロイシン Leu L リシン Lys K メチオニン Met M フェニルアラニン Phe F プロリン Pro P セリン Ser S トレオニン Thr T トリプトファン Trp W チロシン Tyr Y バリン Val V # 上記の表は以下のコードを応用して作成した。 url = \"https://ja.wikipedia.org/wiki/タンパク質を構成するアミノ酸\" soup = BeautifulSoup ( requests . get ( url ) . content , 'lxml' ) for li in soup . findAll ( \"li\" , { \"class\" : \"gallerybox\" }): text = str ( li ) . replace ( ' \\n ' , '' ) src = re . findall ( r '<img.*src=\"(.+?)\".*>' , text )[ 0 ] name , l3 , l1 = re . findall ( r '<p>.*title=\"(.+?)\".*<br/>\\((.+?)\\xa0\\/\\xa0(.+?)\\)</p>' , text )[ 0 ] 理論的構造決定法 アミノ酸配列→量子力学→タンパク質の構造とエネルギー状態を決定 シュレディンガー方程式は水素原子のみ解析的に解くことができ、それ以外は近似を行う必要がある。 現在、高精度に計算（第一原理分子動力学法）できるのは1つの構造に対して100原子程度である。 水分子を考慮しなければ、タンパク質の構造や電子軌道を精度よく求めることはできない。 アミノ酸がポリペプチド結合した重合体から機能を持つ立体構造を創り構造を維持するためには、 立体構造が熱力学的に安定でなければならない。 → Gibbs自由エネルギー \\(G\\) を見る。 準安定なのは、 \\(G\\) が極小の時。 最も安定なのは、 \\(G\\) が最小の時。 まとめ 生体の機能を主に担っているのは、タンパク質である。（RNAも機能に重要である。） タンパク質は分子認識・触媒・制御・エネルギー変換・構造形成維持などの機能を有している。 アミノ酸配列から計算によってタンパク質構造を決定することに成功していない。（部分構造はできている。） 酵素機能を行うとき、酵素の多くの場所が構造変化を行う。 第7回目の講義(11/6)の小テスト 指定課題： 第1,2,3回の講義の中で、最も興味のある事柄について300~500字でまとめる。 この事柄と関連する内容を調べるなどして、自分の意見を300~500字で述べる。 図や式を使いわかりやすく説明すること。図や式は文字数に含めない。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html"},{"title":"領域分割","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt import matplotlib.patches as patches # 円を描画 領域分割 色によるクラス分け（画像のみ） k-means法 mean-shift法 色によるクラス分け（画像のみ） 例えば、画素(RGB)や位置(x,y)の似たものをグループ分けする。 二値分類(FG/BG分類)で有名なのが クロマキー （ 青色・緑色 背景） k-means法 予めクラス数 $k$ を指定してクラスタリング。 $k$ 個の代表点をランダムにサンプリング（$k$ 個をデータの中からとってきても良いし、完全にランダムでばらまいても良い。） 全てのデータ点から一番近い代表点を $1$ つ探す。 $k$ 個のグループの重心を計算し、それを新たな代表点とする。 2,3を繰り返す。 In [2]: from kerasy.ML.KMeans import KMeans In [3]: def decomposeImg ( path , K ): imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== KMeans === x = rgb_img . reshape ( - 1 , 3 ) model = KMeans ( K = K , random_state = 0 ) model . fit ( x ) cls , mu = model . predict ( x ) mu = mu . astype ( int ) for k in range ( K ): x [ cls == k ] = mu [ k ] # KMeansed Image. ax_K = fig . add_subplot ( 1 , 2 , 2 ) ax_K . imshow ( x . reshape ( img_shape )) ax_K . set_title ( f \"K= {K} \" ), ax_K . set_xticks ([]), ax_K . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No.{i+1:<0{len(str(K))}}, rgb=({','.join(mu[k].astype(int).astype(str))})\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () In [4]: decomposeImg ( path = \"lenna.png\" , K = 8 ) mean-shift法 画像領域の分割や対象画像の追跡に用いられる手法。 $d$ 次元の特徴量（ex. $\\mathrm{R,G,B},x,y$）を持った $N$ 個のデータ点 $\\mathbf{x}_i$ が分布しているときに、この点群 $\\mathbf{x}_i$ を標本点として得られるような確率密度関数 $f(\\mathbf{x})$ を考え、その標本点から確率密度関数 $f(\\mathbf{x})$ の極大点を探索する手法。 点群が集中している場所は確率密度関数 $f(\\mathbf{x})$ の値が高く、まばらな場所は低くなる。 ある任意の観測点 $\\mathbf{y}_j$ から半径 $h$ の超球を考え、その範囲にある点群 $\\mathbf{x}_i$ の平均 $\\mathbf{x}_c$ を計算し、その位置に観測点 $\\mathbf{y}_{j+1}$ を移動する。 この操作を繰り返すと観測点は最大勾配の方向に移動し、やがて極大点に収束する。 このように、 「近傍の点群の平均(mean)位置に移動(shift)を繰り返し、極大点を求める方法」 から ミーンシフト法(mean-shift) と呼ばれる。 In [5]: fig , ax = plt . subplots ( figsize = ( 6 , 6 )) # Circle r = 0.7 c = patches . Circle ( xy = ( 0 , 0 ), radius = r , ec = 'black' , fill = False ) ax . add_patch ( c ) # Sample Data X , Y = np . random . RandomState ( 123 ) . uniform ( low =- 0.3 , high = 1 , size = ( 2 , 50 )) cls = np . sqrt ( X ** 2 + Y ** 2 ) < r ax . scatter ( X , Y , c = cls , cmap = \"Set1_r\" , alpha = 0.7 ) # Center ax . scatter ( 0 , 0 , color = \"black\" , s = 100 ) ax . text ( 0.05 , - 0.05 , \"$\\mathbf {y} _ {j} $\" , fontsize = 12 ) # Mean mux , muy = np . mean ( X [ cls ]), np . mean ( Y [ cls ]) ax . scatter ( mux , muy , color = \"black\" , marker = '*' , s = 100 ) ax . text ( mux + 0.05 , muy , \"$\\mathbf {x} _c(=\\mathbf {y} _{j+1})$\" , fontsize = 12 ) # Arrow ax . annotate ( '' , xy = ( mux , muy ), xytext = ( 0 , 0 ), arrowprops = dict ( width = 2 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'blue' , edgecolor = 'blue' ) ) # Radius ax . plot (( 0 , 0 ),( 0 , - r ), color = \"black\" ) ax . text ( 0.05 , - r / 2 , \"r\" , fontsize = 12 ) ax . set_xlim ( - 1 , 1 ) ax . set_ylim ( - 1 , 1 ) plt . show () カーネル密度関数を用いた確率密度関数の推定 $d$ 次元空間内の $N$ 個の点群 $\\mathbf{x}_i$ を考える。この点群をある確率分布に従う標本と考えたとき、$d$ 次元空間内の任意の点 $\\mathbf{x}$ における確率密度関数 $f(\\mathbf{x})$ は、以下の方法で推定される。 $$f(\\mathbf{x}) = \\frac{c_{kd}}{Nh&#94;{d}}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)$$ $c_{hd}$ は、確率密度関数 $f(\\mathbf{x})$ 全体の積分を $1$ にするための正規化係数。 $k(t)$ は、カーネル関数 $K(t)$ の プロファイル で、$K(t)=k(|t|&#94;2)$ 以下の２つのカーネルが代表的である。 ガウシアンカーネル(Gaussian) エパネックニコフカーネル(Epanechnikov) $$K(t) = \\exp\\left(-\\frac{\\mid t\\mid&#94;2}{2}\\right)$$ $$K(t) = \\begin{cases}1- \\mid t\\mid&#94;2 & (\\mid t\\mid\\leq1)\\\\0 & (\\text{otherwise})\\end{cases}$$ 確率密度関数の勾配 勾配法(gradient method) を用いて極大点を逐次的に求めるために、確率密度関数の勾配 $\\nabla f(\\mathbf{x})$ を求める。 $$ \\begin{aligned} \\nabla f(\\mathbf{x}) &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;Nk'\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)\\left(\\mathbf{x}-\\mathbf{x}_i\\right)\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;N\\left(g_i\\mathbf{x}_i-g_i\\mathbf{x}\\right), \\quad g(t) = -k'(t),g'(t)=g\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|\\right)&#94;2\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\} \\end{aligned} $$ 項 説明 $$\\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}$$ ガウシアンカーネルやエパネックニコフカーネルを用いた場合、正になる。 $$\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\}$$ ミーンシフト と呼ばれる項で、観測点 $\\mathbf{x}$ の近傍のデータ点群 $\\mathbf{x}_i$ の加重平均位置と $\\mathbf{x}$ 自身の差分ベクトルを示す。 勾配法を用いた極大点探索（ミーンシフト法） 初期化：$\\mathbf{y}_0\\leftarrow\\mathbf{x}$ 更新（ミーンシフト） $$\\mathbf{y}_{j+1}\\leftarrow \\mathbf{y}_j + \\left(\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{y}_j\\right) = \\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}$$ $|\\mathbf{y}_{j+1}-\\mathbf{y}_j|<\\text{threshold}$ となるまで2を繰り返す。 収束した $\\mathbf{y}_{j+1}$ を極大点として出力する。 ※ 一般的な勾配法では、更新式 $\\mathbf{y}_{j+1}\\rightarrow\\mathbf{y}_i + \\alpha\\nabla f$ のステップ数 $\\alpha$ を与える必要があるが、ミーンシフト法では ベクトルの大きさは自動的に計算される ので、$\\alpha$ を与える必要がない（らしい…）。 ミーンシフト法を用いたクラスタリングへの応用 $d$ 次元空間中の $N$ 個の点群 $\\mathbf{x}_i$ が与えられた時に、密に分布する点群をクラスタとして分割する。 各点にミーンシフト法を適用し、収束位置 $\\mathbf{x}_i&#94;c$ を計算する。 任意の2個の点 $\\mathbf{x}_i,\\mathbf{x}_j$ について、その収束位置が閾値以下なら（$|\\mathbf{x}_i-\\mathbf{x}_j|<\\text{threshold}$）、この2点を同じ極大点として同じクラスタに入れる。 1,2より、全ての点群 $\\mathbf{x}_i$ を 同じ収束位置（極大点）に属するものごとにクラスタに識別する。 全ての点 $\\mathbf{x}_i$ でこの処理を行わなければならないが、並行化できる。 k-means手法とは異なり、クラスタの数を予め指定する必要がない。 ミーンシフト法を用いたカラー画像の領域分割 カラー画像の $N$ 個の各画素の位置 $\\mathbf{x}_i$ とその画素値 $\\mathbf{v}_i=\\left(R_i,G_i,B_i\\right)$ とし、画素位置-画素値を結合した5次元空間内の点 $\\mathbf{z}_i=(\\mathbf{x}_i,\\mathbf{v}_i)$ を考える。 「距離および色が近い画素が5次元空間内でクラスタを形成している」 とみて、ミーンシフト法で各画素をクラスタリングする。 画素位置に関するバンド幅 $h_s$、画素値に関するバンド幅 $h_r$ を与え、全ての $z_i$ にミーンシフトを行い、収束位置 $\\mathbf{z}&#94;c=(\\mathbf{x}&#94;c,\\mathbf{v}&#94;c)$ を計算する。 $\\mathbf{x}_i$ の画素値を、収束位置の画素の値 $(R&#94;c,G&#94;c,B&#94;c)$ に置き換えることによって、画像の平滑化ができる。 ミーンシフトは、以下の通り計算する。 $$f(\\mathbf{x}) = \\frac{c}{Nh_s&#94;2h_r&#94;3}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}&#94;s-\\mathbf{x}&#94;s_i}{h_s}\\right|&#94;2\\right)k\\left(\\left|\\frac{\\mathbf{x}&#94;r-\\mathbf{x}&#94;r_i}{h_r}\\right|&#94;2\\right)$$ したがって、以下のとおりに位置を更新する。 $$\\mathbf{y}&#94;{s}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;s\\mathbf{x}_i&#94;s}{\\sum_{i=1}&#94;Ng_i&#94;s},\\quad\\mathbf{y}&#94;{r}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;r\\mathbf{x}_i&#94;r}{\\sum_{i=1}&#94;Ng_i&#94;r}$$ $(h_s,h_r)$ のパラメータを大きくすると、より大きな領域に同色が統合され、大まかに分割される。 In [6]: from sklearn.cluster import MeanShift In [7]: import time s = time . time () imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) path = \"lenna.png\" bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== MeanShift === x = rgb_img . reshape ( - 1 , 3 ) model = MeanShift () model . fit ( x ) cls = model . predict ( x ) mu = model . cluster_centers_ . astype ( int ) K = max ( cls ) + 1 for k in range ( K ): x [ cls == k ] = mu [ k ] # MeanShifted Image. ax_Mean = fig . add_subplot ( 1 , 2 , 2 ) ax_Mean . imshow ( x . reshape ( img_shape )) ax_Mean . set_title ( f \"n_cluster= {K} \" ), ax_Mean . set_xticks ([]), ax_Mean . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No.{i+1:<0{len(str(K))}}, rgb=({','.join(mu[k].astype(int).astype(str))})\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () e = time . time () print ( f \"Processing time: {int((e-s)//60):>02}m {(e-s)%60:.3f}s\" ) plt . show () Processing time: 31m 13.287s In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html"},{"title":"領域処理のための特徴量","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 領域の特徴量 フーリエ変換 ガボールフィルタ(Gabor Filter) 同時生起確率 In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt （２次元）フーリエ変換 画像は、フーリエ変換によって周波数領域における別の形で表現される。 フーリエ変換の結果は、画像に含まれるそれぞれの周波数成分を表している。 フーリエ変換後の各周波数成分の大きさを成分ごとに変えることにより、元の画像の性質を変えることができる。 （周波数フィルタリング(frequency filtering)） ローパスフィルタ(lowpass fileter) ：画像に含まれる空間周波数成分のうち、低周波数成分は残し、高周波数成分は除去するようなフィルタ。 ハイパスフィルタ(highpass filter) ：上の逆。高周波数成分は残し、低周波数成分を除去するようなフィルタ。 バンドパスフィルタ(bandpass filter) ：ある中間的な周波数の範囲を残すようなフィルタ。 高域強調フィルタ(high-emphasis filter) ：画像の低周波数成分はそのまま保ちつつ、高周波数成分を強調するフィルタ。 $1$ 次元フーリエ変換 簡単のため、まずは一次元フーリエ変換をみる。 名前 数式 説明 フーリエ変換 $$F(\\omega) = \\int_{-\\infty}&#94;{\\infty}f(t)e&#94;{-i\\omega t}dt$$ 数直線上の表現 （空間領域） から周波数による表現 （周波数領域） への変換 逆フーリエ変換 $$f(x) = \\int_{-\\infty}&#94;{\\infty}F(\\omega)e&#94;{i\\omega x}d\\omega$$ 周波数領域にある関数を元の空間領域に戻す変換 実装 二つの正弦波を重ねた波から、それぞれの成分を取り出すことができるか確かめる。なお、ここでは numpy.fft.fft を利用しています。 これは、 高速フーリエ変換(Fast Fourier Transform) と呼ばれる、 高速に「離散フーリエ変換」を行うアルゴリズム を実装したものです。 In [2]: N = 10000 dt = 0.01 time = np . arange ( 0 , N * dt , dt ) freq = np . linspace ( 0 , 1.0 / dt , N ) In [3]: def sin ( A , f , p ): \"\"\" @param A: Amplitude @param f: Frequency[Hz] @param p: phase \"\"\" func = lambda t : A * np . sin ( 2 * np . pi * f * t + p1 ) return func In [4]: # parameters f1 , f2 = 5 , 8 # frequency[Hz] A1 , A2 = 5 , 3 # Amplitude p1 , p2 = 0 , 1 / 2 * np . pi # phase In [5]: y1 = sin ( A1 , f1 , p1 )( time ) y2 = sin ( A2 , f2 , p2 )( time ) y = y1 + y2 # superposition In [6]: # Computes the discrete Fourier transform (DFT) of a sequence yf = np . fft . fft ( y ) / ( N / 2 ) # Fast Fourier transform. In [7]: fig = plt . figure ( figsize = ( 8 , 4 )) ax1 = fig . add_subplot ( 2 , 1 , 1 ) ax1 . set_ylabel ( \"amplitude\" ) ax1 . set_xlabel ( \"time\" ) ax1 . set_xlim ( 0 , 1 ) ax1 . plot ( time , y , label = \"y(y1+y2)\" , color = \"blue\" ) ax1 . plot ( time , y1 , label = f \"y1(A= {A1} ,f= {f1} )\" , alpha = 0.3 , color = \"green\" ) ax1 . plot ( time , y2 , label = f \"y2(A= {A2} ,f= {f2} )\" , alpha = 0.3 , color = \"red\" ) ax1 . axhline ( 0 , alpha = 0.3 , color = \"black\" ) ax1 . legend () ax2 = fig . add_subplot ( 2 , 1 , 2 ) ax2 . set_ylabel ( \"amplitude\" ) ax2 . set_xlabel ( \"frequency\" ) ax2 . set_xlim ( 0 , 10 ) ax2 . plot ( freq , abs ( yf ), color = \"blue\" ) plt . tight_layout () plt . show () 見事に、二つの周波数成分を取り出すことができました。 $2$ 次元フーリエ変換 ※ 一般に画像は2次元空間で定義されたある関数 $f(x,y)$ として表現することができる！ 名前 数式 フーリエ変換 $$F(u,v) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x,y)\\exp\\left\\{-j2\\pi\\left(ux+vy\\right)\\right\\}dxdy$$ 逆フーリエ変換 $$f(x,y) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}F(u,v)\\exp\\left\\{j2\\pi\\left(ux+vy\\right)\\right\\}dudv$$ ここで、以下の値に注目することがよくある。 名前 数式 説明 振幅スペクトル(amplitude spectrum) $$\\mid F(u,v)\\mid = \\sqrt{\\mathrm{Re}\\left\\{F(u,v)\\right\\}&#94;2 + \\mathrm{Im}\\left\\{F(u,v)\\right\\}&#94;2}$$ 絶対値 位相スペクトル(phase spectrum) $$\\arg\\left\\{F(u,v)\\right\\} = \\tan&#94;{-1}\\frac{\\mathrm{Im}\\left\\{F(u,v)\\right\\}}{\\mathrm{Re}\\left\\{F(u,v)\\right\\}}$$ 偏角 パワースペクトル(power spectrum) $$\\mid F(u,v)\\mid&#94;2$$ In [8]: img = cv2 . imread ( 'lenna.png' , 0 ) f = np . fft . fft2 ( img ) fshift = np . fft . fftshift ( f ) magnitude_spectrum = 20 * np . log ( np . abs ( fshift )) plt . subplot ( 121 ), plt . imshow ( img , cmap = 'gray' ) plt . title ( 'Input Image' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'x' ), plt . ylabel ( 'y' ) plt . subplot ( 122 ), plt . imshow ( magnitude_spectrum , cmap = 'gray' ) plt . title ( 'Magnitude Spectrum' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'u' ), plt . ylabel ( 'v' ) plt . show () ガボールフィルタ(Gabor Filter) 正弦波とガウス関数の積で表される。（例：2次元ガボールフィルタ） $$g(x,y,\\lambda,\\phi) = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\exp\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 実数部： $$\\mathrm{Re}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\cos\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 虚数部： $$\\mathrm{Im}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\sin\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ フーリエ変換では、所望の周波数成分が領域のどこにあるのかわからないのに対し、ガボールフィルタは、 「領域のどの位置にどの方向の周波数が、どの強度であるか」 を知ることができる。 パラメータを操作して様々な方向と強度を持つフィルタ （フィルタバンク(filter bank)） を多数準備 し、特徴抽出を行う。また、ここで抽出された特徴量群は texton と呼ばれる。 入力された画像に対してガボールフィルタを畳み込んで（たたみ込み＝二次元の内積＝類似度を反映）、特徴量 $G(x,y,\\lambda,\\phi)$ を求める式は以下となる。 $$G(x,y,\\lambda,\\phi) = \\sum_u\\sum_vI(x,y)\\ast g(x-u, y-v, \\lambda, \\phi)$$ OpenCVの cv2.getGaborKerne を用いることで簡単にガボールフィルタを生成することができる、 引数 説明 ksize Size of the filter returned. sigma Standard deviation of the gaussian envelope. theta Orientation of the normal to the parallel stripes of a Gabor function. lambd Wavelength of the sinusoidal factor. gamma Spatial aspect ratio. psi Phase offset. In [9]: default_gabor = { \"ksize\" : ( 50 , 50 ), \"sigma\" : 4 , \"theta\" : 0 , \"lambd\" : 10 , \"gamma\" : 0.5 , \"psi\" : 0 , } In [10]: gabor = cv2 . getGaborKernel ( ** default_gabor ) plt . imshow ( gabor , cmap = \"gray\" ) plt . title ( \"default\" ) plt . show () In [11]: def argsGaborRelation ( key , vals ): global default_gabor defaul_val = default_gabor [ key ] N = len ( vals ) n_col = 4 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i , val in enumerate ( vals ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) ax . imshow ( gabor , cmap = \"gray\" ) ax . set_title ( f \" {key} = {val} \" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [12]: argsGaborRelation ( key = \"ksize\" , vals = [( 30 , 30 ),( 20 , 40 ),( 40 , 20 ),( 50 , 50 )]) In [13]: argsGaborRelation ( key = \"sigma\" , vals = [ x for x in range ( 8 )]) In [14]: argsGaborRelation ( key = \"theta\" , vals = [ np . radians ( x ) for x in range ( 0 , 180 , 45 )]) In [15]: argsGaborRelation ( key = \"gamma\" , vals = [ x for x in range ( 4 )]) In [16]: argsGaborRelation ( key = \"psi\" , vals = [ np . radians ( x ) for x in range ( 0 , 360 , 45 )]) In [17]: img = cv2 . imread ( 'lenna.png' , 0 ) color_img = cv2 . imread ( 'lenna.png' ) In [18]: def argsGaborSuperposition ( key , vals ): global default_gabor , img defaul_val = default_gabor [ key ] N = len ( vals ) * 2 n_col = 8 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) dests = 0 for i , val in enumerate ( vals ): default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) dest = cv2 . filter2D ( img , cv2 . CV_32F , gabor ) dests += dest ax_dst = fig . add_subplot ( n_row , n_col , 2 * i + 1 ) ax_dst . imshow ( np . power ( dest , 2 ), cmap = \"gray\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) ax_gab = fig . add_subplot ( n_row , n_col , 2 * i + 2 ) ax_gab . imshow ( gabor , cmap = \"gray\" ), ax_gab . set_xticks ([]), ax_gab . set_yticks ([]) # Superposition fig = plt . figure ( figsize = ( 8 , 16 )) ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( cv2 . cvtColor ( color_img , cv2 . COLOR_BGR2RGB )) ax_org . set_title ( \"original image\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) ax_dst = fig . add_subplot ( 1 , 2 , 2 ) ax_dst . imshow ( dests , cmap = \"gray\" ) ax_dst . set_title ( f \"Superposition of dst (key= {key} )\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [19]: argsGaborSuperposition ( key = \"theta\" , vals = [ np . radians ( x ) for x in np . linspace ( 0 , 180 , 8 )]) ※ 入力画像の８分割した全ての方向のエッジを重ね合わせると、元の画像をかなり高い精度で復元していることがわかる。 同時生起確率 テクスチャの統計的特徴量を求める。 離れた２つの場所にある画素対の値から、画素値の 一様性 ・ 方向性 ・ コントラスト などの性質を表す特徴量を求める。 ある画素 $i$ と、$i$ から離れた位置にある画素 $j$ の画素対を考え、画素 $i$ と画素 $j$ の相対的な位置を $\\delta=\\langle d,\\theta\\rangle$ とする。 それぞれの画素値を $L_i,L_j$ とし、画素値の対 $(L_i,L_j)$ が生じる出現頻度で、ある同時生起行列 $\\mathbf{H}_{\\delta}(L_i,L_j)$ を考える。ここで、出現頻度の総数で $\\mathbf{H}_{\\delta}(L_1,L_2)$ を正規化し、確率に変換した同時生起行列を $\\mathbf{P}_{\\delta}(L_i,L_j)$ とする。 確率に変換した同時生起行列を用いて計算する主な特徴量には次の $7$ 種類がある。（ここで、画素値のレベル数は $L$ である。）他にも様々な統計量を計算できるが、テクスチャの物理的な意味と直接には結びつかない数値もある。 $$ \\begin{aligned} \\mathrm{ENR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left\\{P_{\\delta}(L_i,L_j)\\right\\}&#94;2 & (\\text{energy})\\\\ \\mathrm{CNT} &= \\sum_{k=0}&#94;{L-1}k&#94;2P_{x-y}(k) & (\\text{contrast})\\\\ \\mathrm{CRR} &= \\frac{\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}L_iL_jP_{\\delta}(L_i,L_j) - \\mu_x\\mu_y}{\\delta_x\\delta_y} & (\\text{correlation})\\\\ \\mathrm{VAR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left(L_i-\\mu_x\\right)&#94;2P_{\\delta}(L_i,L_j) & (\\text{variance})\\\\ \\mathrm{EPY} &= -\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\log\\left\\{P_{\\delta}(L_i,L_j)\\right\\} & (\\text{entropy})\\\\ \\mathrm{SEP} &= -\\sum_{k=0}&#94;{2L-2}P_{x+y}(k)\\log\\left\\{P_{x+y}(k)\\right\\} & (\\text{sum entropy})\\\\ \\mathrm{IDM} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\frac{1}{1+(L_i-L_j)&#94;2}P_{\\delta}(L_i,L_j) & (\\text{inverse difference moment})\\\\ \\end{aligned} $$ ただし、 $$ \\mu_x = \\sum_{L_i=0}&#94;{L-1}L_iP_x(L_i), \\quad \\mu_y = \\sum_{L_j=0}&#94;{L-1}L_jP_y(L_j)\\\\ \\delta_x&#94;2 = \\sum_{L_i=0}&#94;{L-1}(L_i-\\mu_x)&#94;2P_x(L_i), \\quad \\delta_y&#94;2 = \\sum_{L_j=0}&#94;{L-1}(L_j-\\mu_y)&#94;2P_y(L_j)\\\\ P_x(L_i) = \\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j), \\quad P_y(L_j) = \\sum_{L_i=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\\\ P_{x-y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i-L_j|= k\\\\ P_{x+y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i+L_j|= k\\\\ $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html"},{"title":"主成分分析(PCA)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 主成分分析(PCA) 次元削減・非可逆データ圧縮・特徴抽出・データの可視化などに使われる。 主部分空間(principal subspace) と呼ばれる低次元の線形空間の上への、データ点の直交射影として、以下の2つの定義方法がある。 「射影されたデータの分散が最大化されるような直交射影」 として定義。→ 分散最大化による定式化 「データ点と射影した点の間の2乗距離の平均値で定義される 射影コスト関数 の期待値を最小化するような線形射影」 として定義。（要はデータ点からの距離を最小化）→ 誤差最小化による定式化 Pythonによる実装 分散最大化による定式化 次元 $D$ のユークリッド空間内のデータ集合 $\\{\\mathbf{x}_n\\}(n=1,\\ldots,N)$ を考える。ここで、 「射影されたデータ点の分散を最大化しながら、データを次元 $M ことを考える。 1次元空間の上への射影（$M=1$） この空間の方向を $D$ 次元ベクトル $\\mathbf{u}_1$ として表す。ここで、興味があるのは $\\mathbf{u}_1$ の方向だけであるので、$\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ としても一般性を失わない。 したがって、各データ点 $\\mathbf{x}_n$ は スカラー値 $\\mathbf{u}_1&#94;T\\mathbf{x}_n$ の上に射影される。ここで、射影されたデータの平均・分散は以下のようになる。 統計量 平均値 $$\\mathbf{u}_1&#94;T\\bar{\\mathbf{x}}\\qquad\\bar{\\mathbf{x}} = \\frac{1}{N}\\sum_{n=1}&#94;N\\mathbf{x}_n\\qquad (12.1)$$ 分散 $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1\\qquad\\mathbf{S} = \\frac{1}{N}\\sum_{n=1}&#94;N\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\qquad (12.3)$$ ここで、 射影されたデータの分散を、$\\mathbf{u}_1$ に関して最大化 することを考える。 制約条件 $\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ をラグランジュ乗数 $\\lambda_1$ を利用して導入して $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1 + \\lambda_1\\left(1-\\mathbf{u}&#94;T_1\\mathbf{u}_1\\right)\\qquad (12.4)$$ を最大化すれば良い。$\\mathbf{u}_1$ に関する微分を $0$ とおくことにより、停留条件は $$\\mathbf{Su}_1 = \\lambda_1\\mathbf{u}_1\\qquad (12.5)$$ となることがわかる。これは、 $\\mathbf{u}_1$ が $\\mathbf{S}$ の固有ベクトルであること を示している。左から $\\mathbf{u}&#94;T_1$ をかけると、 $$\\text{Variance} = \\mathbf{u}&#94;T_1\\mathbf{Su}_1 = \\lambda_1 \\qquad (12.6)$$ となる。よって、 分散は $\\mathbf{u}_1$ を、最大固有値 $\\lambda_1$ に属する固有ベクトルに選んだ時に最大になる ことがわかる。 $M$ 次元空間の上への射影（一般解） 演習12.1 帰納法を用いて、 射影されたデータの分散を最大化するようなM次元部分空間の上への線形写像が、データ共分散行列Sの上位M個の固有値に属するM本の固有ベクトルによって定義される ことを示す。 仮定 $M$ に対して上記が成り立つ。 データ空間に対する新しい方向ベクトル $\\mathbf{u}_{M+1}$ は、次を満たす。 $\\mathbf{u}_{M+1}$ は、$\\mathbf{u}_1,\\ldots,\\mathbf{u}_M$ と直交する。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0$） 単位長に規格化されている。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{M+1}=1$） 制約条件を踏まえると、 $$L = \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\lambda_{M+1}\\left(1-\\mathbf{u}&#94;T_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_j$$ 両辺を $\\mathbf{u}_{M+1}$ で微分すると、 $$0 = \\frac{\\partial L}{\\partial \\mathbf{u}_{M+1}} = 2\\left(\\mathbf{Su}_{M+1} - \\lambda_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_j\\cdots(\\ast)$$ これに左から $\\mathbf{u}&#94;T_{j}$ をかけると、 $$0 = \\lambda&#94;{\\prime}_j\\quad(\\because \\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0)$$ となるので、これを $(\\ast)$ に代入して、 $$\\mathbf{Su}_{M+1} = \\lambda_{M+1}\\mathbf{u}_{M+1}$$ また、この時分散は $$\\begin{aligned} \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i &= \\sum_{i=1}&#94;{M}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\mathbf{u}&#94;T_{M+1}\\mathbf{Su}_{M+1}\\\\ &= \\sum_{i=1}&#94;{M}\\lambda_i + \\lambda_{M+1} \\end{aligned}$$ ここで、仮定より $\\lambda_i$ は、データ共分散行列 $\\mathbf{S}$ の上位 $M$ 個の固有値なので、この分散を最大する $\\lambda_{M+1}$ は、$M+1$ 番目に大きい固有値となる。 誤差最小化による定式化 続いて、射影誤差の最小化に基づいた主成分分析の定式化を考える。 まず、$D$ 次元の基底ベクトル $\\{\\mathbf{u}_i\\}$ から成る完全正規直交系を導入する。（$\\mathbf{u}_i&#94;T\\mathbf{u}_i = \\delta_{ij}$） すると、各データ点はこれらの基底ベクトルの線形結合なので、以下の形で表すことができる。 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\alpha_{ni}\\mathbf{u}_i\\qquad (12.8)$$ なお、ここで式 $(12.8)$ は、各データ点 $\\{\\mathbf{x}_n\\}$ を、もともとの座標系から $\\{\\mathbf{u}_i\\}$ で表される新しい座標系への回転を表していると解釈できる （もともと $D$ 個の成分 $\\{x_{n1},\\ldots,x_{nD}\\}$ が、等価な集合 $\\{a_{n1},\\ldots,a_{nD}\\}$ に置き換えられている） 。 上式と $\\mathbf{u}_j$ との内積を取り、正規直交性を使うと、$\\alpha_{nj} = \\mathbf{x}_n&#94;T\\mathbf{u}_j$ を得るので、 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right)\\mathbf{u}_i\\qquad (12.9)$$ $D$ 次元から $M$ 次元への近似 ここで、$M （$M$ 次元空間で完全に $\\mathbf{x}_n$ を表現するのは一般に不可能なので、近似する。） したがって、各データ点を $$\\tilde{\\mathbf{x}}_n = \\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\qquad (12.10)$$ $\\{z_{ni}\\}$ は特定のデータ点に依存。 $\\{b_i\\}$ は全てのデータ点に共通な定数。 と近似して表す。つまり、 $\\{\\mathbf{u}_i\\}$ と $\\{z_{ni}\\}$ と $\\{b_i\\}$ を調整することで、次元が減ることによってもたらされる歪みを最小化すること がここでの目的となる。 近似による歪み尺度 $J$ 近似による歪みの尺度として、元々のデータ点 $\\mathbf{x}_n$ とその近似 $\\tilde{\\mathbf{x}}_n$ の間の2乗距離をデータ集合に渡って平均したものを採用する。 $$\\begin{aligned} J &= \\frac{1}{N}\\sum_{n=1}&#94;N\\|\\mathbf{x}_n-\\tilde{\\mathbf{x}}_n\\|&#94;2\\qquad (12.11)\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\left\\|\\mathbf{x}_n-\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)\\right\\|&#94;2 \\end{aligned}$$ そこで、各変数についての微分を $0$ としてこれを最小化する変数を求める。 $\\{z_{ni}\\}$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial z_{ni}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\left\\|\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\sum_{i=1}&#94;Mz_{ni}&#94;2-2\\sum_{i=1}&#94;Mz_{ni}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=1}&#94;M2\\left\\{z_{ni}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore z_{ni}&#94;{\\star} &= \\mathbf{x}_n&#94;T\\mathbf{u}_i \\qquad (12.12) \\end{aligned} $$ $b_i$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial b_{i}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\left\\|\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\sum_{i=M+1}&#94;Db_{i}&#94;2-2\\sum_{i=M+1}&#94;Db_{i}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D2\\left\\{b_{i}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore b_{i}&#94;{\\star} &= \\bar{\\mathbf{x}}_n&#94;T\\mathbf{u}_i \\qquad (12.13) \\end{aligned} $$ $J$ の整頓 ここで、$(12.10)$ の $z_{ni},b_i$ を置き換えると、 $$ \\begin{aligned} \\mathbf{x}_n-\\tilde{\\mathbf{x}}_n &= \\mathbf{x}_n-\\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=1}&#94;D\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i - \\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=M+1}&#94;D\\left\\{\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\mathbf{u}_i\\right\\}\\mathbf{u}_i\\qquad (12.14) \\end{aligned} $$ と表すことができる。この式から、 $\\tilde{\\mathbf{x}}_n$ から $\\mathbf{x}_n$ への変位を表すベクトルは、主部分空間に直交する空間にあることがわかる。 以上より、歪み尺度 $J$ に対する表現を、純粋に $\\{\\mathbf{u}_i\\}$ の関数として、以下のような形で得られることがわかる。 $$J = \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i-\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\right)&#94;2 = \\sum_{i=M+1}&#94;D\\mathbf{u}&#94;T_i\\mathbf{Su}_i\\qquad (12.15)$$ したがって、あとは$J$ を $\\{\\mathbf{u}_i\\}$ に対して最小化すれば良い。 $M=1,D=2$ の場合 $M=1,D=2$ の場合、 「規格化条件 $\\mathbf{u}&#94;T_2\\mathbf{u}_2 = 1$ の下で、方向 $\\mathbf{u}_2$ を、$J=\\mathbf{u}&#94;T_2\\mathbf{Su}_2$ が最小化されるように選ぶ」 問題となる。 つまり、ラグランジュ乗数を用いて、 $$\\tilde{J} =\\mathbf{u}&#94;T_2\\mathbf{Su}_2 + \\lambda_2\\left(1-\\mathbf{u}&#94;T_2\\mathbf{u}_2\\right)\\qquad (12.16)$$ を最小化する問題となる。 $\\mathbf{u}_i$ についての微分を $0$ とおくと、$\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を得る。つまり、$\\mathbf{u}_2$ は固有値 $\\lambda_2$ に属する $\\mathbf{S}$ の固有ベクトルであるので、 任意の固有ベクトルは、この歪み尺度の停留点を定義することとなる。 $(12.16)$ に $\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を代入すると、$J=\\lambda_2$ となる。ゆえに、 「$\\mathbf{u}_2$ を、2つある固有値のうち小さい方に対応した固有ベクトルを選ぶことにより、$J$ の最小値を得ることができる」 （↔︎ 主部分空間では大きい方 ） 任意の $D$ と任意の $M 任意の $D$ と任意の $M $$\\mathbf{Su}_i = \\lambda_i\\mathbf{u}_i\\qquad (12.17)$$ で与えられる共分散行列の固有ベクトルに選ぶことによって得られる。ここで $i=1,\\ldots,D$ であり、固有ベクトル $\\{\\mathbf{u}_i\\}$ は正規直交するように選ばれる。 また、対応する歪み尺度の値は、 $$J = \\sum_{i=M+1}&#94;D\\lambda_i\\qquad (12.18)$$ のように、 主部分空間に直交する固有ベクトルの固有値についての単なる和 で与えられる。したがって、$J$ の最小値は、小さい順から $D-M$ 個の固有値に対応する固有ベクトルを選ぶことによって得られ、つまり主部分空間を定義する固有ベクトルは大きい順から $M$ 個の固有値に対応する固有ベクトルになる。 実装 Wine Data Set (UCI Machine Learning Repository) のデータを利用し、13次元、178データ、3種類のワインの属性データから、2つの主成分を取って可視化を行います。 また、PCAは自作のモジュール （ kerasy.ML.decomposition.PCA ） を用います。 In [1]: # データ取得。 ! wget https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt --2019-10-07 13:20:45-- https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.228.133 Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.228.133|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 12173 (12K) [text/plain] Saving to: `wine.txt' wine.txt 100%[===================>] 11.89K --.-KB/s in 0s 2019-10-07 13:20:45 (40.4 MB/s) - `wine.txt' saved [12173/12173] In [2]: from kerasy.ML.decomposition import PCA In [3]: import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib.colors import LinearSegmentedColormap In [4]: colors = [( 1 , 0 , 0 ), ( 0 , 0 , 1 ), ( 0 , 1 , 0 )] n_bin = len ( colors ) cmap_name = 'my_list' cm = LinearSegmentedColormap . from_list ( cmap_name , colors , N = n_bin ) In [5]: df = pd . read_csv ( \"wine.txt\" , sep = \" \\t \" , index_col = 0 ) In [6]: df . head ( 3 ) Out[6]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } class Alcohol Malic acid Ash Alcalinity of ash Magnesium Total phenols Flavanoids Nonflavanoid phenols Proanthocyanins Color intensity Hue OD280/OD315 of diluted wines Proline 0 1 14.23 1.71 2.43 15.6 127 2.80 3.06 0.28 2.29 5.64 1.04 3.92 1065 1 1 13.20 1.78 2.14 11.2 100 2.65 2.76 0.26 1.28 4.38 1.05 3.40 1050 2 1 13.16 2.36 2.67 18.6 101 2.80 3.24 0.30 2.81 5.68 1.03 3.17 1185 class カラムがワインの種類を表しているので、この列は主成分分析から取り除きます。 In [7]: cls = df . iloc [:, 0 ] . values In [8]: df_use = df . iloc [:, 1 :] また、 データの標準化 を行います。 In [9]: df_std = df_use . apply ( lambda x : ( x - x . mean ()) / x . std (), axis = 0 ) In [10]: data = np . array ( df_std ) データの準備ができたので、主成分分析を行います。 In [11]: pca = PCA () pca . fit ( data ) features = pca . transform ( data ) In [12]: plt . figure ( figsize = ( 6 , 6 )) plt . scatter ( features [:, 0 ], features [:, 1 ], c = cls , cmap = cm , edgecolors = 'black' ) plt . title ( \"Same fig with slide :)\" ) plt . xlabel ( \"PC1\" ) plt . ylabel ( \"PC2\" ) plt . grid () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html"},{"title":"Nussinov Algorithm","text":"Nussinov Algorithmは、最もシンプルな二次構造予測アルゴリズムである。 「最大いくつの塩基対を作ることができるか」 を調べる。 動的計画法を用いて効率的に調べるために、以下のような Pseudoknot は無視している。様々な重要なRNAが、Pseudoknotの形をとることが確認されているが、相対的にこのような構造をとる確率は低いので、計算の効率を優先し、これらを無視する。 Algorithm ※「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 今回の実装では $j-i-1<3$ の時は、$i,j$ が塩基対を作れないものとしている。 ポイントはRecursionの最後の式で、 「$i$ から $k$ までの部分塩基配列」 と 「$k+1$ から $j$ までの部分塩基配列」 を足し合わせる操作を行う。 （Bifurcation） Initialization: $$\\begin{aligned} \\gamma(i,i)&=0&\\text{ for }i=1\\text{ to }L\\\\ \\gamma(i,i-1)&=0&\\text{ for }i=2\\text{ to }L \\end{aligned}$$ Recursion: $$ \\gamma(i,j) = \\max \\begin{cases} \\gamma(i+1,j)\\\\ \\gamma(i,j-1)\\\\ \\gamma(i+1,j-1)+\\delta(i,j)\\\\ \\max_{i\\leq k\\verb|<|j}\\left[\\gamma(i,k) + \\gamma(k+1,j)\\right] \\end{cases} $$ TraceBack 基本的なアルゴリズムは同じですが、 Bifurcationが起きた際にトレースバックポインターを複数用意する必要があることには注意が必要です。 bp = [] stack = [( 0 , N - 1 )] while ( stack ): i , j = stack . pop ( 0 ) delta = 1 if self . _is_bp ( sequence [ i ], sequence [ j ]) and ( j - i > 3 ) else 0 if ( i >= j ): continue elif gamma [ i + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( i + 1 , j )) elif gamma [ i ][ j - 1 ] == gamma [ i ][ j ]: stack . append (( i , j - 1 )) elif gamma [ i + 1 ][ j - 1 ] + delta == gamma [ i ][ j ]: bp . append (( i , j )); stack . append (( i + 1 , j - 1 )) else : # Bifurcation for k in range ( i , j ): if gamma [ i ][ k ] + gamma [ k + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( k + 1 , j )) stack . append (( i , k )) break 自作のモジュール （kerasy.Bio.structure.Nussinov） を使って実装します。 In [1]: from kerasy.Bio.structure import Nussinov In [2]: model = Nussinov () In [3]: # 以下の形のパラメタファイルを受け取ります。 ! cat params.json { \"type\": \"DNA\", \"Watson_Crick\": true, \"Wobble\": true } In [4]: model . load_params ( \"params.json\" ) In [5]: model . params () | parameter |value| -------------------- |type | DNA| |Watson_Crick| 1| |Wobble | 1| In [6]: # サンプル配列 sequence = \"GCGGAAACGGGGTCA\" In [7]: # 最大ペアの配列 model . predict ( sequence , memorize = True , traceback = True ) Nussinov Algorithm Score: 3 ================================================================= seq: GCGGAAACGGGGTCA : ( (( ))) ================================================================= In [8]: gamma = model . gamma In [9]: # DP行列は以下のようになっています。 model . _printAsTerai ( gamma , sequence ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 1 2 2 2 2 2 3 3 C - 0 0 0 0 0 0 1 2 2 2 2 2 3 3 G - - 0 0 0 0 0 1 1 1 1 1 2 3 3 G - - - 0 0 0 0 1 1 1 1 1 2 3 3 A - - - - 0 0 0 0 0 0 0 1 2 2 2 A - - - - - 0 0 0 0 0 0 1 2 2 2 A - - - - - - 0 0 0 0 0 1 2 2 2 C - - - - - - - 0 0 0 0 1 1 1 1 G - - - - - - - - 0 0 0 0 0 1 1 G - - - - - - - - - 0 0 0 0 1 1 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 $i,j$ が塩基対を組むときの塩基対最大化 塩基 $i,j$ が塩基対を組むという制約がある場合を考えます。これは、「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を保持した $\\omega(i,j)$ と $\\gamma(i,j)$ を組み合わせることで効率的に求めることができます。 Algorithm 「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を $\\omega(i,j)$ が保持している。 Initialization: $$\\omega(i,L) = 0$$ Recursion: $$ \\omega(i,j) = \\max \\begin{cases} \\omega(i-1,j)\\\\ \\omega(i,j+1)\\\\ \\omega(i-1,j+1)+\\delta(i-1,j+1)\\\\ \\max_{1\\leq k\\verb|<|i}\\left[\\omega(k,j) + \\gamma(k,i-1)\\right]\\\\ \\max_{j\\verb|<| k\\leq L}\\left[\\omega(j+1,k) + \\gamma(i,k)\\right] \\end{cases} $$ In [10]: model . outside ( sequence , memorize = True ) In [11]: omega = model . omega In [12]: # DP行列は以下のようになっています。 model . _printAsTerai ( omega , sequence ) \\ G C G G A A A C G G G G T C A G 3 3 3 2 2 2 1 1 1 0 0 0 0 0 0 C - 3 3 3 3 3 2 1 1 1 1 1 1 0 0 G - - 3 3 3 3 2 2 2 2 2 1 1 0 0 G - - - 3 3 3 2 2 2 2 2 1 1 0 0 A - - - - 3 3 2 2 2 2 2 1 1 0 0 A - - - - - 3 3 2 2 2 2 2 1 0 0 A - - - - - - 3 2 2 2 2 2 1 0 0 C - - - - - - - 2 2 2 2 2 1 0 0 G - - - - - - - - 3 3 3 2 2 1 1 G - - - - - - - - - 3 3 3 3 2 2 G - - - - - - - - - - 3 3 3 2 2 G - - - - - - - - - - - 3 3 2 2 T - - - - - - - - - - - - 3 2 2 C - - - - - - - - - - - - - 2 2 A - - - - - - - - - - - - - - 3 $Z(i,j)$ の計算 variable definition $\\gamma\\left(i,j\\right)$ the maximum number of base-pairs for subsequence from $i$ to $j$. $\\omega\\left(i,j\\right)$ the maximum number of base-pairs excluding subsequence from $i$ to $j$. 上記の定義より、$\\gamma,\\omega$ を用いて $Z(i,j)$ が以下のように求まることがわかります。 $$Z(i,j) = \\begin{cases} \\gamma\\left(i+1,j-1\\right) + 1 + \\omega\\left(i,j\\right) & (\\text{if }i\\text{ and }j\\text{-th nucleotides can form a base-pair})\\\\ 0 & (\\text{otherwise}) \\end{cases}$$ In [13]: model . ConstrainedMaximize ( sequence , memorize = False ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 2 0 0 0 0 0 3 0 C - 0 0 0 0 0 0 0 3 3 3 3 0 0 0 G - - 0 0 0 0 0 3 0 0 0 0 0 3 0 G - - - 0 0 0 0 3 0 0 0 0 0 3 0 A - - - - 0 0 0 0 0 0 0 0 3 0 0 A - - - - - 0 0 0 0 0 0 0 3 0 0 A - - - - - - 0 0 0 0 0 0 3 0 0 C - - - - - - - 0 0 0 0 3 0 0 0 G - - - - - - - - 0 0 0 0 0 2 0 G - - - - - - - - - 0 0 0 0 3 0 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 備忘録 Nussinov Algorithmでは、これまでの動的計画法とは異なり、 $i,j$ を斜め方向に舐める必要がありました。 そこで、その際に使用したコードを備忘録として残しておきます。 In [14]: import numpy as np In [15]: N = 4 In [16]: # Nussinov Algorithm (γ) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for ini_i in reversed ( range ( N )): diff = N - ini_i for i in reversed ( range ( ini_i )): arr [ i ][ i + diff ] = idx idx += 1 print ( arr ) [[0 3 5 6] [0 0 2 4] [0 0 0 1] [0 0 0 0]] In [17]: # Nussinov outsie (ω) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for j in reversed ( range ( N )): for i in range ( N - j ): arr [ i ][ j + i ] = idx idx += 1 print ( arr ) [[ 7 4 2 1] [ 0 8 5 3] [ 0 0 9 6] [ 0 0 0 10]] In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-8.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-8.html"},{"title":"Pair HMM の最尤推定","text":"Baum-Welch Pair HMMとは、二本の配列を受け取ってペアワイズアラインメントを出力するHMMで、 「アラインメントの確率的な解釈が可能になる」 （アラインメントのどの部分が信頼できるかを確率的に評価できる） という利点があります。 このPair HMMは、一般的なHMMと同様にBaum-Welchアルゴリズムによってパラメータを最尤推定していきます。 \\(\\xi\\) HMM 一般的なHMMでは、例えば 遷移確率 \\(A_{jk}\\) （状態 \\(j\\) から状態 \\(k\\) に遷移する確率） を最尤推定する際は、 直感的には 「状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「状態 \\(j\\) から遷移する回数」 で割れば最尤解が求まる。 実際の隠れ状態の遷移が確定していないので、 「 期待される 状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「 期待される 状態 \\(j\\) から遷移する回数」 で割れば良い。 \\(\\mathbf{z}_{n-1}\\) で状態 \\(j\\) におり、 \\(\\mathbf{z}_n\\) で状態 \\(k\\) にいる確率 \\(\\xi\\left(z_{n-1,j},z_{nk}\\right)\\) は、forward-backward algorithmの \\(\\alpha,\\beta\\) を用いれば以下のように求めることができる。 $$\\xi_n\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ \\(\\xi\\) を用いて、最尤推定を行う。 $$A_{j k}= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\qquad (13.19)$$ という様に行いますが、Pair HMMは、 挿入・欠失を考えるため、 \\(n\\) で配列 \\(\\mathbf{X,Y}\\) のどの要素（ \\(\\mathbf{x}_u,\\mathbf{y}_v\\) ）を考えているのか一意に定まらない という点で普通のHMMとは異なります。 Pair HMM そこで、 「 \\(n\\) ではなく \\(u,v\\) に注目する」 ことで、 \\((13.43)\\) の式を以下のように書き換えます。 $$\\xi_{u,v}\\left(i,j\\right)=\\frac{f_i\\left(u,v\\right)A_{ij}\\phi_j\\left(\\diamond_1\\right)b_j\\left(\\diamond_2,\\diamond_3\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ ここで、分子に注目すると、各変数の意味が variable meaning \\(f_i\\left(u,v\\right)\\) The probability of ending up in state \\(i\\) after aligning the two sequences \\(\\mathbf{X,Y}\\) up to observation \\(u\\) and \\(v\\) respectively. \\(A_{ij}\\) the transition probability from state \\(i\\) to state \\(j\\) . \\(\\phi_j\\left(\\diamond_1\\right)\\) the emission probability of emitting \\(\\diamond_1\\) in state \\(j\\) . \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) the probability of being in state \\(j\\) , given the sequences \\(\\mathbf{X,Y}\\) are aligned from observation \\(\\diamond_2+1\\) and \\(\\diamond_3+1\\) to the end of the sequences respectively. であるので、 \\(\\diamond\\) は状態によって異なり、具体的に書き下すと以下のようになります。 state\\variable \\(\\phi_j\\left(\\diamond_1\\right)\\) \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) \\(M\\) \\(e\\left(x_{u+1},y_{v+1}\\right)\\) \\(b_j\\left(u+1,v+1\\right)\\) \\(X\\) \\(e\\left(x_{u+1}\\right)\\) \\(b_j\\left(u+1,v\\right)\\) \\(Y\\) \\(e\\left(y_{v+1}\\right)\\) \\(b_j\\left(u,v+1\\right)\\) \\(\\gamma\\) 同様に \\(\\gamma\\) も考えると、 $$ \\gamma_n\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad(13.33)$$ から、 $$\\gamma_i\\left(u,v\\right)=\\frac{f_i\\left(u,v\\right)b_j\\left(u,v\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ のように書き換えることになります。 Maximization step ここまでで \\(\\gamma,\\xi\\) が求まったので、M stepで各パラメータを更新します。なお、以下で \\(w\\) は全ての記号の組を表します。 $$w\\in\\left\\{(k_x,k_y)|k_x,k_y\\in\\left\\{A,T,G,C,\\epsilon \\right\\}\\right\\}\\setminus(\\epsilon,\\epsilon)$$ \\(\\pi_k\\) $$\\pi&#94;{\\star}_i = \\sum_w\\gamma_i&#94;w(0,0)$$ \\(A_{ij}\\) $$A&#94;{\\star}_{ij} = \\frac{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\sum_{j}&#94;{K}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}$$ final emitting state \\(\\tilde{U}\\) \\(\\tilde{V}\\) \\(M\\) \\(U-1\\) \\(V-1\\) \\(X\\) \\(U-1\\) \\(V\\) \\(Y\\) \\(U\\) \\(V-1\\) \\(\\phi_{i}(k)\\) $$\\phi_i\\left(k\\right) = \\frac{\\sum_w\\sum_{u=0}&#94;{U\\ast1}\\sum_{v=0}&#94;{V\\ast2}\\gamma_i&#94;w\\left(u,v\\right)}{\\sum_w\\sum_{u=0}&#94;U\\sum_{v=0}&#94;V\\gamma_i&#94;w\\left(u,v\\right)}$$ \\(\\ast1\\) ： \\(x_u=k_x\\) and state \\(i\\) equals the state \\(M\\) or \\(X\\) . (in the state \\(Y\\) , a gap is present in observation stream \\(x\\) therefore \\(k_x\\) is not present.) \\(\\ast2\\) ： \\(y_v=k_y\\) and state \\(j\\) equals the state \\(M\\) or \\(Y\\) . Reference Wahle, Johannes and Armin Buch. \"Alignment and word comparison with Pair Hidden Markov Models.\" (2013). pp.22-31 Martijn B. Wieling. \"Comparison of Dutch Dialects\" (2007) pp.36-50 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-7.html"},{"title":"生物統計論 第2回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section2.1 Central Limit Theorem Law of Large Numbers Estimation is accurate with many samples. Foundation of repeated measurement. Regardless of true distribution. Assuming independence. Theorem Let $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ be an independent trials process, with finite expected value $\\mu = \\mathbb{E}\\left(\\mathbf{X}_i\\right)$ Let $\\bar{\\mathbf{X}}_n = \\frac{1}{n}\\left(\\mathbf{X}_1,\\mathbf{X}_2+\\cdots+\\mathbf{X}_n\\right)$ be a sample mean. Weak law : $$\\lim_{n\\rightarrow\\infty}P\\left(|\\bar{\\mathbf{X}}_n-\\mu|>\\varepsilon\\right) = 0 \\quad\\left(\\forall\\varepsilon>0\\right)$$ Strong law $$P\\left(\\lim_{n\\rightarrow\\infty}\\bar{\\mathbf{X}}_n = \\mu\\right) = 1$$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Chebyshev Inequality Let $\\mathbf{X}$ be a discrete random variable with expected value $\\mu=\\mathbb{E}\\left(\\mathbf{X}\\right)$ $$ P \\left(|\\mathbf{X}-\\mu|>\\varepsilon\\right)\\leq\\frac{\\mathbb{V}\\left(\\mathbf{X}\\right)}{\\varepsilon&#94;2}$$ Example In [2]: N = 1000 seed = 0 In [3]: trials = np . arange ( 1 , N + 1 ) In [4]: dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = N ) ave_dices = np . cumsum ( dices ) / trials In [5]: plt . axhline ( 3.5 , color = \"blue\" , label = \"Theoretical mean\" ) plt . plot ( trials , ave_dices , label = \"Observed average\" , color = \"green\" ) plt . ylim ( 1 , 6 ) plt . title ( \"Average dice roll by number of rolls\" ) plt . ylabel ( \"Average\" ) plt . xlabel ( \"Number of trials\" ) plt . grid () plt . legend () plt . show () If we keep rolling the dice over and over again, the sample average of dice roll will converge to the true average. Exception The law of large numbers assumes the existance of expected values . Therefore, it will not hold when there is no expected value. (ex. Cauchy distribution ) Cauchy distribution $$ \\begin{aligned} f(x;x_0,\\gamma) &= \\frac{1}{\\pi\\gamma\\left[1 + \\left(\\frac{x-x_0}{\\gamma}\\right)&#94;2\\right]} = \\frac{1}{\\pi}\\frac{\\gamma}{\\left(x-x_0\\right)&#94;2 + \\gamma&#94;2} & \\begin{cases}x_0: \\text{Location paramete}\\\\\\gamma: \\text{Scale parameter}\\end{cases}\\\\ f(x;0,1) &= \\frac{1}{\\pi\\left(1+x&#94;2\\right)} & (\\text{standard cauchy distribution}) \\end{aligned} $$ In [6]: N = 5000 K = 3 seed = 1 In [7]: trials = np . arange ( 1 , N + 1 ) In [8]: samples = np . random . RandomState ( seed ) . standard_cauchy ( size = ( K * N )) . reshape (( K , N )) ave_samples = np . cumsum ( samples , axis = 1 ) / trials In [9]: for k in range ( K ): plt . plot ( trials , ave_samples [ k ], label = f \"Observation {k+1}\" ) plt . ylabel ( \"$(\\mathbf {X} _1+\\cdots+\\mathbf {X} _n)/n$\" ) plt . xlabel ( \"n\" ) plt . legend () plt . grid () Central Limit Theorem Sample mean follows normal distribution. Foundation of many statistical tests. Regardless of true distribution. Assuming independence. Theorem Let $\\{\\mathbf{X}_1,\\ldots,\\mathbf{X}_n\\}$ be a random sample of size $n$, which is a sequence of independent and identically distributed random variables drawn from a distribution. expected value given by $\\mu$. finite variance given by $\\sigma&#94;2$. Let $S_n:=\\sum_{k=1}&#94;n\\mathbf{X}_k$ $$P\\left(\\frac{S_n-n\\mu}{\\sqrt{n}\\sigma}\\leq\\alpha\\right)\\rightarrow\\frac{1}{\\sqrt{2\\pi}}\\int_{-\\infty}&#94;{\\alpha}e&#94;{-\\frac{x&#94;2}{2}}dx\\quad(n\\rightarrow\\infty)$$ Therefore: $$ \\begin{aligned} S_n&\\sim\\mathcal{N}\\left(n\\mu, n\\sigma&#94;2\\right) & (n\\rightarrow\\infty)\\\\ \\bar{\\mathbf{X}}_n = \\left(\\mathbf{X}_1+\\cdots+\\mathbf{X}_n\\right)/n&\\sim\\mathcal{N}\\left(\\mu,\\sigma&#94;2/n\\right) & (n\\rightarrow\\infty) \\end{aligned} $$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Example In [10]: N = 10000 ns = [ 10 , 100 , 1000 , 10000 ] roll = 4 seed = 0 In [11]: fig = plt . figure ( figsize = ( 12 , 6 )) ax_all = plt . subplot2grid (( 2 , len ( ns )), ( 0 , 0 ), colspan = len ( ns )) for i , n in enumerate ( ns ): ax = plt . subplot2grid (( 2 , len ( ns )), ( 1 , i )) dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = ( n , N )) rate_dice_eq_4 = np . count_nonzero ( dices == roll , axis = 1 ) / N freqs , bins , patches = ax . hist ( rate_dice_eq_4 , bins = 20 , density = True ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] ax_all . plot ( cent_bins , freqs , label = f \"n= {n} \" ) ax . set_title ( f \"n= {n} \" ) ax . set_xlabel ( f \"Probability of {roll} roll.\" ) ax . set_ylabel ( \"freq\" ) ax_all . set_title ( \"Central Limit Theorem\" ) ax_all . legend () plt . tight_layout () plt . show () Section2.2 ChIP-seq Peak Detection ChIP-sequencing, also known as ChIP-seq, is a method used to analyze protein interactions with DNA. ChIP-seq combines chromatin immunoprecipitation (ChIP) with massively parallel DNA sequencing to identify the binding sites of DNA-associated proteins. It can be used to map global binding sites precisely for any protein of interest. Previously, ChIP-on-chip was the most common technique utilized to study these protein–DNA relations. Peak calling Problem: How to identify transcription factor binding sites and histone modification enriched regions? Random Read Model Assume that read appears with equal probability in any region. Calcurate the p-value (the Probability of obtaining more or equally extreme value than observed value under the random model.) → Smaller is more significant. Setting the threshold (p-value) manually. We could calcurate the threshold ($n_{obs}$) → If the $n_{obs}$ exceeds this threshold, it is determined as the peak region. In [12]: from scipy.special import comb In [13]: g = 10000 # total DNA length n = 1000 # total number of reads l = 100 # bin size q = l / g n_bins = g / l lambda_ = n * q # mean read count seed = 0 xmax = 30 In [14]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) read_points = np . random . RandomState ( seed ) . randint ( 0 , g , size = n ) axL . scatter ( read_points , np . zeros ( shape = n ), s = 3 , label = \"read\" , color = \"black\" ) ledge = 0 read_counts = [] for edge in range ( l , g + 1 , l ): middl = ( ledge + edge ) / 2 count = np . count_nonzero ([( ledge <= read_points ) & ( read_points < edge )]) read_counts . append ( count ) if edge <= l * 10 : axL . axvline ( edge , color = \"red\" ) axL . text ( x = middl , y = 1e-3 , s = count , horizontalalignment = 'center' ) ledge = edge axL . set_xlim ( 0 , l * 10 ) axL . set_ylim ( - 1e-3 , 2e-3 ) axL . set_yticks ([]) axL . legend () Poisson = [ comb ( n , i , exact = True ) * ( q ** i ) * (( 1 - q ) ** ( n - i )) for i in range ( n )] axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axR . plot ([ read_counts . count ( i ) / n_bins for i in range ( n )], color = \"red\" , label = \"Observed\" ) axR . set_xlim ( 0 , xmax ) axR . set_xlabel ( \"Read count for each bin\" ) axR . set_ylabel ( \"Frequency\" ) axR . legend () plt . show () In [15]: n_obs = 15 p_values = np . cumsum ( Poisson [:: - 1 ])[:: - 1 ] # Calcurate p-value for each n_obs. thresh_p = 1e-2 bp = np . argmax ( p_values <= thresh_p ) In [16]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axL . fill_between ( np . arange ( n_obs , xmax ), y1 = Poisson [ n_obs : xmax ], y2 = 0 , facecolor = 'red' ) axL . annotate ( 'p-value \\n = $\\mathbb {P} (n_ {obs} \\leq N)$ \\n $=\\sum_{i=n_ {obs} }&#94;{\\infty}(\\lambda&#94;i/i!)\\cdot e&#94;{-\\lambda}$' , xy = ( 17 , 1e-2 ), xytext = ( 20 , 4e-2 ), fontsize = 12 , arrowprops = dict ( width = 1 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'black' ) ) axL . set_xlim ( 0 , 30 ) axL . set_title ( \"Poisson distribution\" ) axL . set_xlabel ( \"N\" ) axL . set_ylabel ( \"Freq\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( p_values , color = \"black\" ) axR . scatter ( n_obs , p_values [ n_obs ], color = \"red\" , label = \"pvalue($n_ {obs} $=\" + f \" {n_obs} )\" ) axR . scatter ( bp , p_values [ bp ], color = \"blue\" , label = \"Boundary point\" ) axR . axhline ( thresh_p , color = \"blue\" , label = f \"threshold(p_value= {thresh_p} )\" ) axR . axvspan ( xmin = bp , xmax = xmax , color = \"blue\" , alpha = 0.3 ) axR . set_xlim ( 0 , xmax ) axR . set_title ( \"The relationship between p-value and $n_ {obs} $\" ) axR . set_xlabel ( \"$n_ {obs} $\" ) axR . set_ylabel ( \"p-value\" ) axR . legend () plt . show () In this case, we could say the threshold($n_{obs}$) = 19(=bp). ※ In ChIP-seq, we have to do \"Tag shift\" due to the DNA strand asymmetry. （→ more: MACS ） Section2.3 Hypothesis Testing Terminology In [17]: fig , ax = plt . subplots ( figsize = ( 6 , 4 )) X = np . arange ( 10 , 100 , 1 ) Y = 1 / X # Null distribution ax . plot ( X , Y , color = \"red\" ), ax . text ( x = 15 , y = 8e-2 , s = \"Null distribution \\n $f_S(s|H)$\" , fontsize = 15 ) # Thereshold: Sα ax . plot (( 50 , 50 ),( 0 , 7e-2 ), color = \"black\" ), ax . text ( x = 48 , y = 7.5e-2 , s = \"$S_ {α} $\" , fontsize = 12 ) # Reject & Accept ax . annotate ( '' , xy = ( 75 , 5e-2 ), xytext = ( 52 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 55 , y = 5.5e-2 , s = \"reject\" , fontsize = 12 ) # Reject ax . annotate ( '' , xy = ( 25 , 5e-2 ), xytext = ( 48 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 35 , y = 5.5e-2 , s = \"accept\" , fontsize = 12 ) # Accept # Observation sample. ax . plot (( 70 , 70 ),( 0 , 1 / 70 ), color = \"black\" ), ax . scatter ( 70 , 1 / 70 , color = \"black\" ), ax . text ( x = 68 , y = 2e-2 , s = \"$S_ {obs} $\" , fontsize = 12 ) ax . set_xticks ([]), ax . set_yticks ([]) ax . set_xlabel ( \"S\" ), ax . set_ylabel ( \"freq\" ) ax . set_xlim ( min ( X ), max ( X )), ax . set_ylim ( min ( Y ), max ( Y )) plt . show () Null Hypothesis $H_0$ Alternative Hypothesis $H_1$ Test Static $S$ Null distribution Significance threshold Reject/Accept $H_0$ Null hypothesis is True Null hypothesis is False Do not reject Null hypothesis ($H_0$) Correct Type2 error (False negative) Reject Null hypothesis ($H_0$) Type1 error (False positive) Correct P-value distribute uniformly under $H_0$ Proof. p-value is the probability of obtaining more or equally extreme value than observed value under the null distribution. $$p = \\mathbb{P}\\left(S\\geq s|H_0\\right) = 1-\\mathbb{P}\\left(S By noting $F_0$ the cumulative distribution function of $S$ under $H_0$, we obtain: $$p = 1-F_0(s)$$ Thanks to the fact that the cdf is monotonic, increasing and (left-)continuous: $$\\mathbb{P}\\left(S\\geq s|H_0\\right) = \\mathbb{P}\\left(F_0\\left(S\\right)\\geq F_0\\left(s\\right)\\right) = 1-\\mathbb{P}\\left(F_0\\left(S\\right)< F_0\\left(s\\right)\\right)$$ Therefore, we have: $$\\mathbb{P}\\left(F_0\\left(S\\right) Which means that $F_0\\left(S\\right)$ is following a uniform distribution. And, as this means also that $1-F_0\\left(S\\right)$ is following a uniform distributed, then we can conclude that p-value are uniformly distributed under the null hypothesis. In [18]: from scipy.stats import norm In [19]: N = 10000 loc = 0 scale = 1 seed = 0 In [20]: obs = np . random . RandomState ( seed ) . normal ( loc = loc , scale = scale , size = N ) # observation sample \"s\". p_value = 1 - norm . cdf ( x = obs , loc = loc , scale = scale ) # p-value = 1 - F(s) In [21]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) freqs , bins , patches = axL . hist ( obs , bins = 50 , density = True , color = \"blue\" , alpha = 0.7 ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] axL . plot ( cent_bins , freqs , color = \"blue\" ) axL . set_title ( \"Histogram of observation sample s \\n under the null distribution (This time: Normal distribution)\" ), axL . set_xlabel ( \"observation s\" ), axL . set_ylabel ( \"Frequency\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . hist ( p_value , bins = 20 , edgecolor = \"black\" ) axR . set_title ( \"Histogram of p-value\" ), axR . set_xlabel ( \"p-value\" ), axR . set_ylabel ( \"Frequency\" ) plt . tight_layout () plt . show () ※ We could argue about the p-value under the null hypothesis, but we could not confirm whether null hypothesis is true or not. Section2.4 Hypothesis Test Example $\\chi&#94;2$-test Any statistical hypothesis test where the sampling distribution of the test statistic is a chi-squared distribution when the null hypothesis is true. Used to determine whether there is a significant difference between the expected frequencies and the observed frequencies in one or more categories. $\\chi&#94;2$-distribution $Y_i\\sim\\mathcal{N}\\left(0,1\\right), i=1,\\ldots,\\nu$: i.i.d. $X=Y_1&#94;2+\\cdots+Y_{\\nu}$ $\\rightarrow X\\sim\\chi&#94;2(\\nu), X\\in \\mathbb{R}_{\\geq0}$ $$ \\begin{aligned} f_X(x) &= \\frac{1}{2&#94;{\\nu/2}\\Gamma(\\nu/2)}x&#94;{\\nu/2-1}e&#94;{-x/2}\\\\ \\Gamma(z) &= \\int_{0}&#94;{\\infty}t&#94;{z-1}e&#94;{-t}dt(\\mathrm{Re}(z)>0)\\\\ \\mathbb{E}(X) &= \\nu\\\\ \\mathbb{V}(X) &= 2\\nu \\end{aligned} $$ In [22]: from scipy.stats import chi2 In [23]: K = 5 In [24]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( 0 , 8 , 1000 ) for k in range ( 1 , K + 1 ): plt . plot ( X , chi2 . pdf ( X , k ), label = f \"$k= {k} $\" ) plt . xlim ( 0 , 8 ), plt . ylim ( 0 , 1.0 ) plt . title ( \"$\\chi&#94;2$-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Pearson's chi-square test goodness of fit test # $C_1$ $C_2$ $\\cdots$ $C_k$ total Observation frequency $n_1$ $n_2$ $\\cdots$ $n_k$ $n$ Theoretical probability (under $H_0$) $p_1$ $p_2$ $\\cdots$ $p_k$ $1$ Theoretical frequency $m_1=np_1$ $m_2=np_2$ $\\cdots$ $m_k=np_k$ $n$ Null Hypothesis($H_0$): $P(C_i) = p_i\\quad(i=1,2,\\ldots,k)$ If null hypothesis is true, $U$ are distributed as $\\chi&#94;2(k-1)$. $$ U=\\sum_{i=1}&#94;k\\frac{(n_i-m_i)&#94;2}{m_i}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ test for independence A\\B $B_1$ $B_2$ $\\cdots$ $B_b$ total $A_1$ $n_{11}$ $n_{12}$ $\\cdots$ $n_{1b}$ $n_{1\\cdot}$ $A_2$ $n_{21}$ $n_{22}$ $\\cdots$ $n_{2b}$ $n_{2\\cdot}$ $\\vdots$ $\\vdots$ $\\vdots$ $\\cdots$ $\\ddots$ $\\vdots$ $A_a$ $n_{a1}$ $n_{a2}$ $\\cdots$ $n_{ab}$ $n_a$ total $n_{\\cdot1}$ $n_{\\cdot2}$ $\\cdots$ $n_{\\cdot b}$ $n_{a\\cdot}$ $P(A_i) = p_i,P(B_j)=q_j,\\quad (1\\leq i\\leq a,1\\leq j\\leq b)$ Null Hypothesis($H_0$): $A$ and $B$ are independence. $$P(A_i\\cap B_j) = p_iq_j$$ If null hypothesis is true, we could presume: $\\bar{p_i}=n_{i\\cdot}/n$, $\\bar{q_j}=n_{\\cdot j}/n$. $m_{ij} = n\\bar{p_i}\\bar{q_j}$ (Theoretical frequency) $$ U=\\sum_{i=1}&#94;a\\sum_{j=1}&#94;b\\frac{(n_{ij}-m_{ij})&#94;2}{m_{ij}}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ t-test One-sample test: Determine whether a sample of observations could have been generated by a process with a specific mean $\\mu$. Two-sample test: Compare the average values of the two data sets and determine if they came from the same population. t-distribution $$ \\begin{aligned} f_{t(\\nu)}(x) &= \\frac{\\Gamma\\left(\\frac{\\nu+1}{2}\\right)}{\\sqrt{\\nu\\pi}\\Gamma\\left(\\frac{\\nu}{2}\\right)}\\left(1+\\frac{x&#94;2}{\\nu}\\right)&#94;{-\\frac{\\nu+1}{2}}\\\\ \\mathbb{E}(X) &= 0(\\nu>1)\\\\ \\mathbb{V}(X) &= \\begin{cases}\\infty&(1<\\nu\\leq2)\\\\\\frac{\\nu}{\\nu-2}&(2<\\nu)\\end{cases} \\end{aligned} $$ In [25]: from scipy.stats import t as tdist In [26]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( - 6 , 6 , 1000 ) nus = [ 1 , 2 , 5 , 1000 ] for nu in nus : plt . plot ( X , tdist . pdf ( X , nu ), label = f \"$ν= {nu} $\" ) plt . plot ( X , norm . pdf ( X , 0 , 1 ), linestyle = ':' , linewidth = 5 , label = \"Standard Normal Distribution\" ) plt . xlim ( - 6 , 6 ), plt . ylim ( 0 , 0.4 ) plt . title ( \"t-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Student's t-test One-sample test: $$ X_1,\\ldots,X_n\\sim\\mathcal{N}(\\mu,\\sigma)\\text{: i.i.d.}\\\\ \\bar{X} = \\frac{X_1,\\ldots,X_n}{n}, S = \\frac{\\left(X_1-\\bar{X}\\right)&#94;2 + \\cdots+\\left(X_n-\\bar{X}\\right)&#94;2}{n-1}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}-\\mu\\sqrt{n}\\right)}{S}\\sim t(n-1) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{X_{11}+\\cdots+X_{1m}}{m}\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{X_{21}+\\cdots+X_{2n}}{n}\\\\ S=\\frac{\\sum_{i=1}&#94;m\\left(X_{1i}-\\bar{X}_1\\right)&#94;2 + \\sum_{i=1}&#94;n\\left(X_{2i}-\\bar{X}_2\\right)&#94;2}{m+n-2}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)\\sqrt{mn}}{S\\sqrt{m+n}}\\sim t(m+n-2) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{\\sum_{i=1}&#94;mX_{1i}}{m}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{1i} - \\bar{X}_1\\right)&#94;2}{m-1}, A=S_1/m\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{\\sum_{i=1}&#94;mX_{2i}}{n}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{2i} - \\bar{X}_2\\right)&#94;2}{n-1}, B=S_2/n\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)}{S\\sqrt{A+B}}\\approx t(\\nu), \\nu=\\frac{(A+B)&#94;2}{A&#94;2/(m-1)+B&#94;2/(n-1)} $$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html"},{"title":"レポート課題1(10/3出題)","text":"mCJlKprTzokSlJvat4U5rw==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html"},{"title":"イントロダクション","text":"講義計画 確率と統計の基礎 ： 最先端の機械学習技術の数学的基盤 探索と最適化 ： 広大な探索空間から最適解を効率よく探索 機械学習 ： データの背後に潜む知識を発見 自然言語処理 ： 人工知能技術の応用例 # 日付 内容 担当 1 10/3 概要 杉山 2 10/10 最適化（連続1） 佐藤 3 10/17 最適化（連続2） 佐藤 4 10/24 最適化（探索） 本多 5 10/31 確率と統計 本多 6 11/14 確率と統計 本多 7 11/21 確率と統計 本多 8 11/28 機械学習（教師付き学習） 本多 9 12/5 機械学習（教師付き学習） 佐藤 10 12/12 自然言語処理 宮尾 11 12/19 自然言語処理 宮尾 12 12/26 自然言語処理 宮尾 13 1/9 機械学習（強化学習） 杉山 1 1/16 試験 佐藤 人工知能とは 1956年：\"The Dartmouth Summer Research Project on Artificial Intelligence\" にて Artificial Intelligence という言葉が提唱された。 Watoson Nature AlphaGo 人工知能関連分野の発展 人工知能研究 1960年頃(1次ブーム)：記号処理、論理推論 1980年頃(2次ブーム)：エキスパートシステム ニューラルネット研究 1960年頃(1次ブーム)：パーセプトロン（１層） 1990年頃(2次ブーム)：誤差逆伝播ほう（多層） 機械学習研究 1995年頃〜：統計・凸最適化 1995年頃〜：ベイズ推論 2010年頃〜：深層学習 3種類の機械学習 教師付き学習 ：人間が教師となり、コンピュータの学習を手伝う。 教師なし学習 ：コンピュータが人間の手を介さずに自発的に学習する。 強化学習 ：ロボットが人間の手を介さずに自発的に意思決定を行う。 まとめ 人工知能 ： 知的なコンピュータシステムを作る 数学・プログラミング・実世界応用をつなぐ架け橋 探索 ： 広大な探索空間を効率よく探索 機械学習 ： データの背後に潜む知識を発見","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html"},{"title":"Pair HMM","text":"※実装時のパラメータ PairHMMによるアラインメントを実装していく。なお、 （ kerasy.Bio.alignment.PairHMM ） に定義してあります。 In [1]: from kerasy.Bio.alignment import PairHMM In [2]: # サンプル配列 seqX = \"CCAGAGCTGTGGCAGACAGTGGCT\" seqY = \"CCAGCTGTGCAGACACTGGCTT\" In [3]: model = PairHMM () In [4]: ! cat params.json { \"delta\": \"1/10\", \"epsilon\": \"1/5\", \"tau\": \"1/30\", \"px_e_y\": \"1/8\", \"px_ne_y\": \"1/24\", \"qx\": \"1/4\", \"qy\": \"1/4\" } In [5]: model . set_params ( path = \"params.json\" ) Pair HMM とその利点 HMMのために開発されたアルゴリズムを使える。（らしい←正解ラベルの無いアラインメントでBaum-Welchアルゴリズムをどのように使うのかは現在考察中です。） アラインメントの確率的な解釈が可能になる。 グローバルアラインメントを出力する Pair-HMM Mは $x$ と $y$ がマッチした状態。（$x_i$ と $y_j$ がアライン） Iは $x$ に挿入が起きている状態。（$x_i$ と $-$ がアライン） Dは $x$ に欠失が起きている状態。（$-$ と $y_j$ がアライン） （以下では上から $V&#94;M,V&#94;X,V&#94;Y$ と記述している。） Pair HMMのためのViterbiアルゴリズム 2本数の配列 $x,y$ を与えると確率最大のアラインメントを求めるアルゴリズム。 Initialization: $$ \\begin{cases} V&#94;M(0,0)=1, V&#94;M(i,0)=V&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ V&#94;X(0,0)=0, V&#94;X(1,0)=\\delta q_{x_1} V&#94;X(i,0)=\\varepsilon q_{x_i}V&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ V&#94;Y(0,0)=0, V&#94;Y(0,1)=\\delta q_{y_1} V&#94;Y(0,j)=\\varepsilon q_{y_j}V&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} V&#94;M(i,j) &= p_{x_iy_j}\\max\\begin{cases}(1-2\\delta-\\tau)V&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;Y(i-1,j-1)\\end{cases}\\\\ V&#94;X(i,j) &= q_{x_i}\\max\\begin{cases}\\delta V&#94;M(i-1,j)\\\\\\varepsilon V&#94;X(i-1,j)\\end{cases}\\\\ V&#94;Y(i,j) &= q_{y_j}\\max\\begin{cases}\\delta V&#94;M(i,j-1)\\\\\\varepsilon V&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$v_e = \\tau\\max\\left(V&#94;M(n,m),V&#94;X(n,m),V&#94;Y(n,m)\\right)$$ In [6]: P_optimal = model . align ( seqX , seqY , return_score = True ) Pair HMM (Viterbi) Alignment score: 3.551370651291424e-30 |parameter| value | -------------------------------- |delta | 0.1| |epsilon | 0.2| |tau | 0.03333333333333333| |px_e_y | 0.125| |px_ne_y |0.041666666666666664| |qx | 0.25| |qy | 0.25| =============================================================== X: CCAGAGCTGTGGCAGACAGTGGC-T Y: CC--AGCTGT-GCAGACACTGGCTT =============================================================== In [7]: print ( f \"π*= {P_optimal} \" ) π*=3.551370651291424e-30 アラインメントの信頼性 配列 $x,y$ が与えられた時、アラインメント $\\pi$ が得られる条件付き確率を考えることができ、それが アラインメントの信頼度 を表していると考ることができる。 $$ P(\\pi|x,y) = \\frac{P(x,y,\\pi)}{P(x,y)}\\\\ P(x,y) = \\sum_{\\text{alignments }\\pi}P(x,y,\\pi) $$ ※ なお、ここで $P(x,y)$ は $x,y$ に関する全ての可能なアラインメントについて確率を足し合わせたもの であり、Forwardアルゴリズムで計算することができる。 Pair HMMのためのForwardアルゴリズム ※ Viterbiの $\\max$ を $\\text{sum}$ に変更しただけ。 Initialization: $$ \\begin{cases} F&#94;M(0,0)=1, F&#94;M(i,0)=F&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ F&#94;X(0,0)=0, F&#94;X(1,0)=\\delta q_{x_1} F&#94;X(i,0)=\\varepsilon q_{x_i}F&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ F&#94;Y(0,0)=0, F&#94;Y(0,1)=\\delta q_{y_1} F&#94;Y(0,j)=\\varepsilon q_{y_j}F&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} F&#94;M(i,j) &= p_{x_iy_j}\\text{sum}\\begin{cases}(1-2\\delta-\\tau)F&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;Y(i-1,j-1)\\end{cases}\\\\ F&#94;X(i,j) &= q_{x_i}\\text{sum}\\begin{cases}\\delta F&#94;M(i-1,j)\\\\\\varepsilon F&#94;X(i-1,j)\\end{cases}\\\\ F&#94;Y(i,j) &= q_{y_j}\\text{sum}\\begin{cases}\\delta F&#94;M(i,j-1)\\\\\\varepsilon F&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$F_e = \\tau\\ \\text{sum}\\left(F&#94;M(n,m),F&#94;X(n,m),F&#94;Y(n,m)\\right)$$ In [8]: F , P_all = model . forward ( seqX , seqY ) In [9]: print ( f \"𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)= {P_all} \" ) 𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)=2.0457988072916236e-28 In [10]: print ( f \"P(π*|x, y)={P_optimal/P_all}\" ) P(π*|x, y)=0.017359334840912267 $x_i$ と $y_j$ がアラインされる確率 次の式で表される。 $$ \\begin{aligned} P(x_i\\diamondsuit y_i|x,y) &= \\frac{\\sum_{\\pi\\in\\Omega_{ij}}P(x,y,\\pi)}{P(x,y)}\\\\ &= \\frac{F&#94;M(i,j)\\cdot B&#94;M(i,j)}{P(x,y)} \\end{aligned}$$ ※ $\\Omega_{ij}$：$x_i$ と $y_j$ がアラインされるアラインメントの集合 Pair HMMのためのBackwardアルゴリズム Needleman-Wunsh-Gotoh のBackwardアルゴリズムとの類似性に注目！ Initialization: $$ \\begin{cases} B&#94;M(n,m)=B&#94;X(n,m)=B&#94;Y(n,m)=\\tau\\\\ B&#94;X(i,m)=\\varepsilon q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;Y(i,m)=\\varepsilon q_{y_{j+1}}B&#94;X(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ B&#94;M(i,m)=\\delta q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;M(n,j)=\\delta q_{y_{j+1}}B&#94;Y(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ \\end{cases} $$ Recursion: $i=n-1,\\ldots,1,\\quad j=m-1,\\ldots,1$ $$ \\begin{aligned} B&#94;M(i,j) &= \\text{sum}\\begin{cases}(1-2\\delta-\\tau)p_{x_iy_j}B&#94;M(i+1,j+1)\\\\\\delta q_{x_{i+1}}B(i+1,j)\\\\\\delta q_{y_{j+1}}B&#94;Y(i,j+1)\\end{cases}\\\\ B&#94;X(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{x_{i+1}}B&#94;X(i+1,j)\\\\ B&#94;Y(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{y_{j+1}}B&#94;Y(i,j+1)\\\\ \\end{aligned} $$ In [11]: B = model . backward ( seqX , seqY ) In [12]: Pij = ( F * B ) / P_all In [13]: import seaborn as sns import matplotlib.pyplot as plt In [14]: sns . heatmap ( Pij ) plt . show () In [15]: # 可視化のために pandas を使用。 import pandas as pd r , c = Pij . shape pd . set_option ( 'display.max_rows' , r ) pd . set_option ( 'display.max_columns' , c ) In [16]: df = pd . DataFrame ( Pij ) In [17]: df Out[17]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 0 1.139605e+00 1.145169e-02 1.061625e-04 9.380071e-06 7.330898e-07 1.256616e-08 5.467340e-10 2.910714e-11 5.763005e-12 3.410212e-13 5.102192e-15 2.187247e-16 1.988821e-17 1.147484e-18 1.367416e-20 6.720910e-22 4.976161e-24 7.098501e-26 9.237930e-28 2.211060e-29 3.898762e-32 1.763484e-40 1 1.002452e-01 9.915333e-01 6.192125e-03 1.868999e-04 4.332564e-05 9.546525e-07 4.066396e-08 2.157028e-09 9.465879e-11 4.846141e-11 4.058759e-13 3.267685e-14 8.754145e-16 1.928520e-16 1.373420e-18 1.082830e-19 9.927246e-22 1.394016e-23 1.508549e-25 4.777080e-27 9.963503e-30 8.788027e-38 2 2.530997e-02 1.110298e-01 7.189425e-01 4.724160e-03 2.510915e-04 4.961792e-05 1.187062e-06 1.017255e-07 3.970235e-09 2.068131e-10 9.703401e-11 7.255597e-13 1.565563e-13 2.611280e-15 3.254769e-16 2.694314e-18 1.079695e-19 1.562036e-21 1.545424e-23 1.735256e-25 1.265060e-27 2.215960e-35 3 1.439692e-03 1.313691e-01 9.101842e-02 4.446381e-01 5.912097e-03 3.126913e-04 8.585244e-05 1.538885e-06 1.919091e-07 8.250641e-09 2.393023e-10 1.283784e-10 1.387610e-12 2.250638e-13 4.821068e-15 2.111543e-16 4.457287e-18 2.448800e-19 3.227733e-21 1.284984e-23 8.240296e-26 3.335362e-33 4 3.517101e-05 3.000139e-03 4.131934e-01 8.504087e-02 1.663724e-01 9.561056e-03 2.917045e-04 9.039141e-05 1.788740e-06 1.312414e-07 2.869640e-08 4.101759e-10 1.507867e-10 3.456004e-12 5.959996e-13 5.757530e-15 2.024716e-16 4.111221e-18 7.279991e-20 1.060049e-21 6.121304e-24 4.843531e-31 5 9.934762e-06 1.458875e-04 3.927027e-03 6.740773e-01 8.441291e-02 7.234362e-02 1.094905e-02 1.879103e-04 1.252776e-04 1.454564e-06 1.059818e-07 2.729047e-08 9.494833e-10 8.082013e-11 1.033243e-11 3.411004e-13 6.554134e-15 3.958672e-16 8.201302e-18 3.482706e-20 2.714352e-22 4.461969e-29 6 5.322130e-07 6.381400e-05 4.257593e-04 6.688387e-03 9.174344e-01 4.917686e-02 4.329939e-02 3.819221e-03 1.763480e-04 1.328334e-04 1.940120e-06 9.105133e-08 1.541103e-08 2.609538e-09 8.150731e-11 2.404569e-11 1.889654e-13 3.985572e-15 1.024288e-16 6.839760e-18 1.341414e-20 4.476503e-27 7 5.863612e-10 7.892422e-07 1.012986e-04 1.397365e-03 1.342858e-02 1.002812e+00 2.593641e-02 3.890025e-02 1.670263e-03 1.614886e-04 8.871868e-05 1.756325e-06 1.155298e-07 1.122902e-08 2.203971e-09 1.028948e-10 2.509711e-11 1.531285e-13 2.099939e-15 4.258022e-17 2.374690e-18 1.208869e-24 8 1.171184e-11 2.035729e-09 3.700419e-07 2.397639e-04 4.844063e-03 2.599346e-02 9.949710e-01 1.502418e-02 2.712144e-02 1.478651e-03 1.433184e-04 6.712671e-05 1.454730e-06 9.766789e-08 9.072910e-09 2.328874e-09 6.340026e-11 1.502027e-11 1.916941e-13 1.314758e-15 1.242412e-17 4.691715e-23 9 3.005919e-13 6.399055e-11 5.515662e-09 3.748097e-07 1.153167e-04 1.497122e-02 6.310820e-02 8.863944e-01 1.030851e-02 1.491223e-02 2.002265e-03 8.941933e-05 3.530505e-05 1.470719e-06 9.754840e-08 8.043302e-09 3.375435e-09 3.679377e-11 2.917845e-12 5.484419e-14 1.471719e-15 4.178025e-21 10 1.792807e-15 1.557812e-12 1.844985e-10 1.289502e-08 7.545128e-07 6.340240e-05 2.061627e-02 1.787166e-01 5.419262e-01 1.188051e-02 1.024380e-02 2.347055e-03 7.577232e-05 1.796622e-05 1.114937e-06 7.069534e-08 8.011504e-09 2.756012e-09 4.374664e-11 6.704524e-13 1.075503e-14 1.217530e-19 11 1.923711e-17 4.362099e-15 1.941124e-12 6.147024e-10 1.551641e-08 5.550653e-07 1.380449e-04 9.537258e-03 5.398937e-01 1.863598e-01 1.452105e-02 9.548898e-03 1.837989e-03 5.136835e-05 1.397535e-05 6.835406e-07 5.429499e-08 8.819330e-09 1.851138e-09 1.231506e-11 1.775772e-13 2.576473e-18 12 5.638842e-19 1.455168e-16 9.139939e-15 1.547158e-12 1.037887e-09 2.248539e-08 1.151600e-06 9.872926e-05 5.973776e-03 8.862574e-01 6.786997e-02 1.624026e-02 4.029496e-03 2.179139e-03 2.921118e-05 1.601828e-05 5.561847e-07 3.123249e-08 2.978327e-09 9.604760e-10 3.744283e-12 9.636167e-17 13 3.331427e-21 7.494769e-19 2.963338e-16 6.987305e-15 4.315679e-12 6.087761e-10 3.497465e-08 3.604967e-06 8.639915e-05 5.915526e-03 9.923696e-01 2.749764e-02 2.345296e-02 2.411435e-03 1.600356e-03 2.967960e-05 1.263876e-05 5.535990e-07 1.777340e-08 1.086922e-09 1.497803e-10 4.715717e-15 14 8.334075e-23 3.113616e-20 1.885485e-18 4.096232e-16 1.085250e-14 2.877122e-12 9.801182e-10 2.465783e-08 7.111413e-06 1.332057e-04 5.532024e-03 1.019408e+00 1.546140e-02 2.230611e-02 1.326417e-03 7.657518e-04 3.756285e-05 1.397395e-05 7.084890e-07 8.614586e-09 3.251784e-10 1.560898e-13 15 2.761536e-24 1.577325e-22 1.652226e-19 6.855680e-18 4.640406e-16 1.789313e-14 1.881340e-12 7.696555e-10 3.721167e-08 3.131924e-06 2.768933e-04 5.432195e-03 1.019385e+00 1.220031e-02 2.678270e-02 1.012065e-03 4.234835e-04 2.691482e-05 8.312535e-06 2.735984e-07 4.296980e-09 1.264609e-12 16 1.125679e-25 3.526855e-23 5.295754e-22 1.029758e-19 2.954167e-17 8.415539e-16 3.337555e-14 1.886064e-12 3.708635e-10 8.103999e-08 2.979865e-06 2.717052e-04 5.867388e-03 1.008690e+00 1.398136e-02 2.796359e-02 1.094449e-03 2.222028e-04 1.653854e-05 6.727102e-06 7.321521e-08 3.095212e-11 17 5.314132e-29 1.371847e-25 1.002377e-22 1.431441e-21 2.329882e-19 2.824449e-17 1.264033e-15 1.039492e-13 1.896385e-12 2.117496e-10 8.676212e-08 1.428983e-06 4.224040e-04 7.551663e-03 9.828098e-01 2.577489e-02 2.154489e-02 1.348560e-03 1.271999e-04 1.123527e-05 1.554246e-06 1.061734e-09 18 1.311292e-30 3.344026e-28 1.039987e-25 1.917693e-22 4.842995e-21 2.644625e-19 5.424283e-17 1.016892e-15 2.466777e-13 3.876336e-12 1.412328e-10 6.644843e-08 1.307534e-06 2.267450e-04 1.352321e-02 9.236001e-01 4.123399e-02 2.242045e-02 1.780378e-03 1.137684e-04 4.658387e-06 2.707169e-08 19 3.685034e-32 1.308860e-29 1.727006e-27 1.846830e-25 9.168694e-23 2.025241e-20 2.015727e-19 7.009128e-17 1.110761e-15 2.135974e-13 8.991483e-12 3.294862e-10 2.170110e-08 1.342768e-06 1.738901e-04 1.366663e-02 9.157034e-01 5.085192e-02 1.134612e-02 1.333942e-03 1.601513e-04 7.755075e-07 20 2.627187e-34 3.307561e-31 6.412082e-29 8.638204e-27 5.130913e-25 5.421429e-23 2.735844e-20 4.581117e-19 4.673008e-17 1.996269e-15 1.567873e-13 2.425635e-11 7.144030e-10 2.339911e-08 4.401237e-07 1.583398e-04 8.993801e-03 8.715290e-01 1.032744e-01 9.301698e-03 8.040002e-04 1.264439e-05 21 3.712503e-36 1.248259e-33 7.484327e-31 4.015876e-28 1.275117e-26 7.126689e-25 1.294296e-22 1.126902e-20 1.562753e-18 3.245370e-17 8.822502e-16 3.618329e-13 1.719160e-11 9.436607e-10 3.634534e-08 4.567520e-07 2.489897e-05 1.031566e-02 8.313752e-01 1.337435e-01 9.529909e-03 1.755113e-04 22 1.081603e-37 4.975375e-35 3.859345e-33 1.396911e-30 8.994506e-28 2.233130e-26 1.907603e-24 1.395483e-22 7.223861e-21 2.385762e-18 3.020013e-17 1.437842e-15 1.876938e-13 2.135337e-11 5.432165e-10 7.346489e-08 4.608162e-07 1.776497e-05 2.915009e-03 7.255898e-01 2.520881e-01 4.862597e-03 23 7.053935e-40 3.695478e-37 9.639089e-35 1.470014e-32 2.795455e-30 1.235666e-27 2.213410e-26 7.771768e-24 1.829949e-22 1.539068e-20 1.623359e-18 3.985091e-17 3.521057e-15 1.986472e-13 1.486597e-11 3.334896e-10 7.576041e-08 5.116867e-07 2.834710e-05 1.528768e-03 3.676275e-01 6.239253e-01 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-6.html"},{"title":"生物物理学 第2回","text":"講師： 樋口秀男 生命体（生物）の一般的定義 生物とは、以下の四つの条件を満たす物質システム 自己と外界との境界 エネルギーと物質の代謝 自己複製 恒常性 電子 分子 細胞数 整体の階層性 $10&#94;{28}$ $10&#94;{23}$ $10&#94;{13}$ ヒト 意識・運動・代謝 $10&#94;{24}$ $10&#94;{19}$ $10&#94;{9}$ 心臓 循環・拡散 $10&#94;{15}$ $10&#94;{10}$ $10&#94;{0}$ 心筋細胞 生理的なリズム単位 $10&#94;{5}$ $10&#94;{5}$ 筋節 ゆらぎを制した振動 $10&#94;{0}$ タンパク質 反応のゆらぎ $10&#94;{2}$ アミノ酸 タンパク質の性質の起源 $10&#94;{0}$ 電子 量子力学の支配領域 生命科学を覆う謎 生命誕生の謎（+生命の進化、分化の謎） タンパク質構造の決定と機能との関係の謎 細胞が超多種分子（タンパク質、脂質、小分子、イオン、…）の濃度・種類・機能の制御を行う謎 個体（臓器、器官等）の構造と機能構築の謎 生命誕生の謎 元素誕生は超新星の爆発→重金属ができる。 現宇宙の元素の割合と人体内の元素比が非常に似通っている。 RNAワールド プロテインワールド 原始地球上に存在したと仮定される、RNA からなる自己複製系のこと。また、これがかつて存在し、現生生物へと進化したという仮説。 まずアミノ酸ができ、重合してポリペプチド、さらにタンパク質が作り出され、これが触媒として働いて生命を作り出したという仮説。 生命誕生を示唆した実験事実 ミラーの放電によるアミノ酸合成(1953) $\\mathrm{CH_3,NH_3,H_2,H_2O}$ を含む気体に放電（落雷を模した）をする。 実験２週間後に以下の化合物 （アミノ酸） ができた。 グリシン アラニン グルタル酸 酢酸（脂肪酸） 塩基や糖（リボース）、核酸基、RNA、タンパク質なども化学合成可能。 生命基本物質の化学合成が成功した理由 地球には、エネルギーの高い（海底火山、紫外線、雷、高音）場所と低く安定な場所が共存していたので、分子は 高エネルギー環境で合成され、低エネルギー環境で安定化する ことができた。 $$A\\overset{k_1}{{\\longrightarrow}}B\\overset{k_2}{{\\longrightarrow}}C$$ In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: def simulate ( ax , color , tp , A = 1 , B = 0 , C = 0 , dt = 1e-3 , k1 = 0.07 , k2 = 0.02 , K = 1 ): time = np . arange ( 0 , 100 , dt ) As = np . zeros ( shape = len ( time )) Bs = np . zeros ( shape = len ( time )) Cs = np . zeros ( shape = len ( time )) for i , t in enumerate ( time ): dA = ( - k1 * A ) * dt * K dB = ( k1 * A - k2 * B ) * dt * K dC = ( k2 * B ) * dt * K A += dA ; B += dB ; C += dC As [ i ] = A ; Bs [ i ] = B ; Cs [ i ] = C if t > tp : K = 1e-6 # 温度を下げ、反応速度が1e-6倍になったことをシミュレーション ax . plot ( time , As , color = color ) ax . plot ( time , Bs , color = color ) ax . plot ( time , Cs , color = color ) if tp < 100 : ax . vlines ( x = tp , ymin = 0 , ymax = 1 , linestyle = \":\" ) return ax In [3]: fig , ax = plt . subplots () ax = simulate ( ax = ax , color = \"red\" , tp = 20 ) ax = simulate ( ax = ax , color = \"black\" , tp = 100 ) ax . set_xlabel ( \"Time\" ) ax . set_ylabel ( \"RQ\" ) ax . set_title ( \"Simulation Result\" ) plt . show () 上記のシミュレーション結果から、$A,B$ 分子を得るためには、 途中で（温度が下がるなどの結果）反応速度が下がる必要がある ことがわかる。 生体分子が濃縮され、多次反応による分子合成速度が上がった。 地球は巨大で多様な反応槽であったため、合成確率が上がった。 考えられる生物 地球型炭素生物 地球環境のように水と二酸化炭素（あるいはメタン）が豊富な惑星であるなら、情報記憶（DNA）→伝令（mRNA）→機能（タンパク質、RNA）のような地球型の仕事を分担した炭素生物が生まれる可能性は高い。 炭素生物 vs ケイ素生物 常温常圧で安定な炭素ー炭素結合 とは違い、 ケイ素ーケイ素結合はパイ結合やシグマ結合による二重三重結合を作る傾向がほとんど無く、非常に不安定 である。 炭素ーケイ素結合は安定 なので、炭素生物の中にケイ素が含まれるだろう。したがって、ケイ素生物の存在する確率は非常に低い。 金属生物 常温において金属結合が安定であり、分子としての機能を持つことは困難であるため、生物の中心にはならないだろう。ただし、金属イオンや錯体として、炭素生物やケイ素生物に利用されることはありうる。 講義のまとめ 生命分子や細胞の種類は多く、構造や機能をどのように理解するかが、 生命科学全体の 課題である。 生命は 宇宙の元素を効率よく利用した。 地球上の 高↔︎低エネルギーを行き交い 、多様な環境や濃縮により高確率かつ安定的に生体分子が合成された。 これが生命の誕生の確率を大きくした。 初めにRNAが合成され、それを鋳型としてタンパク質が合成され、原子生命が誕生したと想像される。 系外惑星にも、炭素生命体が存在する可能性がある。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html"},{"title":"ペアワイズアラインメント","text":"ペアワイズアラインメントとは 2本のDNAの塩基配列（タンパク質のアミノ酸配列）を比較する方法の一つ バイオインフォマティクスでは最も基本的な解析手法 なぜDNA配列の比較をするのか DNAの機能を知りたい （∵ DNAの配列が似ていると機能が似ている） DNAのどの部分が重要かを知りたい。 （∵ 「保存されている＝重要」だと考えられる） 生物の進化系統樹を知りたい 新型シーケンサーで読まれたDNAの由来を知りたい DNAの変異や新型シークエンサーの読み取りエラーでは 長さが異なる ことがあるので、 長さの変化を考慮し効率の良い動的計画法 を用いる アラインメントの種類 説明 例 グローバルアラインメント 2本の配列の 全体 をアラインメントする。 Needleman-Wunsch ローカルアラインメント 2本の配列の 似ている部分を検出 し、その部分をアランメントする Smith-Waterman 実装 各種アラインメントを実装していく。なお、全て Affine gap penalty を利用する。 In [1]: from kerasy.Bio.alignment import NeedlemanWunshGotoh , SmithWaterman , BackwardNeedlemanWunshGotoh In [2]: # サンプル配列 seqX = \"GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACGGAGCTGTGGCAGACCTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGCGAGGACTG\" seqY = \"CGCATGCGGAGTGAGGGGAGCAGTTGGGAACAGATGGTCCCGCCGAGGGACCGGTGGGCAGACGGGGCCAGCTGTGGCAGACACTGGCTTCTAACCACCGAACGTTCTTTCCGCTCCGC\" Needleman-Wunsch-Gotoh 自作のモジュール （ kerasy.Bio.alignment.NeedlemanWunshGotoh ） を使ってアラインメントをします。 In [3]: model = NeedlemanWunshGotoh () In [4]: model . align ( seqX , seqY ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== Smith-Waterman 自作のモジュール （ kerasy.Bio.alignment.SmithWaterman ） を使ってアラインメントをします。 In [5]: model = SmithWaterman () In [6]: model . align ( seqX , seqY ) Smith-Waterman Alignment score: 37.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== Aligned positions: X[0,111] Y[7,118] X: GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACG Y: GGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GGGCAGACG X: G----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGC Y: GGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCTCCGC =============================================================== 制約付きアラインメント $x_i$ と $y_j$ がアラインされるという制約下で最大のアラインメントスコアを求める。 全てのパターンを列挙すると $\\mathcal{O}(n&#94;2m&#94;2)$ の時間がかかるが、 後ろ向きアラインメント と組み合わせることで全てのパターンを $\\mathcal{O}(nm)$ で計算可能。 前向き：xiとyjがアラインされる時の、iまでとjまでの配列の最大アラインメントスコアを保持。 後ろ向き：xiとyjがアラインされる時の、i+1以降とj+1以降の配列の最大アラインメントスコアを保持。 Needleman-Wunsch-Gotohの逆向きアラインメントは （ kerasy.Bio.alignment.BackwardNeedlemanWunshGotoh ） に定義してあります。 In [7]: model_forward = NeedlemanWunshGotoh () model_backward = BackwardNeedlemanWunshGotoh () In [8]: model_forward . align ( seqX , seqY , memorize = True ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== In [9]: model_backward . align ( seqX , seqY , memorize = True ) Backward Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGGAACA-GATGGTCC-CGCCGAGGGACCGGTGG- X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTTC-TAACCACCGAACGTTCTTTCCG-CT X: CCGCGAGGACT Y: CCGC------- =============================================================== In [10]: k = 3 n = len ( seqX ) + 1 m = len ( seqY ) + 1 In [11]: M = model_forward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] bM = model_backward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] In [12]: A = M + bM In [13]: # 上の配列を見れば、seqX[0] と seqY[7] がアラインされている時に最大スコア14を取ることがわかるので、それを確かめる。 print ( A [ 0 , 7 ]) 14.0 In [14]: # 可視化のために pandas を使用。 import pandas as pd pd . set_option ( 'display.max_rows' , m ) pd . set_option ( 'display.max_columns' , n ) In [15]: df = pd . DataFrame ( A ) In [16]: df Out[16]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 0 12.0 10.0 8.0 8.0 8.0 10.0 8.0 14.0 7.0 2.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -17.0 -20.0 -25.0 -26.0 -31.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -51.0 -54.0 -55.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -129.0 -132.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -150.0 -156.0 -156.0 -159.0 -160.0 -163.0 -164.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -181.0 -184.0 -187.0 -190.0 -193.0 -194.0 -197.0 -198.0 -201.0 -200.0 -203.0 -206.0 -209.0 -210.0 -211.0 -214.0 -217.0 -218.0 -221.0 -224.0 -225.0 -228.0 -229.0 -230.0 -235.0 -238.0 -241.0 -242.0 -243.0 -246.0 1 5.0 12.0 8.0 6.0 6.0 8.0 8.0 8.0 14.0 5.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -14.0 -17.0 -22.0 -25.0 -26.0 -33.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -53.0 -54.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -131.0 -132.0 -135.0 -140.0 -141.0 -144.0 -147.0 -148.0 -150.0 -157.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -171.0 -174.0 -179.0 -180.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -200.0 -203.0 -206.0 -211.0 -210.0 -211.0 -216.0 -217.0 -220.0 -223.0 -224.0 -227.0 -228.0 -229.0 -232.0 -237.0 -240.0 -243.0 -242.0 -243.0 2 2.0 3.0 10.0 8.0 6.0 6.0 6.0 6.0 6.0 14.0 3.0 0.0 -3.0 -4.0 -9.0 -12.0 -13.0 -16.0 -17.0 -24.0 -27.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -47.0 -48.0 -53.0 -54.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -125.0 -126.0 -131.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -150.0 -150.0 -157.0 -156.0 -159.0 -158.0 -163.0 -166.0 -169.0 -172.0 -171.0 -176.0 -177.0 -180.0 -183.0 -184.0 -187.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -200.0 -203.0 -204.0 -209.0 -210.0 -213.0 -214.0 -217.0 -220.0 -221.0 -224.0 -225.0 -228.0 -231.0 -234.0 -237.0 -238.0 -241.0 -242.0 3 -1.0 2.0 3.0 8.0 6.0 6.0 4.0 6.0 6.0 4.0 14.0 1.0 0.0 -5.0 -4.0 -9.0 -12.0 -13.0 -18.0 -17.0 -24.0 -29.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -49.0 -48.0 -55.0 -56.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -127.0 -126.0 -133.0 -136.0 -137.0 -142.0 -143.0 -146.0 -150.0 -151.0 -150.0 -157.0 -156.0 -159.0 -160.0 -165.0 -166.0 -169.0 -172.0 -171.0 -176.0 -179.0 -182.0 -185.0 -186.0 -187.0 -192.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -209.0 -212.0 -213.0 -216.0 -217.0 -220.0 -223.0 -224.0 -225.0 -230.0 -233.0 -236.0 -239.0 -238.0 -241.0 4 -4.0 -3.0 0.0 1.0 8.0 4.0 4.0 2.0 4.0 4.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -11.0 -14.0 -15.0 -20.0 -19.0 -22.0 -27.0 -26.0 -29.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -60.0 -63.0 -64.0 -67.0 -66.0 -69.0 -68.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -87.0 -92.0 -91.0 -94.0 -95.0 -100.0 -103.0 -100.0 -105.0 -106.0 -109.0 -112.0 -113.0 -116.0 -119.0 -118.0 -121.0 -124.0 -127.0 -128.0 -131.0 -136.0 -137.0 -142.0 -145.0 -148.0 -148.0 -153.0 -150.0 -155.0 -156.0 -159.0 -160.0 -165.0 -168.0 -169.0 -170.0 -171.0 -176.0 -177.0 -182.0 -185.0 -186.0 -189.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -220.0 -221.0 -224.0 -227.0 -228.0 -233.0 -234.0 -237.0 -238.0 5 -7.0 -4.0 -3.0 -2.0 -1.0 8.0 2.0 4.0 4.0 2.0 4.0 2.0 14.0 1.0 0.0 -3.0 -6.0 -9.0 -14.0 -15.0 -20.0 -21.0 -20.0 -25.0 -26.0 -29.0 -32.0 -33.0 -36.0 -39.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -59.0 -60.0 -61.0 -64.0 -65.0 -64.0 -67.0 -66.0 -73.0 -74.0 -77.0 -76.0 -81.0 -78.0 -83.0 -84.0 -85.0 -90.0 -91.0 -92.0 -95.0 -98.0 -101.0 -98.0 -103.0 -106.0 -107.0 -110.0 -111.0 -114.0 -117.0 -118.0 -121.0 -122.0 -127.0 -130.0 -131.0 -136.0 -137.0 -140.0 -144.0 -147.0 -146.0 -151.0 -150.0 -153.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -173.0 -176.0 -179.0 -182.0 -183.0 -184.0 -187.0 -190.0 -191.0 -190.0 -195.0 -198.0 -201.0 -200.0 -203.0 -206.0 -207.0 -210.0 -213.0 -214.0 -217.0 -218.0 -219.0 -224.0 -227.0 -230.0 -233.0 -232.0 -235.0 6 -10.0 -9.0 -6.0 -3.0 -4.0 -1.0 6.0 2.0 2.0 4.0 2.0 2.0 2.0 14.0 1.0 -2.0 -5.0 -8.0 -9.0 -14.0 -17.0 -18.0 -23.0 -20.0 -23.0 -28.0 -31.0 -34.0 -33.0 -34.0 -37.0 -38.0 -43.0 -44.0 -49.0 -52.0 -55.0 -56.0 -57.0 -58.0 -61.0 -64.0 -66.0 -62.0 -65.0 -66.0 -71.0 -74.0 -77.0 -76.0 -79.0 -76.0 -81.0 -84.0 -85.0 -88.0 -91.0 -94.0 -97.0 -96.0 -99.0 -98.0 -101.0 -104.0 -107.0 -110.0 -113.0 -114.0 -115.0 -116.0 -121.0 -124.0 -127.0 -130.0 -133.0 -136.0 -139.0 -141.0 -142.0 -147.0 -146.0 -149.0 -148.0 -153.0 -156.0 -159.0 -162.0 -163.0 -166.0 -167.0 -170.0 -173.0 -174.0 -177.0 -180.0 -183.0 -182.0 -187.0 -188.0 -191.0 -190.0 -193.0 -196.0 -199.0 -200.0 -203.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -218.0 -221.0 -224.0 -227.0 -228.0 -231.0 -232.0 7 -13.0 -10.0 -9.0 -8.0 -5.0 -2.0 -1.0 6.0 2.0 0.0 4.0 0.0 2.0 1.0 14.0 3.0 0.0 -3.0 -8.0 -9.0 -14.0 -17.0 -18.0 -22.0 -18.0 -21.0 -26.0 -29.0 -32.0 -33.0 -34.0 -37.0 -38.0 -43.0 -46.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -59.0 -64.0 -64.0 -60.0 -63.0 -66.0 -69.0 -72.0 -75.0 -76.0 -77.0 -74.0 -79.0 -82.0 -83.0 -86.0 -89.0 -94.0 -95.0 -96.0 -97.0 -98.0 -99.0 -102.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -121.0 -124.0 -125.0 -130.0 -131.0 -134.0 -139.0 -139.0 -142.0 -145.0 -146.0 -147.0 -150.0 -153.0 -154.0 -157.0 -160.0 -163.0 -164.0 -167.0 -170.0 -173.0 -176.0 -177.0 -180.0 -181.0 -184.0 -185.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -204.0 -207.0 -208.0 -211.0 -212.0 -213.0 -218.0 -221.0 -224.0 -225.0 -226.0 -229.0 8 -16.0 -13.0 -12.0 -11.0 -10.0 -5.0 -4.0 -1.0 6.0 0.0 2.0 2.0 2.0 0.0 3.0 14.0 3.0 0.0 -5.0 -6.0 -11.0 -14.0 -15.0 -18.0 -21.0 -16.0 -21.0 -26.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -52.0 -55.0 -56.0 -59.0 -64.0 -62.0 -60.0 -61.0 -66.0 -69.0 -72.0 -75.0 -74.0 -75.0 -74.0 -79.0 -80.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -95.0 -96.0 -99.0 -102.0 -105.0 -108.0 -109.0 -112.0 -113.0 -118.0 -121.0 -122.0 -127.0 -128.0 -131.0 -135.0 -138.0 -137.0 -142.0 -143.0 -144.0 -147.0 -150.0 -151.0 -154.0 -157.0 -160.0 -161.0 -164.0 -167.0 -170.0 -173.0 -174.0 -177.0 -178.0 -179.0 -182.0 -183.0 -186.0 -189.0 -190.0 -191.0 -194.0 -197.0 -198.0 -201.0 -204.0 -205.0 -208.0 -209.0 -210.0 -215.0 -218.0 -221.0 -222.0 -223.0 -226.0 9 -19.0 -16.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 4.0 2.0 0.0 2.0 0.0 2.0 3.0 14.0 3.0 -2.0 -3.0 -8.0 -11.0 -12.0 -17.0 -16.0 -19.0 -16.0 -21.0 -26.0 -27.0 -28.0 -31.0 -32.0 -37.0 -40.0 -39.0 -44.0 -47.0 -48.0 -49.0 -52.0 -53.0 -58.0 -57.0 -62.0 -62.0 -58.0 -61.0 -66.0 -69.0 -72.0 -73.0 -72.0 -75.0 -74.0 -77.0 -80.0 -83.0 -88.0 -89.0 -90.0 -95.0 -94.0 -93.0 -96.0 -99.0 -102.0 -105.0 -106.0 -109.0 -110.0 -115.0 -118.0 -119.0 -124.0 -125.0 -128.0 -132.0 -133.0 -136.0 -137.0 -140.0 -141.0 -144.0 -147.0 -148.0 -151.0 -154.0 -157.0 -158.0 -161.0 -164.0 -167.0 -170.0 -171.0 -174.0 -175.0 -178.0 -177.0 -180.0 -183.0 -186.0 -187.0 -188.0 -191.0 -194.0 -195.0 -198.0 -201.0 -202.0 -205.0 -206.0 -207.0 -212.0 -215.0 -218.0 -219.0 -220.0 -223.0 10 -22.0 -19.0 -18.0 -17.0 -16.0 -11.0 -10.0 -7.0 -4.0 -3.0 4.0 0.0 0.0 0.0 0.0 2.0 3.0 14.0 1.0 0.0 -5.0 -8.0 -9.0 -14.0 -15.0 -14.0 -19.0 -16.0 -21.0 -24.0 -25.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -44.0 -45.0 -46.0 -49.0 -50.0 -55.0 -58.0 -55.0 -62.0 -60.0 -58.0 -61.0 -66.0 -69.0 -70.0 -71.0 -72.0 -77.0 -72.0 -77.0 -80.0 -83.0 -88.0 -87.0 -90.0 -93.0 -92.0 -93.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -112.0 -115.0 -116.0 -121.0 -122.0 -125.0 -129.0 -130.0 -131.0 -136.0 -135.0 -138.0 -141.0 -144.0 -145.0 -148.0 -151.0 -154.0 -155.0 -158.0 -161.0 -162.0 -167.0 -168.0 -169.0 -172.0 -175.0 -176.0 -175.0 -180.0 -183.0 -186.0 -185.0 -188.0 -191.0 -192.0 -195.0 -198.0 -199.0 -202.0 -203.0 -204.0 -209.0 -212.0 -213.0 -218.0 -217.0 -220.0 11 -22.0 -24.0 -21.0 -18.0 -19.0 -16.0 -12.0 -12.0 -9.0 -4.0 -5.0 2.0 -2.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -13.0 -14.0 -19.0 -16.0 -19.0 -22.0 -23.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -42.0 -43.0 -46.0 -49.0 -52.0 -55.0 -58.0 -55.0 -60.0 -60.0 -58.0 -61.0 -66.0 -67.0 -68.0 -71.0 -74.0 -75.0 -72.0 -79.0 -82.0 -81.0 -86.0 -87.0 -88.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -120.0 -124.0 -127.0 -127.0 -128.0 -131.0 -134.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -151.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -168.0 -167.0 -172.0 -173.0 -176.0 -175.0 -178.0 -181.0 -184.0 -185.0 -188.0 -189.0 -192.0 -195.0 -196.0 -199.0 -200.0 -203.0 -206.0 -209.0 -212.0 -211.0 -216.0 -217.0 12 -28.0 -22.0 -24.0 -23.0 -20.0 -17.0 -16.0 -12.0 -10.0 -9.0 -4.0 -4.0 2.0 -4.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -11.0 -12.0 -17.0 -16.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -35.0 -36.0 -37.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -55.0 -58.0 -58.0 -56.0 -61.0 -64.0 -65.0 -66.0 -71.0 -72.0 -73.0 -70.0 -79.0 -80.0 -81.0 -84.0 -87.0 -86.0 -89.0 -90.0 -91.0 -94.0 -97.0 -100.0 -101.0 -106.0 -109.0 -110.0 -115.0 -116.0 -118.0 -124.0 -126.0 -127.0 -126.0 -131.0 -132.0 -135.0 -138.0 -139.0 -140.0 -145.0 -148.0 -149.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -166.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -179.0 -182.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -198.0 -203.0 -206.0 -209.0 -212.0 -209.0 -214.0 13 -29.0 -30.0 -22.0 -26.0 -25.0 -22.0 -17.0 -17.0 -12.0 -12.0 -10.0 -6.0 -4.0 0.0 -4.0 -2.0 -4.0 -3.0 -2.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -9.0 -12.0 -11.0 -12.0 -15.0 -14.0 -19.0 -22.0 -25.0 -28.0 -31.0 -34.0 -35.0 -34.0 -35.0 -38.0 -43.0 -44.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -60.0 -54.0 -59.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -70.0 -77.0 -78.0 -81.0 -82.0 -85.0 -88.0 -89.0 -92.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -124.0 -127.0 -124.0 -129.0 -130.0 -135.0 -138.0 -141.0 -140.0 -145.0 -146.0 -147.0 -152.0 -155.0 -158.0 -157.0 -158.0 -163.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -178.0 -179.0 -182.0 -181.0 -186.0 -189.0 -190.0 -191.0 -192.0 -197.0 -198.0 -203.0 -204.0 -207.0 -210.0 -209.0 14 -33.0 -30.0 -29.0 -22.0 -27.0 -25.0 -21.0 -18.0 -15.0 -10.0 -12.0 -8.0 -8.0 -2.0 -1.0 -5.0 -3.0 -6.0 -2.0 -2.0 4.0 14.0 1.0 -2.0 -3.0 -6.0 -7.0 -10.0 -9.0 -10.0 -13.0 -14.0 -19.0 -20.0 -25.0 -26.0 -31.0 -32.0 -33.0 -34.0 -37.0 -40.0 -43.0 -44.0 -49.0 -48.0 -51.0 -52.0 -53.0 -56.0 -58.0 -54.0 -59.0 -62.0 -65.0 -66.0 -69.0 -72.0 -73.0 -70.0 -75.0 -76.0 -79.0 -82.0 -83.0 -86.0 -89.0 -90.0 -91.0 -92.0 -97.0 -100.0 -103.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -122.0 -125.0 -124.0 -129.0 -132.0 -135.0 -136.0 -139.0 -142.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -159.0 -158.0 -163.0 -164.0 -167.0 -166.0 -169.0 -170.0 -175.0 -176.0 -179.0 -180.0 -183.0 -186.0 -187.0 -190.0 -191.0 -194.0 -197.0 -200.0 -203.0 -204.0 -207.0 -208.0 15 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -7.0 -2.0 -1.0 6.0 14.0 3.0 0.0 -1.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -14.0 -19.0 -22.0 -23.0 -24.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -42.0 -47.0 -48.0 -49.0 -50.0 -51.0 -56.0 -57.0 -52.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -73.0 -70.0 -73.0 -76.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -107.0 -110.0 -115.0 -117.0 -118.0 -121.0 -122.0 -123.0 -126.0 -129.0 -130.0 -133.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -152.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -165.0 -168.0 -169.0 -168.0 -173.0 -176.0 -177.0 -178.0 -181.0 -184.0 -187.0 -188.0 -189.0 -194.0 -197.0 -200.0 -203.0 -202.0 -205.0 16 -37.0 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -5.0 -2.0 1.0 8.0 14.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -13.0 -14.0 -17.0 -22.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -37.0 -40.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -49.0 -54.0 -55.0 -52.0 -57.0 -62.0 -63.0 -66.0 -67.0 -70.0 -71.0 -70.0 -71.0 -74.0 -79.0 -80.0 -83.0 -84.0 -85.0 -88.0 -91.0 -94.0 -95.0 -100.0 -101.0 -106.0 -109.0 -112.0 -114.0 -117.0 -118.0 -119.0 -120.0 -123.0 -124.0 -129.0 -132.0 -133.0 -132.0 -135.0 -140.0 -141.0 -146.0 -149.0 -150.0 -153.0 -154.0 -157.0 -158.0 -161.0 -162.0 -165.0 -168.0 -167.0 -168.0 -171.0 -174.0 -175.0 -176.0 -179.0 -184.0 -185.0 -188.0 -191.0 -192.0 -197.0 -200.0 -201.0 -202.0 17 -38.0 -37.0 -32.0 -33.0 -30.0 -29.0 -22.0 -25.0 -23.0 -19.0 -19.0 -11.0 -11.0 -8.0 -8.0 -9.0 -2.0 -3.0 -5.0 -3.0 -5.0 0.0 1.0 10.0 14.0 5.0 4.0 -1.0 -2.0 -3.0 -4.0 -7.0 -10.0 -13.0 -12.0 -17.0 -22.0 -21.0 -24.0 -25.0 -28.0 -31.0 -34.0 -35.0 -38.0 -37.0 -40.0 -43.0 -46.0 -47.0 -48.0 -47.0 -52.0 -53.0 -50.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -68.0 -69.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -97.0 -98.0 -103.0 -106.0 -108.0 -111.0 -114.0 -115.0 -116.0 -117.0 -120.0 -121.0 -126.0 -129.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -146.0 -147.0 -150.0 -151.0 -154.0 -155.0 -158.0 -159.0 -162.0 -163.0 -166.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -181.0 -182.0 -185.0 -188.0 -189.0 -194.0 -195.0 -198.0 -199.0 18 -39.0 -38.0 -37.0 -32.0 -35.0 -30.0 -27.0 -22.0 -23.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -5.0 -3.0 -3.0 2.0 3.0 10.0 14.0 7.0 6.0 1.0 0.0 -1.0 -4.0 -5.0 -10.0 -13.0 -12.0 -15.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -34.0 -33.0 -36.0 -35.0 -38.0 -41.0 -46.0 -45.0 -46.0 -45.0 -50.0 -51.0 -50.0 -55.0 -58.0 -61.0 -62.0 -63.0 -68.0 -67.0 -66.0 -67.0 -70.0 -75.0 -78.0 -79.0 -82.0 -83.0 -88.0 -91.0 -92.0 -96.0 -98.0 -101.0 -106.0 -106.0 -109.0 -112.0 -113.0 -114.0 -117.0 -118.0 -121.0 -124.0 -127.0 -130.0 -131.0 -134.0 -137.0 -140.0 -143.0 -144.0 -147.0 -148.0 -151.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -168.0 -171.0 -174.0 -175.0 -178.0 -179.0 -180.0 -185.0 -188.0 -189.0 -192.0 -193.0 -196.0 19 -40.0 -39.0 -38.0 -37.0 -32.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -7.0 -2.0 -1.0 2.0 5.0 12.0 14.0 7.0 6.0 3.0 2.0 -1.0 -2.0 -7.0 -10.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -33.0 -34.0 -35.0 -38.0 -41.0 -44.0 -43.0 -44.0 -45.0 -50.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -65.0 -66.0 -65.0 -66.0 -67.0 -70.0 -75.0 -76.0 -79.0 -80.0 -85.0 -88.0 -89.0 -94.0 -94.0 -98.0 -103.0 -105.0 -104.0 -109.0 -110.0 -111.0 -114.0 -117.0 -116.0 -121.0 -124.0 -127.0 -128.0 -131.0 -134.0 -137.0 -140.0 -141.0 -142.0 -145.0 -148.0 -149.0 -150.0 -153.0 -156.0 -157.0 -158.0 -161.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -177.0 -182.0 -185.0 -188.0 -187.0 -190.0 -193.0 20 -45.0 -40.0 -39.0 -40.0 -39.0 -30.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -7.0 0.0 -1.0 4.0 7.0 12.0 14.0 7.0 8.0 5.0 2.0 1.0 -4.0 -7.0 -8.0 -11.0 -12.0 -13.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -32.0 -31.0 -34.0 -35.0 -38.0 -39.0 -42.0 -41.0 -44.0 -45.0 -48.0 -49.0 -50.0 -55.0 -58.0 -57.0 -60.0 -63.0 -64.0 -65.0 -66.0 -67.0 -70.0 -73.0 -76.0 -77.0 -82.0 -85.0 -86.0 -91.0 -92.0 -94.0 -100.0 -102.0 -103.0 -104.0 -107.0 -108.0 -111.0 -114.0 -115.0 -116.0 -121.0 -124.0 -125.0 -128.0 -131.0 -134.0 -135.0 -138.0 -141.0 -140.0 -143.0 -146.0 -147.0 -150.0 -153.0 -154.0 -155.0 -158.0 -159.0 -162.0 -165.0 -168.0 -169.0 -170.0 -173.0 -174.0 -179.0 -182.0 -185.0 -188.0 -185.0 -190.0 21 -44.0 -45.0 -40.0 -39.0 -40.0 -37.0 -30.0 -33.0 -30.0 -27.0 -22.0 -25.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -5.0 0.0 1.0 6.0 7.0 12.0 14.0 9.0 10.0 5.0 2.0 -1.0 -4.0 -7.0 -8.0 -11.0 -10.0 -11.0 -14.0 -19.0 -20.0 -23.0 -28.0 -29.0 -30.0 -31.0 -34.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -48.0 -51.0 -50.0 -55.0 -56.0 -59.0 -58.0 -61.0 -64.0 -65.0 -68.0 -67.0 -68.0 -73.0 -76.0 -77.0 -82.0 -85.0 -88.0 -91.0 -94.0 -94.0 -99.0 -100.0 -103.0 -102.0 -105.0 -106.0 -111.0 -114.0 -117.0 -116.0 -119.0 -122.0 -123.0 -128.0 -131.0 -134.0 -133.0 -136.0 -139.0 -138.0 -141.0 -146.0 -147.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -166.0 -167.0 -168.0 -173.0 -174.0 -179.0 -180.0 -183.0 -186.0 -185.0 22 -47.0 -44.0 -45.0 -42.0 -39.0 -40.0 -35.0 -30.0 -33.0 -28.0 -29.0 -20.0 -25.0 -20.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 3.0 8.0 9.0 14.0 14.0 9.0 8.0 3.0 0.0 -1.0 -6.0 -9.0 -8.0 -11.0 -10.0 -13.0 -16.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -55.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -67.0 -70.0 -75.0 -78.0 -77.0 -84.0 -85.0 -89.0 -93.0 -95.0 -94.0 -99.0 -100.0 -103.0 -102.0 -107.0 -106.0 -113.0 -116.0 -117.0 -116.0 -119.0 -124.0 -123.0 -130.0 -133.0 -134.0 -135.0 -136.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -168.0 -167.0 -170.0 -175.0 -174.0 -181.0 -180.0 -183.0 -186.0 23 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 5.0 10.0 11.0 14.0 14.0 7.0 8.0 1.0 -2.0 -1.0 -6.0 -9.0 -8.0 -11.0 -12.0 -13.0 -18.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -44.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -70.0 -77.0 -80.0 -77.0 -86.0 -85.0 -89.0 -94.0 -95.0 -94.0 -99.0 -100.0 -103.0 -104.0 -109.0 -106.0 -113.0 -116.0 -119.0 -116.0 -121.0 -126.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -148.0 -151.0 -150.0 -151.0 -154.0 -155.0 -160.0 -159.0 -162.0 -165.0 -168.0 -167.0 -172.0 -177.0 -176.0 -183.0 -180.0 -183.0 24 -51.0 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -4.0 -1.0 2.0 5.0 10.0 11.0 14.0 14.0 5.0 8.0 -1.0 -4.0 -3.0 -6.0 -9.0 -8.0 -13.0 -14.0 -13.0 -20.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -39.0 -36.0 -37.0 -44.0 -41.0 -46.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -63.0 -64.0 -67.0 -68.0 -71.0 -72.0 -79.0 -82.0 -79.0 -86.0 -87.0 -89.0 -92.0 -93.0 -94.0 -97.0 -98.0 -103.0 -106.0 -109.0 -108.0 -113.0 -116.0 -117.0 -118.0 -123.0 -124.0 -125.0 -130.0 -131.0 -132.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -150.0 -153.0 -154.0 -157.0 -160.0 -159.0 -164.0 -165.0 -168.0 -169.0 -174.0 -177.0 -178.0 -181.0 -180.0 25 -54.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -41.0 -38.0 -33.0 -32.0 -31.0 -30.0 -25.0 -22.0 -25.0 -22.0 -21.0 -16.0 -13.0 -14.0 -8.0 -10.0 -9.0 -4.0 -4.0 -1.0 2.0 7.0 10.0 9.0 14.0 12.0 7.0 6.0 -1.0 -4.0 -3.0 -6.0 -7.0 -10.0 -13.0 -16.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -64.0 -65.0 -70.0 -73.0 -74.0 -79.0 -82.0 -81.0 -88.0 -89.0 -89.0 -94.0 -93.0 -94.0 -97.0 -100.0 -105.0 -108.0 -111.0 -108.0 -115.0 -116.0 -119.0 -120.0 -123.0 -124.0 -125.0 -132.0 -131.0 -134.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -170.0 -171.0 -176.0 -177.0 -178.0 -181.0 26 -57.0 -54.0 -52.0 -52.0 -49.0 -46.0 -45.0 -42.0 -39.0 -38.0 -33.0 -34.0 -31.0 -30.0 -25.0 -22.0 -23.0 -22.0 -23.0 -16.0 -15.0 -15.0 -8.0 -12.0 -10.0 -4.0 -2.0 1.0 2.0 5.0 8.0 7.0 14.0 10.0 5.0 6.0 -1.0 -4.0 -3.0 -6.0 -9.0 -10.0 -15.0 -18.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -32.0 -29.0 -34.0 -39.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -66.0 -65.0 -72.0 -75.0 -74.0 -81.0 -82.0 -81.0 -89.0 -90.0 -89.0 -94.0 -93.0 -94.0 -99.0 -102.0 -105.0 -108.0 -111.0 -110.0 -115.0 -118.0 -121.0 -122.0 -125.0 -124.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -167.0 -170.0 -173.0 -176.0 -175.0 -178.0 27 -60.0 -59.0 -56.0 -52.0 -54.0 -51.0 -48.0 -46.0 -44.0 -39.0 -39.0 -35.0 -35.0 -31.0 -31.0 -26.0 -24.0 -25.0 -22.0 -23.0 -18.0 -15.0 -15.0 -8.0 -12.0 -9.0 -6.0 -4.0 1.0 2.0 3.0 8.0 6.0 14.0 8.0 3.0 6.0 -1.0 -2.0 -3.0 -6.0 -9.0 -12.0 -13.0 -16.0 -13.0 -20.0 -21.0 -20.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -46.0 -43.0 -48.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -61.0 -66.0 -67.0 -72.0 -75.0 -76.0 -81.0 -83.0 -83.0 -87.0 -92.0 -89.0 -94.0 -93.0 -96.0 -101.0 -104.0 -107.0 -108.0 -109.0 -110.0 -115.0 -118.0 -119.0 -122.0 -125.0 -126.0 -125.0 -132.0 -133.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -163.0 -164.0 -169.0 -172.0 -175.0 -176.0 -175.0 28 -62.0 -62.0 -59.0 -57.0 -52.0 -54.0 -50.0 -49.0 -44.0 -43.0 -41.0 -37.0 -36.0 -33.0 -32.0 -31.0 -26.0 -26.0 -26.0 -24.0 -24.0 -19.0 -17.0 -13.0 -8.0 -10.0 -7.0 -7.0 -4.0 -1.0 0.0 2.0 6.0 6.0 14.0 8.0 1.0 6.0 -1.0 -2.0 -5.0 -8.0 -11.0 -14.0 -13.0 -16.0 -13.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -38.0 -37.0 -42.0 -43.0 -48.0 -43.0 -48.0 -49.0 -50.0 -57.0 -58.0 -59.0 -62.0 -63.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -83.0 -84.0 -89.0 -92.0 -89.0 -94.0 -95.0 -96.0 -103.0 -106.0 -107.0 -108.0 -109.0 -112.0 -115.0 -120.0 -121.0 -122.0 -127.0 -126.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -158.0 -159.0 -162.0 -165.0 -164.0 -171.0 -172.0 -175.0 -176.0 29 -65.0 -62.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -42.0 -43.0 -42.0 -37.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -25.0 -22.0 -19.0 -18.0 -13.0 -8.0 -8.0 -5.0 -6.0 -5.0 -2.0 -1.0 2.0 5.0 6.0 14.0 8.0 1.0 6.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -11.0 -14.0 -13.0 -18.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -35.0 -40.0 -37.0 -40.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -56.0 -59.0 -60.0 -65.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -81.0 -84.0 -89.0 -90.0 -89.0 -94.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -111.0 -114.0 -117.0 -120.0 -121.0 -124.0 -125.0 -128.0 -127.0 -130.0 -133.0 -136.0 -135.0 -136.0 -141.0 -140.0 -143.0 -148.0 -151.0 -152.0 -155.0 -156.0 -157.0 -162.0 -165.0 -166.0 -169.0 -170.0 -173.0 30 -64.0 -65.0 -64.0 -61.0 -60.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -18.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 2.0 6.0 -1.0 -2.0 -5.0 -10.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -40.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -59.0 -62.0 -67.0 -68.0 -69.0 -74.0 -75.0 -80.0 -84.0 -81.0 -84.0 -89.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -113.0 -116.0 -117.0 -120.0 -123.0 -124.0 -125.0 -128.0 -127.0 -130.0 -135.0 -138.0 -135.0 -136.0 -143.0 -140.0 -145.0 -148.0 -151.0 -154.0 -155.0 -156.0 -159.0 -164.0 -167.0 -166.0 -169.0 -170.0 31 -67.0 -64.0 -65.0 -64.0 -61.0 -58.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -17.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 4.0 4.0 -2.0 -4.0 -7.0 -11.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -27.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -38.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -61.0 -62.0 -67.0 -68.0 -71.0 -75.0 -76.0 -81.0 -82.0 -81.0 -84.0 -87.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -102.0 -107.0 -106.0 -113.0 -114.0 -115.0 -120.0 -121.0 -122.0 -123.0 -128.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -141.0 -140.0 -145.0 -146.0 -149.0 -152.0 -155.0 -158.0 -159.0 -164.0 -167.0 -166.0 -169.0 32 -68.0 -67.0 -62.0 -65.0 -64.0 -61.0 -56.0 -55.0 -52.0 -51.0 -50.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -25.0 -22.0 -19.0 -15.0 -10.0 -8.0 -8.0 -5.0 -6.0 -3.0 -4.0 -1.0 2.0 3.0 10.0 14.0 9.0 6.0 2.0 0.0 -3.0 -6.0 -9.0 -10.0 -11.0 -10.0 -16.0 -13.0 -19.0 -22.0 -21.0 -26.0 -24.0 -28.0 -31.0 -29.0 -32.0 -36.0 -39.0 -36.0 -43.0 -44.0 -45.0 -45.0 -46.0 -47.0 -52.0 -56.0 -57.0 -62.0 -64.0 -68.0 -70.0 -73.0 -74.0 -76.0 -80.0 -81.0 -80.0 -84.0 -86.0 -91.0 -93.0 -97.0 -96.0 -98.0 -101.0 -102.0 -108.0 -106.0 -114.0 -113.0 -114.0 -119.0 -120.0 -121.0 -122.0 -127.0 -129.0 -131.0 -134.0 -135.0 -137.0 -136.0 -142.0 -142.0 -145.0 -146.0 -148.0 -153.0 -154.0 -159.0 -159.0 -163.0 -166.0 -165.0 33 -71.0 -68.0 -65.0 -62.0 -65.0 -62.0 -59.0 -56.0 -53.0 -50.0 -51.0 -48.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -24.0 -21.0 -18.0 -13.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -4.0 -1.0 2.0 5.0 12.0 14.0 7.0 4.0 1.0 -2.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -15.0 -15.0 -19.0 -22.0 -19.0 -24.0 -24.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -47.0 -53.0 -56.0 -59.0 -62.0 -65.0 -68.0 -71.0 -73.0 -74.0 -75.0 -78.0 -79.0 -80.0 -85.0 -88.0 -91.0 -94.0 -95.0 -98.0 -98.0 -102.0 -104.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -120.0 -121.0 -120.0 -125.0 -130.0 -131.0 -132.0 -135.0 -136.0 -138.0 -142.0 -142.0 -146.0 -146.0 -150.0 -153.0 -154.0 -159.0 -159.0 -163.0 -164.0 34 -72.0 -71.0 -68.0 -65.0 -62.0 -63.0 -60.0 -59.0 -56.0 -51.0 -50.0 -49.0 -48.0 -43.0 -42.0 -43.0 -40.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -25.0 -22.0 -19.0 -16.0 -11.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -2.0 1.0 4.0 7.0 14.0 12.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -15.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -49.0 -55.0 -58.0 -61.0 -64.0 -67.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -82.0 -87.0 -90.0 -91.0 -94.0 -97.0 -98.0 -100.0 -104.0 -104.0 -106.0 -105.0 -114.0 -113.0 -114.0 -119.0 -122.0 -121.0 -120.0 -127.0 -130.0 -131.0 -132.0 -135.0 -138.0 -140.0 -142.0 -142.0 -146.0 -148.0 -152.0 -155.0 -154.0 -161.0 -159.0 -163.0 35 -73.0 -74.0 -69.0 -70.0 -66.0 -64.0 -61.0 -62.0 -59.0 -56.0 -53.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -42.0 -41.0 -38.0 -33.0 -34.0 -31.0 -28.0 -28.0 -25.0 -22.0 -19.0 -16.0 -13.0 -8.0 -10.0 -10.0 -7.0 -6.0 -5.0 -2.0 1.0 6.0 9.0 14.0 10.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -47.0 -48.0 -49.0 -57.0 -60.0 -63.0 -65.0 -69.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -84.0 -87.0 -92.0 -91.0 -96.0 -97.0 -98.0 -102.0 -106.0 -106.0 -106.0 -105.0 -114.0 -113.0 -114.0 -121.0 -122.0 -123.0 -120.0 -127.0 -130.0 -133.0 -132.0 -137.0 -138.0 -140.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -161.0 -159.0 36 -78.0 -73.0 -74.0 -71.0 -72.0 -66.0 -66.0 -61.0 -60.0 -59.0 -56.0 -55.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -30.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -10.0 -12.0 -9.0 -6.0 -3.0 -2.0 1.0 4.0 7.0 14.0 8.0 3.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -45.0 -47.0 -50.0 -51.0 -56.0 -61.0 -62.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -80.0 -81.0 -84.0 -86.0 -91.0 -93.0 -95.0 -98.0 -100.0 -102.0 -105.0 -106.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -120.0 -127.0 -128.0 -131.0 -134.0 -137.0 -136.0 -139.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -159.0 37 -79.0 -80.0 -73.0 -76.0 -73.0 -71.0 -66.0 -68.0 -63.0 -62.0 -60.0 -58.0 -57.0 -54.0 -53.0 -49.0 -47.0 -46.0 -45.0 -44.0 -39.0 -39.0 -37.0 -36.0 -34.0 -31.0 -28.0 -25.0 -22.0 -21.0 -18.0 -17.0 -12.0 -12.0 -14.0 -11.0 -8.0 -5.0 0.0 3.0 4.0 5.0 14.0 8.0 1.0 0.0 -1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -39.0 -44.0 -47.0 -47.0 -52.0 -53.0 -58.0 -62.0 -64.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -82.0 -83.0 -84.0 -86.0 -92.0 -93.0 -94.0 -99.0 -102.0 -101.0 -104.0 -106.0 -106.0 -105.0 -112.0 -115.0 -114.0 -119.0 -122.0 -125.0 -120.0 -125.0 -126.0 -131.0 -134.0 -135.0 -134.0 -137.0 -142.0 -142.0 -148.0 -147.0 -152.0 -153.0 -154.0 38 -81.0 -80.0 -78.0 -75.0 -77.0 -75.0 -69.0 -66.0 -68.0 -64.0 -64.0 -58.0 -59.0 -56.0 -55.0 -54.0 -49.0 -49.0 -47.0 -46.0 -44.0 -40.0 -39.0 -39.0 -37.0 -34.0 -30.0 -28.0 -25.0 -24.0 -21.0 -19.0 -19.0 -14.0 -14.0 -14.0 -11.0 -8.0 -3.0 0.0 3.0 2.0 5.0 14.0 6.0 -1.0 -1.0 1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -41.0 -46.0 -47.0 -49.0 -54.0 -55.0 -60.0 -63.0 -64.0 -64.0 -72.0 -71.0 -71.0 -73.0 -76.0 -77.0 -84.0 -85.0 -84.0 -88.0 -92.0 -93.0 -96.0 -101.0 -104.0 -101.0 -104.0 -108.0 -106.0 -105.0 -114.0 -115.0 -116.0 -119.0 -122.0 -124.0 -122.0 -125.0 -128.0 -133.0 -134.0 -135.0 -134.0 -139.0 -142.0 -144.0 -148.0 -147.0 -152.0 -153.0 39 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -46.0 -45.0 -40.0 -37.0 -39.0 -35.0 -32.0 -28.0 -28.0 -27.0 -25.0 -23.0 -19.0 -21.0 -16.0 -14.0 -12.0 -11.0 -8.0 -5.0 -2.0 3.0 0.0 4.0 14.0 4.0 0.0 -1.0 2.0 -3.0 -5.0 -4.0 -7.0 -7.0 -11.0 -8.0 -16.0 -17.0 -18.0 -22.0 -19.0 -23.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -38.0 -41.0 -47.0 -49.0 -49.0 -56.0 -55.0 -60.0 -62.0 -65.0 -64.0 -71.0 -70.0 -71.0 -75.0 -78.0 -77.0 -83.0 -85.0 -86.0 -88.0 -93.0 -95.0 -98.0 -102.0 -105.0 -101.0 -106.0 -108.0 -106.0 -105.0 -114.0 -117.0 -118.0 -119.0 -122.0 -125.0 -122.0 -127.0 -130.0 -133.0 -136.0 -135.0 -134.0 -141.0 -144.0 -146.0 -150.0 -147.0 -152.0 40 -87.0 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -44.0 -45.0 -40.0 -36.0 -37.0 -36.0 -34.0 -28.0 -28.0 -29.0 -23.0 -25.0 -19.0 -22.0 -17.0 -16.0 -14.0 -11.0 -8.0 -6.0 -4.0 1.0 -1.0 4.0 14.0 2.0 -1.0 -2.0 2.0 -1.0 -4.0 -4.0 -7.0 -7.0 -10.0 -8.0 -16.0 -17.0 -16.0 -21.0 -19.0 -21.0 -24.0 -26.0 -29.0 -33.0 -31.0 -35.0 -36.0 -40.0 -43.0 -47.0 -50.0 -51.0 -56.0 -57.0 -61.0 -60.0 -67.0 -64.0 -69.0 -68.0 -73.0 -76.0 -79.0 -79.0 -83.0 -86.0 -86.0 -90.0 -93.0 -94.0 -97.0 -102.0 -103.0 -100.0 -106.0 -108.0 -108.0 -105.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -124.0 -129.0 -130.0 -133.0 -134.0 -137.0 -136.0 -143.0 -146.0 -146.0 -150.0 -147.0 41 -90.0 -87.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -54.0 -49.0 -52.0 -49.0 -44.0 -45.0 -42.0 -34.0 -35.0 -34.0 -33.0 -28.0 -29.0 -28.0 -23.0 -26.0 -19.0 -20.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -5.0 0.0 1.0 6.0 14.0 3.0 1.0 -1.0 2.0 1.0 -2.0 -3.0 -6.0 -5.0 -8.0 -8.0 -14.0 -15.0 -16.0 -21.0 -19.0 -19.0 -22.0 -25.0 -28.0 -31.0 -31.0 -35.0 -36.0 -41.0 -44.0 -45.0 -50.0 -51.0 -54.0 -58.0 -59.0 -60.0 -65.0 -64.0 -67.0 -70.0 -73.0 -74.0 -77.0 -79.0 -83.0 -84.0 -87.0 -90.0 -93.0 -96.0 -99.0 -100.0 -103.0 -100.0 -105.0 -106.0 -108.0 -107.0 -112.0 -113.0 -116.0 -119.0 -120.0 -123.0 -126.0 -127.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -144.0 -145.0 -148.0 42 -93.0 -90.0 -89.0 -88.0 -85.0 -82.0 -81.0 -76.0 -75.0 -74.0 -71.0 -66.0 -67.0 -66.0 -63.0 -58.0 -57.0 -56.0 -57.0 -54.0 -51.0 -52.0 -49.0 -46.0 -46.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -28.0 -25.0 -28.0 -19.0 -20.0 -19.0 -16.0 -13.0 -12.0 -9.0 -8.0 -5.0 0.0 -1.0 8.0 14.0 3.0 1.0 1.0 4.0 3.0 -2.0 -3.0 -4.0 -5.0 -8.0 -8.0 -12.0 -13.0 -18.0 -19.0 -18.0 -19.0 -22.0 -25.0 -28.0 -29.0 -32.0 -33.0 -38.0 -41.0 -42.0 -47.0 -48.0 -51.0 -55.0 -56.0 -57.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -98.0 -103.0 -106.0 -109.0 -107.0 -111.0 -113.0 -117.0 -118.0 -121.0 -124.0 -125.0 -128.0 -129.0 -130.0 -134.0 -138.0 -140.0 -142.0 -143.0 -145.0 43 -96.0 -93.0 -90.0 -91.0 -90.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -51.0 -48.0 -44.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -20.0 -19.0 -16.0 -15.0 -12.0 -9.0 -10.0 -3.0 -2.0 1.0 8.0 14.0 1.0 3.0 3.0 6.0 3.0 -2.0 -1.0 -4.0 -5.0 -8.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -19.0 -22.0 -25.0 -26.0 -29.0 -30.0 -35.0 -38.0 -39.0 -44.0 -45.0 -48.0 -52.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -78.0 -81.0 -84.0 -87.0 -90.0 -91.0 -92.0 -97.0 -98.0 -99.0 -96.0 -103.0 -106.0 -109.0 -107.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 -125.0 -126.0 -127.0 -132.0 -135.0 -138.0 -141.0 -140.0 -143.0 44 -97.0 -96.0 -93.0 -90.0 -91.0 -88.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -50.0 -47.0 -44.0 -41.0 -34.0 -35.0 -36.0 -31.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -18.0 -17.0 -16.0 -15.0 -12.0 -9.0 -8.0 -3.0 -2.0 1.0 8.0 14.0 3.0 5.0 5.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -6.0 -5.0 -10.0 -13.0 -16.0 -17.0 -18.0 -19.0 -22.0 -23.0 -24.0 -29.0 -32.0 -35.0 -38.0 -41.0 -44.0 -47.0 -49.0 -50.0 -51.0 -54.0 -55.0 -56.0 -61.0 -64.0 -67.0 -70.0 -71.0 -74.0 -75.0 -78.0 -81.0 -82.0 -85.0 -90.0 -89.0 -90.0 -95.0 -98.0 -97.0 -96.0 -101.0 -106.0 -107.0 -107.0 -111.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -126.0 -129.0 -132.0 -135.0 -136.0 -139.0 -140.0 45 -100.0 -97.0 -96.0 -93.0 -92.0 -89.0 -88.0 -85.0 -84.0 -79.0 -78.0 -77.0 -76.0 -71.0 -68.0 -71.0 -68.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -53.0 -51.0 -50.0 -47.0 -44.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -30.0 -32.0 -29.0 -24.0 -19.0 -16.0 -19.0 -16.0 -13.0 -14.0 -7.0 -6.0 -5.0 -2.0 1.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 0.0 1.0 -2.0 -3.0 -6.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -20.0 -21.0 -26.0 -29.0 -32.0 -35.0 -38.0 -41.0 -43.0 -46.0 -47.0 -52.0 -49.0 -54.0 -53.0 -58.0 -61.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -78.0 -79.0 -82.0 -85.0 -88.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -105.0 -106.0 -109.0 -112.0 -115.0 -116.0 -117.0 -120.0 -123.0 -126.0 -129.0 -130.0 -135.0 -134.0 -137.0 46 -99.0 -100.0 -95.0 -96.0 -93.0 -92.0 -87.0 -88.0 -83.0 -82.0 -79.0 -78.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -52.0 -49.0 -48.0 -45.0 -42.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -31.0 -30.0 -27.0 -22.0 -17.0 -16.0 -19.0 -14.0 -13.0 -12.0 -5.0 -6.0 -3.0 -2.0 3.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 -2.0 1.0 -2.0 -3.0 -8.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -22.0 -23.0 -26.0 -31.0 -34.0 -37.0 -40.0 -43.0 -43.0 -46.0 -49.0 -52.0 -49.0 -54.0 -53.0 -60.0 -63.0 -66.0 -65.0 -70.0 -71.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -90.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -107.0 -106.0 -111.0 -114.0 -115.0 -116.0 -117.0 -122.0 -123.0 -128.0 -129.0 -130.0 -135.0 -134.0 47 -104.0 -99.0 -100.0 -97.0 -98.0 -93.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -78.0 -77.0 -74.0 -71.0 -68.0 -67.0 -68.0 -63.0 -60.0 -59.0 -60.0 -59.0 -55.0 -50.0 -47.0 -46.0 -45.0 -44.0 -41.0 -36.0 -37.0 -36.0 -35.0 -28.0 -31.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -10.0 -3.0 -4.0 -1.0 0.0 5.0 10.0 14.0 7.0 9.0 9.0 10.0 7.0 0.0 1.0 0.0 -5.0 -6.0 -3.0 -8.0 -9.0 -12.0 -15.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -34.0 -35.0 -38.0 -42.0 -43.0 -44.0 -49.0 -50.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -80.0 -83.0 -82.0 -87.0 -88.0 -87.0 -90.0 -93.0 -96.0 -95.0 -96.0 -101.0 -104.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -117.0 -122.0 -125.0 -128.0 -129.0 -130.0 -133.0 48 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -62.0 -60.0 -53.0 -50.0 -47.0 -48.0 -45.0 -44.0 -41.0 -36.0 -39.0 -38.0 -35.0 -28.0 -33.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -8.0 -3.0 -4.0 -3.0 2.0 5.0 10.0 14.0 5.0 11.0 9.0 10.0 7.0 2.0 3.0 -2.0 -3.0 -4.0 -3.0 -8.0 -9.0 -12.0 -13.0 -16.0 -17.0 -22.0 -25.0 -26.0 -31.0 -32.0 -35.0 -40.0 -40.0 -41.0 -44.0 -47.0 -48.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -68.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -85.0 -86.0 -87.0 -90.0 -93.0 -96.0 -93.0 -96.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -128.0 -127.0 -130.0 49 -106.0 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -89.0 -86.0 -81.0 -82.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -58.0 -53.0 -50.0 -47.0 -48.0 -45.0 -42.0 -41.0 -38.0 -39.0 -40.0 -35.0 -28.0 -31.0 -28.0 -27.0 -24.0 -17.0 -16.0 -15.0 -16.0 -11.0 -8.0 -3.0 -4.0 -1.0 2.0 7.0 10.0 14.0 7.0 11.0 9.0 10.0 9.0 4.0 3.0 0.0 -3.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -16.0 -19.0 -20.0 -25.0 -26.0 -31.0 -34.0 -36.0 -39.0 -38.0 -41.0 -42.0 -45.0 -48.0 -49.0 -54.0 -57.0 -58.0 -59.0 -60.0 -65.0 -66.0 -71.0 -74.0 -77.0 -78.0 -81.0 -82.0 -83.0 -84.0 -87.0 -90.0 -93.0 -94.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -109.0 -110.0 -113.0 -116.0 -117.0 -122.0 -125.0 -126.0 -127.0 50 -111.0 -106.0 -105.0 -104.0 -101.0 -102.0 -97.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -56.0 -51.0 -48.0 -47.0 -48.0 -43.0 -42.0 -39.0 -38.0 -39.0 -38.0 -33.0 -28.0 -29.0 -28.0 -27.0 -22.0 -17.0 -16.0 -13.0 -14.0 -9.0 -6.0 -1.0 -2.0 -1.0 4.0 9.0 12.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -1.0 -4.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -22.0 -25.0 -28.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -40.0 -45.0 -48.0 -51.0 -54.0 -55.0 -58.0 -59.0 -62.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -79.0 -80.0 -81.0 -82.0 -85.0 -90.0 -91.0 -92.0 -95.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -110.0 -113.0 -116.0 -119.0 -122.0 -123.0 -124.0 51 -112.0 -111.0 -104.0 -105.0 -104.0 -101.0 -100.0 -97.0 -94.0 -91.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -78.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -59.0 -54.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -39.0 -36.0 -31.0 -26.0 -29.0 -28.0 -25.0 -22.0 -17.0 -14.0 -13.0 -12.0 -7.0 -4.0 -1.0 -2.0 1.0 6.0 11.0 14.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -42.0 -47.0 -50.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -91.0 -94.0 -95.0 -98.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -115.0 -118.0 -121.0 -122.0 -123.0 52 -113.0 -112.0 -109.0 -104.0 -105.0 -104.0 -99.0 -100.0 -95.0 -92.0 -91.0 -90.0 -89.0 -82.0 -81.0 -80.0 -81.0 -76.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -63.0 -61.0 -59.0 -57.0 -52.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -37.0 -34.0 -29.0 -26.0 -29.0 -26.0 -25.0 -20.0 -15.0 -14.0 -11.0 -10.0 -5.0 -4.0 -1.0 0.0 3.0 8.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -9.0 -12.0 -17.0 -20.0 -23.0 -25.0 -29.0 -31.0 -30.0 -35.0 -34.0 -37.0 -36.0 -41.0 -42.0 -49.0 -52.0 -53.0 -56.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -104.0 -105.0 -108.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 53 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -76.0 -75.0 -76.0 -71.0 -68.0 -71.0 -66.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -29.0 -26.0 -23.0 -18.0 -15.0 -12.0 -9.0 -8.0 -7.0 -4.0 1.0 2.0 5.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -7.0 -6.0 -11.0 -14.0 -17.0 -22.0 -23.0 -25.0 -31.0 -31.0 -30.0 -35.0 -34.0 -37.0 -38.0 -43.0 -42.0 -49.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -66.0 -67.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -82.0 -81.0 -82.0 -87.0 -92.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -105.0 -110.0 -113.0 -116.0 -115.0 -118.0 -121.0 54 -117.0 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -69.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -36.0 -33.0 -34.0 -29.0 -26.0 -29.0 -24.0 -23.0 -16.0 -15.0 -12.0 -9.0 -6.0 -7.0 -2.0 1.0 2.0 7.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -8.0 -13.0 -14.0 -19.0 -22.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -39.0 -40.0 -43.0 -42.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -63.0 -66.0 -67.0 -70.0 -69.0 -74.0 -75.0 -76.0 -81.0 -84.0 -81.0 -82.0 -87.0 -90.0 -93.0 -96.0 -97.0 -98.0 -101.0 -102.0 -107.0 -110.0 -111.0 -116.0 -113.0 -118.0 55 -116.0 -117.0 -112.0 -113.0 -112.0 -109.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -68.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -37.0 -34.0 -33.0 -34.0 -29.0 -26.0 -27.0 -24.0 -21.0 -16.0 -15.0 -12.0 -7.0 -6.0 -5.0 -2.0 1.0 4.0 7.0 10.0 13.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -10.0 -15.0 -16.0 -21.0 -24.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -41.0 -42.0 -45.0 -42.0 -51.0 -52.0 -53.0 -58.0 -61.0 -64.0 -61.0 -66.0 -69.0 -70.0 -69.0 -74.0 -75.0 -78.0 -79.0 -84.0 -81.0 -84.0 -87.0 -92.0 -95.0 -96.0 -97.0 -98.0 -103.0 -102.0 -109.0 -110.0 -111.0 -116.0 -113.0 56 -121.0 -116.0 -117.0 -114.0 -113.0 -110.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -93.0 -94.0 -91.0 -90.0 -87.0 -82.0 -83.0 -80.0 -81.0 -76.0 -75.0 -76.0 -73.0 -68.0 -66.0 -63.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -39.0 -36.0 -33.0 -34.0 -31.0 -26.0 -27.0 -22.0 -19.0 -14.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 3.0 4.0 7.0 8.0 11.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 0.0 -3.0 -8.0 -9.0 -10.0 -17.0 -16.0 -21.0 -25.0 -24.0 -25.0 -32.0 -31.0 -30.0 -37.0 -36.0 -41.0 -42.0 -45.0 -44.0 -49.0 -52.0 -55.0 -58.0 -61.0 -64.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -77.0 -80.0 -79.0 -82.0 -83.0 -84.0 -89.0 -92.0 -93.0 -96.0 -97.0 -98.0 -103.0 -104.0 -109.0 -110.0 -111.0 -114.0 57 -124.0 -123.0 -118.0 -117.0 -116.0 -111.0 -112.0 -111.0 -106.0 -103.0 -104.0 -101.0 -98.0 -93.0 -94.0 -93.0 -92.0 -89.0 -82.0 -83.0 -82.0 -81.0 -78.0 -75.0 -74.0 -74.0 -70.0 -68.0 -63.0 -60.0 -63.0 -58.0 -59.0 -52.0 -55.0 -52.0 -49.0 -48.0 -43.0 -40.0 -41.0 -36.0 -33.0 -36.0 -31.0 -26.0 -27.0 -24.0 -21.0 -14.0 -11.0 -14.0 -11.0 -6.0 -3.0 -2.0 1.0 4.0 5.0 8.0 9.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 -2.0 -5.0 -8.0 -11.0 -12.0 -17.0 -17.0 -23.0 -23.0 -26.0 -25.0 -30.0 -29.0 -32.0 -37.0 -38.0 -41.0 -42.0 -47.0 -44.0 -51.0 -54.0 -55.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -79.0 -80.0 -79.0 -82.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -105.0 -104.0 -111.0 -110.0 -111.0 58 -123.0 -126.0 -121.0 -118.0 -117.0 -116.0 -109.0 -112.0 -109.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -89.0 -84.0 -83.0 -82.0 -83.0 -78.0 -75.0 -73.0 -72.0 -71.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -55.0 -54.0 -51.0 -46.0 -41.0 -40.0 -43.0 -36.0 -33.0 -34.0 -29.0 -26.0 -25.0 -24.0 -21.0 -14.0 -11.0 -12.0 -9.0 -4.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 11.0 4.0 3.0 -2.0 -7.0 -10.0 -13.0 -14.0 -19.0 -17.0 -24.0 -23.0 -26.0 -25.0 -30.0 -29.0 -34.0 -39.0 -40.0 -41.0 -44.0 -47.0 -44.0 -53.0 -56.0 -57.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -71.0 -72.0 -79.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -93.0 -98.0 -99.0 -102.0 -105.0 -104.0 -111.0 -110.0 59 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -90.0 -87.0 -84.0 -83.0 -82.0 -83.0 -78.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -52.0 -49.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -32.0 -27.0 -24.0 -23.0 -22.0 -19.0 -14.0 -11.0 -10.0 -7.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 9.0 4.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -17.0 -22.0 -23.0 -26.0 -25.0 -30.0 -31.0 -34.0 -37.0 -40.0 -43.0 -44.0 -47.0 -46.0 -53.0 -56.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -69.0 -72.0 -71.0 -72.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -93.0 -98.0 -101.0 -104.0 -105.0 -104.0 -109.0 60 -129.0 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -88.0 -87.0 -84.0 -83.0 -82.0 -81.0 -77.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -30.0 -27.0 -24.0 -23.0 -20.0 -19.0 -14.0 -11.0 -10.0 -5.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 13.0 10.0 9.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -15.0 -20.0 -17.0 -22.0 -23.0 -26.0 -27.0 -32.0 -31.0 -34.0 -37.0 -42.0 -43.0 -46.0 -49.0 -48.0 -55.0 -58.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -71.0 -74.0 -71.0 -72.0 -79.0 -80.0 -83.0 -86.0 -87.0 -90.0 -91.0 -92.0 -95.0 -100.0 -101.0 -106.0 -105.0 -104.0 61 -132.0 -131.0 -128.0 -123.0 -126.0 -123.0 -120.0 -119.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -95.0 -92.0 -93.0 -90.0 -87.0 -86.0 -85.0 -84.0 -82.0 -79.0 -76.0 -71.0 -70.0 -71.0 -66.0 -67.0 -60.0 -63.0 -62.0 -59.0 -54.0 -53.0 -50.0 -49.0 -48.0 -43.0 -42.0 -41.0 -36.0 -35.0 -32.0 -29.0 -24.0 -23.0 -22.0 -19.0 -16.0 -13.0 -10.0 -7.0 -4.0 -3.0 -2.0 -3.0 4.0 3.0 4.0 7.0 12.0 9.0 8.0 11.0 14.0 8.0 7.0 0.0 -3.0 -6.0 -9.0 -12.0 -13.0 -15.0 -18.0 -17.0 -22.0 -21.0 -26.0 -29.0 -30.0 -33.0 -34.0 -39.0 -40.0 -43.0 -46.0 -47.0 -48.0 -55.0 -56.0 -57.0 -62.0 -61.0 -64.0 -61.0 -66.0 -69.0 -72.0 -71.0 -74.0 -77.0 -80.0 -83.0 -84.0 -87.0 -88.0 -91.0 -94.0 -97.0 -100.0 -99.0 -104.0 -105.0 62 -135.0 -132.0 -131.0 -130.0 -125.0 -124.0 -123.0 -120.0 -117.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -97.0 -92.0 -95.0 -92.0 -87.0 -88.0 -87.0 -83.0 -80.0 -77.0 -76.0 -73.0 -72.0 -71.0 -66.0 -67.0 -62.0 -63.0 -60.0 -59.0 -56.0 -53.0 -52.0 -49.0 -48.0 -45.0 -42.0 -41.0 -36.0 -33.0 -30.0 -29.0 -26.0 -25.0 -20.0 -17.0 -16.0 -11.0 -10.0 -7.0 -6.0 -5.0 -2.0 -5.0 2.0 3.0 4.0 7.0 12.0 7.0 6.0 9.0 14.0 6.0 5.0 0.0 -5.0 -6.0 -9.0 -14.0 -14.0 -15.0 -18.0 -17.0 -22.0 -23.0 -28.0 -29.0 -30.0 -33.0 -36.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -57.0 -56.0 -57.0 -62.0 -61.0 -64.0 -63.0 -66.0 -69.0 -72.0 -71.0 -74.0 -79.0 -82.0 -83.0 -84.0 -87.0 -88.0 -93.0 -96.0 -99.0 -102.0 -99.0 -104.0 63 -136.0 -137.0 -132.0 -133.0 -132.0 -127.0 -124.0 -125.0 -122.0 -119.0 -118.0 -111.0 -114.0 -111.0 -110.0 -105.0 -106.0 -103.0 -100.0 -99.0 -92.0 -97.0 -94.0 -89.0 -90.0 -88.0 -85.0 -82.0 -79.0 -78.0 -73.0 -74.0 -73.0 -68.0 -69.0 -64.0 -65.0 -62.0 -57.0 -54.0 -53.0 -54.0 -49.0 -48.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -27.0 -26.0 -25.0 -22.0 -19.0 -16.0 -13.0 -12.0 -7.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 2.0 5.0 12.0 8.0 6.0 7.0 14.0 4.0 3.0 -2.0 -6.0 -8.0 -9.0 -14.0 -16.0 -15.0 -17.0 -17.0 -21.0 -25.0 -29.0 -31.0 -30.0 -33.0 -36.0 -38.0 -43.0 -46.0 -49.0 -49.0 -50.0 -56.0 -55.0 -57.0 -61.0 -61.0 -63.0 -63.0 -66.0 -69.0 -73.0 -71.0 -76.0 -78.0 -81.0 -82.0 -83.0 -88.0 -88.0 -94.0 -95.0 -98.0 -101.0 -99.0 64 -141.0 -138.0 -137.0 -134.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -113.0 -114.0 -113.0 -112.0 -107.0 -106.0 -105.0 -102.0 -101.0 -94.0 -98.0 -94.0 -89.0 -91.0 -88.0 -85.0 -82.0 -81.0 -80.0 -75.0 -76.0 -73.0 -68.0 -71.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -54.0 -51.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -29.0 -28.0 -25.0 -20.0 -19.0 -18.0 -15.0 -14.0 -9.0 -10.0 -9.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 10.0 6.0 6.0 6.0 14.0 3.0 3.0 -3.0 -5.0 -9.0 -10.0 -14.0 -15.0 -15.0 -17.0 -19.0 -21.0 -26.0 -29.0 -30.0 -30.0 -32.0 -37.0 -38.0 -43.0 -46.0 -49.0 -51.0 -50.0 -56.0 -55.0 -57.0 -59.0 -62.0 -61.0 -63.0 -65.0 -68.0 -71.0 -71.0 -75.0 -76.0 -81.0 -82.0 -85.0 -88.0 -88.0 -94.0 -95.0 -98.0 -99.0 65 -144.0 -141.0 -140.0 -139.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -113.0 -110.0 -107.0 -108.0 -103.0 -104.0 -101.0 -94.0 -99.0 -96.0 -89.0 -89.0 -86.0 -85.0 -84.0 -83.0 -80.0 -75.0 -76.0 -75.0 -68.0 -69.0 -68.0 -65.0 -62.0 -61.0 -56.0 -57.0 -56.0 -51.0 -50.0 -45.0 -42.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -17.0 -16.0 -9.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 8.0 6.0 4.0 4.0 14.0 1.0 3.0 -3.0 -5.0 -10.0 -10.0 -14.0 -15.0 -15.0 -17.0 -21.0 -21.0 -26.0 -29.0 -30.0 -30.0 -34.0 -39.0 -40.0 -45.0 -48.0 -51.0 -51.0 -50.0 -56.0 -55.0 -57.0 -61.0 -64.0 -61.0 -63.0 -67.0 -68.0 -73.0 -71.0 -75.0 -78.0 -81.0 -82.0 -87.0 -90.0 -90.0 -96.0 -95.0 -98.0 66 -147.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -109.0 -108.0 -105.0 -104.0 -103.0 -94.0 -97.0 -97.0 -91.0 -91.0 -88.0 -87.0 -86.0 -83.0 -82.0 -77.0 -76.0 -77.0 -70.0 -69.0 -68.0 -65.0 -64.0 -63.0 -58.0 -59.0 -56.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -37.0 -34.0 -31.0 -26.0 -21.0 -22.0 -21.0 -20.0 -19.0 -18.0 -11.0 -14.0 -13.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 6.0 4.0 4.0 2.0 14.0 1.0 1.0 -5.0 -3.0 -10.0 -10.0 -12.0 -13.0 -16.0 -15.0 -22.0 -23.0 -26.0 -27.0 -28.0 -32.0 -34.0 -39.0 -42.0 -43.0 -46.0 -49.0 -50.0 -50.0 -54.0 -55.0 -58.0 -59.0 -62.0 -61.0 -63.0 -67.0 -68.0 -71.0 -71.0 -77.0 -78.0 -81.0 -84.0 -85.0 -88.0 -90.0 -94.0 -95.0 67 -150.0 -147.0 -146.0 -145.0 -144.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -113.0 -114.0 -109.0 -110.0 -107.0 -104.0 -103.0 -96.0 -97.0 -95.0 -91.0 -91.0 -90.0 -89.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -68.0 -67.0 -64.0 -63.0 -60.0 -57.0 -56.0 -51.0 -48.0 -45.0 -44.0 -41.0 -40.0 -35.0 -32.0 -31.0 -26.0 -21.0 -22.0 -23.0 -22.0 -19.0 -18.0 -13.0 -14.0 -11.0 -8.0 -7.0 -6.0 -3.0 -2.0 1.0 4.0 2.0 4.0 1.0 14.0 3.0 0.0 -4.0 -1.0 -8.0 -9.0 -10.0 -13.0 -16.0 -15.0 -20.0 -23.0 -26.0 -27.0 -30.0 -33.0 -36.0 -39.0 -42.0 -41.0 -44.0 -47.0 -48.0 -49.0 -52.0 -55.0 -56.0 -57.0 -60.0 -63.0 -63.0 -67.0 -70.0 -71.0 -73.0 -75.0 -76.0 -81.0 -84.0 -87.0 -86.0 -89.0 -92.0 68 -153.0 -150.0 -149.0 -148.0 -147.0 -142.0 -141.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -124.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -111.0 -110.0 -107.0 -106.0 -103.0 -96.0 -97.0 -95.0 -93.0 -91.0 -92.0 -89.0 -86.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -70.0 -67.0 -66.0 -65.0 -60.0 -59.0 -54.0 -51.0 -48.0 -47.0 -44.0 -43.0 -38.0 -35.0 -34.0 -29.0 -26.0 -21.0 -24.0 -25.0 -22.0 -21.0 -20.0 -13.0 -14.0 -11.0 -8.0 -8.0 -6.0 -5.0 -2.0 -1.0 2.0 2.0 2.0 3.0 14.0 2.0 1.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -27.0 -30.0 -33.0 -36.0 -37.0 -42.0 -39.0 -42.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -72.0 -73.0 -78.0 -81.0 -84.0 -87.0 -84.0 -89.0 69 -154.0 -155.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -140.0 -137.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -120.0 -119.0 -118.0 -117.0 -112.0 -113.0 -112.0 -109.0 -106.0 -105.0 -98.0 -99.0 -97.0 -95.0 -91.0 -92.0 -91.0 -88.0 -87.0 -86.0 -81.0 -78.0 -75.0 -72.0 -71.0 -72.0 -67.0 -66.0 -65.0 -62.0 -57.0 -56.0 -53.0 -50.0 -45.0 -44.0 -43.0 -40.0 -37.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -24.0 -21.0 -22.0 -15.0 -16.0 -13.0 -8.0 -6.0 -8.0 -7.0 -2.0 -3.0 0.0 0.0 0.0 1.0 14.0 4.0 3.0 -2.0 1.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -20.0 -21.0 -22.0 -27.0 -30.0 -33.0 -34.0 -35.0 -40.0 -37.0 -40.0 -43.0 -46.0 -49.0 -50.0 -53.0 -54.0 -57.0 -56.0 -61.0 -64.0 -65.0 -66.0 -67.0 -72.0 -73.0 -78.0 -79.0 -82.0 -85.0 -84.0 70 -159.0 -156.0 -155.0 -150.0 -153.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -125.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -108.0 -103.0 -98.0 -98.0 -97.0 -97.0 -91.0 -94.0 -89.0 -90.0 -87.0 -86.0 -83.0 -80.0 -77.0 -72.0 -73.0 -72.0 -67.0 -68.0 -63.0 -62.0 -55.0 -56.0 -51.0 -50.0 -47.0 -46.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -21.0 -28.0 -25.0 -26.0 -22.0 -20.0 -15.0 -18.0 -14.0 -10.0 -6.0 -10.0 -9.0 -4.0 -5.0 0.0 -2.0 -2.0 1.0 14.0 6.0 5.0 0.0 1.0 -4.0 -7.0 -10.0 -13.0 -14.0 -17.0 -18.0 -21.0 -24.0 -25.0 -28.0 -31.0 -36.0 -35.0 -40.0 -37.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -66.0 -69.0 -72.0 -75.0 -78.0 -79.0 -82.0 -83.0 71 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -84.0 -81.0 -80.0 -77.0 -72.0 -75.0 -74.0 -67.0 -68.0 -63.0 -60.0 -53.0 -54.0 -53.0 -52.0 -47.0 -44.0 -43.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -30.0 -27.0 -26.0 -22.0 -18.0 -15.0 -18.0 -12.0 -10.0 -6.0 -12.0 -11.0 -4.0 -7.0 0.0 -2.0 0.0 1.0 14.0 8.0 5.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -14.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -29.0 -34.0 -37.0 -38.0 -35.0 -38.0 -43.0 -46.0 -45.0 -48.0 -51.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -64.0 -69.0 -72.0 -75.0 -76.0 -77.0 -80.0 72 -161.0 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -118.0 -119.0 -112.0 -113.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -82.0 -79.0 -80.0 -77.0 -72.0 -75.0 -72.0 -67.0 -66.0 -63.0 -60.0 -53.0 -52.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -29.0 -27.0 -26.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -11.0 -4.0 -7.0 0.0 -2.0 2.0 3.0 14.0 10.0 7.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -27.0 -28.0 -27.0 -32.0 -35.0 -36.0 -35.0 -36.0 -43.0 -44.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -60.0 -63.0 -66.0 -69.0 -72.0 -73.0 -74.0 -77.0 73 -162.0 -161.0 -158.0 -159.0 -156.0 -155.0 -150.0 -151.0 -148.0 -145.0 -142.0 -141.0 -138.0 -137.0 -134.0 -135.0 -130.0 -129.0 -128.0 -123.0 -122.0 -119.0 -118.0 -117.0 -112.0 -113.0 -110.0 -108.0 -105.0 -102.0 -98.0 -100.0 -97.0 -96.0 -91.0 -94.0 -91.0 -88.0 -83.0 -80.0 -79.0 -80.0 -75.0 -72.0 -73.0 -70.0 -67.0 -64.0 -61.0 -58.0 -53.0 -52.0 -51.0 -48.0 -45.0 -42.0 -41.0 -38.0 -35.0 -36.0 -33.0 -30.0 -21.0 -27.0 -27.0 -24.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -9.0 -4.0 -7.0 0.0 -1.0 2.0 5.0 14.0 12.0 7.0 2.0 -1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -15.0 -18.0 -21.0 -22.0 -25.0 -26.0 -27.0 -30.0 -33.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -44.0 -49.0 -52.0 -53.0 -52.0 -55.0 -60.0 -61.0 -66.0 -67.0 -70.0 -71.0 -72.0 74 -165.0 -164.0 -159.0 -158.0 -161.0 -156.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -137.0 -136.0 -133.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -113.0 -111.0 -108.0 -107.0 -102.0 -100.0 -100.0 -97.0 -98.0 -93.0 -94.0 -91.0 -86.0 -83.0 -80.0 -81.0 -78.0 -75.0 -74.0 -73.0 -70.0 -67.0 -64.0 -61.0 -56.0 -53.0 -54.0 -50.0 -47.0 -45.0 -44.0 -43.0 -38.0 -37.0 -36.0 -33.0 -28.0 -21.0 -27.0 -27.0 -26.0 -20.0 -18.0 -17.0 -18.0 -12.0 -12.0 -6.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 2.0 7.0 13.0 14.0 5.0 2.0 -1.0 0.0 -3.0 -6.0 -7.0 -12.0 -15.0 -18.0 -19.0 -22.0 -25.0 -24.0 -27.0 -30.0 -31.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 -57.0 -58.0 -63.0 -64.0 -67.0 -70.0 -69.0 75 -166.0 -167.0 -166.0 -159.0 -158.0 -159.0 -154.0 -153.0 -152.0 -149.0 -148.0 -143.0 -144.0 -139.0 -138.0 -137.0 -136.0 -131.0 -132.0 -127.0 -128.0 -123.0 -126.0 -121.0 -116.0 -117.0 -114.0 -114.0 -111.0 -110.0 -107.0 -102.0 -100.0 -98.0 -97.0 -99.0 -93.0 -92.0 -91.0 -86.0 -84.0 -82.0 -83.0 -79.0 -77.0 -75.0 -72.0 -69.0 -67.0 -64.0 -60.0 -56.0 -54.0 -54.0 -48.0 -45.0 -46.0 -46.0 -45.0 -39.0 -39.0 -36.0 -32.0 -29.0 -21.0 -28.0 -29.0 -26.0 -20.0 -19.0 -19.0 -18.0 -12.0 -14.0 -6.0 -13.0 -13.0 -8.0 -6.0 -4.0 0.0 2.0 5.0 13.0 14.0 3.0 0.0 -1.0 0.0 -3.0 -8.0 -7.0 -14.0 -17.0 -20.0 -21.0 -22.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -52.0 -51.0 -54.0 -59.0 -58.0 -63.0 -64.0 -67.0 -70.0 76 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -126.0 -123.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -110.0 -105.0 -102.0 -100.0 -98.0 -97.0 -97.0 -93.0 -93.0 -90.0 -86.0 -84.0 -83.0 -84.0 -79.0 -78.0 -73.0 -70.0 -67.0 -66.0 -63.0 -60.0 -56.0 -54.0 -53.0 -48.0 -45.0 -46.0 -47.0 -44.0 -39.0 -38.0 -35.0 -30.0 -29.0 -21.0 -28.0 -28.0 -25.0 -20.0 -19.0 -20.0 -19.0 -12.0 -15.0 -6.0 -12.0 -12.0 -9.0 -4.0 -3.0 2.0 3.0 4.0 13.0 14.0 3.0 0.0 -3.0 0.0 -5.0 -10.0 -9.0 -16.0 -19.0 -22.0 -21.0 -24.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -44.0 -43.0 -46.0 -49.0 -52.0 -51.0 -56.0 -61.0 -60.0 -63.0 -64.0 -67.0 77 -172.0 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -113.0 -108.0 -105.0 -104.0 -100.0 -98.0 -97.0 -97.0 -91.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -81.0 -76.0 -73.0 -70.0 -67.0 -64.0 -64.0 -58.0 -56.0 -56.0 -51.0 -48.0 -45.0 -47.0 -47.0 -42.0 -39.0 -38.0 -33.0 -30.0 -29.0 -21.0 -28.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -14.0 -12.0 -7.0 -4.0 -3.0 4.0 1.0 2.0 13.0 14.0 3.0 0.0 -1.0 -2.0 -7.0 -10.0 -9.0 -16.0 -19.0 -20.0 -21.0 -24.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -35.0 -36.0 -41.0 -44.0 -43.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -62.0 -61.0 -64.0 78 -171.0 -172.0 -167.0 -166.0 -167.0 -164.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -108.0 -105.0 -104.0 -100.0 -98.0 -98.0 -95.0 -89.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -79.0 -76.0 -73.0 -70.0 -65.0 -64.0 -62.0 -58.0 -56.0 -54.0 -51.0 -48.0 -45.0 -47.0 -45.0 -42.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -12.0 -10.0 -7.0 -2.0 -1.0 4.0 1.0 2.0 13.0 14.0 5.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -22.0 -23.0 -26.0 -25.0 -26.0 -31.0 -34.0 -33.0 -34.0 -39.0 -42.0 -43.0 -44.0 -49.0 -50.0 -55.0 -56.0 -59.0 -62.0 -61.0 79 -174.0 -173.0 -172.0 -167.0 -166.0 -167.0 -164.0 -161.0 -160.0 -157.0 -156.0 -151.0 -152.0 -149.0 -148.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -130.0 -123.0 -124.0 -125.0 -122.0 -120.0 -116.0 -115.0 -113.0 -112.0 -111.0 -106.0 -105.0 -104.0 -99.0 -96.0 -98.0 -95.0 -89.0 -91.0 -90.0 -86.0 -84.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -65.0 -64.0 -60.0 -56.0 -54.0 -54.0 -51.0 -48.0 -45.0 -45.0 -43.0 -40.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -26.0 -25.0 -20.0 -21.0 -18.0 -19.0 -14.0 -13.0 -6.0 -10.0 -8.0 -5.0 -2.0 -1.0 4.0 1.0 4.0 13.0 14.0 7.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -20.0 -23.0 -26.0 -25.0 -24.0 -29.0 -32.0 -33.0 -32.0 -37.0 -42.0 -43.0 -46.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 80 -177.0 -174.0 -175.0 -174.0 -167.0 -166.0 -167.0 -166.0 -161.0 -160.0 -159.0 -154.0 -153.0 -150.0 -149.0 -150.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -128.0 -123.0 -126.0 -123.0 -123.0 -118.0 -116.0 -117.0 -111.0 -114.0 -109.0 -106.0 -107.0 -104.0 -97.0 -96.0 -96.0 -96.0 -89.0 -91.0 -92.0 -86.0 -85.0 -83.0 -80.0 -77.0 -72.0 -69.0 -69.0 -67.0 -63.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -43.0 -43.0 -40.0 -39.0 -37.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -17.0 -16.0 -13.0 -8.0 -9.0 -8.0 -3.0 -4.0 -1.0 2.0 3.0 3.0 13.0 14.0 5.0 4.0 -1.0 -2.0 -7.0 -8.0 -7.0 -12.0 -15.0 -16.0 -17.0 -18.0 -23.0 -24.0 -23.0 -24.0 -29.0 -30.0 -33.0 -32.0 -37.0 -40.0 -43.0 -46.0 -47.0 -52.0 -53.0 -54.0 -57.0 81 -178.0 -177.0 -172.0 -175.0 -174.0 -167.0 -164.0 -167.0 -164.0 -159.0 -160.0 -157.0 -154.0 -153.0 -150.0 -149.0 -148.0 -145.0 -144.0 -139.0 -138.0 -135.0 -134.0 -133.0 -128.0 -123.0 -126.0 -122.0 -121.0 -118.0 -116.0 -116.0 -111.0 -112.0 -109.0 -106.0 -108.0 -102.0 -97.0 -94.0 -96.0 -96.0 -89.0 -91.0 -90.0 -84.0 -83.0 -81.0 -78.0 -75.0 -70.0 -69.0 -67.0 -65.0 -61.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -41.0 -41.0 -40.0 -39.0 -35.0 -31.0 -28.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -15.0 -14.0 -13.0 -8.0 -7.0 -6.0 -3.0 -4.0 -1.0 2.0 4.0 5.0 13.0 14.0 5.0 2.0 -1.0 0.0 -5.0 -6.0 -5.0 -10.0 -13.0 -14.0 -17.0 -16.0 -21.0 -22.0 -23.0 -24.0 -29.0 -32.0 -33.0 -32.0 -35.0 -40.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 82 -179.0 -178.0 -175.0 -172.0 -175.0 -172.0 -167.0 -164.0 -165.0 -162.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -123.0 -125.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -109.0 -106.0 -107.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -92.0 -89.0 -82.0 -81.0 -81.0 -78.0 -73.0 -70.0 -71.0 -65.0 -64.0 -59.0 -58.0 -57.0 -54.0 -55.0 -53.0 -50.0 -45.0 -41.0 -42.0 -42.0 -38.0 -33.0 -31.0 -30.0 -31.0 -21.0 -28.0 -30.0 -27.0 -24.0 -23.0 -18.0 -17.0 -16.0 -15.0 -8.0 -9.0 -6.0 -5.0 -6.0 -3.0 2.0 2.0 5.0 14.0 12.0 5.0 2.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -11.0 -14.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -30.0 -31.0 -32.0 -37.0 -38.0 -43.0 -44.0 -47.0 -50.0 -49.0 83 -182.0 -179.0 -178.0 -175.0 -172.0 -173.0 -170.0 -167.0 -164.0 -163.0 -162.0 -157.0 -158.0 -155.0 -154.0 -153.0 -148.0 -145.0 -146.0 -143.0 -142.0 -139.0 -138.0 -133.0 -130.0 -131.0 -126.0 -122.0 -123.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -107.0 -104.0 -105.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -90.0 -87.0 -80.0 -79.0 -80.0 -77.0 -74.0 -71.0 -70.0 -63.0 -62.0 -59.0 -58.0 -57.0 -54.0 -53.0 -52.0 -49.0 -46.0 -41.0 -42.0 -41.0 -36.0 -33.0 -33.0 -32.0 -32.0 -21.0 -28.0 -28.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -11.0 -6.0 -7.0 -6.0 -4.0 2.0 4.0 5.0 14.0 10.0 3.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -32.0 -31.0 -34.0 -39.0 -38.0 -45.0 -46.0 -47.0 -50.0 84 -183.0 -182.0 -179.0 -178.0 -175.0 -174.0 -173.0 -172.0 -167.0 -162.0 -165.0 -162.0 -157.0 -156.0 -157.0 -156.0 -153.0 -146.0 -145.0 -146.0 -143.0 -140.0 -141.0 -138.0 -135.0 -130.0 -131.0 -125.0 -120.0 -123.0 -120.0 -119.0 -118.0 -115.0 -116.0 -109.0 -110.0 -105.0 -104.0 -103.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -88.0 -85.0 -78.0 -77.0 -78.0 -77.0 -74.0 -71.0 -68.0 -63.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -50.0 -47.0 -46.0 -41.0 -40.0 -39.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -26.0 -29.0 -29.0 -26.0 -21.0 -21.0 -19.0 -18.0 -13.0 -12.0 -13.0 -8.0 -9.0 -7.0 -4.0 0.0 2.0 5.0 14.0 10.0 1.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -15.0 -16.0 -15.0 -18.0 -19.0 -24.0 -21.0 -26.0 -29.0 -32.0 -33.0 -36.0 -41.0 -40.0 -45.0 -46.0 -47.0 85 -182.0 -183.0 -180.0 -179.0 -178.0 -175.0 -174.0 -173.0 -170.0 -165.0 -162.0 -163.0 -162.0 -157.0 -156.0 -157.0 -154.0 -151.0 -146.0 -145.0 -146.0 -141.0 -140.0 -139.0 -136.0 -135.0 -130.0 -130.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -102.0 -103.0 -100.0 -97.0 -94.0 -97.0 -92.0 -89.0 -88.0 -83.0 -76.0 -77.0 -78.0 -75.0 -72.0 -69.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -50.0 -51.0 -48.0 -47.0 -46.0 -39.0 -38.0 -37.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -26.0 -29.0 -29.0 -24.0 -22.0 -21.0 -21.0 -16.0 -15.0 -14.0 -15.0 -10.0 -10.0 -7.0 -3.0 -1.0 2.0 5.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -4.0 -5.0 -12.0 -13.0 -14.0 -15.0 -18.0 -21.0 -24.0 -21.0 -26.0 -29.0 -32.0 -35.0 -36.0 -41.0 -40.0 -43.0 -46.0 86 -185.0 -182.0 -181.0 -180.0 -179.0 -178.0 -173.0 -174.0 -171.0 -168.0 -165.0 -162.0 -163.0 -160.0 -157.0 -156.0 -155.0 -152.0 -151.0 -146.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -133.0 -129.0 -128.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -114.0 -107.0 -106.0 -101.0 -102.0 -103.0 -98.0 -97.0 -94.0 -95.0 -92.0 -87.0 -86.0 -81.0 -76.0 -77.0 -76.0 -73.0 -70.0 -67.0 -66.0 -63.0 -62.0 -57.0 -56.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -37.0 -36.0 -37.0 -34.0 -33.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -27.0 -26.0 -22.0 -21.0 -21.0 -16.0 -16.0 -16.0 -15.0 -10.0 -10.0 -7.0 -1.0 1.0 1.0 3.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -6.0 -5.0 -12.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -21.0 -26.0 -31.0 -32.0 -37.0 -36.0 -41.0 -40.0 -43.0 87 -182.0 -186.0 -180.0 -183.0 -180.0 -181.0 -176.0 -173.0 -172.0 -169.0 -170.0 -165.0 -162.0 -163.0 -160.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -147.0 -146.0 -143.0 -140.0 -139.0 -136.0 -132.0 -127.0 -130.0 -123.0 -122.0 -123.0 -118.0 -121.0 -118.0 -115.0 -112.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -97.0 -92.0 -93.0 -90.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -68.0 -67.0 -66.0 -63.0 -62.0 -55.0 -54.0 -51.0 -50.0 -51.0 -48.0 -45.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -27.0 -27.0 -27.0 -22.0 -21.0 -21.0 -18.0 -16.0 -18.0 -14.0 -11.0 -9.0 -5.0 -1.0 1.0 1.0 3.0 14.0 10.0 3.0 2.0 1.0 2.0 -5.0 -6.0 -5.0 -10.0 -13.0 -12.0 -17.0 -20.0 -21.0 -22.0 -21.0 -28.0 -29.0 -34.0 -35.0 -36.0 -41.0 -40.0 88 -189.0 -182.0 -187.0 -180.0 -183.0 -178.0 -179.0 -176.0 -173.0 -170.0 -169.0 -168.0 -165.0 -160.0 -163.0 -160.0 -159.0 -156.0 -153.0 -150.0 -149.0 -146.0 -147.0 -144.0 -141.0 -140.0 -137.0 -135.0 -130.0 -127.0 -130.0 -123.0 -122.0 -121.0 -118.0 -121.0 -118.0 -113.0 -110.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -90.0 -92.0 -90.0 -83.0 -82.0 -79.0 -78.0 -75.0 -72.0 -71.0 -70.0 -67.0 -66.0 -63.0 -62.0 -53.0 -52.0 -51.0 -50.0 -51.0 -46.0 -43.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -29.0 -27.0 -27.0 -22.0 -21.0 -22.0 -18.0 -16.0 -18.0 -15.0 -10.0 -7.0 -6.0 -1.0 1.0 3.0 2.0 14.0 10.0 1.0 2.0 1.0 3.0 -4.0 -6.0 -5.0 -9.0 -12.0 -14.0 -18.0 -19.0 -20.0 -22.0 -23.0 -29.0 -31.0 -33.0 -37.0 -36.0 -40.0 89 -188.0 -189.0 -182.0 -187.0 -180.0 -183.0 -176.0 -179.0 -176.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -163.0 -158.0 -157.0 -156.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -141.0 -138.0 -136.0 -133.0 -130.0 -127.0 -128.0 -123.0 -122.0 -121.0 -118.0 -119.0 -116.0 -111.0 -108.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -88.0 -91.0 -88.0 -83.0 -82.0 -79.0 -78.0 -73.0 -70.0 -71.0 -70.0 -67.0 -64.0 -63.0 -60.0 -53.0 -50.0 -51.0 -50.0 -49.0 -44.0 -41.0 -42.0 -37.0 -36.0 -35.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -27.0 -29.0 -27.0 -25.0 -22.0 -21.0 -22.0 -18.0 -15.0 -18.0 -13.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 4.0 14.0 10.0 2.0 2.0 1.0 3.0 -2.0 -5.0 -7.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -23.0 -23.0 -29.0 -30.0 -31.0 -36.0 -35.0 90 -189.0 -188.0 -187.0 -182.0 -189.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -159.0 -154.0 -153.0 -152.0 -147.0 -146.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -119.0 -116.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -86.0 -89.0 -88.0 -85.0 -82.0 -77.0 -78.0 -71.0 -70.0 -71.0 -70.0 -67.0 -62.0 -63.0 -60.0 -53.0 -50.0 -51.0 -48.0 -49.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -33.0 -30.0 -21.0 -27.0 -27.0 -27.0 -25.0 -23.0 -21.0 -22.0 -18.0 -15.0 -16.0 -11.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 6.0 14.0 10.0 4.0 3.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -17.0 -18.0 -23.0 -25.0 -29.0 -30.0 -31.0 -34.0 91 -194.0 -189.0 -190.0 -187.0 -182.0 -187.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -154.0 -151.0 -152.0 -147.0 -144.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -117.0 -114.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -99.0 -96.0 -93.0 -86.0 -87.0 -88.0 -85.0 -82.0 -77.0 -76.0 -71.0 -70.0 -71.0 -68.0 -65.0 -62.0 -61.0 -58.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -31.0 -30.0 -21.0 -27.0 -25.0 -28.0 -25.0 -23.0 -21.0 -22.0 -17.0 -13.0 -14.0 -9.0 -8.0 -5.0 -4.0 1.0 3.0 7.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 -31.0 92 -193.0 -194.0 -187.0 -190.0 -187.0 -182.0 -185.0 -180.0 -183.0 -176.0 -179.0 -174.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -156.0 -151.0 -150.0 -147.0 -146.0 -145.0 -143.0 -138.0 -137.0 -134.0 -133.0 -134.0 -131.0 -130.0 -125.0 -126.0 -121.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -108.0 -105.0 -102.0 -99.0 -94.0 -91.0 -84.0 -87.0 -86.0 -83.0 -80.0 -77.0 -76.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -59.0 -58.0 -53.0 -50.0 -49.0 -46.0 -49.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -21.0 -17.0 -13.0 -12.0 -9.0 -8.0 -3.0 -2.0 3.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -7.0 -8.0 -7.0 -8.0 -13.0 -18.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 93 -196.0 -193.0 -192.0 -187.0 -190.0 -185.0 -182.0 -185.0 -180.0 -181.0 -176.0 -177.0 -174.0 -171.0 -170.0 -167.0 -166.0 -161.0 -160.0 -159.0 -156.0 -157.0 -156.0 -149.0 -148.0 -147.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -133.0 -131.0 -130.0 -127.0 -124.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -108.0 -103.0 -102.0 -97.0 -92.0 -89.0 -84.0 -87.0 -84.0 -81.0 -80.0 -79.0 -78.0 -71.0 -72.0 -71.0 -64.0 -61.0 -62.0 -59.0 -60.0 -53.0 -48.0 -49.0 -46.0 -49.0 -44.0 -43.0 -42.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -19.0 -15.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 5.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 -2.0 -9.0 -8.0 -7.0 -8.0 -15.0 -18.0 -21.0 -20.0 -23.0 -25.0 -29.0 94 -197.0 -196.0 -193.0 -192.0 -187.0 -190.0 -183.0 -182.0 -185.0 -178.0 -181.0 -174.0 -177.0 -172.0 -171.0 -170.0 -165.0 -164.0 -161.0 -158.0 -159.0 -156.0 -157.0 -154.0 -147.0 -148.0 -145.0 -146.0 -142.0 -141.0 -138.0 -137.0 -134.0 -131.0 -133.0 -131.0 -128.0 -127.0 -122.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -106.0 -101.0 -100.0 -95.0 -90.0 -89.0 -84.0 -85.0 -82.0 -79.0 -80.0 -79.0 -78.0 -71.0 -72.0 -69.0 -62.0 -61.0 -62.0 -59.0 -60.0 -51.0 -48.0 -49.0 -46.0 -49.0 -44.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -36.0 -31.0 -28.0 -21.0 -25.0 -25.0 -26.0 -24.0 -24.0 -18.0 -17.0 -16.0 -13.0 -12.0 -9.0 -6.0 -3.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 4.0 0.0 1.0 1.0 -4.0 -7.0 -8.0 -7.0 -10.0 -15.0 -20.0 -21.0 -20.0 -23.0 -25.0 95 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -164.0 -159.0 -158.0 -160.0 -156.0 -155.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -141.0 -138.0 -137.0 -132.0 -131.0 -133.0 -129.0 -126.0 -127.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -110.0 -103.0 -104.0 -99.0 -98.0 -93.0 -90.0 -89.0 -84.0 -83.0 -80.0 -79.0 -80.0 -79.0 -78.0 -71.0 -70.0 -67.0 -62.0 -61.0 -62.0 -57.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -34.0 -31.0 -28.0 -21.0 -25.0 -25.0 -25.0 -24.0 -23.0 -16.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 2.0 1.0 -1.0 1.0 -4.0 -9.0 -8.0 -7.0 -12.0 -17.0 -22.0 -23.0 -20.0 -23.0 96 -201.0 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -162.0 -159.0 -156.0 -161.0 -156.0 -153.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -139.0 -138.0 -137.0 -132.0 -131.0 -134.0 -129.0 -124.0 -125.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -104.0 -99.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -77.0 -76.0 -71.0 -68.0 -65.0 -62.0 -61.0 -62.0 -57.0 -56.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -42.0 -39.0 -40.0 -35.0 -34.0 -35.0 -32.0 -31.0 -28.0 -21.0 -25.0 -25.0 -23.0 -22.0 -21.0 -14.0 -17.0 -16.0 -11.0 -8.0 -7.0 -4.0 1.0 0.0 5.0 4.0 9.0 10.0 14.0 10.0 4.0 3.0 0.0 1.0 -6.0 -7.0 -10.0 -9.0 -12.0 -19.0 -20.0 -23.0 -20.0 97 -200.0 -201.0 -200.0 -197.0 -200.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -170.0 -163.0 -162.0 -159.0 -156.0 -159.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -144.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -132.0 -129.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -109.0 -106.0 -101.0 -102.0 -97.0 -96.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -75.0 -74.0 -69.0 -66.0 -65.0 -62.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -34.0 -35.0 -32.0 -33.0 -28.0 -21.0 -25.0 -24.0 -23.0 -22.0 -19.0 -14.0 -17.0 -14.0 -9.0 -6.0 -5.0 -2.0 1.0 0.0 5.0 4.0 9.0 12.0 14.0 10.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -18.0 -21.0 98 -205.0 -200.0 -201.0 -200.0 -197.0 -198.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -168.0 -163.0 -160.0 -159.0 -156.0 -157.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -142.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -130.0 -127.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -112.0 -111.0 -106.0 -101.0 -102.0 -97.0 -94.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -78.0 -75.0 -72.0 -67.0 -68.0 -67.0 -62.0 -63.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -32.0 -33.0 -28.0 -21.0 -24.0 -22.0 -21.0 -20.0 -19.0 -14.0 -17.0 -12.0 -7.0 -4.0 -4.0 -4.0 0.0 -2.0 3.0 4.0 9.0 14.0 14.0 10.0 6.0 3.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -16.0 -19.0 -18.0 99 -206.0 -205.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -192.0 -185.0 -186.0 -181.0 -182.0 -181.0 -178.0 -179.0 -174.0 -173.0 -172.0 -169.0 -168.0 -163.0 -160.0 -157.0 -156.0 -157.0 -154.0 -153.0 -151.0 -146.0 -145.0 -142.0 -142.0 -138.0 -139.0 -136.0 -135.0 -132.0 -129.0 -128.0 -127.0 -122.0 -123.0 -122.0 -119.0 -116.0 -113.0 -110.0 -109.0 -104.0 -99.0 -102.0 -95.0 -92.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -77.0 -76.0 -73.0 -70.0 -67.0 -68.0 -67.0 -62.0 -61.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -34.0 -31.0 -28.0 -21.0 -24.0 -22.0 -19.0 -20.0 -19.0 -14.0 -15.0 -10.0 -5.0 -2.0 -4.0 -4.0 0.0 -2.0 3.0 6.0 9.0 14.0 14.0 10.0 6.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -15.0 -16.0 -19.0 100 -207.0 -206.0 -203.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -185.0 -184.0 -181.0 -182.0 -181.0 -178.0 -179.0 -172.0 -175.0 -172.0 -169.0 -166.0 -163.0 -158.0 -157.0 -156.0 -157.0 -153.0 -152.0 -151.0 -146.0 -143.0 -142.0 -140.0 -138.0 -139.0 -136.0 -133.0 -132.0 -127.0 -128.0 -127.0 -120.0 -123.0 -120.0 -117.0 -114.0 -111.0 -108.0 -107.0 -102.0 -99.0 -100.0 -93.0 -90.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -75.0 -74.0 -71.0 -70.0 -67.0 -68.0 -65.0 -60.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -44.0 -39.0 -40.0 -37.0 -32.0 -36.0 -36.0 -30.0 -27.0 -21.0 -24.0 -20.0 -19.0 -20.0 -17.0 -12.0 -13.0 -8.0 -3.0 -2.0 -4.0 -5.0 0.0 0.0 3.0 6.0 7.0 14.0 14.0 10.0 4.0 1.0 -2.0 -5.0 -6.0 -7.0 -14.0 -15.0 -16.0 101 -208.0 -209.0 -206.0 -205.0 -198.0 -203.0 -198.0 -197.0 -196.0 -191.0 -192.0 -183.0 -184.0 -181.0 -182.0 -181.0 -178.0 -177.0 -172.0 -173.0 -172.0 -167.0 -166.0 -161.0 -158.0 -157.0 -156.0 -156.0 -151.0 -152.0 -151.0 -144.0 -143.0 -140.0 -140.0 -138.0 -139.0 -134.0 -133.0 -130.0 -127.0 -128.0 -125.0 -120.0 -121.0 -118.0 -115.0 -112.0 -109.0 -106.0 -105.0 -102.0 -97.0 -98.0 -91.0 -90.0 -89.0 -88.0 -89.0 -84.0 -79.0 -78.0 -73.0 -72.0 -71.0 -70.0 -65.0 -66.0 -65.0 -60.0 -63.0 -62.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -42.0 -37.0 -40.0 -37.0 -32.0 -37.0 -35.0 -28.0 -27.0 -21.0 -22.0 -20.0 -19.0 -20.0 -15.0 -10.0 -11.0 -6.0 -3.0 -2.0 -4.0 -5.0 0.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 4.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -13.0 102 -213.0 -208.0 -207.0 -208.0 -207.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -177.0 -170.0 -173.0 -170.0 -167.0 -164.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -152.0 -149.0 -144.0 -141.0 -140.0 -140.0 -138.0 -137.0 -134.0 -131.0 -132.0 -127.0 -126.0 -127.0 -118.0 -119.0 -116.0 -113.0 -110.0 -107.0 -104.0 -105.0 -100.0 -95.0 -96.0 -91.0 -90.0 -89.0 -88.0 -87.0 -82.0 -77.0 -76.0 -71.0 -72.0 -71.0 -68.0 -63.0 -64.0 -65.0 -60.0 -63.0 -60.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -45.0 -40.0 -37.0 -40.0 -37.0 -32.0 -36.0 -33.0 -28.0 -27.0 -20.0 -22.0 -20.0 -19.0 -18.0 -13.0 -8.0 -9.0 -6.0 -3.0 -2.0 -4.0 -3.0 2.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 6.0 1.0 0.0 -3.0 -8.0 -5.0 -10.0 103 -210.0 -213.0 -208.0 -207.0 -208.0 -205.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -175.0 -170.0 -171.0 -170.0 -167.0 -162.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -140.0 -141.0 -138.0 -135.0 -132.0 -131.0 -132.0 -127.0 -126.0 -125.0 -118.0 -117.0 -116.0 -113.0 -112.0 -105.0 -104.0 -103.0 -100.0 -95.0 -94.0 -91.0 -92.0 -89.0 -86.0 -87.0 -84.0 -75.0 -74.0 -71.0 -72.0 -73.0 -68.0 -61.0 -64.0 -65.0 -60.0 -61.0 -58.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -43.0 -40.0 -37.0 -40.0 -37.0 -32.0 -34.0 -31.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -16.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 -2.0 -3.0 4.0 2.0 2.0 2.0 5.0 14.0 14.0 6.0 6.0 -1.0 0.0 -3.0 -8.0 -5.0 104 -215.0 -210.0 -213.0 -210.0 -207.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -179.0 -176.0 -177.0 -170.0 -171.0 -170.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -156.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -141.0 -136.0 -137.0 -132.0 -131.0 -132.0 -129.0 -126.0 -123.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -104.0 -101.0 -98.0 -93.0 -94.0 -91.0 -92.0 -89.0 -84.0 -85.0 -82.0 -75.0 -74.0 -71.0 -72.0 -71.0 -68.0 -61.0 -64.0 -67.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -47.0 -44.0 -45.0 -40.0 -37.0 -38.0 -37.0 -32.0 -32.0 -29.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -14.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 0.0 -1.0 4.0 2.0 2.0 4.0 7.0 14.0 14.0 5.0 4.0 -1.0 0.0 -3.0 -6.0 105 -218.0 -215.0 -210.0 -213.0 -210.0 -205.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -177.0 -176.0 -175.0 -170.0 -171.0 -168.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -139.0 -134.0 -139.0 -132.0 -131.0 -134.0 -129.0 -128.0 -121.0 -116.0 -115.0 -116.0 -109.0 -112.0 -105.0 -104.0 -103.0 -96.0 -93.0 -94.0 -93.0 -92.0 -89.0 -84.0 -85.0 -80.0 -75.0 -74.0 -71.0 -72.0 -71.0 -70.0 -61.0 -64.0 -65.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -45.0 -44.0 -45.0 -40.0 -37.0 -38.0 -36.0 -31.0 -30.0 -27.0 -26.0 -25.0 -18.0 -22.0 -18.0 -15.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 -2.0 2.0 -1.0 4.0 2.0 4.0 6.0 5.0 14.0 12.0 5.0 4.0 -1.0 2.0 -3.0 106 -219.0 -220.0 -215.0 -210.0 -213.0 -212.0 -205.0 -208.0 -205.0 -200.0 -199.0 -198.0 -197.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -175.0 -170.0 -171.0 -170.0 -167.0 -164.0 -159.0 -160.0 -158.0 -157.0 -156.0 -151.0 -152.0 -151.0 -144.0 -141.0 -136.0 -137.0 -134.0 -139.0 -132.0 -131.0 -132.0 -129.0 -126.0 -121.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -104.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -91.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -64.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -47.0 -42.0 -37.0 -37.0 -36.0 -29.0 -30.0 -29.0 -26.0 -23.0 -16.0 -20.0 -16.0 -13.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 0.0 2.0 -1.0 6.0 2.0 6.0 6.0 5.0 14.0 10.0 5.0 4.0 -1.0 2.0 107 -220.0 -219.0 -218.0 -215.0 -210.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -197.0 -198.0 -195.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -173.0 -170.0 -171.0 -168.0 -166.0 -163.0 -159.0 -160.0 -158.0 -157.0 -154.0 -151.0 -152.0 -149.0 -142.0 -139.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -130.0 -127.0 -124.0 -119.0 -114.0 -113.0 -114.0 -109.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -88.0 -89.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -62.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -45.0 -42.0 -37.0 -35.0 -34.0 -29.0 -30.0 -29.0 -24.0 -23.0 -16.0 -19.0 -16.0 -15.0 -12.0 -11.0 -10.0 -11.0 -4.0 1.0 0.0 2.0 1.0 8.0 2.0 6.0 6.0 6.0 14.0 8.0 5.0 4.0 -1.0 108 -223.0 -220.0 -219.0 -218.0 -217.0 -210.0 -209.0 -212.0 -205.0 -206.0 -203.0 -202.0 -197.0 -196.0 -195.0 -194.0 -193.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -176.0 -173.0 -170.0 -171.0 -169.0 -166.0 -163.0 -159.0 -161.0 -160.0 -155.0 -154.0 -153.0 -152.0 -147.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -128.0 -127.0 -122.0 -117.0 -112.0 -113.0 -114.0 -107.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -91.0 -86.0 -87.0 -82.0 -85.0 -80.0 -75.0 -72.0 -71.0 -70.0 -71.0 -70.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -47.0 -48.0 -44.0 -41.0 -39.0 -35.0 -34.0 -29.0 -30.0 -27.0 -22.0 -21.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -9.0 -4.0 1.0 0.0 2.0 0.0 8.0 2.0 6.0 8.0 6.0 14.0 8.0 5.0 4.0 109 -222.0 -223.0 -218.0 -219.0 -218.0 -217.0 -210.0 -209.0 -210.0 -203.0 -206.0 -201.0 -202.0 -197.0 -196.0 -195.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -174.0 -173.0 -170.0 -170.0 -167.0 -166.0 -163.0 -159.0 -161.0 -158.0 -155.0 -154.0 -153.0 -150.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -129.0 -126.0 -125.0 -120.0 -115.0 -112.0 -113.0 -112.0 -105.0 -104.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -89.0 -86.0 -87.0 -82.0 -83.0 -78.0 -75.0 -72.0 -71.0 -70.0 -71.0 -68.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -49.0 -47.0 -44.0 -39.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -22.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -7.0 -4.0 1.0 2.0 2.0 2.0 8.0 2.0 8.0 8.0 6.0 14.0 8.0 5.0 110 -227.0 -222.0 -223.0 -218.0 -219.0 -216.0 -215.0 -210.0 -209.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -191.0 -186.0 -187.0 -184.0 -181.0 -180.0 -177.0 -174.0 -171.0 -169.0 -168.0 -167.0 -166.0 -163.0 -159.0 -159.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -127.0 -124.0 -123.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -102.0 -101.0 -96.0 -91.0 -92.0 -89.0 -86.0 -87.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -49.0 -47.0 -42.0 -37.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -20.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 4.0 4.0 2.0 8.0 4.0 8.0 8.0 4.0 14.0 8.0 111 -228.0 -229.0 -222.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -203.0 -206.0 -201.0 -202.0 -199.0 -196.0 -195.0 -192.0 -191.0 -186.0 -187.0 -186.0 -183.0 -178.0 -179.0 -174.0 -173.0 -171.0 -170.0 -167.0 -164.0 -165.0 -161.0 -161.0 -160.0 -157.0 -154.0 -149.0 -146.0 -145.0 -144.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -129.0 -124.0 -121.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -100.0 -99.0 -96.0 -89.0 -90.0 -89.0 -86.0 -87.0 -80.0 -79.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -48.0 -45.0 -40.0 -35.0 -39.0 -39.0 -32.0 -27.0 -26.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -17.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 6.0 4.0 2.0 8.0 4.0 8.0 8.0 6.0 14.0 112 -233.0 -228.0 -227.0 -224.0 -227.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -197.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -170.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -157.0 -154.0 -151.0 -148.0 -145.0 -146.0 -139.0 -136.0 -135.0 -134.0 -133.0 -128.0 -127.0 -122.0 -121.0 -118.0 -113.0 -112.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -97.0 -94.0 -89.0 -90.0 -89.0 -86.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -46.0 -43.0 -40.0 -35.0 -40.0 -37.0 -32.0 -27.0 -24.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -15.0 -10.0 -11.0 -8.0 -5.0 -2.0 3.0 6.0 4.0 4.0 8.0 4.0 6.0 8.0 8.0 113 -234.0 -233.0 -228.0 -227.0 -224.0 -225.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -195.0 -192.0 -189.0 -188.0 -187.0 -182.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -168.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -133.0 -134.0 -133.0 -128.0 -125.0 -122.0 -121.0 -118.0 -113.0 -110.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -95.0 -92.0 -89.0 -90.0 -89.0 -86.0 -83.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -66.0 -61.0 -58.0 -55.0 -56.0 -55.0 -52.0 -52.0 -47.0 -44.0 -43.0 -40.0 -35.0 -38.0 -35.0 -30.0 -25.0 -22.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -13.0 -10.0 -11.0 -8.0 -3.0 0.0 3.0 6.0 4.0 4.0 8.0 6.0 6.0 8.0 114 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -199.0 -194.0 -197.0 -192.0 -189.0 -190.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -161.0 -158.0 -155.0 -152.0 -151.0 -150.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -131.0 -128.0 -125.0 -120.0 -119.0 -116.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -103.0 -98.0 -93.0 -92.0 -89.0 -90.0 -89.0 -84.0 -83.0 -80.0 -81.0 -78.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -54.0 -52.0 -50.0 -45.0 -42.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -23.0 -22.0 -25.0 -18.0 -19.0 -14.0 -17.0 -14.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 8.0 4.0 4.0 8.0 8.0 8.0 115 -238.0 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -194.0 -195.0 -192.0 -189.0 -188.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -159.0 -156.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -129.0 -128.0 -123.0 -120.0 -119.0 -114.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -101.0 -96.0 -93.0 -92.0 -89.0 -90.0 -87.0 -84.0 -83.0 -80.0 -81.0 -76.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -56.0 -52.0 -51.0 -48.0 -43.0 -42.0 -43.0 -40.0 -33.0 -34.0 -31.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 2.0 5.0 8.0 4.0 6.0 8.0 8.0 116 -241.0 -240.0 -235.0 -234.0 -235.0 -230.0 -229.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -210.0 -205.0 -206.0 -201.0 -200.0 -199.0 -194.0 -195.0 -194.0 -191.0 -190.0 -187.0 -184.0 -179.0 -177.0 -180.0 -175.0 -174.0 -171.0 -170.0 -171.0 -166.0 -165.0 -160.0 -159.0 -158.0 -155.0 -154.0 -151.0 -150.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -126.0 -125.0 -122.0 -119.0 -116.0 -111.0 -112.0 -109.0 -110.0 -103.0 -104.0 -101.0 -98.0 -95.0 -94.0 -89.0 -90.0 -87.0 -84.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -55.0 -50.0 -49.0 -46.0 -43.0 -42.0 -41.0 -38.0 -31.0 -32.0 -29.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -11.0 -6.0 -5.0 -4.0 1.0 2.0 5.0 8.0 4.0 8.0 8.0 117 -242.0 -243.0 -238.0 -235.0 -236.0 -233.0 -228.0 -231.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -212.0 -205.0 -208.0 -203.0 -200.0 -201.0 -194.0 -193.0 -192.0 -191.0 -190.0 -188.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -169.0 -168.0 -163.0 -158.0 -159.0 -160.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -124.0 -123.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -108.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -87.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -66.0 -63.0 -57.0 -55.0 -55.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -38.0 -31.0 -30.0 -31.0 -30.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -12.0 -11.0 -4.0 -5.0 -4.0 3.0 0.0 5.0 10.0 6.0 10.0 118 -243.0 -242.0 -241.0 -238.0 -235.0 -236.0 -231.0 -228.0 -229.0 -224.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -201.0 -194.0 -191.0 -192.0 -189.0 -189.0 -186.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -167.0 -166.0 -163.0 -158.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -143.0 -142.0 -139.0 -136.0 -131.0 -130.0 -129.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -106.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -64.0 -62.0 -57.0 -54.0 -53.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -36.0 -31.0 -30.0 -31.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -5.0 -2.0 3.0 0.0 5.0 10.0 8.0 119 -246.0 -243.0 -242.0 -241.0 -238.0 -235.0 -234.0 -231.0 -228.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -215.0 -212.0 -209.0 -210.0 -205.0 -206.0 -203.0 -200.0 -199.0 -194.0 -191.0 -190.0 -188.0 -187.0 -186.0 -185.0 -181.0 -177.0 -178.0 -177.0 -172.0 -171.0 -170.0 -167.0 -164.0 -163.0 -158.0 -159.0 -156.0 -153.0 -152.0 -147.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -128.0 -127.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -112.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -95.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -79.0 -80.0 -77.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -63.0 -60.0 -57.0 -54.0 -51.0 -48.0 -49.0 -46.0 -43.0 -40.0 -37.0 -34.0 -31.0 -30.0 -29.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -3.0 -2.0 3.0 2.0 7.0 12.0 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-5.html"},{"title":"混合ガウス分布のEMアルゴリズム","text":"クラスタリング で省略した、混合ガウス分布のEMアルゴリズムの計算過程を記述します。 EMアルゴリズム 観測データ \\(\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) に対する対数尤度関数は、 \\((9.7)\\) から以下のように書けます。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ E step $$\\begin{aligned} p(z_{k}=1|\\mathbf{x}) &\\equiv \\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{p(\\mathbf{x})}\\qquad (\\because\\text{Bayes' theorem})\\\\ &\\propto p(z_{k}=1)p(\\mathbf{x}|z_{k}=1) \\\\ &=\\pi_k\\mathcal{N}(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ なので、総和が \\(1\\) になるように正規化を行えば 負担率 が以下のように求まります。 $$\\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) =\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13)$$ ※ なお、この時分母である \\(\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})\\) が \\(p(\\mathbf{x})\\) であることは有用です。 （ 生物データマイニング論 第1回 では、これを用いて可視化していました。） Maximization step ※ 対数尤度関数 \\((9.14)\\) を \\(\\ln L\\) と記述します。 \\(\\boldsymbol{\\mu}_k\\) 対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\mu}_k\\) で微分します。この時 正規分布は \\(e&#94;{\\text{hoge}}\\) という形をしており、微分しても形が変わらないので、 $$\\begin{aligned} \\frac{\\partial\\ln L}{\\partial\\boldsymbol{\\mu}_k} &= \\sum_{i=n}&#94;N \\frac{\\pi_k\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= \\boldsymbol{\\Sigma}_k&#94;{-1}\\sum_{n=1}&#94;N \\gamma_{nk}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= 0\\\\ \\therefore\\boldsymbol{\\mu}_k&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.17)\\\\ \\end{aligned}$$ と最適解が求まりました。 \\(\\pi_k\\) パラメータ \\(\\pi_k\\) については、 \\(\\sum_{k=1}&#94;K \\pi_k = 1\\) という制約に注意する必要があります。ですが、 隠れマルコフモデルの最尤推定 で行なった能登同様に、ラグランジュの未定乗数 \\(\\lambda\\) を導入すればこの問題は解けます。 $$L_{\\lambda} = \\log L + \\lambda\\left(\\sum_{c=1}&#94;K \\pi_c - 1\\right)$$ の導関数が \\(0\\) となる条件を求める事になるので、 $$\\begin{aligned} \\frac{\\partial L_{\\lambda}}{\\partial\\pi_k} &= \\sum_{n=1}&#94;N \\frac{\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_k \\pi_k \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)} + \\lambda\\\\ &= \\sum_{n=1}&#94;N \\frac{\\gamma_{nk}}{\\pi_k} + \\lambda = 0 &\\therefore \\pi_k = -\\frac{1}{\\lambda}\\sum_{n=1}&#94;N \\gamma_{ic}\\\\ \\frac{\\partial L_{\\lambda}}{\\partial\\lambda} &= \\sum_{k=1}&#94;K \\pi_k - 1\\\\ &= \\left(-\\frac{1}{\\lambda}\\sum_{k=1}&#94;K\\sum_{n=1}&#94;N \\gamma_{nk}\\right) - 1 = 0 &\\therefore \\lambda = -n \\end{aligned}$$ より、 $$\\pi_k&#94;{\\star} = \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} \\qquad(9.22)$$ と最適解が求まりました。 \\(\\boldsymbol{\\Sigma}_k\\) \\(\\boldsymbol{\\mu}_k\\) と同様に、対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\Sigma}_k\\) で微分します。すると、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\log L = \\sum_{n=1}&#94;N\\frac{\\pi_k\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}$$ となります。ここで、 \\(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\) を計算すると、 $$\\begin{aligned} &\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\biggr)\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\left(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\right)\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(-\\frac{1}{2}\\biggr)|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\quad (\\ast1)\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\frac{1}{2}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\quad (\\ast2)\\\\ =&-\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)+\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{1}{2}\\left\\{\\boldsymbol{\\Sigma}_k&#94;{-1}-\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\right\\}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ したがって、 $$ \\boldsymbol{\\Sigma}_k&#94;{\\star}= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.19) $$ と最適解が求まりました。 ※ \\(\\ast1,\\ast2\\) の式変形は以下でより詳細に説明します。 が、その前にいくつか基本事項の定義を振り返ります。 行列式 $$\\det A=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)\\prod_{i=1}&#94;na_{i\\sigma(i)}=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)a_{1\\sigma(1)}a_{2\\sigma(2)}\\cdots a_{n\\sigma(n)}$$ \\(\\sigma\\) は \\(1\\) から \\(n\\) の置換（順列）を表す。 \\(\\mathrm{sgn}(\\sigma)\\) は置換の符号を表す。なお、\b置換の符号は 互\b換の数 に注目しており、奇置換（互換の数が奇数個）なら \\(-1\\) 、偶置換なら \\(+1\\) \b\b 余韻子 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\(i\\) 行と \\(i\\) 列を \\(1\\) つずつ取り去って作られる小行列を \\(M_{ij}\\) とする。つまり、 $$ M_{ij} = \\small \\left[ \\begin{array}{ccc} a_{11} & \\cdots &a_{1\\hspace{1mm}j-1} & a_{1\\hspace{1mm}j+1} & \\cdots & a_{1n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{i-1 \\hspace{1mm} 1} & \\cdots &a_{i-1\\hspace{1mm}j-1} & a_{i-1\\hspace{1mm}j+1} & \\cdots & a_{i-1 \\hspace{1mm}n} \\\\ a_{i+1 \\hspace{1mm} 1} & \\cdots &a_{i+1\\hspace{1mm}j-1} & a_{i+1\\hspace{1mm}j+1} & \\cdots & a_{i+1 \\hspace{1mm}n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{n1} &\\cdots &a_{n\\hspace{1mm}j-1} & a_{n\\hspace{1mm}j+1} &\\cdots &a_{nn} \\end{array} \\right] $$ です。ここで、 \\(\\Delta_{ij}=(-1)&#94;{i+j}|M_{ij}|\\) とすると、以下の 余因子展開 ができます。 \\(A\\) の行列式は \\(j\\) 列に関して、以下のように展開されます。 $$\\det A=\\Delta_{1j}a_{1j}+\\Delta_{2j}a_{2j}+\\cdots+\\Delta_{nj}a_{nj}$$ \\(A\\) の行列式は \\(i\\) 行に関して、以下のように展開されます。 $$\\det A=\\Delta_{i1}a_{i1}+\\Delta_{i2}a_{i2}+\\cdots+\\Delta_{in}a_{in}$$ \b 余韻子行列 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\((i, j)\\) 余因子を \\((j, i)\\) 成分に持つ行列 $$\\tilde{A} := \\begin{pmatrix}&\\Delta_{11}&\\Delta_{21}&\\cdots&\\Delta_{n1}\\\\&\\Delta_{21}&\\Delta_{22}&\\ldots&\\Delta_{n2}\\\\&\\vdots&\\vdots&\\ddots&\\vdots\\\\&\\Delta_{n1}&\\Delta_{n2}&\\cdots&\\Delta_{nn}\\end{pmatrix}$$ を 余韻子行列 と呼びます。ここで、余韻子展開を考えれば、余韻子行列に関して、 $$\\tilde{A}A=A\\tilde{A}=\\det(A)I_n$$ が成り立つことがわかります。 \\(\\ast1\\) の変形 以上を踏まえると、 \\(\\frac{\\partial\\det(A)}{\\partial a_{ij}} = \\Delta_{ij}\\) なので、 $$\\frac{\\partial|\\Sigma|}{\\partial\\Sigma} =\\tilde\\Sigma = |\\Sigma|\\Sigma&#94;{-1}$$ が成り立ち、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}} =-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-\\frac{3}{2}}\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\boldsymbol{\\Sigma_k}=-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma_k}&#94;{-1}$$ となることがわかります。 トレースと固有値の関係性 【命題】 トレースには、 \\(Tr(A) = \\sum_{k=1}&#94;{n}\\lambda_{k}\\) という関係がある。 トレース： \\(n\\times n\\) の正方行列 \\(A\\) に対して、\b対角成分の和 \\(\\sum_{k=1}&#94;{n}a_{kk}\\) を \\(A\\) のトレースと呼び、 \\(\\mathrm{Tr}(A),\\mathrm{tr}A\\) \b と表す。 【証明】 まず、固有方程式は、 $$\\phi(t) = |A-tI| = \\left|\\begin{array}{cccc} a_{11}-t & a_{12} & \\ldots & a_{1n} \\\\ a_{21} & a_{22}-t & \\ldots & a_{2n} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_{n1} & a_{n2} & \\ldots & a_{nn}-t \\end{array} \\right|$$ である。ここで、 \\(t\\) の係数に着目する。 \\(t&#94;n\\) の係数 これは、対角成分を全て掛け合わせた次の多項式 $$(a_{11}-t)(a_{22}-t)\\ldots(a_{nn}-t)$$ における \\(t&#94;n\\) の係数と等しくなる。よって、係数は「 \\((-1)&#94;n\\) 」 \\(t&#94;{n-1}\\) の係数 これも\b、先ほどの多項式の \\(t&#94;{n-1}\\) の係数と等しくなる。（ \\(\\because\\) 余韻子展開を考える。 \\(\\sigma\\) が全単射のため、１行（列）対角成分ではないものがあると、\b少なくともあと１つは体格成分でないものがあることがわかる。） 定数項 これは、\b余韻子展開を考えれば \\(|A|\\) そのもの。 よって、係数は「 \\((-1)&#94;{n-1}(a_{11}+a_{22}+\\ldots+a_{nn})\\) 」であり、これは対角和を用いて「 $(-1)&#94;{n-1}\\mathrm{Tr}(A) $ 」とも書ける。 一方先ほどの固有方程式は固有値を解に持つ。 つまり、 \\(A\\) の固有値を \\(\\lambda_1\\) 〜 \\(\\lambda_n\\) として、 $$\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)$$ とかける。（ \\((-1)&#94;n\\) によって、 \\(t&#94;n\\) の係数を合わせている。） この式を展開すると、 \\(t&#94;{n-1}\\) の係数が「 \\((-1)&#94;{n-1}(\\lambda_1+\\lambda_2+\\ldots+\\lambda_n)\\) 」であることから $$\\mathrm{Tr}(A) = \\lambda_1+\\lambda_2+\\ldots+\\lambda_n$$ ※ちなみに、 \\(\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)\\) の定数項を考えることで、 $$|A| = \\lambda_1\\lambda_2\\ldots\\lambda_n$$ であることもわかる。 トレースの循環性 \\(A\\) を \\(m \\times n\\) 、 \\(B\\) を \\(n \\times m\\) の行列とすると、 \\(AB\\) は \\(m \\times m\\) の行列であり、 $$ \\begin{aligned} \\mathrm{Tr}[AB]&= \\sum_{i=1}&#94;{m} (AB)_{ii} \\\\&= \\sum_{i=1}&#94;{m}\\sum_{j=1}&#94;{n} A_{ij}B_{ji} \\\\&= \\sum_{j=1}&#94;{n} \\sum_{i=1}&#94;{m} B_{ji} A_{ij} \\\\&= \\sum_{j=1}&#94;{n} (BA)_{jj} \\\\&= \\mathrm{Tr}[BA] \\end{aligned} $$ となる。これを応用すれば、以下の 循環性 が証明できる。 \\(A,B,C\\) をそれぞれ \\(m\\times n,n \\times l,l \\times m\\) の行列とするとき、 $$\\begin{aligned} \\mathrm{Tr}[ABC] =& \\mathrm{Tr}[BCA] \\\\=& \\mathrm{Tr}[CAB] \\end{aligned} $$ が成り立つ。（ \\(\\because\\) ２つの\b行列積をセットで考えれば明らか） 逆行列の微分 正則行列 \\(A\\) に対して、 \\(A&#94;{-1}A=I\\) が成立するので、\bこの等式の両辺を \\(A\\) で微分して、 $$\\begin{aligned} \\biggr(\\frac{\\partial }{\\partial A}A&#94;{-1}\\biggl)A + A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl) = 0\\\\ \\biggr(\\frac{\\partial A&#94;{-1}}{\\partial A}\\biggl) = -A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl)A&#94;{-1} \\end{aligned}$$ シングルエントリ行列 \\((i,j)\\) 成分のみが \\(1\\) で、残りが全て \\(0\\) の行列 \\(\\mathbf{J}&#94;{ij}\\) を シングルエントリ行列 と呼ぶ。なお、\b以下の式が成り立つ。 $$\\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{ij}\\bigl)=\\mathbf{A}_{ji}$$ \b \\(2 \\times 2\\) の行列でこれを示す。 $$\\begin{aligned} \\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{12}\\bigl)&=\\mathrm{Tr}\\biggr(\\begin{pmatrix}a_{11}&a_{12}\\\\a_{21}&a_{22}\\end{pmatrix}\\begin{pmatrix}0&1\\\\0&0\\end{pmatrix}\\biggl)\\\\ &=\\mathrm{Tr}\\begin{pmatrix}0&a_{11}\\\\0&a_{21}\\end{pmatrix}\\\\ &=a_{21}\\\\ &=\\mathbf{A}_{21} \\end{aligned}$$ \\(\\ast2\\) の変形 以上を踏まえれば、 $$\\begin{aligned} \\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu}) &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr((\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\biggl)\\\\ &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\frac{\\partial\\boldsymbol{\\Sigma}}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\biggl)\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ji}\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ij}\\\\ \\end{aligned}$$ よって、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})=-\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html"},{"title":"クラスタリング","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 講義の方針 データ解析アルゴリズムは、生物学の研究に不可欠 R や python のパッケージとして、すぐダウンロードして使うことができる。 しかし、原理を知らずに使うと、アルゴリズムの出す結果を盲信することになり危険。 正しい理解：結果を疑えるようになること。 階層的クラスタリング クラスタリング データ点を クラスタ（互いに類似したグループ） に分割する。 距離尺度：ユークリッド距離、コサイン距離など。 階層的クラスタリング 最初は各点がクラスタとなる。 二つのクラスタを選んで合併していく。 Single Link ：二つのクラスタをまたぐ最近点の距離 chaining により、ゆるいクラスタができる （非推奨） Complete Link ：二つのクラスタをまたぐ最遠点の距離 最も固いクラスタができるが、細かく分け過ぎる傾向がある。 Average Link ：二つのクラスタをまたぐ点対の平均距離 最もバランスがとれており、通常はこれを用いる。 最後は一つのクラスタになる。 デンドログラム ：合併の過程を樹形図の形で表したもの。 K-Means 分割的クラスタリング の一手法。$K$ クラスにデータ点を分割する。 以下を繰り返す。 各データ点 $\\mathbf{x}$ を最も近い中心点 $\\mu_k$ に割り当てて、クラスタ $c_1,\\ldots,c_K$ を作成する。 割当を元に中心点を計算しなおす。 $$\\mu_k = \\sum_{j\\in C_i} \\mathbf{x}_j$$ 実装 In [1]: import numpy as np import matplotlib.pyplot as plt Data. In [2]: np . random . seed ( 0 ) In [3]: N = 30 ; K = 5 vmin = 0 ; vmax = 1 In [4]: # Training Data. data = np . random . uniform ( vmin , vmax , ( N , 2 )) x , y = data . T In [5]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [6]: # Background Color Xs , Ys = np . meshgrid ( np . linspace ( vmin , vmax , 100 ), np . linspace ( vmin , vmax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.KMeans.KMeans ） を使って学習させます。 In [7]: from kerasy.ML.KMeans import KMeans In [8]: model = KMeans ( K = K , random_state = 0 ) In [9]: model . fit ( data ) Visualization. In [10]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [11]: # For Visualization. plt_model = KMeans ( K = K ) In [12]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( idx , mu ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Plot Representative points(µk) of each class. mux , muy = mu . T ax . scatter ( mux , muy , marker = 'x' , c = \"red\" , s = 200 ) # Background. plt_model . mu = mu Z , _ = plt_model . predict ( XYs ) Zs = Z . reshape ( Xs . shape ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( vmin , vmax ) ax . set_ylim ( vmin , vmax ) ax . set_title ( f \"Iteration. {i:>02} \" ) plt . show () 混合ガウス分布 混合ガウス分布は、次のように混合係数 $\\pi_k$ でガウス分布を線形重ね合わせした形でかける。 $$p(\\mathbf{x}) = \\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\qquad (9.7)$$ ここで、 二値ベクトル（1-of-K符号化法） $\\mathbf{z}$ の周辺分布は、$0\\leq\\pi_k\\leq1$ と $\\sum_{k=1}&#94;K\\pi_k = 1 $ を満たす $\\pi_k$ を用いて、 $$p\\left(\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\pi_k&#94;{z_k}\\qquad (9.9)$$ と書ける。また、$\\mathbf{z}$ が与えられた時の $\\mathbf{x}$ の事後分布は当然ながら次のガウス分布である。 $$p\\left(\\mathbf{x}|\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)&#94;{z_k}\\qquad(9.11)$$ EMアルゴリズム 観測データ $\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}$ に対する対数尤度関数は、$(9.7)$ から以下のように書ける。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ Expectation step M stepで必要となる $\\gamma(z_{nk})$ を求める。 この値は、$\\mathbf{x}$ が与えられた下での $\\mathbf{z}$ の条件付き確率であり、混合要素 $k$ が $\\mathbf{x}$ の観測を 「説明する」 度合いを表す 負担率(responsibility) として解釈することもできる。 $$ \\begin{aligned} \\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) &=\\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{\\sum_{j=1}&#94;{K}p(z_{j}=1)p(\\mathbf{x}|z_{j}=1)}\\\\ &=\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13) \\end{aligned} $$ Maximization step M stepでは、尤度関数を最大化するように各パラメータの値を更新する。 ※ 導出過程は 混合ガウス分布のEMアルゴリズム に載せています。 $$ \\begin{aligned} \\boldsymbol{\\mu}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.17)\\\\ \\boldsymbol{\\Sigma}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.19)\\\\ \\pi_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} & (9.22) \\end{aligned} $$ 実装 Data. In [13]: np . random . seed ( 0 ) In [14]: N = 150 ; K = 3 In [15]: # Train Data. data = np . concatenate ([ np . random . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 0 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [16]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [17]: # Background Color xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.MixedDistribution.MixedGaussian ） を使って学習させます。 In [18]: from kerasy.ML.MixedDistribution import MixedGaussian In [19]: model = MixedGaussian ( K = K , random_state = 1234 ) In [20]: model . fit ( data , span = 20 ) Visualization. In [21]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [22]: # For Visualization. plt_model = MixedGaussian ( K = K ) plt_model . N , plt_model . M = data . shape In [23]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( epoch , idx , mu , S , pi ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Background. plt_model . mu = mu plt_model . S = S plt_model . pi = pi Z = plt_model . predict ( XYs ) Zs = np . sum ( Z , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( xmin , xmax ) ax . set_ylim ( ymin , ymax ) ax . set_title ( f \" {epoch:>02} epochs.\" ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html"},{"title":"イントロダクション","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 講義予定 前半（山崎担当） 画像の操作 画像の特徴抽出・内容理解・構造化 機械学習一般 後半（相澤担当） 画像を撮る：カメラの内部処理・センサ・レンズ・標本化 画像を表現する。色の知覚・表現 画像の基礎的な処理。周波数変換、線形・非線形フィルタリング # 日付 担当 内容 1 9/30(月) 山崎 画像・映像を中心とした現在の技術動向の紹介、低次・領域・局所画像特徴 2 10/7(月) 山崎 特徴選択、特徴表現 3 10/21(月) 山崎 機械学習概論、教師なし学習、クラスタリング 4 10/28(月) 山崎 機械学習 (NN, SVM, RF) 5 11/7(木) 山崎 深層学習 (Deep Neural Networks) 6 11/11(月) 山崎 動画像処理 (ブロックマッチング、背景差分、オプティカルフロー) 7 11/13(水) 山崎 3次元空間情報の取得と処理 8 11/18(月) 相澤 9 11/25(月) 相澤 10 12/9(月) 相澤 11 12/16(月) 相澤 12 12/23(月) 相澤 13 1/@@ テスト パターン認識一般 現在は、90%位が 学習ベース(data-driven) 。残りが解析的手法。最近はこのhybridも。 全体的な流れ 学習(training) 検証(validation)←パラメータ最適化 推論(test, inference) なぜ今 学習ベース なのか？ データの大規模化：インターネット上から大量に収集可。 計算機の進化：ムーアの法則による高速化。さらにはクラウド 労働力のクラウド化 画像特徴 低次特徴量 色ヒストグラム（RGB,HSV,L*a*b*）：単純計算すると \\(256&#94;3\\) 個binができるので、注意。 色共起ヒストグラム（Correlogram）：隣接ピクセルの色を踏まえたヒストグラム 円、コーナー直線の数・大きさ・長さ 物体の円度、曲率等 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html"},{"title":"matplotlibチートシート","text":"In [1]: import numpy as np import matplotlib.pyplot as plt $N$ 枚の画像を plot Vsize , Hsize = () # 画像の横の長さと縦の長さ。 n_fig = \"画像の枚数\" n_col = \"横に並ぶ数\" n_row = n_fig // n_col + 1 if n_fig % n_col != 0 else n_fig // n_col # 行数を計算。 fig = plt . figure ( figsize = ( Vsize * n_col , Hsize * n_row )) for i , hoge in enumerate ( HOGEs ): ax = fig . add_subplot ( row , col , i + 1 ) \"\"\" 描きたいオブジェクトをプロット \"\"\" plt . tight_layout () plt . show () gifの画像の作成 上のようにやって全ての画像をまとめた一枚の画像を出力しても良いが、 n_fig = \"画像の枚数\" digit = len ( str ( N )) for i , hoge in enumerate ( HOGEs ): ax = fig . add_subplot ( row , col , i + 1 ) plt . figure ( figsize = \"サイズ\" ) \"\"\" 描きたいオブジェクトをプロット \"\"\" plt . savefig ( f \"img{i:>0{digit}}.png\" ) として連番の画像を作成し、それを以下のプログラムでgif画像にした方が見やすい場合もある from PIL import Image N = 30 digit = len ( str ( N )) images = [] for i in range ( N ): img = Image . open ( f \"{i:>0{digit}}.png\" ) images . append ( img ) images [ 0 ] . save ( 'out.gif' , save_all = True , append_images = images [ 1 :], loop = 0 , duration = 300 ) # loop=0: 無限ループ # duration: 一枚あたりの表示時間[ms] cmaps In [2]: cmaps = [ 'Accent' , 'Blues' , 'BrBG' , 'BuGn' , 'BuPu' , 'CMRmap' , 'Dark2' , 'GnBu' , 'Greens' , 'Greys' , 'OrRd' , 'Oranges' , 'PRGn' , 'Paired' , 'Pastel1' , 'Pastel2' , 'PiYG' , 'PuBu' , 'PuBuGn' , 'PuOr' , 'PuRd' , 'Purples' , 'RdBu' , 'RdGy' , 'RdPu' , 'RdYlBu' , 'RdYlGn' , 'Reds' , 'Set1' , 'Set2' , 'Set3' , 'Spectral' , 'Wistia' , 'YlGn' , 'YlGnBu' , 'YlOrBr' , 'YlOrRd' , 'afmhot' , 'autumn' , 'binary' , 'bone' , 'brg' , 'bwr' , 'cividis' , 'cool' , 'coolwarm' , 'copper' , 'cubehelix' , 'flag' , 'gist_earth' , 'gist_gray' , 'gist_heat' , 'gist_ncar' , 'gist_rainbow' , 'gist_stern' , 'gist_yarg' , 'gnuplot' , 'gnuplot2' , 'gray' , 'hot' , 'hsv' , 'inferno' , 'jet' , 'magma' , 'nipy_spectral' , 'ocean' , 'pink' , 'plasma' , 'prism' , 'rainbow' , 'seismic' , 'spring' , 'summer' , 'tab10' , 'tab20' , 'tab20b' , 'tab20c' , 'terrain' , 'viridis' , 'winter' ] In [3]: matrix = np . arange ( 100 ) . reshape ( 10 , 10 ) In [4]: Vsize , Hsize = ( 4 , 4 ) n_fig = len ( cmaps ) n_col = 4 n_row = n_fig // n_col + 1 if n_fig % n_col != 0 else n_fig//n_col In [5]: fig = plt . figure ( figsize = ( Vsize * n_col , Hsize * n_row )) for i , cmap in enumerate ( cmaps ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) ax . matshow ( matrix , cmap = cmap ) ax . set_title ( f \"↓ {cmap} ↓\" , fontsize = 24 ), ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-0.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-0.html"},{"title":"生物物理学 第1回","text":"講師： 能瀬聡直 講義資料： 生物物理学 参考書： 神経科学 -脳の探求- 参考書： ニューロンの生物物理 講義概要 生物物理学とは 遺伝情報の流れ 蛋白質の構造と機能 細胞内タンパク質のダイナミックス 遺伝子操作技術 ゲノム科学とバイオインフォマティックス バイオイメージング、生体分子計測 脳・神経系の生物物理 講義日程 # 日付 担当 1 9/25 能瀬 2 10/2 樋口 3 10/9 樋口 4 10/16 樋口 5 10/23 樋口 6 10/30 樋口 7 11/6 樋口 8 11/20 能瀬 9 11/27 能瀬 10 12/4 樋口 11 12/11 能瀬 12 12/18 能瀬 13 1/8 能瀬 14 1/15 能瀬 生物物理学とは？ 物理の手法で生物を見る。 生体分子の機能や構造の研究。 対象は広範囲、ただし物理的理念を背景にもつ。 生体高分子の構造・機能、脳・神経機構など単なる記述中心の従来の生物学と異なり、論理的な思考法を用い、より普遍的な原理を見いだすことを目指している。 生物物理の代表的発見 DNA二重螺旋構造の発見（1953年、1962年ノーベル生理医学賞） 蛋白質の高次構造の解析（1960年、1962年ノーベル化学賞） 神経活動のイオン機構の解明（1953年、1963年ノーベル生理医学賞） 最近の技術革新 ヒトゲノム計画 ヒトの全遺伝子の設計図解読の終了（2000年） イメージング技術 蛍光蛋白質・レーザー顕微鏡（1990年代） 1分子観測・1分子操作 溶液中での蛋白質1分子の観察（1990年代） 神経回路の作動原理の解明に向けた従来の3つのアプローチ 解剖学(Anatomy) 神経の配線を明らかにする。 生理学(Physiology) 神経活動を測定・操作する。 理論 神経活動パターンから原理を抽出 Part1. Introduction 脳神経系における情報の流れ ニューロンの構成 脳とコンピューター 半導体 ↔︎ 半導体素子 ↔︎ 集積回路 ↔︎ コンピューター 分子 ↔︎ 神経細胞 グリア細胞 ↔︎ 神経回路 ↔︎ 脳 活動電位の特徴 全か無か： \\(\\mathrm{Na}\\) チャネル活性化に閾値がある。 一過性： \\(\\mathrm{Na}\\) チャネル不活性化 確実に伝播 一体、どのような構造を持った神経回路の中を、どのように信号が伝わることで特定の演算が創発されるのか。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html"},{"title":"HMMをpythonで実装","text":"（kerasy.ML.HMM.HMM） の使い方 自作のモジュール （kerasy.ML.HMM.HMM） を使って実装をします。 In [1]: from kerasy.ML.HMM import HMM In [2]: model = HMM () In [3]: # 以下のようなパラメタファイルを読み込む。 ! cat params.json { \"M\": 4, \"K\": 4, \"basetypes\": [\"a\", \"c\", \"g\", \"u\"], \"pi\": [0.7, 0.1, 0.1, 0.1], \"A\": [[0.8, 0.1, 0.1, 0.0], [0.0, 0.8, 0.1, 0.1], [0.1, 0.0, 0.8, 0.1], [0.1, 0.0, 0.1, 0.8]], \"phi\": [[0.4, 0.1, 0.1, 0.4], [0.25, 0.25, 0.25, 0.25], [0.1, 0.4, 0.4, 0.1], [0.3, 0.2, 0.2, 0.3]] } In [4]: model . load_params ( \"params.json\" ) In [5]: # インスタンスに読み込まれた各種パラメータ model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 In [6]: # なお、この時以下のような辞書を同時に作成しています。 print ( model . base2int ) print ( model . int2base ) {'a': 0, 'c': 1, 'g': 2, 'u': 3} {0: 'a', 1: 'c', 2: 'g', 3: 'u'} In [7]: # また、パラメータはnumpyの行列の形で読み込まれています。 print ( type ( model . pi )) print ( type ( model . A )) print ( type ( model . phi )) In [8]: # 以下のようにすれば、学習したパラメタを同じ形式で出力することができます。 model . save_params ( \"out.json\" ) Viterbi algorithm HMMのViterbiアルゴリズムを実装して、尤もらしいサンプル配列の隠れ状態列を推定します。 In [9]: from kerasy.utils.bio import alignStr , readMonoSeq , readMultiSeq # ファイルの中身 cat seq1.fasta ``` sample-RNA gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc ``` In [10]: # ファイルの読み込み seq1 = readMonoSeq ( 'seq1.fasta' ) print ( f \"Input Sequence: \\n {alignStr(seq1[0])}\" ) Input Sequence: gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc In [11]: # この時、文字列をリストに格納しています。 print ( type ( seq1 )) In [12]: pred1 = model . predict ( sequences = seq1 , asai = True ) In [13]: # 変数asaiは、隠れ状態がZero-based numberingかどうかを決めるものであり、特に意味はありません。（課題の形式に対応したものがasai=True.） print ( f \"Hidden Indexes: \\n {alignStr(pred1[0])}\" ) Hidden Indexesn [14]: # もちろんパラメタの更新は行われていません。 model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 Baum-Welch algorithm HMMのBaum-Welchアルゴリズムを実装して、モデルを学習させてます。 In [15]: model = HMM () model . load_params ( \"params2.json\" ) model . params () # 文字が \"acgu\"→\"ACGT\"に変わっただけです。 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.4000 0.2500 0.1000 0.3000 C 0.1000 0.2500 0.4000 0.2000 G 0.1000 0.2500 0.4000 0.2000 T 0.4000 0.2500 0.1000 0.3000 cat seq2.txt ``` >Vitis_vinifera_chr14.trna15-AlaAGC (28776087-28776159) Ala (AGC) 73 bp Sc: 68.12 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAGGTACGGGGATCGATA CCCCGCATCTCCA >Vitis_vinifera_chr13.trna5-ArgCCG (2691241-2691313) Arg (CCG) 73 bp Sc: 83.85 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAGGTCGTGGGTTCGAAT CCCACTGCGATCG >Vitis_vinifera_chr3.trna6-GlnCTG (5807449-5807520) Gln (CTG) 72 bp Sc: 71.93 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTAACCCGAGTTCAAATC TCGGTGGGACCT >Vitis_vinifera_chr14.trna19-LeuAAG (25640120-25640040) Leu (AAG) 81 bp Sc: 62.71 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTGTCCGAAAGGGCGTGG GTTCAAATCCCACTCTCCACA >Vitis_vinifera_chr18.trna9-MetCAT (2896034-2896118) Met (CAT) 85 bp Sc: 60.66 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCGAGTAATCCTGAGGTC GAGAGTTCGAGCCTCTCTCACCCCA >Vitis_vinifera_chr3.trna30-ProTGG (7498415-7498344) Pro (TGG) 72 bp Sc: 68.98 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGGTCCCGAGTTCGATTC TCGGAATGACCC >Vitis_vinifera_chr5.trna13-GluTTC (21745120-21745048) Glu (TTC) 73 bp Sc: 36.67 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTGGTCGTGGGTTCGAGC CCTATTGGTGGTT >Vitis_vinifera_chr5.trna3-TyrGTA (7422575-7422666) Tyr (GTA) 92 bp Sc: 33.68 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTGACCCAATAGATATCC TTAGGTCGTTAGTTTGAATCCAACAGGTCTAA >Vitis_vinifera_chr1.trna8-ValCAC (11396083-11396156) Val (CAC) 74 bp Sc: 66.86 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGAGGTCCCTAGTTCGAA CCCAGGCTCAGATA >Vitis_vinifera_chr14.trna2-SerTGA (4021381-4021462) Ser (TGA) 82 bp Sc: 80.82 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTGGGCTTCGCCCGCGCA GGTTCGAACCCTGCTGTCGACG ``` In [16]: seq2 = readMultiSeq ( 'seq2.txt' ) In [17]: for i , seq in enumerate ( seq2 ): print ( f \"No. {i:>02} \\n {alignStr(seq, width=45)}\" ) No.00 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAG GTACGGGGATCGATACCCCGCATCTCCA No.01 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAG GTCGTGGGTTCGAATCCCACTGCGATCG No.02 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTA ACCCGAGTTCAAATCTCGGTGGGACCT No.03 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTG TCCGAAAGGGCGTGGGTTCAAATCCCACTCTCCACA No.04 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCG AGTAATCCTGAGGTCGAGAGTTCGAGCCTCTCTCACCCCA No.05 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGG TCCCGAGTTCGATTCTCGGAATGACCC No.06 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTG GTCGTGGGTTCGAGCCCTATTGGTGGTT No.07 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTG ACCCAATAGATATCCTTAGGTCGTTAGTTTGAATCCAACAGGTCT AA No.08 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGA GGTCCCTAGTTCGAACCCAGGCTCAGATA No.09 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTG GGCTTCGCCCGCGCAGGTTCGAACCCTGCTGTCGACG In [18]: # 学習させる。 model . fit ( sequences = seq2 , epochs = 2000 , verbose = False ) In [19]: import matplotlib.pyplot as plt In [20]: def plotHistory ( model ): \"\"\" 学習の過程をプロットする関数 \"\"\" plt . plot ( model . history ) plt . title ( f \"Mean Log Likelihood Transition (eoochs= {model.epoch} )\" ) plt . xlabel ( \"epochs\" ) plt . ylabel ( \"Mean Log Likelihood\" ) plt . show () In [21]: plotHistory ( model ) In [22]: model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.1024 0.0000 0.8976 0.0000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.2819 0.7181 0.0000 0.0000 z(2) 0.0000 0.5670 0.0000 0.4330 z(3) 0.0521 0.0000 0.3415 0.6064 z(4) 0.5158 0.0000 0.0000 0.4842 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.3436 0.3099 0.1059 0.0055 C 0.2538 0.0592 0.0970 0.4297 G 0.4026 0.4418 0.7971 0.0345 T 0.0000 0.1891 0.0000 0.5304 ※ 隠れ状態ごとにかなり偏った遷移を行なう。 また、 遷移行列の対角成分がそこまで大きい値では無い。 → 特定の構造が、 ある程度の長さのゆとりを持って 繰り返されていると予想される。 In [23]: pred2 = model . predict ( sequences = seq2 , asai = True ) In [24]: for i , pred in enumerate ( pred2 ): print ( f \"No. {i:>02} Hidden Indexes: \\n {alignStr(pred, width=45)}\" ) No.00 Hidden Indexes: 333334122244412241241222224412444124122412222 2411222224412224441241244441 No.01 Hidden Indexes: 334411241241222412241241124412244441224441222 2412412244412244412441122441 No.02 Hidden Indexes: 334441241244412412441222412412244441224441241 244412244412244441241222444 No.03 Hidden Indexes: 341222241244122441244412222244122441222444441 244122222241222244412244412444441241 No.04 Hidden Indexes: 333341241241122441244124112412244412412444441 2241244441222441222244412244444441244441 No.05 Hidden Indexes: 333412441244412412412224444124444122224122222 444412244412444441222412444 No.06 Hidden Indexes: 334441241244412441244122411222244444124444122 2412412244412244441241241244 No.07 Hidden Indexes: 341244441244412441241222412222241241241222441 244412412241244441224124412444122444124122444 12 No.08 Hidden Indexes: 344412241241222441244124112441244412411244122 22444441244412244412244412241 No.09 Hidden Indexes: 344124122444122412441222222412244412224441241 2244412444112412244412244441122441241 補足：上記プログラムにバグがないかの確認 Baum-Welchアルゴリズムが正しく実装できていたか、極端な配列を学習させることで確認します。 In [25]: model = HMM () model . load_params ( \"params3.json\" ) model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 0.7000 0.1000 0.2000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.8000 0.1000 0.1000 z(2) 0.1000 0.8000 0.1000 z(3) 0.1000 0.1000 0.1000 ------------------------------ *emission probability z(1) z(2) z(3) A 0.4000 0.2500 0.1000 C 0.1000 0.2500 0.4000 G 0.1000 0.2500 0.4000 T 0.4000 0.2500 0.1000 In [26]: seq_extreme = readMonoSeq ( 'seq3.txt' ) In [27]: # かなり極端な配列の例で実装してみる。 print ( f \"Input Sequence: \\n {alignStr(seq_extreme[0])}\" ) Input Sequence: TCTTTTTCCTCCTCTCTCCTTTCCCTCTTTTCCCTTCTTCTCTCCCTTTTCCTTCTCTTC TCTCTTTTCTTCCCCTTTTCCTTTTCTCCTCCCTCCCTTTCTTCCCTCCTTCCTCCCCCC CTCCCCTTTCCTTCCTTTCTCCTTCTCCCCATATGGCCATTTACTTCAGCTGATAGACAC CGAGTAACAACAATAAAGCGTTAGGTGGACGAATGCTCTACTCTGACCTCTAGCTTGTGG GTTCGCGGCTTGCCGAACGCTGGCCTCTGCCCGTCGAACCAATAAATGTTTATCCAGGAC ACCCCGTTCTTTGGTGATATCCCTCGCTCGAGTTATAGCATTGAAACCTCCATATCCGGC GATAAGAGCTACGGACCGTATACTGGGCGCCGGTAATTGGTTGCACTCGCCCTCGGTCTT TTTCTTTTTGGTTTAGCAGAGCAAGGCGTGGAAAAGGAGAGAGGGAGAAAAGGGAAAGGG AAAAGAGGAGAAGAAAGAAAAAGGAAGGGGGGAAGAGGAGAGAAGGGAAGGGAAGGGGGA GAAAGAGGGAAAGAGGAGAAAAAAGGAGGGGGAAGAAGGAAGGGGGAAAGGGGGGGAAAG 上の配列は、以下の構造を持っていることがわかります。 index type 1~150 pyrimidine base 151~450 both 451~600 purine base In [28]: model . fit ( sequences = seq_extreme , epochs = 100 , verbose = False ) In [29]: plotHistory ( model ) In [30]: model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 1.0000 0.0000 0.0000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.9933 0.0000 0.0067 z(2) 0.0000 1.0000 0.0000 z(3) 0.0000 0.0033 0.9967 ------------------------------ *emission probability z(1) z(2) z(3) A 0.0000 0.4851 0.2199 C 0.5034 0.0000 0.2627 G 0.0000 0.5149 0.2415 T 0.4966 0.0000 0.2760 In [31]: pred_extreme = model . predict ( sequences = seq_extreme ) In [32]: print ( f \"Hidden Indexes: \\n {alignStr(pred_extreme[0])}\" ) Hidden Indexesうまく傾向をつかんでいることから、学習アルゴリズムに大きな誤りはなさそうです。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-4.html"},{"title":"生物統計論 第1回","text":"講師： 木立尚孝 講義概要 09/27 (Fri) 10:25-12:10 10/04 (Fri) 10:25-12:10 10/11 (Fri) 10:25-12:10 10/18 (Fri) 10:25-12:10 10/25 (Fri) 10:25-12:10 11/08 (Fri) 10:25-12:10 11/15 (Fri) 10:25-11:30(Lecture) / 11:30-12:10: (Test) Section1.1 STATISTICAL ANALYSIS Genomic data has recently become available, so the analyzing methods still its infancy at the century scale. It is very important how much information can be extracted from genomic and other omic data. Data-driven Research Development of measurement, communication, computing technologies. data science, e-science Statistics, computer skill, artificial intelligence, machine learning. Statistical Analysis Subjects and measurements are often conclude the random events , such as noise. Aiming for finding the \"True\" distribution, and inferencing on that distribution. Power of Statistical Methods Amount of information we can extract \"Many and high\" / \"Few or low\" quality Event infinite number of data cannot answer all questions. ex) we couldn't answer \"what is the number of eyes on the next dice.\" Data dependency. Section1.2 PROBABILITY DEFINITIONS Probability: Mathematical Probability: The probability of an event consisting of n out of m possible equally likely occurrences, defined to be n / m Statistical Probability: Each event is random, but if you repeat it a lot, you can see the probability that each event occurs. Subjective Probability: A type of probability derived from an individual's personal judgment or own experience about whether a specific outcome is likely to occur. ※ Mathematical Probability is the most strict and basic. Probability space \\(\\left(\\Omega, E, P\\right)\\) $$\\begin{aligned}&\\Omega: \\text{Set, Samplemspace}\\\\&E: \\text{Events,}\\sigma\\text{-algebra}\\\\&P: \\text{Probability measure}\\end{aligned}$$ Sample Space The sets of elementary events. ex.) The number of eyes on the dice. All possible genomes. All possible gene expression profiles \\(\\omega_i\\in\\Omega\\) is the identifier of possible individual stochastic phenomena. \\(\\sigma\\) -algebra $$ \\begin{aligned} &\\varepsilon= \\left\\{E_1,E_2,\\cdots|E_i\\subseteq\\Omega:\\text{event}:\\sigma\\text{-algebra} \\right\\}\\\\ &\\Rightarrow \\varnothing,\\Omega,\\left(E_i\\setminus E_j\\right),\\left(\\bigcup_{i=1}&#94;{\\infty}E_i\\right),\\left(\\bigcap_{i=1}&#94;{\\infty}E_i\\right)\\in\\varepsilon \\end{aligned} $$ The sets of Events. Each event \\(E_i\\subseteq\\Omega\\) Include Empty set \\(\\varnothing\\) , universal set \\(\\Omega\\) Closure to variable \"Set Operation\". (ex. Union, intersection, complement) example) discrete set Real set Power set Borel set \\(\\mathcal{A}\\) Probability measure $$\\begin{aligned}&\\mathbb{P} : \\mathcal{E} \\rightarrow \\mathbb{R} \\\\& 0 \\leq \\mathbb{P}(E) \\leq 1, E \\in \\mathcal{E} \\\\&\\mathbb{P}(\\Omega)=1, \\mathbb{P}(\\varnothing)=0 \\\\&\\text { For } E_{1}, E_{2}, \\cdots \\in \\mathcal{E}, \\text{ s.t. } E_{i} \\cap E_{j}=\\varnothing, \\forall i \\neq j \\\\&\\mathbb{P}\\left(\\bigcup_{i=1}&#94;{\\infty} E_{i}\\right)=\\sum_{i=1}&#94;{\\infty} \\mathbb{P}\\left(E_{i}\\right)\\end{aligned}$$ Each event is assigned a value that indicates the likelihood or probability of occurrence. Random variable $$\\begin{aligned}X: &\\text{random variable}\\\\\\Leftrightarrow &X : \\Omega \\rightarrow \\mathbb{R} \\\\ &\\text { s.t. } X&#94;{-1}(A) \\in \\mathcal{E}, \\forall A \\in \\mathcal{A} \\\\&X&#94;{-1}(A) :=\\{\\omega \\in \\Omega \\mid X(\\omega) \\in A\\}\\end{aligned}$$ Section1.3 PROBABILITY TERMS AND PROPERTIES Probability distribution function \\(F_x\\) (cumulative distribution) Probability density function \\(f_x\\) $$F_x\\left(x+dx\\right)-F_x\\left(x\\right)=:f_x(x)dx$$ Conditional Probability Joint Probability distribution $$(X,Y): \\Omega\\rightarrow\\mathbb{R}&#94;2; (X,Y)(\\omega) = \\left(X(\\omega),Y(\\omega)\\right)\\\\\\left(X,Y\\right)&#94;{-1}(A) = \\left\\{\\omega\\in\\Omega|\\left(X(\\omega),Y(\\omega)\\right)\\in A\\right\\}$$ Independent random variables Expected Value Variance Covariance: $$\\begin{cases}X,Y: \\text{independent random variables}\\Rightarrow \\mathrm{Cov}(X,Y) = 0\\\\X,Y: \\text{independent random variables}\\not\\Leftarrow \\mathrm{Cov}(X,Y) = 0 \\end{cases}$$ Indicator Function: $$\\mathbb{I}_A(x)=\\begin{cases}1 & x\\in A\\\\0 & x\\notin A\\end{cases},A\\in\\mathcal{A}$$ Marginalization Section1.4 PROBABILITY DISTRIBUTIONS Look Here!! if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html"},{"title":"生物統計論 第0回","text":"Section1.4 PROBABILITY DISTRIBUTIONS In [1]: import numpy as np import collections import matplotlib.pyplot as plt In [2]: N = 100000 Bernoulli Distribution In [3]: def BernoulliVar ( q , N , seed = None ): rng = np . random . RandomState ( seed ) if seed is not None else np . random return np . var ( rng . rand ( N ) < q ) In [4]: qs = np . linspace ( 0 , 1 , 1000 ) In [5]: probs = [ BernoulliVar ( q , N ) for q in qs ] In [6]: plt . title ( \"Bernoulli distribution\" ) plt . plot ( qs , probs , label = \"$Var(X)$\" ) plt . xlabel ( \"q\" ) plt . ylabel ( \"$Var(X)$\" ) plt . legend () plt . show () Binomial Distribution In [7]: def BinomialProb ( n , p , N , seed = None , color = None , ax = None ): if ax == None : fig , ax = plt . subplots () rng = np . random . RandomState ( seed ) if seed is not None else np . random counter = collections . Counter ( rng . binomial ( n , p , N )) count , freqs = zip ( * sorted ( counter . most_common ())) probs = [ freq / N for freq in freqs ] ax . plot ( count , probs , color = color , label = f \"p= {p} and n= {n} \" ) ax . scatter ( count , probs , color = color ) return ax In [8]: ax = BinomialProb ( 20 , 0.5 , N , seed = 0 , color = \"blue\" ) ax = BinomialProb ( 20 , 0.7 , N , seed = 0 , color = \"green\" , ax = ax ) ax = BinomialProb ( 40 , 0.5 , N , seed = 0 , color = \"red\" , ax = ax ) plt . legend () plt . show () Normal Distribution In [9]: from scipy import stats In [10]: def NormalProb ( mu , sigma ): X = np . arange ( mu - 3.5 * sigma , mu + 3.5 * sigma , sigma / 50 ) Y = stats . norm . pdf ( X , mu , sigma ) for i in np . arange ( - 3 , 4 , 1 ): idx = np . argmin ( abs ( X - ( mu + i * sigma ))) plt . plot ([ X [ idx ], X [ idx ]], [ 0 , Y [ idx ]], 'k-' ) plt . scatter ( X [ idx ], Y [ idx ], color = \"black\" ) plt . plot ( X , Y , color = \"black\" ) In [11]: NormalProb ( mu = 0 , sigma = 0.1 ) Multivariate Normal Distribution In [12]: from scipy.stats import multivariate_normal In [13]: x , y = np . mgrid [ - 3 : 3.5 : . 01 , - 3 : 3 : . 01 ] pos = np . dstack (( x , y )) rv = multivariate_normal ([ 0.5 , - 0.2 ], [[ 2.0 , 2.3 ], [ 0.3 , 0.8 ]]) plt . contourf ( x , y , rv . pdf ( pos )) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html"},{"title":"HMMのスケーリング","text":"HMMを実装する際に課題となるのが、forward-algorithm で \\(\\alpha\\) を再帰的に求める際に、 \\(\\alpha\\left(\\mathbf{z}_{n-1}\\right)\\) に \\(p(\\mathbf{z}_n|\\mathbf{z}_{n-1})\\) と \\(p(\\mathbf{x}_n|\\mathbf{z}_n)\\) をかけるため、値が非常に小さくなり、計算機の ダイナミックレンジ を超えてしまうことです。 そこで、ここでは \\(\\alpha\\left(\\mathbf{z}_{n}\\right)\\) と \\(\\beta\\left(\\mathbf{z}_{n}\\right)\\) にスケーリングを施し、それらの値が \\(1\\) のオーダーに止まるようにする手法を説明します。 forward-backward \\(\\alpha,\\beta\\) forward-backward algorithm で用いられていた \\(\\alpha,\\beta\\) は以下のように定義されていました。 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ Scaling factors まず、スケーリングされた \\(\\alpha,\\beta\\) は以下のように表されます。スケーリングによって、 \\(\\alpha\\) は高々 \\(K\\) 個の変数上の確率分布 、 \\(\\beta\\) は2つの条件付き確率の比 になることがわかります。 $$ \\begin{aligned} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.55)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\frac{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)}=\\frac{\\beta\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.61) \\end{aligned} $$ ここで、これらと \\(\\alpha,\\beta\\) を関連付けるためのスケーリング係数 \\(c\\) を導入します。 $$ c_{n}=p\\left(\\mathbf{x}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}\\right)\\qquad (13.56) $$ すると、 $$ \\begin{aligned} p\\left(\\mathbf{x}_1,\\ldots,\\mathbf{x}_n\\right) &= p\\left(\\mathbf{x}_n | \\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\cdots p\\left(\\mathbf{x}_3 | \\mathbf{x}_1,\\mathbf{x}_{2}\\right)p\\left(\\mathbf{x}_2 | \\mathbf{x}_1\\right)p(\\mathbf{x}_1)\\\\ &= c_n\\cdots c_3c_2c_1\\\\ &= \\prod_{m=1}&#94;{n} c_{m} \\end{aligned}\\qquad (13.58) $$ と展開することができるので、 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\left(\\prod_{m=1}&#94;{n} c_{m}\\right) \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) & (13.58)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)\\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) = \\left(\\prod_{m=n+1}&#94;{N} c_{m}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.60) \\end{aligned} $$ と対応関係がわかります。 \\(\\gamma,\\xi\\) 続いて、 \\(\\gamma,\\xi\\) と \\(\\widehat{\\alpha},\\widehat{\\beta}\\) の対応関係を求めます。 \\(\\alpha,\\beta\\) \\(\\alpha,\\beta\\) を用いると、以下のように表されていました。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} &(13.43) \\end{aligned}$$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) 先の対応関係を用いれば、 \\(\\widehat{\\alpha},\\widehat{\\beta}\\) を用いると、 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=\\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.64)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\left(c_{n}\\right)&#94;{-1} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.65) \\end{aligned} $$ と表されることがわかります。 Recursion 最後に、再帰式の対応関係も求めます。 \\(\\alpha,\\beta\\) $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) $$ \\begin{aligned} c_{n} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.58)\\\\ \\widehat{\\alpha}\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{z}_{1}| \\mathbf{x}_{1}\\right)=\\frac{p\\left(\\mathbf{z}_{1}\\right)p\\left(\\mathbf{x}_{1}| \\mathbf{z}_{1}\\right)}{p\\left(\\mathbf{x}_{1}\\right)} = \\frac{\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}}}{p\\left(\\mathbf{x}_{1}\\right)}\\\\ c_{n+1} \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\widehat{\\beta}\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) &(13.62)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)}{\\widehat{\\alpha}\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)}{p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} = 1 & (13.30) \\end{aligned} $$ なお、ここで \\((13.58)\\) でどのようにして \\(c_n\\) を求めるかですが、 $$ \\begin{aligned} \\mathrm{R.H.S}\\ (13.58) &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}}p\\left(\\mathbf{z}_{n-1}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\\\ &=p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) \\end{aligned} $$ となることから、 \\((13.58)\\) の右辺を \\(\\mathbf{z}_n\\) について周辺化すれば、 $$\\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = p\\left(\\mathbf{x}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = c_n$$ となるので、 \\(c_n\\) が求められることがわかります。 おまけ（尤度関数） 尤度関数はスケーリング係数 \\(c\\) を用いるだけで簡単に求められることがわかります。 $$p(\\mathbf{X})=\\prod_{n=1}&#94;{N} c_{n}\\qquad (13.63)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-3.html"},{"title":"HMMの最尤推定の計算過程","text":"ここでは、 HMMの最尤推定 で省略した計算過程について記述します。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) $$ \\begin{aligned} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})&=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10)\\\\ &=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\left[ \\prod_{n=2}&#94;{N}\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}} \\right] \\prod_{m=1}&#94;{N}\\prod_{i=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{i k}&#94;{x_{ni} z_{nk}}\\\\ \\therefore\\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta}) &=\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k\\left[\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk}\\right]\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;Kx_{ni}z_{nk}\\ln\\phi_{ik} \\end{aligned} $$ であるから、これを \\((13.12)\\) に代入して、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=&\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12)\\\\ =& \\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;Kx_{ni}z_{nk}\\ln\\phi_{ik} \\end{aligned} $$ ここで、 \\(\\sum_{\\mathbf{Z}} = \\sum_{\\mathbf{z_1},\\mathbf{z_2},\\ldots,\\mathbf{z_N}}\\) なので、それぞれ 関係の無い部分を周辺化 でき、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\sum_{\\mathbf{z_1}} p\\left(\\mathbf{z_1} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{1k}\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\sum_{\\mathbf{z_{n-1},z_n}}p\\left(\\mathbf{z_{n-1},z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;K\\sum_{\\mathbf{z_n}}p\\left(\\mathbf{z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)x_{ni}z_{nk}\\ln\\phi_{ik}\\\\ \\end{aligned}$$ となります。また、 \\(\\gamma,\\xi\\) の定義 を用いることで $$\\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_1}} \\gamma\\left(\\mathbf{z}_1\\right)z_{1k}\\right)\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\left(\\sum_{\\mathbf{z_{n-1},z_n}}\\xi\\left(\\mathbf{z_{n-1},z_{n}}\\right) z_{n-1,j}z_{nk}\\right)\\ln A_{jk}\\\\ &+\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_n}}\\gamma\\left(\\mathbf{z}_n\\right)x_{ni}z_{nk}\\right)\\ln\\phi_{ik} \\end{aligned} $$ と書き直せます。この時、潜在変数が離散なので、 \\(\\gamma,\\xi\\) はそれぞれ和が \\(1\\) となる \\(K,\\left(K\\times K\\right)\\) 個の非負の数の集合を用いて以下のように記述できます。 $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ したがって、これらを用いて上記の式を書き直すと、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} \\end{aligned}\\qquad (13.17) $$ Maximization step ここでは、上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) 関数を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化する際の ラグランジュの未定乗数法 を書き下します。 \\(\\boldsymbol{\\pi}\\) $$ \\begin{aligned} L\\left(\\boldsymbol{\\pi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) &= \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k} + \\lambda_1\\left(\\sum_{k=1}&#94;K\\pi_k - 1\\right)\\\\ \\frac{\\partial L}{\\partial \\pi_k}&=\\frac{\\gamma\\left(z_{1 k}\\right)}{\\pi_k} + \\lambda_1 = 0\\quad \\therefore \\pi_k = -\\frac{\\gamma\\left(z_{1 k}\\right)}{\\lambda_1}\\\\ \\frac{\\partial L}{\\partial \\lambda_1}&=\\sum_{k=1}&#94;K\\pi_k - 1 = 0\\quad \\therefore\\lambda_1 = -\\sum_{k=1}&#94;K\\gamma\\left(z_{1 k}\\right)\\\\ \\therefore\\pi_k&#94;{\\star} &= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} \\end{aligned} $$ \\(\\boldsymbol{A}\\) $$\\begin{aligned} L\\left(\\boldsymbol{A},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} + \\sum_{j=1}&#94;K\\lambda_{2,j}\\left(\\sum_{k=1}&#94;K A_{jk} - 1\\right)\\\\ \\frac{\\partial L}{\\partial A_{jk}} &= \\sum_{n=2}&#94;{N}\\frac{\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{A_{jk}} + \\lambda_{2,j} = 0\\quad \\therefore A_{jk} = -\\frac{\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\lambda_{2,j}}\\\\ \\frac{\\partial L}{\\partial \\lambda_{2,j}} &= \\sum_{k=1}&#94;K A_{jk} - 1 = 0\\quad \\therefore \\lambda_{2,j} = -\\sum_{k=1}&#94;K\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)\\\\ \\therefore A_{jk}&#94;{\\star}&=\\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\end{aligned}$$ \\(\\boldsymbol{\\phi}\\) $$\\begin{aligned} L\\left(\\boldsymbol{\\phi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} + \\sum_{k=1}&#94;K\\lambda_{3,k}\\left( \\sum_{i=1}&#94;D\\phi_{ik} - 1\\right)\\\\ \\frac{\\partial L}{\\partial\\phi_{ik}} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\phi_{ik}} + \\lambda_{3,k}=0\\quad \\therefore \\phi_{ik} = -\\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\lambda_{3,k}}\\\\ \\frac{\\partial L}{\\partial\\lambda_{3,k}} &= \\sum_{i=1}&#94;D\\phi_{ik} - 1 = 0 \\quad \\therefore \\lambda_{3,k} = -\\sum_{i=1}&#94;D\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni} = -\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)\\\\ \\therefore \\phi_{ik}&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)} \\end{aligned}$$ Expectation step $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14)\\\\ \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35)\\\\ \\end{aligned} $$ forward-algorithm \\((\\alpha)\\) $$\\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha(\\mathbf{z}_{n-1})p(\\mathbf{z} | \\mathbf{z}_{n-1})\\\\ \\end{aligned}$$ backward-algorithm \\((\\beta)\\) $$\\begin{aligned} \\beta\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N}, \\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}, \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+2}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} \\beta(\\mathbf{z}_{n+1})p(\\mathbf{x}_{n+1}|\\mathbf{z}_{n+1})p(\\mathbf{z}_{n+1}|\\mathbf{z}_n)\\qquad (13.38) \\end{aligned}$$ \\(\\gamma,\\xi\\) $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$\\begin{aligned} \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}\\right) \\\\ &=\\frac{p(\\mathbf{X} | \\mathbf{z}_{n-1}, \\mathbf{z}_{n}) p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{Bayes' theorem})\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{x}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43) \\end{aligned}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-2.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-2.html"},{"title":"HMMの最尤推定","text":"※ かなり導出部分を省略しています。導出は適宜 HMMの最尤推定の計算過程 を参照してください。 隠れマルコフモデルは、一般に以下の式で表されます。 $$ p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10) $$ \\(\\mathbf{X} = \\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) : \\(\\mathbf{Z} = \\{\\mathbf{z}_1,\\ldots,\\mathbf{z}_N\\}\\) \\(\\boldsymbol{\\theta}=\\{\\boldsymbol{\\pi}, \\mathbf{A}, \\boldsymbol{\\phi}\\}\\) ※ 一般に放出確率 \\(p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\boldsymbol{\\phi}\\right)\\) は、 二値のベクトル \\(\\mathbf{z}_n\\) の \\(K\\) 個の可能な状態に対応した \\(K\\) 個の要素を持つベクトルからなる任意の分布 $$ p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\phi\\right)=\\prod_{k=1}&#94;{K} p\\left(\\mathbf{x}_{n} | \\phi_{k}\\right)&#94;{z_{n k}}\\qquad (13.9) $$ を考えることも可能ですが、今回は下記の離散多項分布を考えます。 Name Probability Conditional Distribution initial state \\(\\pi_{k} \\equiv p\\left(z_{1 k}=1\\right)\\) \\(p\\left(\\mathbf{z}_{1} \\mid \\boldsymbol{\\pi}\\right)=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\quad (13.8)\\) transition probability \\(A_{j k} \\equiv p\\left(z_{n k}=1\\mid z_{n-1, j}=1\\right)\\) \\(p\\left(\\mathbf{z}_{n} \\mid \\mathbf{z}_{n-1}, \\mathbf{A}\\right)=\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}}\\quad (13.7)\\) emission probability \\(\\phi_{i k}\\equiv p\\left(x_{n i}=1 \\mid z_{n k}=1\\right)\\) \\(p(\\mathbf{x}_n \\mid \\mathbf{z}_n, \\boldsymbol{\\phi})=\\prod_{i=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{i k}&#94;{x_{ni} z_{nk}}\\quad (13.22)\\) 尤度関数 ここで、データ集合 \\(\\mathbf{X}\\) が観測された際に、上記の同時分布を潜在変数 \\(\\mathbf{Z}\\) について周辺化することで、尤度関数は以下のように記述されます。 $$ p(\\mathbf{X} | \\boldsymbol{\\theta})=\\sum_{\\mathbf{Z}} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.11) $$ しかし、この尤度関数は \\(n\\) について分解できない（ \\(\\mathbf{z}_n\\) ）ごとに和を取れないので、 条件付き独立 の性質を活かして 尤度関数の対数の期待値 を最大化する Baum-Welch algorithm (EM algorithm) を用います。 Baum-Welch (EM) パラメータ \\(\\boldsymbol{\\theta}&#94;{\\text {old }}\\) を用いて \\(p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化する。 対数尤度関数の期待値 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を求める。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化するパラメータに更新する。 \\(\\boldsymbol{\\theta}\\rightarrow\\boldsymbol{\\theta}&#94;{\\text {old }}\\) 1に戻る。 $$ Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12) $$ ここで、表記を簡単にするために、 γ 、 ξ を導入します。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14) \\end{aligned} $$ なお、潜在変数が離散なので、以下のように記述し直せます。（ \\(\\pi_{k},A_{j k},\\phi_{j k}\\) と同様。） $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ これらを用いると、 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) が以下のように書き下せます。 （計算過程） $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} \\end{aligned}\\qquad (13.17) $$ Maximization step ※ 実際の計算の順番からは前後しますが、先にM stepを説明します。 上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化するのは（別ブロックに別れているから）簡単で、それぞれ 適当なラグランジュ乗数を導入する ことで、以下のように求まります。 （計算過程） $$ \\begin{aligned} \\pi_{k}&= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} & (13.18)\\\\ A_{j k}&= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} & (13.19)\\\\ \\phi_{i k}&=\\frac{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right) x_{n i}}{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right)} & (13.23) \\end{aligned} $$ Expectation step M step で必要となる \\(\\gamma,\\xi\\) は、 条件付き独立性 を用いることで効率的に計算することができます。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ 条件付き独立性を用いてそれぞれ変形すると、以下の再帰式を導くことができます。 （計算過程） $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ ※ なお、ここで \\(\\alpha\\) の再起式を forward-algorithm 、 \\(\\beta\\) の再起式を backward-algorithm と呼ぶことがあります。 また、これらを用いて \\(\\xi\\) を記述することもでき、以下のように表せます。 （計算過程） $$\\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ 以上でBaum-Welchに必要な計算式が求まりました。 おまけ（尤度関数） 尤度関数は、アルゴリズムの停止条件に用いられるなど、値を求めることが非常に有用です。 求める際は、 $$ \\gamma\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad (13.33) $$ の両辺を \\(\\mathbf{z}_n\\) について周辺化すれば、左辺は $$\\sum_{\\mathbf{z}_{n}} \\gamma\\left(\\mathbf{z}_{n}\\right) = \\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right) = 1$$ となることが明らかなので、以下のように求まります。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{n}} \\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)\\qquad (13.41)$$ また、上記の式は任意の \\(n\\) について成立するので、 \\(n=N\\) の場合を考えれば \\(\\alpha\\) のみを用いて求めることができます。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{N}} \\alpha\\left(\\mathbf{z}_{N}\\right)\\qquad (13.42)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-1.html"},{"title":"Numpyの行列計算チートシート","text":"はじめに 様々なアルゴリズムを実装する際に漸化式は出るけど実装時にうまくいかない。ということは良くあります。また、 Python を使って実装する場合、そのほとんどが行列の取り扱いです。 （柔軟であるが故にエラーを吐かずに動いてしまう…笑） そこで、まずは行列計算のチートシートを作成します。（随時加筆修正していきます。） 目次 基本事項 内積（行列積） 外積 In [1]: import numpy as np 基本事項 In [2]: N = 3 A = np . arange ( N ) B = np . arange ( N ) . reshape ( - 1 , N ) # np.expand_dims(A, axis=0), A[None,:] C = np . arange ( N ) . reshape ( N , - 1 ) # np.expand_dims(A, axis=1), A[:,None] D = np . arange ( N * N ) . reshape ( N , N ) In [3]: print ( f \"A = {A} \" ) print ( f \"B = {B} \" ) print ( f \"C = {C} \" ) print ( f \"D = {D} \" ) A = [0 1 2] B = [[0 1 2]] C = [[0] [1] [2]] D = [[0 1 2] [3 4 5] [6 7 8]] In [4]: print ( f \"A.shape = {A.shape} \" ) print ( f \"B.shape = {B.shape} \" ) print ( f \"C.shape = {C.shape} \" ) print ( f \"D.shape = {D.shape} \" ) A.shape = (3,) B.shape = (1, 3) C.shape = (3, 1) D.shape = (3, 3) In [5]: print ( f \"A.ndim = {A.ndim} \" ) print ( f \"B.ndim = {B.ndim} \" ) print ( f \"C.ndim = {C.ndim} \" ) print ( f \"D.ndim = {D.ndim} \" ) A.ndim = 1 B.ndim = 2 C.ndim = 2 D.ndim = 2 ndim ex. scalar $(0)$ 1 , 2 ,... vector $1$ A matrix $\\geq2$ B , C , D 内積（行列積） vector & scalar / matrix & scalar スカラーが絡むと、各要素とスカラーの積となる。 shape の変化はない。 どちらから掛けてもエラーは起こらない。 In [6]: print ( f \"np.dot(A,2) = {np.dot(A,2)}\" ) # vector & scalar print ( f \"np.dot(B,2) = {np.dot(B,2)}\" ) # matrix & scalar print ( f \"np.dot(C,2) = {np.dot(C,2)}\" ) # matrix & scalar print ( f \"np.dot(D,2) = {np.dot(D,2)}\" ) # matrix & scalar np.dot(A,2) = [0 2 4] np.dot(B,2) = [[0 2 4]] np.dot(C,2) = [[0] [2] [4]] np.dot(D,2) = [[ 0 2 4] [ 6 8 10] [12 14 16]] vector & vector 内積となる。 結果はスカラーとなる。 shape が異なると、エラーが起きる。 In [7]: print ( f \"np.dot(A,A) = {np.dot(A,A)}\" ) # vector & vector np.dot(A,A) = 5 In [8]: np . dot ( A , np . arange ( N - 1 )) # shape=(3,) & shape=(2,) ValueError : shapes (3,) and (2,) not aligned: 3 (dim 0) != 2 (dim 0) vector & matrix 行列積となる。 ベクトルは、位置によって変換のされ方が異なる。 左がベクトルの場合： np.dot((x,) (y,z)) = np.dot((1,x) (y,z)) 右がベクトルの場合： np.dot((y,z) (x,)) = np.dot((y,z) (x,1)) 行列積であるので、結果の shape は np.dot((x,y) (y,z)) = (x,z) となる。 上で y が異なるとエラーが生じる。 In [9]: print ( np . dot ( A , B )) # np.dot((3,)(1,3)) print ( np . dot ( A , C )) # np.dot((3,)(3,1)) print ( np . dot ( B , A )) # np.dot((1,3)(3,)) print ( np . dot ( C , A )) # np.dot((3,1)(3,)) ValueError : shapes (3,) and (1,3) not aligned: 3 (dim 0) != 3 (dim 0) [5] [5] ValueError : shapes (3,1) and (3,) not aligned: 1 (dim 1) != 3 (dim 0) matrix & matrix c = np.dot(a,b) a.shape=(a1,a2,...,aN,X) b.shape=(b1,b2,...,X,bM) c.shape=(a1,a2,...,aN,b1,b2,...,bM) c[i1,i2,...,iN,j1,j2,...,jM] == a[i1,i2,...,iM,:].dot(b[j1,j2,...,jM-1,:,jM]) In [10]: import itertools def checkNPdot ( shape1 , shape2 ): \"\"\" 計算可能なshapeの関係を列挙する。 \"\"\" a = np . arange ( np . prod ( shape1 )) b = np . arange ( np . prod ( shape2 )) for comb1 in itertools . permutations ( shape1 , len ( shape1 )): for comb2 in itertools . permutations ( shape2 , len ( shape2 )): try : print ( f \" {comb1} .dot( {comb2} ) = {(a.reshape(comb1).dot(b.reshape(comb2))).shape}\" ) except : pass 以下で具体的に見ていく！ np.dot(2D, 3D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,X,k) c.shape=(i,j,k) c[i,j,k] == a[i,:].dot(b[j,:,k]) In [11]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) c = np . dot ( a , b ) In [12]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3) b.shape = (2, 3, 4) np.dot(a,b).shape = (2, 2, 4) In [13]: I , J , K = c . shape In [14]: np . all ([ c [ i , j , k ] == a [ i ,:] . dot ( b [ j ,:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[14]: True np.dot(3D,2D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(X,k) c.shape=(i,j,k) c[i,j,k] == a[i,j,:].dot(b[:,k]) In [15]: a = np . arange ( 24 ) . reshape ( 4 , 2 , 3 ) b = np . arange ( 6 ) . reshape ( 3 , 2 ) c = np . dot ( a , b ) In [16]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (4, 2, 3) b.shape = (3, 2) np.dot(a,b).shape = (4, 2, 2) In [17]: I , J , K = c . shape In [18]: np . all ([ c [ i , j , k ] == a [ i , j ,:] . dot ( b [:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[18]: True np.dot(3D,3D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) In [19]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 60 ) . reshape ( 3 , 4 , 5 ) c = np . dot ( a , b ) In [20]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4) b.shape = (3, 4, 5) np.dot(a,b).shape = (2, 3, 3, 5) In [21]: I , J , K , L = c . shape In [22]: np . all ([ c [ i , j , k , l ] == a [ i , j ,:] . dot ( b [ k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[22]: True np.dot(2D,4D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,:].dot(b[j,k,:,l]) In [23]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 120 ) . reshape ( 2 , 4 , 3 , 5 ) c = np . dot ( a , b ) In [24]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) # c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) a.shape = (2, 3) b.shape = (2, 4, 3, 5) np.dot(a,b).shape = (2, 2, 4, 5) In [25]: I , J , K , L = c . shape In [26]: np . all ([ c [ i , j , k , l ] == a [ i ,:] . dot ( b [ j , k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[26]: True np.dot(3D,4D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,l,X,m) c.shape=(i,j,k,l,m) c[i,j,k,l,m] == a[i,j,:].dot(b[k,l,:,m]) In [27]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 360 ) . reshape ( 3 , 5 , 4 , 6 ) c = np . dot ( a , b ) In [28]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4) b.shape = (3, 5, 4, 6) np.dot(a,b).shape = (2, 3, 3, 5, 6) In [29]: I , J , K , L , M = c . shape In [30]: np . all ([ c [ i , j , k , l , m ] == a [ i , j ,:] . dot ( b [ k , l ,:, m ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M )]) Out[30]: True np.dot(4D,4D) c = np.dot(a,b) a.shape=(i,j,k,X) b.shape=(l,m,X,n) c.shape=(i,j,k,l,m,n) c[i,j,k,l,m,n] == a[i,j,k,:].dot(b[l,m,:,n]) In [31]: a = np . arange ( 120 ) . reshape ( 2 , 3 , 4 , 5 ) b = np . arange ( 360 ) . reshape ( 3 , 4 , 5 , 6 ) c = np . dot ( a , b ) In [32]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4, 5) b.shape = (3, 4, 5, 6) np.dot(a,b).shape = (2, 3, 4, 3, 4, 6) In [33]: I , J , K , L , M , N = c . shape In [34]: np . all ([ c [ i , j , k , l , m , n ] == a [ i , j , k ,:] . dot ( b [ l , m ,:, n ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M ) for n in range ( N )]) Out[34]: True 外積 c = np.outer(a,b) c[i][j] = a.reshape(-1,)[i]*b.reshape(-1,)[j] In [35]: c = np . outer ( a , b ) In [36]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) a.shape = (a1,a2,...,aN) b.shape = (b1,b2,...,bM) In [37]: Na = np . prod ( a . shape ) Nb = np . prod ( b . shape ) In [38]: print ( f \"Na = {Na} \" ) print ( f \"Nb = {Nb} \" ) Na = a1*a2*・・・*aN Nb = b1*b2*・・・*bM In [39]: print ( c . shape ) (Na, Nb) In [40]: np . all ([ c [ i ][ j ] == a . reshape ( - 1 ,)[ i ] * b . reshape ( - 1 ,)[ j ] for i in range ( Na ) for j in range ( Nb )]) Out[40]: True In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-0.html"},{"title":"分子生命科学Ⅲ 第1回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 講義概要 この授業最大の目的は、 「将来僕らが脳を対象とすることになった時に敷居を低くする」 こと。 # タイトル 内容 日付 1 神経系の構造と機能 中枢神経系の構造・機能 末梢神経系の構造・機能 9/26,10/3 2 感覚神経系 感覚系の構成 体性感覚系 視覚系（末梢視覚系・平衡感覚系） 聴覚と平衡感覚（聴覚系・平衡感覚系） 化学感覚系（嗅覚系・味覚系） 10/10,17,24,31 3 運動系 脊髄による運動制御 脳による運動制御 11/14,21 4 脳と行動の化学的制御 11/28 5 摂食行動 12/12 6 脳のリズムと睡眠 脳波 睡眠 概日リズム 12/19 7 精神疾患 統合失調症 感情障害 不安障害 12/26 8 神経変性疾患 アルツハイマー病 パーキンソン病 ALS 1/9 神経系の構造と機能（１） 神経系の機能的構成 神経系は、 感覚系 、 統合系 、 運動系 の３つに分けることができる。 感覚系は、感覚器で何かを感じると、 陽イオン が神経細胞の末端に流れ込み、 活動電位 が上がり、電気的なシグナルとして 中枢神経系(CNS)特に、大脳皮質の感覚野 にこの入力を伝える。 運動系は、逆向きで、脳の運動野からのシグナルが 末梢神経系 に伝わる。 神経系の構成成分 ニューロン(神経細胞,neuron) グリア細胞(glial cells) 血管(blood vessels) ニューロン(neuron) 極性のある細胞で、 細胞体(cell body or soma) 、 樹状突起(dendrites) 、 軸索(axon) からなり、（ほとんどの場合） 活動電位(action potential) を発生する。 膝蓋腱反射(knee-jerk reflex) ニューロンがどのように神経回路に含まれているか、を示す良い例。 医師が膝蓋骨の下の腱を軽く叩くと、大腿四頭筋が伸ばされ、その信号が脊髄まで伝わる。この信号が脊髄で 運動ニューロン に直結しており、運動ニューロンが発火して少し離れた部分の筋肉を収縮させる。その反動で足が上がる。 グリア細胞(glia cells) グリア細胞はニューロン（ヒトでは \\(1\\) - \\(2\\times10&#94;{11}\\) 個）の \\(3\\) - \\(10\\) 倍（マウスだと同数程度）存在し、脳の体積の約半分を占める。 長い軸索と興奮性膜を特徴とするニューロンに対して、グリア細胞の突起は細胞体の周辺に留まり、活動電位を発生しない。 ニューロンの生存や発達、機能発言のための液性環境維持と代謝的支援、神経伝達の調節等を行なっている。 と、ニューロンの補助的な役割だと今までは考えられていたが、最近ではもっと積極的な意味があるのでは無いかと研究されている。 中枢神経系のグリア細胞が下の4種からなる。 アストロサイト(astrocyte)（アストログリア、星状膠細胞） オリゴデンドロサイト(oligodendrocyte)（オリゴデンドログリア、稀突起膠細胞） 上衣細胞(ependymal cell) ミクログリア(microglia)（小膠細胞） アストロサイト(astrocyte)の機能 血液脳関門 を形成してがんが脳に転移しないように防御したりしている。 神経伝達物質の最取り込み（神経伝達物質が出てすぐに取り込まないと、麻薬や覚せい剤のような影響が出てしまう。）。 オリゴデンドロサイト(oligodendrocyte) 中枢神経系 において、 髄鞘（ミエリン・myelin） を形成する。（ 末梢 では シュワン細胞 が髄鞘を形成する。） 上衣細胞(ependymal cells) ミクログリア(microglia) 上衣細胞は脳室と脊髄中心管を覆う一層の上皮性細胞で、脳を脳脊髄液から遮断する（脳脊髄液脳関門(cerebro-spinal fluid brain barrier)） ミクログリアは損傷に際して活性化する脳内の免疫性細胞で貪食能を持つ。アストログリア、オリゴデンドロサイト、上衣細胞が 外胚葉 由来なのに対し、ミクログリアは 中胚葉 由来である。 脳の構造 哺乳動物の脳は、ほぼ共通の構造を持っている。ヒトの特徴は、 連合野 が広いということである。 解剖学用語 解剖学用語 解剖学的切断面 神経系の構成 中枢神経系(CNS: central nervous system) 脳(brain) 大脳(cerebrum) 小脳(cerebellum) 脳幹(brain stem) 脊髄(spinal cord) 末梢神経系(PNS: peripheral nervous system) 体性神経系(somatic nervous system) 脳神経(cranial nerve) 脊髄神経(spinal nerve) 自律神経系(autonomic nervous system) 小脳(cerebellum) 脳幹（延髄・橋・中脳・間脳）の背後に位置する。 大脳や脊髄と広範な連絡を持つ運動制御中枢 言語や思考などの高次脳機能に関与 小脳の 同 側の身体の運動に関与 脳幹(brain stem) 間脳→中脳→橋→延髄からなり、上方で間脳に、下方で脊髄に連なる（狭義では間脳を含めない）。 大脳から脊髄・小脳への情報、逆に脊髄・小脳から大脳への情報を中継 呼吸、意識、体温調節等の生命維持機能を制御 （大脳・小脳の損傷では生存できるが、脳幹の損傷は通常早急な死に至る） 錐体交叉 脳の運動ニューロンの軸索が延髄の後ろで一旦交叉（ 錐体交叉 ）して反対側にいっているから、反対側の機能がうまく制限できなくなる。 一方で 小脳 は同側なので、そのようなことは起こらない。 脊髄(spinal cord) 脊髄は脊柱管にあり、延髄に続いて錐体交叉下端より始まり、脊髄円錐にて終わる。 皮膚・関節・筋肉から脳への情報、逆に脳からの情報を伝える主経路 末梢神経の脊髄神経で身体と通ずる。 脊髄に入る情報を運ぶ軸索は 後根(dorsal root) に含まれ、脊髄から出ていく情報を運ぶ軸索は 前根(ventral root) に含まれる。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html"}]};