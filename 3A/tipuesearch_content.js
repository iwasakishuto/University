var tipuesearch = {"pages":[{"title":"デジタルカメラ系","text":"講師： 相澤清晴 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 講義内容（相澤先生） 入力・カメラ系：デジタルカメラでの撮像過程 表色系 フィルタリング・画像復元 特徴抽出(Global features, Local features, Deep features) 画像符号化 デジタルカメラ系 ポイントは、 「空間方向の標本化」 と 「色信号の量子化」 人間の眼と電子の眼の ダイナミックレンジ は、 人の視覚：8桁（星空〜太陽光下） フィルム：4桁 CCD,CMOS：3桁 デジタルカメラ構造 CMOSセンサー・CCDセンサー CMOS(Complementary Metal Oxide Semiconductor・相補性金属酸化膜半導体)センサー は、 CCD(Charge-Coupled Device)センサー と同じように、光を感じて電気信号に変える半導体センサーである。 CMOSセンサーには 受光素子と電気信号を増幅するアンプがたくさん並んでついている ため、CCDセンサーに比べて低い電圧で動作し、読み出しを高速化することが容易である。 More: キヤノン：技術のご紹介 | サイエンスラボ CMOSセンサー デモザイキング 単板式（↔︎3板式） カメラは画素ごとに 「 R ・ G ・ B 」 のどの色を読み取るかが決まっており、その並び方を ベイヤー配列 と呼ぶ。 この場合、欠損した画素値を補完する必要がある。 このような画素ごとに色チャネルが異なる1枚のグレースケール画像（モザイク状のカラー画像）から1枚のRGBカラー画像を再構成する処理を （カラー）デモザイキング と呼ぶ。 周囲の色情報から線形補完する バイリニア補間 や、エッジの方向を判別して、滑らかに変化する方向のが措置だけを用いて補完する エッジセンシング補完 などがある。 3板式 ダイクロイックプリズム を用いて入射光を3つの波長帯域に分解して、それぞれを専用の撮像素子で撮像する。 最初の反射面は青の波長帯域だけを反射して残りの波長帯域は通過、次の反射面は赤の波長帯域だけを反射して緑の波長帯域を通過、といった感じ。 高画質なカラー画像を撮影できるが、レンズ光学系と撮像素子の間にダイクロイックプリズムを配置する必要があることと、3つの撮像素子が必要なことから、コストやカメラサイズの面では不利な場合もある。 放送や取材などのための業務用のカメラではこちらが使われる。 コントラストAF コントラストは、 「画像のヒストグラムの分布の広がり」 のこと。画素値の最大値を \\(I_{\\max}\\) 、最小値を \\(I_{\\min}\\) とすると、以下のような求め方がある。 $$\\begin{cases}\\begin{aligned}C_1 &= I_{\\max}-I_{\\min}\\\\C_2 &= \\left(I_{\\max}-I_{\\min}\\right)/\\left(I_{\\max}+I_{\\min}\\right)\\end{aligned}\\end{cases}$$ いずれの求め方でも画像中に1画素でも極端に大きな（小さな）画素が含まれると、画像全体から受ける印象は同じにも関わらずコントラストが異なってしまう。このため、 頻度が一定値よりも小さな画素値を考慮しない などの工夫がある。 コントラストAF(Auto Focus) は、撮像素子に映った映像をもとに、ピントレンズを動かしながら 明暗差（コントラスト） が大きなところを探してピントを合わせる方式。 撮像素子とAF用センサーを兼用できるのでカメラ本体の 小型化が可能 となるため、コンパクトデジカメで広く使われる方式である。 （スマホでも使われている。） レンズを動かして （フォーカスを動かしながら） AFエリアの輝度を把握しないといけないので、後述の位相差AF方式に比べて、ピント検出に時間がかかる 位相差AF 位相差AF は、レンズから入った光を2つに分けて専用のセンサーへ導き、結像した2つの画像の間隔からピントの方向と量を判断する方式。 コントラストAFに比べると、レンズを動かしながらピントを探る必要がないので 高速にピント合わせを行うことができる。 専用センサーとレンズから入った光を撮像素子と専用センサーへ分岐させる仕組みが必要となるために カメラ本体の小型化が難しい。 AE&AGC AE: Auto Exposure.自動露出。露出（絞り値とシャッター速度の組み合わせ）を自動で決定する機能のこと。 AGC: オートゲインコントロール(Auto Gain Control)。撮影場所が薄暗い場合などに、光を増幅し、明るい映像に調整する機能。この値を大きくすればするほど、より暗い場所を明るく撮影できるが、その分ノイズが増える。 画像処理 \\(\\gamma\\) 補正 デジタル画像を表示する際、それぞれに色情報の伝送を行いますが各機器には固有の発色特性があり、入力された色情報をそのまま表示することが出来ない。 このとき生じる誤差を \\(\\gamma\\) 特性 と呼び、画像を自然の色に近くなるよう輝度や彩度の誤差を修正する機能を \\(\\gamma\\) 補正 と呼ぶ。 AWB（オートホワイトバランス） 異なる照明下でも、白が白に写るような色の調整、赤と青の利得調整をすることが多い。 照明とカメラの温度関係によって、画像に 青みがかかったり 、 赤みがかかったり する。 白い対象を写し、白と見えるようにバランス調整を行う。 あらかじめ、白熱灯、蛍光灯、太陽光などの何種類かの補正係数を求めておき、切り替えて使う。 心理学の世界では 灰色世界仮説 というものもある。 非常に難しい。綺麗に解決できれば有名になれるXD AS（オートスラビライゼーション） 手ぶれ補正 揺れの検出： 映像〜動きベクトル センサ〜角速度ベクトル 揺れの補正： 映像の切り出し 可変頂角プリズム（光軸の変化） 撮像デバイス駆動 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-8.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-8.html"},{"title":"3次元空間情報の取得と処理","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 大きく分けて2種類ある。 アクティブ法 ：光やレーザーなど、エネルギーを当てて反応を観測。 パッシブ法 ：カメラなど、エネルギーを放出しないもののみを使う。 アクティブ法 手法 説明 特徴 time-of-flight法(ToF) 光を照射して戻るまでの時間から算出。直接は計算できないので、変調をかけて位相差等から計算する。 （計算可能な範囲が指定されるのはこの為。） 高精度だが、時間がかかる。そのため、動物体に弱い。 XBox2(Microsoft)のKinect2というコントローラや自動運転用のLIDARなどで使われている。 スリット光照射法 線状のレーザー光等を照射し、線の歪みから計算する。（→ エポピーラ幾何学 p.312 を参照） Structured light 法 細かさの異なる市松模様（チェッカーボードパターン）や、パターンが既知のランダムドット等を照射し、位置ずれから計算 XBoxのKinectで使われていた。 パッシブ法 手法 説明 ステレオ法 複数のカメラを用いて、見え方の違いから奥行推定 平行ステレオ法 近くのものは大きくズレ、遠くのものはズレない。正確には 以下 照度差ステレオ法 複数の見え方があれば良いので、カメラを1台にして照明を変化させても良い。詳細は 以下 Shape-from-motion(SfM) 首里城プロジェクトや \"Building Roma in a Day\" などで使用されている。詳細は 以下 ) 平行ステレオ法 物体の3次位置：$(X,Y,Z)$ 2カメラの距離：$b$ それぞれのカメラで点 $(X,Y,Z)$ が見えている画素位置 $(u,v),(u&#94;{\\prime},v&#94;{\\prime})$ イメージセンサのピクセル間隔：$\\delta$（縦・横とも） カメラの焦点距離：$f$ 画像面と光軸の交点が画像座標原点 このとき、視差（$=u-v$）がわかると、奥行き情報 $Z$ がわかる。なお、視差は ブロックマッチング法 等で見つける。 照度差ステレオ法 最も簡単な反射モデル （均等拡散反射のみ。鏡面反射なし。） で行う。 $$\\text{Lambert model: }I_x\\left(\\text{Brightness}\\right)=\\rho L\\mathbf{n}\\cdot\\mathbf{S} = \\rho L \\cos\\theta$$ $\\rho, \\mathbf{S},L$ は予め知ることができる。 未知なのは、$\\mathbf{n} = \\left(n_x,n_y,n_z\\right)$ の3変数のみ。（$n_z = \\sqrt{1-\\left(n_x&#94;2+n_y&#94;2\\right)}$ とすると2変数） 2~3通りの位置から観測すると、$\\mathbf{n}$ がわかる。 通常は20~100の位置に照明をおき、最小2乗法で解く。 Shape-from-motion(SfM) 2枚の視点の異なる画像があるとする。 3次元中の点 $p$ がそれぞれの画像中で点 $(u.v),(u&#94;{\\prime},v&#94;{\\prime})$ で見えていたとする。 2つの視点間には回転 $\\mathbf{R}(3\\times3)$ と平行移動 $\\mathbf{t}(3\\times1)$ から成る行列で次の関係がある。 $$ \\left(u&#94;{\\prime},v&#94;{\\prime},1\\right)\\begin{pmatrix} f_{11} & & \\\\ & \\ddots & \\\\&&f;_{33} \\end{pmatrix}\\begin{pmatrix} u\\\\v\\\\1 \\end{pmatrix} = \\mathbf{0} $$ 逆に $\\mathbf{F}$ がわかれば2枚の画像の全てのピクセルで対応がとれているはず。対応点がわかっている点が9点以上あると、最小2乗法で解ける。 しかし、実は $\\mathbf{F}$ は規格化できるので、$8$ パラメータが決まれば残り $1$ つは自動的に決定できる。 （自由度 $8$, eight-point algorithmと呼ぶ。） 今は five-point algorithm まで進化。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-7.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-7.html"},{"title":"動画像処理","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt 動画像は、静止画の集まり（パラパラ漫画） 10~15[fps]あると、人は動画だと感じる。 映画：24[fps] TV、インターネット動画：30~60[fps] ロボット制御に必要な速度（アクチュエーターの反応速度が~ms）：1,000[fps] 自動運転 ~ 10,000[fps] 10[fps] 25[fps] 50[fps] Start Stop → 何をするか？ 動物体の検出・解析 動画の編集 動画の理解・認識 動物体の検出・解析 背景差分・フレーム間差分 【問題】 照明変化（屋外では良く起こる）、背景の変化（木の揺れ等）に弱い。 背景画像をどうやって作るかもポイント。 【統計的背景差分】 各ピクセルで時間的に統計情報を取ってもう少しsmartに背景差分することを考える。背景クラスを $w_b$ 前景クラスを $w_f$ とすると、やることは、$\\left(p\\left(w_f | I(x,y)\\right), p\\left(w_b | I(x,y)\\right)\\right)$ のうち確率の高いクラスを採用する。 ここで、ベイズの定理より、 $$ \\begin{cases} \\begin{aligned} p\\left(w_f | I(x,y)\\right) &= \\frac{p(w_f)p(I\\left(x,y)|w_f\\right)}{p(I(x,y))}\\propto p(w_f)p\\left(I(x,y)|w_f\\right)\\\\ p\\left(w_b | I(x,y)\\right) &= \\frac{p(w_b)p(I\\left(x,y)|w_b\\right)}{p(I(x,y))}\\propto p(w_b)p\\left(I(x,y)|w_b\\right) \\end{aligned} \\end{cases} $$ $p(w_b, w_f)$：その画素が $w_b, w_f$ である事前確率（例：木の上に人や車はいないので、$p_b$ 大, $p_f$：小） $p(I|w_c)$：$w_c$ だった時に、どの程度の確率でその画素値が観測されるか。 動き量の計算 【ブロックマッチング(Block Matching)】 ある時刻 $t$ におけるある領域に最も似ている時刻 $t+1$ の領域を、以下の手法等を用いて探す。 SSD(Sum of Squared Difference) SAD(Sum of Absolute Difference) NCC(Normalized Cross Correlation) 動画像圧縮では、この動きベクトル(motion vector)と差分を符号化することで圧縮を実現。 【オプティカルフロー(optical flow)】 2枚の画像間で、変化が微小だとすると、 $$\\begin{aligned}I(x+\\Delta x, y+\\Delta y, t+\\Delta t) &\\simeq I(x,y,t) + \\frac{\\partial I}{\\partial x}\\Delta x + \\frac{\\partial I}{\\partial y} \\Delta y+ \\frac{\\partial I}{\\partial t} \\Delta t + \\cdots\\\\\\rightarrow I_x\\Delta x + I_y\\Delta y + I_t\\Delta t&\\simeq0\\\\ I_x\\frac{\\Delta x}{\\Delta t} + I_y\\frac{\\Delta y}{\\Delta t} + I_t &= 0\\\\\\left(\\Delta t\\rightarrow0\\right)\\qquad I_xu+I_yv+I &= 0\\\\(u,v) &= \\left(\\frac{dx}{dt},\\frac{dy}{dt}\\right)\\end{aligned}$$ これだけだと、自由度が高すぎて一意に決まらないので、微小領域では動きが滑らかという仮定を置く。（Lucas-Kanada法, 1981） $$\\mathbf{G} = \\left[\\begin{array}{c}I_{x_1} &I;_{y_1} \\\\\\vdots&\\vdots\\\\I_{x_m}&I;_{y_m}\\end{array}\\right],\\quad \\mathbf{f} = \\left[\\begin{array}{c}u \\\\v\\end{array}\\right],\\quad\\mathbf{b} = \\left[\\begin{array}{c}I_{t_1} \\\\\\vdots\\\\I_{t_m}\\end{array}\\right]$$ 上記のように定義し、滑らかさの条件を使うと、 $$\\begin{aligned}\\mathbf{Gf}+\\mathbf{b} &= \\mathbf{0}\\\\\\therefore\\mathbf{f}&#94;{\\ast}&=-\\left(\\mathbf{G}&#94;T\\mathbf{G}\\right)&#94;{-1}\\mathbf{G}&#94;T\\mathbf{b}\\quad \\left(\\because\\text{Least squares}\\right)\\end{aligned}$$ 【DNNによる映像処理】 (x,y,t)の3次元をどう扱うか？ 画像（2次元）と時間の情報を分ける。 3D Convolution：空間情報と時間情報を同時に畳み込む。 仮想3D Convolution：空間情報を畳み込んで、その後時間方向に畳み込む。 動画の編集 In [ ]: 動画の理解・認識 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-6.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-6.html"},{"title":"4.Guided NEST exercises (intermediate)","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Thomas Burns Lecture Material https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-4_Plasticity-and-Learning Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial4.py In [1]: import sys sys . path . append ( \"path/to/library/\" ) Part 1: STDP and its varities Part-2:-Unsupervised-pattern-detection-using-STDP Make a training data NEST-simulation Part 1: STDP and its varities STDP alters the weights of synapses depending on the relative spike timing between the postsynaptic neuron and the presynaptic neuron. _STDP overview (from Sjöström J, Gerstner W (2010) Spike-timing dependent plasticity. Scholarpedia )_ Within some time windows: if \"PRE before POST\" , we get Long-Term Potentiation (LTP) if \"POST before PRE\" , we get Long-Term Depression (LTD) The time windows for LTP and LTD are generally on the order of tens of milliseconds . The LTD window is generally longer than the LTP window. Implementation To implement STDP in spiking neural network models, different STDP rules can be used. In general, different rules result in different distributions of synaptic weights over the course of learning. Examples of such weight distributions are shown below. STDP rules (from Gilson M, Fukai T (2011) Stability versus Neuronal Specialization for STDP. PLoS ONE ) Additive STDP tends to produce competition between synapses but needs to have its weights bound to ensure network stability (e.g. to avoid over-excitation) Multiplicative STDP tends to produce less competition between synapses but owing to its weight-dependent manipulation of synaptic weights does not require artificial bounds. Logorithmic STDP attempts to reconcile the two. Additive STDP rule In the following exercise, we will use the additive STDP rule , sometimes also called the exponential STDP rule : $$ \\Delta w_j= \\begin{cases} a&#94;+ \\cdot e&#94;{\\big( \\dfrac{t_j-t_i}{\\tau&#94;+} \\big)} & \\text{if}\\ t_j \\leq t_i & \\text{(LTP)} \\\\ -a&#94;- \\cdot e&#94;{\\big( - \\dfrac{t_j-t_i}{\\tau&#94;-} \\big)} & \\text{if}\\ t_j > t_i & \\text{(LTD)} \\end{cases} $$ variable Meaning $a&#94;+$ learning rate for LTP $a&#94;-$ learning rate for LTD $t_j$ spike time of the presynaptic neuron $j$ $t_i$ spike time of the postsynaptic neuron $i$ $\\tau&#94;+$ time constant for LTP (ms) $\\tau&#94;-$ time constant for LTD (ms) Using pre-defined paramaters which we will use in the second part of this tutorial , let's plot **\"how the this STDP rule changes weights depending on the timing of presynaptic and postsynaptic spikes.\"** In [2]: import numpy as np import matplotlib.pyplot as plt In [3]: from OIST.tutorial4 import AddSTDP In [4]: add_STDP_paramaters = { 'a_LTP' : 0.03125 , 'a_LTD' : 0.85 * 0.03125 , 'tau_LTP' : 16.8 , 'tau_LTD' : 33.7 } In [5]: model = AddSTDP () model . load_params ( ** add_STDP_paramaters ) In [6]: time_differences = np . linspace ( - 125 , 125 , 1000 ) In [7]: model . simulate ( time_differences ) Exercise 1 What features do you notice in this STDP curve? Experiment with different values in add_STDP_paramaters . How do each of the values change the shape of the STDP curve? How, in a network of neurons, could this STDP rule lead to over-excitation or network instability? The closer the spike timing between the postsynaptic neuron and the presynaptic neuron are, the bigger the influence is. If a becomes larger, the STDP curve expand in the y-axis direction , and if tau becomes larger, the STDP curve shrink in the x-axis direction . When the time difference gets ver close to 0, weight changes will diverge and lead to over-excitation or network instability. Part 2: Unsupervised pattern-detection using STDP In this part of the tutorial we will be replicating the results from [Masquelier et al. (2008) Spike Timing Dependent Plasticity Finds the Start of Repeating Patterns in Continuous Spike Trains. PLoS ONE](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0001377) . (In fact, we already reproduced Figure 2 from their paper in the first part of this tutorial.) Masquelier et al. (2008) create a spiking neural network with 2,000 presynaptic neurons just one postsynpatic neuron. They implement additative STDP in this network, which allows the \"postsynaptic neuron\" to learn to detect the beginning of repeating patterns of spiking activity arriving from the 2,000 presynaptic neurons. Importantly, the presynaptic neurons also have periods of random , non-patterned activity and have additional noisy spiking activity at all times. Let's begin by constructing the spike trains of the 2,000 presynaptic neurons. We will run our simulations for 450s, so we will create 450s worth of spike trains for these neurons. The first step is construct random activity with the following properties: Each presynpatic neuron will emit spikes independently generated by a Poisson process with a variable instantaneous firing rate $r$ $r$ varies randomly beteen $0$ and $90$ Hz. The rate of change in $r$ is modified by $dr$ $dr$ starts at $0$ $dr$ is modified by $ds$, randomly picked from a uniform distribution over $[−360,+360]$ Hz/s. $dr$ is clipped to within $[-1800,1800]$ Hz/s we will also manually add some additional spikes to guarantee that \"in every 50ms time bin, each neuron spikes at least once\" Make a training data In [8]: from OIST.tutorial4 import PoissonProcessGenerator , plotPatternRaster In [9]: poisson_params = { \"min_span\" : 50 , # [ms] \"starting_Hz\" : 54 , # [Hz] \"min_r\" : 0 , # [Hz] \"max_r\" : 90 , # [Hz] \"min_ds\" : - 3.6e-1 , # [Hz/ms] \"max_ds\" : 3.6e-1 , # [Hz/ms] \"min_dr\" : - 1.8 , # [Hz/ms] \"max_dr\" : 1.8 , # [Hz/ms] \"segment_length\" : 50 , # [ms] Length of 1 Presynaptic spiking segment length. } In [10]: seed = 0 In [11]: num_presynaptic_neurons = 2000 # Number of the presynaptic neurons. simulation_length = 1000 # [ms] In [12]: poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) In [13]: spikes = poisson_generator . generate_spikes ( simulation_length , num_presynaptic_neurons , seed = seed ) Processing Time: 0.708[s] Now we will Divide the presynaptic spiking activity into segments of 50ms Select a random 50ms segment to be considered as the \"pattern\" Copy and paste this pattern across the raster plot in a certain proportion of segments. Add 10Hz Noises to all neurons at all times. Divide and Select \"Pattern\" In [14]: poisson_generator . select_segment ( seed = seed ) Spikes divided into 20 segments. 13-th segment was selected as a Pattern. In [15]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( spikes , ax = ax ) plt . tight_layout () plt . show () Copy and Paste this \"Pattern\" In [16]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [17]: pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) Number of spikes added: 250000.0 Spikes are saved as `self.pattern_repeated_spikes`. Add Poisson Noises In [18]: frequency = 10 # [Hz] In [19]: noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes are saved as `self.noise_added_spikes`. In [20]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) plt . tight_layout () plt . show () Firing Rates In [21]: from OIST.tutorial4 import plotFiringRates In [22]: fig = plt . figure ( figsize = ( 12 , 4 )) fig = plotFiringRates ( noise_added_spikes , fig = fig ) plt . show () Check the Repeated Position In [23]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) ax = plotPatternRaster ( output_identities , cmap = \"RdGy_r\" , ax = ax , alpha = 0.7 ) plt . tight_layout () plt . show () With these paramaters, we can embed a repeating pattern within some pseduo-random, spontaneous activity. However, learning takes time! And we have only been simulating 1s of activity. In this task, the authors reported they needed 13.5s of activity (or 700 pattern presentations) for the neuron to show signs of learning to recognise the pattern. Figure 4 from Masquelier et al. 2008: Overview of the 450 s simulation. Here we plotted the membrane potential as a function of simulation time, at the beginning, middle, and end of the simulation. Grey rectangles indicate pattern presentations. (a) At the beginning of the simulation the neuron is non-selective because the synaptic weights are all equal. It thus fires periodically, both inside and outside the pattern. (b) At t≈13.5 s, after about 70 pattern presentations and 700 discharges, selectivity to the pattern is emerging: gradually the neuron almost stops discharging outside the pattern (no false alarms), while it does discharge most of the time the pattern is present (high hit rate), here even twice (c) End of the simulation. The system has converged (by saturation). Postsynaptic spike latency is about 4 ms. Hit rate is 99.1% with no false alarms (estimated on the last 150 s). It is therefore necessary to use some pre-computed spontaneous activity prepared earlier, found in the file spont_100s_alt.npy . It contains 100s of pseduo-random, spontaneous activity for us to use in our simulations. Warning, it is a large file at ~1.6GB! $ wget --content-disposition https://www.dropbox.com/sh/p9ml6l402znbzmy/AAA2LP7W1bcvwSgYnmx9ahyga?dl = 0 & preview = spont_100s_alt.npy # Pattern1. Download pre-computed files. pre_spikes_wrepeats_100s = np . load ( \"path/to/spont_100s_alt.npy\" ) poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) poisson_generator . memorize ( pre_spikes_wrepeats_100s , repeated = False ) # Pattern2. Make by myself. simulation_length_100s = 100 _000 num_presynaptic_neurons = 2 _000 poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) pre_spikes_wrepeats_100s = poisson_generator . generate_spikes ( simulation_length_100s , num_presynaptic_neurons , seed = seed ) In [24]: # Pattern.1 pre_spikes_wrepeats_100s = np . load ( \"path/to/spont_100s_alt.npy\" ) poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) poisson_generator . memorize ( pre_spikes_wrepeats_100s , repeated = False ) [Before] simulation length: None Number of the presynaptic neurons: None Memorizing... [After] simulation length: 100000 Number of the presynaptic neurons: 2000 In [25]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [26]: # Repeat & Paste. poisson_generator . select_segment ( seed = seed ) pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes divided into 2000 segments. 685-th segment was selected as a Pattern. Number of spikes added: 25000000.0 Spikes are saved as `self.pattern_repeated_spikes`. Spikes are saved as `self.noise_added_spikes`. In [27]: repeated_idxes = np . any ( poisson_generator . repeated_position , axis = 1 ) In [28]: print ( f \"Pattern shape = {poisson_generator.pattern_spikes.shape} \" ) print ( f \"Poisson Process shape = {noise_added_spikes.shape} \" ) Pattern shape = (2000, 50) Poisson Process shape = (2000, 100000) Now we are ready to use these spike trains to train a postsynaptic neuron! ... or are we? Creating a model conceptually or mathematically is just the first step. Next we have to figure out how to simulate it computationally. NEST simulation In [29]: import nest NEST contains many STDP synapse rules. Which one should we use? We said earlier that we will use an additive/exponential STDP rule, however that is not the only parameter to consider. Another consideration is \"how to pair two continuous spikes trains\" such that we can apply STDP appropriately to all presynaptic spikes $j$ coming to the postsynaptic neuron $i$. A list of STDP models implemented in NEST can be found here: https://nest-simulator.readthedocs.io/en/latest/models/stdp.html The following models correspond to the below figure for pairing of spikes for STDP: stdp_nn_symm_synapse (panel A) stdp_nn_pre-centered_synapse (panel B) stdp_nn_restr_synapse (panel C) Figure 7 from Morrison et al. 2008 . Examples of nearest neighbor spike pairing schemes for a presynaptic neuron j and a postsynaptic neuron i. In each case, the dark gray indicate which pairings contribute toward depression of a synapse, and light gray indicate which pairings contribute toward potentiation. Symmetric interpretation : each presynaptic spike is paired with the last postsynaptic spike, and each postsynaptic spike is paired with the last presynaptic spike (Morrison et al. 2007). Presynaptic centered interpretation : each presynaptic spike is paired with the last postsynaptic spike and the next postsynaptic spike (Izhikevich and Desai 2003; Burkitt et al. 2004: Model II). Reduced symmetric interpretation : as in c but only for immediate pairings (Burkitt et al. 2004: Model IV, also implemented in hardware by Schemmel et al. 2006) [Masquelier et al. (2008)](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0001377) uses something akin to panel C In the (unreleased) NEST 3.0 there is a stdp_nn_restr_synapse model which is quite similar. (However, we are using NEST 2.X. now.) After going through the available STDP models, none appeared to be capable of replicating the paper due to this paper requiring a particular spike-pairing method which doesn't seem to be represented in any of the currently-implemented STDP models in NEST. Therefore, we need to make some changes to our experiment! But before we do that, let's simulate the current model using some different synapses which are available to us. Start with the static synapse and then experiment with some STDP synapse models to see what goes wrong and \"how different paramaters affect the results.\" # Check what model we can use. nest . Models ( 'synapses' ) In [30]: from OIST.tutorial4 import NeuronalNetwork In [31]: simulation_times = 1000 In [32]: spike_indicies = [ np . where ( is_spike )[ 0 ] for is_spike in noise_added_spikes == 1 ] In [33]: STDP_paramaters = { 'a_LTP' : 0.03125 , 'a_LTD' : 0.85 * 0.03125 , 'tau_LTP' : 16.8 , 'tau_LTD' : 33.7 , } In [34]: model = NeuronalNetwork ( ** STDP_paramaters ) In [35]: model . build ( spike_indicies ) Created 2000 spike generators. Created 2000 parrot neurons. Created 1 post_neuron. Created spike detector. Created voltmeter. In [36]: model . compile ( synapse_model = \"static\" , ex = 1 ) Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: static_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [37]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [38]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [39]: model . compile ( synapse_model = \"standard\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [40]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [41]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [42]: model . compile ( synapse_model = \"triplet\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_triplet_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [43]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [44]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [45]: model . compile ( synapse_model = \"FACETS\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_facetshw_synapse_hom Connected post neuron to spike detector Connected voltmeter to post neuron In [46]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [47]: ax = model . plotWeights ( repeated_idxes ) plt . show () Couldn't recognize the patterns. Exercise 2 What are some general problems with the STDP synapses? How do these synapse models cause failure of our model to replicate the original paper? What can we do to the task or the model which might help? In [48]: model = NeuronalNetwork ( ** STDP_paramaters ) model . build ( spike_indicies ) Created 2000 spike generators. Created 2000 parrot neurons. Created 1 post_neuron. Created spike detector. Created voltmeter. In [49]: gaussian_params = { \"simulation_length_pulses\" : 10000.0 , \"proportion_of_neurons_pulsing\" : 0.5 , \"number_of_pulses\" : 50 , \"spikes_per_pulse\" : 5 , \"std_spikes_per_pulse\" : 5.0 } In [50]: # Overwrite the spike generator. noise_rate = 35.0 # firing rate of Poisson neurons (Hz) model . spike_generator = nest . Create ( \"poisson_generator\" , model . num_presynaptic_neurons , params = { 'rate' : noise_rate }) In [51]: # Add the gaussian Packets as an additional input. model . addGaussianPackets ( ** gaussian_params ) In [52]: model . compile ( synapse_model = \"standard\" , ex = 2 ) Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [53]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [54]: ax = model . plotWeights ( repeated_idxes ) plt . show () Difficult to find a best parameter :( → How about using Bayesian optimization ?? 【Challenge Exercise】 Consider whether and how your network could learn multiple patterns, e.g. would you need to add more post-synaptic neurons to the network? Hint: see [Masquelier et al. (2009) Competitive STDP-Based Spike Pattern Learning. Neural Computation](https://www.ncbi.nlm.nih.gov/pubmed/19718815) . In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-4.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-4.html"},{"title":"3.Guided NEST exercises (basic)","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Milena Menezes Carvalho Lecture Material https://github.com/oist-ncbc/skill-pill-plus/blob/master/Tutorial-3_Synapses-and-Networks Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial3.py In [1]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Synapses Neuronal connectivity Neurons are connected at specific sites called synapses . Usually, the axon of a presynaptic neuron will make contact with the dendrite (or soma ) of a postsynaptic in what's called a chemical synapse : neurotransmitters are transferred via the tiny gap between the two neurons ( synaptic cleft ) thanks to biochemical processes. This generates a change in membrane potential at the postsynaptic site, called postsynaptic potential . Electrical synapses , also known as gap junctions , can also be present -- in this case, specialized proteins make a direct electrical connection between neurons. [1] from [2] In this tutorial we will connect two or more neurons in NEST to create our first neuronal networks. First, we will learn the basic commands following [3] and [4] Then apply these to a well-known balanced network known as the Brunel network . By the end of this tutorial, you should be able to understand that a network's stability and activity behavior is deeply influenced by its parametrization. Sources: [1] Wulfram Gerstner and Werner M. Kistler, \"Spiking Neuron Models\". Cambridge University Press, 2002 [2] Peter Dayan and L. F. Abbot, \"Theoretical Neuroscience: Computational and Mathematical Modeling of Neural Systems\". The MIT Press, 2001 [3] PyNEST tutorial: Part 2, Populations of Neurons [4] PyNEST tutorial: Part 3, Connecting Networks with Synapses Synapse types The simplest synapse type is the static_synapse . The synaptic weight , a measure of how strong is the influence of the presynaptic neuron on the postsynaptic neuron, is static , i.e. does not change over time. The synaptic transmission, however , is not instantaneous. The synaptic delay is defined as the \"time\" between the presynaptic neuron activation ( action potential ) and the moment the postsynaptic potential is generated. In NEST, we can check the default values for all parameters using the GetDefaults function: nest.GetDefaults('static_synapse') The common model which is more suit to real biological event is spike-time dependent plasticity . The synaptic weight changes according to the temporal order between pre and postsynaptic spike times. In NEST, the most common STDP mechanisms are implemented in stdp_synapse . The change for normalized synaptic weights is described by $$ \\begin{aligned} \\Delta w &= \\begin{cases} \\lambda f {-}(w) \\times K -(\\Delta t) & \\text{if $\\Delta t \\leq 0$,} \\ \\lambda f {+}(w) \\times K +(\\Delta t) & \\text{if $\\Delta t > 0$,} \\end{cases}\\ \\Delta t &\\equiv t {post} - t {pre}\\ K {(+,-)}(\\Delta t) &= \\exp(-|\\Delta t| / \\tau {(+,-)}) \\end{aligned} $$ The update functions $$f_{+}(w) = (1-w)&#94;{\\mu_{+}} \\text{ and } f_{-}(w) = \\alpha w&#94;{\\mu_{-}}$$ create synaptic potentiation (stronger weights) when causal spiking is detected ($\\Delta t > 0$), otherwise generating synaptic depression (weaker weights). This rule is also known as temporally asymmetric Hebbian plasticity and has been thoroughly studied under different parametrizations. (below) STDP Type Parametrization Ref. multiplicative STDP $\\mu_{+}=\\mu_{-}=1.0$ [6] additive STDP $\\mu_{+}=\\mu_{-}=0.0$ [7] Guetig STDP $\\mu_{+}=\\mu_{-}=[0.0, 1.0]$ [5] van Rossum STDP $\\mu_{+}=0.0, \\mu_{-} = 1.0$ [8] Sources: [5] Guetig et al. (2003). Learning input correlations through nonlinear temporally asymmetric hebbian plasticity. Journal of Neuroscience, 23:3697-3714 DOI: https://doi.org/10.1523/JNEUROSCI.23-09-03697.2003 [6] Rubin J, Lee D, Sompolinsky H (2001). Equilibrium properties of temporally asymmetric Hebbian plasticity. Physical Review Letters, 86:364-367. DOI: https://doi.org/10.1103/PhysRevLett.86.364 [7] Song S, Miller KD, Abbott LF (2000). Competitive Hebbian learning through spike-timing-dependent synaptic plasticity. Nature Neuroscience 3(9):919-926. DOI: https://doi.org/10.1038/78829 [8] van Rossum MCW, Bi G-Q, Turrigiano GG (2000). Stable Hebbian learning from spike timing-dependent plasticity. Journal of Neuroscience, 20(23):8812-8821. DOI: https://doi.org/10.1523/JNEUROSCI.20-23-08812.2000 Introduction: synapses in NEST Check the synapse types you can call Found in the following link: [9] NEST Docs: All synapse models Running the following command: import nest nest . Models ( 'synapses' ) For STDP synaptic models, the time constant of the depressing window of STDP ( tau_minus ) is exceptionally a parameter of the post-synaptic neuron. nest . Create ( \"iaf_psc_alpha\" , params = { \"tau_minus\" : 30.0 }) However, tau_plus is a synapse parameter. nest . SetDefaults ( \"stdp_synapse\" ,{ \"tau_plus\" : 15.0 }) Customized variants of a synapse model can be created using CopyModel() , and can be used anywhere that a built-in model name can be used. nest . CopyModel ( \"stdp_synapse\" , \"layer1_stdp_synapse\" ,{ \"Wmax\" : 90.0 }) Connectivity rules for multiple neurons can be defined. Please check [3] to learn more details about creating and connecting neuron populations. Synaptic parameters can also be randomly distributed by assigning a dictionary to the parameter. This should contain the target distribution and its optional parameters, as listed below: Distributions Keys normal mu , sigma lognormal mu , sigma uniform low , high uniform_int low , high binomial n , p exponential lambda gamma order , scale poisson lambda Synapse information can be retrieved from its origin, target and synapse model using GetConnections() : Example. num_nurons = 10 epop1 = nest . Create ( \"iaf_psc_delta\" , num_nurons , params = { \"tau_m\" : 30.0 }) epop2 = nest . Create ( \"iaf_psc_delta\" , num_nurons ) conn_dict = { \"rule\" : \"fixed_indegree\" , \"indegree\" : 5 } syn_dict = { \"model\" : \"stdp_synapse\" , \"alpha\" : 1.0 } nest . Connect ( epop1 , epop2 , conn_dict , syn_dict ) neuron = nest . Create ( \"iaf_psc_alpha\" ) syn_dict = { \"model\" : \"stdp_synapse\" , \"alpha\" : { \"distribution\" : \"uniform\" , \"low\" : 0.1 , \"high\" : 2. }, \"weight\" : { \"distribution\" : \"uniform\" , \"low\" : 0.5 , \"high\" : 5. }, \"delay\" : 1.0 } nest . Connect ( epop1 , neuron , \"all_to_all\" , syn_dict ) # Synapse information can be retrieved print ( nest . GetConnections ( epop1 , target = epop2 , synapse_model = \"stdp_synapse\" )) # We can then extract the data using `GetStatus()`. # Specific information can be retrieved by providing a list of desired parameters. conns = nest . GetConnections ( epop1 , synapse_model = \"stdp_synapse\" ) conn_vals = nest . GetStatus ( conns , [ \"target\" , \"weight\" ]) Networks Example1: connecting two neurons In this example, we will create and connect two neurons, A and B. Neuron A is of type iaf_psc_delta : Receives external current $I_e = 376.0 pA$. This current is sufficient to elicit a spike every $\\approx$ 50ms. Neuron B is solely connected to neuron A: Can only spike if the input from A is strong enough. Let's observe how B can be influenced by A. In [2]: import nest import matplotlib.pyplot as plt In [3]: from OIST.tutorial3 import NeuronA , NeuronB , plotMultipleNeurons In [4]: # First, verify the activity of neuron A. nest . ResetKernel () modelA = NeuronA () modelA . build () In [5]: ax = plotMultipleNeurons ( modelA ) plt . show () Now let's create neuron B as iaf_psc_delta with no external current: In [6]: modelB = NeuronB () modelB . build () In [7]: ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Neuron B is still inactive. We need to connect both neurons: In [8]: nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) In [9]: ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Q. Suggest at least 3 alterations we can make in this example to elicit spiking activity from B. Lower the threshold V_th : nest.SetStatus(neuron_B,{'V_th': -69.}) # default: -55 Higher thr current I_e Highre the weights between nuron_A and nuron_B In [10]: # Lower the threshold V_th. nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , V_th =- 69. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () In [11]: # Higher the current I_e. nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , I_e = 350. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () In [12]: # Highre the weights between \"nuron_A\" and \"nuron_B\" nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 14.9 }) nest . Simulate ( 300. ) nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 15. }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Because of the shape of B, and scale of observation, we couldn't find the spikes but neuron B also spikes after connection weight increased. Q. Check what happens if the neuron model is different: for example, change `iaf_psc_delta` to `hh_psc_alpha`. In [13]: # Lower the threshold V_th. nest . ResetKernel () modelA = NeuronA ( model_name = \"hh_psc_alpha\" ) modelA . set_params ( \"neuron\" , I_e = 250. ) modelA . build () modelB = NeuronB ( model_name = \"hh_psc_alpha\" ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Q. connect B to A reciprocally and check their dynamics. How can you describe their behavior? In [14]: nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , V_th =- 65. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 5. }) nest . Connect ( modelB . neuron , modelA . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 1 }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Example2: Random Balanced Network We will now simulate a network of integrate-and-fire (IAF) , excitatory and inhibitory spiking neurons connected randomly with fixed weights . This network (called Brunel Network ) was proposed and studied in [10]: The network is composed of excitatory neurons (80%) inhibitory neurons (20%) connection probability $\\epsilon = 10\\%$ ( epsilon ). All neuron types can be connected (E$\\rightarrow$E, E$\\rightarrow$I, I$\\rightarrow$E and I$\\rightarrow$I). Neurons receive external input from oustide the network modeled by a Poisson spike train generator [11] rate nu_ex , $\\nu_{ex} = \\eta * \\nu_{th}$ threshold rate $\\nu_{th}$ ( nu_th ) is calculated using $$\\nu_{th} = \\frac{\\theta}{J * \\text{CE} * \\tau_{m}}$$ In general, the interspike intervals drawn are exponentially distributed. The synaptic input current on each neuron is calculated as $$I_i(t) = \\tau \\sum_j J_j \\sum_k \\delta(t-\\delta-t_j&#94;k)$$ Sum over $j$ covers all synapses (internal and external to the network) Sum over $k$ covers all spikes arriving at times $t&#94;k_j$ with delay $\\delta$ ( delta ). This simple postsynaptic current model is called delta synapse , in which stimulation is applied in a single point in time for simplicity using the Dirac delta function . In biological systems, synaptic models are diverse and can vary within the same neuron depending on the function of the synapse, for example. In NEST, we will create a network of iaf_psc_delta neurons connected using static_synapse with weights $J_E$ and $J_I = -g*J_E$. We will study how this network changes its behavior depending on its parametrization. Sources: [10] Brunel N (2000). Dynamics of sparsely connected networks of excitatory and inhibitory spiking neurons. Journal of Computational Neuroscience 8, 183-208. [11] Poisson distribution m In [15]: from OIST.tutorial3 import BrunelNetwork In [16]: model = BrunelNetwork () In [17]: # Model parameters. model . __dict__ Out[17]: {'g': 5.0, 'eta': 2.0, 'delay': 1.5, 'dt': 0.1, 'epsilon': 0.1} $$ \\begin{aligned} \\begin{cases} \\epsilon &= 10\\%\\\\ v_{ex} &= \\eta v_{th}\\\\ \\delta\\\\ J_I &= -gJ_E \\end{cases} \\end{aligned} $$ In [18]: neuron_params = { \"C_m\" : 1.0 , \"tau_m\" : 20.0 , \"t_ref\" : 2.0 , \"E_L\" : 0.0 , \"V_reset\" : 0.0 , \"V_m\" : 0.0 , \"V_th\" : 20.0 } In [19]: model . build ( N_total_neuron = 12500 , N_rec_volt = 5 , N_rec = 50 , J = 0.1 , ** neuron_params ) Number of neurons : 12500 Excitatory: 10000 Inhibitory: 2500 Number of synapses: 15625000 Excitatory: 12500000 Inhibitory: 3125000 Building time : 4.58 s In [20]: model . simulate ( T = 900. ) Simulation time : 900.0 ms Processing time : 56.00 s Completed. Please use following methods to plot results. - `plotVoltageEx(n)`, `plotVoltageIn(n)` - `plotVoltageCompare(idx=0)` - `plotRaster()` Below we plot the voltage, raster, and activity rate of the excitatory and inhibitory populations. In [21]: model . plotVoltageEx () \u001b Membrane potential plots [Excitatory Neurons] In [22]: model . plotVoltageIn () \u001b Membrane potential plots [Inhibitory Neurons] In [23]: model . plotVoltageCompare ( 0 ) \u001b Membrane potential Compaison. In [24]: model . plotRaster () \u001b Raster Plot.(N=50) One of the main findings in Brunel's paper is the different activity states that can be observed in this network depending on $g$: the ratio between inhibitory and excitatory synaptic weights $\\eta$: the external excitation rate relative to the threshold rate $\\delta$: the synaptic delay $\\epsilon$: the connection probability . By altering these arguments, he observed different collective behaviors identified as asynchronous irregular (AI) asynchronous regular (AR) synchronous irregular (SI) synchronous regular (SR). These behaviors are exemplified in the images below. from [1] Q. Use the graphs as a starting point. Try to elaborate on how each of the four parameters affects the state of this network. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-3.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-3.html"},{"title":"2.Introduction to NEST Simulator","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Gastón Sivori Lecture Material https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-2_NEST-Introduction Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial2.py In [1]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Agenda Installation leaky integrate-and-fire (LIF) HH-neuron model Connecting nodes with different inputs F-I curve Installation Documentation: https://nest-simulator.readthedocs.io/en/latest/installation/ Github: https://github.com/nest/nest-simulator/tree/v2.18.0 Memo(What I did) pip $ pip install python-nest ※ This `nest` has lack of some module (ex. `nest.Create`) cmake # Install dependencies via Homebrew $ brew install gcc cmake gsl open-mpi libtool $ mkdir NEST $ cd NEST # Clone source files from Github. $ wget --content-disposition https://github.com/nest/nest-simulat or/archive/v2.16.0.tar.gz $ tar zxf nest-simulator-2.16.0.tar.gz $ mkir bld $ cd bld # Configure and build NEST inside the build directory # (replacing gcc-9 and g++-9 with the GCC compiler versions you installed with brew). # You can check it with `g++ -v` or `gcc -v` command. $ cmake -DCMAKE_INSTALL_PREFIX:PATH = . \\ -DCMAKE_C_COMPILER = gcc-9 \\ -DCMAKE_CXX_COMPILER = g++-9 \\ ../nest-simulator-2.16.0/ $ make -j4 $ make install $ make installcheck ※ This `nest` also has lack of some module (ex. `nest.Create`) Anacond # If you want to use jupyter notebook, please include \"jupyter\" $ conda create --name skill-pill-plus -c conda-forge nest-simulator python jupyter # path/to/activate is like \"/Users/iwasakishuto/.pyenv/versions/anaconda3-5.0.1/bin/activate\" $ source skill-pill-plus # Activated!! ( skill-pill-plus ) $ If you want to use this environment on the jupyter notebook, please follow this. $ pip install environment_kernels $ jupyter notebook --generate-config $ vi ~/.jupyter/jupyter_notebook_config.py # Add these line >>> c.NotebookApp.kernel_spec_manager_class = 'environment_kernels.EnvironmentKernelSpecManager' >>> c.EnvironmentKernelSpecManager.conda_env_dirs =[ '/Users/iwasakishuto/.pyenv/versions/anaconda3-5.0.1/env' ] $ jupyter notebook # If successful, you can chose your ideal environment at [Kernel → Change kernel] # NOTE: You should install `jupyter` in the environment. # If you not, please run `conda install --name \"Your Environment Name\" jupyter` ※ This `nest` has all modules :) In [2]: import nest import numpy as np import matplotlib.pyplot as plt # If you need to import other packages like scipy or scikit-learn # You should import these \"before\" nest!! For NEST to simulate different experiments, its kernel (core functionality) needs to be reseted ( nest.ResetKernel() ) for every new simulation. Please remember to run this code before running each simulation. About NEST Conceptually, neural networks consists of neurons and connections . Nodes can be neurons , sub-networks or devices inside the NEST framework. We will use devices to stimulate neurons and to measure their membrane potential. Sub-networks , on the other hand, are arrangements of neurons whose parameters may be modified as a group. We will look at sub-networks in the following lectures. leaky integrate-and-fire (LIF) For now, we will focus on constructing a leaky integrate-and-fire (LIF) neuron with delta-shaped synaptic currents: In this figure, a delta-shaped pulse $\\delta(t-t_j&#94;f)$ from neuron $j$ is being transmitted along its axon until it reaches neuron $i$'s dendrites through a synapse. Synapses are modelled as low-pass RC circuit filters which output a current $\\alpha(t-t_j&#94;f)$. These presynaptic currents reach the soma as an input current $I(t)$ which charges the capacitor $C$ (integration) while some of it leaks out through the resistance $R$. ($I(t) = I_R + I_C$) The electrical components here represent a circuit modelization of the biological mechanisms happening at the synapse and the soma. In this model, the membrane's potential is represented by capacitor $C$ such that when it has enough charge and reaches the threshold potential $\\vartheta$, a spike $\\delta(t-t_i&#94;f)$ is generated and transmitted. In [3]: from OIST.tutorial2 import LIFmodel In [4]: model = LIFmodel ( model_name = \"iaf_psc_alpha\" ) Create LIF neuron with alpha-function shaped synaptic currents. Created a spike_generator. Created a voltmeter. Created a spike detector. In [5]: # Check the neuron params. model . neuron_params () C_m : 250.0 pF E_L : -70.0 mV I_e : 0.0 pA V_m : -70.0 mV V_reset: -70.0 mV V_th : -55.0 mV t_ref : 2.0 ms tau_m : 10.0 ms Q1. You might have noticed that there is no parameter for the membrane resistance `R_m` as shown in the previous figure. Do you know why? The membrane time constant tau_m corresponds to the membrane capacitance C_m and membrane resistance R_m as observed in the electrical circuit above. Therefore it's possible to calculate what is the R_m value given the following formula: $$ \\tau_m = C_m R_m $$ In [6]: # Retrieve a particular set of parameters model . neuron_params ( \"V_reset\" , \"V_th\" ) Out[6]: ((-70.0, -55.0),) In [7]: # Modify spike generation to values 10 and 50 ms print ( f \"Before: {model.spike_params('spike_times')}\" ) model . set_params ( node = \"spike_generator\" , spike_times = [ 10. , 50. ]) print ( f \"After : {model.spike_params('spike_times')}\" ) Before: ((array([], dtype=float64),),) After : ((array([10., 50.]),),) In [8]: # Connect the spike generator and the voltmeter to the neuron. model . build ( weight = 1e3 ) Connect spike generator with a given synaptic specification ({'weight': 1000.0}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. Simulate for 100 ms and observe the results In [9]: ax = model . simulate ( ms = 100 ) plt . show () Q2. What can we observe here? Are these neuron spikes? We can observe the membrane trace of the LIF neuron model excited with alpha-function shaped spikes at times 10 ms and 50 ms. The observed peaks in the membrane trace are not spikes since the membrane threshold V_th is -55mV. If we modify the external current or lower the membrane's threshold potential we should be able to observe spikes. In [10]: # Modifying the threshold model = LIFmodel ( model_name = \"iaf_psc_alpha\" , display = False ) model . set_params ( \"neuron\" , V_th =- 58. ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . build ( weight = 1e3 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () In [11]: # modifying external current to LIF neuron model = LIFmodel ( model_name = \"iaf_psc_alpha\" , display = False ) model . set_params ( \"neuron\" , I_e = 300. ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e3 , display = False ) model . simulate ( ms = 100 ) plt . show () In this neuron model, the membrane potential does not follow the biologically observed dynamics that neurons have. Their use is limited to understand and experiment with network dynamics and spiking activity :( HH-neuron model For comparison, let's observe the membrane potential of a HH-neuron model (Hodgkin and Huxley, 1952). This model was the \"conclusion of a series of papers\" concerned with the flow of electric current through the surface membrane of the giant nerve fibre in the squid. Using voltage-clamp experiments and by varying extracellular sodium and potassium concentrations, Hodgkin and Huxley developed a model in which the properties of an excitable cell are described by a set of ordinary differential equations. For simplicity, we will not focus on these equations. NEST's framework integrates these equations to obtain the instantaneous membrane potential. The following figure represents an electric circuit model of the neuron's membrane. The HH-model (Hodgkin and Huxley, 1952) considers the ionic channels present on the cellular membrane. These channels allows the conduction of specific types of ions. Sodium channels (Na+) are scarce inside the cell , so that when sodium channel opens, positive charges rush into the cell to cause excitation. Potassium ions (K+) are rich inside the cell , so that when potassium channel opens, positive charges rush out of the cell to cause inhibition. The model assumes a leak current composed of all other remaining ionic currents (Cl, Mg, etc.) This model is based on careful data analysis and follows the following equation : $$C_m \\frac{dV}{dt} = \\bar{g_{Na}}m&#94;3h(E_{Na}-V) + \\bar{g_K}n&#94;4(E_K-V) + g_{Leak}(E_{Leak}-V) + I$$ Where the conductances $g_{Na}$ and $g_{K}$ are: $$ g_{Na} = \\bar{g_{Na}}m&#94;3h $$$$ g_{K} = \\bar{g_K}n&#94;4 $$ Let's see these parameters in NEST by creating a hh_psc_alpha neuron. A HH-model neuron with delta-shaped synaptic currents. In [12]: from OIST.tutorial2 import HHmodel In [13]: model = HHmodel () Create Hodgkin-Huxley neuron with alpha-function shaped synaptic currents. Created a spike_generator. Created a voltmeter. Created a spike detector. In [14]: model . neuron_params () C_m : 100.0 pF E_K : -77.0 mV E_L : -54.402 mV E_Na : 50.0 mV g_K : 3600.0 nS g_L : 30.0 nS g_Na : 12000.0 nS I_e : 0.0 pA V_m : -65.0 mV t_ref: 2.0 ms In [15]: model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e3 ) Connect spike generator with a given synaptic specification ({'weight': 1000.0}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. In [16]: ax = model . simulate ( ms = 100 ) plt . show () Q3. Modify the previous example to observe spikes. In [17]: # modifying the synaptic strength (w) to observe spikes model = HHmodel ( display = False ) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e4 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () In [18]: print ( f \"Number of spikes: {model.spikes} \" ) Number of spikes: 2 Could you observe the spikes? Just after a spike, the membrane potential resets to -77 mV and a short refractory period of 2 ms (check these parameter value t_ref from the parameter list shown above!). During this period, the neuron is unable to react to excitation. Q4. Can you try exciting the neuron during this period to observe this phenomena? In [19]: # In the following example the spike generator generates spikes at times 10ms, 11ms, 50ms and 52ms. model = HHmodel ( display = False ) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 11.0 , 50. , 52.0 ]) # Add!! model . build ( weight = 1e4 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () The figure is the same as before due to the refractory period of the neuron. Connecting nodes with different inputs To compare neurons with different inputs, let's see how the parameters of the input affect the neurons' output. In the following example, we will use constant input current and belows with the same mean strength as the constant input current. a Poisson spike train The probability density function and firing rates of neurons will be shaped given by these inputs. First, let us define the parameters of the simulation and input currents. In [20]: T = 1.2e3 # simulation time nu_ext = 15e3 # firing rate of external Poisson source J = 0.08 # synaptic weight d = 0.1 # delay C = 250.0 # membrane potential capacitance mu = J * 1e-3 * nu_ext * C # mean input in pAa I_ext = mu # external current In [21]: neuron_params = { 'C_m' : C , # (pF) 'E_L' : 0. , # (mV) 'I_e' : 0.0 , # (pA) 'V_m' : 0. , # (mV) 'V_reset' : 0. , # (mV) 'V_th' : 15. , # (mV) 't_ref' : 2.0 , # (ms) 'tau_m' : 10.0 , # (ms) } In [22]: plot_infos = { \"color\" : [ \"blue\" , \"red\" ], \"label\" : [ \"constant input\" , \"Poisson input\" ] } Then, make two types of models and compare them. In [23]: from OIST.tutorial2 import mkMultiDetectors , plotMultResults In [24]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) Create LIF neuron with delta-shaped synaptic currents. Created a voltmeter. Created a spike detector. In [25]: poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d ) Create LIF neuron with delta-shaped synaptic currents. Created a poisson_generator. Created a voltmeter. Created a spike detector. Connect spike generator with a given synaptic specification ({'weight': 0.08, 'delay': 0.1}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. In [26]: neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) Created 2 multimeter to record membrane potential of the neurons. Created 2 spike detectors to record spikes times and neuron identifiers, but not record from file. In [27]: nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axR . legend (), axR . set_xlim ( 0 , T ) plt . show () What!? There are no spikes?! Well, look at the figures and consider the threshold potential value V_th . Let's try increasing the synaptic strengh J . The neuron receiving Poisson input will be in different firing rate regimes! In [28]: print ( f \"poisson_model.neuron_params('V_th') = {poisson_model.neuron_params('V_th')[0][0]}\" ) print ( f \"const_model.neuron_params('V_th') = {const_model.neuron_params('V_th')[0][0]}\" ) poisson_model.neuron_params('V_th') = 15.0 const_model.neuron_params('V_th') = 15.0 Q5. Try to make the neuron fire at an irregular regime. In [29]: T = 1.2e3 # nu_ext = 15e3 # J = 0.09 # From 0.08 to 0.09. d = 0.1 # C = 250.0 # mu = J * 1e-3 * nu_ext * C # I_ext = mu # In [30]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axR . legend (), axR . set_xlim ( 0 , T ) plt . show () Q6. Try to make the neuron spike at a regular regime. In [31]: T = 1.2e3 # nu_ext = 15e3 # J = 0.11 # From 0.08 to 0.11. d = 0.1 # C = 250.0 # mu = J * 1e-3 * nu_ext * C # I_ext = mu # In [32]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axL . legend (), axR . legend (), axR . set_xlim ( 0 , T ) plt . show () Since we are using the LIF neuron model with a membrane threshold potential V_th at 15mV , you will not be able to see proper spikes. Instead, you will only see the after-spike dynamics (membrane potential reset and refractory period). Q7. Try to make HH neuron models spike at a regular regime for both input conditions. In [33]: T = 500.0 # simulation time nu_ext = 15e3 # firing rate of external Poisson source J = 0.08 # synaptic weight d = 0.1 # delay C = 100.0 # membrane potential capacitance mu = J * 1e-3 * nu_ext * C # mean input in pAa I_ext = mu # external current In [34]: neuron_params = { 'g_K' : 3000.0 , 'g_Na' : 16000.0 , 'g_L' : 60.0 } In [35]: const_model = HHmodel ( model_name = \"hh_psc_alpha\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = HHmodel ( model_name = \"hh_psc_alpha\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , ** plot_infos ) axL . legend (), axR . legend (), axR . set_xlim ( 0 , T ), axR . set_ylim ( - 80 , 40 ) plt . show () Rate of neuron stimulated with constant input input: 56.112 Rate of neuron stimulated with Poisson input input: 48.096 F-I curve As you have seen in the past figures, the firing rate of the neuron can change given different external current I_e . It's possible to plot this relationship and its usually referred to as the F-I curve . In [36]: from OIST.tutorial2 import FiringRate In [37]: neuron_params = { 'C_m' : 250.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [38]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () As you can observe from this figure, given the parameter setup, the neuron in a leaky-integrate-and-fire model starts to fire spikes at around 370 pA of external input current I_e . For this particular case, V_th was chosen to be low to observe the trend of the firing rate as external current is increasing. Modifying the value of the capacitance C_m moves this curve in the x-axis Modifying the refractory period t_ref slows down the firing rate i.e. more current is required for a given firing rate. Q8. Observe these changes in the F-I curve by modifying the neuron model parameters. In [39]: neuron_params = { 'C_m' : 150.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [40]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () In [41]: neuron_params = { 'C_m' : 350.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [42]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () In [43]: neuron_params = { 'C_m' : 250.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 1.0 , 'tau_m' : 10.0 , } In [44]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () Q10. Repeat these simulations with the HH neuron model hh_psc_alpha by modifying channel conductances. In [45]: neuron_params = { 'g_K' : 3600.0 , 'g_Na' : 12000.0 , 'g_L' : 30.0 } In [46]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [47]: neuron_params = { 'g_K' : 3600.0 , 'g_Na' : 13000.0 , 'g_L' : 30.0 } In [48]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [49]: neuron_params = { 'g_K' : 3800.0 , 'g_Na' : 12000.0 , 'g_L' : 30.0 } In [50]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-2.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-2.html"},{"title":"1.Mathematical Models and Numerical Methods of Computational Neuroscience","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Alan Func Lecture Materials https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-1_Ordinary-Differential-Equations Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial1.py In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Agenda Brief introduction of Differential Equations Neuronal Models Numerical Method to Simulate Neuronal Models How the Network can be trained Brief introduction of Differential Equations Ordinary Differential Equations A fundamental tool in theoretical Science The differential equation gives the dependence of derivatives $$F\\left[\\frac{d&#94;nx(t)}{dt&#94;n},\\cdots,\\frac{dx(t)}{dt},C\\right] = 0$$ As we can calculate the whole path ways if we know the velocity($v=dx(t)/dt$), by knowing the slopes, one may trace the whole curve!! Examples of Models and Theories Simple Harmonic Oscillator Heat Equation(1-D) An oscillator that is neither driven nor damped. How the distribution of some quantity (such as heat) evolves over time in a solid medium $$\\underset{\\text{Acceleration}}{\\frac{d&#94;2x(t)}{dt&#94;2}}+\\underset{\\text{Returning Force}}{\\omega&#94;2x(t)} = 0$$ $$\\underset{\\text{Rate of Heat}}{\\frac{\\partial u(x,t)}{\\partial t}}+\\underset{\\text{Returning Force}}{\\alpha\\frac{\\partial&#94;2u(x,t)}{\\partial x&#94;2}} = 0$$ Implementation by Numerical Method Euler Method Runge-Kutta Methods Euler Method Euler method has a relatively large error. There are some extensions of the Euler method(one of them are Mid-Point method. ) In [3]: X = np . arange ( - 1.0 , 6.5 , 0.5 ) Y = 1 / 6 * X ** 3 dYdX = 1 / 2 * X ** 2 In [4]: Euler_dYdX_bigger = ( Y [ 2 :] - Y [: - 2 ])[ 2 :] # step size=1 dY/dX(t) = X(t+1)-X(t) Euler_dYdX_smaller = ( Y [ 1 :] - Y [: - 1 ])[ 2 : - 1 ] / 0.5 # step size=0.5 dY/dX(t) = (X(t+0.5)-X(t))/0.5 MidPointEuler_dYdX = ( Y [ 2 :] - Y [: - 2 ])[ 1 : - 1 ] # step size=1 dY/dX(t) = X(t+0.5)-X(t-0.5) In [5]: def CompareNumerical ( ax , X , Y , label , marker , color ): ax . scatter ( X [ 2 : - 2 ], Y , label = label , marker = marker , color = color ) ax . plot ( X [ 2 : - 2 ], Y , color = color , alpha = 0.5 ) return ax In [6]: fig , ax = plt . subplots () ax = CompareNumerical ( ax , X , Euler_dYdX_bigger , \"Step = 1.0\" , \"s\" , \"b\" ) ax = CompareNumerical ( ax , X , Euler_dYdX_smaller , \"Step = 0.5\" , \"o\" , \"r\" ) ax = CompareNumerical ( ax , X , MidPointEuler_dYdX , \"Mid-point h=1.0\" , \"&#94;\" , \"g\" ) ax . plot ( X [ 2 : - 2 ], dYdX [ 2 : - 2 ], linestyle = \"--\" , label = \"Analytic\" , color = \"black\" ) ax . legend (), ax . grid (), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$y$\" ) plt . show () The mid-point method is surprisingly good!! Runge-Kutta Methods A family of implicit and explicit iterative methods. More: Wikipedia Neuronal Models To Model a Neuron... Neurons can be excited by current injection . If the membrance potential(Voltage) is larger than some thresholds , an action potential will be triggered. Membrance potential means the potential difference across the neuron membrance. → Relative can be controlled by concentrations of irons($\\mathrm{Na}&#94;+,\\mathrm{K}&#94;+,\\mathrm{Cl}&#94;-$) is maintained by their ion bumps , and at the resting state, it is around $65\\mathrm{mV}$. sometimes across the threshold , and when it occurs, the neuron fires works like a capacitor with a leaky current. Leaky Integrate-and-Fire(LIF) model In 1907, Lapicque proposed a simple model(which is just the time derivative of the law of capacitance ($Q=CV$) .) for neurons: $$I(t)-\\frac{V_m(t) - V_{rest}}{R_m} = C_m\\frac{dV_m(t)}{dt}$$ $I$: Input current (=const.) $V_m$: Membrance potential $V_{rest}$: Resting potential of the membrance $R_m$: Membrane resistance (we find it is not a perfect insulator as assumed previously) $C_m$: Capacity of the membrance. When an input current is applied, the membrane voltage increases with time until it reaches a constant threshold $V_{th}$ At the point, a delta function spike occurs and the voltage is reset to its resting potential($V_{rest}$). The LIF neuron fired more frequently as the input current increases. Leak Conductance Ion permeability at resting membrane potential, allowing a constant flow of current through the cell membrane due to channels that remain open at resting membrane potential (Ref: Encyclopedia of Neuroscience ) In [7]: from OIST.tutorial1 import LIFsimulation , LITSpikeFrequency In [8]: params = { 'V_rest' : - 65 , 'V_thre' : - 40 , 'V_reset' : - 70 , 'V_fire' : 20 , 'C' : 2e-4 , 'R' : 7.5e4 , 'I' : 5e-4 , 'dt' : 0.1 , 'T' : 100 , } In [9]: time , Vm = LIFsimulation ( ** params ) plt . plot ( time , Vm , color = \"black\" ) plt . xlabel ( \"time[ms]\" ), plt . ylabel ( \"V[mV]\" ), plt . grid () plt . show () In [10]: Is = [ 0.5e-3 , 1e-3 , 1.5e-3 , 2.0e-3 , 2.5e-3 , 3.0e-3 ] freqs = LITSpikeFrequency ( Is , ** params ) plt . plot ( Is , freqs , color = \"blue\" ), plt . scatter ( Is , freqs , color = \"blue\" , marker = \"s\" ) plt . title ( \"How Spiking Frequency Depends on Input Current\" ), plt . xlabel ( \"Input Current: I [uA]\" ), plt . ylabel ( \"Spiking Frequency [Hz]\" ), plt . grid () plt . show () ※ The LIF neuron fired more frequently as the input current increases. Hodgkin-Huxley model $$ I = C_m + \\frac{dV_m}{dt} + g_{\\mathrm{l}}\\left(V_m-V_{\\mathrm{l}}\\right) + g_{\\mathrm{K}}n&#94;4\\left(V_m-V_{\\mathrm{K}}\\right) + g_{\\mathrm{Na}}m&#94;3h\\left(V_m-V_{\\mathrm{Na}}\\right)\\\\ \\begin{cases} \\begin{aligned} \\frac{dn}{dt} &= \\alpha_n(V_m)(1-n) + \\beta_n(V_m)n\\\\ \\frac{dm}{dt} &= \\alpha_m(V_m)(1-m) + \\beta_m(V_m)m\\\\ \\frac{dh}{dt} &= \\alpha_h(V_m)(1-h) + \\beta_h(V_m)h\\\\ \\end{aligned} \\end{cases} $$ Proposed by Hodgkin and Huxley in 1952 (They received the 1963 Nobel Prize in Physiology or medicin for this work.) Like Leaky Integrate-and-Fire(LIF) model , the input current (const.) charges up the membrance capacitor. Leaky conductance This model considers also ion currents invoving potassium ion ($\\mathrm{K}&#94;+$) and Sodium ion ($\\mathrm{Na}&#94;{+}$) induced by the potential difference. Sodium ion : has a reversal potential depolarizing the membrance. The conductivity is voltage-gated. Potassium ion : has a reversal potential hyper-polarizing the membrance. The conductivity is voltage-gated. The individual gates act like a first order chemical reaction with two states: $$\\text{Shut}\\overset{\\alpha}{\\underset{\\beta}{\\rightleftarrows}}\\text{Open}$$ Propose that Each $\\mathrm{K}$ channel has $4$ identical activation gates.( $\\mathbb{P}_{\\text{open}}=n$ ) Each $Na$ channel has $3$ avtivation gates( $\\mathbb{P}_{\\text{open}}=m$ ), and $1$ inactivation gate( $\\mathbb{P}_{\\text{open}}=h$ ). Action Potential Stimulas raises the membrane potential. (Depolarization) If membrance potential over the Threshold , voltage-gated sodium channels will open, and due to the sodium concentration gradient (ex > in) , sodium ion flow into the cell. This process raises the membrance potential, and it gets further depolarized. As the membrance become **\"too large\"**, sodium ion channel closes , and after that ( there is a delay ), voltage-gated potassium channel will open. When the membrance potential return to the resting state, potassium channel closes, but as this response takes time, the membrance potential will be lower than the initial voltage. (Hyperpolarization) (※ Resting membrance potential means the equilibrium point between \"electrical gradient\" and \"concentration gradient\".) How the Network can be trained Long-term Synaptic Plasticity Stimulas are passed through a glutamate . Glutamate connects with AMPA receptor and it causes sodium channels opening. If Depolarization occurs, NMDA channel (which was closed by Magnesium) open, and Calcium flows into the cell. The amount of Calcium is Large : LTP(Long-term potentiation) occurs. Increase the AMPA. Small : LTD(Long-term depression) occurs. Decrease the AMPA. Spike-Timing-Depenent Plasticity (Classical) The change in $w_{ji}$ depends on the spike timings In order to perform STDP with differential equatins, an online implementation of STDP is proposed $$ \\begin{aligned} \\tau_+\\frac{dx}{dt} &= -x + a_+(x)\\sum_{t_f}\\delta(t-t_f)\\\\ \\tau_-\\frac{dy}{dt} &= -y + a_-(y)\\sum_{t_n}\\delta(t-t_n)\\\\ \\Longrightarrow \\frac{dw}{dt} &= A_+(w)x(t)\\sum_{t_n}\\delta(t-t_n) - A_-(w)y(t)\\sum_{t_f}\\delta(t-t_f) \\end{aligned} $$ In [11]: from OIST.tutorial1 import STDPsimulation In [12]: time , Results , Info = STDPsimulation ( pre = 10 , post = 30 ) In [13]: fig = plt . figure ( figsize = ( 14 , 6 )) for i , vals in enumerate ( Results ): ax = fig . add_subplot ( 3 , 2 , i + 1 ) ax . plot ( time , vals , color = Info . get ( \"color\" )[ i ]) ax . set_xlabel ( \"time\" ), ax . set_ylabel ( Info . get ( \"label\" )[ i ]), ax . set_title ( Info . get ( \"label\" )[ i ]) plt . tight_layout () plt . show () ※ As \"Pre - Post\" changes... In [14]: pre = 40 for diff in range ( - 40 , 40 ): _ , Results , _ = STDPsimulation ( pre = pre , post = pre - diff ) dws = Results [ - 1 ] dw = dws [ np . argmax ( np . abs ( dws ))] plt . scatter ( diff , dw , color = \"black\" , s = 10 ) plt . grid (), plt . xlabel ( \"$t_ {pre} - t_ {post} $\" , fontsize = 20 ), plt . ylabel ( \"$\\Delta w$\" , fontsize = 20 ) plt . show () Then, with an appropriate firing sequence, the network can be trained!! Take-Home Message Some neuronal behaviors can be mathematically modeled. Networks of neurons has the potential to do different computations. Those networks can be trained. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-1.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-1.html"},{"title":"生物物理学 第7回(小テスト)","text":"dY8hOhUZ9SpZb0wqAMWL0w==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-7-quiz.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-7-quiz.html"},{"title":"Pro.4 Itemset mining algorithm","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-19.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-19.html"},{"title":"Pro.3 Gene Network Inference","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-18.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-18.html"},{"title":"Pro.2 最適行動列アルゴリズム","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-17.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-17.html"},{"title":"Pro.1 配列モチーフ探索","text":"In [7]: import numpy as np Problem Setting Identify the common sequencial features(sequence motif) from large amount of sequences data containing tf-binding regions. DeepBind Link: Paper Software tool \"Deep Learning\" techniques to ascertain the sequence specificities of DNA- and RNA-binding proteins from experimental data . outperforms other state-of-the-art methods. (Published: 27 July 2015) Results are readily visualized as a weighted ensemble of position weight matrices(PWMs) a mutation map that indicates how variations affect binding within a specific sequence. computes a binding score $f(s)$ using four stages: $$f(s) = \\text{Neural Network}_W\\left(\\text{pool}\\left(\\text{rect}_b\\left(\\text{conv}_M(s)\\right)\\right)\\right)$$ Convolution : Scan a set of motif detectors (length=$L$) with parameters $M&#94;{(j)}$ $$\\text{conv}_M(s)_{ij} = \\sum_{k=0}&#94;{K-1}\\sum_{l=0}&#94;{L-1}M&#94;{(j)}_{k,i+l}s_{ki}$$ Rectification : Extract some positions $$\\text{rect}_b(x_{ij}) =\\begin{cases} x_{ij} + b & (\\text{if }x_{ij} + b>0)\\\\0 & (\\text{otherwise})\\end{cases}$$ Pooling : Compute the maximum and average of each $\\text{rect}_b\\left(\\cdot\\right)$ across the sequence. Maximizing : identify the presence of longer motifs . Averaging : identify cumulative effects of short motifs $$\\text{pool}_{\\alpha}(x_{ij}) = \\alpha\\max_i\\left(x_{ij}\\right) + \\left(1-\\alpha\\right)\\underset{i}{\\text{ave}}\\left(x_{ij}\\right)$$ Neural Network : Combines the responses to produce a score. a: Five independent sequences being processed in parallel by single DeepBind model. b: The calibration, training and testing procedure. Implementation In [11]: # from kerasy.Bio.deepbind import DeepBind In [ ]: In [1]: nuc = [ \"A\" , \"C\" , \"G\" , \"T\" ] def nuc_to_code ( nuc ): return { 'A' : [ 1 , 0 , 0 , 0 ], 'C' : [ 0 , 1 , 0 , 0 ], 'G' : [ 0 , 0 , 1 , 0 ], 'T' : [ 0 , 0 , 0 , 1 ], } . get ( nuc , [ 0 , 0 , 0 , 0 ]) def generate_dataset ( n_p , n_n , length , motif , nuc ): m = len ( motif ) y = ([ 1 ] * n_p + [ 0 ] * n_n ) x = [ None ] * ( n_p + n_n ) for i in range ( n_p + n_n ): seq = np . random . choice ( nuc , size = length ) # random seq if i < n_p : # embed motif at random position j = np . random . randint ( length - m + 1 ) for k in range ( m ): seq [ j + k ] = np . random . choice ( nuc , p = motif [ k ]) x [ i ] = '' . join ( seq ) return ( x , y ) motif = [[ 0.0 , 1.0 , 0.0 , 0.0 ], # C [ 0.5 , 0.0 , 0.0 , 0.5 ], # A/T [ 0.0 , 0.5 , 0.5 , 0.0 ], # C/G [ 0.0 , 0.0 , 1.0 , 0.0 ], # G [ 0.0 , 0.0 , 0.0 , 1.0 ]] # T seq_len = 20 np_train = 1000 nn_train = 1000 np_test = 100 nn_test = 100 In [2]: x_train , y_train = generate_dataset ( np_train , nn_train , seq_len , motif , nuc ) x_test , y_test = generate_dataset ( np_test , nn_test , seq_len , motif , nuc ) In [ ]: - [ Enhanced ]( https : // arxiv . org / pdf / 1611.05777 . pdf ) In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-16.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-16.html"},{"title":"Ex.15 Neural Network","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-15.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-15.html"},{"title":"Ex.14 Brownian motion","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-14.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-14.html"},{"title":"Ex.13 Sparse Modeling","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-13.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-13.html"},{"title":"Ex.12 Order Statistics","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-12.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-12.html"},{"title":"Ex.11 Data Assimilation","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-11.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-11.html"},{"title":"Ex.10 Expectation Maximization Algorithm","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-10.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-10.html"},{"title":"Ex.9 Kullback-Leibler Divergence","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-9.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-9.html"},{"title":"Ex.8 Multivariate Normal Distribution","text":"解答 1 $$ \\begin{aligned} \\int_{\\mathbb{R}&#94;m}f_X(\\mathbf{x})d&#94;mx &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|\\boldsymbol{\\Sigma}\\right|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}}\\exp\\left(-\\frac{1}{2}\\left(x_1&#94;2 + \\cdots + x_m&#94;2\\right)\\right)d&#94;mx\\\\ &=\\prod_{k=1}&#94;m\\int_{\\mathbb{R}}\\frac{1}{\\sqrt{2\\pi}}\\exp\\left(-\\frac{1}{2}x_k&#94;2\\right)dx_k\\\\ &=1 \\end{aligned} $$ 上では、以下の ガウス積分 を用いた。 $$I = \\int_{-\\infty}&#94;{\\infty}e&#94;{-ax&#94;2}dx = \\int_{-\\infty}&#94;{\\infty}e&#94;{-ay&#94;2}dy$$ を考える。ここで、 $$\\begin{aligned} I&#94;2 &= \\left(\\int_{-\\infty}&#94;{\\infty}e&#94;{-ax&#94;2}dx\\right)&#94;2\\\\ &= \\left(\\int_{-\\infty}&#94;{\\infty}e&#94;{-ax&#94;2}dx\\right)\\left(\\int_{-\\infty}&#94;{\\infty}e&#94;{-ay&#94;2}dy\\right)\\\\ &=\\int_{\\infty}&#94;{\\infty}dx\\int_{-\\infty}&#94;{\\infty}dye&#94;{-a(x&#94;2+y&#94;2)}\\\\ &= \\int_0&#94;{\\infty}rdr\\int_0&#94;{2\\pi}d\\theta e&#94;{-ar&#94;2}\\\\ &= 2\\pi\\left[-\\frac{1}{2a}e&#94;{-ar&#94;2}\\right]_0&#94;{\\infty}\\\\ &= \\frac{\\pi}{a}\\\\ \\therefore I&= \\sqrt{\\frac{\\pi}{a}} \\end{aligned}$$ 2 \\(\\Sigma\\) が実対称行列なので、実直交行列 \\(O\\) を用いて \\(\\Sigma = O\\Lambda O&#94;T\\) と対角化できる。（ \\(\\Lambda = \\left(\\lambda_1,\\ldots,\\lambda_m\\right)\\) ） したがって、 $$ \\begin{aligned} \\int_{\\mathbb{R}&#94;m}f_X(\\mathbf{x})d&#94;mx &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|\\Sigma\\right|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)&#94;T\\Sigma&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|O\\Lambda O&#94;T\\right|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)&#94;T\\left(O\\Lambda O&#94;T\\right)&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|\\Lambda\\right|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(O&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)&#94;T\\Lambda&#94;{-1}\\left(O&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|\\Lambda\\right|&#94;{1/2}}\\exp\\left(\\sum_{k=1}&#94;m-\\frac{1}{2}\\mathbf{o}_k&#94;{-1T}(x_k-\\mu_k)\\lambda_k&#94;{-1}\\mathbf{o}_k&#94;{-1}(x_k-\\mu_k)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\sum_{k=1}&#94;m\\lambda_k&#94;{1/2}}\\exp\\left(\\sum_{k=1}&#94;m-\\frac{1}{2}(x_k-\\mu_k)\\lambda_k&#94;{-1}(x_k-\\mu_k)\\right)d&#94;mx\\\\ &= \\prod_{k=1}&#94;m\\int_{\\mathbb{R}}\\frac{1}{(2\\pi)&#94;{1/2}\\lambda_k&#94;{(1/2)}}\\exp\\left(-\\frac{1}{2}\\lambda_k&#94;{-1}y_k&#94;2\\right)dy_k\\\\ &= \\prod_{k=1}&#94;m\\frac{1}{(2\\pi)&#94;{1/2}\\lambda_k&#94;{(1/2)}}\\sqrt{\\frac{2\\pi}{\\lambda_k&#94;{-1}}}\\\\ &= 1 \\end{aligned} $$ 3 \\(2\\) と同様に考えて、 $$ \\begin{aligned} \\mathbb{E}\\left(X_k\\right) &= \\int_{\\mathbb{R}&#94;m}x_kf_X(\\mathbf{x})d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\sum_{k=1}&#94;m\\lambda_k&#94;{1/2}}x_k\\exp\\left(\\sum_{k=1}&#94;m-\\frac{1}{2}(x_k-\\mu_k)\\lambda_k&#94;{-1}(x_k-\\mu_k)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\lambda_k&#94;{1/2}}x_k\\exp\\left(-\\frac{1}{2}\\left(x_k-\\mu_k\\right)\\lambda_k&#94;{-1}\\left(x_k-\\mu_k\\right)\\right)dx_k\\\\ &=\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\lambda_k&#94;{1/2}}\\int_{\\mathbb{R}&#94;m}\\left(y_k + \\mu_k\\right)\\exp\\left(-\\frac{1}{2}\\lambda_k&#94;{-1}y_k&#94;2\\right)dy_k\\\\ &= \\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\lambda_k&#94;{1/2}}\\left[-\\frac{1}{\\lambda_k&#94;{-1}}\\exp\\left(-\\frac{1}{2}\\lambda_k&#94;{-1}y_k&#94;2\\right)\\right]_{-\\infty}&#94;{\\infty} + \\mu_k\\\\ &=\\mu_k \\end{aligned} $$ 4 \\(2\\) と同様に考えて、 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-8.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-8.html"},{"title":"Ex.7 Positive Definite Symmetric Matrix","text":"解答 1 $$A = O\\Lambda O&#94;T\\Longleftrightarrow O&#94;TAO = \\Lambda$$ ここで、 \\(O=\\left(\\mathbf{u}_1,\\cdots\\mathbf{u}_m\\right)\\) と分解できるので、 \\(O\\) の第 \\(k\\) 列ベクトル \\(\\mathbf{u}_k\\) に注目すると、 $$\\lambda_k = \\mathbf{u}_k&#94;TA\\mathbf{u}_k > 0\\quad\\left(\\because\\text{positive definite}\\right)$$ 2 \\(k\\) 成分のみゼロではない次のベクトルを考える。 $$\\mathbf{e}_k = \\left(\\begin{array}{ccc}0\\\\\\vdots\\\\1\\\\\\vdots\\\\0\\end{array}\\right)$$ すると、 $$A_{kk} = \\mathbf{e}_k&#94;TA\\mathbf{e}_k > 0\\quad\\left(\\because\\text{positive definite}\\right)$$ 3 \\(k,l\\) 成分のみゼロではないベクトル \\(\\mathbf{v}\\) を考える。ここで、 $$v_k = x,v_l=y \\qquad \\forall x,y\\in\\mathbb{R},x.y\\neq0$$ とする。すると、 $$\\begin{aligned} \\mathbf{v}&#94;TA\\mathbf{v} &= x&#94;2A_{kk} + xyA_{kl} + yxA_{lk} + y&#94;2A_{ll}\\\\ &= \\left(\\begin{array}{ccc}x\\\\y\\end{array}\\right)&#94;T\\left(\\begin{array}{ccc}A_{kk} & A_{kl}\\\\A_{lk} & A_{ll}\\end{array}\\right)\\left(\\begin{array}{ccc}x\\\\y\\end{array}\\right) > 0 \\end{aligned}$$ したがって、行列 \\(A&#94;{(kl)} = \\left( \\begin{array}{ccc}A_{kk} & A_{kl}\\\\A_{lk} & A_{ll}\\end{array} \\right)\\) は正定値行列であることがわかる。ゆえに、 \\((1)\\) より、行列 \\(A&#94;{(kl)}\\) の固有値（ \\(\\lambda&#94;{(kl)}_1,\\lambda&#94;{(kl)}_2\\) ）は全て非負。 すると、行列式は固有値の積でかけるので、以下の関係が成り立つ。 $$\\left|A&#94;{(kl)}\\right| = A_{kk}A_{ll} - A_{kl}A_{lk} = \\lambda&#94;{(kl)}_1\\lambda&#94;{(kl)}_2 > 0$$ また、 \\(A&#94;T=A\\) より \\(A_{kl} = A_{lk}\\) なので、上より、 $$A_{kk}A_{ll} - A_{kl}&#94;2 > 0\\Longleftrightarrow\\sqrt{A_{kk}A_{ll}} > \\left|A_{kl}\\right|$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-7.html"},{"title":"Ex.6 Multinomial Distribution","text":"解答 1 $$ \\begin{aligned} \\mathbb{E}\\left(N_k\\right) &= \\mathbb{E}\\left(\\sum_{h=1}&#94;{n_0}Y_k&#94;{(h)}\\right) = \\mathbb{E}\\left(\\sum_{h=1}&#94;{n_0}\\mathbb{I}\\left(X&#94;{(h)} = k\\right)\\right)\\\\ &= \\sum_{h=1}&#94;{n_0}\\mathbb{E}\\left(\\sum_{h=1}&#94;{n_0}\\mathbb{I}\\left(X&#94;{(h)} = k\\right)\\right)\\\\ &= n_0q_k \\end{aligned} $$ 2 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-6.html"},{"title":"Ex.5 Categorical Distribution","text":"解答 1 $$\\mathbb{E}\\left(1\\right) = \\sum_{k=1}&#94;m 1\\cdot q_k = 1$$ 2 $$\\mathbb{E}\\left(X\\right) = \\sum_{k=1}&#94;m k\\mathbb{P}\\left(X=k\\right) = \\sum_{k=1}&#94;mkq_k$$ 3 $$\\mathbb{E}\\left(Y_k\\right) = \\sum_{k&#94;{\\prime}=1}&#94;m \\mathbb{I}\\left(X=k\\right) \\mathbb{P}\\left(X=k&#94;{\\prime}\\right)=\\mathbb{P}\\left(X=k\\right) = q_k$$ 4 EX1. Covariance より、 $$ \\begin{aligned} \\mathrm{Cov}\\left(Y_k,Y_l\\right) &= \\mathbb{E}\\left(Y_kY_l\\right) - \\mathbb{E}\\left(Y_k\\right)\\mathbb{E}\\left(Y_l\\right)\\\\ &= \\sum_{k&#94;{\\prime},l&#94;{\\prime}}\\mathbb{I}\\left(X=k,X=l\\right)\\mathbb{P}\\left(X=k&#94;{\\prime},X=l&#94;{\\prime}\\right) - q_kq_l\\\\ &=\\delta_{kl}q_k - q_kq_l \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-5.html"},{"title":"Ex4. Exponential Distribution","text":"解答 1 $$ \\int_0&#94;{\\infty}f_X(x)dx = \\int_0&#94;{\\infty}\\lambda e&#94;{-\\lambda x}dx = \\left[-e&#94;{-\\lambda x}\\right]_0&#94;{\\infty} = 1 $$ 2 $$\\begin{aligned} \\mathbb{E}\\left(X\\right) &= \\int_0&#94;{\\infty}xf_X(x)dx = \\int_0&#94;{\\infty}x\\lambda e&#94;{-\\lambda x}dx\\\\ &= \\int_0&#94;{\\infty}x\\left(-e&#94;{-\\lambda x}\\right)&#94;{\\prime}dx\\\\ &= \\left[-xe&#94;{-\\lambda x}\\right]_0&#94;{\\infty} - \\int_0&#94;{\\infty}-e&#94;{-\\lambda x} dx\\\\ &= \\left[-\\frac{1}{\\lambda}e&#94;{-\\lambda x}\\right]_0&#94;{\\infty}\\\\ &= \\frac{1}{\\lambda} \\end{aligned}$$ 3 $$ \\mathbb{P}\\left(X>t\\right) = \\int_t&#94;{\\infty}f(x)dx = \\left[-e&#94;{-\\lambda x}\\right]_t&#94;{\\infty} = e&#94;{-\\lambda t} $$ 4 $$\\begin{aligned} \\mathbb{P}\\left(X>s+t|X>s\\right) &= \\frac{\\mathbb{P}\\left(X>s+t\\right)}{\\mathbb{P}\\left(X>s\\right)}\\\\ &= \\frac{\\int_{s+t}&#94;{\\infty}f_X(x)dx}{\\int_s&#94;{\\infty}f_X(x)dx}\\\\ &= \\frac{e&#94;{-\\lambda\\left(s+t\\right)}}{e&#94;{-\\lambda s}}\\\\ &= e&#94;{-\\lambda t} = \\mathbb{P}\\left(X>t\\right) \\end{aligned}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-4.html"},{"title":"EX3. Law of Large Numbers","text":"解答 1 $$ \\begin{aligned} \\varphi_{Z}(t) &= \\int_{-\\infty}&#94;{\\infty}e&#94;{itz}\\delta\\left(z-\\mu\\right)dz\\\\ &= e&#94;{it\\mu} \\end{aligned} $$ 2 $$ \\begin{aligned} \\varphi_{\\bar{X}&#94;{(n)}}(t) &= \\varphi_{\\frac{X_1 + \\cdots + X_n}{n}}(t)\\\\ &= \\varphi_X\\left(\\frac{X_1}{n}\\right)\\cdots\\varphi_X\\left(\\frac{X_n}{n}\\right)\\\\ &= \\left[\\varphi_X\\left(\\frac{X}{n}\\right)\\right]&#94;n\\\\ &= \\exp\\left(n\\log\\left(\\varphi_X\\left(\\frac{X}{n}\\right)\\right)\\right)\\\\ &= \\exp\\left(n\\log\\left(1 + \\mathbb{E}\\left(X\\right)\\frac{1}{1!}\\left(\\frac{it}{n}\\right)&#94;1 + \\mathcal{O}\\left(\\frac{1}{n&#94;2}\\right)\\right)\\right)\\\\ \\end{aligned} $$ ここで、 $$ \\begin{aligned} &\\log\\left(1 + \\mathbb{E}\\left(X\\right)\\frac{1}{1!}\\left(\\frac{it}{n}\\right)&#94;1 + \\mathcal{O}\\left(\\frac{1}{n&#94;2}\\right)\\right)\\\\ &= \\sum_{k=1}&#94;{\\infty}\\left(-1\\right)&#94;{k+1}\\cdot\\frac{\\left(\\mathbb{E}\\left(X\\right)\\frac{it}{n} + \\mathcal{O}\\left(\\frac{1}{n&#94;2}\\right)\\right)&#94;k}{k}\\\\ &= \\mathbb{E}\\left(X\\right)\\frac{it}{n} + \\mathcal{O}\\left(\\frac{1}{n&#94;2}\\right) \\end{aligned} $$ だから、 $$ \\begin{aligned} \\varphi_{\\bar{X}&#94;{(n)}}(t) &= \\exp\\left(n\\cdot\\mathbb{E}\\left(X\\right)\\frac{it}{n} + \\mathcal{O}\\left(\\frac{1}{n}\\right)\\right)\\\\ &= \\exp\\left(it\\mu + \\mathcal{O}\\left(\\frac{1}{n}\\right)\\right)\\\\ &\\underset{n\\rightarrow\\infty}{\\longrightarrow}e&#94;{it\\mu} = \\varphi_{\\bar{X}&#94;{(n)}}(t) \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-3.html"},{"title":"EX2. Characteristic function","text":"解答 1 $$\\varphi_{X}(0) = \\mathbb{E}\\left(e&#94;{i\\cdot0\\cdot X}\\right) = \\mathbb{E}(1) = 1$$ 2 $$ \\begin{aligned} \\frac{d&#94;m\\varphi_{X}}{dt&#94;m} &= \\underset{\\text{m個}}{0+\\cdots+0} + \\frac{m!\\cdot i&#94;m}{m!}\\mathbb{E}\\left(X&#94;m\\right) \\\\&+\\frac{\\left\\{(m+1)\\cdot m\\cdots 3\\cdot2\\right\\} i&#94;m\\cdot(it)}{(m+1)!}\\mathbb{E}\\left(X&#94;{m+1}\\right) + \\frac{\\left\\{(m+2)\\cdot (m+1)\\cdots 4\\cdot3\\right\\}i&#94;m\\cdot(it)&#94;2}{(m+2)!}\\mathbb{E}\\left(X&#94;{m+2}\\right)+\\cdots\\\\ &= \\frac{m!\\cdot i&#94;m}{m!}\\mathbb{E}\\left(X&#94;m\\right) + \\sum_{n}&#94;{\\infty}\\frac{i&#94;m(it)&#94;n}{n!}\\mathbb{E}\\left(m+n\\right)\\\\ \\therefore\\left.\\frac{d&#94;{m} \\varphi_{x}}{d t&#94;{m}}\\right|_{t=0} &= i&#94;m \\mathbb{E}\\left(X&#94;m\\right) + 0\\qquad \\\\ \\therefore \\frac{1}{i&#94;m}\\left.\\frac{d&#94;{m} \\varphi_{x}}{d t&#94;{m}}\\right|_{t=0} &=\\mathbb{E}\\left(X&#94;m\\right)\\\\ \\end{aligned} $$ 3 $$\\begin{aligned} \\varphi_X(t) &= \\sum_{n=0}&#94;{\\infty}\\frac{\\lambda&#94;k}{k!}e&#94;{-\\lambda}e&#94;{itk}\\\\ &=\\sum_{n=0}&#94;{\\infty}\\frac{\\left(\\lambda e&#94;{it}\\right)&#94;k}{k!}e&#94;{-\\lambda}\\\\ &= e&#94;{\\lambda e&#94;{it}}e&#94;{-\\lambda}\\\\ &= e&#94;{\\lambda\\left(e&#94;{it}-1\\right)} \\end{aligned}$$ 4 オイラーの公式より、 $$e&#94;{it} = \\cos t+i\\sin t$$ が成り立つので、 $$ \\begin{aligned} e&#94;{it\\left(aX+bY\\right)} =& e&#94;{itaX}e&#94;{itbY}\\\\ =& \\left(\\cos \\left(taX\\right) + i\\sin\\left(taX\\right)\\right)\\left(\\cos \\left(tbY\\right) + i\\sin\\left(tbY\\right)\\right)\\\\ =& \\left(\\cos\\left(taX\\right)\\cos\\left(tbY\\right) - \\sin\\left(taX\\right)\\sin\\left(tbY\\right)\\right) \\\\ &+ i\\left(\\cos \\left(taX\\right)\\sin\\left(tbY\\right) + \\sin\\left(taX\\right)\\cos \\left(tbY\\right)\\right) \\end{aligned} $$ と分解できる。したがって、 \\(X,Y\\) が独立なので、 $$ \\begin{aligned} \\varphi_{aX+bY}(t) =&\\mathbb{E}\\left(e&#94;{it\\left(aX+bY\\right)}\\right)\\\\ =& \\mathbb{E}\\left(\\cos\\left(taX\\right)\\right)\\mathbb{E}\\left(\\cos\\left(tbY\\right)\\right) - \\mathbb{E}\\left(\\sin\\left(taX\\right)\\right)\\mathbb{E}\\left(\\sin\\left(tbY\\right)\\right) \\\\ &+ i\\left(\\mathbb{E}\\left(\\cos \\left(taX\\right)\\right)\\mathbb{E}\\left(\\sin\\left(tbY\\right)\\right) + \\mathbb{E}\\left(\\sin\\left(taX\\right)\\right)\\mathbb{E}\\left(\\cos \\left(tbY\\right)\\right)\\right)\\\\ =& \\left(\\mathbb{E}\\left(\\cos taX\\right) + i\\mathbb{E}\\left(\\sin taX\\right)\\right)\\cdot\\left(\\mathbb{E}\\left(\\cos tbY\\right) + i\\mathbb{E}\\left(\\sin tbY\\right)\\right)\\\\ =&\\mathbb{E}\\left(e&#94;{itaX}\\right)\\cdot\\mathbb{E}\\left(e&#94;{itbY}\\right)\\\\ =&\\varphi_{X}(at)\\varphi_{Y}(bt) \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-2.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-2.html"},{"title":"EX1. Covariance","text":"解答 1 $$ \\begin{aligned} \\mathbb{E}\\left(\\left(X-\\mu_X\\right)\\left(Y-\\mu_Y\\right)\\right) &= \\mathbb{E}\\left(XY - \\mu_YX-\\mu_XY + \\mu_X\\mu_Y\\right)\\\\ &= \\mathbb{E}\\left(XY\\right) - \\mu_Y\\mathbb{E}(X) - \\mu_X\\mathbb{E}(Y) + \\mu_X\\mu_Y\\\\ &= \\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\quad (\\because\\mu_X=\\mathbb{E}(X),\\mu_Y=\\mathbb{E}(Y)) \\end{aligned} $$ 2 連続型確率変数の場合で証明する。（離散型は \\(\\int\\rightarrow\\sum\\) ） $$ \\begin{aligned} \\mathbb{E}(XY) &= \\int_{x}\\int_{y} xy\\mathbb{P}(X=x,Y=y)dxdy\\\\ &= \\int_{x}\\int_{y} xy\\mathbb{P}(X=x)\\mathbb{P}(Y=y)dxdy\\quad(\\because X,Y: \\text{independent})\\\\ &= \\int_{x} x\\mathbb{P}(X=x)dx\\int_{y}y\\mathbb{P}(Y=y)dy\\\\ &= \\mathbb{E}(X)\\mathbb{E}(Y) \\end{aligned} $$ となるので、 \\((1)\\) より、 $$ \\begin{aligned} \\mathrm{Cov}(X,Y) &= \\mathbb{E}\\left(\\left(X-\\mu_X\\right)\\left(Y-\\mu_Y\\right)\\right)\\\\ &=\\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\\\ &=0 \\end{aligned} $$ 3 $$ \\begin{aligned} \\mathrm{Var}(X+Y) &= \\mathbb{E}\\left((X+Y)&#94;2\\right) - \\left(\\mathbb{E}\\left(X+Y\\right)\\right)&#94;2\\\\ &= \\mathbb{E}\\left(X&#94;2 + 2XY + Y&#94;2\\right) - \\left(\\mathbb{E}(X) + \\mathbb{E}(Y)\\right)&#94;2 \\\\ &= \\left(\\mathbb{E}(X&#94;2) - \\mathbb{E}(X)&#94;2\\right) + \\left(\\mathbb{E}(Y&#94;2) - \\mathbb{E}(Y)&#94;2\\right) + 2\\left(\\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\right)\\\\ &= \\mathrm{Var}(X) + \\mathrm{Var}(Y) + 2\\mathrm{Cov}(X,Y) \\end{aligned} $$ 4 $$ \\begin{aligned} \\mathrm{Cov}\\left(aX+bY,cZ+dW\\right) &= \\mathbb{E}\\left(\\left(aX+bY\\right)\\left(cZ+dW\\right)\\right) - \\mathbb{E}\\left(aX+bY\\right)\\mathbb{E}\\left(cZ+dW\\right)\\\\ &= \\left(\\mathbb{E}\\left(aXcZ\\right) + \\cdots + \\mathbb{E}\\left(bYdW\\right)\\right) - \\left(\\mathbb{E}(aX)\\mathbb{E}(cZ) + \\cdots + \\mathbb{E}(bY)\\mathbb{E}(dW) \\right)\\\\ &= \\left\\{\\mathbb{E}\\left(aXcZ\\right) - \\mathbb{E}(aX)\\mathbb{E}(cZ) \\right\\} + \\cdots + \\left\\{\\mathbb{E}\\left(bYdW\\right) - \\mathbb{E}(bY)\\mathbb{E}(dW) \\right\\}\\\\ &= ac\\left\\{\\mathbb{E}\\left(XZ\\right) - \\mathbb{E}(X)\\mathbb{E}(Z)\\right\\} + \\cdots + bd\\left\\{\\mathbb{E}\\left(YW\\right) - \\mathbb{E}(Y)\\mathbb{E}(W)\\right\\}\\\\ &= ac\\mathrm{Cov}(X,Z) + ad\\mathrm{Cov}(X,W) + bc\\mathrm{Cov}(Y,Z) + bd\\mathrm{Cov}(Y,W) \\end{aligned} $$ 5 $$ \\begin{aligned} \\mathrm{Cov}\\left(X,Y\\right)&#94;2 &= \\left(\\sum_{x,y}(x-\\mu_X)(y-\\mu_Y)\\mathbb{P}(X=x,Y=y)\\right)&#94;2\\\\ &= \\left(\\sum_{z,w}zw\\mathbb{P}(X=x,Y=y)\\right)&#94;2\\\\ &= \\left(\\sum_{z,w}zwP_{zw}\\right)\\left(\\sum_{z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime}w&#94;{\\prime}P_{z&#94;{\\prime}w&#94;{\\prime}}\\right)\\\\ &=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}zwz&#94;{\\prime}w&#94;{\\prime}P_{zw}P_{z&#94;{\\prime}w&#94;{\\prime}}\\quad\\left(\\because\\text{expansion}\\right)\\\\ \\mathrm{Var}(X)\\mathrm{Var}(Y) &= \\left(\\sum_{x}\\left(x-\\mu_X\\right)&#94;2\\mathbb{P}(X=x)\\right)\\left(\\sum_{y}\\left(y-\\mu_Y\\right)&#94;2\\mathbb{P}(Y=y)\\right)\\\\ &= \\left(\\sum_{x,y}\\left(x-\\mu_X\\right)&#94;2\\mathbb{P}(X=x,Y=y)\\right)\\left(\\sum_{x,y}\\left(y-\\mu_Y\\right)&#94;2\\mathbb{P}(X=x,Y=y)\\right)\\\\ &= \\left(\\sum_{z,w}z&#94;2P_{x,y}\\right)\\left(\\sum_{z,w}w&#94;2P_{x,y}\\right)\\\\ &=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\left(=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\right)\\\\ &=\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}+\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}} \\end{aligned} $$ と変形できるので、 $$ \\begin{aligned} \\mathrm{Var}(X)\\mathrm{Var}(Y) - \\mathrm{Cov}\\left(X,Y\\right)&#94;2 &= \\left(\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}+\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\right) - \\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}zwz&#94;{\\prime}w&#94;{\\prime}P_{zw}P_{z&#94;{\\prime}w&#94;{\\prime}}\\\\ &= \\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}\\left(z&#94;2w&#94;{\\prime2} + z&#94;{\\prime2}w&#94;2 - 2zwz&#94;{\\prime}w&#94;{\\prime}\\right)P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\\\ &=\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}\\left(zw&#94;{\\prime} - z&#94;{\\prime}w\\right)&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\\\ &\\geq0\\\\ \\therefore\\mathrm{Var}(X)\\mathrm{Var}(Y) &\\geq \\mathrm{Cov}\\left(X,Y\\right)&#94;2 \\end{aligned} $$ memo ある定数 \\(k\\) について以下が成り立つ時 （ \\(X\\) と \\(Y\\) に以下の関係が成り立つ時） 等号条件が成立する。 $$Y = kX$$ \\(\\mathbb{P}\\left(X=x_n,Y=y_m\\right) = \\mathbb{P}\\left(X=x_n\\right)\\delta_{nm}\\) if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-1.html"},{"title":"Neural Networks","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開)","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-5.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-5.html"},{"title":"レポート課題5(10/31出題)","text":"CeMdIHtjwqHF4vjpY3FaGg==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report5.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report5.html"},{"title":"確率と統計(1)基礎概念","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 In [1]: import numpy as np import matplotlib.pyplot as plt 講義概要 確率変数と確率分布 確率分布の性質を表す指標 同時確率 条件付き確率 確率変数と確率分布 用語 意味 確率(probability) 事象の起こりやすさを定量的に示す $0$ から $1$ の値 確率変数(random variable) その変数に関する任意の事象に対して確率が定義されている変数 確率分布(probability distribution) 確率変数に関する各事象に対してその確率を与える関数 離散型(discrete type)確率変数 ある可算集合 $\\mathcal{X}$ の中のいずれかの値をとる確率変数 確率質量関数(probability mass function) $f(x)$ $$f(x)\\geq0,\\quad \\sum_{x\\in\\mathcal{X}}f(x) = 1$$ 連続型(continuous type)確率変数 連続値をとる確率変数 確率密度関数(probability density function) $f(x)$ $$f(x)\\geq0,\\quad\\int_{-\\infty}&#94;{\\infty}f(x)dx=1$$ 累積分布関数(cumulative distribution function) $F(x)$ $$F(x) = P(X\\leq x)=\\int_{-\\infty}&#94;{x}f(u)du\\ \\text{ or } \\sum_{i:i\\leq x}f(i)$$ 確率分布の性質を表す指標 用語 数式 説明 期待値(expectation) $$E(X) = \\sum_xxf(x)\\ \\text{ or }\\int xf(x)dx$$ 確率変数の値の平均（正確には確率による重み付きの平均） 確率変数を代表する値を表す指標 ※ 外れ値(outlier)に敏感 中央値(median) $P(X\\leq x)=1/2$ を満たす $x$ データを大きい順（または小さい順）に並べたときの真ん中の値。 最頻値(mode) $f(x)$ を最大にする $x$ データの中で最も頻度が高い値 分散(variance) $$\\begin{aligned}V(X) &= E\\left\\{(X-E[X])&#94;2\\right\\}\\\\&=E\\left\\{X&#94;2-2E[X]X+(E[X])&#94;2\\right\\}\\\\&=E[X&#94;2]-E\\left[2E[X]X\\right]+(E[X])&#94;2\\\\&=E[X&#94;2]-2E[X]E[X]+(E[X])&#94;2\\\\&=E[X&#94;2]-(E[X])&#94;2\\end{aligned}$$ 確率変数の散らばり具合を表す指標 標準偏差(standard devariation) $\\sqrt{V(X)}$ 分散の平方根 標準化(standardization) $$Z=\\frac{X-E(X)}{\\sqrt{V(X)}}$$ 任意の確率変数 $X$ に対して、期待値 $0$、分散 $1$ の確率変数 $Z$ が定義できる。 歪度(skewness) $$\\alpha_3 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;3\\right\\}}{\\left\\{V(X)\\right\\}&#94;{3/2}}$$ 確率変数の非対称性を表す。 劣度(kurtosis) $$\\beta_4 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;4\\right\\}}{\\left\\{V(X)\\right\\}&#94;{2}}-3$$ 確率分布の尖り具合を表す。 積率(moment) $$\\mu_r = E\\left[X&#94;r\\right]$$ 期待値・分散・歪度・劣度などを表すパラメータ。全ての次数の積率を指定すれば、確率分布を一位に決定することができる。（左は $r$ 次の積率） 積率母関数(moment generating function) $$M_X(t) = E[e&#94;{tX}]=\\begin{cases}\\sum_xe&#94;{tx}f(x)\\\\\\int e&#94;{tx}f(x)dx\\end{cases}\\\\ M_X&#94;{(r)}(0)=\\mu_r$$ 全ての次数の積率を生成する関数。存在しない（無限大に発散する）こともある。 In [2]: def computation_variance ( n = 10000 , mu = 0 , sigma = 1 , seed = None ): X = np . random . RandomState ( seed ) . normal ( loc = mu , scale = sigma , size = n ) EX = sum ( X ) / n EX2 = sum ( X ** 2 ) / n # Calculate variance in 3 ways. var1 = np . var ( X ) var2 = sum (( X - EX ) ** 2 ) / n var3 = EX2 - EX ** 2 print ( \"`np.var(X)` =\" , var1 ) print ( \"E{(X - E[X])&#94;2} =\" , var2 ) print ( \"E[X&#94;2] - (E[X])&#94;2 =\" , var3 ) In [3]: computation_variance ( mu = 100 , seed = 0 ) `np.var(X)` = 0.9752679753477969 E{(X - E[X])&#94;2} = 0.9752679753477979 E[X&#94;2] - (E[X])&#94;2 = 0.9752679752218683 In [4]: computation_variance ( mu = 1e8 , seed = 1 ) `np.var(X)` = 0.9975731614280597 E{(X - E[X])&#94;2} = 0.9975731614281662 E[X&#94;2] - (E[X])&#94;2 = -98.0 ※ 「二乗の平均 - 平均の二乗」は丸め誤差の影響を受けやすい 歪度(skewness) 確率変数の非対称性を表す。 $$\\alpha_3 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;3\\right\\}}{\\left\\{V(X)\\right\\}&#94;{3/2}}$$ In [5]: def plot_skewness ( ax = None , seed = None , n = 100 ): if ax == None : fig , ax = plt . subplots () X = np . random . RandomState ( seed ) . randint ( low = 1 , high = 7 , size = n ) ax . hist ( X , density = True , bins = 6 , color = \"blue\" , align = 'left' ) EX = np . mean ( X ) VX = np . var ( X ) skewness = np . mean (( X - EX ) ** 3 ) / VX ** ( 3 / 2 ) ax . set_title ( f \"skewness = {skewness:.3f} \" ) return ax In [6]: fig = plt . figure ( figsize = ( 12 , 3 )) for i , seed in enumerate ([ 44756 , 96331 , 76432 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plot_skewness ( ax = ax , seed = seed ) plt . show () 劣度(kurtosis) 確率分布の尖り具合を表す。 $$\\beta_4 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;4\\right\\}}{\\left\\{V(X)\\right\\}&#94;{2}}-3$$ In [7]: X = np . linspace ( - 5 , 5 , 10000 ) In [8]: f1 = lambda x : 1 / 1250 * ( 5 - abs ( x )) ** 4 f2 = lambda x , mu = 0 , sigma = 1 : 1 / np . sqrt ( 2 * np . pi * sigma ** 2 ) * np . exp ( - ( x - mu ) ** 2 / 2 * sigma ** 2 ) f3 = lambda x : 1 / 4 if abs ( x ) <= 2 else 0 In [9]: def plot_kurtosis ( X , func , ax = None ): if ax == None : fig , ax = plt . subplots () Y = np . array ([ func ( x ) for x in X ]) ax . plot ( X , Y , color = \"red\" ) Y /= sum ( Y ) EX = np . sum ( Y * X ) VX = np . sum ( Y * ( X - EX ) ** 2 ) kurtosis = np . sum ( Y * ( X - EX ) ** 4 ) / VX ** 2 - 3 ax . set_title ( f \"kurtosis = {kurtosis:.3f} \" ) return ax In [10]: fig = plt . figure ( figsize = ( 12 , 3 )) for i , func in enumerate ([ f1 , f2 , f3 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plot_kurtosis ( X = X , func = func , ax = ax ) ax . set_xlim ( - 5 , 5 ); ax . set_ylim ( 0 , 1 ) plt . show () 同時確率 用語 数式 説明 同時確率(joint probability) 複数の確率変数が関わる確率 同時確率質量関数 $$P(X=x,Y=y) = f(x,y)\\\\f(x,y)\\geq0,\\quad\\sum_{x\\in\\mathcal{X}}\\sum_{y\\in\\mathcal{Y}}f(x,y)=1$$ 離散型の同時確率 同時確率密度関数 $$P(a\\leq X\\leq b,c\\leq Y\\leq d) = \\int_c&#94;d\\int_a&#94;bf(x,y)dxdy\\\\f(x,y)\\geq0,\\quad\\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x,y)dxdy=1$$ 連続型の同時確率 共分散 $X$ と $X&#94;{\\prime}$ の 共分散(covariance) ： $$\\mathrm{Cov}(X,X&#94;{\\prime}) = E\\left[(X-E[X])(X&#94;{\\prime}-E[X&#94;{\\prime}])\\right]$$ $\\mathrm{Cov}(X,X&#94;{\\prime})>0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 同傾向 $\\mathrm{Cov}(X,X&#94;{\\prime})<0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 逆傾向 $\\mathrm{Cov}(X,X&#94;{\\prime})=0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 無関係 共分散は、以下の形でも表されるので、A社の株価を $X$、B社の株価を $X&#94;{\\prime}$ とすると、以下の解釈も可能 $$V(X+X&#94;{\\prime}) = V(X) + V(X&#94;{\\prime}) + 2\\mathrm{Cov}(X,X&#94;{\\prime})$$ $\\mathrm{Cov}(X,X&#94;{\\prime})>0\\Longleftrightarrow V(X+X&#94;{\\prime})>V(X)+V(X&#94;{\\prime})$ なので、A,B両者の株を買うと分散が 拡大 する → 変動リスクが増大し、資産価値は不安定 $0>\\mathrm{Cov}(X,X&#94;{\\prime})\\Longleftrightarrow V(X)+V(X&#94;{\\prime})>V(X+X&#94;{\\prime})$ なので、A,B両者の株を買うと分散が 縮小 する → 変動リスクが抑制され、資産価値は安定 独立性 全ての $(x,y)$ で $p_{X,Y}(x,y) = p_X(x)p_Y(y)$ の時、$X$ と $Y$ は互いに 独立(independent) 2つの確率変数が独立の時、 積の期待値は各々の期待値の積と一致 $$E[XY] = E[X]E[Y]$$ 和の積率母関数は各々の積率母関数の積と一致 $$M_{X+Y}(t) = M_X(t)M_Y(t)$$ ２つの確率変数は無相関 $$\\mathrm{Cov}(X,Y) = 0$$ 2つの確率変数が独立ならば無相関であるが、逆は一般には正しくない。 条件付き確率 ベイズの定理(Bayes' theorem) $$P(X|Y) = \\frac{P(Y|X)P(X)}{P(Y)}$$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-5.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-5.html"},{"title":"生物物理学 第6回","text":"講師： 樋口秀男 エネルギー生産系の仕組み（細胞内小器官） 光関連の現象 細胞・器官 たんぱく質等 眼で見る 視細胞（桿体、錐体細胞） ロドプシン等 光合成 葉緑体 光システム（タンパク質複合体） 蛍の光 発色細胞 ルシフェリン+ルシフェラーゼ クラゲの光 発色細胞 エコーリン、GFP(green fluorescence protein) 日焼け 色素形成細胞（メラノサイト） メラニン（チロシンの重合体） 体内時計 目のメラノプシン発現網膜神経細胞 メラノプシン ATPを作るプロセス 光合成(photosynthesis) は、高等植物や緑藻（青色細菌）が 葉緑体（クロロプラスト） 内で行う、二酸化炭素の固定反応である。 この過程で水が酸素に酸化され、二酸化炭素は還元されて糖になる。 光合成は大きく2つの段階に区別される。 1つは 明反応 と呼ばれ、光のエネルギーを利用して水が酸素に酸化されるとともに、二酸化炭素の還元に必要な \\(\\mathrm{NADPH}_2&#94;+\\) と \\(\\mathrm{ATP}\\) をつくりだす。 もう1つの段階は 暗反応 と呼ばれ、 \\(\\mathrm{NADPH}_2&#94;+\\) と \\(\\mathrm{ATP}\\) を利用して二酸化炭素から種々の糖がつくられる。 クロロプラスト中の大部分のクロロフィルは 光を集めるアンテナ の役割を果たす。吸収された光子のエネルギーはアンテナクロロフィル間を励起エネルギーとして移動し、 アンテナクロロフィル よりも励起エネルギーの 低い 反応中心クロロフィル に集められる。 FRET(Fluorescence resonance energy transfer) $$\\text{Transfer Efficiency at two rates: } E= \\frac{k_T}{k_T+k_F} = \\frac{1}{1 + \\frac{k_F}{k_T}}$$ \\(k_T\\) ：Donor から Acceptor に移動する速度 \\(k_F\\) ：Donor が吸収する速度 Chl(from) Chl(to) 移動効率（移動距離） b(F) a(A) 高 b(F) b(A) 中 a(F) a(A) 中 a(F) b(A) 低 幅 \\(L\\) の中の電子のエネルギー準位： \\(E_n = \\frac{1}{8m}\\left(\\frac{nh}{L&#94;{\\prime}}\\right)&#94;2\\) フェミルの黄金律 時間的に変化しない弱い相互作用（摂動）のある電子系が、あるエネルギー固有状態から別のエネルギー固有状態へ移る際の単位時間あたりの遷移確率は、摂動法（時間で展開）の最低次数として近似計算できる。 遷移速度 \\(k_T\\) は、エネルギー固有状態の単位時間あたりの遷移確率である。 $$\\Psi_{\\mathrm{Da}}\\Psi_{\\mathrm{Ab}}\\underset{k_T}{\\longrightarrow}\\Psi_{\\mathrm{Db}}\\Psi_{\\mathrm{Aa}}$$ Da: Active state of Donor Ab: Ground state of Acceptor 光合成の概要 水を分解して、電子を膜間に入れる。 光を用いて電子の酸化還元電位を上げる。 酸化還元電位を利用してチラコイド外のプロトンを内側に輸送する。 内側のプロトンのケミカルポテンシャルを利用してATPを合成する。 まとめ 共役長が長くなる と吸収波長は長くなり、可視光の利用が可能となる。 分子間距離が近いと エネルギー移動や電子移動 が起こる。電子移動の方向は、酸化還元電位に依存する。 エネルギーを 酸化還元電位 に交換する（逆も） 生物は、 多数のタンパク質が 上記1-3の原理を巧みに利用して、光化学反応（葉緑体内の光合成）や電子伝達（ミトコンドリア内）の機能を行う。 ATP を合成するF1,F0は高効率でATPを合成する。特に、F1は仕事効率が約100%である。 .prompt { /* This is for jupyter blog.*/ min-width: 0; /* This padding is tuned to match the padding on the CodeMirror editor. */ padding: 0em 0.4em 0em 0em; margin: 0px; font-family: monaco; } /*蛍光ペン(pink)*/ .marker-pink { color: #c45a5a; background: linear-gradient(transparent 70%, #ff66ff 60%); font-weight: bold; } /*蛍光ペン(blue) & hover info*/ .marker-info { color: #5C7DC4; background: linear-gradient(transparent 70%, #66FFCC 60%); font-weight: bold; position: relative; cursor: pointer; } .marker-info:hover:before { opacity: 1; z-index: 2; } .marker-info:before { content: attr(aria-label); opacity: 0; position: absolute; top: 30px; right: -90px; font-size: 14px; width: 300px; padding: 10px; color: #fff; background-color: #555; border-radius: 3px; pointer-events: none; } /* 枠囲み */ .frame { border: solid 1.0px #000000; padding: 0.5em 1em; margin: 2em 0; } /* 暗記用 question box */ span .qbox{ display: none; } span.qbox-wrapper:hover .qbox-default{ display: none; } span.qbox-wrapper:hover .qbox{ display: inline; } .qbox-wrapper{ font-weight: bold; padding: 5px 10px; border-radius: 5px; border: solid 2px #000000; margin: 5px } .qbox-wrapper:hover{ text-shadow: 0px 0px 6px rgba(255, 255, 255, 1); -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); transition: all 0.4s ease 0s; } /* 画像吹き出し */ .balloon { display: table; width: 100%; } .balloon_img { display: table-cell; vertical-align: middle; width: 50%; padding-right: 10px; } .balloon_comment { border: #83274e solid 4px; position: relative; background: #fff; padding: 12px; border-radius: 13px; display: block } .balloon_comment::before { content: \"\"; position: absolute; border-right: 23px solid #83274e; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -23px; } .balloon_comment::after { content: \"\"; position: absolute; border-right: 24px solid #fff; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -17px; } if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-6.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-6.html"},{"title":"Introduction","text":"講師： 木立 尚孝 （ 生物データマイニング論 も担当されている方） 計算演習 # リンク 問題 1 Covariance 2 Characteristic function 3 Law of Large Numbers 4 Exponential Distribution 5 Categorical Distribution 6 Multinomial Distribution 7 Positive Definite Symmetric Matrix 8 Multivariate Normal Distribution 9 Kullback-Leibler Divergence 10 Expectation Maximization Algorithm 11 Data Assimilation 12 Order Statistics 13 Sparse Modeling 14 Brownian motion 15 Neural Network プログラミング演習 配列モチーフ探索 最適行動列アルゴリズム Gene Network Inference Itemset mining algorithm","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-0.html"},{"title":"頻度パターンマイニング","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 参考資料： 頻出パターン発見アルゴリズム入門 -アイテム集合からグラフまで- Data Mining A formal study of efficient methods for extracting interesting rules and patterns from massive data. Frequent itemset mining. Closed pattern mining. Structured data mining. Itemset Mining Frequent Itemset Mining Closed Itemset Mining Closure Extension LCM Itemset Mining Frequent Itemset Mining Finding all \"frequent\" sets of elements(items) appearing $\\sigma$ times or more in a database. Definitions Database A set $\\Sigma = \\{1,\\ldots,n\\}$ of items(elements). Tramsaction database A set $T=\\{t_1,\\ldots,t_m\\}$ of subsets of $\\Sigma$ Each subset $t\\subseteq\\Sigma$ is called a transaction Frequent sets Itemset $X$ appears in transaction t: $X\\subseteq t$ Occurrence of $X$ in database $T$: $$\\mathrm{Occ}(X,T) = \\left\\{t\\in T: X\\subseteq t\\right\\}$$ Frequency of $X$: $\\mathrm{Fr}(X,T) = |\\mathrm{Occ}(X,T)|$ Minimum support (minsup): $0\\leq\\sigma\\leq|T|$ $X$ is frequent in $T$ if $\\mathrm{Fr}(X,T)\\geq\\sigma$ Market Basket Data Popular application of itemset mining. Business and Market data analysis. ※ Visit \"The Instacart Online Grocery Shopping Dataset 2017\" and Download \"instacart_2017_05_01\" Folder. In [1]: ! tree instacart_2017_05_01 instacart_2017_05_01 ├── aisles.csv ├── departments.csv ├── order_products__prior.csv ├── order_products__train.csv ├── orders.csv └── products.csv 0 directories, 6 files In [2]: import numpy as np import pandas as pd products.csv In [3]: df_products = pd . read_csv ( \"./instacart_2017_05_01/products.csv\" ) df_products . head ( 3 ) Out[3]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } product_id product_name aisle_id department_id 0 1 Chocolate Sandwich Cookies 61 19 1 2 All-Seasons Salt 104 13 2 3 Robust Golden Unsweetened Oolong Tea 94 7 In [4]: print ( f \"`products.csv` data num: {len(df_products)}\" ) `products.csv` data num: 49688 In [5]: id2name = dict ( zip ( df_products . product_id , df_products . product_name )) order_products__train.csv In [6]: df_order_products = pd . read_csv ( \"./instacart_2017_05_01/order_products__train.csv\" ) df_order_products . head ( 3 ) Out[6]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } order_id product_id add_to_cart_order reordered 0 1 49302 1 1 1 1 11109 2 1 2 1 10246 3 0 In [7]: N_transactions_total = len ( df_order_products . groupby ( \"order_id\" )) print ( f \"Total number of transactions: {N_transactions_total} \" ) Total number of transactions: 131209 Extract Only N products In [8]: N = 10 In [9]: extracted_ids = df_order_products . groupby ( \"product_id\" ) . size () . reset_index () . sort_values ( by = 0 , ascending = False ) . product_id [: N ] . values In [10]: # Only focus on N products. df_order_products_extracted = df_order_products [ df_order_products . product_id . apply ( lambda x : x in extracted_ids )] In [11]: N_transactions_extracted = len ( df_order_products_extracted . groupby ( \"order_id\" )) print ( f \"Transactions: {N_transactions_extracted} / {N_transactions_total} \" ) Transactions: 59887/131209 In [12]: for i , extracted_id in enumerate ( extracted_ids ): print ( f \"No.{i+1:>0{len(str(N))}}: {id2name[extracted_id]} \" ) No.01: Banana No.02: Bag of Organic Bananas No.03: Organic Strawberries No.04: Organic Baby Spinach No.05: Large Lemon No.06: Organic Avocado No.07: Organic Hass Avocado No.08: Strawberries No.09: Limes No.10: Organic Raspberries In [13]: df_product_id_OneHot = pd . get_dummies ( df_order_products_extracted . product_id ) In [14]: df_order_OneHot = pd . concat ([ df_order_products_extracted . order_id , df_product_id_OneHot ], axis = 1 ) In [15]: df = df_order_OneHot . groupby ( \"order_id\" ) . sum () . reset_index () In [16]: df . head ( 3 ) Out[16]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } order_id 13176 16797 21137 21903 24852 26209 27966 47209 47626 47766 0 1 1 0 0 0 0 0 0 1 0 0 1 96 0 0 0 0 0 0 1 0 0 0 2 98 1 0 0 0 0 0 1 0 0 0 In [17]: database = np . array ( df [ df . columns [ 1 :]]) In [18]: database Out[18]: array([[1, 0, 0, ..., 1, 0, 0], [0, 0, 0, ..., 0, 0, 0], [1, 0, 0, ..., 0, 0, 0], ..., [0, 0, 1, ..., 0, 0, 0], [0, 0, 0, ..., 0, 0, 0], [0, 0, 1, ..., 0, 0, 0]], dtype=uint8) In [19]: N , M = database . shape In [20]: print ( f \"n_samples: {N} \" ) print ( f \"n_features: {M} \" ) n_samples: 59887 n_features: 10 In [21]: from kerasy.search.itemset import FrequentSet In [22]: model = FrequentSet ( threshold = 100 ) In [23]: model . fit ( database ) In [24]: # Frequent Itemset. (frq >= threshold) model . all Out[24]: [None, array([0]), array([0, 1]), array([0, 1, 3]), array([0, 2]), array([0, 2, 3]), array([0, 2, 3, 6]), array([0, 2, 3, 7]), array([0, 2, 5]), array([0, 2, 6]), array([0, 2, 6, 7]), array([0, 2, 7]), array([0, 2, 8]), array([0, 2, 9]), array([0, 3]), array([0, 3, 5]), array([0, 3, 6]), array([0, 3, 6, 7]), array([0, 3, 7]), array([0, 3, 8]), array([0, 3, 9]), array([0, 5]), array([0, 5, 6]), array([0, 5, 7]), array([0, 5, 8]), array([0, 5, 9]), array([0, 6]), array([0, 6, 7]), array([0, 6, 8]), array([0, 6, 9]), array([0, 7]), array([0, 7, 8]), array([0, 8]), array([0, 8, 9]), array([0, 9]), array([1]), array([1, 3]), array([1, 3, 4]), array([1, 3, 9]), array([1, 4]), array([1, 4, 5]), array([1, 4, 8]), array([1, 4, 9]), array([1, 5]), array([1, 5, 8]), array([1, 6]), array([1, 7]), array([1, 8]), array([1, 8, 9]), array([1, 9]), array([2]), array([2, 3]), array([2, 3, 4]), array([2, 3, 5]), array([2, 3, 6]), array([2, 3, 7]), array([2, 3, 8]), array([2, 3, 9]), array([2, 4]), array([2, 4, 5]), array([2, 4, 6]), array([2, 4, 7]), array([2, 4, 8]), array([2, 4, 9]), array([2, 5]), array([2, 5, 6]), array([2, 5, 7]), array([2, 5, 8]), array([2, 5, 9]), array([2, 6]), array([2, 6, 7]), array([2, 6, 8]), array([2, 6, 9]), array([2, 7]), array([2, 7, 8]), array([2, 8]), array([2, 8, 9]), array([2, 9]), array([3]), array([3, 4]), array([3, 4, 5]), array([3, 4, 5, 8]), array([3, 4, 6]), array([3, 4, 7]), array([3, 4, 8]), array([3, 4, 8, 9]), array([3, 4, 9]), array([3, 5]), array([3, 5, 7]), array([3, 5, 8]), array([3, 5, 8, 9]), array([3, 5, 9]), array([3, 6]), array([3, 6, 7]), array([3, 6, 8]), array([3, 6, 9]), array([3, 7]), array([3, 7, 8]), array([3, 8]), array([3, 8, 9]), array([3, 9]), array([4]), array([4, 5]), array([4, 5, 7]), array([4, 5, 8]), array([4, 5, 8, 9]), array([4, 5, 9]), array([4, 6]), array([4, 6, 8]), array([4, 6, 9]), array([4, 7]), array([4, 7, 8]), array([4, 8]), array([4, 8, 9]), array([4, 9]), array([5]), array([5, 6]), array([5, 6, 7]), array([5, 6, 8]), array([5, 7]), array([5, 7, 8]), array([5, 8]), array([5, 8, 9]), array([5, 9]), array([6]), array([6, 7]), array([6, 8]), array([6, 8, 9]), array([6, 9]), array([7]), array([7, 8]), array([8]), array([8, 9]), array([9])] Association Rule Mining Confidence : $\\mathrm{Supp}(A\\text{ and }B)/\\mathrm{Supp}(A)$ (Probability of $B$, Given $A$) What item is likely to be bought when $A$ is bought. Search: large support, confidence large Post-processing of itemset mining Summary Itemset mining is the simplest of all mining algorithms. Need to maintain occurrence of each pattern in database. Tree by lexicographical order is (implicitly) used. Closed Itemset Mining [Problem] in Frequent Pattern Mining Huge Number of frequent itemsets Hard to analyze Most of them are similar [Solution] Closed Pattern Mining Find only closed patterns Observation : Most frequent itemset $X$ can be extended without changing occurrence by adding new elements. definition : An itemset $X$ is a \"closed set\" if and only if there is no proper superset of $X$ with the same frequency (thus the same occurrence set). A closed itemset is the maximal set among all itemsets with the same occurrences. Equivalence class $[X] =\\left\\{Y | \\mathrm{Occ}(X)=\\mathrm{Occ}(Y)\\right\\}$ Implementation. Brute-force: Stupid Baseline ALGORITHM: Bruteforcel First, generate all frequent itemsets. Check them one by one via maximality test Finally, extract all closed sets Maximality test for each candidate frequent set $X$ Add some element $e$ in $\\Sigma$ to $X$ If $\\mathrm{Freq}(X U \\{e\\})$ is properly less than $\\mathrm{Freq}(X)$ then reject $X$. ※ Number of patterns usually exponential to input size, so Brute-force is exponential delay w.r.t. pattern size. Reverse Search A general mathematical framework to design enumeration algorithms. Can be used to prove the correctness of the algorithm. Popular in computational geometry. Data mining algorithms can be explained in remarkable simplicity. How to do reverse Search? Native Backtracking → Duplication Duplication chack by Marking → Exponential Memory. Reduction Map : Mapping from a children to the parent. LCM(Linear Time Closed Sets Miner) Key Algorithm: Prefix Preserving Closure Extension = Children generation from the reduction map. 飽和集合列挙アルゴリズムを用いた大規模データベースからのルール発見手法 Python Implementation: I'm doing now XD Summary Closure Extension: Jump from closed set to closed set. LCM: Linear Delay. Very fast in practice, too (Winner of FIMI'04(Frequent Itemset Mining Implementation Workshop)). Relation to clique enumeration. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-5.html"},{"title":"機械学習概論","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 教師付き学習(Supervised learning) 大量の教師データがあれば、DNNですごい性能を出せるので、今の研究の主流は以下。 transfer learning (転移学習) few-shot learning (一枚だけで汎化性能を得る。) zero-shot learning (文字の情報を用いて画像の識別を行う。) メタ学習 (どうやって学習すれば良いかを学ぶ。) Nearest Neighbor法 決定木(decision tree) Support Vector Machine(SVM) アンサンブル学習 Neural Network Nearest Neighbor法 In [2]: N = 150 ; K = 3 In [3]: data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 1 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [4]: cls = np . concatenate ([ np . full ( shape = int ( N / 3 ), fill_value = 0 ), np . full ( shape = int ( N / 3 ), fill_value = 1 ), np . full ( shape = int ( N / 3 ), fill_value = 2 ), ]) In [5]: xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [6]: # Nearest Neighbor Zs = np . asarray ([ cls [ np . argmin ( np . sum ( np . square ( xy - data ), axis = 1 ))] for xy in XYs ], dtype = int ) . reshape ( Xs . shape ) In [7]: plt . figure ( figsize = ( 8 , 6 )) plt . scatter ( x , y , c = cls , s = 50 ) plt . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) plt . title ( \"Nearest Neighbor\" ), plt . xlim ( xmin , xmax ), plt . ylim ( ymin , ymax ) plt . xticks ([]), plt . yticks ([]) plt . show () 決定木(decision tree) $M$ 個のクラスに分割したとして、 $$\\text{Information gain} = \\text{Entropy}(S) - \\left\\{\\text{Entropy}(S_1) + \\cdots + \\text{Entropy}(S_M)\\right\\}$$ が最大になるように条件を設定する。 In [8]: from kerasy.ML.tree import DecisionTreeClassifier In [9]: N = 150 ; K = 3 In [10]: data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 1 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [11]: cls = np . concatenate ([ np . full ( shape = int ( N / 3 ), fill_value = 0 ), np . full ( shape = int ( N / 3 ), fill_value = 1 ), np . full ( shape = int ( N / 3 ), fill_value = 2 ), ]) In [12]: xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [13]: model = DecisionTreeClassifier ( criterion = \"gini\" , max_depth = 3 , random_state = 0 ) model . fit ( data , cls ) predictions = model . predict ( data ) In [14]: # Decision Tree Zs = model . predict ( XYs ) . reshape ( Xs . shape ) In [15]: fig = plt . figure ( figsize = ( 18 , 4 )) for i , seed in enumerate ([ 0 , 1 , 5 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) model = DecisionTreeClassifier ( criterion = \"gini\" , max_depth = 3 , random_state = seed ) model . fit ( data , cls ) predictions = model . predict ( data ) Zs = model . predict ( XYs ) . reshape ( Xs . shape ) ax . scatter ( x , y , c = predictions , s = 50 ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_title ( f \"Decision Tree seed= {seed} \" ), ax . set_xlim ( xmin , xmax ), ax . set_ylim ( ymin , ymax ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () Support Vector Machine(SVM) $$f(\\mathbf{x}) = \\mathbf{w}\\cdot\\mathbf{x} + \\mathbf{b} = \\mathbf{0}$$ $\\|\\mathbf{w}\\|$ を決定するためには、黄色の線上にある点(support vector)のみ寄与。SVMの重要なところは、通常 $$\\mathrm{Error}_{\\text{世の中全体}}>\\mathrm{Error}_{\\text{見たことのある世界}}$$ であるが、発明者 Vapnic が $$\\mathrm{Error}_{\\text{世の中全体}}\\leq\\mathrm{Error}_{\\text{見たことのある世界}} + \\alpha$$ を証明してしまった。なお、$\\alpha$ も $\\|\\mathbf{w}\\|$ の最小化で最小化できるため、$\\|\\mathbf{w}\\|$ の最小化をひたすら頑張るだけで良い。 ※ 実装は ここ アンサンブル学習 名前 説明 強学習器 bagging トレーニングデータをランダムにサンプリングして学習器 $f&#94;b(\\mathbf{x}),(b=1,2,\\ldots,B)$ を作る。 $$f(\\mathbf{x}) = \\frac{1}{B}\\sum_b&#94;Bf&#94;b(\\mathbf{x})$$ Random Forest (RF) 決定木 $f&#94;r(\\mathbf{x}),(r=1,2,\\ldots,R)$ をランダムに作る。木がたくさんあるので森(forest)になる。 $$f(\\mathbf{x}) = \\frac{1}{R}\\sum_r&#94;Rf&#94;r(\\mathbf{x})$$ boosting 弱学習器 $f&#94;t(\\mathbf{x})$ の精度に応じた重み付き多数決を行う。なお、$\\alpha$ の決め方はadaboostやXGboostなど様々ある。 $$f(\\mathbf{x}) = \\frac{1}{T}\\sum_t&#94;T\\alpha&#94;tf&#94;t(\\mathbf{x})$$ Neural Network パーセプトロン $\\mathbf{w}$ を法線と考えると、超平面のあっちとこっちを判定しているだけ＝SVMと同じ。 perceptronの学習アルゴリズムは、下記の流れで収束することが知られている。 重み（法線）ベクトルをランダムに設定 2クラス $0,1$ があったとして、training dataから順に取り出して、$y$ を出力してみる（平面のどちら側か） 合っていたら何もしない。間違っていたら $$ \\begin{cases} \\mathbf{w}\\longleftarrow\\mathbf{w} +\\rho \\mathbf{x} & (\\text{クラス1を0と誤判定した時})\\\\ \\mathbf{w}\\longleftarrow\\mathbf{w} -\\rho \\mathbf{x} & (\\text{クラス0を1と誤判定した時}) \\end{cases}$$ 2,3を全てのtraining dataに対して行う。 全てのtraining dataに対して正解が規定回数に達したら終了。それ以外の場合、2に戻る。 # Pythonでプログラム化すると以下。 while True : n_true = 0 for x , c in zip ( data , cls ): if c == 1 and sum ( w * x ) < 0 : w += rho * x elif c == 0 and sum ( w * x ) >= 0 : w -= rho * x else : n_true += 1 if n_true > N * true_rate : break In [16]: n_cls0 = 30 ; n_cls1 = 40 N = n_cls0 + n_cls1 In [17]: w = np . random . RandomState ( 0 ) . uniform ( size = 2 ) # Initialization. rho = 1e-3 # step size. true_rate = 0.9 In [18]: # train_x data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 2 , 4 ], cov = np . eye ( 2 ), size = n_cls0 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 1 ], cov = np . eye ( 2 ), size = n_cls1 ), ]) X1 , X2 = data . T # train_t cls = np . concatenate ([ np . zeros ( shape = ( n_cls0 ), dtype = int ), np . ones ( shape = ( n_cls1 ), dtype = int ) ]) In [19]: while True : n_true = 0 for x , c in zip ( data , cls ): if c == 1 and sum ( w * x ) < 0 : w += rho * x elif c == 0 and sum ( w * x ) >= 0 : w -= rho * x else : n_true += 1 if n_true > N * true_rate : break In [20]: X = np . linspace ( min ( X1 ), max ( X2 ), 1000 ) Y = ( - w [ 0 ] / w [ 1 ]) * X In [21]: plt . scatter ( X1 , X2 , c = cls ) plt . plot ( X , Y , color = \"red\" ) plt . xlabel ( \"$x_1$\" , fontsize = 18 ), plt . ylabel ( \"$x_2$\" , fontsize = 18 ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-4.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-4.html"},{"title":"生物統計論 第5回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section5.1 Bayesian Model Comparison Overfitting In [2]: N = 15 Ms = [ 2 , 4 , 8 , 16 ] seed = 0 In [3]: # Training data. x = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = N ) Noise = np . random . RandomState ( seed ) . normal ( loc = 0 , scale = 0.1 , size = N ) t = np . sin ( 2 * np . pi * x ) + Noise In [4]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Varying Component Number In [5]: from kerasy.ML.MixedDistribution import MixedGaussian from kerasy.utils.data_generator import generateMultivariateNormal In [6]: N = 200 cls = 6 seed = 123 In [7]: data , means = generateMultivariateNormal ( cls = cls , N = N , scale = 8e-3 , same = False , seed = seed ) x , y = data . T mux , muy = means . T In [8]: # Background Color xmin , ymin = np . min ( data , axis = 0 ); xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [9]: Nfig = cls col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col fig = plt . figure ( figsize = ( 6 * col , 4 * row )) Likelihoods = [] for i , K in enumerate ( range ( 1 , cls + 1 )): ax = fig . add_subplot ( row , col , i + 1 ) model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data , span = 20 ) Z = model . predict ( XYs ) idx = np . argmax ( model . predict ( data ), axis = 1 ) Zs = np . sum ( Z , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. likelihood = np . sum ( Z ) ax . scatter ( x , y , c = idx ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( xmin , xmax ) ax . set_ylim ( ymin , ymax ) ax . set_title ( f \"K= {K} , {np.sum(Z):.1f}\" ) Likelihoods . append ( likelihood ) plt . tight_layout () plt . show () In [10]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . scatter ( x , y , label = \"data\" ) axL . scatter ( mux , muy , label = \"mean\" , marker = \"*\" , color = \"red\" , s = 150 ) axL . set_title ( \"Training Data.\" ) axL . legend () axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( np . arange ( cls ) + 1 , Likelihoods ) axR . scatter ( np . arange ( cls ) + 1 , Likelihoods ) axR . set_xlabel ( \"num comp\" ) axR . set_ylabel ( \"likelihoods\" ) axR . set_title ( \"Log likelihood vs num comp\" , fontsize = 18 ) plt . tight_layout () plt . show () Cross Validation ※ Not Bayesian estimate the skill of a machine learning model on unseen data. use a limited sample in order to estimate how the model is expected to perform in general when used to make predictions on data not used during the training of the model. In [11]: n_fold = 5 size = N // n_fold Kmax = 30 In [12]: Likelihoods = [] CrossValidationLikelihoods = [] for i , K in enumerate ( range ( 1 , Kmax + 1 )): H = 0 for h in range ( n_fold ): mask = np . ones ( shape = N , dtype = bool ) mask [ h * size :( h + 1 ) * size ] = False model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data [ mask ], span = 20 ) Z = model . predict ( data [ np . logical_not ( mask )]) H += np . sum ( Z ) model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data , span = 20 ) Z = model . predict ( data ) Likelihoods . append ( np . sum ( Z )) CrossValidationLikelihoods . append ( H ) In [13]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . plot ( np . arange ( Kmax ) + 1 , CrossValidationLikelihoods ) axL . scatter ( np . arange ( Kmax ) + 1 , CrossValidationLikelihoods ) axL . set_xlabel ( \"num comp\" ), axL . set_ylabel ( \"Cross Validation likelihoods\" ), axL . set_title ( \"Cross Validation Log likelihood vs num comp\" , fontsize = 18 ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( np . arange ( Kmax ) + 1 , Likelihoods ) axR . scatter ( np . arange ( Kmax ) + 1 , Likelihoods ) axR . set_xlabel ( \"num comp\" ), axR . set_ylabel ( \"likelihoods\" ), axR . set_title ( \"Log likelihood vs num comp\" , fontsize = 18 ) plt . tight_layout () plt . show () Cross Entropy of Prediction ※ Not Bayesian empirical distribution $D = \\left\\{\\mathbf{x}&#94;{(h)}|h=1,\\ldots,n\\right\\}$ $x\\sim\\mathrm{Emp}(D)$ $f_X(\\mathbf{X}) = \\frac{1}{n}\\sum_{h=1}&#94;n\\delta\\left(\\mathbf{x}-\\mathbf{x}&#94;{(h)}\\right)$ $\\mathbb{E}\\left(g(\\mathbf{x})\\right) = \\frac{1}{n}\\sum_{h=1}&#94;n\\int d\\mathbf{x}g(\\mathbf{x})\\delta\\left(\\mathbf{x}-\\mathbf{x}&#94;{(h)}\\right) = \\frac{1}{n}\\sum_{h=1}&#94;ng\\left(\\mathbf{x}&#94;{(h)}\\right)$ In [14]: seed = 0 N = 1000 In [15]: data = np . random . RandomState ( seed ) . normal ( size = N ) In [16]: Emp = dict ( zip ( data , np . zeros ( N ))) for x in data : Emp [ x ] += 1 / N In [17]: for X , Y in sorted ( Emp . items ()): plt . plot (( X , X ),( 0 , Y ), color = \"black\" , alpha = 0.1 ) plt . title ( \"Empirical distribution (Normal)\" ) plt . xlabel ( \"x\" ) plt . show () We can assume Empirical distribution as a true distribution . Cross Entropy $$ \\begin{aligned} H(D,\\boldsymbol{\\theta}) &= \\text{Cross Entropy between }f_{\\text{Emp}(D)} \\text{ and }f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)\\\\ &= \\mathbb{E}_{\\text{Emp}(D)}\\left(-\\log f\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right)\\right)\\\\ &= -\\int f_{\\text{Emp}(D)}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &= -\\frac{1}{n}\\sum_{h=1}&#94;n\\log f\\left(\\mathbf{x}&#94;{(h)}|\\boldsymbol{\\theta}\\right)\\\\ &= -\\bar{l}&#94;{(n)}\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right) \\end{aligned} $$ We can also say that: $$ \\begin{aligned} H(D,\\boldsymbol{\\theta}) &= -\\int f_{\\text{Emp}}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &\\Rightarrow \\int f_{\\text{Emp}}(\\mathbf{x})\\log f_{\\text{Emp}}(\\mathbf{x})d\\mathbf{x} -\\int f_{\\text{Emp}}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &= -\\int f_{\\text{Emp}}(\\mathbf{x})\\log\\left\\{\\frac{f_{\\text{Emp}}(\\mathbf{x})}{f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)}\\right\\}d\\mathbf{x}\\\\ &= \\mathrm{KL}\\left(f_{\\text{Emp}}\\|f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)\\right)\\\\ &= \\text{Kullback-Leibler divergence between}f_{\\text{Emp}(D)} \\text{ and }f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right) \\end{aligned} $$ Evidence Approximation ※ Yes Bayesian In a fully Bayesian treatment of the linear basis function model, we would introduce prior distributions over the hyperparameters $\\alpha$, and $\\beta$. $$ \\begin{aligned} p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x},\\alpha,\\beta) &= \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)d\\mathbf{w}& (3.57)\\\\ &\\Rightarrow \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)p(\\alpha,\\beta|\\mathbf{t},\\mathbf{X})d\\mathbf{w}d\\alpha d\\beta& (3.74) \\end{aligned} $$ Marginalize with respect to these hyperparameters as well as with respect to the parameters $\\mathbf{w}$ to make predictions. Complete marginalization over all of these variables is analytically intractable. We will maximize $(3.74)$ in line with the framework of empirical Bayes (or type 2 maximum likelihood , generalized maximum likelihood , evidence approximation ) Obtain the marginal likelihoo function by first integrating over the parameters $\\mathbf{w}$ $$p(\\mathbf{t}|\\alpha,\\beta) = \\int p(\\mathbf{t}|\\mathbf{w},\\mathbf{X},\\beta)p(\\mathbf{w}|\\alpha)d\\mathbf{w}\\qquad (3.77)$$ Maximize $p(\\mathbf{t}|\\alpha,\\beta)$ with respect to $\\alpha$ and $\\beta$. In [18]: from kerasy.utils.preprocessing import PolynomialBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian from kerasy.ML.linear import EvidenceApproxBayesianRegression In [19]: N = 20 Ms = np . arange ( 10 ) xmin = 0 ; xmax = 1 seed = 0 In [20]: x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 0.15 , seed = seed ) y_train += 1 + y_noise In [21]: alpha = 100 beta = 100 In [22]: evidences = [] history = [] for M in Ms : phi = PolynomialBaseTransformer ( M = M ) x_train_features = phi . transform ( x_train ) model = EvidenceApproxBayesianRegression ( alpha = alpha , beta = beta , iter_max = 10000 ) model . fit ( x_train_features , y_train ) evidences . append ( model . evidence ( x_train_features , y_train )) history . append ( model ) best_M = np . argmax ( evidences [ 1 :]) + 1 best_model = history [ best_M ] In [23]: x_test = np . linspace ( xmin , xmax , 1000 ) phi = PolynomialBaseTransformer ( M = best_M ) x_test_features = phi . transform ( x_test ) y_test = 1 + np . sin ( 2 * np . pi * x_test ) y_pred , y_std = best_model . predict ( x_test_features ) In [24]: fig = plt . figure ( figsize = ( 12 , 4 )) axEVI = fig . add_subplot ( 1 , 2 , 1 ) axEVI . plot ( Ms , evidences ) axEVI . scatter ( Ms , evidences ) axEVI . set_title ( \"The relationship between 'model evidence' and $M$\" ), axEVI . set_xlabel ( \"$M$\" ), axEVI . set_ylabel ( \"$\\log({model\\ evidence})$\" , fontsize = 16 ) axBest = fig . add_subplot ( 1 , 2 , 2 ) axBest . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) axBest . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) axBest . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) axBest . scatter ( x_train , y_train , s = 50 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) axBest . set_ylim ( - 0.5 , 2.5 ), axBest . legend (), axBest . set_title ( f \"Bayesian Linear Regression (M= {best_M} )\" ) plt . tight_layout () plt . show () In [25]: print ( \"[Best Parameter]\" ) print ( f \"M = {best_M} \" ) print ( f \"alpha = {best_model.alpha} \" ) print ( f \"beta = {best_model.beta} \" ) [Best Parameter] M = 3 alpha = 0.0025750535934692723 beta = 56.07833727501231 Section5.2 Markov Process Biological Diversity Single Origin of Life \"Nothing in Biology Makes Sense Except in the Light of Evolution\" C.T. Dobzhansky Stochastic Transcription (Stochasticity vs Regulation) Stochasticity in Development Stochastic Process Mathematical description of stochastic behaviors. data: $\\left\\{\\mathbf{X}_t|t=1,\\ldots,n\\right\\}$ Probability: $\\mathbb{P}\\left(\\mathbf{X}_{t_m} = \\mathbf{x}_{t_m},\\ldots,\\mathbf{X}_{t_2} = \\mathbf{x}_{t_2},\\mathbf{X}_{t_1} = \\mathbf{x}_{t_1}\\right)$ $\\omega$ is one of the random paths. $\\mathbf{X}_t$ is a map indicats which state random paths $\\omega$ is in at time $t$ Events $E$ is a constraint on the value of $\\mathbf{X}_t$ at some times. $P(E)$ is the probability if the random paths satisfy the constraint $E$. markov Process $$\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t|\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right) = \\mathbb{P}\\left(\\mathbf{X}_t=\\mathbf{x}_t|\\mathbf{X}_{t-1}=\\mathbf{x_{t-1}}\\right)$$ Decomposition of Joint Distribution $$ \\begin{aligned} &\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t,\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &=\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &=\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1} | \\mathbf{X}_{t-2} = \\mathbf{x}_{t-2},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_{t-2} = \\mathbf{x}_{t-2},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &= \\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\cdots \\times\\mathbb{P}\\left(\\mathbf{X}_2=\\mathbf{x}_2|\\mathbf{X}_1=\\mathbf{x}_1,\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_1=\\mathbf{x}_1|\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_0=\\mathbf{x}_0\\right)\\\\ &= \\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1}\\right) \\times \\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1} | \\mathbf{X}_{t-2} = \\mathbf{x}_{t-2}\\right)\\times \\cdots\\times\\mathbb{P}\\left(\\mathbf{X}_1=\\mathbf{x}_1|\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_0=\\mathbf{x}_0\\right)\\quad\\left(\\because \\text{Markov Process}\\right) \\end{aligned} $$ Transition Matrix (Assume Time Independence ): $$P = \\left\\{P_{ij}\\right\\} = \\left\\{\\mathbb{P}\\left(\\mathbf{X}_t=i|\\mathbf{X}_{t-1}=j\\right)\\right\\},\\quad P_{ij}\\geq0,\\sum_i P_{ij}=1$$ Computing transition probability Birth and Death process $$ P= \\left(\\begin{matrix}1-\\lambda_0&\\mu_1&0&0\\\\\\lambda_0&1-\\lambda_1-\\mu_1&\\mu_2&0\\\\0&\\lambda_1&1-\\lambda_2-\\mu_2&\\mu_3\\\\0&0&\\lambda_2&1-\\mu_3\\end{matrix}\\right) $$ $P = U\\Lambda U&#94;{-1}$: Eigen decomposition $P&#94;n = U\\Lambda&#94;n U&#94;{-1}$ In [26]: def makeRandomP ( N , seed = 123 ): lambdas = np . r_ [ np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 / N , size = N - 1 ), np . zeros ( shape = 1 )] mus = np . r_ [ np . zeros ( shape = 1 ), np . random . RandomState ( seed + 1 ) . uniform ( low = 0 , high = 1 / N , size = N - 1 )] P = np . zeros ( shape = ( N , N )) for i in range ( N ): P [ i , - 1 + i ] = mus [ i ]; P [ i , i ] = 1 - mus [ i ] - lambdas [ i ]; P [ i , 1 + i if 1 + i < N else 1 + i - N ] = lambdas [ i ] return P In [27]: def LongTimeBehaviors ( P , even = True ): inf = 50 if even else 51 eigenvals , eigenvecs = np . linalg . eig ( P ) Lambda = np . diag ( eigenvals ) eigenvecs_inv = np . linalg . inv ( eigenvecs ) Pn = np . dot ( eigenvecs , np . dot ( Lambda ** inf , eigenvecs_inv )) Pn = np . where ( Pn < 1e-5 , 0 , Pn ) return Pn example Periodic In [28]: P = np . array ([ [ 0 , 1 , 0 ], [ 1 / 2 , 0 , 1 / 2 ], [ 0 , 1 , 0 ] ]) In [29]: print ( f \"P&#94;2n: \\n {LongTimeBehaviors(P, even=True)} \\n \" ) print ( f \"P&#94;2n+1: \\n {LongTimeBehaviors(P, even=False)}\" ) P&#94;2n: [[0.5 0. 0.5] [0. 1. 0. ] [0.5 0. 0.5]] P&#94;2n+1: [[0. 1. 0. ] [0.5 0. 0.5] [0. 1. 0. ]] Reducible In [30]: P = np . array ([ [ 1 / 3 , 3 / 4 , 0 , 0 ], [ 2 / 3 , 1 / 4 , 0 , 0 ], [ 0 , 0 , 1 / 3 , 3 / 4 ], [ 0 , 0 , 2 / 3 , 1 / 4 ] ]) In [31]: LongTimeBehaviors ( P ) Out[31]: array([[0.52941176, 0.52941176, 0. , 0. ], [0.47058824, 0.47058824, 0. , 0. ], [0. , 0. , 0.52941176, 0.52941176], [0. , 0. , 0.47058824, 0.47058824]]) Absorbing In [32]: P = np . array ([ [ 1 , 1 / 2 , 0 , 0 ], [ 0 , 0 , 1 / 2 , 0 ], [ 0 , 1 / 2 , 0 , 0 ], [ 0 , 0 , 1 / 2 , 1 ] ]) In [33]: LongTimeBehaviors ( P ) Out[33]: array([[1. , 0.66666667, 0.33333333, 0. ], [0. , 0. , 0. , 0. ], [0. , 0. , 0. , 0. ], [0. , 0.33333333, 0.66666667, 1. ]]) Irreducible, Aperiodic In [34]: P = np . array ([ [ 2 / 3 , 1 / 12 , 0 ], [ 1 / 3 , 5 / 8 , 1 / 8 ], [ 0 , 7 / 24 , 7 / 8 ], ]) In [35]: LongTimeBehaviors ( P ) Out[35]: array([[0.06976762, 0.06976748, 0.06976741], [0.27906992, 0.2790698 , 0.27906974], [0.65116246, 0.65116272, 0.65116286]]) In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-5.html"},{"title":"レポート課題4(10/24出題)","text":"4AFUVlcJLyviVxFGQ612Iw==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report4.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report4.html"},{"title":"探索","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 講義概要 状態空間 15パズル 迷路 コスト無しグラフの探索 コスト付きグラフの探索 ゲーム木の探索 状態空間 ありうる局面の１つ１つを 状態 と言う。 状態全体からなる集合を 状態空間 と言う。 目的： 初期状態から出発して、許される 状態遷移 を繰り返し、最終状態へたどり着くこと。 これは、 グラフ(graph) の 探索(search) 問題と等価 （ノードが状態に、エッジが状態遷移にそれぞれ対応する。） 15パズル ルール： 一度に動かせるのは1パネルのみ。 飽きますに隣のパネルをずらす操作のみ可能 目標： 「できるだけ少ない手数で」 与えられた配置から元の配置に戻すこと。 元に戻すことが不可能な問題を識別する。 迷路 目的：スタートからゴールまで誘導する。 状態(state) $s$：移動できる場所 行動(action) $a$：進む方向 コスト無しグラフの探索 用語 意味 オープンリスト(open list) これから探索するノードの候補リスト クローズドリスト(closed list) 探索が終わったノードのリスト キュー(queue) 先入れ先出し スタック(stack) 後入れ先出し 探索の基本アルゴリズム open_list = [ initial_state ] # オープンリストは初期化状態のみ closed_list = [] # クローズドリストは空 while ( open_list ): # オープンリストが空になるまで以下を繰り返す。 state = getOptimalState ( open_list ) # オープンリストから（何らかの基準で）状態sを取り出す。 closed_list . append ( state ) # sをクローズドリストに追加する。 if state == last_state : break # sが最終状態ならば探索終了 open_list += [ s for s in state . transibles () if s not in closed_list ] # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストに追加する。 深さ優先探索 行き止まりに当たるまで進み、ゴールが見つからなかったら直近の分岐に戻って別の道を探す探索法。 メモリ使用量が少ない ゴールが近くにあっても、他の深い別れ道に迷い込むと時間がかかる ゴールが複数ある時、一番近くのものが見つかるとは限らない オープンリストは スタック （後入れ先出し） にする。 open_list = [ initial_state ] closed_list = [] while ( open_list ): state = open_list . pop ( 0 ) # オープンリストの先頭の状態sを取り出す。 closed_list . append ( state ) if state == last_state : break open_list . push ([ s for s in state . transibles () if s not in closed_list ]) # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストの\"先頭に\"追加する。 幅優先探索 分かれ道に来たらそれぞれの道を一歩ずつ進み，ゴールが見つからなかったらそれぞれの道をもう一歩ずつ進む探索法。 ゴールが近くにある時、早く見つかる。 ゴールが複数ある時、一番近くのものが見つかる。 分かれ道での分岐数が多いとメモリ使用量が多い。 オープンリストは キュー （先入れ後出し） にする。 open_list = [ initial_state ] closed_list = [] while ( open_list ): state = open_list . pop ( - 1 ) # オープンリストの\"末尾\"の状態sを取り出す。 closed_list . append ( state ) if state == last_state : break open_list . push ([ s for s in state . transibles () if s not in closed_list ]) # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストの\"先頭に\"追加する。 反復深化探索 深さに制限をつけて深さ優先探索を行い、徐々に深さを深くしていく探索法 ゴールが近くにある時、早く見つかる ゴールが複数ある時、一番近くのものが見つかる 同じノードを何度も訪れる（分岐が多いと影響小） まとめ 深さ優先探索・幅優先探索・反復深化探索は、グラフに関する特別な知識を使わずにオープンリストから状態を選択することから、 ブラインド探索(blined search) と呼ばれる。 # 探さ優先探索 幅優先探索 反復深化探索 完全性（必ず解が見つかるか） (completeness) $m$ が有限なら Yes Yes Yes 時間計算量 (time complexity) $\\mathrm{O}(b&#94;m)$ $\\mathrm{O}(b&#94;d)$ $\\mathrm{O}(b&#94;d)$ 空間計算量(space complexity) $\\mathrm{O}(bm)$ $\\mathrm{O}(b&#94;d)$ $\\mathrm{O}(bd)$ 最適性（一番近くの解が見つかるか） (optimality) Yes Yes Yes $b$：最大分岐数 $d$：一番浅い解の深さ $m$：最大の深さ コスト付きグラフの探索 各エッジに 遷移コスト が割り当てられている場合の最適遷移パス探索問題。 ブラインド探索 ：グラフに関する特別な知識を使わずにオープンリストから状態を選択。 貪欲探索(greedy search)：現在の状態からの遷移コストが最小の状態を選ぶ。 （深さ優先探索に対応） 最適探索(optimal search)：初期状態からの遷移コスト和が最小の状態を選ぶ。 （各コストが1だと幅優先探索になる。ダイクストラ法とも。） ヒューリスティック探索（最良優先探索, best-first search） ：グラフに関する何らかの知識を使ってオープンリストから適切と思われる状態を選択。 貪欲最良優先探索 $A&#94;{\\ast}$ 探索 貪欲最良優先探索 $\\hat{h}(s)$ を最小にする状態を選ぶ $h(s)$：$s$ から最終状態までの遷移コスト和の最小値 $\\hat{h}(s)$：$h(s)$ の推定（ヒューリスティック関数） 一度オープンリストに入ったの評価値更新は不要 ヒューリスティック関数の選び方： ユーザが 事前知識 により構築（例：直線距離） データから 機械学習 により自動構築 一般には完全性も最適性もないが、実用上は（そこそこ）うまくいくことが（それなりに）多い。 $A&#94;{\\ast}$ 探索(A-start search) $s$ を経由する場合の遷移コスト和の推定値 $\\left(\\hat{g}(s)+\\hat{h}(s)\\right)$ を最小にする状態を選ぶ。 $g(s)$：初期状態から $s$ までの遷移コスト和の最小値 $\\hat{g}(s)$：探索済みノードから $s$ に遷移する場合の最小値（ダイクストラ法と同じ） ノード $s$ を訪れると隣接ノードの $\\hat{g}(s&#94;{\\prime})$ が更新される。 $h(s)$：$s$ から最終状態までの遷移コスト和の最小値 $\\hat{h}(s)$：$h(s)$ のヒューリスティック推定値 最適経路上の $s$ ではいずれも $g(s)+h(s)$ が最小、経路外の点ではそれより大きい値をとることを利用 $\\forall s, 0\\leq\\hat{h}(s)\\leq h(s)$ が成り立つ時、$\\hat{h}(s)$ は 許容的(admissible) であるといい、この場合には $A&#94;{\\ast}$ 探索は最適性を持つ。 ※ 実装等は、 レポート課題 に記載。 In [1]: from kerasy.search.Astar import OptimalTransit In [2]: n = 3 m = 3 initial_str = \"2,-1,6,1,3,4,7,5,8\" last_str = \"1,2,3,4,5,6,7,8,-1\" In [3]: OptimalTransit ( n , m , initial_str , last_str , heuristic_method = \"Manhattan_distance\" , n_row = 5 ) n_transition = 9 ゲーム木の探索 2人のプレイヤーが交互に遷移先を決めるゲーム（ex. 将棋・囲碁・リバーシ・◯×など）における最適遷移探索問題 ミニマックス探索 自分は一番良い（点数を最大化する）手を選ぶ 相手は一番悪い（点数を最小化する）手を選ぶ アルファ・ベータ探索 ミニ・マックス探索では、全ての局面に対する点数を求める必要があり、時間がかかる。 不要な点数計算を省略することで効率化 $\\alpha$：max計算の際の下界値 $\\beta$：min計算の際の上界値 モンテカルロ木探索 アルファ・ベータ法を用いても、ゲーム木を深く探索するのは困難（$b&#94;d$ が $b&#94;{d/2}$ になる程度。） そこで、 ランダムに 手を打つ。 囲碁やスケジューリングなどで活用されている。 まとめ 広大な状態空間を効率よく探索したい コスト無しグラフの探索 コスト付きグラフの探索 ゲーム木の探索 膨大な状態空間の探索には，近似的な手法が有用 事前知識や機械学習によるヒューリスティック関数の構築 モンテカル 木探索 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-4.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-4.html"},{"title":"ガウシアンプロセスとベイズ最適化","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt import seaborn as sns データ駆動科学とベイズ最適化 データ駆動科学では、データに基づいて、新たな知見・事柄を発見することが求められる 単に予測を行うだけでなく、それに基づいて「行動」を設計することが必要 これらは、「ベイズ最適化」の枠組みに乗ることが多い 概要 ベイズ線形回帰 ガウシアンプロセス ベイズ最適化 ベイズ線形回帰 線形回帰モデルのパラメータを 最尤推定 によって決める場合、 解こうとしている問題に合わせてモデルの複雑さを適切に決めることが必要 ↑は、単純に尤度を最大化するだけでは 過学習 を引き起こしてしまう。 データの一部を独立なテスト用データとして取っておく ことでモデルの汎化性能を評価できるが、この方法は 計算量が大きく 、 データの無駄遣い となり得る。 これらの問題に対処するため、線形回帰モデルをベイズ的に取り扱うことで最尤推定の過学習を回避するとともに 「訓練データだけからモデルの複雑さを自動的に決定する。」 概要 解こうとしている問題に沿った 尤度関数(likelihood function) （ $p(\\mathbf{t}|\\mathbf{X},\\mathbf{w})$ ） を定義する。 モデルパラメータの 事前分布(prior distribution) （ $p(\\mathbf{w})$ ） を、 尤度関数 の 共役事前分布(conjugate prior) の形で定義する。 ベイズの公式より、 事後分布(posterior distribution) は 事前分布 と 尤度関数 の積に比例する。 （ $p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})\\propto p(\\mathbf{t}|\\mathbf{X},\\mathbf{w})\\cdot p(\\mathbf{w})$ ） あるパラメータ （ $\\mathbf{w}$ ） 下で入力 $\\mathbf{x}$ が与えられた時の確率分布 （ $p(t|\\mathbf{w},\\mathbf{x})$ ） を、3で求めた 事後分布 （ $p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})$ ） で重み付けしながら 周辺化(marginalization) する （ $p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x}) = \\int p(t|\\mathbf{w},\\mathbf{x})p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})d\\mathbf{w}$ ） ことで、 予測分布(predivtive distribution) （ $p(t|\\mathbf{w},\\mathbf{x})$ ） を得る。 具体例 ※ $D$ 次元の説明変数 $\\mathbf{x}$ で一次元の目標変数 $t$ を線形回帰するモデルをベイズ的に取り扱う。 目標変数 $t$ が決定論的な関数 $y(\\mathbf{x},\\mathbf{w})$ と加法性のガウスノイズの和で与えられる場合を考える。 $$t = y(\\mathbf{x},\\mathbf{w}) + \\epsilon\\qquad (3.7)$$ ここで、$\\epsilon$ は期待値が $0$ で精度が $\\beta$ のガウス確率変数である。すなわち、以下で表すことができる。 $$p(t|\\mathbf{x},\\mathbf{w},\\beta) = \\mathcal{N}\\left(t|y(\\mathbf{x},\\mathbf{w}),\\beta&#94;{-1}\\right)\\qquad (3.8)$$ データ点が $(3.8)$ の分布から 独立に生成された と仮定すると、尤度関数を次のように表せる。 $$p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) = \\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)\\qquad (3.10)$$ モデルパラメータ $\\mathbf{w}$ の事前分布を導入する。 ここで、 $\\beta$ が既知 と仮定すると、上記の尤度関数の共役事前分布である、期待値 $\\mathbf{m}_0$ 共分散 $\\mathbf{S}_0$ を持つガウス分布で表すのが適当である。 $$p(\\mathbf{w}) = \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)\\qquad (3.48)$$ ※ なお、$\\mathbf{w},\\beta$ の両方が未知である場合、共役事前分布は ガウス-ガンマ分布 隣、予測分布は スチューデントのt分布 となる。 ベイズの公式より、 事後分布は事前分布と尤度関数の積に比例する ので、これを解くことで事後分布を次の形で書き出すことができる。 （導出） $$ p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) = \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N) \\qquad (3.49)\\\\ \\begin{cases} \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51) \\end{cases} $$ $\\mathbf{w}$ で周辺化することで、予測分布を求めるが、議論の簡単のために、 「モデルパラメータ $\\mathbf{w}$ の事前分布 $p(\\mathbf{w})$ が、単一の制度パラメータ $\\alpha$ で記述される期待値が $0$ の等方的ガウス分布である」 とする。 $$p(\\mathbf{w}|\\alpha) = \\mathcal{N}\\left(\\mathbf{w}|\\mathbf{0},\\alpha&#94;{-1}\\mathbf{I}\\right)\\qquad (3.52)$$ この時、上記の $\\mathbf{w}$ の事後分布 $(3.49)$ の形は変わらず、$\\mathbf{m}_N,\\mathbf{S}_N$ の値が $$ \\begin{cases} \\mathbf{m}_N &= \\beta\\mathbf{S}_N\\boldsymbol{\\Phi}&#94;T\\mathbf{t} & (3.53)\\\\ \\mathbf{S}_N&#94;{-1} &= \\alpha\\mathbf{I} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.54) \\end{cases} $$ となる。この条件下で周辺化すると、以下の結果を得る。 （導出） $$ \\begin{aligned} p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x},\\alpha,\\beta) &= \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)d\\mathbf{w}& (3.57)\\\\ &= \\mathcal{N}\\left(t|\\mathbf{m}_N&#94;T\\phi(\\mathbf{x}),\\sigma_N&#94;2(\\mathbf{x})\\right) & (3.58)\\\\ \\sigma_N&#94;2(\\mathbf{x}) &= \\frac{1}{\\beta} + \\phi(\\mathbf{x})&#94;T\\mathbf{S}\\phi(\\mathbf{x}) & (3.59) \\end{aligned} $$ ※ ここで、$(3.59)$ の第1項はデータに含まれるノイズを、第2項は $\\mathbf{w}$ に関する不確かさを反映している。 事後分布の計算の導出過程 $$ \\begin{aligned} \\text{likelihood function : } p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) &= \\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)& (3.10)\\\\ \\text{prior distribution : } p(\\mathbf{w}) &= \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)& (3.48)\\\\ \\text{posterior distribution : } p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) &= \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N) & (3.49)\\\\ \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51)\\\\ \\mathcal{N}(x|\\mu,\\sigma&#94;2) &= \\frac{1}{\\left(2\\pi\\sigma&#94;2\\right)&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2\\sigma&#94;2}(x-\\mu)&#94;2\\right\\} & (2.42)\\\\ \\mathcal{N}(\\mathbf{x}|\\boldsymbol{\\mu},\\boldsymbol{\\Sigma}) &= \\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}|&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)\\right\\} & (2.43) \\end{aligned} $$ $$ \\begin{aligned} p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) &\\propto p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) p(\\mathbf{w}) \\\\ &=\\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)\\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)\\\\ &\\propto\\prod_{n=1}&#94;N\\exp\\left\\{-\\frac{\\beta}{2}\\left(t_n-\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\right)&#94;2\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &=\\exp\\left\\{-\\frac{\\beta}{2}\\sum_{n=1}&#94;N\\left(t_n-\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\right)&#94;2\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &= \\exp\\left\\{-\\frac{\\beta}{2}\\left( \\begin{array}{c}t_1 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_1)\\\\ t_2 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_2) \\\\ \\vdots \\\\ t_N - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_N) \\end{array} \\right)&#94;T\\left( \\begin{array}{c}t_1 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_1)\\\\ t_2 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_2) \\\\ \\vdots \\\\ t_N - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_N) \\end{array} \\right) \\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &= \\exp\\left\\{-\\frac{\\beta}{2}\\left(\\mathbf{t}-\\boldsymbol{\\Phi}\\mathbf{w}\\right)&#94;T\\left(\\mathbf{t}-\\boldsymbol{\\Phi}\\mathbf{w}\\right)\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\}\\\\ &= \\exp\\left\\{ -\\frac{1}{2} \\left(\\beta\\mathbf{t}&#94;T\\mathbf{t} - \\beta\\mathbf{t}&#94;T\\boldsymbol{\\Phi}\\mathbf{w} - \\beta\\mathbf{w}&#94;T\\boldsymbol{\\Phi}&#94;T\\mathbf{t} + \\beta\\mathbf{w}&#94;T\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi}\\mathbf{w} + \\mathbf{w}&#94;T\\mathbf{S}_0&#94;{-1}\\mathbf{w} - \\mathbf{w}&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0 - \\mathbf{m}_0&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{w} + \\mathbf{m}_0&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right)\\right\\}\\\\ &= \\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}&#94;T\\left(\\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} + \\mathbf{S}&#94;{-1}_0\\right)\\mathbf{w} - \\mathbf{w}&#94;T\\left(\\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t} + \\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right) - \\left(\\beta\\mathbf{t}&#94;T\\boldsymbol{\\Phi} + \\mathbf{m}_0\\mathbf{S}&#94;{-1}_0\\right)\\mathbf{w} + \\left(\\beta\\mathbf{t}&#94;T\\mathbf{t} + \\mathbf{m_0}&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right)\\right)\\right\\} \\\\ &=\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w} - \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right)\\right)&#94;T\\mathbf{S}_N&#94;{-1}\\left(\\mathbf{w} - \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right)\\right) + \\mathrm{C} \\right\\}\\\\ &\\propto\\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N)\\\\ &\\begin{cases} \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51)\\\\\\end{cases} \\end{aligned}\\\\ $$ 周辺化計算の導出過程 以下の「ガウス分布の周辺分布と条件付き分布の関係」の $(2.115)$ の結果を用いる。 $\\mathbf{x}$ の周辺ガウス分布と、$\\mathbf{x}$ が与えられた時の $\\mathbf{y}$ の条件付きガウス分布が次式で与えられたとする。 $$ \\begin{aligned} p(\\mathbf{x}) &=\\mathcal{N}\\left(\\mathbf{x} | \\boldsymbol{\\mu}, \\mathbf{\\Lambda}&#94;{-1}\\right) & (2.113)\\\\ p(\\mathbf{y} | \\mathbf{x}) &=\\mathcal{N}\\left(\\mathbf{y} | \\mathbf{A} \\mathbf{x}+\\mathbf{b}, \\mathbf{L}&#94;{-1}\\right) & (2.114)\\end{aligned} $$ この時、$\\mathbf{y}$ の周辺分布と、$\\mathbf{y}$ が与えられた時の $\\mathbf{x}$ の条件付き分布は $$ \\begin{aligned} p(\\mathbf{y}) &=\\mathcal{N}\\left(\\mathbf{y} | \\mathbf{A} \\boldsymbol{\\mu}+\\mathbf{b}, \\mathbf{L}&#94;{-1}+\\mathbf{A} \\mathbf{\\Lambda}&#94;{-1} \\mathbf{A}&#94;{\\mathrm{T}}\\right) & (2.115)\\\\ p(\\mathbf{x} | \\mathbf{y}) &=\\mathcal{N}\\left(\\mathbf{x} | \\mathbf{\\Sigma}\\left\\{\\mathbf{A}&#94;{\\mathrm{T}} \\mathbf{L}(\\mathbf{y}-\\mathbf{b})+\\mathbf{\\Lambda} \\boldsymbol{\\mu}\\right\\}, \\mathbf{\\Sigma}\\right) & (2.116) \\end{aligned} $$ で与えられる。ただし、 $$\\mathbf{\\Sigma} = \\left(\\mathbf{\\Lambda} + \\mathbf{A}&#94;T\\mathbf{LA}\\right)&#94;{-1}\\qquad (2.117)$$ である。 実装 In [2]: from kerasy.ML.linear import BayesianLinearRegression from kerasy.utils.preprocessing import GaussianBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian In [3]: N = 25 ; D = 1 ; M = 25 xmin = 0 ; xmax = 1 seed = 10 In [4]: alpha = 1 beta = 25 In [5]: x_test = np . linspace ( xmin , xmax , 1000 ) y_test = np . sin ( 2 * np . pi * x_test ) x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 1 / beta , seed = seed ) y_train += y_noise In [6]: # transform mu = np . linspace ( xmin , xmax , M ); sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) x_train_features = phi . transform ( x_train ) x_test_features = phi . transform ( x_test ) In [7]: random_idx = np . random . RandomState ( seed ) . choice ( N , N ) In [8]: fig = plt . figure ( figsize = ( 16 , 8 )) for i , n in enumerate ([ 1 , 2 , 4 , 25 ]): ax = fig . add_subplot ( 2 , 2 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( x_train_features [ random_idx [: n ]], y_train [ random_idx [: n ]]) y_pred , y_std = model . predict ( x_test_features ) ax . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) ax . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( x_train [ random_idx [: n ]], y_train [ random_idx [: n ]], s = 150 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) ax . set_ylim ( - 1.5 , 1.5 ), ax . legend (), ax . set_title ( f \"Bayesian Linear Regression (N= {n} )\" ) plt . tight_layout () plt . show () ガウシアンプロセス 回帰分析のための カーネル法 テストサンプルに対して、 予測値だけでなく、予測分散も与えることができる。 線形回帰のモデルは、以下で表されていた。 $$y(\\mathbf{x},\\mathbf{w}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x})\\qquad (3.3)$$ この結果に、ベイズ線形回帰の結果 $(3.53)$ を代入すると、 $$ \\begin{aligned} y(\\mathbf{x},\\mathbf{m}_N) &= \\mathbf{m}_N\\phi(\\mathbf{x}) = \\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\boldsymbol{\\Phi}&#94;T\\mathbf{t} \\\\ &= \\sum_{n=1}&#94;N\\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}_n)t_n & (3.60)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51) \\end{aligned} $$ したがって、点 $\\mathbf{x}$ での予測分布の平均は訓練データの目標変数 $t_n$ の線型結合で与えられるので、 $$ \\begin{aligned} y(\\mathbf{x},\\mathbf{m}_N) &= \\sum_{n=1}&#94;Nk(\\mathbf{x}, \\mathbf{x}_n)t_n & (3.61)\\\\ k(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}) &= \\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}&#94;{\\prime}) & (3.62)\\\\ &= \\left(\\beta&#94;{1/2}\\mathbf{S}_N&#94;{1/2}\\phi(\\mathbf{x})\\right)&#94;T\\left(\\beta&#94;{1/2}\\mathbf{S}_N&#94;{1/2}\\phi(\\mathbf{x})\\right) & (3.65) \\end{aligned} $$ とかける。なお、$k(\\mathbf{x}, \\mathbf{x}&#94;{\\prime})$ を 平滑化行列(smoother matrix) 、または 等価カーネル(equivalent kernel) と呼ぶ。（$(3.65)$ から、等価カーネルが通常のカーネル関数が満たすべき性質を満たしていることがわかる。） また、訓練データの目標値の線型結合を取ることで予測を行う上記のような回帰関数を 線形平滑器(linear smoother) と呼ぶ。 In [9]: from kerasy.utils.preprocessing import GaussianBaseTransformer , SigmoidBaseTransformer , PolynomialBaseTransformer In [10]: X = np . linspace ( - 1 , 1 , 200 ) M = 15 mu = np . linspace ( - 0.9 , 0.9 , M ); sigma = 0.1 gausian_phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) In [11]: def mkSmootherMatrix ( X , phi , alpha = 1 , beta = 25 ): X_feature = phi . transform ( X ) N , M = X_feature . shape SN = np . linalg . inv ( alpha * np . eye ( M ) + beta * X_feature . T . dot ( X_feature )) K = beta * np . dot ( X_feature , np . dot ( SN , X_feature . T )) return K In [12]: K = mkSmootherMatrix ( X , gausian_phi ) In [13]: SP = [ 30 , 120 , 150 ] colors = [ \"red\" , \"salmon\" , \"pink\" ] In [14]: fig = plt . figure ( figsize = ( 12 , 6 )) axKernel = plt . subplot2grid (( 3 , 2 ), ( 0 , 1 ), rowspan = 3 ) axKernel = sns . heatmap ( K , vmin = np . min ( K ), vmax = np . max ( K ), cmap = \"jet\" , cbar = False , square = True , ax = axKernel ) axKernel . set_xticks ([]), axKernel . set_yticks ([]) axKernel . set_xlabel ( \"$x$\" , fontsize = 18 ), axKernel . set_ylabel ( \"$x&#94;{\\prime}$\" , fontsize = 18 ) for i in range ( 3 ): axL = plt . subplot2grid (( 3 , 2 ), ( i , 0 )) axL . set_facecolor ( 'lightcyan' ) axL . plot ( K [ SP [ i ]], color = colors [ i ], linewidth = 4 ) axL . set_xticks ([]), axL . set_yticks ([]) axKernel . axhline ( SP [ i ], color = colors [ i ], linewidth = 10 , alpha = 0.7 ) plt . tight_layout () plt . show () In [15]: Transformers = [ ( GaussianBaseTransformer , mu ), ( SigmoidBaseTransformer , mu ), ( PolynomialBaseTransformer , 10 ), ] In [16]: fig = plt . figure ( figsize = ( 12 , 4 )) for i ,( phi_func , param ) in enumerate ( Transformers ): ax = fig . add_subplot ( 1 , 3 , i + 1 ) phi = phi_func ( param ) K = mkSmootherMatrix ( X , phi ) ax . plot ( K [ 100 ], color = \"blue\" ) ax . scatter ( 100 , 0 , color = \"red\" , marker = \"x\" , s = 150 , label = \"$x&#94;{\\prime}$\" ) ax . set_xticks ([]), ax . set_yticks ([]), ax . set_title ( f \"$k(x,x')$: {phi.__name__} \" , fontsize = 16 ) ax . set_xlabel ( \"$x$\" , fontsize = 18 ), ax . legend () plt . tight_layout () plt . show () カーネル関数の例 を見ればわかるよう、 対応する基底関数が局所的でないにも関わらず、等価カーネルは $x&#94;{\\prime}$ に関して局所的な関数となっていることがわかる！！ また、$y(\\mathbf{x})$ と $y(\\mathbf{x}&#94;{\\prime})$ の共分散を考えると、 $$ \\begin{aligned} \\mathrm{cov}\\left[y(\\mathbf{x}),y(\\mathbf{x}&#94;{\\prime})\\right] &= \\mathrm{cov}\\left[\\phi(\\mathbf{x})&#94;T\\mathbf{w}, \\mathbf{w}&#94;T\\phi(\\mathbf{x})\\right]\\\\ &= \\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}&#94;{\\prime}) = \\beta&#94;{-1}k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})\\quad(3.63) \\end{aligned} $$ となる。ここで、上述の等価カーネルの形状を考えると、 近接での予測平均は互いに強い相関を持っている一方で、より離れた点の組では相関は小さくなることがわかる。 ベイズ線形回帰 のように基底関数の集合を明示的に定義するのではなく、局所的なカーネルを直接定義し、観測された訓練集合が与えられた時、この局所的なカーネルを用いて新たな入力ベクトル $\\mathbf{x}$ に対する予測値を求めることができる。 この定式化から、回帰（と分類）に対する実用的な枠組みである ガウス過程(Gaussian process) が得られる。 ベイズ最適化 $M$ 個の候補点があり、この中から最大の観測値を持つものを探したい。 できるだけ実験数を少なくしたい。 $N$ 個の候補点に対する実験が終わった。$M-N$ 個の候補点が残っている。 次の $N+1$ 個目の候補点を最適に選びたい。 $N$ 個の化合物から予測モデルを学習し、それを用いて、残りの候補点を スコアリング し決定。 Maximum Probability of Improvement: Current Maxを超える確率。 Maximum Expected Improvement: (観測値-Current Max)の期待値。 Thompson Sampling: 残りのM-N個候補点に対して、条件つき結合確率からサンプリングを行い、そのサンプリング値をスコアとする。 In [17]: xmin = 0 ; xmax = 1 N = 1000 ; M = 25 seed = 1 In [18]: alpha = 1 beta = 25 In [19]: X = np . linspace ( xmin , xmax , N ) Y = 5e1 * X * ( X - 0.2 ) * ( X - 0.3 ) * ( X - 0.7 ) * ( X - 1 ) _ , noise = generateGausian ( size = 1000 , x = X , loc = 0 , scale = 1 / beta , seed = seed ) Y_ob = Y + noise In [20]: mu = np . linspace ( xmin , xmax , M ) sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) In [21]: X_features = phi . transform ( X ) In [22]: fig = plt . figure ( figsize = ( 18 , 8 )) idx = np . random . RandomState ( seed ) . choice ( N , 2 ) # Initialization. next_idx = idx for i , _ in enumerate ( range ( 12 )): ax = fig . add_subplot ( 3 , 4 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( X_features [ idx ], Y_ob [ idx ]) y_pred , y_std = model . predict ( X_features ) current_max = np . max ( Y_ob [ idx ]) max_improve_id = np . argmax ( y_pred ) ax . plot ( X , Y , color = \"black\" , label = \"True distribution\" ) ax . plot ( X , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( X , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( X [ idx ], Y_ob [ idx ], s = 50 , edgecolors = 'black' , facecolor = \"white\" , label = \"Observation\" ) ax . scatter ( X [ next_idx ], Y_ob [ next_idx ], s = 150 , edgecolors = 'black' , facecolor = \"black\" , label = \"New Obsevation\" ) ax . set_xlabel ( \"Explanatory Variable\" ), ax . set_ylabel ( \"Measured Value\" ), ax . set_title ( f \"N={len(idx)}, Max= {current_max:.3f} \" ) ax . set_ylim ( - 0.5 , 0.3 ), ax . set_xticks ([]), ax . set_yticks ([]) ax . axhline ( current_max , color = \"green\" , label = \"Current Maximum\" ) ax . axvline ( np . max ( X [ max_improve_id ]), color = \"blue\" , label = \"Maximum Probability of Improvement\" ) next_idx = max_improve_id if np . random . uniform () > 0.5 else np . random . choice ( N , 1 ) idx = np . r_ [ idx , next_idx ] ax . legend () plt . tight_layout () plt . show () おわりに（データ駆動科学） データ駆動科学では、データに基づいて、新たな知見・事柄を発見することが求められる。 単に予測を行うだけでなく、それに基づいて次の「行動」を設計することが必要 これらは、ベイズ最適化の枠組みに乗ることが多い。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-4.html"},{"title":"特徴選択","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 主成分分析(PCA) In [2]: N = 20 seed = 0 In [3]: X = np . linspace ( 0 , 1 , N ) Y = X + np . random . RandomState ( N ) . normal ( loc = 0 , scale = 5e-2 , size = N ) data = np . vstack (( X , Y )) In [4]: def Rotate ( x , radian ): A = np . array ([ [ np . cos ( radian ), - np . sin ( radian )], [ np . sin ( radian ), np . cos ( radian )] ]) return np . dot ( A , data ) In [5]: fig = plt . figure ( figsize = ( 10 , 4 )) ax = fig . add_subplot ( 1 , 2 , 1 ) ax . scatter ( X , Y , color = \"black\" ), ax . set_title ( \"Original\" ) X_tra , Y_tra = Rotate ( data , radian =- 1 / 4 * np . pi ) ax = fig . add_subplot ( 1 , 2 , 2 ) ax . scatter ( X_tra , Y_tra , color = \"red\" ), ax . set_title ( \"Rotated\" ), ax . set_ylim ( - 1 / 2 * np . sqrt ( 2 ), 1 / 2 * np . sqrt ( 2 )) plt . tight_layout () plt . show () $2$ 次元空間で左上図のようなデータがあったとする。この時、このデータを表現するのに $(x,y)$ の二次元が必要だろうか？ データ全体を右に $1/4\\pi$ 回転させると、右上図のようなデータれるとなる。この場合、$y&#94;{\\prime}$ 軸方向はノイズとみなせ、$x&#94;{\\prime}$ 軸のみでデータを表現していると言える。 この例のように、$K$ 次元のデータであっても、で０他の偏りによって $M( こういった場合に、 「$M$ 方向の軸をどのように決めるか？」 、 「$M$ をどうやって決めるか？」 などが問題となる。 ※ 詳しくは 主成分分析(PCA) に記載。 線形判別分析(LDA) 入力ベクトル $\\mathbf{x}$ を $K$ クラスの一つ $C_k$ に割り当てる関数である識別（決定面が超平面となるとき、 線形識別(linear discriminant) ）を、 「次元の削減」 という観点から捉えることができる。 2クラス分類 $D$ 次元入力ベクトルを得て、それを以下の式で $1$ 次元に射影するとする。 $$y = \\mathbf{w}&#94;T\\mathbf{x}\\qquad (4.20)$$ ある閾値を設定し、$y\\geq-w_0$ の場合クラス $C_1$、そうでない場合クラス $C_2$ であるとすると、 標準的な線形分類器が得られる。 一般に、$D$ 次元から $1$ 次元へ射影することによって相当量の情報量の損失を発生させる。 重みベクトル $\\mathbf{w}$ の要素を調整することで、 クラスの分離を最大にする射影を選択したい。 $\\mathbf{w}$ 上へ射影された際のクラス分離度の最も簡単な測定法は、 射影されたクラスの平均の分離度（以下の式） を見ることである。 $$m_2-m_1 = \\mathbf{w}&#94;T\\left(\\mathbf{m}_2-\\mathbf{m}_1\\right) = \\mathbf{w}&#94;T\\left(\\frac{1}{N_2}\\sum_{n\\in C_2}\\mathbf{x}_n -\\frac{1}{N_1}\\sum_{n\\in C_1}\\mathbf{x}_n\\right)\\qquad (4.21)\\ \\&\\ (4.22)$$ 上の式は $\\mathbf{w}$ の値を大きくすればいくらでも大きな値にすることができるので、 $\\mathbf{w}$ が単位長である（$\\sum_i w_i&#94;2 = 1$）という制約を加える。 ラグランジュ乗数を用いてこれを解くと、$\\mathbf{w}\\propto(\\mathbf{m}_2-\\mathbf{m}_1)$ が得られる。 クラス分布の非対角な共分散が強い場合など、一般に、 各クラスの平均値だけを見ていても上手く判別する事ができない。 そこでフィッシャーが提案した方法が、 「射影されたクラス平均間の分離度を大きくすると同時に、各クラス内では小さな分散を与える関数を最大化する」 クラス $C_k$ から射影されたデータのクラス内分散は以下で与えられる。 $$s_k&#94;2 = \\sum_{n\\in C_k}(y_n-m_k)&#94;2\\qquad (4.2)$$ 全データ集合に対する総クラス内分散が $s_1&#94;2+s_2&#94;2$ であると定義する。 フィッシャーの判別基準は、 クラス間分離度 と クラス内分散 の比率で表される。 $$ \\begin{aligned} J(\\mathbf{w}) &= \\frac{(m_2-m_1)&#94;2}{s_1&#94;2 + s_2&#94;2} & (4.25)\\\\ &= \\frac{\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}}{\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}} & (4.27)\\\\ \\mathbf{S}_{\\mathrm{B}} &= (\\mathbf{m}_2-\\mathbf{m}_1)(\\mathbf{m}_2-\\mathbf{m}_1)&#94;T & (4.27)\\\\ \\mathbf{S}_{\\mathrm{W}} &= \\sum_{n\\in C_1}(\\mathbf{x}_n-\\mathbf{m}_1)(\\mathbf{x}_n-\\mathbf{m}_1)&#94;T + \\sum_{n\\in C_2}(\\mathbf{x}_n-\\mathbf{m}_2)(\\mathbf{x}_n-\\mathbf{m}_2)&#94;T& (4.27)\\\\ \\end{aligned} $$ $\\mathbf{S}_{\\mathrm{B}}$ を クラス間共分散行列(between-class covariance matrix) と呼ぶ。 $\\mathbf{S}_{\\mathrm{W}}$ を (総)クラス内共分散行列(within-class covariance matrix) と呼ぶ。 $J(\\mathbf{w})$ を $\\mathbf{w}$ に関して微分すると、以下の式が満たされる場合に $J(\\mathbf{w})$ が最大となる事がわかる。 $$ \\begin{aligned} \\frac{dJ(\\mathbf{w})}{d\\mathbf{w}} &= \\frac{\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}} + \\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right) - \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}} + \\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)}{\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)&#94;2}\\\\ \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}} + \\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right) &= \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}} + \\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)\\\\ \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}&= \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\qquad (4.29) \\end{aligned} $$ $(4.27)$ から、 $\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}$ は常に $(\\mathbf{m}_2-\\mathbf{m}_1)$ と同じ方向を持つ。 $\\mathbf{w}$ の方向だけが重要で、 大きさは考慮する必要がないので、スカラーファクタ $\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)$ と $\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)$ を無視できる。 $(4.29)$ の両辺に $\\mathbf{S}_{\\mathrm{W}}&#94;{-1}$ を左からかけて、 フィッシャーの線形判別(Fisher's linear discriminant) が得られる。 $$\\mathbf{w}\\propto\\mathbf{S}_{\\mathrm{W}}&#94;{-1}(\\mathbf{m}_2-\\mathbf{m}_1)\\qquad (4.30)$$ フィッシャーの線形判別(Fisher's linear discriminant) は、厳密には識別子ではなく、 むしろ $1$ 次元へ削減する際のデータの射影方向の選択を行なっている。 In [6]: from kerasy.ML.decomposition import LDA In [7]: N1 = 100 ; N2 = 100 cov = [[ 10 , 1 ],[ 1 , 3 ]] In [8]: x1 = np . random . RandomState ( seed ) . multivariate_normal ([ 0 , 7 ], cov , N1 ) x2 = np . random . RandomState ( seed + 1 ) . multivariate_normal ([ 8 , 6 ], cov , N2 ) x1min = np . min ( x1 ); x1max = np . max ( x1 ) x2min = np . min ( x2 ); x2max = np . max ( x2 ) m1 = np . mean ( x1 , axis = 0 ); m2 = np . mean ( x2 , axis = 0 ) m = ( m1 + m2 ) / 2 data = np . r_ [ x1 , x2 ] In [9]: X = np . linspace ( - 100 , 100 , 1000 ) In [10]: fig = plt . figure ( figsize = ( 12 , 6 )) for i , tf in enumerate ([ True , False ]): model = LDA () model . fit ( x1 , x2 , mean_only = tf ) w1 , w2 = model . w alpha = - w2 / w1 beta = m [ 1 ] - alpha * m [ 0 ] x_features = model . transform ( data ) axT = fig . add_subplot ( 2 , 2 , i + 1 ) axT . plot ( X , X * ( - w2 / w1 ) + beta , color = \"black\" , label = \"linear discriminant\" ) axT . scatter ( x1 [:, 0 ], x1 [:, 1 ], color = \"blue\" , label = \"class1\" ) axT . scatter ( x2 [:, 0 ], x2 [:, 1 ], color = \"red\" , label = \"class2\" ) axT . scatter ( m1 [ 0 ], m1 [ 1 ], color = \"green\" , marker = \"*\" , s = 200 ), axT . scatter ( m2 [ 0 ], m2 [ 1 ], color = \"green\" , marker = \"*\" , s = 200 , label = \"mean\" ) axT . set_xlim ( x1min , x1max ), axT . set_ylim ( x2min , x2max ) axT . set_xticks ([]), axT . set_yticks ([]), axT . legend (), axT . set_title ( \"Only Mean\" if tf else \"Fisher's linear discriminant\" ) axB = fig . add_subplot ( 2 , 2 , 3 + i ) axB . hist ( x_features [: N1 ], alpha = 0.3 , color = \"blue\" , label = \"class1\" ) axB . hist ( x_features [ N1 :], alpha = 0.3 , color = \"red\" , label = \"class2\" ) axB . set_xticks ([]), axB . set_yticks ([]), axB . legend () plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-3.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-3.html"},{"title":"生物統計論 第4回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section4.1 Expectation Maximization Algorithm The expectation maximization algorithm, or EM algorithm, is a general technique for finding maximum likelihood solutions for probabilistic models having latent variable. Consider a probabilistic model in which we collectively denote all of the observed variables by $\\mathbf{X}$ all of the hidden variables by $\\mathbf{Z}$ (assuming discrete, but discussion is identical if continuous) joint distribution by $p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)$ Goal is to maximize the likelihood function that is given by $$p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) = \\sum_{\\mathbf{Z}}p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)\\qquad (9.69)$$ Properties Guaranteed to terminate Likelihood always increases Solving M-step is often easy No need to traverse the data Separation of parameter dependency $\\log(pq)=\\log(p)+\\log(q)$ Sometimes solved exactly Often a few times faster than gradient descent (if stopping condition is not too stringent) Expectation values characterize the optimized model Lower Bound of Likelihood $\\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right)$ and $\\mathrm{KL}\\left(q\\|p\\right)$ We shall suppose that direct optimization of $p(\\mathbf{X}|\\boldsymbol{\\theta})$ is difficult the optimization of the complete-data likelihood function $p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)$ is significantly easier We introduce a distribution $q\\left(\\mathbf{Z}\\right)$ defined over the latent variables. For any choice of $q\\left(\\mathbf{Z}\\right)$, the following decomposition holds $$ \\begin{aligned} \\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) &= \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) + \\mathrm{KL}\\left(q\\|p\\right) &(9.70)\\\\ \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.71)\\\\ \\mathrm{KL}\\left(q\\|p\\right) &= -\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.72) \\end{aligned} $$ NOTE : $\\mathcal{L}(q,\\boldsymbol{\\theta})$ is a functional of the distribution $q(\\mathbf{Z})$, and a function of the parameters $\\boldsymbol{\\theta}$ $$ \\begin{aligned} \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) + \\mathrm{KL}\\left(q\\|p\\right) &=\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} -\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\}\\\\ &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}\\right\\}\\\\ &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right)\\\\ &= \\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) \\end{aligned}$$ From $(9.72)$, we see that $\\mathrm{KL}(q\\|p)$ is the Kullback-Leibler divergence between $q(\\mathbf{Z})$ and the posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta})$ Kullback-Leibler divergence satisfies $\\mathrm{KL}(q\\|p)\\geq0$ with eqyality if, and only if, $q(\\mathbf{Z})=p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta})$. Therefore, $\\mathcal{L}(q,\\boldsymbol{\\theta})\\leq\\ln p(\\mathbf{X}|\\boldsymbol{\\theta})$, in other words that $\\mathcal{L}(q,\\boldsymbol{\\theta})$ is a lower bound on $\\ln p(\\mathbf{X}|\\boldsymbol{\\theta})$ E step In the E step, the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ is maximized with respect to $q(\\mathbf{Z})$ while holding $\\boldsymbol{\\theta}&#94;{\\text{old}}$ fixed. $\\ln p(\\mathbf{X}|\\boldsymbol{\\theta}&#94;{\\text{old}})$ does not depend on $q(\\mathbf{Z})$ the largest value of $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ will occur when the Kullback-Leibler divergence vanishes. ∴ When $q(\\mathbf{Z})$ is equal to the posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}})$, $\\mathrm{KL}(q\\|p)=0$ and the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ will be maximized. M step In the M step, the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ is maximized with respect to $\\boldsymbol{\\theta}$ to give some new value $\\boldsymbol{\\theta}&#94;{\\text{new}}$ while holding $q(\\mathbf{Z})$ fixed. This will cause the lower bound $\\mathcal{L}$ to increase This will necessarily cause the corrresponding log likelihood function to increase. Because $q$ is held fixed during the M step, it will not equal the new posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}})$ $\\left(\\mathrm{KL}(q\\|p)\\neq0\\right)$ $\\mathcal{Q}(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}})$ $$ \\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)=\\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right) \\qquad (9.33)\\\\ $$ If we substitute $q(\\mathbf{Z}) = p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)$ into $(9.71)$, $$ \\begin{aligned} \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.71)\\\\ &= \\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right) - \\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\\\ &= \\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right) + \\text{const.} \\end{aligned} $$ ∴ \"Maximizing $\\mathcal{L}(q,\\boldsymbol{\\theta})$\" is equal to \"Maximizing $\\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)$\". In [2]: from kerasy.ML.MixedDistribution import MixedGaussian In [3]: # Train Data. data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = 50 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 5 ], cov = np . eye ( 2 ), size = 50 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = 50 ), ]) X , Y = data . T K = 3 In [4]: # Back Ground Color xmin , ymin = np . min ( data , axis = 0 ) - 0.3 xmax , ymax = np . max ( data , axis = 0 ) + 0.3 Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [5]: model = MixedGaussian ( K = 3 , random_state = 1234 ) model . fit ( data , memo_span = 1 ) ll_hist = [ ll for _ , _ , _ , ll in model . history ] mu_hist = [ mu for _ , _ ,( mu , _ , _ ), _ in model . history ] In [6]: plt_model = MixedGaussian ( K = 3 ) plt_model . N , plt_model . M = data . shape L_old = min ( ll_hist ) - 300 for epoch , idx ,( mu , S , pi ), ll in model . history [: - 1 ]: fig = plt . figure ( figsize = ( 12 , 8 )) ll_old = ll_hist [ epoch ]; ll_new = ll_hist [ epoch + 1 ] mu_old = mu_hist [ epoch ]; mu_new = mu_hist [ epoch + 1 ] L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 dL_old = ll_old - L_old ; dL_new = L_new - ll_old ; dll_old = ll_new - ll_old ax1 = fig . add_subplot ( 2 , 2 , 1 ) plt_model . mu = mu ; plt_model . S = S ; plt_model . pi = pi gammas = plt_model . predict ( XYs ) Zs = np . sum ( gammas , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. ax1 . pcolor ( Xs , Ys , Zs , alpha =. 5 , cmap = \"jet\" ) ax1 . scatter ( X , Y , c = idx , cmap = \"prism\" ) ax1 . set_xlim ( xmin , xmax ), ax1 . set_ylim ( ymin , ymax ), ax1 . set_title ( f \"epochs: {epoch:>02}\" , fontsize = 18 ) ax2 = fig . add_subplot ( 2 , 2 , 2 ) ax2 . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linewidth = 3 ) ax2 . axhline ( L_old , color = \"black\" , label = \"$L(q,θold)$\" , linestyle = \":\" ) ax2 . arrow ( x = 0.3 , y = L_old , dx = 0 , dy = dL_old , head_width = dL_old / 6000 , head_length = dL_old * 0.1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax2 . set_title ( f \"E step (Epoch={epoch})\" , fontsize = 18 ), ax2 . legend (), ax2 . set_xticks ([]), ax2 . set_ylim ( - 600 , - 570 ) ax3 = fig . add_subplot ( 2 , 2 , 3 ) for k in range ( K ): xb , yb = mu_old [ k ]; xa , ya = mu_new [ k ] ax3 . plot (( xb , xa ),( yb , ya ), color = \"black\" ) ax3 . scatter ( xb , yb , color = \"black\" , s = 50 ) ax3 . scatter ( xa , ya , color = \"red\" , marker = \"*\" , s = 150 ) ax3 . set_xlim ( xmin , xmax ), ax3 . set_ylim ( ymin , ymax ), ax3 . set_title ( \"θ → θnew\" ) ax3 . grid () ax4 = fig . add_subplot ( 2 , 2 , 4 ) L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 ax4 . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linestyle = \"--\" ) ax4 . axhline ( ll_new , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θnew)$\" , linewidth = 3 ) ax4 . axhline ( L_new , color = \"black\" , label = \"$L(q,θnew)$\" , linestyle = \":\" ) ax4 . arrow ( x = 0.7 , y = ll_old , dx = 0 , dy = dll_old , head_width = dll_old / 6000 , head_length = dll_old * 0.1 , fc = 'k' , ec = 'k' , length_includes_head = True ) ax4 . arrow ( x = 0.3 , y = ll_old , dx = 0 , dy = dL_new , head_width = dL_new / 6000 , head_length = dL_new * 0.1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax4 . set_title ( f \"M step (Epoch={epoch})\" , fontsize = 18 ), ax4 . legend (), ax4 . set_xticks ([]), ax4 . set_ylim ( - 600 , - 570 ) plt . tight_layout () plt . savefig ( f \"img/img{epoch:>02}\" ) L_old = L_new fig_no = 0 L_old = min ( ll_hist ) - 300 for epoch in range ( len ( model . history ) - 1 ): ll_old = ll_hist [ epoch ]; ll_new = ll_hist [ epoch + 1 ] L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 dL_old = ll_old - L_old ; dL_new = L_new - ll_old ; dll_old = ll_new - ll_old # Estep fig = plt . figure ( figsize = ( 3 , 10 )) ax = fig . add_subplot ( 1 , 1 , 1 ) ax . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linewidth = 3 ) ax . axhline ( L_old , color = \"black\" , label = \"$L(q,θold)$\" , linestyle = \":\" ) ax . arrow ( x = 0.3 , y = L_old , dx = 0 , dy = dL_old , head_width = dL_old / 60 , head_length = dL_old * 2e-1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax . set_title ( f \"E step (Epoch={epoch})\" , fontsize = 18 ), ax . legend (), ax . set_xticks ([]), ax . set_ylim ( - 600 , - 570 ) plt . savefig ( f \"img/img{fig_no:>02}\" ); fig_no += 1 plt . clf () # Mstep fig = plt . figure ( figsize = ( 3 , 10 )) ax = fig . add_subplot ( 1 , 1 , 1 ) L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 ax . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linestyle = \"--\" ) ax . axhline ( ll_new , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θnew)$\" , linewidth = 3 ) ax . axhline ( L_new , color = \"black\" , label = \"$L(q,θnew)$\" , linestyle = \":\" ) ax . arrow ( x = 0.7 , y = ll_old , dx = 0 , dy = dll_old , head_width = dll_old / 60 , head_length = dll_old * 2e-1 , fc = 'k' , ec = 'k' , length_includes_head = True ) ax . arrow ( x = 0.3 , y = ll_old , dx = 0 , dy = dL_new , head_width = dL_new / 60 , head_length = dL_new * 2e-1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax . set_title ( f \"M step (Epoch={epoch})\" , fontsize = 18 ), ax . legend (), ax . set_xticks ([]), ax . set_ylim ( - 600 , - 570 ) plt . savefig ( f \"img/img{fig_no:>02}\" ); fig_no += 1 plt . clf () L_old = L_new Section4.2 Mixture Model Implementation Gaussian Mixture Distribution k-means clustering Section4.3 Linear Regression Least Squares polynomial function we observe a real-value input variable $x$ and we wish to use this observation to predict the value of a real-valued target variable $t$. In the most simplest approach based on curve fitting, we shall fit the data using a polynomial function of the form : $$y(x,\\mathbf{w}) = w_0+w_1x+w_2x&#94;2+\\cdots+w_Mx&#94;M=\\sum_{j=0}&#94;Mw_jx&#94;j\\qquad (1.1)$$ data we are given a training set comprising $N$ observation of $x$, written $\\mathbf{X}\\equiv(\\mathbf{x_1},\\ldots,\\mathbf{x}_N)&#94;T$ with corresponding observation of the values of $t$, denoted $\\mathbf{t}\\equiv(t_1\\ldots,t_N)&#94;T$ we can difine $M$, which is the order of the polynomial. The values of the coefficients($w_j$) will be determined by fitting the polynomial to the training data. This can be done by minimizing an error function that measures the misfit between the function $y(x,\\mathbf{w})$ and the training set data points. One simple choice of error function, which is widely used, is given by the sum of the squares of the errors $$E(\\mathbf{w}) = \\frac{1}{2}\\mathrm{RSS} = \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\{y(\\mathbf{x}_n,\\mathbf{w}) - t_n\\right\\}&#94;2\\qquad (1.2)$$ (the factor of $1/2$ is included for later convenience.) Trainig Aim: find the best $\\mathbf{w}&#94;{\\star}=\\underset{w\\in\\mathbb{R}}{\\mathrm{argmin}}\\left\\{\\mathrm{RSS}(\\mathbf{w})\\right\\}$ $\\mathbf{t} = \\left(\\begin{matrix}t_1\\\\\\vdots\\\\t_N\\end{matrix}\\right),\\quad\\mathbf{X} = \\left(\\begin{matrix}x_1&#94;0&x;_1&#94;1&\\cdots&x;_1&#94;M\\\\x_2&#94;0&x;_2&#94;1&\\cdots&x;_2&#94;M\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\x_N&#94;0&x;_N&#94;1&\\cdots&x;_N&#94;M\\end{matrix}\\right),\\quad\\mathbf{w}=\\left(\\begin{matrix}w_1\\\\\\vdots\\\\w_M\\end{matrix}\\right)$ $\\mathrm{RSS}(\\mathbf{w}) = \\left(\\mathbf{t} - \\mathbf{Xw}\\right)&#94;T\\left(\\mathbf{t} - \\mathbf{Xw}\\right)$ Solution: $$ \\begin{aligned} \\frac{\\partial E(\\mathbf{w})}{\\partial\\mathbf{w}} &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\|\\mathbf{t}-\\mathbf{Xw}\\|&#94;2\\\\ &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\|\\mathbf{t}\\|&#94;2 - 2\\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{t} + \\|\\mathbf{Xw}\\|&#94;2\\right)\\\\ &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\|\\mathbf{t}\\|&#94;2 - 2\\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{t} + \\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{Xw}\\right)\\\\ &=\\frac{1}{2} \\left(-2\\mathbf{X}&#94;T\\mathbf{t} + \\left(\\mathbf{X}&#94;T\\mathbf{X} + \\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;T\\right)\\mathbf{w}\\right)\\\\ &= -\\mathbf{X}&#94;T\\mathbf{t}+\\mathbf{X}&#94;T\\mathbf{Xw}=\\mathbf{0}\\\\ \\therefore\\mathbf{w}&#94;{\\star} &= \\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{t} \\end{aligned}$$ ※ In the following programs, I use np.linalg.solve to calcurate $\\mathbf{w}&#94;{\\ast}$ equation program $$\\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)\\mathbf{w}&#94;{\\star} = \\mathbf{X}&#94;T\\mathbf{t}$$ w = np.linalg.solve(X.T.dot(X), X.T.dot(t)) In [7]: N = 15 Ms = [ 2 , 4 , 8 , 16 ] seed = 0 In [8]: # Training data. x = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = N ) Noise = np . random . RandomState ( seed ) . normal ( loc = 0 , scale = 0.1 , size = N ) t = np . sin ( 2 * np . pi * x ) + Noise In [9]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Regularized Least Square $$ \\begin{aligned} E(\\mathbf{w}) &= E_{D}(\\mathbf{w}) + \\lambda E_W(\\mathbf{w}) & (3.24)\\\\ &= \\frac{1}{2}\\mathrm{RSS} + \\lambda\\frac{1}{2}\\mathbf{w}&#94;T\\mathbf{w}\\\\ &= \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\{y(\\mathbf{x}_n,\\mathbf{w}) - t_n\\right\\}&#94;2+\\frac{1}{2}\\mathbf{w}&#94;T\\mathbf{w} & (3.27)\\\\ \\therefore\\mathbf{w}&#94;{\\star} &= \\left(\\lambda\\mathbf{I} + \\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{t} & (3.28) \\end{aligned} $$ In [10]: lambda_ = 1e-4 In [11]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( lambda_ * np . identity ( M + 1 ) + X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $,$\\lambda= {lambda_} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Section4.4 Bayesian Inference Maximal Likelihood Estimate $$ l(\\boldsymbol{\\theta}|D) = \\log L(\\boldsymbol{\\theta}|D) = \\log\\mathbb{P}(D|\\boldsymbol{\\theta})\\\\ \\hat{\\boldsymbol{\\theta}}_{\\text{ML}} = \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}l(\\boldsymbol{\\theta}|D) $$ ※ $l$: large → High probability of observing $D$ from the model $\\boldsymbol{\\theta}$ Maximum a Posteriori Estimate Maximum a posteriori estimate $$ \\begin{aligned} \\hat{\\boldsymbol{\\theta}_{\\text{MAP}}} &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}f(\\boldsymbol{\\theta}|D)\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}f(D|\\boldsymbol{\\theta})f(\\boldsymbol{\\theta})\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}\\left\\{l(\\boldsymbol{\\theta}|D) L \\log f(\\boldsymbol{\\theta})\\right\\}\\\\ \\end{aligned} $$ Posterior mean estimate $$ \\hat{\\boldsymbol{\\theta}_{\\text{PME}}} = \\int\\boldsymbol{\\theta}f(\\boldsymbol{\\theta}|D)d\\boldsymbol{\\theta} $$ Implementation of Gaussian Prior for Regression. In [12]: seed = 123 In [13]: from kerasy.ML.linear import BayesianLinearRegression from kerasy.utils.preprocessing import GaussianBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian In [14]: N = 25 ; D = 1 ; M = 25 xmin = 0 ; xmax = 1 In [15]: alpha = 1 beta = 25 In [16]: x_test = np . linspace ( xmin , xmax , 1000 ) y_test = np . sin ( 2 * np . pi * x_test ) x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 1 / beta , seed = seed ) y_train += y_noise In [17]: # transform mu = np . linspace ( xmin , xmax , M ); sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) x_train_features = phi . transform ( x_train ) x_test_features = phi . transform ( x_test ) In [18]: random_idx = np . random . RandomState ( seed ) . choice ( N , N ) In [19]: fig = plt . figure ( figsize = ( 16 , 8 )) for i , n in enumerate ([ 1 , 2 , 4 , 25 ]): ax = fig . add_subplot ( 2 , 2 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( x_train_features [ random_idx [: n ]], y_train [ random_idx [: n ]]) y_pred , y_std = model . predict ( x_test_features ) ax . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) ax . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( x_train [ random_idx [: n ]], y_train [ random_idx [: n ]], s = 150 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) ax . set_ylim ( - 1.5 , 1.5 ), ax . legend (), ax . set_title ( f \"Bayesian Linear Regression (N= {n} )\" ) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-4.html"},{"title":"レポート課題3(10/17出題)","text":"si+GRUldLgaAfke4D2ZFVQ==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report3.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report3.html"},{"title":"連続最適化(2)制約付き最適化","text":"講師： 佐藤一誠 参考書： 最適化手法 参考書： 機械学習のための連続最適化 講義概要 等式制約付き最適化問題 ラグランジュ未定乗数法 ラグランジュ双対問題 双対変数の最適化 不等式制約付き最適化問題 制約なし最適化問題への変換 双対問題 まとめ 制約付き最適化問題(constrained optimization problem) \\(\\mathcal{X}\\subset\\mathbb{R}&#94;d\\) 上に定義される関数 \\(f:\\mathcal{X}\\rightarrow\\mathbb{R}\\) の最小値を求める。 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ &h(\\mathbf{x})\\leq\\mathbf{0} \\end{aligned} $$ \"subject to\"は、 「…を条件として」 という意味。 \\(g_i,h_i\\) は互いに 一次独立(linearly independent) であると仮定。 実行可能解(feasible solution) ：全ての制約条件を満たす \\(\\mathbf{x}\\) 凸最適化問題(convex optimization problem) ：関数 \\(f\\) が凸、集合 \\(\\mathcal{X}\\) が凸、制約条件 \\(\\mathbf{g},\\mathbf{h}\\) が凸であれば、最適値が一意に定まる。 ※ 以下、凸最適化問題を考える。 等式制約付き最適化問題 等式制約付き最適化問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ \\end{aligned} $$ \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) + c_k\\|\\mathbf{g}(x)\\|&#94;2$$ \\(c_k\\) の値を徐々に増やしていく。 $$0 < c_1 < c_2 < \\cdots$$ ラグランジュ未定乗数法 詳しくは ラグランジュ未定乗数法 に記載されているので、ここでは具体例を紹介する。 問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{min : }}&3x&#94;2 + 2y&#94;2\\\\ \\text{subject to : }&x+y=1\\\\ \\end{aligned} $$ 解答 ラグランジュ関数は、 $$L(x,y,\\lambda) = 3x&#94;2 + 2y&#94;2 + \\lambda(x+y-1)$$ となるから、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x} &= 6x+\\lambda=0 &\\therefore x = -\\frac{1}{6}\\lambda\\\\ \\frac{\\partial L}{\\partial y} &= 4y+\\lambda=0 &\\therefore y = -\\frac{1}{4}\\lambda\\\\ \\frac{\\partial L}{\\partial \\lambda} &= x+y-1=0 &\\therefore \\lambda = -\\frac{12}{5}\\\\ \\end{aligned} $$ よって、 \\((x,y) = (0.4,0.6)\\) ラグランジュ双対問題 これも、詳しくは ラグランジュ双対問題 に記載されているので、ここでは具体例を紹介する。 問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{min : }}&3x&#94;2 + 2y&#94;2\\\\ \\text{subject to : }&x+y=1\\\\ \\end{aligned} $$ 解答 ラグランジュ関数は、 $$L(x,y,\\lambda) = 3x&#94;2 + 2y&#94;2 + \\lambda(x+y-1)$$ となるから、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x} &= 6x+\\lambda=0 &\\therefore x = -\\frac{1}{6}\\lambda\\\\ \\frac{\\partial L}{\\partial y} &= 4y+\\lambda=0 &\\therefore y = -\\frac{1}{4}\\lambda \\end{aligned} $$ よって、これらを \\(L(x,y,\\lambda)\\) に代入して、 $$\\omega(\\lambda) = \\underset{x,y\\in\\mathbb{R}}{\\inf}L(x,y,\\lambda) = -\\frac{5}{24}\\lambda&#94;2-\\lambda$$ したがって、 \\(\\underset{\\lambda\\in\\mathbb{R}}{\\text{argmax}}\\omega(\\lambda) = -\\frac{12}{5}\\Longrightarrow(x,y) = (0.4,0.6)\\) 双対変数の最適化 上の問題では、双対変数 \\(\\lambda\\) の最適化問題を解析的に解けたが、解析的に解くことができない問題もある。その場合に使うのが 双対上昇法 や 乗数法 と呼ばれる 双対変数の勾配上昇 を行う手法である。 手法 数式 解説 双対上昇法 $$\\begin{aligned}\\mathbf{x}_{k+1} &= \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}L(\\mathbf{x},\\boldsymbol{\\lambda}_{k})\\\\\\boldsymbol{\\lambda}_{k+1} &= \\boldsymbol{\\lambda}_k + \\varepsilon_k\\nabla\\omega(\\mathbf{\\boldsymbol{\\lambda}}_k) \\\\&= \\boldsymbol{\\lambda}_k + \\varepsilon_k\\mathbf{g}(\\mathbf{x}_{k+1})\\end{aligned}$$ 適当な初期値から，ラグランジュ関数の最小化と双対変数の勾配上昇を交互に実行 乗数法 $$\\begin{aligned}\\mathbf{x}_{k+1} &= \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}L_c(\\mathbf{x},\\boldsymbol{\\lambda}_{k})\\\\\\boldsymbol{\\lambda}_{k+1} &= \\boldsymbol{\\lambda}_k + c\\nabla\\omega(\\mathbf{\\boldsymbol{\\lambda}}_k) \\\\&= \\boldsymbol{\\lambda}_k + c\\mathbf{g}(\\mathbf{x}_{k+1})\\end{aligned}$$ 適当な初期値から， 拡張ラグランジュ関数 の最小化と双対変数の勾配上昇を交互に実行 なお、 拡張ラグランジュ関数(augmented Lagrangian) は、以下で表される関数で、二次の項を加えることで凸性を増している。 $$L_c(\\mathbf{x},\\boldsymbol{\\lambda}) = f(\\mathbf{x}) + \\boldsymbol{\\lambda}&#94;T\\mathbf{g}(\\mathbf{x}) + \\frac{c}{2}\\|\\mathbf{g}(\\mathbf{x})\\|&#94;2$$ ※実装は レポート課題3 に記載。 不等式制約付き最適化問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&h(\\mathbf{x})\\leq\\mathbf{0}\\\\ \\end{aligned} $$ 実行可能解 \\(\\mathbf{x}\\) において \\(h_i(\\mathbf{x}) = 0\\) の時、この制約を 有効制約(active constraint) と呼ぶ。 実行可能解 \\(\\mathbf{x}\\) においてそれ以外の時、この制約を 無効制約(inactive constraint) と呼ぶ。 制約なし最適化問題への変換 障壁法(barrier method) 初期値を \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の制約なし最適化問題を解く。 $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) - c_k\\log(-h(\\mathbf{x}))$$ \\(c_k\\) の値を徐々に減らしていく。 途中の解 \\(\\mathbf{x}_{k+1}\\) が常に \\(h(\\mathbf{x}_{k+1})\\leq0\\) を満たす （つまり、実行可能領域の内側にある） ことから、 内点法(interior-point method) ともよばれる。 \\(c_k\\) の決め方が難しい。 罰則法(penalty method) 初期値を \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の制約なし最適化問題を解く。 $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) + c_k\\max(0,h(\\mathbf{x}))&#94;2$$ \\(c_k\\) の値を徐々に増やしていく。 途中の解 \\(\\mathbf{x}_{k+1}\\) が一般に \\(h(\\mathbf{x}_{k+1})>0\\) を満たす （つまり、実行可能領域の外側にある） ことから、 外点法(exterior-point method) ともよばれる。 \\(c_k\\) の決め方が難しい。 射影勾配法(projected gradient method) 勾配降下（ \\(\\tilde{\\mathbf{x}}_{k+1} = \\mathbf{x}_k-\\varepsilon_k\\nabla f(\\mathbf{x}_k)\\) ）と実行可能領域への射影（ \\(\\mathbf{x}_{k+1} = \\mathbf{P}_k\\tilde{\\mathbf{x}}_{k+1}\\) ）を繰り返す。 まとめると $$\\mathbf{x}_{k+1} = \\mathbf{P}_k\\left(\\mathbf{x}_k - \\varepsilon_k\\nabla f(\\mathbf{x}_k)\\right)$$ 射影が簡単に計算できる時、効率が良い。 双対問題 詳しくは ラグランジュ未定乗数法 に記載。 まとめ 制約付き最適化問題： $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ &h(\\mathbf{x})\\leq\\mathbf{0} \\end{aligned} $$ ラグランジュ関数： $$L\\left(\\mathbf{x},\\boldsymbol{\\lambda},\\boldsymbol{\\mu}\\right) = f(\\mathbf{x}) + \\boldsymbol{\\lambda}&#94;Tg(\\mathbf{x}) + \\boldsymbol{\\mu}&#94;Th(\\mathbf{x})$$ 双対問題： $$ \\begin{aligned} \\underset{\\boldsymbol{\\lambda,\\mu},\\ \\mathbf{x}\\in\\mathcal{X}}{\\text{maximization : }}&L\\left(\\mathbf{x},\\boldsymbol{\\lambda},\\boldsymbol{\\mu}\\right)\\\\ \\text{subject to : }&\\boldsymbol{\\mu}\\geq\\mathbf{0}\\\\ \\end{aligned} $$ KKT条件： $$ \\begin{aligned} \\begin{cases} \\nabla_{\\mathbf{x}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) = \\mathbf{0}\\\\ \\nabla_{\\boldsymbol{\\lambda}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) = \\mathbf{0} & \\boldsymbol{\\mu}&#94;{\\ast}\\geq\\mathbf{0}\\\\ \\nabla_{\\boldsymbol{\\mu}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) \\leq \\mathbf{0} & \\mu_i&#94;{\\ast}h_i(\\mathbf{x}&#94;{\\ast}) = 0,\\ \\forall i \\end{cases} \\end{aligned} $$ .prompt { /* This is for jupyter blog.*/ min-width: 0; /* This padding is tuned to match the padding on the CodeMirror editor. */ padding: 0em 0.4em 0em 0em; margin: 0px; font-family: monaco; } /*蛍光ペン(pink)*/ .marker-pink { color: #c45a5a; background: linear-gradient(transparent 70%, #ff66ff 60%); font-weight: bold; } /*蛍光ペン(blue) & hover info*/ .marker-info { color: #5C7DC4; background: linear-gradient(transparent 70%, #66FFCC 60%); font-weight: bold; position: relative; cursor: pointer; } .marker-info:hover:before { opacity: 1; z-index: 2; } .marker-info:before { content: attr(aria-label); opacity: 0; position: absolute; top: 30px; right: -90px; font-size: 14px; width: 300px; padding: 10px; color: #fff; background-color: #555; border-radius: 3px; pointer-events: none; } /* 枠囲み */ .frame { border: solid 1.0px #000000; padding: 0.5em 1em; margin: 2em 0; } /* 暗記用 question box */ span .qbox{ display: none; } span.qbox-wrapper:hover .qbox-default{ display: none; } span.qbox-wrapper:hover .qbox{ display: inline; } .qbox-wrapper{ font-weight: bold; padding: 5px 10px; border-radius: 5px; border: solid 2px #000000; margin: 5px } .qbox-wrapper:hover{ text-shadow: 0px 0px 6px rgba(255, 255, 255, 1); -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); transition: all 0.4s ease 0s; } /* 画像吹き出し */ .balloon { display: table; width: 100%; } .balloon_img { display: table-cell; vertical-align: middle; width: 50%; padding-right: 10px; } .balloon_comment { border: #83274e solid 4px; position: relative; background: #fff; padding: 12px; border-radius: 13px; display: block } .balloon_comment::before { content: \"\"; position: absolute; border-right: 23px solid #83274e; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -23px; } .balloon_comment::after { content: \"\"; position: absolute; border-right: 24px solid #fff; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -17px; } if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-3.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-3.html"},{"title":"RNA-seqデータ解析（バッチスクリプト版）","text":"jXRW00r8tZZJkARu19XrYA==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-12.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-12.html"},{"title":"RNA-seqデータ解析（対話モード版）","text":"l6QZ6bLGaaM13bOD597liw==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-11.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-11.html"},{"title":"ゲノム解析ツールの環境構築","text":"rRTonofXW6Ubuw5Smw0vjw==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-10.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-10.html"},{"title":"逐次最小問題最適化法(SMO)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt 二次計画問題を解くアルゴリズム概観 アルゴリズム 説明 伝統的な二次計画法のアルゴリズム 計算コスト及びメモリ使用量の面で現実的には厳しい。 チャンキング(chunking) カーネル行列からラグランジュ乗数が $0$ となるデータに対応する行および列を取り除いても、ラグランジュ関数が不変であることを利用し、元々の二次計画問題は、より次元数の小さな問題を順番に解くことで、最終的には $0$ とならないラグランジュ乗数だけを残す、という問題に帰着する。 射影共役勾配法(projected conjugate gradient method) チャンキングを実装する手法 分解法(decomposition method) チャンキングと同様 サイズの小さな二次計画問題を繰り返し解く という手法だが、ここの部分問題の大きさが一定であるため、任意の大きさのデータに対応できる。 逐次最小問題最適化法(SMO;sequential minimal optimization) 分解法の計算コストを削減した手法。たった２つのラグランジュ乗数を含む部分問題を逐次解いていくことで最終的な解を得る。 逐次最小問題最適化法(SMO;sequential minimal optimization) ラグランジュ双対問題 を以下のように定義する。 $$ \\begin{aligned} \\tilde{L}(\\mathbf{a}) &=\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)& (7.10)\\\\ a_n & \\geq 0,\\quad n=1,\\ldots,N & (7.11)\\\\ \\sum_{n=1}&#94;Na_nt_n &= 0 & (7.12) \\end{aligned} $$ 逐次最小問題最適化法(SMO;sequential minimal optimization) は反復法である。 適当な初期値 $\\mathbf{a}&#94;{(0)}$ から出発して、更新 $\\mathbf{a}&#94;{(k)} \\rightarrow \\mathbf{a}&#94;{(k+1)}$ を繰り返す。 この際、 １度には2つの成分しか動かさない。 ここで、$a_p$ と $a_q$ だけ動かすことを考える。 （他の $a_n$ は定数とみなす） この時、制約条件より $$ a_pt_p + a_qt_q = 0-\\sum_{n\\neq p,q} a_nt_n = \\mathrm{const.}$$ が成立する。したがって、 $$ \\frac{\\partial a_q}{\\partial a_p} = -\\frac{t_p}{t_q} =-t_pt_q \\cdots (\\ast)$$ と解析的に偏微分を求めることが可能である。 目的関数 $\\tilde{L}$ の変化量 以下、$K_{ij} = k\\left(\\mathrm{x}_i,\\mathrm{x}_j\\right)$ とおく。ここで、 $$a_p\\mapsto a_p+\\Delta_p, \\quad a_q\\mapsto a_q+\\Delta_q$$ と更新した時、目的関数 $\\tilde{L}$ の変化量 $\\Delta\\tilde{L}$ は、 $$ \\begin{aligned} \\Delta\\tilde{L} &= \\Delta_p + \\Delta_q - \\Delta_pt_p\\sum_{n=1}&#94;Na_nt_nk(\\mathbf{x}_p,\\mathbf{x}_n) - \\Delta_qt_q\\sum_{n=1}&#94;Na_nt_nk(\\mathbf{x}_q,\\mathbf{x}_n)\\\\ &-\\frac{1}{2}\\left[\\Delta_p&#94;2k(\\mathbf{x}_p,\\mathbf{x}_p) + 2\\Delta_p\\Delta_qt_pt_qk(\\mathbf{x}_p,\\mathbf{x}_q) + \\Delta_q&#94;2k(\\mathbf{x}_q,\\mathbf{x}_q)\\right] \\end{aligned} $$ となる。 $(\\ast)$ より $\\Delta_q = -t_pt_q\\Delta_p$ である。 $t_p=t_q(\\Longleftrightarrow\\Delta_q=-\\Delta_p)$ の時と $t_p\\neq t_q$ の時に場合分けをし、それぞれ $\\Delta_p$ で変化量を偏微分して $0$ とおく。 結果は共に等しく、以下で表される。 $$ \\begin{aligned} \\Delta_p &= \\frac{1-t_pt_q + t_p\\left(\\sum_{n=1}&#94;Na_nt_nK_{qn} - \\sum_{n=1}&#94;Na_nt_nK_{pn}\\right)}{K_{pp} - 2K_{pq} + K_{qq}}\\\\ &= \\frac{1-t_pt_q + t_p\\left(y(\\mathbf{x_q}) - y(\\mathbf{x}_q)\\right)}{K_{pp} - 2K_{pq} + K_{qq}}\\\\ \\end{aligned} $$ クリッピング この時、 $t_pa_p+t_qa_q=c$ $a_p\\geq0$ $a_q\\geq0$ が成立していなければならないので、以下を満たすように $\\Delta_p$ の クリッピング を行う必要がある。 $t_p=t_q$ のときは $ 0 \\leq a_p + \\Delta_p \\leq c/t_p$ $t_p=-t_q$ のときは $ \\mathrm{max}\\{0,c/t_p\\}\\leq a_p+\\Delta_p$ 変数の選択方法 最後に、動かす $\\mu_p,\\mu_q$ の選択基準であるが、SMO法の発見者である $John C. Platt$ の論文に従うならば以下の様になる。 $KTT$条件を破る$a_p$を$1$つ目に選ぶ。 続いて、$\\left|y\\left(\\mathbf{x_q}\\right)-y\\left(\\mathbf{x_p}\\right)\\right|$ が最大となる$a_p$を次に選ぶ。 これは、$\\left|y\\left(\\mathbf{x_q}\\right)-y\\left(\\mathbf{x_p}\\right)\\right|$ が大きければそれだけステップ幅も大きくなるため収束が早くなるというヒューリスティックス（直感）である。 これを繰り返して、$\\tilde{L}$ が収束するまで反復を繰り返せば学習完了である。 実装例 kerasy.ML.svm.BaseSVM に記載。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-5.html"},{"title":"ラグランジュ双対問題","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) はじめに このノートは、 Qiita記事『ラグランジュ双対問題について解説』 を引用しています。 ラグランジュ双対関数 ラグランジアン 次の最小化問題を考える. $$ \\begin{aligned} \\min_{x\\in\\mathbb{R}&#94;n} &~ f_0(x)\\\\ \\mathrm{s.t.} &~ f_i(x)\\le 0,~ i=1,\\ldots,m\\\\ &~ h_i(x)=0, ~i=1,\\ldots, p \\end{aligned} $$ 実行可能領域は 空でない とする この最適化問題の 最適値 を \\(p&#94;\\star\\) と書く 凸性は特に仮定しない 主問題 という ラグランジアンは次のように定義される。 $$L(x, \\lambda, \\nu):=f_0(x)+\\sum_{i=1}&#94;m\\lambda_i f_i(x)+\\sum_{i=1}&#94;p\\nu_i h_i(x)$$ \\(\\lambda_i, \\nu_i\\) はラグランジュ未定乗数 ラグランジュ双対関数 ラグランジュ双対関数は次のように定義される. $$ \\begin{aligned} g(\\lambda,\\nu)&:=\\inf_{x\\in D} L(x, \\lambda, \\nu)\\\\ &=\\inf_{x\\in D} \\left(f_0(x)+\\sum_{i=1}&#94;m\\lambda_i f_i(x)+\\sum_{i=1}&#94;p\\nu_i h_i(x)\\right) \\end{aligned} $$ \\(D:=\\bigcap_{i=0}&#94;m \\mathrm{dom}(f_i) \\cap \\bigcap_{i=1}&#94;p \\mathrm{dom}(h_i)\\) 双対関数は, \\((\\lambda,\\nu)\\) のアフィン関数の各点でのinfになっているため, 必ずconcave(上に凸)となる (もとの問題が凸でなくても) 証明してみた: $$ \\begin{aligned} & g(t\\lambda_a+(1-t)\\lambda_b, t\\nu_a+(1-t)\\nu_b)\\\\ =&\\inf_{x\\in\\mathcal{D}}\\left(tL(x,\\lambda_a,\\nu_a)+(1-t)L(x,\\lambda_b,\\nu_b)\\right)\\\\ \\ge& t\\inf_{x\\in\\mathcal{D}}L(x,\\lambda_a,\\nu_a)+(1-t)L(x,\\lambda_b,\\nu_b)\\\\ =& tg(\\lambda_a,\\nu_a)+(1-t)g(\\lambda_b,\\nu_b) \\end{aligned} $$ 最適値の下限 任意の \\(\\lambda\\ge0, \\nu\\) に対して, 次が成り立つ. \\($g(\\lambda,\\nu)\\le p&#94;\\star\\) 証明: \\(\\tilde{x}\\) を実行可能解とする: \\(f_i(\\tilde{x})\\le 0, h_i(\\tilde{x}) = 0\\) \\(\\lambda\\ge 0\\) を仮定 このとき, \\(L(\\tilde{x},\\lambda,\\nu)\\) の値は, \\(f_0(\\tilde{x})\\) でおさえられる: $$ L(\\tilde{x},\\lambda,\\nu)=f_0(\\tilde{x})+\\underbrace{\\sum_{i=1}&#94;{m}\\lambda_if_i(\\tilde{x})}_{\\le0}+\\underbrace{\\sum_{i=1}&#94;{p}\\nu_ih_i(\\tilde{x})}_{=0}\\le f_0(\\tilde{x}) $$ ゆえに, \\(g(\\lambda, \\nu)\\) は \\(f_0(\\tilde{x})\\) でおさえられる: $$ \\therefore~g(\\lambda, \\nu)=\\inf_{x\\in\\mathcal{D}}L(x,\\lambda,\\nu)\\le L(\\tilde{x},\\lambda,\\nu)\\le f_0(\\tilde{x}) $$ 任意の \\(\\tilde{x}\\) に対して, \\(g(\\lambda, \\nu)\\le f_0(\\tilde{x})\\) が成り立つため, \\(g(\\lambda, \\nu)\\le p&#94;\\star\\) が成り立つ. 結論: 双対関数の値は, 主問題の最適値を超えない 線形近似による解釈 元の主問題と等価な次の最小化問題を考える. $$ \\min_{x}~f_0(x)+\\sum_{i=1}&#94;{m}I_-(f_i(x))+\\sum_{i=1}&#94;{p}I_0(h_i(x)) $$ ただし, \\(I_{-},I_{0}\\) は 指示関数 : $$ I_-(u):=\\begin{cases} 0&u\\le 0\\\\ \\infty& u>0 \\end{cases},~~~ I_0(u):=\\begin{cases} 0&u = 0\\\\ \\infty& u\\ne 0 \\end{cases} $$ 最小化するのが目的であるが, 指示関数は制約を満たさないと無限大になってしまう. この指示関数は, 制約違反に対する不満度 を表していると解釈できる. ここで, \\(I_-(u)\\) を \\(\\lambda_i u (\\lambda_i\\ge 0)\\) \\(I_0(u)\\) を \\(\\nu_iu\\) というように指示関数を近似する. $$ \\min_{x}~L(x,\\lambda,\\nu)=f_0(x)+\\sum_{i=1}&#94;{m}\\lambda_i f_i(x)+\\sum_{i=1}&#94;{p}\\nu_i h_i(x) $$ これは制約違反をソフトに近似したものと考えられる もちろん, 制約を違反するほど不満度は上昇するようになっている 不等式制約に関して, 違反しているとき \\(f_i(x)>0\\) であり, \\(\\lambda_if_i(x)\\ge0\\) 任意の \\(u\\) に関して, \\(\\lambda_iu \\le I_-(u)\\) と \\(\\nu_iu \\le I_0(u)\\) が成り立つため, 双対関数が元の主問題の下限を与えることがわかる 共役関数 \\(f\\) の共役関数 \\(f&#94;\\ast\\) は次で定義される. $$ f&#94;*(y)=\\sup_{x\\in\\mathrm{dom} f}(y&#94;\\top x-f(x)). $$ 共役関数と双対問題には密接な関係がある. ( フェンシェル双対定理 ) たとえば, 機械学習のよくある形 $$ \\min_{w\\in\\mathbb{R}&#94;d} f(Xw)+g(w) $$ の双対問題は, $$ \\max_{\\alpha\\in\\mathbb{R}&#94;n} -f&#94;\\ast(-\\alpha)-g&#94;\\ast(X&#94;\\top\\alpha) $$ というように共役関数を使って表現できる. そのため, 凸共役 を覚えておけば, 形式的に双対問題を導出できる. 証明は簡単で, ラグランジアン \\(L(w,z,\\alpha)=f(z)+g(w)+\\alpha&#94;\\top(z-Xw)\\) を考えて, 双対関数の定義にしたがって \\(w\\in\\mathbb{R}&#94;d,z\\in\\mathbb{R}&#94;n\\) に関して最小化するだけだ. ちなみに, このとき最適解 \\(w&#94;\\star,\\alpha&#94;\\star\\) に関して $$ w&#94;\\star \\in \\partial g&#94;\\ast(X&#94;\\top \\alpha&#94;\\star), \\quad \\alpha&#94;\\star \\in -\\partial f(Xw&#94;\\star) $$ が成立する (KKT条件). ラグランジュ双対問題 双対関数から双対問題へ. ラグランジュ双対問題 ここまでで, 双対関数が主問題の下限を与えることを示した. 自然な疑問は, 「ラグランジュ双対関数から得られる最も良い下限はどれくらいなのか?」ということだ. 最も良い下限は次の最大化問題を解くことで得られる. $$ \\begin{aligned} \\max_{\\lambda,\\nu}~&g(\\lambda,\\nu)\\\\ \\mathrm{s.t.} ~&\\lambda\\ge0 \\end{aligned} $$ $ これは, ラグランジュ双対問題 と呼ばれる 双対実行可能領域: \\((\\lambda,\\nu)\\) に関して, \\(\\lambda\\ge0\\) かつ \\(g(\\lambda,\\nu)>-\\infty\\) \\((\\lambda&#94;\\star,\\nu&#94;\\star)\\) : 双対問題の最適解 \\(d&#94;\\star\\) : 双対問題の最適値 双対問題は必ず凸最適化問題 目的関数が必ずconcaveで, 制約が凸であるため これは, 主問題が凸最適化でなくても成り立つ 弱双対性 $$ d&#94;\\star\\le p&#94;\\star $$ 主問題の凸性にかかわらず, 成り立つ この不等式は, \\(p&#94;\\star, d&#94;\\star\\) が発散しないときに成り立つ \\(p&#94;\\star - d&#94;\\star\\) を 双対ギャップ という よく最適化アルゴリズムの停止条件に使われる \\(p&#94;\\star\\) を求めるのことが難しいときに \\(d&#94;\\star\\) を求めることで, \\(p&#94;\\star\\) の下限を知ることができる 双対問題は必ず凸であるため, 多くの場合効率的に解ける 強双対性 $$ d&#94;\\star=p&#94;\\star $$ 主問題の最適値が双対問題の最適値と一致するという性質 強双対性は常には成り立たない もし主問題が凸, すなわち: $$ \\begin{aligned} \\min_{x\\in\\mathbb{R}&#94;n} &~ f_0(x)\\\\ \\mathrm{s.t.} &~ f_i(x)\\le 0, ~i=1,\\ldots,m\\\\ &~ Ax=b \\end{aligned} $$ で \\(f_0,\\ldots,f_m\\) が 凸なら, たいていは(いつもではない)強双対性が成り立つ. たとえば, SVMの最適化問題は凸であり, 強双対性が成り立つため, 主問題/双対問題のどちらを解いてもよい. スレーター条件 次を満たすような \\(x\\in\\mathrm{relint}(D)\\) が存在することをいう. $$ f_i(x)<0,~i=1,\\ldots,m,~~~Ax=b $$ $ 主問題が凸でスレーター条件を満たすとき, 強双対性が成り立つ スレーター条件は強双対性の十分条件である (必要十分ではない) もし, \\(f_1,\\ldots,f_k\\) がアフィンなら, より弱い条件が成り立てばよい: $$ f_i(x)\\le 0,~i=1,\\ldots,k,~~~f_i(x)<0,~i=k+1,\\ldots,m,~~~Ax=b $$ 言い換えれば, アフィンの不等式制約は等号を含んでもよい 補足: int(内部)とrelint(相対的内部) \\(\\mathrm{int}(S)\\) : Sに含まれる最大開集合 Sから境界上の点を取り除いたもの \\(\\mathrm{relint}(S)\\) : Sによって拘束される線形空間上で, Sから境界上の点を取り除いたもの. intとrelintの違いのイメージとしては, まっすぐな下敷きのような平面を考えたとき, intは下敷きの平面ごと取り除いてしまい空集合になるのに対して, relintは下敷きの縁を削って残った部分. Example1 \\(S=\\lbrace(x_1,x_2)\\mid 0\\le x_1\\le 1,x_2=0\\rbrace\\) $$ \\mathrm{int}(S)=\\emptyset, \\mathrm{relint}(S)=\\{(x_1,x_2)\\mid 0 < x_1 < 1,x_2=0\\}, (\\mathrm{aff}(S)=\\{(x_1,x_2)\\in\\mathbb{R}&#94;2\\mid x_2=0\\}) $$ Example2 \\(S= \\lbrace (x_1,x_2)\\mid 0\\le x_1\\le 1,0\\le x_2\\le 1\\rbrace\\) $$ \\mathrm{int}(S)=\\mathrm{relint}(S)=\\{(x_1,x_2)\\mid 0 < x_1 < 1,0<x_2<1\\}, (\\mathrm{aff}(S)=\\{(x_1,x_2)\\in\\mathbb{R}&#94;2\\}) $$ 最適性条件 特に主問題の凸性を仮定しない. 相補性条件 特に, 強双対性条件を満たすと仮定すると, $$ \\begin{aligned} f_0(x&#94;\\star)&=g(\\lambda&#94;\\star,\\nu&#94;\\star)\\\\ &=\\inf_{x\\in D} \\left(f_0(x)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star h_i(x)\\right)\\\\ &\\le f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star h_i(x&#94;\\star)\\\\ &\\le f_0(x&#94;\\star) \\end{aligned} $$ 1行目: 強双対性 2行目: 双対関数の定義 3行目: \\(\\inf\\) の定義 4行目: \\(\\lambda_i&#94;\\star\\ge0, f_i(x&#94;\\star)\\le0, ~i=1,\\ldots,m\\) と \\(h_i(x&#94;\\star)=0, ~i=1,\\ldots,p\\) 1,3行目と3,4行目を考慮すると, $$ \\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x&#94;\\star)=0. $$ 和の各項は非負であるため, $$ \\lambda_i&#94;\\star f_i(x&#94;\\star)=0,~~~i=1,\\ldots,m. $$ これを相補性条件という もし \\(\\lambda_i&#94;\\star>0\\) なら, \\(f_i(x&#94;\\star)=0\\) もし \\(f_i(x&#94;\\star)<0\\) なら, \\(\\lambda_i&#94;\\star=0\\) KKT条件 (Karush-Kuhn-Tucker条件) 強双対性を仮定すると, \\(x&#94;\\star\\) は \\(L(x,\\lambda&#94;\\star,\\nu&#94;\\star)\\) を最小化するため, \\(x&#94;\\star\\) における勾配は0である: $$ \\nabla f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star \\nabla f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star\\nabla h_i(x&#94;\\star)=0 $$ ゆえに, 最適解で成り立つ式を列挙すると: \\(f_i(x&#94;\\star)\\le 0,~i=1,\\ldots,m\\) \\(h_i(x&#94;\\star)= 0,~i=1,\\ldots,p\\) \\(\\lambda_i\\ge0,~i=1,\\ldots,m\\) \\(\\lambda_i f_i(x&#94;\\star)= 0,~i=1,\\ldots,m\\) \\(\\nabla f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star \\nabla f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star\\nabla h_i(x&#94;\\star)=0\\) これがいわゆる KKT条件 である. (必要条件) まとめると, 強双対性を満たすなら, 最適解において主変数と双対変数はKKT条件を満たさなければならない. 主問題が凸であるとき, KKT条件は十分条件にもなる. つまり, ある点 \\(\\tilde{x},\\tilde{\\lambda}, \\tilde{\\nu}\\) がKKT条件を満たすなら, \\(\\tilde{x}=x&#94;\\star, \\tilde{\\lambda}=\\lambda&#94;\\star, \\tilde{\\nu}=\\nu&#94;\\star\\) . 十分条件の証明: $$ \\begin{aligned} g(\\tilde{\\lambda},\\tilde{\\nu})&=L(\\tilde{x},\\tilde{\\lambda},\\tilde{\\nu})\\\\ &= f_0(\\tilde{x})+\\sum_{i=1}&#94;m\\tilde{\\lambda}_i f_i(\\tilde{x})+\\sum_{i=1}&#94;p\\tilde{\\nu}_i h_i(\\tilde{x})\\\\ &= f_0(\\tilde{x}) \\end{aligned} $$ 1行目: \\(\\tilde{x}\\) がKKT条件の最後の条件を満たすため 主問題が凸であるため, \\(L(x,\\tilde{\\lambda},\\tilde{\\nu})\\) は \\(x\\) に関して凸である ( \\(\\because\\tilde{\\lambda}_i\\ge0\\) ) \\(\\therefore~L\\) を最小化する \\(x\\) は, 勾配が0である 2行目: ラグランジアンの定義 3行目: \\(\\tilde{x}\\) がKKT条件の2つ目と4つ目を満たすため この式は, 双対ギャップが0であることを意味するため, \\(\\tilde{x},\\tilde{\\lambda}, \\tilde{\\nu}\\) は最適解である. 結論: スレーター条件を満たすとき, KKT条件は最適性の必要十分条件となる if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-4.html"},{"title":"サポートベクターマシーン(SVM)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: seed = 0 サポートベクターマシーン(SVM) マージン最大化 に基づく線形識別器 カーネル関数と組み合わせることによって非線形な識別も可能 サンプル間の類似度にしか依存しない （→非ベクトルデータの分類にも適用可能 ） まとめ マージン最大化 という方針で誤差関数を定義する。 汎化性能を高めるために、 スラック変数 を導入して ソフトなマージン最大化に緩和 する ラグランジュ未定乗数法 を用いてラグランジュ関数を得る。 各パラメータについて微分する。 ラグランジュ関数に代入して 双対問題 を得る。 SMO法 などを用いて二次計画問題である双対問題を解く。 無効制約のデータ点は識別関数に影響しなくなる。 （SVMが疎になる。） マージン最大化 「個々のデータに関して確率計算をし、何らかの識別面を求める」 のではなく、 「汎化性能の最も高い識別面を直接考える」 そこで、 「マージン最大化」 という方針で識別面を最適化する。（正則化理論・VC理論により正当化されている。） 最も近いデータ $\\phi(\\mathbf{x}_n)$ までの距離（ マージン ）が最大となるような識別面を選ぶ。（ここでは、距離＝ユークリッド距離とする。） 識別面からちょうどマージンの分だけ離れた面上に乗る特徴ベクトル（一般に複数）を、(広義の) サポートベクトル (support vector) と呼ぶ。 学習法の定式化（2クラス分類） ※ 二クラスが線形分離可能であると仮定する。 線形識別関数が $y(\\mathbf{x}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x})+b$ で表され、$y(\\mathbf{x})$ の正負でクラスを識別するとする。 $y(\\mathbf{x})>0$ の時 $t=1$ $y(\\mathbf{x})<0$ の時 $t=-1$ したがって、 $t_ny(\\mathbf{x}_n)>0$ が全てのデータ $(\\mathbf{x}_n,t_n)$ に対して成り立つ （∵特徴空間で線形分離可能） 学習の目的は「パラメータ $\\mathbf{w}$ と $b$ を決定すること」。 データと識別面の最小距離は $1 / \\|\\mathbf{w}\\|$ で表される。（理由は以下） ※ 記述を簡単にするために線形識別問題の場合で考えるが、非線形写像 $\\phi$ を通しても同様の議論が成り立つ。 点 $\\mathbf{x}_n$ から識別面に下ろした垂線の足を $\\mathbf{x}_{n\\perp}$ 点 $\\mathbf{x}_n$ から識別面までの符号付き距離を $d_n$ と定義すると、 $\\mathbf{w}$ が識別面の法ベクトルであるから、 $\\mathbf{x}_{n\\perp} = \\mathbf{x}_n - d_n\\frac{\\mathbf{w}}{\\|\\mathbf{w}\\|}$ と表せる。 $\\mathbf{x}_{n\\perp}$ は識別面上にあるので、$\\mathbf{w}&#94;T\\mathbf{x}_{n\\perp} + b = 0$ が成り立つ。 したがって、 $$\\mathbf{w}&#94;T\\left(\\mathbf{x}_n - d_n\\frac{\\mathbf{w}}{\\|\\mathbf{w}\\|}\\right) + b = 0\\qquad \\therefore d_n = \\frac{\\mathbf{w}&#94;T\\mathbf{x}_n + b}{\\|\\mathbf{w}\\|}$$ として距離 $d_n$ が定義できる。ここで、$(\\mathbf{w},b)\\rightarrow(k\\mathbf{w},kb)$ としても $d_n$ の値は不変なので、 $$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n + b \\right)= 1\\qquad (7.4)$$ とスケーリングしても一般性を失わない。 なお、 このスケーリング下では、全てのデータ $\\mathbf{x}_n$ に対して $$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n + b \\right) \\geq 1\\qquad (7.5)$$ が成り立つ。 ここまでをまとめると、 マージン最大 は、 『$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n+b\\right)\\geq1\\quad(i=1,\\ldots,n)$ という条件下で、$\\frac{1}{2}||\\mathbf{w}||&#94;2$ を最小化する問題』 であると言える。 この制約付き最適化問題を解くために、$(7.5)$ の各制約式ごとにラグランジュ乗数 $a_n\\geq0$ を導入すると、次のラグランジュ関数が得られる。 $$L(\\mathbf{w},b,\\mathbf{a}) = \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2 - \\sum_{n=1}&#94;{N}a_n\\left\\{t_n\\left(\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n) + b\\right) - 1\\right\\}\\qquad (7.7)$$ よって、$\\mathbf{w},b$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) =0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) & (7.8)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_nt_n = 0 \\quad\\therefore\\sum_{n=1}&#94;Na_n&#94;{\\ast}t_n = 0 & (7.9)\\\\ \\end{aligned} $$ が得られる。これらの結果を $(7.7)$ に代入して $\\mathbf{w},b$ を消去すると、元の問題は以下の 双対問題 に変換される。 $$ \\tilde{L}(\\mathbf{a}) =\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.10)$$ なお、$\\mathbf{a}$ は以下の制約を満たす。 $$ \\begin{aligned} a_n & \\geq 0,\\quad n=1,\\ldots,N & (7.11)\\\\ \\sum_{n=1}&#94;Na_nt_n &= 0 & (7.12) \\end{aligned} $$ また、カーネル関数 $k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ は、$k(\\mathbf{x},\\mathbf{x}&#94;{\\prime}) = \\phi(\\mathbf{x})&#94;T\\phi(\\mathbf{x})$ と定義される。 この双対問題は二次計画問題であり、 逐次最小問題最適化法(SMO;sequential minimal optimization) などで解くことができる。 なお、今回の場合、 制約条件が全て線形 であることから 実行可能域が凸領域 であることがわかるので、 任意の局所解が大局解になる。 一旦最適な $\\mathbf{a}$ が求まると、識別関数 $y(\\mathbf{x})$ は、 $$y(\\mathbf{x}) = \\mathbf{w}&#94;{\\ast T}\\phi(\\mathbf{x})+b = \\sum_{n=1}&#94;N a_nt_nk(\\mathbf{x},\\mathbf{x}_n) + b \\qquad (7.13)$$ として表すことができる。ここで、 KKT条件より $a_n=0\\Leftrightarrow t_ny(\\mathbf{x}_n)-1>0$ のデータは識別関数に影響しないので、計算から除外することができる。（SVMが疎になる理由） なお、バイアスパタメータ $b$ は、任意のサポートベクトル $\\mathbf{x}_n$ が $t_ny(\\mathbf{x}_n) = 1$ を満たすことから、 $$ \\begin{aligned} &t;_n\\left(\\sum_{m\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m) + b\\right) = 1 & (7.17)\\\\ &\\therefore b&#94;{\\ast}= \\frac{1}{N_{\\mathcal{S}}}\\sum_{n\\in\\mathcal{S}}\\left(t_n-\\sum_{n\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\right)&(7.18) \\end{aligned} $$ として求めることができる。（数値計算の誤差の影響を小さくするため、$(7.17)$ の両辺に $t_n$ をかけ、全てのサポートベクトルで平均をとった。 In [3]: from kerasy.ML.svm import hardSVC In [4]: n_cls1 = 20 ; n_cls2 = 20 N = n_cls1 + n_cls2 In [5]: train_x = np . concatenate ([ np . random . RandomState ( seed ) . normal ( loc = [ 0.5 , 0 ], scale = [ 0.2 , 0.4 ], size = ( n_cls1 , 2 )), np . random . RandomState ( seed ) . normal ( loc = [ - 0.5 , 0 ], scale = [ 0.2 , 0.4 ], size = ( n_cls2 , 2 )) ]) train_y = np . concatenate ([ np . ones ( shape = n_cls1 ), - np . ones ( shape = n_cls2 ) ]) In [6]: X , Y = np . meshgrid ( np . linspace ( - 1 , 1 , 100 ), np . linspace ( - 1 , 1 , 100 )) In [7]: kernels = [ \"linear\" , \"polynomial\" , \"gaussian\" , \"sigmoid\" , \"laplacian\" , \"inverse_multiquadric\" ] In [8]: n_fig = len ( kernels ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i , kernel in enumerate ( kernels ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) model = hardSVC ( kernel = kernel ) model . fit ( train_x , train_y , max_iter = 1500 , sparse_memorize = False ) Z = np . vectorize ( lambda x , y : model . predict ( np . array ([ x , y ]) . reshape ( 1 , - 1 )))( X , Y ) == 1 ax . pcolor ( X , Y , Z , alpha = 0.3 ) for i in range ( N ): alpha = 1 if i in model . isSV () else 0.3 color = \"red\" if train_y [ i ] == 1 else \"blue\" ax . plot ( train_x [ i , 0 ], train_x [ i , 1 ], marker = \"o\" , color = color , markersize = 10 , alpha = alpha ) ax . set_title ( f \" {kernel} kernel\" ) ax . set_xlim ( - 1 , 1 ), ax . set_ylim ( - 1 , 1 ) plt . tight_layout () plt . show () ソフトマージン ここまで、 「二クラスが線形分離可能である」 という仮定を置いていたが、実際の問題では クラスの分布が重なる場合 があり、そのような場合訓練データを完全に分離する解が汎化能力に優れるとは限らない（というより、過学習する。） そこで、各学習データ $(\\mathbf{x}_n,t_n)$ に対して、 スラック変数 (slack variable) $\\xi_n\\geq 0$ を導入して、 $$ t_ny(\\mathbf{x}_n) \\geq 1 \\Longrightarrow t_ny(\\mathbf{x}_n) \\geq 1 - \\xi_n \\qquad (7.20)$$ と条件を緩める。 （ハードマージンの制約のソフトマージンへの緩和） つまり、 $\\xi_n > 1$ となるデータは誤識別している事になる。 ここでの目標は 『マージンよりも内側（$\\xi_n>0$）のデータ $n$ に対してソフトにペナルティを与えつつマージンを最大化する』 ことである。したがって、次の目的関数を最小化する。 $$C\\sum_{n=1}&#94;N\\xi_n + \\frac{1}{2}\\|\\mathbf{x}_n\\| \\qquad (7.21)$$ なお、$C>0$ は スラック変数を用いて表されるペナルティとマージンの大きさの間の トレードオフを制御するパラメータ である。 したがって、この最小化問題のラグランジュ関数は、新たにラグランジュ乗数 $\\{\\mu_n\\}$ を導入して以下のようになる。 $$L(\\mathbf{w},b,\\boldsymbol{\\xi},\\mathbf{a},\\boldsymbol{\\mu}) = \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2 + C\\sum_{n=1}&#94;N\\xi_n - \\sum_{n=1}&#94;{N}a_n\\left\\{t_n\\left(\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n) + b\\right) - 1 + \\xi_n\\right\\} - \\sum_{n=1}&#94;N\\mu_n\\xi_n\\qquad (7.22)$$ 先程同様 $\\mathbf{w},b,\\xi_n$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) =0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) & (7.29)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_nt_n = 0 \\quad\\therefore\\sum_{n=1}&#94;Na_n&#94;{\\ast}t_n = 0 & (7.30)\\\\ \\frac{\\partial L}{\\partial \\xi_n} &= C-a_n-\\mu_n \\quad\\therefore a_n = C-\\mu_n & (7.31) \\end{aligned} $$ が得られる。これらの結果を $(7.22)$ に代入すると、以下の 双対形のラグランジュ関数 が得られる。 $$ \\tilde{L}(\\mathbf{a}) =\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.32)$$ これは、先程の $(7.10)$ と同様の形である。なお、制約式は $$ \\begin{aligned} &a;_n \\geq 0,\\mu_n\\geq 0 \\quad n=1,\\ldots,N\\\\ &\\therefore 0\\leq a_n \\leq C & (7.33)\\\\ &\\sum_{n=1}&#94;Na_nt_n = 0 & (7.34) \\end{aligned} $$ である。 なお、バイアスパタメータ $b$ は、サポートベクトルは $a_n>0$ を満たすが、KKT条件より $a_n$ $\\mu_n$ $\\xi_n$ 説明 $a_n=0$ 識別関数に影響を及ぼさない。 $a_n $\\mu_n>0$ $\\xi_n=0$ ちょうどマージン境界上ある。 $a_n=C$ $\\mu_n=0$ $\\xi_n>0$ マージン内に侵入している。 となることから、$0 $$ \\begin{aligned} &t;_n\\left(\\sum_{m\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m) + b\\right) = 1 & (7.36)\\\\ &\\therefore b&#94;{\\ast}= \\frac{1}{N_{\\mathcal{M}}}\\sum_{n\\in\\mathcal{M}}\\left(t_n-\\sum_{n\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\right)&(7.37) \\end{aligned} $$ として求めることができる。 In [9]: from kerasy.ML.svm import SVC In [10]: train_x = np . concatenate ([ np . random . RandomState ( seed ) . normal ( loc = [ 0.2 , 0.2 ], scale = [ 0.2 , 0.4 ], size = ( n_cls1 , 2 )), np . random . RandomState ( seed ) . normal ( loc = [ - 0.2 , - 0.2 ], scale = [ 0.3 , 0.2 ], size = ( n_cls2 , 2 )) ]) train_y = np . concatenate ([ np . ones ( shape = n_cls1 ), - np . ones ( shape = n_cls2 ) ]) In [11]: params = [ ( 1e-2 , 1e-2 ),( 1e-2 , 1e0 ),( 1e-2 , 1e2 ), ( 1e1 , 1e-2 ),( 1e1 , 1e0 ),( 1e1 , 1e2 ), ( 1e4 , 1e-2 ),( 1e4 , 1e0 ),( 1e4 , 1e2 ), ] In [12]: n_fig = len ( params ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i ,( C , sigma ) in enumerate ( params ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) model = SVC ( kernel = \"gaussian\" , C = C , sigma = sigma ) model . fit ( train_x , train_y , max_iter = 1500 , sparse_memorize = False ) Z = np . vectorize ( lambda x , y : model . predict ( np . array ([ x , y ]) . reshape ( 1 , - 1 )))( X , Y ) == 1 ax . pcolor ( X , Y , Z , alpha = 0.3 ) for i in range ( N ): alpha = 1 if i in model . isSV () else 0.3 color = \"red\" if train_y [ i ] == 1 else \"blue\" ax . plot ( train_x [ i , 0 ], train_x [ i , 1 ], marker = \"o\" , color = color , markersize = 10 , alpha = alpha ) ax . set_title ( f \"gaussian kernel (C= {C} , $\\sigma= {sigma} $)\" ) ax . set_xlim ( - 1 , 1 ), ax . set_ylim ( - 1 , 1 ) plt . tight_layout () plt . show () 多クラスSVM SVMは本来2クラス識別の為の分類器であるが、これを複数組み合わせるなどの方法によって $K>2$クラスの識別に利用する事が出来る。最もよく用いられる方法は、 one-versus-the-rest方式 と呼ばれる方法であり、「データ $\\mathbf{x}$ が クラス $k$ かそれ以外であるか を識別するSVM $y_k(\\mathbf{x})$ を $K$ クラスそれぞれについて構築し、$ y(\\mathbf{x}) = \\mathop{\\rm arg~max}\\limits_{k}y_k(\\mathbf{x})$ によって $\\mathbf{x}$ のクラスを決定する」 SVM回帰 単純な線形回帰問題においては、次の式で定義される正則化された誤差関数を最小化する。 $$\\frac{1}{2}\\sum_{n=1}&#94;N\\{y_n-t_n\\}&#94;2 + \\frac{\\lambda}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.50)$$ 疎な解を得るために、二条誤差関数を $\\epsilon$ 許容誤差関数($\\epsilon$-insentive error function) で置き換える。つまり、予測値 $y(\\mathbf{x})$ と観測値 $t$ の差が $\\epsilon(>0)$ 未満のときは、$\\epsilon$ 許容誤差関数の値は $0$ となる。$\\epsilon$ 許容誤差関数の簡単な例は、 「許容範囲外の値に関しては線形のコストを生じさせる」 ものである。 $$ \\begin{aligned} E_{\\epsilon}\\left(y(\\mathbf{x})-t\\right) = \\begin{cases} 0 & (\\text{ when }|y(\\mathbf{x} - t)| < \\epsilon)\\\\ |y(\\mathbf{x} - t)| - \\epsilon & (\\text{ otherwise }) \\end{cases}\\qquad (7.51) \\end{aligned} $$ In [13]: squareError = lambda x , y_true : 1 / 2 * ( x - y_true ) ** 2 # Sum of Squares Error function epsilonError = lambda x , y_true , epsilon = 1 : 0 if abs ( x - y_true ) < epsilon else abs ( x - y_true ) - epsilon In [14]: X = np . linspace ( - 2 , 2 , 1000 ) plt . plot ( X ,[ squareError ( x , y_true = 0 ) for x in X ], color = \"black\" , label = \"sum of squares error function\" , linestyle = \"--\" ) plt . plot ( X ,[ epsilonError ( x , y_true = 0 ) for x in X ], color = \"black\" , label = \"$\\epsilon$-insentive error function\" ) plt . scatter ( 0 , 0 , marker = \"x\" , color = \"red\" , label = \"y_true\" ) plt . title ( \"Error function comparison\" , fontsize = 16 ), plt . xlim ( - 2 , 2 ), plt . ylim ( -. 1 , 2 ) plt . xlabel ( \"$x$\" , fontsize = 16 ), plt . ylabel ( \"$E(x)$\" , fontsize = 16 ) plt . legend () plt . show () この $\\epsilon$ 許容誤差関数を用いると、結局次の正則化された誤差関数を最小化することになる。 $$C\\sum_{n=1}&#94;NE_{\\epsilon}\\left(y(\\mathbf{x}_n)-t_n\\right) + \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.52)$$ 分類問題と同様、この最適化問題をスラック変数 $\\xi_n,\\hat{\\xi}_n$ を導入して表現する。 $\\epsilon$ チューブの中に位置するという条件は $y_n-\\epsilon\\leq t_n \\leq y_n+\\epsilon$ と表せるので、チューブの外側にデータ点が存在することを許すような制約条件は以下のようにかける。 $$ \\begin{aligned} t_n&\\leq y(\\mathbf{x}_n) + \\epsilon + \\xi_n & (7.53)\\\\ t_n&\\geq y(\\mathbf{x}_n) - \\epsilon - \\xi_n & (7.54)\\\\ \\end{aligned} $$ よって、スラック変数を用いると、SVM回帰の誤差関数は次のようにかける。 $$C\\sum_{n=1}&#94;N\\left(\\xi_n + \\hat{\\xi}_n\\right) + \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.55)$$ したがって、この最小化問題のラグランジュ関数は、ラグランジュ乗数 $a_n,\\hat{a}_n,\\mu_n,\\hat{\\mu}_n$ を導入して以下のようになる。（$y(\\mathbf{x}_n)= \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)+b$） $$ \\begin{aligned} L &=C\\sum_{n=1}&#94;N\\left(\\xi_n+\\hat{\\xi}_n\\right)+\\frac{1}{2}\\|\\mathbf{w}\\|&#94;2-\\sum_{n=1}&#94;N\\left(\\mu_n\\xi_n+\\hat{\\mu}_n\\hat{\\xi}_n\\right)\\\\ &-\\sum_{n=1}&#94;Na_n\\left(\\epsilon + \\xi_n + y_n - t_n \\right)-\\sum_{n=1}&#94;N\\hat{a}_n\\left(\\epsilon + \\hat{\\xi}_n - y_n + t_n\\right) \\qquad (7.56)\\\\ \\end{aligned} $$ これまで同様 $\\mathbf{w},b,\\xi_n,\\hat{\\xi}_n$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;Na_n\\phi(\\mathbf{x}_n)-\\sum_{n=1}&#94;N\\hat{a}_n\\phi(\\mathbf{x}_n)=0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N \\left(a_n-\\hat{a}_n\\right)\\phi(\\mathbf{x}_n) & (7.57)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_n + \\sum_{n=1}&#94;N\\hat{a}_n = 0 \\quad\\therefore\\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right) = 0 & (7.58)\\\\ \\frac{\\partial L}{\\partial \\xi_n} &= C-a_n-\\mu_n \\quad\\therefore a_n + \\mu_n = C & (7.59)\\\\ \\frac{\\partial L}{\\partial \\hat{\\xi}_n} &= C-\\hat{a}_n-\\hat{\\mu}_n \\quad\\therefore \\hat{a}_n + \\hat{\\mu}_n = C & (7.60)\\\\ \\end{aligned} $$ が得られる。これらの結果を $(7.56)$ に代入すると、以下の 双対形のラグランジュ関数 が得られる。 $$ \\begin{aligned} \\tilde{L}(\\mathbf{a},\\hat{\\mathbf{a}}) &= -\\frac{1}{2}\\sum_{n=1}&#94;N\\sum_{m=1}&#94;N\\left(a_n-\\hat{a}_n\\right)\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\\\ &- \\epsilon\\sum_{n=1}&#94;N\\left(a_n + \\hat{a}_n\\right) + \\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right)t_n \\end{aligned} \\qquad (7.61) $$ なお、制約式は $$ \\begin{aligned} 0 \\leq a_n &\\leq C & (7.62)\\\\ 0 \\leq \\hat{a}_n &\\leq C & (7.63) \\end{aligned} $$ である。したがって、新しい入力に対する予測値は $$y(\\mathbf{x}) = \\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right)k(\\mathbf{x},\\mathbf{x}_n) + b\\qquad (7.64)$$ とカーネル関数のみを用いて計算できることがわかる。 なお、バイアスパタメータ $b$ は次のように計算できる。 $C>a_n>0$ が成り立つデータ点についてはKKT条件より $\\xi_n = 0 \\quad \\therefore \\epsilon+y_n-t_n=0$ が成り立つ。よって、 $$ \\begin{aligned} b &= t_n - \\epsilon - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\\\ &= t_n - \\epsilon - \\sum_{m=1}&#94;N\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.69) \\end{aligned} $$ $C>\\hat{a}_n>0$ が成り立つデータ点についてはKKT条件より $\\hat{\\xi}_n = 0 \\quad \\therefore \\epsilon+y_n-t_n=0$ が成り立つ。よって、 $$ \\begin{aligned} b &= t_n - \\epsilon - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\\\ &= t_n - \\epsilon - \\sum_{m=1}&#94;N\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.69) \\end{aligned} $$ なお、このようにして得られた $b$ の値を全て平均した結果を用いると数値誤差の影響を小さくできる。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-3.html"},{"title":"ラグランジュ未定乗数法","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 条件なし最適化 ある関数 \\(f\\) が与えられた時、それが最小値を取る点を見つけ出す。 $$\\text{min : } f(\\mathbf{x})$$ したがって、微分をとって \\(0\\) になる点を見つければ良い。 $$\\frac{\\partial}{\\partial x}f(x) = 0\\Longrightarrow x&#94;{\\ast}$$ 等式制約付き最適化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g(\\mathbf{x})=0\\\\ \\end{aligned} $$ ラグランジュ乗数(Lagrangian multiplier) と呼ばれるパラメータ \\(\\lambda\\) を導入した ラグランジュ関数(Lagrangian function) $$L(\\mathbf{x},\\lambda) \\equiv f(\\mathbf{x})+\\lambda g(\\mathbf{x})\\qquad (E.4)$$ の \\(\\mathbf{x}\\) と \\(\\lambda\\) の両方に対する停留点（鞍点）を見つければ、制約付き問題の最適解が得られる。 理由 以下２つの理由より、 \\(\\nabla f\\) と \\(\\nabla g\\) は、 向きが逆の場合も含めて 平行なベクトルとなる。したがって、 あるパラメータ \\(\\lambda\\neq0\\) が存在して、 $$\\nabla f + \\lambda\\nabla g = 0\\qquad (E.3)$$ が成立しなければならない。これは、 \\(\\nabla_{\\mathbf{x}}L=0\\) と表されることがわかる。また、 \\(\\partial L/\\partial\\lambda = 0\\) より、制約式 \\(g(\\mathbf{x})=0\\) も導かれる。 1) \\(\\nabla g(\\mathbf{x})\\) が制約面 \\(g(\\mathbf{x})=0\\) に対して常に垂直 制約面 \\(g(\\mathbf{x})\\) 上の点 \\(\\mathbf{x}\\) と \\(\\mathbf{x}+\\boldsymbol{\\varepsilon}\\) を考える。 すると、 \\(\\mathbf{x}\\) の周りでの \\(g(\\mathbf{x})\\) のテイラー展開より、 $$g(\\mathbf{x} + \\boldsymbol{\\varepsilon}) \\sim g(\\mathbf{x}) + \\boldsymbol{\\varepsilon}&#94;T\\nabla g(\\mathbf{x})\\qquad (E.2)$$ いま、 \\(\\mathbf{x}\\) と \\(\\mathbf{x}+\\boldsymbol{\\varepsilon}\\) は共に制約面上に存在するので $$g(\\mathbf{x})=g(\\mathbf{x}+\\boldsymbol{\\varepsilon})=0$$ が成り立つ。ゆえに、 \\(\\|\\boldsymbol{\\varepsilon}\\|\\rightarrow0\\) の極限では \\(\\boldsymbol{\\varepsilon}&#94;T\\nabla g(\\mathbf{x})\\sim0\\) が成り立つ。 \\(\\boldsymbol{\\varepsilon}&#94;T\\) は制約面上の接線である。 より、ベクトル \\(\\nabla g(\\mathbf{x})\\) は制約面 \\(g(\\mathbf{x})=0\\) に対して垂直である。 2) \\(\\nabla f(\\mathbf{x}&#94;{\\ast})\\) も制約面に対して垂直 もし \\(\\nabla f(\\mathbf{x}&#94;{\\ast})\\) が制約面に対して垂直でないとすると、制約面にそって \\(f(\\mathbf{x})\\) の値がさらに大きくなるように点を動かすことができるはずである。 したがって、制約面上の点で \\(f(\\mathbf{x})\\) を最大化する点 \\(\\mathbf{x}&#94;{\\ast}\\) においては、ベクトル \\(\\nabla f(\\mathbf{x})\\) も制約面に対して垂直でなければならない。 不等式制約付き最適化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g(\\mathbf{x})\\leq0\\\\ \\end{aligned} $$ ここで、解 \\(\\mathbf{x}&#94;{\\ast}\\in\\Omega\\) には、 無効制約(inactive constraint) \\(\\overset{\\text{def}}{\\Longleftrightarrow}g(\\mathbf{x}&#94;{\\ast}) < 0\\) 有効制約(active constraint) \\(\\overset{\\text{def}}{\\Longleftrightarrow}g(\\mathbf{x}&#94;{\\ast}) = 0\\) の2つの可能性がある。 $$ \\Omega:= \\left\\{\\mathbf{x}\\in\\mathbb{R}&#94;D: g(\\mathbf{x})<0 \\right\\} $$ 無効制約の場合 無効制約 \\(\\left(g(\\mathbf{x})<0\\right)\\) の場合、関数 \\(g(\\mathbf{x})\\) は何も制約を課していないのと同様なので、停留条件は単に \\(\\nabla f(\\mathbf{x}) = 0\\) となる。 なお、これは上記の 等式制約におけるラグランジュ関数 \\((E.4)\\) において \\(\\lambda=0\\) とした場合の停留条件に等しい。 有効制約の場合 有効制約 \\(\\left(g(\\mathbf{x})=0\\right)\\) の場合、 等式制約におけるラグランジュ関数 \\((E.4)\\) において \\(\\lambda\\neq0\\) とした場合の停留条件に等しい。 ただし、 \\(-\\nabla f(\\mathbf{x}&#94;{\\ast})\\) は \\(g(\\mathbf{x})<0\\) の外側へと向かうはず だから、 あるパラメータ \\(\\lambda>0\\) が存在して、 $$\\nabla f(\\mathbf{x}) = -\\lambda\\nabla g (\\mathbf{x})$$ が成立しなければならない。 勾配 意味 最適化問題における問題における意味 \\(\\nabla f(\\mathbf{x})\\) \\(f\\) が大きくなる方向 目的とは別の方向 \\(\\nabla g(\\mathbf{x})\\) \\(g\\) が大きくなる方向 \\(g(\\mathbf{x})<0\\) の外側へと向かう方向 KKT条件 上記の無効制約・有効制約のどちらの場合にせよ、 \\(\\lambda g(\\mathbf{x})=0\\) が成立することがわかる。 したがって、 \\(g(\\mathbf{x})\\leq0\\) という制約の下で \\(f(\\mathbf{x})\\) を最小化するには、以下の Karush-Kuhn-Tucker(KKT)条件 のもとで、 \\(\\mathbf{x},\\lambda\\) に関して ラグランジュ関数 \\((E.4)\\) の停留点を求めれば良い。 $$ \\begin{aligned} \\begin{cases} \\text{Primal feasibility} &g(\\mathbf{x})\\leq0 & (E.9)\\\\ \\text{Dual feasibility} &\\lambda \\geq 0 & (E.10)\\\\ \\text{Complementary slackness} &\\lambda g(\\mathbf{x}) = 0 & (E.11) \\end{cases} \\end{aligned} $$ なお、当然ではあるが、「制約条件の符号の向き」と「目的関数の最大化・最小化」には以下の関係がある。（ \\(\\lambda\\geq0\\) ） 目的関数 \\(f(\\mathbf{x})\\) 制約条件 \\(g(\\mathbf{x})\\) ラグランジュ関数 \\(L(\\mathbf{x},\\lambda)\\) \\(\\min f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\leq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) + \\lambda g(\\mathbf{x})\\) \\(\\min f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\geq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) - \\lambda g(\\mathbf{x})\\) \\(\\max f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\leq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) - \\lambda g(\\mathbf{x})\\) \\(\\max f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\geq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) + \\lambda g(\\mathbf{x})\\) 一般化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g_j(\\mathbf{x})=0 & (j=1,\\ldots,J)\\\\ & h_k(\\mathbf{x})\\leq0 & (k=1,\\ldots,K)\\\\ \\end{aligned} $$ 以下のラグランジュ関数を最適化する。 $$L\\left(\\mathbf{x},\\{\\lambda_j\\},\\{\\mu_k\\}\\right) = f(\\mathbf{x}) + \\sum_{j=1}&#94;J\\lambda_jg_j(\\mathbf{x}) + \\sum_{k=1}&#94;K\\mu_kh_k(\\mathbf{x})\\qquad (E.12)$$ ここで、KKT条件は、以下となる。 $$ \\begin{aligned} \\begin{cases} \\text{Primal feasibility} &g_j(\\mathbf{x})=0,h_k(\\mathbf{x})\\leq0 \\\\ \\text{Dual feasibility} &\\mu_k \\geq 0\\\\ \\text{Complementary slackness} &\\mu_kh_k(\\mathbf{x}) = 0 \\end{cases} \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-2.html"},{"title":"カーネル法","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt 講義の構成 パターン認識 カーネル法の紹介 最適化理論の復習 サポートベクターマシーン パターン認識 対象を識別するルールを訓練データより、自動的に取得する。 各対象を全データ共通次元のベクトルで表現すれば、識別関数 $f(\\mathbf{x})$ は、特徴空間上に定義される。 元の空間 （入力空間） を非線形に写像すれば、写像先 （特徴空間） で線形識別することで非線形識別が達成される。 $$\\phi:\\mathbf{X}\\rightarrow\\mathbb{R}&#94;m$$ どのように写像を定めるかは難しい問題。 カーネル法の紹介 上で紹介した写像を、 類似度関数（カーネル関数） に基づいて決める手法。（例：ガウシアンカーネル $K(\\mathbf{x},\\mathbf{x}&#94;{\\prime}) = \\exp\\left(-\\frac{\\|\\mathbf{x}-\\mathbf{x}&#94;{\\prime}\\|}{\\sigma}\\right)$） 類似度さえ定義できればどのような対象（例：生物学的ネットワーク上のタンパク質の分類）にでも適用できる。 複雑な問題になると非常に高い次元に写像する必要があるが、カーネル関数さえ求められれば写像 $\\phi$ を陽に求める必要はない （カーネルトリック） 。 $k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ が有効なカーネル関数であるための必要十分条件は、任意の $\\{\\mathbf{x}_n\\}$ に対して、要素が $k(\\mathbf{x}_n,\\mathbf{x}_m)$ で与えられるグラム行列 $\\mathbf{K}$ が半正定値であること。 新しいカーネル関数を定義してそれが有効な関数かを確認するのは大変なので、次の性質を用いて新たな関数を定義することが多い。 新たなカーネル関数を構築するための方法 有効なカーネルとして $k_1(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ と $k_2(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ が与えられた時、次の関数もやはりカーネル関数として有効である。 $$\\begin{aligned} k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=c k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) & (6.13)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=f(\\mathbf{x}) k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) f\\left(\\mathbf{x}&#94;{\\prime}\\right) & (6.14)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=q\\left(k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.15)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=\\exp \\left(k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.16)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)+k_{2}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)& (6.17)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) k_{2}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) & (6.18)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{3}\\left(\\phi(\\mathbf{x}), \\phi\\left(\\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.19)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=\\mathbf{x}&#94;{\\mathrm{T}} \\mathbf{A} \\mathbf{x}&#94;{\\prime}& (6.20) \\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{a}\\left(\\mathbf{x}_{a}, \\mathbf{x}_{a}&#94;{\\prime}\\right)+k_{b}\\left(\\mathbf{x}_{b}, \\mathbf{x}_{b}&#94;{\\prime}\\right) & (6.21)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{a}\\left(\\mathbf{x}_{a}, \\mathbf{x}_{a}&#94;{\\prime}\\right) k_{b}\\left(\\mathbf{x}_{b}, \\mathbf{x}_{b}&#94;{\\prime}\\right) & (6.22) \\end{aligned}$$ ※ ここで、それぞれの変数は以下の意味を持つ。 変数 説明 $c>0$ 定数 $f(\\cdot)$ 任意の関数 $q(\\cdot)$ 非負の係数を持つ多項式 $\\phi(\\mathbf{x})$ $\\mathbf{x}$ から $\\mathbb{R}&#94;{M}$ への関数 $k_3(\\cdot,\\cdot)$ $\\mathbb{R}&#94;{M}$ で定義された有効なカーネル $\\mathbf{A}$ 対象な半正定値行列 $\\mathbf{x}_a,\\mathbf{x}_b$ $\\mathbf{x}=(\\mathbf{x}_a,\\mathbf{x}_b)$ であるような変数（必ずしも互いに素である必要はない） $k_a,k_b$ それぞれの特徴空間において有効なカーネル関数 カーネル関数の例 $$k(x,x&#94;{\\prime}) = \\boldsymbol{\\phi}(x)&#94;T\\boldsymbol{\\phi}(x&#94;{\\prime}) = \\sum_{i=1}&#94;M\\phi_i(x)\\phi_i(x&#94;{\\prime})\\qquad (6.10)$$ # 多項式 ガウス シグモイド 基底関数 $$\\phi_j(x) = cx&#94;j$$ $$\\phi_j(x) = \\exp\\left\\{-\\frac{(x-\\mu_j)&#94;2}{2s&#94;2}\\right\\}\\qquad(3.4)$$ $$\\begin{aligned}\\phi_j(x) &= \\sigma\\left(\\frac{x-\\mu_j}{s}\\right) & (3.5)\\\\\\sigma(a) &=\\frac{1}{1+\\exp(-a)} & (3.6)\\end{aligned}$$ In [2]: # mapping function def polynomial ( x , d , c = 1 ): return c * x ** d def gaussian ( x , mu , s = 0.1 ): return np . exp ( - (( x - mu ) ** 2 ) / ( 2 * s ** 2 ) ) def logistic ( x , mu , s = 0.1 ): return 1 / ( 1 + np . exp ( - ( x - mu ) / s )) In [3]: # mapping function kernel = lambda phi , x_prime , X , key = None , ** params : np . array ([ sum ([ phi ( x_prime , ** { key : val }) * phi ( x , ** { key : val }) for val in params [ key ]]) for x in X ]) In [4]: params = [ ( polynomial , - 0.5 , \"d\" , np . linspace ( 1 , 11 , 11 )), ( gaussian , 0 , \"mu\" , np . linspace ( - 1 , 1 , 11 )), ( logistic , 0 , \"mu\" , np . linspace ( - 1 , 1 , 11 )), ] In [5]: X = np . linspace ( - 1 , 1 , 1000 ) In [6]: ncol = len ( params ) fig = plt . figure ( figsize = ( 12 , 6 )) for i , param in enumerate ( params ): phi , x_prime , key , vals = param ax_base = plt . subplot2grid (( 5 , ncol ),( 0 , i ), rowspan = 3 ) for val in vals : Y = phi ( X , ** { key : val }) ax_base . plot ( X , Y ) ax_base . set_title ( phi . __name__ ) ax_kernel = plt . subplot2grid (( 5 , ncol ),( 3 , i ), rowspan = 2 ) ax_kernel . plot ( X , kernel ( phi , x_prime , X , key , ** { key : vals })) ax_kernel . scatter ( x_prime , min ( ax_kernel . get_ylim ()), marker = \"x\" , color = \"black\" , label = \"$x&#94;{\\prime}$\" ) ax_kernel . set_xlabel ( \"$x$\" ), ax_kernel . set_title ( \"$k(x,x&#94;{\\prime})$\" ), ax_kernel . legend () plt . tight_layout () plt . show () 様々なカーネル 生物学的配列のカーネル Spectrum kernel (Leslie et al., 2002) Marginalized kernel (Tsuda et al., 2002) Profile kernel (Kuang et al., 2004) Local alignment kernel (Saigo et al., 2004) 木構造に関するカーネル Kernel for phylogenetic profiles (Vert, 2002) Kernel for natural language (Suzuki et al., 2003) Kernel for RNA sequences (Kin et al., 2002) ※ 詳しくは、 Kernel Methods in Computational Biology, MIT Press, 2004 を参照 最適化理論の復習 ラグランジュ未定乗数法 に記載。 サポートベクターマシーン マージン最大化 に基づく線形識別器 カーネル関数と組み合わせることによって非線形な識別も可能 サンプル間の類似度にしか依存しない （→非ベクトルデータの分類にも適用可能） 詳しくは サポートベクターマシン(SVM) に記載。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-1.html"},{"title":"生物統計論 第3回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section3.1 Multiple Test Correction \"The more inferences are made, the more likely erroneous inferences are to occur.\" (ex. Even if the type1 error rate is 1% for each data, 10 out of 1000 sample will be rejected on average.) Terminology FWER(Family-wise error rate) : the probability of making at least one type I error (FP) in the family. FDR(False discovery rate) : the expected type I error (FP) rate in rejected data. FDR(False discovery rate) Null hypotheses: $H_1,\\ldots,H_{g_j}$ Alternative hypotheses: $H_{g_j+1},\\ldots,H_g$ Procedure to reject hypotheses : $d_{\\alpha}: \\left(P_1,P_2,\\ldots,P_g\\right)\\rightarrow\\left\\{H_{i_1},\\ldots,H_{i_K}\\right\\}$ Expected ratio of FP in rejected hypotheses: $\\mathrm{FP}=\\sum_{k=1}&#94;K\\mathbb{I}(1\\leq i_k\\leq g_j),\\quad \\mathrm{TP}=K-\\mathrm{FP}$ $\\mathcal{Q} = \\begin{cases}0 & \\text{if }K=(\\mathrm{FP+TP})=0\\\\\\frac{\\mathrm{FP}}{\\mathrm{FP}+\\mathrm{TP}} & \\text{if }K>0\\end{cases}$ $$\\mathrm{FDR}(d_{\\alpha})=\\mathbb{E}\\left(\\mathcal{Q}|H_1,\\ldots,H_g\\right)$$ Methods to counteract this problem Bonferroni Correction Set $\\alpha\\left(=s_{\\alpha}\\leq S_h|H_0\\right)\\leftarrow 1/g\\cdot\\alpha_{\\mathrm{FWER}}$ ($g$: sample size) Therefore, we have: $$\\mathbb{P}\\left(\\{s_{\\alpha}\\leq S_1\\}\\cup\\cdots\\cup\\{s_{\\alpha}\\leq S_g\\}|H_0\\right)\\leq\\sum_{h=1}&#94;g\\mathbb{P}\\left(s_{\\alpha}\\leq S_h|H_0\\right) = g\\cdot\\left(\\frac{1}{g}\\alpha_{\\mathrm{FWER}}\\right) = \\alpha_{\\mathrm{FWER}}$$ Benjamini-Hochberg Procedure (B-H Procedure) If we assume data are distributed independently, we have: $$\\left(P_1,\\ldots,P_g\\right)\\sim\\mathrm{Unif}\\left(0,1\\right)&#94;{\\times g_j}\\times\\mathbb{P}\\left(P|H_{\\text{alternative}}\\right)&#94;{\\times\\left(g-g_j\\right)}$$ We sort the p-value as $p_1\\leq\\cdots\\leq p_g$ Then, $$ \\begin{aligned} d_{\\alpha_{\\mathrm{FDR}}}&#94;{\\mathrm{B-H}}(p_1,\\cdots,p_g) &:=\\mathrm{Reject}\\left\\{H_i|1\\leq i\\max\\left\\{n|p_n\\leq\\left(\\frac{n}{g}\\alpha_{\\mathrm{FDR}}\\right)\\right\\}\\right\\}\\\\ &\\Rightarrow \\mathrm{FDR}\\left(d_{\\alpha_{\\mathrm{FDR}}&#94;{\\mathrm{B-H}}}\\right)\\leq\\alpha_{\\mathrm{FDR}} \\end{aligned} $$ Example. $H_i$ $G_1$ $G_2$ $G_3$ $G_4$ $G_5$ $G_6$ $G_7$ $G_8$ $G_9$ $G_{10}$ $p_i$ $0.1$ $0.4$ $0.8$ $0.035$ $0.9$ $0.04$ $0.001$ $0.002$ $0.6$ $0.7$ In [2]: alpha_FDR = 0.1 g = 10 In [3]: idx = np . array ([ i + 1 for i in range ( g )]) p_value = data = np . array ([ 0.1 , 0.4 , 0.8 , 0.035 , 0.9 , 0.04 , 0.001 , 0.002 , 0.6 , 0.7 ]) q = np . array ([( i + 1 ) / g * alpha_FDR for i in range ( g )]) In [4]: p_value_rank = np . argsort ( p_value ) In [5]: for i in reversed ( range ( g )): if q [ i ] >= p_value [ p_value_rank [ i ]]: break In [6]: print ( f \"Reject: {[f'G {idx} ' for idx in idx[p_value_rank[:i+1]]]}\" ) Reject: ['G7', 'G8', 'G4', 'G6'] Quantile-Quantile plot In [7]: x = - np . log10 ( np . array ([( i + 1 ) / g for i in range ( g )])) y = - np . log10 ( p_value [ p_value_rank ]) In [8]: plt . plot ( x , y , color = \"red\" , label = \"observed\" ) plt . plot (( 0 , min ( x [ 0 ], y [ 0 ])),( 0 , min ( x [ 0 ], y [ 0 ])), color = \"black\" , label = \"$y=x$\" ) plt . title ( \"Quantile-Quantile plot\" ) plt . xlabel ( \"$-\\log_ {10} $ expected P-value\" ) plt . ylabel ( \"$-\\log_ {10} $ observed P-value\" ) plt . legend () plt . grid () plt . show () Section3.2 Probabilistic Models Hypothesis Testing Probabilistic Modeling Models data generation processes in uninteresting scenarios $H_0$ Models data generation processes under interesting biological scenario $H_1$ (possibly as well as $H_0$) Show inconsistency with $H_0$ Check fit of the model to the data Problems of Hypothesis Testing Approaches Difficult to model satisfactory, uninteresting scenarios Does not model interesting biological scenarios A rejected hypothesis does not necessarily tell anything interesting Still useful for many small parts of a full analysis probabilistic Modeling Strong regularity from the probability condition Can include various biological knowledge Adjustable to the quality, amount, randomness of the data Conditional probability makes it easy to integrate multiple models Once a satisfactory model is obtained, we can extract various information from expectation values Powerful general tools are available Maximal Likelihood EM algorithms Bayesian inference MCMC sampling etc... Section3.3 Likelihood Q. How to adjust parameters?? A. Maximize the Likelihood likelihood observed data: $\\mathbf{D} = \\left\\{x&#94;{(h)}|h=1,\\cdots,n\\right\\}$ parametrized model distribution: $\\mathbb{P}(x|\\theta)$ Likelihood: $L(\\theta|D) = \\mathbb{P}(D|\\theta) = \\prod_{h=1}&#94;n\\mathbb{P}\\left(x&#94;{(h)}|\\theta\\right)$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html"},{"title":"レポート課題2(10/10出題)","text":"CUGax9hrF5s4cEY9N3eJZQ==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html"},{"title":"連続最適化(1)制約なし最適化","text":"講師： 佐藤一誠 参考書： 最適化手法 参考書： 機械学習のための連続最適化 In [1]: import numpy as np import matplotlib.pyplot as plt 講義概要 凸最適化問題 最急降下法 ニュートン法 準ニュートン法 凸最適化問題 凸関数 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、以下が成り立つような関数を 凸関数(convex function) と呼ぶ。 $$f\\left(\\left(1-\\theta\\right)x + \\theta x&#94;{\\prime}\\right)\\leq\\left(1-\\theta\\right)f(x) + \\theta f\\left(x&#94;{\\prime}\\right)$$ $f$ が一階微分可能の時、$f$ が凸関数になるための必要十分条件は、感覚的には接戦が常に関数の下に来ることで、 $$\\forall x,x&#94;{\\prime}\\in\\mathcal{X},\\quad f\\left(x&#94;{\\prime}\\right)\\geq f(x) + \\nabla f(x)&#94;T\\left(x&#94;{\\prime}-x\\right)$$ $f$ が二階微分可能の時、$f$ が凸関数になるための必要十分条件は、 ヘッセ行列(Hessian matrix) $\\nabla&#94;2f(x)$ が 半正定値(positive semi-definite) ↔︎$\\nabla&#94;2f(x)$ の 固有値(eigenvalue) が全て非負 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、$(1-\\theta)x+\\theta x&#94;{\\prime}$ も $\\mathcal{X}$ に属するとき、$\\mathcal{X}$ を 凸集合(convex set) と呼ぶ。$x$ と $x&#94;{\\prime}$ を結ぶ線分上の全ての点が $\\mathcal{X}$ に属するということ。 最適化 最適化問題(optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 最適化アルゴリズム(optimization algorithm)： 収束する点列の生成アルゴリズム 最適性条件：最適化問題の最適解であるための必要条件 制約なし最適化問題(unconstrained optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 $f$ を 目的関数(objective function) と呼ぶ。 目的関数は 微分可能(differentiable) と仮定する。 最適性条件：$\\mathbf{x}&#94;{\\star}$ が最適解のとき $$\\nabla f(\\mathbf{x}&#94;{\\star}) = 0$$ 凸最適化問題(convex optimization problem)： 関数 $f$ が凸で集合 $\\mathcal{X}$ も凸 最適解（の集合）が 一意に定まる。 最適解の必要十分条件： 勾配(gradient) がゼロ（凸でない場合は 必要条件 ） 最急降下法 最急降下法(steepest descent method) ※ 勾配法(gradient method)とも。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\quad (\\varepsilon_k>0\\text{ : step size})$$ 凸最適化問題の場合、 大域的最適解(global optimization solution) が求まる 非凸最適化問題の場合、 局所最適解(local optimization solution) しか求められず、様々な初期値から何回か学習して最適解を採用する、ことしかできない。 ステップ幅(step size)の選択 焼きなまし(annealing) ：「最初は大きく、徐々に小さく」。しかし、適切に実装することは容易でない。 正規化(normalization) ：$\\varepsilon_k = \\varepsilon_k&#94;{\\prime}/\\|\\nabla f(\\mathbf{x}_k)\\|$ 勾配が大きいとき安定するが、勾配が小さいときは不安定 厳密直線探索(exact line search) 目的関数の値を最小にするステップ幅を求める。 $$\\underset{\\varepsilon_k>0}{\\min}f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)$$ $f$ が 単峰関数(unimodal function) の場合は、 二分探索法(binary search) や 黄金分割探索(golden section search) などの探索によって最小値を探す。 一般に、一次元の非線形最小化問題を解く必要があるため、最適なステップ幅の探索に時間がかかる。 厳密直線探索を用いた最急降下法は、 一次収束(linear convergence) する。 $$\\text{Q-linear convergence: }\\|\\mathbf{x}_{k+1}-\\mathbf{x}&#94;{\\star}\\| c\\leq \\|\\mathbf{x}_k-\\mathbf{x}&#94;{\\star}\\|&#94;q,\\quad 0 In [2]: ITERATION = 10 N = 100 fsize = 4 In [3]: a = 10 ; b = 1 A = 2 * np . diag ([ a , b ]) func = lambda x , y : a * x ** 2 + b * y ** 2 In [4]: x1min =- 5 ; x1max = 5 ; x2min =- 5 ; x2max = 5 initialX = np . array ([ x1min + 1 , x2max - 2 ]) x1 = np . linspace ( x1min , x1max , N ) x2 = np . linspace ( x2min , x2max , N ) X1 , X2 = np . meshgrid ( x1 , x2 ) Z = func ( X1 , X2 ) In [5]: def find_step_size ( method , f , X , A , ** kwargs ): df = A . dot ( X ) if method == \"fixed\" : epsilon = 1e-1 elif method == \"exact line search\" : epsilon = np . sum ( np . square ( df )) / np . sum ( np . square ( df ) * A . diagonal ()) elif method == \"backtracking line search\" : epsilon = 1 alpha = kwargs [ \"alpha\" ]; beta = kwargs [ \"beta\" ] while True : newX = X - epsilon * df if f ( newX [ 0 ], newX [ 1 ]) - f ( X [ 0 ], X [ 1 ]) <= - alpha * epsilon * np . sum ( np . square ( df )): break epsilon = beta * epsilon return epsilon In [6]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [7]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 例：$f(x) = 1/2\\mathbf{x}&#94;T\\mathbf{Ax}$ $$ \\begin{aligned} \\frac{\\partial f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)}{\\partial\\varepsilon_k} &= \\frac{\\partial}{\\partial\\varepsilon_k}\\frac{1}{2}\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)&#94;T\\mathbf{A}\\left(\\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\\\ &= \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right) - \\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{Ax}_k\\\\ &=0\\\\ \\therefore \\varepsilon_k&#94;{\\star} &= \\frac{\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2}{\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right)}\\qquad (\\nabla f\\left(\\mathbf{x}_k\\right) = \\mathbf{Ax}) \\end{aligned} $$ バックトラック直線探索(backtracking line search) $\\varepsilon_k=1$ に初期化 アルミホ基準(Armijo rule) ： $$f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right) - f\\left(\\mathbf{x}_k\\right)\\right) \\leq\\alpha\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2$$ が成り立つまで $\\varepsilon_k$ を $\\varepsilon_k\\leftarrow\\beta\\varepsilon_k$ と減衰させる。（$0<\\alpha, \\beta<1$） 目的関数の減少量の線形予測値の $\\alpha$ 倍の減少を保証している。 $f$ の真の減少量： $$g\\left(\\varepsilon_k\\right) = f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right) - f\\left(\\mathbf{x}_k\\right)$$ $f$ の減少量の 線形予測値 $$\\begin{aligned}\\varepsilon_kg&#94;{\\prime}(0) &=\\varepsilon_k\\cdot\\left( -\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k-0\\cdot\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\right)\\\\&=-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k\\right)\\\\&=-\\varepsilon_k\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2 \\end{aligned}$$ In [8]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [9]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 微分不可能な場合 目的関数 $f$ が 微分不可能(non-differentiable) の場合は、微分の概念を一般化した 劣微分 を用いる。 凸関数 $f$ の $\\mathbf{x}&#94;{\\prime}$ での 劣勾配(sub-gradient) とは、全ての $\\mathbf{x}\\in\\mathcal{X}$ に対して次式を満たす $\\mathbf{\\xi}$ $$f(\\mathbf{x})\\geq f\\left(\\mathbf{x}&#94;{\\prime}\\right) + \\mathbf{\\xi}&#94;T\\left(\\mathbf{x}-\\mathbf{x}&#94;{\\prime}\\right)$$ $f$ が微分可能な時、$\\mathbf{\\xi} = \\nabla f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ 上式を満たす $\\mathbf{\\xi}$ 全体を $\\partial f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ で表し、 劣微分(sub-differential) と呼ぶ。 微分不可能な点では、劣微分のどれかの値を用いる。 ニュートン法 一般にニュートン法という名称は、方程式の解を求めるアルゴリズムを指すが、以下を表すことが多い。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ 勾配法では一階微分しか用いていないので、二階微分も用いることで反復回数を減らすことが狙い。実際 $k$ が十分大きい時、最適解 $\\mathbf{x}&#94;{\\star}$ の近傍で 二次収束(quadratic convergence) するが、逆行列を求める計算コストが大きい。 二次の テーラー展開(Taylor expansion) を用いて $f$ を現在の解 $\\mathbf{x}_k$ の周りで近似 $\\left(f(\\mathbf{x})\\approx f_k(\\mathbf{x})\\right)$ し、その二次近似を最小にする $\\mathbf{x}_k$ に更新する。 $$f_k(\\mathbf{x}) = f(\\mathbf{x}_k) + \\nabla f(\\mathbf{x}_k)&#94;T\\left(\\mathbf{x}-\\mathbf{x}_k\\right) + \\frac{1}{2}\\left(\\mathbf{x}-\\mathbf{x}_k\\right)&#94;T\\nabla&#94;2f(\\mathbf{x}_k)(\\mathbf{x}-\\mathbf{x}_k)$$ $f_k$ の勾配をゼロと置いた方程式 $$\\nabla f_k(\\mathbf{x}) = \\frac{\\partial f_k(\\mathbf{x})}{\\partial \\mathbf{x}}= \\nabla f(\\mathbf{x}_k) + \\nabla&#94;2f(\\mathbf{x}_k)\\left(\\mathbf{x}-\\mathbf{x}_k\\right) = \\mathbf{0}$$ を解けば、$f_k$ の最小解が以下のように求まる $$\\mathbf{x}&#94;{\\star} = \\mathbf{x}_k - \\left(\\nabla&#94;2 f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ なお、ヘッセ行列が逆行列を持たない時は、 単位行列の定数倍を加えて対処する（正則化, regularization） らしい。 $$\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right) + \\mu\\mathbf{I}\\right)&#94;{-1},\\quad\\mu>0$$ 準ニュートン法 ニュートン法の近似。ニュートン法ではヘッセ行列の逆行列を求めるのに計算コストがかかるので、勾配ベクトル $\\nabla f(\\mathbf{x})$ を用いて近似計算する。 BFGSアルゴリズムを用いたヘッセ行列の更新式が有名 なお、 レポート課題 で詳しく記述しているが、BFGSアルゴリズムのヘッセ行列の更新式は以下で表される。 $$ \\mathbf{H}_{k+1} =\\mathbf{H}_k+\\frac{\\mathbf{t}_k\\mathbf{t}_k&#94;T}{\\mathbf{s}_k&#94;T\\mathbf{t}_k}-\\frac{\\mathbf{H}_k\\mathbf{s}_k\\mathbf{s}_k&#94;T\\mathbf{H}_k}{\\mathbf{s}_k&#94;T\\mathbf{H}_k\\mathbf{s}_k} $$ なお、この時 $$ \\begin{aligned} \\begin{cases} \\mathbf{s}_k &= \\mathbf{x}_{k+1} - \\mathbf{x}_k\\\\ \\mathbf{t}_k &= \\nabla f(\\mathbf{x}_{k+1}) - \\nabla f(\\mathbf{x}_k) \\end{cases} \\end{aligned} $$ まとめ 凸最適化問題 目的関数が凸関数で定義域が凸集合 最適解が一意に定まる 最急降下法 勾配を降下するように値を更新 ステップ幅の選択が重要 目的関数が微分不可能な場合は、劣勾配法や近接勾配法を用いる ニュートン法 二階微分の情報を利用する ヘッセ行列の近似を用いる準ニュートン法が実用的 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html"},{"title":"Zuker Algorithm","text":"Free energy minimization of RNA seconary structure. In cells, RNAs are likely to form energetically stable secondary structure. The correctness of secondary structure should be evaluated based on the free energy, rather than the number of base-pairs ( Nussinov Algorithm ) We first describe a way to calculate the free energy of a particular RNA secondary structure. We describe the Zuker algorithm which calculates the RNA secondary structure with the minimum free energy (MFE). Free energy of RNA secondary structure The free energy of a secondary structure is approximated as the sum of the free energy of \"loops\". $$E = \\sum_iE_i$$ The free energy of individual loop is given by experimental data. (ex. $\\mathrm{C-G: }-3.4\\mathrm{kcal/mol}$, $\\mathrm{U-A: }-0.9\\mathrm{kcal/mol}$) Five types of \"loops\" hairpin loop stacking bulge loop internal loop multi-loop F1(i,j) F2(i,j,h,l) Fm=a+bk+cu a,b,c: constant k: the number of base-pairs in a multi-loop u: the number of single stranded nucleotides in a multi-loop Algorithm variable meaning $W(i,j)$ the minimum free energy of subsequence from $i$ to $j$. $V(i,j)$ the minimum free energy of subsequence from $i$ to $j$ when $i$ to $j$ forms a base-pair. $M(i,j)$ the minimum free energy of subsequence closed by two or more base pairs. $M1(i,j)$ the minimum free energy of subsequence closed by one or more base pairs. Recursion $$ \\begin{aligned} W(i,j) &= \\min \\begin{cases} W(i+1,j)\\\\W(i,j-1)\\\\V(i,j)\\\\\\min_{i\\leq k Initialization In [1]: from kerasy.Bio.structure import Zuker from kerasy.utils.bio import readMonoSeq In [2]: model = Zuker () In [3]: # 以下の形のパラメタファイルを受け取ります。 ! cat params.json { \"inf\": 1e3, \"type\": \"RNA\", \"Watson_Crick\": true, \"Wobble\": true, \"hairpin\": [Infinity, Infinity, 4.4, 4.6, 4.7, 4.4, 5.0, 4.5, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 5.9, 6.0, 6.1, 6.1, 6.2, 6.2, 6.3, 6.3, 6.4, 6.4, 6.5, 6.5, 6.5, 6.6, 6.6, 6.7, Infinity], \"internal\": [Infinity, 1.0, 1.0, 1.1, 2.0, 2.0, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9, 3.0, 3.1, 3.1, 3.2, 3.3, 3.3, 3.4, 3.4, 3.5, 3.5, 3.5, 3.6, 3.6, 3.7, 3.7, Infinity], \"buldge\": [1.0, 1.0, 1.0, 1.1, 2.0, 2.0, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9, 3.0, 3.1, 3.1, 3.2, 3.3, 3.3, 3.4, 3.4, 3.5, 3.5, 3.5, 3.6, 3.6, 3.7, 3.7, Infinity], \"a\": 6.0, \"b\": -1.0, \"c\": 0.1, \"stacking_cols\": [\"CG\", \"AU\", \"GU\"], \"stacking_score\": [[-3.0, -2.0, -2.0], [-2.0, -0.5, -0.5], [-2.0, -0.5, -0.5]] } In [4]: model . load_params ( \"params.json\" ) In [5]: model . params () | parameter |value | --------------------- |a | 6.0| |b | -1.0| |c | 0.1| |inf |1000.0| |type | RNA| |Watson_Crick| 1| |Wobble | 1| In [6]: model . stacking_cols Out[6]: array(['CG', 'AU', 'GU'], dtype=' In [7]: model . stacking_score Out[7]: array([[-3.e+00, -2.e+00, -2.e+00, 1.e+03], [-2.e+00, -5.e-01, -5.e-01, 1.e+03], [-2.e+00, -5.e-01, -5.e-01, 1.e+03], [ 1.e+03, 1.e+03, 1.e+03, 1.e+03]]) In [8]: # サンプル配列 sequence = readMonoSeq ( path = \"sample_seq4.fasta\" ) In [9]: print ( sequence ) ['CCACCUCGCCGCGAAGAUUGGAUGUAAUGUUCACUUAAGCCUAGGCGUUCGCAAAGAAAUACCUAUGGUAAUUUGACUAGCGGUAACAAUGAAAGAAAAGGUGUAGGCGAGGUGGG'] In [10]: # 最大ペアの配列 model . predict ( sequence [ 0 ]) Zuker Algorithm Score: -37.5 ================================================================= seq: CCACCUCGCCGCGAAGAUUGGAUGUAAUGUUCACUUAAGCCUAGGCGUUCGCAAAGAAAU : ((((((((((((((((..((((((...)))))))))..((((....((((((..(((((( seq: ACCUAUGGUAAUUUGACUAGCGGUAACAAUGAAAGAAAAGGUGUAGGCGAGGUGGG : (((...))))))))..)).))))..))...........)))))).)))))))))). ================================================================= In [11]: model . W Out[11]: array([[ 0. , 0. , 0. , ..., -34.5, -37.5, -37.5], [ 0. , 0. , 0. , ..., -34.5, -34.5, -34.5], [ 0. , 0. , 0. , ..., -32.5, -32.5, -32.5], ..., [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ]]) In [12]: model . M Out[12]: array([[1000. , 999. , 999. , ..., -35.4, -38.5, -38.4], [1000. , 1000. , 999. , ..., -35.5, -35.4, -35.3], [1000. , 1000. , 1000. , ..., -33.4, -33.3, -33.2], ..., [1000. , 1000. , 1000. , ..., 1000. , 999. , 999. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 999. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ]]) In [13]: model . V Out[13]: array([[1000. , 1000. , 1000. , ..., -31.5, -37.5, -34.5], [1000. , 1000. , 1000. , ..., -34.5, -31.5, -31.5], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], ..., [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ]]) if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-9.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-9.html"},{"title":"生物物理学 第3回","text":"講師： 樋口秀男 タンパク質の構造と安定性 タンパク質の定義 特定のアミノ酸（20種類）が重合した重合体である。 特定の立体構造をとる。 （これがないと ポリペプチド ） 機能 説明 分子認識 ミオグロビンは酸素を結合。抗体は抗原と結合。 触媒（酵素） 化学反応の反応速度は \\(10&#94;8\\) ~ \\(10&#94;{17}\\) 倍にも加速される。 制御 基質の結合や環境の変化に伴い構造を変化し、タンパク質の反応を制御する。 エネルギー変換 光を電位に換え、ATP分解を力に換える。 構造形成・維持 タンパク質重合体は細胞や細胞内器官の構造を支える。 タンパク質を構成するアミノ酸 d-グリセルアルデヒドの立体配置を基準として、この立体配置を崩さずにできる化合物をD-体、その鏡像異性体がL-体。 ※ タンパク質はL体 構造 名前 略（三文字） 略（一文字） アラニン Ala A アルギニン Arg R アスパラギン Asn N アスパラギン酸 Asp D システイン Cys C グルタミン酸 Glu E グルタミン Gln Q グリシン Gly G ヒスチジン His H イソロイシン Ile I ロイシン Leu L リシン Lys K メチオニン Met M フェニルアラニン Phe F プロリン Pro P セリン Ser S トレオニン Thr T トリプトファン Trp W チロシン Tyr Y バリン Val V # 上記の表は以下のコードを応用して作成した。 url = \"https://ja.wikipedia.org/wiki/タンパク質を構成するアミノ酸\" soup = BeautifulSoup ( requests . get ( url ) . content , 'lxml' ) for li in soup . findAll ( \"li\" , { \"class\" : \"gallerybox\" }): text = str ( li ) . replace ( ' \\n ' , '' ) src = re . findall ( r '<img.*src=\"(.+?)\".*>' , text )[ 0 ] name , l3 , l1 = re . findall ( r '<p>.*title=\"(.+?)\".*<br/>\\((.+?)\\xa0\\/\\xa0(.+?)\\)</p>' , text )[ 0 ] 理論的構造決定法 アミノ酸配列→量子力学→タンパク質の構造とエネルギー状態を決定 シュレディンガー方程式は水素原子のみ解析的に解くことができ、それ以外は近似を行う必要がある。 現在、高精度に計算（第一原理分子動力学法）できるのは1つの構造に対して100原子程度である。 水分子を考慮しなければ、タンパク質の構造や電子軌道を精度よく求めることはできない。 アミノ酸がポリペプチド結合した重合体から機能を持つ立体構造を創り構造を維持するためには、 立体構造が熱力学的に安定でなければならない。 → Gibbs自由エネルギー \\(G\\) を見る。 準安定なのは、 \\(G\\) が極小の時。 最も安定なのは、 \\(G\\) が最小の時。 まとめ 生体の機能を主に担っているのは、タンパク質である。（RNAも機能に重要である。） タンパク質は分子認識・触媒・制御・エネルギー変換・構造形成維持などの機能を有している。 アミノ酸配列から計算によってタンパク質構造を決定することに成功していない。（部分構造はできている。） 酵素機能を行うとき、酵素の多くの場所が構造変化を行う。 第7回目の講義(11/6)の小テスト 指定課題： 第1,2,3回の講義の中で、最も興味のある事柄について300~500字でまとめる。 この事柄と関連する内容を調べるなどして、自分の意見を300~500字で述べる。 図や式を使いわかりやすく説明すること。図や式は文字数に含めない。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html"},{"title":"領域分割","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt import matplotlib.patches as patches # 円を描画 領域分割 色によるクラス分け（画像のみ） k-means法 mean-shift法 色によるクラス分け（画像のみ） 例えば、画素(RGB)や位置(x,y)の似たものをグループ分けする。 二値分類(FG/BG分類)で有名なのが クロマキー （ 青色・緑色 背景） k-means法 予めクラス数 $k$ を指定してクラスタリング。 $k$ 個の代表点をランダムにサンプリング（$k$ 個をデータの中からとってきても良いし、完全にランダムでばらまいても良い。） 全てのデータ点から一番近い代表点を $1$ つ探す。 $k$ 個のグループの重心を計算し、それを新たな代表点とする。 2,3を繰り返す。 In [2]: from kerasy.ML.KMeans import KMeans In [3]: def decomposeImg ( path , K ): imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== KMeans === x = rgb_img . reshape ( - 1 , 3 ) model = KMeans ( K = K , random_state = 0 ) model . fit ( x ) cls , mu = model . predict ( x ) mu = mu . astype ( int ) for k in range ( K ): x [ cls == k ] = mu [ k ] # KMeansed Image. ax_K = fig . add_subplot ( 1 , 2 , 2 ) ax_K . imshow ( x . reshape ( img_shape )) ax_K . set_title ( f \"K= {K} \" ), ax_K . set_xticks ([]), ax_K . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No.{i+1:<0{len(str(K))}}, rgb=({','.join(mu[k].astype(int).astype(str))})\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () In [4]: decomposeImg ( path = \"lenna.png\" , K = 8 ) mean-shift法 画像領域の分割や対象画像の追跡に用いられる手法。 $d$ 次元の特徴量（ex. $\\mathrm{R,G,B},x,y$）を持った $N$ 個のデータ点 $\\mathbf{x}_i$ が分布しているときに、この点群 $\\mathbf{x}_i$ を標本点として得られるような確率密度関数 $f(\\mathbf{x})$ を考え、その標本点から確率密度関数 $f(\\mathbf{x})$ の極大点を探索する手法。 点群が集中している場所は確率密度関数 $f(\\mathbf{x})$ の値が高く、まばらな場所は低くなる。 ある任意の観測点 $\\mathbf{y}_j$ から半径 $h$ の超球を考え、その範囲にある点群 $\\mathbf{x}_i$ の平均 $\\mathbf{x}_c$ を計算し、その位置に観測点 $\\mathbf{y}_{j+1}$ を移動する。 この操作を繰り返すと観測点は最大勾配の方向に移動し、やがて極大点に収束する。 このように、 「近傍の点群の平均(mean)位置に移動(shift)を繰り返し、極大点を求める方法」 から ミーンシフト法(mean-shift) と呼ばれる。 In [5]: fig , ax = plt . subplots ( figsize = ( 6 , 6 )) # Circle r = 0.7 c = patches . Circle ( xy = ( 0 , 0 ), radius = r , ec = 'black' , fill = False ) ax . add_patch ( c ) # Sample Data X , Y = np . random . RandomState ( 123 ) . uniform ( low =- 0.3 , high = 1 , size = ( 2 , 50 )) cls = np . sqrt ( X ** 2 + Y ** 2 ) < r ax . scatter ( X , Y , c = cls , cmap = \"Set1_r\" , alpha = 0.7 ) # Center ax . scatter ( 0 , 0 , color = \"black\" , s = 100 ) ax . text ( 0.05 , - 0.05 , \"$\\mathbf {y} _ {j} $\" , fontsize = 12 ) # Mean mux , muy = np . mean ( X [ cls ]), np . mean ( Y [ cls ]) ax . scatter ( mux , muy , color = \"black\" , marker = '*' , s = 100 ) ax . text ( mux + 0.05 , muy , \"$\\mathbf {x} _c(=\\mathbf {y} _{j+1})$\" , fontsize = 12 ) # Arrow ax . annotate ( '' , xy = ( mux , muy ), xytext = ( 0 , 0 ), arrowprops = dict ( width = 2 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'blue' , edgecolor = 'blue' ) ) # Radius ax . plot (( 0 , 0 ),( 0 , - r ), color = \"black\" ) ax . text ( 0.05 , - r / 2 , \"r\" , fontsize = 12 ) ax . set_xlim ( - 1 , 1 ) ax . set_ylim ( - 1 , 1 ) plt . show () カーネル密度関数を用いた確率密度関数の推定 $d$ 次元空間内の $N$ 個の点群 $\\mathbf{x}_i$ を考える。この点群をある確率分布に従う標本と考えたとき、$d$ 次元空間内の任意の点 $\\mathbf{x}$ における確率密度関数 $f(\\mathbf{x})$ は、以下の方法で推定される。 $$f(\\mathbf{x}) = \\frac{c_{kd}}{Nh&#94;{d}}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)$$ $c_{hd}$ は、確率密度関数 $f(\\mathbf{x})$ 全体の積分を $1$ にするための正規化係数。 $k(t)$ は、カーネル関数 $K(t)$ の プロファイル で、$K(t)=k(|t|&#94;2)$ 以下の２つのカーネルが代表的である。 ガウシアンカーネル(Gaussian) エパネックニコフカーネル(Epanechnikov) $$K(t) = \\exp\\left(-\\frac{\\mid t\\mid&#94;2}{2}\\right)$$ $$K(t) = \\begin{cases}1- \\mid t\\mid&#94;2 & (\\mid t\\mid\\leq1)\\\\0 & (\\text{otherwise})\\end{cases}$$ 確率密度関数の勾配 勾配法(gradient method) を用いて極大点を逐次的に求めるために、確率密度関数の勾配 $\\nabla f(\\mathbf{x})$ を求める。 $$ \\begin{aligned} \\nabla f(\\mathbf{x}) &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;Nk'\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)\\left(\\mathbf{x}-\\mathbf{x}_i\\right)\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;N\\left(g_i\\mathbf{x}_i-g_i\\mathbf{x}\\right), \\quad g(t) = -k'(t),g'(t)=g\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|\\right)&#94;2\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\} \\end{aligned} $$ 項 説明 $$\\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}$$ ガウシアンカーネルやエパネックニコフカーネルを用いた場合、正になる。 $$\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\}$$ ミーンシフト と呼ばれる項で、観測点 $\\mathbf{x}$ の近傍のデータ点群 $\\mathbf{x}_i$ の加重平均位置と $\\mathbf{x}$ 自身の差分ベクトルを示す。 勾配法を用いた極大点探索（ミーンシフト法） 初期化：$\\mathbf{y}_0\\leftarrow\\mathbf{x}$ 更新（ミーンシフト） $$\\mathbf{y}_{j+1}\\leftarrow \\mathbf{y}_j + \\left(\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{y}_j\\right) = \\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}$$ $|\\mathbf{y}_{j+1}-\\mathbf{y}_j|<\\text{threshold}$ となるまで2を繰り返す。 収束した $\\mathbf{y}_{j+1}$ を極大点として出力する。 ※ 一般的な勾配法では、更新式 $\\mathbf{y}_{j+1}\\rightarrow\\mathbf{y}_i + \\alpha\\nabla f$ のステップ数 $\\alpha$ を与える必要があるが、ミーンシフト法では ベクトルの大きさは自動的に計算される ので、$\\alpha$ を与える必要がない（らしい…）。 ミーンシフト法を用いたクラスタリングへの応用 $d$ 次元空間中の $N$ 個の点群 $\\mathbf{x}_i$ が与えられた時に、密に分布する点群をクラスタとして分割する。 各点にミーンシフト法を適用し、収束位置 $\\mathbf{x}_i&#94;c$ を計算する。 任意の2個の点 $\\mathbf{x}_i,\\mathbf{x}_j$ について、その収束位置が閾値以下なら（$|\\mathbf{x}_i-\\mathbf{x}_j|<\\text{threshold}$）、この2点を同じ極大点として同じクラスタに入れる。 1,2より、全ての点群 $\\mathbf{x}_i$ を 同じ収束位置（極大点）に属するものごとにクラスタに識別する。 全ての点 $\\mathbf{x}_i$ でこの処理を行わなければならないが、並行化できる。 k-means手法とは異なり、クラスタの数を予め指定する必要がない。 ミーンシフト法を用いたカラー画像の領域分割 カラー画像の $N$ 個の各画素の位置 $\\mathbf{x}_i$ とその画素値 $\\mathbf{v}_i=\\left(R_i,G_i,B_i\\right)$ とし、画素位置-画素値を結合した5次元空間内の点 $\\mathbf{z}_i=(\\mathbf{x}_i,\\mathbf{v}_i)$ を考える。 「距離および色が近い画素が5次元空間内でクラスタを形成している」 とみて、ミーンシフト法で各画素をクラスタリングする。 画素位置に関するバンド幅 $h_s$、画素値に関するバンド幅 $h_r$ を与え、全ての $z_i$ にミーンシフトを行い、収束位置 $\\mathbf{z}&#94;c=(\\mathbf{x}&#94;c,\\mathbf{v}&#94;c)$ を計算する。 $\\mathbf{x}_i$ の画素値を、収束位置の画素の値 $(R&#94;c,G&#94;c,B&#94;c)$ に置き換えることによって、画像の平滑化ができる。 ミーンシフトは、以下の通り計算する。 $$f(\\mathbf{x}) = \\frac{c}{Nh_s&#94;2h_r&#94;3}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}&#94;s-\\mathbf{x}&#94;s_i}{h_s}\\right|&#94;2\\right)k\\left(\\left|\\frac{\\mathbf{x}&#94;r-\\mathbf{x}&#94;r_i}{h_r}\\right|&#94;2\\right)$$ したがって、以下のとおりに位置を更新する。 $$\\mathbf{y}&#94;{s}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;s\\mathbf{x}_i&#94;s}{\\sum_{i=1}&#94;Ng_i&#94;s},\\quad\\mathbf{y}&#94;{r}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;r\\mathbf{x}_i&#94;r}{\\sum_{i=1}&#94;Ng_i&#94;r}$$ $(h_s,h_r)$ のパラメータを大きくすると、より大きな領域に同色が統合され、大まかに分割される。 In [6]: from sklearn.cluster import MeanShift In [7]: import time s = time . time () imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) path = \"lenna.png\" bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== MeanShift === x = rgb_img . reshape ( - 1 , 3 ) model = MeanShift () model . fit ( x ) cls = model . predict ( x ) mu = model . cluster_centers_ . astype ( int ) K = max ( cls ) + 1 for k in range ( K ): x [ cls == k ] = mu [ k ] # MeanShifted Image. ax_Mean = fig . add_subplot ( 1 , 2 , 2 ) ax_Mean . imshow ( x . reshape ( img_shape )) ax_Mean . set_title ( f \"n_cluster= {K} \" ), ax_Mean . set_xticks ([]), ax_Mean . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No.{i+1:<0{len(str(K))}}, rgb=({','.join(mu[k].astype(int).astype(str))})\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () e = time . time () print ( f \"Processing time: {int((e-s)//60):>02}m {(e-s)%60:.3f}s\" ) plt . show () Processing time: 31m 13.287s In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html"},{"title":"領域処理のための特徴量","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 領域の特徴量 フーリエ変換 ガボールフィルタ(Gabor Filter) 同時生起確率 In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt （２次元）フーリエ変換 画像は、フーリエ変換によって周波数領域における別の形で表現される。 フーリエ変換の結果は、画像に含まれるそれぞれの周波数成分を表している。 フーリエ変換後の各周波数成分の大きさを成分ごとに変えることにより、元の画像の性質を変えることができる。 （周波数フィルタリング(frequency filtering)） ローパスフィルタ(lowpass fileter) ：画像に含まれる空間周波数成分のうち、低周波数成分は残し、高周波数成分は除去するようなフィルタ。 ハイパスフィルタ(highpass filter) ：上の逆。高周波数成分は残し、低周波数成分を除去するようなフィルタ。 バンドパスフィルタ(bandpass filter) ：ある中間的な周波数の範囲を残すようなフィルタ。 高域強調フィルタ(high-emphasis filter) ：画像の低周波数成分はそのまま保ちつつ、高周波数成分を強調するフィルタ。 $1$ 次元フーリエ変換 簡単のため、まずは一次元フーリエ変換をみる。 名前 数式 説明 フーリエ変換 $$F(\\omega) = \\int_{-\\infty}&#94;{\\infty}f(t)e&#94;{-i\\omega t}dt$$ 数直線上の表現 （空間領域） から周波数による表現 （周波数領域） への変換 逆フーリエ変換 $$f(x) = \\int_{-\\infty}&#94;{\\infty}F(\\omega)e&#94;{i\\omega x}d\\omega$$ 周波数領域にある関数を元の空間領域に戻す変換 実装 二つの正弦波を重ねた波から、それぞれの成分を取り出すことができるか確かめる。なお、ここでは numpy.fft.fft を利用しています。 これは、 高速フーリエ変換(Fast Fourier Transform) と呼ばれる、 高速に「離散フーリエ変換」を行うアルゴリズム を実装したものです。 In [2]: N = 10000 dt = 0.01 time = np . arange ( 0 , N * dt , dt ) freq = np . linspace ( 0 , 1.0 / dt , N ) In [3]: def sin ( A , f , p ): \"\"\" @param A: Amplitude @param f: Frequency[Hz] @param p: phase \"\"\" func = lambda t : A * np . sin ( 2 * np . pi * f * t + p1 ) return func In [4]: # parameters f1 , f2 = 5 , 8 # frequency[Hz] A1 , A2 = 5 , 3 # Amplitude p1 , p2 = 0 , 1 / 2 * np . pi # phase In [5]: y1 = sin ( A1 , f1 , p1 )( time ) y2 = sin ( A2 , f2 , p2 )( time ) y = y1 + y2 # superposition In [6]: # Computes the discrete Fourier transform (DFT) of a sequence yf = np . fft . fft ( y ) / ( N / 2 ) # Fast Fourier transform. In [7]: fig = plt . figure ( figsize = ( 8 , 4 )) ax1 = fig . add_subplot ( 2 , 1 , 1 ) ax1 . set_ylabel ( \"amplitude\" ) ax1 . set_xlabel ( \"time\" ) ax1 . set_xlim ( 0 , 1 ) ax1 . plot ( time , y , label = \"y(y1+y2)\" , color = \"blue\" ) ax1 . plot ( time , y1 , label = f \"y1(A= {A1} ,f= {f1} )\" , alpha = 0.3 , color = \"green\" ) ax1 . plot ( time , y2 , label = f \"y2(A= {A2} ,f= {f2} )\" , alpha = 0.3 , color = \"red\" ) ax1 . axhline ( 0 , alpha = 0.3 , color = \"black\" ) ax1 . legend () ax2 = fig . add_subplot ( 2 , 1 , 2 ) ax2 . set_ylabel ( \"amplitude\" ) ax2 . set_xlabel ( \"frequency\" ) ax2 . set_xlim ( 0 , 10 ) ax2 . plot ( freq , abs ( yf ), color = \"blue\" ) plt . tight_layout () plt . show () 見事に、二つの周波数成分を取り出すことができました。 $2$ 次元フーリエ変換 ※ 一般に画像は2次元空間で定義されたある関数 $f(x,y)$ として表現することができる！ 名前 数式 フーリエ変換 $$F(u,v) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x,y)\\exp\\left\\{-j2\\pi\\left(ux+vy\\right)\\right\\}dxdy$$ 逆フーリエ変換 $$f(x,y) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}F(u,v)\\exp\\left\\{j2\\pi\\left(ux+vy\\right)\\right\\}dudv$$ ここで、以下の値に注目することがよくある。 名前 数式 説明 振幅スペクトル(amplitude spectrum) $$\\mid F(u,v)\\mid = \\sqrt{\\mathrm{Re}\\left\\{F(u,v)\\right\\}&#94;2 + \\mathrm{Im}\\left\\{F(u,v)\\right\\}&#94;2}$$ 絶対値 位相スペクトル(phase spectrum) $$\\arg\\left\\{F(u,v)\\right\\} = \\tan&#94;{-1}\\frac{\\mathrm{Im}\\left\\{F(u,v)\\right\\}}{\\mathrm{Re}\\left\\{F(u,v)\\right\\}}$$ 偏角 パワースペクトル(power spectrum) $$\\mid F(u,v)\\mid&#94;2$$ In [8]: img = cv2 . imread ( 'lenna.png' , 0 ) f = np . fft . fft2 ( img ) fshift = np . fft . fftshift ( f ) magnitude_spectrum = 20 * np . log ( np . abs ( fshift )) plt . subplot ( 121 ), plt . imshow ( img , cmap = 'gray' ) plt . title ( 'Input Image' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'x' ), plt . ylabel ( 'y' ) plt . subplot ( 122 ), plt . imshow ( magnitude_spectrum , cmap = 'gray' ) plt . title ( 'Magnitude Spectrum' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'u' ), plt . ylabel ( 'v' ) plt . show () ガボールフィルタ(Gabor Filter) 正弦波とガウス関数の積で表される。（例：2次元ガボールフィルタ） $$g(x,y,\\lambda,\\phi) = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\exp\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 実数部： $$\\mathrm{Re}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\cos\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 虚数部： $$\\mathrm{Im}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\sin\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ フーリエ変換では、所望の周波数成分が領域のどこにあるのかわからないのに対し、ガボールフィルタは、 「領域のどの位置にどの方向の周波数が、どの強度であるか」 を知ることができる。 パラメータを操作して様々な方向と強度を持つフィルタ （フィルタバンク(filter bank)） を多数準備 し、特徴抽出を行う。また、ここで抽出された特徴量群は texton と呼ばれる。 入力された画像に対してガボールフィルタを畳み込んで（たたみ込み＝二次元の内積＝類似度を反映）、特徴量 $G(x,y,\\lambda,\\phi)$ を求める式は以下となる。 $$G(x,y,\\lambda,\\phi) = \\sum_u\\sum_vI(x,y)\\ast g(x-u, y-v, \\lambda, \\phi)$$ OpenCVの cv2.getGaborKerne を用いることで簡単にガボールフィルタを生成することができる、 引数 説明 ksize Size of the filter returned. sigma Standard deviation of the gaussian envelope. theta Orientation of the normal to the parallel stripes of a Gabor function. lambd Wavelength of the sinusoidal factor. gamma Spatial aspect ratio. psi Phase offset. In [9]: default_gabor = { \"ksize\" : ( 50 , 50 ), \"sigma\" : 4 , \"theta\" : 0 , \"lambd\" : 10 , \"gamma\" : 0.5 , \"psi\" : 0 , } In [10]: gabor = cv2 . getGaborKernel ( ** default_gabor ) plt . imshow ( gabor , cmap = \"gray\" ) plt . title ( \"default\" ) plt . show () In [11]: def argsGaborRelation ( key , vals ): global default_gabor defaul_val = default_gabor [ key ] N = len ( vals ) n_col = 4 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i , val in enumerate ( vals ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) ax . imshow ( gabor , cmap = \"gray\" ) ax . set_title ( f \" {key} = {val} \" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [12]: argsGaborRelation ( key = \"ksize\" , vals = [( 30 , 30 ),( 20 , 40 ),( 40 , 20 ),( 50 , 50 )]) In [13]: argsGaborRelation ( key = \"sigma\" , vals = [ x for x in range ( 8 )]) In [14]: argsGaborRelation ( key = \"theta\" , vals = [ np . radians ( x ) for x in range ( 0 , 180 , 45 )]) In [15]: argsGaborRelation ( key = \"gamma\" , vals = [ x for x in range ( 4 )]) In [16]: argsGaborRelation ( key = \"psi\" , vals = [ np . radians ( x ) for x in range ( 0 , 360 , 45 )]) In [17]: img = cv2 . imread ( 'lenna.png' , 0 ) color_img = cv2 . imread ( 'lenna.png' ) In [18]: def argsGaborSuperposition ( key , vals ): global default_gabor , img defaul_val = default_gabor [ key ] N = len ( vals ) * 2 n_col = 8 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) dests = 0 for i , val in enumerate ( vals ): default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) dest = cv2 . filter2D ( img , cv2 . CV_32F , gabor ) dests += dest ax_dst = fig . add_subplot ( n_row , n_col , 2 * i + 1 ) ax_dst . imshow ( np . power ( dest , 2 ), cmap = \"gray\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) ax_gab = fig . add_subplot ( n_row , n_col , 2 * i + 2 ) ax_gab . imshow ( gabor , cmap = \"gray\" ), ax_gab . set_xticks ([]), ax_gab . set_yticks ([]) # Superposition fig = plt . figure ( figsize = ( 8 , 16 )) ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( cv2 . cvtColor ( color_img , cv2 . COLOR_BGR2RGB )) ax_org . set_title ( \"original image\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) ax_dst = fig . add_subplot ( 1 , 2 , 2 ) ax_dst . imshow ( dests , cmap = \"gray\" ) ax_dst . set_title ( f \"Superposition of dst (key= {key} )\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [19]: argsGaborSuperposition ( key = \"theta\" , vals = [ np . radians ( x ) for x in np . linspace ( 0 , 180 , 8 )]) ※ 入力画像の８分割した全ての方向のエッジを重ね合わせると、元の画像をかなり高い精度で復元していることがわかる。 同時生起確率 テクスチャの統計的特徴量を求める。 離れた２つの場所にある画素対の値から、画素値の 一様性 ・ 方向性 ・ コントラスト などの性質を表す特徴量を求める。 ある画素 $i$ と、$i$ から離れた位置にある画素 $j$ の画素対を考え、画素 $i$ と画素 $j$ の相対的な位置を $\\delta=\\langle d,\\theta\\rangle$ とする。 それぞれの画素値を $L_i,L_j$ とし、画素値の対 $(L_i,L_j)$ が生じる出現頻度で、ある同時生起行列 $\\mathbf{H}_{\\delta}(L_i,L_j)$ を考える。ここで、出現頻度の総数で $\\mathbf{H}_{\\delta}(L_1,L_2)$ を正規化し、確率に変換した同時生起行列を $\\mathbf{P}_{\\delta}(L_i,L_j)$ とする。 確率に変換した同時生起行列を用いて計算する主な特徴量には次の $7$ 種類がある。（ここで、画素値のレベル数は $L$ である。）他にも様々な統計量を計算できるが、テクスチャの物理的な意味と直接には結びつかない数値もある。 $$ \\begin{aligned} \\mathrm{ENR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left\\{P_{\\delta}(L_i,L_j)\\right\\}&#94;2 & (\\text{energy})\\\\ \\mathrm{CNT} &= \\sum_{k=0}&#94;{L-1}k&#94;2P_{x-y}(k) & (\\text{contrast})\\\\ \\mathrm{CRR} &= \\frac{\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}L_iL_jP_{\\delta}(L_i,L_j) - \\mu_x\\mu_y}{\\delta_x\\delta_y} & (\\text{correlation})\\\\ \\mathrm{VAR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left(L_i-\\mu_x\\right)&#94;2P_{\\delta}(L_i,L_j) & (\\text{variance})\\\\ \\mathrm{EPY} &= -\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\log\\left\\{P_{\\delta}(L_i,L_j)\\right\\} & (\\text{entropy})\\\\ \\mathrm{SEP} &= -\\sum_{k=0}&#94;{2L-2}P_{x+y}(k)\\log\\left\\{P_{x+y}(k)\\right\\} & (\\text{sum entropy})\\\\ \\mathrm{IDM} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\frac{1}{1+(L_i-L_j)&#94;2}P_{\\delta}(L_i,L_j) & (\\text{inverse difference moment})\\\\ \\end{aligned} $$ ただし、 $$ \\mu_x = \\sum_{L_i=0}&#94;{L-1}L_iP_x(L_i), \\quad \\mu_y = \\sum_{L_j=0}&#94;{L-1}L_jP_y(L_j)\\\\ \\delta_x&#94;2 = \\sum_{L_i=0}&#94;{L-1}(L_i-\\mu_x)&#94;2P_x(L_i), \\quad \\delta_y&#94;2 = \\sum_{L_j=0}&#94;{L-1}(L_j-\\mu_y)&#94;2P_y(L_j)\\\\ P_x(L_i) = \\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j), \\quad P_y(L_j) = \\sum_{L_i=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\\\ P_{x-y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i-L_j|= k\\\\ P_{x+y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i+L_j|= k\\\\ $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html"},{"title":"主成分分析(PCA)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 主成分分析(PCA) 次元削減・非可逆データ圧縮・特徴抽出・データの可視化などに使われる。 主部分空間(principal subspace) と呼ばれる低次元の線形空間の上への、データ点の直交射影として、以下の2つの定義方法がある。 「射影されたデータの分散が最大化されるような直交射影」 として定義。→ 分散最大化による定式化 「データ点と射影した点の間の2乗距離の平均値で定義される 射影コスト関数 の期待値を最小化するような線形射影」 として定義。（要はデータ点からの距離を最小化）→ 誤差最小化による定式化 Pythonによる実装 分散最大化による定式化 次元 $D$ のユークリッド空間内のデータ集合 $\\{\\mathbf{x}_n\\}(n=1,\\ldots,N)$ を考える。ここで、 「射影されたデータ点の分散を最大化しながら、データを次元 $M ことを考える。 1次元空間の上への射影（$M=1$） この空間の方向を $D$ 次元ベクトル $\\mathbf{u}_1$ として表す。ここで、興味があるのは $\\mathbf{u}_1$ の方向だけであるので、$\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ としても一般性を失わない。 したがって、各データ点 $\\mathbf{x}_n$ は スカラー値 $\\mathbf{u}_1&#94;T\\mathbf{x}_n$ の上に射影される。ここで、射影されたデータの平均・分散は以下のようになる。 統計量 平均値 $$\\mathbf{u}_1&#94;T\\bar{\\mathbf{x}}\\qquad\\bar{\\mathbf{x}} = \\frac{1}{N}\\sum_{n=1}&#94;N\\mathbf{x}_n\\qquad (12.1)$$ 分散 $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1\\qquad\\mathbf{S} = \\frac{1}{N}\\sum_{n=1}&#94;N\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\qquad (12.3)$$ ここで、 射影されたデータの分散を、$\\mathbf{u}_1$ に関して最大化 することを考える。 制約条件 $\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ をラグランジュ乗数 $\\lambda_1$ を利用して導入して $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1 + \\lambda_1\\left(1-\\mathbf{u}&#94;T_1\\mathbf{u}_1\\right)\\qquad (12.4)$$ を最大化すれば良い。$\\mathbf{u}_1$ に関する微分を $0$ とおくことにより、停留条件は $$\\mathbf{Su}_1 = \\lambda_1\\mathbf{u}_1\\qquad (12.5)$$ となることがわかる。これは、 $\\mathbf{u}_1$ が $\\mathbf{S}$ の固有ベクトルであること を示している。左から $\\mathbf{u}&#94;T_1$ をかけると、 $$\\text{Variance} = \\mathbf{u}&#94;T_1\\mathbf{Su}_1 = \\lambda_1 \\qquad (12.6)$$ となる。よって、 分散は $\\mathbf{u}_1$ を、最大固有値 $\\lambda_1$ に属する固有ベクトルに選んだ時に最大になる ことがわかる。 $M$ 次元空間の上への射影（一般解） 演習12.1 帰納法を用いて、 射影されたデータの分散を最大化するようなM次元部分空間の上への線形写像が、データ共分散行列Sの上位M個の固有値に属するM本の固有ベクトルによって定義される ことを示す。 仮定 $M$ に対して上記が成り立つ。 データ空間に対する新しい方向ベクトル $\\mathbf{u}_{M+1}$ は、次を満たす。 $\\mathbf{u}_{M+1}$ は、$\\mathbf{u}_1,\\ldots,\\mathbf{u}_M$ と直交する。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0$） 単位長に規格化されている。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{M+1}=1$） 制約条件を踏まえると、 $$L = \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\lambda_{M+1}\\left(1-\\mathbf{u}&#94;T_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_j$$ 両辺を $\\mathbf{u}_{M+1}$ で微分すると、 $$0 = \\frac{\\partial L}{\\partial \\mathbf{u}_{M+1}} = 2\\left(\\mathbf{Su}_{M+1} - \\lambda_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_j\\cdots(\\ast)$$ これに左から $\\mathbf{u}&#94;T_{j}$ をかけると、 $$0 = \\lambda&#94;{\\prime}_j\\quad(\\because \\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0)$$ となるので、これを $(\\ast)$ に代入して、 $$\\mathbf{Su}_{M+1} = \\lambda_{M+1}\\mathbf{u}_{M+1}$$ また、この時分散は $$\\begin{aligned} \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i &= \\sum_{i=1}&#94;{M}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\mathbf{u}&#94;T_{M+1}\\mathbf{Su}_{M+1}\\\\ &= \\sum_{i=1}&#94;{M}\\lambda_i + \\lambda_{M+1} \\end{aligned}$$ ここで、仮定より $\\lambda_i$ は、データ共分散行列 $\\mathbf{S}$ の上位 $M$ 個の固有値なので、この分散を最大する $\\lambda_{M+1}$ は、$M+1$ 番目に大きい固有値となる。 誤差最小化による定式化 続いて、射影誤差の最小化に基づいた主成分分析の定式化を考える。 まず、$D$ 次元の基底ベクトル $\\{\\mathbf{u}_i\\}$ から成る完全正規直交系を導入する。（$\\mathbf{u}_i&#94;T\\mathbf{u}_i = \\delta_{ij}$） すると、各データ点はこれらの基底ベクトルの線形結合なので、以下の形で表すことができる。 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\alpha_{ni}\\mathbf{u}_i\\qquad (12.8)$$ なお、ここで式 $(12.8)$ は、各データ点 $\\{\\mathbf{x}_n\\}$ を、もともとの座標系から $\\{\\mathbf{u}_i\\}$ で表される新しい座標系への回転を表していると解釈できる （もともと $D$ 個の成分 $\\{x_{n1},\\ldots,x_{nD}\\}$ が、等価な集合 $\\{a_{n1},\\ldots,a_{nD}\\}$ に置き換えられている） 。 上式と $\\mathbf{u}_j$ との内積を取り、正規直交性を使うと、$\\alpha_{nj} = \\mathbf{x}_n&#94;T\\mathbf{u}_j$ を得るので、 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right)\\mathbf{u}_i\\qquad (12.9)$$ $D$ 次元から $M$ 次元への近似 ここで、$M （$M$ 次元空間で完全に $\\mathbf{x}_n$ を表現するのは一般に不可能なので、近似する。） したがって、各データ点を $$\\tilde{\\mathbf{x}}_n = \\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\qquad (12.10)$$ $\\{z_{ni}\\}$ は特定のデータ点に依存。 $\\{b_i\\}$ は全てのデータ点に共通な定数。 と近似して表す。つまり、 $\\{\\mathbf{u}_i\\}$ と $\\{z_{ni}\\}$ と $\\{b_i\\}$ を調整することで、次元が減ることによってもたらされる歪みを最小化すること がここでの目的となる。 近似による歪み尺度 $J$ 近似による歪みの尺度として、元々のデータ点 $\\mathbf{x}_n$ とその近似 $\\tilde{\\mathbf{x}}_n$ の間の2乗距離をデータ集合に渡って平均したものを採用する。 $$\\begin{aligned} J &= \\frac{1}{N}\\sum_{n=1}&#94;N\\|\\mathbf{x}_n-\\tilde{\\mathbf{x}}_n\\|&#94;2\\qquad (12.11)\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\left\\|\\mathbf{x}_n-\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)\\right\\|&#94;2 \\end{aligned}$$ そこで、各変数についての微分を $0$ としてこれを最小化する変数を求める。 $\\{z_{ni}\\}$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial z_{ni}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\left\\|\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\sum_{i=1}&#94;Mz_{ni}&#94;2-2\\sum_{i=1}&#94;Mz_{ni}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=1}&#94;M2\\left\\{z_{ni}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore z_{ni}&#94;{\\star} &= \\mathbf{x}_n&#94;T\\mathbf{u}_i \\qquad (12.12) \\end{aligned} $$ $b_i$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial b_{i}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\left\\|\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\sum_{i=M+1}&#94;Db_{i}&#94;2-2\\sum_{i=M+1}&#94;Db_{i}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D2\\left\\{b_{i}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore b_{i}&#94;{\\star} &= \\bar{\\mathbf{x}}_n&#94;T\\mathbf{u}_i \\qquad (12.13) \\end{aligned} $$ $J$ の整頓 ここで、$(12.10)$ の $z_{ni},b_i$ を置き換えると、 $$ \\begin{aligned} \\mathbf{x}_n-\\tilde{\\mathbf{x}}_n &= \\mathbf{x}_n-\\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=1}&#94;D\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i - \\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=M+1}&#94;D\\left\\{\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\mathbf{u}_i\\right\\}\\mathbf{u}_i\\qquad (12.14) \\end{aligned} $$ と表すことができる。この式から、 $\\tilde{\\mathbf{x}}_n$ から $\\mathbf{x}_n$ への変位を表すベクトルは、主部分空間に直交する空間にあることがわかる。 以上より、歪み尺度 $J$ に対する表現を、純粋に $\\{\\mathbf{u}_i\\}$ の関数として、以下のような形で得られることがわかる。 $$J = \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i-\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\right)&#94;2 = \\sum_{i=M+1}&#94;D\\mathbf{u}&#94;T_i\\mathbf{Su}_i\\qquad (12.15)$$ したがって、あとは$J$ を $\\{\\mathbf{u}_i\\}$ に対して最小化すれば良い。 $M=1,D=2$ の場合 $M=1,D=2$ の場合、 「規格化条件 $\\mathbf{u}&#94;T_2\\mathbf{u}_2 = 1$ の下で、方向 $\\mathbf{u}_2$ を、$J=\\mathbf{u}&#94;T_2\\mathbf{Su}_2$ が最小化されるように選ぶ」 問題となる。 つまり、ラグランジュ乗数を用いて、 $$\\tilde{J} =\\mathbf{u}&#94;T_2\\mathbf{Su}_2 + \\lambda_2\\left(1-\\mathbf{u}&#94;T_2\\mathbf{u}_2\\right)\\qquad (12.16)$$ を最小化する問題となる。 $\\mathbf{u}_i$ についての微分を $0$ とおくと、$\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を得る。つまり、$\\mathbf{u}_2$ は固有値 $\\lambda_2$ に属する $\\mathbf{S}$ の固有ベクトルであるので、 任意の固有ベクトルは、この歪み尺度の停留点を定義することとなる。 $(12.16)$ に $\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を代入すると、$J=\\lambda_2$ となる。ゆえに、 「$\\mathbf{u}_2$ を、2つある固有値のうち小さい方に対応した固有ベクトルを選ぶことにより、$J$ の最小値を得ることができる」 （↔︎ 主部分空間では大きい方 ） 任意の $D$ と任意の $M 任意の $D$ と任意の $M $$\\mathbf{Su}_i = \\lambda_i\\mathbf{u}_i\\qquad (12.17)$$ で与えられる共分散行列の固有ベクトルに選ぶことによって得られる。ここで $i=1,\\ldots,D$ であり、固有ベクトル $\\{\\mathbf{u}_i\\}$ は正規直交するように選ばれる。 また、対応する歪み尺度の値は、 $$J = \\sum_{i=M+1}&#94;D\\lambda_i\\qquad (12.18)$$ のように、 主部分空間に直交する固有ベクトルの固有値についての単なる和 で与えられる。したがって、$J$ の最小値は、小さい順から $D-M$ 個の固有値に対応する固有ベクトルを選ぶことによって得られ、つまり主部分空間を定義する固有ベクトルは大きい順から $M$ 個の固有値に対応する固有ベクトルになる。 実装 Wine Data Set (UCI Machine Learning Repository) のデータを利用し、13次元、178データ、3種類のワインの属性データから、2つの主成分を取って可視化を行います。 また、PCAは自作のモジュール （ kerasy.ML.decomposition.PCA ） を用います。 In [1]: # データ取得。 ! wget https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt --2019-10-07 13:20:45-- https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.228.133 Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.228.133|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 12173 (12K) [text/plain] Saving to: `wine.txt' wine.txt 100%[===================>] 11.89K --.-KB/s in 0s 2019-10-07 13:20:45 (40.4 MB/s) - `wine.txt' saved [12173/12173] In [2]: from kerasy.ML.decomposition import PCA In [3]: import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib.colors import LinearSegmentedColormap In [4]: colors = [( 1 , 0 , 0 ), ( 0 , 0 , 1 ), ( 0 , 1 , 0 )] n_bin = len ( colors ) cmap_name = 'my_list' cm = LinearSegmentedColormap . from_list ( cmap_name , colors , N = n_bin ) In [5]: df = pd . read_csv ( \"wine.txt\" , sep = \" \\t \" , index_col = 0 ) In [6]: df . head ( 3 ) Out[6]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } class Alcohol Malic acid Ash Alcalinity of ash Magnesium Total phenols Flavanoids Nonflavanoid phenols Proanthocyanins Color intensity Hue OD280/OD315 of diluted wines Proline 0 1 14.23 1.71 2.43 15.6 127 2.80 3.06 0.28 2.29 5.64 1.04 3.92 1065 1 1 13.20 1.78 2.14 11.2 100 2.65 2.76 0.26 1.28 4.38 1.05 3.40 1050 2 1 13.16 2.36 2.67 18.6 101 2.80 3.24 0.30 2.81 5.68 1.03 3.17 1185 class カラムがワインの種類を表しているので、この列は主成分分析から取り除きます。 In [7]: cls = df . iloc [:, 0 ] . values In [8]: df_use = df . iloc [:, 1 :] また、 データの標準化 を行います。 In [9]: df_std = df_use . apply ( lambda x : ( x - x . mean ()) / x . std (), axis = 0 ) In [10]: data = np . array ( df_std ) データの準備ができたので、主成分分析を行います。 In [11]: pca = PCA () pca . fit ( data ) features = pca . transform ( data ) In [12]: plt . figure ( figsize = ( 6 , 6 )) plt . scatter ( features [:, 0 ], features [:, 1 ], c = cls , cmap = cm , edgecolors = 'black' ) plt . title ( \"Same fig with slide :)\" ) plt . xlabel ( \"PC1\" ) plt . ylabel ( \"PC2\" ) plt . grid () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html"},{"title":"Nussinov Algorithm","text":"Nussinov Algorithmは、最もシンプルな二次構造予測アルゴリズムである。 「最大いくつの塩基対を作ることができるか」 を調べる。 動的計画法を用いて効率的に調べるために、以下のような Pseudoknot は無視している。様々な重要なRNAが、Pseudoknotの形をとることが確認されているが、相対的にこのような構造をとる確率は低いので、計算の効率を優先し、これらを無視する。 Algorithm ※「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 今回の実装では $j-i-1<3$ の時は、$i,j$ が塩基対を作れないものとしている。 ポイントはRecursionの最後の式で、 「$i$ から $k$ までの部分塩基配列」 と 「$k+1$ から $j$ までの部分塩基配列」 を足し合わせる操作を行う。 （Bifurcation） Initialization: $$\\begin{aligned} \\gamma(i,i)&=0&\\text{ for }i=1\\text{ to }L\\\\ \\gamma(i,i-1)&=0&\\text{ for }i=2\\text{ to }L \\end{aligned}$$ Recursion: $$ \\gamma(i,j) = \\max \\begin{cases} \\gamma(i+1,j)\\\\ \\gamma(i,j-1)\\\\ \\gamma(i+1,j-1)+\\delta(i,j)\\\\ \\max_{i\\leq k\\verb|<|j}\\left[\\gamma(i,k) + \\gamma(k+1,j)\\right] \\end{cases} $$ TraceBack 基本的なアルゴリズムは同じですが、 Bifurcationが起きた際にトレースバックポインターを複数用意する必要があることには注意が必要です。 bp = [] stack = [( 0 , N - 1 )] while ( stack ): i , j = stack . pop ( 0 ) delta = 1 if self . _is_bp ( sequence [ i ], sequence [ j ]) and ( j - i > 3 ) else 0 if ( i >= j ): continue elif gamma [ i + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( i + 1 , j )) elif gamma [ i ][ j - 1 ] == gamma [ i ][ j ]: stack . append (( i , j - 1 )) elif gamma [ i + 1 ][ j - 1 ] + delta == gamma [ i ][ j ]: bp . append (( i , j )); stack . append (( i + 1 , j - 1 )) else : # Bifurcation for k in range ( i , j ): if gamma [ i ][ k ] + gamma [ k + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( k + 1 , j )) stack . append (( i , k )) break 自作のモジュール （kerasy.Bio.structure.Nussinov） を使って実装します。 In [1]: from kerasy.Bio.structure import Nussinov In [2]: model = Nussinov () In [3]: # 以下の形のパラメタファイルを受け取ります。 ! cat params.json { \"type\": \"DNA\", \"Watson_Crick\": true, \"Wobble\": true } In [4]: model . load_params ( \"params.json\" ) In [5]: model . params () | parameter |value| -------------------- |type | DNA| |Watson_Crick| 1| |Wobble | 1| In [6]: # サンプル配列 sequence = \"GCGGAAACGGGGTCA\" In [7]: # 最大ペアの配列 model . predict ( sequence , memorize = True , traceback = True ) Nussinov Algorithm Score: 3 ================================================================= seq: GCGGAAACGGGGTCA : ( (( ))) ================================================================= In [8]: gamma = model . gamma In [9]: # DP行列は以下のようになっています。 model . _printAsTerai ( gamma , sequence ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 1 2 2 2 2 2 3 3 C - 0 0 0 0 0 0 1 2 2 2 2 2 3 3 G - - 0 0 0 0 0 1 1 1 1 1 2 3 3 G - - - 0 0 0 0 1 1 1 1 1 2 3 3 A - - - - 0 0 0 0 0 0 0 1 2 2 2 A - - - - - 0 0 0 0 0 0 1 2 2 2 A - - - - - - 0 0 0 0 0 1 2 2 2 C - - - - - - - 0 0 0 0 1 1 1 1 G - - - - - - - - 0 0 0 0 0 1 1 G - - - - - - - - - 0 0 0 0 1 1 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 $i,j$ が塩基対を組むときの塩基対最大化 塩基 $i,j$ が塩基対を組むという制約がある場合を考えます。これは、「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を保持した $\\omega(i,j)$ と $\\gamma(i,j)$ を組み合わせることで効率的に求めることができます。 Algorithm 「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を $\\omega(i,j)$ が保持している。 Initialization: $$\\omega(i,L) = 0$$ Recursion: $$ \\omega(i,j) = \\max \\begin{cases} \\omega(i-1,j)\\\\ \\omega(i,j+1)\\\\ \\omega(i-1,j+1)+\\delta(i-1,j+1)\\\\ \\max_{1\\leq k\\verb|<|i}\\left[\\omega(k,j) + \\gamma(k,i-1)\\right]\\\\ \\max_{j\\verb|<| k\\leq L}\\left[\\omega(j+1,k) + \\gamma(i,k)\\right] \\end{cases} $$ In [10]: model . outside ( sequence , memorize = True ) In [11]: omega = model . omega In [12]: # DP行列は以下のようになっています。 model . _printAsTerai ( omega , sequence ) \\ G C G G A A A C G G G G T C A G 3 3 3 2 2 2 1 1 1 0 0 0 0 0 0 C - 3 3 3 3 3 2 1 1 1 1 1 1 0 0 G - - 3 3 3 3 2 2 2 2 2 1 1 0 0 G - - - 3 3 3 2 2 2 2 2 1 1 0 0 A - - - - 3 3 2 2 2 2 2 1 1 0 0 A - - - - - 3 3 2 2 2 2 2 1 0 0 A - - - - - - 3 2 2 2 2 2 1 0 0 C - - - - - - - 2 2 2 2 2 1 0 0 G - - - - - - - - 3 3 3 2 2 1 1 G - - - - - - - - - 3 3 3 3 2 2 G - - - - - - - - - - 3 3 3 2 2 G - - - - - - - - - - - 3 3 2 2 T - - - - - - - - - - - - 3 2 2 C - - - - - - - - - - - - - 2 2 A - - - - - - - - - - - - - - 3 $Z(i,j)$ の計算 variable definition $\\gamma\\left(i,j\\right)$ the maximum number of base-pairs for subsequence from $i$ to $j$. $\\omega\\left(i,j\\right)$ the maximum number of base-pairs excluding subsequence from $i$ to $j$. 上記の定義より、$\\gamma,\\omega$ を用いて $Z(i,j)$ が以下のように求まることがわかります。 $$Z(i,j) = \\begin{cases} \\gamma\\left(i+1,j-1\\right) + 1 + \\omega\\left(i,j\\right) & (\\text{if }i\\text{ and }j\\text{-th nucleotides can form a base-pair})\\\\ 0 & (\\text{otherwise}) \\end{cases}$$ In [13]: model . ConstrainedMaximize ( sequence , memorize = False ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 2 0 0 0 0 0 3 0 C - 0 0 0 0 0 0 0 3 3 3 3 0 0 0 G - - 0 0 0 0 0 3 0 0 0 0 0 3 0 G - - - 0 0 0 0 3 0 0 0 0 0 3 0 A - - - - 0 0 0 0 0 0 0 0 3 0 0 A - - - - - 0 0 0 0 0 0 0 3 0 0 A - - - - - - 0 0 0 0 0 0 3 0 0 C - - - - - - - 0 0 0 0 3 0 0 0 G - - - - - - - - 0 0 0 0 0 2 0 G - - - - - - - - - 0 0 0 0 3 0 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 備忘録 Nussinov Algorithmでは、これまでの動的計画法とは異なり、 $i,j$ を斜め方向に舐める必要がありました。 そこで、その際に使用したコードを備忘録として残しておきます。 In [14]: import numpy as np In [15]: N = 4 In [16]: # Nussinov Algorithm (γ) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for ini_i in reversed ( range ( N )): diff = N - ini_i for i in reversed ( range ( ini_i )): arr [ i ][ i + diff ] = idx idx += 1 print ( arr ) [[0 3 5 6] [0 0 2 4] [0 0 0 1] [0 0 0 0]] In [17]: # Nussinov outsie (ω) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for j in reversed ( range ( N )): for i in range ( N - j ): arr [ i ][ j + i ] = idx idx += 1 print ( arr ) [[ 7 4 2 1] [ 0 8 5 3] [ 0 0 9 6] [ 0 0 0 10]] In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-8.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-8.html"},{"title":"Pair HMM の最尤推定","text":"Baum-Welch Pair HMMとは、二本の配列を受け取ってペアワイズアラインメントを出力するHMMで、 「アラインメントの確率的な解釈が可能になる」 （アラインメントのどの部分が信頼できるかを確率的に評価できる） という利点があります。 このPair HMMは、一般的なHMMと同様にBaum-Welchアルゴリズムによってパラメータを最尤推定していきます。 \\(\\xi\\) HMM 一般的なHMMでは、例えば 遷移確率 \\(A_{jk}\\) （状態 \\(j\\) から状態 \\(k\\) に遷移する確率） を最尤推定する際は、 直感的には 「状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「状態 \\(j\\) から遷移する回数」 で割れば最尤解が求まる。 実際の隠れ状態の遷移が確定していないので、 「 期待される 状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「 期待される 状態 \\(j\\) から遷移する回数」 で割れば良い。 \\(\\mathbf{z}_{n-1}\\) で状態 \\(j\\) におり、 \\(\\mathbf{z}_n\\) で状態 \\(k\\) にいる確率 \\(\\xi\\left(z_{n-1,j},z_{nk}\\right)\\) は、forward-backward algorithmの \\(\\alpha,\\beta\\) を用いれば以下のように求めることができる。 $$\\xi_n\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ \\(\\xi\\) を用いて、最尤推定を行う。 $$A_{j k}= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\qquad (13.19)$$ という様に行いますが、Pair HMMは、 挿入・欠失を考えるため、 \\(n\\) で配列 \\(\\mathbf{X,Y}\\) のどの要素（ \\(\\mathbf{x}_u,\\mathbf{y}_v\\) ）を考えているのか一意に定まらない という点で普通のHMMとは異なります。 Pair HMM そこで、 「 \\(n\\) ではなく \\(u,v\\) に注目する」 ことで、 \\((13.43)\\) の式を以下のように書き換えます。 $$\\xi_{u,v}\\left(i,j\\right)=\\frac{f_i\\left(u,v\\right)A_{ij}\\phi_j\\left(\\diamond_1\\right)b_j\\left(\\diamond_2,\\diamond_3\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ ここで、分子に注目すると、各変数の意味が variable meaning \\(f_i\\left(u,v\\right)\\) The probability of ending up in state \\(i\\) after aligning the two sequences \\(\\mathbf{X,Y}\\) up to observation \\(u\\) and \\(v\\) respectively. \\(A_{ij}\\) the transition probability from state \\(i\\) to state \\(j\\) . \\(\\phi_j\\left(\\diamond_1\\right)\\) the emission probability of emitting \\(\\diamond_1\\) in state \\(j\\) . \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) the probability of being in state \\(j\\) , given the sequences \\(\\mathbf{X,Y}\\) are aligned from observation \\(\\diamond_2+1\\) and \\(\\diamond_3+1\\) to the end of the sequences respectively. であるので、 \\(\\diamond\\) は状態によって異なり、具体的に書き下すと以下のようになります。 state\\variable \\(\\phi_j\\left(\\diamond_1\\right)\\) \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) \\(M\\) \\(e\\left(x_{u+1},y_{v+1}\\right)\\) \\(b_j\\left(u+1,v+1\\right)\\) \\(X\\) \\(e\\left(x_{u+1}\\right)\\) \\(b_j\\left(u+1,v\\right)\\) \\(Y\\) \\(e\\left(y_{v+1}\\right)\\) \\(b_j\\left(u,v+1\\right)\\) \\(\\gamma\\) 同様に \\(\\gamma\\) も考えると、 $$ \\gamma_n\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad(13.33)$$ から、 $$\\gamma_i\\left(u,v\\right)=\\frac{f_i\\left(u,v\\right)b_j\\left(u,v\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ のように書き換えることになります。 Maximization step ここまでで \\(\\gamma,\\xi\\) が求まったので、M stepで各パラメータを更新します。なお、以下で \\(w\\) は全ての記号の組を表します。 $$w\\in\\left\\{(k_x,k_y)|k_x,k_y\\in\\left\\{A,T,G,C,\\epsilon \\right\\}\\right\\}\\setminus(\\epsilon,\\epsilon)$$ \\(\\pi_k\\) $$\\pi&#94;{\\star}_i = \\sum_w\\gamma_i&#94;w(0,0)$$ \\(A_{ij}\\) $$A&#94;{\\star}_{ij} = \\frac{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\sum_{j}&#94;{K}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}$$ final emitting state \\(\\tilde{U}\\) \\(\\tilde{V}\\) \\(M\\) \\(U-1\\) \\(V-1\\) \\(X\\) \\(U-1\\) \\(V\\) \\(Y\\) \\(U\\) \\(V-1\\) \\(\\phi_{i}(k)\\) $$\\phi_i\\left(k\\right) = \\frac{\\sum_w\\sum_{u=0}&#94;{U\\ast1}\\sum_{v=0}&#94;{V\\ast2}\\gamma_i&#94;w\\left(u,v\\right)}{\\sum_w\\sum_{u=0}&#94;U\\sum_{v=0}&#94;V\\gamma_i&#94;w\\left(u,v\\right)}$$ \\(\\ast1\\) ： \\(x_u=k_x\\) and state \\(i\\) equals the state \\(M\\) or \\(X\\) . (in the state \\(Y\\) , a gap is present in observation stream \\(x\\) therefore \\(k_x\\) is not present.) \\(\\ast2\\) ： \\(y_v=k_y\\) and state \\(j\\) equals the state \\(M\\) or \\(Y\\) . Reference Wahle, Johannes and Armin Buch. \"Alignment and word comparison with Pair Hidden Markov Models.\" (2013). pp.22-31 Martijn B. Wieling. \"Comparison of Dutch Dialects\" (2007) pp.36-50 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-7.html"},{"title":"生物統計論 第2回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section2.1 Central Limit Theorem Law of Large Numbers Estimation is accurate with many samples. Foundation of repeated measurement. Regardless of true distribution. Assuming independence. Theorem Let $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ be an independent trials process, with finite expected value $\\mu = \\mathbb{E}\\left(\\mathbf{X}_i\\right)$ Let $\\bar{\\mathbf{X}}_n = \\frac{1}{n}\\left(\\mathbf{X}_1,\\mathbf{X}_2+\\cdots+\\mathbf{X}_n\\right)$ be a sample mean. Weak law : $$\\lim_{n\\rightarrow\\infty}P\\left(|\\bar{\\mathbf{X}}_n-\\mu|>\\varepsilon\\right) = 0 \\quad\\left(\\forall\\varepsilon>0\\right)$$ Strong law $$P\\left(\\lim_{n\\rightarrow\\infty}\\bar{\\mathbf{X}}_n = \\mu\\right) = 1$$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Chebyshev Inequality Let $\\mathbf{X}$ be a discrete random variable with expected value $\\mu=\\mathbb{E}\\left(\\mathbf{X}\\right)$ $$ P \\left(|\\mathbf{X}-\\mu|>\\varepsilon\\right)\\leq\\frac{\\mathbb{V}\\left(\\mathbf{X}\\right)}{\\varepsilon&#94;2}$$ Example In [2]: N = 1000 seed = 0 In [3]: trials = np . arange ( 1 , N + 1 ) In [4]: dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = N ) ave_dices = np . cumsum ( dices ) / trials In [5]: plt . axhline ( 3.5 , color = \"blue\" , label = \"Theoretical mean\" ) plt . plot ( trials , ave_dices , label = \"Observed average\" , color = \"green\" ) plt . ylim ( 1 , 6 ) plt . title ( \"Average dice roll by number of rolls\" ) plt . ylabel ( \"Average\" ) plt . xlabel ( \"Number of trials\" ) plt . grid () plt . legend () plt . show () If we keep rolling the dice over and over again, the sample average of dice roll will converge to the true average. Exception The law of large numbers assumes the existance of expected values . Therefore, it will not hold when there is no expected value. (ex. Cauchy distribution ) Cauchy distribution $$ \\begin{aligned} f(x;x_0,\\gamma) &= \\frac{1}{\\pi\\gamma\\left[1 + \\left(\\frac{x-x_0}{\\gamma}\\right)&#94;2\\right]} = \\frac{1}{\\pi}\\frac{\\gamma}{\\left(x-x_0\\right)&#94;2 + \\gamma&#94;2} & \\begin{cases}x_0: \\text{Location paramete}\\\\\\gamma: \\text{Scale parameter}\\end{cases}\\\\ f(x;0,1) &= \\frac{1}{\\pi\\left(1+x&#94;2\\right)} & (\\text{standard cauchy distribution}) \\end{aligned} $$ In [6]: N = 5000 K = 3 seed = 1 In [7]: trials = np . arange ( 1 , N + 1 ) In [8]: samples = np . random . RandomState ( seed ) . standard_cauchy ( size = ( K * N )) . reshape (( K , N )) ave_samples = np . cumsum ( samples , axis = 1 ) / trials In [9]: for k in range ( K ): plt . plot ( trials , ave_samples [ k ], label = f \"Observation {k+1}\" ) plt . ylabel ( \"$(\\mathbf {X} _1+\\cdots+\\mathbf {X} _n)/n$\" ) plt . xlabel ( \"n\" ) plt . legend () plt . grid () Central Limit Theorem Sample mean follows normal distribution. Foundation of many statistical tests. Regardless of true distribution. Assuming independence. Theorem Let $\\{\\mathbf{X}_1,\\ldots,\\mathbf{X}_n\\}$ be a random sample of size $n$, which is a sequence of independent and identically distributed random variables drawn from a distribution. expected value given by $\\mu$. finite variance given by $\\sigma&#94;2$. Let $S_n:=\\sum_{k=1}&#94;n\\mathbf{X}_k$ $$P\\left(\\frac{S_n-n\\mu}{\\sqrt{n}\\sigma}\\leq\\alpha\\right)\\rightarrow\\frac{1}{\\sqrt{2\\pi}}\\int_{-\\infty}&#94;{\\alpha}e&#94;{-\\frac{x&#94;2}{2}}dx\\quad(n\\rightarrow\\infty)$$ Therefore: $$ \\begin{aligned} S_n&\\sim\\mathcal{N}\\left(n\\mu, n\\sigma&#94;2\\right) & (n\\rightarrow\\infty)\\\\ \\bar{\\mathbf{X}}_n = \\left(\\mathbf{X}_1+\\cdots+\\mathbf{X}_n\\right)/n&\\sim\\mathcal{N}\\left(\\mu,\\sigma&#94;2/n\\right) & (n\\rightarrow\\infty) \\end{aligned} $$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Example In [10]: N = 10000 ns = [ 10 , 100 , 1000 , 10000 ] roll = 4 seed = 0 In [11]: fig = plt . figure ( figsize = ( 12 , 6 )) ax_all = plt . subplot2grid (( 2 , len ( ns )), ( 0 , 0 ), colspan = len ( ns )) for i , n in enumerate ( ns ): ax = plt . subplot2grid (( 2 , len ( ns )), ( 1 , i )) dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = ( n , N )) rate_dice_eq_4 = np . count_nonzero ( dices == roll , axis = 1 ) / N freqs , bins , patches = ax . hist ( rate_dice_eq_4 , bins = 20 , density = True ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] ax_all . plot ( cent_bins , freqs , label = f \"n= {n} \" ) ax . set_title ( f \"n= {n} \" ) ax . set_xlabel ( f \"Probability of {roll} roll.\" ) ax . set_ylabel ( \"freq\" ) ax_all . set_title ( \"Central Limit Theorem\" ) ax_all . legend () plt . tight_layout () plt . show () Section2.2 ChIP-seq Peak Detection ChIP-sequencing, also known as ChIP-seq, is a method used to analyze protein interactions with DNA. ChIP-seq combines chromatin immunoprecipitation (ChIP) with massively parallel DNA sequencing to identify the binding sites of DNA-associated proteins. It can be used to map global binding sites precisely for any protein of interest. Previously, ChIP-on-chip was the most common technique utilized to study these protein–DNA relations. Peak calling Problem: How to identify transcription factor binding sites and histone modification enriched regions? Random Read Model Assume that read appears with equal probability in any region. Calcurate the p-value (the Probability of obtaining more or equally extreme value than observed value under the random model.) → Smaller is more significant. Setting the threshold (p-value) manually. We could calcurate the threshold ($n_{obs}$) → If the $n_{obs}$ exceeds this threshold, it is determined as the peak region. In [12]: from scipy.special import comb In [13]: g = 10000 # total DNA length n = 1000 # total number of reads l = 100 # bin size q = l / g n_bins = g / l lambda_ = n * q # mean read count seed = 0 xmax = 30 In [14]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) read_points = np . random . RandomState ( seed ) . randint ( 0 , g , size = n ) axL . scatter ( read_points , np . zeros ( shape = n ), s = 3 , label = \"read\" , color = \"black\" ) ledge = 0 read_counts = [] for edge in range ( l , g + 1 , l ): middl = ( ledge + edge ) / 2 count = np . count_nonzero ([( ledge <= read_points ) & ( read_points < edge )]) read_counts . append ( count ) if edge <= l * 10 : axL . axvline ( edge , color = \"red\" ) axL . text ( x = middl , y = 1e-3 , s = count , horizontalalignment = 'center' ) ledge = edge axL . set_xlim ( 0 , l * 10 ) axL . set_ylim ( - 1e-3 , 2e-3 ) axL . set_yticks ([]) axL . legend () Poisson = [ comb ( n , i , exact = True ) * ( q ** i ) * (( 1 - q ) ** ( n - i )) for i in range ( n )] axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axR . plot ([ read_counts . count ( i ) / n_bins for i in range ( n )], color = \"red\" , label = \"Observed\" ) axR . set_xlim ( 0 , xmax ) axR . set_xlabel ( \"Read count for each bin\" ) axR . set_ylabel ( \"Frequency\" ) axR . legend () plt . show () In [15]: n_obs = 15 p_values = np . cumsum ( Poisson [:: - 1 ])[:: - 1 ] # Calcurate p-value for each n_obs. thresh_p = 1e-2 bp = np . argmax ( p_values <= thresh_p ) In [16]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axL . fill_between ( np . arange ( n_obs , xmax ), y1 = Poisson [ n_obs : xmax ], y2 = 0 , facecolor = 'red' ) axL . annotate ( 'p-value \\n = $\\mathbb {P} (n_ {obs} \\leq N)$ \\n $=\\sum_{i=n_ {obs} }&#94;{\\infty}(\\lambda&#94;i/i!)\\cdot e&#94;{-\\lambda}$' , xy = ( 17 , 1e-2 ), xytext = ( 20 , 4e-2 ), fontsize = 12 , arrowprops = dict ( width = 1 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'black' ) ) axL . set_xlim ( 0 , 30 ) axL . set_title ( \"Poisson distribution\" ) axL . set_xlabel ( \"N\" ) axL . set_ylabel ( \"Freq\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( p_values , color = \"black\" ) axR . scatter ( n_obs , p_values [ n_obs ], color = \"red\" , label = \"pvalue($n_ {obs} $=\" + f \" {n_obs} )\" ) axR . scatter ( bp , p_values [ bp ], color = \"blue\" , label = \"Boundary point\" ) axR . axhline ( thresh_p , color = \"blue\" , label = f \"threshold(p_value= {thresh_p} )\" ) axR . axvspan ( xmin = bp , xmax = xmax , color = \"blue\" , alpha = 0.3 ) axR . set_xlim ( 0 , xmax ) axR . set_title ( \"The relationship between p-value and $n_ {obs} $\" ) axR . set_xlabel ( \"$n_ {obs} $\" ) axR . set_ylabel ( \"p-value\" ) axR . legend () plt . show () In this case, we could say the threshold($n_{obs}$) = 19(=bp). ※ In ChIP-seq, we have to do \"Tag shift\" due to the DNA strand asymmetry. （→ more: MACS ） Section2.3 Hypothesis Testing Terminology In [17]: fig , ax = plt . subplots ( figsize = ( 6 , 4 )) X = np . arange ( 10 , 100 , 1 ) Y = 1 / X # Null distribution ax . plot ( X , Y , color = \"red\" ), ax . text ( x = 15 , y = 8e-2 , s = \"Null distribution \\n $f_S(s|H)$\" , fontsize = 15 ) # Thereshold: Sα ax . plot (( 50 , 50 ),( 0 , 7e-2 ), color = \"black\" ), ax . text ( x = 48 , y = 7.5e-2 , s = \"$S_ {α} $\" , fontsize = 12 ) # Reject & Accept ax . annotate ( '' , xy = ( 75 , 5e-2 ), xytext = ( 52 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 55 , y = 5.5e-2 , s = \"reject\" , fontsize = 12 ) # Reject ax . annotate ( '' , xy = ( 25 , 5e-2 ), xytext = ( 48 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 35 , y = 5.5e-2 , s = \"accept\" , fontsize = 12 ) # Accept # Observation sample. ax . plot (( 70 , 70 ),( 0 , 1 / 70 ), color = \"black\" ), ax . scatter ( 70 , 1 / 70 , color = \"black\" ), ax . text ( x = 68 , y = 2e-2 , s = \"$S_ {obs} $\" , fontsize = 12 ) ax . set_xticks ([]), ax . set_yticks ([]) ax . set_xlabel ( \"S\" ), ax . set_ylabel ( \"freq\" ) ax . set_xlim ( min ( X ), max ( X )), ax . set_ylim ( min ( Y ), max ( Y )) plt . show () Null Hypothesis $H_0$ Alternative Hypothesis $H_1$ Test Static $S$ Null distribution Significance threshold Reject/Accept $H_0$ Null hypothesis is True Null hypothesis is False Do not reject Null hypothesis ($H_0$) Correct Type2 error (False negative) Reject Null hypothesis ($H_0$) Type1 error (False positive) Correct P-value distribute uniformly under $H_0$ Proof. p-value is the probability of obtaining more or equally extreme value than observed value under the null distribution. $$p = \\mathbb{P}\\left(S\\geq s|H_0\\right) = 1-\\mathbb{P}\\left(S< s|H_0\\right)$$ By noting $F_0$ the cumulative distribution function of $S$ under $H_0$, we obtain: $$p = 1-F_0(s)$$ Thanks to the fact that the cdf is monotonic, increasing and (left-)continuous: $$\\mathbb{P}\\left(S\\geq s|H_0\\right) = \\mathbb{P}\\left(F_0\\left(S\\right)\\geq F_0\\left(s\\right)\\right) = 1-\\mathbb{P}\\left(F_0\\left(S\\right)< F_0\\left(s\\right)\\right)$$ Therefore, we have: $$\\mathbb{P}\\left(F_0\\left(S\\right)< F_0\\left(s\\right)\\right) = F_0\\left(s\\right)$$ Which means that $F_0\\left(S\\right)$ is following a uniform distribution. And, as this means also that $1-F_0\\left(S\\right)$ is following a uniform distributed, then we can conclude that p-value are uniformly distributed under the null hypothesis. In [18]: from scipy.stats import norm In [19]: N = 10000 loc = 0 scale = 1 seed = 0 In [20]: obs = np . random . RandomState ( seed ) . normal ( loc = loc , scale = scale , size = N ) # observation sample \"s\". p_value = 1 - norm . cdf ( x = obs , loc = loc , scale = scale ) # p-value = 1 - F(s) In [21]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) freqs , bins , patches = axL . hist ( obs , bins = 50 , density = True , color = \"blue\" , alpha = 0.7 ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] axL . plot ( cent_bins , freqs , color = \"blue\" ) axL . set_title ( \"Histogram of observation sample s \\n under the null distribution (This time: Normal distribution)\" ), axL . set_xlabel ( \"observation s\" ), axL . set_ylabel ( \"Frequency\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . hist ( p_value , bins = 20 , edgecolor = \"black\" ) axR . set_title ( \"Histogram of p-value\" ), axR . set_xlabel ( \"p-value\" ), axR . set_ylabel ( \"Frequency\" ) plt . tight_layout () plt . show () ※ We could argue about the p-value under the null hypothesis, but we could not confirm whether null hypothesis is true or not. Section2.4 Hypothesis Test Example $\\chi&#94;2$-test Any statistical hypothesis test where the sampling distribution of the test statistic is a chi-squared distribution when the null hypothesis is true. Used to determine whether there is a significant difference between the expected frequencies and the observed frequencies in one or more categories. $\\chi&#94;2$-distribution $Y_i\\sim\\mathcal{N}\\left(0,1\\right), i=1,\\ldots,\\nu$: i.i.d. $X=Y_1&#94;2+\\cdots+Y_{\\nu}$ $\\rightarrow X\\sim\\chi&#94;2(\\nu), X\\in \\mathbb{R}_{\\geq0}$ $$ \\begin{aligned} f_X(x) &= \\frac{1}{2&#94;{\\nu/2}\\Gamma(\\nu/2)}x&#94;{\\nu/2-1}e&#94;{-x/2}\\\\ \\Gamma(z) &= \\int_{0}&#94;{\\infty}t&#94;{z-1}e&#94;{-t}dt(\\mathrm{Re}(z)>0)\\\\ \\mathbb{E}(X) &= \\nu\\\\ \\mathbb{V}(X) &= 2\\nu \\end{aligned} $$ In [22]: from scipy.stats import chi2 In [23]: K = 5 In [24]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( 0 , 8 , 1000 ) for k in range ( 1 , K + 1 ): plt . plot ( X , chi2 . pdf ( X , k ), label = f \"$k= {k} $\" ) plt . xlim ( 0 , 8 ), plt . ylim ( 0 , 1.0 ) plt . title ( \"$\\chi&#94;2$-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Pearson's chi-square test goodness of fit test # $C_1$ $C_2$ $\\cdots$ $C_k$ total Observation frequency $n_1$ $n_2$ $\\cdots$ $n_k$ $n$ Theoretical probability (under $H_0$) $p_1$ $p_2$ $\\cdots$ $p_k$ $1$ Theoretical frequency $m_1=np_1$ $m_2=np_2$ $\\cdots$ $m_k=np_k$ $n$ Null Hypothesis($H_0$): $P(C_i) = p_i\\quad(i=1,2,\\ldots,k)$ If null hypothesis is true, $U$ are distributed as $\\chi&#94;2(k-1)$. $$ U=\\sum_{i=1}&#94;k\\frac{(n_i-m_i)&#94;2}{m_i}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ test for independence A\\B $B_1$ $B_2$ $\\cdots$ $B_b$ total $A_1$ $n_{11}$ $n_{12}$ $\\cdots$ $n_{1b}$ $n_{1\\cdot}$ $A_2$ $n_{21}$ $n_{22}$ $\\cdots$ $n_{2b}$ $n_{2\\cdot}$ $\\vdots$ $\\vdots$ $\\vdots$ $\\cdots$ $\\ddots$ $\\vdots$ $A_a$ $n_{a1}$ $n_{a2}$ $\\cdots$ $n_{ab}$ $n_a$ total $n_{\\cdot1}$ $n_{\\cdot2}$ $\\cdots$ $n_{\\cdot b}$ $n_{a\\cdot}$ $P(A_i) = p_i,P(B_j)=q_j,\\quad (1\\leq i\\leq a,1\\leq j\\leq b)$ Null Hypothesis($H_0$): $A$ and $B$ are independence. $$P(A_i\\cap B_j) = p_iq_j$$ If null hypothesis is true, we could presume: $\\bar{p_i}=n_{i\\cdot}/n$, $\\bar{q_j}=n_{\\cdot j}/n$. $m_{ij} = n\\bar{p_i}\\bar{q_j}$ (Theoretical frequency) $$ U=\\sum_{i=1}&#94;a\\sum_{j=1}&#94;b\\frac{(n_{ij}-m_{ij})&#94;2}{m_{ij}}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ t-test One-sample test: Determine whether a sample of observations could have been generated by a process with a specific mean $\\mu$. Two-sample test: Compare the average values of the two data sets and determine if they came from the same population. t-distribution $$ \\begin{aligned} f_{t(\\nu)}(x) &= \\frac{\\Gamma\\left(\\frac{\\nu+1}{2}\\right)}{\\sqrt{\\nu\\pi}\\Gamma\\left(\\frac{\\nu}{2}\\right)}\\left(1+\\frac{x&#94;2}{\\nu}\\right)&#94;{-\\frac{\\nu+1}{2}}\\\\ \\mathbb{E}(X) &= 0(\\nu>1)\\\\ \\mathbb{V}(X) &= \\begin{cases}\\infty&(1<\\nu\\leq2)\\\\\\frac{\\nu}{\\nu-2}&(2<\\nu)\\end{cases} \\end{aligned} $$ In [25]: from scipy.stats import t as tdist In [26]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( - 6 , 6 , 1000 ) nus = [ 1 , 2 , 5 , 1000 ] for nu in nus : plt . plot ( X , tdist . pdf ( X , nu ), label = f \"$ν= {nu} $\" ) plt . plot ( X , norm . pdf ( X , 0 , 1 ), linestyle = ':' , linewidth = 5 , label = \"Standard Normal Distribution\" ) plt . xlim ( - 6 , 6 ), plt . ylim ( 0 , 0.4 ) plt . title ( \"t-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Student's t-test One-sample test: $$ X_1,\\ldots,X_n\\sim\\mathcal{N}(\\mu,\\sigma)\\text{: i.i.d.}\\\\ \\bar{X} = \\frac{X_1,\\ldots,X_n}{n}, S = \\frac{\\left(X_1-\\bar{X}\\right)&#94;2 + \\cdots+\\left(X_n-\\bar{X}\\right)&#94;2}{n-1}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}-\\mu\\sqrt{n}\\right)}{S}\\sim t(n-1) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{X_{11}+\\cdots+X_{1m}}{m}\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{X_{21}+\\cdots+X_{2n}}{n}\\\\ S=\\frac{\\sum_{i=1}&#94;m\\left(X_{1i}-\\bar{X}_1\\right)&#94;2 + \\sum_{i=1}&#94;n\\left(X_{2i}-\\bar{X}_2\\right)&#94;2}{m+n-2}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)\\sqrt{mn}}{S\\sqrt{m+n}}\\sim t(m+n-2) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{\\sum_{i=1}&#94;mX_{1i}}{m}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{1i} - \\bar{X}_1\\right)&#94;2}{m-1}, A=S_1/m\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{\\sum_{i=1}&#94;mX_{2i}}{n}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{2i} - \\bar{X}_2\\right)&#94;2}{n-1}, B=S_2/n\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)}{S\\sqrt{A+B}}\\approx t(\\nu), \\nu=\\frac{(A+B)&#94;2}{A&#94;2/(m-1)+B&#94;2/(n-1)} $$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html"},{"title":"レポート課題1(10/3出題)","text":"qxhwjNjP8Im8mdd8QDHGjA==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html"},{"title":"イントロダクション","text":"講義計画 確率と統計の基礎 ： 最先端の機械学習技術の数学的基盤 探索と最適化 ： 広大な探索空間から最適解を効率よく探索 機械学習 ： データの背後に潜む知識を発見 自然言語処理 ： 人工知能技術の応用例 # 日付 内容 担当 1 10/3 概要 杉山 2 10/10 最適化（連続1） 佐藤 3 10/17 最適化（連続2） 佐藤 4 10/24 最適化（探索） 本多 5 10/31 確率と統計 本多 6 11/14 確率と統計 本多 7 11/21 確率と統計 本多 8 11/28 機械学習（教師付き学習） 本多 9 12/5 機械学習（教師付き学習） 佐藤 10 12/12 自然言語処理 宮尾 11 12/19 自然言語処理 宮尾 12 12/26 自然言語処理 宮尾 13 1/9 機械学習（強化学習） 杉山 1 1/16 試験 佐藤 人工知能とは 1956年：\"The Dartmouth Summer Research Project on Artificial Intelligence\" にて Artificial Intelligence という言葉が提唱された。 Watoson Nature AlphaGo 人工知能関連分野の発展 人工知能研究 1960年頃(1次ブーム)：記号処理、論理推論 1980年頃(2次ブーム)：エキスパートシステム ニューラルネット研究 1960年頃(1次ブーム)：パーセプトロン（１層） 1990年頃(2次ブーム)：誤差逆伝播ほう（多層） 機械学習研究 1995年頃〜：統計・凸最適化 1995年頃〜：ベイズ推論 2010年頃〜：深層学習 3種類の機械学習 教師付き学習 ：人間が教師となり、コンピュータの学習を手伝う。 教師なし学習 ：コンピュータが人間の手を介さずに自発的に学習する。 強化学習 ：ロボットが人間の手を介さずに自発的に意思決定を行う。 まとめ 人工知能 ： 知的なコンピュータシステムを作る 数学・プログラミング・実世界応用をつなぐ架け橋 探索 ： 広大な探索空間を効率よく探索 機械学習 ： データの背後に潜む知識を発見","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html"},{"title":"Pair HMM","text":"※実装時のパラメータ PairHMMによるアラインメントを実装していく。なお、 （ kerasy.Bio.alignment.PairHMM ） に定義してあります。 In [1]: from kerasy.Bio.alignment import PairHMM In [2]: # サンプル配列 seqX = \"CCAGAGCTGTGGCAGACAGTGGCT\" seqY = \"CCAGCTGTGCAGACACTGGCTT\" In [3]: model = PairHMM () In [4]: ! cat params.json { \"delta\": \"1/10\", \"epsilon\": \"1/5\", \"tau\": \"1/30\", \"px_e_y\": \"1/8\", \"px_ne_y\": \"1/24\", \"qx\": \"1/4\", \"qy\": \"1/4\" } In [5]: model . set_params ( path = \"params.json\" ) Pair HMM とその利点 HMMのために開発されたアルゴリズムを使える。（らしい←正解ラベルの無いアラインメントでBaum-Welchアルゴリズムをどのように使うのかは現在考察中です。） アラインメントの確率的な解釈が可能になる。 グローバルアラインメントを出力する Pair-HMM Mは $x$ と $y$ がマッチした状態。（$x_i$ と $y_j$ がアライン） Iは $x$ に挿入が起きている状態。（$x_i$ と $-$ がアライン） Dは $x$ に欠失が起きている状態。（$-$ と $y_j$ がアライン） （以下では上から $V&#94;M,V&#94;X,V&#94;Y$ と記述している。） Pair HMMのためのViterbiアルゴリズム 2本数の配列 $x,y$ を与えると確率最大のアラインメントを求めるアルゴリズム。 Initialization: $$ \\begin{cases} V&#94;M(0,0)=1, V&#94;M(i,0)=V&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ V&#94;X(0,0)=0, V&#94;X(1,0)=\\delta q_{x_1} V&#94;X(i,0)=\\varepsilon q_{x_i}V&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ V&#94;Y(0,0)=0, V&#94;Y(0,1)=\\delta q_{y_1} V&#94;Y(0,j)=\\varepsilon q_{y_j}V&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} V&#94;M(i,j) &= p_{x_iy_j}\\max\\begin{cases}(1-2\\delta-\\tau)V&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;Y(i-1,j-1)\\end{cases}\\\\ V&#94;X(i,j) &= q_{x_i}\\max\\begin{cases}\\delta V&#94;M(i-1,j)\\\\\\varepsilon V&#94;X(i-1,j)\\end{cases}\\\\ V&#94;Y(i,j) &= q_{y_j}\\max\\begin{cases}\\delta V&#94;M(i,j-1)\\\\\\varepsilon V&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$v_e = \\tau\\max\\left(V&#94;M(n,m),V&#94;X(n,m),V&#94;Y(n,m)\\right)$$ In [6]: P_optimal = model . align ( seqX , seqY , return_score = True ) Pair HMM (Viterbi) Alignment score: 3.551370651291424e-30 |parameter| value | -------------------------------- |delta | 0.1| |epsilon | 0.2| |tau | 0.03333333333333333| |px_e_y | 0.125| |px_ne_y |0.041666666666666664| |qx | 0.25| |qy | 0.25| =============================================================== X: CCAGAGCTGTGGCAGACAGTGGC-T Y: CC--AGCTGT-GCAGACACTGGCTT =============================================================== In [7]: print ( f \"π*= {P_optimal} \" ) π*=3.551370651291424e-30 アラインメントの信頼性 配列 $x,y$ が与えられた時、アラインメント $\\pi$ が得られる条件付き確率を考えることができ、それが アラインメントの信頼度 を表していると考ることができる。 $$ P(\\pi|x,y) = \\frac{P(x,y,\\pi)}{P(x,y)}\\\\ P(x,y) = \\sum_{\\text{alignments }\\pi}P(x,y,\\pi) $$ ※ なお、ここで $P(x,y)$ は $x,y$ に関する全ての可能なアラインメントについて確率を足し合わせたもの であり、Forwardアルゴリズムで計算することができる。 Pair HMMのためのForwardアルゴリズム ※ Viterbiの $\\max$ を $\\text{sum}$ に変更しただけ。 Initialization: $$ \\begin{cases} F&#94;M(0,0)=1, F&#94;M(i,0)=F&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ F&#94;X(0,0)=0, F&#94;X(1,0)=\\delta q_{x_1} F&#94;X(i,0)=\\varepsilon q_{x_i}F&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ F&#94;Y(0,0)=0, F&#94;Y(0,1)=\\delta q_{y_1} F&#94;Y(0,j)=\\varepsilon q_{y_j}F&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} F&#94;M(i,j) &= p_{x_iy_j}\\text{sum}\\begin{cases}(1-2\\delta-\\tau)F&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;Y(i-1,j-1)\\end{cases}\\\\ F&#94;X(i,j) &= q_{x_i}\\text{sum}\\begin{cases}\\delta F&#94;M(i-1,j)\\\\\\varepsilon F&#94;X(i-1,j)\\end{cases}\\\\ F&#94;Y(i,j) &= q_{y_j}\\text{sum}\\begin{cases}\\delta F&#94;M(i,j-1)\\\\\\varepsilon F&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$F_e = \\tau\\ \\text{sum}\\left(F&#94;M(n,m),F&#94;X(n,m),F&#94;Y(n,m)\\right)$$ In [8]: F , P_all = model . forward ( seqX , seqY ) In [9]: print ( f \"𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)= {P_all} \" ) 𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)=2.0457988072916236e-28 In [10]: print ( f \"P(π*|x, y)={P_optimal/P_all}\" ) P(π*|x, y)=0.017359334840912267 $x_i$ と $y_j$ がアラインされる確率 次の式で表される。 $$ \\begin{aligned} P(x_i\\diamondsuit y_i|x,y) &= \\frac{\\sum_{\\pi\\in\\Omega_{ij}}P(x,y,\\pi)}{P(x,y)}\\\\ &= \\frac{F&#94;M(i,j)\\cdot B&#94;M(i,j)}{P(x,y)} \\end{aligned}$$ ※ $\\Omega_{ij}$：$x_i$ と $y_j$ がアラインされるアラインメントの集合 Pair HMMのためのBackwardアルゴリズム Needleman-Wunsh-Gotoh のBackwardアルゴリズムとの類似性に注目！ Initialization: $$ \\begin{cases} B&#94;M(n,m)=B&#94;X(n,m)=B&#94;Y(n,m)=\\tau\\\\ B&#94;X(i,m)=\\varepsilon q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;Y(i,m)=\\varepsilon q_{y_{j+1}}B&#94;X(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ B&#94;M(i,m)=\\delta q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;M(n,j)=\\delta q_{y_{j+1}}B&#94;Y(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ \\end{cases} $$ Recursion: $i=n-1,\\ldots,1,\\quad j=m-1,\\ldots,1$ $$ \\begin{aligned} B&#94;M(i,j) &= \\text{sum}\\begin{cases}(1-2\\delta-\\tau)p_{x_iy_j}B&#94;M(i+1,j+1)\\\\\\delta q_{x_{i+1}}B(i+1,j)\\\\\\delta q_{y_{j+1}}B&#94;Y(i,j+1)\\end{cases}\\\\ B&#94;X(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{x_{i+1}}B&#94;X(i+1,j)\\\\ B&#94;Y(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{y_{j+1}}B&#94;Y(i,j+1)\\\\ \\end{aligned} $$ In [11]: B = model . backward ( seqX , seqY ) In [12]: Pij = ( F * B ) / P_all In [13]: import seaborn as sns import matplotlib.pyplot as plt In [14]: sns . heatmap ( Pij ) plt . show () In [15]: # 可視化のために pandas を使用。 import pandas as pd r , c = Pij . shape pd . set_option ( 'display.max_rows' , r ) pd . set_option ( 'display.max_columns' , c ) In [16]: df = pd . DataFrame ( Pij ) In [17]: df Out[17]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 0 1.139605e+00 1.145169e-02 1.061625e-04 9.380071e-06 7.330898e-07 1.256616e-08 5.467340e-10 2.910714e-11 5.763005e-12 3.410212e-13 5.102192e-15 2.187247e-16 1.988821e-17 1.147484e-18 1.367416e-20 6.720910e-22 4.976161e-24 7.098501e-26 9.237930e-28 2.211060e-29 3.898762e-32 1.763484e-40 1 1.002452e-01 9.915333e-01 6.192125e-03 1.868999e-04 4.332564e-05 9.546525e-07 4.066396e-08 2.157028e-09 9.465879e-11 4.846141e-11 4.058759e-13 3.267685e-14 8.754145e-16 1.928520e-16 1.373420e-18 1.082830e-19 9.927246e-22 1.394016e-23 1.508549e-25 4.777080e-27 9.963503e-30 8.788027e-38 2 2.530997e-02 1.110298e-01 7.189425e-01 4.724160e-03 2.510915e-04 4.961792e-05 1.187062e-06 1.017255e-07 3.970235e-09 2.068131e-10 9.703401e-11 7.255597e-13 1.565563e-13 2.611280e-15 3.254769e-16 2.694314e-18 1.079695e-19 1.562036e-21 1.545424e-23 1.735256e-25 1.265060e-27 2.215960e-35 3 1.439692e-03 1.313691e-01 9.101842e-02 4.446381e-01 5.912097e-03 3.126913e-04 8.585244e-05 1.538885e-06 1.919091e-07 8.250641e-09 2.393023e-10 1.283784e-10 1.387610e-12 2.250638e-13 4.821068e-15 2.111543e-16 4.457287e-18 2.448800e-19 3.227733e-21 1.284984e-23 8.240296e-26 3.335362e-33 4 3.517101e-05 3.000139e-03 4.131934e-01 8.504087e-02 1.663724e-01 9.561056e-03 2.917045e-04 9.039141e-05 1.788740e-06 1.312414e-07 2.869640e-08 4.101759e-10 1.507867e-10 3.456004e-12 5.959996e-13 5.757530e-15 2.024716e-16 4.111221e-18 7.279991e-20 1.060049e-21 6.121304e-24 4.843531e-31 5 9.934762e-06 1.458875e-04 3.927027e-03 6.740773e-01 8.441291e-02 7.234362e-02 1.094905e-02 1.879103e-04 1.252776e-04 1.454564e-06 1.059818e-07 2.729047e-08 9.494833e-10 8.082013e-11 1.033243e-11 3.411004e-13 6.554134e-15 3.958672e-16 8.201302e-18 3.482706e-20 2.714352e-22 4.461969e-29 6 5.322130e-07 6.381400e-05 4.257593e-04 6.688387e-03 9.174344e-01 4.917686e-02 4.329939e-02 3.819221e-03 1.763480e-04 1.328334e-04 1.940120e-06 9.105133e-08 1.541103e-08 2.609538e-09 8.150731e-11 2.404569e-11 1.889654e-13 3.985572e-15 1.024288e-16 6.839760e-18 1.341414e-20 4.476503e-27 7 5.863612e-10 7.892422e-07 1.012986e-04 1.397365e-03 1.342858e-02 1.002812e+00 2.593641e-02 3.890025e-02 1.670263e-03 1.614886e-04 8.871868e-05 1.756325e-06 1.155298e-07 1.122902e-08 2.203971e-09 1.028948e-10 2.509711e-11 1.531285e-13 2.099939e-15 4.258022e-17 2.374690e-18 1.208869e-24 8 1.171184e-11 2.035729e-09 3.700419e-07 2.397639e-04 4.844063e-03 2.599346e-02 9.949710e-01 1.502418e-02 2.712144e-02 1.478651e-03 1.433184e-04 6.712671e-05 1.454730e-06 9.766789e-08 9.072910e-09 2.328874e-09 6.340026e-11 1.502027e-11 1.916941e-13 1.314758e-15 1.242412e-17 4.691715e-23 9 3.005919e-13 6.399055e-11 5.515662e-09 3.748097e-07 1.153167e-04 1.497122e-02 6.310820e-02 8.863944e-01 1.030851e-02 1.491223e-02 2.002265e-03 8.941933e-05 3.530505e-05 1.470719e-06 9.754840e-08 8.043302e-09 3.375435e-09 3.679377e-11 2.917845e-12 5.484419e-14 1.471719e-15 4.178025e-21 10 1.792807e-15 1.557812e-12 1.844985e-10 1.289502e-08 7.545128e-07 6.340240e-05 2.061627e-02 1.787166e-01 5.419262e-01 1.188051e-02 1.024380e-02 2.347055e-03 7.577232e-05 1.796622e-05 1.114937e-06 7.069534e-08 8.011504e-09 2.756012e-09 4.374664e-11 6.704524e-13 1.075503e-14 1.217530e-19 11 1.923711e-17 4.362099e-15 1.941124e-12 6.147024e-10 1.551641e-08 5.550653e-07 1.380449e-04 9.537258e-03 5.398937e-01 1.863598e-01 1.452105e-02 9.548898e-03 1.837989e-03 5.136835e-05 1.397535e-05 6.835406e-07 5.429499e-08 8.819330e-09 1.851138e-09 1.231506e-11 1.775772e-13 2.576473e-18 12 5.638842e-19 1.455168e-16 9.139939e-15 1.547158e-12 1.037887e-09 2.248539e-08 1.151600e-06 9.872926e-05 5.973776e-03 8.862574e-01 6.786997e-02 1.624026e-02 4.029496e-03 2.179139e-03 2.921118e-05 1.601828e-05 5.561847e-07 3.123249e-08 2.978327e-09 9.604760e-10 3.744283e-12 9.636167e-17 13 3.331427e-21 7.494769e-19 2.963338e-16 6.987305e-15 4.315679e-12 6.087761e-10 3.497465e-08 3.604967e-06 8.639915e-05 5.915526e-03 9.923696e-01 2.749764e-02 2.345296e-02 2.411435e-03 1.600356e-03 2.967960e-05 1.263876e-05 5.535990e-07 1.777340e-08 1.086922e-09 1.497803e-10 4.715717e-15 14 8.334075e-23 3.113616e-20 1.885485e-18 4.096232e-16 1.085250e-14 2.877122e-12 9.801182e-10 2.465783e-08 7.111413e-06 1.332057e-04 5.532024e-03 1.019408e+00 1.546140e-02 2.230611e-02 1.326417e-03 7.657518e-04 3.756285e-05 1.397395e-05 7.084890e-07 8.614586e-09 3.251784e-10 1.560898e-13 15 2.761536e-24 1.577325e-22 1.652226e-19 6.855680e-18 4.640406e-16 1.789313e-14 1.881340e-12 7.696555e-10 3.721167e-08 3.131924e-06 2.768933e-04 5.432195e-03 1.019385e+00 1.220031e-02 2.678270e-02 1.012065e-03 4.234835e-04 2.691482e-05 8.312535e-06 2.735984e-07 4.296980e-09 1.264609e-12 16 1.125679e-25 3.526855e-23 5.295754e-22 1.029758e-19 2.954167e-17 8.415539e-16 3.337555e-14 1.886064e-12 3.708635e-10 8.103999e-08 2.979865e-06 2.717052e-04 5.867388e-03 1.008690e+00 1.398136e-02 2.796359e-02 1.094449e-03 2.222028e-04 1.653854e-05 6.727102e-06 7.321521e-08 3.095212e-11 17 5.314132e-29 1.371847e-25 1.002377e-22 1.431441e-21 2.329882e-19 2.824449e-17 1.264033e-15 1.039492e-13 1.896385e-12 2.117496e-10 8.676212e-08 1.428983e-06 4.224040e-04 7.551663e-03 9.828098e-01 2.577489e-02 2.154489e-02 1.348560e-03 1.271999e-04 1.123527e-05 1.554246e-06 1.061734e-09 18 1.311292e-30 3.344026e-28 1.039987e-25 1.917693e-22 4.842995e-21 2.644625e-19 5.424283e-17 1.016892e-15 2.466777e-13 3.876336e-12 1.412328e-10 6.644843e-08 1.307534e-06 2.267450e-04 1.352321e-02 9.236001e-01 4.123399e-02 2.242045e-02 1.780378e-03 1.137684e-04 4.658387e-06 2.707169e-08 19 3.685034e-32 1.308860e-29 1.727006e-27 1.846830e-25 9.168694e-23 2.025241e-20 2.015727e-19 7.009128e-17 1.110761e-15 2.135974e-13 8.991483e-12 3.294862e-10 2.170110e-08 1.342768e-06 1.738901e-04 1.366663e-02 9.157034e-01 5.085192e-02 1.134612e-02 1.333942e-03 1.601513e-04 7.755075e-07 20 2.627187e-34 3.307561e-31 6.412082e-29 8.638204e-27 5.130913e-25 5.421429e-23 2.735844e-20 4.581117e-19 4.673008e-17 1.996269e-15 1.567873e-13 2.425635e-11 7.144030e-10 2.339911e-08 4.401237e-07 1.583398e-04 8.993801e-03 8.715290e-01 1.032744e-01 9.301698e-03 8.040002e-04 1.264439e-05 21 3.712503e-36 1.248259e-33 7.484327e-31 4.015876e-28 1.275117e-26 7.126689e-25 1.294296e-22 1.126902e-20 1.562753e-18 3.245370e-17 8.822502e-16 3.618329e-13 1.719160e-11 9.436607e-10 3.634534e-08 4.567520e-07 2.489897e-05 1.031566e-02 8.313752e-01 1.337435e-01 9.529909e-03 1.755113e-04 22 1.081603e-37 4.975375e-35 3.859345e-33 1.396911e-30 8.994506e-28 2.233130e-26 1.907603e-24 1.395483e-22 7.223861e-21 2.385762e-18 3.020013e-17 1.437842e-15 1.876938e-13 2.135337e-11 5.432165e-10 7.346489e-08 4.608162e-07 1.776497e-05 2.915009e-03 7.255898e-01 2.520881e-01 4.862597e-03 23 7.053935e-40 3.695478e-37 9.639089e-35 1.470014e-32 2.795455e-30 1.235666e-27 2.213410e-26 7.771768e-24 1.829949e-22 1.539068e-20 1.623359e-18 3.985091e-17 3.521057e-15 1.986472e-13 1.486597e-11 3.334896e-10 7.576041e-08 5.116867e-07 2.834710e-05 1.528768e-03 3.676275e-01 6.239253e-01 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-6.html"},{"title":"生物物理学 第2回","text":"講師： 樋口秀男 生命体（生物）の一般的定義 生物とは、以下の四つの条件を満たす物質システム 自己と外界との境界 エネルギーと物質の代謝 自己複製 恒常性 電子 分子 細胞数 整体の階層性 $10&#94;{28}$ $10&#94;{23}$ $10&#94;{13}$ ヒト 意識・運動・代謝 $10&#94;{24}$ $10&#94;{19}$ $10&#94;{9}$ 心臓 循環・拡散 $10&#94;{15}$ $10&#94;{10}$ $10&#94;{0}$ 心筋細胞 生理的なリズム単位 $10&#94;{5}$ $10&#94;{5}$ 筋節 ゆらぎを制した振動 $10&#94;{0}$ タンパク質 反応のゆらぎ $10&#94;{2}$ アミノ酸 タンパク質の性質の起源 $10&#94;{0}$ 電子 量子力学の支配領域 生命科学を覆う謎 生命誕生の謎（+生命の進化、分化の謎） タンパク質構造の決定と機能との関係の謎 細胞が超多種分子（タンパク質、脂質、小分子、イオン、…）の濃度・種類・機能の制御を行う謎 個体（臓器、器官等）の構造と機能構築の謎 生命誕生の謎 元素誕生は超新星の爆発→重金属ができる。 現宇宙の元素の割合と人体内の元素比が非常に似通っている。 RNAワールド プロテインワールド 原始地球上に存在したと仮定される、RNA からなる自己複製系のこと。また、これがかつて存在し、現生生物へと進化したという仮説。 まずアミノ酸ができ、重合してポリペプチド、さらにタンパク質が作り出され、これが触媒として働いて生命を作り出したという仮説。 生命誕生を示唆した実験事実 ミラーの放電によるアミノ酸合成(1953) $\\mathrm{CH_3,NH_3,H_2,H_2O}$ を含む気体に放電（落雷を模した）をする。 実験２週間後に以下の化合物 （アミノ酸） ができた。 グリシン アラニン グルタル酸 酢酸（脂肪酸） 塩基や糖（リボース）、核酸基、RNA、タンパク質なども化学合成可能。 生命基本物質の化学合成が成功した理由 地球には、エネルギーの高い（海底火山、紫外線、雷、高音）場所と低く安定な場所が共存していたので、分子は 高エネルギー環境で合成され、低エネルギー環境で安定化する ことができた。 $$A\\overset{k_1}{{\\longrightarrow}}B\\overset{k_2}{{\\longrightarrow}}C$$ In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: def simulate ( ax , color , tp , A = 1 , B = 0 , C = 0 , dt = 1e-3 , k1 = 0.07 , k2 = 0.02 , K = 1 ): time = np . arange ( 0 , 100 , dt ) As = np . zeros ( shape = len ( time )) Bs = np . zeros ( shape = len ( time )) Cs = np . zeros ( shape = len ( time )) for i , t in enumerate ( time ): dA = ( - k1 * A ) * dt * K dB = ( k1 * A - k2 * B ) * dt * K dC = ( k2 * B ) * dt * K A += dA ; B += dB ; C += dC As [ i ] = A ; Bs [ i ] = B ; Cs [ i ] = C if t > tp : K = 1e-6 # 温度を下げ、反応速度が1e-6倍になったことをシミュレーション ax . plot ( time , As , color = color ) ax . plot ( time , Bs , color = color ) ax . plot ( time , Cs , color = color ) if tp < 100 : ax . vlines ( x = tp , ymin = 0 , ymax = 1 , linestyle = \":\" ) return ax In [3]: fig , ax = plt . subplots () ax = simulate ( ax = ax , color = \"red\" , tp = 20 ) ax = simulate ( ax = ax , color = \"black\" , tp = 100 ) ax . set_xlabel ( \"Time\" ) ax . set_ylabel ( \"RQ\" ) ax . set_title ( \"Simulation Result\" ) plt . show () 上記のシミュレーション結果から、$A,B$ 分子を得るためには、 途中で（温度が下がるなどの結果）反応速度が下がる必要がある ことがわかる。 生体分子が濃縮され、多次反応による分子合成速度が上がった。 地球は巨大で多様な反応槽であったため、合成確率が上がった。 考えられる生物 地球型炭素生物 地球環境のように水と二酸化炭素（あるいはメタン）が豊富な惑星であるなら、情報記憶（DNA）→伝令（mRNA）→機能（タンパク質、RNA）のような地球型の仕事を分担した炭素生物が生まれる可能性は高い。 炭素生物 vs ケイ素生物 常温常圧で安定な炭素ー炭素結合 とは違い、 ケイ素ーケイ素結合はパイ結合やシグマ結合による二重三重結合を作る傾向がほとんど無く、非常に不安定 である。 炭素ーケイ素結合は安定 なので、炭素生物の中にケイ素が含まれるだろう。したがって、ケイ素生物の存在する確率は非常に低い。 金属生物 常温において金属結合が安定であり、分子としての機能を持つことは困難であるため、生物の中心にはならないだろう。ただし、金属イオンや錯体として、炭素生物やケイ素生物に利用されることはありうる。 講義のまとめ 生命分子や細胞の種類は多く、構造や機能をどのように理解するかが、 生命科学全体の 課題である。 生命は 宇宙の元素を効率よく利用した。 地球上の 高↔︎低エネルギーを行き交い 、多様な環境や濃縮により高確率かつ安定的に生体分子が合成された。 これが生命の誕生の確率を大きくした。 初めにRNAが合成され、それを鋳型としてタンパク質が合成され、原子生命が誕生したと想像される。 系外惑星にも、炭素生命体が存在する可能性がある。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html"},{"title":"ペアワイズアラインメント","text":"ペアワイズアラインメントとは 2本のDNAの塩基配列（タンパク質のアミノ酸配列）を比較する方法の一つ バイオインフォマティクスでは最も基本的な解析手法 なぜDNA配列の比較をするのか DNAの機能を知りたい （∵ DNAの配列が似ていると機能が似ている） DNAのどの部分が重要かを知りたい。 （∵ 「保存されている＝重要」だと考えられる） 生物の進化系統樹を知りたい 新型シーケンサーで読まれたDNAの由来を知りたい DNAの変異や新型シークエンサーの読み取りエラーでは 長さが異なる ことがあるので、 長さの変化を考慮し効率の良い動的計画法 を用いる アラインメントの種類 説明 例 グローバルアラインメント 2本の配列の 全体 をアラインメントする。 Needleman-Wunsch ローカルアラインメント 2本の配列の 似ている部分を検出 し、その部分をアランメントする Smith-Waterman 実装 各種アラインメントを実装していく。なお、全て Affine gap penalty を利用する。 In [1]: from kerasy.Bio.alignment import NeedlemanWunshGotoh , SmithWaterman , BackwardNeedlemanWunshGotoh In [2]: # サンプル配列 seqX = \"GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACGGAGCTGTGGCAGACCTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGCGAGGACTG\" seqY = \"CGCATGCGGAGTGAGGGGAGCAGTTGGGAACAGATGGTCCCGCCGAGGGACCGGTGGGCAGACGGGGCCAGCTGTGGCAGACACTGGCTTCTAACCACCGAACGTTCTTTCCGCTCCGC\" Needleman-Wunsch-Gotoh 自作のモジュール （ kerasy.Bio.alignment.NeedlemanWunshGotoh ） を使ってアラインメントをします。 In [3]: model = NeedlemanWunshGotoh () In [4]: model . align ( seqX , seqY ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== Smith-Waterman 自作のモジュール （ kerasy.Bio.alignment.SmithWaterman ） を使ってアラインメントをします。 In [5]: model = SmithWaterman () In [6]: model . align ( seqX , seqY ) Smith-Waterman Alignment score: 37.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== Aligned positions: X[0,111] Y[7,118] X: GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACG Y: GGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GGGCAGACG X: G----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGC Y: GGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCTCCGC =============================================================== 制約付きアラインメント $x_i$ と $y_j$ がアラインされるという制約下で最大のアラインメントスコアを求める。 全てのパターンを列挙すると $\\mathcal{O}(n&#94;2m&#94;2)$ の時間がかかるが、 後ろ向きアラインメント と組み合わせることで全てのパターンを $\\mathcal{O}(nm)$ で計算可能。 前向き：xiとyjがアラインされる時の、iまでとjまでの配列の最大アラインメントスコアを保持。 後ろ向き：xiとyjがアラインされる時の、i+1以降とj+1以降の配列の最大アラインメントスコアを保持。 Needleman-Wunsch-Gotohの逆向きアラインメントは （ kerasy.Bio.alignment.BackwardNeedlemanWunshGotoh ） に定義してあります。 In [7]: model_forward = NeedlemanWunshGotoh () model_backward = BackwardNeedlemanWunshGotoh () In [8]: model_forward . align ( seqX , seqY , memorize = True ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== In [9]: model_backward . align ( seqX , seqY , memorize = True ) Backward Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGGAACA-GATGGTCC-CGCCGAGGGACCGGTGG- X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTTC-TAACCACCGAACGTTCTTTCCG-CT X: CCGCGAGGACT Y: CCGC------- =============================================================== In [10]: k = 3 n = len ( seqX ) + 1 m = len ( seqY ) + 1 In [11]: M = model_forward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] bM = model_backward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] In [12]: A = M + bM In [13]: # 上の配列を見れば、seqX[0] と seqY[7] がアラインされている時に最大スコア14を取ることがわかるので、それを確かめる。 print ( A [ 0 , 7 ]) 14.0 In [14]: # 可視化のために pandas を使用。 import pandas as pd pd . set_option ( 'display.max_rows' , m ) pd . set_option ( 'display.max_columns' , n ) In [15]: df = pd . DataFrame ( A ) In [16]: df Out[16]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 0 12.0 10.0 8.0 8.0 8.0 10.0 8.0 14.0 7.0 2.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -17.0 -20.0 -25.0 -26.0 -31.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -51.0 -54.0 -55.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -129.0 -132.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -150.0 -156.0 -156.0 -159.0 -160.0 -163.0 -164.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -181.0 -184.0 -187.0 -190.0 -193.0 -194.0 -197.0 -198.0 -201.0 -200.0 -203.0 -206.0 -209.0 -210.0 -211.0 -214.0 -217.0 -218.0 -221.0 -224.0 -225.0 -228.0 -229.0 -230.0 -235.0 -238.0 -241.0 -242.0 -243.0 -246.0 1 5.0 12.0 8.0 6.0 6.0 8.0 8.0 8.0 14.0 5.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -14.0 -17.0 -22.0 -25.0 -26.0 -33.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -53.0 -54.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -131.0 -132.0 -135.0 -140.0 -141.0 -144.0 -147.0 -148.0 -150.0 -157.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -171.0 -174.0 -179.0 -180.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -200.0 -203.0 -206.0 -211.0 -210.0 -211.0 -216.0 -217.0 -220.0 -223.0 -224.0 -227.0 -228.0 -229.0 -232.0 -237.0 -240.0 -243.0 -242.0 -243.0 2 2.0 3.0 10.0 8.0 6.0 6.0 6.0 6.0 6.0 14.0 3.0 0.0 -3.0 -4.0 -9.0 -12.0 -13.0 -16.0 -17.0 -24.0 -27.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -47.0 -48.0 -53.0 -54.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -125.0 -126.0 -131.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -150.0 -150.0 -157.0 -156.0 -159.0 -158.0 -163.0 -166.0 -169.0 -172.0 -171.0 -176.0 -177.0 -180.0 -183.0 -184.0 -187.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -200.0 -203.0 -204.0 -209.0 -210.0 -213.0 -214.0 -217.0 -220.0 -221.0 -224.0 -225.0 -228.0 -231.0 -234.0 -237.0 -238.0 -241.0 -242.0 3 -1.0 2.0 3.0 8.0 6.0 6.0 4.0 6.0 6.0 4.0 14.0 1.0 0.0 -5.0 -4.0 -9.0 -12.0 -13.0 -18.0 -17.0 -24.0 -29.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -49.0 -48.0 -55.0 -56.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -127.0 -126.0 -133.0 -136.0 -137.0 -142.0 -143.0 -146.0 -150.0 -151.0 -150.0 -157.0 -156.0 -159.0 -160.0 -165.0 -166.0 -169.0 -172.0 -171.0 -176.0 -179.0 -182.0 -185.0 -186.0 -187.0 -192.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -209.0 -212.0 -213.0 -216.0 -217.0 -220.0 -223.0 -224.0 -225.0 -230.0 -233.0 -236.0 -239.0 -238.0 -241.0 4 -4.0 -3.0 0.0 1.0 8.0 4.0 4.0 2.0 4.0 4.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -11.0 -14.0 -15.0 -20.0 -19.0 -22.0 -27.0 -26.0 -29.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -60.0 -63.0 -64.0 -67.0 -66.0 -69.0 -68.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -87.0 -92.0 -91.0 -94.0 -95.0 -100.0 -103.0 -100.0 -105.0 -106.0 -109.0 -112.0 -113.0 -116.0 -119.0 -118.0 -121.0 -124.0 -127.0 -128.0 -131.0 -136.0 -137.0 -142.0 -145.0 -148.0 -148.0 -153.0 -150.0 -155.0 -156.0 -159.0 -160.0 -165.0 -168.0 -169.0 -170.0 -171.0 -176.0 -177.0 -182.0 -185.0 -186.0 -189.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -220.0 -221.0 -224.0 -227.0 -228.0 -233.0 -234.0 -237.0 -238.0 5 -7.0 -4.0 -3.0 -2.0 -1.0 8.0 2.0 4.0 4.0 2.0 4.0 2.0 14.0 1.0 0.0 -3.0 -6.0 -9.0 -14.0 -15.0 -20.0 -21.0 -20.0 -25.0 -26.0 -29.0 -32.0 -33.0 -36.0 -39.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -59.0 -60.0 -61.0 -64.0 -65.0 -64.0 -67.0 -66.0 -73.0 -74.0 -77.0 -76.0 -81.0 -78.0 -83.0 -84.0 -85.0 -90.0 -91.0 -92.0 -95.0 -98.0 -101.0 -98.0 -103.0 -106.0 -107.0 -110.0 -111.0 -114.0 -117.0 -118.0 -121.0 -122.0 -127.0 -130.0 -131.0 -136.0 -137.0 -140.0 -144.0 -147.0 -146.0 -151.0 -150.0 -153.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -173.0 -176.0 -179.0 -182.0 -183.0 -184.0 -187.0 -190.0 -191.0 -190.0 -195.0 -198.0 -201.0 -200.0 -203.0 -206.0 -207.0 -210.0 -213.0 -214.0 -217.0 -218.0 -219.0 -224.0 -227.0 -230.0 -233.0 -232.0 -235.0 6 -10.0 -9.0 -6.0 -3.0 -4.0 -1.0 6.0 2.0 2.0 4.0 2.0 2.0 2.0 14.0 1.0 -2.0 -5.0 -8.0 -9.0 -14.0 -17.0 -18.0 -23.0 -20.0 -23.0 -28.0 -31.0 -34.0 -33.0 -34.0 -37.0 -38.0 -43.0 -44.0 -49.0 -52.0 -55.0 -56.0 -57.0 -58.0 -61.0 -64.0 -66.0 -62.0 -65.0 -66.0 -71.0 -74.0 -77.0 -76.0 -79.0 -76.0 -81.0 -84.0 -85.0 -88.0 -91.0 -94.0 -97.0 -96.0 -99.0 -98.0 -101.0 -104.0 -107.0 -110.0 -113.0 -114.0 -115.0 -116.0 -121.0 -124.0 -127.0 -130.0 -133.0 -136.0 -139.0 -141.0 -142.0 -147.0 -146.0 -149.0 -148.0 -153.0 -156.0 -159.0 -162.0 -163.0 -166.0 -167.0 -170.0 -173.0 -174.0 -177.0 -180.0 -183.0 -182.0 -187.0 -188.0 -191.0 -190.0 -193.0 -196.0 -199.0 -200.0 -203.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -218.0 -221.0 -224.0 -227.0 -228.0 -231.0 -232.0 7 -13.0 -10.0 -9.0 -8.0 -5.0 -2.0 -1.0 6.0 2.0 0.0 4.0 0.0 2.0 1.0 14.0 3.0 0.0 -3.0 -8.0 -9.0 -14.0 -17.0 -18.0 -22.0 -18.0 -21.0 -26.0 -29.0 -32.0 -33.0 -34.0 -37.0 -38.0 -43.0 -46.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -59.0 -64.0 -64.0 -60.0 -63.0 -66.0 -69.0 -72.0 -75.0 -76.0 -77.0 -74.0 -79.0 -82.0 -83.0 -86.0 -89.0 -94.0 -95.0 -96.0 -97.0 -98.0 -99.0 -102.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -121.0 -124.0 -125.0 -130.0 -131.0 -134.0 -139.0 -139.0 -142.0 -145.0 -146.0 -147.0 -150.0 -153.0 -154.0 -157.0 -160.0 -163.0 -164.0 -167.0 -170.0 -173.0 -176.0 -177.0 -180.0 -181.0 -184.0 -185.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -204.0 -207.0 -208.0 -211.0 -212.0 -213.0 -218.0 -221.0 -224.0 -225.0 -226.0 -229.0 8 -16.0 -13.0 -12.0 -11.0 -10.0 -5.0 -4.0 -1.0 6.0 0.0 2.0 2.0 2.0 0.0 3.0 14.0 3.0 0.0 -5.0 -6.0 -11.0 -14.0 -15.0 -18.0 -21.0 -16.0 -21.0 -26.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -52.0 -55.0 -56.0 -59.0 -64.0 -62.0 -60.0 -61.0 -66.0 -69.0 -72.0 -75.0 -74.0 -75.0 -74.0 -79.0 -80.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -95.0 -96.0 -99.0 -102.0 -105.0 -108.0 -109.0 -112.0 -113.0 -118.0 -121.0 -122.0 -127.0 -128.0 -131.0 -135.0 -138.0 -137.0 -142.0 -143.0 -144.0 -147.0 -150.0 -151.0 -154.0 -157.0 -160.0 -161.0 -164.0 -167.0 -170.0 -173.0 -174.0 -177.0 -178.0 -179.0 -182.0 -183.0 -186.0 -189.0 -190.0 -191.0 -194.0 -197.0 -198.0 -201.0 -204.0 -205.0 -208.0 -209.0 -210.0 -215.0 -218.0 -221.0 -222.0 -223.0 -226.0 9 -19.0 -16.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 4.0 2.0 0.0 2.0 0.0 2.0 3.0 14.0 3.0 -2.0 -3.0 -8.0 -11.0 -12.0 -17.0 -16.0 -19.0 -16.0 -21.0 -26.0 -27.0 -28.0 -31.0 -32.0 -37.0 -40.0 -39.0 -44.0 -47.0 -48.0 -49.0 -52.0 -53.0 -58.0 -57.0 -62.0 -62.0 -58.0 -61.0 -66.0 -69.0 -72.0 -73.0 -72.0 -75.0 -74.0 -77.0 -80.0 -83.0 -88.0 -89.0 -90.0 -95.0 -94.0 -93.0 -96.0 -99.0 -102.0 -105.0 -106.0 -109.0 -110.0 -115.0 -118.0 -119.0 -124.0 -125.0 -128.0 -132.0 -133.0 -136.0 -137.0 -140.0 -141.0 -144.0 -147.0 -148.0 -151.0 -154.0 -157.0 -158.0 -161.0 -164.0 -167.0 -170.0 -171.0 -174.0 -175.0 -178.0 -177.0 -180.0 -183.0 -186.0 -187.0 -188.0 -191.0 -194.0 -195.0 -198.0 -201.0 -202.0 -205.0 -206.0 -207.0 -212.0 -215.0 -218.0 -219.0 -220.0 -223.0 10 -22.0 -19.0 -18.0 -17.0 -16.0 -11.0 -10.0 -7.0 -4.0 -3.0 4.0 0.0 0.0 0.0 0.0 2.0 3.0 14.0 1.0 0.0 -5.0 -8.0 -9.0 -14.0 -15.0 -14.0 -19.0 -16.0 -21.0 -24.0 -25.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -44.0 -45.0 -46.0 -49.0 -50.0 -55.0 -58.0 -55.0 -62.0 -60.0 -58.0 -61.0 -66.0 -69.0 -70.0 -71.0 -72.0 -77.0 -72.0 -77.0 -80.0 -83.0 -88.0 -87.0 -90.0 -93.0 -92.0 -93.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -112.0 -115.0 -116.0 -121.0 -122.0 -125.0 -129.0 -130.0 -131.0 -136.0 -135.0 -138.0 -141.0 -144.0 -145.0 -148.0 -151.0 -154.0 -155.0 -158.0 -161.0 -162.0 -167.0 -168.0 -169.0 -172.0 -175.0 -176.0 -175.0 -180.0 -183.0 -186.0 -185.0 -188.0 -191.0 -192.0 -195.0 -198.0 -199.0 -202.0 -203.0 -204.0 -209.0 -212.0 -213.0 -218.0 -217.0 -220.0 11 -22.0 -24.0 -21.0 -18.0 -19.0 -16.0 -12.0 -12.0 -9.0 -4.0 -5.0 2.0 -2.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -13.0 -14.0 -19.0 -16.0 -19.0 -22.0 -23.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -42.0 -43.0 -46.0 -49.0 -52.0 -55.0 -58.0 -55.0 -60.0 -60.0 -58.0 -61.0 -66.0 -67.0 -68.0 -71.0 -74.0 -75.0 -72.0 -79.0 -82.0 -81.0 -86.0 -87.0 -88.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -120.0 -124.0 -127.0 -127.0 -128.0 -131.0 -134.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -151.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -168.0 -167.0 -172.0 -173.0 -176.0 -175.0 -178.0 -181.0 -184.0 -185.0 -188.0 -189.0 -192.0 -195.0 -196.0 -199.0 -200.0 -203.0 -206.0 -209.0 -212.0 -211.0 -216.0 -217.0 12 -28.0 -22.0 -24.0 -23.0 -20.0 -17.0 -16.0 -12.0 -10.0 -9.0 -4.0 -4.0 2.0 -4.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -11.0 -12.0 -17.0 -16.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -35.0 -36.0 -37.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -55.0 -58.0 -58.0 -56.0 -61.0 -64.0 -65.0 -66.0 -71.0 -72.0 -73.0 -70.0 -79.0 -80.0 -81.0 -84.0 -87.0 -86.0 -89.0 -90.0 -91.0 -94.0 -97.0 -100.0 -101.0 -106.0 -109.0 -110.0 -115.0 -116.0 -118.0 -124.0 -126.0 -127.0 -126.0 -131.0 -132.0 -135.0 -138.0 -139.0 -140.0 -145.0 -148.0 -149.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -166.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -179.0 -182.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -198.0 -203.0 -206.0 -209.0 -212.0 -209.0 -214.0 13 -29.0 -30.0 -22.0 -26.0 -25.0 -22.0 -17.0 -17.0 -12.0 -12.0 -10.0 -6.0 -4.0 0.0 -4.0 -2.0 -4.0 -3.0 -2.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -9.0 -12.0 -11.0 -12.0 -15.0 -14.0 -19.0 -22.0 -25.0 -28.0 -31.0 -34.0 -35.0 -34.0 -35.0 -38.0 -43.0 -44.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -60.0 -54.0 -59.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -70.0 -77.0 -78.0 -81.0 -82.0 -85.0 -88.0 -89.0 -92.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -124.0 -127.0 -124.0 -129.0 -130.0 -135.0 -138.0 -141.0 -140.0 -145.0 -146.0 -147.0 -152.0 -155.0 -158.0 -157.0 -158.0 -163.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -178.0 -179.0 -182.0 -181.0 -186.0 -189.0 -190.0 -191.0 -192.0 -197.0 -198.0 -203.0 -204.0 -207.0 -210.0 -209.0 14 -33.0 -30.0 -29.0 -22.0 -27.0 -25.0 -21.0 -18.0 -15.0 -10.0 -12.0 -8.0 -8.0 -2.0 -1.0 -5.0 -3.0 -6.0 -2.0 -2.0 4.0 14.0 1.0 -2.0 -3.0 -6.0 -7.0 -10.0 -9.0 -10.0 -13.0 -14.0 -19.0 -20.0 -25.0 -26.0 -31.0 -32.0 -33.0 -34.0 -37.0 -40.0 -43.0 -44.0 -49.0 -48.0 -51.0 -52.0 -53.0 -56.0 -58.0 -54.0 -59.0 -62.0 -65.0 -66.0 -69.0 -72.0 -73.0 -70.0 -75.0 -76.0 -79.0 -82.0 -83.0 -86.0 -89.0 -90.0 -91.0 -92.0 -97.0 -100.0 -103.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -122.0 -125.0 -124.0 -129.0 -132.0 -135.0 -136.0 -139.0 -142.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -159.0 -158.0 -163.0 -164.0 -167.0 -166.0 -169.0 -170.0 -175.0 -176.0 -179.0 -180.0 -183.0 -186.0 -187.0 -190.0 -191.0 -194.0 -197.0 -200.0 -203.0 -204.0 -207.0 -208.0 15 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -7.0 -2.0 -1.0 6.0 14.0 3.0 0.0 -1.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -14.0 -19.0 -22.0 -23.0 -24.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -42.0 -47.0 -48.0 -49.0 -50.0 -51.0 -56.0 -57.0 -52.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -73.0 -70.0 -73.0 -76.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -107.0 -110.0 -115.0 -117.0 -118.0 -121.0 -122.0 -123.0 -126.0 -129.0 -130.0 -133.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -152.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -165.0 -168.0 -169.0 -168.0 -173.0 -176.0 -177.0 -178.0 -181.0 -184.0 -187.0 -188.0 -189.0 -194.0 -197.0 -200.0 -203.0 -202.0 -205.0 16 -37.0 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -5.0 -2.0 1.0 8.0 14.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -13.0 -14.0 -17.0 -22.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -37.0 -40.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -49.0 -54.0 -55.0 -52.0 -57.0 -62.0 -63.0 -66.0 -67.0 -70.0 -71.0 -70.0 -71.0 -74.0 -79.0 -80.0 -83.0 -84.0 -85.0 -88.0 -91.0 -94.0 -95.0 -100.0 -101.0 -106.0 -109.0 -112.0 -114.0 -117.0 -118.0 -119.0 -120.0 -123.0 -124.0 -129.0 -132.0 -133.0 -132.0 -135.0 -140.0 -141.0 -146.0 -149.0 -150.0 -153.0 -154.0 -157.0 -158.0 -161.0 -162.0 -165.0 -168.0 -167.0 -168.0 -171.0 -174.0 -175.0 -176.0 -179.0 -184.0 -185.0 -188.0 -191.0 -192.0 -197.0 -200.0 -201.0 -202.0 17 -38.0 -37.0 -32.0 -33.0 -30.0 -29.0 -22.0 -25.0 -23.0 -19.0 -19.0 -11.0 -11.0 -8.0 -8.0 -9.0 -2.0 -3.0 -5.0 -3.0 -5.0 0.0 1.0 10.0 14.0 5.0 4.0 -1.0 -2.0 -3.0 -4.0 -7.0 -10.0 -13.0 -12.0 -17.0 -22.0 -21.0 -24.0 -25.0 -28.0 -31.0 -34.0 -35.0 -38.0 -37.0 -40.0 -43.0 -46.0 -47.0 -48.0 -47.0 -52.0 -53.0 -50.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -68.0 -69.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -97.0 -98.0 -103.0 -106.0 -108.0 -111.0 -114.0 -115.0 -116.0 -117.0 -120.0 -121.0 -126.0 -129.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -146.0 -147.0 -150.0 -151.0 -154.0 -155.0 -158.0 -159.0 -162.0 -163.0 -166.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -181.0 -182.0 -185.0 -188.0 -189.0 -194.0 -195.0 -198.0 -199.0 18 -39.0 -38.0 -37.0 -32.0 -35.0 -30.0 -27.0 -22.0 -23.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -5.0 -3.0 -3.0 2.0 3.0 10.0 14.0 7.0 6.0 1.0 0.0 -1.0 -4.0 -5.0 -10.0 -13.0 -12.0 -15.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -34.0 -33.0 -36.0 -35.0 -38.0 -41.0 -46.0 -45.0 -46.0 -45.0 -50.0 -51.0 -50.0 -55.0 -58.0 -61.0 -62.0 -63.0 -68.0 -67.0 -66.0 -67.0 -70.0 -75.0 -78.0 -79.0 -82.0 -83.0 -88.0 -91.0 -92.0 -96.0 -98.0 -101.0 -106.0 -106.0 -109.0 -112.0 -113.0 -114.0 -117.0 -118.0 -121.0 -124.0 -127.0 -130.0 -131.0 -134.0 -137.0 -140.0 -143.0 -144.0 -147.0 -148.0 -151.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -168.0 -171.0 -174.0 -175.0 -178.0 -179.0 -180.0 -185.0 -188.0 -189.0 -192.0 -193.0 -196.0 19 -40.0 -39.0 -38.0 -37.0 -32.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -7.0 -2.0 -1.0 2.0 5.0 12.0 14.0 7.0 6.0 3.0 2.0 -1.0 -2.0 -7.0 -10.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -33.0 -34.0 -35.0 -38.0 -41.0 -44.0 -43.0 -44.0 -45.0 -50.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -65.0 -66.0 -65.0 -66.0 -67.0 -70.0 -75.0 -76.0 -79.0 -80.0 -85.0 -88.0 -89.0 -94.0 -94.0 -98.0 -103.0 -105.0 -104.0 -109.0 -110.0 -111.0 -114.0 -117.0 -116.0 -121.0 -124.0 -127.0 -128.0 -131.0 -134.0 -137.0 -140.0 -141.0 -142.0 -145.0 -148.0 -149.0 -150.0 -153.0 -156.0 -157.0 -158.0 -161.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -177.0 -182.0 -185.0 -188.0 -187.0 -190.0 -193.0 20 -45.0 -40.0 -39.0 -40.0 -39.0 -30.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -7.0 0.0 -1.0 4.0 7.0 12.0 14.0 7.0 8.0 5.0 2.0 1.0 -4.0 -7.0 -8.0 -11.0 -12.0 -13.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -32.0 -31.0 -34.0 -35.0 -38.0 -39.0 -42.0 -41.0 -44.0 -45.0 -48.0 -49.0 -50.0 -55.0 -58.0 -57.0 -60.0 -63.0 -64.0 -65.0 -66.0 -67.0 -70.0 -73.0 -76.0 -77.0 -82.0 -85.0 -86.0 -91.0 -92.0 -94.0 -100.0 -102.0 -103.0 -104.0 -107.0 -108.0 -111.0 -114.0 -115.0 -116.0 -121.0 -124.0 -125.0 -128.0 -131.0 -134.0 -135.0 -138.0 -141.0 -140.0 -143.0 -146.0 -147.0 -150.0 -153.0 -154.0 -155.0 -158.0 -159.0 -162.0 -165.0 -168.0 -169.0 -170.0 -173.0 -174.0 -179.0 -182.0 -185.0 -188.0 -185.0 -190.0 21 -44.0 -45.0 -40.0 -39.0 -40.0 -37.0 -30.0 -33.0 -30.0 -27.0 -22.0 -25.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -5.0 0.0 1.0 6.0 7.0 12.0 14.0 9.0 10.0 5.0 2.0 -1.0 -4.0 -7.0 -8.0 -11.0 -10.0 -11.0 -14.0 -19.0 -20.0 -23.0 -28.0 -29.0 -30.0 -31.0 -34.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -48.0 -51.0 -50.0 -55.0 -56.0 -59.0 -58.0 -61.0 -64.0 -65.0 -68.0 -67.0 -68.0 -73.0 -76.0 -77.0 -82.0 -85.0 -88.0 -91.0 -94.0 -94.0 -99.0 -100.0 -103.0 -102.0 -105.0 -106.0 -111.0 -114.0 -117.0 -116.0 -119.0 -122.0 -123.0 -128.0 -131.0 -134.0 -133.0 -136.0 -139.0 -138.0 -141.0 -146.0 -147.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -166.0 -167.0 -168.0 -173.0 -174.0 -179.0 -180.0 -183.0 -186.0 -185.0 22 -47.0 -44.0 -45.0 -42.0 -39.0 -40.0 -35.0 -30.0 -33.0 -28.0 -29.0 -20.0 -25.0 -20.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 3.0 8.0 9.0 14.0 14.0 9.0 8.0 3.0 0.0 -1.0 -6.0 -9.0 -8.0 -11.0 -10.0 -13.0 -16.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -55.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -67.0 -70.0 -75.0 -78.0 -77.0 -84.0 -85.0 -89.0 -93.0 -95.0 -94.0 -99.0 -100.0 -103.0 -102.0 -107.0 -106.0 -113.0 -116.0 -117.0 -116.0 -119.0 -124.0 -123.0 -130.0 -133.0 -134.0 -135.0 -136.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -168.0 -167.0 -170.0 -175.0 -174.0 -181.0 -180.0 -183.0 -186.0 23 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 5.0 10.0 11.0 14.0 14.0 7.0 8.0 1.0 -2.0 -1.0 -6.0 -9.0 -8.0 -11.0 -12.0 -13.0 -18.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -44.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -70.0 -77.0 -80.0 -77.0 -86.0 -85.0 -89.0 -94.0 -95.0 -94.0 -99.0 -100.0 -103.0 -104.0 -109.0 -106.0 -113.0 -116.0 -119.0 -116.0 -121.0 -126.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -148.0 -151.0 -150.0 -151.0 -154.0 -155.0 -160.0 -159.0 -162.0 -165.0 -168.0 -167.0 -172.0 -177.0 -176.0 -183.0 -180.0 -183.0 24 -51.0 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -4.0 -1.0 2.0 5.0 10.0 11.0 14.0 14.0 5.0 8.0 -1.0 -4.0 -3.0 -6.0 -9.0 -8.0 -13.0 -14.0 -13.0 -20.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -39.0 -36.0 -37.0 -44.0 -41.0 -46.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -63.0 -64.0 -67.0 -68.0 -71.0 -72.0 -79.0 -82.0 -79.0 -86.0 -87.0 -89.0 -92.0 -93.0 -94.0 -97.0 -98.0 -103.0 -106.0 -109.0 -108.0 -113.0 -116.0 -117.0 -118.0 -123.0 -124.0 -125.0 -130.0 -131.0 -132.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -150.0 -153.0 -154.0 -157.0 -160.0 -159.0 -164.0 -165.0 -168.0 -169.0 -174.0 -177.0 -178.0 -181.0 -180.0 25 -54.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -41.0 -38.0 -33.0 -32.0 -31.0 -30.0 -25.0 -22.0 -25.0 -22.0 -21.0 -16.0 -13.0 -14.0 -8.0 -10.0 -9.0 -4.0 -4.0 -1.0 2.0 7.0 10.0 9.0 14.0 12.0 7.0 6.0 -1.0 -4.0 -3.0 -6.0 -7.0 -10.0 -13.0 -16.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -64.0 -65.0 -70.0 -73.0 -74.0 -79.0 -82.0 -81.0 -88.0 -89.0 -89.0 -94.0 -93.0 -94.0 -97.0 -100.0 -105.0 -108.0 -111.0 -108.0 -115.0 -116.0 -119.0 -120.0 -123.0 -124.0 -125.0 -132.0 -131.0 -134.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -170.0 -171.0 -176.0 -177.0 -178.0 -181.0 26 -57.0 -54.0 -52.0 -52.0 -49.0 -46.0 -45.0 -42.0 -39.0 -38.0 -33.0 -34.0 -31.0 -30.0 -25.0 -22.0 -23.0 -22.0 -23.0 -16.0 -15.0 -15.0 -8.0 -12.0 -10.0 -4.0 -2.0 1.0 2.0 5.0 8.0 7.0 14.0 10.0 5.0 6.0 -1.0 -4.0 -3.0 -6.0 -9.0 -10.0 -15.0 -18.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -32.0 -29.0 -34.0 -39.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -66.0 -65.0 -72.0 -75.0 -74.0 -81.0 -82.0 -81.0 -89.0 -90.0 -89.0 -94.0 -93.0 -94.0 -99.0 -102.0 -105.0 -108.0 -111.0 -110.0 -115.0 -118.0 -121.0 -122.0 -125.0 -124.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -167.0 -170.0 -173.0 -176.0 -175.0 -178.0 27 -60.0 -59.0 -56.0 -52.0 -54.0 -51.0 -48.0 -46.0 -44.0 -39.0 -39.0 -35.0 -35.0 -31.0 -31.0 -26.0 -24.0 -25.0 -22.0 -23.0 -18.0 -15.0 -15.0 -8.0 -12.0 -9.0 -6.0 -4.0 1.0 2.0 3.0 8.0 6.0 14.0 8.0 3.0 6.0 -1.0 -2.0 -3.0 -6.0 -9.0 -12.0 -13.0 -16.0 -13.0 -20.0 -21.0 -20.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -46.0 -43.0 -48.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -61.0 -66.0 -67.0 -72.0 -75.0 -76.0 -81.0 -83.0 -83.0 -87.0 -92.0 -89.0 -94.0 -93.0 -96.0 -101.0 -104.0 -107.0 -108.0 -109.0 -110.0 -115.0 -118.0 -119.0 -122.0 -125.0 -126.0 -125.0 -132.0 -133.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -163.0 -164.0 -169.0 -172.0 -175.0 -176.0 -175.0 28 -62.0 -62.0 -59.0 -57.0 -52.0 -54.0 -50.0 -49.0 -44.0 -43.0 -41.0 -37.0 -36.0 -33.0 -32.0 -31.0 -26.0 -26.0 -26.0 -24.0 -24.0 -19.0 -17.0 -13.0 -8.0 -10.0 -7.0 -7.0 -4.0 -1.0 0.0 2.0 6.0 6.0 14.0 8.0 1.0 6.0 -1.0 -2.0 -5.0 -8.0 -11.0 -14.0 -13.0 -16.0 -13.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -38.0 -37.0 -42.0 -43.0 -48.0 -43.0 -48.0 -49.0 -50.0 -57.0 -58.0 -59.0 -62.0 -63.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -83.0 -84.0 -89.0 -92.0 -89.0 -94.0 -95.0 -96.0 -103.0 -106.0 -107.0 -108.0 -109.0 -112.0 -115.0 -120.0 -121.0 -122.0 -127.0 -126.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -158.0 -159.0 -162.0 -165.0 -164.0 -171.0 -172.0 -175.0 -176.0 29 -65.0 -62.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -42.0 -43.0 -42.0 -37.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -25.0 -22.0 -19.0 -18.0 -13.0 -8.0 -8.0 -5.0 -6.0 -5.0 -2.0 -1.0 2.0 5.0 6.0 14.0 8.0 1.0 6.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -11.0 -14.0 -13.0 -18.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -35.0 -40.0 -37.0 -40.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -56.0 -59.0 -60.0 -65.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -81.0 -84.0 -89.0 -90.0 -89.0 -94.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -111.0 -114.0 -117.0 -120.0 -121.0 -124.0 -125.0 -128.0 -127.0 -130.0 -133.0 -136.0 -135.0 -136.0 -141.0 -140.0 -143.0 -148.0 -151.0 -152.0 -155.0 -156.0 -157.0 -162.0 -165.0 -166.0 -169.0 -170.0 -173.0 30 -64.0 -65.0 -64.0 -61.0 -60.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -18.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 2.0 6.0 -1.0 -2.0 -5.0 -10.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -40.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -59.0 -62.0 -67.0 -68.0 -69.0 -74.0 -75.0 -80.0 -84.0 -81.0 -84.0 -89.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -113.0 -116.0 -117.0 -120.0 -123.0 -124.0 -125.0 -128.0 -127.0 -130.0 -135.0 -138.0 -135.0 -136.0 -143.0 -140.0 -145.0 -148.0 -151.0 -154.0 -155.0 -156.0 -159.0 -164.0 -167.0 -166.0 -169.0 -170.0 31 -67.0 -64.0 -65.0 -64.0 -61.0 -58.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -17.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 4.0 4.0 -2.0 -4.0 -7.0 -11.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -27.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -38.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -61.0 -62.0 -67.0 -68.0 -71.0 -75.0 -76.0 -81.0 -82.0 -81.0 -84.0 -87.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -102.0 -107.0 -106.0 -113.0 -114.0 -115.0 -120.0 -121.0 -122.0 -123.0 -128.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -141.0 -140.0 -145.0 -146.0 -149.0 -152.0 -155.0 -158.0 -159.0 -164.0 -167.0 -166.0 -169.0 32 -68.0 -67.0 -62.0 -65.0 -64.0 -61.0 -56.0 -55.0 -52.0 -51.0 -50.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -25.0 -22.0 -19.0 -15.0 -10.0 -8.0 -8.0 -5.0 -6.0 -3.0 -4.0 -1.0 2.0 3.0 10.0 14.0 9.0 6.0 2.0 0.0 -3.0 -6.0 -9.0 -10.0 -11.0 -10.0 -16.0 -13.0 -19.0 -22.0 -21.0 -26.0 -24.0 -28.0 -31.0 -29.0 -32.0 -36.0 -39.0 -36.0 -43.0 -44.0 -45.0 -45.0 -46.0 -47.0 -52.0 -56.0 -57.0 -62.0 -64.0 -68.0 -70.0 -73.0 -74.0 -76.0 -80.0 -81.0 -80.0 -84.0 -86.0 -91.0 -93.0 -97.0 -96.0 -98.0 -101.0 -102.0 -108.0 -106.0 -114.0 -113.0 -114.0 -119.0 -120.0 -121.0 -122.0 -127.0 -129.0 -131.0 -134.0 -135.0 -137.0 -136.0 -142.0 -142.0 -145.0 -146.0 -148.0 -153.0 -154.0 -159.0 -159.0 -163.0 -166.0 -165.0 33 -71.0 -68.0 -65.0 -62.0 -65.0 -62.0 -59.0 -56.0 -53.0 -50.0 -51.0 -48.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -24.0 -21.0 -18.0 -13.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -4.0 -1.0 2.0 5.0 12.0 14.0 7.0 4.0 1.0 -2.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -15.0 -15.0 -19.0 -22.0 -19.0 -24.0 -24.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -47.0 -53.0 -56.0 -59.0 -62.0 -65.0 -68.0 -71.0 -73.0 -74.0 -75.0 -78.0 -79.0 -80.0 -85.0 -88.0 -91.0 -94.0 -95.0 -98.0 -98.0 -102.0 -104.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -120.0 -121.0 -120.0 -125.0 -130.0 -131.0 -132.0 -135.0 -136.0 -138.0 -142.0 -142.0 -146.0 -146.0 -150.0 -153.0 -154.0 -159.0 -159.0 -163.0 -164.0 34 -72.0 -71.0 -68.0 -65.0 -62.0 -63.0 -60.0 -59.0 -56.0 -51.0 -50.0 -49.0 -48.0 -43.0 -42.0 -43.0 -40.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -25.0 -22.0 -19.0 -16.0 -11.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -2.0 1.0 4.0 7.0 14.0 12.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -15.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -49.0 -55.0 -58.0 -61.0 -64.0 -67.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -82.0 -87.0 -90.0 -91.0 -94.0 -97.0 -98.0 -100.0 -104.0 -104.0 -106.0 -105.0 -114.0 -113.0 -114.0 -119.0 -122.0 -121.0 -120.0 -127.0 -130.0 -131.0 -132.0 -135.0 -138.0 -140.0 -142.0 -142.0 -146.0 -148.0 -152.0 -155.0 -154.0 -161.0 -159.0 -163.0 35 -73.0 -74.0 -69.0 -70.0 -66.0 -64.0 -61.0 -62.0 -59.0 -56.0 -53.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -42.0 -41.0 -38.0 -33.0 -34.0 -31.0 -28.0 -28.0 -25.0 -22.0 -19.0 -16.0 -13.0 -8.0 -10.0 -10.0 -7.0 -6.0 -5.0 -2.0 1.0 6.0 9.0 14.0 10.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -47.0 -48.0 -49.0 -57.0 -60.0 -63.0 -65.0 -69.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -84.0 -87.0 -92.0 -91.0 -96.0 -97.0 -98.0 -102.0 -106.0 -106.0 -106.0 -105.0 -114.0 -113.0 -114.0 -121.0 -122.0 -123.0 -120.0 -127.0 -130.0 -133.0 -132.0 -137.0 -138.0 -140.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -161.0 -159.0 36 -78.0 -73.0 -74.0 -71.0 -72.0 -66.0 -66.0 -61.0 -60.0 -59.0 -56.0 -55.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -30.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -10.0 -12.0 -9.0 -6.0 -3.0 -2.0 1.0 4.0 7.0 14.0 8.0 3.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -45.0 -47.0 -50.0 -51.0 -56.0 -61.0 -62.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -80.0 -81.0 -84.0 -86.0 -91.0 -93.0 -95.0 -98.0 -100.0 -102.0 -105.0 -106.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -120.0 -127.0 -128.0 -131.0 -134.0 -137.0 -136.0 -139.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -159.0 37 -79.0 -80.0 -73.0 -76.0 -73.0 -71.0 -66.0 -68.0 -63.0 -62.0 -60.0 -58.0 -57.0 -54.0 -53.0 -49.0 -47.0 -46.0 -45.0 -44.0 -39.0 -39.0 -37.0 -36.0 -34.0 -31.0 -28.0 -25.0 -22.0 -21.0 -18.0 -17.0 -12.0 -12.0 -14.0 -11.0 -8.0 -5.0 0.0 3.0 4.0 5.0 14.0 8.0 1.0 0.0 -1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -39.0 -44.0 -47.0 -47.0 -52.0 -53.0 -58.0 -62.0 -64.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -82.0 -83.0 -84.0 -86.0 -92.0 -93.0 -94.0 -99.0 -102.0 -101.0 -104.0 -106.0 -106.0 -105.0 -112.0 -115.0 -114.0 -119.0 -122.0 -125.0 -120.0 -125.0 -126.0 -131.0 -134.0 -135.0 -134.0 -137.0 -142.0 -142.0 -148.0 -147.0 -152.0 -153.0 -154.0 38 -81.0 -80.0 -78.0 -75.0 -77.0 -75.0 -69.0 -66.0 -68.0 -64.0 -64.0 -58.0 -59.0 -56.0 -55.0 -54.0 -49.0 -49.0 -47.0 -46.0 -44.0 -40.0 -39.0 -39.0 -37.0 -34.0 -30.0 -28.0 -25.0 -24.0 -21.0 -19.0 -19.0 -14.0 -14.0 -14.0 -11.0 -8.0 -3.0 0.0 3.0 2.0 5.0 14.0 6.0 -1.0 -1.0 1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -41.0 -46.0 -47.0 -49.0 -54.0 -55.0 -60.0 -63.0 -64.0 -64.0 -72.0 -71.0 -71.0 -73.0 -76.0 -77.0 -84.0 -85.0 -84.0 -88.0 -92.0 -93.0 -96.0 -101.0 -104.0 -101.0 -104.0 -108.0 -106.0 -105.0 -114.0 -115.0 -116.0 -119.0 -122.0 -124.0 -122.0 -125.0 -128.0 -133.0 -134.0 -135.0 -134.0 -139.0 -142.0 -144.0 -148.0 -147.0 -152.0 -153.0 39 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -46.0 -45.0 -40.0 -37.0 -39.0 -35.0 -32.0 -28.0 -28.0 -27.0 -25.0 -23.0 -19.0 -21.0 -16.0 -14.0 -12.0 -11.0 -8.0 -5.0 -2.0 3.0 0.0 4.0 14.0 4.0 0.0 -1.0 2.0 -3.0 -5.0 -4.0 -7.0 -7.0 -11.0 -8.0 -16.0 -17.0 -18.0 -22.0 -19.0 -23.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -38.0 -41.0 -47.0 -49.0 -49.0 -56.0 -55.0 -60.0 -62.0 -65.0 -64.0 -71.0 -70.0 -71.0 -75.0 -78.0 -77.0 -83.0 -85.0 -86.0 -88.0 -93.0 -95.0 -98.0 -102.0 -105.0 -101.0 -106.0 -108.0 -106.0 -105.0 -114.0 -117.0 -118.0 -119.0 -122.0 -125.0 -122.0 -127.0 -130.0 -133.0 -136.0 -135.0 -134.0 -141.0 -144.0 -146.0 -150.0 -147.0 -152.0 40 -87.0 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -44.0 -45.0 -40.0 -36.0 -37.0 -36.0 -34.0 -28.0 -28.0 -29.0 -23.0 -25.0 -19.0 -22.0 -17.0 -16.0 -14.0 -11.0 -8.0 -6.0 -4.0 1.0 -1.0 4.0 14.0 2.0 -1.0 -2.0 2.0 -1.0 -4.0 -4.0 -7.0 -7.0 -10.0 -8.0 -16.0 -17.0 -16.0 -21.0 -19.0 -21.0 -24.0 -26.0 -29.0 -33.0 -31.0 -35.0 -36.0 -40.0 -43.0 -47.0 -50.0 -51.0 -56.0 -57.0 -61.0 -60.0 -67.0 -64.0 -69.0 -68.0 -73.0 -76.0 -79.0 -79.0 -83.0 -86.0 -86.0 -90.0 -93.0 -94.0 -97.0 -102.0 -103.0 -100.0 -106.0 -108.0 -108.0 -105.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -124.0 -129.0 -130.0 -133.0 -134.0 -137.0 -136.0 -143.0 -146.0 -146.0 -150.0 -147.0 41 -90.0 -87.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -54.0 -49.0 -52.0 -49.0 -44.0 -45.0 -42.0 -34.0 -35.0 -34.0 -33.0 -28.0 -29.0 -28.0 -23.0 -26.0 -19.0 -20.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -5.0 0.0 1.0 6.0 14.0 3.0 1.0 -1.0 2.0 1.0 -2.0 -3.0 -6.0 -5.0 -8.0 -8.0 -14.0 -15.0 -16.0 -21.0 -19.0 -19.0 -22.0 -25.0 -28.0 -31.0 -31.0 -35.0 -36.0 -41.0 -44.0 -45.0 -50.0 -51.0 -54.0 -58.0 -59.0 -60.0 -65.0 -64.0 -67.0 -70.0 -73.0 -74.0 -77.0 -79.0 -83.0 -84.0 -87.0 -90.0 -93.0 -96.0 -99.0 -100.0 -103.0 -100.0 -105.0 -106.0 -108.0 -107.0 -112.0 -113.0 -116.0 -119.0 -120.0 -123.0 -126.0 -127.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -144.0 -145.0 -148.0 42 -93.0 -90.0 -89.0 -88.0 -85.0 -82.0 -81.0 -76.0 -75.0 -74.0 -71.0 -66.0 -67.0 -66.0 -63.0 -58.0 -57.0 -56.0 -57.0 -54.0 -51.0 -52.0 -49.0 -46.0 -46.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -28.0 -25.0 -28.0 -19.0 -20.0 -19.0 -16.0 -13.0 -12.0 -9.0 -8.0 -5.0 0.0 -1.0 8.0 14.0 3.0 1.0 1.0 4.0 3.0 -2.0 -3.0 -4.0 -5.0 -8.0 -8.0 -12.0 -13.0 -18.0 -19.0 -18.0 -19.0 -22.0 -25.0 -28.0 -29.0 -32.0 -33.0 -38.0 -41.0 -42.0 -47.0 -48.0 -51.0 -55.0 -56.0 -57.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -98.0 -103.0 -106.0 -109.0 -107.0 -111.0 -113.0 -117.0 -118.0 -121.0 -124.0 -125.0 -128.0 -129.0 -130.0 -134.0 -138.0 -140.0 -142.0 -143.0 -145.0 43 -96.0 -93.0 -90.0 -91.0 -90.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -51.0 -48.0 -44.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -20.0 -19.0 -16.0 -15.0 -12.0 -9.0 -10.0 -3.0 -2.0 1.0 8.0 14.0 1.0 3.0 3.0 6.0 3.0 -2.0 -1.0 -4.0 -5.0 -8.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -19.0 -22.0 -25.0 -26.0 -29.0 -30.0 -35.0 -38.0 -39.0 -44.0 -45.0 -48.0 -52.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -78.0 -81.0 -84.0 -87.0 -90.0 -91.0 -92.0 -97.0 -98.0 -99.0 -96.0 -103.0 -106.0 -109.0 -107.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 -125.0 -126.0 -127.0 -132.0 -135.0 -138.0 -141.0 -140.0 -143.0 44 -97.0 -96.0 -93.0 -90.0 -91.0 -88.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -50.0 -47.0 -44.0 -41.0 -34.0 -35.0 -36.0 -31.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -18.0 -17.0 -16.0 -15.0 -12.0 -9.0 -8.0 -3.0 -2.0 1.0 8.0 14.0 3.0 5.0 5.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -6.0 -5.0 -10.0 -13.0 -16.0 -17.0 -18.0 -19.0 -22.0 -23.0 -24.0 -29.0 -32.0 -35.0 -38.0 -41.0 -44.0 -47.0 -49.0 -50.0 -51.0 -54.0 -55.0 -56.0 -61.0 -64.0 -67.0 -70.0 -71.0 -74.0 -75.0 -78.0 -81.0 -82.0 -85.0 -90.0 -89.0 -90.0 -95.0 -98.0 -97.0 -96.0 -101.0 -106.0 -107.0 -107.0 -111.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -126.0 -129.0 -132.0 -135.0 -136.0 -139.0 -140.0 45 -100.0 -97.0 -96.0 -93.0 -92.0 -89.0 -88.0 -85.0 -84.0 -79.0 -78.0 -77.0 -76.0 -71.0 -68.0 -71.0 -68.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -53.0 -51.0 -50.0 -47.0 -44.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -30.0 -32.0 -29.0 -24.0 -19.0 -16.0 -19.0 -16.0 -13.0 -14.0 -7.0 -6.0 -5.0 -2.0 1.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 0.0 1.0 -2.0 -3.0 -6.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -20.0 -21.0 -26.0 -29.0 -32.0 -35.0 -38.0 -41.0 -43.0 -46.0 -47.0 -52.0 -49.0 -54.0 -53.0 -58.0 -61.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -78.0 -79.0 -82.0 -85.0 -88.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -105.0 -106.0 -109.0 -112.0 -115.0 -116.0 -117.0 -120.0 -123.0 -126.0 -129.0 -130.0 -135.0 -134.0 -137.0 46 -99.0 -100.0 -95.0 -96.0 -93.0 -92.0 -87.0 -88.0 -83.0 -82.0 -79.0 -78.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -52.0 -49.0 -48.0 -45.0 -42.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -31.0 -30.0 -27.0 -22.0 -17.0 -16.0 -19.0 -14.0 -13.0 -12.0 -5.0 -6.0 -3.0 -2.0 3.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 -2.0 1.0 -2.0 -3.0 -8.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -22.0 -23.0 -26.0 -31.0 -34.0 -37.0 -40.0 -43.0 -43.0 -46.0 -49.0 -52.0 -49.0 -54.0 -53.0 -60.0 -63.0 -66.0 -65.0 -70.0 -71.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -90.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -107.0 -106.0 -111.0 -114.0 -115.0 -116.0 -117.0 -122.0 -123.0 -128.0 -129.0 -130.0 -135.0 -134.0 47 -104.0 -99.0 -100.0 -97.0 -98.0 -93.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -78.0 -77.0 -74.0 -71.0 -68.0 -67.0 -68.0 -63.0 -60.0 -59.0 -60.0 -59.0 -55.0 -50.0 -47.0 -46.0 -45.0 -44.0 -41.0 -36.0 -37.0 -36.0 -35.0 -28.0 -31.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -10.0 -3.0 -4.0 -1.0 0.0 5.0 10.0 14.0 7.0 9.0 9.0 10.0 7.0 0.0 1.0 0.0 -5.0 -6.0 -3.0 -8.0 -9.0 -12.0 -15.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -34.0 -35.0 -38.0 -42.0 -43.0 -44.0 -49.0 -50.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -80.0 -83.0 -82.0 -87.0 -88.0 -87.0 -90.0 -93.0 -96.0 -95.0 -96.0 -101.0 -104.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -117.0 -122.0 -125.0 -128.0 -129.0 -130.0 -133.0 48 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -62.0 -60.0 -53.0 -50.0 -47.0 -48.0 -45.0 -44.0 -41.0 -36.0 -39.0 -38.0 -35.0 -28.0 -33.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -8.0 -3.0 -4.0 -3.0 2.0 5.0 10.0 14.0 5.0 11.0 9.0 10.0 7.0 2.0 3.0 -2.0 -3.0 -4.0 -3.0 -8.0 -9.0 -12.0 -13.0 -16.0 -17.0 -22.0 -25.0 -26.0 -31.0 -32.0 -35.0 -40.0 -40.0 -41.0 -44.0 -47.0 -48.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -68.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -85.0 -86.0 -87.0 -90.0 -93.0 -96.0 -93.0 -96.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -128.0 -127.0 -130.0 49 -106.0 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -89.0 -86.0 -81.0 -82.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -58.0 -53.0 -50.0 -47.0 -48.0 -45.0 -42.0 -41.0 -38.0 -39.0 -40.0 -35.0 -28.0 -31.0 -28.0 -27.0 -24.0 -17.0 -16.0 -15.0 -16.0 -11.0 -8.0 -3.0 -4.0 -1.0 2.0 7.0 10.0 14.0 7.0 11.0 9.0 10.0 9.0 4.0 3.0 0.0 -3.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -16.0 -19.0 -20.0 -25.0 -26.0 -31.0 -34.0 -36.0 -39.0 -38.0 -41.0 -42.0 -45.0 -48.0 -49.0 -54.0 -57.0 -58.0 -59.0 -60.0 -65.0 -66.0 -71.0 -74.0 -77.0 -78.0 -81.0 -82.0 -83.0 -84.0 -87.0 -90.0 -93.0 -94.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -109.0 -110.0 -113.0 -116.0 -117.0 -122.0 -125.0 -126.0 -127.0 50 -111.0 -106.0 -105.0 -104.0 -101.0 -102.0 -97.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -56.0 -51.0 -48.0 -47.0 -48.0 -43.0 -42.0 -39.0 -38.0 -39.0 -38.0 -33.0 -28.0 -29.0 -28.0 -27.0 -22.0 -17.0 -16.0 -13.0 -14.0 -9.0 -6.0 -1.0 -2.0 -1.0 4.0 9.0 12.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -1.0 -4.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -22.0 -25.0 -28.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -40.0 -45.0 -48.0 -51.0 -54.0 -55.0 -58.0 -59.0 -62.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -79.0 -80.0 -81.0 -82.0 -85.0 -90.0 -91.0 -92.0 -95.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -110.0 -113.0 -116.0 -119.0 -122.0 -123.0 -124.0 51 -112.0 -111.0 -104.0 -105.0 -104.0 -101.0 -100.0 -97.0 -94.0 -91.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -78.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -59.0 -54.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -39.0 -36.0 -31.0 -26.0 -29.0 -28.0 -25.0 -22.0 -17.0 -14.0 -13.0 -12.0 -7.0 -4.0 -1.0 -2.0 1.0 6.0 11.0 14.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -42.0 -47.0 -50.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -91.0 -94.0 -95.0 -98.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -115.0 -118.0 -121.0 -122.0 -123.0 52 -113.0 -112.0 -109.0 -104.0 -105.0 -104.0 -99.0 -100.0 -95.0 -92.0 -91.0 -90.0 -89.0 -82.0 -81.0 -80.0 -81.0 -76.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -63.0 -61.0 -59.0 -57.0 -52.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -37.0 -34.0 -29.0 -26.0 -29.0 -26.0 -25.0 -20.0 -15.0 -14.0 -11.0 -10.0 -5.0 -4.0 -1.0 0.0 3.0 8.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -9.0 -12.0 -17.0 -20.0 -23.0 -25.0 -29.0 -31.0 -30.0 -35.0 -34.0 -37.0 -36.0 -41.0 -42.0 -49.0 -52.0 -53.0 -56.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -104.0 -105.0 -108.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 53 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -76.0 -75.0 -76.0 -71.0 -68.0 -71.0 -66.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -29.0 -26.0 -23.0 -18.0 -15.0 -12.0 -9.0 -8.0 -7.0 -4.0 1.0 2.0 5.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -7.0 -6.0 -11.0 -14.0 -17.0 -22.0 -23.0 -25.0 -31.0 -31.0 -30.0 -35.0 -34.0 -37.0 -38.0 -43.0 -42.0 -49.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -66.0 -67.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -82.0 -81.0 -82.0 -87.0 -92.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -105.0 -110.0 -113.0 -116.0 -115.0 -118.0 -121.0 54 -117.0 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -69.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -36.0 -33.0 -34.0 -29.0 -26.0 -29.0 -24.0 -23.0 -16.0 -15.0 -12.0 -9.0 -6.0 -7.0 -2.0 1.0 2.0 7.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -8.0 -13.0 -14.0 -19.0 -22.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -39.0 -40.0 -43.0 -42.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -63.0 -66.0 -67.0 -70.0 -69.0 -74.0 -75.0 -76.0 -81.0 -84.0 -81.0 -82.0 -87.0 -90.0 -93.0 -96.0 -97.0 -98.0 -101.0 -102.0 -107.0 -110.0 -111.0 -116.0 -113.0 -118.0 55 -116.0 -117.0 -112.0 -113.0 -112.0 -109.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -68.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -37.0 -34.0 -33.0 -34.0 -29.0 -26.0 -27.0 -24.0 -21.0 -16.0 -15.0 -12.0 -7.0 -6.0 -5.0 -2.0 1.0 4.0 7.0 10.0 13.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -10.0 -15.0 -16.0 -21.0 -24.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -41.0 -42.0 -45.0 -42.0 -51.0 -52.0 -53.0 -58.0 -61.0 -64.0 -61.0 -66.0 -69.0 -70.0 -69.0 -74.0 -75.0 -78.0 -79.0 -84.0 -81.0 -84.0 -87.0 -92.0 -95.0 -96.0 -97.0 -98.0 -103.0 -102.0 -109.0 -110.0 -111.0 -116.0 -113.0 56 -121.0 -116.0 -117.0 -114.0 -113.0 -110.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -93.0 -94.0 -91.0 -90.0 -87.0 -82.0 -83.0 -80.0 -81.0 -76.0 -75.0 -76.0 -73.0 -68.0 -66.0 -63.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -39.0 -36.0 -33.0 -34.0 -31.0 -26.0 -27.0 -22.0 -19.0 -14.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 3.0 4.0 7.0 8.0 11.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 0.0 -3.0 -8.0 -9.0 -10.0 -17.0 -16.0 -21.0 -25.0 -24.0 -25.0 -32.0 -31.0 -30.0 -37.0 -36.0 -41.0 -42.0 -45.0 -44.0 -49.0 -52.0 -55.0 -58.0 -61.0 -64.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -77.0 -80.0 -79.0 -82.0 -83.0 -84.0 -89.0 -92.0 -93.0 -96.0 -97.0 -98.0 -103.0 -104.0 -109.0 -110.0 -111.0 -114.0 57 -124.0 -123.0 -118.0 -117.0 -116.0 -111.0 -112.0 -111.0 -106.0 -103.0 -104.0 -101.0 -98.0 -93.0 -94.0 -93.0 -92.0 -89.0 -82.0 -83.0 -82.0 -81.0 -78.0 -75.0 -74.0 -74.0 -70.0 -68.0 -63.0 -60.0 -63.0 -58.0 -59.0 -52.0 -55.0 -52.0 -49.0 -48.0 -43.0 -40.0 -41.0 -36.0 -33.0 -36.0 -31.0 -26.0 -27.0 -24.0 -21.0 -14.0 -11.0 -14.0 -11.0 -6.0 -3.0 -2.0 1.0 4.0 5.0 8.0 9.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 -2.0 -5.0 -8.0 -11.0 -12.0 -17.0 -17.0 -23.0 -23.0 -26.0 -25.0 -30.0 -29.0 -32.0 -37.0 -38.0 -41.0 -42.0 -47.0 -44.0 -51.0 -54.0 -55.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -79.0 -80.0 -79.0 -82.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -105.0 -104.0 -111.0 -110.0 -111.0 58 -123.0 -126.0 -121.0 -118.0 -117.0 -116.0 -109.0 -112.0 -109.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -89.0 -84.0 -83.0 -82.0 -83.0 -78.0 -75.0 -73.0 -72.0 -71.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -55.0 -54.0 -51.0 -46.0 -41.0 -40.0 -43.0 -36.0 -33.0 -34.0 -29.0 -26.0 -25.0 -24.0 -21.0 -14.0 -11.0 -12.0 -9.0 -4.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 11.0 4.0 3.0 -2.0 -7.0 -10.0 -13.0 -14.0 -19.0 -17.0 -24.0 -23.0 -26.0 -25.0 -30.0 -29.0 -34.0 -39.0 -40.0 -41.0 -44.0 -47.0 -44.0 -53.0 -56.0 -57.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -71.0 -72.0 -79.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -93.0 -98.0 -99.0 -102.0 -105.0 -104.0 -111.0 -110.0 59 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -90.0 -87.0 -84.0 -83.0 -82.0 -83.0 -78.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -52.0 -49.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -32.0 -27.0 -24.0 -23.0 -22.0 -19.0 -14.0 -11.0 -10.0 -7.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 9.0 4.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -17.0 -22.0 -23.0 -26.0 -25.0 -30.0 -31.0 -34.0 -37.0 -40.0 -43.0 -44.0 -47.0 -46.0 -53.0 -56.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -69.0 -72.0 -71.0 -72.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -93.0 -98.0 -101.0 -104.0 -105.0 -104.0 -109.0 60 -129.0 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -88.0 -87.0 -84.0 -83.0 -82.0 -81.0 -77.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -30.0 -27.0 -24.0 -23.0 -20.0 -19.0 -14.0 -11.0 -10.0 -5.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 13.0 10.0 9.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -15.0 -20.0 -17.0 -22.0 -23.0 -26.0 -27.0 -32.0 -31.0 -34.0 -37.0 -42.0 -43.0 -46.0 -49.0 -48.0 -55.0 -58.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -71.0 -74.0 -71.0 -72.0 -79.0 -80.0 -83.0 -86.0 -87.0 -90.0 -91.0 -92.0 -95.0 -100.0 -101.0 -106.0 -105.0 -104.0 61 -132.0 -131.0 -128.0 -123.0 -126.0 -123.0 -120.0 -119.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -95.0 -92.0 -93.0 -90.0 -87.0 -86.0 -85.0 -84.0 -82.0 -79.0 -76.0 -71.0 -70.0 -71.0 -66.0 -67.0 -60.0 -63.0 -62.0 -59.0 -54.0 -53.0 -50.0 -49.0 -48.0 -43.0 -42.0 -41.0 -36.0 -35.0 -32.0 -29.0 -24.0 -23.0 -22.0 -19.0 -16.0 -13.0 -10.0 -7.0 -4.0 -3.0 -2.0 -3.0 4.0 3.0 4.0 7.0 12.0 9.0 8.0 11.0 14.0 8.0 7.0 0.0 -3.0 -6.0 -9.0 -12.0 -13.0 -15.0 -18.0 -17.0 -22.0 -21.0 -26.0 -29.0 -30.0 -33.0 -34.0 -39.0 -40.0 -43.0 -46.0 -47.0 -48.0 -55.0 -56.0 -57.0 -62.0 -61.0 -64.0 -61.0 -66.0 -69.0 -72.0 -71.0 -74.0 -77.0 -80.0 -83.0 -84.0 -87.0 -88.0 -91.0 -94.0 -97.0 -100.0 -99.0 -104.0 -105.0 62 -135.0 -132.0 -131.0 -130.0 -125.0 -124.0 -123.0 -120.0 -117.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -97.0 -92.0 -95.0 -92.0 -87.0 -88.0 -87.0 -83.0 -80.0 -77.0 -76.0 -73.0 -72.0 -71.0 -66.0 -67.0 -62.0 -63.0 -60.0 -59.0 -56.0 -53.0 -52.0 -49.0 -48.0 -45.0 -42.0 -41.0 -36.0 -33.0 -30.0 -29.0 -26.0 -25.0 -20.0 -17.0 -16.0 -11.0 -10.0 -7.0 -6.0 -5.0 -2.0 -5.0 2.0 3.0 4.0 7.0 12.0 7.0 6.0 9.0 14.0 6.0 5.0 0.0 -5.0 -6.0 -9.0 -14.0 -14.0 -15.0 -18.0 -17.0 -22.0 -23.0 -28.0 -29.0 -30.0 -33.0 -36.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -57.0 -56.0 -57.0 -62.0 -61.0 -64.0 -63.0 -66.0 -69.0 -72.0 -71.0 -74.0 -79.0 -82.0 -83.0 -84.0 -87.0 -88.0 -93.0 -96.0 -99.0 -102.0 -99.0 -104.0 63 -136.0 -137.0 -132.0 -133.0 -132.0 -127.0 -124.0 -125.0 -122.0 -119.0 -118.0 -111.0 -114.0 -111.0 -110.0 -105.0 -106.0 -103.0 -100.0 -99.0 -92.0 -97.0 -94.0 -89.0 -90.0 -88.0 -85.0 -82.0 -79.0 -78.0 -73.0 -74.0 -73.0 -68.0 -69.0 -64.0 -65.0 -62.0 -57.0 -54.0 -53.0 -54.0 -49.0 -48.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -27.0 -26.0 -25.0 -22.0 -19.0 -16.0 -13.0 -12.0 -7.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 2.0 5.0 12.0 8.0 6.0 7.0 14.0 4.0 3.0 -2.0 -6.0 -8.0 -9.0 -14.0 -16.0 -15.0 -17.0 -17.0 -21.0 -25.0 -29.0 -31.0 -30.0 -33.0 -36.0 -38.0 -43.0 -46.0 -49.0 -49.0 -50.0 -56.0 -55.0 -57.0 -61.0 -61.0 -63.0 -63.0 -66.0 -69.0 -73.0 -71.0 -76.0 -78.0 -81.0 -82.0 -83.0 -88.0 -88.0 -94.0 -95.0 -98.0 -101.0 -99.0 64 -141.0 -138.0 -137.0 -134.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -113.0 -114.0 -113.0 -112.0 -107.0 -106.0 -105.0 -102.0 -101.0 -94.0 -98.0 -94.0 -89.0 -91.0 -88.0 -85.0 -82.0 -81.0 -80.0 -75.0 -76.0 -73.0 -68.0 -71.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -54.0 -51.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -29.0 -28.0 -25.0 -20.0 -19.0 -18.0 -15.0 -14.0 -9.0 -10.0 -9.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 10.0 6.0 6.0 6.0 14.0 3.0 3.0 -3.0 -5.0 -9.0 -10.0 -14.0 -15.0 -15.0 -17.0 -19.0 -21.0 -26.0 -29.0 -30.0 -30.0 -32.0 -37.0 -38.0 -43.0 -46.0 -49.0 -51.0 -50.0 -56.0 -55.0 -57.0 -59.0 -62.0 -61.0 -63.0 -65.0 -68.0 -71.0 -71.0 -75.0 -76.0 -81.0 -82.0 -85.0 -88.0 -88.0 -94.0 -95.0 -98.0 -99.0 65 -144.0 -141.0 -140.0 -139.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -113.0 -110.0 -107.0 -108.0 -103.0 -104.0 -101.0 -94.0 -99.0 -96.0 -89.0 -89.0 -86.0 -85.0 -84.0 -83.0 -80.0 -75.0 -76.0 -75.0 -68.0 -69.0 -68.0 -65.0 -62.0 -61.0 -56.0 -57.0 -56.0 -51.0 -50.0 -45.0 -42.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -17.0 -16.0 -9.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 8.0 6.0 4.0 4.0 14.0 1.0 3.0 -3.0 -5.0 -10.0 -10.0 -14.0 -15.0 -15.0 -17.0 -21.0 -21.0 -26.0 -29.0 -30.0 -30.0 -34.0 -39.0 -40.0 -45.0 -48.0 -51.0 -51.0 -50.0 -56.0 -55.0 -57.0 -61.0 -64.0 -61.0 -63.0 -67.0 -68.0 -73.0 -71.0 -75.0 -78.0 -81.0 -82.0 -87.0 -90.0 -90.0 -96.0 -95.0 -98.0 66 -147.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -109.0 -108.0 -105.0 -104.0 -103.0 -94.0 -97.0 -97.0 -91.0 -91.0 -88.0 -87.0 -86.0 -83.0 -82.0 -77.0 -76.0 -77.0 -70.0 -69.0 -68.0 -65.0 -64.0 -63.0 -58.0 -59.0 -56.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -37.0 -34.0 -31.0 -26.0 -21.0 -22.0 -21.0 -20.0 -19.0 -18.0 -11.0 -14.0 -13.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 6.0 4.0 4.0 2.0 14.0 1.0 1.0 -5.0 -3.0 -10.0 -10.0 -12.0 -13.0 -16.0 -15.0 -22.0 -23.0 -26.0 -27.0 -28.0 -32.0 -34.0 -39.0 -42.0 -43.0 -46.0 -49.0 -50.0 -50.0 -54.0 -55.0 -58.0 -59.0 -62.0 -61.0 -63.0 -67.0 -68.0 -71.0 -71.0 -77.0 -78.0 -81.0 -84.0 -85.0 -88.0 -90.0 -94.0 -95.0 67 -150.0 -147.0 -146.0 -145.0 -144.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -113.0 -114.0 -109.0 -110.0 -107.0 -104.0 -103.0 -96.0 -97.0 -95.0 -91.0 -91.0 -90.0 -89.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -68.0 -67.0 -64.0 -63.0 -60.0 -57.0 -56.0 -51.0 -48.0 -45.0 -44.0 -41.0 -40.0 -35.0 -32.0 -31.0 -26.0 -21.0 -22.0 -23.0 -22.0 -19.0 -18.0 -13.0 -14.0 -11.0 -8.0 -7.0 -6.0 -3.0 -2.0 1.0 4.0 2.0 4.0 1.0 14.0 3.0 0.0 -4.0 -1.0 -8.0 -9.0 -10.0 -13.0 -16.0 -15.0 -20.0 -23.0 -26.0 -27.0 -30.0 -33.0 -36.0 -39.0 -42.0 -41.0 -44.0 -47.0 -48.0 -49.0 -52.0 -55.0 -56.0 -57.0 -60.0 -63.0 -63.0 -67.0 -70.0 -71.0 -73.0 -75.0 -76.0 -81.0 -84.0 -87.0 -86.0 -89.0 -92.0 68 -153.0 -150.0 -149.0 -148.0 -147.0 -142.0 -141.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -124.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -111.0 -110.0 -107.0 -106.0 -103.0 -96.0 -97.0 -95.0 -93.0 -91.0 -92.0 -89.0 -86.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -70.0 -67.0 -66.0 -65.0 -60.0 -59.0 -54.0 -51.0 -48.0 -47.0 -44.0 -43.0 -38.0 -35.0 -34.0 -29.0 -26.0 -21.0 -24.0 -25.0 -22.0 -21.0 -20.0 -13.0 -14.0 -11.0 -8.0 -8.0 -6.0 -5.0 -2.0 -1.0 2.0 2.0 2.0 3.0 14.0 2.0 1.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -27.0 -30.0 -33.0 -36.0 -37.0 -42.0 -39.0 -42.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -72.0 -73.0 -78.0 -81.0 -84.0 -87.0 -84.0 -89.0 69 -154.0 -155.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -140.0 -137.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -120.0 -119.0 -118.0 -117.0 -112.0 -113.0 -112.0 -109.0 -106.0 -105.0 -98.0 -99.0 -97.0 -95.0 -91.0 -92.0 -91.0 -88.0 -87.0 -86.0 -81.0 -78.0 -75.0 -72.0 -71.0 -72.0 -67.0 -66.0 -65.0 -62.0 -57.0 -56.0 -53.0 -50.0 -45.0 -44.0 -43.0 -40.0 -37.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -24.0 -21.0 -22.0 -15.0 -16.0 -13.0 -8.0 -6.0 -8.0 -7.0 -2.0 -3.0 0.0 0.0 0.0 1.0 14.0 4.0 3.0 -2.0 1.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -20.0 -21.0 -22.0 -27.0 -30.0 -33.0 -34.0 -35.0 -40.0 -37.0 -40.0 -43.0 -46.0 -49.0 -50.0 -53.0 -54.0 -57.0 -56.0 -61.0 -64.0 -65.0 -66.0 -67.0 -72.0 -73.0 -78.0 -79.0 -82.0 -85.0 -84.0 70 -159.0 -156.0 -155.0 -150.0 -153.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -125.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -108.0 -103.0 -98.0 -98.0 -97.0 -97.0 -91.0 -94.0 -89.0 -90.0 -87.0 -86.0 -83.0 -80.0 -77.0 -72.0 -73.0 -72.0 -67.0 -68.0 -63.0 -62.0 -55.0 -56.0 -51.0 -50.0 -47.0 -46.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -21.0 -28.0 -25.0 -26.0 -22.0 -20.0 -15.0 -18.0 -14.0 -10.0 -6.0 -10.0 -9.0 -4.0 -5.0 0.0 -2.0 -2.0 1.0 14.0 6.0 5.0 0.0 1.0 -4.0 -7.0 -10.0 -13.0 -14.0 -17.0 -18.0 -21.0 -24.0 -25.0 -28.0 -31.0 -36.0 -35.0 -40.0 -37.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -66.0 -69.0 -72.0 -75.0 -78.0 -79.0 -82.0 -83.0 71 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -84.0 -81.0 -80.0 -77.0 -72.0 -75.0 -74.0 -67.0 -68.0 -63.0 -60.0 -53.0 -54.0 -53.0 -52.0 -47.0 -44.0 -43.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -30.0 -27.0 -26.0 -22.0 -18.0 -15.0 -18.0 -12.0 -10.0 -6.0 -12.0 -11.0 -4.0 -7.0 0.0 -2.0 0.0 1.0 14.0 8.0 5.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -14.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -29.0 -34.0 -37.0 -38.0 -35.0 -38.0 -43.0 -46.0 -45.0 -48.0 -51.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -64.0 -69.0 -72.0 -75.0 -76.0 -77.0 -80.0 72 -161.0 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -118.0 -119.0 -112.0 -113.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -82.0 -79.0 -80.0 -77.0 -72.0 -75.0 -72.0 -67.0 -66.0 -63.0 -60.0 -53.0 -52.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -29.0 -27.0 -26.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -11.0 -4.0 -7.0 0.0 -2.0 2.0 3.0 14.0 10.0 7.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -27.0 -28.0 -27.0 -32.0 -35.0 -36.0 -35.0 -36.0 -43.0 -44.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -60.0 -63.0 -66.0 -69.0 -72.0 -73.0 -74.0 -77.0 73 -162.0 -161.0 -158.0 -159.0 -156.0 -155.0 -150.0 -151.0 -148.0 -145.0 -142.0 -141.0 -138.0 -137.0 -134.0 -135.0 -130.0 -129.0 -128.0 -123.0 -122.0 -119.0 -118.0 -117.0 -112.0 -113.0 -110.0 -108.0 -105.0 -102.0 -98.0 -100.0 -97.0 -96.0 -91.0 -94.0 -91.0 -88.0 -83.0 -80.0 -79.0 -80.0 -75.0 -72.0 -73.0 -70.0 -67.0 -64.0 -61.0 -58.0 -53.0 -52.0 -51.0 -48.0 -45.0 -42.0 -41.0 -38.0 -35.0 -36.0 -33.0 -30.0 -21.0 -27.0 -27.0 -24.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -9.0 -4.0 -7.0 0.0 -1.0 2.0 5.0 14.0 12.0 7.0 2.0 -1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -15.0 -18.0 -21.0 -22.0 -25.0 -26.0 -27.0 -30.0 -33.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -44.0 -49.0 -52.0 -53.0 -52.0 -55.0 -60.0 -61.0 -66.0 -67.0 -70.0 -71.0 -72.0 74 -165.0 -164.0 -159.0 -158.0 -161.0 -156.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -137.0 -136.0 -133.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -113.0 -111.0 -108.0 -107.0 -102.0 -100.0 -100.0 -97.0 -98.0 -93.0 -94.0 -91.0 -86.0 -83.0 -80.0 -81.0 -78.0 -75.0 -74.0 -73.0 -70.0 -67.0 -64.0 -61.0 -56.0 -53.0 -54.0 -50.0 -47.0 -45.0 -44.0 -43.0 -38.0 -37.0 -36.0 -33.0 -28.0 -21.0 -27.0 -27.0 -26.0 -20.0 -18.0 -17.0 -18.0 -12.0 -12.0 -6.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 2.0 7.0 13.0 14.0 5.0 2.0 -1.0 0.0 -3.0 -6.0 -7.0 -12.0 -15.0 -18.0 -19.0 -22.0 -25.0 -24.0 -27.0 -30.0 -31.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 -57.0 -58.0 -63.0 -64.0 -67.0 -70.0 -69.0 75 -166.0 -167.0 -166.0 -159.0 -158.0 -159.0 -154.0 -153.0 -152.0 -149.0 -148.0 -143.0 -144.0 -139.0 -138.0 -137.0 -136.0 -131.0 -132.0 -127.0 -128.0 -123.0 -126.0 -121.0 -116.0 -117.0 -114.0 -114.0 -111.0 -110.0 -107.0 -102.0 -100.0 -98.0 -97.0 -99.0 -93.0 -92.0 -91.0 -86.0 -84.0 -82.0 -83.0 -79.0 -77.0 -75.0 -72.0 -69.0 -67.0 -64.0 -60.0 -56.0 -54.0 -54.0 -48.0 -45.0 -46.0 -46.0 -45.0 -39.0 -39.0 -36.0 -32.0 -29.0 -21.0 -28.0 -29.0 -26.0 -20.0 -19.0 -19.0 -18.0 -12.0 -14.0 -6.0 -13.0 -13.0 -8.0 -6.0 -4.0 0.0 2.0 5.0 13.0 14.0 3.0 0.0 -1.0 0.0 -3.0 -8.0 -7.0 -14.0 -17.0 -20.0 -21.0 -22.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -52.0 -51.0 -54.0 -59.0 -58.0 -63.0 -64.0 -67.0 -70.0 76 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -126.0 -123.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -110.0 -105.0 -102.0 -100.0 -98.0 -97.0 -97.0 -93.0 -93.0 -90.0 -86.0 -84.0 -83.0 -84.0 -79.0 -78.0 -73.0 -70.0 -67.0 -66.0 -63.0 -60.0 -56.0 -54.0 -53.0 -48.0 -45.0 -46.0 -47.0 -44.0 -39.0 -38.0 -35.0 -30.0 -29.0 -21.0 -28.0 -28.0 -25.0 -20.0 -19.0 -20.0 -19.0 -12.0 -15.0 -6.0 -12.0 -12.0 -9.0 -4.0 -3.0 2.0 3.0 4.0 13.0 14.0 3.0 0.0 -3.0 0.0 -5.0 -10.0 -9.0 -16.0 -19.0 -22.0 -21.0 -24.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -44.0 -43.0 -46.0 -49.0 -52.0 -51.0 -56.0 -61.0 -60.0 -63.0 -64.0 -67.0 77 -172.0 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -113.0 -108.0 -105.0 -104.0 -100.0 -98.0 -97.0 -97.0 -91.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -81.0 -76.0 -73.0 -70.0 -67.0 -64.0 -64.0 -58.0 -56.0 -56.0 -51.0 -48.0 -45.0 -47.0 -47.0 -42.0 -39.0 -38.0 -33.0 -30.0 -29.0 -21.0 -28.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -14.0 -12.0 -7.0 -4.0 -3.0 4.0 1.0 2.0 13.0 14.0 3.0 0.0 -1.0 -2.0 -7.0 -10.0 -9.0 -16.0 -19.0 -20.0 -21.0 -24.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -35.0 -36.0 -41.0 -44.0 -43.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -62.0 -61.0 -64.0 78 -171.0 -172.0 -167.0 -166.0 -167.0 -164.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -108.0 -105.0 -104.0 -100.0 -98.0 -98.0 -95.0 -89.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -79.0 -76.0 -73.0 -70.0 -65.0 -64.0 -62.0 -58.0 -56.0 -54.0 -51.0 -48.0 -45.0 -47.0 -45.0 -42.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -12.0 -10.0 -7.0 -2.0 -1.0 4.0 1.0 2.0 13.0 14.0 5.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -22.0 -23.0 -26.0 -25.0 -26.0 -31.0 -34.0 -33.0 -34.0 -39.0 -42.0 -43.0 -44.0 -49.0 -50.0 -55.0 -56.0 -59.0 -62.0 -61.0 79 -174.0 -173.0 -172.0 -167.0 -166.0 -167.0 -164.0 -161.0 -160.0 -157.0 -156.0 -151.0 -152.0 -149.0 -148.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -130.0 -123.0 -124.0 -125.0 -122.0 -120.0 -116.0 -115.0 -113.0 -112.0 -111.0 -106.0 -105.0 -104.0 -99.0 -96.0 -98.0 -95.0 -89.0 -91.0 -90.0 -86.0 -84.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -65.0 -64.0 -60.0 -56.0 -54.0 -54.0 -51.0 -48.0 -45.0 -45.0 -43.0 -40.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -26.0 -25.0 -20.0 -21.0 -18.0 -19.0 -14.0 -13.0 -6.0 -10.0 -8.0 -5.0 -2.0 -1.0 4.0 1.0 4.0 13.0 14.0 7.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -20.0 -23.0 -26.0 -25.0 -24.0 -29.0 -32.0 -33.0 -32.0 -37.0 -42.0 -43.0 -46.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 80 -177.0 -174.0 -175.0 -174.0 -167.0 -166.0 -167.0 -166.0 -161.0 -160.0 -159.0 -154.0 -153.0 -150.0 -149.0 -150.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -128.0 -123.0 -126.0 -123.0 -123.0 -118.0 -116.0 -117.0 -111.0 -114.0 -109.0 -106.0 -107.0 -104.0 -97.0 -96.0 -96.0 -96.0 -89.0 -91.0 -92.0 -86.0 -85.0 -83.0 -80.0 -77.0 -72.0 -69.0 -69.0 -67.0 -63.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -43.0 -43.0 -40.0 -39.0 -37.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -17.0 -16.0 -13.0 -8.0 -9.0 -8.0 -3.0 -4.0 -1.0 2.0 3.0 3.0 13.0 14.0 5.0 4.0 -1.0 -2.0 -7.0 -8.0 -7.0 -12.0 -15.0 -16.0 -17.0 -18.0 -23.0 -24.0 -23.0 -24.0 -29.0 -30.0 -33.0 -32.0 -37.0 -40.0 -43.0 -46.0 -47.0 -52.0 -53.0 -54.0 -57.0 81 -178.0 -177.0 -172.0 -175.0 -174.0 -167.0 -164.0 -167.0 -164.0 -159.0 -160.0 -157.0 -154.0 -153.0 -150.0 -149.0 -148.0 -145.0 -144.0 -139.0 -138.0 -135.0 -134.0 -133.0 -128.0 -123.0 -126.0 -122.0 -121.0 -118.0 -116.0 -116.0 -111.0 -112.0 -109.0 -106.0 -108.0 -102.0 -97.0 -94.0 -96.0 -96.0 -89.0 -91.0 -90.0 -84.0 -83.0 -81.0 -78.0 -75.0 -70.0 -69.0 -67.0 -65.0 -61.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -41.0 -41.0 -40.0 -39.0 -35.0 -31.0 -28.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -15.0 -14.0 -13.0 -8.0 -7.0 -6.0 -3.0 -4.0 -1.0 2.0 4.0 5.0 13.0 14.0 5.0 2.0 -1.0 0.0 -5.0 -6.0 -5.0 -10.0 -13.0 -14.0 -17.0 -16.0 -21.0 -22.0 -23.0 -24.0 -29.0 -32.0 -33.0 -32.0 -35.0 -40.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 82 -179.0 -178.0 -175.0 -172.0 -175.0 -172.0 -167.0 -164.0 -165.0 -162.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -123.0 -125.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -109.0 -106.0 -107.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -92.0 -89.0 -82.0 -81.0 -81.0 -78.0 -73.0 -70.0 -71.0 -65.0 -64.0 -59.0 -58.0 -57.0 -54.0 -55.0 -53.0 -50.0 -45.0 -41.0 -42.0 -42.0 -38.0 -33.0 -31.0 -30.0 -31.0 -21.0 -28.0 -30.0 -27.0 -24.0 -23.0 -18.0 -17.0 -16.0 -15.0 -8.0 -9.0 -6.0 -5.0 -6.0 -3.0 2.0 2.0 5.0 14.0 12.0 5.0 2.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -11.0 -14.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -30.0 -31.0 -32.0 -37.0 -38.0 -43.0 -44.0 -47.0 -50.0 -49.0 83 -182.0 -179.0 -178.0 -175.0 -172.0 -173.0 -170.0 -167.0 -164.0 -163.0 -162.0 -157.0 -158.0 -155.0 -154.0 -153.0 -148.0 -145.0 -146.0 -143.0 -142.0 -139.0 -138.0 -133.0 -130.0 -131.0 -126.0 -122.0 -123.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -107.0 -104.0 -105.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -90.0 -87.0 -80.0 -79.0 -80.0 -77.0 -74.0 -71.0 -70.0 -63.0 -62.0 -59.0 -58.0 -57.0 -54.0 -53.0 -52.0 -49.0 -46.0 -41.0 -42.0 -41.0 -36.0 -33.0 -33.0 -32.0 -32.0 -21.0 -28.0 -28.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -11.0 -6.0 -7.0 -6.0 -4.0 2.0 4.0 5.0 14.0 10.0 3.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -32.0 -31.0 -34.0 -39.0 -38.0 -45.0 -46.0 -47.0 -50.0 84 -183.0 -182.0 -179.0 -178.0 -175.0 -174.0 -173.0 -172.0 -167.0 -162.0 -165.0 -162.0 -157.0 -156.0 -157.0 -156.0 -153.0 -146.0 -145.0 -146.0 -143.0 -140.0 -141.0 -138.0 -135.0 -130.0 -131.0 -125.0 -120.0 -123.0 -120.0 -119.0 -118.0 -115.0 -116.0 -109.0 -110.0 -105.0 -104.0 -103.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -88.0 -85.0 -78.0 -77.0 -78.0 -77.0 -74.0 -71.0 -68.0 -63.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -50.0 -47.0 -46.0 -41.0 -40.0 -39.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -26.0 -29.0 -29.0 -26.0 -21.0 -21.0 -19.0 -18.0 -13.0 -12.0 -13.0 -8.0 -9.0 -7.0 -4.0 0.0 2.0 5.0 14.0 10.0 1.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -15.0 -16.0 -15.0 -18.0 -19.0 -24.0 -21.0 -26.0 -29.0 -32.0 -33.0 -36.0 -41.0 -40.0 -45.0 -46.0 -47.0 85 -182.0 -183.0 -180.0 -179.0 -178.0 -175.0 -174.0 -173.0 -170.0 -165.0 -162.0 -163.0 -162.0 -157.0 -156.0 -157.0 -154.0 -151.0 -146.0 -145.0 -146.0 -141.0 -140.0 -139.0 -136.0 -135.0 -130.0 -130.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -102.0 -103.0 -100.0 -97.0 -94.0 -97.0 -92.0 -89.0 -88.0 -83.0 -76.0 -77.0 -78.0 -75.0 -72.0 -69.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -50.0 -51.0 -48.0 -47.0 -46.0 -39.0 -38.0 -37.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -26.0 -29.0 -29.0 -24.0 -22.0 -21.0 -21.0 -16.0 -15.0 -14.0 -15.0 -10.0 -10.0 -7.0 -3.0 -1.0 2.0 5.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -4.0 -5.0 -12.0 -13.0 -14.0 -15.0 -18.0 -21.0 -24.0 -21.0 -26.0 -29.0 -32.0 -35.0 -36.0 -41.0 -40.0 -43.0 -46.0 86 -185.0 -182.0 -181.0 -180.0 -179.0 -178.0 -173.0 -174.0 -171.0 -168.0 -165.0 -162.0 -163.0 -160.0 -157.0 -156.0 -155.0 -152.0 -151.0 -146.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -133.0 -129.0 -128.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -114.0 -107.0 -106.0 -101.0 -102.0 -103.0 -98.0 -97.0 -94.0 -95.0 -92.0 -87.0 -86.0 -81.0 -76.0 -77.0 -76.0 -73.0 -70.0 -67.0 -66.0 -63.0 -62.0 -57.0 -56.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -37.0 -36.0 -37.0 -34.0 -33.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -27.0 -26.0 -22.0 -21.0 -21.0 -16.0 -16.0 -16.0 -15.0 -10.0 -10.0 -7.0 -1.0 1.0 1.0 3.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -6.0 -5.0 -12.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -21.0 -26.0 -31.0 -32.0 -37.0 -36.0 -41.0 -40.0 -43.0 87 -182.0 -186.0 -180.0 -183.0 -180.0 -181.0 -176.0 -173.0 -172.0 -169.0 -170.0 -165.0 -162.0 -163.0 -160.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -147.0 -146.0 -143.0 -140.0 -139.0 -136.0 -132.0 -127.0 -130.0 -123.0 -122.0 -123.0 -118.0 -121.0 -118.0 -115.0 -112.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -97.0 -92.0 -93.0 -90.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -68.0 -67.0 -66.0 -63.0 -62.0 -55.0 -54.0 -51.0 -50.0 -51.0 -48.0 -45.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -27.0 -27.0 -27.0 -22.0 -21.0 -21.0 -18.0 -16.0 -18.0 -14.0 -11.0 -9.0 -5.0 -1.0 1.0 1.0 3.0 14.0 10.0 3.0 2.0 1.0 2.0 -5.0 -6.0 -5.0 -10.0 -13.0 -12.0 -17.0 -20.0 -21.0 -22.0 -21.0 -28.0 -29.0 -34.0 -35.0 -36.0 -41.0 -40.0 88 -189.0 -182.0 -187.0 -180.0 -183.0 -178.0 -179.0 -176.0 -173.0 -170.0 -169.0 -168.0 -165.0 -160.0 -163.0 -160.0 -159.0 -156.0 -153.0 -150.0 -149.0 -146.0 -147.0 -144.0 -141.0 -140.0 -137.0 -135.0 -130.0 -127.0 -130.0 -123.0 -122.0 -121.0 -118.0 -121.0 -118.0 -113.0 -110.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -90.0 -92.0 -90.0 -83.0 -82.0 -79.0 -78.0 -75.0 -72.0 -71.0 -70.0 -67.0 -66.0 -63.0 -62.0 -53.0 -52.0 -51.0 -50.0 -51.0 -46.0 -43.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -29.0 -27.0 -27.0 -22.0 -21.0 -22.0 -18.0 -16.0 -18.0 -15.0 -10.0 -7.0 -6.0 -1.0 1.0 3.0 2.0 14.0 10.0 1.0 2.0 1.0 3.0 -4.0 -6.0 -5.0 -9.0 -12.0 -14.0 -18.0 -19.0 -20.0 -22.0 -23.0 -29.0 -31.0 -33.0 -37.0 -36.0 -40.0 89 -188.0 -189.0 -182.0 -187.0 -180.0 -183.0 -176.0 -179.0 -176.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -163.0 -158.0 -157.0 -156.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -141.0 -138.0 -136.0 -133.0 -130.0 -127.0 -128.0 -123.0 -122.0 -121.0 -118.0 -119.0 -116.0 -111.0 -108.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -88.0 -91.0 -88.0 -83.0 -82.0 -79.0 -78.0 -73.0 -70.0 -71.0 -70.0 -67.0 -64.0 -63.0 -60.0 -53.0 -50.0 -51.0 -50.0 -49.0 -44.0 -41.0 -42.0 -37.0 -36.0 -35.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -27.0 -29.0 -27.0 -25.0 -22.0 -21.0 -22.0 -18.0 -15.0 -18.0 -13.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 4.0 14.0 10.0 2.0 2.0 1.0 3.0 -2.0 -5.0 -7.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -23.0 -23.0 -29.0 -30.0 -31.0 -36.0 -35.0 90 -189.0 -188.0 -187.0 -182.0 -189.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -159.0 -154.0 -153.0 -152.0 -147.0 -146.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -119.0 -116.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -86.0 -89.0 -88.0 -85.0 -82.0 -77.0 -78.0 -71.0 -70.0 -71.0 -70.0 -67.0 -62.0 -63.0 -60.0 -53.0 -50.0 -51.0 -48.0 -49.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -33.0 -30.0 -21.0 -27.0 -27.0 -27.0 -25.0 -23.0 -21.0 -22.0 -18.0 -15.0 -16.0 -11.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 6.0 14.0 10.0 4.0 3.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -17.0 -18.0 -23.0 -25.0 -29.0 -30.0 -31.0 -34.0 91 -194.0 -189.0 -190.0 -187.0 -182.0 -187.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -154.0 -151.0 -152.0 -147.0 -144.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -117.0 -114.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -99.0 -96.0 -93.0 -86.0 -87.0 -88.0 -85.0 -82.0 -77.0 -76.0 -71.0 -70.0 -71.0 -68.0 -65.0 -62.0 -61.0 -58.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -31.0 -30.0 -21.0 -27.0 -25.0 -28.0 -25.0 -23.0 -21.0 -22.0 -17.0 -13.0 -14.0 -9.0 -8.0 -5.0 -4.0 1.0 3.0 7.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 -31.0 92 -193.0 -194.0 -187.0 -190.0 -187.0 -182.0 -185.0 -180.0 -183.0 -176.0 -179.0 -174.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -156.0 -151.0 -150.0 -147.0 -146.0 -145.0 -143.0 -138.0 -137.0 -134.0 -133.0 -134.0 -131.0 -130.0 -125.0 -126.0 -121.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -108.0 -105.0 -102.0 -99.0 -94.0 -91.0 -84.0 -87.0 -86.0 -83.0 -80.0 -77.0 -76.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -59.0 -58.0 -53.0 -50.0 -49.0 -46.0 -49.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -21.0 -17.0 -13.0 -12.0 -9.0 -8.0 -3.0 -2.0 3.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -7.0 -8.0 -7.0 -8.0 -13.0 -18.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 93 -196.0 -193.0 -192.0 -187.0 -190.0 -185.0 -182.0 -185.0 -180.0 -181.0 -176.0 -177.0 -174.0 -171.0 -170.0 -167.0 -166.0 -161.0 -160.0 -159.0 -156.0 -157.0 -156.0 -149.0 -148.0 -147.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -133.0 -131.0 -130.0 -127.0 -124.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -108.0 -103.0 -102.0 -97.0 -92.0 -89.0 -84.0 -87.0 -84.0 -81.0 -80.0 -79.0 -78.0 -71.0 -72.0 -71.0 -64.0 -61.0 -62.0 -59.0 -60.0 -53.0 -48.0 -49.0 -46.0 -49.0 -44.0 -43.0 -42.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -19.0 -15.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 5.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 -2.0 -9.0 -8.0 -7.0 -8.0 -15.0 -18.0 -21.0 -20.0 -23.0 -25.0 -29.0 94 -197.0 -196.0 -193.0 -192.0 -187.0 -190.0 -183.0 -182.0 -185.0 -178.0 -181.0 -174.0 -177.0 -172.0 -171.0 -170.0 -165.0 -164.0 -161.0 -158.0 -159.0 -156.0 -157.0 -154.0 -147.0 -148.0 -145.0 -146.0 -142.0 -141.0 -138.0 -137.0 -134.0 -131.0 -133.0 -131.0 -128.0 -127.0 -122.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -106.0 -101.0 -100.0 -95.0 -90.0 -89.0 -84.0 -85.0 -82.0 -79.0 -80.0 -79.0 -78.0 -71.0 -72.0 -69.0 -62.0 -61.0 -62.0 -59.0 -60.0 -51.0 -48.0 -49.0 -46.0 -49.0 -44.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -36.0 -31.0 -28.0 -21.0 -25.0 -25.0 -26.0 -24.0 -24.0 -18.0 -17.0 -16.0 -13.0 -12.0 -9.0 -6.0 -3.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 4.0 0.0 1.0 1.0 -4.0 -7.0 -8.0 -7.0 -10.0 -15.0 -20.0 -21.0 -20.0 -23.0 -25.0 95 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -164.0 -159.0 -158.0 -160.0 -156.0 -155.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -141.0 -138.0 -137.0 -132.0 -131.0 -133.0 -129.0 -126.0 -127.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -110.0 -103.0 -104.0 -99.0 -98.0 -93.0 -90.0 -89.0 -84.0 -83.0 -80.0 -79.0 -80.0 -79.0 -78.0 -71.0 -70.0 -67.0 -62.0 -61.0 -62.0 -57.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -34.0 -31.0 -28.0 -21.0 -25.0 -25.0 -25.0 -24.0 -23.0 -16.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 2.0 1.0 -1.0 1.0 -4.0 -9.0 -8.0 -7.0 -12.0 -17.0 -22.0 -23.0 -20.0 -23.0 96 -201.0 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -162.0 -159.0 -156.0 -161.0 -156.0 -153.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -139.0 -138.0 -137.0 -132.0 -131.0 -134.0 -129.0 -124.0 -125.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -104.0 -99.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -77.0 -76.0 -71.0 -68.0 -65.0 -62.0 -61.0 -62.0 -57.0 -56.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -42.0 -39.0 -40.0 -35.0 -34.0 -35.0 -32.0 -31.0 -28.0 -21.0 -25.0 -25.0 -23.0 -22.0 -21.0 -14.0 -17.0 -16.0 -11.0 -8.0 -7.0 -4.0 1.0 0.0 5.0 4.0 9.0 10.0 14.0 10.0 4.0 3.0 0.0 1.0 -6.0 -7.0 -10.0 -9.0 -12.0 -19.0 -20.0 -23.0 -20.0 97 -200.0 -201.0 -200.0 -197.0 -200.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -170.0 -163.0 -162.0 -159.0 -156.0 -159.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -144.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -132.0 -129.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -109.0 -106.0 -101.0 -102.0 -97.0 -96.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -75.0 -74.0 -69.0 -66.0 -65.0 -62.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -34.0 -35.0 -32.0 -33.0 -28.0 -21.0 -25.0 -24.0 -23.0 -22.0 -19.0 -14.0 -17.0 -14.0 -9.0 -6.0 -5.0 -2.0 1.0 0.0 5.0 4.0 9.0 12.0 14.0 10.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -18.0 -21.0 98 -205.0 -200.0 -201.0 -200.0 -197.0 -198.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -168.0 -163.0 -160.0 -159.0 -156.0 -157.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -142.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -130.0 -127.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -112.0 -111.0 -106.0 -101.0 -102.0 -97.0 -94.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -78.0 -75.0 -72.0 -67.0 -68.0 -67.0 -62.0 -63.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -32.0 -33.0 -28.0 -21.0 -24.0 -22.0 -21.0 -20.0 -19.0 -14.0 -17.0 -12.0 -7.0 -4.0 -4.0 -4.0 0.0 -2.0 3.0 4.0 9.0 14.0 14.0 10.0 6.0 3.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -16.0 -19.0 -18.0 99 -206.0 -205.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -192.0 -185.0 -186.0 -181.0 -182.0 -181.0 -178.0 -179.0 -174.0 -173.0 -172.0 -169.0 -168.0 -163.0 -160.0 -157.0 -156.0 -157.0 -154.0 -153.0 -151.0 -146.0 -145.0 -142.0 -142.0 -138.0 -139.0 -136.0 -135.0 -132.0 -129.0 -128.0 -127.0 -122.0 -123.0 -122.0 -119.0 -116.0 -113.0 -110.0 -109.0 -104.0 -99.0 -102.0 -95.0 -92.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -77.0 -76.0 -73.0 -70.0 -67.0 -68.0 -67.0 -62.0 -61.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -34.0 -31.0 -28.0 -21.0 -24.0 -22.0 -19.0 -20.0 -19.0 -14.0 -15.0 -10.0 -5.0 -2.0 -4.0 -4.0 0.0 -2.0 3.0 6.0 9.0 14.0 14.0 10.0 6.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -15.0 -16.0 -19.0 100 -207.0 -206.0 -203.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -185.0 -184.0 -181.0 -182.0 -181.0 -178.0 -179.0 -172.0 -175.0 -172.0 -169.0 -166.0 -163.0 -158.0 -157.0 -156.0 -157.0 -153.0 -152.0 -151.0 -146.0 -143.0 -142.0 -140.0 -138.0 -139.0 -136.0 -133.0 -132.0 -127.0 -128.0 -127.0 -120.0 -123.0 -120.0 -117.0 -114.0 -111.0 -108.0 -107.0 -102.0 -99.0 -100.0 -93.0 -90.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -75.0 -74.0 -71.0 -70.0 -67.0 -68.0 -65.0 -60.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -44.0 -39.0 -40.0 -37.0 -32.0 -36.0 -36.0 -30.0 -27.0 -21.0 -24.0 -20.0 -19.0 -20.0 -17.0 -12.0 -13.0 -8.0 -3.0 -2.0 -4.0 -5.0 0.0 0.0 3.0 6.0 7.0 14.0 14.0 10.0 4.0 1.0 -2.0 -5.0 -6.0 -7.0 -14.0 -15.0 -16.0 101 -208.0 -209.0 -206.0 -205.0 -198.0 -203.0 -198.0 -197.0 -196.0 -191.0 -192.0 -183.0 -184.0 -181.0 -182.0 -181.0 -178.0 -177.0 -172.0 -173.0 -172.0 -167.0 -166.0 -161.0 -158.0 -157.0 -156.0 -156.0 -151.0 -152.0 -151.0 -144.0 -143.0 -140.0 -140.0 -138.0 -139.0 -134.0 -133.0 -130.0 -127.0 -128.0 -125.0 -120.0 -121.0 -118.0 -115.0 -112.0 -109.0 -106.0 -105.0 -102.0 -97.0 -98.0 -91.0 -90.0 -89.0 -88.0 -89.0 -84.0 -79.0 -78.0 -73.0 -72.0 -71.0 -70.0 -65.0 -66.0 -65.0 -60.0 -63.0 -62.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -42.0 -37.0 -40.0 -37.0 -32.0 -37.0 -35.0 -28.0 -27.0 -21.0 -22.0 -20.0 -19.0 -20.0 -15.0 -10.0 -11.0 -6.0 -3.0 -2.0 -4.0 -5.0 0.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 4.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -13.0 102 -213.0 -208.0 -207.0 -208.0 -207.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -177.0 -170.0 -173.0 -170.0 -167.0 -164.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -152.0 -149.0 -144.0 -141.0 -140.0 -140.0 -138.0 -137.0 -134.0 -131.0 -132.0 -127.0 -126.0 -127.0 -118.0 -119.0 -116.0 -113.0 -110.0 -107.0 -104.0 -105.0 -100.0 -95.0 -96.0 -91.0 -90.0 -89.0 -88.0 -87.0 -82.0 -77.0 -76.0 -71.0 -72.0 -71.0 -68.0 -63.0 -64.0 -65.0 -60.0 -63.0 -60.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -45.0 -40.0 -37.0 -40.0 -37.0 -32.0 -36.0 -33.0 -28.0 -27.0 -20.0 -22.0 -20.0 -19.0 -18.0 -13.0 -8.0 -9.0 -6.0 -3.0 -2.0 -4.0 -3.0 2.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 6.0 1.0 0.0 -3.0 -8.0 -5.0 -10.0 103 -210.0 -213.0 -208.0 -207.0 -208.0 -205.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -175.0 -170.0 -171.0 -170.0 -167.0 -162.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -140.0 -141.0 -138.0 -135.0 -132.0 -131.0 -132.0 -127.0 -126.0 -125.0 -118.0 -117.0 -116.0 -113.0 -112.0 -105.0 -104.0 -103.0 -100.0 -95.0 -94.0 -91.0 -92.0 -89.0 -86.0 -87.0 -84.0 -75.0 -74.0 -71.0 -72.0 -73.0 -68.0 -61.0 -64.0 -65.0 -60.0 -61.0 -58.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -43.0 -40.0 -37.0 -40.0 -37.0 -32.0 -34.0 -31.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -16.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 -2.0 -3.0 4.0 2.0 2.0 2.0 5.0 14.0 14.0 6.0 6.0 -1.0 0.0 -3.0 -8.0 -5.0 104 -215.0 -210.0 -213.0 -210.0 -207.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -179.0 -176.0 -177.0 -170.0 -171.0 -170.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -156.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -141.0 -136.0 -137.0 -132.0 -131.0 -132.0 -129.0 -126.0 -123.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -104.0 -101.0 -98.0 -93.0 -94.0 -91.0 -92.0 -89.0 -84.0 -85.0 -82.0 -75.0 -74.0 -71.0 -72.0 -71.0 -68.0 -61.0 -64.0 -67.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -47.0 -44.0 -45.0 -40.0 -37.0 -38.0 -37.0 -32.0 -32.0 -29.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -14.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 0.0 -1.0 4.0 2.0 2.0 4.0 7.0 14.0 14.0 5.0 4.0 -1.0 0.0 -3.0 -6.0 105 -218.0 -215.0 -210.0 -213.0 -210.0 -205.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -177.0 -176.0 -175.0 -170.0 -171.0 -168.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -139.0 -134.0 -139.0 -132.0 -131.0 -134.0 -129.0 -128.0 -121.0 -116.0 -115.0 -116.0 -109.0 -112.0 -105.0 -104.0 -103.0 -96.0 -93.0 -94.0 -93.0 -92.0 -89.0 -84.0 -85.0 -80.0 -75.0 -74.0 -71.0 -72.0 -71.0 -70.0 -61.0 -64.0 -65.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -45.0 -44.0 -45.0 -40.0 -37.0 -38.0 -36.0 -31.0 -30.0 -27.0 -26.0 -25.0 -18.0 -22.0 -18.0 -15.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 -2.0 2.0 -1.0 4.0 2.0 4.0 6.0 5.0 14.0 12.0 5.0 4.0 -1.0 2.0 -3.0 106 -219.0 -220.0 -215.0 -210.0 -213.0 -212.0 -205.0 -208.0 -205.0 -200.0 -199.0 -198.0 -197.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -175.0 -170.0 -171.0 -170.0 -167.0 -164.0 -159.0 -160.0 -158.0 -157.0 -156.0 -151.0 -152.0 -151.0 -144.0 -141.0 -136.0 -137.0 -134.0 -139.0 -132.0 -131.0 -132.0 -129.0 -126.0 -121.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -104.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -91.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -64.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -47.0 -42.0 -37.0 -37.0 -36.0 -29.0 -30.0 -29.0 -26.0 -23.0 -16.0 -20.0 -16.0 -13.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 0.0 2.0 -1.0 6.0 2.0 6.0 6.0 5.0 14.0 10.0 5.0 4.0 -1.0 2.0 107 -220.0 -219.0 -218.0 -215.0 -210.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -197.0 -198.0 -195.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -173.0 -170.0 -171.0 -168.0 -166.0 -163.0 -159.0 -160.0 -158.0 -157.0 -154.0 -151.0 -152.0 -149.0 -142.0 -139.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -130.0 -127.0 -124.0 -119.0 -114.0 -113.0 -114.0 -109.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -88.0 -89.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -62.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -45.0 -42.0 -37.0 -35.0 -34.0 -29.0 -30.0 -29.0 -24.0 -23.0 -16.0 -19.0 -16.0 -15.0 -12.0 -11.0 -10.0 -11.0 -4.0 1.0 0.0 2.0 1.0 8.0 2.0 6.0 6.0 6.0 14.0 8.0 5.0 4.0 -1.0 108 -223.0 -220.0 -219.0 -218.0 -217.0 -210.0 -209.0 -212.0 -205.0 -206.0 -203.0 -202.0 -197.0 -196.0 -195.0 -194.0 -193.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -176.0 -173.0 -170.0 -171.0 -169.0 -166.0 -163.0 -159.0 -161.0 -160.0 -155.0 -154.0 -153.0 -152.0 -147.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -128.0 -127.0 -122.0 -117.0 -112.0 -113.0 -114.0 -107.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -91.0 -86.0 -87.0 -82.0 -85.0 -80.0 -75.0 -72.0 -71.0 -70.0 -71.0 -70.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -47.0 -48.0 -44.0 -41.0 -39.0 -35.0 -34.0 -29.0 -30.0 -27.0 -22.0 -21.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -9.0 -4.0 1.0 0.0 2.0 0.0 8.0 2.0 6.0 8.0 6.0 14.0 8.0 5.0 4.0 109 -222.0 -223.0 -218.0 -219.0 -218.0 -217.0 -210.0 -209.0 -210.0 -203.0 -206.0 -201.0 -202.0 -197.0 -196.0 -195.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -174.0 -173.0 -170.0 -170.0 -167.0 -166.0 -163.0 -159.0 -161.0 -158.0 -155.0 -154.0 -153.0 -150.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -129.0 -126.0 -125.0 -120.0 -115.0 -112.0 -113.0 -112.0 -105.0 -104.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -89.0 -86.0 -87.0 -82.0 -83.0 -78.0 -75.0 -72.0 -71.0 -70.0 -71.0 -68.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -49.0 -47.0 -44.0 -39.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -22.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -7.0 -4.0 1.0 2.0 2.0 2.0 8.0 2.0 8.0 8.0 6.0 14.0 8.0 5.0 110 -227.0 -222.0 -223.0 -218.0 -219.0 -216.0 -215.0 -210.0 -209.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -191.0 -186.0 -187.0 -184.0 -181.0 -180.0 -177.0 -174.0 -171.0 -169.0 -168.0 -167.0 -166.0 -163.0 -159.0 -159.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -127.0 -124.0 -123.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -102.0 -101.0 -96.0 -91.0 -92.0 -89.0 -86.0 -87.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -49.0 -47.0 -42.0 -37.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -20.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 4.0 4.0 2.0 8.0 4.0 8.0 8.0 4.0 14.0 8.0 111 -228.0 -229.0 -222.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -203.0 -206.0 -201.0 -202.0 -199.0 -196.0 -195.0 -192.0 -191.0 -186.0 -187.0 -186.0 -183.0 -178.0 -179.0 -174.0 -173.0 -171.0 -170.0 -167.0 -164.0 -165.0 -161.0 -161.0 -160.0 -157.0 -154.0 -149.0 -146.0 -145.0 -144.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -129.0 -124.0 -121.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -100.0 -99.0 -96.0 -89.0 -90.0 -89.0 -86.0 -87.0 -80.0 -79.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -48.0 -45.0 -40.0 -35.0 -39.0 -39.0 -32.0 -27.0 -26.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -17.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 6.0 4.0 2.0 8.0 4.0 8.0 8.0 6.0 14.0 112 -233.0 -228.0 -227.0 -224.0 -227.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -197.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -170.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -157.0 -154.0 -151.0 -148.0 -145.0 -146.0 -139.0 -136.0 -135.0 -134.0 -133.0 -128.0 -127.0 -122.0 -121.0 -118.0 -113.0 -112.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -97.0 -94.0 -89.0 -90.0 -89.0 -86.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -46.0 -43.0 -40.0 -35.0 -40.0 -37.0 -32.0 -27.0 -24.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -15.0 -10.0 -11.0 -8.0 -5.0 -2.0 3.0 6.0 4.0 4.0 8.0 4.0 6.0 8.0 8.0 113 -234.0 -233.0 -228.0 -227.0 -224.0 -225.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -195.0 -192.0 -189.0 -188.0 -187.0 -182.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -168.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -133.0 -134.0 -133.0 -128.0 -125.0 -122.0 -121.0 -118.0 -113.0 -110.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -95.0 -92.0 -89.0 -90.0 -89.0 -86.0 -83.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -66.0 -61.0 -58.0 -55.0 -56.0 -55.0 -52.0 -52.0 -47.0 -44.0 -43.0 -40.0 -35.0 -38.0 -35.0 -30.0 -25.0 -22.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -13.0 -10.0 -11.0 -8.0 -3.0 0.0 3.0 6.0 4.0 4.0 8.0 6.0 6.0 8.0 114 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -199.0 -194.0 -197.0 -192.0 -189.0 -190.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -161.0 -158.0 -155.0 -152.0 -151.0 -150.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -131.0 -128.0 -125.0 -120.0 -119.0 -116.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -103.0 -98.0 -93.0 -92.0 -89.0 -90.0 -89.0 -84.0 -83.0 -80.0 -81.0 -78.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -54.0 -52.0 -50.0 -45.0 -42.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -23.0 -22.0 -25.0 -18.0 -19.0 -14.0 -17.0 -14.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 8.0 4.0 4.0 8.0 8.0 8.0 115 -238.0 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -194.0 -195.0 -192.0 -189.0 -188.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -159.0 -156.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -129.0 -128.0 -123.0 -120.0 -119.0 -114.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -101.0 -96.0 -93.0 -92.0 -89.0 -90.0 -87.0 -84.0 -83.0 -80.0 -81.0 -76.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -56.0 -52.0 -51.0 -48.0 -43.0 -42.0 -43.0 -40.0 -33.0 -34.0 -31.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 2.0 5.0 8.0 4.0 6.0 8.0 8.0 116 -241.0 -240.0 -235.0 -234.0 -235.0 -230.0 -229.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -210.0 -205.0 -206.0 -201.0 -200.0 -199.0 -194.0 -195.0 -194.0 -191.0 -190.0 -187.0 -184.0 -179.0 -177.0 -180.0 -175.0 -174.0 -171.0 -170.0 -171.0 -166.0 -165.0 -160.0 -159.0 -158.0 -155.0 -154.0 -151.0 -150.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -126.0 -125.0 -122.0 -119.0 -116.0 -111.0 -112.0 -109.0 -110.0 -103.0 -104.0 -101.0 -98.0 -95.0 -94.0 -89.0 -90.0 -87.0 -84.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -55.0 -50.0 -49.0 -46.0 -43.0 -42.0 -41.0 -38.0 -31.0 -32.0 -29.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -11.0 -6.0 -5.0 -4.0 1.0 2.0 5.0 8.0 4.0 8.0 8.0 117 -242.0 -243.0 -238.0 -235.0 -236.0 -233.0 -228.0 -231.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -212.0 -205.0 -208.0 -203.0 -200.0 -201.0 -194.0 -193.0 -192.0 -191.0 -190.0 -188.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -169.0 -168.0 -163.0 -158.0 -159.0 -160.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -124.0 -123.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -108.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -87.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -66.0 -63.0 -57.0 -55.0 -55.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -38.0 -31.0 -30.0 -31.0 -30.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -12.0 -11.0 -4.0 -5.0 -4.0 3.0 0.0 5.0 10.0 6.0 10.0 118 -243.0 -242.0 -241.0 -238.0 -235.0 -236.0 -231.0 -228.0 -229.0 -224.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -201.0 -194.0 -191.0 -192.0 -189.0 -189.0 -186.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -167.0 -166.0 -163.0 -158.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -143.0 -142.0 -139.0 -136.0 -131.0 -130.0 -129.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -106.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -64.0 -62.0 -57.0 -54.0 -53.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -36.0 -31.0 -30.0 -31.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -5.0 -2.0 3.0 0.0 5.0 10.0 8.0 119 -246.0 -243.0 -242.0 -241.0 -238.0 -235.0 -234.0 -231.0 -228.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -215.0 -212.0 -209.0 -210.0 -205.0 -206.0 -203.0 -200.0 -199.0 -194.0 -191.0 -190.0 -188.0 -187.0 -186.0 -185.0 -181.0 -177.0 -178.0 -177.0 -172.0 -171.0 -170.0 -167.0 -164.0 -163.0 -158.0 -159.0 -156.0 -153.0 -152.0 -147.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -128.0 -127.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -112.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -95.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -79.0 -80.0 -77.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -63.0 -60.0 -57.0 -54.0 -51.0 -48.0 -49.0 -46.0 -43.0 -40.0 -37.0 -34.0 -31.0 -30.0 -29.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -3.0 -2.0 3.0 2.0 7.0 12.0 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-5.html"},{"title":"混合ガウス分布のEMアルゴリズム","text":"クラスタリング で省略した、混合ガウス分布のEMアルゴリズムの計算過程を記述します。 EMアルゴリズム 観測データ \\(\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) に対する対数尤度関数は、 \\((9.7)\\) から以下のように書けます。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ E step $$\\begin{aligned} p(z_{k}=1|\\mathbf{x}) &\\equiv \\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{p(\\mathbf{x})}\\qquad (\\because\\text{Bayes' theorem})\\\\ &\\propto p(z_{k}=1)p(\\mathbf{x}|z_{k}=1) \\\\ &=\\pi_k\\mathcal{N}(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ なので、総和が \\(1\\) になるように正規化を行えば 負担率 が以下のように求まります。 $$\\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) =\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13)$$ ※ なお、この時分母である \\(\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})\\) が \\(p(\\mathbf{x})\\) であることは有用です。 （ 生物データマイニング論 第1回 では、これを用いて可視化していました。） Maximization step ※ 対数尤度関数 \\((9.14)\\) を \\(\\ln L\\) と記述します。 \\(\\boldsymbol{\\mu}_k\\) 対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\mu}_k\\) で微分します。この時 正規分布は \\(e&#94;{\\text{hoge}}\\) という形をしており、微分しても形が変わらないので、 $$\\begin{aligned} \\frac{\\partial\\ln L}{\\partial\\boldsymbol{\\mu}_k} &= \\sum_{i=n}&#94;N \\frac{\\pi_k\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= \\boldsymbol{\\Sigma}_k&#94;{-1}\\sum_{n=1}&#94;N \\gamma_{nk}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= 0\\\\ \\therefore\\boldsymbol{\\mu}_k&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.17)\\\\ \\end{aligned}$$ と最適解が求まりました。 \\(\\pi_k\\) パラメータ \\(\\pi_k\\) については、 \\(\\sum_{k=1}&#94;K \\pi_k = 1\\) という制約に注意する必要があります。ですが、 隠れマルコフモデルの最尤推定 で行なった能登同様に、ラグランジュの未定乗数 \\(\\lambda\\) を導入すればこの問題は解けます。 $$L_{\\lambda} = \\log L + \\lambda\\left(\\sum_{c=1}&#94;K \\pi_c - 1\\right)$$ の導関数が \\(0\\) となる条件を求める事になるので、 $$\\begin{aligned} \\frac{\\partial L_{\\lambda}}{\\partial\\pi_k} &= \\sum_{n=1}&#94;N \\frac{\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_k \\pi_k \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)} + \\lambda\\\\ &= \\sum_{n=1}&#94;N \\frac{\\gamma_{nk}}{\\pi_k} + \\lambda = 0 &\\therefore \\pi_k = -\\frac{1}{\\lambda}\\sum_{n=1}&#94;N \\gamma_{ic}\\\\ \\frac{\\partial L_{\\lambda}}{\\partial\\lambda} &= \\sum_{k=1}&#94;K \\pi_k - 1\\\\ &= \\left(-\\frac{1}{\\lambda}\\sum_{k=1}&#94;K\\sum_{n=1}&#94;N \\gamma_{nk}\\right) - 1 = 0 &\\therefore \\lambda = -n \\end{aligned}$$ より、 $$\\pi_k&#94;{\\star} = \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} \\qquad(9.22)$$ と最適解が求まりました。 \\(\\boldsymbol{\\Sigma}_k\\) \\(\\boldsymbol{\\mu}_k\\) と同様に、対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\Sigma}_k\\) で微分します。すると、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\log L = \\sum_{n=1}&#94;N\\frac{\\pi_k\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}$$ となります。ここで、 \\(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\) を計算すると、 $$\\begin{aligned} &\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\biggr)\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\left(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\right)\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(-\\frac{1}{2}\\biggr)|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\quad (\\ast1)\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\frac{1}{2}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\quad (\\ast2)\\\\ =&-\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)+\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{1}{2}\\left\\{\\boldsymbol{\\Sigma}_k&#94;{-1}-\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\right\\}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ したがって、 $$ \\boldsymbol{\\Sigma}_k&#94;{\\star}= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.19) $$ と最適解が求まりました。 ※ \\(\\ast1,\\ast2\\) の式変形は以下でより詳細に説明します。 が、その前にいくつか基本事項の定義を振り返ります。 行列式 $$\\det A=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)\\prod_{i=1}&#94;na_{i\\sigma(i)}=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)a_{1\\sigma(1)}a_{2\\sigma(2)}\\cdots a_{n\\sigma(n)}$$ \\(\\sigma\\) は \\(1\\) から \\(n\\) の置換（順列）を表す。 \\(\\mathrm{sgn}(\\sigma)\\) は置換の符号を表す。なお、\b置換の符号は 互\b換の数 に注目しており、奇置換（互換の数が奇数個）なら \\(-1\\) 、偶置換なら \\(+1\\) \b\b 余韻子 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\(i\\) 行と \\(i\\) 列を \\(1\\) つずつ取り去って作られる小行列を \\(M_{ij}\\) とする。つまり、 $$ M_{ij} = \\small \\left[ \\begin{array}{ccc} a_{11} & \\cdots &a_{1\\hspace{1mm}j-1} & a_{1\\hspace{1mm}j+1} & \\cdots & a_{1n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{i-1 \\hspace{1mm} 1} & \\cdots &a_{i-1\\hspace{1mm}j-1} & a_{i-1\\hspace{1mm}j+1} & \\cdots & a_{i-1 \\hspace{1mm}n} \\\\ a_{i+1 \\hspace{1mm} 1} & \\cdots &a_{i+1\\hspace{1mm}j-1} & a_{i+1\\hspace{1mm}j+1} & \\cdots & a_{i+1 \\hspace{1mm}n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{n1} &\\cdots &a_{n\\hspace{1mm}j-1} & a_{n\\hspace{1mm}j+1} &\\cdots &a_{nn} \\end{array} \\right] $$ です。ここで、 \\(\\Delta_{ij}=(-1)&#94;{i+j}|M_{ij}|\\) とすると、以下の 余因子展開 ができます。 \\(A\\) の行列式は \\(j\\) 列に関して、以下のように展開されます。 $$\\det A=\\Delta_{1j}a_{1j}+\\Delta_{2j}a_{2j}+\\cdots+\\Delta_{nj}a_{nj}$$ \\(A\\) の行列式は \\(i\\) 行に関して、以下のように展開されます。 $$\\det A=\\Delta_{i1}a_{i1}+\\Delta_{i2}a_{i2}+\\cdots+\\Delta_{in}a_{in}$$ \b 余韻子行列 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\((i, j)\\) 余因子を \\((j, i)\\) 成分に持つ行列 $$\\tilde{A} := \\begin{pmatrix}&\\Delta_{11}&\\Delta_{21}&\\cdots&\\Delta_{n1}\\\\&\\Delta_{21}&\\Delta_{22}&\\ldots&\\Delta_{n2}\\\\&\\vdots&\\vdots&\\ddots&\\vdots\\\\&\\Delta_{n1}&\\Delta_{n2}&\\cdots&\\Delta_{nn}\\end{pmatrix}$$ を 余韻子行列 と呼びます。ここで、余韻子展開を考えれば、余韻子行列に関して、 $$\\tilde{A}A=A\\tilde{A}=\\det(A)I_n$$ が成り立つことがわかります。 \\(\\ast1\\) の変形 以上を踏まえると、 \\(\\frac{\\partial\\det(A)}{\\partial a_{ij}} = \\Delta_{ij}\\) なので、 $$\\frac{\\partial|\\Sigma|}{\\partial\\Sigma} =\\tilde\\Sigma = |\\Sigma|\\Sigma&#94;{-1}$$ が成り立ち、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}} =-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-\\frac{3}{2}}\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\boldsymbol{\\Sigma_k}=-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma_k}&#94;{-1}$$ となることがわかります。 トレースと固有値の関係性 【命題】 トレースには、 \\(Tr(A) = \\sum_{k=1}&#94;{n}\\lambda_{k}\\) という関係がある。 トレース： \\(n\\times n\\) の正方行列 \\(A\\) に対して、\b対角成分の和 \\(\\sum_{k=1}&#94;{n}a_{kk}\\) を \\(A\\) のトレースと呼び、 \\(\\mathrm{Tr}(A),\\mathrm{tr}A\\) \b と表す。 【証明】 まず、固有方程式は、 $$\\phi(t) = |A-tI| = \\left|\\begin{array}{cccc} a_{11}-t & a_{12} & \\ldots & a_{1n} \\\\ a_{21} & a_{22}-t & \\ldots & a_{2n} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_{n1} & a_{n2} & \\ldots & a_{nn}-t \\end{array} \\right|$$ である。ここで、 \\(t\\) の係数に着目する。 \\(t&#94;n\\) の係数 これは、対角成分を全て掛け合わせた次の多項式 $$(a_{11}-t)(a_{22}-t)\\ldots(a_{nn}-t)$$ における \\(t&#94;n\\) の係数と等しくなる。よって、係数は「 \\((-1)&#94;n\\) 」 \\(t&#94;{n-1}\\) の係数 これも\b、先ほどの多項式の \\(t&#94;{n-1}\\) の係数と等しくなる。（ \\(\\because\\) 余韻子展開を考える。 \\(\\sigma\\) が全単射のため、１行（列）対角成分ではないものがあると、\b少なくともあと１つは体格成分でないものがあることがわかる。） 定数項 これは、\b余韻子展開を考えれば \\(|A|\\) そのもの。 よって、係数は「 \\((-1)&#94;{n-1}(a_{11}+a_{22}+\\ldots+a_{nn})\\) 」であり、これは対角和を用いて「 $(-1)&#94;{n-1}\\mathrm{Tr}(A) $ 」とも書ける。 一方先ほどの固有方程式は固有値を解に持つ。 つまり、 \\(A\\) の固有値を \\(\\lambda_1\\) 〜 \\(\\lambda_n\\) として、 $$\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)$$ とかける。（ \\((-1)&#94;n\\) によって、 \\(t&#94;n\\) の係数を合わせている。） この式を展開すると、 \\(t&#94;{n-1}\\) の係数が「 \\((-1)&#94;{n-1}(\\lambda_1+\\lambda_2+\\ldots+\\lambda_n)\\) 」であることから $$\\mathrm{Tr}(A) = \\lambda_1+\\lambda_2+\\ldots+\\lambda_n$$ ※ちなみに、 \\(\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)\\) の定数項を考えることで、 $$|A| = \\lambda_1\\lambda_2\\ldots\\lambda_n$$ であることもわかる。 トレースの循環性 \\(A\\) を \\(m \\times n\\) 、 \\(B\\) を \\(n \\times m\\) の行列とすると、 \\(AB\\) は \\(m \\times m\\) の行列であり、 $$ \\begin{aligned} \\mathrm{Tr}[AB]&= \\sum_{i=1}&#94;{m} (AB)_{ii} \\\\&= \\sum_{i=1}&#94;{m}\\sum_{j=1}&#94;{n} A_{ij}B_{ji} \\\\&= \\sum_{j=1}&#94;{n} \\sum_{i=1}&#94;{m} B_{ji} A_{ij} \\\\&= \\sum_{j=1}&#94;{n} (BA)_{jj} \\\\&= \\mathrm{Tr}[BA] \\end{aligned} $$ となる。これを応用すれば、以下の 循環性 が証明できる。 \\(A,B,C\\) をそれぞれ \\(m\\times n,n \\times l,l \\times m\\) の行列とするとき、 $$\\begin{aligned} \\mathrm{Tr}[ABC] =& \\mathrm{Tr}[BCA] \\\\=& \\mathrm{Tr}[CAB] \\end{aligned} $$ が成り立つ。（ \\(\\because\\) ２つの\b行列積をセットで考えれば明らか） 逆行列の微分 正則行列 \\(A\\) に対して、 \\(A&#94;{-1}A=I\\) が成立するので、\bこの等式の両辺を \\(A\\) で微分して、 $$\\begin{aligned} \\biggr(\\frac{\\partial }{\\partial A}A&#94;{-1}\\biggl)A + A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl) = 0\\\\ \\biggr(\\frac{\\partial A&#94;{-1}}{\\partial A}\\biggl) = -A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl)A&#94;{-1} \\end{aligned}$$ シングルエントリ行列 \\((i,j)\\) 成分のみが \\(1\\) で、残りが全て \\(0\\) の行列 \\(\\mathbf{J}&#94;{ij}\\) を シングルエントリ行列 と呼ぶ。なお、\b以下の式が成り立つ。 $$\\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{ij}\\bigl)=\\mathbf{A}_{ji}$$ \b \\(2 \\times 2\\) の行列でこれを示す。 $$\\begin{aligned} \\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{12}\\bigl)&=\\mathrm{Tr}\\biggr(\\begin{pmatrix}a_{11}&a_{12}\\\\a_{21}&a_{22}\\end{pmatrix}\\begin{pmatrix}0&1\\\\0&0\\end{pmatrix}\\biggl)\\\\ &=\\mathrm{Tr}\\begin{pmatrix}0&a_{11}\\\\0&a_{21}\\end{pmatrix}\\\\ &=a_{21}\\\\ &=\\mathbf{A}_{21} \\end{aligned}$$ \\(\\ast2\\) の変形 以上を踏まえれば、 $$\\begin{aligned} \\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu}) &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr((\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\biggl)\\\\ &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\frac{\\partial\\boldsymbol{\\Sigma}}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\biggl)\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ji}\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ij}\\\\ \\end{aligned}$$ よって、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})=-\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html"},{"title":"クラスタリング","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 講義の方針 データ解析アルゴリズムは、生物学の研究に不可欠 R や python のパッケージとして、すぐダウンロードして使うことができる。 しかし、原理を知らずに使うと、アルゴリズムの出す結果を盲信することになり危険。 正しい理解：結果を疑えるようになること。 階層的クラスタリング クラスタリング データ点を クラスタ（互いに類似したグループ） に分割する。 距離尺度：ユークリッド距離、コサイン距離など。 階層的クラスタリング 最初は各点がクラスタとなる。 二つのクラスタを選んで合併していく。 Single Link ：二つのクラスタをまたぐ最近点の距離 chaining により、ゆるいクラスタができる （非推奨） Complete Link ：二つのクラスタをまたぐ最遠点の距離 最も固いクラスタができるが、細かく分け過ぎる傾向がある。 Average Link ：二つのクラスタをまたぐ点対の平均距離 最もバランスがとれており、通常はこれを用いる。 最後は一つのクラスタになる。 デンドログラム ：合併の過程を樹形図の形で表したもの。 K-Means 分割的クラスタリング の一手法。$K$ クラスにデータ点を分割する。 以下を繰り返す。 各データ点 $\\mathbf{x}$ を最も近い中心点 $\\mu_k$ に割り当てて、クラスタ $c_1,\\ldots,c_K$ を作成する。 割当を元に中心点を計算しなおす。 $$\\mu_k = \\sum_{j\\in C_i} \\mathbf{x}_j$$ 実装 In [1]: import numpy as np import matplotlib.pyplot as plt Data. In [2]: np . random . seed ( 0 ) In [3]: N = 30 ; K = 5 vmin = 0 ; vmax = 1 In [4]: # Training Data. data = np . random . uniform ( vmin , vmax , ( N , 2 )) x , y = data . T In [5]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [6]: # Background Color Xs , Ys = np . meshgrid ( np . linspace ( vmin , vmax , 100 ), np . linspace ( vmin , vmax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.KMeans.KMeans ） を使って学習させます。 In [7]: from kerasy.ML.KMeans import KMeans In [8]: model = KMeans ( K = K , random_state = 0 ) In [9]: model . fit ( data ) Visualization. In [10]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [11]: # For Visualization. plt_model = KMeans ( K = K ) In [12]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( idx , mu ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Plot Representative points(µk) of each class. mux , muy = mu . T ax . scatter ( mux , muy , marker = 'x' , c = \"red\" , s = 200 ) # Background. plt_model . mu = mu Z , _ = plt_model . predict ( XYs ) Zs = Z . reshape ( Xs . shape ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( vmin , vmax ) ax . set_ylim ( vmin , vmax ) ax . set_title ( f \"Iteration. {i:>02} \" ) plt . show () 混合ガウス分布 混合ガウス分布は、次のように混合係数 $\\pi_k$ でガウス分布を線形重ね合わせした形でかける。 $$p(\\mathbf{x}) = \\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\qquad (9.7)$$ ここで、 二値ベクトル（1-of-K符号化法） $\\mathbf{z}$ の周辺分布は、$0\\leq\\pi_k\\leq1$ と $\\sum_{k=1}&#94;K\\pi_k = 1 $ を満たす $\\pi_k$ を用いて、 $$p\\left(\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\pi_k&#94;{z_k}\\qquad (9.9)$$ と書ける。また、$\\mathbf{z}$ が与えられた時の $\\mathbf{x}$ の事後分布は当然ながら次のガウス分布である。 $$p\\left(\\mathbf{x}|\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)&#94;{z_k}\\qquad(9.11)$$ EMアルゴリズム 観測データ $\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}$ に対する対数尤度関数は、$(9.7)$ から以下のように書ける。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ Expectation step M stepで必要となる $\\gamma(z_{nk})$ を求める。 この値は、$\\mathbf{x}$ が与えられた下での $\\mathbf{z}$ の条件付き確率であり、混合要素 $k$ が $\\mathbf{x}$ の観測を 「説明する」 度合いを表す 負担率(responsibility) として解釈することもできる。 $$ \\begin{aligned} \\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) &=\\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{\\sum_{j=1}&#94;{K}p(z_{j}=1)p(\\mathbf{x}|z_{j}=1)}\\\\ &=\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13) \\end{aligned} $$ Maximization step M stepでは、尤度関数を最大化するように各パラメータの値を更新する。 ※ 導出過程は 混合ガウス分布のEMアルゴリズム に載せています。 $$ \\begin{aligned} \\boldsymbol{\\mu}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.17)\\\\ \\boldsymbol{\\Sigma}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.19)\\\\ \\pi_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} & (9.22) \\end{aligned} $$ 実装 Data. In [13]: np . random . seed ( 0 ) In [14]: N = 150 ; K = 3 In [15]: # Train Data. data = np . concatenate ([ np . random . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 0 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [16]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [17]: # Background Color xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.MixedDistribution.MixedGaussian ） を使って学習させます。 In [18]: from kerasy.ML.MixedDistribution import MixedGaussian In [19]: model = MixedGaussian ( K = K , random_state = 1234 ) In [20]: model . fit ( data , span = 20 ) Visualization. In [21]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [22]: # For Visualization. plt_model = MixedGaussian ( K = K ) plt_model . N , plt_model . M = data . shape In [23]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( epoch , idx , mu , S , pi ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Background. plt_model . mu = mu plt_model . S = S plt_model . pi = pi Z = plt_model . predict ( XYs ) Zs = np . sum ( Z , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( xmin , xmax ) ax . set_ylim ( ymin , ymax ) ax . set_title ( f \" {epoch:>02} epochs.\" ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html"},{"title":"イントロダクション","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 講義予定 前半（山崎担当） 画像の操作 画像の特徴抽出・内容理解・構造化 機械学習一般 後半（相澤担当） 画像を撮る：カメラの内部処理・センサ・レンズ・標本化 画像を表現する。色の知覚・表現 画像の基礎的な処理。周波数変換、線形・非線形フィルタリング # 日付 担当 内容 1 9/30(月) 山崎 画像・映像を中心とした現在の技術動向の紹介、低次・領域・局所画像特徴 2 10/7(月) 山崎 特徴選択、特徴表現 3 10/21(月) 山崎 機械学習概論、教師なし学習、クラスタリング 4 10/28(月) 山崎 機械学習 (NN, SVM, RF) 5 11/7(木) 山崎 深層学習 (Deep Neural Networks) 6 11/11(月) 山崎 動画像処理 (ブロックマッチング、背景差分、オプティカルフロー) 7 11/13(水) 山崎 3次元空間情報の取得と処理 8 11/18(月) 相澤 デジタルカメラ系 9 11/25(月) 相澤 表色系 10 12/9(月) 相澤 フィルタリング・画像復元 11 12/16(月) 相澤 特徴抽出 12 12/23(月) 相澤 画像符号化 13 1/@@ テスト パターン認識一般 現在は、90%位が 学習ベース(data-driven) 。残りが解析的手法。最近はこのhybridも。 全体的な流れ 学習(training) 検証(validation)←パラメータ最適化 推論(test, inference) なぜ今 学習ベース なのか？ データの大規模化：インターネット上から大量に収集可。 計算機の進化：ムーアの法則による高速化。さらにはクラウド 労働力のクラウド化 画像特徴 低次特徴量 色ヒストグラム（RGB,HSV,L*a*b*）：単純計算すると \\(256&#94;3\\) 個binができるので、注意。 色共起ヒストグラム（Correlogram）：隣接ピクセルの色を踏まえたヒストグラム 円、コーナー直線の数・大きさ・長さ 物体の円度、曲率等 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html"},{"title":"matplotlibチートシート","text":"In [1]: import numpy as np import matplotlib.pyplot as plt $N$ 枚の画像を plot Vsize , Hsize = () # 画像の横の長さと縦の長さ。 n_fig = \"画像の枚数\" n_col = \"横に並ぶ数\" n_row = n_fig // n_col + 1 if n_fig % n_col != 0 else n_fig // n_col # 行数を計算。 fig = plt . figure ( figsize = ( Vsize * n_col , Hsize * n_row )) for i , hoge in enumerate ( HOGEs ): ax = fig . add_subplot ( row , col , i + 1 ) \"\"\" 描きたいオブジェクトをプロット \"\"\" plt . tight_layout () plt . show () gifの画像の作成 上のようにやって全ての画像をまとめた一枚の画像を出力しても良いが、 n_fig = \"画像の枚数\" digit = len ( str ( N )) for i , hoge in enumerate ( HOGEs ): ax = fig . add_subplot ( row , col , i + 1 ) plt . figure ( figsize = \"サイズ\" ) \"\"\" 描きたいオブジェクトをプロット \"\"\" plt . savefig ( f \"img{i:>0{digit}}.png\" ) として連番の画像を作成し、それを以下のプログラムでgif画像にした方が見やすい場合もある from PIL import Image N = 30 digit = len ( str ( N )) images = [] for i in range ( N ): img = Image . open ( f \"{i:>0{digit}}.png\" ) images . append ( img ) images [ 0 ] . save ( 'out.gif' , save_all = True , append_images = images [ 1 :], loop = 0 , duration = 300 ) # loop=0: 無限ループ # duration: 一枚あたりの表示時間[ms] cmaps In [2]: cmaps = [ 'Accent' , 'Blues' , 'BrBG' , 'BuGn' , 'BuPu' , 'CMRmap' , 'Dark2' , 'GnBu' , 'Greens' , 'Greys' , 'OrRd' , 'Oranges' , 'PRGn' , 'Paired' , 'Pastel1' , 'Pastel2' , 'PiYG' , 'PuBu' , 'PuBuGn' , 'PuOr' , 'PuRd' , 'Purples' , 'RdBu' , 'RdGy' , 'RdPu' , 'RdYlBu' , 'RdYlGn' , 'Reds' , 'Set1' , 'Set2' , 'Set3' , 'Spectral' , 'Wistia' , 'YlGn' , 'YlGnBu' , 'YlOrBr' , 'YlOrRd' , 'afmhot' , 'autumn' , 'binary' , 'bone' , 'brg' , 'bwr' , 'cividis' , 'cool' , 'coolwarm' , 'copper' , 'cubehelix' , 'flag' , 'gist_earth' , 'gist_gray' , 'gist_heat' , 'gist_ncar' , 'gist_rainbow' , 'gist_stern' , 'gist_yarg' , 'gnuplot' , 'gnuplot2' , 'gray' , 'hot' , 'hsv' , 'inferno' , 'jet' , 'magma' , 'nipy_spectral' , 'ocean' , 'pink' , 'plasma' , 'prism' , 'rainbow' , 'seismic' , 'spring' , 'summer' , 'tab10' , 'tab20' , 'tab20b' , 'tab20c' , 'terrain' , 'viridis' , 'winter' ] In [3]: matrix = np . arange ( 100 ) . reshape ( 10 , 10 ) In [4]: Vsize , Hsize = ( 4 , 4 ) n_fig = len ( cmaps ) n_col = 4 n_row = n_fig // n_col + 1 if n_fig % n_col != 0 else n_fig//n_col In [5]: fig = plt . figure ( figsize = ( Vsize * n_col , Hsize * n_row )) for i , cmap in enumerate ( cmaps ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) ax . matshow ( matrix , cmap = cmap ) ax . set_title ( f \"↓ {cmap} ↓\" , fontsize = 24 ), ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-0.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-0.html"},{"title":"生物物理学 第1回","text":"講師： 能瀬聡直 講義資料： 生物物理学 参考書： 神経科学 -脳の探求- 参考書： ニューロンの生物物理 講義概要 生物物理学とは 遺伝情報の流れ 蛋白質の構造と機能 細胞内タンパク質のダイナミックス 遺伝子操作技術 ゲノム科学とバイオインフォマティックス バイオイメージング、生体分子計測 脳・神経系の生物物理 講義日程 # 日付 担当 1 9/25 能瀬 2 10/2 樋口 3 10/9 樋口 4 10/16 樋口 5 10/23 樋口 6 10/30 樋口 7 11/6 樋口 8 11/20 能瀬 9 11/27 能瀬 10 12/4 樋口 11 12/11 能瀬 12 12/18 能瀬 13 1/8 能瀬 14 1/15 能瀬 生物物理学とは？ 物理の手法で生物を見る。 生体分子の機能や構造の研究。 対象は広範囲、ただし物理的理念を背景にもつ。 生体高分子の構造・機能、脳・神経機構など単なる記述中心の従来の生物学と異なり、論理的な思考法を用い、より普遍的な原理を見いだすことを目指している。 生物物理の代表的発見 DNA二重螺旋構造の発見（1953年、1962年ノーベル生理医学賞） 蛋白質の高次構造の解析（1960年、1962年ノーベル化学賞） 神経活動のイオン機構の解明（1953年、1963年ノーベル生理医学賞） 最近の技術革新 ヒトゲノム計画 ヒトの全遺伝子の設計図解読の終了（2000年） イメージング技術 蛍光蛋白質・レーザー顕微鏡（1990年代） 1分子観測・1分子操作 溶液中での蛋白質1分子の観察（1990年代） 神経回路の作動原理の解明に向けた従来の3つのアプローチ 解剖学(Anatomy) 神経の配線を明らかにする。 生理学(Physiology) 神経活動を測定・操作する。 理論 神経活動パターンから原理を抽出 Part1. Introduction 脳神経系における情報の流れ ニューロンの構成 脳とコンピューター 半導体 ↔︎ 半導体素子 ↔︎ 集積回路 ↔︎ コンピューター 分子 ↔︎ 神経細胞 グリア細胞 ↔︎ 神経回路 ↔︎ 脳 活動電位の特徴 全か無か： \\(\\mathrm{Na}\\) チャネル活性化に閾値がある。 一過性： \\(\\mathrm{Na}\\) チャネル不活性化 確実に伝播 一体、どのような構造を持った神経回路の中を、どのように信号が伝わることで特定の演算が創発されるのか。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html"},{"title":"HMMをpythonで実装","text":"（kerasy.ML.HMM.HMM） の使い方 自作のモジュール （kerasy.ML.HMM.HMM） を使って実装をします。 In [1]: from kerasy.ML.HMM import HMM In [2]: model = HMM () In [3]: # 以下のようなパラメタファイルを読み込む。 ! cat params.json { \"M\": 4, \"K\": 4, \"basetypes\": [\"a\", \"c\", \"g\", \"u\"], \"pi\": [0.7, 0.1, 0.1, 0.1], \"A\": [[0.8, 0.1, 0.1, 0.0], [0.0, 0.8, 0.1, 0.1], [0.1, 0.0, 0.8, 0.1], [0.1, 0.0, 0.1, 0.8]], \"phi\": [[0.4, 0.1, 0.1, 0.4], [0.25, 0.25, 0.25, 0.25], [0.1, 0.4, 0.4, 0.1], [0.3, 0.2, 0.2, 0.3]] } In [4]: model . load_params ( \"params.json\" ) In [5]: # インスタンスに読み込まれた各種パラメータ model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 In [6]: # なお、この時以下のような辞書を同時に作成しています。 print ( model . base2int ) print ( model . int2base ) {'a': 0, 'c': 1, 'g': 2, 'u': 3} {0: 'a', 1: 'c', 2: 'g', 3: 'u'} In [7]: # また、パラメータはnumpyの行列の形で読み込まれています。 print ( type ( model . pi )) print ( type ( model . A )) print ( type ( model . phi )) In [8]: # 以下のようにすれば、学習したパラメタを同じ形式で出力することができます。 model . save_params ( \"out.json\" ) Viterbi algorithm HMMのViterbiアルゴリズムを実装して、尤もらしいサンプル配列の隠れ状態列を推定します。 In [9]: from kerasy.utils.bio import alignStr , readMonoSeq , readMultiSeq # ファイルの中身 cat seq1.fasta ``` sample-RNA gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc ``` In [10]: # ファイルの読み込み seq1 = readMonoSeq ( 'seq1.fasta' ) print ( f \"Input Sequence: \\n {alignStr(seq1[0])}\" ) Input Sequence: gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc In [11]: # この時、文字列をリストに格納しています。 print ( type ( seq1 )) In [12]: pred1 = model . predict ( sequences = seq1 , asai = True ) In [13]: # 変数asaiは、隠れ状態がZero-based numberingかどうかを決めるものであり、特に意味はありません。（課題の形式に対応したものがasai=True.） print ( f \"Hidden Indexes: \\n {alignStr(pred1[0])}\" ) Hidden Indexes: 222222222222222222222222222222222222222222222222222222222222 222222222222222222222222222222222222222222222222222222222222 222222223333333333333333333333331111113333333334444444444444 444433331111111111111111111111111111111113333333333331111111 222222222222222222222222222222222222222222222222222222222222 222222222222222222222222222222222222222222222222222222222222 222222222222222222222222222222222222222222222222222222222222 222222222222222222222222222222222222222222222222222222222222 222222222222222222222222222222222222222222222222222222222222 222222222222222222222222222222222222222222222222222222222222 222222222222222222222222222222222222222222222222222222222222 In [14]: # もちろんパラメタの更新は行われていません。 model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 Baum-Welch algorithm HMMのBaum-Welchアルゴリズムを実装して、モデルを学習させてます。 In [15]: model = HMM () model . load_params ( \"params2.json\" ) model . params () # 文字が \"acgu\"→\"ACGT\"に変わっただけです。 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.4000 0.2500 0.1000 0.3000 C 0.1000 0.2500 0.4000 0.2000 G 0.1000 0.2500 0.4000 0.2000 T 0.4000 0.2500 0.1000 0.3000 cat seq2.txt ``` >Vitis_vinifera_chr14.trna15-AlaAGC (28776087-28776159) Ala (AGC) 73 bp Sc: 68.12 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAGGTACGGGGATCGATA CCCCGCATCTCCA >Vitis_vinifera_chr13.trna5-ArgCCG (2691241-2691313) Arg (CCG) 73 bp Sc: 83.85 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAGGTCGTGGGTTCGAAT CCCACTGCGATCG >Vitis_vinifera_chr3.trna6-GlnCTG (5807449-5807520) Gln (CTG) 72 bp Sc: 71.93 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTAACCCGAGTTCAAATC TCGGTGGGACCT >Vitis_vinifera_chr14.trna19-LeuAAG (25640120-25640040) Leu (AAG) 81 bp Sc: 62.71 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTGTCCGAAAGGGCGTGG GTTCAAATCCCACTCTCCACA >Vitis_vinifera_chr18.trna9-MetCAT (2896034-2896118) Met (CAT) 85 bp Sc: 60.66 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCGAGTAATCCTGAGGTC GAGAGTTCGAGCCTCTCTCACCCCA >Vitis_vinifera_chr3.trna30-ProTGG (7498415-7498344) Pro (TGG) 72 bp Sc: 68.98 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGGTCCCGAGTTCGATTC TCGGAATGACCC >Vitis_vinifera_chr5.trna13-GluTTC (21745120-21745048) Glu (TTC) 73 bp Sc: 36.67 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTGGTCGTGGGTTCGAGC CCTATTGGTGGTT >Vitis_vinifera_chr5.trna3-TyrGTA (7422575-7422666) Tyr (GTA) 92 bp Sc: 33.68 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTGACCCAATAGATATCC TTAGGTCGTTAGTTTGAATCCAACAGGTCTAA >Vitis_vinifera_chr1.trna8-ValCAC (11396083-11396156) Val (CAC) 74 bp Sc: 66.86 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGAGGTCCCTAGTTCGAA CCCAGGCTCAGATA >Vitis_vinifera_chr14.trna2-SerTGA (4021381-4021462) Ser (TGA) 82 bp Sc: 80.82 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTGGGCTTCGCCCGCGCA GGTTCGAACCCTGCTGTCGACG ``` In [16]: seq2 = readMultiSeq ( 'seq2.txt' ) In [17]: for i , seq in enumerate ( seq2 ): print ( f \"No. {i:>02} \\n {alignStr(seq, width=45)}\" ) No.00 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAG GTACGGGGATCGATACCCCGCATCTCCA No.01 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAG GTCGTGGGTTCGAATCCCACTGCGATCG No.02 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTA ACCCGAGTTCAAATCTCGGTGGGACCT No.03 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTG TCCGAAAGGGCGTGGGTTCAAATCCCACTCTCCACA No.04 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCG AGTAATCCTGAGGTCGAGAGTTCGAGCCTCTCTCACCCCA No.05 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGG TCCCGAGTTCGATTCTCGGAATGACCC No.06 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTG GTCGTGGGTTCGAGCCCTATTGGTGGTT No.07 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTG ACCCAATAGATATCCTTAGGTCGTTAGTTTGAATCCAACAGGTCT AA No.08 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGA GGTCCCTAGTTCGAACCCAGGCTCAGATA No.09 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTG GGCTTCGCCCGCGCAGGTTCGAACCCTGCTGTCGACG In [18]: # 学習させる。 model . fit ( sequences = seq2 , epochs = 2000 , verbose = False ) In [19]: import matplotlib.pyplot as plt In [20]: def plotHistory ( model ): \"\"\" 学習の過程をプロットする関数 \"\"\" plt . plot ( model . history ) plt . title ( f \"Mean Log Likelihood Transition (eoochs= {model.epoch} )\" ) plt . xlabel ( \"epochs\" ) plt . ylabel ( \"Mean Log Likelihood\" ) plt . show () In [21]: plotHistory ( model ) In [22]: model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.1024 0.0000 0.8976 0.0000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.2819 0.7181 0.0000 0.0000 z(2) 0.0000 0.5670 0.0000 0.4330 z(3) 0.0521 0.0000 0.3415 0.6064 z(4) 0.5158 0.0000 0.0000 0.4842 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.3436 0.3099 0.1059 0.0055 C 0.2538 0.0592 0.0970 0.4297 G 0.4026 0.4418 0.7971 0.0345 T 0.0000 0.1891 0.0000 0.5304 ※ 隠れ状態ごとにかなり偏った遷移を行なう。 また、 遷移行列の対角成分がそこまで大きい値では無い。 → 特定の構造が、 ある程度の長さのゆとりを持って 繰り返されていると予想される。 In [23]: pred2 = model . predict ( sequences = seq2 , asai = True ) In [24]: for i , pred in enumerate ( pred2 ): print ( f \"No. {i:>02} Hidden Indexes: \\n {alignStr(pred, width=45)}\" ) No.00 Hidden Indexes: 333334122244412241241222224412444124122412222 2411222224412224441241244441 No.01 Hidden Indexes: 334411241241222412241241124412244441224441222 2412412244412244412441122441 No.02 Hidden Indexes: 334441241244412412441222412412244441224441241 244412244412244441241222444 No.03 Hidden Indexes: 341222241244122441244412222244122441222444441 244122222241222244412244412444441241 No.04 Hidden Indexes: 333341241241122441244124112412244412412444441 2241244441222441222244412244444441244441 No.05 Hidden Indexes: 333412441244412412412224444124444122224122222 444412244412444441222412444 No.06 Hidden Indexes: 334441241244412441244122411222244444124444122 2412412244412244441241241244 No.07 Hidden Indexes: 341244441244412441241222412222241241241222441 244412412241244441224124412444122444124122444 12 No.08 Hidden Indexes: 344412241241222441244124112441244412411244122 22444441244412244412244412241 No.09 Hidden Indexes: 344124122444122412441222222412244412224441241 2244412444112412244412244441122441241 補足：上記プログラムにバグがないかの確認 Baum-Welchアルゴリズムが正しく実装できていたか、極端な配列を学習させることで確認します。 In [25]: model = HMM () model . load_params ( \"params3.json\" ) model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 0.7000 0.1000 0.2000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.8000 0.1000 0.1000 z(2) 0.1000 0.8000 0.1000 z(3) 0.1000 0.1000 0.1000 ------------------------------ *emission probability z(1) z(2) z(3) A 0.4000 0.2500 0.1000 C 0.1000 0.2500 0.4000 G 0.1000 0.2500 0.4000 T 0.4000 0.2500 0.1000 In [26]: seq_extreme = readMonoSeq ( 'seq3.txt' ) In [27]: # かなり極端な配列の例で実装してみる。 print ( f \"Input Sequence: \\n {alignStr(seq_extreme[0])}\" ) Input Sequence: TCTTTTTCCTCCTCTCTCCTTTCCCTCTTTTCCCTTCTTCTCTCCCTTTTCCTTCTCTTC TCTCTTTTCTTCCCCTTTTCCTTTTCTCCTCCCTCCCTTTCTTCCCTCCTTCCTCCCCCC CTCCCCTTTCCTTCCTTTCTCCTTCTCCCCATATGGCCATTTACTTCAGCTGATAGACAC CGAGTAACAACAATAAAGCGTTAGGTGGACGAATGCTCTACTCTGACCTCTAGCTTGTGG GTTCGCGGCTTGCCGAACGCTGGCCTCTGCCCGTCGAACCAATAAATGTTTATCCAGGAC ACCCCGTTCTTTGGTGATATCCCTCGCTCGAGTTATAGCATTGAAACCTCCATATCCGGC GATAAGAGCTACGGACCGTATACTGGGCGCCGGTAATTGGTTGCACTCGCCCTCGGTCTT TTTCTTTTTGGTTTAGCAGAGCAAGGCGTGGAAAAGGAGAGAGGGAGAAAAGGGAAAGGG AAAAGAGGAGAAGAAAGAAAAAGGAAGGGGGGAAGAGGAGAGAAGGGAAGGGAAGGGGGA GAAAGAGGGAAAGAGGAGAAAAAAGGAGGGGGAAGAAGGAAGGGGGAAAGGGGGGGAAAG 上の配列は、以下の構造を持っていることがわかります。 index type 1~150 pyrimidine base 151~450 both 451~600 purine base In [28]: model . fit ( sequences = seq_extreme , epochs = 100 , verbose = False ) In [29]: plotHistory ( model ) In [30]: model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 1.0000 0.0000 0.0000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.9933 0.0000 0.0067 z(2) 0.0000 1.0000 0.0000 z(3) 0.0000 0.0033 0.9967 ------------------------------ *emission probability z(1) z(2) z(3) A 0.0000 0.4851 0.2199 C 0.5034 0.0000 0.2627 G 0.0000 0.5149 0.2415 T 0.4966 0.0000 0.2760 In [31]: pred_extreme = model . predict ( sequences = seq_extreme ) In [32]: print ( f \"Hidden Indexes: \\n {alignStr(pred_extreme[0])}\" ) Hidden Indexesうまく傾向をつかんでいることから、学習アルゴリズムに大きな誤りはなさそうです。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-4.html"},{"title":"生物統計論 第1回","text":"講師： 木立尚孝 講義概要 09/27 (Fri) 10:25-12:10 10/04 (Fri) 10:25-12:10 10/11 (Fri) 10:25-12:10 10/18 (Fri) 10:25-12:10 10/25 (Fri) 10:25-12:10 11/08 (Fri) 10:25-12:10 11/15 (Fri) 10:25-11:30(Lecture) / 11:30-12:10: (Test) Section1.1 STATISTICAL ANALYSIS Genomic data has recently become available, so the analyzing methods still its infancy at the century scale. It is very important how much information can be extracted from genomic and other omic data. Data-driven Research Development of measurement, communication, computing technologies. data science, e-science Statistics, computer skill, artificial intelligence, machine learning. Statistical Analysis Subjects and measurements are often conclude the random events , such as noise. Aiming for finding the \"True\" distribution, and inferencing on that distribution. Power of Statistical Methods Amount of information we can extract \"Many and high\" / \"Few or low\" quality Event infinite number of data cannot answer all questions. ex) we couldn't answer \"what is the number of eyes on the next dice.\" Data dependency. Section1.2 PROBABILITY DEFINITIONS Probability: Mathematical Probability: The probability of an event consisting of n out of m possible equally likely occurrences, defined to be n / m Statistical Probability: Each event is random, but if you repeat it a lot, you can see the probability that each event occurs. Subjective Probability: A type of probability derived from an individual's personal judgment or own experience about whether a specific outcome is likely to occur. ※ Mathematical Probability is the most strict and basic. Probability space \\(\\left(\\Omega, E, P\\right)\\) $$\\begin{aligned}&\\Omega: \\text{Set, Samplemspace}\\\\&E: \\text{Events,}\\sigma\\text{-algebra}\\\\&P: \\text{Probability measure}\\end{aligned}$$ Sample Space The sets of elementary events. ex.) The number of eyes on the dice. All possible genomes. All possible gene expression profiles \\(\\omega_i\\in\\Omega\\) is the identifier of possible individual stochastic phenomena. \\(\\sigma\\) -algebra $$ \\begin{aligned} &\\varepsilon= \\left\\{E_1,E_2,\\cdots|E_i\\subseteq\\Omega:\\text{event}:\\sigma\\text{-algebra} \\right\\}\\\\ &\\Rightarrow \\varnothing,\\Omega,\\left(E_i\\setminus E_j\\right),\\left(\\bigcup_{i=1}&#94;{\\infty}E_i\\right),\\left(\\bigcap_{i=1}&#94;{\\infty}E_i\\right)\\in\\varepsilon \\end{aligned} $$ The sets of Events. Each event \\(E_i\\subseteq\\Omega\\) Include Empty set \\(\\varnothing\\) , universal set \\(\\Omega\\) Closure to variable \"Set Operation\". (ex. Union, intersection, complement) example) discrete set Real set Power set Borel set \\(\\mathcal{A}\\) Probability measure $$\\begin{aligned}&\\mathbb{P} : \\mathcal{E} \\rightarrow \\mathbb{R} \\\\& 0 \\leq \\mathbb{P}(E) \\leq 1, E \\in \\mathcal{E} \\\\&\\mathbb{P}(\\Omega)=1, \\mathbb{P}(\\varnothing)=0 \\\\&\\text { For } E_{1}, E_{2}, \\cdots \\in \\mathcal{E}, \\text{ s.t. } E_{i} \\cap E_{j}=\\varnothing, \\forall i \\neq j \\\\&\\mathbb{P}\\left(\\bigcup_{i=1}&#94;{\\infty} E_{i}\\right)=\\sum_{i=1}&#94;{\\infty} \\mathbb{P}\\left(E_{i}\\right)\\end{aligned}$$ Each event is assigned a value that indicates the likelihood or probability of occurrence. Random variable $$\\begin{aligned}X: &\\text{random variable}\\\\\\Leftrightarrow &X : \\Omega \\rightarrow \\mathbb{R} \\\\ &\\text { s.t. } X&#94;{-1}(A) \\in \\mathcal{E}, \\forall A \\in \\mathcal{A} \\\\&X&#94;{-1}(A) :=\\{\\omega \\in \\Omega \\mid X(\\omega) \\in A\\}\\end{aligned}$$ Section1.3 PROBABILITY TERMS AND PROPERTIES Probability distribution function \\(F_x\\) (cumulative distribution) Probability density function \\(f_x\\) $$F_x\\left(x+dx\\right)-F_x\\left(x\\right)=:f_x(x)dx$$ Conditional Probability Joint Probability distribution $$(X,Y): \\Omega\\rightarrow\\mathbb{R}&#94;2; (X,Y)(\\omega) = \\left(X(\\omega),Y(\\omega)\\right)\\\\\\left(X,Y\\right)&#94;{-1}(A) = \\left\\{\\omega\\in\\Omega|\\left(X(\\omega),Y(\\omega)\\right)\\in A\\right\\}$$ Independent random variables Expected Value Variance Covariance: $$\\begin{cases}X,Y: \\text{independent random variables}\\Rightarrow \\mathrm{Cov}(X,Y) = 0\\\\X,Y: \\text{independent random variables}\\not\\Leftarrow \\mathrm{Cov}(X,Y) = 0 \\end{cases}$$ Indicator Function: $$\\mathbb{I}_A(x)=\\begin{cases}1 & x\\in A\\\\0 & x\\notin A\\end{cases},A\\in\\mathcal{A}$$ Marginalization Section1.4 PROBABILITY DISTRIBUTIONS Look Here!! if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html"},{"title":"生物統計論 第0回","text":"Section1.4 PROBABILITY DISTRIBUTIONS In [1]: import numpy as np import collections import matplotlib.pyplot as plt In [2]: N = 100000 Bernoulli Distribution In [3]: def BernoulliVar ( q , N , seed = None ): rng = np . random . RandomState ( seed ) if seed is not None else np . random return np . var ( rng . rand ( N ) < q ) In [4]: qs = np . linspace ( 0 , 1 , 1000 ) In [5]: probs = [ BernoulliVar ( q , N ) for q in qs ] In [6]: plt . title ( \"Bernoulli distribution\" ) plt . plot ( qs , probs , label = \"$Var(X)$\" ) plt . xlabel ( \"q\" ) plt . ylabel ( \"$Var(X)$\" ) plt . legend () plt . show () Binomial Distribution In [7]: def BinomialProb ( n , p , N , seed = None , color = None , ax = None ): if ax == None : fig , ax = plt . subplots () rng = np . random . RandomState ( seed ) if seed is not None else np . random counter = collections . Counter ( rng . binomial ( n , p , N )) count , freqs = zip ( * sorted ( counter . most_common ())) probs = [ freq / N for freq in freqs ] ax . plot ( count , probs , color = color , label = f \"p= {p} and n= {n} \" ) ax . scatter ( count , probs , color = color ) return ax In [8]: ax = BinomialProb ( 20 , 0.5 , N , seed = 0 , color = \"blue\" ) ax = BinomialProb ( 20 , 0.7 , N , seed = 0 , color = \"green\" , ax = ax ) ax = BinomialProb ( 40 , 0.5 , N , seed = 0 , color = \"red\" , ax = ax ) plt . legend () plt . show () Normal Distribution In [9]: from scipy import stats In [10]: def NormalProb ( mu , sigma ): X = np . arange ( mu - 3.5 * sigma , mu + 3.5 * sigma , sigma / 50 ) Y = stats . norm . pdf ( X , mu , sigma ) for i in np . arange ( - 3 , 4 , 1 ): idx = np . argmin ( abs ( X - ( mu + i * sigma ))) plt . plot ([ X [ idx ], X [ idx ]], [ 0 , Y [ idx ]], 'k-' ) plt . scatter ( X [ idx ], Y [ idx ], color = \"black\" ) plt . plot ( X , Y , color = \"black\" ) In [11]: NormalProb ( mu = 0 , sigma = 0.1 ) Multivariate Normal Distribution In [12]: from scipy.stats import multivariate_normal In [13]: x , y = np . mgrid [ - 3 : 3.5 : . 01 , - 3 : 3 : . 01 ] pos = np . dstack (( x , y )) rv = multivariate_normal ([ 0.5 , - 0.2 ], [[ 2.0 , 2.3 ], [ 0.3 , 0.8 ]]) plt . contourf ( x , y , rv . pdf ( pos )) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html"},{"title":"HMMのスケーリング","text":"HMMを実装する際に課題となるのが、forward-algorithm で \\(\\alpha\\) を再帰的に求める際に、 \\(\\alpha\\left(\\mathbf{z}_{n-1}\\right)\\) に \\(p(\\mathbf{z}_n|\\mathbf{z}_{n-1})\\) と \\(p(\\mathbf{x}_n|\\mathbf{z}_n)\\) をかけるため、値が非常に小さくなり、計算機の ダイナミックレンジ を超えてしまうことです。 そこで、ここでは \\(\\alpha\\left(\\mathbf{z}_{n}\\right)\\) と \\(\\beta\\left(\\mathbf{z}_{n}\\right)\\) にスケーリングを施し、それらの値が \\(1\\) のオーダーに止まるようにする手法を説明します。 forward-backward \\(\\alpha,\\beta\\) forward-backward algorithm で用いられていた \\(\\alpha,\\beta\\) は以下のように定義されていました。 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ Scaling factors まず、スケーリングされた \\(\\alpha,\\beta\\) は以下のように表されます。スケーリングによって、 \\(\\alpha\\) は高々 \\(K\\) 個の変数上の確率分布 、 \\(\\beta\\) は2つの条件付き確率の比 になることがわかります。 $$ \\begin{aligned} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.55)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\frac{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)}=\\frac{\\beta\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.61) \\end{aligned} $$ ここで、これらと \\(\\alpha,\\beta\\) を関連付けるためのスケーリング係数 \\(c\\) を導入します。 $$ c_{n}=p\\left(\\mathbf{x}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}\\right)\\qquad (13.56) $$ すると、 $$ \\begin{aligned} p\\left(\\mathbf{x}_1,\\ldots,\\mathbf{x}_n\\right) &= p\\left(\\mathbf{x}_n | \\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\cdots p\\left(\\mathbf{x}_3 | \\mathbf{x}_1,\\mathbf{x}_{2}\\right)p\\left(\\mathbf{x}_2 | \\mathbf{x}_1\\right)p(\\mathbf{x}_1)\\\\ &= c_n\\cdots c_3c_2c_1\\\\ &= \\prod_{m=1}&#94;{n} c_{m} \\end{aligned}\\qquad (13.58) $$ と展開することができるので、 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\left(\\prod_{m=1}&#94;{n} c_{m}\\right) \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) & (13.58)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)\\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) = \\left(\\prod_{m=n+1}&#94;{N} c_{m}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.60) \\end{aligned} $$ と対応関係がわかります。 \\(\\gamma,\\xi\\) 続いて、 \\(\\gamma,\\xi\\) と \\(\\widehat{\\alpha},\\widehat{\\beta}\\) の対応関係を求めます。 \\(\\alpha,\\beta\\) \\(\\alpha,\\beta\\) を用いると、以下のように表されていました。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} &(13.43) \\end{aligned}$$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) 先の対応関係を用いれば、 \\(\\widehat{\\alpha},\\widehat{\\beta}\\) を用いると、 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=\\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.64)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\left(c_{n}\\right)&#94;{-1} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.65) \\end{aligned} $$ と表されることがわかります。 Recursion 最後に、再帰式の対応関係も求めます。 \\(\\alpha,\\beta\\) $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) $$ \\begin{aligned} c_{n} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.58)\\\\ \\widehat{\\alpha}\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{z}_{1}| \\mathbf{x}_{1}\\right)=\\frac{p\\left(\\mathbf{z}_{1}\\right)p\\left(\\mathbf{x}_{1}| \\mathbf{z}_{1}\\right)}{p\\left(\\mathbf{x}_{1}\\right)} = \\frac{\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}}}{p\\left(\\mathbf{x}_{1}\\right)}\\\\ c_{n+1} \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\widehat{\\beta}\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) &(13.62)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)}{\\widehat{\\alpha}\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)}{p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} = 1 & (13.30) \\end{aligned} $$ なお、ここで \\((13.58)\\) でどのようにして \\(c_n\\) を求めるかですが、 $$ \\begin{aligned} \\mathrm{R.H.S}\\ (13.58) &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}}p\\left(\\mathbf{z}_{n-1}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\\\ &=p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) \\end{aligned} $$ となることから、 \\((13.58)\\) の右辺を \\(\\mathbf{z}_n\\) について周辺化すれば、 $$\\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = p\\left(\\mathbf{x}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = c_n$$ となるので、 \\(c_n\\) が求められることがわかります。 おまけ（尤度関数） 尤度関数はスケーリング係数 \\(c\\) を用いるだけで簡単に求められることがわかります。 $$p(\\mathbf{X})=\\prod_{n=1}&#94;{N} c_{n}\\qquad (13.63)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-3.html"},{"title":"HMMの最尤推定の計算過程","text":"ここでは、 HMMの最尤推定 で省略した計算過程について記述します。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) $$ \\begin{aligned} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})&=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10)\\\\ &=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\left[ \\prod_{n=2}&#94;{N}\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}} \\right] \\prod_{m=1}&#94;{N}\\prod_{i=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{i k}&#94;{x_{ni} z_{nk}}\\\\ \\therefore\\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta}) &=\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k\\left[\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk}\\right]\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;Kx_{ni}z_{nk}\\ln\\phi_{ik} \\end{aligned} $$ であるから、これを \\((13.12)\\) に代入して、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=&\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12)\\\\ =& \\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;Kx_{ni}z_{nk}\\ln\\phi_{ik} \\end{aligned} $$ ここで、 \\(\\sum_{\\mathbf{Z}} = \\sum_{\\mathbf{z_1},\\mathbf{z_2},\\ldots,\\mathbf{z_N}}\\) なので、それぞれ 関係の無い部分を周辺化 でき、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\sum_{\\mathbf{z_1}} p\\left(\\mathbf{z_1} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{1k}\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\sum_{\\mathbf{z_{n-1},z_n}}p\\left(\\mathbf{z_{n-1},z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;K\\sum_{\\mathbf{z_n}}p\\left(\\mathbf{z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)x_{ni}z_{nk}\\ln\\phi_{ik}\\\\ \\end{aligned}$$ となります。また、 \\(\\gamma,\\xi\\) の定義 を用いることで $$\\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_1}} \\gamma\\left(\\mathbf{z}_1\\right)z_{1k}\\right)\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\left(\\sum_{\\mathbf{z_{n-1},z_n}}\\xi\\left(\\mathbf{z_{n-1},z_{n}}\\right) z_{n-1,j}z_{nk}\\right)\\ln A_{jk}\\\\ &+\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_n}}\\gamma\\left(\\mathbf{z}_n\\right)x_{ni}z_{nk}\\right)\\ln\\phi_{ik} \\end{aligned} $$ と書き直せます。この時、潜在変数が離散なので、 \\(\\gamma,\\xi\\) はそれぞれ和が \\(1\\) となる \\(K,\\left(K\\times K\\right)\\) 個の非負の数の集合を用いて以下のように記述できます。 $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ したがって、これらを用いて上記の式を書き直すと、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} \\end{aligned}\\qquad (13.17) $$ Maximization step ここでは、上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) 関数を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化する際の ラグランジュの未定乗数法 を書き下します。 \\(\\boldsymbol{\\pi}\\) $$ \\begin{aligned} L\\left(\\boldsymbol{\\pi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) &= \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k} + \\lambda_1\\left(\\sum_{k=1}&#94;K\\pi_k - 1\\right)\\\\ \\frac{\\partial L}{\\partial \\pi_k}&=\\frac{\\gamma\\left(z_{1 k}\\right)}{\\pi_k} + \\lambda_1 = 0\\quad \\therefore \\pi_k = -\\frac{\\gamma\\left(z_{1 k}\\right)}{\\lambda_1}\\\\ \\frac{\\partial L}{\\partial \\lambda_1}&=\\sum_{k=1}&#94;K\\pi_k - 1 = 0\\quad \\therefore\\lambda_1 = -\\sum_{k=1}&#94;K\\gamma\\left(z_{1 k}\\right)\\\\ \\therefore\\pi_k&#94;{\\star} &= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} \\end{aligned} $$ \\(\\boldsymbol{A}\\) $$\\begin{aligned} L\\left(\\boldsymbol{A},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} + \\sum_{j=1}&#94;K\\lambda_{2,j}\\left(\\sum_{k=1}&#94;K A_{jk} - 1\\right)\\\\ \\frac{\\partial L}{\\partial A_{jk}} &= \\sum_{n=2}&#94;{N}\\frac{\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{A_{jk}} + \\lambda_{2,j} = 0\\quad \\therefore A_{jk} = -\\frac{\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\lambda_{2,j}}\\\\ \\frac{\\partial L}{\\partial \\lambda_{2,j}} &= \\sum_{k=1}&#94;K A_{jk} - 1 = 0\\quad \\therefore \\lambda_{2,j} = -\\sum_{k=1}&#94;K\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)\\\\ \\therefore A_{jk}&#94;{\\star}&=\\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\end{aligned}$$ \\(\\boldsymbol{\\phi}\\) $$\\begin{aligned} L\\left(\\boldsymbol{\\phi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} + \\sum_{k=1}&#94;K\\lambda_{3,k}\\left( \\sum_{i=1}&#94;D\\phi_{ik} - 1\\right)\\\\ \\frac{\\partial L}{\\partial\\phi_{ik}} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\phi_{ik}} + \\lambda_{3,k}=0\\quad \\therefore \\phi_{ik} = -\\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\lambda_{3,k}}\\\\ \\frac{\\partial L}{\\partial\\lambda_{3,k}} &= \\sum_{i=1}&#94;D\\phi_{ik} - 1 = 0 \\quad \\therefore \\lambda_{3,k} = -\\sum_{i=1}&#94;D\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni} = -\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)\\\\ \\therefore \\phi_{ik}&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)} \\end{aligned}$$ Expectation step $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14)\\\\ \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35)\\\\ \\end{aligned} $$ forward-algorithm \\((\\alpha)\\) $$\\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha(\\mathbf{z}_{n-1})p(\\mathbf{z} | \\mathbf{z}_{n-1})\\\\ \\end{aligned}$$ backward-algorithm \\((\\beta)\\) $$\\begin{aligned} \\beta\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N}, \\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}, \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+2}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} \\beta(\\mathbf{z}_{n+1})p(\\mathbf{x}_{n+1}|\\mathbf{z}_{n+1})p(\\mathbf{z}_{n+1}|\\mathbf{z}_n)\\qquad (13.38) \\end{aligned}$$ \\(\\gamma,\\xi\\) $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$\\begin{aligned} \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}\\right) \\\\ &=\\frac{p(\\mathbf{X} | \\mathbf{z}_{n-1}, \\mathbf{z}_{n}) p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{Bayes' theorem})\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{x}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43) \\end{aligned}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-2.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-2.html"},{"title":"HMMの最尤推定","text":"※ かなり導出部分を省略しています。導出は適宜 HMMの最尤推定の計算過程 を参照してください。 隠れマルコフモデルは、一般に以下の式で表されます。 $$ p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10) $$ \\(\\mathbf{X} = \\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) : \\(\\mathbf{Z} = \\{\\mathbf{z}_1,\\ldots,\\mathbf{z}_N\\}\\) \\(\\boldsymbol{\\theta}=\\{\\boldsymbol{\\pi}, \\mathbf{A}, \\boldsymbol{\\phi}\\}\\) ※ 一般に放出確率 \\(p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\boldsymbol{\\phi}\\right)\\) は、 二値のベクトル \\(\\mathbf{z}_n\\) の \\(K\\) 個の可能な状態に対応した \\(K\\) 個の要素を持つベクトルからなる任意の分布 $$ p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\phi\\right)=\\prod_{k=1}&#94;{K} p\\left(\\mathbf{x}_{n} | \\phi_{k}\\right)&#94;{z_{n k}}\\qquad (13.9) $$ を考えることも可能ですが、今回は下記の離散多項分布を考えます。 Name Probability Conditional Distribution initial state \\(\\pi_{k} \\equiv p\\left(z_{1 k}=1\\right)\\) \\(p\\left(\\mathbf{z}_{1} \\mid \\boldsymbol{\\pi}\\right)=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\quad (13.8)\\) transition probability \\(A_{j k} \\equiv p\\left(z_{n k}=1\\mid z_{n-1, j}=1\\right)\\) \\(p\\left(\\mathbf{z}_{n} \\mid \\mathbf{z}_{n-1}, \\mathbf{A}\\right)=\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}}\\quad (13.7)\\) emission probability \\(\\phi_{i k}\\equiv p\\left(x_{n i}=1 \\mid z_{n k}=1\\right)\\) \\(p(\\mathbf{x}_n \\mid \\mathbf{z}_n, \\boldsymbol{\\phi})=\\prod_{i=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{i k}&#94;{x_{ni} z_{nk}}\\quad (13.22)\\) 尤度関数 ここで、データ集合 \\(\\mathbf{X}\\) が観測された際に、上記の同時分布を潜在変数 \\(\\mathbf{Z}\\) について周辺化することで、尤度関数は以下のように記述されます。 $$ p(\\mathbf{X} | \\boldsymbol{\\theta})=\\sum_{\\mathbf{Z}} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.11) $$ しかし、この尤度関数は \\(n\\) について分解できない（ \\(\\mathbf{z}_n\\) ）ごとに和を取れないので、 条件付き独立 の性質を活かして 尤度関数の対数の期待値 を最大化する Baum-Welch algorithm (EM algorithm) を用います。 Baum-Welch (EM) パラメータ \\(\\boldsymbol{\\theta}&#94;{\\text {old }}\\) を用いて \\(p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化する。 対数尤度関数の期待値 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を求める。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化するパラメータに更新する。 \\(\\boldsymbol{\\theta}\\rightarrow\\boldsymbol{\\theta}&#94;{\\text {old }}\\) 1に戻る。 $$ Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12) $$ ここで、表記を簡単にするために、 γ 、 ξ を導入します。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14) \\end{aligned} $$ なお、潜在変数が離散なので、以下のように記述し直せます。（ \\(\\pi_{k},A_{j k},\\phi_{j k}\\) と同様。） $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ これらを用いると、 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) が以下のように書き下せます。 （計算過程） $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} \\end{aligned}\\qquad (13.17) $$ Maximization step ※ 実際の計算の順番からは前後しますが、先にM stepを説明します。 上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化するのは（別ブロックに別れているから）簡単で、それぞれ 適当なラグランジュ乗数を導入する ことで、以下のように求まります。 （計算過程） $$ \\begin{aligned} \\pi_{k}&= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} & (13.18)\\\\ A_{j k}&= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} & (13.19)\\\\ \\phi_{i k}&=\\frac{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right) x_{n i}}{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right)} & (13.23) \\end{aligned} $$ Expectation step M step で必要となる \\(\\gamma,\\xi\\) は、 条件付き独立性 を用いることで効率的に計算することができます。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ 条件付き独立性を用いてそれぞれ変形すると、以下の再帰式を導くことができます。 （計算過程） $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ ※ なお、ここで \\(\\alpha\\) の再起式を forward-algorithm 、 \\(\\beta\\) の再起式を backward-algorithm と呼ぶことがあります。 また、これらを用いて \\(\\xi\\) を記述することもでき、以下のように表せます。 （計算過程） $$\\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ 以上でBaum-Welchに必要な計算式が求まりました。 おまけ（尤度関数） 尤度関数は、アルゴリズムの停止条件に用いられるなど、値を求めることが非常に有用です。 求める際は、 $$ \\gamma\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad (13.33) $$ の両辺を \\(\\mathbf{z}_n\\) について周辺化すれば、左辺は $$\\sum_{\\mathbf{z}_{n}} \\gamma\\left(\\mathbf{z}_{n}\\right) = \\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right) = 1$$ となることが明らかなので、以下のように求まります。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{n}} \\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)\\qquad (13.41)$$ また、上記の式は任意の \\(n\\) について成立するので、 \\(n=N\\) の場合を考えれば \\(\\alpha\\) のみを用いて求めることができます。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{N}} \\alpha\\left(\\mathbf{z}_{N}\\right)\\qquad (13.42)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-1.html"},{"title":"Numpyの行列計算チートシート","text":"はじめに 様々なアルゴリズムを実装する際に漸化式は出るけど実装時にうまくいかない。ということは良くあります。また、 Python を使って実装する場合、そのほとんどが行列の取り扱いです。 （柔軟であるが故にエラーを吐かずに動いてしまう…笑） そこで、まずは行列計算のチートシートを作成します。（随時加筆修正していきます。） 目次 基本事項 内積（行列積） 外積 In [1]: import numpy as np 基本事項 In [2]: N = 3 A = np . arange ( N ) B = np . arange ( N ) . reshape ( - 1 , N ) # np.expand_dims(A, axis=0), A[None,:] C = np . arange ( N ) . reshape ( N , - 1 ) # np.expand_dims(A, axis=1), A[:,None] D = np . arange ( N * N ) . reshape ( N , N ) In [3]: print ( f \"A = {A} \" ) print ( f \"B = {B} \" ) print ( f \"C = {C} \" ) print ( f \"D = {D} \" ) A = [0 1 2] B = [[0 1 2]] C = [[0] [1] [2]] D = [[0 1 2] [3 4 5] [6 7 8]] In [4]: print ( f \"A.shape = {A.shape} \" ) print ( f \"B.shape = {B.shape} \" ) print ( f \"C.shape = {C.shape} \" ) print ( f \"D.shape = {D.shape} \" ) A.shape = (3,) B.shape = (1, 3) C.shape = (3, 1) D.shape = (3, 3) In [5]: print ( f \"A.ndim = {A.ndim} \" ) print ( f \"B.ndim = {B.ndim} \" ) print ( f \"C.ndim = {C.ndim} \" ) print ( f \"D.ndim = {D.ndim} \" ) A.ndim = 1 B.ndim = 2 C.ndim = 2 D.ndim = 2 ndim ex. scalar $(0)$ 1 , 2 ,... vector $1$ A matrix $\\geq2$ B , C , D 内積（行列積） vector & scalar / matrix & scalar スカラーが絡むと、各要素とスカラーの積となる。 shape の変化はない。 どちらから掛けてもエラーは起こらない。 In [6]: print ( f \"np.dot(A,2) = {np.dot(A,2)}\" ) # vector & scalar print ( f \"np.dot(B,2) = {np.dot(B,2)}\" ) # matrix & scalar print ( f \"np.dot(C,2) = {np.dot(C,2)}\" ) # matrix & scalar print ( f \"np.dot(D,2) = {np.dot(D,2)}\" ) # matrix & scalar np.dot(A,2) = [0 2 4] np.dot(B,2) = [[0 2 4]] np.dot(C,2) = [[0] [2] [4]] np.dot(D,2) = [[ 0 2 4] [ 6 8 10] [12 14 16]] vector & vector 内積となる。 結果はスカラーとなる。 shape が異なると、エラーが起きる。 In [7]: print ( f \"np.dot(A,A) = {np.dot(A,A)}\" ) # vector & vector np.dot(A,A) = 5 In [8]: np . dot ( A , np . arange ( N - 1 )) # shape=(3,) & shape=(2,) ValueError : shapes (3,) and (2,) not aligned: 3 (dim 0) != 2 (dim 0) vector & matrix 行列積となる。 ベクトルは、位置によって変換のされ方が異なる。 左がベクトルの場合： np.dot((x,) (y,z)) = np.dot((1,x) (y,z)) 右がベクトルの場合： np.dot((y,z) (x,)) = np.dot((y,z) (x,1)) 行列積であるので、結果の shape は np.dot((x,y) (y,z)) = (x,z) となる。 上で y が異なるとエラーが生じる。 In [9]: print ( np . dot ( A , B )) # np.dot((3,)(1,3)) print ( np . dot ( A , C )) # np.dot((3,)(3,1)) print ( np . dot ( B , A )) # np.dot((1,3)(3,)) print ( np . dot ( C , A )) # np.dot((3,1)(3,)) ValueError : shapes (3,) and (1,3) not aligned: 3 (dim 0) != 3 (dim 0) [5] [5] ValueError : shapes (3,1) and (3,) not aligned: 1 (dim 1) != 3 (dim 0) matrix & matrix c = np.dot(a,b) a.shape=(a1,a2,...,aN,X) b.shape=(b1,b2,...,X,bM) c.shape=(a1,a2,...,aN,b1,b2,...,bM) c[i1,i2,...,iN,j1,j2,...,jM] == a[i1,i2,...,iM,:].dot(b[j1,j2,...,jM-1,:,jM]) In [10]: import itertools def checkNPdot ( shape1 , shape2 ): \"\"\" 計算可能なshapeの関係を列挙する。 \"\"\" a = np . arange ( np . prod ( shape1 )) b = np . arange ( np . prod ( shape2 )) for comb1 in itertools . permutations ( shape1 , len ( shape1 )): for comb2 in itertools . permutations ( shape2 , len ( shape2 )): try : print ( f \" {comb1} .dot( {comb2} ) = {(a.reshape(comb1).dot(b.reshape(comb2))).shape}\" ) except : pass 以下で具体的に見ていく！ np.dot(2D, 3D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,X,k) c.shape=(i,j,k) c[i,j,k] == a[i,:].dot(b[j,:,k]) In [11]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) c = np . dot ( a , b ) In [12]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3) b.shape = (2, 3, 4) np.dot(a,b).shape = (2, 2, 4) In [13]: I , J , K = c . shape In [14]: np . all ([ c [ i , j , k ] == a [ i ,:] . dot ( b [ j ,:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[14]: True np.dot(3D,2D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(X,k) c.shape=(i,j,k) c[i,j,k] == a[i,j,:].dot(b[:,k]) In [15]: a = np . arange ( 24 ) . reshape ( 4 , 2 , 3 ) b = np . arange ( 6 ) . reshape ( 3 , 2 ) c = np . dot ( a , b ) In [16]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (4, 2, 3) b.shape = (3, 2) np.dot(a,b).shape = (4, 2, 2) In [17]: I , J , K = c . shape In [18]: np . all ([ c [ i , j , k ] == a [ i , j ,:] . dot ( b [:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[18]: True np.dot(3D,3D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) In [19]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 60 ) . reshape ( 3 , 4 , 5 ) c = np . dot ( a , b ) In [20]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4) b.shape = (3, 4, 5) np.dot(a,b).shape = (2, 3, 3, 5) In [21]: I , J , K , L = c . shape In [22]: np . all ([ c [ i , j , k , l ] == a [ i , j ,:] . dot ( b [ k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[22]: True np.dot(2D,4D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,:].dot(b[j,k,:,l]) In [23]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 120 ) . reshape ( 2 , 4 , 3 , 5 ) c = np . dot ( a , b ) In [24]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) # c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) a.shape = (2, 3) b.shape = (2, 4, 3, 5) np.dot(a,b).shape = (2, 2, 4, 5) In [25]: I , J , K , L = c . shape In [26]: np . all ([ c [ i , j , k , l ] == a [ i ,:] . dot ( b [ j , k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[26]: True np.dot(3D,4D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,l,X,m) c.shape=(i,j,k,l,m) c[i,j,k,l,m] == a[i,j,:].dot(b[k,l,:,m]) In [27]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 360 ) . reshape ( 3 , 5 , 4 , 6 ) c = np . dot ( a , b ) In [28]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4) b.shape = (3, 5, 4, 6) np.dot(a,b).shape = (2, 3, 3, 5, 6) In [29]: I , J , K , L , M = c . shape In [30]: np . all ([ c [ i , j , k , l , m ] == a [ i , j ,:] . dot ( b [ k , l ,:, m ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M )]) Out[30]: True np.dot(4D,4D) c = np.dot(a,b) a.shape=(i,j,k,X) b.shape=(l,m,X,n) c.shape=(i,j,k,l,m,n) c[i,j,k,l,m,n] == a[i,j,k,:].dot(b[l,m,:,n]) In [31]: a = np . arange ( 120 ) . reshape ( 2 , 3 , 4 , 5 ) b = np . arange ( 360 ) . reshape ( 3 , 4 , 5 , 6 ) c = np . dot ( a , b ) In [32]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4, 5) b.shape = (3, 4, 5, 6) np.dot(a,b).shape = (2, 3, 4, 3, 4, 6) In [33]: I , J , K , L , M , N = c . shape In [34]: np . all ([ c [ i , j , k , l , m , n ] == a [ i , j , k ,:] . dot ( b [ l , m ,:, n ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M ) for n in range ( N )]) Out[34]: True 外積 c = np.outer(a,b) c[i][j] = a.reshape(-1,)[i]*b.reshape(-1,)[j] In [35]: c = np . outer ( a , b ) In [36]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) a.shape = (a1,a2,...,aN) b.shape = (b1,b2,...,bM) In [37]: Na = np . prod ( a . shape ) Nb = np . prod ( b . shape ) In [38]: print ( f \"Na = {Na} \" ) print ( f \"Nb = {Nb} \" ) Na = a1*a2*・・・*aN Nb = b1*b2*・・・*bM In [39]: print ( c . shape ) (Na, Nb) In [40]: np . all ([ c [ i ][ j ] == a . reshape ( - 1 ,)[ i ] * b . reshape ( - 1 ,)[ j ] for i in range ( Na ) for j in range ( Nb )]) Out[40]: True In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-0.html"},{"title":"分子生命科学Ⅲ 第1回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 講義概要 この授業最大の目的は、 「将来僕らが脳を対象とすることになった時に敷居を低くする」 こと。 # タイトル 内容 日付 1 神経系の構造と機能 中枢神経系の構造・機能 末梢神経系の構造・機能 9/26,10/3 2 感覚神経系 感覚系の構成 体性感覚系 視覚系（末梢視覚系・平衡感覚系） 聴覚と平衡感覚（聴覚系・平衡感覚系） 化学感覚系（嗅覚系・味覚系） 10/10,17,24,31 3 運動系 脊髄による運動制御 脳による運動制御 11/14,21 4 脳と行動の化学的制御 11/28 5 摂食行動 12/12 6 脳のリズムと睡眠 脳波 睡眠 概日リズム 12/19 7 精神疾患 統合失調症 感情障害 不安障害 12/26 8 神経変性疾患 アルツハイマー病 パーキンソン病 ALS 1/9 神経系の構造と機能（１） 神経系の機能的構成 神経系は、 感覚系 、 統合系 、 運動系 の３つに分けることができる。 感覚系は、感覚器で何かを感じると、 陽イオン が神経細胞の末端に流れ込み、 活動電位 が上がり、電気的なシグナルとして 中枢神経系(CNS)特に、大脳皮質の感覚野 にこの入力を伝える。 運動系は、逆向きで、脳の運動野からのシグナルが 末梢神経系 に伝わる。 神経系の構成成分 ニューロン(神経細胞,neuron) グリア細胞(glial cells) 血管(blood vessels) ニューロン(neuron) 極性のある細胞で、 細胞体(cell body or soma) 、 樹状突起(dendrites) 、 軸索(axon) からなり、（ほとんどの場合） 活動電位(action potential) を発生する。 膝蓋腱反射(knee-jerk reflex) ニューロンがどのように神経回路に含まれているか、を示す良い例。 医師が膝蓋骨の下の腱を軽く叩くと、大腿四頭筋が伸ばされ、その信号が脊髄まで伝わる。この信号が脊髄で 運動ニューロン に直結しており、運動ニューロンが発火して少し離れた部分の筋肉を収縮させる。その反動で足が上がる。 グリア細胞(glia cells) グリア細胞はニューロン（ヒトでは \\(1\\) - \\(2\\times10&#94;{11}\\) 個）の \\(3\\) - \\(10\\) 倍（マウスだと同数程度）存在し、脳の体積の約半分を占める。 長い軸索と興奮性膜を特徴とするニューロンに対して、グリア細胞の突起は細胞体の周辺に留まり、活動電位を発生しない。 ニューロンの生存や発達、機能発言のための液性環境維持と代謝的支援、神経伝達の調節等を行なっている。 と、ニューロンの補助的な役割だと今までは考えられていたが、最近ではもっと積極的な意味があるのでは無いかと研究されている。 中枢神経系のグリア細胞が下の4種からなる。 アストロサイト(astrocyte)（アストログリア、星状膠細胞） オリゴデンドロサイト(oligodendrocyte)（オリゴデンドログリア、稀突起膠細胞） 上衣細胞(ependymal cell) ミクログリア(microglia)（小膠細胞） アストロサイト(astrocyte)の機能 血液脳関門 を形成してがんが脳に転移しないように防御したりしている。 神経伝達物質の最取り込み（神経伝達物質が出てすぐに取り込まないと、麻薬や覚せい剤のような影響が出てしまう。）。 オリゴデンドロサイト(oligodendrocyte) 中枢神経系 において、 髄鞘（ミエリン・myelin） を形成する。（ 末梢 では シュワン細胞 が髄鞘を形成する。） 上衣細胞(ependymal cells) ミクログリア(microglia) 上衣細胞は脳室と脊髄中心管を覆う一層の上皮性細胞で、脳を脳脊髄液から遮断する（脳脊髄液脳関門(cerebro-spinal fluid brain barrier)） ミクログリアは損傷に際して活性化する脳内の免疫性細胞で貪食能を持つ。アストログリア、オリゴデンドロサイト、上衣細胞が 外胚葉 由来なのに対し、ミクログリアは 中胚葉 由来である。 脳の構造 哺乳動物の脳は、ほぼ共通の構造を持っている。ヒトの特徴は、 連合野 が広いということである。 解剖学用語 解剖学用語 解剖学的切断面 神経系の構成 中枢神経系(CNS: central nervous system) 脳(brain) 大脳(cerebrum) 小脳(cerebellum) 脳幹(brain stem) 脊髄(spinal cord) 末梢神経系(PNS: peripheral nervous system) 体性神経系(somatic nervous system) 脳神経(cranial nerve) 脊髄神経(spinal nerve) 自律神経系(autonomic nervous system) 小脳(cerebellum) 脳幹（延髄・橋・中脳・間脳）の背後に位置する。 大脳や脊髄と広範な連絡を持つ運動制御中枢 言語や思考などの高次脳機能に関与 小脳の 同 側の身体の運動に関与 脳幹(brain stem) 間脳→中脳→橋→延髄からなり、上方で間脳に、下方で脊髄に連なる（狭義では間脳を含めない）。 大脳から脊髄・小脳への情報、逆に脊髄・小脳から大脳への情報を中継 呼吸、意識、体温調節等の生命維持機能を制御 （大脳・小脳の損傷では生存できるが、脳幹の損傷は通常早急な死に至る） 錐体交叉 脳の運動ニューロンの軸索が延髄の後ろで一旦交叉（ 錐体交叉 ）して反対側にいっているから、反対側の機能がうまく制限できなくなる。 一方で 小脳 は同側なので、そのようなことは起こらない。 脊髄(spinal cord) 脊髄は脊柱管にあり、延髄に続いて錐体交叉下端より始まり、脊髄円錐にて終わる。 皮膚・関節・筋肉から脳への情報、逆に脳からの情報を伝える主経路 末梢神経の脊髄神経で身体と通ずる。 脊髄に入る情報を運ぶ軸索は 後根(dorsal root) に含まれ、脊髄から出ていく情報を運ぶ軸索は 前根(ventral root) に含まれる。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html"}]};