var tipuesearch = {"pages":[{"title":"デジタルカメラ系","text":"講師： 相澤清晴 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 講義内容（相澤先生） 入力・カメラ系：デジタルカメラでの撮像過程 表色系 フィルタリング・画像復元 特徴抽出(Global features, Local features, Deep features) 画像符号化 デジタルカメラ系 ポイントは、 「空間方向の標本化」 と 「色信号の量子化」 人間の眼と電子の眼の ダイナミックレンジ は、 人の視覚：8桁（星空〜太陽光下） フィルム：4桁 CCD,CMOS：3桁 デジタルカメラ構造 CMOSセンサー・CCDセンサー CMOS(Complementary Metal Oxide Semiconductor・相補性金属酸化膜半導体)センサー は、 CCD(Charge-Coupled Device)センサー と同じように、光を感じて電気信号に変える半導体センサーである。 CMOSセンサーには 受光素子と電気信号を増幅するアンプがたくさん並んでついている ため、CCDセンサーに比べて低い電圧で動作し、読み出しを高速化することが容易である。 More: キヤノン：技術のご紹介 | サイエンスラボ CMOSセンサー デモザイキング 単板式（↔︎3板式） カメラは画素ごとに 「 R ・ G ・ B 」 のどの色を読み取るかが決まっており、その並び方を ベイヤー配列 と呼ぶ。 この場合、欠損した画素値を補完する必要がある。 このような画素ごとに色チャネルが異なる1枚のグレースケール画像（モザイク状のカラー画像）から1枚のRGBカラー画像を再構成する処理を （カラー）デモザイキング と呼ぶ。 周囲の色情報から線形補完する バイリニア補間 や、エッジの方向を判別して、滑らかに変化する方向のが措置だけを用いて補完する エッジセンシング補完 などがある。 3板式 ダイクロイックプリズム を用いて入射光を3つの波長帯域に分解して、それぞれを専用の撮像素子で撮像する。 最初の反射面は青の波長帯域だけを反射して残りの波長帯域は通過、次の反射面は赤の波長帯域だけを反射して緑の波長帯域を通過、といった感じ。 高画質なカラー画像を撮影できるが、レンズ光学系と撮像素子の間にダイクロイックプリズムを配置する必要があることと、3つの撮像素子が必要なことから、コストやカメラサイズの面では不利な場合もある。 放送や取材などのための業務用のカメラではこちらが使われる。 コントラストAF コントラストは、 「画像のヒストグラムの分布の広がり」 のこと。画素値の最大値を \\(I_{\\max}\\) 、最小値を \\(I_{\\min}\\) とすると、以下のような求め方がある。 $$\\begin{cases}\\begin{aligned}C_1 &= I_{\\max}-I_{\\min}\\\\C_2 &= \\left(I_{\\max}-I_{\\min}\\right)/\\left(I_{\\max}+I_{\\min}\\right)\\end{aligned}\\end{cases}$$ いずれの求め方でも画像中に1画素でも極端に大きな（小さな）画素が含まれると、画像全体から受ける印象は同じにも関わらずコントラストが異なってしまう。このため、 頻度が一定値よりも小さな画素値を考慮しない などの工夫がある。 コントラストAF(Auto Focus) は、撮像素子に映った映像をもとに、ピントレンズを動かしながら 明暗差（コントラスト） が大きなところを探してピントを合わせる方式。 撮像素子とAF用センサーを兼用できるのでカメラ本体の 小型化が可能 となるため、コンパクトデジカメで広く使われる方式である。 （スマホでも使われている。） レンズを動かして （フォーカスを動かしながら） AFエリアの輝度を把握しないといけないので、後述の位相差AF方式に比べて、ピント検出に時間がかかる 位相差AF 位相差AF は、レンズから入った光を2つに分けて専用のセンサーへ導き、結像した2つの画像の間隔からピントの方向と量を判断する方式。 コントラストAFに比べると、レンズを動かしながらピントを探る必要がないので 高速にピント合わせを行うことができる。 専用センサーとレンズから入った光を撮像素子と専用センサーへ分岐させる仕組みが必要となるために カメラ本体の小型化が難しい。 AE&AGC AE: Auto Exposure.自動露出。露出（絞り値とシャッター速度の組み合わせ）を自動で決定する機能のこと。 AGC: オートゲインコントロール(Auto Gain Control)。撮影場所が薄暗い場合などに、光を増幅し、明るい映像に調整する機能。この値を大きくすればするほど、より暗い場所を明るく撮影できるが、その分ノイズが増える。 画像処理 \\(\\gamma\\) 補正 デジタル画像を表示する際、それぞれに色情報の伝送を行いますが各機器には固有の発色特性があり、入力された色情報をそのまま表示することが出来ない。 このとき生じる誤差を \\(\\gamma\\) 特性 と呼び、画像を自然の色に近くなるよう輝度や彩度の誤差を修正する機能を \\(\\gamma\\) 補正 と呼ぶ。 AWB（オートホワイトバランス） 異なる照明下でも、白が白に写るような色の調整、赤と青の利得調整をすることが多い。 照明とカメラの温度関係によって、画像に 青みがかかったり 、 赤みがかかったり する。 白い対象を写し、白と見えるようにバランス調整を行う。 あらかじめ、白熱灯、蛍光灯、太陽光などの何種類かの補正係数を求めておき、切り替えて使う。 心理学の世界では 灰色世界仮説 というものもある。 非常に難しい。綺麗に解決できれば有名になれるXD AS（オートスラビライゼーション） 手ぶれ補正 揺れの検出： 映像〜動きベクトル センサ〜角速度ベクトル 揺れの補正： 映像の切り出し 可変頂角プリズム（光軸の変化） 撮像デバイス駆動 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-8.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-8.html"},{"title":"3次元空間情報の取得と処理","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 大きく分けて2種類ある。 アクティブ法 ：光やレーザーなど、エネルギーを当てて反応を観測。 パッシブ法 ：カメラなど、エネルギーを放出しないもののみを使う。 アクティブ法 手法 説明 特徴 time-of-flight法(ToF) 光を照射して戻るまでの時間から算出。直接は計算できないので、変調をかけて位相差等から計算する。 （計算可能な範囲が指定されるのはこの為。） 高精度だが、時間がかかる。そのため、動物体に弱い。 XBox2(Microsoft)のKinect2というコントローラや自動運転用のLIDARなどで使われている。 スリット光照射法 線状のレーザー光等を照射し、線の歪みから計算する。（→ エポピーラ幾何学 p.312 を参照） Structured light 法 細かさの異なる市松模様（チェッカーボードパターン）や、パターンが既知のランダムドット等を照射し、位置ずれから計算 XBoxのKinectで使われていた。 パッシブ法 手法 説明 ステレオ法 複数のカメラを用いて、見え方の違いから奥行推定 平行ステレオ法 近くのものは大きくズレ、遠くのものはズレない。正確には 以下 照度差ステレオ法 複数の見え方があれば良いので、カメラを1台にして照明を変化させても良い。詳細は 以下 Shape-from-motion(SfM) 首里城プロジェクトや \"Building Roma in a Day\" などで使用されている。詳細は 以下 ) 平行ステレオ法 物体の3次位置：$(X,Y,Z)$ 2カメラの距離：$b$ それぞれのカメラで点 $(X,Y,Z)$ が見えている画素位置 $(u,v),(u&#94;{\\prime},v&#94;{\\prime})$ イメージセンサのピクセル間隔：$\\delta$（縦・横とも） カメラの焦点距離：$f$ 画像面と光軸の交点が画像座標原点 このとき、視差（$=u-v$）がわかると、奥行き情報 $Z$ がわかる。なお、視差は ブロックマッチング法 等で見つける。 照度差ステレオ法 最も簡単な反射モデル （均等拡散反射のみ。鏡面反射なし。） で行う。 $$\\text{Lambert model: }I_x\\left(\\text{Brightness}\\right)=\\rho L\\mathbf{n}\\cdot\\mathbf{S} = \\rho L \\cos\\theta$$ $\\rho, \\mathbf{S},L$ は予め知ることができる。 未知なのは、$\\mathbf{n} = \\left(n_x,n_y,n_z\\right)$ の3変数のみ。（$n_z = \\sqrt{1-\\left(n_x&#94;2+n_y&#94;2\\right)}$ とすると2変数） 2~3通りの位置から観測すると、$\\mathbf{n}$ がわかる。 通常は20~100の位置に照明をおき、最小2乗法で解く。 Shape-from-motion(SfM) 2枚の視点の異なる画像があるとする。 3次元中の点 $p$ がそれぞれの画像中で点 $(u.v),(u&#94;{\\prime},v&#94;{\\prime})$ で見えていたとする。 2つの視点間には回転 $\\mathbf{R}(3\\times3)$ と平行移動 $\\mathbf{t}(3\\times1)$ から成る行列で次の関係がある。 $$ \\left(u&#94;{\\prime},v&#94;{\\prime},1\\right)\\begin{pmatrix} f_{11} & & \\\\ & \\ddots & \\\\&&f;_{33} \\end{pmatrix}\\begin{pmatrix} u\\\\v\\\\1 \\end{pmatrix} = \\mathbf{0} $$ 逆に $\\mathbf{F}$ がわかれば2枚の画像の全てのピクセルで対応がとれているはず。対応点がわかっている点が9点以上あると、最小2乗法で解ける。 しかし、実は $\\mathbf{F}$ は規格化できるので、$8$ パラメータが決まれば残り $1$ つは自動的に決定できる。 （自由度 $8$, eight-point algorithmと呼ぶ。） 今は five-point algorithm まで進化。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-7.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-7.html"},{"title":"動画像処理","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt 動画像は、静止画の集まり（パラパラ漫画） 10~15[fps]あると、人は動画だと感じる。 映画：24[fps] TV、インターネット動画：30~60[fps] ロボット制御に必要な速度（アクチュエーターの反応速度が~ms）：1,000[fps] 自動運転 ~ 10,000[fps] 10[fps] 25[fps] 50[fps] Start Stop → 何をするか？ 動物体の検出・解析 動画の編集 動画の理解・認識 動物体の検出・解析 背景差分・フレーム間差分 【問題】 照明変化（屋外では良く起こる）、背景の変化（木の揺れ等）に弱い。 背景画像をどうやって作るかもポイント。 【統計的背景差分】 各ピクセルで時間的に統計情報を取ってもう少しsmartに背景差分することを考える。背景クラスを $w_b$ 前景クラスを $w_f$ とすると、やることは、$\\left(p\\left(w_f | I(x,y)\\right), p\\left(w_b | I(x,y)\\right)\\right)$ のうち確率の高いクラスを採用する。 ここで、ベイズの定理より、 $$ \\begin{cases} \\begin{aligned} p\\left(w_f | I(x,y)\\right) &= \\frac{p(w_f)p(I\\left(x,y)|w_f\\right)}{p(I(x,y))}\\propto p(w_f)p\\left(I(x,y)|w_f\\right)\\\\ p\\left(w_b | I(x,y)\\right) &= \\frac{p(w_b)p(I\\left(x,y)|w_b\\right)}{p(I(x,y))}\\propto p(w_b)p\\left(I(x,y)|w_b\\right) \\end{aligned} \\end{cases} $$ $p(w_b, w_f)$：その画素が $w_b, w_f$ である事前確率（例：木の上に人や車はいないので、$p_b$ 大, $p_f$：小） $p(I|w_c)$：$w_c$ だった時に、どの程度の確率でその画素値が観測されるか。 動き量の計算 【ブロックマッチング(Block Matching)】 ある時刻 $t$ におけるある領域に最も似ている時刻 $t+1$ の領域を、以下の手法等を用いて探す。 SSD(Sum of Squared Difference) SAD(Sum of Absolute Difference) NCC(Normalized Cross Correlation) 動画像圧縮では、この動きベクトル(motion vector)と差分を符号化することで圧縮を実現。 【オプティカルフロー(optical flow)】 2枚の画像間で、変化が微小だとすると、 $$\\begin{aligned}I(x+\\Delta x, y+\\Delta y, t+\\Delta t) &\\simeq I(x,y,t) + \\frac{\\partial I}{\\partial x}\\Delta x + \\frac{\\partial I}{\\partial y} \\Delta y+ \\frac{\\partial I}{\\partial t} \\Delta t + \\cdots\\\\\\rightarrow I_x\\Delta x + I_y\\Delta y + I_t\\Delta t&\\simeq0\\\\ I_x\\frac{\\Delta x}{\\Delta t} + I_y\\frac{\\Delta y}{\\Delta t} + I_t &= 0\\\\\\left(\\Delta t\\rightarrow0\\right)\\qquad I_xu+I_yv+I &= 0\\\\(u,v) &= \\left(\\frac{dx}{dt},\\frac{dy}{dt}\\right)\\end{aligned}$$ これだけだと、自由度が高すぎて一意に決まらないので、微小領域では動きが滑らかという仮定を置く。（Lucas-Kanada法, 1981） $$\\mathbf{G} = \\left[\\begin{array}{c}I_{x_1} &I;_{y_1} \\\\\\vdots&\\vdots\\\\I_{x_m}&I;_{y_m}\\end{array}\\right],\\quad \\mathbf{f} = \\left[\\begin{array}{c}u \\\\v\\end{array}\\right],\\quad\\mathbf{b} = \\left[\\begin{array}{c}I_{t_1} \\\\\\vdots\\\\I_{t_m}\\end{array}\\right]$$ 上記のように定義し、滑らかさの条件を使うと、 $$\\begin{aligned}\\mathbf{Gf}+\\mathbf{b} &= \\mathbf{0}\\\\\\therefore\\mathbf{f}&#94;{\\ast}&=-\\left(\\mathbf{G}&#94;T\\mathbf{G}\\right)&#94;{-1}\\mathbf{G}&#94;T\\mathbf{b}\\quad \\left(\\because\\text{Least squares}\\right)\\end{aligned}$$ 【DNNによる映像処理】 (x,y,t)の3次元をどう扱うか？ 画像（2次元）と時間の情報を分ける。 3D Convolution：空間情報と時間情報を同時に畳み込む。 仮想3D Convolution：空間情報を畳み込んで、その後時間方向に畳み込む。 動画の編集 In [ ]: 動画の理解・認識 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-6.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-6.html"},{"title":"4.Guided NEST exercises (intermediate)","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Thomas Burns Lecture Material https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-4_Plasticity-and-Learning Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial4.py In [1]: import sys sys . path . append ( \"path/to/library/\" ) Part 1: STDP and its varities Part-2:-Unsupervised-pattern-detection-using-STDP Make a training data NEST-simulation Part 1: STDP and its varities STDP alters the weights of synapses depending on the relative spike timing between the postsynaptic neuron and the presynaptic neuron. _STDP overview (from Sjöström J, Gerstner W (2010) Spike-timing dependent plasticity. Scholarpedia )_ Within some time windows: if \"PRE before POST\" , we get Long-Term Potentiation (LTP) if \"POST before PRE\" , we get Long-Term Depression (LTD) The time windows for LTP and LTD are generally on the order of tens of milliseconds . The LTD window is generally longer than the LTP window. Implementation To implement STDP in spiking neural network models, different STDP rules can be used. In general, different rules result in different distributions of synaptic weights over the course of learning. Examples of such weight distributions are shown below. STDP rules (from Gilson M, Fukai T (2011) Stability versus Neuronal Specialization for STDP. PLoS ONE ) Additive STDP tends to produce competition between synapses but needs to have its weights bound to ensure network stability (e.g. to avoid over-excitation) Multiplicative STDP tends to produce less competition between synapses but owing to its weight-dependent manipulation of synaptic weights does not require artificial bounds. Logorithmic STDP attempts to reconcile the two. Additive STDP rule In the following exercise, we will use the additive STDP rule , sometimes also called the exponential STDP rule : $$ \\Delta w_j= \\begin{cases} a&#94;+ \\cdot e&#94;{\\big( \\dfrac{t_j-t_i}{\\tau&#94;+} \\big)} & \\text{if}\\ t_j \\leq t_i & \\text{(LTP)} \\\\ -a&#94;- \\cdot e&#94;{\\big( - \\dfrac{t_j-t_i}{\\tau&#94;-} \\big)} & \\text{if}\\ t_j > t_i & \\text{(LTD)} \\end{cases} $$ variable Meaning $a&#94;+$ learning rate for LTP $a&#94;-$ learning rate for LTD $t_j$ spike time of the presynaptic neuron $j$ $t_i$ spike time of the postsynaptic neuron $i$ $\\tau&#94;+$ time constant for LTP (ms) $\\tau&#94;-$ time constant for LTD (ms) Using pre-defined paramaters which we will use in the second part of this tutorial , let's plot **\"how the this STDP rule changes weights depending on the timing of presynaptic and postsynaptic spikes.\"** In [2]: import numpy as np import matplotlib.pyplot as plt In [3]: from OIST.tutorial4 import AddSTDP In [4]: add_STDP_paramaters = { 'a_LTP' : 0.03125 , 'a_LTD' : 0.85 * 0.03125 , 'tau_LTP' : 16.8 , 'tau_LTD' : 33.7 } In [5]: model = AddSTDP () model . load_params ( ** add_STDP_paramaters ) In [6]: time_differences = np . linspace ( - 125 , 125 , 1000 ) In [7]: model . simulate ( time_differences ) Exercise 1 What features do you notice in this STDP curve? Experiment with different values in add_STDP_paramaters . How do each of the values change the shape of the STDP curve? How, in a network of neurons, could this STDP rule lead to over-excitation or network instability? The closer the spike timing between the postsynaptic neuron and the presynaptic neuron are, the bigger the influence is. If a becomes larger, the STDP curve expand in the y-axis direction , and if tau becomes larger, the STDP curve shrink in the x-axis direction . When the time difference gets ver close to 0, weight changes will diverge and lead to over-excitation or network instability. Part 2: Unsupervised pattern-detection using STDP In this part of the tutorial we will be replicating the results from [Masquelier et al. (2008) Spike Timing Dependent Plasticity Finds the Start of Repeating Patterns in Continuous Spike Trains. PLoS ONE](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0001377) . (In fact, we already reproduced Figure 2 from their paper in the first part of this tutorial.) Masquelier et al. (2008) create a spiking neural network with 2,000 presynaptic neurons just one postsynpatic neuron. They implement additative STDP in this network, which allows the \"postsynaptic neuron\" to learn to detect the beginning of repeating patterns of spiking activity arriving from the 2,000 presynaptic neurons. Importantly, the presynaptic neurons also have periods of random , non-patterned activity and have additional noisy spiking activity at all times. Let's begin by constructing the spike trains of the 2,000 presynaptic neurons. We will run our simulations for 450s, so we will create 450s worth of spike trains for these neurons. The first step is construct random activity with the following properties: Each presynpatic neuron will emit spikes independently generated by a Poisson process with a variable instantaneous firing rate $r$ $r$ varies randomly beteen $0$ and $90$ Hz. The rate of change in $r$ is modified by $dr$ $dr$ starts at $0$ $dr$ is modified by $ds$, randomly picked from a uniform distribution over $[−360,+360]$ Hz/s. $dr$ is clipped to within $[-1800,1800]$ Hz/s we will also manually add some additional spikes to guarantee that \"in every 50ms time bin, each neuron spikes at least once\" Make a training data In [8]: from OIST.tutorial4 import PoissonProcessGenerator , plotPatternRaster In [9]: poisson_params = { \"min_span\" : 50 , # [ms] \"starting_Hz\" : 54 , # [Hz] \"min_r\" : 0 , # [Hz] \"max_r\" : 90 , # [Hz] \"min_ds\" : - 3.6e-1 , # [Hz/ms] \"max_ds\" : 3.6e-1 , # [Hz/ms] \"min_dr\" : - 1.8 , # [Hz/ms] \"max_dr\" : 1.8 , # [Hz/ms] \"segment_length\" : 50 , # [ms] Length of 1 Presynaptic spiking segment length. } In [10]: seed = 0 In [11]: num_presynaptic_neurons = 2000 # Number of the presynaptic neurons. simulation_length = 1000 # [ms] In [12]: poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) In [13]: spikes = poisson_generator . generate_spikes ( simulation_length , num_presynaptic_neurons , seed = seed ) Processing Time: 0.708[s] Now we will Divide the presynaptic spiking activity into segments of 50ms Select a random 50ms segment to be considered as the \"pattern\" Copy and paste this pattern across the raster plot in a certain proportion of segments. Add 10Hz Noises to all neurons at all times. Divide and Select \"Pattern\" In [14]: poisson_generator . select_segment ( seed = seed ) Spikes divided into 20 segments. 13-th segment was selected as a Pattern. In [15]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( spikes , ax = ax ) plt . tight_layout () plt . show () Copy and Paste this \"Pattern\" In [16]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [17]: pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) Number of spikes added: 250000.0 Spikes are saved as `self.pattern_repeated_spikes`. Add Poisson Noises In [18]: frequency = 10 # [Hz] In [19]: noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes are saved as `self.noise_added_spikes`. In [20]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) plt . tight_layout () plt . show () Firing Rates In [21]: from OIST.tutorial4 import plotFiringRates In [22]: fig = plt . figure ( figsize = ( 12 , 4 )) fig = plotFiringRates ( noise_added_spikes , fig = fig ) plt . show () Check the Repeated Position In [23]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) ax = plotPatternRaster ( output_identities , cmap = \"RdGy_r\" , ax = ax , alpha = 0.7 ) plt . tight_layout () plt . show () With these paramaters, we can embed a repeating pattern within some pseduo-random, spontaneous activity. However, learning takes time! And we have only been simulating 1s of activity. In this task, the authors reported they needed 13.5s of activity (or 700 pattern presentations) for the neuron to show signs of learning to recognise the pattern. Figure 4 from Masquelier et al. 2008: Overview of the 450 s simulation. Here we plotted the membrane potential as a function of simulation time, at the beginning, middle, and end of the simulation. Grey rectangles indicate pattern presentations. (a) At the beginning of the simulation the neuron is non-selective because the synaptic weights are all equal. It thus fires periodically, both inside and outside the pattern. (b) At t≈13.5 s, after about 70 pattern presentations and 700 discharges, selectivity to the pattern is emerging: gradually the neuron almost stops discharging outside the pattern (no false alarms), while it does discharge most of the time the pattern is present (high hit rate), here even twice (c) End of the simulation. The system has converged (by saturation). Postsynaptic spike latency is about 4 ms. Hit rate is 99.1% with no false alarms (estimated on the last 150 s). It is therefore necessary to use some pre-computed spontaneous activity prepared earlier, found in the file spont_100s_alt.npy . It contains 100s of pseduo-random, spontaneous activity for us to use in our simulations. Warning, it is a large file at ~1.6GB! $ wget --content-disposition https://www.dropbox.com/sh/p9ml6l402znbzmy/AAA2LP7W1bcvwSgYnmx9ahyga?dl = 0 & preview = spont_100s_alt.npy # Pattern1. Download pre-computed files. pre_spikes_wrepeats_100s = np . load ( \"path/to/spont_100s_alt.npy\" ) poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) poisson_generator . memorize ( pre_spikes_wrepeats_100s , repeated = False ) # Pattern2. Make by myself. simulation_length_100s = 100 _000 num_presynaptic_neurons = 2 _000 poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) pre_spikes_wrepeats_100s = poisson_generator . generate_spikes ( simulation_length_100s , num_presynaptic_neurons , seed = seed ) In [24]: # Pattern.1 pre_spikes_wrepeats_100s = np . load ( \"path/to/spont_100s_alt.npy\" ) poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) poisson_generator . memorize ( pre_spikes_wrepeats_100s , repeated = False ) [Before] simulation length: None Number of the presynaptic neurons: None Memorizing... [After] simulation length: 100000 Number of the presynaptic neurons: 2000 In [25]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [26]: # Repeat & Paste. poisson_generator . select_segment ( seed = seed ) pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes divided into 2000 segments. 685-th segment was selected as a Pattern. Number of spikes added: 25000000.0 Spikes are saved as `self.pattern_repeated_spikes`. Spikes are saved as `self.noise_added_spikes`. In [27]: repeated_idxes = np . any ( poisson_generator . repeated_position , axis = 1 ) In [28]: print ( f \"Pattern shape = {poisson_generator.pattern_spikes.shape} \" ) print ( f \"Poisson Process shape = {noise_added_spikes.shape} \" ) Pattern shape = (2000, 50) Poisson Process shape = (2000, 100000) Now we are ready to use these spike trains to train a postsynaptic neuron! ... or are we? Creating a model conceptually or mathematically is just the first step. Next we have to figure out how to simulate it computationally. NEST simulation In [29]: import nest NEST contains many STDP synapse rules. Which one should we use? We said earlier that we will use an additive/exponential STDP rule, however that is not the only parameter to consider. Another consideration is \"how to pair two continuous spikes trains\" such that we can apply STDP appropriately to all presynaptic spikes $j$ coming to the postsynaptic neuron $i$. A list of STDP models implemented in NEST can be found here: https://nest-simulator.readthedocs.io/en/latest/models/stdp.html The following models correspond to the below figure for pairing of spikes for STDP: stdp_nn_symm_synapse (panel A) stdp_nn_pre-centered_synapse (panel B) stdp_nn_restr_synapse (panel C) Figure 7 from Morrison et al. 2008 . Examples of nearest neighbor spike pairing schemes for a presynaptic neuron j and a postsynaptic neuron i. In each case, the dark gray indicate which pairings contribute toward depression of a synapse, and light gray indicate which pairings contribute toward potentiation. Symmetric interpretation : each presynaptic spike is paired with the last postsynaptic spike, and each postsynaptic spike is paired with the last presynaptic spike (Morrison et al. 2007). Presynaptic centered interpretation : each presynaptic spike is paired with the last postsynaptic spike and the next postsynaptic spike (Izhikevich and Desai 2003; Burkitt et al. 2004: Model II). Reduced symmetric interpretation : as in c but only for immediate pairings (Burkitt et al. 2004: Model IV, also implemented in hardware by Schemmel et al. 2006) [Masquelier et al. (2008)](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0001377) uses something akin to panel C In the (unreleased) NEST 3.0 there is a stdp_nn_restr_synapse model which is quite similar. (However, we are using NEST 2.X. now.) After going through the available STDP models, none appeared to be capable of replicating the paper due to this paper requiring a particular spike-pairing method which doesn't seem to be represented in any of the currently-implemented STDP models in NEST. Therefore, we need to make some changes to our experiment! But before we do that, let's simulate the current model using some different synapses which are available to us. Start with the static synapse and then experiment with some STDP synapse models to see what goes wrong and \"how different paramaters affect the results.\" # Check what model we can use. nest . Models ( 'synapses' ) In [30]: from OIST.tutorial4 import NeuronalNetwork In [31]: simulation_times = 1000 In [32]: spike_indicies = [ np . where ( is_spike )[ 0 ] for is_spike in noise_added_spikes == 1 ] In [33]: STDP_paramaters = { 'a_LTP' : 0.03125 , 'a_LTD' : 0.85 * 0.03125 , 'tau_LTP' : 16.8 , 'tau_LTD' : 33.7 , } In [34]: model = NeuronalNetwork ( ** STDP_paramaters ) In [35]: model . build ( spike_indicies ) Created 2000 spike generators. Created 2000 parrot neurons. Created 1 post_neuron. Created spike detector. Created voltmeter. In [36]: model . compile ( synapse_model = \"static\" , ex = 1 ) Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: static_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [37]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [38]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [39]: model . compile ( synapse_model = \"standard\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [40]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [41]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [42]: model . compile ( synapse_model = \"triplet\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_triplet_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [43]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [44]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [45]: model . compile ( synapse_model = \"FACETS\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_facetshw_synapse_hom Connected post neuron to spike detector Connected voltmeter to post neuron In [46]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [47]: ax = model . plotWeights ( repeated_idxes ) plt . show () Couldn't recognize the patterns. Exercise 2 What are some general problems with the STDP synapses? How do these synapse models cause failure of our model to replicate the original paper? What can we do to the task or the model which might help? In [48]: model = NeuronalNetwork ( ** STDP_paramaters ) model . build ( spike_indicies ) Created 2000 spike generators. Created 2000 parrot neurons. Created 1 post_neuron. Created spike detector. Created voltmeter. In [49]: gaussian_params = { \"simulation_length_pulses\" : 10000.0 , \"proportion_of_neurons_pulsing\" : 0.5 , \"number_of_pulses\" : 50 , \"spikes_per_pulse\" : 5 , \"std_spikes_per_pulse\" : 5.0 } In [50]: # Overwrite the spike generator. noise_rate = 35.0 # firing rate of Poisson neurons (Hz) model . spike_generator = nest . Create ( \"poisson_generator\" , model . num_presynaptic_neurons , params = { 'rate' : noise_rate }) In [51]: # Add the gaussian Packets as an additional input. model . addGaussianPackets ( ** gaussian_params ) In [52]: model . compile ( synapse_model = \"standard\" , ex = 2 ) Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [53]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [54]: ax = model . plotWeights ( repeated_idxes ) plt . show () Difficult to find a best parameter :( → How about using Bayesian optimization ?? 【Challenge Exercise】 Consider whether and how your network could learn multiple patterns, e.g. would you need to add more post-synaptic neurons to the network? Hint: see [Masquelier et al. (2009) Competitive STDP-Based Spike Pattern Learning. Neural Computation](https://www.ncbi.nlm.nih.gov/pubmed/19718815) . In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-4.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-4.html"},{"title":"3.Guided NEST exercises (basic)","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Milena Menezes Carvalho Lecture Material https://github.com/oist-ncbc/skill-pill-plus/blob/master/Tutorial-3_Synapses-and-Networks Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial3.py In [1]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Synapses Neuronal connectivity Neurons are connected at specific sites called synapses . Usually, the axon of a presynaptic neuron will make contact with the dendrite (or soma ) of a postsynaptic in what's called a chemical synapse : neurotransmitters are transferred via the tiny gap between the two neurons ( synaptic cleft ) thanks to biochemical processes. This generates a change in membrane potential at the postsynaptic site, called postsynaptic potential . Electrical synapses , also known as gap junctions , can also be present -- in this case, specialized proteins make a direct electrical connection between neurons. [1] from [2] In this tutorial we will connect two or more neurons in NEST to create our first neuronal networks. First, we will learn the basic commands following [3] and [4] Then apply these to a well-known balanced network known as the Brunel network . By the end of this tutorial, you should be able to understand that a network's stability and activity behavior is deeply influenced by its parametrization. Sources: [1] Wulfram Gerstner and Werner M. Kistler, \"Spiking Neuron Models\". Cambridge University Press, 2002 [2] Peter Dayan and L. F. Abbot, \"Theoretical Neuroscience: Computational and Mathematical Modeling of Neural Systems\". The MIT Press, 2001 [3] PyNEST tutorial: Part 2, Populations of Neurons [4] PyNEST tutorial: Part 3, Connecting Networks with Synapses Synapse types The simplest synapse type is the static_synapse . The synaptic weight , a measure of how strong is the influence of the presynaptic neuron on the postsynaptic neuron, is static , i.e. does not change over time. The synaptic transmission, however , is not instantaneous. The synaptic delay is defined as the \"time\" between the presynaptic neuron activation ( action potential ) and the moment the postsynaptic potential is generated. In NEST, we can check the default values for all parameters using the GetDefaults function: nest.GetDefaults('static_synapse') The common model which is more suit to real biological event is spike-time dependent plasticity . The synaptic weight changes according to the temporal order between pre and postsynaptic spike times. In NEST, the most common STDP mechanisms are implemented in stdp_synapse . The change for normalized synaptic weights is described by $$ \\begin{aligned} \\Delta w &= \\begin{cases} \\lambda f {-}(w) \\times K -(\\Delta t) & \\text{if $\\Delta t \\leq 0$,} \\ \\lambda f {+}(w) \\times K +(\\Delta t) & \\text{if $\\Delta t > 0$,} \\end{cases}\\ \\Delta t &\\equiv t {post} - t {pre}\\ K {(+,-)}(\\Delta t) &= \\exp(-|\\Delta t| / \\tau {(+,-)}) \\end{aligned} $$ The update functions $$f_{+}(w) = (1-w)&#94;{\\mu_{+}} \\text{ and } f_{-}(w) = \\alpha w&#94;{\\mu_{-}}$$ create synaptic potentiation (stronger weights) when causal spiking is detected ($\\Delta t > 0$), otherwise generating synaptic depression (weaker weights). This rule is also known as temporally asymmetric Hebbian plasticity and has been thoroughly studied under different parametrizations. (below) STDP Type Parametrization Ref. multiplicative STDP $\\mu_{+}=\\mu_{-}=1.0$ [6] additive STDP $\\mu_{+}=\\mu_{-}=0.0$ [7] Guetig STDP $\\mu_{+}=\\mu_{-}=[0.0, 1.0]$ [5] van Rossum STDP $\\mu_{+}=0.0, \\mu_{-} = 1.0$ [8] Sources: [5] Guetig et al. (2003). Learning input correlations through nonlinear temporally asymmetric hebbian plasticity. Journal of Neuroscience, 23:3697-3714 DOI: https://doi.org/10.1523/JNEUROSCI.23-09-03697.2003 [6] Rubin J, Lee D, Sompolinsky H (2001). Equilibrium properties of temporally asymmetric Hebbian plasticity. Physical Review Letters, 86:364-367. DOI: https://doi.org/10.1103/PhysRevLett.86.364 [7] Song S, Miller KD, Abbott LF (2000). Competitive Hebbian learning through spike-timing-dependent synaptic plasticity. Nature Neuroscience 3(9):919-926. DOI: https://doi.org/10.1038/78829 [8] van Rossum MCW, Bi G-Q, Turrigiano GG (2000). Stable Hebbian learning from spike timing-dependent plasticity. Journal of Neuroscience, 20(23):8812-8821. DOI: https://doi.org/10.1523/JNEUROSCI.20-23-08812.2000 Introduction: synapses in NEST Check the synapse types you can call Found in the following link: [9] NEST Docs: All synapse models Running the following command: import nest nest . Models ( 'synapses' ) For STDP synaptic models, the time constant of the depressing window of STDP ( tau_minus ) is exceptionally a parameter of the post-synaptic neuron. nest . Create ( \"iaf_psc_alpha\" , params = { \"tau_minus\" : 30.0 }) However, tau_plus is a synapse parameter. nest . SetDefaults ( \"stdp_synapse\" ,{ \"tau_plus\" : 15.0 }) Customized variants of a synapse model can be created using CopyModel() , and can be used anywhere that a built-in model name can be used. nest . CopyModel ( \"stdp_synapse\" , \"layer1_stdp_synapse\" ,{ \"Wmax\" : 90.0 }) Connectivity rules for multiple neurons can be defined. Please check [3] to learn more details about creating and connecting neuron populations. Synaptic parameters can also be randomly distributed by assigning a dictionary to the parameter. This should contain the target distribution and its optional parameters, as listed below: Distributions Keys normal mu , sigma lognormal mu , sigma uniform low , high uniform_int low , high binomial n , p exponential lambda gamma order , scale poisson lambda Synapse information can be retrieved from its origin, target and synapse model using GetConnections() : Example. num_nurons = 10 epop1 = nest . Create ( \"iaf_psc_delta\" , num_nurons , params = { \"tau_m\" : 30.0 }) epop2 = nest . Create ( \"iaf_psc_delta\" , num_nurons ) conn_dict = { \"rule\" : \"fixed_indegree\" , \"indegree\" : 5 } syn_dict = { \"model\" : \"stdp_synapse\" , \"alpha\" : 1.0 } nest . Connect ( epop1 , epop2 , conn_dict , syn_dict ) neuron = nest . Create ( \"iaf_psc_alpha\" ) syn_dict = { \"model\" : \"stdp_synapse\" , \"alpha\" : { \"distribution\" : \"uniform\" , \"low\" : 0.1 , \"high\" : 2. }, \"weight\" : { \"distribution\" : \"uniform\" , \"low\" : 0.5 , \"high\" : 5. }, \"delay\" : 1.0 } nest . Connect ( epop1 , neuron , \"all_to_all\" , syn_dict ) # Synapse information can be retrieved print ( nest . GetConnections ( epop1 , target = epop2 , synapse_model = \"stdp_synapse\" )) # We can then extract the data using `GetStatus()`. # Specific information can be retrieved by providing a list of desired parameters. conns = nest . GetConnections ( epop1 , synapse_model = \"stdp_synapse\" ) conn_vals = nest . GetStatus ( conns , [ \"target\" , \"weight\" ]) Networks Example1: connecting two neurons In this example, we will create and connect two neurons, A and B. Neuron A is of type iaf_psc_delta : Receives external current $I_e = 376.0 pA$. This current is sufficient to elicit a spike every $\\approx$ 50ms. Neuron B is solely connected to neuron A: Can only spike if the input from A is strong enough. Let's observe how B can be influenced by A. In [2]: import nest import matplotlib.pyplot as plt In [3]: from OIST.tutorial3 import NeuronA , NeuronB , plotMultipleNeurons In [4]: # First, verify the activity of neuron A. nest . ResetKernel () modelA = NeuronA () modelA . build () In [5]: ax = plotMultipleNeurons ( modelA ) plt . show () Now let's create neuron B as iaf_psc_delta with no external current: In [6]: modelB = NeuronB () modelB . build () In [7]: ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Neuron B is still inactive. We need to connect both neurons: In [8]: nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) In [9]: ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Q. Suggest at least 3 alterations we can make in this example to elicit spiking activity from B. Lower the threshold V_th : nest.SetStatus(neuron_B,{'V_th': -69.}) # default: -55 Higher thr current I_e Highre the weights between nuron_A and nuron_B In [10]: # Lower the threshold V_th. nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , V_th =- 69. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () In [11]: # Higher the current I_e. nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , I_e = 350. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () In [12]: # Highre the weights between \"nuron_A\" and \"nuron_B\" nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 14.9 }) nest . Simulate ( 300. ) nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 15. }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Because of the shape of B, and scale of observation, we couldn't find the spikes but neuron B also spikes after connection weight increased. Q. Check what happens if the neuron model is different: for example, change `iaf_psc_delta` to `hh_psc_alpha`. In [13]: # Lower the threshold V_th. nest . ResetKernel () modelA = NeuronA ( model_name = \"hh_psc_alpha\" ) modelA . set_params ( \"neuron\" , I_e = 250. ) modelA . build () modelB = NeuronB ( model_name = \"hh_psc_alpha\" ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Q. connect B to A reciprocally and check their dynamics. How can you describe their behavior? In [14]: nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , V_th =- 65. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 5. }) nest . Connect ( modelB . neuron , modelA . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 1 }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Example2: Random Balanced Network We will now simulate a network of integrate-and-fire (IAF) , excitatory and inhibitory spiking neurons connected randomly with fixed weights . This network (called Brunel Network ) was proposed and studied in [10]: The network is composed of excitatory neurons (80%) inhibitory neurons (20%) connection probability $\\epsilon = 10\\%$ ( epsilon ). All neuron types can be connected (E$\\rightarrow$E, E$\\rightarrow$I, I$\\rightarrow$E and I$\\rightarrow$I). Neurons receive external input from oustide the network modeled by a Poisson spike train generator [11] rate nu_ex , $\\nu_{ex} = \\eta * \\nu_{th}$ threshold rate $\\nu_{th}$ ( nu_th ) is calculated using $$\\nu_{th} = \\frac{\\theta}{J * \\text{CE} * \\tau_{m}}$$ In general, the interspike intervals drawn are exponentially distributed. The synaptic input current on each neuron is calculated as $$I_i(t) = \\tau \\sum_j J_j \\sum_k \\delta(t-\\delta-t_j&#94;k)$$ Sum over $j$ covers all synapses (internal and external to the network) Sum over $k$ covers all spikes arriving at times $t&#94;k_j$ with delay $\\delta$ ( delta ). This simple postsynaptic current model is called delta synapse , in which stimulation is applied in a single point in time for simplicity using the Dirac delta function . In biological systems, synaptic models are diverse and can vary within the same neuron depending on the function of the synapse, for example. In NEST, we will create a network of iaf_psc_delta neurons connected using static_synapse with weights $J_E$ and $J_I = -g*J_E$. We will study how this network changes its behavior depending on its parametrization. Sources: [10] Brunel N (2000). Dynamics of sparsely connected networks of excitatory and inhibitory spiking neurons. Journal of Computational Neuroscience 8, 183-208. [11] Poisson distribution m In [15]: from OIST.tutorial3 import BrunelNetwork In [16]: model = BrunelNetwork () In [17]: # Model parameters. model . __dict__ Out[17]: {'g': 5.0, 'eta': 2.0, 'delay': 1.5, 'dt': 0.1, 'epsilon': 0.1} $$ \\begin{aligned} \\begin{cases} \\epsilon &= 10\\%\\\\ v_{ex} &= \\eta v_{th}\\\\ \\delta\\\\ J_I &= -gJ_E \\end{cases} \\end{aligned} $$ In [18]: neuron_params = { \"C_m\" : 1.0 , \"tau_m\" : 20.0 , \"t_ref\" : 2.0 , \"E_L\" : 0.0 , \"V_reset\" : 0.0 , \"V_m\" : 0.0 , \"V_th\" : 20.0 } In [19]: model . build ( N_total_neuron = 12500 , N_rec_volt = 5 , N_rec = 50 , J = 0.1 , ** neuron_params ) Number of neurons : 12500 Excitatory: 10000 Inhibitory: 2500 Number of synapses: 15625000 Excitatory: 12500000 Inhibitory: 3125000 Building time : 4.58 s In [20]: model . simulate ( T = 900. ) Simulation time : 900.0 ms Processing time : 56.00 s Completed. Please use following methods to plot results. - `plotVoltageEx(n)`, `plotVoltageIn(n)` - `plotVoltageCompare(idx=0)` - `plotRaster()` Below we plot the voltage, raster, and activity rate of the excitatory and inhibitory populations. In [21]: model . plotVoltageEx () \u001b Membrane potential plots [Excitatory Neurons] In [22]: model . plotVoltageIn () \u001b Membrane potential plots [Inhibitory Neurons] In [23]: model . plotVoltageCompare ( 0 ) \u001b Membrane potential Compaison. In [24]: model . plotRaster () \u001b Raster Plot.(N=50) One of the main findings in Brunel's paper is the different activity states that can be observed in this network depending on $g$: the ratio between inhibitory and excitatory synaptic weights $\\eta$: the external excitation rate relative to the threshold rate $\\delta$: the synaptic delay $\\epsilon$: the connection probability . By altering these arguments, he observed different collective behaviors identified as asynchronous irregular (AI) asynchronous regular (AR) synchronous irregular (SI) synchronous regular (SR). These behaviors are exemplified in the images below. from [1] Q. Use the graphs as a starting point. Try to elaborate on how each of the four parameters affects the state of this network. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-3.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-3.html"},{"title":"2.Introduction to NEST Simulator","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Gastón Sivori Lecture Material https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-2_NEST-Introduction Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial2.py In [1]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Agenda Installation leaky integrate-and-fire (LIF) HH-neuron model Connecting nodes with different inputs F-I curve Installation Documentation: https://nest-simulator.readthedocs.io/en/latest/installation/ Github: https://github.com/nest/nest-simulator/tree/v2.18.0 Memo(What I did) pip $ pip install python-nest ※ This `nest` has lack of some module (ex. `nest.Create`) cmake # Install dependencies via Homebrew $ brew install gcc cmake gsl open-mpi libtool $ mkdir NEST $ cd NEST # Clone source files from Github. $ wget --content-disposition https://github.com/nest/nest-simulat or/archive/v2.16.0.tar.gz $ tar zxf nest-simulator-2.16.0.tar.gz $ mkir bld $ cd bld # Configure and build NEST inside the build directory # (replacing gcc-9 and g++-9 with the GCC compiler versions you installed with brew). # You can check it with `g++ -v` or `gcc -v` command. $ cmake -DCMAKE_INSTALL_PREFIX:PATH = . \\ -DCMAKE_C_COMPILER = gcc-9 \\ -DCMAKE_CXX_COMPILER = g++-9 \\ ../nest-simulator-2.16.0/ $ make -j4 $ make install $ make installcheck ※ This `nest` also has lack of some module (ex. `nest.Create`) Anacond # If you want to use jupyter notebook, please include \"jupyter\" $ conda create --name skill-pill-plus -c conda-forge nest-simulator python jupyter # path/to/activate is like \"/Users/iwasakishuto/.pyenv/versions/anaconda3-5.0.1/bin/activate\" $ source skill-pill-plus # Activated!! ( skill-pill-plus ) $ If you want to use this environment on the jupyter notebook, please follow this. $ pip install environment_kernels $ jupyter notebook --generate-config $ vi ~/.jupyter/jupyter_notebook_config.py # Add these line >>> c.NotebookApp.kernel_spec_manager_class = 'environment_kernels.EnvironmentKernelSpecManager' >>> c.EnvironmentKernelSpecManager.conda_env_dirs =[ '/Users/iwasakishuto/.pyenv/versions/anaconda3-5.0.1/env' ] $ jupyter notebook # If successful, you can chose your ideal environment at [Kernel → Change kernel] # NOTE: You should install `jupyter` in the environment. # If you not, please run `conda install --name \"Your Environment Name\" jupyter` ※ This `nest` has all modules :) In [2]: import nest import numpy as np import matplotlib.pyplot as plt # If you need to import other packages like scipy or scikit-learn # You should import these \"before\" nest!! For NEST to simulate different experiments, its kernel (core functionality) needs to be reseted ( nest.ResetKernel() ) for every new simulation. Please remember to run this code before running each simulation. About NEST Conceptually, neural networks consists of neurons and connections . Nodes can be neurons , sub-networks or devices inside the NEST framework. We will use devices to stimulate neurons and to measure their membrane potential. Sub-networks , on the other hand, are arrangements of neurons whose parameters may be modified as a group. We will look at sub-networks in the following lectures. leaky integrate-and-fire (LIF) For now, we will focus on constructing a leaky integrate-and-fire (LIF) neuron with delta-shaped synaptic currents: In this figure, a delta-shaped pulse $\\delta(t-t_j&#94;f)$ from neuron $j$ is being transmitted along its axon until it reaches neuron $i$'s dendrites through a synapse. Synapses are modelled as low-pass RC circuit filters which output a current $\\alpha(t-t_j&#94;f)$. These presynaptic currents reach the soma as an input current $I(t)$ which charges the capacitor $C$ (integration) while some of it leaks out through the resistance $R$. ($I(t) = I_R + I_C$) The electrical components here represent a circuit modelization of the biological mechanisms happening at the synapse and the soma. In this model, the membrane's potential is represented by capacitor $C$ such that when it has enough charge and reaches the threshold potential $\\vartheta$, a spike $\\delta(t-t_i&#94;f)$ is generated and transmitted. In [3]: from OIST.tutorial2 import LIFmodel In [4]: model = LIFmodel ( model_name = \"iaf_psc_alpha\" ) Create LIF neuron with alpha-function shaped synaptic currents. Created a spike_generator. Created a voltmeter. Created a spike detector. In [5]: # Check the neuron params. model . neuron_params () C_m : 250.0 pF E_L : -70.0 mV I_e : 0.0 pA V_m : -70.0 mV V_reset: -70.0 mV V_th : -55.0 mV t_ref : 2.0 ms tau_m : 10.0 ms Q1. You might have noticed that there is no parameter for the membrane resistance `R_m` as shown in the previous figure. Do you know why? The membrane time constant tau_m corresponds to the membrane capacitance C_m and membrane resistance R_m as observed in the electrical circuit above. Therefore it's possible to calculate what is the R_m value given the following formula: $$ \\tau_m = C_m R_m $$ In [6]: # Retrieve a particular set of parameters model . neuron_params ( \"V_reset\" , \"V_th\" ) Out[6]: ((-70.0, -55.0),) In [7]: # Modify spike generation to values 10 and 50 ms print ( f \"Before: {model.spike_params('spike_times')}\" ) model . set_params ( node = \"spike_generator\" , spike_times = [ 10. , 50. ]) print ( f \"After : {model.spike_params('spike_times')}\" ) Before: ((array([], dtype=float64),),) After : ((array([10., 50.]),),) In [8]: # Connect the spike generator and the voltmeter to the neuron. model . build ( weight = 1e3 ) Connect spike generator with a given synaptic specification ({'weight': 1000.0}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. Simulate for 100 ms and observe the results In [9]: ax = model . simulate ( ms = 100 ) plt . show () Q2. What can we observe here? Are these neuron spikes? We can observe the membrane trace of the LIF neuron model excited with alpha-function shaped spikes at times 10 ms and 50 ms. The observed peaks in the membrane trace are not spikes since the membrane threshold V_th is -55mV. If we modify the external current or lower the membrane's threshold potential we should be able to observe spikes. In [10]: # Modifying the threshold model = LIFmodel ( model_name = \"iaf_psc_alpha\" , display = False ) model . set_params ( \"neuron\" , V_th =- 58. ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . build ( weight = 1e3 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () In [11]: # modifying external current to LIF neuron model = LIFmodel ( model_name = \"iaf_psc_alpha\" , display = False ) model . set_params ( \"neuron\" , I_e = 300. ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e3 , display = False ) model . simulate ( ms = 100 ) plt . show () In this neuron model, the membrane potential does not follow the biologically observed dynamics that neurons have. Their use is limited to understand and experiment with network dynamics and spiking activity :( HH-neuron model For comparison, let's observe the membrane potential of a HH-neuron model (Hodgkin and Huxley, 1952). This model was the \"conclusion of a series of papers\" concerned with the flow of electric current through the surface membrane of the giant nerve fibre in the squid. Using voltage-clamp experiments and by varying extracellular sodium and potassium concentrations, Hodgkin and Huxley developed a model in which the properties of an excitable cell are described by a set of ordinary differential equations. For simplicity, we will not focus on these equations. NEST's framework integrates these equations to obtain the instantaneous membrane potential. The following figure represents an electric circuit model of the neuron's membrane. The HH-model (Hodgkin and Huxley, 1952) considers the ionic channels present on the cellular membrane. These channels allows the conduction of specific types of ions. Sodium channels (Na+) are scarce inside the cell , so that when sodium channel opens, positive charges rush into the cell to cause excitation. Potassium ions (K+) are rich inside the cell , so that when potassium channel opens, positive charges rush out of the cell to cause inhibition. The model assumes a leak current composed of all other remaining ionic currents (Cl, Mg, etc.) This model is based on careful data analysis and follows the following equation : $$C_m \\frac{dV}{dt} = \\bar{g_{Na}}m&#94;3h(E_{Na}-V) + \\bar{g_K}n&#94;4(E_K-V) + g_{Leak}(E_{Leak}-V) + I$$ Where the conductances $g_{Na}$ and $g_{K}$ are: $$ g_{Na} = \\bar{g_{Na}}m&#94;3h $$$$ g_{K} = \\bar{g_K}n&#94;4 $$ Let's see these parameters in NEST by creating a hh_psc_alpha neuron. A HH-model neuron with delta-shaped synaptic currents. In [12]: from OIST.tutorial2 import HHmodel In [13]: model = HHmodel () Create Hodgkin-Huxley neuron with alpha-function shaped synaptic currents. Created a spike_generator. Created a voltmeter. Created a spike detector. In [14]: model . neuron_params () C_m : 100.0 pF E_K : -77.0 mV E_L : -54.402 mV E_Na : 50.0 mV g_K : 3600.0 nS g_L : 30.0 nS g_Na : 12000.0 nS I_e : 0.0 pA V_m : -65.0 mV t_ref: 2.0 ms In [15]: model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e3 ) Connect spike generator with a given synaptic specification ({'weight': 1000.0}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. In [16]: ax = model . simulate ( ms = 100 ) plt . show () Q3. Modify the previous example to observe spikes. In [17]: # modifying the synaptic strength (w) to observe spikes model = HHmodel ( display = False ) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e4 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () In [18]: print ( f \"Number of spikes: {model.spikes} \" ) Number of spikes: 2 Could you observe the spikes? Just after a spike, the membrane potential resets to -77 mV and a short refractory period of 2 ms (check these parameter value t_ref from the parameter list shown above!). During this period, the neuron is unable to react to excitation. Q4. Can you try exciting the neuron during this period to observe this phenomena? In [19]: # In the following example the spike generator generates spikes at times 10ms, 11ms, 50ms and 52ms. model = HHmodel ( display = False ) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 11.0 , 50. , 52.0 ]) # Add!! model . build ( weight = 1e4 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () The figure is the same as before due to the refractory period of the neuron. Connecting nodes with different inputs To compare neurons with different inputs, let's see how the parameters of the input affect the neurons' output. In the following example, we will use constant input current and belows with the same mean strength as the constant input current. a Poisson spike train The probability density function and firing rates of neurons will be shaped given by these inputs. First, let us define the parameters of the simulation and input currents. In [20]: T = 1.2e3 # simulation time nu_ext = 15e3 # firing rate of external Poisson source J = 0.08 # synaptic weight d = 0.1 # delay C = 250.0 # membrane potential capacitance mu = J * 1e-3 * nu_ext * C # mean input in pAa I_ext = mu # external current In [21]: neuron_params = { 'C_m' : C , # (pF) 'E_L' : 0. , # (mV) 'I_e' : 0.0 , # (pA) 'V_m' : 0. , # (mV) 'V_reset' : 0. , # (mV) 'V_th' : 15. , # (mV) 't_ref' : 2.0 , # (ms) 'tau_m' : 10.0 , # (ms) } In [22]: plot_infos = { \"color\" : [ \"blue\" , \"red\" ], \"label\" : [ \"constant input\" , \"Poisson input\" ] } Then, make two types of models and compare them. In [23]: from OIST.tutorial2 import mkMultiDetectors , plotMultResults In [24]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) Create LIF neuron with delta-shaped synaptic currents. Created a voltmeter. Created a spike detector. In [25]: poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d ) Create LIF neuron with delta-shaped synaptic currents. Created a poisson_generator. Created a voltmeter. Created a spike detector. Connect spike generator with a given synaptic specification ({'weight': 0.08, 'delay': 0.1}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. In [26]: neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) Created 2 multimeter to record membrane potential of the neurons. Created 2 spike detectors to record spikes times and neuron identifiers, but not record from file. In [27]: nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axR . legend (), axR . set_xlim ( 0 , T ) plt . show () What!? There are no spikes?! Well, look at the figures and consider the threshold potential value V_th . Let's try increasing the synaptic strengh J . The neuron receiving Poisson input will be in different firing rate regimes! In [28]: print ( f \"poisson_model.neuron_params('V_th') = {poisson_model.neuron_params('V_th')[0][0]}\" ) print ( f \"const_model.neuron_params('V_th') = {const_model.neuron_params('V_th')[0][0]}\" ) poisson_model.neuron_params('V_th') = 15.0 const_model.neuron_params('V_th') = 15.0 Q5. Try to make the neuron fire at an irregular regime. In [29]: T = 1.2e3 # nu_ext = 15e3 # J = 0.09 # From 0.08 to 0.09. d = 0.1 # C = 250.0 # mu = J * 1e-3 * nu_ext * C # I_ext = mu # In [30]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axR . legend (), axR . set_xlim ( 0 , T ) plt . show () Q6. Try to make the neuron spike at a regular regime. In [31]: T = 1.2e3 # nu_ext = 15e3 # J = 0.11 # From 0.08 to 0.11. d = 0.1 # C = 250.0 # mu = J * 1e-3 * nu_ext * C # I_ext = mu # In [32]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axL . legend (), axR . legend (), axR . set_xlim ( 0 , T ) plt . show () Since we are using the LIF neuron model with a membrane threshold potential V_th at 15mV , you will not be able to see proper spikes. Instead, you will only see the after-spike dynamics (membrane potential reset and refractory period). Q7. Try to make HH neuron models spike at a regular regime for both input conditions. In [33]: T = 500.0 # simulation time nu_ext = 15e3 # firing rate of external Poisson source J = 0.08 # synaptic weight d = 0.1 # delay C = 100.0 # membrane potential capacitance mu = J * 1e-3 * nu_ext * C # mean input in pAa I_ext = mu # external current In [34]: neuron_params = { 'g_K' : 3000.0 , 'g_Na' : 16000.0 , 'g_L' : 60.0 } In [35]: const_model = HHmodel ( model_name = \"hh_psc_alpha\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = HHmodel ( model_name = \"hh_psc_alpha\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , ** plot_infos ) axL . legend (), axR . legend (), axR . set_xlim ( 0 , T ), axR . set_ylim ( - 80 , 40 ) plt . show () Rate of neuron stimulated with constant input input: 56.112 Rate of neuron stimulated with Poisson input input: 48.096 F-I curve As you have seen in the past figures, the firing rate of the neuron can change given different external current I_e . It's possible to plot this relationship and its usually referred to as the F-I curve . In [36]: from OIST.tutorial2 import FiringRate In [37]: neuron_params = { 'C_m' : 250.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [38]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () As you can observe from this figure, given the parameter setup, the neuron in a leaky-integrate-and-fire model starts to fire spikes at around 370 pA of external input current I_e . For this particular case, V_th was chosen to be low to observe the trend of the firing rate as external current is increasing. Modifying the value of the capacitance C_m moves this curve in the x-axis Modifying the refractory period t_ref slows down the firing rate i.e. more current is required for a given firing rate. Q8. Observe these changes in the F-I curve by modifying the neuron model parameters. In [39]: neuron_params = { 'C_m' : 150.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [40]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () In [41]: neuron_params = { 'C_m' : 350.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [42]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () In [43]: neuron_params = { 'C_m' : 250.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 1.0 , 'tau_m' : 10.0 , } In [44]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () Q10. Repeat these simulations with the HH neuron model hh_psc_alpha by modifying channel conductances. In [45]: neuron_params = { 'g_K' : 3600.0 , 'g_Na' : 12000.0 , 'g_L' : 30.0 } In [46]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [47]: neuron_params = { 'g_K' : 3600.0 , 'g_Na' : 13000.0 , 'g_L' : 30.0 } In [48]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [49]: neuron_params = { 'g_K' : 3800.0 , 'g_Na' : 12000.0 , 'g_L' : 30.0 } In [50]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-2.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-2.html"},{"title":"1.Mathematical Models and Numerical Methods of Computational Neuroscience","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Alan Func Lecture Materials https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-1_Ordinary-Differential-Equations Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial1.py In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Agenda Brief introduction of Differential Equations Neuronal Models Numerical Method to Simulate Neuronal Models How the Network can be trained Brief introduction of Differential Equations Ordinary Differential Equations A fundamental tool in theoretical Science The differential equation gives the dependence of derivatives $$F\\left[\\frac{d&#94;nx(t)}{dt&#94;n},\\cdots,\\frac{dx(t)}{dt},C\\right] = 0$$ As we can calculate the whole path ways if we know the velocity($v=dx(t)/dt$), by knowing the slopes, one may trace the whole curve!! Examples of Models and Theories Simple Harmonic Oscillator Heat Equation(1-D) An oscillator that is neither driven nor damped. How the distribution of some quantity (such as heat) evolves over time in a solid medium $$\\underset{\\text{Acceleration}}{\\frac{d&#94;2x(t)}{dt&#94;2}}+\\underset{\\text{Returning Force}}{\\omega&#94;2x(t)} = 0$$ $$\\underset{\\text{Rate of Heat}}{\\frac{\\partial u(x,t)}{\\partial t}}+\\underset{\\text{Returning Force}}{\\alpha\\frac{\\partial&#94;2u(x,t)}{\\partial x&#94;2}} = 0$$ Implementation by Numerical Method Euler Method Runge-Kutta Methods Euler Method Euler method has a relatively large error. There are some extensions of the Euler method(one of them are Mid-Point method. ) In [3]: X = np . arange ( - 1.0 , 6.5 , 0.5 ) Y = 1 / 6 * X ** 3 dYdX = 1 / 2 * X ** 2 In [4]: Euler_dYdX_bigger = ( Y [ 2 :] - Y [: - 2 ])[ 2 :] # step size=1 dY/dX(t) = X(t+1)-X(t) Euler_dYdX_smaller = ( Y [ 1 :] - Y [: - 1 ])[ 2 : - 1 ] / 0.5 # step size=0.5 dY/dX(t) = (X(t+0.5)-X(t))/0.5 MidPointEuler_dYdX = ( Y [ 2 :] - Y [: - 2 ])[ 1 : - 1 ] # step size=1 dY/dX(t) = X(t+0.5)-X(t-0.5) In [5]: def CompareNumerical ( ax , X , Y , label , marker , color ): ax . scatter ( X [ 2 : - 2 ], Y , label = label , marker = marker , color = color ) ax . plot ( X [ 2 : - 2 ], Y , color = color , alpha = 0.5 ) return ax In [6]: fig , ax = plt . subplots () ax = CompareNumerical ( ax , X , Euler_dYdX_bigger , \"Step = 1.0\" , \"s\" , \"b\" ) ax = CompareNumerical ( ax , X , Euler_dYdX_smaller , \"Step = 0.5\" , \"o\" , \"r\" ) ax = CompareNumerical ( ax , X , MidPointEuler_dYdX , \"Mid-point h=1.0\" , \"&#94;\" , \"g\" ) ax . plot ( X [ 2 : - 2 ], dYdX [ 2 : - 2 ], linestyle = \"--\" , label = \"Analytic\" , color = \"black\" ) ax . legend (), ax . grid (), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$y$\" ) plt . show () The mid-point method is surprisingly good!! Runge-Kutta Methods A family of implicit and explicit iterative methods. More: Wikipedia Neuronal Models To Model a Neuron... Neurons can be excited by current injection . If the membrance potential(Voltage) is larger than some thresholds , an action potential will be triggered. Membrance potential means the potential difference across the neuron membrance. → Relative can be controlled by concentrations of irons($\\mathrm{Na}&#94;+,\\mathrm{K}&#94;+,\\mathrm{Cl}&#94;-$) is maintained by their ion bumps , and at the resting state, it is around $65\\mathrm{mV}$. sometimes across the threshold , and when it occurs, the neuron fires works like a capacitor with a leaky current. Leaky Integrate-and-Fire(LIF) model In 1907, Lapicque proposed a simple model(which is just the time derivative of the law of capacitance ($Q=CV$) .) for neurons: $$I(t)-\\frac{V_m(t) - V_{rest}}{R_m} = C_m\\frac{dV_m(t)}{dt}$$ $I$: Input current (=const.) $V_m$: Membrance potential $V_{rest}$: Resting potential of the membrance $R_m$: Membrane resistance (we find it is not a perfect insulator as assumed previously) $C_m$: Capacity of the membrance. When an input current is applied, the membrane voltage increases with time until it reaches a constant threshold $V_{th}$ At the point, a delta function spike occurs and the voltage is reset to its resting potential($V_{rest}$). The LIF neuron fired more frequently as the input current increases. Leak Conductance Ion permeability at resting membrane potential, allowing a constant flow of current through the cell membrane due to channels that remain open at resting membrane potential (Ref: Encyclopedia of Neuroscience ) In [7]: from OIST.tutorial1 import LIFsimulation , LITSpikeFrequency In [8]: params = { 'V_rest' : - 65 , 'V_thre' : - 40 , 'V_reset' : - 70 , 'V_fire' : 20 , 'C' : 2e-4 , 'R' : 7.5e4 , 'I' : 5e-4 , 'dt' : 0.1 , 'T' : 100 , } In [9]: time , Vm = LIFsimulation ( ** params ) plt . plot ( time , Vm , color = \"black\" ) plt . xlabel ( \"time[ms]\" ), plt . ylabel ( \"V[mV]\" ), plt . grid () plt . show () In [10]: Is = [ 0.5e-3 , 1e-3 , 1.5e-3 , 2.0e-3 , 2.5e-3 , 3.0e-3 ] freqs = LITSpikeFrequency ( Is , ** params ) plt . plot ( Is , freqs , color = \"blue\" ), plt . scatter ( Is , freqs , color = \"blue\" , marker = \"s\" ) plt . title ( \"How Spiking Frequency Depends on Input Current\" ), plt . xlabel ( \"Input Current: I [uA]\" ), plt . ylabel ( \"Spiking Frequency [Hz]\" ), plt . grid () plt . show () ※ The LIF neuron fired more frequently as the input current increases. Hodgkin-Huxley model $$ I = C_m + \\frac{dV_m}{dt} + g_{\\mathrm{l}}\\left(V_m-V_{\\mathrm{l}}\\right) + g_{\\mathrm{K}}n&#94;4\\left(V_m-V_{\\mathrm{K}}\\right) + g_{\\mathrm{Na}}m&#94;3h\\left(V_m-V_{\\mathrm{Na}}\\right)\\\\ \\begin{cases} \\begin{aligned} \\frac{dn}{dt} &= \\alpha_n(V_m)(1-n) + \\beta_n(V_m)n\\\\ \\frac{dm}{dt} &= \\alpha_m(V_m)(1-m) + \\beta_m(V_m)m\\\\ \\frac{dh}{dt} &= \\alpha_h(V_m)(1-h) + \\beta_h(V_m)h\\\\ \\end{aligned} \\end{cases} $$ Proposed by Hodgkin and Huxley in 1952 (They received the 1963 Nobel Prize in Physiology or medicin for this work.) Like Leaky Integrate-and-Fire(LIF) model , the input current (const.) charges up the membrance capacitor. Leaky conductance This model considers also ion currents invoving potassium ion ($\\mathrm{K}&#94;+$) and Sodium ion ($\\mathrm{Na}&#94;{+}$) induced by the potential difference. Sodium ion : has a reversal potential depolarizing the membrance. The conductivity is voltage-gated. Potassium ion : has a reversal potential hyper-polarizing the membrance. The conductivity is voltage-gated. The individual gates act like a first order chemical reaction with two states: $$\\text{Shut}\\overset{\\alpha}{\\underset{\\beta}{\\rightleftarrows}}\\text{Open}$$ Propose that Each $\\mathrm{K}$ channel has $4$ identical activation gates.( $\\mathbb{P}_{\\text{open}}=n$ ) Each $Na$ channel has $3$ avtivation gates( $\\mathbb{P}_{\\text{open}}=m$ ), and $1$ inactivation gate( $\\mathbb{P}_{\\text{open}}=h$ ). Action Potential Stimulas raises the membrane potential. (Depolarization) If membrance potential over the Threshold , voltage-gated sodium channels will open, and due to the sodium concentration gradient (ex > in) , sodium ion flow into the cell. This process raises the membrance potential, and it gets further depolarized. As the membrance become **\"too large\"**, sodium ion channel closes , and after that ( there is a delay ), voltage-gated potassium channel will open. When the membrance potential return to the resting state, potassium channel closes, but as this response takes time, the membrance potential will be lower than the initial voltage. (Hyperpolarization) (※ Resting membrance potential means the equilibrium point between \"electrical gradient\" and \"concentration gradient\".) How the Network can be trained Long-term Synaptic Plasticity Stimulas are passed through a glutamate . Glutamate connects with AMPA receptor and it causes sodium channels opening. If Depolarization occurs, NMDA channel (which was closed by Magnesium) open, and Calcium flows into the cell. The amount of Calcium is Large : LTP(Long-term potentiation) occurs. Increase the AMPA. Small : LTD(Long-term depression) occurs. Decrease the AMPA. Spike-Timing-Depenent Plasticity (Classical) The change in $w_{ji}$ depends on the spike timings In order to perform STDP with differential equatins, an online implementation of STDP is proposed $$ \\begin{aligned} \\tau_+\\frac{dx}{dt} &= -x + a_+(x)\\sum_{t_f}\\delta(t-t_f)\\\\ \\tau_-\\frac{dy}{dt} &= -y + a_-(y)\\sum_{t_n}\\delta(t-t_n)\\\\ \\Longrightarrow \\frac{dw}{dt} &= A_+(w)x(t)\\sum_{t_n}\\delta(t-t_n) - A_-(w)y(t)\\sum_{t_f}\\delta(t-t_f) \\end{aligned} $$ In [11]: from OIST.tutorial1 import STDPsimulation In [12]: time , Results , Info = STDPsimulation ( pre = 10 , post = 30 ) In [13]: fig = plt . figure ( figsize = ( 14 , 6 )) for i , vals in enumerate ( Results ): ax = fig . add_subplot ( 3 , 2 , i + 1 ) ax . plot ( time , vals , color = Info . get ( \"color\" )[ i ]) ax . set_xlabel ( \"time\" ), ax . set_ylabel ( Info . get ( \"label\" )[ i ]), ax . set_title ( Info . get ( \"label\" )[ i ]) plt . tight_layout () plt . show () ※ As \"Pre - Post\" changes... In [14]: pre = 40 for diff in range ( - 40 , 40 ): _ , Results , _ = STDPsimulation ( pre = pre , post = pre - diff ) dws = Results [ - 1 ] dw = dws [ np . argmax ( np . abs ( dws ))] plt . scatter ( diff , dw , color = \"black\" , s = 10 ) plt . grid (), plt . xlabel ( \"$t_ {pre} - t_ {post} $\" , fontsize = 20 ), plt . ylabel ( \"$\\Delta w$\" , fontsize = 20 ) plt . show () Then, with an appropriate firing sequence, the network can be trained!! Take-Home Message Some neuronal behaviors can be mathematically modeled. Networks of neurons has the potential to do different computations. Those networks can be trained. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-1.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-1.html"},{"title":"生物物理学 第7回(小テスト)","text":"L7VAuLarNm3ewVfw/RboKQ==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-7-quiz.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-7-quiz.html"},{"title":"Pro.4 Itemset mining algorithm","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-19.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-19.html"},{"title":"Pro.3 Gene Network Inference","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-18.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-18.html"},{"title":"Pro.2 最適行動列アルゴリズム","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-17.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-17.html"},{"title":"Pro.1 配列モチーフ探索","text":"In [7]: import numpy as np Problem Setting Identify the common sequencial features(sequence motif) from large amount of sequences data containing tf-binding regions. DeepBind Link: Paper Software tool \"Deep Learning\" techniques to ascertain the sequence specificities of DNA- and RNA-binding proteins from experimental data . outperforms other state-of-the-art methods. (Published: 27 July 2015) Results are readily visualized as a weighted ensemble of position weight matrices(PWMs) a mutation map that indicates how variations affect binding within a specific sequence. computes a binding score $f(s)$ using four stages: $$f(s) = \\text{Neural Network}_W\\left(\\text{pool}\\left(\\text{rect}_b\\left(\\text{conv}_M(s)\\right)\\right)\\right)$$ Convolution : Scan a set of motif detectors (length=$L$) with parameters $M&#94;{(j)}$ $$\\text{conv}_M(s)_{ij} = \\sum_{k=0}&#94;{K-1}\\sum_{l=0}&#94;{L-1}M&#94;{(j)}_{k,i+l}s_{ki}$$ Rectification : Extract some positions $$\\text{rect}_b(x_{ij}) =\\begin{cases} x_{ij} + b & (\\text{if }x_{ij} + b>0)\\\\0 & (\\text{otherwise})\\end{cases}$$ Pooling : Compute the maximum and average of each $\\text{rect}_b\\left(\\cdot\\right)$ across the sequence. Maximizing : identify the presence of longer motifs . Averaging : identify cumulative effects of short motifs $$\\text{pool}_{\\alpha}(x_{ij}) = \\alpha\\max_i\\left(x_{ij}\\right) + \\left(1-\\alpha\\right)\\underset{i}{\\text{ave}}\\left(x_{ij}\\right)$$ Neural Network : Combines the responses to produce a score. a: Five independent sequences being processed in parallel by single DeepBind model. b: The calibration, training and testing procedure. Implementation In [11]: # from kerasy.Bio.deepbind import DeepBind In [ ]: In [1]: nuc = [ \"A\" , \"C\" , \"G\" , \"T\" ] def nuc_to_code ( nuc ): return { 'A' : [ 1 , 0 , 0 , 0 ], 'C' : [ 0 , 1 , 0 , 0 ], 'G' : [ 0 , 0 , 1 , 0 ], 'T' : [ 0 , 0 , 0 , 1 ], } . get ( nuc , [ 0 , 0 , 0 , 0 ]) def generate_dataset ( n_p , n_n , length , motif , nuc ): m = len ( motif ) y = ([ 1 ] * n_p + [ 0 ] * n_n ) x = [ None ] * ( n_p + n_n ) for i in range ( n_p + n_n ): seq = np . random . choice ( nuc , size = length ) # random seq if i < n_p : # embed motif at random position j = np . random . randint ( length - m + 1 ) for k in range ( m ): seq [ j + k ] = np . random . choice ( nuc , p = motif [ k ]) x [ i ] = '' . join ( seq ) return ( x , y ) motif = [[ 0.0 , 1.0 , 0.0 , 0.0 ], # C [ 0.5 , 0.0 , 0.0 , 0.5 ], # A/T [ 0.0 , 0.5 , 0.5 , 0.0 ], # C/G [ 0.0 , 0.0 , 1.0 , 0.0 ], # G [ 0.0 , 0.0 , 0.0 , 1.0 ]] # T seq_len = 20 np_train = 1000 nn_train = 1000 np_test = 100 nn_test = 100 In [2]: x_train , y_train = generate_dataset ( np_train , nn_train , seq_len , motif , nuc ) x_test , y_test = generate_dataset ( np_test , nn_test , seq_len , motif , nuc ) In [ ]: - [ Enhanced ]( https : // arxiv . org / pdf / 1611.05777 . pdf ) In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-16.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-16.html"},{"title":"Ex.15 Neural Network","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-15.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-15.html"},{"title":"Ex.14 Brownian motion","text":"解答 1 \\(n=n\\) の時に以下が成立すると仮定する。 $$p\\left(x_n|x_0\\right) = \\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2n}}\\exp\\left(-\\frac{1}{2\\sigma_s&#94;2n}\\left(x_n-x_0\\right)&#94;2\\right)$$ すると、 $$ \\begin{aligned} p\\left(x_{n+1}|x_0\\right) &= \\int_{-\\infty}&#94;{\\infty}dx_np\\left(x_{n+1}|x_n\\right)p\\left(x_n|x_0\\right)\\\\ &= \\int_{-\\infty}&#94;{\\infty}dx_n\\left(\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2}}\\exp\\left(-\\frac{1}{2\\sigma_s&#94;2}\\left(x_{n+1}-x_n\\right)&#94;2\\right)\\right)\\left(\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2n}}\\exp\\left(-\\frac{1}{2\\sigma_s&#94;2n}\\left(x_n-x_0\\right)&#94;2\\right)\\right)\\\\ &= \\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2}}\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2n}}\\int_{-\\infty}&#94;{\\infty}dx_n\\exp\\left\\{-\\frac{1}{2\\sigma_s&#94;2}\\left(\\left(x_{n+1}-x_n\\right)&#94;2 +\\frac{1}{n}\\left(x_n-x_0\\right)&#94;2\\right)\\right\\}\\\\ \\end{aligned} $$ ここで、 \\(\\exp\\) の内部を \\(x_n\\) に注目すると、 $$ \\begin{aligned} &\\left(x_{n+1}-x_n\\right)&#94;2 +\\frac{1}{n}\\left(x_n-x_0\\right)&#94;2\\\\ &=\\frac{n+1}{n}x_n&#94;2 + 2\\left(x_{n+1}+\\frac{x_0}{n}\\right)x_n + \\left(x_{n+1}&#94;2 + \\frac{1}{n}x_0&#94;2\\right)\\\\ &=\\frac{n+1}{n}\\left(x_n-\\frac{n}{n+1}\\left(x_{n+1}+\\frac{x_0}{n}\\right)\\right)&#94;2 + \\frac{1}{n+1}\\left(x_{n+1}-x_0\\right)&#94;2 \\end{aligned} $$ と整理できる。また、ガウス積分より上式の第1項は、 $$ \\int_{-\\infty}&#94;{\\infty}dx_n\\exp\\left(-\\frac{1}{2\\sigma_s&#94;2}\\frac{n+1}{n}\\left(x_n-\\frac{n}{n+1}\\left(x_{n+1}+\\frac{x_0}{n}\\right)\\right)&#94;2\\right) = \\sqrt{2\\pi\\sigma_s&#94;2\\frac{n}{n+1}} $$ と積分できる。したがって、これらを代入して、 $$ \\begin{aligned} p\\left(x_{n+1}|x_0\\right) &= \\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2}}\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2n}}\\int_{-\\infty}&#94;{\\infty}dx_n\\exp\\left\\{-\\frac{1}{2\\sigma_s&#94;2}\\left(\\left(x_{n+1}-x_n\\right)&#94;2 +\\frac{1}{n}\\left(x_n-x_0\\right)&#94;2\\right)\\right\\}\\\\ &= \\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2}}\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2n}}\\left(\\sqrt{2\\pi\\sigma_s&#94;2\\frac{n}{n+1}}\\right)\\exp\\left\\{-\\frac{1}{2\\sigma_s&#94;2}\\frac{1}{n+1}\\left(x_{n+1}-x_0\\right)&#94;2\\right\\}\\\\ &=\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2\\left(n+1\\right)}}\\exp\\left(-\\frac{1}{2\\sigma_s&#94;2\\left(n+1\\right)}\\left(x_{n+1}-x_0\\right)&#94;2\\right) \\end{aligned} $$ 以上より、帰納法から題意が示せた。 2 $$ \\begin{aligned} \\frac{\\partial p}{\\partial t} &=\\frac{1}{\\sqrt{2\\pi\\sigma&#94;2}}\\left(-\\frac{1}{2}t&#94;{-\\frac{3}{2}} + \\frac{\\left(x-y\\right)&#94;2}{2\\sigma&#94;2}t&#94;{-\\frac{5}{2}}\\right)\\exp\\left(-\\frac{1}{2\\sigma&#94;2t}\\left(x-y\\right)&#94;2\\right)\\\\ \\frac{\\partial p}{\\partial x} &= \\frac{1}{\\sqrt{2\\pi\\sigma&#94;2t}}\\left(-\\frac{1}{\\sigma&#94;2t}\\left(x-y\\right)\\right)\\exp\\left(-\\frac{1}{2\\sigma&#94;2t}\\left(x-y\\right)&#94;2\\right)\\\\ \\frac{\\partial&#94;2 p}{\\partial x&#94;2} &= \\frac{1}{\\sqrt{2\\pi\\sigma&#94;2t}}\\left(-\\frac{1}{\\sigma&#94;2t}-\\frac{1}{\\sigma&#94;2t}\\left(x-y\\right)\\left(-\\frac{x-y}{\\sigma&#94;2t}\\right)\\right)\\exp\\left(-\\frac{1}{2\\sigma&#94;2t}\\left(x-y\\right)&#94;2\\right)\\\\ &=\\frac{1}{\\sqrt{2\\pi\\sigma&#94;2}}\\frac{1}{\\sqrt{t}}\\left(\\frac{1}{\\sigma&#94;2t}\\right)\\left(-1 + \\frac{\\left(x-y\\right)&#94;2}{\\sigma&#94;2t}\\right)\\exp\\left(-\\frac{1}{2\\sigma&#94;2t}\\left(x-y\\right)&#94;2\\right)\\\\ &=\\frac{1}{\\sqrt{2\\pi\\sigma&#94;2}}\\left(\\frac{1}{\\sigma&#94;2}\\right)\\left(-t&#94;{-\\frac{3}{2}} + \\frac{\\left(x-y\\right)&#94;2}{\\sigma&#94;2}t&#94;{-\\frac{5}{2}}\\right)\\exp\\left(-\\frac{1}{2\\sigma&#94;2t}\\left(x-y\\right)&#94;2\\right)\\\\ &=\\frac{2}{\\sigma&#94;2}\\frac{\\partial p}{\\partial t} \\end{aligned} $$ より、題意が示された。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-14.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-14.html"},{"title":"Ex.13 Sparse Modeling","text":"解答 1 $$ \\begin{aligned} \\frac{\\partial}{\\partial\\mathbf{w}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) &=\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\frac{1}{2}\\|\\mathbf{y}-\\mathbf{Xw}\\|_{\\text{L2}}&#94;2 + \\lambda\\|\\mathbf{z}\\|_{\\text{L1}} + \\boldsymbol{\\alpha}&#94;T\\left(\\mathbf{w}-\\mathbf{z}\\right) + \\frac{\\rho}{2}\\|\\mathbf{w}-\\mathbf{z}\\|&#94;2_{\\text{L2}}\\right)\\\\ &=\\left(-\\mathbf{X}&#94;T\\mathbf{y} + \\mathbf{X}&#94;T\\mathbf{Xw}\\right) + \\boldsymbol{\\alpha} + \\rho\\left(\\mathbf{w}-\\mathbf{z}\\right)\\\\ &= 0\\\\ \\therefore\\left(\\mathbf{X}&#94;T\\mathbf{X} + \\rho\\mathbf{I}\\right)\\mathbf{w} &= \\mathbf{X}&#94;T\\mathbf{y} - \\boldsymbol{\\alpha} + \\rho\\mathbf{z}\\\\ \\therefore\\underset{\\mathbf{w}}{\\text{argmin}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) &= \\left(\\mathbf{X}&#94;T\\mathbf{X} + \\rho\\mathbf{I}\\right)&#94;{-1}\\left(\\mathbf{X}&#94;T\\mathbf{y} - \\boldsymbol{\\alpha} + \\rho\\mathbf{z}\\right) \\end{aligned} $$ 2 $z$ の正負で場合分けをすれば、 $$ \\begin{aligned} \\underset{z}{\\text{argmin}}\\left\\{c|z| + \\frac{1}{2}\\left(z-z_0\\right)\\right\\} &= \\begin{cases}z_0-c & \\left(z>0\\right)\\\\0&\\left(\\text{otherwise.}\\right)\\\\z_0+c & \\left(z<0\\right)\\end{cases}\\\\ &= \\begin{cases}z_0-c & \\left(c 3 $$ \\begin{aligned} \\underset{z_i}{\\text{argmin}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) &= \\underset{z_i}{\\text{argmin}}\\left\\{\\lambda\\|z_i\\|_{\\text{L1}} - \\alpha_iz_i + \\frac{\\rho}{2}\\left(-2w_iz_i + z_i&#94;2\\right)\\right\\}\\\\ &= \\underset{z_i}{\\text{argmin}}\\left\\{\\lambda\\|z_i\\|_{\\text{L1}} + \\frac{\\rho}{2}\\left(z&#94;2_i - 2\\left(w_i + \\frac{\\alpha_i}{\\rho}\\right)z_i\\right)\\right\\}\\\\ &= \\underset{z_i}{\\text{argmin}}\\left\\{\\frac{\\lambda}{\\rho}\\|z_i\\|_{\\text{L1}} + \\frac{1}{2}\\left(z_i-\\left(w_i + \\frac{\\alpha_i}{\\rho}\\right)\\right)&#94;2\\right\\}\\\\ \\end{aligned} $$ これは、$2$ の式において $$ \\begin{cases} \\begin{aligned} c&\\longrightarrow\\frac{\\lambda}{\\rho}\\\\ z_0&\\longrightarrow w_i + \\frac{\\alpha_i}{\\rho} \\end{aligned} \\end{cases} $$ とした場合に対応する。以上より、 $$\\underset{\\mathbf{z}}{\\text{argmin}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) = \\text{prox}_{\\frac{\\lambda}{\\rho}|\\ast|}\\left(w_i + \\frac{\\alpha_i}{\\rho}\\right)$$ ここでは、 「L1正則化項の下での線形回帰問題」 を考えた。全体の流れは以下 二乗和誤差関数 $\\frac{1}{2}\\|\\mathbf{y}-\\mathbf{Xw}\\|&#94;2$ にL1正則化項を加えた誤差関数を定義する。（$\\lambda$ は手動で決定。） 解析的に最小解を求めるのが難しいので、新しい変数 $\\mathbf{z}$ を代入してそれぞれ独立の変数としてみる。 とはいえ $\\mathbf{z}=\\mathbf{w}$ という関係は成り立っているので、ラグランジュ乗数 $\\{\\alpha_i\\}$ を導入して、制約条件を付け加える。 $$L\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) = \\frac{1}{2}\\|\\mathbf{y}-\\mathbf{Xw}\\|_{\\text{L2}}&#94;2 + \\lambda\\|\\mathbf{z}\\|_{\\text{L1}} + \\boldsymbol{\\alpha}&#94;T\\left(\\mathbf{w}-\\mathbf{z}\\right)$$ このままでも良いが、凸性を増すために、制約条件を二次の形で加える。この式を 拡張ラグランジュ関数(Augmented Lagrangian) と呼ぶ。 [参考:知能システム論 第3回] $$L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) = \\frac{1}{2}\\|\\mathbf{y}-\\mathbf{Xw}\\|_{\\text{L2}}&#94;2 + \\lambda\\|\\mathbf{z}\\|_{\\text{L1}} + \\boldsymbol{\\alpha}&#94;T\\left(\\mathbf{w}-\\mathbf{z}\\right) + \\rho\\|\\mathbf{w}-\\mathbf{z}\\|_{\\text{L2}}&#94;2$$ 解析的に求めることができないので、拡張ラグランジュ関数の最小化と双対変数の勾配上昇を繰り返す。 拡張ラグランジュ関数の最小化 $$\\begin{aligned}\\mathbf{w}&\\longleftarrow \\underset{\\mathbf{w}}{\\text{argmin}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right)\\quad \\text{with fixed $\\mathbf{z},\\boldsymbol{\\alpha}$}\\\\\\mathbf{z}&\\longleftarrow \\underset{\\mathbf{z}}{\\text{argmin}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right)\\quad \\text{with fixed $\\mathbf{w},\\boldsymbol{\\alpha}$}\\\\\\end{aligned}$$ 双対変数の勾配上昇 $$\\boldsymbol{\\alpha}\\longleftarrow\\boldsymbol{\\alpha} + \\rho\\nabla\\omega\\left(\\boldsymbol{\\alpha}\\right) = \\boldsymbol{\\alpha} + \\rho\\left(\\mathbf{w}-\\mathbf{z}\\right)$$ 実装 以下では、実際に「線形回帰」「L1正則化項の下での線形回帰」「L2正則化項の下での線形回帰」のそれぞれを実装し、違いや特徴を調べる。 結論 以下のような違いが出た。 線形回帰 L1正則化項の下での線形回帰 L2正則化項の下での線形回帰 In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: from kerasy.utils.data_generator import generateSin , generateGausian sample data In [3]: N = 10 # data size xmin = 0 xmax = 1 seed = 0 In [4]: X_test_ori = np . linspace ( xmin , xmax , 1000 ) Y_test = np . sin ( 2 * np . pi * X_test_ori ) In [5]: X_train_ori , Y_train = generateSin ( N , xmin = xmin , xmax = xmax , seed = seed ) _ , Noise = generateGausian ( N , x = X_train_ori , seed = seed ) Y_train += Noise In [6]: plt . scatter ( X_train_ori , Y_train , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) plt . plot ( X_test_ori , Y_test , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) plt . legend (), plt . grid () plt . show () Training In [7]: from kerasy.utils.preprocessing import PolynomialBaseTransformer In [8]: Ms = [ 2 , 4 , 8 , 16 ] Linear Regression In [9]: fig = plt . figure ( figsize = ( 16 , 6 )) for i , M in enumerate ( Ms ): axT = fig . add_subplot ( 2 , 4 , i + 1 ) #=== Transform === phi = PolynomialBaseTransformer ( M ) X_train = phi . transform ( X_train_ori ) X_test = phi . transform ( X_test_ori ) #=== Training === w = np . linalg . solve ( X_train . T . dot ( X_train ), X_train . T . dot ( Y_train )) Y_pred = X_test . dot ( w ) #=== RSS === RSS = np . sqrt ( np . sum ( np . square ( X_train . dot ( w ) - Y_train ))) # Plot. axT . plot ( X_test_ori , Y_test , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) axT . plot ( X_test_ori , Y_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) axT . scatter ( X_train_ori , Y_train , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) axT . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $)\" ), axT . set_xlabel ( \"$x$\" ), axT . set_ylabel ( \"$t$\" ) axT . set_xlim ( 0 , 1 ), axT . set_ylim ( - 1.2 , 1.2 ), axT . legend () axB = fig . add_subplot ( 2 , 4 , i + 5 ) axB . barh ( np . arange ( len ( w )), w , color = \"black\" ) axB . set_ylim ( 0 , max ( Ms )) plt . tight_layout () plt . savefig ( f \"LinearRegression_seed {seed} .png\" ) plt . show () Linear Regression + L2 norm In [10]: lambda_ = 1e-4 In [11]: fig = plt . figure ( figsize = ( 16 , 6 )) for i , M in enumerate ( Ms ): axT = fig . add_subplot ( 2 , 4 , i + 1 ) #=== Transform === phi = PolynomialBaseTransformer ( M ) X_train = phi . transform ( X_train_ori ) X_test = phi . transform ( X_test_ori ) #=== Training === w = np . linalg . solve ( lambda_ * np . identity ( M + 1 ) + X_train . T . dot ( X_train ), X_train . T . dot ( Y_train )) Y_pred = X_test . dot ( w ) #=== RSS === RSS = np . sqrt ( np . sum ( np . square ( X_train . dot ( w ) - Y_train ))) # Plot. axT . plot ( X_test_ori , Y_test , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) axT . plot ( X_test_ori , Y_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) axT . scatter ( X_train_ori , Y_train , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) axT . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $)\" ), axT . set_xlabel ( \"$x$\" ), axT . set_ylabel ( \"$t$\" ) axT . set_xlim ( 0 , 1 ), axT . set_ylim ( - 1.2 , 1.2 ), axT . legend () axB = fig . add_subplot ( 2 , 4 , i + 5 ) axB . barh ( np . arange ( len ( w )), w , color = \"black\" ) axB . set_ylim ( 0 , max ( Ms )) plt . tight_layout () plt . savefig ( f \"LinearRegression_L2_seed {seed} .png\" ) plt . show () Linear Regression + L1 norm In [12]: lambda_ = 1e-3 rho = 1e-3 In [13]: def prox ( w , alpha , rho , lambda_ ): z0 = w + alpha / rho c = lambda_ / rho return z0 - c if c < z0 else z0 + c if z0 <- c else 0 In [14]: fig = plt . figure ( figsize = ( 16 , 6 )) for i , M in enumerate ( Ms ): axT = fig . add_subplot ( 2 , 4 , i + 1 ) #=== Transform === phi = PolynomialBaseTransformer ( M ) X_train = phi . transform ( X_train_ori ) X_test = phi . transform ( X_test_ori ) #=== Training === alpha = np . ones ( shape = ( M + 1 )) z = np . ones ( shape = ( M + 1 )) while True : w = np . linalg . solve ( X_train . T . dot ( X_train ) + rho * np . identity ( M + 1 ), X_train . T . dot ( Y_train ) - alpha + rho * z ) z = np . asarray ([ prox ( w_ , alpha_ , rho , lambda_ ) for w_ , alpha_ in zip ( w , alpha )]) alpha += rho * ( w - z ) if np . sqrt ( np . sum ( np . square ( w - z ))) < 1e-9 : break Y_pred = X_test . dot ( w ) #=== RSS === RSS = np . sqrt ( np . sum ( np . square ( X_train . dot ( w ) - Y_train ))) # Plot. axT . plot ( X_test_ori , Y_test , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) axT . plot ( X_test_ori , Y_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) axT . scatter ( X_train_ori , Y_train , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) axT . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $)\" ), axT . set_xlabel ( \"$x$\" ), axT . set_ylabel ( \"$t$\" ) axT . set_xlim ( 0 , 1 ), axT . set_ylim ( - 1.2 , 1.2 ), axT . legend () axB = fig . add_subplot ( 2 , 4 , i + 5 ) axB . barh ( np . arange ( len ( w )), w , color = \"black\" ) axB . set_ylim ( 0 , max ( Ms )) plt . tight_layout () plt . savefig ( f \"LinearRegression_L1_seed {seed} .png\" ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-13.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-13.html"},{"title":"Ex.12 Order Statistics","text":"解答 1 $$\\mathbb{F}_{X_h}(x)\\equiv\\mathbb{P}\\left(X_h\\leq x\\right) = \\int_0&#94;x1dx&#94;{\\prime} = x$$ 2 $$\\begin{aligned} \\mathbb{F}_{X_{\\max}}(x) &\\equiv\\mathbb{P}\\left(X_{\\max}\\leq x\\right) = \\mathbb{P}\\left(X_{(1)}\\leq x,X_{(2)}\\leq x,\\ldots,X_{(n)}\\leq x\\right)\\\\ &=\\int_0&#94;x1dx_{(1)}&#94;{\\prime}\\int_0&#94;x1dx_{(2)}&#94;{\\prime}\\cdots\\int_0&#94;x1dx_{(n)}&#94;{\\prime} = x&#94;n \\end{aligned}$$ 3 $$f_{X_{\\max}}(x) = \\frac{d\\mathbb{F}_{X_{\\max}}}{dx}(x) = \\frac{d}{dx}x&#94;n = nx&#94;{n-1}$$ 4 $$\\mathbb{E}\\left(X_{\\max}\\right) = \\int_0&#94;1xf_{X_{\\max}}(x)dx = \\int_0&#94;1nx&#94;ndx = \\frac{n}{n+1}\\left[x&#94;{n+1}\\right]_0&#94;1 = \\frac{n}{n+1}$$ 5 $$\\begin{aligned} \\mathbb{F}_{X_{\\min}}(x) &\\equiv\\mathbb{P}\\left(X_{\\min}\\leq x\\right) = 1 - \\mathbb{P}\\left(X_{(1)}> x,X_{(2)}> x,\\ldots,X_{(n)}> x\\right)\\\\ &=1 - \\int_x&#94;11dx_{(1)}&#94;{\\prime}\\int_x&#94;11dx_{(2)}&#94;{\\prime}\\cdots\\int_x&#94;11dx_{(n)}&#94;{\\prime} = 1 - \\left(1-x\\right)&#94;n \\end{aligned}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-12.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-12.html"},{"title":"Ex.11 Data Assimilation","text":"解答 1","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-11.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-11.html"},{"title":"Ex.10 Expectation Maximization Algorithm","text":"解答 1 $$ \\begin{aligned} &\\mathcal{Q}_{\\text{EM}}\\left(\\theta|\\theta&#94;{\\prime}\\right) + H\\left(\\theta&#94;{\\prime}\\right) + \\mathrm{KL}\\left(\\theta&#94;{\\prime}\\|\\theta\\right)\\\\ =&\\sum_{h=1}&#94;n\\sum_{z_h}\\log\\left(p\\left(x_h,z_h|\\theta\\right)\\right)\\frac{p\\left(x_h,z_h|\\theta&#94;{\\prime}\\right)}{p\\left(x_h|\\theta&#94;{\\prime}\\right)} - \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\right)\\\\ &+ \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(\\frac{p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)}{p\\left(z_h|x_h,\\theta\\right)}\\right)\\\\ =&\\sum_{h=1}&#94;n\\sum_{z_h}\\log\\left(p\\left(x_h,z_h|\\theta\\right)\\right)\\frac{p\\left(x_h,z_h|\\theta&#94;{\\prime}\\right)}{p\\left(x_h|\\theta&#94;{\\prime}\\right)} - \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(p\\left(z_h|x_h,\\theta\\right)\\right)\\\\ =&\\sum_{h=1}&#94;n\\sum_{z_h}\\log\\left(p\\left(x_h,z_h|\\theta\\right)\\right)p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right) - \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(p\\left(z_h|x_h,\\theta\\right)\\right)\\quad\\left(\\because\\text{ Conditional probability}\\right)\\\\ =&\\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(p\\left(x_h|\\theta\\right)\\right)\\quad\\left(\\because\\text{ Conditional probability}\\right)\\\\ =&\\sum_{h=1}&#94;n\\log\\left(p\\left(x_h|\\theta\\right)\\right)\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\\\ =&\\sum_{h=1}&#94;n\\log\\left(p\\left(x_h|\\theta\\right)\\right)\\quad\\left(\\because\\text{ Marginalization}\\right)\\\\ =&l\\left(\\theta|D\\right) \\end{aligned} $$ 2 $$ \\begin{aligned} \\mathrm{KL}\\left(\\theta&#94;{\\prime}\\|\\theta\\right)|_{\\theta=\\theta&#94;{\\prime}} &= \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(\\frac{p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)}{p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)}\\right)\\\\ &= \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\cdot\\log(1) = 0\\\\ \\end{aligned} $$ より、 \\(\\theta=\\theta&#94;{\\prime}\\) で \\(l\\left(\\theta|D\\right) = \\mathcal{Q}_{\\text{EM}}\\left(\\theta|\\theta&#94;{\\prime}\\right)+H\\left(\\theta&#94;{\\prime}\\right)\\) また、 $$ \\begin{aligned} \\frac{\\partial}{\\partial\\theta}l\\left(\\theta|D\\right)|_{\\theta=\\theta&#94;{\\prime}} &= \\sum_{h=1}&#94;n\\frac{\\partial}{\\partial\\theta}\\left(\\log\\left(p\\left(x_h|\\theta\\right)\\right)\\right)|_{\\theta=\\theta&#94;{\\prime}}\\\\ &=\\sum_{h=1}&#94;n\\frac{1}{p\\left(x_h|\\theta&#94;{\\prime}\\right)}\\frac{\\partial}{\\partial\\theta}\\left(p\\left(x_h|\\theta\\right)\\right)|_{\\theta=\\theta&#94;{\\prime}}\\\\ \\frac{\\partial}{\\partial\\theta}\\left(\\mathcal{Q}_{\\text{EM}}\\left(\\theta|\\theta&#94;{\\prime}\\right) + H\\left(\\theta&#94;{\\prime}\\right)\\right)|_{\\theta=\\theta&#94;{\\prime}} &=\\sum_{h=1}&#94;n\\sum_{z_h}\\frac{\\frac{\\partial}{\\partial\\theta}\\left(p\\left(x_h,z_h|\\theta\\right)\\right)}{p\\left(x_h,z_h|\\theta\\right)}|_{\\theta=\\theta&#94;{\\prime}}\\frac{p\\left(x_h,z_h|\\theta&#94;{\\prime}\\right)}{p\\left(x_h|\\theta&#94;{\\prime}\\right)}\\\\ &= \\sum_{h=1}&#94;n\\frac{1}{p\\left(x_h|\\theta&#94;{\\prime}\\right)}\\sum_{z_h}\\frac{\\partial}{\\partial\\theta}\\left(p\\left(x_h,z_h|\\theta\\right)\\right)|_{\\theta=\\theta&#94;{\\prime}}\\\\ &=\\sum_{h=1}&#94;n\\frac{1}{p\\left(x_h|\\theta&#94;{\\prime}\\right)}\\frac{\\partial}{\\partial\\theta}\\left(p\\left(x_h|\\theta\\right)\\right)|_{\\theta=\\theta&#94;{\\prime}} \\end{aligned} $$ となるので、 \\(\\theta\\) に関する一階微分に関しても先の等式が成り立つ。 ゆえに、題意が成り立つ。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-10.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-10.html"},{"title":"Ex.9 Kullback-Leibler Divergence","text":"解答 1 $$ \\begin{cases} \\begin{aligned} g(1) &= 1-1=0 & g&#94;{\\prime}(1) &= 1-0 = 1\\\\ h(1) &= \\log(1)=0 &h;&#94;{\\prime}(1)&= \\frac{1}{1} = 1 \\end{aligned} \\end{cases} $$ より、接する。実際にグラフを描いて確かめてみる。 In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: g = lambda x : x - 1 h = lambda x : np . log ( x ) In [3]: X = np . linspace ( 1e-2 , 5 , 1000 ) In [4]: plt . plot ( X , g ( X ), color = \"red\" , label = \"$g(x)=x-1$\" ), plt . scatter ( 1 , g ( 1 ), color = \"red\" , s = 100 , alpha = 0.5 ) plt . plot ( X , h ( X ), color = \"blue\" , label = \"$h(x)=\\log(x)$\" ), plt . scatter ( 1 , h ( 1 ), color = \"blue\" , s = 100 , alpha = 0.5 ) plt . grid (), plt . xlabel ( \"$x$\" ), plt . ylabel ( \"$y$\" ), plt . legend () plt . show () 2 $d(x) = x-1-\\log(x)$ は、$1$ で調べたように $x=1$ で $d(1) = 0$ となる。 また、$d&#94;{\\prime}(x) = \\begin{cases}1-\\frac{1}{x} > 0 & (\\text{when $x>1$})\\\\1-\\frac{1}{x} \\leq 0 & (\\text{when $x\\leq1$})\\end{cases}$ となることから、$d$ は $1>x>0$ で単調減少し、$x>1$ で単調増加することがわかる。 以上より、題意が成立する。ついでにこのグラフも描いてみる。 In [5]: plt . plot ( X , g ( X ) - h ( X ), color = \"green\" , label = \"$d(x)=x-1-\\log(x)$\" ), plt . scatter ( 1 , g ( 1 ) - h ( 1 ), color = \"green\" , label = \"$x=1$\" , s = 100 ) plt . axvspan ( 1 , 5 , color = \"red\" , alpha = 0.2 ), plt . axvspan ( 0 , 1 , color = \"blue\" , alpha = 0.2 ) plt . grid (), plt . xlabel ( \"$x$\" ), plt . ylabel ( \"$y$\" ), plt . legend () plt . show () 3 $p_k>0$ だから、 $$ \\begin{aligned} p_kd\\left(\\frac{q_k}{p_k}\\right) &= p_k\\left(\\frac{q_k}{p_k} - 1 - \\log\\left(\\frac{q_k}{p_k}\\right)\\right)\\\\ &= q_k - p_k + p_k\\log\\left(\\frac{p_k}{q_k}\\right)\\\\ &\\geq0\\quad\\left(\\text{with equality if and only if $p_k=q_k$}\\right)\\\\ \\therefore p_k\\log\\left(\\frac{p_k}{q_k}\\right) &\\geq p_k-q_k\\\\ \\sum_{k=1}&#94;mp_k\\log\\left(\\frac{p_k}{q_k}\\right) &\\geq \\sum_{k=1}&#94;m\\left(p_k-q_k\\right)\\quad\\left(\\text{with equality if and only if $p_k=q_k$, giving $k=1,\\ldots,m$}\\right)\\\\ \\therefore \\mathrm{KL}\\left(p\\|q\\right) &\\geq 0 \\end{aligned} $$ 4 $$ \\begin{aligned} \\hat{\\boldsymbol{\\theta}} &= \\underset{\\boldsymbol{\\theta}}{\\text{argmin}} \\mathrm{KL}\\left(p_D\\|q_{\\boldsymbol{\\theta}}\\right)\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmin}} \\int p_D(x)\\log\\left(\\frac{p_D(x)}{q_{\\boldsymbol{\\theta}}(x)}\\right)dx\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmin}} \\sum_{k=1}&#94;np_D(x_k)\\log\\left(\\frac{p_D(x_k)}{q_{\\boldsymbol{\\theta}}(x_k)}\\right)\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmin}} \\left(-\\sum_{k=1}&#94;np_D(x_k)\\log\\left(q_{\\boldsymbol{\\theta}}(x_k)\\right)\\right)\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}} \\sum_{k=1}&#94;n\\frac{1}{n}\\log\\left(p\\left(x_k|\\boldsymbol{\\theta}\\right)\\right) \\end{aligned} $$ したがって、題意が成り立つ。 これは、 「経験分布 $p_D$ に対するモデル分布 $q_{\\boldsymbol{\\theta}}$ の Kullback-Leibler Divergence の 最小化 「経験分布 $p_D$ について平均をとったモデル分布 $q_{\\boldsymbol{\\theta}}$ の対数尤度 の 最大化 が等しいことを表す。 KL Divergence 以下では、問題と直接関係ないが、いくつかの確率分布で 実際にKL-Divergenceを求めてみる。 確率分布名 scipy クラス 正規分布 stats.norm ベータ分布 stats.beta $\\chi$ 二乗分布 stats.chi2 F分布 stats.f ガンマ分布 stats.gamma t分布 stats.t 一様分布 stat.uniform In [6]: from scipy import stats In [7]: N = 1000 xmin = - 3 xmax = 3 In [8]: x = np . linspace ( xmin , xmax , N ) y = stats . norm . pdf ( x ) dXs = np . arange ( - 1 , 0.2 , 0.2 ) In [9]: n_fig = len ( dXs ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 In [10]: def KL_diver ( P , Q ): return np . sum ([ q * np . log ( q / p ) for p , q in zip ( P , Q )]) In [11]: fig = plt . figure ( figsize = ( 6 * n_col , 4 * n_row )) for i , dx in enumerate ( dXs ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) y_ = stats . norm . pdf ( x + dx ) ax . plot ( x , y , \"b\" ), ax . fill_between ( x , 0 , y , color = \"b\" , alpha = 0.3 ) ax . plot ( x , y_ , \"r\" ), ax . fill_between ( x , 0 , y_ , color = \"r\" , alpha = 0.3 ) ax . set_title ( f \"KL Divergence: {KL_diver(y,y_):.2f}\" ) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-9.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-9.html"},{"title":"Ex.8 Multivariate Normal Distribution","text":"解答 1 $$ \\begin{aligned} \\int_{\\mathbb{R}&#94;m}f_X(\\mathbf{x})d&#94;mx &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|\\boldsymbol{\\Sigma}\\right|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}}\\exp\\left(-\\frac{1}{2}\\left(x_1&#94;2 + \\cdots + x_m&#94;2\\right)\\right)d&#94;mx\\\\ &=\\prod_{k=1}&#94;m\\int_{\\mathbb{R}}\\frac{1}{\\sqrt{2\\pi}}\\exp\\left(-\\frac{1}{2}x_k&#94;2\\right)dx_k\\\\ &=1 \\end{aligned} $$ 上では、以下の ガウス積分 を用いた。 $$I = \\int_{-\\infty}&#94;{\\infty}e&#94;{-ax&#94;2}dx = \\int_{-\\infty}&#94;{\\infty}e&#94;{-ay&#94;2}dy$$ を考える。ここで、 $$\\begin{aligned} I&#94;2 &= \\left(\\int_{-\\infty}&#94;{\\infty}e&#94;{-ax&#94;2}dx\\right)&#94;2\\\\ &= \\left(\\int_{-\\infty}&#94;{\\infty}e&#94;{-ax&#94;2}dx\\right)\\left(\\int_{-\\infty}&#94;{\\infty}e&#94;{-ay&#94;2}dy\\right)\\\\ &=\\int_{\\infty}&#94;{\\infty}dx\\int_{-\\infty}&#94;{\\infty}dye&#94;{-a(x&#94;2+y&#94;2)}\\\\ &= \\int_0&#94;{\\infty}rdr\\int_0&#94;{2\\pi}d\\theta e&#94;{-ar&#94;2}\\\\ &= 2\\pi\\left[-\\frac{1}{2a}e&#94;{-ar&#94;2}\\right]_0&#94;{\\infty}\\\\ &= \\frac{\\pi}{a}\\\\ \\therefore I&= \\sqrt{\\frac{\\pi}{a}} \\end{aligned}$$ 2 \\(\\Sigma\\) が実対称行列なので、実直交行列 \\(O\\) を用いて \\(\\Sigma = O\\Lambda O&#94;T\\) と対角化できる。（ \\(\\Lambda = \\left(\\lambda_1,\\ldots,\\lambda_m\\right)\\) ） したがって、 $$ \\begin{aligned} \\int_{\\mathbb{R}&#94;m}f_X(\\mathbf{x})d&#94;mx &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|\\Sigma\\right|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)&#94;T\\Sigma&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|O\\Lambda O&#94;T\\right|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)&#94;T\\left(O\\Lambda O&#94;T\\right)&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|\\Lambda\\right|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(O&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)&#94;T\\Lambda&#94;{-1}\\left(O&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|\\Lambda\\right|&#94;{1/2}}\\exp\\left(\\sum_{k=1}&#94;m-\\frac{1}{2}\\mathbf{o}_k&#94;{-1T}(x_k-\\mu_k)\\lambda_k&#94;{-1}\\mathbf{o}_k&#94;{-1}(x_k-\\mu_k)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\sum_{k=1}&#94;m\\lambda_k&#94;{1/2}}\\exp\\left(\\sum_{k=1}&#94;m-\\frac{1}{2}(x_k-\\mu_k)\\lambda_k&#94;{-1}(x_k-\\mu_k)\\right)d&#94;mx\\\\ &= \\prod_{k=1}&#94;m\\int_{\\mathbb{R}}\\frac{1}{(2\\pi)&#94;{1/2}\\lambda_k&#94;{(1/2)}}\\exp\\left(-\\frac{1}{2}\\lambda_k&#94;{-1}y_k&#94;2\\right)dy_k\\\\ &= \\prod_{k=1}&#94;m\\frac{1}{(2\\pi)&#94;{1/2}\\lambda_k&#94;{(1/2)}}\\sqrt{\\frac{2\\pi}{\\lambda_k&#94;{-1}}}\\\\ &= 1 \\end{aligned} $$ 3 \\(2\\) と同様に考えて、 $$ \\begin{aligned} \\mathbb{E}\\left(X_k\\right) &= \\int_{\\mathbb{R}&#94;m}x_kf_X(\\mathbf{x})d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\sum_{k=1}&#94;m\\lambda_k&#94;{1/2}}x_k\\exp\\left(\\sum_{k=1}&#94;m-\\frac{1}{2}(x_k-\\mu_k)\\lambda_k&#94;{-1}(x_k-\\mu_k)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\lambda_k&#94;{1/2}}x_k\\exp\\left(-\\frac{1}{2}\\left(x_k-\\mu_k\\right)\\lambda_k&#94;{-1}\\left(x_k-\\mu_k\\right)\\right)dx_k\\\\ &=\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\lambda_k&#94;{1/2}}\\int_{\\mathbb{R}&#94;m}\\left(y_k + \\mu_k\\right)\\exp\\left(-\\frac{1}{2}\\lambda_k&#94;{-1}y_k&#94;2\\right)dy_k\\\\ &= \\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\lambda_k&#94;{1/2}}\\left[-\\frac{1}{\\lambda_k&#94;{-1}}\\exp\\left(-\\frac{1}{2}\\lambda_k&#94;{-1}y_k&#94;2\\right)\\right]_{-\\infty}&#94;{\\infty} + \\mu_k\\\\ &=\\mu_k \\end{aligned} $$ 4 \\(2\\) と同様に考えて、 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-8.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-8.html"},{"title":"Ex.7 Positive Definite Symmetric Matrix","text":"解答 1 $$A = O\\Lambda O&#94;T\\Longleftrightarrow O&#94;TAO = \\Lambda$$ ここで、 \\(O=\\left(\\mathbf{u}_1,\\cdots\\mathbf{u}_m\\right)\\) と分解できるので、 \\(O\\) の第 \\(k\\) 列ベクトル \\(\\mathbf{u}_k\\) に注目すると、 $$\\lambda_k = \\mathbf{u}_k&#94;TA\\mathbf{u}_k > 0\\quad\\left(\\because\\text{positive definite}\\right)$$ 2 \\(k\\) 成分のみゼロではない次のベクトルを考える。 $$\\mathbf{e}_k = \\left(\\begin{array}{ccc}0\\\\\\vdots\\\\1\\\\\\vdots\\\\0\\end{array}\\right)$$ すると、 $$A_{kk} = \\mathbf{e}_k&#94;TA\\mathbf{e}_k > 0\\quad\\left(\\because\\text{positive definite}\\right)$$ 3 \\(k,l\\) 成分のみゼロではないベクトル \\(\\mathbf{v}\\) を考える。ここで、 $$v_k = x,v_l=y \\qquad \\forall x,y\\in\\mathbb{R},x.y\\neq0$$ とする。すると、 $$\\begin{aligned} \\mathbf{v}&#94;TA\\mathbf{v} &= x&#94;2A_{kk} + xyA_{kl} + yxA_{lk} + y&#94;2A_{ll}\\\\ &= \\left(\\begin{array}{ccc}x\\\\y\\end{array}\\right)&#94;T\\left(\\begin{array}{ccc}A_{kk} & A_{kl}\\\\A_{lk} & A_{ll}\\end{array}\\right)\\left(\\begin{array}{ccc}x\\\\y\\end{array}\\right) > 0 \\end{aligned}$$ したがって、行列 $$A&#94;{(kl)} = \\left(\\begin{array}{ccc}A_{kk} & A_{kl}\\\\A_{lk} & A_{ll}\\end{array}\\right)$$ は正定値行列であることがわかる。ゆえに、 \\((1)\\) より、行列 \\(A&#94;{(kl)}\\) の固有値（ \\(\\lambda&#94;{(kl)}_1,\\lambda&#94;{(kl)}_2\\) ）は全て非負。 一方、行列式は固有値の積でかけるので、以下の関係が成り立つ。 $$\\left|A&#94;{(kl)}\\right| = A_{kk}A_{ll} - A_{kl}A_{lk} = \\lambda&#94;{(kl)}_1\\lambda&#94;{(kl)}_2 > 0$$ また、 \\(A&#94;T=A\\) より \\(A_{kl} = A_{lk}\\) なので、上より、 $$A_{kk}A_{ll} - A_{kl}&#94;2 > 0\\Longleftrightarrow\\sqrt{A_{kk}A_{ll}} > \\left|A_{kl}\\right|$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-7.html"},{"title":"Ex.6 Multinomial Distribution","text":"解答 1 $$ \\begin{aligned} \\mathbb{E}\\left(N_k\\right) &= \\mathbb{E}\\left(\\sum_{h=1}&#94;{n_0}Y_k&#94;{(h)}\\right) = \\mathbb{E}\\left(\\sum_{h=1}&#94;{n_0}\\mathbb{I}\\left(X&#94;{(h)} = k\\right)\\right)\\\\ &= \\sum_{h=1}&#94;{n_0}\\mathbb{E}\\left(\\sum_{h=1}&#94;{n_0}\\mathbb{I}\\left(X&#94;{(h)} = k\\right)\\right)\\\\ &= n_0q_k \\end{aligned} $$ 2 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-6.html"},{"title":"Ex.5 Categorical Distribution","text":"解答 1 $$\\mathbb{E}\\left(1\\right) = \\sum_{k=1}&#94;m 1\\cdot q_k = 1$$ 2 $$\\mathbb{E}\\left(X\\right) = \\sum_{k=1}&#94;m k\\mathbb{P}\\left(X=k\\right) = \\sum_{k=1}&#94;mkq_k$$ 3 $$\\mathbb{E}\\left(Y_k\\right) = \\sum_{k&#94;{\\prime}=1}&#94;m \\mathbb{I}\\left(X=k\\right) \\mathbb{P}\\left(X=k&#94;{\\prime}\\right)=\\mathbb{P}\\left(X=k\\right) = q_k$$ 4 EX1. Covariance より、 $$ \\begin{aligned} \\mathrm{Cov}\\left(Y_k,Y_l\\right) &= \\mathbb{E}\\left(Y_kY_l\\right) - \\mathbb{E}\\left(Y_k\\right)\\mathbb{E}\\left(Y_l\\right)\\\\ &= \\sum_{k&#94;{\\prime},l&#94;{\\prime}}\\mathbb{I}\\left(X=k,X=l\\right)\\mathbb{P}\\left(X=k&#94;{\\prime},X=l&#94;{\\prime}\\right) - q_kq_l\\\\ &=\\delta_{kl}q_k - q_kq_l \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-5.html"},{"title":"Ex4. Exponential Distribution","text":"解答 1 $$ \\int_0&#94;{\\infty}f_X(x)dx = \\int_0&#94;{\\infty}\\lambda e&#94;{-\\lambda x}dx = \\left[-e&#94;{-\\lambda x}\\right]_0&#94;{\\infty} = 1 $$ 2 $$\\begin{aligned} \\mathbb{E}\\left(X\\right) &= \\int_0&#94;{\\infty}xf_X(x)dx = \\int_0&#94;{\\infty}x\\lambda e&#94;{-\\lambda x}dx\\\\ &= \\int_0&#94;{\\infty}x\\left(-e&#94;{-\\lambda x}\\right)&#94;{\\prime}dx\\\\ &= \\left[-xe&#94;{-\\lambda x}\\right]_0&#94;{\\infty} - \\int_0&#94;{\\infty}-e&#94;{-\\lambda x} dx\\\\ &= \\left[-\\frac{1}{\\lambda}e&#94;{-\\lambda x}\\right]_0&#94;{\\infty}\\\\ &= \\frac{1}{\\lambda} \\end{aligned}$$ 3 $$ \\mathbb{P}\\left(X>t\\right) = \\int_t&#94;{\\infty}f(x)dx = \\left[-e&#94;{-\\lambda x}\\right]_t&#94;{\\infty} = e&#94;{-\\lambda t} $$ 4 $$\\begin{aligned} \\mathbb{P}\\left(X>s+t|X>s\\right) &= \\frac{\\mathbb{P}\\left(X>s+t\\right)}{\\mathbb{P}\\left(X>s\\right)}\\\\ &= \\frac{\\int_{s+t}&#94;{\\infty}f_X(x)dx}{\\int_s&#94;{\\infty}f_X(x)dx}\\\\ &= \\frac{e&#94;{-\\lambda\\left(s+t\\right)}}{e&#94;{-\\lambda s}}\\\\ &= e&#94;{-\\lambda t} = \\mathbb{P}\\left(X>t\\right) \\end{aligned}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-4.html"},{"title":"EX3. Law of Large Numbers","text":"解答 1 $$ \\begin{aligned} \\varphi_{Z}(t) &= \\int_{-\\infty}&#94;{\\infty}e&#94;{itz}\\delta\\left(z-\\mu\\right)dz\\\\ &= e&#94;{it\\mu} \\end{aligned} $$ 2 $$ \\begin{aligned} \\varphi_{\\bar{X}&#94;{(n)}}(t) &= \\varphi_{\\frac{X_1 + \\cdots + X_n}{n}}(t)\\\\ &= \\varphi_X\\left(\\frac{X_1}{n}\\right)\\cdots\\varphi_X\\left(\\frac{X_n}{n}\\right)\\\\ &= \\left[\\varphi_X\\left(\\frac{X}{n}\\right)\\right]&#94;n\\\\ &= \\exp\\left(n\\log\\left(\\varphi_X\\left(\\frac{X}{n}\\right)\\right)\\right)\\\\ &= \\exp\\left(n\\log\\left(1 + \\mathbb{E}\\left(X\\right)\\frac{1}{1!}\\left(\\frac{it}{n}\\right)&#94;1 + \\mathcal{O}\\left(\\frac{1}{n&#94;2}\\right)\\right)\\right)\\\\ \\end{aligned} $$ ここで、 $$ \\begin{aligned} &\\log\\left(1 + \\mathbb{E}\\left(X\\right)\\frac{1}{1!}\\left(\\frac{it}{n}\\right)&#94;1 + \\mathcal{O}\\left(\\frac{1}{n&#94;2}\\right)\\right)\\\\ &= \\sum_{k=1}&#94;{\\infty}\\left(-1\\right)&#94;{k+1}\\cdot\\frac{\\left(\\mathbb{E}\\left(X\\right)\\frac{it}{n} + \\mathcal{O}\\left(\\frac{1}{n&#94;2}\\right)\\right)&#94;k}{k}\\\\ &= \\mathbb{E}\\left(X\\right)\\frac{it}{n} + \\mathcal{O}\\left(\\frac{1}{n&#94;2}\\right) \\end{aligned} $$ だから、 $$ \\begin{aligned} \\varphi_{\\bar{X}&#94;{(n)}}(t) &= \\exp\\left(n\\cdot\\mathbb{E}\\left(X\\right)\\frac{it}{n} + \\mathcal{O}\\left(\\frac{1}{n}\\right)\\right)\\\\ &= \\exp\\left(it\\mu + \\mathcal{O}\\left(\\frac{1}{n}\\right)\\right)\\\\ &\\underset{n\\rightarrow\\infty}{\\longrightarrow}e&#94;{it\\mu} = \\varphi_{\\bar{X}&#94;{(n)}}(t) \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-3.html"},{"title":"EX2. Characteristic function","text":"解答 1 $$\\varphi_{X}(0) = \\mathbb{E}\\left(e&#94;{i\\cdot0\\cdot X}\\right) = \\mathbb{E}(1) = 1$$ 2 $$ \\begin{aligned} \\frac{d&#94;m\\varphi_{X}}{dt&#94;m} &= \\underset{\\text{m個}}{0+\\cdots+0} + \\frac{m!\\cdot i&#94;m}{m!}\\mathbb{E}\\left(X&#94;m\\right) \\\\&+\\frac{\\left\\{(m+1)\\cdot m\\cdots 3\\cdot2\\right\\} i&#94;m\\cdot(it)}{(m+1)!}\\mathbb{E}\\left(X&#94;{m+1}\\right) + \\frac{\\left\\{(m+2)\\cdot (m+1)\\cdots 4\\cdot3\\right\\}i&#94;m\\cdot(it)&#94;2}{(m+2)!}\\mathbb{E}\\left(X&#94;{m+2}\\right)+\\cdots\\\\ &= \\frac{m!\\cdot i&#94;m}{m!}\\mathbb{E}\\left(X&#94;m\\right) + \\sum_{n}&#94;{\\infty}\\frac{i&#94;m(it)&#94;n}{n!}\\mathbb{E}\\left(m+n\\right)\\\\ \\therefore\\left.\\frac{d&#94;{m} \\varphi_{x}}{d t&#94;{m}}\\right|_{t=0} &= i&#94;m \\mathbb{E}\\left(X&#94;m\\right) + 0\\qquad \\\\ \\therefore \\frac{1}{i&#94;m}\\left.\\frac{d&#94;{m} \\varphi_{x}}{d t&#94;{m}}\\right|_{t=0} &=\\mathbb{E}\\left(X&#94;m\\right)\\\\ \\end{aligned} $$ 3 $$\\begin{aligned} \\varphi_X(t) &= \\sum_{n=0}&#94;{\\infty}\\frac{\\lambda&#94;k}{k!}e&#94;{-\\lambda}e&#94;{itk}\\\\ &=\\sum_{n=0}&#94;{\\infty}\\frac{\\left(\\lambda e&#94;{it}\\right)&#94;k}{k!}e&#94;{-\\lambda}\\\\ &= e&#94;{\\lambda e&#94;{it}}e&#94;{-\\lambda}\\\\ &= e&#94;{\\lambda\\left(e&#94;{it}-1\\right)} \\end{aligned}$$ 4 オイラーの公式より、 $$e&#94;{it} = \\cos t+i\\sin t$$ が成り立つので、 $$ \\begin{aligned} e&#94;{it\\left(aX+bY\\right)} =& e&#94;{itaX}e&#94;{itbY}\\\\ =& \\left(\\cos \\left(taX\\right) + i\\sin\\left(taX\\right)\\right)\\left(\\cos \\left(tbY\\right) + i\\sin\\left(tbY\\right)\\right)\\\\ =& \\left(\\cos\\left(taX\\right)\\cos\\left(tbY\\right) - \\sin\\left(taX\\right)\\sin\\left(tbY\\right)\\right) \\\\ &+ i\\left(\\cos \\left(taX\\right)\\sin\\left(tbY\\right) + \\sin\\left(taX\\right)\\cos \\left(tbY\\right)\\right) \\end{aligned} $$ と分解できる。したがって、 \\(X,Y\\) が独立なので、 $$ \\begin{aligned} \\varphi_{aX+bY}(t) =&\\mathbb{E}\\left(e&#94;{it\\left(aX+bY\\right)}\\right)\\\\ =& \\mathbb{E}\\left(\\cos\\left(taX\\right)\\right)\\mathbb{E}\\left(\\cos\\left(tbY\\right)\\right) - \\mathbb{E}\\left(\\sin\\left(taX\\right)\\right)\\mathbb{E}\\left(\\sin\\left(tbY\\right)\\right) \\\\ &+ i\\left(\\mathbb{E}\\left(\\cos \\left(taX\\right)\\right)\\mathbb{E}\\left(\\sin\\left(tbY\\right)\\right) + \\mathbb{E}\\left(\\sin\\left(taX\\right)\\right)\\mathbb{E}\\left(\\cos \\left(tbY\\right)\\right)\\right)\\\\ =& \\left(\\mathbb{E}\\left(\\cos taX\\right) + i\\mathbb{E}\\left(\\sin taX\\right)\\right)\\cdot\\left(\\mathbb{E}\\left(\\cos tbY\\right) + i\\mathbb{E}\\left(\\sin tbY\\right)\\right)\\\\ =&\\mathbb{E}\\left(e&#94;{itaX}\\right)\\cdot\\mathbb{E}\\left(e&#94;{itbY}\\right)\\\\ =&\\varphi_{X}(at)\\varphi_{Y}(bt) \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-2.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-2.html"},{"title":"EX1. Covariance","text":"解答 1 $$ \\begin{aligned} \\mathbb{E}\\left(\\left(X-\\mu_X\\right)\\left(Y-\\mu_Y\\right)\\right) &= \\mathbb{E}\\left(XY - \\mu_YX-\\mu_XY + \\mu_X\\mu_Y\\right)\\\\ &= \\mathbb{E}\\left(XY\\right) - \\mu_Y\\mathbb{E}(X) - \\mu_X\\mathbb{E}(Y) + \\mu_X\\mu_Y\\\\ &= \\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\quad (\\because\\mu_X=\\mathbb{E}(X),\\mu_Y=\\mathbb{E}(Y)) \\end{aligned} $$ 2 連続型確率変数の場合で証明する。（離散型は \\(\\int\\rightarrow\\sum\\) ） $$ \\begin{aligned} \\mathbb{E}(XY) &= \\int_{x}\\int_{y} xy\\mathbb{P}(X=x,Y=y)dxdy\\\\ &= \\int_{x}\\int_{y} xy\\mathbb{P}(X=x)\\mathbb{P}(Y=y)dxdy\\quad(\\because X,Y: \\text{independent})\\\\ &= \\int_{x} x\\mathbb{P}(X=x)dx\\int_{y}y\\mathbb{P}(Y=y)dy\\\\ &= \\mathbb{E}(X)\\mathbb{E}(Y) \\end{aligned} $$ となるので、 \\((1)\\) より、 $$ \\begin{aligned} \\mathrm{Cov}(X,Y) &= \\mathbb{E}\\left(\\left(X-\\mu_X\\right)\\left(Y-\\mu_Y\\right)\\right)\\\\ &=\\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\\\ &=0 \\end{aligned} $$ 3 $$ \\begin{aligned} \\mathrm{Var}(X+Y) &= \\mathbb{E}\\left((X+Y)&#94;2\\right) - \\left(\\mathbb{E}\\left(X+Y\\right)\\right)&#94;2\\\\ &= \\mathbb{E}\\left(X&#94;2 + 2XY + Y&#94;2\\right) - \\left(\\mathbb{E}(X) + \\mathbb{E}(Y)\\right)&#94;2 \\\\ &= \\left(\\mathbb{E}(X&#94;2) - \\mathbb{E}(X)&#94;2\\right) + \\left(\\mathbb{E}(Y&#94;2) - \\mathbb{E}(Y)&#94;2\\right) + 2\\left(\\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\right)\\\\ &= \\mathrm{Var}(X) + \\mathrm{Var}(Y) + 2\\mathrm{Cov}(X,Y) \\end{aligned} $$ 4 $$ \\begin{aligned} \\mathrm{Cov}\\left(aX+bY,cZ+dW\\right) &= \\mathbb{E}\\left(\\left(aX+bY\\right)\\left(cZ+dW\\right)\\right) - \\mathbb{E}\\left(aX+bY\\right)\\mathbb{E}\\left(cZ+dW\\right)\\\\ &= \\left(\\mathbb{E}\\left(aXcZ\\right) + \\cdots + \\mathbb{E}\\left(bYdW\\right)\\right) - \\left(\\mathbb{E}(aX)\\mathbb{E}(cZ) + \\cdots + \\mathbb{E}(bY)\\mathbb{E}(dW) \\right)\\\\ &= \\left\\{\\mathbb{E}\\left(aXcZ\\right) - \\mathbb{E}(aX)\\mathbb{E}(cZ) \\right\\} + \\cdots + \\left\\{\\mathbb{E}\\left(bYdW\\right) - \\mathbb{E}(bY)\\mathbb{E}(dW) \\right\\}\\\\ &= ac\\left\\{\\mathbb{E}\\left(XZ\\right) - \\mathbb{E}(X)\\mathbb{E}(Z)\\right\\} + \\cdots + bd\\left\\{\\mathbb{E}\\left(YW\\right) - \\mathbb{E}(Y)\\mathbb{E}(W)\\right\\}\\\\ &= ac\\mathrm{Cov}(X,Z) + ad\\mathrm{Cov}(X,W) + bc\\mathrm{Cov}(Y,Z) + bd\\mathrm{Cov}(Y,W) \\end{aligned} $$ 5 $$ \\begin{aligned} \\mathrm{Cov}\\left(X,Y\\right)&#94;2 &= \\left(\\sum_{x,y}(x-\\mu_X)(y-\\mu_Y)\\mathbb{P}(X=x,Y=y)\\right)&#94;2\\\\ &= \\left(\\sum_{z,w}zw\\mathbb{P}(X=x,Y=y)\\right)&#94;2\\\\ &= \\left(\\sum_{z,w}zwP_{zw}\\right)\\left(\\sum_{z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime}w&#94;{\\prime}P_{z&#94;{\\prime}w&#94;{\\prime}}\\right)\\\\ &=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}zwz&#94;{\\prime}w&#94;{\\prime}P_{zw}P_{z&#94;{\\prime}w&#94;{\\prime}}\\quad\\left(\\because\\text{expansion}\\right)\\\\ \\mathrm{Var}(X)\\mathrm{Var}(Y) &= \\left(\\sum_{x}\\left(x-\\mu_X\\right)&#94;2\\mathbb{P}(X=x)\\right)\\left(\\sum_{y}\\left(y-\\mu_Y\\right)&#94;2\\mathbb{P}(Y=y)\\right)\\\\ &= \\left(\\sum_{x,y}\\left(x-\\mu_X\\right)&#94;2\\mathbb{P}(X=x,Y=y)\\right)\\left(\\sum_{x,y}\\left(y-\\mu_Y\\right)&#94;2\\mathbb{P}(X=x,Y=y)\\right)\\\\ &= \\left(\\sum_{z,w}z&#94;2P_{x,y}\\right)\\left(\\sum_{z,w}w&#94;2P_{x,y}\\right)\\\\ &=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\left(=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\right)\\\\ &=\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}+\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}} \\end{aligned} $$ と変形できるので、 $$ \\begin{aligned} \\mathrm{Var}(X)\\mathrm{Var}(Y) - \\mathrm{Cov}\\left(X,Y\\right)&#94;2 &= \\left(\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}+\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\right) - \\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}zwz&#94;{\\prime}w&#94;{\\prime}P_{zw}P_{z&#94;{\\prime}w&#94;{\\prime}}\\\\ &= \\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}\\left(z&#94;2w&#94;{\\prime2} + z&#94;{\\prime2}w&#94;2 - 2zwz&#94;{\\prime}w&#94;{\\prime}\\right)P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\\\ &=\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}\\left(zw&#94;{\\prime} - z&#94;{\\prime}w\\right)&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\\\ &\\geq0\\\\ \\therefore\\mathrm{Var}(X)\\mathrm{Var}(Y) &\\geq \\mathrm{Cov}\\left(X,Y\\right)&#94;2 \\end{aligned} $$ memo ある定数 \\(k\\) について以下が成り立つ時 （ \\(X\\) と \\(Y\\) に以下の関係が成り立つ時） 等号条件が成立する。 $$Y = kX$$ \\(\\mathbb{P}\\left(X=x_n,Y=y_m\\right) = \\mathbb{P}\\left(X=x_n\\right)\\delta_{nm}\\) if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-1.html"},{"title":"Neural Networks","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開)","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-5.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-5.html"},{"title":"レポート課題5(10/31出題)","text":"90MK2cCwUHl0vxJAF78NJg==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report5.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report5.html"},{"title":"確率と統計(1)基礎概念","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 In [1]: import numpy as np import matplotlib.pyplot as plt 講義概要 確率変数と確率分布 確率分布の性質を表す指標 同時確率 条件付き確率 確率変数と確率分布 用語 意味 確率(probability) 事象の起こりやすさを定量的に示す $0$ から $1$ の値 確率変数(random variable) その変数に関する任意の事象に対して確率が定義されている変数 確率分布(probability distribution) 確率変数に関する各事象に対してその確率を与える関数 離散型(discrete type)確率変数 ある可算集合 $\\mathcal{X}$ の中のいずれかの値をとる確率変数 確率質量関数(probability mass function) $f(x)$ $$f(x)\\geq0,\\quad \\sum_{x\\in\\mathcal{X}}f(x) = 1$$ 連続型(continuous type)確率変数 連続値をとる確率変数 確率密度関数(probability density function) $f(x)$ $$f(x)\\geq0,\\quad\\int_{-\\infty}&#94;{\\infty}f(x)dx=1$$ 累積分布関数(cumulative distribution function) $F(x)$ $$F(x) = P(X\\leq x)=\\int_{-\\infty}&#94;{x}f(u)du\\ \\text{ or } \\sum_{i:i\\leq x}f(i)$$ 確率分布の性質を表す指標 用語 数式 説明 期待値(expectation) $$E(X) = \\sum_xxf(x)\\ \\text{ or }\\int xf(x)dx$$ 確率変数の値の平均（正確には確率による重み付きの平均） 確率変数を代表する値を表す指標 ※ 外れ値(outlier)に敏感 中央値(median) $P(X\\leq x)=1/2$ を満たす $x$ データを大きい順（または小さい順）に並べたときの真ん中の値。 最頻値(mode) $f(x)$ を最大にする $x$ データの中で最も頻度が高い値 分散(variance) $$\\begin{aligned}V(X) &= E\\left\\{(X-E[X])&#94;2\\right\\}\\\\&=E\\left\\{X&#94;2-2E[X]X+(E[X])&#94;2\\right\\}\\\\&=E[X&#94;2]-E\\left[2E[X]X\\right]+(E[X])&#94;2\\\\&=E[X&#94;2]-2E[X]E[X]+(E[X])&#94;2\\\\&=E[X&#94;2]-(E[X])&#94;2\\end{aligned}$$ 確率変数の散らばり具合を表す指標 標準偏差(standard devariation) $\\sqrt{V(X)}$ 分散の平方根 標準化(standardization) $$Z=\\frac{X-E(X)}{\\sqrt{V(X)}}$$ 任意の確率変数 $X$ に対して、期待値 $0$、分散 $1$ の確率変数 $Z$ が定義できる。 歪度(skewness) $$\\alpha_3 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;3\\right\\}}{\\left\\{V(X)\\right\\}&#94;{3/2}}$$ 確率変数の非対称性を表す。 劣度(kurtosis) $$\\beta_4 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;4\\right\\}}{\\left\\{V(X)\\right\\}&#94;{2}}-3$$ 確率分布の尖り具合を表す。 積率(moment) $$\\mu_r = E\\left[X&#94;r\\right]$$ 期待値・分散・歪度・劣度などを表すパラメータ。全ての次数の積率を指定すれば、確率分布を一位に決定することができる。（左は $r$ 次の積率） 積率母関数(moment generating function) $$M_X(t) = E[e&#94;{tX}]=\\begin{cases}\\sum_xe&#94;{tx}f(x)\\\\\\int e&#94;{tx}f(x)dx\\end{cases}\\\\ M_X&#94;{(r)}(0)=\\mu_r$$ 全ての次数の積率を生成する関数。存在しない（無限大に発散する）こともある。 In [2]: def computation_variance ( n = 10000 , mu = 0 , sigma = 1 , seed = None ): X = np . random . RandomState ( seed ) . normal ( loc = mu , scale = sigma , size = n ) EX = sum ( X ) / n EX2 = sum ( X ** 2 ) / n # Calculate variance in 3 ways. var1 = np . var ( X ) var2 = sum (( X - EX ) ** 2 ) / n var3 = EX2 - EX ** 2 print ( \"`np.var(X)` =\" , var1 ) print ( \"E{(X - E[X])&#94;2} =\" , var2 ) print ( \"E[X&#94;2] - (E[X])&#94;2 =\" , var3 ) In [3]: computation_variance ( mu = 100 , seed = 0 ) `np.var(X)` = 0.9752679753477969 E{(X - E[X])&#94;2} = 0.9752679753477979 E[X&#94;2] - (E[X])&#94;2 = 0.9752679752218683 In [4]: computation_variance ( mu = 1e8 , seed = 1 ) `np.var(X)` = 0.9975731614280597 E{(X - E[X])&#94;2} = 0.9975731614281662 E[X&#94;2] - (E[X])&#94;2 = -98.0 ※ 「二乗の平均 - 平均の二乗」は丸め誤差の影響を受けやすい 歪度(skewness) 確率変数の非対称性を表す。 $$\\alpha_3 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;3\\right\\}}{\\left\\{V(X)\\right\\}&#94;{3/2}}$$ In [5]: def plot_skewness ( ax = None , seed = None , n = 100 ): if ax == None : fig , ax = plt . subplots () X = np . random . RandomState ( seed ) . randint ( low = 1 , high = 7 , size = n ) ax . hist ( X , density = True , bins = 6 , color = \"blue\" , align = 'left' ) EX = np . mean ( X ) VX = np . var ( X ) skewness = np . mean (( X - EX ) ** 3 ) / VX ** ( 3 / 2 ) ax . set_title ( f \"skewness = {skewness:.3f} \" ) return ax In [6]: fig = plt . figure ( figsize = ( 12 , 3 )) for i , seed in enumerate ([ 44756 , 96331 , 76432 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plot_skewness ( ax = ax , seed = seed ) plt . show () 劣度(kurtosis) 確率分布の尖り具合を表す。 $$\\beta_4 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;4\\right\\}}{\\left\\{V(X)\\right\\}&#94;{2}}-3$$ In [7]: X = np . linspace ( - 5 , 5 , 10000 ) In [8]: f1 = lambda x : 1 / 1250 * ( 5 - abs ( x )) ** 4 f2 = lambda x , mu = 0 , sigma = 1 : 1 / np . sqrt ( 2 * np . pi * sigma ** 2 ) * np . exp ( - ( x - mu ) ** 2 / 2 * sigma ** 2 ) f3 = lambda x : 1 / 4 if abs ( x ) <= 2 else 0 In [9]: def plot_kurtosis ( X , func , ax = None ): if ax == None : fig , ax = plt . subplots () Y = np . array ([ func ( x ) for x in X ]) ax . plot ( X , Y , color = \"red\" ) Y /= sum ( Y ) EX = np . sum ( Y * X ) VX = np . sum ( Y * ( X - EX ) ** 2 ) kurtosis = np . sum ( Y * ( X - EX ) ** 4 ) / VX ** 2 - 3 ax . set_title ( f \"kurtosis = {kurtosis:.3f} \" ) return ax In [10]: fig = plt . figure ( figsize = ( 12 , 3 )) for i , func in enumerate ([ f1 , f2 , f3 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plot_kurtosis ( X = X , func = func , ax = ax ) ax . set_xlim ( - 5 , 5 ); ax . set_ylim ( 0 , 1 ) plt . show () 同時確率 用語 数式 説明 同時確率(joint probability) 複数の確率変数が関わる確率 同時確率質量関数 $$P(X=x,Y=y) = f(x,y)\\\\f(x,y)\\geq0,\\quad\\sum_{x\\in\\mathcal{X}}\\sum_{y\\in\\mathcal{Y}}f(x,y)=1$$ 離散型の同時確率 同時確率密度関数 $$P(a\\leq X\\leq b,c\\leq Y\\leq d) = \\int_c&#94;d\\int_a&#94;bf(x,y)dxdy\\\\f(x,y)\\geq0,\\quad\\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x,y)dxdy=1$$ 連続型の同時確率 共分散 $X$ と $X&#94;{\\prime}$ の 共分散(covariance) ： $$\\mathrm{Cov}(X,X&#94;{\\prime}) = E\\left[(X-E[X])(X&#94;{\\prime}-E[X&#94;{\\prime}])\\right]$$ $\\mathrm{Cov}(X,X&#94;{\\prime})>0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 同傾向 $\\mathrm{Cov}(X,X&#94;{\\prime})<0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 逆傾向 $\\mathrm{Cov}(X,X&#94;{\\prime})=0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 無関係 共分散は、以下の形でも表されるので、A社の株価を $X$、B社の株価を $X&#94;{\\prime}$ とすると、以下の解釈も可能 $$V(X+X&#94;{\\prime}) = V(X) + V(X&#94;{\\prime}) + 2\\mathrm{Cov}(X,X&#94;{\\prime})$$ $\\mathrm{Cov}(X,X&#94;{\\prime})>0\\Longleftrightarrow V(X+X&#94;{\\prime})>V(X)+V(X&#94;{\\prime})$ なので、A,B両者の株を買うと分散が 拡大 する → 変動リスクが増大し、資産価値は不安定 $0>\\mathrm{Cov}(X,X&#94;{\\prime})\\Longleftrightarrow V(X)+V(X&#94;{\\prime})>V(X+X&#94;{\\prime})$ なので、A,B両者の株を買うと分散が 縮小 する → 変動リスクが抑制され、資産価値は安定 独立性 全ての $(x,y)$ で $p_{X,Y}(x,y) = p_X(x)p_Y(y)$ の時、$X$ と $Y$ は互いに 独立(independent) 2つの確率変数が独立の時、 積の期待値は各々の期待値の積と一致 $$E[XY] = E[X]E[Y]$$ 和の積率母関数は各々の積率母関数の積と一致 $$M_{X+Y}(t) = M_X(t)M_Y(t)$$ ２つの確率変数は無相関 $$\\mathrm{Cov}(X,Y) = 0$$ 2つの確率変数が独立ならば無相関であるが、逆は一般には正しくない。 条件付き確率 ベイズの定理(Bayes' theorem) $$P(X|Y) = \\frac{P(Y|X)P(X)}{P(Y)}$$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-5.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-5.html"},{"title":"生物物理学 第6回","text":"講師： 樋口秀男 エネルギー生産系の仕組み（細胞内小器官） 光関連の現象 細胞・器官 たんぱく質等 眼で見る 視細胞（桿体、錐体細胞） ロドプシン等 光合成 葉緑体 光システム（タンパク質複合体） 蛍の光 発色細胞 ルシフェリン+ルシフェラーゼ クラゲの光 発色細胞 エコーリン、GFP(green fluorescence protein) 日焼け 色素形成細胞（メラノサイト） メラニン（チロシンの重合体） 体内時計 目のメラノプシン発現網膜神経細胞 メラノプシン ATPを作るプロセス 光合成(photosynthesis) は、高等植物や緑藻（青色細菌）が 葉緑体（クロロプラスト） 内で行う、二酸化炭素の固定反応である。 この過程で水が酸素に酸化され、二酸化炭素は還元されて糖になる。 光合成は大きく2つの段階に区別される。 1つは 明反応 と呼ばれ、光のエネルギーを利用して水が酸素に酸化されるとともに、二酸化炭素の還元に必要な \\(\\mathrm{NADPH}_2&#94;+\\) と \\(\\mathrm{ATP}\\) をつくりだす。 もう1つの段階は 暗反応 と呼ばれ、 \\(\\mathrm{NADPH}_2&#94;+\\) と \\(\\mathrm{ATP}\\) を利用して二酸化炭素から種々の糖がつくられる。 クロロプラスト中の大部分のクロロフィルは 光を集めるアンテナ の役割を果たす。吸収された光子のエネルギーはアンテナクロロフィル間を励起エネルギーとして移動し、 アンテナクロロフィル よりも励起エネルギーの 低い 反応中心クロロフィル に集められる。 FRET(Fluorescence resonance energy transfer) $$\\text{Transfer Efficiency at two rates: } E= \\frac{k_T}{k_T+k_F} = \\frac{1}{1 + \\frac{k_F}{k_T}}$$ \\(k_T\\) ：Donor から Acceptor に移動する速度 \\(k_F\\) ：Donor が吸収する速度 Chl(from) Chl(to) 移動効率（移動距離） b(F) a(A) 高 b(F) b(A) 中 a(F) a(A) 中 a(F) b(A) 低 幅 \\(L\\) の中の電子のエネルギー準位： \\(E_n = \\frac{1}{8m}\\left(\\frac{nh}{L&#94;{\\prime}}\\right)&#94;2\\) フェミルの黄金律 時間的に変化しない弱い相互作用（摂動）のある電子系が、あるエネルギー固有状態から別のエネルギー固有状態へ移る際の単位時間あたりの遷移確率は、摂動法（時間で展開）の最低次数として近似計算できる。 遷移速度 \\(k_T\\) は、エネルギー固有状態の単位時間あたりの遷移確率である。 $$\\Psi_{\\mathrm{Da}}\\Psi_{\\mathrm{Ab}}\\underset{k_T}{\\longrightarrow}\\Psi_{\\mathrm{Db}}\\Psi_{\\mathrm{Aa}}$$ Da: Active state of Donor Ab: Ground state of Acceptor 光合成の概要 水を分解して、電子を膜間に入れる。 光を用いて電子の酸化還元電位を上げる。 酸化還元電位を利用してチラコイド外のプロトンを内側に輸送する。 内側のプロトンのケミカルポテンシャルを利用してATPを合成する。 まとめ 共役長が長くなる と吸収波長は長くなり、可視光の利用が可能となる。 分子間距離が近いと エネルギー移動や電子移動 が起こる。電子移動の方向は、酸化還元電位に依存する。 エネルギーを 酸化還元電位 に交換する（逆も） 生物は、 多数のタンパク質が 上記1-3の原理を巧みに利用して、光化学反応（葉緑体内の光合成）や電子伝達（ミトコンドリア内）の機能を行う。 ATP を合成するF1,F0は高効率でATPを合成する。特に、F1は仕事効率が約100%である。 .prompt { /* This is for jupyter blog.*/ min-width: 0; /* This padding is tuned to match the padding on the CodeMirror editor. */ padding: 0em 0.4em 0em 0em; margin: 0px; font-family: monaco; } /*蛍光ペン(pink)*/ .marker-pink { color: #c45a5a; background: linear-gradient(transparent 70%, #ff66ff 60%); font-weight: bold; } /*蛍光ペン(blue) & hover info*/ .marker-info { color: #5C7DC4; background: linear-gradient(transparent 70%, #66FFCC 60%); font-weight: bold; position: relative; cursor: pointer; } .marker-info:hover:before { opacity: 1; z-index: 2; } .marker-info:before { content: attr(aria-label); opacity: 0; position: absolute; top: 30px; right: -90px; font-size: 14px; width: 300px; padding: 10px; color: #fff; background-color: #555; border-radius: 3px; pointer-events: none; } /* 枠囲み */ .frame { border: solid 1.0px #000000; padding: 0.5em 1em; margin: 2em 0; } /* 暗記用 question box */ span .qbox{ display: none; } span.qbox-wrapper:hover .qbox-default{ display: none; } span.qbox-wrapper:hover .qbox{ display: inline; } .qbox-wrapper{ font-weight: bold; padding: 5px 10px; border-radius: 5px; border: solid 2px #000000; margin: 5px } .qbox-wrapper:hover{ text-shadow: 0px 0px 6px rgba(255, 255, 255, 1); -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); transition: all 0.4s ease 0s; } /* 画像吹き出し */ .balloon { display: table; width: 100%; } .balloon_img { display: table-cell; vertical-align: middle; width: 50%; padding-right: 10px; } .balloon_comment { border: #83274e solid 4px; position: relative; background: #fff; padding: 12px; border-radius: 13px; display: block } .balloon_comment::before { content: \"\"; position: absolute; border-right: 23px solid #83274e; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -23px; } .balloon_comment::after { content: \"\"; position: absolute; border-right: 24px solid #fff; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -17px; } if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-6.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-6.html"},{"title":"Introduction","text":"講師： 木立 尚孝 （ 生物データマイニング論 も担当されている方） 計算演習 # リンク 問題 1 Covariance 2 Characteristic function 3 Law of Large Numbers 4 Exponential Distribution 5 Categorical Distribution 6 Multinomial Distribution 7 Positive Definite Symmetric Matrix 8 Multivariate Normal Distribution 9 Kullback-Leibler Divergence 10 Expectation Maximization Algorithm 11 Data Assimilation 12 Order Statistics 13 Sparse Modeling 14 Brownian motion 15 Neural Network プログラミング演習 配列モチーフ探索 最適行動列アルゴリズム Gene Network Inference Itemset mining algorithm","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-0.html"},{"title":"頻度パターンマイニング","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 参考資料： 頻出パターン発見アルゴリズム入門 -アイテム集合からグラフまで- Data Mining A formal study of efficient methods for extracting interesting rules and patterns from massive data. Frequent itemset mining. Closed pattern mining. Structured data mining. Itemset Mining Frequent Itemset Mining Closed Itemset Mining Closure Extension LCM Itemset Mining Frequent Itemset Mining Finding all \"frequent\" sets of elements(items) appearing $\\sigma$ times or more in a database. Definitions Database A set $\\Sigma = \\{1,\\ldots,n\\}$ of items(elements). Tramsaction database A set $T=\\{t_1,\\ldots,t_m\\}$ of subsets of $\\Sigma$ Each subset $t\\subseteq\\Sigma$ is called a transaction Frequent sets Itemset $X$ appears in transaction t: $X\\subseteq t$ Occurrence of $X$ in database $T$: $$\\mathrm{Occ}(X,T) = \\left\\{t\\in T: X\\subseteq t\\right\\}$$ Frequency of $X$: $\\mathrm{Fr}(X,T) = |\\mathrm{Occ}(X,T)|$ Minimum support (minsup): $0\\leq\\sigma\\leq|T|$ $X$ is frequent in $T$ if $\\mathrm{Fr}(X,T)\\geq\\sigma$ Market Basket Data Popular application of itemset mining. Business and Market data analysis. ※ Visit \"The Instacart Online Grocery Shopping Dataset 2017\" and Download \"instacart_2017_05_01\" Folder. In [1]: ! tree instacart_2017_05_01 instacart_2017_05_01 ├── aisles.csv ├── departments.csv ├── order_products__prior.csv ├── order_products__train.csv ├── orders.csv └── products.csv 0 directories, 6 files In [2]: import numpy as np import pandas as pd products.csv In [3]: df_products = pd . read_csv ( \"./instacart_2017_05_01/products.csv\" ) df_products . head ( 3 ) Out[3]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } product_id product_name aisle_id department_id 0 1 Chocolate Sandwich Cookies 61 19 1 2 All-Seasons Salt 104 13 2 3 Robust Golden Unsweetened Oolong Tea 94 7 In [4]: print ( f \"`products.csv` data num: {len(df_products)}\" ) `products.csv` data num: 49688 In [5]: id2name = dict ( zip ( df_products . product_id , df_products . product_name )) order_products__train.csv In [6]: df_order_products = pd . read_csv ( \"./instacart_2017_05_01/order_products__train.csv\" ) df_order_products . head ( 3 ) Out[6]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } order_id product_id add_to_cart_order reordered 0 1 49302 1 1 1 1 11109 2 1 2 1 10246 3 0 In [7]: N_transactions_total = len ( df_order_products . groupby ( \"order_id\" )) print ( f \"Total number of transactions: {N_transactions_total} \" ) Total number of transactions: 131209 Extract Only N products In [8]: N = 10 In [9]: extracted_ids = df_order_products . groupby ( \"product_id\" ) . size () . reset_index () . sort_values ( by = 0 , ascending = False ) . product_id [: N ] . values In [10]: # Only focus on N products. df_order_products_extracted = df_order_products [ df_order_products . product_id . apply ( lambda x : x in extracted_ids )] In [11]: N_transactions_extracted = len ( df_order_products_extracted . groupby ( \"order_id\" )) print ( f \"Transactions: {N_transactions_extracted} / {N_transactions_total} \" ) Transactions: 59887/131209 In [12]: for i , extracted_id in enumerate ( extracted_ids ): print ( f \"No.{i+1:>0{len(str(N))}}: {id2name[extracted_id]} \" ) No.01: Banana No.02: Bag of Organic Bananas No.03: Organic Strawberries No.04: Organic Baby Spinach No.05: Large Lemon No.06: Organic Avocado No.07: Organic Hass Avocado No.08: Strawberries No.09: Limes No.10: Organic Raspberries In [13]: df_product_id_OneHot = pd . get_dummies ( df_order_products_extracted . product_id ) In [14]: df_order_OneHot = pd . concat ([ df_order_products_extracted . order_id , df_product_id_OneHot ], axis = 1 ) In [15]: df = df_order_OneHot . groupby ( \"order_id\" ) . sum () . reset_index () In [16]: df . head ( 3 ) Out[16]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } order_id 13176 16797 21137 21903 24852 26209 27966 47209 47626 47766 0 1 1 0 0 0 0 0 0 1 0 0 1 96 0 0 0 0 0 0 1 0 0 0 2 98 1 0 0 0 0 0 1 0 0 0 In [17]: database = np . array ( df [ df . columns [ 1 :]]) In [18]: database Out[18]: array([[1, 0, 0, ..., 1, 0, 0], [0, 0, 0, ..., 0, 0, 0], [1, 0, 0, ..., 0, 0, 0], ..., [0, 0, 1, ..., 0, 0, 0], [0, 0, 0, ..., 0, 0, 0], [0, 0, 1, ..., 0, 0, 0]], dtype=uint8) In [19]: N , M = database . shape In [20]: print ( f \"n_samples: {N} \" ) print ( f \"n_features: {M} \" ) n_samples: 59887 n_features: 10 In [21]: from kerasy.search.itemset import FrequentSet In [22]: model = FrequentSet ( threshold = 100 ) In [23]: model . fit ( database ) In [24]: # Frequent Itemset. (frq >= threshold) model . all Out[24]: [None, array([0]), array([0, 1]), array([0, 1, 3]), array([0, 2]), array([0, 2, 3]), array([0, 2, 3, 6]), array([0, 2, 3, 7]), array([0, 2, 5]), array([0, 2, 6]), array([0, 2, 6, 7]), array([0, 2, 7]), array([0, 2, 8]), array([0, 2, 9]), array([0, 3]), array([0, 3, 5]), array([0, 3, 6]), array([0, 3, 6, 7]), array([0, 3, 7]), array([0, 3, 8]), array([0, 3, 9]), array([0, 5]), array([0, 5, 6]), array([0, 5, 7]), array([0, 5, 8]), array([0, 5, 9]), array([0, 6]), array([0, 6, 7]), array([0, 6, 8]), array([0, 6, 9]), array([0, 7]), array([0, 7, 8]), array([0, 8]), array([0, 8, 9]), array([0, 9]), array([1]), array([1, 3]), array([1, 3, 4]), array([1, 3, 9]), array([1, 4]), array([1, 4, 5]), array([1, 4, 8]), array([1, 4, 9]), array([1, 5]), array([1, 5, 8]), array([1, 6]), array([1, 7]), array([1, 8]), array([1, 8, 9]), array([1, 9]), array([2]), array([2, 3]), array([2, 3, 4]), array([2, 3, 5]), array([2, 3, 6]), array([2, 3, 7]), array([2, 3, 8]), array([2, 3, 9]), array([2, 4]), array([2, 4, 5]), array([2, 4, 6]), array([2, 4, 7]), array([2, 4, 8]), array([2, 4, 9]), array([2, 5]), array([2, 5, 6]), array([2, 5, 7]), array([2, 5, 8]), array([2, 5, 9]), array([2, 6]), array([2, 6, 7]), array([2, 6, 8]), array([2, 6, 9]), array([2, 7]), array([2, 7, 8]), array([2, 8]), array([2, 8, 9]), array([2, 9]), array([3]), array([3, 4]), array([3, 4, 5]), array([3, 4, 5, 8]), array([3, 4, 6]), array([3, 4, 7]), array([3, 4, 8]), array([3, 4, 8, 9]), array([3, 4, 9]), array([3, 5]), array([3, 5, 7]), array([3, 5, 8]), array([3, 5, 8, 9]), array([3, 5, 9]), array([3, 6]), array([3, 6, 7]), array([3, 6, 8]), array([3, 6, 9]), array([3, 7]), array([3, 7, 8]), array([3, 8]), array([3, 8, 9]), array([3, 9]), array([4]), array([4, 5]), array([4, 5, 7]), array([4, 5, 8]), array([4, 5, 8, 9]), array([4, 5, 9]), array([4, 6]), array([4, 6, 8]), array([4, 6, 9]), array([4, 7]), array([4, 7, 8]), array([4, 8]), array([4, 8, 9]), array([4, 9]), array([5]), array([5, 6]), array([5, 6, 7]), array([5, 6, 8]), array([5, 7]), array([5, 7, 8]), array([5, 8]), array([5, 8, 9]), array([5, 9]), array([6]), array([6, 7]), array([6, 8]), array([6, 8, 9]), array([6, 9]), array([7]), array([7, 8]), array([8]), array([8, 9]), array([9])] Association Rule Mining Confidence : $\\mathrm{Supp}(A\\text{ and }B)/\\mathrm{Supp}(A)$ (Probability of $B$, Given $A$) What item is likely to be bought when $A$ is bought. Search: large support, confidence large Post-processing of itemset mining Summary Itemset mining is the simplest of all mining algorithms. Need to maintain occurrence of each pattern in database. Tree by lexicographical order is (implicitly) used. Closed Itemset Mining [Problem] in Frequent Pattern Mining Huge Number of frequent itemsets Hard to analyze Most of them are similar [Solution] Closed Pattern Mining Find only closed patterns Observation : Most frequent itemset $X$ can be extended without changing occurrence by adding new elements. definition : An itemset $X$ is a \"closed set\" if and only if there is no proper superset of $X$ with the same frequency (thus the same occurrence set). A closed itemset is the maximal set among all itemsets with the same occurrences. Equivalence class $[X] =\\left\\{Y | \\mathrm{Occ}(X)=\\mathrm{Occ}(Y)\\right\\}$ Implementation. Brute-force: Stupid Baseline ALGORITHM: Bruteforcel First, generate all frequent itemsets. Check them one by one via maximality test Finally, extract all closed sets Maximality test for each candidate frequent set $X$ Add some element $e$ in $\\Sigma$ to $X$ If $\\mathrm{Freq}(X U \\{e\\})$ is properly less than $\\mathrm{Freq}(X)$ then reject $X$. ※ Number of patterns usually exponential to input size, so Brute-force is exponential delay w.r.t. pattern size. Reverse Search A general mathematical framework to design enumeration algorithms. Can be used to prove the correctness of the algorithm. Popular in computational geometry. Data mining algorithms can be explained in remarkable simplicity. How to do reverse Search? Native Backtracking → Duplication Duplication chack by Marking → Exponential Memory. Reduction Map : Mapping from a children to the parent. LCM(Linear Time Closed Sets Miner) Key Algorithm: Prefix Preserving Closure Extension = Children generation from the reduction map. 飽和集合列挙アルゴリズムを用いた大規模データベースからのルール発見手法 Python Implementation: I'm doing now XD Summary Closure Extension: Jump from closed set to closed set. LCM: Linear Delay. Very fast in practice, too (Winner of FIMI'04(Frequent Itemset Mining Implementation Workshop)). Relation to clique enumeration. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-5.html"},{"title":"機械学習概論","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 教師付き学習(Supervised learning) 大量の教師データがあれば、DNNですごい性能を出せるので、今の研究の主流は以下。 transfer learning (転移学習) few-shot learning (一枚だけで汎化性能を得る。) zero-shot learning (文字の情報を用いて画像の識別を行う。) メタ学習 (どうやって学習すれば良いかを学ぶ。) Nearest Neighbor法 決定木(decision tree) Support Vector Machine(SVM) アンサンブル学習 Neural Network Nearest Neighbor法 In [2]: N = 150 ; K = 3 In [3]: data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 1 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [4]: cls = np . concatenate ([ np . full ( shape = int ( N / 3 ), fill_value = 0 ), np . full ( shape = int ( N / 3 ), fill_value = 1 ), np . full ( shape = int ( N / 3 ), fill_value = 2 ), ]) In [5]: xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [6]: # Nearest Neighbor Zs = np . asarray ([ cls [ np . argmin ( np . sum ( np . square ( xy - data ), axis = 1 ))] for xy in XYs ], dtype = int ) . reshape ( Xs . shape ) In [7]: plt . figure ( figsize = ( 8 , 6 )) plt . scatter ( x , y , c = cls , s = 50 ) plt . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) plt . title ( \"Nearest Neighbor\" ), plt . xlim ( xmin , xmax ), plt . ylim ( ymin , ymax ) plt . xticks ([]), plt . yticks ([]) plt . show () 決定木(decision tree) $M$ 個のクラスに分割したとして、 $$\\text{Information gain} = \\text{Entropy}(S) - \\left\\{\\text{Entropy}(S_1) + \\cdots + \\text{Entropy}(S_M)\\right\\}$$ が最大になるように条件を設定する。 In [8]: from kerasy.ML.tree import DecisionTreeClassifier In [9]: N = 150 ; K = 3 In [10]: data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 1 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [11]: cls = np . concatenate ([ np . full ( shape = int ( N / 3 ), fill_value = 0 ), np . full ( shape = int ( N / 3 ), fill_value = 1 ), np . full ( shape = int ( N / 3 ), fill_value = 2 ), ]) In [12]: xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [13]: model = DecisionTreeClassifier ( criterion = \"gini\" , max_depth = 3 , random_state = 0 ) model . fit ( data , cls ) predictions = model . predict ( data ) In [14]: # Decision Tree Zs = model . predict ( XYs ) . reshape ( Xs . shape ) In [15]: fig = plt . figure ( figsize = ( 18 , 4 )) for i , seed in enumerate ([ 0 , 1 , 5 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) model = DecisionTreeClassifier ( criterion = \"gini\" , max_depth = 3 , random_state = seed ) model . fit ( data , cls ) predictions = model . predict ( data ) Zs = model . predict ( XYs ) . reshape ( Xs . shape ) ax . scatter ( x , y , c = predictions , s = 50 ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_title ( f \"Decision Tree seed= {seed} \" ), ax . set_xlim ( xmin , xmax ), ax . set_ylim ( ymin , ymax ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () Support Vector Machine(SVM) $$f(\\mathbf{x}) = \\mathbf{w}\\cdot\\mathbf{x} + \\mathbf{b} = \\mathbf{0}$$ $\\|\\mathbf{w}\\|$ を決定するためには、黄色の線上にある点(support vector)のみ寄与。SVMの重要なところは、通常 $$\\mathrm{Error}_{\\text{世の中全体}}>\\mathrm{Error}_{\\text{見たことのある世界}}$$ であるが、発明者 Vapnic が $$\\mathrm{Error}_{\\text{世の中全体}}\\leq\\mathrm{Error}_{\\text{見たことのある世界}} + \\alpha$$ を証明してしまった。なお、$\\alpha$ も $\\|\\mathbf{w}\\|$ の最小化で最小化できるため、$\\|\\mathbf{w}\\|$ の最小化をひたすら頑張るだけで良い。 ※ 実装は ここ アンサンブル学習 名前 説明 強学習器 bagging トレーニングデータをランダムにサンプリングして学習器 $f&#94;b(\\mathbf{x}),(b=1,2,\\ldots,B)$ を作る。 $$f(\\mathbf{x}) = \\frac{1}{B}\\sum_b&#94;Bf&#94;b(\\mathbf{x})$$ Random Forest (RF) 決定木 $f&#94;r(\\mathbf{x}),(r=1,2,\\ldots,R)$ をランダムに作る。木がたくさんあるので森(forest)になる。 $$f(\\mathbf{x}) = \\frac{1}{R}\\sum_r&#94;Rf&#94;r(\\mathbf{x})$$ boosting 弱学習器 $f&#94;t(\\mathbf{x})$ の精度に応じた重み付き多数決を行う。なお、$\\alpha$ の決め方はadaboostやXGboostなど様々ある。 $$f(\\mathbf{x}) = \\frac{1}{T}\\sum_t&#94;T\\alpha&#94;tf&#94;t(\\mathbf{x})$$ Neural Network パーセプトロン $\\mathbf{w}$ を法線と考えると、超平面のあっちとこっちを判定しているだけ＝SVMと同じ。 perceptronの学習アルゴリズムは、下記の流れで収束することが知られている。 重み（法線）ベクトルをランダムに設定 2クラス $0,1$ があったとして、training dataから順に取り出して、$y$ を出力してみる（平面のどちら側か） 合っていたら何もしない。間違っていたら $$ \\begin{cases} \\mathbf{w}\\longleftarrow\\mathbf{w} +\\rho \\mathbf{x} & (\\text{クラス1を0と誤判定した時})\\\\ \\mathbf{w}\\longleftarrow\\mathbf{w} -\\rho \\mathbf{x} & (\\text{クラス0を1と誤判定した時}) \\end{cases}$$ 2,3を全てのtraining dataに対して行う。 全てのtraining dataに対して正解が規定回数に達したら終了。それ以外の場合、2に戻る。 # Pythonでプログラム化すると以下。 while True : n_true = 0 for x , c in zip ( data , cls ): if c == 1 and sum ( w * x ) < 0 : w += rho * x elif c == 0 and sum ( w * x ) >= 0 : w -= rho * x else : n_true += 1 if n_true > N * true_rate : break In [16]: n_cls0 = 30 ; n_cls1 = 40 N = n_cls0 + n_cls1 In [17]: w = np . random . RandomState ( 0 ) . uniform ( size = 2 ) # Initialization. rho = 1e-3 # step size. true_rate = 0.9 In [18]: # train_x data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 2 , 4 ], cov = np . eye ( 2 ), size = n_cls0 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 1 ], cov = np . eye ( 2 ), size = n_cls1 ), ]) X1 , X2 = data . T # train_t cls = np . concatenate ([ np . zeros ( shape = ( n_cls0 ), dtype = int ), np . ones ( shape = ( n_cls1 ), dtype = int ) ]) In [19]: while True : n_true = 0 for x , c in zip ( data , cls ): if c == 1 and sum ( w * x ) < 0 : w += rho * x elif c == 0 and sum ( w * x ) >= 0 : w -= rho * x else : n_true += 1 if n_true > N * true_rate : break In [20]: X = np . linspace ( min ( X1 ), max ( X2 ), 1000 ) Y = ( - w [ 0 ] / w [ 1 ]) * X In [21]: plt . scatter ( X1 , X2 , c = cls ) plt . plot ( X , Y , color = \"red\" ) plt . xlabel ( \"$x_1$\" , fontsize = 18 ), plt . ylabel ( \"$x_2$\" , fontsize = 18 ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-4.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-4.html"},{"title":"生物統計論 第5回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section5.1 Bayesian Model Comparison Overfitting In [2]: N = 15 Ms = [ 2 , 4 , 8 , 16 ] seed = 0 In [3]: # Training data. x = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = N ) Noise = np . random . RandomState ( seed ) . normal ( loc = 0 , scale = 0.1 , size = N ) t = np . sin ( 2 * np . pi * x ) + Noise In [4]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Varying Component Number In [5]: from kerasy.ML.MixedDistribution import MixedGaussian from kerasy.utils.data_generator import generateMultivariateNormal In [6]: N = 200 cls = 6 seed = 123 In [7]: data , means = generateMultivariateNormal ( cls = cls , N = N , scale = 8e-3 , same = False , seed = seed ) x , y = data . T mux , muy = means . T In [8]: # Background Color xmin , ymin = np . min ( data , axis = 0 ); xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [9]: Nfig = cls col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col fig = plt . figure ( figsize = ( 6 * col , 4 * row )) Likelihoods = [] for i , K in enumerate ( range ( 1 , cls + 1 )): ax = fig . add_subplot ( row , col , i + 1 ) model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data , span = 20 ) Z = model . predict ( XYs ) idx = np . argmax ( model . predict ( data ), axis = 1 ) Zs = np . sum ( Z , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. likelihood = np . sum ( Z ) ax . scatter ( x , y , c = idx ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( xmin , xmax ) ax . set_ylim ( ymin , ymax ) ax . set_title ( f \"K= {K} , {np.sum(Z):.1f}\" ) Likelihoods . append ( likelihood ) plt . tight_layout () plt . show () In [10]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . scatter ( x , y , label = \"data\" ) axL . scatter ( mux , muy , label = \"mean\" , marker = \"*\" , color = \"red\" , s = 150 ) axL . set_title ( \"Training Data.\" ) axL . legend () axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( np . arange ( cls ) + 1 , Likelihoods ) axR . scatter ( np . arange ( cls ) + 1 , Likelihoods ) axR . set_xlabel ( \"num comp\" ) axR . set_ylabel ( \"likelihoods\" ) axR . set_title ( \"Log likelihood vs num comp\" , fontsize = 18 ) plt . tight_layout () plt . show () Cross Validation ※ Not Bayesian estimate the skill of a machine learning model on unseen data. use a limited sample in order to estimate how the model is expected to perform in general when used to make predictions on data not used during the training of the model. In [11]: n_fold = 5 size = N // n_fold Kmax = 30 In [12]: Likelihoods = [] CrossValidationLikelihoods = [] for i , K in enumerate ( range ( 1 , Kmax + 1 )): H = 0 for h in range ( n_fold ): mask = np . ones ( shape = N , dtype = bool ) mask [ h * size :( h + 1 ) * size ] = False model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data [ mask ], span = 20 ) Z = model . predict ( data [ np . logical_not ( mask )]) H += np . sum ( Z ) model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data , span = 20 ) Z = model . predict ( data ) Likelihoods . append ( np . sum ( Z )) CrossValidationLikelihoods . append ( H ) In [13]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . plot ( np . arange ( Kmax ) + 1 , CrossValidationLikelihoods ) axL . scatter ( np . arange ( Kmax ) + 1 , CrossValidationLikelihoods ) axL . set_xlabel ( \"num comp\" ), axL . set_ylabel ( \"Cross Validation likelihoods\" ), axL . set_title ( \"Cross Validation Log likelihood vs num comp\" , fontsize = 18 ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( np . arange ( Kmax ) + 1 , Likelihoods ) axR . scatter ( np . arange ( Kmax ) + 1 , Likelihoods ) axR . set_xlabel ( \"num comp\" ), axR . set_ylabel ( \"likelihoods\" ), axR . set_title ( \"Log likelihood vs num comp\" , fontsize = 18 ) plt . tight_layout () plt . show () Cross Entropy of Prediction ※ Not Bayesian empirical distribution $D = \\left\\{\\mathbf{x}&#94;{(h)}|h=1,\\ldots,n\\right\\}$ $x\\sim\\mathrm{Emp}(D)$ $f_X(\\mathbf{X}) = \\frac{1}{n}\\sum_{h=1}&#94;n\\delta\\left(\\mathbf{x}-\\mathbf{x}&#94;{(h)}\\right)$ $\\mathbb{E}\\left(g(\\mathbf{x})\\right) = \\frac{1}{n}\\sum_{h=1}&#94;n\\int d\\mathbf{x}g(\\mathbf{x})\\delta\\left(\\mathbf{x}-\\mathbf{x}&#94;{(h)}\\right) = \\frac{1}{n}\\sum_{h=1}&#94;ng\\left(\\mathbf{x}&#94;{(h)}\\right)$ In [14]: seed = 0 N = 1000 In [15]: data = np . random . RandomState ( seed ) . normal ( size = N ) In [16]: Emp = dict ( zip ( data , np . zeros ( N ))) for x in data : Emp [ x ] += 1 / N In [17]: for X , Y in sorted ( Emp . items ()): plt . plot (( X , X ),( 0 , Y ), color = \"black\" , alpha = 0.1 ) plt . title ( \"Empirical distribution (Normal)\" ) plt . xlabel ( \"x\" ) plt . show () We can assume Empirical distribution as a true distribution . Cross Entropy $$ \\begin{aligned} H(D,\\boldsymbol{\\theta}) &= \\text{Cross Entropy between }f_{\\text{Emp}(D)} \\text{ and }f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)\\\\ &= \\mathbb{E}_{\\text{Emp}(D)}\\left(-\\log f\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right)\\right)\\\\ &= -\\int f_{\\text{Emp}(D)}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &= -\\frac{1}{n}\\sum_{h=1}&#94;n\\log f\\left(\\mathbf{x}&#94;{(h)}|\\boldsymbol{\\theta}\\right)\\\\ &= -\\bar{l}&#94;{(n)}\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right) \\end{aligned} $$ We can also say that: $$ \\begin{aligned} H(D,\\boldsymbol{\\theta}) &= -\\int f_{\\text{Emp}}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &\\Rightarrow \\int f_{\\text{Emp}}(\\mathbf{x})\\log f_{\\text{Emp}}(\\mathbf{x})d\\mathbf{x} -\\int f_{\\text{Emp}}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &= -\\int f_{\\text{Emp}}(\\mathbf{x})\\log\\left\\{\\frac{f_{\\text{Emp}}(\\mathbf{x})}{f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)}\\right\\}d\\mathbf{x}\\\\ &= \\mathrm{KL}\\left(f_{\\text{Emp}}\\|f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)\\right)\\\\ &= \\text{Kullback-Leibler divergence between}f_{\\text{Emp}(D)} \\text{ and }f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right) \\end{aligned} $$ Evidence Approximation ※ Yes Bayesian In a fully Bayesian treatment of the linear basis function model, we would introduce prior distributions over the hyperparameters $\\alpha$, and $\\beta$. $$ \\begin{aligned} p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x},\\alpha,\\beta) &= \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)d\\mathbf{w}& (3.57)\\\\ &\\Rightarrow \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)p(\\alpha,\\beta|\\mathbf{t},\\mathbf{X})d\\mathbf{w}d\\alpha d\\beta& (3.74) \\end{aligned} $$ Marginalize with respect to these hyperparameters as well as with respect to the parameters $\\mathbf{w}$ to make predictions. Complete marginalization over all of these variables is analytically intractable. We will maximize $(3.74)$ in line with the framework of empirical Bayes (or type 2 maximum likelihood , generalized maximum likelihood , evidence approximation ) Obtain the marginal likelihoo function by first integrating over the parameters $\\mathbf{w}$ $$p(\\mathbf{t}|\\alpha,\\beta) = \\int p(\\mathbf{t}|\\mathbf{w},\\mathbf{X},\\beta)p(\\mathbf{w}|\\alpha)d\\mathbf{w}\\qquad (3.77)$$ Maximize $p(\\mathbf{t}|\\alpha,\\beta)$ with respect to $\\alpha$ and $\\beta$. In [18]: from kerasy.utils.preprocessing import PolynomialBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian from kerasy.ML.linear import EvidenceApproxBayesianRegression In [19]: N = 20 Ms = np . arange ( 10 ) xmin = 0 ; xmax = 1 seed = 0 In [20]: x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 0.15 , seed = seed ) y_train += 1 + y_noise In [21]: alpha = 100 beta = 100 In [22]: evidences = [] history = [] for M in Ms : phi = PolynomialBaseTransformer ( M = M ) x_train_features = phi . transform ( x_train ) model = EvidenceApproxBayesianRegression ( alpha = alpha , beta = beta , iter_max = 10000 ) model . fit ( x_train_features , y_train ) evidences . append ( model . evidence ( x_train_features , y_train )) history . append ( model ) best_M = np . argmax ( evidences [ 1 :]) + 1 best_model = history [ best_M ] In [23]: x_test = np . linspace ( xmin , xmax , 1000 ) phi = PolynomialBaseTransformer ( M = best_M ) x_test_features = phi . transform ( x_test ) y_test = 1 + np . sin ( 2 * np . pi * x_test ) y_pred , y_std = best_model . predict ( x_test_features ) In [24]: fig = plt . figure ( figsize = ( 12 , 4 )) axEVI = fig . add_subplot ( 1 , 2 , 1 ) axEVI . plot ( Ms , evidences ) axEVI . scatter ( Ms , evidences ) axEVI . set_title ( \"The relationship between 'model evidence' and $M$\" ), axEVI . set_xlabel ( \"$M$\" ), axEVI . set_ylabel ( \"$\\log({model\\ evidence})$\" , fontsize = 16 ) axBest = fig . add_subplot ( 1 , 2 , 2 ) axBest . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) axBest . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) axBest . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) axBest . scatter ( x_train , y_train , s = 50 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) axBest . set_ylim ( - 0.5 , 2.5 ), axBest . legend (), axBest . set_title ( f \"Bayesian Linear Regression (M= {best_M} )\" ) plt . tight_layout () plt . show () In [25]: print ( \"[Best Parameter]\" ) print ( f \"M = {best_M} \" ) print ( f \"alpha = {best_model.alpha} \" ) print ( f \"beta = {best_model.beta} \" ) [Best Parameter] M = 3 alpha = 0.0025750535934692723 beta = 56.07833727501231 Section5.2 Markov Process Biological Diversity Single Origin of Life \"Nothing in Biology Makes Sense Except in the Light of Evolution\" C.T. Dobzhansky Stochastic Transcription (Stochasticity vs Regulation) Stochasticity in Development Stochastic Process Mathematical description of stochastic behaviors. data: $\\left\\{\\mathbf{X}_t|t=1,\\ldots,n\\right\\}$ Probability: $\\mathbb{P}\\left(\\mathbf{X}_{t_m} = \\mathbf{x}_{t_m},\\ldots,\\mathbf{X}_{t_2} = \\mathbf{x}_{t_2},\\mathbf{X}_{t_1} = \\mathbf{x}_{t_1}\\right)$ $\\omega$ is one of the random paths. $\\mathbf{X}_t$ is a map indicats which state random paths $\\omega$ is in at time $t$ Events $E$ is a constraint on the value of $\\mathbf{X}_t$ at some times. $P(E)$ is the probability if the random paths satisfy the constraint $E$. markov Process $$\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t|\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right) = \\mathbb{P}\\left(\\mathbf{X}_t=\\mathbf{x}_t|\\mathbf{X}_{t-1}=\\mathbf{x_{t-1}}\\right)$$ Decomposition of Joint Distribution $$ \\begin{aligned} &\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t,\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &=\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &=\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1} | \\mathbf{X}_{t-2} = \\mathbf{x}_{t-2},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_{t-2} = \\mathbf{x}_{t-2},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &= \\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\cdots \\times\\mathbb{P}\\left(\\mathbf{X}_2=\\mathbf{x}_2|\\mathbf{X}_1=\\mathbf{x}_1,\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_1=\\mathbf{x}_1|\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_0=\\mathbf{x}_0\\right)\\\\ &= \\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1}\\right) \\times \\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1} | \\mathbf{X}_{t-2} = \\mathbf{x}_{t-2}\\right)\\times \\cdots\\times\\mathbb{P}\\left(\\mathbf{X}_1=\\mathbf{x}_1|\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_0=\\mathbf{x}_0\\right)\\quad\\left(\\because \\text{Markov Process}\\right) \\end{aligned} $$ Transition Matrix (Assume Time Independence ): $$P = \\left\\{P_{ij}\\right\\} = \\left\\{\\mathbb{P}\\left(\\mathbf{X}_t=i|\\mathbf{X}_{t-1}=j\\right)\\right\\},\\quad P_{ij}\\geq0,\\sum_i P_{ij}=1$$ Computing transition probability Birth and Death process $$ P= \\left(\\begin{matrix}1-\\lambda_0&\\mu_1&0&0\\\\\\lambda_0&1-\\lambda_1-\\mu_1&\\mu_2&0\\\\0&\\lambda_1&1-\\lambda_2-\\mu_2&\\mu_3\\\\0&0&\\lambda_2&1-\\mu_3\\end{matrix}\\right) $$ $P = U\\Lambda U&#94;{-1}$: Eigen decomposition $P&#94;n = U\\Lambda&#94;n U&#94;{-1}$ In [26]: def makeRandomP ( N , seed = 123 ): lambdas = np . r_ [ np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 / N , size = N - 1 ), np . zeros ( shape = 1 )] mus = np . r_ [ np . zeros ( shape = 1 ), np . random . RandomState ( seed + 1 ) . uniform ( low = 0 , high = 1 / N , size = N - 1 )] P = np . zeros ( shape = ( N , N )) for i in range ( N ): P [ i , - 1 + i ] = mus [ i ]; P [ i , i ] = 1 - mus [ i ] - lambdas [ i ]; P [ i , 1 + i if 1 + i < N else 1 + i - N ] = lambdas [ i ] return P In [27]: def LongTimeBehaviors ( P , even = True ): inf = 50 if even else 51 eigenvals , eigenvecs = np . linalg . eig ( P ) Lambda = np . diag ( eigenvals ) eigenvecs_inv = np . linalg . inv ( eigenvecs ) Pn = np . dot ( eigenvecs , np . dot ( Lambda ** inf , eigenvecs_inv )) Pn = np . where ( Pn < 1e-5 , 0 , Pn ) return Pn example Periodic In [28]: P = np . array ([ [ 0 , 1 , 0 ], [ 1 / 2 , 0 , 1 / 2 ], [ 0 , 1 , 0 ] ]) In [29]: print ( f \"P&#94;2n: \\n {LongTimeBehaviors(P, even=True)} \\n \" ) print ( f \"P&#94;2n+1: \\n {LongTimeBehaviors(P, even=False)}\" ) P&#94;2n: [[0.5 0. 0.5] [0. 1. 0. ] [0.5 0. 0.5]] P&#94;2n+1: [[0. 1. 0. ] [0.5 0. 0.5] [0. 1. 0. ]] Reducible In [30]: P = np . array ([ [ 1 / 3 , 3 / 4 , 0 , 0 ], [ 2 / 3 , 1 / 4 , 0 , 0 ], [ 0 , 0 , 1 / 3 , 3 / 4 ], [ 0 , 0 , 2 / 3 , 1 / 4 ] ]) In [31]: LongTimeBehaviors ( P ) Out[31]: array([[0.52941176, 0.52941176, 0. , 0. ], [0.47058824, 0.47058824, 0. , 0. ], [0. , 0. , 0.52941176, 0.52941176], [0. , 0. , 0.47058824, 0.47058824]]) Absorbing In [32]: P = np . array ([ [ 1 , 1 / 2 , 0 , 0 ], [ 0 , 0 , 1 / 2 , 0 ], [ 0 , 1 / 2 , 0 , 0 ], [ 0 , 0 , 1 / 2 , 1 ] ]) In [33]: LongTimeBehaviors ( P ) Out[33]: array([[1. , 0.66666667, 0.33333333, 0. ], [0. , 0. , 0. , 0. ], [0. , 0. , 0. , 0. ], [0. , 0.33333333, 0.66666667, 1. ]]) Irreducible, Aperiodic In [34]: P = np . array ([ [ 2 / 3 , 1 / 12 , 0 ], [ 1 / 3 , 5 / 8 , 1 / 8 ], [ 0 , 7 / 24 , 7 / 8 ], ]) In [35]: LongTimeBehaviors ( P ) Out[35]: array([[0.06976762, 0.06976748, 0.06976741], [0.27906992, 0.2790698 , 0.27906974], [0.65116246, 0.65116272, 0.65116286]]) In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-5.html"},{"title":"レポート課題4(10/24出題)","text":"SrscQoWExpbOip/Lg9v8NA==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report4.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report4.html"},{"title":"探索","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 講義概要 状態空間 15パズル 迷路 コスト無しグラフの探索 コスト付きグラフの探索 ゲーム木の探索 状態空間 ありうる局面の１つ１つを 状態 と言う。 状態全体からなる集合を 状態空間 と言う。 目的： 初期状態から出発して、許される 状態遷移 を繰り返し、最終状態へたどり着くこと。 これは、 グラフ(graph) の 探索(search) 問題と等価 （ノードが状態に、エッジが状態遷移にそれぞれ対応する。） 15パズル ルール： 一度に動かせるのは1パネルのみ。 飽きますに隣のパネルをずらす操作のみ可能 目標： 「できるだけ少ない手数で」 与えられた配置から元の配置に戻すこと。 元に戻すことが不可能な問題を識別する。 迷路 目的：スタートからゴールまで誘導する。 状態(state) $s$：移動できる場所 行動(action) $a$：進む方向 コスト無しグラフの探索 用語 意味 オープンリスト(open list) これから探索するノードの候補リスト クローズドリスト(closed list) 探索が終わったノードのリスト キュー(queue) 先入れ先出し スタック(stack) 後入れ先出し 探索の基本アルゴリズム open_list = [ initial_state ] # オープンリストは初期化状態のみ closed_list = [] # クローズドリストは空 while ( open_list ): # オープンリストが空になるまで以下を繰り返す。 state = getOptimalState ( open_list ) # オープンリストから（何らかの基準で）状態sを取り出す。 closed_list . append ( state ) # sをクローズドリストに追加する。 if state == last_state : break # sが最終状態ならば探索終了 open_list += [ s for s in state . transibles () if s not in closed_list ] # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストに追加する。 深さ優先探索 行き止まりに当たるまで進み、ゴールが見つからなかったら直近の分岐に戻って別の道を探す探索法。 メモリ使用量が少ない ゴールが近くにあっても、他の深い別れ道に迷い込むと時間がかかる ゴールが複数ある時、一番近くのものが見つかるとは限らない オープンリストは スタック （後入れ先出し） にする。 open_list = [ initial_state ] closed_list = [] while ( open_list ): state = open_list . pop ( 0 ) # オープンリストの先頭の状態sを取り出す。 closed_list . append ( state ) if state == last_state : break open_list . push ([ s for s in state . transibles () if s not in closed_list ]) # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストの\"先頭に\"追加する。 幅優先探索 分かれ道に来たらそれぞれの道を一歩ずつ進み，ゴールが見つからなかったらそれぞれの道をもう一歩ずつ進む探索法。 ゴールが近くにある時、早く見つかる。 ゴールが複数ある時、一番近くのものが見つかる。 分かれ道での分岐数が多いとメモリ使用量が多い。 オープンリストは キュー （先入れ後出し） にする。 open_list = [ initial_state ] closed_list = [] while ( open_list ): state = open_list . pop ( - 1 ) # オープンリストの\"末尾\"の状態sを取り出す。 closed_list . append ( state ) if state == last_state : break open_list . push ([ s for s in state . transibles () if s not in closed_list ]) # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストの\"先頭に\"追加する。 反復深化探索 深さに制限をつけて深さ優先探索を行い、徐々に深さを深くしていく探索法 ゴールが近くにある時、早く見つかる ゴールが複数ある時、一番近くのものが見つかる 同じノードを何度も訪れる（分岐が多いと影響小） まとめ 深さ優先探索・幅優先探索・反復深化探索は、グラフに関する特別な知識を使わずにオープンリストから状態を選択することから、 ブラインド探索(blined search) と呼ばれる。 # 探さ優先探索 幅優先探索 反復深化探索 完全性（必ず解が見つかるか） (completeness) $m$ が有限なら Yes Yes Yes 時間計算量 (time complexity) $\\mathrm{O}(b&#94;m)$ $\\mathrm{O}(b&#94;d)$ $\\mathrm{O}(b&#94;d)$ 空間計算量(space complexity) $\\mathrm{O}(bm)$ $\\mathrm{O}(b&#94;d)$ $\\mathrm{O}(bd)$ 最適性（一番近くの解が見つかるか） (optimality) Yes Yes Yes $b$：最大分岐数 $d$：一番浅い解の深さ $m$：最大の深さ コスト付きグラフの探索 各エッジに 遷移コスト が割り当てられている場合の最適遷移パス探索問題。 ブラインド探索 ：グラフに関する特別な知識を使わずにオープンリストから状態を選択。 貪欲探索(greedy search)：現在の状態からの遷移コストが最小の状態を選ぶ。 （深さ優先探索に対応） 最適探索(optimal search)：初期状態からの遷移コスト和が最小の状態を選ぶ。 （各コストが1だと幅優先探索になる。ダイクストラ法とも。） ヒューリスティック探索（最良優先探索, best-first search） ：グラフに関する何らかの知識を使ってオープンリストから適切と思われる状態を選択。 貪欲最良優先探索 $A&#94;{\\ast}$ 探索 貪欲最良優先探索 $\\hat{h}(s)$ を最小にする状態を選ぶ $h(s)$：$s$ から最終状態までの遷移コスト和の最小値 $\\hat{h}(s)$：$h(s)$ の推定（ヒューリスティック関数） 一度オープンリストに入ったの評価値更新は不要 ヒューリスティック関数の選び方： ユーザが 事前知識 により構築（例：直線距離） データから 機械学習 により自動構築 一般には完全性も最適性もないが、実用上は（そこそこ）うまくいくことが（それなりに）多い。 $A&#94;{\\ast}$ 探索(A-start search) $s$ を経由する場合の遷移コスト和の推定値 $\\left(\\hat{g}(s)+\\hat{h}(s)\\right)$ を最小にする状態を選ぶ。 $g(s)$：初期状態から $s$ までの遷移コスト和の最小値 $\\hat{g}(s)$：探索済みノードから $s$ に遷移する場合の最小値（ダイクストラ法と同じ） ノード $s$ を訪れると隣接ノードの $\\hat{g}(s&#94;{\\prime})$ が更新される。 $h(s)$：$s$ から最終状態までの遷移コスト和の最小値 $\\hat{h}(s)$：$h(s)$ のヒューリスティック推定値 最適経路上の $s$ ではいずれも $g(s)+h(s)$ が最小、経路外の点ではそれより大きい値をとることを利用 $\\forall s, 0\\leq\\hat{h}(s)\\leq h(s)$ が成り立つ時、$\\hat{h}(s)$ は 許容的(admissible) であるといい、この場合には $A&#94;{\\ast}$ 探索は最適性を持つ。 ※ 実装等は、 レポート課題 に記載。 In [1]: from kerasy.search.Astar import OptimalTransit In [2]: n = 3 m = 3 initial_str = \"2,-1,6,1,3,4,7,5,8\" last_str = \"1,2,3,4,5,6,7,8,-1\" In [3]: OptimalTransit ( n , m , initial_str , last_str , heuristic_method = \"Manhattan_distance\" , n_row = 5 ) n_transition = 9 ゲーム木の探索 2人のプレイヤーが交互に遷移先を決めるゲーム（ex. 将棋・囲碁・リバーシ・◯×など）における最適遷移探索問題 ミニマックス探索 自分は一番良い（点数を最大化する）手を選ぶ 相手は一番悪い（点数を最小化する）手を選ぶ アルファ・ベータ探索 ミニ・マックス探索では、全ての局面に対する点数を求める必要があり、時間がかかる。 不要な点数計算を省略することで効率化 $\\alpha$：max計算の際の下界値 $\\beta$：min計算の際の上界値 モンテカルロ木探索 アルファ・ベータ法を用いても、ゲーム木を深く探索するのは困難（$b&#94;d$ が $b&#94;{d/2}$ になる程度。） そこで、 ランダムに 手を打つ。 囲碁やスケジューリングなどで活用されている。 まとめ 広大な状態空間を効率よく探索したい コスト無しグラフの探索 コスト付きグラフの探索 ゲーム木の探索 膨大な状態空間の探索には，近似的な手法が有用 事前知識や機械学習によるヒューリスティック関数の構築 モンテカル 木探索 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-4.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-4.html"},{"title":"ガウシアンプロセスとベイズ最適化","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt import seaborn as sns データ駆動科学とベイズ最適化 データ駆動科学では、データに基づいて、新たな知見・事柄を発見することが求められる 単に予測を行うだけでなく、それに基づいて「行動」を設計することが必要 これらは、「ベイズ最適化」の枠組みに乗ることが多い 概要 ベイズ線形回帰 ガウシアンプロセス ベイズ最適化 ベイズ線形回帰 線形回帰モデルのパラメータを 最尤推定 によって決める場合、 解こうとしている問題に合わせてモデルの複雑さを適切に決めることが必要 ↑は、単純に尤度を最大化するだけでは 過学習 を引き起こしてしまう。 データの一部を独立なテスト用データとして取っておく ことでモデルの汎化性能を評価できるが、この方法は 計算量が大きく 、 データの無駄遣い となり得る。 これらの問題に対処するため、線形回帰モデルをベイズ的に取り扱うことで最尤推定の過学習を回避するとともに 「訓練データだけからモデルの複雑さを自動的に決定する。」 概要 解こうとしている問題に沿った 尤度関数(likelihood function) （ $p(\\mathbf{t}|\\mathbf{X},\\mathbf{w})$ ） を定義する。 モデルパラメータの 事前分布(prior distribution) （ $p(\\mathbf{w})$ ） を、 尤度関数 の 共役事前分布(conjugate prior) の形で定義する。 ベイズの公式より、 事後分布(posterior distribution) は 事前分布 と 尤度関数 の積に比例する。 （ $p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})\\propto p(\\mathbf{t}|\\mathbf{X},\\mathbf{w})\\cdot p(\\mathbf{w})$ ） あるパラメータ （ $\\mathbf{w}$ ） 下で入力 $\\mathbf{x}$ が与えられた時の確率分布 （ $p(t|\\mathbf{w},\\mathbf{x})$ ） を、3で求めた 事後分布 （ $p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})$ ） で重み付けしながら 周辺化(marginalization) する （ $p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x}) = \\int p(t|\\mathbf{w},\\mathbf{x})p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})d\\mathbf{w}$ ） ことで、 予測分布(predivtive distribution) （ $p(t|\\mathbf{w},\\mathbf{x})$ ） を得る。 具体例 ※ $D$ 次元の説明変数 $\\mathbf{x}$ で一次元の目標変数 $t$ を線形回帰するモデルをベイズ的に取り扱う。 目標変数 $t$ が決定論的な関数 $y(\\mathbf{x},\\mathbf{w})$ と加法性のガウスノイズの和で与えられる場合を考える。 $$t = y(\\mathbf{x},\\mathbf{w}) + \\epsilon\\qquad (3.7)$$ ここで、$\\epsilon$ は期待値が $0$ で精度が $\\beta$ のガウス確率変数である。すなわち、以下で表すことができる。 $$p(t|\\mathbf{x},\\mathbf{w},\\beta) = \\mathcal{N}\\left(t|y(\\mathbf{x},\\mathbf{w}),\\beta&#94;{-1}\\right)\\qquad (3.8)$$ データ点が $(3.8)$ の分布から 独立に生成された と仮定すると、尤度関数を次のように表せる。 $$p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) = \\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)\\qquad (3.10)$$ モデルパラメータ $\\mathbf{w}$ の事前分布を導入する。 ここで、 $\\beta$ が既知 と仮定すると、上記の尤度関数の共役事前分布である、期待値 $\\mathbf{m}_0$ 共分散 $\\mathbf{S}_0$ を持つガウス分布で表すのが適当である。 $$p(\\mathbf{w}) = \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)\\qquad (3.48)$$ ※ なお、$\\mathbf{w},\\beta$ の両方が未知である場合、共役事前分布は ガウス-ガンマ分布 隣、予測分布は スチューデントのt分布 となる。 ベイズの公式より、 事後分布は事前分布と尤度関数の積に比例する ので、これを解くことで事後分布を次の形で書き出すことができる。 （導出） $$ p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) = \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N) \\qquad (3.49)\\\\ \\begin{cases} \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51) \\end{cases} $$ $\\mathbf{w}$ で周辺化することで、予測分布を求めるが、議論の簡単のために、 「モデルパラメータ $\\mathbf{w}$ の事前分布 $p(\\mathbf{w})$ が、単一の制度パラメータ $\\alpha$ で記述される期待値が $0$ の等方的ガウス分布である」 とする。 $$p(\\mathbf{w}|\\alpha) = \\mathcal{N}\\left(\\mathbf{w}|\\mathbf{0},\\alpha&#94;{-1}\\mathbf{I}\\right)\\qquad (3.52)$$ この時、上記の $\\mathbf{w}$ の事後分布 $(3.49)$ の形は変わらず、$\\mathbf{m}_N,\\mathbf{S}_N$ の値が $$ \\begin{cases} \\mathbf{m}_N &= \\beta\\mathbf{S}_N\\boldsymbol{\\Phi}&#94;T\\mathbf{t} & (3.53)\\\\ \\mathbf{S}_N&#94;{-1} &= \\alpha\\mathbf{I} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.54) \\end{cases} $$ となる。この条件下で周辺化すると、以下の結果を得る。 （導出） $$ \\begin{aligned} p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x},\\alpha,\\beta) &= \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)d\\mathbf{w}& (3.57)\\\\ &= \\mathcal{N}\\left(t|\\mathbf{m}_N&#94;T\\phi(\\mathbf{x}),\\sigma_N&#94;2(\\mathbf{x})\\right) & (3.58)\\\\ \\sigma_N&#94;2(\\mathbf{x}) &= \\frac{1}{\\beta} + \\phi(\\mathbf{x})&#94;T\\mathbf{S}\\phi(\\mathbf{x}) & (3.59) \\end{aligned} $$ ※ ここで、$(3.59)$ の第1項はデータに含まれるノイズを、第2項は $\\mathbf{w}$ に関する不確かさを反映している。 事後分布の計算の導出過程 $$ \\begin{aligned} \\text{likelihood function : } p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) &= \\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)& (3.10)\\\\ \\text{prior distribution : } p(\\mathbf{w}) &= \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)& (3.48)\\\\ \\text{posterior distribution : } p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) &= \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N) & (3.49)\\\\ \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51)\\\\ \\mathcal{N}(x|\\mu,\\sigma&#94;2) &= \\frac{1}{\\left(2\\pi\\sigma&#94;2\\right)&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2\\sigma&#94;2}(x-\\mu)&#94;2\\right\\} & (2.42)\\\\ \\mathcal{N}(\\mathbf{x}|\\boldsymbol{\\mu},\\boldsymbol{\\Sigma}) &= \\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}|&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)\\right\\} & (2.43) \\end{aligned} $$ $$ \\begin{aligned} p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) &\\propto p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) p(\\mathbf{w}) \\\\ &=\\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)\\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)\\\\ &\\propto\\prod_{n=1}&#94;N\\exp\\left\\{-\\frac{\\beta}{2}\\left(t_n-\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\right)&#94;2\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &=\\exp\\left\\{-\\frac{\\beta}{2}\\sum_{n=1}&#94;N\\left(t_n-\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\right)&#94;2\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &= \\exp\\left\\{-\\frac{\\beta}{2}\\left( \\begin{array}{c}t_1 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_1)\\\\ t_2 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_2) \\\\ \\vdots \\\\ t_N - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_N) \\end{array} \\right)&#94;T\\left( \\begin{array}{c}t_1 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_1)\\\\ t_2 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_2) \\\\ \\vdots \\\\ t_N - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_N) \\end{array} \\right) \\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &= \\exp\\left\\{-\\frac{\\beta}{2}\\left(\\mathbf{t}-\\boldsymbol{\\Phi}\\mathbf{w}\\right)&#94;T\\left(\\mathbf{t}-\\boldsymbol{\\Phi}\\mathbf{w}\\right)\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\}\\\\ &= \\exp\\left\\{ -\\frac{1}{2} \\left(\\beta\\mathbf{t}&#94;T\\mathbf{t} - \\beta\\mathbf{t}&#94;T\\boldsymbol{\\Phi}\\mathbf{w} - \\beta\\mathbf{w}&#94;T\\boldsymbol{\\Phi}&#94;T\\mathbf{t} + \\beta\\mathbf{w}&#94;T\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi}\\mathbf{w} + \\mathbf{w}&#94;T\\mathbf{S}_0&#94;{-1}\\mathbf{w} - \\mathbf{w}&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0 - \\mathbf{m}_0&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{w} + \\mathbf{m}_0&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right)\\right\\}\\\\ &= \\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}&#94;T\\left(\\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} + \\mathbf{S}&#94;{-1}_0\\right)\\mathbf{w} - \\mathbf{w}&#94;T\\left(\\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t} + \\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right) - \\left(\\beta\\mathbf{t}&#94;T\\boldsymbol{\\Phi} + \\mathbf{m}_0\\mathbf{S}&#94;{-1}_0\\right)\\mathbf{w} + \\left(\\beta\\mathbf{t}&#94;T\\mathbf{t} + \\mathbf{m_0}&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right)\\right)\\right\\} \\\\ &=\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w} - \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right)\\right)&#94;T\\mathbf{S}_N&#94;{-1}\\left(\\mathbf{w} - \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right)\\right) + \\mathrm{C} \\right\\}\\\\ &\\propto\\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N)\\\\ &\\begin{cases} \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51)\\\\\\end{cases} \\end{aligned}\\\\ $$ 周辺化計算の導出過程 以下の「ガウス分布の周辺分布と条件付き分布の関係」の $(2.115)$ の結果を用いる。 $\\mathbf{x}$ の周辺ガウス分布と、$\\mathbf{x}$ が与えられた時の $\\mathbf{y}$ の条件付きガウス分布が次式で与えられたとする。 $$ \\begin{aligned} p(\\mathbf{x}) &=\\mathcal{N}\\left(\\mathbf{x} | \\boldsymbol{\\mu}, \\mathbf{\\Lambda}&#94;{-1}\\right) & (2.113)\\\\ p(\\mathbf{y} | \\mathbf{x}) &=\\mathcal{N}\\left(\\mathbf{y} | \\mathbf{A} \\mathbf{x}+\\mathbf{b}, \\mathbf{L}&#94;{-1}\\right) & (2.114)\\end{aligned} $$ この時、$\\mathbf{y}$ の周辺分布と、$\\mathbf{y}$ が与えられた時の $\\mathbf{x}$ の条件付き分布は $$ \\begin{aligned} p(\\mathbf{y}) &=\\mathcal{N}\\left(\\mathbf{y} | \\mathbf{A} \\boldsymbol{\\mu}+\\mathbf{b}, \\mathbf{L}&#94;{-1}+\\mathbf{A} \\mathbf{\\Lambda}&#94;{-1} \\mathbf{A}&#94;{\\mathrm{T}}\\right) & (2.115)\\\\ p(\\mathbf{x} | \\mathbf{y}) &=\\mathcal{N}\\left(\\mathbf{x} | \\mathbf{\\Sigma}\\left\\{\\mathbf{A}&#94;{\\mathrm{T}} \\mathbf{L}(\\mathbf{y}-\\mathbf{b})+\\mathbf{\\Lambda} \\boldsymbol{\\mu}\\right\\}, \\mathbf{\\Sigma}\\right) & (2.116) \\end{aligned} $$ で与えられる。ただし、 $$\\mathbf{\\Sigma} = \\left(\\mathbf{\\Lambda} + \\mathbf{A}&#94;T\\mathbf{LA}\\right)&#94;{-1}\\qquad (2.117)$$ である。 実装 In [2]: from kerasy.ML.linear import BayesianLinearRegression from kerasy.utils.preprocessing import GaussianBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian In [3]: N = 25 ; D = 1 ; M = 25 xmin = 0 ; xmax = 1 seed = 10 In [4]: alpha = 1 beta = 25 In [5]: x_test = np . linspace ( xmin , xmax , 1000 ) y_test = np . sin ( 2 * np . pi * x_test ) x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 1 / beta , seed = seed ) y_train += y_noise In [6]: # transform mu = np . linspace ( xmin , xmax , M ); sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) x_train_features = phi . transform ( x_train ) x_test_features = phi . transform ( x_test ) In [7]: random_idx = np . random . RandomState ( seed ) . choice ( N , N ) In [8]: fig = plt . figure ( figsize = ( 16 , 8 )) for i , n in enumerate ([ 1 , 2 , 4 , 25 ]): ax = fig . add_subplot ( 2 , 2 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( x_train_features [ random_idx [: n ]], y_train [ random_idx [: n ]]) y_pred , y_std = model . predict ( x_test_features ) ax . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) ax . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( x_train [ random_idx [: n ]], y_train [ random_idx [: n ]], s = 150 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) ax . set_ylim ( - 1.5 , 1.5 ), ax . legend (), ax . set_title ( f \"Bayesian Linear Regression (N= {n} )\" ) plt . tight_layout () plt . show () ガウシアンプロセス 回帰分析のための カーネル法 テストサンプルに対して、 予測値だけでなく、予測分散も与えることができる。 線形回帰のモデルは、以下で表されていた。 $$y(\\mathbf{x},\\mathbf{w}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x})\\qquad (3.3)$$ この結果に、ベイズ線形回帰の結果 $(3.53)$ を代入すると、 $$ \\begin{aligned} y(\\mathbf{x},\\mathbf{m}_N) &= \\mathbf{m}_N\\phi(\\mathbf{x}) = \\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\boldsymbol{\\Phi}&#94;T\\mathbf{t} \\\\ &= \\sum_{n=1}&#94;N\\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}_n)t_n & (3.60)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51) \\end{aligned} $$ したがって、点 $\\mathbf{x}$ での予測分布の平均は訓練データの目標変数 $t_n$ の線型結合で与えられるので、 $$ \\begin{aligned} y(\\mathbf{x},\\mathbf{m}_N) &= \\sum_{n=1}&#94;Nk(\\mathbf{x}, \\mathbf{x}_n)t_n & (3.61)\\\\ k(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}) &= \\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}&#94;{\\prime}) & (3.62)\\\\ &= \\left(\\beta&#94;{1/2}\\mathbf{S}_N&#94;{1/2}\\phi(\\mathbf{x})\\right)&#94;T\\left(\\beta&#94;{1/2}\\mathbf{S}_N&#94;{1/2}\\phi(\\mathbf{x})\\right) & (3.65) \\end{aligned} $$ とかける。なお、$k(\\mathbf{x}, \\mathbf{x}&#94;{\\prime})$ を 平滑化行列(smoother matrix) 、または 等価カーネル(equivalent kernel) と呼ぶ。（$(3.65)$ から、等価カーネルが通常のカーネル関数が満たすべき性質を満たしていることがわかる。） また、訓練データの目標値の線型結合を取ることで予測を行う上記のような回帰関数を 線形平滑器(linear smoother) と呼ぶ。 In [9]: from kerasy.utils.preprocessing import GaussianBaseTransformer , SigmoidBaseTransformer , PolynomialBaseTransformer In [10]: X = np . linspace ( - 1 , 1 , 200 ) M = 15 mu = np . linspace ( - 0.9 , 0.9 , M ); sigma = 0.1 gausian_phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) In [11]: def mkSmootherMatrix ( X , phi , alpha = 1 , beta = 25 ): X_feature = phi . transform ( X ) N , M = X_feature . shape SN = np . linalg . inv ( alpha * np . eye ( M ) + beta * X_feature . T . dot ( X_feature )) K = beta * np . dot ( X_feature , np . dot ( SN , X_feature . T )) return K In [12]: K = mkSmootherMatrix ( X , gausian_phi ) In [13]: SP = [ 30 , 120 , 150 ] colors = [ \"red\" , \"salmon\" , \"pink\" ] In [14]: fig = plt . figure ( figsize = ( 12 , 6 )) axKernel = plt . subplot2grid (( 3 , 2 ), ( 0 , 1 ), rowspan = 3 ) axKernel = sns . heatmap ( K , vmin = np . min ( K ), vmax = np . max ( K ), cmap = \"jet\" , cbar = False , square = True , ax = axKernel ) axKernel . set_xticks ([]), axKernel . set_yticks ([]) axKernel . set_xlabel ( \"$x$\" , fontsize = 18 ), axKernel . set_ylabel ( \"$x&#94;{\\prime}$\" , fontsize = 18 ) for i in range ( 3 ): axL = plt . subplot2grid (( 3 , 2 ), ( i , 0 )) axL . set_facecolor ( 'lightcyan' ) axL . plot ( K [ SP [ i ]], color = colors [ i ], linewidth = 4 ) axL . set_xticks ([]), axL . set_yticks ([]) axKernel . axhline ( SP [ i ], color = colors [ i ], linewidth = 10 , alpha = 0.7 ) plt . tight_layout () plt . show () In [15]: Transformers = [ ( GaussianBaseTransformer , mu ), ( SigmoidBaseTransformer , mu ), ( PolynomialBaseTransformer , 10 ), ] In [16]: fig = plt . figure ( figsize = ( 12 , 4 )) for i ,( phi_func , param ) in enumerate ( Transformers ): ax = fig . add_subplot ( 1 , 3 , i + 1 ) phi = phi_func ( param ) K = mkSmootherMatrix ( X , phi ) ax . plot ( K [ 100 ], color = \"blue\" ) ax . scatter ( 100 , 0 , color = \"red\" , marker = \"x\" , s = 150 , label = \"$x&#94;{\\prime}$\" ) ax . set_xticks ([]), ax . set_yticks ([]), ax . set_title ( f \"$k(x,x')$: {phi.__name__} \" , fontsize = 16 ) ax . set_xlabel ( \"$x$\" , fontsize = 18 ), ax . legend () plt . tight_layout () plt . show () カーネル関数の例 を見ればわかるよう、 対応する基底関数が局所的でないにも関わらず、等価カーネルは $x&#94;{\\prime}$ に関して局所的な関数となっていることがわかる！！ また、$y(\\mathbf{x})$ と $y(\\mathbf{x}&#94;{\\prime})$ の共分散を考えると、 $$ \\begin{aligned} \\mathrm{cov}\\left[y(\\mathbf{x}),y(\\mathbf{x}&#94;{\\prime})\\right] &= \\mathrm{cov}\\left[\\phi(\\mathbf{x})&#94;T\\mathbf{w}, \\mathbf{w}&#94;T\\phi(\\mathbf{x})\\right]\\\\ &= \\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}&#94;{\\prime}) = \\beta&#94;{-1}k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})\\quad(3.63) \\end{aligned} $$ となる。ここで、上述の等価カーネルの形状を考えると、 近接での予測平均は互いに強い相関を持っている一方で、より離れた点の組では相関は小さくなることがわかる。 ベイズ線形回帰 のように基底関数の集合を明示的に定義するのではなく、局所的なカーネルを直接定義し、観測された訓練集合が与えられた時、この局所的なカーネルを用いて新たな入力ベクトル $\\mathbf{x}$ に対する予測値を求めることができる。 この定式化から、回帰（と分類）に対する実用的な枠組みである ガウス過程(Gaussian process) が得られる。 ベイズ最適化 $M$ 個の候補点があり、この中から最大の観測値を持つものを探したい。 できるだけ実験数を少なくしたい。 $N$ 個の候補点に対する実験が終わった。$M-N$ 個の候補点が残っている。 次の $N+1$ 個目の候補点を最適に選びたい。 $N$ 個の化合物から予測モデルを学習し、それを用いて、残りの候補点を スコアリング し決定。 Maximum Probability of Improvement: Current Maxを超える確率。 Maximum Expected Improvement: (観測値-Current Max)の期待値。 Thompson Sampling: 残りのM-N個候補点に対して、条件つき結合確率からサンプリングを行い、そのサンプリング値をスコアとする。 In [17]: xmin = 0 ; xmax = 1 N = 1000 ; M = 25 seed = 1 In [18]: alpha = 1 beta = 25 In [19]: X = np . linspace ( xmin , xmax , N ) Y = 5e1 * X * ( X - 0.2 ) * ( X - 0.3 ) * ( X - 0.7 ) * ( X - 1 ) _ , noise = generateGausian ( size = 1000 , x = X , loc = 0 , scale = 1 / beta , seed = seed ) Y_ob = Y + noise In [20]: mu = np . linspace ( xmin , xmax , M ) sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) In [21]: X_features = phi . transform ( X ) In [22]: fig = plt . figure ( figsize = ( 18 , 8 )) idx = np . random . RandomState ( seed ) . choice ( N , 2 ) # Initialization. next_idx = idx for i , _ in enumerate ( range ( 12 )): ax = fig . add_subplot ( 3 , 4 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( X_features [ idx ], Y_ob [ idx ]) y_pred , y_std = model . predict ( X_features ) current_max = np . max ( Y_ob [ idx ]) max_improve_id = np . argmax ( y_pred ) ax . plot ( X , Y , color = \"black\" , label = \"True distribution\" ) ax . plot ( X , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( X , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( X [ idx ], Y_ob [ idx ], s = 50 , edgecolors = 'black' , facecolor = \"white\" , label = \"Observation\" ) ax . scatter ( X [ next_idx ], Y_ob [ next_idx ], s = 150 , edgecolors = 'black' , facecolor = \"black\" , label = \"New Obsevation\" ) ax . set_xlabel ( \"Explanatory Variable\" ), ax . set_ylabel ( \"Measured Value\" ), ax . set_title ( f \"N={len(idx)}, Max= {current_max:.3f} \" ) ax . set_ylim ( - 0.5 , 0.3 ), ax . set_xticks ([]), ax . set_yticks ([]) ax . axhline ( current_max , color = \"green\" , label = \"Current Maximum\" ) ax . axvline ( np . max ( X [ max_improve_id ]), color = \"blue\" , label = \"Maximum Probability of Improvement\" ) next_idx = max_improve_id if np . random . uniform () > 0.5 else np . random . choice ( N , 1 ) idx = np . r_ [ idx , next_idx ] ax . legend () plt . tight_layout () plt . show () おわりに（データ駆動科学） データ駆動科学では、データに基づいて、新たな知見・事柄を発見することが求められる。 単に予測を行うだけでなく、それに基づいて次の「行動」を設計することが必要 これらは、ベイズ最適化の枠組みに乗ることが多い。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-4.html"},{"title":"特徴選択","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 主成分分析(PCA) In [2]: N = 20 seed = 0 In [3]: X = np . linspace ( 0 , 1 , N ) Y = X + np . random . RandomState ( N ) . normal ( loc = 0 , scale = 5e-2 , size = N ) data = np . vstack (( X , Y )) In [4]: def Rotate ( x , radian ): A = np . array ([ [ np . cos ( radian ), - np . sin ( radian )], [ np . sin ( radian ), np . cos ( radian )] ]) return np . dot ( A , data ) In [5]: fig = plt . figure ( figsize = ( 10 , 4 )) ax = fig . add_subplot ( 1 , 2 , 1 ) ax . scatter ( X , Y , color = \"black\" ), ax . set_title ( \"Original\" ) X_tra , Y_tra = Rotate ( data , radian =- 1 / 4 * np . pi ) ax = fig . add_subplot ( 1 , 2 , 2 ) ax . scatter ( X_tra , Y_tra , color = \"red\" ), ax . set_title ( \"Rotated\" ), ax . set_ylim ( - 1 / 2 * np . sqrt ( 2 ), 1 / 2 * np . sqrt ( 2 )) plt . tight_layout () plt . show () $2$ 次元空間で左上図のようなデータがあったとする。この時、このデータを表現するのに $(x,y)$ の二次元が必要だろうか？ データ全体を右に $1/4\\pi$ 回転させると、右上図のようなデータれるとなる。この場合、$y&#94;{\\prime}$ 軸方向はノイズとみなせ、$x&#94;{\\prime}$ 軸のみでデータを表現していると言える。 この例のように、$K$ 次元のデータであっても、で０他の偏りによって $M( こういった場合に、 「$M$ 方向の軸をどのように決めるか？」 、 「$M$ をどうやって決めるか？」 などが問題となる。 ※ 詳しくは 主成分分析(PCA) に記載。 線形判別分析(LDA) 入力ベクトル $\\mathbf{x}$ を $K$ クラスの一つ $C_k$ に割り当てる関数である識別（決定面が超平面となるとき、 線形識別(linear discriminant) ）を、 「次元の削減」 という観点から捉えることができる。 2クラス分類 $D$ 次元入力ベクトルを得て、それを以下の式で $1$ 次元に射影するとする。 $$y = \\mathbf{w}&#94;T\\mathbf{x}\\qquad (4.20)$$ ある閾値を設定し、$y\\geq-w_0$ の場合クラス $C_1$、そうでない場合クラス $C_2$ であるとすると、 標準的な線形分類器が得られる。 一般に、$D$ 次元から $1$ 次元へ射影することによって相当量の情報量の損失を発生させる。 重みベクトル $\\mathbf{w}$ の要素を調整することで、 クラスの分離を最大にする射影を選択したい。 $\\mathbf{w}$ 上へ射影された際のクラス分離度の最も簡単な測定法は、 射影されたクラスの平均の分離度（以下の式） を見ることである。 $$m_2-m_1 = \\mathbf{w}&#94;T\\left(\\mathbf{m}_2-\\mathbf{m}_1\\right) = \\mathbf{w}&#94;T\\left(\\frac{1}{N_2}\\sum_{n\\in C_2}\\mathbf{x}_n -\\frac{1}{N_1}\\sum_{n\\in C_1}\\mathbf{x}_n\\right)\\qquad (4.21)\\ \\&\\ (4.22)$$ 上の式は $\\mathbf{w}$ の値を大きくすればいくらでも大きな値にすることができるので、 $\\mathbf{w}$ が単位長である（$\\sum_i w_i&#94;2 = 1$）という制約を加える。 ラグランジュ乗数を用いてこれを解くと、$\\mathbf{w}\\propto(\\mathbf{m}_2-\\mathbf{m}_1)$ が得られる。 クラス分布の非対角な共分散が強い場合など、一般に、 各クラスの平均値だけを見ていても上手く判別する事ができない。 そこでフィッシャーが提案した方法が、 「射影されたクラス平均間の分離度を大きくすると同時に、各クラス内では小さな分散を与える関数を最大化する」 クラス $C_k$ から射影されたデータのクラス内分散は以下で与えられる。 $$s_k&#94;2 = \\sum_{n\\in C_k}(y_n-m_k)&#94;2\\qquad (4.2)$$ 全データ集合に対する総クラス内分散が $s_1&#94;2+s_2&#94;2$ であると定義する。 フィッシャーの判別基準は、 クラス間分離度 と クラス内分散 の比率で表される。 $$ \\begin{aligned} J(\\mathbf{w}) &= \\frac{(m_2-m_1)&#94;2}{s_1&#94;2 + s_2&#94;2} & (4.25)\\\\ &= \\frac{\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}}{\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}} & (4.27)\\\\ \\mathbf{S}_{\\mathrm{B}} &= (\\mathbf{m}_2-\\mathbf{m}_1)(\\mathbf{m}_2-\\mathbf{m}_1)&#94;T & (4.27)\\\\ \\mathbf{S}_{\\mathrm{W}} &= \\sum_{n\\in C_1}(\\mathbf{x}_n-\\mathbf{m}_1)(\\mathbf{x}_n-\\mathbf{m}_1)&#94;T + \\sum_{n\\in C_2}(\\mathbf{x}_n-\\mathbf{m}_2)(\\mathbf{x}_n-\\mathbf{m}_2)&#94;T& (4.27)\\\\ \\end{aligned} $$ $\\mathbf{S}_{\\mathrm{B}}$ を クラス間共分散行列(between-class covariance matrix) と呼ぶ。 $\\mathbf{S}_{\\mathrm{W}}$ を (総)クラス内共分散行列(within-class covariance matrix) と呼ぶ。 $J(\\mathbf{w})$ を $\\mathbf{w}$ に関して微分すると、以下の式が満たされる場合に $J(\\mathbf{w})$ が最大となる事がわかる。 $$ \\begin{aligned} \\frac{dJ(\\mathbf{w})}{d\\mathbf{w}} &= \\frac{\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}} + \\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right) - \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}} + \\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)}{\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)&#94;2}\\\\ \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}} + \\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right) &= \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}} + \\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)\\\\ \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}&= \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\qquad (4.29) \\end{aligned} $$ $(4.27)$ から、 $\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}$ は常に $(\\mathbf{m}_2-\\mathbf{m}_1)$ と同じ方向を持つ。 $\\mathbf{w}$ の方向だけが重要で、 大きさは考慮する必要がないので、スカラーファクタ $\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)$ と $\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)$ を無視できる。 $(4.29)$ の両辺に $\\mathbf{S}_{\\mathrm{W}}&#94;{-1}$ を左からかけて、 フィッシャーの線形判別(Fisher's linear discriminant) が得られる。 $$\\mathbf{w}\\propto\\mathbf{S}_{\\mathrm{W}}&#94;{-1}(\\mathbf{m}_2-\\mathbf{m}_1)\\qquad (4.30)$$ フィッシャーの線形判別(Fisher's linear discriminant) は、厳密には識別子ではなく、 むしろ $1$ 次元へ削減する際のデータの射影方向の選択を行なっている。 In [6]: from kerasy.ML.decomposition import LDA In [7]: N1 = 100 ; N2 = 100 cov = [[ 10 , 1 ],[ 1 , 3 ]] In [8]: x1 = np . random . RandomState ( seed ) . multivariate_normal ([ 0 , 7 ], cov , N1 ) x2 = np . random . RandomState ( seed + 1 ) . multivariate_normal ([ 8 , 6 ], cov , N2 ) x1min = np . min ( x1 ); x1max = np . max ( x1 ) x2min = np . min ( x2 ); x2max = np . max ( x2 ) m1 = np . mean ( x1 , axis = 0 ); m2 = np . mean ( x2 , axis = 0 ) m = ( m1 + m2 ) / 2 data = np . r_ [ x1 , x2 ] In [9]: X = np . linspace ( - 100 , 100 , 1000 ) In [10]: fig = plt . figure ( figsize = ( 12 , 6 )) for i , tf in enumerate ([ True , False ]): model = LDA () model . fit ( x1 , x2 , mean_only = tf ) w1 , w2 = model . w alpha = - w2 / w1 beta = m [ 1 ] - alpha * m [ 0 ] x_features = model . transform ( data ) axT = fig . add_subplot ( 2 , 2 , i + 1 ) axT . plot ( X , X * ( - w2 / w1 ) + beta , color = \"black\" , label = \"linear discriminant\" ) axT . scatter ( x1 [:, 0 ], x1 [:, 1 ], color = \"blue\" , label = \"class1\" ) axT . scatter ( x2 [:, 0 ], x2 [:, 1 ], color = \"red\" , label = \"class2\" ) axT . scatter ( m1 [ 0 ], m1 [ 1 ], color = \"green\" , marker = \"*\" , s = 200 ), axT . scatter ( m2 [ 0 ], m2 [ 1 ], color = \"green\" , marker = \"*\" , s = 200 , label = \"mean\" ) axT . set_xlim ( x1min , x1max ), axT . set_ylim ( x2min , x2max ) axT . set_xticks ([]), axT . set_yticks ([]), axT . legend (), axT . set_title ( \"Only Mean\" if tf else \"Fisher's linear discriminant\" ) axB = fig . add_subplot ( 2 , 2 , 3 + i ) axB . hist ( x_features [: N1 ], alpha = 0.3 , color = \"blue\" , label = \"class1\" ) axB . hist ( x_features [ N1 :], alpha = 0.3 , color = \"red\" , label = \"class2\" ) axB . set_xticks ([]), axB . set_yticks ([]), axB . legend () plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-3.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-3.html"},{"title":"生物統計論 第4回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section4.1 Expectation Maximization Algorithm The expectation maximization algorithm, or EM algorithm, is a general technique for finding maximum likelihood solutions for probabilistic models having latent variable. Consider a probabilistic model in which we collectively denote all of the observed variables by $\\mathbf{X}$ all of the hidden variables by $\\mathbf{Z}$ (assuming discrete, but discussion is identical if continuous) joint distribution by $p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)$ Goal is to maximize the likelihood function that is given by $$p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) = \\sum_{\\mathbf{Z}}p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)\\qquad (9.69)$$ Properties Guaranteed to terminate Likelihood always increases Solving M-step is often easy No need to traverse the data Separation of parameter dependency $\\log(pq)=\\log(p)+\\log(q)$ Sometimes solved exactly Often a few times faster than gradient descent (if stopping condition is not too stringent) Expectation values characterize the optimized model Lower Bound of Likelihood $\\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right)$ and $\\mathrm{KL}\\left(q\\|p\\right)$ We shall suppose that direct optimization of $p(\\mathbf{X}|\\boldsymbol{\\theta})$ is difficult the optimization of the complete-data likelihood function $p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)$ is significantly easier We introduce a distribution $q\\left(\\mathbf{Z}\\right)$ defined over the latent variables. For any choice of $q\\left(\\mathbf{Z}\\right)$, the following decomposition holds $$ \\begin{aligned} \\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) &= \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) + \\mathrm{KL}\\left(q\\|p\\right) &(9.70)\\\\ \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.71)\\\\ \\mathrm{KL}\\left(q\\|p\\right) &= -\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.72) \\end{aligned} $$ NOTE : $\\mathcal{L}(q,\\boldsymbol{\\theta})$ is a functional of the distribution $q(\\mathbf{Z})$, and a function of the parameters $\\boldsymbol{\\theta}$ $$ \\begin{aligned} \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) + \\mathrm{KL}\\left(q\\|p\\right) &=\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} -\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\}\\\\ &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}\\right\\}\\\\ &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right)\\\\ &= \\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) \\end{aligned}$$ From $(9.72)$, we see that $\\mathrm{KL}(q\\|p)$ is the Kullback-Leibler divergence between $q(\\mathbf{Z})$ and the posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta})$ Kullback-Leibler divergence satisfies $\\mathrm{KL}(q\\|p)\\geq0$ with eqyality if, and only if, $q(\\mathbf{Z})=p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta})$. Therefore, $\\mathcal{L}(q,\\boldsymbol{\\theta})\\leq\\ln p(\\mathbf{X}|\\boldsymbol{\\theta})$, in other words that $\\mathcal{L}(q,\\boldsymbol{\\theta})$ is a lower bound on $\\ln p(\\mathbf{X}|\\boldsymbol{\\theta})$ E step In the E step, the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ is maximized with respect to $q(\\mathbf{Z})$ while holding $\\boldsymbol{\\theta}&#94;{\\text{old}}$ fixed. $\\ln p(\\mathbf{X}|\\boldsymbol{\\theta}&#94;{\\text{old}})$ does not depend on $q(\\mathbf{Z})$ the largest value of $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ will occur when the Kullback-Leibler divergence vanishes. ∴ When $q(\\mathbf{Z})$ is equal to the posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}})$, $\\mathrm{KL}(q\\|p)=0$ and the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ will be maximized. M step In the M step, the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ is maximized with respect to $\\boldsymbol{\\theta}$ to give some new value $\\boldsymbol{\\theta}&#94;{\\text{new}}$ while holding $q(\\mathbf{Z})$ fixed. This will cause the lower bound $\\mathcal{L}$ to increase This will necessarily cause the corrresponding log likelihood function to increase. Because $q$ is held fixed during the M step, it will not equal the new posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}})$ $\\left(\\mathrm{KL}(q\\|p)\\neq0\\right)$ $\\mathcal{Q}(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}})$ $$ \\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)=\\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right) \\qquad (9.33)\\\\ $$ If we substitute $q(\\mathbf{Z}) = p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)$ into $(9.71)$, $$ \\begin{aligned} \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.71)\\\\ &= \\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right) - \\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\\\ &= \\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right) + \\text{const.} \\end{aligned} $$ ∴ \"Maximizing $\\mathcal{L}(q,\\boldsymbol{\\theta})$\" is equal to \"Maximizing $\\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)$\". In [2]: from kerasy.ML.MixedDistribution import MixedGaussian In [3]: # Train Data. data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = 50 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 5 ], cov = np . eye ( 2 ), size = 50 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = 50 ), ]) X , Y = data . T K = 3 In [4]: # Back Ground Color xmin , ymin = np . min ( data , axis = 0 ) - 0.3 xmax , ymax = np . max ( data , axis = 0 ) + 0.3 Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [5]: model = MixedGaussian ( K = 3 , random_state = 1234 ) model . fit ( data , memo_span = 1 ) ll_hist = [ ll for _ , _ , _ , ll in model . history ] mu_hist = [ mu for _ , _ ,( mu , _ , _ ), _ in model . history ] In [6]: plt_model = MixedGaussian ( K = 3 ) plt_model . N , plt_model . M = data . shape L_old = min ( ll_hist ) - 300 for epoch , idx ,( mu , S , pi ), ll in model . history [: - 1 ]: fig = plt . figure ( figsize = ( 12 , 8 )) ll_old = ll_hist [ epoch ]; ll_new = ll_hist [ epoch + 1 ] mu_old = mu_hist [ epoch ]; mu_new = mu_hist [ epoch + 1 ] L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 dL_old = ll_old - L_old ; dL_new = L_new - ll_old ; dll_old = ll_new - ll_old ax1 = fig . add_subplot ( 2 , 2 , 1 ) plt_model . mu = mu ; plt_model . S = S ; plt_model . pi = pi gammas = plt_model . predict ( XYs ) Zs = np . sum ( gammas , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. ax1 . pcolor ( Xs , Ys , Zs , alpha =. 5 , cmap = \"jet\" ) ax1 . scatter ( X , Y , c = idx , cmap = \"prism\" ) ax1 . set_xlim ( xmin , xmax ), ax1 . set_ylim ( ymin , ymax ), ax1 . set_title ( f \"epochs: {epoch:>02}\" , fontsize = 18 ) ax2 = fig . add_subplot ( 2 , 2 , 2 ) ax2 . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linewidth = 3 ) ax2 . axhline ( L_old , color = \"black\" , label = \"$L(q,θold)$\" , linestyle = \":\" ) ax2 . arrow ( x = 0.3 , y = L_old , dx = 0 , dy = dL_old , head_width = dL_old / 6000 , head_length = dL_old * 0.1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax2 . set_title ( f \"E step (Epoch={epoch})\" , fontsize = 18 ), ax2 . legend (), ax2 . set_xticks ([]), ax2 . set_ylim ( - 600 , - 570 ) ax3 = fig . add_subplot ( 2 , 2 , 3 ) for k in range ( K ): xb , yb = mu_old [ k ]; xa , ya = mu_new [ k ] ax3 . plot (( xb , xa ),( yb , ya ), color = \"black\" ) ax3 . scatter ( xb , yb , color = \"black\" , s = 50 ) ax3 . scatter ( xa , ya , color = \"red\" , marker = \"*\" , s = 150 ) ax3 . set_xlim ( xmin , xmax ), ax3 . set_ylim ( ymin , ymax ), ax3 . set_title ( \"θ → θnew\" ) ax3 . grid () ax4 = fig . add_subplot ( 2 , 2 , 4 ) L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 ax4 . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linestyle = \"--\" ) ax4 . axhline ( ll_new , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θnew)$\" , linewidth = 3 ) ax4 . axhline ( L_new , color = \"black\" , label = \"$L(q,θnew)$\" , linestyle = \":\" ) ax4 . arrow ( x = 0.7 , y = ll_old , dx = 0 , dy = dll_old , head_width = dll_old / 6000 , head_length = dll_old * 0.1 , fc = 'k' , ec = 'k' , length_includes_head = True ) ax4 . arrow ( x = 0.3 , y = ll_old , dx = 0 , dy = dL_new , head_width = dL_new / 6000 , head_length = dL_new * 0.1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax4 . set_title ( f \"M step (Epoch={epoch})\" , fontsize = 18 ), ax4 . legend (), ax4 . set_xticks ([]), ax4 . set_ylim ( - 600 , - 570 ) plt . tight_layout () plt . savefig ( f \"img/img{epoch:>02}\" ) L_old = L_new fig_no = 0 L_old = min ( ll_hist ) - 300 for epoch in range ( len ( model . history ) - 1 ): ll_old = ll_hist [ epoch ]; ll_new = ll_hist [ epoch + 1 ] L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 dL_old = ll_old - L_old ; dL_new = L_new - ll_old ; dll_old = ll_new - ll_old # Estep fig = plt . figure ( figsize = ( 3 , 10 )) ax = fig . add_subplot ( 1 , 1 , 1 ) ax . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linewidth = 3 ) ax . axhline ( L_old , color = \"black\" , label = \"$L(q,θold)$\" , linestyle = \":\" ) ax . arrow ( x = 0.3 , y = L_old , dx = 0 , dy = dL_old , head_width = dL_old / 60 , head_length = dL_old * 2e-1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax . set_title ( f \"E step (Epoch={epoch})\" , fontsize = 18 ), ax . legend (), ax . set_xticks ([]), ax . set_ylim ( - 600 , - 570 ) plt . savefig ( f \"img/img{fig_no:>02}\" ); fig_no += 1 plt . clf () # Mstep fig = plt . figure ( figsize = ( 3 , 10 )) ax = fig . add_subplot ( 1 , 1 , 1 ) L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 ax . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linestyle = \"--\" ) ax . axhline ( ll_new , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θnew)$\" , linewidth = 3 ) ax . axhline ( L_new , color = \"black\" , label = \"$L(q,θnew)$\" , linestyle = \":\" ) ax . arrow ( x = 0.7 , y = ll_old , dx = 0 , dy = dll_old , head_width = dll_old / 60 , head_length = dll_old * 2e-1 , fc = 'k' , ec = 'k' , length_includes_head = True ) ax . arrow ( x = 0.3 , y = ll_old , dx = 0 , dy = dL_new , head_width = dL_new / 60 , head_length = dL_new * 2e-1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax . set_title ( f \"M step (Epoch={epoch})\" , fontsize = 18 ), ax . legend (), ax . set_xticks ([]), ax . set_ylim ( - 600 , - 570 ) plt . savefig ( f \"img/img{fig_no:>02}\" ); fig_no += 1 plt . clf () L_old = L_new Section4.2 Mixture Model Implementation Gaussian Mixture Distribution k-means clustering Section4.3 Linear Regression Least Squares polynomial function we observe a real-value input variable $x$ and we wish to use this observation to predict the value of a real-valued target variable $t$. In the most simplest approach based on curve fitting, we shall fit the data using a polynomial function of the form : $$y(x,\\mathbf{w}) = w_0+w_1x+w_2x&#94;2+\\cdots+w_Mx&#94;M=\\sum_{j=0}&#94;Mw_jx&#94;j\\qquad (1.1)$$ data we are given a training set comprising $N$ observation of $x$, written $\\mathbf{X}\\equiv(\\mathbf{x_1},\\ldots,\\mathbf{x}_N)&#94;T$ with corresponding observation of the values of $t$, denoted $\\mathbf{t}\\equiv(t_1\\ldots,t_N)&#94;T$ we can difine $M$, which is the order of the polynomial. The values of the coefficients($w_j$) will be determined by fitting the polynomial to the training data. This can be done by minimizing an error function that measures the misfit between the function $y(x,\\mathbf{w})$ and the training set data points. One simple choice of error function, which is widely used, is given by the sum of the squares of the errors $$E(\\mathbf{w}) = \\frac{1}{2}\\mathrm{RSS} = \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\{y(\\mathbf{x}_n,\\mathbf{w}) - t_n\\right\\}&#94;2\\qquad (1.2)$$ (the factor of $1/2$ is included for later convenience.) Trainig Aim: find the best $\\mathbf{w}&#94;{\\star}=\\underset{w\\in\\mathbb{R}}{\\mathrm{argmin}}\\left\\{\\mathrm{RSS}(\\mathbf{w})\\right\\}$ $\\mathbf{t} = \\left(\\begin{matrix}t_1\\\\\\vdots\\\\t_N\\end{matrix}\\right),\\quad\\mathbf{X} = \\left(\\begin{matrix}x_1&#94;0&x;_1&#94;1&\\cdots&x;_1&#94;M\\\\x_2&#94;0&x;_2&#94;1&\\cdots&x;_2&#94;M\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\x_N&#94;0&x;_N&#94;1&\\cdots&x;_N&#94;M\\end{matrix}\\right),\\quad\\mathbf{w}=\\left(\\begin{matrix}w_1\\\\\\vdots\\\\w_M\\end{matrix}\\right)$ $\\mathrm{RSS}(\\mathbf{w}) = \\left(\\mathbf{t} - \\mathbf{Xw}\\right)&#94;T\\left(\\mathbf{t} - \\mathbf{Xw}\\right)$ Solution: $$ \\begin{aligned} \\frac{\\partial E(\\mathbf{w})}{\\partial\\mathbf{w}} &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\|\\mathbf{t}-\\mathbf{Xw}\\|&#94;2\\\\ &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\|\\mathbf{t}\\|&#94;2 - 2\\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{t} + \\|\\mathbf{Xw}\\|&#94;2\\right)\\\\ &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\|\\mathbf{t}\\|&#94;2 - 2\\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{t} + \\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{Xw}\\right)\\\\ &=\\frac{1}{2} \\left(-2\\mathbf{X}&#94;T\\mathbf{t} + \\left(\\mathbf{X}&#94;T\\mathbf{X} + \\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;T\\right)\\mathbf{w}\\right)\\\\ &= -\\mathbf{X}&#94;T\\mathbf{t}+\\mathbf{X}&#94;T\\mathbf{Xw}=\\mathbf{0}\\\\ \\therefore\\mathbf{w}&#94;{\\star} &= \\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{t} \\end{aligned}$$ ※ In the following programs, I use np.linalg.solve to calcurate $\\mathbf{w}&#94;{\\ast}$ equation program $$\\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)\\mathbf{w}&#94;{\\star} = \\mathbf{X}&#94;T\\mathbf{t}$$ w = np.linalg.solve(X.T.dot(X), X.T.dot(t)) In [7]: N = 15 Ms = [ 2 , 4 , 8 , 16 ] seed = 0 In [8]: # Training data. x = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = N ) Noise = np . random . RandomState ( seed ) . normal ( loc = 0 , scale = 0.1 , size = N ) t = np . sin ( 2 * np . pi * x ) + Noise In [9]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Regularized Least Square $$ \\begin{aligned} E(\\mathbf{w}) &= E_{D}(\\mathbf{w}) + \\lambda E_W(\\mathbf{w}) & (3.24)\\\\ &= \\frac{1}{2}\\mathrm{RSS} + \\lambda\\frac{1}{2}\\mathbf{w}&#94;T\\mathbf{w}\\\\ &= \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\{y(\\mathbf{x}_n,\\mathbf{w}) - t_n\\right\\}&#94;2+\\frac{1}{2}\\mathbf{w}&#94;T\\mathbf{w} & (3.27)\\\\ \\therefore\\mathbf{w}&#94;{\\star} &= \\left(\\lambda\\mathbf{I} + \\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{t} & (3.28) \\end{aligned} $$ In [10]: lambda_ = 1e-4 In [11]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( lambda_ * np . identity ( M + 1 ) + X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $,$\\lambda= {lambda_} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Section4.4 Bayesian Inference Maximal Likelihood Estimate $$ l(\\boldsymbol{\\theta}|D) = \\log L(\\boldsymbol{\\theta}|D) = \\log\\mathbb{P}(D|\\boldsymbol{\\theta})\\\\ \\hat{\\boldsymbol{\\theta}}_{\\text{ML}} = \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}l(\\boldsymbol{\\theta}|D) $$ ※ $l$: large → High probability of observing $D$ from the model $\\boldsymbol{\\theta}$ Maximum a Posteriori Estimate Maximum a posteriori estimate $$ \\begin{aligned} \\hat{\\boldsymbol{\\theta}_{\\text{MAP}}} &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}f(\\boldsymbol{\\theta}|D)\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}f(D|\\boldsymbol{\\theta})f(\\boldsymbol{\\theta})\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}\\left\\{l(\\boldsymbol{\\theta}|D) L \\log f(\\boldsymbol{\\theta})\\right\\}\\\\ \\end{aligned} $$ Posterior mean estimate $$ \\hat{\\boldsymbol{\\theta}_{\\text{PME}}} = \\int\\boldsymbol{\\theta}f(\\boldsymbol{\\theta}|D)d\\boldsymbol{\\theta} $$ Implementation of Gaussian Prior for Regression. In [12]: seed = 123 In [13]: from kerasy.ML.linear import BayesianLinearRegression from kerasy.utils.preprocessing import GaussianBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian In [14]: N = 25 ; D = 1 ; M = 25 xmin = 0 ; xmax = 1 In [15]: alpha = 1 beta = 25 In [16]: x_test = np . linspace ( xmin , xmax , 1000 ) y_test = np . sin ( 2 * np . pi * x_test ) x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 1 / beta , seed = seed ) y_train += y_noise In [17]: # transform mu = np . linspace ( xmin , xmax , M ); sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) x_train_features = phi . transform ( x_train ) x_test_features = phi . transform ( x_test ) In [18]: random_idx = np . random . RandomState ( seed ) . choice ( N , N ) In [19]: fig = plt . figure ( figsize = ( 16 , 8 )) for i , n in enumerate ([ 1 , 2 , 4 , 25 ]): ax = fig . add_subplot ( 2 , 2 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( x_train_features [ random_idx [: n ]], y_train [ random_idx [: n ]]) y_pred , y_std = model . predict ( x_test_features ) ax . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) ax . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( x_train [ random_idx [: n ]], y_train [ random_idx [: n ]], s = 150 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) ax . set_ylim ( - 1.5 , 1.5 ), ax . legend (), ax . set_title ( f \"Bayesian Linear Regression (N= {n} )\" ) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-4.html"},{"title":"レポート課題3(10/17出題)","text":"5g4Wh3zlai1lzA8DAOq48w==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report3.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report3.html"},{"title":"連続最適化(2)制約付き最適化","text":"講師： 佐藤一誠 参考書： 最適化手法 参考書： 機械学習のための連続最適化 講義概要 等式制約付き最適化問題 ラグランジュ未定乗数法 ラグランジュ双対問題 双対変数の最適化 不等式制約付き最適化問題 制約なし最適化問題への変換 双対問題 まとめ 制約付き最適化問題(constrained optimization problem) \\(\\mathcal{X}\\subset\\mathbb{R}&#94;d\\) 上に定義される関数 \\(f:\\mathcal{X}\\rightarrow\\mathbb{R}\\) の最小値を求める。 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ &h(\\mathbf{x})\\leq\\mathbf{0} \\end{aligned} $$ \"subject to\"は、 「…を条件として」 という意味。 \\(g_i,h_i\\) は互いに 一次独立(linearly independent) であると仮定。 実行可能解(feasible solution) ：全ての制約条件を満たす \\(\\mathbf{x}\\) 凸最適化問題(convex optimization problem) ：関数 \\(f\\) が凸、集合 \\(\\mathcal{X}\\) が凸、制約条件 \\(\\mathbf{g},\\mathbf{h}\\) が凸であれば、最適値が一意に定まる。 ※ 以下、凸最適化問題を考える。 等式制約付き最適化問題 等式制約付き最適化問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ \\end{aligned} $$ \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) + c_k\\|\\mathbf{g}(x)\\|&#94;2$$ \\(c_k\\) の値を徐々に増やしていく。 $$0 < c_1 < c_2 < \\cdots$$ ラグランジュ未定乗数法 詳しくは ラグランジュ未定乗数法 に記載されているので、ここでは具体例を紹介する。 問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{min : }}&3x&#94;2 + 2y&#94;2\\\\ \\text{subject to : }&x+y=1\\\\ \\end{aligned} $$ 解答 ラグランジュ関数は、 $$L(x,y,\\lambda) = 3x&#94;2 + 2y&#94;2 + \\lambda(x+y-1)$$ となるから、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x} &= 6x+\\lambda=0 &\\therefore x = -\\frac{1}{6}\\lambda\\\\ \\frac{\\partial L}{\\partial y} &= 4y+\\lambda=0 &\\therefore y = -\\frac{1}{4}\\lambda\\\\ \\frac{\\partial L}{\\partial \\lambda} &= x+y-1=0 &\\therefore \\lambda = -\\frac{12}{5}\\\\ \\end{aligned} $$ よって、 \\((x,y) = (0.4,0.6)\\) ラグランジュ双対問題 これも、詳しくは ラグランジュ双対問題 に記載されているので、ここでは具体例を紹介する。 問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{min : }}&3x&#94;2 + 2y&#94;2\\\\ \\text{subject to : }&x+y=1\\\\ \\end{aligned} $$ 解答 ラグランジュ関数は、 $$L(x,y,\\lambda) = 3x&#94;2 + 2y&#94;2 + \\lambda(x+y-1)$$ となるから、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x} &= 6x+\\lambda=0 &\\therefore x = -\\frac{1}{6}\\lambda\\\\ \\frac{\\partial L}{\\partial y} &= 4y+\\lambda=0 &\\therefore y = -\\frac{1}{4}\\lambda \\end{aligned} $$ よって、これらを \\(L(x,y,\\lambda)\\) に代入して、 $$\\omega(\\lambda) = \\underset{x,y\\in\\mathbb{R}}{\\inf}L(x,y,\\lambda) = -\\frac{5}{24}\\lambda&#94;2-\\lambda$$ したがって、 \\(\\underset{\\lambda\\in\\mathbb{R}}{\\text{argmax}}\\omega(\\lambda) = -\\frac{12}{5}\\Longrightarrow(x,y) = (0.4,0.6)\\) 双対変数の最適化 上の問題では、双対変数 \\(\\lambda\\) の最適化問題を解析的に解けたが、解析的に解くことができない問題もある。その場合に使うのが 双対上昇法 や 乗数法 と呼ばれる 双対変数の勾配上昇 を行う手法である。 手法 数式 解説 双対上昇法 $$\\begin{aligned}\\mathbf{x}_{k+1} &= \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}L(\\mathbf{x},\\boldsymbol{\\lambda}_{k})\\\\\\boldsymbol{\\lambda}_{k+1} &= \\boldsymbol{\\lambda}_k + \\varepsilon_k\\nabla\\omega(\\mathbf{\\boldsymbol{\\lambda}}_k) \\\\&= \\boldsymbol{\\lambda}_k + \\varepsilon_k\\mathbf{g}(\\mathbf{x}_{k+1})\\end{aligned}$$ 適当な初期値から，ラグランジュ関数の最小化と双対変数の勾配上昇を交互に実行 乗数法 $$\\begin{aligned}\\mathbf{x}_{k+1} &= \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}L_c(\\mathbf{x},\\boldsymbol{\\lambda}_{k})\\\\\\boldsymbol{\\lambda}_{k+1} &= \\boldsymbol{\\lambda}_k + c\\nabla\\omega(\\mathbf{\\boldsymbol{\\lambda}}_k) \\\\&= \\boldsymbol{\\lambda}_k + c\\mathbf{g}(\\mathbf{x}_{k+1})\\end{aligned}$$ 適当な初期値から， 拡張ラグランジュ関数 の最小化と双対変数の勾配上昇を交互に実行 なお、 拡張ラグランジュ関数(augmented Lagrangian) は、以下で表される関数で、二次の項を加えることで凸性を増している。 $$L_c(\\mathbf{x},\\boldsymbol{\\lambda}) = f(\\mathbf{x}) + \\boldsymbol{\\lambda}&#94;T\\mathbf{g}(\\mathbf{x}) + \\frac{c}{2}\\|\\mathbf{g}(\\mathbf{x})\\|&#94;2$$ ※実装は レポート課題3 に記載。 不等式制約付き最適化問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&h(\\mathbf{x})\\leq\\mathbf{0}\\\\ \\end{aligned} $$ 実行可能解 \\(\\mathbf{x}\\) において \\(h_i(\\mathbf{x}) = 0\\) の時、この制約を 有効制約(active constraint) と呼ぶ。 実行可能解 \\(\\mathbf{x}\\) においてそれ以外の時、この制約を 無効制約(inactive constraint) と呼ぶ。 制約なし最適化問題への変換 障壁法(barrier method) 初期値を \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の制約なし最適化問題を解く。 $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) - c_k\\log(-h(\\mathbf{x}))$$ \\(c_k\\) の値を徐々に減らしていく。 途中の解 \\(\\mathbf{x}_{k+1}\\) が常に \\(h(\\mathbf{x}_{k+1})\\leq0\\) を満たす （つまり、実行可能領域の内側にある） ことから、 内点法(interior-point method) ともよばれる。 \\(c_k\\) の決め方が難しい。 罰則法(penalty method) 初期値を \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の制約なし最適化問題を解く。 $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) + c_k\\max(0,h(\\mathbf{x}))&#94;2$$ \\(c_k\\) の値を徐々に増やしていく。 途中の解 \\(\\mathbf{x}_{k+1}\\) が一般に \\(h(\\mathbf{x}_{k+1})>0\\) を満たす （つまり、実行可能領域の外側にある） ことから、 外点法(exterior-point method) ともよばれる。 \\(c_k\\) の決め方が難しい。 射影勾配法(projected gradient method) 勾配降下（ \\(\\tilde{\\mathbf{x}}_{k+1} = \\mathbf{x}_k-\\varepsilon_k\\nabla f(\\mathbf{x}_k)\\) ）と実行可能領域への射影（ \\(\\mathbf{x}_{k+1} = \\mathbf{P}_k\\tilde{\\mathbf{x}}_{k+1}\\) ）を繰り返す。 まとめると $$\\mathbf{x}_{k+1} = \\mathbf{P}_k\\left(\\mathbf{x}_k - \\varepsilon_k\\nabla f(\\mathbf{x}_k)\\right)$$ 射影が簡単に計算できる時、効率が良い。 双対問題 詳しくは ラグランジュ未定乗数法 に記載。 まとめ 制約付き最適化問題： $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ &h(\\mathbf{x})\\leq\\mathbf{0} \\end{aligned} $$ ラグランジュ関数： $$L\\left(\\mathbf{x},\\boldsymbol{\\lambda},\\boldsymbol{\\mu}\\right) = f(\\mathbf{x}) + \\boldsymbol{\\lambda}&#94;Tg(\\mathbf{x}) + \\boldsymbol{\\mu}&#94;Th(\\mathbf{x})$$ 双対問題： $$ \\begin{aligned} \\underset{\\boldsymbol{\\lambda,\\mu},\\ \\mathbf{x}\\in\\mathcal{X}}{\\text{maximization : }}&L\\left(\\mathbf{x},\\boldsymbol{\\lambda},\\boldsymbol{\\mu}\\right)\\\\ \\text{subject to : }&\\boldsymbol{\\mu}\\geq\\mathbf{0}\\\\ \\end{aligned} $$ KKT条件： $$ \\begin{aligned} \\begin{cases} \\nabla_{\\mathbf{x}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) = \\mathbf{0}\\\\ \\nabla_{\\boldsymbol{\\lambda}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) = \\mathbf{0} & \\boldsymbol{\\mu}&#94;{\\ast}\\geq\\mathbf{0}\\\\ \\nabla_{\\boldsymbol{\\mu}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) \\leq \\mathbf{0} & \\mu_i&#94;{\\ast}h_i(\\mathbf{x}&#94;{\\ast}) = 0,\\ \\forall i \\end{cases} \\end{aligned} $$ .prompt { /* This is for jupyter blog.*/ min-width: 0; /* This padding is tuned to match the padding on the CodeMirror editor. */ padding: 0em 0.4em 0em 0em; margin: 0px; font-family: monaco; } /*蛍光ペン(pink)*/ .marker-pink { color: #c45a5a; background: linear-gradient(transparent 70%, #ff66ff 60%); font-weight: bold; } /*蛍光ペン(blue) & hover info*/ .marker-info { color: #5C7DC4; background: linear-gradient(transparent 70%, #66FFCC 60%); font-weight: bold; position: relative; cursor: pointer; } .marker-info:hover:before { opacity: 1; z-index: 2; } .marker-info:before { content: attr(aria-label); opacity: 0; position: absolute; top: 30px; right: -90px; font-size: 14px; width: 300px; padding: 10px; color: #fff; background-color: #555; border-radius: 3px; pointer-events: none; } /* 枠囲み */ .frame { border: solid 1.0px #000000; padding: 0.5em 1em; margin: 2em 0; } /* 暗記用 question box */ span .qbox{ display: none; } span.qbox-wrapper:hover .qbox-default{ display: none; } span.qbox-wrapper:hover .qbox{ display: inline; } .qbox-wrapper{ font-weight: bold; padding: 5px 10px; border-radius: 5px; border: solid 2px #000000; margin: 5px } .qbox-wrapper:hover{ text-shadow: 0px 0px 6px rgba(255, 255, 255, 1); -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); transition: all 0.4s ease 0s; } /* 画像吹き出し */ .balloon { display: table; width: 100%; } .balloon_img { display: table-cell; vertical-align: middle; width: 50%; padding-right: 10px; } .balloon_comment { border: #83274e solid 4px; position: relative; background: #fff; padding: 12px; border-radius: 13px; display: block } .balloon_comment::before { content: \"\"; position: absolute; border-right: 23px solid #83274e; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -23px; } .balloon_comment::after { content: \"\"; position: absolute; border-right: 24px solid #fff; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -17px; } if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-3.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-3.html"},{"title":"RNA-seqデータ解析（バッチスクリプト版）","text":"THdhTv3e2MrkZnycWCI/+w==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-12.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-12.html"},{"title":"RNA-seqデータ解析（対話モード版）","text":"ZegukYmAAlu4VWtZ1BkdVg==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-11.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-11.html"},{"title":"ゲノム解析ツールの環境構築","text":"5D0r7gbEqb1SPoQx4daY/w==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-10.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-10.html"},{"title":"逐次最小問題最適化法(SMO)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt 二次計画問題を解くアルゴリズム概観 アルゴリズム 説明 伝統的な二次計画法のアルゴリズム 計算コスト及びメモリ使用量の面で現実的には厳しい。 チャンキング(chunking) カーネル行列からラグランジュ乗数が $0$ となるデータに対応する行および列を取り除いても、ラグランジュ関数が不変であることを利用し、元々の二次計画問題は、より次元数の小さな問題を順番に解くことで、最終的には $0$ とならないラグランジュ乗数だけを残す、という問題に帰着する。 射影共役勾配法(projected conjugate gradient method) チャンキングを実装する手法 分解法(decomposition method) チャンキングと同様 サイズの小さな二次計画問題を繰り返し解く という手法だが、ここの部分問題の大きさが一定であるため、任意の大きさのデータに対応できる。 逐次最小問題最適化法(SMO;sequential minimal optimization) 分解法の計算コストを削減した手法。たった２つのラグランジュ乗数を含む部分問題を逐次解いていくことで最終的な解を得る。 逐次最小問題最適化法(SMO;sequential minimal optimization) ラグランジュ双対問題 を以下のように定義する。 $$ \\begin{aligned} \\tilde{L}(\\mathbf{a}) &=\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)& (7.10)\\\\ a_n & \\geq 0,\\quad n=1,\\ldots,N & (7.11)\\\\ \\sum_{n=1}&#94;Na_nt_n &= 0 & (7.12) \\end{aligned} $$ 逐次最小問題最適化法(SMO;sequential minimal optimization) は反復法である。 適当な初期値 $\\mathbf{a}&#94;{(0)}$ から出発して、更新 $\\mathbf{a}&#94;{(k)} \\rightarrow \\mathbf{a}&#94;{(k+1)}$ を繰り返す。 この際、 １度には2つの成分しか動かさない。 ここで、$a_p$ と $a_q$ だけ動かすことを考える。 （他の $a_n$ は定数とみなす） この時、制約条件より $$ a_pt_p + a_qt_q = 0-\\sum_{n\\neq p,q} a_nt_n = \\mathrm{const.}$$ が成立する。したがって、 $$ \\frac{\\partial a_q}{\\partial a_p} = -\\frac{t_p}{t_q} =-t_pt_q \\cdots (\\ast)$$ と解析的に偏微分を求めることが可能である。 目的関数 $\\tilde{L}$ の変化量 以下、$K_{ij} = k\\left(\\mathrm{x}_i,\\mathrm{x}_j\\right)$ とおく。ここで、 $$a_p\\mapsto a_p+\\Delta_p, \\quad a_q\\mapsto a_q+\\Delta_q$$ と更新した時、目的関数 $\\tilde{L}$ の変化量 $\\Delta\\tilde{L}$ は、 $$ \\begin{aligned} \\Delta\\tilde{L} &= \\Delta_p + \\Delta_q - \\Delta_pt_p\\sum_{n=1}&#94;Na_nt_nk(\\mathbf{x}_p,\\mathbf{x}_n) - \\Delta_qt_q\\sum_{n=1}&#94;Na_nt_nk(\\mathbf{x}_q,\\mathbf{x}_n)\\\\ &-\\frac{1}{2}\\left[\\Delta_p&#94;2k(\\mathbf{x}_p,\\mathbf{x}_p) + 2\\Delta_p\\Delta_qt_pt_qk(\\mathbf{x}_p,\\mathbf{x}_q) + \\Delta_q&#94;2k(\\mathbf{x}_q,\\mathbf{x}_q)\\right] \\end{aligned} $$ となる。 $(\\ast)$ より $\\Delta_q = -t_pt_q\\Delta_p$ である。 $t_p=t_q(\\Longleftrightarrow\\Delta_q=-\\Delta_p)$ の時と $t_p\\neq t_q$ の時に場合分けをし、それぞれ $\\Delta_p$ で変化量を偏微分して $0$ とおく。 結果は共に等しく、以下で表される。 $$ \\begin{aligned} \\Delta_p &= \\frac{1-t_pt_q + t_p\\left(\\sum_{n=1}&#94;Na_nt_nK_{qn} - \\sum_{n=1}&#94;Na_nt_nK_{pn}\\right)}{K_{pp} - 2K_{pq} + K_{qq}}\\\\ &= \\frac{1-t_pt_q + t_p\\left(y(\\mathbf{x_q}) - y(\\mathbf{x}_q)\\right)}{K_{pp} - 2K_{pq} + K_{qq}}\\\\ \\end{aligned} $$ クリッピング この時、 $t_pa_p+t_qa_q=c$ $a_p\\geq0$ $a_q\\geq0$ が成立していなければならないので、以下を満たすように $\\Delta_p$ の クリッピング を行う必要がある。 $t_p=t_q$ のときは $ 0 \\leq a_p + \\Delta_p \\leq c/t_p$ $t_p=-t_q$ のときは $ \\mathrm{max}\\{0,c/t_p\\}\\leq a_p+\\Delta_p$ 変数の選択方法 最後に、動かす $\\mu_p,\\mu_q$ の選択基準であるが、SMO法の発見者である $John C. Platt$ の論文に従うならば以下の様になる。 $KTT$条件を破る$a_p$を$1$つ目に選ぶ。 続いて、$\\left|y\\left(\\mathbf{x_q}\\right)-y\\left(\\mathbf{x_p}\\right)\\right|$ が最大となる$a_p$を次に選ぶ。 これは、$\\left|y\\left(\\mathbf{x_q}\\right)-y\\left(\\mathbf{x_p}\\right)\\right|$ が大きければそれだけステップ幅も大きくなるため収束が早くなるというヒューリスティックス（直感）である。 これを繰り返して、$\\tilde{L}$ が収束するまで反復を繰り返せば学習完了である。 実装例 kerasy.ML.svm.BaseSVM に記載。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-5.html"},{"title":"ラグランジュ双対問題","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) はじめに このノートは、 Qiita記事『ラグランジュ双対問題について解説』 を引用しています。 ラグランジュ双対関数 ラグランジアン 次の最小化問題を考える. $$ \\begin{aligned} \\min_{x\\in\\mathbb{R}&#94;n} &~ f_0(x)\\\\ \\mathrm{s.t.} &~ f_i(x)\\le 0,~ i=1,\\ldots,m\\\\ &~ h_i(x)=0, ~i=1,\\ldots, p \\end{aligned} $$ 実行可能領域は 空でない とする この最適化問題の 最適値 を \\(p&#94;\\star\\) と書く 凸性は特に仮定しない 主問題 という ラグランジアンは次のように定義される。 $$L(x, \\lambda, \\nu):=f_0(x)+\\sum_{i=1}&#94;m\\lambda_i f_i(x)+\\sum_{i=1}&#94;p\\nu_i h_i(x)$$ \\(\\lambda_i, \\nu_i\\) はラグランジュ未定乗数 ラグランジュ双対関数 ラグランジュ双対関数は次のように定義される. $$ \\begin{aligned} g(\\lambda,\\nu)&:=\\inf_{x\\in D} L(x, \\lambda, \\nu)\\\\ &=\\inf_{x\\in D} \\left(f_0(x)+\\sum_{i=1}&#94;m\\lambda_i f_i(x)+\\sum_{i=1}&#94;p\\nu_i h_i(x)\\right) \\end{aligned} $$ \\(D:=\\bigcap_{i=0}&#94;m \\mathrm{dom}(f_i) \\cap \\bigcap_{i=1}&#94;p \\mathrm{dom}(h_i)\\) 双対関数は, \\((\\lambda,\\nu)\\) のアフィン関数の各点でのinfになっているため, 必ずconcave(上に凸)となる (もとの問題が凸でなくても) 証明してみた: $$ \\begin{aligned} & g(t\\lambda_a+(1-t)\\lambda_b, t\\nu_a+(1-t)\\nu_b)\\\\ =&\\inf_{x\\in\\mathcal{D}}\\left(tL(x,\\lambda_a,\\nu_a)+(1-t)L(x,\\lambda_b,\\nu_b)\\right)\\\\ \\ge& t\\inf_{x\\in\\mathcal{D}}L(x,\\lambda_a,\\nu_a)+(1-t)L(x,\\lambda_b,\\nu_b)\\\\ =& tg(\\lambda_a,\\nu_a)+(1-t)g(\\lambda_b,\\nu_b) \\end{aligned} $$ 最適値の下限 任意の \\(\\lambda\\ge0, \\nu\\) に対して, 次が成り立つ. \\($g(\\lambda,\\nu)\\le p&#94;\\star\\) 証明: \\(\\tilde{x}\\) を実行可能解とする: \\(f_i(\\tilde{x})\\le 0, h_i(\\tilde{x}) = 0\\) \\(\\lambda\\ge 0\\) を仮定 このとき, \\(L(\\tilde{x},\\lambda,\\nu)\\) の値は, \\(f_0(\\tilde{x})\\) でおさえられる: $$ L(\\tilde{x},\\lambda,\\nu)=f_0(\\tilde{x})+\\underbrace{\\sum_{i=1}&#94;{m}\\lambda_if_i(\\tilde{x})}_{\\le0}+\\underbrace{\\sum_{i=1}&#94;{p}\\nu_ih_i(\\tilde{x})}_{=0}\\le f_0(\\tilde{x}) $$ ゆえに, \\(g(\\lambda, \\nu)\\) は \\(f_0(\\tilde{x})\\) でおさえられる: $$ \\therefore~g(\\lambda, \\nu)=\\inf_{x\\in\\mathcal{D}}L(x,\\lambda,\\nu)\\le L(\\tilde{x},\\lambda,\\nu)\\le f_0(\\tilde{x}) $$ 任意の \\(\\tilde{x}\\) に対して, \\(g(\\lambda, \\nu)\\le f_0(\\tilde{x})\\) が成り立つため, \\(g(\\lambda, \\nu)\\le p&#94;\\star\\) が成り立つ. 結論: 双対関数の値は, 主問題の最適値を超えない 線形近似による解釈 元の主問題と等価な次の最小化問題を考える. $$ \\min_{x}~f_0(x)+\\sum_{i=1}&#94;{m}I_-(f_i(x))+\\sum_{i=1}&#94;{p}I_0(h_i(x)) $$ ただし, \\(I_{-},I_{0}\\) は 指示関数 : $$ I_-(u):=\\begin{cases} 0&u\\le 0\\\\ \\infty& u>0 \\end{cases},~~~ I_0(u):=\\begin{cases} 0&u = 0\\\\ \\infty& u\\ne 0 \\end{cases} $$ 最小化するのが目的であるが, 指示関数は制約を満たさないと無限大になってしまう. この指示関数は, 制約違反に対する不満度 を表していると解釈できる. ここで, \\(I_-(u)\\) を \\(\\lambda_i u (\\lambda_i\\ge 0)\\) \\(I_0(u)\\) を \\(\\nu_iu\\) というように指示関数を近似する. $$ \\min_{x}~L(x,\\lambda,\\nu)=f_0(x)+\\sum_{i=1}&#94;{m}\\lambda_i f_i(x)+\\sum_{i=1}&#94;{p}\\nu_i h_i(x) $$ これは制約違反をソフトに近似したものと考えられる もちろん, 制約を違反するほど不満度は上昇するようになっている 不等式制約に関して, 違反しているとき \\(f_i(x)>0\\) であり, \\(\\lambda_if_i(x)\\ge0\\) 任意の \\(u\\) に関して, \\(\\lambda_iu \\le I_-(u)\\) と \\(\\nu_iu \\le I_0(u)\\) が成り立つため, 双対関数が元の主問題の下限を与えることがわかる 共役関数 \\(f\\) の共役関数 \\(f&#94;\\ast\\) は次で定義される. $$ f&#94;*(y)=\\sup_{x\\in\\mathrm{dom} f}(y&#94;\\top x-f(x)). $$ 共役関数と双対問題には密接な関係がある. ( フェンシェル双対定理 ) たとえば, 機械学習のよくある形 $$ \\min_{w\\in\\mathbb{R}&#94;d} f(Xw)+g(w) $$ の双対問題は, $$ \\max_{\\alpha\\in\\mathbb{R}&#94;n} -f&#94;\\ast(-\\alpha)-g&#94;\\ast(X&#94;\\top\\alpha) $$ というように共役関数を使って表現できる. そのため, 凸共役 を覚えておけば, 形式的に双対問題を導出できる. 証明は簡単で, ラグランジアン \\(L(w,z,\\alpha)=f(z)+g(w)+\\alpha&#94;\\top(z-Xw)\\) を考えて, 双対関数の定義にしたがって \\(w\\in\\mathbb{R}&#94;d,z\\in\\mathbb{R}&#94;n\\) に関して最小化するだけだ. ちなみに, このとき最適解 \\(w&#94;\\star,\\alpha&#94;\\star\\) に関して $$ w&#94;\\star \\in \\partial g&#94;\\ast(X&#94;\\top \\alpha&#94;\\star), \\quad \\alpha&#94;\\star \\in -\\partial f(Xw&#94;\\star) $$ が成立する (KKT条件). ラグランジュ双対問題 双対関数から双対問題へ. ラグランジュ双対問題 ここまでで, 双対関数が主問題の下限を与えることを示した. 自然な疑問は, 「ラグランジュ双対関数から得られる最も良い下限はどれくらいなのか?」ということだ. 最も良い下限は次の最大化問題を解くことで得られる. $$ \\begin{aligned} \\max_{\\lambda,\\nu}~&g(\\lambda,\\nu)\\\\ \\mathrm{s.t.} ~&\\lambda\\ge0 \\end{aligned} $$ $ これは, ラグランジュ双対問題 と呼ばれる 双対実行可能領域: \\((\\lambda,\\nu)\\) に関して, \\(\\lambda\\ge0\\) かつ \\(g(\\lambda,\\nu)>-\\infty\\) \\((\\lambda&#94;\\star,\\nu&#94;\\star)\\) : 双対問題の最適解 \\(d&#94;\\star\\) : 双対問題の最適値 双対問題は必ず凸最適化問題 目的関数が必ずconcaveで, 制約が凸であるため これは, 主問題が凸最適化でなくても成り立つ 弱双対性 $$ d&#94;\\star\\le p&#94;\\star $$ 主問題の凸性にかかわらず, 成り立つ この不等式は, \\(p&#94;\\star, d&#94;\\star\\) が発散しないときに成り立つ \\(p&#94;\\star - d&#94;\\star\\) を 双対ギャップ という よく最適化アルゴリズムの停止条件に使われる \\(p&#94;\\star\\) を求めるのことが難しいときに \\(d&#94;\\star\\) を求めることで, \\(p&#94;\\star\\) の下限を知ることができる 双対問題は必ず凸であるため, 多くの場合効率的に解ける 強双対性 $$ d&#94;\\star=p&#94;\\star $$ 主問題の最適値が双対問題の最適値と一致するという性質 強双対性は常には成り立たない もし主問題が凸, すなわち: $$ \\begin{aligned} \\min_{x\\in\\mathbb{R}&#94;n} &~ f_0(x)\\\\ \\mathrm{s.t.} &~ f_i(x)\\le 0, ~i=1,\\ldots,m\\\\ &~ Ax=b \\end{aligned} $$ で \\(f_0,\\ldots,f_m\\) が 凸なら, たいていは(いつもではない)強双対性が成り立つ. たとえば, SVMの最適化問題は凸であり, 強双対性が成り立つため, 主問題/双対問題のどちらを解いてもよい. スレーター条件 次を満たすような \\(x\\in\\mathrm{relint}(D)\\) が存在することをいう. $$ f_i(x)<0,~i=1,\\ldots,m,~~~Ax=b $$ $ 主問題が凸でスレーター条件を満たすとき, 強双対性が成り立つ スレーター条件は強双対性の十分条件である (必要十分ではない) もし, \\(f_1,\\ldots,f_k\\) がアフィンなら, より弱い条件が成り立てばよい: $$ f_i(x)\\le 0,~i=1,\\ldots,k,~~~f_i(x)<0,~i=k+1,\\ldots,m,~~~Ax=b $$ 言い換えれば, アフィンの不等式制約は等号を含んでもよい 補足: int(内部)とrelint(相対的内部) \\(\\mathrm{int}(S)\\) : Sに含まれる最大開集合 Sから境界上の点を取り除いたもの \\(\\mathrm{relint}(S)\\) : Sによって拘束される線形空間上で, Sから境界上の点を取り除いたもの. intとrelintの違いのイメージとしては, まっすぐな下敷きのような平面を考えたとき, intは下敷きの平面ごと取り除いてしまい空集合になるのに対して, relintは下敷きの縁を削って残った部分. Example1 \\(S=\\lbrace(x_1,x_2)\\mid 0\\le x_1\\le 1,x_2=0\\rbrace\\) $$ \\mathrm{int}(S)=\\emptyset, \\mathrm{relint}(S)=\\{(x_1,x_2)\\mid 0 < x_1 < 1,x_2=0\\}, (\\mathrm{aff}(S)=\\{(x_1,x_2)\\in\\mathbb{R}&#94;2\\mid x_2=0\\}) $$ Example2 \\(S= \\lbrace (x_1,x_2)\\mid 0\\le x_1\\le 1,0\\le x_2\\le 1\\rbrace\\) $$ \\mathrm{int}(S)=\\mathrm{relint}(S)=\\{(x_1,x_2)\\mid 0 < x_1 < 1,0<x_2<1\\}, (\\mathrm{aff}(S)=\\{(x_1,x_2)\\in\\mathbb{R}&#94;2\\}) $$ 最適性条件 特に主問題の凸性を仮定しない. 相補性条件 特に, 強双対性条件を満たすと仮定すると, $$ \\begin{aligned} f_0(x&#94;\\star)&=g(\\lambda&#94;\\star,\\nu&#94;\\star)\\\\ &=\\inf_{x\\in D} \\left(f_0(x)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star h_i(x)\\right)\\\\ &\\le f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star h_i(x&#94;\\star)\\\\ &\\le f_0(x&#94;\\star) \\end{aligned} $$ 1行目: 強双対性 2行目: 双対関数の定義 3行目: \\(\\inf\\) の定義 4行目: \\(\\lambda_i&#94;\\star\\ge0, f_i(x&#94;\\star)\\le0, ~i=1,\\ldots,m\\) と \\(h_i(x&#94;\\star)=0, ~i=1,\\ldots,p\\) 1,3行目と3,4行目を考慮すると, $$ \\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x&#94;\\star)=0. $$ 和の各項は非負であるため, $$ \\lambda_i&#94;\\star f_i(x&#94;\\star)=0,~~~i=1,\\ldots,m. $$ これを相補性条件という もし \\(\\lambda_i&#94;\\star>0\\) なら, \\(f_i(x&#94;\\star)=0\\) もし \\(f_i(x&#94;\\star)<0\\) なら, \\(\\lambda_i&#94;\\star=0\\) KKT条件 (Karush-Kuhn-Tucker条件) 強双対性を仮定すると, \\(x&#94;\\star\\) は \\(L(x,\\lambda&#94;\\star,\\nu&#94;\\star)\\) を最小化するため, \\(x&#94;\\star\\) における勾配は0である: $$ \\nabla f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star \\nabla f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star\\nabla h_i(x&#94;\\star)=0 $$ ゆえに, 最適解で成り立つ式を列挙すると: \\(f_i(x&#94;\\star)\\le 0,~i=1,\\ldots,m\\) \\(h_i(x&#94;\\star)= 0,~i=1,\\ldots,p\\) \\(\\lambda_i\\ge0,~i=1,\\ldots,m\\) \\(\\lambda_i f_i(x&#94;\\star)= 0,~i=1,\\ldots,m\\) \\(\\nabla f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star \\nabla f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star\\nabla h_i(x&#94;\\star)=0\\) これがいわゆる KKT条件 である. (必要条件) まとめると, 強双対性を満たすなら, 最適解において主変数と双対変数はKKT条件を満たさなければならない. 主問題が凸であるとき, KKT条件は十分条件にもなる. つまり, ある点 \\(\\tilde{x},\\tilde{\\lambda}, \\tilde{\\nu}\\) がKKT条件を満たすなら, \\(\\tilde{x}=x&#94;\\star, \\tilde{\\lambda}=\\lambda&#94;\\star, \\tilde{\\nu}=\\nu&#94;\\star\\) . 十分条件の証明: $$ \\begin{aligned} g(\\tilde{\\lambda},\\tilde{\\nu})&=L(\\tilde{x},\\tilde{\\lambda},\\tilde{\\nu})\\\\ &= f_0(\\tilde{x})+\\sum_{i=1}&#94;m\\tilde{\\lambda}_i f_i(\\tilde{x})+\\sum_{i=1}&#94;p\\tilde{\\nu}_i h_i(\\tilde{x})\\\\ &= f_0(\\tilde{x}) \\end{aligned} $$ 1行目: \\(\\tilde{x}\\) がKKT条件の最後の条件を満たすため 主問題が凸であるため, \\(L(x,\\tilde{\\lambda},\\tilde{\\nu})\\) は \\(x\\) に関して凸である ( \\(\\because\\tilde{\\lambda}_i\\ge0\\) ) \\(\\therefore~L\\) を最小化する \\(x\\) は, 勾配が0である 2行目: ラグランジアンの定義 3行目: \\(\\tilde{x}\\) がKKT条件の2つ目と4つ目を満たすため この式は, 双対ギャップが0であることを意味するため, \\(\\tilde{x},\\tilde{\\lambda}, \\tilde{\\nu}\\) は最適解である. 結論: スレーター条件を満たすとき, KKT条件は最適性の必要十分条件となる if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-4.html"},{"title":"サポートベクターマシーン(SVM)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: seed = 0 サポートベクターマシーン(SVM) マージン最大化 に基づく線形識別器 カーネル関数と組み合わせることによって非線形な識別も可能 サンプル間の類似度にしか依存しない （→非ベクトルデータの分類にも適用可能 ） まとめ マージン最大化 という方針で誤差関数を定義する。 汎化性能を高めるために、 スラック変数 を導入して ソフトなマージン最大化に緩和 する ラグランジュ未定乗数法 を用いてラグランジュ関数を得る。 各パラメータについて微分する。 ラグランジュ関数に代入して 双対問題 を得る。 SMO法 などを用いて二次計画問題である双対問題を解く。 無効制約のデータ点は識別関数に影響しなくなる。 （SVMが疎になる。） マージン最大化 「個々のデータに関して確率計算をし、何らかの識別面を求める」 のではなく、 「汎化性能の最も高い識別面を直接考える」 そこで、 「マージン最大化」 という方針で識別面を最適化する。（正則化理論・VC理論により正当化されている。） 最も近いデータ $\\phi(\\mathbf{x}_n)$ までの距離（ マージン ）が最大となるような識別面を選ぶ。（ここでは、距離＝ユークリッド距離とする。） 識別面からちょうどマージンの分だけ離れた面上に乗る特徴ベクトル（一般に複数）を、(広義の) サポートベクトル (support vector) と呼ぶ。 学習法の定式化（2クラス分類） ※ 二クラスが線形分離可能であると仮定する。 線形識別関数が $y(\\mathbf{x}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x})+b$ で表され、$y(\\mathbf{x})$ の正負でクラスを識別するとする。 $y(\\mathbf{x})>0$ の時 $t=1$ $y(\\mathbf{x})<0$ の時 $t=-1$ したがって、 $t_ny(\\mathbf{x}_n)>0$ が全てのデータ $(\\mathbf{x}_n,t_n)$ に対して成り立つ （∵特徴空間で線形分離可能） 学習の目的は「パラメータ $\\mathbf{w}$ と $b$ を決定すること」。 データと識別面の最小距離は $1 / \\|\\mathbf{w}\\|$ で表される。（理由は以下） ※ 記述を簡単にするために線形識別問題の場合で考えるが、非線形写像 $\\phi$ を通しても同様の議論が成り立つ。 点 $\\mathbf{x}_n$ から識別面に下ろした垂線の足を $\\mathbf{x}_{n\\perp}$ 点 $\\mathbf{x}_n$ から識別面までの符号付き距離を $d_n$ と定義すると、 $\\mathbf{w}$ が識別面の法ベクトルであるから、 $\\mathbf{x}_{n\\perp} = \\mathbf{x}_n - d_n\\frac{\\mathbf{w}}{\\|\\mathbf{w}\\|}$ と表せる。 $\\mathbf{x}_{n\\perp}$ は識別面上にあるので、$\\mathbf{w}&#94;T\\mathbf{x}_{n\\perp} + b = 0$ が成り立つ。 したがって、 $$\\mathbf{w}&#94;T\\left(\\mathbf{x}_n - d_n\\frac{\\mathbf{w}}{\\|\\mathbf{w}\\|}\\right) + b = 0\\qquad \\therefore d_n = \\frac{\\mathbf{w}&#94;T\\mathbf{x}_n + b}{\\|\\mathbf{w}\\|}$$ として距離 $d_n$ が定義できる。ここで、$(\\mathbf{w},b)\\rightarrow(k\\mathbf{w},kb)$ としても $d_n$ の値は不変なので、 $$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n + b \\right)= 1\\qquad (7.4)$$ とスケーリングしても一般性を失わない。 なお、 このスケーリング下では、全てのデータ $\\mathbf{x}_n$ に対して $$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n + b \\right) \\geq 1\\qquad (7.5)$$ が成り立つ。 ここまでをまとめると、 マージン最大 は、 『$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n+b\\right)\\geq1\\quad(i=1,\\ldots,n)$ という条件下で、$\\frac{1}{2}||\\mathbf{w}||&#94;2$ を最小化する問題』 であると言える。 この制約付き最適化問題を解くために、$(7.5)$ の各制約式ごとにラグランジュ乗数 $a_n\\geq0$ を導入すると、次のラグランジュ関数が得られる。 $$L(\\mathbf{w},b,\\mathbf{a}) = \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2 - \\sum_{n=1}&#94;{N}a_n\\left\\{t_n\\left(\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n) + b\\right) - 1\\right\\}\\qquad (7.7)$$ よって、$\\mathbf{w},b$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) =0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) & (7.8)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_nt_n = 0 \\quad\\therefore\\sum_{n=1}&#94;Na_n&#94;{\\ast}t_n = 0 & (7.9)\\\\ \\end{aligned} $$ が得られる。これらの結果を $(7.7)$ に代入して $\\mathbf{w},b$ を消去すると、元の問題は以下の 双対問題 に変換される。 $$ \\tilde{L}(\\mathbf{a}) =\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.10)$$ なお、$\\mathbf{a}$ は以下の制約を満たす。 $$ \\begin{aligned} a_n & \\geq 0,\\quad n=1,\\ldots,N & (7.11)\\\\ \\sum_{n=1}&#94;Na_nt_n &= 0 & (7.12) \\end{aligned} $$ また、カーネル関数 $k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ は、$k(\\mathbf{x},\\mathbf{x}&#94;{\\prime}) = \\phi(\\mathbf{x})&#94;T\\phi(\\mathbf{x})$ と定義される。 この双対問題は二次計画問題であり、 逐次最小問題最適化法(SMO;sequential minimal optimization) などで解くことができる。 なお、今回の場合、 制約条件が全て線形 であることから 実行可能域が凸領域 であることがわかるので、 任意の局所解が大局解になる。 一旦最適な $\\mathbf{a}$ が求まると、識別関数 $y(\\mathbf{x})$ は、 $$y(\\mathbf{x}) = \\mathbf{w}&#94;{\\ast T}\\phi(\\mathbf{x})+b = \\sum_{n=1}&#94;N a_nt_nk(\\mathbf{x},\\mathbf{x}_n) + b \\qquad (7.13)$$ として表すことができる。ここで、 KKT条件より $a_n=0\\Leftrightarrow t_ny(\\mathbf{x}_n)-1>0$ のデータは識別関数に影響しないので、計算から除外することができる。（SVMが疎になる理由） なお、バイアスパタメータ $b$ は、任意のサポートベクトル $\\mathbf{x}_n$ が $t_ny(\\mathbf{x}_n) = 1$ を満たすことから、 $$ \\begin{aligned} &t;_n\\left(\\sum_{m\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m) + b\\right) = 1 & (7.17)\\\\ &\\therefore b&#94;{\\ast}= \\frac{1}{N_{\\mathcal{S}}}\\sum_{n\\in\\mathcal{S}}\\left(t_n-\\sum_{n\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\right)&(7.18) \\end{aligned} $$ として求めることができる。（数値計算の誤差の影響を小さくするため、$(7.17)$ の両辺に $t_n$ をかけ、全てのサポートベクトルで平均をとった。 In [3]: from kerasy.ML.svm import hardSVC In [4]: n_cls1 = 20 ; n_cls2 = 20 N = n_cls1 + n_cls2 In [5]: train_x = np . concatenate ([ np . random . RandomState ( seed ) . normal ( loc = [ 0.5 , 0 ], scale = [ 0.2 , 0.4 ], size = ( n_cls1 , 2 )), np . random . RandomState ( seed ) . normal ( loc = [ - 0.5 , 0 ], scale = [ 0.2 , 0.4 ], size = ( n_cls2 , 2 )) ]) train_y = np . concatenate ([ np . ones ( shape = n_cls1 ), - np . ones ( shape = n_cls2 ) ]) In [6]: X , Y = np . meshgrid ( np . linspace ( - 1 , 1 , 100 ), np . linspace ( - 1 , 1 , 100 )) In [7]: kernels = [ \"linear\" , \"polynomial\" , \"gaussian\" , \"sigmoid\" , \"laplacian\" , \"inverse_multiquadric\" ] In [8]: n_fig = len ( kernels ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i , kernel in enumerate ( kernels ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) model = hardSVC ( kernel = kernel ) model . fit ( train_x , train_y , max_iter = 1500 , sparse_memorize = False ) Z = np . vectorize ( lambda x , y : model . predict ( np . array ([ x , y ]) . reshape ( 1 , - 1 )))( X , Y ) == 1 ax . pcolor ( X , Y , Z , alpha = 0.3 ) for i in range ( N ): alpha = 1 if i in model . isSV () else 0.3 color = \"red\" if train_y [ i ] == 1 else \"blue\" ax . plot ( train_x [ i , 0 ], train_x [ i , 1 ], marker = \"o\" , color = color , markersize = 10 , alpha = alpha ) ax . set_title ( f \" {kernel} kernel\" ) ax . set_xlim ( - 1 , 1 ), ax . set_ylim ( - 1 , 1 ) plt . tight_layout () plt . show () ソフトマージン ここまで、 「二クラスが線形分離可能である」 という仮定を置いていたが、実際の問題では クラスの分布が重なる場合 があり、そのような場合訓練データを完全に分離する解が汎化能力に優れるとは限らない（というより、過学習する。） そこで、各学習データ $(\\mathbf{x}_n,t_n)$ に対して、 スラック変数 (slack variable) $\\xi_n\\geq 0$ を導入して、 $$ t_ny(\\mathbf{x}_n) \\geq 1 \\Longrightarrow t_ny(\\mathbf{x}_n) \\geq 1 - \\xi_n \\qquad (7.20)$$ と条件を緩める。 （ハードマージンの制約のソフトマージンへの緩和） つまり、 $\\xi_n > 1$ となるデータは誤識別している事になる。 ここでの目標は 『マージンよりも内側（$\\xi_n>0$）のデータ $n$ に対してソフトにペナルティを与えつつマージンを最大化する』 ことである。したがって、次の目的関数を最小化する。 $$C\\sum_{n=1}&#94;N\\xi_n + \\frac{1}{2}\\|\\mathbf{x}_n\\| \\qquad (7.21)$$ なお、$C>0$ は スラック変数を用いて表されるペナルティとマージンの大きさの間の トレードオフを制御するパラメータ である。 したがって、この最小化問題のラグランジュ関数は、新たにラグランジュ乗数 $\\{\\mu_n\\}$ を導入して以下のようになる。 $$L(\\mathbf{w},b,\\boldsymbol{\\xi},\\mathbf{a},\\boldsymbol{\\mu}) = \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2 + C\\sum_{n=1}&#94;N\\xi_n - \\sum_{n=1}&#94;{N}a_n\\left\\{t_n\\left(\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n) + b\\right) - 1 + \\xi_n\\right\\} - \\sum_{n=1}&#94;N\\mu_n\\xi_n\\qquad (7.22)$$ 先程同様 $\\mathbf{w},b,\\xi_n$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) =0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) & (7.29)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_nt_n = 0 \\quad\\therefore\\sum_{n=1}&#94;Na_n&#94;{\\ast}t_n = 0 & (7.30)\\\\ \\frac{\\partial L}{\\partial \\xi_n} &= C-a_n-\\mu_n \\quad\\therefore a_n = C-\\mu_n & (7.31) \\end{aligned} $$ が得られる。これらの結果を $(7.22)$ に代入すると、以下の 双対形のラグランジュ関数 が得られる。 $$ \\tilde{L}(\\mathbf{a}) =\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.32)$$ これは、先程の $(7.10)$ と同様の形である。なお、制約式は $$ \\begin{aligned} &a;_n \\geq 0,\\mu_n\\geq 0 \\quad n=1,\\ldots,N\\\\ &\\therefore 0\\leq a_n \\leq C & (7.33)\\\\ &\\sum_{n=1}&#94;Na_nt_n = 0 & (7.34) \\end{aligned} $$ である。 なお、バイアスパタメータ $b$ は、サポートベクトルは $a_n>0$ を満たすが、KKT条件より $a_n$ $\\mu_n$ $\\xi_n$ 説明 $a_n=0$ 識別関数に影響を及ぼさない。 $a_n $\\mu_n>0$ $\\xi_n=0$ ちょうどマージン境界上ある。 $a_n=C$ $\\mu_n=0$ $\\xi_n>0$ マージン内に侵入している。 となることから、$0 $$ \\begin{aligned} &t;_n\\left(\\sum_{m\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m) + b\\right) = 1 & (7.36)\\\\ &\\therefore b&#94;{\\ast}= \\frac{1}{N_{\\mathcal{M}}}\\sum_{n\\in\\mathcal{M}}\\left(t_n-\\sum_{n\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\right)&(7.37) \\end{aligned} $$ として求めることができる。 In [9]: from kerasy.ML.svm import SVC In [10]: train_x = np . concatenate ([ np . random . RandomState ( seed ) . normal ( loc = [ 0.2 , 0.2 ], scale = [ 0.2 , 0.4 ], size = ( n_cls1 , 2 )), np . random . RandomState ( seed ) . normal ( loc = [ - 0.2 , - 0.2 ], scale = [ 0.3 , 0.2 ], size = ( n_cls2 , 2 )) ]) train_y = np . concatenate ([ np . ones ( shape = n_cls1 ), - np . ones ( shape = n_cls2 ) ]) In [11]: params = [ ( 1e-2 , 1e-2 ),( 1e-2 , 1e0 ),( 1e-2 , 1e2 ), ( 1e1 , 1e-2 ),( 1e1 , 1e0 ),( 1e1 , 1e2 ), ( 1e4 , 1e-2 ),( 1e4 , 1e0 ),( 1e4 , 1e2 ), ] In [12]: n_fig = len ( params ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i ,( C , sigma ) in enumerate ( params ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) model = SVC ( kernel = \"gaussian\" , C = C , sigma = sigma ) model . fit ( train_x , train_y , max_iter = 1500 , sparse_memorize = False ) Z = np . vectorize ( lambda x , y : model . predict ( np . array ([ x , y ]) . reshape ( 1 , - 1 )))( X , Y ) == 1 ax . pcolor ( X , Y , Z , alpha = 0.3 ) for i in range ( N ): alpha = 1 if i in model . isSV () else 0.3 color = \"red\" if train_y [ i ] == 1 else \"blue\" ax . plot ( train_x [ i , 0 ], train_x [ i , 1 ], marker = \"o\" , color = color , markersize = 10 , alpha = alpha ) ax . set_title ( f \"gaussian kernel (C= {C} , $\\sigma= {sigma} $)\" ) ax . set_xlim ( - 1 , 1 ), ax . set_ylim ( - 1 , 1 ) plt . tight_layout () plt . show () 多クラスSVM SVMは本来2クラス識別の為の分類器であるが、これを複数組み合わせるなどの方法によって $K>2$クラスの識別に利用する事が出来る。最もよく用いられる方法は、 one-versus-the-rest方式 と呼ばれる方法であり、「データ $\\mathbf{x}$ が クラス $k$ かそれ以外であるか を識別するSVM $y_k(\\mathbf{x})$ を $K$ クラスそれぞれについて構築し、$ y(\\mathbf{x}) = \\mathop{\\rm arg~max}\\limits_{k}y_k(\\mathbf{x})$ によって $\\mathbf{x}$ のクラスを決定する」 SVM回帰 単純な線形回帰問題においては、次の式で定義される正則化された誤差関数を最小化する。 $$\\frac{1}{2}\\sum_{n=1}&#94;N\\{y_n-t_n\\}&#94;2 + \\frac{\\lambda}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.50)$$ 疎な解を得るために、二条誤差関数を $\\epsilon$ 許容誤差関数($\\epsilon$-insentive error function) で置き換える。つまり、予測値 $y(\\mathbf{x})$ と観測値 $t$ の差が $\\epsilon(>0)$ 未満のときは、$\\epsilon$ 許容誤差関数の値は $0$ となる。$\\epsilon$ 許容誤差関数の簡単な例は、 「許容範囲外の値に関しては線形のコストを生じさせる」 ものである。 $$ \\begin{aligned} E_{\\epsilon}\\left(y(\\mathbf{x})-t\\right) = \\begin{cases} 0 & (\\text{ when }|y(\\mathbf{x} - t)| < \\epsilon)\\\\ |y(\\mathbf{x} - t)| - \\epsilon & (\\text{ otherwise }) \\end{cases}\\qquad (7.51) \\end{aligned} $$ In [13]: squareError = lambda x , y_true : 1 / 2 * ( x - y_true ) ** 2 # Sum of Squares Error function epsilonError = lambda x , y_true , epsilon = 1 : 0 if abs ( x - y_true ) < epsilon else abs ( x - y_true ) - epsilon In [14]: X = np . linspace ( - 2 , 2 , 1000 ) plt . plot ( X ,[ squareError ( x , y_true = 0 ) for x in X ], color = \"black\" , label = \"sum of squares error function\" , linestyle = \"--\" ) plt . plot ( X ,[ epsilonError ( x , y_true = 0 ) for x in X ], color = \"black\" , label = \"$\\epsilon$-insentive error function\" ) plt . scatter ( 0 , 0 , marker = \"x\" , color = \"red\" , label = \"y_true\" ) plt . title ( \"Error function comparison\" , fontsize = 16 ), plt . xlim ( - 2 , 2 ), plt . ylim ( -. 1 , 2 ) plt . xlabel ( \"$x$\" , fontsize = 16 ), plt . ylabel ( \"$E(x)$\" , fontsize = 16 ) plt . legend () plt . show () この $\\epsilon$ 許容誤差関数を用いると、結局次の正則化された誤差関数を最小化することになる。 $$C\\sum_{n=1}&#94;NE_{\\epsilon}\\left(y(\\mathbf{x}_n)-t_n\\right) + \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.52)$$ 分類問題と同様、この最適化問題をスラック変数 $\\xi_n,\\hat{\\xi}_n$ を導入して表現する。 $\\epsilon$ チューブの中に位置するという条件は $y_n-\\epsilon\\leq t_n \\leq y_n+\\epsilon$ と表せるので、チューブの外側にデータ点が存在することを許すような制約条件は以下のようにかける。 $$ \\begin{aligned} t_n&\\leq y(\\mathbf{x}_n) + \\epsilon + \\xi_n & (7.53)\\\\ t_n&\\geq y(\\mathbf{x}_n) - \\epsilon - \\xi_n & (7.54)\\\\ \\end{aligned} $$ よって、スラック変数を用いると、SVM回帰の誤差関数は次のようにかける。 $$C\\sum_{n=1}&#94;N\\left(\\xi_n + \\hat{\\xi}_n\\right) + \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.55)$$ したがって、この最小化問題のラグランジュ関数は、ラグランジュ乗数 $a_n,\\hat{a}_n,\\mu_n,\\hat{\\mu}_n$ を導入して以下のようになる。（$y(\\mathbf{x}_n)= \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)+b$） $$ \\begin{aligned} L &=C\\sum_{n=1}&#94;N\\left(\\xi_n+\\hat{\\xi}_n\\right)+\\frac{1}{2}\\|\\mathbf{w}\\|&#94;2-\\sum_{n=1}&#94;N\\left(\\mu_n\\xi_n+\\hat{\\mu}_n\\hat{\\xi}_n\\right)\\\\ &-\\sum_{n=1}&#94;Na_n\\left(\\epsilon + \\xi_n + y_n - t_n \\right)-\\sum_{n=1}&#94;N\\hat{a}_n\\left(\\epsilon + \\hat{\\xi}_n - y_n + t_n\\right) \\qquad (7.56)\\\\ \\end{aligned} $$ これまで同様 $\\mathbf{w},b,\\xi_n,\\hat{\\xi}_n$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;Na_n\\phi(\\mathbf{x}_n)-\\sum_{n=1}&#94;N\\hat{a}_n\\phi(\\mathbf{x}_n)=0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N \\left(a_n-\\hat{a}_n\\right)\\phi(\\mathbf{x}_n) & (7.57)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_n + \\sum_{n=1}&#94;N\\hat{a}_n = 0 \\quad\\therefore\\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right) = 0 & (7.58)\\\\ \\frac{\\partial L}{\\partial \\xi_n} &= C-a_n-\\mu_n \\quad\\therefore a_n + \\mu_n = C & (7.59)\\\\ \\frac{\\partial L}{\\partial \\hat{\\xi}_n} &= C-\\hat{a}_n-\\hat{\\mu}_n \\quad\\therefore \\hat{a}_n + \\hat{\\mu}_n = C & (7.60)\\\\ \\end{aligned} $$ が得られる。これらの結果を $(7.56)$ に代入すると、以下の 双対形のラグランジュ関数 が得られる。 $$ \\begin{aligned} \\tilde{L}(\\mathbf{a},\\hat{\\mathbf{a}}) &= -\\frac{1}{2}\\sum_{n=1}&#94;N\\sum_{m=1}&#94;N\\left(a_n-\\hat{a}_n\\right)\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\\\ &- \\epsilon\\sum_{n=1}&#94;N\\left(a_n + \\hat{a}_n\\right) + \\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right)t_n \\end{aligned} \\qquad (7.61) $$ なお、制約式は $$ \\begin{aligned} 0 \\leq a_n &\\leq C & (7.62)\\\\ 0 \\leq \\hat{a}_n &\\leq C & (7.63) \\end{aligned} $$ である。したがって、新しい入力に対する予測値は $$y(\\mathbf{x}) = \\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right)k(\\mathbf{x},\\mathbf{x}_n) + b\\qquad (7.64)$$ とカーネル関数のみを用いて計算できることがわかる。 なお、バイアスパタメータ $b$ は次のように計算できる。 $C>a_n>0$ が成り立つデータ点についてはKKT条件より $\\xi_n = 0 \\quad \\therefore \\epsilon+y_n-t_n=0$ が成り立つ。よって、 $$ \\begin{aligned} b &= t_n - \\epsilon - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\\\ &= t_n - \\epsilon - \\sum_{m=1}&#94;N\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.69) \\end{aligned} $$ $C>\\hat{a}_n>0$ が成り立つデータ点についてはKKT条件より $\\hat{\\xi}_n = 0 \\quad \\therefore \\epsilon+y_n-t_n=0$ が成り立つ。よって、 $$ \\begin{aligned} b &= t_n - \\epsilon - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\\\ &= t_n - \\epsilon - \\sum_{m=1}&#94;N\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.69) \\end{aligned} $$ なお、このようにして得られた $b$ の値を全て平均した結果を用いると数値誤差の影響を小さくできる。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-3.html"},{"title":"ラグランジュ未定乗数法","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 条件なし最適化 ある関数 \\(f\\) が与えられた時、それが最小値を取る点を見つけ出す。 $$\\text{min : } f(\\mathbf{x})$$ したがって、微分をとって \\(0\\) になる点を見つければ良い。 $$\\frac{\\partial}{\\partial x}f(x) = 0\\Longrightarrow x&#94;{\\ast}$$ 等式制約付き最適化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g(\\mathbf{x})=0\\\\ \\end{aligned} $$ ラグランジュ乗数(Lagrangian multiplier) と呼ばれるパラメータ \\(\\lambda\\) を導入した ラグランジュ関数(Lagrangian function) $$L(\\mathbf{x},\\lambda) \\equiv f(\\mathbf{x})+\\lambda g(\\mathbf{x})\\qquad (E.4)$$ の \\(\\mathbf{x}\\) と \\(\\lambda\\) の両方に対する停留点（鞍点）を見つければ、制約付き問題の最適解が得られる。 理由 以下２つの理由より、 \\(\\nabla f\\) と \\(\\nabla g\\) は、 向きが逆の場合も含めて 平行なベクトルとなる。したがって、 あるパラメータ \\(\\lambda\\neq0\\) が存在して、 $$\\nabla f + \\lambda\\nabla g = 0\\qquad (E.3)$$ が成立しなければならない。これは、 \\(\\nabla_{\\mathbf{x}}L=0\\) と表されることがわかる。また、 \\(\\partial L/\\partial\\lambda = 0\\) より、制約式 \\(g(\\mathbf{x})=0\\) も導かれる。 1) \\(\\nabla g(\\mathbf{x})\\) が制約面 \\(g(\\mathbf{x})=0\\) に対して常に垂直 制約面 \\(g(\\mathbf{x})\\) 上の点 \\(\\mathbf{x}\\) と \\(\\mathbf{x}+\\boldsymbol{\\varepsilon}\\) を考える。 すると、 \\(\\mathbf{x}\\) の周りでの \\(g(\\mathbf{x})\\) のテイラー展開より、 $$g(\\mathbf{x} + \\boldsymbol{\\varepsilon}) \\sim g(\\mathbf{x}) + \\boldsymbol{\\varepsilon}&#94;T\\nabla g(\\mathbf{x})\\qquad (E.2)$$ いま、 \\(\\mathbf{x}\\) と \\(\\mathbf{x}+\\boldsymbol{\\varepsilon}\\) は共に制約面上に存在するので $$g(\\mathbf{x})=g(\\mathbf{x}+\\boldsymbol{\\varepsilon})=0$$ が成り立つ。ゆえに、 \\(\\|\\boldsymbol{\\varepsilon}\\|\\rightarrow0\\) の極限では \\(\\boldsymbol{\\varepsilon}&#94;T\\nabla g(\\mathbf{x})\\sim0\\) が成り立つ。 \\(\\boldsymbol{\\varepsilon}&#94;T\\) は制約面上の接線である。 より、ベクトル \\(\\nabla g(\\mathbf{x})\\) は制約面 \\(g(\\mathbf{x})=0\\) に対して垂直である。 2) \\(\\nabla f(\\mathbf{x}&#94;{\\ast})\\) も制約面に対して垂直 もし \\(\\nabla f(\\mathbf{x}&#94;{\\ast})\\) が制約面に対して垂直でないとすると、制約面にそって \\(f(\\mathbf{x})\\) の値がさらに大きくなるように点を動かすことができるはずである。 したがって、制約面上の点で \\(f(\\mathbf{x})\\) を最大化する点 \\(\\mathbf{x}&#94;{\\ast}\\) においては、ベクトル \\(\\nabla f(\\mathbf{x})\\) も制約面に対して垂直でなければならない。 不等式制約付き最適化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g(\\mathbf{x})\\leq0\\\\ \\end{aligned} $$ ここで、解 \\(\\mathbf{x}&#94;{\\ast}\\in\\Omega\\) には、 無効制約(inactive constraint) \\(\\overset{\\text{def}}{\\Longleftrightarrow}g(\\mathbf{x}&#94;{\\ast}) < 0\\) 有効制約(active constraint) \\(\\overset{\\text{def}}{\\Longleftrightarrow}g(\\mathbf{x}&#94;{\\ast}) = 0\\) の2つの可能性がある。 $$ \\Omega:= \\left\\{\\mathbf{x}\\in\\mathbb{R}&#94;D: g(\\mathbf{x})<0 \\right\\} $$ 無効制約の場合 無効制約 \\(\\left(g(\\mathbf{x})<0\\right)\\) の場合、関数 \\(g(\\mathbf{x})\\) は何も制約を課していないのと同様なので、停留条件は単に \\(\\nabla f(\\mathbf{x}) = 0\\) となる。 なお、これは上記の 等式制約におけるラグランジュ関数 \\((E.4)\\) において \\(\\lambda=0\\) とした場合の停留条件に等しい。 有効制約の場合 有効制約 \\(\\left(g(\\mathbf{x})=0\\right)\\) の場合、 等式制約におけるラグランジュ関数 \\((E.4)\\) において \\(\\lambda\\neq0\\) とした場合の停留条件に等しい。 ただし、 \\(-\\nabla f(\\mathbf{x}&#94;{\\ast})\\) は \\(g(\\mathbf{x})<0\\) の外側へと向かうはず だから、 あるパラメータ \\(\\lambda>0\\) が存在して、 $$\\nabla f(\\mathbf{x}) = -\\lambda\\nabla g (\\mathbf{x})$$ が成立しなければならない。 勾配 意味 最適化問題における問題における意味 \\(\\nabla f(\\mathbf{x})\\) \\(f\\) が大きくなる方向 目的とは別の方向 \\(\\nabla g(\\mathbf{x})\\) \\(g\\) が大きくなる方向 \\(g(\\mathbf{x})<0\\) の外側へと向かう方向 KKT条件 上記の無効制約・有効制約のどちらの場合にせよ、 \\(\\lambda g(\\mathbf{x})=0\\) が成立することがわかる。 したがって、 \\(g(\\mathbf{x})\\leq0\\) という制約の下で \\(f(\\mathbf{x})\\) を最小化するには、以下の Karush-Kuhn-Tucker(KKT)条件 のもとで、 \\(\\mathbf{x},\\lambda\\) に関して ラグランジュ関数 \\((E.4)\\) の停留点を求めれば良い。 $$ \\begin{aligned} \\begin{cases} \\text{Primal feasibility} &g(\\mathbf{x})\\leq0 & (E.9)\\\\ \\text{Dual feasibility} &\\lambda \\geq 0 & (E.10)\\\\ \\text{Complementary slackness} &\\lambda g(\\mathbf{x}) = 0 & (E.11) \\end{cases} \\end{aligned} $$ なお、当然ではあるが、「制約条件の符号の向き」と「目的関数の最大化・最小化」には以下の関係がある。（ \\(\\lambda\\geq0\\) ） 目的関数 \\(f(\\mathbf{x})\\) 制約条件 \\(g(\\mathbf{x})\\) ラグランジュ関数 \\(L(\\mathbf{x},\\lambda)\\) \\(\\min f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\leq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) + \\lambda g(\\mathbf{x})\\) \\(\\min f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\geq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) - \\lambda g(\\mathbf{x})\\) \\(\\max f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\leq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) - \\lambda g(\\mathbf{x})\\) \\(\\max f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\geq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) + \\lambda g(\\mathbf{x})\\) 一般化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g_j(\\mathbf{x})=0 & (j=1,\\ldots,J)\\\\ & h_k(\\mathbf{x})\\leq0 & (k=1,\\ldots,K)\\\\ \\end{aligned} $$ 以下のラグランジュ関数を最適化する。 $$L\\left(\\mathbf{x},\\{\\lambda_j\\},\\{\\mu_k\\}\\right) = f(\\mathbf{x}) + \\sum_{j=1}&#94;J\\lambda_jg_j(\\mathbf{x}) + \\sum_{k=1}&#94;K\\mu_kh_k(\\mathbf{x})\\qquad (E.12)$$ ここで、KKT条件は、以下となる。 $$ \\begin{aligned} \\begin{cases} \\text{Primal feasibility} &g_j(\\mathbf{x})=0,h_k(\\mathbf{x})\\leq0 \\\\ \\text{Dual feasibility} &\\mu_k \\geq 0\\\\ \\text{Complementary slackness} &\\mu_kh_k(\\mathbf{x}) = 0 \\end{cases} \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-2.html"},{"title":"カーネル法","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt 講義の構成 パターン認識 カーネル法の紹介 最適化理論の復習 サポートベクターマシーン パターン認識 対象を識別するルールを訓練データより、自動的に取得する。 各対象を全データ共通次元のベクトルで表現すれば、識別関数 $f(\\mathbf{x})$ は、特徴空間上に定義される。 元の空間 （入力空間） を非線形に写像すれば、写像先 （特徴空間） で線形識別することで非線形識別が達成される。 $$\\phi:\\mathbf{X}\\rightarrow\\mathbb{R}&#94;m$$ どのように写像を定めるかは難しい問題。 カーネル法の紹介 上で紹介した写像を、 類似度関数（カーネル関数） に基づいて決める手法。（例：ガウシアンカーネル $K(\\mathbf{x},\\mathbf{x}&#94;{\\prime}) = \\exp\\left(-\\frac{\\|\\mathbf{x}-\\mathbf{x}&#94;{\\prime}\\|}{\\sigma}\\right)$） 類似度さえ定義できればどのような対象（例：生物学的ネットワーク上のタンパク質の分類）にでも適用できる。 複雑な問題になると非常に高い次元に写像する必要があるが、カーネル関数さえ求められれば写像 $\\phi$ を陽に求める必要はない （カーネルトリック） 。 $k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ が有効なカーネル関数であるための必要十分条件は、任意の $\\{\\mathbf{x}_n\\}$ に対して、要素が $k(\\mathbf{x}_n,\\mathbf{x}_m)$ で与えられるグラム行列 $\\mathbf{K}$ が半正定値であること。 新しいカーネル関数を定義してそれが有効な関数かを確認するのは大変なので、次の性質を用いて新たな関数を定義することが多い。 新たなカーネル関数を構築するための方法 有効なカーネルとして $k_1(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ と $k_2(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ が与えられた時、次の関数もやはりカーネル関数として有効である。 $$\\begin{aligned} k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=c k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) & (6.13)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=f(\\mathbf{x}) k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) f\\left(\\mathbf{x}&#94;{\\prime}\\right) & (6.14)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=q\\left(k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.15)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=\\exp \\left(k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.16)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)+k_{2}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)& (6.17)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) k_{2}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) & (6.18)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{3}\\left(\\phi(\\mathbf{x}), \\phi\\left(\\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.19)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=\\mathbf{x}&#94;{\\mathrm{T}} \\mathbf{A} \\mathbf{x}&#94;{\\prime}& (6.20) \\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{a}\\left(\\mathbf{x}_{a}, \\mathbf{x}_{a}&#94;{\\prime}\\right)+k_{b}\\left(\\mathbf{x}_{b}, \\mathbf{x}_{b}&#94;{\\prime}\\right) & (6.21)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{a}\\left(\\mathbf{x}_{a}, \\mathbf{x}_{a}&#94;{\\prime}\\right) k_{b}\\left(\\mathbf{x}_{b}, \\mathbf{x}_{b}&#94;{\\prime}\\right) & (6.22) \\end{aligned}$$ ※ ここで、それぞれの変数は以下の意味を持つ。 変数 説明 $c>0$ 定数 $f(\\cdot)$ 任意の関数 $q(\\cdot)$ 非負の係数を持つ多項式 $\\phi(\\mathbf{x})$ $\\mathbf{x}$ から $\\mathbb{R}&#94;{M}$ への関数 $k_3(\\cdot,\\cdot)$ $\\mathbb{R}&#94;{M}$ で定義された有効なカーネル $\\mathbf{A}$ 対象な半正定値行列 $\\mathbf{x}_a,\\mathbf{x}_b$ $\\mathbf{x}=(\\mathbf{x}_a,\\mathbf{x}_b)$ であるような変数（必ずしも互いに素である必要はない） $k_a,k_b$ それぞれの特徴空間において有効なカーネル関数 カーネル関数の例 $$k(x,x&#94;{\\prime}) = \\boldsymbol{\\phi}(x)&#94;T\\boldsymbol{\\phi}(x&#94;{\\prime}) = \\sum_{i=1}&#94;M\\phi_i(x)\\phi_i(x&#94;{\\prime})\\qquad (6.10)$$ # 多項式 ガウス シグモイド 基底関数 $$\\phi_j(x) = cx&#94;j$$ $$\\phi_j(x) = \\exp\\left\\{-\\frac{(x-\\mu_j)&#94;2}{2s&#94;2}\\right\\}\\qquad(3.4)$$ $$\\begin{aligned}\\phi_j(x) &= \\sigma\\left(\\frac{x-\\mu_j}{s}\\right) & (3.5)\\\\\\sigma(a) &=\\frac{1}{1+\\exp(-a)} & (3.6)\\end{aligned}$$ In [2]: # mapping function def polynomial ( x , d , c = 1 ): return c * x ** d def gaussian ( x , mu , s = 0.1 ): return np . exp ( - (( x - mu ) ** 2 ) / ( 2 * s ** 2 ) ) def logistic ( x , mu , s = 0.1 ): return 1 / ( 1 + np . exp ( - ( x - mu ) / s )) In [3]: # mapping function kernel = lambda phi , x_prime , X , key = None , ** params : np . array ([ sum ([ phi ( x_prime , ** { key : val }) * phi ( x , ** { key : val }) for val in params [ key ]]) for x in X ]) In [4]: params = [ ( polynomial , - 0.5 , \"d\" , np . linspace ( 1 , 11 , 11 )), ( gaussian , 0 , \"mu\" , np . linspace ( - 1 , 1 , 11 )), ( logistic , 0 , \"mu\" , np . linspace ( - 1 , 1 , 11 )), ] In [5]: X = np . linspace ( - 1 , 1 , 1000 ) In [6]: ncol = len ( params ) fig = plt . figure ( figsize = ( 12 , 6 )) for i , param in enumerate ( params ): phi , x_prime , key , vals = param ax_base = plt . subplot2grid (( 5 , ncol ),( 0 , i ), rowspan = 3 ) for val in vals : Y = phi ( X , ** { key : val }) ax_base . plot ( X , Y ) ax_base . set_title ( phi . __name__ ) ax_kernel = plt . subplot2grid (( 5 , ncol ),( 3 , i ), rowspan = 2 ) ax_kernel . plot ( X , kernel ( phi , x_prime , X , key , ** { key : vals })) ax_kernel . scatter ( x_prime , min ( ax_kernel . get_ylim ()), marker = \"x\" , color = \"black\" , label = \"$x&#94;{\\prime}$\" ) ax_kernel . set_xlabel ( \"$x$\" ), ax_kernel . set_title ( \"$k(x,x&#94;{\\prime})$\" ), ax_kernel . legend () plt . tight_layout () plt . show () 様々なカーネル 生物学的配列のカーネル Spectrum kernel (Leslie et al., 2002) Marginalized kernel (Tsuda et al., 2002) Profile kernel (Kuang et al., 2004) Local alignment kernel (Saigo et al., 2004) 木構造に関するカーネル Kernel for phylogenetic profiles (Vert, 2002) Kernel for natural language (Suzuki et al., 2003) Kernel for RNA sequences (Kin et al., 2002) ※ 詳しくは、 Kernel Methods in Computational Biology, MIT Press, 2004 を参照 最適化理論の復習 ラグランジュ未定乗数法 に記載。 サポートベクターマシーン マージン最大化 に基づく線形識別器 カーネル関数と組み合わせることによって非線形な識別も可能 サンプル間の類似度にしか依存しない （→非ベクトルデータの分類にも適用可能） 詳しくは サポートベクターマシン(SVM) に記載。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-1.html"},{"title":"生物統計論 第3回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section3.1 Multiple Test Correction \"The more inferences are made, the more likely erroneous inferences are to occur.\" (ex. Even if the type1 error rate is 1% for each data, 10 out of 1000 sample will be rejected on average.) Terminology FWER(Family-wise error rate) : the probability of making at least one type I error (FP) in the family. FDR(False discovery rate) : the expected type I error (FP) rate in rejected data. FDR(False discovery rate) Null hypotheses: $H_1,\\ldots,H_{g_j}$ Alternative hypotheses: $H_{g_j+1},\\ldots,H_g$ Procedure to reject hypotheses : $d_{\\alpha}: \\left(P_1,P_2,\\ldots,P_g\\right)\\rightarrow\\left\\{H_{i_1},\\ldots,H_{i_K}\\right\\}$ Expected ratio of FP in rejected hypotheses: $\\mathrm{FP}=\\sum_{k=1}&#94;K\\mathbb{I}(1\\leq i_k\\leq g_j),\\quad \\mathrm{TP}=K-\\mathrm{FP}$ $\\mathcal{Q} = \\begin{cases}0 & \\text{if }K=(\\mathrm{FP+TP})=0\\\\\\frac{\\mathrm{FP}}{\\mathrm{FP}+\\mathrm{TP}} & \\text{if }K>0\\end{cases}$ $$\\mathrm{FDR}(d_{\\alpha})=\\mathbb{E}\\left(\\mathcal{Q}|H_1,\\ldots,H_g\\right)$$ Methods to counteract this problem Bonferroni Correction Set $\\alpha\\left(=s_{\\alpha}\\leq S_h|H_0\\right)\\leftarrow 1/g\\cdot\\alpha_{\\mathrm{FWER}}$ ($g$: sample size) Therefore, we have: $$\\mathbb{P}\\left(\\{s_{\\alpha}\\leq S_1\\}\\cup\\cdots\\cup\\{s_{\\alpha}\\leq S_g\\}|H_0\\right)\\leq\\sum_{h=1}&#94;g\\mathbb{P}\\left(s_{\\alpha}\\leq S_h|H_0\\right) = g\\cdot\\left(\\frac{1}{g}\\alpha_{\\mathrm{FWER}}\\right) = \\alpha_{\\mathrm{FWER}}$$ Benjamini-Hochberg Procedure (B-H Procedure) If we assume data are distributed independently, we have: $$\\left(P_1,\\ldots,P_g\\right)\\sim\\mathrm{Unif}\\left(0,1\\right)&#94;{\\times g_j}\\times\\mathbb{P}\\left(P|H_{\\text{alternative}}\\right)&#94;{\\times\\left(g-g_j\\right)}$$ We sort the p-value as $p_1\\leq\\cdots\\leq p_g$ Then, $$ \\begin{aligned} d_{\\alpha_{\\mathrm{FDR}}}&#94;{\\mathrm{B-H}}(p_1,\\cdots,p_g) &:=\\mathrm{Reject}\\left\\{H_i|1\\leq i\\max\\left\\{n|p_n\\leq\\left(\\frac{n}{g}\\alpha_{\\mathrm{FDR}}\\right)\\right\\}\\right\\}\\\\ &\\Rightarrow \\mathrm{FDR}\\left(d_{\\alpha_{\\mathrm{FDR}}&#94;{\\mathrm{B-H}}}\\right)\\leq\\alpha_{\\mathrm{FDR}} \\end{aligned} $$ Example. $H_i$ $G_1$ $G_2$ $G_3$ $G_4$ $G_5$ $G_6$ $G_7$ $G_8$ $G_9$ $G_{10}$ $p_i$ $0.1$ $0.4$ $0.8$ $0.035$ $0.9$ $0.04$ $0.001$ $0.002$ $0.6$ $0.7$ In [2]: alpha_FDR = 0.1 g = 10 In [3]: idx = np . array ([ i + 1 for i in range ( g )]) p_value = data = np . array ([ 0.1 , 0.4 , 0.8 , 0.035 , 0.9 , 0.04 , 0.001 , 0.002 , 0.6 , 0.7 ]) q = np . array ([( i + 1 ) / g * alpha_FDR for i in range ( g )]) In [4]: p_value_rank = np . argsort ( p_value ) In [5]: for i in reversed ( range ( g )): if q [ i ] >= p_value [ p_value_rank [ i ]]: break In [6]: print ( f \"Reject: {[f'G {idx} ' for idx in idx[p_value_rank[:i+1]]]}\" ) Reject: ['G7', 'G8', 'G4', 'G6'] Quantile-Quantile plot In [7]: x = - np . log10 ( np . array ([( i + 1 ) / g for i in range ( g )])) y = - np . log10 ( p_value [ p_value_rank ]) In [8]: plt . plot ( x , y , color = \"red\" , label = \"observed\" ) plt . plot (( 0 , min ( x [ 0 ], y [ 0 ])),( 0 , min ( x [ 0 ], y [ 0 ])), color = \"black\" , label = \"$y=x$\" ) plt . title ( \"Quantile-Quantile plot\" ) plt . xlabel ( \"$-\\log_ {10} $ expected P-value\" ) plt . ylabel ( \"$-\\log_ {10} $ observed P-value\" ) plt . legend () plt . grid () plt . show () Section3.2 Probabilistic Models Hypothesis Testing Probabilistic Modeling Models data generation processes in uninteresting scenarios $H_0$ Models data generation processes under interesting biological scenario $H_1$ (possibly as well as $H_0$) Show inconsistency with $H_0$ Check fit of the model to the data Problems of Hypothesis Testing Approaches Difficult to model satisfactory, uninteresting scenarios Does not model interesting biological scenarios A rejected hypothesis does not necessarily tell anything interesting Still useful for many small parts of a full analysis probabilistic Modeling Strong regularity from the probability condition Can include various biological knowledge Adjustable to the quality, amount, randomness of the data Conditional probability makes it easy to integrate multiple models Once a satisfactory model is obtained, we can extract various information from expectation values Powerful general tools are available Maximal Likelihood EM algorithms Bayesian inference MCMC sampling etc... Section3.3 Likelihood Q. How to adjust parameters?? A. Maximize the Likelihood likelihood observed data: $\\mathbf{D} = \\left\\{x&#94;{(h)}|h=1,\\cdots,n\\right\\}$ parametrized model distribution: $\\mathbb{P}(x|\\theta)$ Likelihood: $L(\\theta|D) = \\mathbb{P}(D|\\theta) = \\prod_{h=1}&#94;n\\mathbb{P}\\left(x&#94;{(h)}|\\theta\\right)$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html"},{"title":"レポート課題2(10/10出題)","text":"Ud8ZlysE0j02qIr6K5nmHg==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html"},{"title":"連続最適化(1)制約なし最適化","text":"講師： 佐藤一誠 参考書： 最適化手法 参考書： 機械学習のための連続最適化 In [1]: import numpy as np import matplotlib.pyplot as plt 講義概要 凸最適化問題 最急降下法 ニュートン法 準ニュートン法 凸最適化問題 凸関数 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、以下が成り立つような関数を 凸関数(convex function) と呼ぶ。 $$f\\left(\\left(1-\\theta\\right)x + \\theta x&#94;{\\prime}\\right)\\leq\\left(1-\\theta\\right)f(x) + \\theta f\\left(x&#94;{\\prime}\\right)$$ $f$ が一階微分可能の時、$f$ が凸関数になるための必要十分条件は、感覚的には接戦が常に関数の下に来ることで、 $$\\forall x,x&#94;{\\prime}\\in\\mathcal{X},\\quad f\\left(x&#94;{\\prime}\\right)\\geq f(x) + \\nabla f(x)&#94;T\\left(x&#94;{\\prime}-x\\right)$$ $f$ が二階微分可能の時、$f$ が凸関数になるための必要十分条件は、 ヘッセ行列(Hessian matrix) $\\nabla&#94;2f(x)$ が 半正定値(positive semi-definite) ↔︎$\\nabla&#94;2f(x)$ の 固有値(eigenvalue) が全て非負 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、$(1-\\theta)x+\\theta x&#94;{\\prime}$ も $\\mathcal{X}$ に属するとき、$\\mathcal{X}$ を 凸集合(convex set) と呼ぶ。$x$ と $x&#94;{\\prime}$ を結ぶ線分上の全ての点が $\\mathcal{X}$ に属するということ。 最適化 最適化問題(optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 最適化アルゴリズム(optimization algorithm)： 収束する点列の生成アルゴリズム 最適性条件：最適化問題の最適解であるための必要条件 制約なし最適化問題(unconstrained optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 $f$ を 目的関数(objective function) と呼ぶ。 目的関数は 微分可能(differentiable) と仮定する。 最適性条件：$\\mathbf{x}&#94;{\\star}$ が最適解のとき $$\\nabla f(\\mathbf{x}&#94;{\\star}) = 0$$ 凸最適化問題(convex optimization problem)： 関数 $f$ が凸で集合 $\\mathcal{X}$ も凸 最適解（の集合）が 一意に定まる。 最適解の必要十分条件： 勾配(gradient) がゼロ（凸でない場合は 必要条件 ） 最急降下法 最急降下法(steepest descent method) ※ 勾配法(gradient method)とも。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\quad (\\varepsilon_k>0\\text{ : step size})$$ 凸最適化問題の場合、 大域的最適解(global optimization solution) が求まる 非凸最適化問題の場合、 局所最適解(local optimization solution) しか求められず、様々な初期値から何回か学習して最適解を採用する、ことしかできない。 ステップ幅(step size)の選択 焼きなまし(annealing) ：「最初は大きく、徐々に小さく」。しかし、適切に実装することは容易でない。 正規化(normalization) ：$\\varepsilon_k = \\varepsilon_k&#94;{\\prime}/\\|\\nabla f(\\mathbf{x}_k)\\|$ 勾配が大きいとき安定するが、勾配が小さいときは不安定 厳密直線探索(exact line search) 目的関数の値を最小にするステップ幅を求める。 $$\\underset{\\varepsilon_k>0}{\\min}f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)$$ $f$ が 単峰関数(unimodal function) の場合は、 二分探索法(binary search) や 黄金分割探索(golden section search) などの探索によって最小値を探す。 一般に、一次元の非線形最小化問題を解く必要があるため、最適なステップ幅の探索に時間がかかる。 厳密直線探索を用いた最急降下法は、 一次収束(linear convergence) する。 $$\\text{Q-linear convergence: }\\|\\mathbf{x}_{k+1}-\\mathbf{x}&#94;{\\star}\\| c\\leq \\|\\mathbf{x}_k-\\mathbf{x}&#94;{\\star}\\|&#94;q,\\quad 0 In [2]: ITERATION = 10 N = 100 fsize = 4 In [3]: a = 10 ; b = 1 A = 2 * np . diag ([ a , b ]) func = lambda x , y : a * x ** 2 + b * y ** 2 In [4]: x1min =- 5 ; x1max = 5 ; x2min =- 5 ; x2max = 5 initialX = np . array ([ x1min + 1 , x2max - 2 ]) x1 = np . linspace ( x1min , x1max , N ) x2 = np . linspace ( x2min , x2max , N ) X1 , X2 = np . meshgrid ( x1 , x2 ) Z = func ( X1 , X2 ) In [5]: def find_step_size ( method , f , X , A , ** kwargs ): df = A . dot ( X ) if method == \"fixed\" : epsilon = 1e-1 elif method == \"exact line search\" : epsilon = np . sum ( np . square ( df )) / np . sum ( np . square ( df ) * A . diagonal ()) elif method == \"backtracking line search\" : epsilon = 1 alpha = kwargs [ \"alpha\" ]; beta = kwargs [ \"beta\" ] while True : newX = X - epsilon * df if f ( newX [ 0 ], newX [ 1 ]) - f ( X [ 0 ], X [ 1 ]) <= - alpha * epsilon * np . sum ( np . square ( df )): break epsilon = beta * epsilon return epsilon In [6]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [7]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 例：$f(x) = 1/2\\mathbf{x}&#94;T\\mathbf{Ax}$ $$ \\begin{aligned} \\frac{\\partial f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)}{\\partial\\varepsilon_k} &= \\frac{\\partial}{\\partial\\varepsilon_k}\\frac{1}{2}\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)&#94;T\\mathbf{A}\\left(\\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\\\ &= \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right) - \\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{Ax}_k\\\\ &=0\\\\ \\therefore \\varepsilon_k&#94;{\\star} &= \\frac{\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2}{\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right)}\\qquad (\\nabla f\\left(\\mathbf{x}_k\\right) = \\mathbf{Ax}) \\end{aligned} $$ バックトラック直線探索(backtracking line search) $\\varepsilon_k=1$ に初期化 アルミホ基準(Armijo rule) ： $$f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right) - f\\left(\\mathbf{x}_k\\right)\\right) \\leq\\alpha\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2$$ が成り立つまで $\\varepsilon_k$ を $\\varepsilon_k\\leftarrow\\beta\\varepsilon_k$ と減衰させる。（$0<\\alpha, \\beta<1$） 目的関数の減少量の線形予測値の $\\alpha$ 倍の減少を保証している。 $f$ の真の減少量： $$g\\left(\\varepsilon_k\\right) = f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right) - f\\left(\\mathbf{x}_k\\right)$$ $f$ の減少量の 線形予測値 $$\\begin{aligned}\\varepsilon_kg&#94;{\\prime}(0) &=\\varepsilon_k\\cdot\\left( -\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k-0\\cdot\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\right)\\\\&=-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k\\right)\\\\&=-\\varepsilon_k\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2 \\end{aligned}$$ In [8]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [9]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 微分不可能な場合 目的関数 $f$ が 微分不可能(non-differentiable) の場合は、微分の概念を一般化した 劣微分 を用いる。 凸関数 $f$ の $\\mathbf{x}&#94;{\\prime}$ での 劣勾配(sub-gradient) とは、全ての $\\mathbf{x}\\in\\mathcal{X}$ に対して次式を満たす $\\mathbf{\\xi}$ $$f(\\mathbf{x})\\geq f\\left(\\mathbf{x}&#94;{\\prime}\\right) + \\mathbf{\\xi}&#94;T\\left(\\mathbf{x}-\\mathbf{x}&#94;{\\prime}\\right)$$ $f$ が微分可能な時、$\\mathbf{\\xi} = \\nabla f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ 上式を満たす $\\mathbf{\\xi}$ 全体を $\\partial f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ で表し、 劣微分(sub-differential) と呼ぶ。 微分不可能な点では、劣微分のどれかの値を用いる。 ニュートン法 一般にニュートン法という名称は、方程式の解を求めるアルゴリズムを指すが、以下を表すことが多い。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ 勾配法では一階微分しか用いていないので、二階微分も用いることで反復回数を減らすことが狙い。実際 $k$ が十分大きい時、最適解 $\\mathbf{x}&#94;{\\star}$ の近傍で 二次収束(quadratic convergence) するが、逆行列を求める計算コストが大きい。 二次の テーラー展開(Taylor expansion) を用いて $f$ を現在の解 $\\mathbf{x}_k$ の周りで近似 $\\left(f(\\mathbf{x})\\approx f_k(\\mathbf{x})\\right)$ し、その二次近似を最小にする $\\mathbf{x}_k$ に更新する。 $$f_k(\\mathbf{x}) = f(\\mathbf{x}_k) + \\nabla f(\\mathbf{x}_k)&#94;T\\left(\\mathbf{x}-\\mathbf{x}_k\\right) + \\frac{1}{2}\\left(\\mathbf{x}-\\mathbf{x}_k\\right)&#94;T\\nabla&#94;2f(\\mathbf{x}_k)(\\mathbf{x}-\\mathbf{x}_k)$$ $f_k$ の勾配をゼロと置いた方程式 $$\\nabla f_k(\\mathbf{x}) = \\frac{\\partial f_k(\\mathbf{x})}{\\partial \\mathbf{x}}= \\nabla f(\\mathbf{x}_k) + \\nabla&#94;2f(\\mathbf{x}_k)\\left(\\mathbf{x}-\\mathbf{x}_k\\right) = \\mathbf{0}$$ を解けば、$f_k$ の最小解が以下のように求まる $$\\mathbf{x}&#94;{\\star} = \\mathbf{x}_k - \\left(\\nabla&#94;2 f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ なお、ヘッセ行列が逆行列を持たない時は、 単位行列の定数倍を加えて対処する（正則化, regularization） らしい。 $$\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right) + \\mu\\mathbf{I}\\right)&#94;{-1},\\quad\\mu>0$$ 準ニュートン法 ニュートン法の近似。ニュートン法ではヘッセ行列の逆行列を求めるのに計算コストがかかるので、勾配ベクトル $\\nabla f(\\mathbf{x})$ を用いて近似計算する。 BFGSアルゴリズムを用いたヘッセ行列の更新式が有名 なお、 レポート課題 で詳しく記述しているが、BFGSアルゴリズムのヘッセ行列の更新式は以下で表される。 $$ \\mathbf{H}_{k+1} =\\mathbf{H}_k+\\frac{\\mathbf{t}_k\\mathbf{t}_k&#94;T}{\\mathbf{s}_k&#94;T\\mathbf{t}_k}-\\frac{\\mathbf{H}_k\\mathbf{s}_k\\mathbf{s}_k&#94;T\\mathbf{H}_k}{\\mathbf{s}_k&#94;T\\mathbf{H}_k\\mathbf{s}_k} $$ なお、この時 $$ \\begin{aligned} \\begin{cases} \\mathbf{s}_k &= \\mathbf{x}_{k+1} - \\mathbf{x}_k\\\\ \\mathbf{t}_k &= \\nabla f(\\mathbf{x}_{k+1}) - \\nabla f(\\mathbf{x}_k) \\end{cases} \\end{aligned} $$ まとめ 凸最適化問題 目的関数が凸関数で定義域が凸集合 最適解が一意に定まる 最急降下法 勾配を降下するように値を更新 ステップ幅の選択が重要 目的関数が微分不可能な場合は、劣勾配法や近接勾配法を用いる ニュートン法 二階微分の情報を利用する ヘッセ行列の近似を用いる準ニュートン法が実用的 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html"},{"title":"Zuker Algorithm","text":"Free energy minimization of RNA seconary structure. In cells, RNAs are likely to form energetically stable secondary structure. The correctness of secondary structure should be evaluated based on the free energy, rather than the number of base-pairs ( Nussinov Algorithm ) We first describe a way to calculate the free energy of a particular RNA secondary structure. We describe the Zuker algorithm which calculates the RNA secondary structure with the minimum free energy (MFE). Free energy of RNA secondary structure The free energy of a secondary structure is approximated as the sum of the free energy of \"loops\". $$E = \\sum_iE_i$$ The free energy of individual loop is given by experimental data. (ex. $\\mathrm{C-G: }-3.4\\mathrm{kcal/mol}$, $\\mathrm{U-A: }-0.9\\mathrm{kcal/mol}$) Five types of \"loops\" hairpin loop stacking bulge loop internal loop multi-loop F1(i,j) F2(i,j,h,l) Fm=a+bk+cu a,b,c: constant k: the number of base-pairs in a multi-loop u: the number of single stranded nucleotides in a multi-loop Algorithm variable meaning $W(i,j)$ the minimum free energy of subsequence from $i$ to $j$. $V(i,j)$ the minimum free energy of subsequence from $i$ to $j$ when $i$ to $j$ forms a base-pair. $M(i,j)$ the minimum free energy of subsequence closed by two or more base pairs. $M1(i,j)$ the minimum free energy of subsequence closed by one or more base pairs. Recursion $$ \\begin{aligned} W(i,j) &= \\min \\begin{cases} W(i+1,j)\\\\W(i,j-1)\\\\V(i,j)\\\\\\min_{i\\leq k Initialization In [1]: from kerasy.Bio.structure import Zuker from kerasy.utils.bio import readMonoSeq In [2]: model = Zuker () In [3]: # 以下の形のパラメタファイルを受け取ります。 ! cat params.json { \"inf\": 1e3, \"type\": \"RNA\", \"Watson_Crick\": true, \"Wobble\": true, \"hairpin\": [Infinity, Infinity, 4.4, 4.6, 4.7, 4.4, 5.0, 4.5, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 5.9, 6.0, 6.1, 6.1, 6.2, 6.2, 6.3, 6.3, 6.4, 6.4, 6.5, 6.5, 6.5, 6.6, 6.6, 6.7, Infinity], \"internal\": [Infinity, 1.0, 1.0, 1.1, 2.0, 2.0, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9, 3.0, 3.1, 3.1, 3.2, 3.3, 3.3, 3.4, 3.4, 3.5, 3.5, 3.5, 3.6, 3.6, 3.7, 3.7, Infinity], \"buldge\": [1.0, 1.0, 1.0, 1.1, 2.0, 2.0, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9, 3.0, 3.1, 3.1, 3.2, 3.3, 3.3, 3.4, 3.4, 3.5, 3.5, 3.5, 3.6, 3.6, 3.7, 3.7, Infinity], \"a\": 6.0, \"b\": -1.0, \"c\": 0.1, \"stacking_cols\": [\"CG\", \"AU\", \"GU\"], \"stacking_score\": [[-3.0, -2.0, -2.0], [-2.0, -0.5, -0.5], [-2.0, -0.5, -0.5]] } In [4]: model . load_params ( \"params.json\" ) In [5]: model . params () | parameter |value | --------------------- |a | 6.0| |b | -1.0| |c | 0.1| |inf |1000.0| |type | RNA| |Watson_Crick| 1| |Wobble | 1| In [6]: model . stacking_cols Out[6]: array(['CG', 'AU', 'GU'], dtype=' In [7]: model . stacking_score Out[7]: array([[-3.e+00, -2.e+00, -2.e+00, 1.e+03], [-2.e+00, -5.e-01, -5.e-01, 1.e+03], [-2.e+00, -5.e-01, -5.e-01, 1.e+03], [ 1.e+03, 1.e+03, 1.e+03, 1.e+03]]) In [8]: # サンプル配列 sequence = readMonoSeq ( path = \"sample_seq4.fasta\" ) In [9]: print ( sequence ) ['CCACCUCGCCGCGAAGAUUGGAUGUAAUGUUCACUUAAGCCUAGGCGUUCGCAAAGAAAUACCUAUGGUAAUUUGACUAGCGGUAACAAUGAAAGAAAAGGUGUAGGCGAGGUGGG'] In [10]: # 最大ペアの配列 model . predict ( sequence [ 0 ]) Zuker Algorithm Score: -37.5 ================================================================= seq: CCACCUCGCCGCGAAGAUUGGAUGUAAUGUUCACUUAAGCCUAGGCGUUCGCAAAGAAAU : ((((((((((((((((..((((((...)))))))))..((((....((((((..(((((( seq: ACCUAUGGUAAUUUGACUAGCGGUAACAAUGAAAGAAAAGGUGUAGGCGAGGUGGG : (((...))))))))..)).))))..))...........)))))).)))))))))). ================================================================= In [11]: model . W Out[11]: array([[ 0. , 0. , 0. , ..., -34.5, -37.5, -37.5], [ 0. , 0. , 0. , ..., -34.5, -34.5, -34.5], [ 0. , 0. , 0. , ..., -32.5, -32.5, -32.5], ..., [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ]]) In [12]: model . M Out[12]: array([[1000. , 999. , 999. , ..., -35.4, -38.5, -38.4], [1000. , 1000. , 999. , ..., -35.5, -35.4, -35.3], [1000. , 1000. , 1000. , ..., -33.4, -33.3, -33.2], ..., [1000. , 1000. , 1000. , ..., 1000. , 999. , 999. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 999. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ]]) In [13]: model . V Out[13]: array([[1000. , 1000. , 1000. , ..., -31.5, -37.5, -34.5], [1000. , 1000. , 1000. , ..., -34.5, -31.5, -31.5], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], ..., [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ]]) if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-9.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-9.html"},{"title":"生物物理学 第3回","text":"講師： 樋口秀男 タンパク質の構造と安定性 タンパク質の定義 特定のアミノ酸（20種類）が重合した重合体である。 特定の立体構造をとる。 （これがないと ポリペプチド ） 機能 説明 分子認識 ミオグロビンは酸素を結合。抗体は抗原と結合。 触媒（酵素） 化学反応の反応速度は \\(10&#94;8\\) ~ \\(10&#94;{17}\\) 倍にも加速される。 制御 基質の結合や環境の変化に伴い構造を変化し、タンパク質の反応を制御する。 エネルギー変換 光を電位に換え、ATP分解を力に換える。 構造形成・維持 タンパク質重合体は細胞や細胞内器官の構造を支える。 タンパク質を構成するアミノ酸 d-グリセルアルデヒドの立体配置を基準として、この立体配置を崩さずにできる化合物をD-体、その鏡像異性体がL-体。 ※ タンパク質はL体 構造 名前 略（三文字） 略（一文字） アラニン Ala A アルギニン Arg R アスパラギン Asn N アスパラギン酸 Asp D システイン Cys C グルタミン酸 Glu E グルタミン Gln Q グリシン Gly G ヒスチジン His H イソロイシン Ile I ロイシン Leu L リシン Lys K メチオニン Met M フェニルアラニン Phe F プロリン Pro P セリン Ser S トレオニン Thr T トリプトファン Trp W チロシン Tyr Y バリン Val V # 上記の表は以下のコードを応用して作成した。 url = \"https://ja.wikipedia.org/wiki/タンパク質を構成するアミノ酸\" soup = BeautifulSoup ( requests . get ( url ) . content , 'lxml' ) for li in soup . findAll ( \"li\" , { \"class\" : \"gallerybox\" }): text = str ( li ) . replace ( ' \\n ' , '' ) src = re . findall ( r '<img.*src=\"(.+?)\".*>' , text )[ 0 ] name , l3 , l1 = re . findall ( r '<p>.*title=\"(.+?)\".*<br/>\\((.+?)\\xa0\\/\\xa0(.+?)\\)</p>' , text )[ 0 ] 理論的構造決定法 アミノ酸配列→量子力学→タンパク質の構造とエネルギー状態を決定 シュレディンガー方程式は水素原子のみ解析的に解くことができ、それ以外は近似を行う必要がある。 現在、高精度に計算（第一原理分子動力学法）できるのは1つの構造に対して100原子程度である。 水分子を考慮しなければ、タンパク質の構造や電子軌道を精度よく求めることはできない。 アミノ酸がポリペプチド結合した重合体から機能を持つ立体構造を創り構造を維持するためには、 立体構造が熱力学的に安定でなければならない。 → Gibbs自由エネルギー \\(G\\) を見る。 準安定なのは、 \\(G\\) が極小の時。 最も安定なのは、 \\(G\\) が最小の時。 まとめ 生体の機能を主に担っているのは、タンパク質である。（RNAも機能に重要である。） タンパク質は分子認識・触媒・制御・エネルギー変換・構造形成維持などの機能を有している。 アミノ酸配列から計算によってタンパク質構造を決定することに成功していない。（部分構造はできている。） 酵素機能を行うとき、酵素の多くの場所が構造変化を行う。 第7回目の講義(11/6)の小テスト 指定課題： 第1,2,3回の講義の中で、最も興味のある事柄について300~500字でまとめる。 この事柄と関連する内容を調べるなどして、自分の意見を300~500字で述べる。 図や式を使いわかりやすく説明すること。図や式は文字数に含めない。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html"},{"title":"領域分割","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt import matplotlib.patches as patches # 円を描画 領域分割 色によるクラス分け（画像のみ） k-means法 mean-shift法 色によるクラス分け（画像のみ） 例えば、画素(RGB)や位置(x,y)の似たものをグループ分けする。 二値分類(FG/BG分類)で有名なのが クロマキー （ 青色・緑色 背景） k-means法 予めクラス数 $k$ を指定してクラスタリング。 $k$ 個の代表点をランダムにサンプリング（$k$ 個をデータの中からとってきても良いし、完全にランダムでばらまいても良い。） 全てのデータ点から一番近い代表点を $1$ つ探す。 $k$ 個のグループの重心を計算し、それを新たな代表点とする。 2,3を繰り返す。 In [2]: from kerasy.ML.KMeans import KMeans In [3]: def decomposeImg ( path , K ): imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== KMeans === x = rgb_img . reshape ( - 1 , 3 ) model = KMeans ( K = K , random_state = 0 ) model . fit ( x ) cls , mu = model . predict ( x ) mu = mu . astype ( int ) for k in range ( K ): x [ cls == k ] = mu [ k ] # KMeansed Image. ax_K = fig . add_subplot ( 1 , 2 , 2 ) ax_K . imshow ( x . reshape ( img_shape )) ax_K . set_title ( f \"K= {K} \" ), ax_K . set_xticks ([]), ax_K . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No.{i+1:<0{len(str(K))}}, rgb=({','.join(mu[k].astype(int).astype(str))})\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () In [4]: decomposeImg ( path = \"lenna.png\" , K = 8 ) mean-shift法 画像領域の分割や対象画像の追跡に用いられる手法。 $d$ 次元の特徴量（ex. $\\mathrm{R,G,B},x,y$）を持った $N$ 個のデータ点 $\\mathbf{x}_i$ が分布しているときに、この点群 $\\mathbf{x}_i$ を標本点として得られるような確率密度関数 $f(\\mathbf{x})$ を考え、その標本点から確率密度関数 $f(\\mathbf{x})$ の極大点を探索する手法。 点群が集中している場所は確率密度関数 $f(\\mathbf{x})$ の値が高く、まばらな場所は低くなる。 ある任意の観測点 $\\mathbf{y}_j$ から半径 $h$ の超球を考え、その範囲にある点群 $\\mathbf{x}_i$ の平均 $\\mathbf{x}_c$ を計算し、その位置に観測点 $\\mathbf{y}_{j+1}$ を移動する。 この操作を繰り返すと観測点は最大勾配の方向に移動し、やがて極大点に収束する。 このように、 「近傍の点群の平均(mean)位置に移動(shift)を繰り返し、極大点を求める方法」 から ミーンシフト法(mean-shift) と呼ばれる。 In [5]: fig , ax = plt . subplots ( figsize = ( 6 , 6 )) # Circle r = 0.7 c = patches . Circle ( xy = ( 0 , 0 ), radius = r , ec = 'black' , fill = False ) ax . add_patch ( c ) # Sample Data X , Y = np . random . RandomState ( 123 ) . uniform ( low =- 0.3 , high = 1 , size = ( 2 , 50 )) cls = np . sqrt ( X ** 2 + Y ** 2 ) < r ax . scatter ( X , Y , c = cls , cmap = \"Set1_r\" , alpha = 0.7 ) # Center ax . scatter ( 0 , 0 , color = \"black\" , s = 100 ) ax . text ( 0.05 , - 0.05 , \"$\\mathbf {y} _ {j} $\" , fontsize = 12 ) # Mean mux , muy = np . mean ( X [ cls ]), np . mean ( Y [ cls ]) ax . scatter ( mux , muy , color = \"black\" , marker = '*' , s = 100 ) ax . text ( mux + 0.05 , muy , \"$\\mathbf {x} _c(=\\mathbf {y} _{j+1})$\" , fontsize = 12 ) # Arrow ax . annotate ( '' , xy = ( mux , muy ), xytext = ( 0 , 0 ), arrowprops = dict ( width = 2 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'blue' , edgecolor = 'blue' ) ) # Radius ax . plot (( 0 , 0 ),( 0 , - r ), color = \"black\" ) ax . text ( 0.05 , - r / 2 , \"r\" , fontsize = 12 ) ax . set_xlim ( - 1 , 1 ) ax . set_ylim ( - 1 , 1 ) plt . show () カーネル密度関数を用いた確率密度関数の推定 $d$ 次元空間内の $N$ 個の点群 $\\mathbf{x}_i$ を考える。この点群をある確率分布に従う標本と考えたとき、$d$ 次元空間内の任意の点 $\\mathbf{x}$ における確率密度関数 $f(\\mathbf{x})$ は、以下の方法で推定される。 $$f(\\mathbf{x}) = \\frac{c_{kd}}{Nh&#94;{d}}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)$$ $c_{hd}$ は、確率密度関数 $f(\\mathbf{x})$ 全体の積分を $1$ にするための正規化係数。 $k(t)$ は、カーネル関数 $K(t)$ の プロファイル で、$K(t)=k(|t|&#94;2)$ 以下の２つのカーネルが代表的である。 ガウシアンカーネル(Gaussian) エパネックニコフカーネル(Epanechnikov) $$K(t) = \\exp\\left(-\\frac{\\mid t\\mid&#94;2}{2}\\right)$$ $$K(t) = \\begin{cases}1- \\mid t\\mid&#94;2 & (\\mid t\\mid\\leq1)\\\\0 & (\\text{otherwise})\\end{cases}$$ 確率密度関数の勾配 勾配法(gradient method) を用いて極大点を逐次的に求めるために、確率密度関数の勾配 $\\nabla f(\\mathbf{x})$ を求める。 $$ \\begin{aligned} \\nabla f(\\mathbf{x}) &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;Nk'\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)\\left(\\mathbf{x}-\\mathbf{x}_i\\right)\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;N\\left(g_i\\mathbf{x}_i-g_i\\mathbf{x}\\right), \\quad g(t) = -k'(t),g'(t)=g\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|\\right)&#94;2\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\} \\end{aligned} $$ 項 説明 $$\\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}$$ ガウシアンカーネルやエパネックニコフカーネルを用いた場合、正になる。 $$\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\}$$ ミーンシフト と呼ばれる項で、観測点 $\\mathbf{x}$ の近傍のデータ点群 $\\mathbf{x}_i$ の加重平均位置と $\\mathbf{x}$ 自身の差分ベクトルを示す。 勾配法を用いた極大点探索（ミーンシフト法） 初期化：$\\mathbf{y}_0\\leftarrow\\mathbf{x}$ 更新（ミーンシフト） $$\\mathbf{y}_{j+1}\\leftarrow \\mathbf{y}_j + \\left(\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{y}_j\\right) = \\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}$$ $|\\mathbf{y}_{j+1}-\\mathbf{y}_j|<\\text{threshold}$ となるまで2を繰り返す。 収束した $\\mathbf{y}_{j+1}$ を極大点として出力する。 ※ 一般的な勾配法では、更新式 $\\mathbf{y}_{j+1}\\rightarrow\\mathbf{y}_i + \\alpha\\nabla f$ のステップ数 $\\alpha$ を与える必要があるが、ミーンシフト法では ベクトルの大きさは自動的に計算される ので、$\\alpha$ を与える必要がない（らしい…）。 ミーンシフト法を用いたクラスタリングへの応用 $d$ 次元空間中の $N$ 個の点群 $\\mathbf{x}_i$ が与えられた時に、密に分布する点群をクラスタとして分割する。 各点にミーンシフト法を適用し、収束位置 $\\mathbf{x}_i&#94;c$ を計算する。 任意の2個の点 $\\mathbf{x}_i,\\mathbf{x}_j$ について、その収束位置が閾値以下なら（$|\\mathbf{x}_i-\\mathbf{x}_j|<\\text{threshold}$）、この2点を同じ極大点として同じクラスタに入れる。 1,2より、全ての点群 $\\mathbf{x}_i$ を 同じ収束位置（極大点）に属するものごとにクラスタに識別する。 全ての点 $\\mathbf{x}_i$ でこの処理を行わなければならないが、並行化できる。 k-means手法とは異なり、クラスタの数を予め指定する必要がない。 ミーンシフト法を用いたカラー画像の領域分割 カラー画像の $N$ 個の各画素の位置 $\\mathbf{x}_i$ とその画素値 $\\mathbf{v}_i=\\left(R_i,G_i,B_i\\right)$ とし、画素位置-画素値を結合した5次元空間内の点 $\\mathbf{z}_i=(\\mathbf{x}_i,\\mathbf{v}_i)$ を考える。 「距離および色が近い画素が5次元空間内でクラスタを形成している」 とみて、ミーンシフト法で各画素をクラスタリングする。 画素位置に関するバンド幅 $h_s$、画素値に関するバンド幅 $h_r$ を与え、全ての $z_i$ にミーンシフトを行い、収束位置 $\\mathbf{z}&#94;c=(\\mathbf{x}&#94;c,\\mathbf{v}&#94;c)$ を計算する。 $\\mathbf{x}_i$ の画素値を、収束位置の画素の値 $(R&#94;c,G&#94;c,B&#94;c)$ に置き換えることによって、画像の平滑化ができる。 ミーンシフトは、以下の通り計算する。 $$f(\\mathbf{x}) = \\frac{c}{Nh_s&#94;2h_r&#94;3}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}&#94;s-\\mathbf{x}&#94;s_i}{h_s}\\right|&#94;2\\right)k\\left(\\left|\\frac{\\mathbf{x}&#94;r-\\mathbf{x}&#94;r_i}{h_r}\\right|&#94;2\\right)$$ したがって、以下のとおりに位置を更新する。 $$\\mathbf{y}&#94;{s}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;s\\mathbf{x}_i&#94;s}{\\sum_{i=1}&#94;Ng_i&#94;s},\\quad\\mathbf{y}&#94;{r}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;r\\mathbf{x}_i&#94;r}{\\sum_{i=1}&#94;Ng_i&#94;r}$$ $(h_s,h_r)$ のパラメータを大きくすると、より大きな領域に同色が統合され、大まかに分割される。 In [6]: from sklearn.cluster import MeanShift In [7]: import time s = time . time () imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) path = \"lenna.png\" bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== MeanShift === x = rgb_img . reshape ( - 1 , 3 ) model = MeanShift () model . fit ( x ) cls = model . predict ( x ) mu = model . cluster_centers_ . astype ( int ) K = max ( cls ) + 1 for k in range ( K ): x [ cls == k ] = mu [ k ] # MeanShifted Image. ax_Mean = fig . add_subplot ( 1 , 2 , 2 ) ax_Mean . imshow ( x . reshape ( img_shape )) ax_Mean . set_title ( f \"n_cluster= {K} \" ), ax_Mean . set_xticks ([]), ax_Mean . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No.{i+1:<0{len(str(K))}}, rgb=({','.join(mu[k].astype(int).astype(str))})\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () e = time . time () print ( f \"Processing time: {int((e-s)//60):>02}m {(e-s)%60:.3f}s\" ) plt . show () Processing time: 31m 13.287s In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html"},{"title":"領域処理のための特徴量","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 領域の特徴量 フーリエ変換 ガボールフィルタ(Gabor Filter) 同時生起確率 In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt （２次元）フーリエ変換 画像は、フーリエ変換によって周波数領域における別の形で表現される。 フーリエ変換の結果は、画像に含まれるそれぞれの周波数成分を表している。 フーリエ変換後の各周波数成分の大きさを成分ごとに変えることにより、元の画像の性質を変えることができる。 （周波数フィルタリング(frequency filtering)） ローパスフィルタ(lowpass fileter) ：画像に含まれる空間周波数成分のうち、低周波数成分は残し、高周波数成分は除去するようなフィルタ。 ハイパスフィルタ(highpass filter) ：上の逆。高周波数成分は残し、低周波数成分を除去するようなフィルタ。 バンドパスフィルタ(bandpass filter) ：ある中間的な周波数の範囲を残すようなフィルタ。 高域強調フィルタ(high-emphasis filter) ：画像の低周波数成分はそのまま保ちつつ、高周波数成分を強調するフィルタ。 $1$ 次元フーリエ変換 簡単のため、まずは一次元フーリエ変換をみる。 名前 数式 説明 フーリエ変換 $$F(\\omega) = \\int_{-\\infty}&#94;{\\infty}f(t)e&#94;{-i\\omega t}dt$$ 数直線上の表現 （空間領域） から周波数による表現 （周波数領域） への変換 逆フーリエ変換 $$f(x) = \\int_{-\\infty}&#94;{\\infty}F(\\omega)e&#94;{i\\omega x}d\\omega$$ 周波数領域にある関数を元の空間領域に戻す変換 実装 二つの正弦波を重ねた波から、それぞれの成分を取り出すことができるか確かめる。なお、ここでは numpy.fft.fft を利用しています。 これは、 高速フーリエ変換(Fast Fourier Transform) と呼ばれる、 高速に「離散フーリエ変換」を行うアルゴリズム を実装したものです。 In [2]: N = 10000 dt = 0.01 time = np . arange ( 0 , N * dt , dt ) freq = np . linspace ( 0 , 1.0 / dt , N ) In [3]: def sin ( A , f , p ): \"\"\" @param A: Amplitude @param f: Frequency[Hz] @param p: phase \"\"\" func = lambda t : A * np . sin ( 2 * np . pi * f * t + p1 ) return func In [4]: # parameters f1 , f2 = 5 , 8 # frequency[Hz] A1 , A2 = 5 , 3 # Amplitude p1 , p2 = 0 , 1 / 2 * np . pi # phase In [5]: y1 = sin ( A1 , f1 , p1 )( time ) y2 = sin ( A2 , f2 , p2 )( time ) y = y1 + y2 # superposition In [6]: # Computes the discrete Fourier transform (DFT) of a sequence yf = np . fft . fft ( y ) / ( N / 2 ) # Fast Fourier transform. In [7]: fig = plt . figure ( figsize = ( 8 , 4 )) ax1 = fig . add_subplot ( 2 , 1 , 1 ) ax1 . set_ylabel ( \"amplitude\" ) ax1 . set_xlabel ( \"time\" ) ax1 . set_xlim ( 0 , 1 ) ax1 . plot ( time , y , label = \"y(y1+y2)\" , color = \"blue\" ) ax1 . plot ( time , y1 , label = f \"y1(A= {A1} ,f= {f1} )\" , alpha = 0.3 , color = \"green\" ) ax1 . plot ( time , y2 , label = f \"y2(A= {A2} ,f= {f2} )\" , alpha = 0.3 , color = \"red\" ) ax1 . axhline ( 0 , alpha = 0.3 , color = \"black\" ) ax1 . legend () ax2 = fig . add_subplot ( 2 , 1 , 2 ) ax2 . set_ylabel ( \"amplitude\" ) ax2 . set_xlabel ( \"frequency\" ) ax2 . set_xlim ( 0 , 10 ) ax2 . plot ( freq , abs ( yf ), color = \"blue\" ) plt . tight_layout () plt . show () 見事に、二つの周波数成分を取り出すことができました。 $2$ 次元フーリエ変換 ※ 一般に画像は2次元空間で定義されたある関数 $f(x,y)$ として表現することができる！ 名前 数式 フーリエ変換 $$F(u,v) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x,y)\\exp\\left\\{-j2\\pi\\left(ux+vy\\right)\\right\\}dxdy$$ 逆フーリエ変換 $$f(x,y) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}F(u,v)\\exp\\left\\{j2\\pi\\left(ux+vy\\right)\\right\\}dudv$$ ここで、以下の値に注目することがよくある。 名前 数式 説明 振幅スペクトル(amplitude spectrum) $$\\mid F(u,v)\\mid = \\sqrt{\\mathrm{Re}\\left\\{F(u,v)\\right\\}&#94;2 + \\mathrm{Im}\\left\\{F(u,v)\\right\\}&#94;2}$$ 絶対値 位相スペクトル(phase spectrum) $$\\arg\\left\\{F(u,v)\\right\\} = \\tan&#94;{-1}\\frac{\\mathrm{Im}\\left\\{F(u,v)\\right\\}}{\\mathrm{Re}\\left\\{F(u,v)\\right\\}}$$ 偏角 パワースペクトル(power spectrum) $$\\mid F(u,v)\\mid&#94;2$$ In [8]: img = cv2 . imread ( 'lenna.png' , 0 ) f = np . fft . fft2 ( img ) fshift = np . fft . fftshift ( f ) magnitude_spectrum = 20 * np . log ( np . abs ( fshift )) plt . subplot ( 121 ), plt . imshow ( img , cmap = 'gray' ) plt . title ( 'Input Image' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'x' ), plt . ylabel ( 'y' ) plt . subplot ( 122 ), plt . imshow ( magnitude_spectrum , cmap = 'gray' ) plt . title ( 'Magnitude Spectrum' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'u' ), plt . ylabel ( 'v' ) plt . show () ガボールフィルタ(Gabor Filter) 正弦波とガウス関数の積で表される。（例：2次元ガボールフィルタ） $$g(x,y,\\lambda,\\phi) = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\exp\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 実数部： $$\\mathrm{Re}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\cos\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 虚数部： $$\\mathrm{Im}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\sin\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ フーリエ変換では、所望の周波数成分が領域のどこにあるのかわからないのに対し、ガボールフィルタは、 「領域のどの位置にどの方向の周波数が、どの強度であるか」 を知ることができる。 パラメータを操作して様々な方向と強度を持つフィルタ （フィルタバンク(filter bank)） を多数準備 し、特徴抽出を行う。また、ここで抽出された特徴量群は texton と呼ばれる。 入力された画像に対してガボールフィルタを畳み込んで（たたみ込み＝二次元の内積＝類似度を反映）、特徴量 $G(x,y,\\lambda,\\phi)$ を求める式は以下となる。 $$G(x,y,\\lambda,\\phi) = \\sum_u\\sum_vI(x,y)\\ast g(x-u, y-v, \\lambda, \\phi)$$ OpenCVの cv2.getGaborKerne を用いることで簡単にガボールフィルタを生成することができる、 引数 説明 ksize Size of the filter returned. sigma Standard deviation of the gaussian envelope. theta Orientation of the normal to the parallel stripes of a Gabor function. lambd Wavelength of the sinusoidal factor. gamma Spatial aspect ratio. psi Phase offset. In [9]: default_gabor = { \"ksize\" : ( 50 , 50 ), \"sigma\" : 4 , \"theta\" : 0 , \"lambd\" : 10 , \"gamma\" : 0.5 , \"psi\" : 0 , } In [10]: gabor = cv2 . getGaborKernel ( ** default_gabor ) plt . imshow ( gabor , cmap = \"gray\" ) plt . title ( \"default\" ) plt . show () In [11]: def argsGaborRelation ( key , vals ): global default_gabor defaul_val = default_gabor [ key ] N = len ( vals ) n_col = 4 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i , val in enumerate ( vals ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) ax . imshow ( gabor , cmap = \"gray\" ) ax . set_title ( f \" {key} = {val} \" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [12]: argsGaborRelation ( key = \"ksize\" , vals = [( 30 , 30 ),( 20 , 40 ),( 40 , 20 ),( 50 , 50 )]) In [13]: argsGaborRelation ( key = \"sigma\" , vals = [ x for x in range ( 8 )]) In [14]: argsGaborRelation ( key = \"theta\" , vals = [ np . radians ( x ) for x in range ( 0 , 180 , 45 )]) In [15]: argsGaborRelation ( key = \"gamma\" , vals = [ x for x in range ( 4 )]) In [16]: argsGaborRelation ( key = \"psi\" , vals = [ np . radians ( x ) for x in range ( 0 , 360 , 45 )]) In [17]: img = cv2 . imread ( 'lenna.png' , 0 ) color_img = cv2 . imread ( 'lenna.png' ) In [18]: def argsGaborSuperposition ( key , vals ): global default_gabor , img defaul_val = default_gabor [ key ] N = len ( vals ) * 2 n_col = 8 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) dests = 0 for i , val in enumerate ( vals ): default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) dest = cv2 . filter2D ( img , cv2 . CV_32F , gabor ) dests += dest ax_dst = fig . add_subplot ( n_row , n_col , 2 * i + 1 ) ax_dst . imshow ( np . power ( dest , 2 ), cmap = \"gray\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) ax_gab = fig . add_subplot ( n_row , n_col , 2 * i + 2 ) ax_gab . imshow ( gabor , cmap = \"gray\" ), ax_gab . set_xticks ([]), ax_gab . set_yticks ([]) # Superposition fig = plt . figure ( figsize = ( 8 , 16 )) ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( cv2 . cvtColor ( color_img , cv2 . COLOR_BGR2RGB )) ax_org . set_title ( \"original image\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) ax_dst = fig . add_subplot ( 1 , 2 , 2 ) ax_dst . imshow ( dests , cmap = \"gray\" ) ax_dst . set_title ( f \"Superposition of dst (key= {key} )\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [19]: argsGaborSuperposition ( key = \"theta\" , vals = [ np . radians ( x ) for x in np . linspace ( 0 , 180 , 8 )]) ※ 入力画像の８分割した全ての方向のエッジを重ね合わせると、元の画像をかなり高い精度で復元していることがわかる。 同時生起確率 テクスチャの統計的特徴量を求める。 離れた２つの場所にある画素対の値から、画素値の 一様性 ・ 方向性 ・ コントラスト などの性質を表す特徴量を求める。 ある画素 $i$ と、$i$ から離れた位置にある画素 $j$ の画素対を考え、画素 $i$ と画素 $j$ の相対的な位置を $\\delta=\\langle d,\\theta\\rangle$ とする。 それぞれの画素値を $L_i,L_j$ とし、画素値の対 $(L_i,L_j)$ が生じる出現頻度で、ある同時生起行列 $\\mathbf{H}_{\\delta}(L_i,L_j)$ を考える。ここで、出現頻度の総数で $\\mathbf{H}_{\\delta}(L_1,L_2)$ を正規化し、確率に変換した同時生起行列を $\\mathbf{P}_{\\delta}(L_i,L_j)$ とする。 確率に変換した同時生起行列を用いて計算する主な特徴量には次の $7$ 種類がある。（ここで、画素値のレベル数は $L$ である。）他にも様々な統計量を計算できるが、テクスチャの物理的な意味と直接には結びつかない数値もある。 $$ \\begin{aligned} \\mathrm{ENR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left\\{P_{\\delta}(L_i,L_j)\\right\\}&#94;2 & (\\text{energy})\\\\ \\mathrm{CNT} &= \\sum_{k=0}&#94;{L-1}k&#94;2P_{x-y}(k) & (\\text{contrast})\\\\ \\mathrm{CRR} &= \\frac{\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}L_iL_jP_{\\delta}(L_i,L_j) - \\mu_x\\mu_y}{\\delta_x\\delta_y} & (\\text{correlation})\\\\ \\mathrm{VAR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left(L_i-\\mu_x\\right)&#94;2P_{\\delta}(L_i,L_j) & (\\text{variance})\\\\ \\mathrm{EPY} &= -\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\log\\left\\{P_{\\delta}(L_i,L_j)\\right\\} & (\\text{entropy})\\\\ \\mathrm{SEP} &= -\\sum_{k=0}&#94;{2L-2}P_{x+y}(k)\\log\\left\\{P_{x+y}(k)\\right\\} & (\\text{sum entropy})\\\\ \\mathrm{IDM} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\frac{1}{1+(L_i-L_j)&#94;2}P_{\\delta}(L_i,L_j) & (\\text{inverse difference moment})\\\\ \\end{aligned} $$ ただし、 $$ \\mu_x = \\sum_{L_i=0}&#94;{L-1}L_iP_x(L_i), \\quad \\mu_y = \\sum_{L_j=0}&#94;{L-1}L_jP_y(L_j)\\\\ \\delta_x&#94;2 = \\sum_{L_i=0}&#94;{L-1}(L_i-\\mu_x)&#94;2P_x(L_i), \\quad \\delta_y&#94;2 = \\sum_{L_j=0}&#94;{L-1}(L_j-\\mu_y)&#94;2P_y(L_j)\\\\ P_x(L_i) = \\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j), \\quad P_y(L_j) = \\sum_{L_i=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\\\ P_{x-y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i-L_j|= k\\\\ P_{x+y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i+L_j|= k\\\\ $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html"},{"title":"主成分分析(PCA)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 主成分分析(PCA) 次元削減・非可逆データ圧縮・特徴抽出・データの可視化などに使われる。 主部分空間(principal subspace) と呼ばれる低次元の線形空間の上への、データ点の直交射影として、以下の2つの定義方法がある。 「射影されたデータの分散が最大化されるような直交射影」 として定義。→ 分散最大化による定式化 「データ点と射影した点の間の2乗距離の平均値で定義される 射影コスト関数 の期待値を最小化するような線形射影」 として定義。（要はデータ点からの距離を最小化）→ 誤差最小化による定式化 Pythonによる実装 分散最大化による定式化 次元 $D$ のユークリッド空間内のデータ集合 $\\{\\mathbf{x}_n\\}(n=1,\\ldots,N)$ を考える。ここで、 「射影されたデータ点の分散を最大化しながら、データを次元 $M ことを考える。 1次元空間の上への射影（$M=1$） この空間の方向を $D$ 次元ベクトル $\\mathbf{u}_1$ として表す。ここで、興味があるのは $\\mathbf{u}_1$ の方向だけであるので、$\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ としても一般性を失わない。 したがって、各データ点 $\\mathbf{x}_n$ は スカラー値 $\\mathbf{u}_1&#94;T\\mathbf{x}_n$ の上に射影される。ここで、射影されたデータの平均・分散は以下のようになる。 統計量 平均値 $$\\mathbf{u}_1&#94;T\\bar{\\mathbf{x}}\\qquad\\bar{\\mathbf{x}} = \\frac{1}{N}\\sum_{n=1}&#94;N\\mathbf{x}_n\\qquad (12.1)$$ 分散 $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1\\qquad\\mathbf{S} = \\frac{1}{N}\\sum_{n=1}&#94;N\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\qquad (12.3)$$ ここで、 射影されたデータの分散を、$\\mathbf{u}_1$ に関して最大化 することを考える。 制約条件 $\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ をラグランジュ乗数 $\\lambda_1$ を利用して導入して $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1 + \\lambda_1\\left(1-\\mathbf{u}&#94;T_1\\mathbf{u}_1\\right)\\qquad (12.4)$$ を最大化すれば良い。$\\mathbf{u}_1$ に関する微分を $0$ とおくことにより、停留条件は $$\\mathbf{Su}_1 = \\lambda_1\\mathbf{u}_1\\qquad (12.5)$$ となることがわかる。これは、 $\\mathbf{u}_1$ が $\\mathbf{S}$ の固有ベクトルであること を示している。左から $\\mathbf{u}&#94;T_1$ をかけると、 $$\\text{Variance} = \\mathbf{u}&#94;T_1\\mathbf{Su}_1 = \\lambda_1 \\qquad (12.6)$$ となる。よって、 分散は $\\mathbf{u}_1$ を、最大固有値 $\\lambda_1$ に属する固有ベクトルに選んだ時に最大になる ことがわかる。 $M$ 次元空間の上への射影（一般解） 演習12.1 帰納法を用いて、 射影されたデータの分散を最大化するようなM次元部分空間の上への線形写像が、データ共分散行列Sの上位M個の固有値に属するM本の固有ベクトルによって定義される ことを示す。 仮定 $M$ に対して上記が成り立つ。 データ空間に対する新しい方向ベクトル $\\mathbf{u}_{M+1}$ は、次を満たす。 $\\mathbf{u}_{M+1}$ は、$\\mathbf{u}_1,\\ldots,\\mathbf{u}_M$ と直交する。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0$） 単位長に規格化されている。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{M+1}=1$） 制約条件を踏まえると、 $$L = \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\lambda_{M+1}\\left(1-\\mathbf{u}&#94;T_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_j$$ 両辺を $\\mathbf{u}_{M+1}$ で微分すると、 $$0 = \\frac{\\partial L}{\\partial \\mathbf{u}_{M+1}} = 2\\left(\\mathbf{Su}_{M+1} - \\lambda_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_j\\cdots(\\ast)$$ これに左から $\\mathbf{u}&#94;T_{j}$ をかけると、 $$0 = \\lambda&#94;{\\prime}_j\\quad(\\because \\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0)$$ となるので、これを $(\\ast)$ に代入して、 $$\\mathbf{Su}_{M+1} = \\lambda_{M+1}\\mathbf{u}_{M+1}$$ また、この時分散は $$\\begin{aligned} \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i &= \\sum_{i=1}&#94;{M}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\mathbf{u}&#94;T_{M+1}\\mathbf{Su}_{M+1}\\\\ &= \\sum_{i=1}&#94;{M}\\lambda_i + \\lambda_{M+1} \\end{aligned}$$ ここで、仮定より $\\lambda_i$ は、データ共分散行列 $\\mathbf{S}$ の上位 $M$ 個の固有値なので、この分散を最大する $\\lambda_{M+1}$ は、$M+1$ 番目に大きい固有値となる。 誤差最小化による定式化 続いて、射影誤差の最小化に基づいた主成分分析の定式化を考える。 まず、$D$ 次元の基底ベクトル $\\{\\mathbf{u}_i\\}$ から成る完全正規直交系を導入する。（$\\mathbf{u}_i&#94;T\\mathbf{u}_i = \\delta_{ij}$） すると、各データ点はこれらの基底ベクトルの線形結合なので、以下の形で表すことができる。 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\alpha_{ni}\\mathbf{u}_i\\qquad (12.8)$$ なお、ここで式 $(12.8)$ は、各データ点 $\\{\\mathbf{x}_n\\}$ を、もともとの座標系から $\\{\\mathbf{u}_i\\}$ で表される新しい座標系への回転を表していると解釈できる （もともと $D$ 個の成分 $\\{x_{n1},\\ldots,x_{nD}\\}$ が、等価な集合 $\\{a_{n1},\\ldots,a_{nD}\\}$ に置き換えられている） 。 上式と $\\mathbf{u}_j$ との内積を取り、正規直交性を使うと、$\\alpha_{nj} = \\mathbf{x}_n&#94;T\\mathbf{u}_j$ を得るので、 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right)\\mathbf{u}_i\\qquad (12.9)$$ $D$ 次元から $M$ 次元への近似 ここで、$M （$M$ 次元空間で完全に $\\mathbf{x}_n$ を表現するのは一般に不可能なので、近似する。） したがって、各データ点を $$\\tilde{\\mathbf{x}}_n = \\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\qquad (12.10)$$ $\\{z_{ni}\\}$ は特定のデータ点に依存。 $\\{b_i\\}$ は全てのデータ点に共通な定数。 と近似して表す。つまり、 $\\{\\mathbf{u}_i\\}$ と $\\{z_{ni}\\}$ と $\\{b_i\\}$ を調整することで、次元が減ることによってもたらされる歪みを最小化すること がここでの目的となる。 近似による歪み尺度 $J$ 近似による歪みの尺度として、元々のデータ点 $\\mathbf{x}_n$ とその近似 $\\tilde{\\mathbf{x}}_n$ の間の2乗距離をデータ集合に渡って平均したものを採用する。 $$\\begin{aligned} J &= \\frac{1}{N}\\sum_{n=1}&#94;N\\|\\mathbf{x}_n-\\tilde{\\mathbf{x}}_n\\|&#94;2\\qquad (12.11)\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\left\\|\\mathbf{x}_n-\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)\\right\\|&#94;2 \\end{aligned}$$ そこで、各変数についての微分を $0$ としてこれを最小化する変数を求める。 $\\{z_{ni}\\}$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial z_{ni}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\left\\|\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\sum_{i=1}&#94;Mz_{ni}&#94;2-2\\sum_{i=1}&#94;Mz_{ni}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=1}&#94;M2\\left\\{z_{ni}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore z_{ni}&#94;{\\star} &= \\mathbf{x}_n&#94;T\\mathbf{u}_i \\qquad (12.12) \\end{aligned} $$ $b_i$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial b_{i}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\left\\|\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\sum_{i=M+1}&#94;Db_{i}&#94;2-2\\sum_{i=M+1}&#94;Db_{i}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D2\\left\\{b_{i}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore b_{i}&#94;{\\star} &= \\bar{\\mathbf{x}}_n&#94;T\\mathbf{u}_i \\qquad (12.13) \\end{aligned} $$ $J$ の整頓 ここで、$(12.10)$ の $z_{ni},b_i$ を置き換えると、 $$ \\begin{aligned} \\mathbf{x}_n-\\tilde{\\mathbf{x}}_n &= \\mathbf{x}_n-\\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=1}&#94;D\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i - \\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=M+1}&#94;D\\left\\{\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\mathbf{u}_i\\right\\}\\mathbf{u}_i\\qquad (12.14) \\end{aligned} $$ と表すことができる。この式から、 $\\tilde{\\mathbf{x}}_n$ から $\\mathbf{x}_n$ への変位を表すベクトルは、主部分空間に直交する空間にあることがわかる。 以上より、歪み尺度 $J$ に対する表現を、純粋に $\\{\\mathbf{u}_i\\}$ の関数として、以下のような形で得られることがわかる。 $$J = \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i-\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\right)&#94;2 = \\sum_{i=M+1}&#94;D\\mathbf{u}&#94;T_i\\mathbf{Su}_i\\qquad (12.15)$$ したがって、あとは$J$ を $\\{\\mathbf{u}_i\\}$ に対して最小化すれば良い。 $M=1,D=2$ の場合 $M=1,D=2$ の場合、 「規格化条件 $\\mathbf{u}&#94;T_2\\mathbf{u}_2 = 1$ の下で、方向 $\\mathbf{u}_2$ を、$J=\\mathbf{u}&#94;T_2\\mathbf{Su}_2$ が最小化されるように選ぶ」 問題となる。 つまり、ラグランジュ乗数を用いて、 $$\\tilde{J} =\\mathbf{u}&#94;T_2\\mathbf{Su}_2 + \\lambda_2\\left(1-\\mathbf{u}&#94;T_2\\mathbf{u}_2\\right)\\qquad (12.16)$$ を最小化する問題となる。 $\\mathbf{u}_i$ についての微分を $0$ とおくと、$\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を得る。つまり、$\\mathbf{u}_2$ は固有値 $\\lambda_2$ に属する $\\mathbf{S}$ の固有ベクトルであるので、 任意の固有ベクトルは、この歪み尺度の停留点を定義することとなる。 $(12.16)$ に $\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を代入すると、$J=\\lambda_2$ となる。ゆえに、 「$\\mathbf{u}_2$ を、2つある固有値のうち小さい方に対応した固有ベクトルを選ぶことにより、$J$ の最小値を得ることができる」 （↔︎ 主部分空間では大きい方 ） 任意の $D$ と任意の $M 任意の $D$ と任意の $M $$\\mathbf{Su}_i = \\lambda_i\\mathbf{u}_i\\qquad (12.17)$$ で与えられる共分散行列の固有ベクトルに選ぶことによって得られる。ここで $i=1,\\ldots,D$ であり、固有ベクトル $\\{\\mathbf{u}_i\\}$ は正規直交するように選ばれる。 また、対応する歪み尺度の値は、 $$J = \\sum_{i=M+1}&#94;D\\lambda_i\\qquad (12.18)$$ のように、 主部分空間に直交する固有ベクトルの固有値についての単なる和 で与えられる。したがって、$J$ の最小値は、小さい順から $D-M$ 個の固有値に対応する固有ベクトルを選ぶことによって得られ、つまり主部分空間を定義する固有ベクトルは大きい順から $M$ 個の固有値に対応する固有ベクトルになる。 実装 Wine Data Set (UCI Machine Learning Repository) のデータを利用し、13次元、178データ、3種類のワインの属性データから、2つの主成分を取って可視化を行います。 また、PCAは自作のモジュール （ kerasy.ML.decomposition.PCA ） を用います。 In [1]: # データ取得。 ! wget https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt --2019-10-07 13:20:45-- https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.228.133 Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.228.133|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 12173 (12K) [text/plain] Saving to: `wine.txt' wine.txt 100%[===================>] 11.89K --.-KB/s in 0s 2019-10-07 13:20:45 (40.4 MB/s) - `wine.txt' saved [12173/12173] In [2]: from kerasy.ML.decomposition import PCA In [3]: import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib.colors import LinearSegmentedColormap In [4]: colors = [( 1 , 0 , 0 ), ( 0 , 0 , 1 ), ( 0 , 1 , 0 )] n_bin = len ( colors ) cmap_name = 'my_list' cm = LinearSegmentedColormap . from_list ( cmap_name , colors , N = n_bin ) In [5]: df = pd . read_csv ( \"wine.txt\" , sep = \" \\t \" , index_col = 0 ) In [6]: df . head ( 3 ) Out[6]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } class Alcohol Malic acid Ash Alcalinity of ash Magnesium Total phenols Flavanoids Nonflavanoid phenols Proanthocyanins Color intensity Hue OD280/OD315 of diluted wines Proline 0 1 14.23 1.71 2.43 15.6 127 2.80 3.06 0.28 2.29 5.64 1.04 3.92 1065 1 1 13.20 1.78 2.14 11.2 100 2.65 2.76 0.26 1.28 4.38 1.05 3.40 1050 2 1 13.16 2.36 2.67 18.6 101 2.80 3.24 0.30 2.81 5.68 1.03 3.17 1185 class カラムがワインの種類を表しているので、この列は主成分分析から取り除きます。 In [7]: cls = df . iloc [:, 0 ] . values In [8]: df_use = df . iloc [:, 1 :] また、 データの標準化 を行います。 In [9]: df_std = df_use . apply ( lambda x : ( x - x . mean ()) / x . std (), axis = 0 ) In [10]: data = np . array ( df_std ) データの準備ができたので、主成分分析を行います。 In [11]: pca = PCA () pca . fit ( data ) features = pca . transform ( data ) In [12]: plt . figure ( figsize = ( 6 , 6 )) plt . scatter ( features [:, 0 ], features [:, 1 ], c = cls , cmap = cm , edgecolors = 'black' ) plt . title ( \"Same fig with slide :)\" ) plt . xlabel ( \"PC1\" ) plt . ylabel ( \"PC2\" ) plt . grid () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html"},{"title":"Nussinov Algorithm","text":"Nussinov Algorithmは、最もシンプルな二次構造予測アルゴリズムである。 「最大いくつの塩基対を作ることができるか」 を調べる。 動的計画法を用いて効率的に調べるために、以下のような Pseudoknot は無視している。様々な重要なRNAが、Pseudoknotの形をとることが確認されているが、相対的にこのような構造をとる確率は低いので、計算の効率を優先し、これらを無視する。 Algorithm ※「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 今回の実装では $j-i-1<3$ の時は、$i,j$ が塩基対を作れないものとしている。 ポイントはRecursionの最後の式で、 「$i$ から $k$ までの部分塩基配列」 と 「$k+1$ から $j$ までの部分塩基配列」 を足し合わせる操作を行う。 （Bifurcation） Initialization: $$\\begin{aligned} \\gamma(i,i)&=0&\\text{ for }i=1\\text{ to }L\\\\ \\gamma(i,i-1)&=0&\\text{ for }i=2\\text{ to }L \\end{aligned}$$ Recursion: $$ \\gamma(i,j) = \\max \\begin{cases} \\gamma(i+1,j)\\\\ \\gamma(i,j-1)\\\\ \\gamma(i+1,j-1)+\\delta(i,j)\\\\ \\max_{i\\leq k\\verb|<|j}\\left[\\gamma(i,k) + \\gamma(k+1,j)\\right] \\end{cases} $$ TraceBack 基本的なアルゴリズムは同じですが、 Bifurcationが起きた際にトレースバックポインターを複数用意する必要があることには注意が必要です。 bp = [] stack = [( 0 , N - 1 )] while ( stack ): i , j = stack . pop ( 0 ) delta = 1 if self . _is_bp ( sequence [ i ], sequence [ j ]) and ( j - i > 3 ) else 0 if ( i >= j ): continue elif gamma [ i + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( i + 1 , j )) elif gamma [ i ][ j - 1 ] == gamma [ i ][ j ]: stack . append (( i , j - 1 )) elif gamma [ i + 1 ][ j - 1 ] + delta == gamma [ i ][ j ]: bp . append (( i , j )); stack . append (( i + 1 , j - 1 )) else : # Bifurcation for k in range ( i , j ): if gamma [ i ][ k ] + gamma [ k + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( k + 1 , j )) stack . append (( i , k )) break 自作のモジュール （kerasy.Bio.structure.Nussinov） を使って実装します。 In [1]: from kerasy.Bio.structure import Nussinov In [2]: model = Nussinov () In [3]: # 以下の形のパラメタファイルを受け取ります。 ! cat params.json { \"type\": \"DNA\", \"Watson_Crick\": true, \"Wobble\": true } In [4]: model . load_params ( \"params.json\" ) In [5]: model . params () | parameter |value| -------------------- |type | DNA| |Watson_Crick| 1| |Wobble | 1| In [6]: # サンプル配列 sequence = \"GCGGAAACGGGGTCA\" In [7]: # 最大ペアの配列 model . predict ( sequence , memorize = True , traceback = True ) Nussinov Algorithm Score: 3 ================================================================= seq: GCGGAAACGGGGTCA : ( (( ))) ================================================================= In [8]: gamma = model . gamma In [9]: # DP行列は以下のようになっています。 model . _printAsTerai ( gamma , sequence ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 1 2 2 2 2 2 3 3 C - 0 0 0 0 0 0 1 2 2 2 2 2 3 3 G - - 0 0 0 0 0 1 1 1 1 1 2 3 3 G - - - 0 0 0 0 1 1 1 1 1 2 3 3 A - - - - 0 0 0 0 0 0 0 1 2 2 2 A - - - - - 0 0 0 0 0 0 1 2 2 2 A - - - - - - 0 0 0 0 0 1 2 2 2 C - - - - - - - 0 0 0 0 1 1 1 1 G - - - - - - - - 0 0 0 0 0 1 1 G - - - - - - - - - 0 0 0 0 1 1 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 $i,j$ が塩基対を組むときの塩基対最大化 塩基 $i,j$ が塩基対を組むという制約がある場合を考えます。これは、「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を保持した $\\omega(i,j)$ と $\\gamma(i,j)$ を組み合わせることで効率的に求めることができます。 Algorithm 「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を $\\omega(i,j)$ が保持している。 Initialization: $$\\omega(i,L) = 0$$ Recursion: $$ \\omega(i,j) = \\max \\begin{cases} \\omega(i-1,j)\\\\ \\omega(i,j+1)\\\\ \\omega(i-1,j+1)+\\delta(i-1,j+1)\\\\ \\max_{1\\leq k\\verb|<|i}\\left[\\omega(k,j) + \\gamma(k,i-1)\\right]\\\\ \\max_{j\\verb|<| k\\leq L}\\left[\\omega(j+1,k) + \\gamma(i,k)\\right] \\end{cases} $$ In [10]: model . outside ( sequence , memorize = True ) In [11]: omega = model . omega In [12]: # DP行列は以下のようになっています。 model . _printAsTerai ( omega , sequence ) \\ G C G G A A A C G G G G T C A G 3 3 3 2 2 2 1 1 1 0 0 0 0 0 0 C - 3 3 3 3 3 2 1 1 1 1 1 1 0 0 G - - 3 3 3 3 2 2 2 2 2 1 1 0 0 G - - - 3 3 3 2 2 2 2 2 1 1 0 0 A - - - - 3 3 2 2 2 2 2 1 1 0 0 A - - - - - 3 3 2 2 2 2 2 1 0 0 A - - - - - - 3 2 2 2 2 2 1 0 0 C - - - - - - - 2 2 2 2 2 1 0 0 G - - - - - - - - 3 3 3 2 2 1 1 G - - - - - - - - - 3 3 3 3 2 2 G - - - - - - - - - - 3 3 3 2 2 G - - - - - - - - - - - 3 3 2 2 T - - - - - - - - - - - - 3 2 2 C - - - - - - - - - - - - - 2 2 A - - - - - - - - - - - - - - 3 $Z(i,j)$ の計算 variable definition $\\gamma\\left(i,j\\right)$ the maximum number of base-pairs for subsequence from $i$ to $j$. $\\omega\\left(i,j\\right)$ the maximum number of base-pairs excluding subsequence from $i$ to $j$. 上記の定義より、$\\gamma,\\omega$ を用いて $Z(i,j)$ が以下のように求まることがわかります。 $$Z(i,j) = \\begin{cases} \\gamma\\left(i+1,j-1\\right) + 1 + \\omega\\left(i,j\\right) & (\\text{if }i\\text{ and }j\\text{-th nucleotides can form a base-pair})\\\\ 0 & (\\text{otherwise}) \\end{cases}$$ In [13]: model . ConstrainedMaximize ( sequence , memorize = False ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 2 0 0 0 0 0 3 0 C - 0 0 0 0 0 0 0 3 3 3 3 0 0 0 G - - 0 0 0 0 0 3 0 0 0 0 0 3 0 G - - - 0 0 0 0 3 0 0 0 0 0 3 0 A - - - - 0 0 0 0 0 0 0 0 3 0 0 A - - - - - 0 0 0 0 0 0 0 3 0 0 A - - - - - - 0 0 0 0 0 0 3 0 0 C - - - - - - - 0 0 0 0 3 0 0 0 G - - - - - - - - 0 0 0 0 0 2 0 G - - - - - - - - - 0 0 0 0 3 0 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 備忘録 Nussinov Algorithmでは、これまでの動的計画法とは異なり、 $i,j$ を斜め方向に舐める必要がありました。 そこで、その際に使用したコードを備忘録として残しておきます。 In [14]: import numpy as np In [15]: N = 4 In [16]: # Nussinov Algorithm (γ) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for ini_i in reversed ( range ( N )): diff = N - ini_i for i in reversed ( range ( ini_i )): arr [ i ][ i + diff ] = idx idx += 1 print ( arr ) [[0 3 5 6] [0 0 2 4] [0 0 0 1] [0 0 0 0]] In [17]: # Nussinov outsie (ω) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for j in reversed ( range ( N )): for i in range ( N - j ): arr [ i ][ j + i ] = idx idx += 1 print ( arr ) [[ 7 4 2 1] [ 0 8 5 3] [ 0 0 9 6] [ 0 0 0 10]] In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-8.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-8.html"},{"title":"Pair HMM の最尤推定","text":"Baum-Welch Pair HMMとは、二本の配列を受け取ってペアワイズアラインメントを出力するHMMで、 「アラインメントの確率的な解釈が可能になる」 （アラインメントのどの部分が信頼できるかを確率的に評価できる） という利点があります。 このPair HMMは、一般的なHMMと同様にBaum-Welchアルゴリズムによってパラメータを最尤推定していきます。 \\(\\xi\\) HMM 一般的なHMMでは、例えば 遷移確率 \\(A_{jk}\\) （状態 \\(j\\) から状態 \\(k\\) に遷移する確率） を最尤推定する際は、 直感的には 「状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「状態 \\(j\\) から遷移する回数」 で割れば最尤解が求まる。 実際の隠れ状態の遷移が確定していないので、 「 期待される 状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「 期待される 状態 \\(j\\) から遷移する回数」 で割れば良い。 \\(\\mathbf{z}_{n-1}\\) で状態 \\(j\\) におり、 \\(\\mathbf{z}_n\\) で状態 \\(k\\) にいる確率 \\(\\xi\\left(z_{n-1,j},z_{nk}\\right)\\) は、forward-backward algorithmの \\(\\alpha,\\beta\\) を用いれば以下のように求めることができる。 $$\\xi_n\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ \\(\\xi\\) を用いて、最尤推定を行う。 $$A_{j k}= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\qquad (13.19)$$ という様に行いますが、Pair HMMは、 挿入・欠失を考えるため、 \\(n\\) で配列 \\(\\mathbf{X,Y}\\) のどの要素（ \\(\\mathbf{x}_u,\\mathbf{y}_v\\) ）を考えているのか一意に定まらない という点で普通のHMMとは異なります。 Pair HMM そこで、 「 \\(n\\) ではなく \\(u,v\\) に注目する」 ことで、 \\((13.43)\\) の式を以下のように書き換えます。 $$\\xi_{u,v}\\left(i,j\\right)=\\frac{f_i\\left(u,v\\right)A_{ij}\\phi_j\\left(\\diamond_1\\right)b_j\\left(\\diamond_2,\\diamond_3\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ ここで、分子に注目すると、各変数の意味が variable meaning \\(f_i\\left(u,v\\right)\\) The probability of ending up in state \\(i\\) after aligning the two sequences \\(\\mathbf{X,Y}\\) up to observation \\(u\\) and \\(v\\) respectively. \\(A_{ij}\\) the transition probability from state \\(i\\) to state \\(j\\) . \\(\\phi_j\\left(\\diamond_1\\right)\\) the emission probability of emitting \\(\\diamond_1\\) in state \\(j\\) . \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) the probability of being in state \\(j\\) , given the sequences \\(\\mathbf{X,Y}\\) are aligned from observation \\(\\diamond_2+1\\) and \\(\\diamond_3+1\\) to the end of the sequences respectively. であるので、 \\(\\diamond\\) は状態によって異なり、具体的に書き下すと以下のようになります。 state\\variable \\(\\phi_j\\left(\\diamond_1\\right)\\) \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) \\(M\\) \\(e\\left(x_{u+1},y_{v+1}\\right)\\) \\(b_j\\left(u+1,v+1\\right)\\) \\(X\\) \\(e\\left(x_{u+1}\\right)\\) \\(b_j\\left(u+1,v\\right)\\) \\(Y\\) \\(e\\left(y_{v+1}\\right)\\) \\(b_j\\left(u,v+1\\right)\\) \\(\\gamma\\) 同様に \\(\\gamma\\) も考えると、 $$ \\gamma_n\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad(13.33)$$ から、 $$\\gamma_i\\left(u,v\\right)=\\frac{f_i\\left(u,v\\right)b_j\\left(u,v\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ のように書き換えることになります。 Maximization step ここまでで \\(\\gamma,\\xi\\) が求まったので、M stepで各パラメータを更新します。なお、以下で \\(w\\) は全ての記号の組を表します。 $$w\\in\\left\\{(k_x,k_y)|k_x,k_y\\in\\left\\{A,T,G,C,\\epsilon \\right\\}\\right\\}\\setminus(\\epsilon,\\epsilon)$$ \\(\\pi_k\\) $$\\pi&#94;{\\star}_i = \\sum_w\\gamma_i&#94;w(0,0)$$ \\(A_{ij}\\) $$A&#94;{\\star}_{ij} = \\frac{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\sum_{j}&#94;{K}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}$$ final emitting state \\(\\tilde{U}\\) \\(\\tilde{V}\\) \\(M\\) \\(U-1\\) \\(V-1\\) \\(X\\) \\(U-1\\) \\(V\\) \\(Y\\) \\(U\\) \\(V-1\\) \\(\\phi_{i}(k)\\) $$\\phi_i\\left(k\\right) = \\frac{\\sum_w\\sum_{u=0}&#94;{U\\ast1}\\sum_{v=0}&#94;{V\\ast2}\\gamma_i&#94;w\\left(u,v\\right)}{\\sum_w\\sum_{u=0}&#94;U\\sum_{v=0}&#94;V\\gamma_i&#94;w\\left(u,v\\right)}$$ \\(\\ast1\\) ： \\(x_u=k_x\\) and state \\(i\\) equals the state \\(M\\) or \\(X\\) . (in the state \\(Y\\) , a gap is present in observation stream \\(x\\) therefore \\(k_x\\) is not present.) \\(\\ast2\\) ： \\(y_v=k_y\\) and state \\(j\\) equals the state \\(M\\) or \\(Y\\) . Reference Wahle, Johannes and Armin Buch. \"Alignment and word comparison with Pair Hidden Markov Models.\" (2013). pp.22-31 Martijn B. Wieling. \"Comparison of Dutch Dialects\" (2007) pp.36-50 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-7.html"},{"title":"生物統計論 第2回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section2.1 Central Limit Theorem Law of Large Numbers Estimation is accurate with many samples. Foundation of repeated measurement. Regardless of true distribution. Assuming independence. Theorem Let $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ be an independent trials process, with finite expected value $\\mu = \\mathbb{E}\\left(\\mathbf{X}_i\\right)$ Let $\\bar{\\mathbf{X}}_n = \\frac{1}{n}\\left(\\mathbf{X}_1,\\mathbf{X}_2+\\cdots+\\mathbf{X}_n\\right)$ be a sample mean. Weak law : $$\\lim_{n\\rightarrow\\infty}P\\left(|\\bar{\\mathbf{X}}_n-\\mu|>\\varepsilon\\right) = 0 \\quad\\left(\\forall\\varepsilon>0\\right)$$ Strong law $$P\\left(\\lim_{n\\rightarrow\\infty}\\bar{\\mathbf{X}}_n = \\mu\\right) = 1$$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Chebyshev Inequality Let $\\mathbf{X}$ be a discrete random variable with expected value $\\mu=\\mathbb{E}\\left(\\mathbf{X}\\right)$ $$ P \\left(|\\mathbf{X}-\\mu|>\\varepsilon\\right)\\leq\\frac{\\mathbb{V}\\left(\\mathbf{X}\\right)}{\\varepsilon&#94;2}$$ Example In [2]: N = 1000 seed = 0 In [3]: trials = np . arange ( 1 , N + 1 ) In [4]: dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = N ) ave_dices = np . cumsum ( dices ) / trials In [5]: plt . axhline ( 3.5 , color = \"blue\" , label = \"Theoretical mean\" ) plt . plot ( trials , ave_dices , label = \"Observed average\" , color = \"green\" ) plt . ylim ( 1 , 6 ) plt . title ( \"Average dice roll by number of rolls\" ) plt . ylabel ( \"Average\" ) plt . xlabel ( \"Number of trials\" ) plt . grid () plt . legend () plt . show () If we keep rolling the dice over and over again, the sample average of dice roll will converge to the true average. Exception The law of large numbers assumes the existance of expected values . Therefore, it will not hold when there is no expected value. (ex. Cauchy distribution ) Cauchy distribution $$ \\begin{aligned} f(x;x_0,\\gamma) &= \\frac{1}{\\pi\\gamma\\left[1 + \\left(\\frac{x-x_0}{\\gamma}\\right)&#94;2\\right]} = \\frac{1}{\\pi}\\frac{\\gamma}{\\left(x-x_0\\right)&#94;2 + \\gamma&#94;2} & \\begin{cases}x_0: \\text{Location paramete}\\\\\\gamma: \\text{Scale parameter}\\end{cases}\\\\ f(x;0,1) &= \\frac{1}{\\pi\\left(1+x&#94;2\\right)} & (\\text{standard cauchy distribution}) \\end{aligned} $$ In [6]: N = 5000 K = 3 seed = 1 In [7]: trials = np . arange ( 1 , N + 1 ) In [8]: samples = np . random . RandomState ( seed ) . standard_cauchy ( size = ( K * N )) . reshape (( K , N )) ave_samples = np . cumsum ( samples , axis = 1 ) / trials In [9]: for k in range ( K ): plt . plot ( trials , ave_samples [ k ], label = f \"Observation {k+1}\" ) plt . ylabel ( \"$(\\mathbf {X} _1+\\cdots+\\mathbf {X} _n)/n$\" ) plt . xlabel ( \"n\" ) plt . legend () plt . grid () Central Limit Theorem Sample mean follows normal distribution. Foundation of many statistical tests. Regardless of true distribution. Assuming independence. Theorem Let $\\{\\mathbf{X}_1,\\ldots,\\mathbf{X}_n\\}$ be a random sample of size $n$, which is a sequence of independent and identically distributed random variables drawn from a distribution. expected value given by $\\mu$. finite variance given by $\\sigma&#94;2$. Let $S_n:=\\sum_{k=1}&#94;n\\mathbf{X}_k$ $$P\\left(\\frac{S_n-n\\mu}{\\sqrt{n}\\sigma}\\leq\\alpha\\right)\\rightarrow\\frac{1}{\\sqrt{2\\pi}}\\int_{-\\infty}&#94;{\\alpha}e&#94;{-\\frac{x&#94;2}{2}}dx\\quad(n\\rightarrow\\infty)$$ Therefore: $$ \\begin{aligned} S_n&\\sim\\mathcal{N}\\left(n\\mu, n\\sigma&#94;2\\right) & (n\\rightarrow\\infty)\\\\ \\bar{\\mathbf{X}}_n = \\left(\\mathbf{X}_1+\\cdots+\\mathbf{X}_n\\right)/n&\\sim\\mathcal{N}\\left(\\mu,\\sigma&#94;2/n\\right) & (n\\rightarrow\\infty) \\end{aligned} $$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Example In [10]: N = 10000 ns = [ 10 , 100 , 1000 , 10000 ] roll = 4 seed = 0 In [11]: fig = plt . figure ( figsize = ( 12 , 6 )) ax_all = plt . subplot2grid (( 2 , len ( ns )), ( 0 , 0 ), colspan = len ( ns )) for i , n in enumerate ( ns ): ax = plt . subplot2grid (( 2 , len ( ns )), ( 1 , i )) dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = ( n , N )) rate_dice_eq_4 = np . count_nonzero ( dices == roll , axis = 1 ) / N freqs , bins , patches = ax . hist ( rate_dice_eq_4 , bins = 20 , density = True ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] ax_all . plot ( cent_bins , freqs , label = f \"n= {n} \" ) ax . set_title ( f \"n= {n} \" ) ax . set_xlabel ( f \"Probability of {roll} roll.\" ) ax . set_ylabel ( \"freq\" ) ax_all . set_title ( \"Central Limit Theorem\" ) ax_all . legend () plt . tight_layout () plt . show () Section2.2 ChIP-seq Peak Detection ChIP-sequencing, also known as ChIP-seq, is a method used to analyze protein interactions with DNA. ChIP-seq combines chromatin immunoprecipitation (ChIP) with massively parallel DNA sequencing to identify the binding sites of DNA-associated proteins. It can be used to map global binding sites precisely for any protein of interest. Previously, ChIP-on-chip was the most common technique utilized to study these protein–DNA relations. Peak calling Problem: How to identify transcription factor binding sites and histone modification enriched regions? Random Read Model Assume that read appears with equal probability in any region. Calcurate the p-value (the Probability of obtaining more or equally extreme value than observed value under the random model.) → Smaller is more significant. Setting the threshold (p-value) manually. We could calcurate the threshold ($n_{obs}$) → If the $n_{obs}$ exceeds this threshold, it is determined as the peak region. In [12]: from scipy.special import comb In [13]: g = 10000 # total DNA length n = 1000 # total number of reads l = 100 # bin size q = l / g n_bins = g / l lambda_ = n * q # mean read count seed = 0 xmax = 30 In [14]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) read_points = np . random . RandomState ( seed ) . randint ( 0 , g , size = n ) axL . scatter ( read_points , np . zeros ( shape = n ), s = 3 , label = \"read\" , color = \"black\" ) ledge = 0 read_counts = [] for edge in range ( l , g + 1 , l ): middl = ( ledge + edge ) / 2 count = np . count_nonzero ([( ledge <= read_points ) & ( read_points < edge )]) read_counts . append ( count ) if edge <= l * 10 : axL . axvline ( edge , color = \"red\" ) axL . text ( x = middl , y = 1e-3 , s = count , horizontalalignment = 'center' ) ledge = edge axL . set_xlim ( 0 , l * 10 ) axL . set_ylim ( - 1e-3 , 2e-3 ) axL . set_yticks ([]) axL . legend () Poisson = [ comb ( n , i , exact = True ) * ( q ** i ) * (( 1 - q ) ** ( n - i )) for i in range ( n )] axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axR . plot ([ read_counts . count ( i ) / n_bins for i in range ( n )], color = \"red\" , label = \"Observed\" ) axR . set_xlim ( 0 , xmax ) axR . set_xlabel ( \"Read count for each bin\" ) axR . set_ylabel ( \"Frequency\" ) axR . legend () plt . show () In [15]: n_obs = 15 p_values = np . cumsum ( Poisson [:: - 1 ])[:: - 1 ] # Calcurate p-value for each n_obs. thresh_p = 1e-2 bp = np . argmax ( p_values <= thresh_p ) In [16]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axL . fill_between ( np . arange ( n_obs , xmax ), y1 = Poisson [ n_obs : xmax ], y2 = 0 , facecolor = 'red' ) axL . annotate ( 'p-value \\n = $\\mathbb {P} (n_ {obs} \\leq N)$ \\n $=\\sum_{i=n_ {obs} }&#94;{\\infty}(\\lambda&#94;i/i!)\\cdot e&#94;{-\\lambda}$' , xy = ( 17 , 1e-2 ), xytext = ( 20 , 4e-2 ), fontsize = 12 , arrowprops = dict ( width = 1 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'black' ) ) axL . set_xlim ( 0 , 30 ) axL . set_title ( \"Poisson distribution\" ) axL . set_xlabel ( \"N\" ) axL . set_ylabel ( \"Freq\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( p_values , color = \"black\" ) axR . scatter ( n_obs , p_values [ n_obs ], color = \"red\" , label = \"pvalue($n_ {obs} $=\" + f \" {n_obs} )\" ) axR . scatter ( bp , p_values [ bp ], color = \"blue\" , label = \"Boundary point\" ) axR . axhline ( thresh_p , color = \"blue\" , label = f \"threshold(p_value= {thresh_p} )\" ) axR . axvspan ( xmin = bp , xmax = xmax , color = \"blue\" , alpha = 0.3 ) axR . set_xlim ( 0 , xmax ) axR . set_title ( \"The relationship between p-value and $n_ {obs} $\" ) axR . set_xlabel ( \"$n_ {obs} $\" ) axR . set_ylabel ( \"p-value\" ) axR . legend () plt . show () In this case, we could say the threshold($n_{obs}$) = 19(=bp). ※ In ChIP-seq, we have to do \"Tag shift\" due to the DNA strand asymmetry. （→ more: MACS ） Section2.3 Hypothesis Testing Terminology In [17]: fig , ax = plt . subplots ( figsize = ( 6 , 4 )) X = np . arange ( 10 , 100 , 1 ) Y = 1 / X # Null distribution ax . plot ( X , Y , color = \"red\" ), ax . text ( x = 15 , y = 8e-2 , s = \"Null distribution \\n $f_S(s|H)$\" , fontsize = 15 ) # Thereshold: Sα ax . plot (( 50 , 50 ),( 0 , 7e-2 ), color = \"black\" ), ax . text ( x = 48 , y = 7.5e-2 , s = \"$S_ {α} $\" , fontsize = 12 ) # Reject & Accept ax . annotate ( '' , xy = ( 75 , 5e-2 ), xytext = ( 52 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 55 , y = 5.5e-2 , s = \"reject\" , fontsize = 12 ) # Reject ax . annotate ( '' , xy = ( 25 , 5e-2 ), xytext = ( 48 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 35 , y = 5.5e-2 , s = \"accept\" , fontsize = 12 ) # Accept # Observation sample. ax . plot (( 70 , 70 ),( 0 , 1 / 70 ), color = \"black\" ), ax . scatter ( 70 , 1 / 70 , color = \"black\" ), ax . text ( x = 68 , y = 2e-2 , s = \"$S_ {obs} $\" , fontsize = 12 ) ax . set_xticks ([]), ax . set_yticks ([]) ax . set_xlabel ( \"S\" ), ax . set_ylabel ( \"freq\" ) ax . set_xlim ( min ( X ), max ( X )), ax . set_ylim ( min ( Y ), max ( Y )) plt . show () Null Hypothesis $H_0$ Alternative Hypothesis $H_1$ Test Static $S$ Null distribution Significance threshold Reject/Accept $H_0$ Null hypothesis is True Null hypothesis is False Do not reject Null hypothesis ($H_0$) Correct Type2 error (False negative) Reject Null hypothesis ($H_0$) Type1 error (False positive) Correct P-value distribute uniformly under $H_0$ Proof. p-value is the probability of obtaining more or equally extreme value than observed value under the null distribution. $$p = \\mathbb{P}\\left(S\\geq s|H_0\\right) = 1-\\mathbb{P}\\left(S< s|H_0\\right)$$ By noting $F_0$ the cumulative distribution function of $S$ under $H_0$, we obtain: $$p = 1-F_0(s)$$ Thanks to the fact that the cdf is monotonic, increasing and (left-)continuous: $$\\mathbb{P}\\left(S\\geq s|H_0\\right) = \\mathbb{P}\\left(F_0\\left(S\\right)\\geq F_0\\left(s\\right)\\right) = 1-\\mathbb{P}\\left(F_0\\left(S\\right)< F_0\\left(s\\right)\\right)$$ Therefore, we have: $$\\mathbb{P}\\left(F_0\\left(S\\right)< F_0\\left(s\\right)\\right) = F_0\\left(s\\right)$$ Which means that $F_0\\left(S\\right)$ is following a uniform distribution. And, as this means also that $1-F_0\\left(S\\right)$ is following a uniform distributed, then we can conclude that p-value are uniformly distributed under the null hypothesis. In [18]: from scipy.stats import norm In [19]: N = 10000 loc = 0 scale = 1 seed = 0 In [20]: obs = np . random . RandomState ( seed ) . normal ( loc = loc , scale = scale , size = N ) # observation sample \"s\". p_value = 1 - norm . cdf ( x = obs , loc = loc , scale = scale ) # p-value = 1 - F(s) In [21]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) freqs , bins , patches = axL . hist ( obs , bins = 50 , density = True , color = \"blue\" , alpha = 0.7 ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] axL . plot ( cent_bins , freqs , color = \"blue\" ) axL . set_title ( \"Histogram of observation sample s \\n under the null distribution (This time: Normal distribution)\" ), axL . set_xlabel ( \"observation s\" ), axL . set_ylabel ( \"Frequency\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . hist ( p_value , bins = 20 , edgecolor = \"black\" ) axR . set_title ( \"Histogram of p-value\" ), axR . set_xlabel ( \"p-value\" ), axR . set_ylabel ( \"Frequency\" ) plt . tight_layout () plt . show () ※ We could argue about the p-value under the null hypothesis, but we could not confirm whether null hypothesis is true or not. Section2.4 Hypothesis Test Example $\\chi&#94;2$-test Any statistical hypothesis test where the sampling distribution of the test statistic is a chi-squared distribution when the null hypothesis is true. Used to determine whether there is a significant difference between the expected frequencies and the observed frequencies in one or more categories. $\\chi&#94;2$-distribution $Y_i\\sim\\mathcal{N}\\left(0,1\\right), i=1,\\ldots,\\nu$: i.i.d. $X=Y_1&#94;2+\\cdots+Y_{\\nu}$ $\\rightarrow X\\sim\\chi&#94;2(\\nu), X\\in \\mathbb{R}_{\\geq0}$ $$ \\begin{aligned} f_X(x) &= \\frac{1}{2&#94;{\\nu/2}\\Gamma(\\nu/2)}x&#94;{\\nu/2-1}e&#94;{-x/2}\\\\ \\Gamma(z) &= \\int_{0}&#94;{\\infty}t&#94;{z-1}e&#94;{-t}dt(\\mathrm{Re}(z)>0)\\\\ \\mathbb{E}(X) &= \\nu\\\\ \\mathbb{V}(X) &= 2\\nu \\end{aligned} $$ In [22]: from scipy.stats import chi2 In [23]: K = 5 In [24]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( 0 , 8 , 1000 ) for k in range ( 1 , K + 1 ): plt . plot ( X , chi2 . pdf ( X , k ), label = f \"$k= {k} $\" ) plt . xlim ( 0 , 8 ), plt . ylim ( 0 , 1.0 ) plt . title ( \"$\\chi&#94;2$-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Pearson's chi-square test goodness of fit test # $C_1$ $C_2$ $\\cdots$ $C_k$ total Observation frequency $n_1$ $n_2$ $\\cdots$ $n_k$ $n$ Theoretical probability (under $H_0$) $p_1$ $p_2$ $\\cdots$ $p_k$ $1$ Theoretical frequency $m_1=np_1$ $m_2=np_2$ $\\cdots$ $m_k=np_k$ $n$ Null Hypothesis($H_0$): $P(C_i) = p_i\\quad(i=1,2,\\ldots,k)$ If null hypothesis is true, $U$ are distributed as $\\chi&#94;2(k-1)$. $$ U=\\sum_{i=1}&#94;k\\frac{(n_i-m_i)&#94;2}{m_i}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ test for independence A\\B $B_1$ $B_2$ $\\cdots$ $B_b$ total $A_1$ $n_{11}$ $n_{12}$ $\\cdots$ $n_{1b}$ $n_{1\\cdot}$ $A_2$ $n_{21}$ $n_{22}$ $\\cdots$ $n_{2b}$ $n_{2\\cdot}$ $\\vdots$ $\\vdots$ $\\vdots$ $\\cdots$ $\\ddots$ $\\vdots$ $A_a$ $n_{a1}$ $n_{a2}$ $\\cdots$ $n_{ab}$ $n_a$ total $n_{\\cdot1}$ $n_{\\cdot2}$ $\\cdots$ $n_{\\cdot b}$ $n_{a\\cdot}$ $P(A_i) = p_i,P(B_j)=q_j,\\quad (1\\leq i\\leq a,1\\leq j\\leq b)$ Null Hypothesis($H_0$): $A$ and $B$ are independence. $$P(A_i\\cap B_j) = p_iq_j$$ If null hypothesis is true, we could presume: $\\bar{p_i}=n_{i\\cdot}/n$, $\\bar{q_j}=n_{\\cdot j}/n$. $m_{ij} = n\\bar{p_i}\\bar{q_j}$ (Theoretical frequency) $$ U=\\sum_{i=1}&#94;a\\sum_{j=1}&#94;b\\frac{(n_{ij}-m_{ij})&#94;2}{m_{ij}}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ t-test One-sample test: Determine whether a sample of observations could have been generated by a process with a specific mean $\\mu$. Two-sample test: Compare the average values of the two data sets and determine if they came from the same population. t-distribution $$ \\begin{aligned} f_{t(\\nu)}(x) &= \\frac{\\Gamma\\left(\\frac{\\nu+1}{2}\\right)}{\\sqrt{\\nu\\pi}\\Gamma\\left(\\frac{\\nu}{2}\\right)}\\left(1+\\frac{x&#94;2}{\\nu}\\right)&#94;{-\\frac{\\nu+1}{2}}\\\\ \\mathbb{E}(X) &= 0(\\nu>1)\\\\ \\mathbb{V}(X) &= \\begin{cases}\\infty&(1<\\nu\\leq2)\\\\\\frac{\\nu}{\\nu-2}&(2<\\nu)\\end{cases} \\end{aligned} $$ In [25]: from scipy.stats import t as tdist In [26]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( - 6 , 6 , 1000 ) nus = [ 1 , 2 , 5 , 1000 ] for nu in nus : plt . plot ( X , tdist . pdf ( X , nu ), label = f \"$ν= {nu} $\" ) plt . plot ( X , norm . pdf ( X , 0 , 1 ), linestyle = ':' , linewidth = 5 , label = \"Standard Normal Distribution\" ) plt . xlim ( - 6 , 6 ), plt . ylim ( 0 , 0.4 ) plt . title ( \"t-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Student's t-test One-sample test: $$ X_1,\\ldots,X_n\\sim\\mathcal{N}(\\mu,\\sigma)\\text{: i.i.d.}\\\\ \\bar{X} = \\frac{X_1,\\ldots,X_n}{n}, S = \\frac{\\left(X_1-\\bar{X}\\right)&#94;2 + \\cdots+\\left(X_n-\\bar{X}\\right)&#94;2}{n-1}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}-\\mu\\sqrt{n}\\right)}{S}\\sim t(n-1) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{X_{11}+\\cdots+X_{1m}}{m}\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{X_{21}+\\cdots+X_{2n}}{n}\\\\ S=\\frac{\\sum_{i=1}&#94;m\\left(X_{1i}-\\bar{X}_1\\right)&#94;2 + \\sum_{i=1}&#94;n\\left(X_{2i}-\\bar{X}_2\\right)&#94;2}{m+n-2}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)\\sqrt{mn}}{S\\sqrt{m+n}}\\sim t(m+n-2) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{\\sum_{i=1}&#94;mX_{1i}}{m}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{1i} - \\bar{X}_1\\right)&#94;2}{m-1}, A=S_1/m\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{\\sum_{i=1}&#94;mX_{2i}}{n}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{2i} - \\bar{X}_2\\right)&#94;2}{n-1}, B=S_2/n\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)}{S\\sqrt{A+B}}\\approx t(\\nu), \\nu=\\frac{(A+B)&#94;2}{A&#94;2/(m-1)+B&#94;2/(n-1)} $$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html"},{"title":"レポート課題1(10/3出題)","text":"qz0MVMyod3adjsPYQ3TmKg==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html"},{"title":"イントロダクション","text":"講義計画 確率と統計の基礎 ： 最先端の機械学習技術の数学的基盤 探索と最適化 ： 広大な探索空間から最適解を効率よく探索 機械学習 ： データの背後に潜む知識を発見 自然言語処理 ： 人工知能技術の応用例 # 日付 内容 担当 1 10/3 概要 杉山 2 10/10 最適化（連続1） 佐藤 3 10/17 最適化（連続2） 佐藤 4 10/24 最適化（探索） 本多 5 10/31 確率と統計 本多 6 11/14 確率と統計 本多 7 11/21 確率と統計 本多 8 11/28 機械学習（教師付き学習） 本多 9 12/5 機械学習（教師付き学習） 佐藤 10 12/12 自然言語処理 宮尾 11 12/19 自然言語処理 宮尾 12 12/26 自然言語処理 宮尾 13 1/9 機械学習（強化学習） 杉山 1 1/16 試験 佐藤 人工知能とは 1956年：\"The Dartmouth Summer Research Project on Artificial Intelligence\" にて Artificial Intelligence という言葉が提唱された。 Watoson Nature AlphaGo 人工知能関連分野の発展 人工知能研究 1960年頃(1次ブーム)：記号処理、論理推論 1980年頃(2次ブーム)：エキスパートシステム ニューラルネット研究 1960年頃(1次ブーム)：パーセプトロン（１層） 1990年頃(2次ブーム)：誤差逆伝播ほう（多層） 機械学習研究 1995年頃〜：統計・凸最適化 1995年頃〜：ベイズ推論 2010年頃〜：深層学習 3種類の機械学習 教師付き学習 ：人間が教師となり、コンピュータの学習を手伝う。 教師なし学習 ：コンピュータが人間の手を介さずに自発的に学習する。 強化学習 ：ロボットが人間の手を介さずに自発的に意思決定を行う。 まとめ 人工知能 ： 知的なコンピュータシステムを作る 数学・プログラミング・実世界応用をつなぐ架け橋 探索 ： 広大な探索空間を効率よく探索 機械学習 ： データの背後に潜む知識を発見","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html"},{"title":"Pair HMM","text":"※実装時のパラメータ PairHMMによるアラインメントを実装していく。なお、 （ kerasy.Bio.alignment.PairHMM ） に定義してあります。 In [1]: from kerasy.Bio.alignment import PairHMM In [2]: # サンプル配列 seqX = \"CCAGAGCTGTGGCAGACAGTGGCT\" seqY = \"CCAGCTGTGCAGACACTGGCTT\" In [3]: model = PairHMM () In [4]: ! cat params.json { \"delta\": \"1/10\", \"epsilon\": \"1/5\", \"tau\": \"1/30\", \"px_e_y\": \"1/8\", \"px_ne_y\": \"1/24\", \"qx\": \"1/4\", \"qy\": \"1/4\" } In [5]: model . set_params ( path = \"params.json\" ) Pair HMM とその利点 HMMのために開発されたアルゴリズムを使える。（らしい←正解ラベルの無いアラインメントでBaum-Welchアルゴリズムをどのように使うのかは現在考察中です。） アラインメントの確率的な解釈が可能になる。 グローバルアラインメントを出力する Pair-HMM Mは $x$ と $y$ がマッチした状態。（$x_i$ と $y_j$ がアライン） Iは $x$ に挿入が起きている状態。（$x_i$ と $-$ がアライン） Dは $x$ に欠失が起きている状態。（$-$ と $y_j$ がアライン） （以下では上から $V&#94;M,V&#94;X,V&#94;Y$ と記述している。） Pair HMMのためのViterbiアルゴリズム 2本数の配列 $x,y$ を与えると確率最大のアラインメントを求めるアルゴリズム。 Initialization: $$ \\begin{cases} V&#94;M(0,0)=1, V&#94;M(i,0)=V&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ V&#94;X(0,0)=0, V&#94;X(1,0)=\\delta q_{x_1} V&#94;X(i,0)=\\varepsilon q_{x_i}V&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ V&#94;Y(0,0)=0, V&#94;Y(0,1)=\\delta q_{y_1} V&#94;Y(0,j)=\\varepsilon q_{y_j}V&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} V&#94;M(i,j) &= p_{x_iy_j}\\max\\begin{cases}(1-2\\delta-\\tau)V&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;Y(i-1,j-1)\\end{cases}\\\\ V&#94;X(i,j) &= q_{x_i}\\max\\begin{cases}\\delta V&#94;M(i-1,j)\\\\\\varepsilon V&#94;X(i-1,j)\\end{cases}\\\\ V&#94;Y(i,j) &= q_{y_j}\\max\\begin{cases}\\delta V&#94;M(i,j-1)\\\\\\varepsilon V&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$v_e = \\tau\\max\\left(V&#94;M(n,m),V&#94;X(n,m),V&#94;Y(n,m)\\right)$$ In [6]: P_optimal = model . align ( seqX , seqY , return_score = True ) Pair HMM (Viterbi) Alignment score: 3.551370651291424e-30 |parameter| value | -------------------------------- |delta | 0.1| |epsilon | 0.2| |tau | 0.03333333333333333| |px_e_y | 0.125| |px_ne_y |0.041666666666666664| |qx | 0.25| |qy | 0.25| =============================================================== X: CCAGAGCTGTGGCAGACAGTGGC-T Y: CC--AGCTGT-GCAGACACTGGCTT =============================================================== In [7]: print ( f \"π*= {P_optimal} \" ) π*=3.551370651291424e-30 アラインメントの信頼性 配列 $x,y$ が与えられた時、アラインメント $\\pi$ が得られる条件付き確率を考えることができ、それが アラインメントの信頼度 を表していると考ることができる。 $$ P(\\pi|x,y) = \\frac{P(x,y,\\pi)}{P(x,y)}\\\\ P(x,y) = \\sum_{\\text{alignments }\\pi}P(x,y,\\pi) $$ ※ なお、ここで $P(x,y)$ は $x,y$ に関する全ての可能なアラインメントについて確率を足し合わせたもの であり、Forwardアルゴリズムで計算することができる。 Pair HMMのためのForwardアルゴリズム ※ Viterbiの $\\max$ を $\\text{sum}$ に変更しただけ。 Initialization: $$ \\begin{cases} F&#94;M(0,0)=1, F&#94;M(i,0)=F&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ F&#94;X(0,0)=0, F&#94;X(1,0)=\\delta q_{x_1} F&#94;X(i,0)=\\varepsilon q_{x_i}F&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ F&#94;Y(0,0)=0, F&#94;Y(0,1)=\\delta q_{y_1} F&#94;Y(0,j)=\\varepsilon q_{y_j}F&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} F&#94;M(i,j) &= p_{x_iy_j}\\text{sum}\\begin{cases}(1-2\\delta-\\tau)F&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;Y(i-1,j-1)\\end{cases}\\\\ F&#94;X(i,j) &= q_{x_i}\\text{sum}\\begin{cases}\\delta F&#94;M(i-1,j)\\\\\\varepsilon F&#94;X(i-1,j)\\end{cases}\\\\ F&#94;Y(i,j) &= q_{y_j}\\text{sum}\\begin{cases}\\delta F&#94;M(i,j-1)\\\\\\varepsilon F&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$F_e = \\tau\\ \\text{sum}\\left(F&#94;M(n,m),F&#94;X(n,m),F&#94;Y(n,m)\\right)$$ In [8]: F , P_all = model . forward ( seqX , seqY ) In [9]: print ( f \"𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)= {P_all} \" ) 𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)=2.0457988072916236e-28 In [10]: print ( f \"P(π*|x, y)={P_optimal/P_all}\" ) P(π*|x, y)=0.017359334840912267 $x_i$ と $y_j$ がアラインされる確率 次の式で表される。 $$ \\begin{aligned} P(x_i\\diamondsuit y_i|x,y) &= \\frac{\\sum_{\\pi\\in\\Omega_{ij}}P(x,y,\\pi)}{P(x,y)}\\\\ &= \\frac{F&#94;M(i,j)\\cdot B&#94;M(i,j)}{P(x,y)} \\end{aligned}$$ ※ $\\Omega_{ij}$：$x_i$ と $y_j$ がアラインされるアラインメントの集合 Pair HMMのためのBackwardアルゴリズム Needleman-Wunsh-Gotoh のBackwardアルゴリズムとの類似性に注目！ Initialization: $$ \\begin{cases} B&#94;M(n,m)=B&#94;X(n,m)=B&#94;Y(n,m)=\\tau\\\\ B&#94;X(i,m)=\\varepsilon q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;Y(i,m)=\\varepsilon q_{y_{j+1}}B&#94;X(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ B&#94;M(i,m)=\\delta q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;M(n,j)=\\delta q_{y_{j+1}}B&#94;Y(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ \\end{cases} $$ Recursion: $i=n-1,\\ldots,1,\\quad j=m-1,\\ldots,1$ $$ \\begin{aligned} B&#94;M(i,j) &= \\text{sum}\\begin{cases}(1-2\\delta-\\tau)p_{x_iy_j}B&#94;M(i+1,j+1)\\\\\\delta q_{x_{i+1}}B(i+1,j)\\\\\\delta q_{y_{j+1}}B&#94;Y(i,j+1)\\end{cases}\\\\ B&#94;X(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{x_{i+1}}B&#94;X(i+1,j)\\\\ B&#94;Y(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{y_{j+1}}B&#94;Y(i,j+1)\\\\ \\end{aligned} $$ In [11]: B = model . backward ( seqX , seqY ) In [12]: Pij = ( F * B ) / P_all In [13]: import seaborn as sns import matplotlib.pyplot as plt In [14]: sns . heatmap ( Pij ) plt . show () In [15]: # 可視化のために pandas を使用。 import pandas as pd r , c = Pij . shape pd . set_option ( 'display.max_rows' , r ) pd . set_option ( 'display.max_columns' , c ) In [16]: df = pd . DataFrame ( Pij ) In [17]: df Out[17]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 0 1.139605e+00 1.145169e-02 1.061625e-04 9.380071e-06 7.330898e-07 1.256616e-08 5.467340e-10 2.910714e-11 5.763005e-12 3.410212e-13 5.102192e-15 2.187247e-16 1.988821e-17 1.147484e-18 1.367416e-20 6.720910e-22 4.976161e-24 7.098501e-26 9.237930e-28 2.211060e-29 3.898762e-32 1.763484e-40 1 1.002452e-01 9.915333e-01 6.192125e-03 1.868999e-04 4.332564e-05 9.546525e-07 4.066396e-08 2.157028e-09 9.465879e-11 4.846141e-11 4.058759e-13 3.267685e-14 8.754145e-16 1.928520e-16 1.373420e-18 1.082830e-19 9.927246e-22 1.394016e-23 1.508549e-25 4.777080e-27 9.963503e-30 8.788027e-38 2 2.530997e-02 1.110298e-01 7.189425e-01 4.724160e-03 2.510915e-04 4.961792e-05 1.187062e-06 1.017255e-07 3.970235e-09 2.068131e-10 9.703401e-11 7.255597e-13 1.565563e-13 2.611280e-15 3.254769e-16 2.694314e-18 1.079695e-19 1.562036e-21 1.545424e-23 1.735256e-25 1.265060e-27 2.215960e-35 3 1.439692e-03 1.313691e-01 9.101842e-02 4.446381e-01 5.912097e-03 3.126913e-04 8.585244e-05 1.538885e-06 1.919091e-07 8.250641e-09 2.393023e-10 1.283784e-10 1.387610e-12 2.250638e-13 4.821068e-15 2.111543e-16 4.457287e-18 2.448800e-19 3.227733e-21 1.284984e-23 8.240296e-26 3.335362e-33 4 3.517101e-05 3.000139e-03 4.131934e-01 8.504087e-02 1.663724e-01 9.561056e-03 2.917045e-04 9.039141e-05 1.788740e-06 1.312414e-07 2.869640e-08 4.101759e-10 1.507867e-10 3.456004e-12 5.959996e-13 5.757530e-15 2.024716e-16 4.111221e-18 7.279991e-20 1.060049e-21 6.121304e-24 4.843531e-31 5 9.934762e-06 1.458875e-04 3.927027e-03 6.740773e-01 8.441291e-02 7.234362e-02 1.094905e-02 1.879103e-04 1.252776e-04 1.454564e-06 1.059818e-07 2.729047e-08 9.494833e-10 8.082013e-11 1.033243e-11 3.411004e-13 6.554134e-15 3.958672e-16 8.201302e-18 3.482706e-20 2.714352e-22 4.461969e-29 6 5.322130e-07 6.381400e-05 4.257593e-04 6.688387e-03 9.174344e-01 4.917686e-02 4.329939e-02 3.819221e-03 1.763480e-04 1.328334e-04 1.940120e-06 9.105133e-08 1.541103e-08 2.609538e-09 8.150731e-11 2.404569e-11 1.889654e-13 3.985572e-15 1.024288e-16 6.839760e-18 1.341414e-20 4.476503e-27 7 5.863612e-10 7.892422e-07 1.012986e-04 1.397365e-03 1.342858e-02 1.002812e+00 2.593641e-02 3.890025e-02 1.670263e-03 1.614886e-04 8.871868e-05 1.756325e-06 1.155298e-07 1.122902e-08 2.203971e-09 1.028948e-10 2.509711e-11 1.531285e-13 2.099939e-15 4.258022e-17 2.374690e-18 1.208869e-24 8 1.171184e-11 2.035729e-09 3.700419e-07 2.397639e-04 4.844063e-03 2.599346e-02 9.949710e-01 1.502418e-02 2.712144e-02 1.478651e-03 1.433184e-04 6.712671e-05 1.454730e-06 9.766789e-08 9.072910e-09 2.328874e-09 6.340026e-11 1.502027e-11 1.916941e-13 1.314758e-15 1.242412e-17 4.691715e-23 9 3.005919e-13 6.399055e-11 5.515662e-09 3.748097e-07 1.153167e-04 1.497122e-02 6.310820e-02 8.863944e-01 1.030851e-02 1.491223e-02 2.002265e-03 8.941933e-05 3.530505e-05 1.470719e-06 9.754840e-08 8.043302e-09 3.375435e-09 3.679377e-11 2.917845e-12 5.484419e-14 1.471719e-15 4.178025e-21 10 1.792807e-15 1.557812e-12 1.844985e-10 1.289502e-08 7.545128e-07 6.340240e-05 2.061627e-02 1.787166e-01 5.419262e-01 1.188051e-02 1.024380e-02 2.347055e-03 7.577232e-05 1.796622e-05 1.114937e-06 7.069534e-08 8.011504e-09 2.756012e-09 4.374664e-11 6.704524e-13 1.075503e-14 1.217530e-19 11 1.923711e-17 4.362099e-15 1.941124e-12 6.147024e-10 1.551641e-08 5.550653e-07 1.380449e-04 9.537258e-03 5.398937e-01 1.863598e-01 1.452105e-02 9.548898e-03 1.837989e-03 5.136835e-05 1.397535e-05 6.835406e-07 5.429499e-08 8.819330e-09 1.851138e-09 1.231506e-11 1.775772e-13 2.576473e-18 12 5.638842e-19 1.455168e-16 9.139939e-15 1.547158e-12 1.037887e-09 2.248539e-08 1.151600e-06 9.872926e-05 5.973776e-03 8.862574e-01 6.786997e-02 1.624026e-02 4.029496e-03 2.179139e-03 2.921118e-05 1.601828e-05 5.561847e-07 3.123249e-08 2.978327e-09 9.604760e-10 3.744283e-12 9.636167e-17 13 3.331427e-21 7.494769e-19 2.963338e-16 6.987305e-15 4.315679e-12 6.087761e-10 3.497465e-08 3.604967e-06 8.639915e-05 5.915526e-03 9.923696e-01 2.749764e-02 2.345296e-02 2.411435e-03 1.600356e-03 2.967960e-05 1.263876e-05 5.535990e-07 1.777340e-08 1.086922e-09 1.497803e-10 4.715717e-15 14 8.334075e-23 3.113616e-20 1.885485e-18 4.096232e-16 1.085250e-14 2.877122e-12 9.801182e-10 2.465783e-08 7.111413e-06 1.332057e-04 5.532024e-03 1.019408e+00 1.546140e-02 2.230611e-02 1.326417e-03 7.657518e-04 3.756285e-05 1.397395e-05 7.084890e-07 8.614586e-09 3.251784e-10 1.560898e-13 15 2.761536e-24 1.577325e-22 1.652226e-19 6.855680e-18 4.640406e-16 1.789313e-14 1.881340e-12 7.696555e-10 3.721167e-08 3.131924e-06 2.768933e-04 5.432195e-03 1.019385e+00 1.220031e-02 2.678270e-02 1.012065e-03 4.234835e-04 2.691482e-05 8.312535e-06 2.735984e-07 4.296980e-09 1.264609e-12 16 1.125679e-25 3.526855e-23 5.295754e-22 1.029758e-19 2.954167e-17 8.415539e-16 3.337555e-14 1.886064e-12 3.708635e-10 8.103999e-08 2.979865e-06 2.717052e-04 5.867388e-03 1.008690e+00 1.398136e-02 2.796359e-02 1.094449e-03 2.222028e-04 1.653854e-05 6.727102e-06 7.321521e-08 3.095212e-11 17 5.314132e-29 1.371847e-25 1.002377e-22 1.431441e-21 2.329882e-19 2.824449e-17 1.264033e-15 1.039492e-13 1.896385e-12 2.117496e-10 8.676212e-08 1.428983e-06 4.224040e-04 7.551663e-03 9.828098e-01 2.577489e-02 2.154489e-02 1.348560e-03 1.271999e-04 1.123527e-05 1.554246e-06 1.061734e-09 18 1.311292e-30 3.344026e-28 1.039987e-25 1.917693e-22 4.842995e-21 2.644625e-19 5.424283e-17 1.016892e-15 2.466777e-13 3.876336e-12 1.412328e-10 6.644843e-08 1.307534e-06 2.267450e-04 1.352321e-02 9.236001e-01 4.123399e-02 2.242045e-02 1.780378e-03 1.137684e-04 4.658387e-06 2.707169e-08 19 3.685034e-32 1.308860e-29 1.727006e-27 1.846830e-25 9.168694e-23 2.025241e-20 2.015727e-19 7.009128e-17 1.110761e-15 2.135974e-13 8.991483e-12 3.294862e-10 2.170110e-08 1.342768e-06 1.738901e-04 1.366663e-02 9.157034e-01 5.085192e-02 1.134612e-02 1.333942e-03 1.601513e-04 7.755075e-07 20 2.627187e-34 3.307561e-31 6.412082e-29 8.638204e-27 5.130913e-25 5.421429e-23 2.735844e-20 4.581117e-19 4.673008e-17 1.996269e-15 1.567873e-13 2.425635e-11 7.144030e-10 2.339911e-08 4.401237e-07 1.583398e-04 8.993801e-03 8.715290e-01 1.032744e-01 9.301698e-03 8.040002e-04 1.264439e-05 21 3.712503e-36 1.248259e-33 7.484327e-31 4.015876e-28 1.275117e-26 7.126689e-25 1.294296e-22 1.126902e-20 1.562753e-18 3.245370e-17 8.822502e-16 3.618329e-13 1.719160e-11 9.436607e-10 3.634534e-08 4.567520e-07 2.489897e-05 1.031566e-02 8.313752e-01 1.337435e-01 9.529909e-03 1.755113e-04 22 1.081603e-37 4.975375e-35 3.859345e-33 1.396911e-30 8.994506e-28 2.233130e-26 1.907603e-24 1.395483e-22 7.223861e-21 2.385762e-18 3.020013e-17 1.437842e-15 1.876938e-13 2.135337e-11 5.432165e-10 7.346489e-08 4.608162e-07 1.776497e-05 2.915009e-03 7.255898e-01 2.520881e-01 4.862597e-03 23 7.053935e-40 3.695478e-37 9.639089e-35 1.470014e-32 2.795455e-30 1.235666e-27 2.213410e-26 7.771768e-24 1.829949e-22 1.539068e-20 1.623359e-18 3.985091e-17 3.521057e-15 1.986472e-13 1.486597e-11 3.334896e-10 7.576041e-08 5.116867e-07 2.834710e-05 1.528768e-03 3.676275e-01 6.239253e-01 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-6.html"},{"title":"生物物理学 第2回","text":"講師： 樋口秀男 生命体（生物）の一般的定義 生物とは、以下の四つの条件を満たす物質システム 自己と外界との境界 エネルギーと物質の代謝 自己複製 恒常性 電子 分子 細胞数 整体の階層性 $10&#94;{28}$ $10&#94;{23}$ $10&#94;{13}$ ヒト 意識・運動・代謝 $10&#94;{24}$ $10&#94;{19}$ $10&#94;{9}$ 心臓 循環・拡散 $10&#94;{15}$ $10&#94;{10}$ $10&#94;{0}$ 心筋細胞 生理的なリズム単位 $10&#94;{5}$ $10&#94;{5}$ 筋節 ゆらぎを制した振動 $10&#94;{0}$ タンパク質 反応のゆらぎ $10&#94;{2}$ アミノ酸 タンパク質の性質の起源 $10&#94;{0}$ 電子 量子力学の支配領域 生命科学を覆う謎 生命誕生の謎（+生命の進化、分化の謎） タンパク質構造の決定と機能との関係の謎 細胞が超多種分子（タンパク質、脂質、小分子、イオン、…）の濃度・種類・機能の制御を行う謎 個体（臓器、器官等）の構造と機能構築の謎 生命誕生の謎 元素誕生は超新星の爆発→重金属ができる。 現宇宙の元素の割合と人体内の元素比が非常に似通っている。 RNAワールド プロテインワールド 原始地球上に存在したと仮定される、RNA からなる自己複製系のこと。また、これがかつて存在し、現生生物へと進化したという仮説。 まずアミノ酸ができ、重合してポリペプチド、さらにタンパク質が作り出され、これが触媒として働いて生命を作り出したという仮説。 生命誕生を示唆した実験事実 ミラーの放電によるアミノ酸合成(1953) $\\mathrm{CH_3,NH_3,H_2,H_2O}$ を含む気体に放電（落雷を模した）をする。 実験２週間後に以下の化合物 （アミノ酸） ができた。 グリシン アラニン グルタル酸 酢酸（脂肪酸） 塩基や糖（リボース）、核酸基、RNA、タンパク質なども化学合成可能。 生命基本物質の化学合成が成功した理由 地球には、エネルギーの高い（海底火山、紫外線、雷、高音）場所と低く安定な場所が共存していたので、分子は 高エネルギー環境で合成され、低エネルギー環境で安定化する ことができた。 $$A\\overset{k_1}{{\\longrightarrow}}B\\overset{k_2}{{\\longrightarrow}}C$$ In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: def simulate ( ax , color , tp , A = 1 , B = 0 , C = 0 , dt = 1e-3 , k1 = 0.07 , k2 = 0.02 , K = 1 ): time = np . arange ( 0 , 100 , dt ) As = np . zeros ( shape = len ( time )) Bs = np . zeros ( shape = len ( time )) Cs = np . zeros ( shape = len ( time )) for i , t in enumerate ( time ): dA = ( - k1 * A ) * dt * K dB = ( k1 * A - k2 * B ) * dt * K dC = ( k2 * B ) * dt * K A += dA ; B += dB ; C += dC As [ i ] = A ; Bs [ i ] = B ; Cs [ i ] = C if t > tp : K = 1e-6 # 温度を下げ、反応速度が1e-6倍になったことをシミュレーション ax . plot ( time , As , color = color ) ax . plot ( time , Bs , color = color ) ax . plot ( time , Cs , color = color ) if tp < 100 : ax . vlines ( x = tp , ymin = 0 , ymax = 1 , linestyle = \":\" ) return ax In [3]: fig , ax = plt . subplots () ax = simulate ( ax = ax , color = \"red\" , tp = 20 ) ax = simulate ( ax = ax , color = \"black\" , tp = 100 ) ax . set_xlabel ( \"Time\" ) ax . set_ylabel ( \"RQ\" ) ax . set_title ( \"Simulation Result\" ) plt . show () 上記のシミュレーション結果から、$A,B$ 分子を得るためには、 途中で（温度が下がるなどの結果）反応速度が下がる必要がある ことがわかる。 生体分子が濃縮され、多次反応による分子合成速度が上がった。 地球は巨大で多様な反応槽であったため、合成確率が上がった。 考えられる生物 地球型炭素生物 地球環境のように水と二酸化炭素（あるいはメタン）が豊富な惑星であるなら、情報記憶（DNA）→伝令（mRNA）→機能（タンパク質、RNA）のような地球型の仕事を分担した炭素生物が生まれる可能性は高い。 炭素生物 vs ケイ素生物 常温常圧で安定な炭素ー炭素結合 とは違い、 ケイ素ーケイ素結合はパイ結合やシグマ結合による二重三重結合を作る傾向がほとんど無く、非常に不安定 である。 炭素ーケイ素結合は安定 なので、炭素生物の中にケイ素が含まれるだろう。したがって、ケイ素生物の存在する確率は非常に低い。 金属生物 常温において金属結合が安定であり、分子としての機能を持つことは困難であるため、生物の中心にはならないだろう。ただし、金属イオンや錯体として、炭素生物やケイ素生物に利用されることはありうる。 講義のまとめ 生命分子や細胞の種類は多く、構造や機能をどのように理解するかが、 生命科学全体の 課題である。 生命は 宇宙の元素を効率よく利用した。 地球上の 高↔︎低エネルギーを行き交い 、多様な環境や濃縮により高確率かつ安定的に生体分子が合成された。 これが生命の誕生の確率を大きくした。 初めにRNAが合成され、それを鋳型としてタンパク質が合成され、原子生命が誕生したと想像される。 系外惑星にも、炭素生命体が存在する可能性がある。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html"},{"title":"ペアワイズアラインメント","text":"ペアワイズアラインメントとは 2本のDNAの塩基配列（タンパク質のアミノ酸配列）を比較する方法の一つ バイオインフォマティクスでは最も基本的な解析手法 なぜDNA配列の比較をするのか DNAの機能を知りたい （∵ DNAの配列が似ていると機能が似ている） DNAのどの部分が重要かを知りたい。 （∵ 「保存されている＝重要」だと考えられる） 生物の進化系統樹を知りたい 新型シーケンサーで読まれたDNAの由来を知りたい DNAの変異や新型シークエンサーの読み取りエラーでは 長さが異なる ことがあるので、 長さの変化を考慮し効率の良い動的計画法 を用いる アラインメントの種類 説明 例 グローバルアラインメント 2本の配列の 全体 をアラインメントする。 Needleman-Wunsch ローカルアラインメント 2本の配列の 似ている部分を検出 し、その部分をアランメントする Smith-Waterman 実装 各種アラインメントを実装していく。なお、全て Affine gap penalty を利用する。 In [1]: from kerasy.Bio.alignment import NeedlemanWunshGotoh , SmithWaterman , BackwardNeedlemanWunshGotoh In [2]: # サンプル配列 seqX = \"GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACGGAGCTGTGGCAGACCTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGCGAGGACTG\" seqY = \"CGCATGCGGAGTGAGGGGAGCAGTTGGGAACAGATGGTCCCGCCGAGGGACCGGTGGGCAGACGGGGCCAGCTGTGGCAGACACTGGCTTCTAACCACCGAACGTTCTTTCCGCTCCGC\" Needleman-Wunsch-Gotoh 自作のモジュール （ kerasy.Bio.alignment.NeedlemanWunshGotoh ） を使ってアラインメントをします。 In [3]: model = NeedlemanWunshGotoh () In [4]: model . align ( seqX , seqY ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== Smith-Waterman 自作のモジュール （ kerasy.Bio.alignment.SmithWaterman ） を使ってアラインメントをします。 In [5]: model = SmithWaterman () In [6]: model . align ( seqX , seqY ) Smith-Waterman Alignment score: 37.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== Aligned positions: X[0,111] Y[7,118] X: GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACG Y: GGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GGGCAGACG X: G----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGC Y: GGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCTCCGC =============================================================== 制約付きアラインメント $x_i$ と $y_j$ がアラインされるという制約下で最大のアラインメントスコアを求める。 全てのパターンを列挙すると $\\mathcal{O}(n&#94;2m&#94;2)$ の時間がかかるが、 後ろ向きアラインメント と組み合わせることで全てのパターンを $\\mathcal{O}(nm)$ で計算可能。 前向き：xiとyjがアラインされる時の、iまでとjまでの配列の最大アラインメントスコアを保持。 後ろ向き：xiとyjがアラインされる時の、i+1以降とj+1以降の配列の最大アラインメントスコアを保持。 Needleman-Wunsch-Gotohの逆向きアラインメントは （ kerasy.Bio.alignment.BackwardNeedlemanWunshGotoh ） に定義してあります。 In [7]: model_forward = NeedlemanWunshGotoh () model_backward = BackwardNeedlemanWunshGotoh () In [8]: model_forward . align ( seqX , seqY , memorize = True ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== In [9]: model_backward . align ( seqX , seqY , memorize = True ) Backward Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGGAACA-GATGGTCC-CGCCGAGGGACCGGTGG- X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTTC-TAACCACCGAACGTTCTTTCCG-CT X: CCGCGAGGACT Y: CCGC------- =============================================================== In [10]: k = 3 n = len ( seqX ) + 1 m = len ( seqY ) + 1 In [11]: M = model_forward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] bM = model_backward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] In [12]: A = M + bM In [13]: # 上の配列を見れば、seqX[0] と seqY[7] がアラインされている時に最大スコア14を取ることがわかるので、それを確かめる。 print ( A [ 0 , 7 ]) 14.0 In [14]: # 可視化のために pandas を使用。 import pandas as pd pd . set_option ( 'display.max_rows' , m ) pd . set_option ( 'display.max_columns' , n ) In [15]: df = pd . DataFrame ( A ) In [16]: df Out[16]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 0 12.0 10.0 8.0 8.0 8.0 10.0 8.0 14.0 7.0 2.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -17.0 -20.0 -25.0 -26.0 -31.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -51.0 -54.0 -55.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -129.0 -132.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -150.0 -156.0 -156.0 -159.0 -160.0 -163.0 -164.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -181.0 -184.0 -187.0 -190.0 -193.0 -194.0 -197.0 -198.0 -201.0 -200.0 -203.0 -206.0 -209.0 -210.0 -211.0 -214.0 -217.0 -218.0 -221.0 -224.0 -225.0 -228.0 -229.0 -230.0 -235.0 -238.0 -241.0 -242.0 -243.0 -246.0 1 5.0 12.0 8.0 6.0 6.0 8.0 8.0 8.0 14.0 5.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -14.0 -17.0 -22.0 -25.0 -26.0 -33.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -53.0 -54.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -131.0 -132.0 -135.0 -140.0 -141.0 -144.0 -147.0 -148.0 -150.0 -157.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -171.0 -174.0 -179.0 -180.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -200.0 -203.0 -206.0 -211.0 -210.0 -211.0 -216.0 -217.0 -220.0 -223.0 -224.0 -227.0 -228.0 -229.0 -232.0 -237.0 -240.0 -243.0 -242.0 -243.0 2 2.0 3.0 10.0 8.0 6.0 6.0 6.0 6.0 6.0 14.0 3.0 0.0 -3.0 -4.0 -9.0 -12.0 -13.0 -16.0 -17.0 -24.0 -27.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -47.0 -48.0 -53.0 -54.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -125.0 -126.0 -131.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -150.0 -150.0 -157.0 -156.0 -159.0 -158.0 -163.0 -166.0 -169.0 -172.0 -171.0 -176.0 -177.0 -180.0 -183.0 -184.0 -187.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -200.0 -203.0 -204.0 -209.0 -210.0 -213.0 -214.0 -217.0 -220.0 -221.0 -224.0 -225.0 -228.0 -231.0 -234.0 -237.0 -238.0 -241.0 -242.0 3 -1.0 2.0 3.0 8.0 6.0 6.0 4.0 6.0 6.0 4.0 14.0 1.0 0.0 -5.0 -4.0 -9.0 -12.0 -13.0 -18.0 -17.0 -24.0 -29.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -49.0 -48.0 -55.0 -56.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -127.0 -126.0 -133.0 -136.0 -137.0 -142.0 -143.0 -146.0 -150.0 -151.0 -150.0 -157.0 -156.0 -159.0 -160.0 -165.0 -166.0 -169.0 -172.0 -171.0 -176.0 -179.0 -182.0 -185.0 -186.0 -187.0 -192.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -209.0 -212.0 -213.0 -216.0 -217.0 -220.0 -223.0 -224.0 -225.0 -230.0 -233.0 -236.0 -239.0 -238.0 -241.0 4 -4.0 -3.0 0.0 1.0 8.0 4.0 4.0 2.0 4.0 4.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -11.0 -14.0 -15.0 -20.0 -19.0 -22.0 -27.0 -26.0 -29.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -60.0 -63.0 -64.0 -67.0 -66.0 -69.0 -68.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -87.0 -92.0 -91.0 -94.0 -95.0 -100.0 -103.0 -100.0 -105.0 -106.0 -109.0 -112.0 -113.0 -116.0 -119.0 -118.0 -121.0 -124.0 -127.0 -128.0 -131.0 -136.0 -137.0 -142.0 -145.0 -148.0 -148.0 -153.0 -150.0 -155.0 -156.0 -159.0 -160.0 -165.0 -168.0 -169.0 -170.0 -171.0 -176.0 -177.0 -182.0 -185.0 -186.0 -189.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -220.0 -221.0 -224.0 -227.0 -228.0 -233.0 -234.0 -237.0 -238.0 5 -7.0 -4.0 -3.0 -2.0 -1.0 8.0 2.0 4.0 4.0 2.0 4.0 2.0 14.0 1.0 0.0 -3.0 -6.0 -9.0 -14.0 -15.0 -20.0 -21.0 -20.0 -25.0 -26.0 -29.0 -32.0 -33.0 -36.0 -39.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -59.0 -60.0 -61.0 -64.0 -65.0 -64.0 -67.0 -66.0 -73.0 -74.0 -77.0 -76.0 -81.0 -78.0 -83.0 -84.0 -85.0 -90.0 -91.0 -92.0 -95.0 -98.0 -101.0 -98.0 -103.0 -106.0 -107.0 -110.0 -111.0 -114.0 -117.0 -118.0 -121.0 -122.0 -127.0 -130.0 -131.0 -136.0 -137.0 -140.0 -144.0 -147.0 -146.0 -151.0 -150.0 -153.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -173.0 -176.0 -179.0 -182.0 -183.0 -184.0 -187.0 -190.0 -191.0 -190.0 -195.0 -198.0 -201.0 -200.0 -203.0 -206.0 -207.0 -210.0 -213.0 -214.0 -217.0 -218.0 -219.0 -224.0 -227.0 -230.0 -233.0 -232.0 -235.0 6 -10.0 -9.0 -6.0 -3.0 -4.0 -1.0 6.0 2.0 2.0 4.0 2.0 2.0 2.0 14.0 1.0 -2.0 -5.0 -8.0 -9.0 -14.0 -17.0 -18.0 -23.0 -20.0 -23.0 -28.0 -31.0 -34.0 -33.0 -34.0 -37.0 -38.0 -43.0 -44.0 -49.0 -52.0 -55.0 -56.0 -57.0 -58.0 -61.0 -64.0 -66.0 -62.0 -65.0 -66.0 -71.0 -74.0 -77.0 -76.0 -79.0 -76.0 -81.0 -84.0 -85.0 -88.0 -91.0 -94.0 -97.0 -96.0 -99.0 -98.0 -101.0 -104.0 -107.0 -110.0 -113.0 -114.0 -115.0 -116.0 -121.0 -124.0 -127.0 -130.0 -133.0 -136.0 -139.0 -141.0 -142.0 -147.0 -146.0 -149.0 -148.0 -153.0 -156.0 -159.0 -162.0 -163.0 -166.0 -167.0 -170.0 -173.0 -174.0 -177.0 -180.0 -183.0 -182.0 -187.0 -188.0 -191.0 -190.0 -193.0 -196.0 -199.0 -200.0 -203.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -218.0 -221.0 -224.0 -227.0 -228.0 -231.0 -232.0 7 -13.0 -10.0 -9.0 -8.0 -5.0 -2.0 -1.0 6.0 2.0 0.0 4.0 0.0 2.0 1.0 14.0 3.0 0.0 -3.0 -8.0 -9.0 -14.0 -17.0 -18.0 -22.0 -18.0 -21.0 -26.0 -29.0 -32.0 -33.0 -34.0 -37.0 -38.0 -43.0 -46.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -59.0 -64.0 -64.0 -60.0 -63.0 -66.0 -69.0 -72.0 -75.0 -76.0 -77.0 -74.0 -79.0 -82.0 -83.0 -86.0 -89.0 -94.0 -95.0 -96.0 -97.0 -98.0 -99.0 -102.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -121.0 -124.0 -125.0 -130.0 -131.0 -134.0 -139.0 -139.0 -142.0 -145.0 -146.0 -147.0 -150.0 -153.0 -154.0 -157.0 -160.0 -163.0 -164.0 -167.0 -170.0 -173.0 -176.0 -177.0 -180.0 -181.0 -184.0 -185.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -204.0 -207.0 -208.0 -211.0 -212.0 -213.0 -218.0 -221.0 -224.0 -225.0 -226.0 -229.0 8 -16.0 -13.0 -12.0 -11.0 -10.0 -5.0 -4.0 -1.0 6.0 0.0 2.0 2.0 2.0 0.0 3.0 14.0 3.0 0.0 -5.0 -6.0 -11.0 -14.0 -15.0 -18.0 -21.0 -16.0 -21.0 -26.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -52.0 -55.0 -56.0 -59.0 -64.0 -62.0 -60.0 -61.0 -66.0 -69.0 -72.0 -75.0 -74.0 -75.0 -74.0 -79.0 -80.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -95.0 -96.0 -99.0 -102.0 -105.0 -108.0 -109.0 -112.0 -113.0 -118.0 -121.0 -122.0 -127.0 -128.0 -131.0 -135.0 -138.0 -137.0 -142.0 -143.0 -144.0 -147.0 -150.0 -151.0 -154.0 -157.0 -160.0 -161.0 -164.0 -167.0 -170.0 -173.0 -174.0 -177.0 -178.0 -179.0 -182.0 -183.0 -186.0 -189.0 -190.0 -191.0 -194.0 -197.0 -198.0 -201.0 -204.0 -205.0 -208.0 -209.0 -210.0 -215.0 -218.0 -221.0 -222.0 -223.0 -226.0 9 -19.0 -16.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 4.0 2.0 0.0 2.0 0.0 2.0 3.0 14.0 3.0 -2.0 -3.0 -8.0 -11.0 -12.0 -17.0 -16.0 -19.0 -16.0 -21.0 -26.0 -27.0 -28.0 -31.0 -32.0 -37.0 -40.0 -39.0 -44.0 -47.0 -48.0 -49.0 -52.0 -53.0 -58.0 -57.0 -62.0 -62.0 -58.0 -61.0 -66.0 -69.0 -72.0 -73.0 -72.0 -75.0 -74.0 -77.0 -80.0 -83.0 -88.0 -89.0 -90.0 -95.0 -94.0 -93.0 -96.0 -99.0 -102.0 -105.0 -106.0 -109.0 -110.0 -115.0 -118.0 -119.0 -124.0 -125.0 -128.0 -132.0 -133.0 -136.0 -137.0 -140.0 -141.0 -144.0 -147.0 -148.0 -151.0 -154.0 -157.0 -158.0 -161.0 -164.0 -167.0 -170.0 -171.0 -174.0 -175.0 -178.0 -177.0 -180.0 -183.0 -186.0 -187.0 -188.0 -191.0 -194.0 -195.0 -198.0 -201.0 -202.0 -205.0 -206.0 -207.0 -212.0 -215.0 -218.0 -219.0 -220.0 -223.0 10 -22.0 -19.0 -18.0 -17.0 -16.0 -11.0 -10.0 -7.0 -4.0 -3.0 4.0 0.0 0.0 0.0 0.0 2.0 3.0 14.0 1.0 0.0 -5.0 -8.0 -9.0 -14.0 -15.0 -14.0 -19.0 -16.0 -21.0 -24.0 -25.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -44.0 -45.0 -46.0 -49.0 -50.0 -55.0 -58.0 -55.0 -62.0 -60.0 -58.0 -61.0 -66.0 -69.0 -70.0 -71.0 -72.0 -77.0 -72.0 -77.0 -80.0 -83.0 -88.0 -87.0 -90.0 -93.0 -92.0 -93.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -112.0 -115.0 -116.0 -121.0 -122.0 -125.0 -129.0 -130.0 -131.0 -136.0 -135.0 -138.0 -141.0 -144.0 -145.0 -148.0 -151.0 -154.0 -155.0 -158.0 -161.0 -162.0 -167.0 -168.0 -169.0 -172.0 -175.0 -176.0 -175.0 -180.0 -183.0 -186.0 -185.0 -188.0 -191.0 -192.0 -195.0 -198.0 -199.0 -202.0 -203.0 -204.0 -209.0 -212.0 -213.0 -218.0 -217.0 -220.0 11 -22.0 -24.0 -21.0 -18.0 -19.0 -16.0 -12.0 -12.0 -9.0 -4.0 -5.0 2.0 -2.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -13.0 -14.0 -19.0 -16.0 -19.0 -22.0 -23.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -42.0 -43.0 -46.0 -49.0 -52.0 -55.0 -58.0 -55.0 -60.0 -60.0 -58.0 -61.0 -66.0 -67.0 -68.0 -71.0 -74.0 -75.0 -72.0 -79.0 -82.0 -81.0 -86.0 -87.0 -88.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -120.0 -124.0 -127.0 -127.0 -128.0 -131.0 -134.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -151.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -168.0 -167.0 -172.0 -173.0 -176.0 -175.0 -178.0 -181.0 -184.0 -185.0 -188.0 -189.0 -192.0 -195.0 -196.0 -199.0 -200.0 -203.0 -206.0 -209.0 -212.0 -211.0 -216.0 -217.0 12 -28.0 -22.0 -24.0 -23.0 -20.0 -17.0 -16.0 -12.0 -10.0 -9.0 -4.0 -4.0 2.0 -4.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -11.0 -12.0 -17.0 -16.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -35.0 -36.0 -37.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -55.0 -58.0 -58.0 -56.0 -61.0 -64.0 -65.0 -66.0 -71.0 -72.0 -73.0 -70.0 -79.0 -80.0 -81.0 -84.0 -87.0 -86.0 -89.0 -90.0 -91.0 -94.0 -97.0 -100.0 -101.0 -106.0 -109.0 -110.0 -115.0 -116.0 -118.0 -124.0 -126.0 -127.0 -126.0 -131.0 -132.0 -135.0 -138.0 -139.0 -140.0 -145.0 -148.0 -149.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -166.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -179.0 -182.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -198.0 -203.0 -206.0 -209.0 -212.0 -209.0 -214.0 13 -29.0 -30.0 -22.0 -26.0 -25.0 -22.0 -17.0 -17.0 -12.0 -12.0 -10.0 -6.0 -4.0 0.0 -4.0 -2.0 -4.0 -3.0 -2.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -9.0 -12.0 -11.0 -12.0 -15.0 -14.0 -19.0 -22.0 -25.0 -28.0 -31.0 -34.0 -35.0 -34.0 -35.0 -38.0 -43.0 -44.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -60.0 -54.0 -59.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -70.0 -77.0 -78.0 -81.0 -82.0 -85.0 -88.0 -89.0 -92.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -124.0 -127.0 -124.0 -129.0 -130.0 -135.0 -138.0 -141.0 -140.0 -145.0 -146.0 -147.0 -152.0 -155.0 -158.0 -157.0 -158.0 -163.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -178.0 -179.0 -182.0 -181.0 -186.0 -189.0 -190.0 -191.0 -192.0 -197.0 -198.0 -203.0 -204.0 -207.0 -210.0 -209.0 14 -33.0 -30.0 -29.0 -22.0 -27.0 -25.0 -21.0 -18.0 -15.0 -10.0 -12.0 -8.0 -8.0 -2.0 -1.0 -5.0 -3.0 -6.0 -2.0 -2.0 4.0 14.0 1.0 -2.0 -3.0 -6.0 -7.0 -10.0 -9.0 -10.0 -13.0 -14.0 -19.0 -20.0 -25.0 -26.0 -31.0 -32.0 -33.0 -34.0 -37.0 -40.0 -43.0 -44.0 -49.0 -48.0 -51.0 -52.0 -53.0 -56.0 -58.0 -54.0 -59.0 -62.0 -65.0 -66.0 -69.0 -72.0 -73.0 -70.0 -75.0 -76.0 -79.0 -82.0 -83.0 -86.0 -89.0 -90.0 -91.0 -92.0 -97.0 -100.0 -103.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -122.0 -125.0 -124.0 -129.0 -132.0 -135.0 -136.0 -139.0 -142.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -159.0 -158.0 -163.0 -164.0 -167.0 -166.0 -169.0 -170.0 -175.0 -176.0 -179.0 -180.0 -183.0 -186.0 -187.0 -190.0 -191.0 -194.0 -197.0 -200.0 -203.0 -204.0 -207.0 -208.0 15 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -7.0 -2.0 -1.0 6.0 14.0 3.0 0.0 -1.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -14.0 -19.0 -22.0 -23.0 -24.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -42.0 -47.0 -48.0 -49.0 -50.0 -51.0 -56.0 -57.0 -52.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -73.0 -70.0 -73.0 -76.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -107.0 -110.0 -115.0 -117.0 -118.0 -121.0 -122.0 -123.0 -126.0 -129.0 -130.0 -133.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -152.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -165.0 -168.0 -169.0 -168.0 -173.0 -176.0 -177.0 -178.0 -181.0 -184.0 -187.0 -188.0 -189.0 -194.0 -197.0 -200.0 -203.0 -202.0 -205.0 16 -37.0 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -5.0 -2.0 1.0 8.0 14.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -13.0 -14.0 -17.0 -22.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -37.0 -40.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -49.0 -54.0 -55.0 -52.0 -57.0 -62.0 -63.0 -66.0 -67.0 -70.0 -71.0 -70.0 -71.0 -74.0 -79.0 -80.0 -83.0 -84.0 -85.0 -88.0 -91.0 -94.0 -95.0 -100.0 -101.0 -106.0 -109.0 -112.0 -114.0 -117.0 -118.0 -119.0 -120.0 -123.0 -124.0 -129.0 -132.0 -133.0 -132.0 -135.0 -140.0 -141.0 -146.0 -149.0 -150.0 -153.0 -154.0 -157.0 -158.0 -161.0 -162.0 -165.0 -168.0 -167.0 -168.0 -171.0 -174.0 -175.0 -176.0 -179.0 -184.0 -185.0 -188.0 -191.0 -192.0 -197.0 -200.0 -201.0 -202.0 17 -38.0 -37.0 -32.0 -33.0 -30.0 -29.0 -22.0 -25.0 -23.0 -19.0 -19.0 -11.0 -11.0 -8.0 -8.0 -9.0 -2.0 -3.0 -5.0 -3.0 -5.0 0.0 1.0 10.0 14.0 5.0 4.0 -1.0 -2.0 -3.0 -4.0 -7.0 -10.0 -13.0 -12.0 -17.0 -22.0 -21.0 -24.0 -25.0 -28.0 -31.0 -34.0 -35.0 -38.0 -37.0 -40.0 -43.0 -46.0 -47.0 -48.0 -47.0 -52.0 -53.0 -50.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -68.0 -69.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -97.0 -98.0 -103.0 -106.0 -108.0 -111.0 -114.0 -115.0 -116.0 -117.0 -120.0 -121.0 -126.0 -129.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -146.0 -147.0 -150.0 -151.0 -154.0 -155.0 -158.0 -159.0 -162.0 -163.0 -166.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -181.0 -182.0 -185.0 -188.0 -189.0 -194.0 -195.0 -198.0 -199.0 18 -39.0 -38.0 -37.0 -32.0 -35.0 -30.0 -27.0 -22.0 -23.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -5.0 -3.0 -3.0 2.0 3.0 10.0 14.0 7.0 6.0 1.0 0.0 -1.0 -4.0 -5.0 -10.0 -13.0 -12.0 -15.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -34.0 -33.0 -36.0 -35.0 -38.0 -41.0 -46.0 -45.0 -46.0 -45.0 -50.0 -51.0 -50.0 -55.0 -58.0 -61.0 -62.0 -63.0 -68.0 -67.0 -66.0 -67.0 -70.0 -75.0 -78.0 -79.0 -82.0 -83.0 -88.0 -91.0 -92.0 -96.0 -98.0 -101.0 -106.0 -106.0 -109.0 -112.0 -113.0 -114.0 -117.0 -118.0 -121.0 -124.0 -127.0 -130.0 -131.0 -134.0 -137.0 -140.0 -143.0 -144.0 -147.0 -148.0 -151.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -168.0 -171.0 -174.0 -175.0 -178.0 -179.0 -180.0 -185.0 -188.0 -189.0 -192.0 -193.0 -196.0 19 -40.0 -39.0 -38.0 -37.0 -32.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -7.0 -2.0 -1.0 2.0 5.0 12.0 14.0 7.0 6.0 3.0 2.0 -1.0 -2.0 -7.0 -10.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -33.0 -34.0 -35.0 -38.0 -41.0 -44.0 -43.0 -44.0 -45.0 -50.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -65.0 -66.0 -65.0 -66.0 -67.0 -70.0 -75.0 -76.0 -79.0 -80.0 -85.0 -88.0 -89.0 -94.0 -94.0 -98.0 -103.0 -105.0 -104.0 -109.0 -110.0 -111.0 -114.0 -117.0 -116.0 -121.0 -124.0 -127.0 -128.0 -131.0 -134.0 -137.0 -140.0 -141.0 -142.0 -145.0 -148.0 -149.0 -150.0 -153.0 -156.0 -157.0 -158.0 -161.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -177.0 -182.0 -185.0 -188.0 -187.0 -190.0 -193.0 20 -45.0 -40.0 -39.0 -40.0 -39.0 -30.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -7.0 0.0 -1.0 4.0 7.0 12.0 14.0 7.0 8.0 5.0 2.0 1.0 -4.0 -7.0 -8.0 -11.0 -12.0 -13.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -32.0 -31.0 -34.0 -35.0 -38.0 -39.0 -42.0 -41.0 -44.0 -45.0 -48.0 -49.0 -50.0 -55.0 -58.0 -57.0 -60.0 -63.0 -64.0 -65.0 -66.0 -67.0 -70.0 -73.0 -76.0 -77.0 -82.0 -85.0 -86.0 -91.0 -92.0 -94.0 -100.0 -102.0 -103.0 -104.0 -107.0 -108.0 -111.0 -114.0 -115.0 -116.0 -121.0 -124.0 -125.0 -128.0 -131.0 -134.0 -135.0 -138.0 -141.0 -140.0 -143.0 -146.0 -147.0 -150.0 -153.0 -154.0 -155.0 -158.0 -159.0 -162.0 -165.0 -168.0 -169.0 -170.0 -173.0 -174.0 -179.0 -182.0 -185.0 -188.0 -185.0 -190.0 21 -44.0 -45.0 -40.0 -39.0 -40.0 -37.0 -30.0 -33.0 -30.0 -27.0 -22.0 -25.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -5.0 0.0 1.0 6.0 7.0 12.0 14.0 9.0 10.0 5.0 2.0 -1.0 -4.0 -7.0 -8.0 -11.0 -10.0 -11.0 -14.0 -19.0 -20.0 -23.0 -28.0 -29.0 -30.0 -31.0 -34.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -48.0 -51.0 -50.0 -55.0 -56.0 -59.0 -58.0 -61.0 -64.0 -65.0 -68.0 -67.0 -68.0 -73.0 -76.0 -77.0 -82.0 -85.0 -88.0 -91.0 -94.0 -94.0 -99.0 -100.0 -103.0 -102.0 -105.0 -106.0 -111.0 -114.0 -117.0 -116.0 -119.0 -122.0 -123.0 -128.0 -131.0 -134.0 -133.0 -136.0 -139.0 -138.0 -141.0 -146.0 -147.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -166.0 -167.0 -168.0 -173.0 -174.0 -179.0 -180.0 -183.0 -186.0 -185.0 22 -47.0 -44.0 -45.0 -42.0 -39.0 -40.0 -35.0 -30.0 -33.0 -28.0 -29.0 -20.0 -25.0 -20.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 3.0 8.0 9.0 14.0 14.0 9.0 8.0 3.0 0.0 -1.0 -6.0 -9.0 -8.0 -11.0 -10.0 -13.0 -16.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -55.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -67.0 -70.0 -75.0 -78.0 -77.0 -84.0 -85.0 -89.0 -93.0 -95.0 -94.0 -99.0 -100.0 -103.0 -102.0 -107.0 -106.0 -113.0 -116.0 -117.0 -116.0 -119.0 -124.0 -123.0 -130.0 -133.0 -134.0 -135.0 -136.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -168.0 -167.0 -170.0 -175.0 -174.0 -181.0 -180.0 -183.0 -186.0 23 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 5.0 10.0 11.0 14.0 14.0 7.0 8.0 1.0 -2.0 -1.0 -6.0 -9.0 -8.0 -11.0 -12.0 -13.0 -18.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -44.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -70.0 -77.0 -80.0 -77.0 -86.0 -85.0 -89.0 -94.0 -95.0 -94.0 -99.0 -100.0 -103.0 -104.0 -109.0 -106.0 -113.0 -116.0 -119.0 -116.0 -121.0 -126.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -148.0 -151.0 -150.0 -151.0 -154.0 -155.0 -160.0 -159.0 -162.0 -165.0 -168.0 -167.0 -172.0 -177.0 -176.0 -183.0 -180.0 -183.0 24 -51.0 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -4.0 -1.0 2.0 5.0 10.0 11.0 14.0 14.0 5.0 8.0 -1.0 -4.0 -3.0 -6.0 -9.0 -8.0 -13.0 -14.0 -13.0 -20.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -39.0 -36.0 -37.0 -44.0 -41.0 -46.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -63.0 -64.0 -67.0 -68.0 -71.0 -72.0 -79.0 -82.0 -79.0 -86.0 -87.0 -89.0 -92.0 -93.0 -94.0 -97.0 -98.0 -103.0 -106.0 -109.0 -108.0 -113.0 -116.0 -117.0 -118.0 -123.0 -124.0 -125.0 -130.0 -131.0 -132.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -150.0 -153.0 -154.0 -157.0 -160.0 -159.0 -164.0 -165.0 -168.0 -169.0 -174.0 -177.0 -178.0 -181.0 -180.0 25 -54.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -41.0 -38.0 -33.0 -32.0 -31.0 -30.0 -25.0 -22.0 -25.0 -22.0 -21.0 -16.0 -13.0 -14.0 -8.0 -10.0 -9.0 -4.0 -4.0 -1.0 2.0 7.0 10.0 9.0 14.0 12.0 7.0 6.0 -1.0 -4.0 -3.0 -6.0 -7.0 -10.0 -13.0 -16.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -64.0 -65.0 -70.0 -73.0 -74.0 -79.0 -82.0 -81.0 -88.0 -89.0 -89.0 -94.0 -93.0 -94.0 -97.0 -100.0 -105.0 -108.0 -111.0 -108.0 -115.0 -116.0 -119.0 -120.0 -123.0 -124.0 -125.0 -132.0 -131.0 -134.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -170.0 -171.0 -176.0 -177.0 -178.0 -181.0 26 -57.0 -54.0 -52.0 -52.0 -49.0 -46.0 -45.0 -42.0 -39.0 -38.0 -33.0 -34.0 -31.0 -30.0 -25.0 -22.0 -23.0 -22.0 -23.0 -16.0 -15.0 -15.0 -8.0 -12.0 -10.0 -4.0 -2.0 1.0 2.0 5.0 8.0 7.0 14.0 10.0 5.0 6.0 -1.0 -4.0 -3.0 -6.0 -9.0 -10.0 -15.0 -18.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -32.0 -29.0 -34.0 -39.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -66.0 -65.0 -72.0 -75.0 -74.0 -81.0 -82.0 -81.0 -89.0 -90.0 -89.0 -94.0 -93.0 -94.0 -99.0 -102.0 -105.0 -108.0 -111.0 -110.0 -115.0 -118.0 -121.0 -122.0 -125.0 -124.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -167.0 -170.0 -173.0 -176.0 -175.0 -178.0 27 -60.0 -59.0 -56.0 -52.0 -54.0 -51.0 -48.0 -46.0 -44.0 -39.0 -39.0 -35.0 -35.0 -31.0 -31.0 -26.0 -24.0 -25.0 -22.0 -23.0 -18.0 -15.0 -15.0 -8.0 -12.0 -9.0 -6.0 -4.0 1.0 2.0 3.0 8.0 6.0 14.0 8.0 3.0 6.0 -1.0 -2.0 -3.0 -6.0 -9.0 -12.0 -13.0 -16.0 -13.0 -20.0 -21.0 -20.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -46.0 -43.0 -48.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -61.0 -66.0 -67.0 -72.0 -75.0 -76.0 -81.0 -83.0 -83.0 -87.0 -92.0 -89.0 -94.0 -93.0 -96.0 -101.0 -104.0 -107.0 -108.0 -109.0 -110.0 -115.0 -118.0 -119.0 -122.0 -125.0 -126.0 -125.0 -132.0 -133.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -163.0 -164.0 -169.0 -172.0 -175.0 -176.0 -175.0 28 -62.0 -62.0 -59.0 -57.0 -52.0 -54.0 -50.0 -49.0 -44.0 -43.0 -41.0 -37.0 -36.0 -33.0 -32.0 -31.0 -26.0 -26.0 -26.0 -24.0 -24.0 -19.0 -17.0 -13.0 -8.0 -10.0 -7.0 -7.0 -4.0 -1.0 0.0 2.0 6.0 6.0 14.0 8.0 1.0 6.0 -1.0 -2.0 -5.0 -8.0 -11.0 -14.0 -13.0 -16.0 -13.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -38.0 -37.0 -42.0 -43.0 -48.0 -43.0 -48.0 -49.0 -50.0 -57.0 -58.0 -59.0 -62.0 -63.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -83.0 -84.0 -89.0 -92.0 -89.0 -94.0 -95.0 -96.0 -103.0 -106.0 -107.0 -108.0 -109.0 -112.0 -115.0 -120.0 -121.0 -122.0 -127.0 -126.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -158.0 -159.0 -162.0 -165.0 -164.0 -171.0 -172.0 -175.0 -176.0 29 -65.0 -62.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -42.0 -43.0 -42.0 -37.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -25.0 -22.0 -19.0 -18.0 -13.0 -8.0 -8.0 -5.0 -6.0 -5.0 -2.0 -1.0 2.0 5.0 6.0 14.0 8.0 1.0 6.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -11.0 -14.0 -13.0 -18.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -35.0 -40.0 -37.0 -40.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -56.0 -59.0 -60.0 -65.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -81.0 -84.0 -89.0 -90.0 -89.0 -94.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -111.0 -114.0 -117.0 -120.0 -121.0 -124.0 -125.0 -128.0 -127.0 -130.0 -133.0 -136.0 -135.0 -136.0 -141.0 -140.0 -143.0 -148.0 -151.0 -152.0 -155.0 -156.0 -157.0 -162.0 -165.0 -166.0 -169.0 -170.0 -173.0 30 -64.0 -65.0 -64.0 -61.0 -60.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -18.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 2.0 6.0 -1.0 -2.0 -5.0 -10.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -40.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -59.0 -62.0 -67.0 -68.0 -69.0 -74.0 -75.0 -80.0 -84.0 -81.0 -84.0 -89.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -113.0 -116.0 -117.0 -120.0 -123.0 -124.0 -125.0 -128.0 -127.0 -130.0 -135.0 -138.0 -135.0 -136.0 -143.0 -140.0 -145.0 -148.0 -151.0 -154.0 -155.0 -156.0 -159.0 -164.0 -167.0 -166.0 -169.0 -170.0 31 -67.0 -64.0 -65.0 -64.0 -61.0 -58.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -17.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 4.0 4.0 -2.0 -4.0 -7.0 -11.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -27.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -38.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -61.0 -62.0 -67.0 -68.0 -71.0 -75.0 -76.0 -81.0 -82.0 -81.0 -84.0 -87.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -102.0 -107.0 -106.0 -113.0 -114.0 -115.0 -120.0 -121.0 -122.0 -123.0 -128.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -141.0 -140.0 -145.0 -146.0 -149.0 -152.0 -155.0 -158.0 -159.0 -164.0 -167.0 -166.0 -169.0 32 -68.0 -67.0 -62.0 -65.0 -64.0 -61.0 -56.0 -55.0 -52.0 -51.0 -50.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -25.0 -22.0 -19.0 -15.0 -10.0 -8.0 -8.0 -5.0 -6.0 -3.0 -4.0 -1.0 2.0 3.0 10.0 14.0 9.0 6.0 2.0 0.0 -3.0 -6.0 -9.0 -10.0 -11.0 -10.0 -16.0 -13.0 -19.0 -22.0 -21.0 -26.0 -24.0 -28.0 -31.0 -29.0 -32.0 -36.0 -39.0 -36.0 -43.0 -44.0 -45.0 -45.0 -46.0 -47.0 -52.0 -56.0 -57.0 -62.0 -64.0 -68.0 -70.0 -73.0 -74.0 -76.0 -80.0 -81.0 -80.0 -84.0 -86.0 -91.0 -93.0 -97.0 -96.0 -98.0 -101.0 -102.0 -108.0 -106.0 -114.0 -113.0 -114.0 -119.0 -120.0 -121.0 -122.0 -127.0 -129.0 -131.0 -134.0 -135.0 -137.0 -136.0 -142.0 -142.0 -145.0 -146.0 -148.0 -153.0 -154.0 -159.0 -159.0 -163.0 -166.0 -165.0 33 -71.0 -68.0 -65.0 -62.0 -65.0 -62.0 -59.0 -56.0 -53.0 -50.0 -51.0 -48.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -24.0 -21.0 -18.0 -13.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -4.0 -1.0 2.0 5.0 12.0 14.0 7.0 4.0 1.0 -2.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -15.0 -15.0 -19.0 -22.0 -19.0 -24.0 -24.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -47.0 -53.0 -56.0 -59.0 -62.0 -65.0 -68.0 -71.0 -73.0 -74.0 -75.0 -78.0 -79.0 -80.0 -85.0 -88.0 -91.0 -94.0 -95.0 -98.0 -98.0 -102.0 -104.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -120.0 -121.0 -120.0 -125.0 -130.0 -131.0 -132.0 -135.0 -136.0 -138.0 -142.0 -142.0 -146.0 -146.0 -150.0 -153.0 -154.0 -159.0 -159.0 -163.0 -164.0 34 -72.0 -71.0 -68.0 -65.0 -62.0 -63.0 -60.0 -59.0 -56.0 -51.0 -50.0 -49.0 -48.0 -43.0 -42.0 -43.0 -40.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -25.0 -22.0 -19.0 -16.0 -11.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -2.0 1.0 4.0 7.0 14.0 12.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -15.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -49.0 -55.0 -58.0 -61.0 -64.0 -67.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -82.0 -87.0 -90.0 -91.0 -94.0 -97.0 -98.0 -100.0 -104.0 -104.0 -106.0 -105.0 -114.0 -113.0 -114.0 -119.0 -122.0 -121.0 -120.0 -127.0 -130.0 -131.0 -132.0 -135.0 -138.0 -140.0 -142.0 -142.0 -146.0 -148.0 -152.0 -155.0 -154.0 -161.0 -159.0 -163.0 35 -73.0 -74.0 -69.0 -70.0 -66.0 -64.0 -61.0 -62.0 -59.0 -56.0 -53.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -42.0 -41.0 -38.0 -33.0 -34.0 -31.0 -28.0 -28.0 -25.0 -22.0 -19.0 -16.0 -13.0 -8.0 -10.0 -10.0 -7.0 -6.0 -5.0 -2.0 1.0 6.0 9.0 14.0 10.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -47.0 -48.0 -49.0 -57.0 -60.0 -63.0 -65.0 -69.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -84.0 -87.0 -92.0 -91.0 -96.0 -97.0 -98.0 -102.0 -106.0 -106.0 -106.0 -105.0 -114.0 -113.0 -114.0 -121.0 -122.0 -123.0 -120.0 -127.0 -130.0 -133.0 -132.0 -137.0 -138.0 -140.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -161.0 -159.0 36 -78.0 -73.0 -74.0 -71.0 -72.0 -66.0 -66.0 -61.0 -60.0 -59.0 -56.0 -55.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -30.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -10.0 -12.0 -9.0 -6.0 -3.0 -2.0 1.0 4.0 7.0 14.0 8.0 3.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -45.0 -47.0 -50.0 -51.0 -56.0 -61.0 -62.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -80.0 -81.0 -84.0 -86.0 -91.0 -93.0 -95.0 -98.0 -100.0 -102.0 -105.0 -106.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -120.0 -127.0 -128.0 -131.0 -134.0 -137.0 -136.0 -139.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -159.0 37 -79.0 -80.0 -73.0 -76.0 -73.0 -71.0 -66.0 -68.0 -63.0 -62.0 -60.0 -58.0 -57.0 -54.0 -53.0 -49.0 -47.0 -46.0 -45.0 -44.0 -39.0 -39.0 -37.0 -36.0 -34.0 -31.0 -28.0 -25.0 -22.0 -21.0 -18.0 -17.0 -12.0 -12.0 -14.0 -11.0 -8.0 -5.0 0.0 3.0 4.0 5.0 14.0 8.0 1.0 0.0 -1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -39.0 -44.0 -47.0 -47.0 -52.0 -53.0 -58.0 -62.0 -64.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -82.0 -83.0 -84.0 -86.0 -92.0 -93.0 -94.0 -99.0 -102.0 -101.0 -104.0 -106.0 -106.0 -105.0 -112.0 -115.0 -114.0 -119.0 -122.0 -125.0 -120.0 -125.0 -126.0 -131.0 -134.0 -135.0 -134.0 -137.0 -142.0 -142.0 -148.0 -147.0 -152.0 -153.0 -154.0 38 -81.0 -80.0 -78.0 -75.0 -77.0 -75.0 -69.0 -66.0 -68.0 -64.0 -64.0 -58.0 -59.0 -56.0 -55.0 -54.0 -49.0 -49.0 -47.0 -46.0 -44.0 -40.0 -39.0 -39.0 -37.0 -34.0 -30.0 -28.0 -25.0 -24.0 -21.0 -19.0 -19.0 -14.0 -14.0 -14.0 -11.0 -8.0 -3.0 0.0 3.0 2.0 5.0 14.0 6.0 -1.0 -1.0 1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -41.0 -46.0 -47.0 -49.0 -54.0 -55.0 -60.0 -63.0 -64.0 -64.0 -72.0 -71.0 -71.0 -73.0 -76.0 -77.0 -84.0 -85.0 -84.0 -88.0 -92.0 -93.0 -96.0 -101.0 -104.0 -101.0 -104.0 -108.0 -106.0 -105.0 -114.0 -115.0 -116.0 -119.0 -122.0 -124.0 -122.0 -125.0 -128.0 -133.0 -134.0 -135.0 -134.0 -139.0 -142.0 -144.0 -148.0 -147.0 -152.0 -153.0 39 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -46.0 -45.0 -40.0 -37.0 -39.0 -35.0 -32.0 -28.0 -28.0 -27.0 -25.0 -23.0 -19.0 -21.0 -16.0 -14.0 -12.0 -11.0 -8.0 -5.0 -2.0 3.0 0.0 4.0 14.0 4.0 0.0 -1.0 2.0 -3.0 -5.0 -4.0 -7.0 -7.0 -11.0 -8.0 -16.0 -17.0 -18.0 -22.0 -19.0 -23.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -38.0 -41.0 -47.0 -49.0 -49.0 -56.0 -55.0 -60.0 -62.0 -65.0 -64.0 -71.0 -70.0 -71.0 -75.0 -78.0 -77.0 -83.0 -85.0 -86.0 -88.0 -93.0 -95.0 -98.0 -102.0 -105.0 -101.0 -106.0 -108.0 -106.0 -105.0 -114.0 -117.0 -118.0 -119.0 -122.0 -125.0 -122.0 -127.0 -130.0 -133.0 -136.0 -135.0 -134.0 -141.0 -144.0 -146.0 -150.0 -147.0 -152.0 40 -87.0 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -44.0 -45.0 -40.0 -36.0 -37.0 -36.0 -34.0 -28.0 -28.0 -29.0 -23.0 -25.0 -19.0 -22.0 -17.0 -16.0 -14.0 -11.0 -8.0 -6.0 -4.0 1.0 -1.0 4.0 14.0 2.0 -1.0 -2.0 2.0 -1.0 -4.0 -4.0 -7.0 -7.0 -10.0 -8.0 -16.0 -17.0 -16.0 -21.0 -19.0 -21.0 -24.0 -26.0 -29.0 -33.0 -31.0 -35.0 -36.0 -40.0 -43.0 -47.0 -50.0 -51.0 -56.0 -57.0 -61.0 -60.0 -67.0 -64.0 -69.0 -68.0 -73.0 -76.0 -79.0 -79.0 -83.0 -86.0 -86.0 -90.0 -93.0 -94.0 -97.0 -102.0 -103.0 -100.0 -106.0 -108.0 -108.0 -105.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -124.0 -129.0 -130.0 -133.0 -134.0 -137.0 -136.0 -143.0 -146.0 -146.0 -150.0 -147.0 41 -90.0 -87.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -54.0 -49.0 -52.0 -49.0 -44.0 -45.0 -42.0 -34.0 -35.0 -34.0 -33.0 -28.0 -29.0 -28.0 -23.0 -26.0 -19.0 -20.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -5.0 0.0 1.0 6.0 14.0 3.0 1.0 -1.0 2.0 1.0 -2.0 -3.0 -6.0 -5.0 -8.0 -8.0 -14.0 -15.0 -16.0 -21.0 -19.0 -19.0 -22.0 -25.0 -28.0 -31.0 -31.0 -35.0 -36.0 -41.0 -44.0 -45.0 -50.0 -51.0 -54.0 -58.0 -59.0 -60.0 -65.0 -64.0 -67.0 -70.0 -73.0 -74.0 -77.0 -79.0 -83.0 -84.0 -87.0 -90.0 -93.0 -96.0 -99.0 -100.0 -103.0 -100.0 -105.0 -106.0 -108.0 -107.0 -112.0 -113.0 -116.0 -119.0 -120.0 -123.0 -126.0 -127.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -144.0 -145.0 -148.0 42 -93.0 -90.0 -89.0 -88.0 -85.0 -82.0 -81.0 -76.0 -75.0 -74.0 -71.0 -66.0 -67.0 -66.0 -63.0 -58.0 -57.0 -56.0 -57.0 -54.0 -51.0 -52.0 -49.0 -46.0 -46.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -28.0 -25.0 -28.0 -19.0 -20.0 -19.0 -16.0 -13.0 -12.0 -9.0 -8.0 -5.0 0.0 -1.0 8.0 14.0 3.0 1.0 1.0 4.0 3.0 -2.0 -3.0 -4.0 -5.0 -8.0 -8.0 -12.0 -13.0 -18.0 -19.0 -18.0 -19.0 -22.0 -25.0 -28.0 -29.0 -32.0 -33.0 -38.0 -41.0 -42.0 -47.0 -48.0 -51.0 -55.0 -56.0 -57.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -98.0 -103.0 -106.0 -109.0 -107.0 -111.0 -113.0 -117.0 -118.0 -121.0 -124.0 -125.0 -128.0 -129.0 -130.0 -134.0 -138.0 -140.0 -142.0 -143.0 -145.0 43 -96.0 -93.0 -90.0 -91.0 -90.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -51.0 -48.0 -44.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -20.0 -19.0 -16.0 -15.0 -12.0 -9.0 -10.0 -3.0 -2.0 1.0 8.0 14.0 1.0 3.0 3.0 6.0 3.0 -2.0 -1.0 -4.0 -5.0 -8.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -19.0 -22.0 -25.0 -26.0 -29.0 -30.0 -35.0 -38.0 -39.0 -44.0 -45.0 -48.0 -52.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -78.0 -81.0 -84.0 -87.0 -90.0 -91.0 -92.0 -97.0 -98.0 -99.0 -96.0 -103.0 -106.0 -109.0 -107.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 -125.0 -126.0 -127.0 -132.0 -135.0 -138.0 -141.0 -140.0 -143.0 44 -97.0 -96.0 -93.0 -90.0 -91.0 -88.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -50.0 -47.0 -44.0 -41.0 -34.0 -35.0 -36.0 -31.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -18.0 -17.0 -16.0 -15.0 -12.0 -9.0 -8.0 -3.0 -2.0 1.0 8.0 14.0 3.0 5.0 5.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -6.0 -5.0 -10.0 -13.0 -16.0 -17.0 -18.0 -19.0 -22.0 -23.0 -24.0 -29.0 -32.0 -35.0 -38.0 -41.0 -44.0 -47.0 -49.0 -50.0 -51.0 -54.0 -55.0 -56.0 -61.0 -64.0 -67.0 -70.0 -71.0 -74.0 -75.0 -78.0 -81.0 -82.0 -85.0 -90.0 -89.0 -90.0 -95.0 -98.0 -97.0 -96.0 -101.0 -106.0 -107.0 -107.0 -111.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -126.0 -129.0 -132.0 -135.0 -136.0 -139.0 -140.0 45 -100.0 -97.0 -96.0 -93.0 -92.0 -89.0 -88.0 -85.0 -84.0 -79.0 -78.0 -77.0 -76.0 -71.0 -68.0 -71.0 -68.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -53.0 -51.0 -50.0 -47.0 -44.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -30.0 -32.0 -29.0 -24.0 -19.0 -16.0 -19.0 -16.0 -13.0 -14.0 -7.0 -6.0 -5.0 -2.0 1.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 0.0 1.0 -2.0 -3.0 -6.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -20.0 -21.0 -26.0 -29.0 -32.0 -35.0 -38.0 -41.0 -43.0 -46.0 -47.0 -52.0 -49.0 -54.0 -53.0 -58.0 -61.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -78.0 -79.0 -82.0 -85.0 -88.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -105.0 -106.0 -109.0 -112.0 -115.0 -116.0 -117.0 -120.0 -123.0 -126.0 -129.0 -130.0 -135.0 -134.0 -137.0 46 -99.0 -100.0 -95.0 -96.0 -93.0 -92.0 -87.0 -88.0 -83.0 -82.0 -79.0 -78.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -52.0 -49.0 -48.0 -45.0 -42.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -31.0 -30.0 -27.0 -22.0 -17.0 -16.0 -19.0 -14.0 -13.0 -12.0 -5.0 -6.0 -3.0 -2.0 3.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 -2.0 1.0 -2.0 -3.0 -8.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -22.0 -23.0 -26.0 -31.0 -34.0 -37.0 -40.0 -43.0 -43.0 -46.0 -49.0 -52.0 -49.0 -54.0 -53.0 -60.0 -63.0 -66.0 -65.0 -70.0 -71.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -90.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -107.0 -106.0 -111.0 -114.0 -115.0 -116.0 -117.0 -122.0 -123.0 -128.0 -129.0 -130.0 -135.0 -134.0 47 -104.0 -99.0 -100.0 -97.0 -98.0 -93.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -78.0 -77.0 -74.0 -71.0 -68.0 -67.0 -68.0 -63.0 -60.0 -59.0 -60.0 -59.0 -55.0 -50.0 -47.0 -46.0 -45.0 -44.0 -41.0 -36.0 -37.0 -36.0 -35.0 -28.0 -31.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -10.0 -3.0 -4.0 -1.0 0.0 5.0 10.0 14.0 7.0 9.0 9.0 10.0 7.0 0.0 1.0 0.0 -5.0 -6.0 -3.0 -8.0 -9.0 -12.0 -15.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -34.0 -35.0 -38.0 -42.0 -43.0 -44.0 -49.0 -50.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -80.0 -83.0 -82.0 -87.0 -88.0 -87.0 -90.0 -93.0 -96.0 -95.0 -96.0 -101.0 -104.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -117.0 -122.0 -125.0 -128.0 -129.0 -130.0 -133.0 48 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -62.0 -60.0 -53.0 -50.0 -47.0 -48.0 -45.0 -44.0 -41.0 -36.0 -39.0 -38.0 -35.0 -28.0 -33.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -8.0 -3.0 -4.0 -3.0 2.0 5.0 10.0 14.0 5.0 11.0 9.0 10.0 7.0 2.0 3.0 -2.0 -3.0 -4.0 -3.0 -8.0 -9.0 -12.0 -13.0 -16.0 -17.0 -22.0 -25.0 -26.0 -31.0 -32.0 -35.0 -40.0 -40.0 -41.0 -44.0 -47.0 -48.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -68.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -85.0 -86.0 -87.0 -90.0 -93.0 -96.0 -93.0 -96.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -128.0 -127.0 -130.0 49 -106.0 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -89.0 -86.0 -81.0 -82.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -58.0 -53.0 -50.0 -47.0 -48.0 -45.0 -42.0 -41.0 -38.0 -39.0 -40.0 -35.0 -28.0 -31.0 -28.0 -27.0 -24.0 -17.0 -16.0 -15.0 -16.0 -11.0 -8.0 -3.0 -4.0 -1.0 2.0 7.0 10.0 14.0 7.0 11.0 9.0 10.0 9.0 4.0 3.0 0.0 -3.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -16.0 -19.0 -20.0 -25.0 -26.0 -31.0 -34.0 -36.0 -39.0 -38.0 -41.0 -42.0 -45.0 -48.0 -49.0 -54.0 -57.0 -58.0 -59.0 -60.0 -65.0 -66.0 -71.0 -74.0 -77.0 -78.0 -81.0 -82.0 -83.0 -84.0 -87.0 -90.0 -93.0 -94.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -109.0 -110.0 -113.0 -116.0 -117.0 -122.0 -125.0 -126.0 -127.0 50 -111.0 -106.0 -105.0 -104.0 -101.0 -102.0 -97.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -56.0 -51.0 -48.0 -47.0 -48.0 -43.0 -42.0 -39.0 -38.0 -39.0 -38.0 -33.0 -28.0 -29.0 -28.0 -27.0 -22.0 -17.0 -16.0 -13.0 -14.0 -9.0 -6.0 -1.0 -2.0 -1.0 4.0 9.0 12.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -1.0 -4.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -22.0 -25.0 -28.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -40.0 -45.0 -48.0 -51.0 -54.0 -55.0 -58.0 -59.0 -62.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -79.0 -80.0 -81.0 -82.0 -85.0 -90.0 -91.0 -92.0 -95.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -110.0 -113.0 -116.0 -119.0 -122.0 -123.0 -124.0 51 -112.0 -111.0 -104.0 -105.0 -104.0 -101.0 -100.0 -97.0 -94.0 -91.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -78.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -59.0 -54.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -39.0 -36.0 -31.0 -26.0 -29.0 -28.0 -25.0 -22.0 -17.0 -14.0 -13.0 -12.0 -7.0 -4.0 -1.0 -2.0 1.0 6.0 11.0 14.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -42.0 -47.0 -50.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -91.0 -94.0 -95.0 -98.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -115.0 -118.0 -121.0 -122.0 -123.0 52 -113.0 -112.0 -109.0 -104.0 -105.0 -104.0 -99.0 -100.0 -95.0 -92.0 -91.0 -90.0 -89.0 -82.0 -81.0 -80.0 -81.0 -76.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -63.0 -61.0 -59.0 -57.0 -52.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -37.0 -34.0 -29.0 -26.0 -29.0 -26.0 -25.0 -20.0 -15.0 -14.0 -11.0 -10.0 -5.0 -4.0 -1.0 0.0 3.0 8.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -9.0 -12.0 -17.0 -20.0 -23.0 -25.0 -29.0 -31.0 -30.0 -35.0 -34.0 -37.0 -36.0 -41.0 -42.0 -49.0 -52.0 -53.0 -56.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -104.0 -105.0 -108.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 53 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -76.0 -75.0 -76.0 -71.0 -68.0 -71.0 -66.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -29.0 -26.0 -23.0 -18.0 -15.0 -12.0 -9.0 -8.0 -7.0 -4.0 1.0 2.0 5.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -7.0 -6.0 -11.0 -14.0 -17.0 -22.0 -23.0 -25.0 -31.0 -31.0 -30.0 -35.0 -34.0 -37.0 -38.0 -43.0 -42.0 -49.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -66.0 -67.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -82.0 -81.0 -82.0 -87.0 -92.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -105.0 -110.0 -113.0 -116.0 -115.0 -118.0 -121.0 54 -117.0 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -69.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -36.0 -33.0 -34.0 -29.0 -26.0 -29.0 -24.0 -23.0 -16.0 -15.0 -12.0 -9.0 -6.0 -7.0 -2.0 1.0 2.0 7.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -8.0 -13.0 -14.0 -19.0 -22.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -39.0 -40.0 -43.0 -42.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -63.0 -66.0 -67.0 -70.0 -69.0 -74.0 -75.0 -76.0 -81.0 -84.0 -81.0 -82.0 -87.0 -90.0 -93.0 -96.0 -97.0 -98.0 -101.0 -102.0 -107.0 -110.0 -111.0 -116.0 -113.0 -118.0 55 -116.0 -117.0 -112.0 -113.0 -112.0 -109.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -68.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -37.0 -34.0 -33.0 -34.0 -29.0 -26.0 -27.0 -24.0 -21.0 -16.0 -15.0 -12.0 -7.0 -6.0 -5.0 -2.0 1.0 4.0 7.0 10.0 13.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -10.0 -15.0 -16.0 -21.0 -24.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -41.0 -42.0 -45.0 -42.0 -51.0 -52.0 -53.0 -58.0 -61.0 -64.0 -61.0 -66.0 -69.0 -70.0 -69.0 -74.0 -75.0 -78.0 -79.0 -84.0 -81.0 -84.0 -87.0 -92.0 -95.0 -96.0 -97.0 -98.0 -103.0 -102.0 -109.0 -110.0 -111.0 -116.0 -113.0 56 -121.0 -116.0 -117.0 -114.0 -113.0 -110.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -93.0 -94.0 -91.0 -90.0 -87.0 -82.0 -83.0 -80.0 -81.0 -76.0 -75.0 -76.0 -73.0 -68.0 -66.0 -63.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -39.0 -36.0 -33.0 -34.0 -31.0 -26.0 -27.0 -22.0 -19.0 -14.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 3.0 4.0 7.0 8.0 11.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 0.0 -3.0 -8.0 -9.0 -10.0 -17.0 -16.0 -21.0 -25.0 -24.0 -25.0 -32.0 -31.0 -30.0 -37.0 -36.0 -41.0 -42.0 -45.0 -44.0 -49.0 -52.0 -55.0 -58.0 -61.0 -64.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -77.0 -80.0 -79.0 -82.0 -83.0 -84.0 -89.0 -92.0 -93.0 -96.0 -97.0 -98.0 -103.0 -104.0 -109.0 -110.0 -111.0 -114.0 57 -124.0 -123.0 -118.0 -117.0 -116.0 -111.0 -112.0 -111.0 -106.0 -103.0 -104.0 -101.0 -98.0 -93.0 -94.0 -93.0 -92.0 -89.0 -82.0 -83.0 -82.0 -81.0 -78.0 -75.0 -74.0 -74.0 -70.0 -68.0 -63.0 -60.0 -63.0 -58.0 -59.0 -52.0 -55.0 -52.0 -49.0 -48.0 -43.0 -40.0 -41.0 -36.0 -33.0 -36.0 -31.0 -26.0 -27.0 -24.0 -21.0 -14.0 -11.0 -14.0 -11.0 -6.0 -3.0 -2.0 1.0 4.0 5.0 8.0 9.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 -2.0 -5.0 -8.0 -11.0 -12.0 -17.0 -17.0 -23.0 -23.0 -26.0 -25.0 -30.0 -29.0 -32.0 -37.0 -38.0 -41.0 -42.0 -47.0 -44.0 -51.0 -54.0 -55.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -79.0 -80.0 -79.0 -82.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -105.0 -104.0 -111.0 -110.0 -111.0 58 -123.0 -126.0 -121.0 -118.0 -117.0 -116.0 -109.0 -112.0 -109.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -89.0 -84.0 -83.0 -82.0 -83.0 -78.0 -75.0 -73.0 -72.0 -71.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -55.0 -54.0 -51.0 -46.0 -41.0 -40.0 -43.0 -36.0 -33.0 -34.0 -29.0 -26.0 -25.0 -24.0 -21.0 -14.0 -11.0 -12.0 -9.0 -4.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 11.0 4.0 3.0 -2.0 -7.0 -10.0 -13.0 -14.0 -19.0 -17.0 -24.0 -23.0 -26.0 -25.0 -30.0 -29.0 -34.0 -39.0 -40.0 -41.0 -44.0 -47.0 -44.0 -53.0 -56.0 -57.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -71.0 -72.0 -79.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -93.0 -98.0 -99.0 -102.0 -105.0 -104.0 -111.0 -110.0 59 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -90.0 -87.0 -84.0 -83.0 -82.0 -83.0 -78.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -52.0 -49.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -32.0 -27.0 -24.0 -23.0 -22.0 -19.0 -14.0 -11.0 -10.0 -7.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 9.0 4.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -17.0 -22.0 -23.0 -26.0 -25.0 -30.0 -31.0 -34.0 -37.0 -40.0 -43.0 -44.0 -47.0 -46.0 -53.0 -56.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -69.0 -72.0 -71.0 -72.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -93.0 -98.0 -101.0 -104.0 -105.0 -104.0 -109.0 60 -129.0 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -88.0 -87.0 -84.0 -83.0 -82.0 -81.0 -77.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -30.0 -27.0 -24.0 -23.0 -20.0 -19.0 -14.0 -11.0 -10.0 -5.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 13.0 10.0 9.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -15.0 -20.0 -17.0 -22.0 -23.0 -26.0 -27.0 -32.0 -31.0 -34.0 -37.0 -42.0 -43.0 -46.0 -49.0 -48.0 -55.0 -58.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -71.0 -74.0 -71.0 -72.0 -79.0 -80.0 -83.0 -86.0 -87.0 -90.0 -91.0 -92.0 -95.0 -100.0 -101.0 -106.0 -105.0 -104.0 61 -132.0 -131.0 -128.0 -123.0 -126.0 -123.0 -120.0 -119.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -95.0 -92.0 -93.0 -90.0 -87.0 -86.0 -85.0 -84.0 -82.0 -79.0 -76.0 -71.0 -70.0 -71.0 -66.0 -67.0 -60.0 -63.0 -62.0 -59.0 -54.0 -53.0 -50.0 -49.0 -48.0 -43.0 -42.0 -41.0 -36.0 -35.0 -32.0 -29.0 -24.0 -23.0 -22.0 -19.0 -16.0 -13.0 -10.0 -7.0 -4.0 -3.0 -2.0 -3.0 4.0 3.0 4.0 7.0 12.0 9.0 8.0 11.0 14.0 8.0 7.0 0.0 -3.0 -6.0 -9.0 -12.0 -13.0 -15.0 -18.0 -17.0 -22.0 -21.0 -26.0 -29.0 -30.0 -33.0 -34.0 -39.0 -40.0 -43.0 -46.0 -47.0 -48.0 -55.0 -56.0 -57.0 -62.0 -61.0 -64.0 -61.0 -66.0 -69.0 -72.0 -71.0 -74.0 -77.0 -80.0 -83.0 -84.0 -87.0 -88.0 -91.0 -94.0 -97.0 -100.0 -99.0 -104.0 -105.0 62 -135.0 -132.0 -131.0 -130.0 -125.0 -124.0 -123.0 -120.0 -117.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -97.0 -92.0 -95.0 -92.0 -87.0 -88.0 -87.0 -83.0 -80.0 -77.0 -76.0 -73.0 -72.0 -71.0 -66.0 -67.0 -62.0 -63.0 -60.0 -59.0 -56.0 -53.0 -52.0 -49.0 -48.0 -45.0 -42.0 -41.0 -36.0 -33.0 -30.0 -29.0 -26.0 -25.0 -20.0 -17.0 -16.0 -11.0 -10.0 -7.0 -6.0 -5.0 -2.0 -5.0 2.0 3.0 4.0 7.0 12.0 7.0 6.0 9.0 14.0 6.0 5.0 0.0 -5.0 -6.0 -9.0 -14.0 -14.0 -15.0 -18.0 -17.0 -22.0 -23.0 -28.0 -29.0 -30.0 -33.0 -36.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -57.0 -56.0 -57.0 -62.0 -61.0 -64.0 -63.0 -66.0 -69.0 -72.0 -71.0 -74.0 -79.0 -82.0 -83.0 -84.0 -87.0 -88.0 -93.0 -96.0 -99.0 -102.0 -99.0 -104.0 63 -136.0 -137.0 -132.0 -133.0 -132.0 -127.0 -124.0 -125.0 -122.0 -119.0 -118.0 -111.0 -114.0 -111.0 -110.0 -105.0 -106.0 -103.0 -100.0 -99.0 -92.0 -97.0 -94.0 -89.0 -90.0 -88.0 -85.0 -82.0 -79.0 -78.0 -73.0 -74.0 -73.0 -68.0 -69.0 -64.0 -65.0 -62.0 -57.0 -54.0 -53.0 -54.0 -49.0 -48.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -27.0 -26.0 -25.0 -22.0 -19.0 -16.0 -13.0 -12.0 -7.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 2.0 5.0 12.0 8.0 6.0 7.0 14.0 4.0 3.0 -2.0 -6.0 -8.0 -9.0 -14.0 -16.0 -15.0 -17.0 -17.0 -21.0 -25.0 -29.0 -31.0 -30.0 -33.0 -36.0 -38.0 -43.0 -46.0 -49.0 -49.0 -50.0 -56.0 -55.0 -57.0 -61.0 -61.0 -63.0 -63.0 -66.0 -69.0 -73.0 -71.0 -76.0 -78.0 -81.0 -82.0 -83.0 -88.0 -88.0 -94.0 -95.0 -98.0 -101.0 -99.0 64 -141.0 -138.0 -137.0 -134.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -113.0 -114.0 -113.0 -112.0 -107.0 -106.0 -105.0 -102.0 -101.0 -94.0 -98.0 -94.0 -89.0 -91.0 -88.0 -85.0 -82.0 -81.0 -80.0 -75.0 -76.0 -73.0 -68.0 -71.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -54.0 -51.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -29.0 -28.0 -25.0 -20.0 -19.0 -18.0 -15.0 -14.0 -9.0 -10.0 -9.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 10.0 6.0 6.0 6.0 14.0 3.0 3.0 -3.0 -5.0 -9.0 -10.0 -14.0 -15.0 -15.0 -17.0 -19.0 -21.0 -26.0 -29.0 -30.0 -30.0 -32.0 -37.0 -38.0 -43.0 -46.0 -49.0 -51.0 -50.0 -56.0 -55.0 -57.0 -59.0 -62.0 -61.0 -63.0 -65.0 -68.0 -71.0 -71.0 -75.0 -76.0 -81.0 -82.0 -85.0 -88.0 -88.0 -94.0 -95.0 -98.0 -99.0 65 -144.0 -141.0 -140.0 -139.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -113.0 -110.0 -107.0 -108.0 -103.0 -104.0 -101.0 -94.0 -99.0 -96.0 -89.0 -89.0 -86.0 -85.0 -84.0 -83.0 -80.0 -75.0 -76.0 -75.0 -68.0 -69.0 -68.0 -65.0 -62.0 -61.0 -56.0 -57.0 -56.0 -51.0 -50.0 -45.0 -42.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -17.0 -16.0 -9.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 8.0 6.0 4.0 4.0 14.0 1.0 3.0 -3.0 -5.0 -10.0 -10.0 -14.0 -15.0 -15.0 -17.0 -21.0 -21.0 -26.0 -29.0 -30.0 -30.0 -34.0 -39.0 -40.0 -45.0 -48.0 -51.0 -51.0 -50.0 -56.0 -55.0 -57.0 -61.0 -64.0 -61.0 -63.0 -67.0 -68.0 -73.0 -71.0 -75.0 -78.0 -81.0 -82.0 -87.0 -90.0 -90.0 -96.0 -95.0 -98.0 66 -147.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -109.0 -108.0 -105.0 -104.0 -103.0 -94.0 -97.0 -97.0 -91.0 -91.0 -88.0 -87.0 -86.0 -83.0 -82.0 -77.0 -76.0 -77.0 -70.0 -69.0 -68.0 -65.0 -64.0 -63.0 -58.0 -59.0 -56.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -37.0 -34.0 -31.0 -26.0 -21.0 -22.0 -21.0 -20.0 -19.0 -18.0 -11.0 -14.0 -13.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 6.0 4.0 4.0 2.0 14.0 1.0 1.0 -5.0 -3.0 -10.0 -10.0 -12.0 -13.0 -16.0 -15.0 -22.0 -23.0 -26.0 -27.0 -28.0 -32.0 -34.0 -39.0 -42.0 -43.0 -46.0 -49.0 -50.0 -50.0 -54.0 -55.0 -58.0 -59.0 -62.0 -61.0 -63.0 -67.0 -68.0 -71.0 -71.0 -77.0 -78.0 -81.0 -84.0 -85.0 -88.0 -90.0 -94.0 -95.0 67 -150.0 -147.0 -146.0 -145.0 -144.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -113.0 -114.0 -109.0 -110.0 -107.0 -104.0 -103.0 -96.0 -97.0 -95.0 -91.0 -91.0 -90.0 -89.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -68.0 -67.0 -64.0 -63.0 -60.0 -57.0 -56.0 -51.0 -48.0 -45.0 -44.0 -41.0 -40.0 -35.0 -32.0 -31.0 -26.0 -21.0 -22.0 -23.0 -22.0 -19.0 -18.0 -13.0 -14.0 -11.0 -8.0 -7.0 -6.0 -3.0 -2.0 1.0 4.0 2.0 4.0 1.0 14.0 3.0 0.0 -4.0 -1.0 -8.0 -9.0 -10.0 -13.0 -16.0 -15.0 -20.0 -23.0 -26.0 -27.0 -30.0 -33.0 -36.0 -39.0 -42.0 -41.0 -44.0 -47.0 -48.0 -49.0 -52.0 -55.0 -56.0 -57.0 -60.0 -63.0 -63.0 -67.0 -70.0 -71.0 -73.0 -75.0 -76.0 -81.0 -84.0 -87.0 -86.0 -89.0 -92.0 68 -153.0 -150.0 -149.0 -148.0 -147.0 -142.0 -141.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -124.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -111.0 -110.0 -107.0 -106.0 -103.0 -96.0 -97.0 -95.0 -93.0 -91.0 -92.0 -89.0 -86.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -70.0 -67.0 -66.0 -65.0 -60.0 -59.0 -54.0 -51.0 -48.0 -47.0 -44.0 -43.0 -38.0 -35.0 -34.0 -29.0 -26.0 -21.0 -24.0 -25.0 -22.0 -21.0 -20.0 -13.0 -14.0 -11.0 -8.0 -8.0 -6.0 -5.0 -2.0 -1.0 2.0 2.0 2.0 3.0 14.0 2.0 1.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -27.0 -30.0 -33.0 -36.0 -37.0 -42.0 -39.0 -42.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -72.0 -73.0 -78.0 -81.0 -84.0 -87.0 -84.0 -89.0 69 -154.0 -155.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -140.0 -137.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -120.0 -119.0 -118.0 -117.0 -112.0 -113.0 -112.0 -109.0 -106.0 -105.0 -98.0 -99.0 -97.0 -95.0 -91.0 -92.0 -91.0 -88.0 -87.0 -86.0 -81.0 -78.0 -75.0 -72.0 -71.0 -72.0 -67.0 -66.0 -65.0 -62.0 -57.0 -56.0 -53.0 -50.0 -45.0 -44.0 -43.0 -40.0 -37.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -24.0 -21.0 -22.0 -15.0 -16.0 -13.0 -8.0 -6.0 -8.0 -7.0 -2.0 -3.0 0.0 0.0 0.0 1.0 14.0 4.0 3.0 -2.0 1.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -20.0 -21.0 -22.0 -27.0 -30.0 -33.0 -34.0 -35.0 -40.0 -37.0 -40.0 -43.0 -46.0 -49.0 -50.0 -53.0 -54.0 -57.0 -56.0 -61.0 -64.0 -65.0 -66.0 -67.0 -72.0 -73.0 -78.0 -79.0 -82.0 -85.0 -84.0 70 -159.0 -156.0 -155.0 -150.0 -153.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -125.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -108.0 -103.0 -98.0 -98.0 -97.0 -97.0 -91.0 -94.0 -89.0 -90.0 -87.0 -86.0 -83.0 -80.0 -77.0 -72.0 -73.0 -72.0 -67.0 -68.0 -63.0 -62.0 -55.0 -56.0 -51.0 -50.0 -47.0 -46.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -21.0 -28.0 -25.0 -26.0 -22.0 -20.0 -15.0 -18.0 -14.0 -10.0 -6.0 -10.0 -9.0 -4.0 -5.0 0.0 -2.0 -2.0 1.0 14.0 6.0 5.0 0.0 1.0 -4.0 -7.0 -10.0 -13.0 -14.0 -17.0 -18.0 -21.0 -24.0 -25.0 -28.0 -31.0 -36.0 -35.0 -40.0 -37.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -66.0 -69.0 -72.0 -75.0 -78.0 -79.0 -82.0 -83.0 71 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -84.0 -81.0 -80.0 -77.0 -72.0 -75.0 -74.0 -67.0 -68.0 -63.0 -60.0 -53.0 -54.0 -53.0 -52.0 -47.0 -44.0 -43.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -30.0 -27.0 -26.0 -22.0 -18.0 -15.0 -18.0 -12.0 -10.0 -6.0 -12.0 -11.0 -4.0 -7.0 0.0 -2.0 0.0 1.0 14.0 8.0 5.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -14.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -29.0 -34.0 -37.0 -38.0 -35.0 -38.0 -43.0 -46.0 -45.0 -48.0 -51.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -64.0 -69.0 -72.0 -75.0 -76.0 -77.0 -80.0 72 -161.0 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -118.0 -119.0 -112.0 -113.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -82.0 -79.0 -80.0 -77.0 -72.0 -75.0 -72.0 -67.0 -66.0 -63.0 -60.0 -53.0 -52.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -29.0 -27.0 -26.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -11.0 -4.0 -7.0 0.0 -2.0 2.0 3.0 14.0 10.0 7.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -27.0 -28.0 -27.0 -32.0 -35.0 -36.0 -35.0 -36.0 -43.0 -44.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -60.0 -63.0 -66.0 -69.0 -72.0 -73.0 -74.0 -77.0 73 -162.0 -161.0 -158.0 -159.0 -156.0 -155.0 -150.0 -151.0 -148.0 -145.0 -142.0 -141.0 -138.0 -137.0 -134.0 -135.0 -130.0 -129.0 -128.0 -123.0 -122.0 -119.0 -118.0 -117.0 -112.0 -113.0 -110.0 -108.0 -105.0 -102.0 -98.0 -100.0 -97.0 -96.0 -91.0 -94.0 -91.0 -88.0 -83.0 -80.0 -79.0 -80.0 -75.0 -72.0 -73.0 -70.0 -67.0 -64.0 -61.0 -58.0 -53.0 -52.0 -51.0 -48.0 -45.0 -42.0 -41.0 -38.0 -35.0 -36.0 -33.0 -30.0 -21.0 -27.0 -27.0 -24.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -9.0 -4.0 -7.0 0.0 -1.0 2.0 5.0 14.0 12.0 7.0 2.0 -1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -15.0 -18.0 -21.0 -22.0 -25.0 -26.0 -27.0 -30.0 -33.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -44.0 -49.0 -52.0 -53.0 -52.0 -55.0 -60.0 -61.0 -66.0 -67.0 -70.0 -71.0 -72.0 74 -165.0 -164.0 -159.0 -158.0 -161.0 -156.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -137.0 -136.0 -133.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -113.0 -111.0 -108.0 -107.0 -102.0 -100.0 -100.0 -97.0 -98.0 -93.0 -94.0 -91.0 -86.0 -83.0 -80.0 -81.0 -78.0 -75.0 -74.0 -73.0 -70.0 -67.0 -64.0 -61.0 -56.0 -53.0 -54.0 -50.0 -47.0 -45.0 -44.0 -43.0 -38.0 -37.0 -36.0 -33.0 -28.0 -21.0 -27.0 -27.0 -26.0 -20.0 -18.0 -17.0 -18.0 -12.0 -12.0 -6.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 2.0 7.0 13.0 14.0 5.0 2.0 -1.0 0.0 -3.0 -6.0 -7.0 -12.0 -15.0 -18.0 -19.0 -22.0 -25.0 -24.0 -27.0 -30.0 -31.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 -57.0 -58.0 -63.0 -64.0 -67.0 -70.0 -69.0 75 -166.0 -167.0 -166.0 -159.0 -158.0 -159.0 -154.0 -153.0 -152.0 -149.0 -148.0 -143.0 -144.0 -139.0 -138.0 -137.0 -136.0 -131.0 -132.0 -127.0 -128.0 -123.0 -126.0 -121.0 -116.0 -117.0 -114.0 -114.0 -111.0 -110.0 -107.0 -102.0 -100.0 -98.0 -97.0 -99.0 -93.0 -92.0 -91.0 -86.0 -84.0 -82.0 -83.0 -79.0 -77.0 -75.0 -72.0 -69.0 -67.0 -64.0 -60.0 -56.0 -54.0 -54.0 -48.0 -45.0 -46.0 -46.0 -45.0 -39.0 -39.0 -36.0 -32.0 -29.0 -21.0 -28.0 -29.0 -26.0 -20.0 -19.0 -19.0 -18.0 -12.0 -14.0 -6.0 -13.0 -13.0 -8.0 -6.0 -4.0 0.0 2.0 5.0 13.0 14.0 3.0 0.0 -1.0 0.0 -3.0 -8.0 -7.0 -14.0 -17.0 -20.0 -21.0 -22.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -52.0 -51.0 -54.0 -59.0 -58.0 -63.0 -64.0 -67.0 -70.0 76 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -126.0 -123.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -110.0 -105.0 -102.0 -100.0 -98.0 -97.0 -97.0 -93.0 -93.0 -90.0 -86.0 -84.0 -83.0 -84.0 -79.0 -78.0 -73.0 -70.0 -67.0 -66.0 -63.0 -60.0 -56.0 -54.0 -53.0 -48.0 -45.0 -46.0 -47.0 -44.0 -39.0 -38.0 -35.0 -30.0 -29.0 -21.0 -28.0 -28.0 -25.0 -20.0 -19.0 -20.0 -19.0 -12.0 -15.0 -6.0 -12.0 -12.0 -9.0 -4.0 -3.0 2.0 3.0 4.0 13.0 14.0 3.0 0.0 -3.0 0.0 -5.0 -10.0 -9.0 -16.0 -19.0 -22.0 -21.0 -24.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -44.0 -43.0 -46.0 -49.0 -52.0 -51.0 -56.0 -61.0 -60.0 -63.0 -64.0 -67.0 77 -172.0 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -113.0 -108.0 -105.0 -104.0 -100.0 -98.0 -97.0 -97.0 -91.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -81.0 -76.0 -73.0 -70.0 -67.0 -64.0 -64.0 -58.0 -56.0 -56.0 -51.0 -48.0 -45.0 -47.0 -47.0 -42.0 -39.0 -38.0 -33.0 -30.0 -29.0 -21.0 -28.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -14.0 -12.0 -7.0 -4.0 -3.0 4.0 1.0 2.0 13.0 14.0 3.0 0.0 -1.0 -2.0 -7.0 -10.0 -9.0 -16.0 -19.0 -20.0 -21.0 -24.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -35.0 -36.0 -41.0 -44.0 -43.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -62.0 -61.0 -64.0 78 -171.0 -172.0 -167.0 -166.0 -167.0 -164.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -108.0 -105.0 -104.0 -100.0 -98.0 -98.0 -95.0 -89.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -79.0 -76.0 -73.0 -70.0 -65.0 -64.0 -62.0 -58.0 -56.0 -54.0 -51.0 -48.0 -45.0 -47.0 -45.0 -42.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -12.0 -10.0 -7.0 -2.0 -1.0 4.0 1.0 2.0 13.0 14.0 5.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -22.0 -23.0 -26.0 -25.0 -26.0 -31.0 -34.0 -33.0 -34.0 -39.0 -42.0 -43.0 -44.0 -49.0 -50.0 -55.0 -56.0 -59.0 -62.0 -61.0 79 -174.0 -173.0 -172.0 -167.0 -166.0 -167.0 -164.0 -161.0 -160.0 -157.0 -156.0 -151.0 -152.0 -149.0 -148.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -130.0 -123.0 -124.0 -125.0 -122.0 -120.0 -116.0 -115.0 -113.0 -112.0 -111.0 -106.0 -105.0 -104.0 -99.0 -96.0 -98.0 -95.0 -89.0 -91.0 -90.0 -86.0 -84.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -65.0 -64.0 -60.0 -56.0 -54.0 -54.0 -51.0 -48.0 -45.0 -45.0 -43.0 -40.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -26.0 -25.0 -20.0 -21.0 -18.0 -19.0 -14.0 -13.0 -6.0 -10.0 -8.0 -5.0 -2.0 -1.0 4.0 1.0 4.0 13.0 14.0 7.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -20.0 -23.0 -26.0 -25.0 -24.0 -29.0 -32.0 -33.0 -32.0 -37.0 -42.0 -43.0 -46.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 80 -177.0 -174.0 -175.0 -174.0 -167.0 -166.0 -167.0 -166.0 -161.0 -160.0 -159.0 -154.0 -153.0 -150.0 -149.0 -150.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -128.0 -123.0 -126.0 -123.0 -123.0 -118.0 -116.0 -117.0 -111.0 -114.0 -109.0 -106.0 -107.0 -104.0 -97.0 -96.0 -96.0 -96.0 -89.0 -91.0 -92.0 -86.0 -85.0 -83.0 -80.0 -77.0 -72.0 -69.0 -69.0 -67.0 -63.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -43.0 -43.0 -40.0 -39.0 -37.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -17.0 -16.0 -13.0 -8.0 -9.0 -8.0 -3.0 -4.0 -1.0 2.0 3.0 3.0 13.0 14.0 5.0 4.0 -1.0 -2.0 -7.0 -8.0 -7.0 -12.0 -15.0 -16.0 -17.0 -18.0 -23.0 -24.0 -23.0 -24.0 -29.0 -30.0 -33.0 -32.0 -37.0 -40.0 -43.0 -46.0 -47.0 -52.0 -53.0 -54.0 -57.0 81 -178.0 -177.0 -172.0 -175.0 -174.0 -167.0 -164.0 -167.0 -164.0 -159.0 -160.0 -157.0 -154.0 -153.0 -150.0 -149.0 -148.0 -145.0 -144.0 -139.0 -138.0 -135.0 -134.0 -133.0 -128.0 -123.0 -126.0 -122.0 -121.0 -118.0 -116.0 -116.0 -111.0 -112.0 -109.0 -106.0 -108.0 -102.0 -97.0 -94.0 -96.0 -96.0 -89.0 -91.0 -90.0 -84.0 -83.0 -81.0 -78.0 -75.0 -70.0 -69.0 -67.0 -65.0 -61.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -41.0 -41.0 -40.0 -39.0 -35.0 -31.0 -28.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -15.0 -14.0 -13.0 -8.0 -7.0 -6.0 -3.0 -4.0 -1.0 2.0 4.0 5.0 13.0 14.0 5.0 2.0 -1.0 0.0 -5.0 -6.0 -5.0 -10.0 -13.0 -14.0 -17.0 -16.0 -21.0 -22.0 -23.0 -24.0 -29.0 -32.0 -33.0 -32.0 -35.0 -40.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 82 -179.0 -178.0 -175.0 -172.0 -175.0 -172.0 -167.0 -164.0 -165.0 -162.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -123.0 -125.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -109.0 -106.0 -107.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -92.0 -89.0 -82.0 -81.0 -81.0 -78.0 -73.0 -70.0 -71.0 -65.0 -64.0 -59.0 -58.0 -57.0 -54.0 -55.0 -53.0 -50.0 -45.0 -41.0 -42.0 -42.0 -38.0 -33.0 -31.0 -30.0 -31.0 -21.0 -28.0 -30.0 -27.0 -24.0 -23.0 -18.0 -17.0 -16.0 -15.0 -8.0 -9.0 -6.0 -5.0 -6.0 -3.0 2.0 2.0 5.0 14.0 12.0 5.0 2.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -11.0 -14.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -30.0 -31.0 -32.0 -37.0 -38.0 -43.0 -44.0 -47.0 -50.0 -49.0 83 -182.0 -179.0 -178.0 -175.0 -172.0 -173.0 -170.0 -167.0 -164.0 -163.0 -162.0 -157.0 -158.0 -155.0 -154.0 -153.0 -148.0 -145.0 -146.0 -143.0 -142.0 -139.0 -138.0 -133.0 -130.0 -131.0 -126.0 -122.0 -123.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -107.0 -104.0 -105.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -90.0 -87.0 -80.0 -79.0 -80.0 -77.0 -74.0 -71.0 -70.0 -63.0 -62.0 -59.0 -58.0 -57.0 -54.0 -53.0 -52.0 -49.0 -46.0 -41.0 -42.0 -41.0 -36.0 -33.0 -33.0 -32.0 -32.0 -21.0 -28.0 -28.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -11.0 -6.0 -7.0 -6.0 -4.0 2.0 4.0 5.0 14.0 10.0 3.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -32.0 -31.0 -34.0 -39.0 -38.0 -45.0 -46.0 -47.0 -50.0 84 -183.0 -182.0 -179.0 -178.0 -175.0 -174.0 -173.0 -172.0 -167.0 -162.0 -165.0 -162.0 -157.0 -156.0 -157.0 -156.0 -153.0 -146.0 -145.0 -146.0 -143.0 -140.0 -141.0 -138.0 -135.0 -130.0 -131.0 -125.0 -120.0 -123.0 -120.0 -119.0 -118.0 -115.0 -116.0 -109.0 -110.0 -105.0 -104.0 -103.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -88.0 -85.0 -78.0 -77.0 -78.0 -77.0 -74.0 -71.0 -68.0 -63.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -50.0 -47.0 -46.0 -41.0 -40.0 -39.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -26.0 -29.0 -29.0 -26.0 -21.0 -21.0 -19.0 -18.0 -13.0 -12.0 -13.0 -8.0 -9.0 -7.0 -4.0 0.0 2.0 5.0 14.0 10.0 1.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -15.0 -16.0 -15.0 -18.0 -19.0 -24.0 -21.0 -26.0 -29.0 -32.0 -33.0 -36.0 -41.0 -40.0 -45.0 -46.0 -47.0 85 -182.0 -183.0 -180.0 -179.0 -178.0 -175.0 -174.0 -173.0 -170.0 -165.0 -162.0 -163.0 -162.0 -157.0 -156.0 -157.0 -154.0 -151.0 -146.0 -145.0 -146.0 -141.0 -140.0 -139.0 -136.0 -135.0 -130.0 -130.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -102.0 -103.0 -100.0 -97.0 -94.0 -97.0 -92.0 -89.0 -88.0 -83.0 -76.0 -77.0 -78.0 -75.0 -72.0 -69.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -50.0 -51.0 -48.0 -47.0 -46.0 -39.0 -38.0 -37.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -26.0 -29.0 -29.0 -24.0 -22.0 -21.0 -21.0 -16.0 -15.0 -14.0 -15.0 -10.0 -10.0 -7.0 -3.0 -1.0 2.0 5.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -4.0 -5.0 -12.0 -13.0 -14.0 -15.0 -18.0 -21.0 -24.0 -21.0 -26.0 -29.0 -32.0 -35.0 -36.0 -41.0 -40.0 -43.0 -46.0 86 -185.0 -182.0 -181.0 -180.0 -179.0 -178.0 -173.0 -174.0 -171.0 -168.0 -165.0 -162.0 -163.0 -160.0 -157.0 -156.0 -155.0 -152.0 -151.0 -146.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -133.0 -129.0 -128.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -114.0 -107.0 -106.0 -101.0 -102.0 -103.0 -98.0 -97.0 -94.0 -95.0 -92.0 -87.0 -86.0 -81.0 -76.0 -77.0 -76.0 -73.0 -70.0 -67.0 -66.0 -63.0 -62.0 -57.0 -56.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -37.0 -36.0 -37.0 -34.0 -33.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -27.0 -26.0 -22.0 -21.0 -21.0 -16.0 -16.0 -16.0 -15.0 -10.0 -10.0 -7.0 -1.0 1.0 1.0 3.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -6.0 -5.0 -12.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -21.0 -26.0 -31.0 -32.0 -37.0 -36.0 -41.0 -40.0 -43.0 87 -182.0 -186.0 -180.0 -183.0 -180.0 -181.0 -176.0 -173.0 -172.0 -169.0 -170.0 -165.0 -162.0 -163.0 -160.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -147.0 -146.0 -143.0 -140.0 -139.0 -136.0 -132.0 -127.0 -130.0 -123.0 -122.0 -123.0 -118.0 -121.0 -118.0 -115.0 -112.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -97.0 -92.0 -93.0 -90.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -68.0 -67.0 -66.0 -63.0 -62.0 -55.0 -54.0 -51.0 -50.0 -51.0 -48.0 -45.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -27.0 -27.0 -27.0 -22.0 -21.0 -21.0 -18.0 -16.0 -18.0 -14.0 -11.0 -9.0 -5.0 -1.0 1.0 1.0 3.0 14.0 10.0 3.0 2.0 1.0 2.0 -5.0 -6.0 -5.0 -10.0 -13.0 -12.0 -17.0 -20.0 -21.0 -22.0 -21.0 -28.0 -29.0 -34.0 -35.0 -36.0 -41.0 -40.0 88 -189.0 -182.0 -187.0 -180.0 -183.0 -178.0 -179.0 -176.0 -173.0 -170.0 -169.0 -168.0 -165.0 -160.0 -163.0 -160.0 -159.0 -156.0 -153.0 -150.0 -149.0 -146.0 -147.0 -144.0 -141.0 -140.0 -137.0 -135.0 -130.0 -127.0 -130.0 -123.0 -122.0 -121.0 -118.0 -121.0 -118.0 -113.0 -110.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -90.0 -92.0 -90.0 -83.0 -82.0 -79.0 -78.0 -75.0 -72.0 -71.0 -70.0 -67.0 -66.0 -63.0 -62.0 -53.0 -52.0 -51.0 -50.0 -51.0 -46.0 -43.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -29.0 -27.0 -27.0 -22.0 -21.0 -22.0 -18.0 -16.0 -18.0 -15.0 -10.0 -7.0 -6.0 -1.0 1.0 3.0 2.0 14.0 10.0 1.0 2.0 1.0 3.0 -4.0 -6.0 -5.0 -9.0 -12.0 -14.0 -18.0 -19.0 -20.0 -22.0 -23.0 -29.0 -31.0 -33.0 -37.0 -36.0 -40.0 89 -188.0 -189.0 -182.0 -187.0 -180.0 -183.0 -176.0 -179.0 -176.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -163.0 -158.0 -157.0 -156.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -141.0 -138.0 -136.0 -133.0 -130.0 -127.0 -128.0 -123.0 -122.0 -121.0 -118.0 -119.0 -116.0 -111.0 -108.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -88.0 -91.0 -88.0 -83.0 -82.0 -79.0 -78.0 -73.0 -70.0 -71.0 -70.0 -67.0 -64.0 -63.0 -60.0 -53.0 -50.0 -51.0 -50.0 -49.0 -44.0 -41.0 -42.0 -37.0 -36.0 -35.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -27.0 -29.0 -27.0 -25.0 -22.0 -21.0 -22.0 -18.0 -15.0 -18.0 -13.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 4.0 14.0 10.0 2.0 2.0 1.0 3.0 -2.0 -5.0 -7.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -23.0 -23.0 -29.0 -30.0 -31.0 -36.0 -35.0 90 -189.0 -188.0 -187.0 -182.0 -189.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -159.0 -154.0 -153.0 -152.0 -147.0 -146.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -119.0 -116.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -86.0 -89.0 -88.0 -85.0 -82.0 -77.0 -78.0 -71.0 -70.0 -71.0 -70.0 -67.0 -62.0 -63.0 -60.0 -53.0 -50.0 -51.0 -48.0 -49.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -33.0 -30.0 -21.0 -27.0 -27.0 -27.0 -25.0 -23.0 -21.0 -22.0 -18.0 -15.0 -16.0 -11.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 6.0 14.0 10.0 4.0 3.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -17.0 -18.0 -23.0 -25.0 -29.0 -30.0 -31.0 -34.0 91 -194.0 -189.0 -190.0 -187.0 -182.0 -187.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -154.0 -151.0 -152.0 -147.0 -144.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -117.0 -114.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -99.0 -96.0 -93.0 -86.0 -87.0 -88.0 -85.0 -82.0 -77.0 -76.0 -71.0 -70.0 -71.0 -68.0 -65.0 -62.0 -61.0 -58.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -31.0 -30.0 -21.0 -27.0 -25.0 -28.0 -25.0 -23.0 -21.0 -22.0 -17.0 -13.0 -14.0 -9.0 -8.0 -5.0 -4.0 1.0 3.0 7.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 -31.0 92 -193.0 -194.0 -187.0 -190.0 -187.0 -182.0 -185.0 -180.0 -183.0 -176.0 -179.0 -174.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -156.0 -151.0 -150.0 -147.0 -146.0 -145.0 -143.0 -138.0 -137.0 -134.0 -133.0 -134.0 -131.0 -130.0 -125.0 -126.0 -121.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -108.0 -105.0 -102.0 -99.0 -94.0 -91.0 -84.0 -87.0 -86.0 -83.0 -80.0 -77.0 -76.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -59.0 -58.0 -53.0 -50.0 -49.0 -46.0 -49.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -21.0 -17.0 -13.0 -12.0 -9.0 -8.0 -3.0 -2.0 3.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -7.0 -8.0 -7.0 -8.0 -13.0 -18.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 93 -196.0 -193.0 -192.0 -187.0 -190.0 -185.0 -182.0 -185.0 -180.0 -181.0 -176.0 -177.0 -174.0 -171.0 -170.0 -167.0 -166.0 -161.0 -160.0 -159.0 -156.0 -157.0 -156.0 -149.0 -148.0 -147.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -133.0 -131.0 -130.0 -127.0 -124.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -108.0 -103.0 -102.0 -97.0 -92.0 -89.0 -84.0 -87.0 -84.0 -81.0 -80.0 -79.0 -78.0 -71.0 -72.0 -71.0 -64.0 -61.0 -62.0 -59.0 -60.0 -53.0 -48.0 -49.0 -46.0 -49.0 -44.0 -43.0 -42.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -19.0 -15.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 5.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 -2.0 -9.0 -8.0 -7.0 -8.0 -15.0 -18.0 -21.0 -20.0 -23.0 -25.0 -29.0 94 -197.0 -196.0 -193.0 -192.0 -187.0 -190.0 -183.0 -182.0 -185.0 -178.0 -181.0 -174.0 -177.0 -172.0 -171.0 -170.0 -165.0 -164.0 -161.0 -158.0 -159.0 -156.0 -157.0 -154.0 -147.0 -148.0 -145.0 -146.0 -142.0 -141.0 -138.0 -137.0 -134.0 -131.0 -133.0 -131.0 -128.0 -127.0 -122.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -106.0 -101.0 -100.0 -95.0 -90.0 -89.0 -84.0 -85.0 -82.0 -79.0 -80.0 -79.0 -78.0 -71.0 -72.0 -69.0 -62.0 -61.0 -62.0 -59.0 -60.0 -51.0 -48.0 -49.0 -46.0 -49.0 -44.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -36.0 -31.0 -28.0 -21.0 -25.0 -25.0 -26.0 -24.0 -24.0 -18.0 -17.0 -16.0 -13.0 -12.0 -9.0 -6.0 -3.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 4.0 0.0 1.0 1.0 -4.0 -7.0 -8.0 -7.0 -10.0 -15.0 -20.0 -21.0 -20.0 -23.0 -25.0 95 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -164.0 -159.0 -158.0 -160.0 -156.0 -155.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -141.0 -138.0 -137.0 -132.0 -131.0 -133.0 -129.0 -126.0 -127.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -110.0 -103.0 -104.0 -99.0 -98.0 -93.0 -90.0 -89.0 -84.0 -83.0 -80.0 -79.0 -80.0 -79.0 -78.0 -71.0 -70.0 -67.0 -62.0 -61.0 -62.0 -57.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -34.0 -31.0 -28.0 -21.0 -25.0 -25.0 -25.0 -24.0 -23.0 -16.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 2.0 1.0 -1.0 1.0 -4.0 -9.0 -8.0 -7.0 -12.0 -17.0 -22.0 -23.0 -20.0 -23.0 96 -201.0 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -162.0 -159.0 -156.0 -161.0 -156.0 -153.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -139.0 -138.0 -137.0 -132.0 -131.0 -134.0 -129.0 -124.0 -125.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -104.0 -99.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -77.0 -76.0 -71.0 -68.0 -65.0 -62.0 -61.0 -62.0 -57.0 -56.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -42.0 -39.0 -40.0 -35.0 -34.0 -35.0 -32.0 -31.0 -28.0 -21.0 -25.0 -25.0 -23.0 -22.0 -21.0 -14.0 -17.0 -16.0 -11.0 -8.0 -7.0 -4.0 1.0 0.0 5.0 4.0 9.0 10.0 14.0 10.0 4.0 3.0 0.0 1.0 -6.0 -7.0 -10.0 -9.0 -12.0 -19.0 -20.0 -23.0 -20.0 97 -200.0 -201.0 -200.0 -197.0 -200.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -170.0 -163.0 -162.0 -159.0 -156.0 -159.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -144.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -132.0 -129.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -109.0 -106.0 -101.0 -102.0 -97.0 -96.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -75.0 -74.0 -69.0 -66.0 -65.0 -62.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -34.0 -35.0 -32.0 -33.0 -28.0 -21.0 -25.0 -24.0 -23.0 -22.0 -19.0 -14.0 -17.0 -14.0 -9.0 -6.0 -5.0 -2.0 1.0 0.0 5.0 4.0 9.0 12.0 14.0 10.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -18.0 -21.0 98 -205.0 -200.0 -201.0 -200.0 -197.0 -198.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -168.0 -163.0 -160.0 -159.0 -156.0 -157.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -142.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -130.0 -127.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -112.0 -111.0 -106.0 -101.0 -102.0 -97.0 -94.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -78.0 -75.0 -72.0 -67.0 -68.0 -67.0 -62.0 -63.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -32.0 -33.0 -28.0 -21.0 -24.0 -22.0 -21.0 -20.0 -19.0 -14.0 -17.0 -12.0 -7.0 -4.0 -4.0 -4.0 0.0 -2.0 3.0 4.0 9.0 14.0 14.0 10.0 6.0 3.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -16.0 -19.0 -18.0 99 -206.0 -205.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -192.0 -185.0 -186.0 -181.0 -182.0 -181.0 -178.0 -179.0 -174.0 -173.0 -172.0 -169.0 -168.0 -163.0 -160.0 -157.0 -156.0 -157.0 -154.0 -153.0 -151.0 -146.0 -145.0 -142.0 -142.0 -138.0 -139.0 -136.0 -135.0 -132.0 -129.0 -128.0 -127.0 -122.0 -123.0 -122.0 -119.0 -116.0 -113.0 -110.0 -109.0 -104.0 -99.0 -102.0 -95.0 -92.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -77.0 -76.0 -73.0 -70.0 -67.0 -68.0 -67.0 -62.0 -61.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -34.0 -31.0 -28.0 -21.0 -24.0 -22.0 -19.0 -20.0 -19.0 -14.0 -15.0 -10.0 -5.0 -2.0 -4.0 -4.0 0.0 -2.0 3.0 6.0 9.0 14.0 14.0 10.0 6.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -15.0 -16.0 -19.0 100 -207.0 -206.0 -203.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -185.0 -184.0 -181.0 -182.0 -181.0 -178.0 -179.0 -172.0 -175.0 -172.0 -169.0 -166.0 -163.0 -158.0 -157.0 -156.0 -157.0 -153.0 -152.0 -151.0 -146.0 -143.0 -142.0 -140.0 -138.0 -139.0 -136.0 -133.0 -132.0 -127.0 -128.0 -127.0 -120.0 -123.0 -120.0 -117.0 -114.0 -111.0 -108.0 -107.0 -102.0 -99.0 -100.0 -93.0 -90.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -75.0 -74.0 -71.0 -70.0 -67.0 -68.0 -65.0 -60.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -44.0 -39.0 -40.0 -37.0 -32.0 -36.0 -36.0 -30.0 -27.0 -21.0 -24.0 -20.0 -19.0 -20.0 -17.0 -12.0 -13.0 -8.0 -3.0 -2.0 -4.0 -5.0 0.0 0.0 3.0 6.0 7.0 14.0 14.0 10.0 4.0 1.0 -2.0 -5.0 -6.0 -7.0 -14.0 -15.0 -16.0 101 -208.0 -209.0 -206.0 -205.0 -198.0 -203.0 -198.0 -197.0 -196.0 -191.0 -192.0 -183.0 -184.0 -181.0 -182.0 -181.0 -178.0 -177.0 -172.0 -173.0 -172.0 -167.0 -166.0 -161.0 -158.0 -157.0 -156.0 -156.0 -151.0 -152.0 -151.0 -144.0 -143.0 -140.0 -140.0 -138.0 -139.0 -134.0 -133.0 -130.0 -127.0 -128.0 -125.0 -120.0 -121.0 -118.0 -115.0 -112.0 -109.0 -106.0 -105.0 -102.0 -97.0 -98.0 -91.0 -90.0 -89.0 -88.0 -89.0 -84.0 -79.0 -78.0 -73.0 -72.0 -71.0 -70.0 -65.0 -66.0 -65.0 -60.0 -63.0 -62.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -42.0 -37.0 -40.0 -37.0 -32.0 -37.0 -35.0 -28.0 -27.0 -21.0 -22.0 -20.0 -19.0 -20.0 -15.0 -10.0 -11.0 -6.0 -3.0 -2.0 -4.0 -5.0 0.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 4.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -13.0 102 -213.0 -208.0 -207.0 -208.0 -207.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -177.0 -170.0 -173.0 -170.0 -167.0 -164.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -152.0 -149.0 -144.0 -141.0 -140.0 -140.0 -138.0 -137.0 -134.0 -131.0 -132.0 -127.0 -126.0 -127.0 -118.0 -119.0 -116.0 -113.0 -110.0 -107.0 -104.0 -105.0 -100.0 -95.0 -96.0 -91.0 -90.0 -89.0 -88.0 -87.0 -82.0 -77.0 -76.0 -71.0 -72.0 -71.0 -68.0 -63.0 -64.0 -65.0 -60.0 -63.0 -60.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -45.0 -40.0 -37.0 -40.0 -37.0 -32.0 -36.0 -33.0 -28.0 -27.0 -20.0 -22.0 -20.0 -19.0 -18.0 -13.0 -8.0 -9.0 -6.0 -3.0 -2.0 -4.0 -3.0 2.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 6.0 1.0 0.0 -3.0 -8.0 -5.0 -10.0 103 -210.0 -213.0 -208.0 -207.0 -208.0 -205.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -175.0 -170.0 -171.0 -170.0 -167.0 -162.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -140.0 -141.0 -138.0 -135.0 -132.0 -131.0 -132.0 -127.0 -126.0 -125.0 -118.0 -117.0 -116.0 -113.0 -112.0 -105.0 -104.0 -103.0 -100.0 -95.0 -94.0 -91.0 -92.0 -89.0 -86.0 -87.0 -84.0 -75.0 -74.0 -71.0 -72.0 -73.0 -68.0 -61.0 -64.0 -65.0 -60.0 -61.0 -58.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -43.0 -40.0 -37.0 -40.0 -37.0 -32.0 -34.0 -31.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -16.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 -2.0 -3.0 4.0 2.0 2.0 2.0 5.0 14.0 14.0 6.0 6.0 -1.0 0.0 -3.0 -8.0 -5.0 104 -215.0 -210.0 -213.0 -210.0 -207.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -179.0 -176.0 -177.0 -170.0 -171.0 -170.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -156.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -141.0 -136.0 -137.0 -132.0 -131.0 -132.0 -129.0 -126.0 -123.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -104.0 -101.0 -98.0 -93.0 -94.0 -91.0 -92.0 -89.0 -84.0 -85.0 -82.0 -75.0 -74.0 -71.0 -72.0 -71.0 -68.0 -61.0 -64.0 -67.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -47.0 -44.0 -45.0 -40.0 -37.0 -38.0 -37.0 -32.0 -32.0 -29.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -14.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 0.0 -1.0 4.0 2.0 2.0 4.0 7.0 14.0 14.0 5.0 4.0 -1.0 0.0 -3.0 -6.0 105 -218.0 -215.0 -210.0 -213.0 -210.0 -205.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -177.0 -176.0 -175.0 -170.0 -171.0 -168.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -139.0 -134.0 -139.0 -132.0 -131.0 -134.0 -129.0 -128.0 -121.0 -116.0 -115.0 -116.0 -109.0 -112.0 -105.0 -104.0 -103.0 -96.0 -93.0 -94.0 -93.0 -92.0 -89.0 -84.0 -85.0 -80.0 -75.0 -74.0 -71.0 -72.0 -71.0 -70.0 -61.0 -64.0 -65.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -45.0 -44.0 -45.0 -40.0 -37.0 -38.0 -36.0 -31.0 -30.0 -27.0 -26.0 -25.0 -18.0 -22.0 -18.0 -15.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 -2.0 2.0 -1.0 4.0 2.0 4.0 6.0 5.0 14.0 12.0 5.0 4.0 -1.0 2.0 -3.0 106 -219.0 -220.0 -215.0 -210.0 -213.0 -212.0 -205.0 -208.0 -205.0 -200.0 -199.0 -198.0 -197.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -175.0 -170.0 -171.0 -170.0 -167.0 -164.0 -159.0 -160.0 -158.0 -157.0 -156.0 -151.0 -152.0 -151.0 -144.0 -141.0 -136.0 -137.0 -134.0 -139.0 -132.0 -131.0 -132.0 -129.0 -126.0 -121.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -104.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -91.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -64.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -47.0 -42.0 -37.0 -37.0 -36.0 -29.0 -30.0 -29.0 -26.0 -23.0 -16.0 -20.0 -16.0 -13.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 0.0 2.0 -1.0 6.0 2.0 6.0 6.0 5.0 14.0 10.0 5.0 4.0 -1.0 2.0 107 -220.0 -219.0 -218.0 -215.0 -210.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -197.0 -198.0 -195.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -173.0 -170.0 -171.0 -168.0 -166.0 -163.0 -159.0 -160.0 -158.0 -157.0 -154.0 -151.0 -152.0 -149.0 -142.0 -139.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -130.0 -127.0 -124.0 -119.0 -114.0 -113.0 -114.0 -109.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -88.0 -89.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -62.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -45.0 -42.0 -37.0 -35.0 -34.0 -29.0 -30.0 -29.0 -24.0 -23.0 -16.0 -19.0 -16.0 -15.0 -12.0 -11.0 -10.0 -11.0 -4.0 1.0 0.0 2.0 1.0 8.0 2.0 6.0 6.0 6.0 14.0 8.0 5.0 4.0 -1.0 108 -223.0 -220.0 -219.0 -218.0 -217.0 -210.0 -209.0 -212.0 -205.0 -206.0 -203.0 -202.0 -197.0 -196.0 -195.0 -194.0 -193.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -176.0 -173.0 -170.0 -171.0 -169.0 -166.0 -163.0 -159.0 -161.0 -160.0 -155.0 -154.0 -153.0 -152.0 -147.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -128.0 -127.0 -122.0 -117.0 -112.0 -113.0 -114.0 -107.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -91.0 -86.0 -87.0 -82.0 -85.0 -80.0 -75.0 -72.0 -71.0 -70.0 -71.0 -70.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -47.0 -48.0 -44.0 -41.0 -39.0 -35.0 -34.0 -29.0 -30.0 -27.0 -22.0 -21.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -9.0 -4.0 1.0 0.0 2.0 0.0 8.0 2.0 6.0 8.0 6.0 14.0 8.0 5.0 4.0 109 -222.0 -223.0 -218.0 -219.0 -218.0 -217.0 -210.0 -209.0 -210.0 -203.0 -206.0 -201.0 -202.0 -197.0 -196.0 -195.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -174.0 -173.0 -170.0 -170.0 -167.0 -166.0 -163.0 -159.0 -161.0 -158.0 -155.0 -154.0 -153.0 -150.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -129.0 -126.0 -125.0 -120.0 -115.0 -112.0 -113.0 -112.0 -105.0 -104.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -89.0 -86.0 -87.0 -82.0 -83.0 -78.0 -75.0 -72.0 -71.0 -70.0 -71.0 -68.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -49.0 -47.0 -44.0 -39.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -22.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -7.0 -4.0 1.0 2.0 2.0 2.0 8.0 2.0 8.0 8.0 6.0 14.0 8.0 5.0 110 -227.0 -222.0 -223.0 -218.0 -219.0 -216.0 -215.0 -210.0 -209.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -191.0 -186.0 -187.0 -184.0 -181.0 -180.0 -177.0 -174.0 -171.0 -169.0 -168.0 -167.0 -166.0 -163.0 -159.0 -159.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -127.0 -124.0 -123.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -102.0 -101.0 -96.0 -91.0 -92.0 -89.0 -86.0 -87.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -49.0 -47.0 -42.0 -37.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -20.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 4.0 4.0 2.0 8.0 4.0 8.0 8.0 4.0 14.0 8.0 111 -228.0 -229.0 -222.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -203.0 -206.0 -201.0 -202.0 -199.0 -196.0 -195.0 -192.0 -191.0 -186.0 -187.0 -186.0 -183.0 -178.0 -179.0 -174.0 -173.0 -171.0 -170.0 -167.0 -164.0 -165.0 -161.0 -161.0 -160.0 -157.0 -154.0 -149.0 -146.0 -145.0 -144.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -129.0 -124.0 -121.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -100.0 -99.0 -96.0 -89.0 -90.0 -89.0 -86.0 -87.0 -80.0 -79.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -48.0 -45.0 -40.0 -35.0 -39.0 -39.0 -32.0 -27.0 -26.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -17.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 6.0 4.0 2.0 8.0 4.0 8.0 8.0 6.0 14.0 112 -233.0 -228.0 -227.0 -224.0 -227.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -197.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -170.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -157.0 -154.0 -151.0 -148.0 -145.0 -146.0 -139.0 -136.0 -135.0 -134.0 -133.0 -128.0 -127.0 -122.0 -121.0 -118.0 -113.0 -112.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -97.0 -94.0 -89.0 -90.0 -89.0 -86.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -46.0 -43.0 -40.0 -35.0 -40.0 -37.0 -32.0 -27.0 -24.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -15.0 -10.0 -11.0 -8.0 -5.0 -2.0 3.0 6.0 4.0 4.0 8.0 4.0 6.0 8.0 8.0 113 -234.0 -233.0 -228.0 -227.0 -224.0 -225.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -195.0 -192.0 -189.0 -188.0 -187.0 -182.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -168.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -133.0 -134.0 -133.0 -128.0 -125.0 -122.0 -121.0 -118.0 -113.0 -110.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -95.0 -92.0 -89.0 -90.0 -89.0 -86.0 -83.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -66.0 -61.0 -58.0 -55.0 -56.0 -55.0 -52.0 -52.0 -47.0 -44.0 -43.0 -40.0 -35.0 -38.0 -35.0 -30.0 -25.0 -22.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -13.0 -10.0 -11.0 -8.0 -3.0 0.0 3.0 6.0 4.0 4.0 8.0 6.0 6.0 8.0 114 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -199.0 -194.0 -197.0 -192.0 -189.0 -190.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -161.0 -158.0 -155.0 -152.0 -151.0 -150.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -131.0 -128.0 -125.0 -120.0 -119.0 -116.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -103.0 -98.0 -93.0 -92.0 -89.0 -90.0 -89.0 -84.0 -83.0 -80.0 -81.0 -78.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -54.0 -52.0 -50.0 -45.0 -42.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -23.0 -22.0 -25.0 -18.0 -19.0 -14.0 -17.0 -14.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 8.0 4.0 4.0 8.0 8.0 8.0 115 -238.0 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -194.0 -195.0 -192.0 -189.0 -188.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -159.0 -156.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -129.0 -128.0 -123.0 -120.0 -119.0 -114.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -101.0 -96.0 -93.0 -92.0 -89.0 -90.0 -87.0 -84.0 -83.0 -80.0 -81.0 -76.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -56.0 -52.0 -51.0 -48.0 -43.0 -42.0 -43.0 -40.0 -33.0 -34.0 -31.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 2.0 5.0 8.0 4.0 6.0 8.0 8.0 116 -241.0 -240.0 -235.0 -234.0 -235.0 -230.0 -229.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -210.0 -205.0 -206.0 -201.0 -200.0 -199.0 -194.0 -195.0 -194.0 -191.0 -190.0 -187.0 -184.0 -179.0 -177.0 -180.0 -175.0 -174.0 -171.0 -170.0 -171.0 -166.0 -165.0 -160.0 -159.0 -158.0 -155.0 -154.0 -151.0 -150.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -126.0 -125.0 -122.0 -119.0 -116.0 -111.0 -112.0 -109.0 -110.0 -103.0 -104.0 -101.0 -98.0 -95.0 -94.0 -89.0 -90.0 -87.0 -84.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -55.0 -50.0 -49.0 -46.0 -43.0 -42.0 -41.0 -38.0 -31.0 -32.0 -29.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -11.0 -6.0 -5.0 -4.0 1.0 2.0 5.0 8.0 4.0 8.0 8.0 117 -242.0 -243.0 -238.0 -235.0 -236.0 -233.0 -228.0 -231.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -212.0 -205.0 -208.0 -203.0 -200.0 -201.0 -194.0 -193.0 -192.0 -191.0 -190.0 -188.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -169.0 -168.0 -163.0 -158.0 -159.0 -160.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -124.0 -123.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -108.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -87.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -66.0 -63.0 -57.0 -55.0 -55.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -38.0 -31.0 -30.0 -31.0 -30.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -12.0 -11.0 -4.0 -5.0 -4.0 3.0 0.0 5.0 10.0 6.0 10.0 118 -243.0 -242.0 -241.0 -238.0 -235.0 -236.0 -231.0 -228.0 -229.0 -224.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -201.0 -194.0 -191.0 -192.0 -189.0 -189.0 -186.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -167.0 -166.0 -163.0 -158.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -143.0 -142.0 -139.0 -136.0 -131.0 -130.0 -129.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -106.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -64.0 -62.0 -57.0 -54.0 -53.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -36.0 -31.0 -30.0 -31.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -5.0 -2.0 3.0 0.0 5.0 10.0 8.0 119 -246.0 -243.0 -242.0 -241.0 -238.0 -235.0 -234.0 -231.0 -228.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -215.0 -212.0 -209.0 -210.0 -205.0 -206.0 -203.0 -200.0 -199.0 -194.0 -191.0 -190.0 -188.0 -187.0 -186.0 -185.0 -181.0 -177.0 -178.0 -177.0 -172.0 -171.0 -170.0 -167.0 -164.0 -163.0 -158.0 -159.0 -156.0 -153.0 -152.0 -147.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -128.0 -127.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -112.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -95.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -79.0 -80.0 -77.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -63.0 -60.0 -57.0 -54.0 -51.0 -48.0 -49.0 -46.0 -43.0 -40.0 -37.0 -34.0 -31.0 -30.0 -29.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -3.0 -2.0 3.0 2.0 7.0 12.0 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-5.html"},{"title":"混合ガウス分布のEMアルゴリズム","text":"クラスタリング で省略した、混合ガウス分布のEMアルゴリズムの計算過程を記述します。 EMアルゴリズム 観測データ \\(\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) に対する対数尤度関数は、 \\((9.7)\\) から以下のように書けます。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ E step $$\\begin{aligned} p(z_{k}=1|\\mathbf{x}) &\\equiv \\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{p(\\mathbf{x})}\\qquad (\\because\\text{Bayes' theorem})\\\\ &\\propto p(z_{k}=1)p(\\mathbf{x}|z_{k}=1) \\\\ &=\\pi_k\\mathcal{N}(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ なので、総和が \\(1\\) になるように正規化を行えば 負担率 が以下のように求まります。 $$\\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) =\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13)$$ ※ なお、この時分母である \\(\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})\\) が \\(p(\\mathbf{x})\\) であることは有用です。 （ 生物データマイニング論 第1回 では、これを用いて可視化していました。） Maximization step ※ 対数尤度関数 \\((9.14)\\) を \\(\\ln L\\) と記述します。 \\(\\boldsymbol{\\mu}_k\\) 対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\mu}_k\\) で微分します。この時 正規分布は \\(e&#94;{\\text{hoge}}\\) という形をしており、微分しても形が変わらないので、 $$\\begin{aligned} \\frac{\\partial\\ln L}{\\partial\\boldsymbol{\\mu}_k} &= \\sum_{i=n}&#94;N \\frac{\\pi_k\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= \\boldsymbol{\\Sigma}_k&#94;{-1}\\sum_{n=1}&#94;N \\gamma_{nk}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= 0\\\\ \\therefore\\boldsymbol{\\mu}_k&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.17)\\\\ \\end{aligned}$$ と最適解が求まりました。 \\(\\pi_k\\) パラメータ \\(\\pi_k\\) については、 \\(\\sum_{k=1}&#94;K \\pi_k = 1\\) という制約に注意する必要があります。ですが、 隠れマルコフモデルの最尤推定 で行なった能登同様に、ラグランジュの未定乗数 \\(\\lambda\\) を導入すればこの問題は解けます。 $$L_{\\lambda} = \\log L + \\lambda\\left(\\sum_{c=1}&#94;K \\pi_c - 1\\right)$$ の導関数が \\(0\\) となる条件を求める事になるので、 $$\\begin{aligned} \\frac{\\partial L_{\\lambda}}{\\partial\\pi_k} &= \\sum_{n=1}&#94;N \\frac{\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_k \\pi_k \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)} + \\lambda\\\\ &= \\sum_{n=1}&#94;N \\frac{\\gamma_{nk}}{\\pi_k} + \\lambda = 0 &\\therefore \\pi_k = -\\frac{1}{\\lambda}\\sum_{n=1}&#94;N \\gamma_{ic}\\\\ \\frac{\\partial L_{\\lambda}}{\\partial\\lambda} &= \\sum_{k=1}&#94;K \\pi_k - 1\\\\ &= \\left(-\\frac{1}{\\lambda}\\sum_{k=1}&#94;K\\sum_{n=1}&#94;N \\gamma_{nk}\\right) - 1 = 0 &\\therefore \\lambda = -n \\end{aligned}$$ より、 $$\\pi_k&#94;{\\star} = \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} \\qquad(9.22)$$ と最適解が求まりました。 \\(\\boldsymbol{\\Sigma}_k\\) \\(\\boldsymbol{\\mu}_k\\) と同様に、対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\Sigma}_k\\) で微分します。すると、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\log L = \\sum_{n=1}&#94;N\\frac{\\pi_k\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}$$ となります。ここで、 \\(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\) を計算すると、 $$\\begin{aligned} &\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\biggr)\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\left(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\right)\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(-\\frac{1}{2}\\biggr)|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\quad (\\ast1)\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\frac{1}{2}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\quad (\\ast2)\\\\ =&-\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)+\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{1}{2}\\left\\{\\boldsymbol{\\Sigma}_k&#94;{-1}-\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\right\\}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ したがって、 $$ \\boldsymbol{\\Sigma}_k&#94;{\\star}= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.19) $$ と最適解が求まりました。 ※ \\(\\ast1,\\ast2\\) の式変形は以下でより詳細に説明します。 が、その前にいくつか基本事項の定義を振り返ります。 行列式 $$\\det A=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)\\prod_{i=1}&#94;na_{i\\sigma(i)}=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)a_{1\\sigma(1)}a_{2\\sigma(2)}\\cdots a_{n\\sigma(n)}$$ \\(\\sigma\\) は \\(1\\) から \\(n\\) の置換（順列）を表す。 \\(\\mathrm{sgn}(\\sigma)\\) は置換の符号を表す。なお、\b置換の符号は 互\b換の数 に注目しており、奇置換（互換の数が奇数個）なら \\(-1\\) 、偶置換なら \\(+1\\) \b\b 余韻子 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\(i\\) 行と \\(i\\) 列を \\(1\\) つずつ取り去って作られる小行列を \\(M_{ij}\\) とする。つまり、 $$ M_{ij} = \\small \\left[ \\begin{array}{ccc} a_{11} & \\cdots &a_{1\\hspace{1mm}j-1} & a_{1\\hspace{1mm}j+1} & \\cdots & a_{1n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{i-1 \\hspace{1mm} 1} & \\cdots &a_{i-1\\hspace{1mm}j-1} & a_{i-1\\hspace{1mm}j+1} & \\cdots & a_{i-1 \\hspace{1mm}n} \\\\ a_{i+1 \\hspace{1mm} 1} & \\cdots &a_{i+1\\hspace{1mm}j-1} & a_{i+1\\hspace{1mm}j+1} & \\cdots & a_{i+1 \\hspace{1mm}n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{n1} &\\cdots &a_{n\\hspace{1mm}j-1} & a_{n\\hspace{1mm}j+1} &\\cdots &a_{nn} \\end{array} \\right] $$ です。ここで、 \\(\\Delta_{ij}=(-1)&#94;{i+j}|M_{ij}|\\) とすると、以下の 余因子展開 ができます。 \\(A\\) の行列式は \\(j\\) 列に関して、以下のように展開されます。 $$\\det A=\\Delta_{1j}a_{1j}+\\Delta_{2j}a_{2j}+\\cdots+\\Delta_{nj}a_{nj}$$ \\(A\\) の行列式は \\(i\\) 行に関して、以下のように展開されます。 $$\\det A=\\Delta_{i1}a_{i1}+\\Delta_{i2}a_{i2}+\\cdots+\\Delta_{in}a_{in}$$ \b 余韻子行列 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\((i, j)\\) 余因子を \\((j, i)\\) 成分に持つ行列 $$\\tilde{A} := \\begin{pmatrix}&\\Delta_{11}&\\Delta_{21}&\\cdots&\\Delta_{n1}\\\\&\\Delta_{21}&\\Delta_{22}&\\ldots&\\Delta_{n2}\\\\&\\vdots&\\vdots&\\ddots&\\vdots\\\\&\\Delta_{n1}&\\Delta_{n2}&\\cdots&\\Delta_{nn}\\end{pmatrix}$$ を 余韻子行列 と呼びます。ここで、余韻子展開を考えれば、余韻子行列に関して、 $$\\tilde{A}A=A\\tilde{A}=\\det(A)I_n$$ が成り立つことがわかります。 \\(\\ast1\\) の変形 以上を踏まえると、 \\(\\frac{\\partial\\det(A)}{\\partial a_{ij}} = \\Delta_{ij}\\) なので、 $$\\frac{\\partial|\\Sigma|}{\\partial\\Sigma} =\\tilde\\Sigma = |\\Sigma|\\Sigma&#94;{-1}$$ が成り立ち、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}} =-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-\\frac{3}{2}}\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\boldsymbol{\\Sigma_k}=-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma_k}&#94;{-1}$$ となることがわかります。 トレースと固有値の関係性 【命題】 トレースには、 \\(Tr(A) = \\sum_{k=1}&#94;{n}\\lambda_{k}\\) という関係がある。 トレース： \\(n\\times n\\) の正方行列 \\(A\\) に対して、\b対角成分の和 \\(\\sum_{k=1}&#94;{n}a_{kk}\\) を \\(A\\) のトレースと呼び、 \\(\\mathrm{Tr}(A),\\mathrm{tr}A\\) \b と表す。 【証明】 まず、固有方程式は、 $$\\phi(t) = |A-tI| = \\left|\\begin{array}{cccc} a_{11}-t & a_{12} & \\ldots & a_{1n} \\\\ a_{21} & a_{22}-t & \\ldots & a_{2n} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_{n1} & a_{n2} & \\ldots & a_{nn}-t \\end{array} \\right|$$ である。ここで、 \\(t\\) の係数に着目する。 \\(t&#94;n\\) の係数 これは、対角成分を全て掛け合わせた次の多項式 $$(a_{11}-t)(a_{22}-t)\\ldots(a_{nn}-t)$$ における \\(t&#94;n\\) の係数と等しくなる。よって、係数は「 \\((-1)&#94;n\\) 」 \\(t&#94;{n-1}\\) の係数 これも\b、先ほどの多項式の \\(t&#94;{n-1}\\) の係数と等しくなる。（ \\(\\because\\) 余韻子展開を考える。 \\(\\sigma\\) が全単射のため、１行（列）対角成分ではないものがあると、\b少なくともあと１つは体格成分でないものがあることがわかる。） 定数項 これは、\b余韻子展開を考えれば \\(|A|\\) そのもの。 よって、係数は「 \\((-1)&#94;{n-1}(a_{11}+a_{22}+\\ldots+a_{nn})\\) 」であり、これは対角和を用いて「 $(-1)&#94;{n-1}\\mathrm{Tr}(A) $ 」とも書ける。 一方先ほどの固有方程式は固有値を解に持つ。 つまり、 \\(A\\) の固有値を \\(\\lambda_1\\) 〜 \\(\\lambda_n\\) として、 $$\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)$$ とかける。（ \\((-1)&#94;n\\) によって、 \\(t&#94;n\\) の係数を合わせている。） この式を展開すると、 \\(t&#94;{n-1}\\) の係数が「 \\((-1)&#94;{n-1}(\\lambda_1+\\lambda_2+\\ldots+\\lambda_n)\\) 」であることから $$\\mathrm{Tr}(A) = \\lambda_1+\\lambda_2+\\ldots+\\lambda_n$$ ※ちなみに、 \\(\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)\\) の定数項を考えることで、 $$|A| = \\lambda_1\\lambda_2\\ldots\\lambda_n$$ であることもわかる。 トレースの循環性 \\(A\\) を \\(m \\times n\\) 、 \\(B\\) を \\(n \\times m\\) の行列とすると、 \\(AB\\) は \\(m \\times m\\) の行列であり、 $$ \\begin{aligned} \\mathrm{Tr}[AB]&= \\sum_{i=1}&#94;{m} (AB)_{ii} \\\\&= \\sum_{i=1}&#94;{m}\\sum_{j=1}&#94;{n} A_{ij}B_{ji} \\\\&= \\sum_{j=1}&#94;{n} \\sum_{i=1}&#94;{m} B_{ji} A_{ij} \\\\&= \\sum_{j=1}&#94;{n} (BA)_{jj} \\\\&= \\mathrm{Tr}[BA] \\end{aligned} $$ となる。これを応用すれば、以下の 循環性 が証明できる。 \\(A,B,C\\) をそれぞれ \\(m\\times n,n \\times l,l \\times m\\) の行列とするとき、 $$\\begin{aligned} \\mathrm{Tr}[ABC] =& \\mathrm{Tr}[BCA] \\\\=& \\mathrm{Tr}[CAB] \\end{aligned} $$ が成り立つ。（ \\(\\because\\) ２つの\b行列積をセットで考えれば明らか） 逆行列の微分 正則行列 \\(A\\) に対して、 \\(A&#94;{-1}A=I\\) が成立するので、\bこの等式の両辺を \\(A\\) で微分して、 $$\\begin{aligned} \\biggr(\\frac{\\partial }{\\partial A}A&#94;{-1}\\biggl)A + A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl) = 0\\\\ \\biggr(\\frac{\\partial A&#94;{-1}}{\\partial A}\\biggl) = -A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl)A&#94;{-1} \\end{aligned}$$ シングルエントリ行列 \\((i,j)\\) 成分のみが \\(1\\) で、残りが全て \\(0\\) の行列 \\(\\mathbf{J}&#94;{ij}\\) を シングルエントリ行列 と呼ぶ。なお、\b以下の式が成り立つ。 $$\\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{ij}\\bigl)=\\mathbf{A}_{ji}$$ \b \\(2 \\times 2\\) の行列でこれを示す。 $$\\begin{aligned} \\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{12}\\bigl)&=\\mathrm{Tr}\\biggr(\\begin{pmatrix}a_{11}&a_{12}\\\\a_{21}&a_{22}\\end{pmatrix}\\begin{pmatrix}0&1\\\\0&0\\end{pmatrix}\\biggl)\\\\ &=\\mathrm{Tr}\\begin{pmatrix}0&a_{11}\\\\0&a_{21}\\end{pmatrix}\\\\ &=a_{21}\\\\ &=\\mathbf{A}_{21} \\end{aligned}$$ \\(\\ast2\\) の変形 以上を踏まえれば、 $$\\begin{aligned} \\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu}) &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr((\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\biggl)\\\\ &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\frac{\\partial\\boldsymbol{\\Sigma}}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\biggl)\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ji}\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ij}\\\\ \\end{aligned}$$ よって、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})=-\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html"},{"title":"クラスタリング","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 講義の方針 データ解析アルゴリズムは、生物学の研究に不可欠 R や python のパッケージとして、すぐダウンロードして使うことができる。 しかし、原理を知らずに使うと、アルゴリズムの出す結果を盲信することになり危険。 正しい理解：結果を疑えるようになること。 階層的クラスタリング クラスタリング データ点を クラスタ（互いに類似したグループ） に分割する。 距離尺度：ユークリッド距離、コサイン距離など。 階層的クラスタリング 最初は各点がクラスタとなる。 二つのクラスタを選んで合併していく。 Single Link ：二つのクラスタをまたぐ最近点の距離 chaining により、ゆるいクラスタができる （非推奨） Complete Link ：二つのクラスタをまたぐ最遠点の距離 最も固いクラスタができるが、細かく分け過ぎる傾向がある。 Average Link ：二つのクラスタをまたぐ点対の平均距離 最もバランスがとれており、通常はこれを用いる。 最後は一つのクラスタになる。 デンドログラム ：合併の過程を樹形図の形で表したもの。 K-Means 分割的クラスタリング の一手法。$K$ クラスにデータ点を分割する。 以下を繰り返す。 各データ点 $\\mathbf{x}$ を最も近い中心点 $\\mu_k$ に割り当てて、クラスタ $c_1,\\ldots,c_K$ を作成する。 割当を元に中心点を計算しなおす。 $$\\mu_k = \\sum_{j\\in C_i} \\mathbf{x}_j$$ 実装 In [1]: import numpy as np import matplotlib.pyplot as plt Data. In [2]: np . random . seed ( 0 ) In [3]: N = 30 ; K = 5 vmin = 0 ; vmax = 1 In [4]: # Training Data. data = np . random . uniform ( vmin , vmax , ( N , 2 )) x , y = data . T In [5]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [6]: # Background Color Xs , Ys = np . meshgrid ( np . linspace ( vmin , vmax , 100 ), np . linspace ( vmin , vmax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.KMeans.KMeans ） を使って学習させます。 In [7]: from kerasy.ML.KMeans import KMeans In [8]: model = KMeans ( K = K , random_state = 0 ) In [9]: model . fit ( data ) Visualization. In [10]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [11]: # For Visualization. plt_model = KMeans ( K = K ) In [12]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( idx , mu ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Plot Representative points(µk) of each class. mux , muy = mu . T ax . scatter ( mux , muy , marker = 'x' , c = \"red\" , s = 200 ) # Background. plt_model . mu = mu Z , _ = plt_model . predict ( XYs ) Zs = Z . reshape ( Xs . shape ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( vmin , vmax ) ax . set_ylim ( vmin , vmax ) ax . set_title ( f \"Iteration. {i:>02} \" ) plt . show () 混合ガウス分布 混合ガウス分布は、次のように混合係数 $\\pi_k$ でガウス分布を線形重ね合わせした形でかける。 $$p(\\mathbf{x}) = \\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\qquad (9.7)$$ ここで、 二値ベクトル（1-of-K符号化法） $\\mathbf{z}$ の周辺分布は、$0\\leq\\pi_k\\leq1$ と $\\sum_{k=1}&#94;K\\pi_k = 1 $ を満たす $\\pi_k$ を用いて、 $$p\\left(\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\pi_k&#94;{z_k}\\qquad (9.9)$$ と書ける。また、$\\mathbf{z}$ が与えられた時の $\\mathbf{x}$ の事後分布は当然ながら次のガウス分布である。 $$p\\left(\\mathbf{x}|\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)&#94;{z_k}\\qquad(9.11)$$ EMアルゴリズム 観測データ $\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}$ に対する対数尤度関数は、$(9.7)$ から以下のように書ける。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ Expectation step M stepで必要となる $\\gamma(z_{nk})$ を求める。 この値は、$\\mathbf{x}$ が与えられた下での $\\mathbf{z}$ の条件付き確率であり、混合要素 $k$ が $\\mathbf{x}$ の観測を 「説明する」 度合いを表す 負担率(responsibility) として解釈することもできる。 $$ \\begin{aligned} \\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) &=\\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{\\sum_{j=1}&#94;{K}p(z_{j}=1)p(\\mathbf{x}|z_{j}=1)}\\\\ &=\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13) \\end{aligned} $$ Maximization step M stepでは、尤度関数を最大化するように各パラメータの値を更新する。 ※ 導出過程は 混合ガウス分布のEMアルゴリズム に載せています。 $$ \\begin{aligned} \\boldsymbol{\\mu}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.17)\\\\ \\boldsymbol{\\Sigma}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.19)\\\\ \\pi_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} & (9.22) \\end{aligned} $$ 実装 Data. In [13]: np . random . seed ( 0 ) In [14]: N = 150 ; K = 3 In [15]: # Train Data. data = np . concatenate ([ np . random . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 0 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [16]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [17]: # Background Color xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.MixedDistribution.MixedGaussian ） を使って学習させます。 In [18]: from kerasy.ML.MixedDistribution import MixedGaussian In [19]: model = MixedGaussian ( K = K , random_state = 1234 ) In [20]: model . fit ( data , span = 20 ) Visualization. In [21]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [22]: # For Visualization. plt_model = MixedGaussian ( K = K ) plt_model . N , plt_model . M = data . shape In [23]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( epoch , idx , mu , S , pi ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Background. plt_model . mu = mu plt_model . S = S plt_model . pi = pi Z = plt_model . predict ( XYs ) Zs = np . sum ( Z , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( xmin , xmax ) ax . set_ylim ( ymin , ymax ) ax . set_title ( f \" {epoch:>02} epochs.\" ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html"},{"title":"イントロダクション","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 講義予定 前半（山崎担当） 画像の操作 画像の特徴抽出・内容理解・構造化 機械学習一般 後半（相澤担当） 画像を撮る：カメラの内部処理・センサ・レンズ・標本化 画像を表現する。色の知覚・表現 画像の基礎的な処理。周波数変換、線形・非線形フィルタリング # 日付 担当 内容 1 9/30(月) 山崎 画像・映像を中心とした現在の技術動向の紹介、低次・領域・局所画像特徴 2 10/7(月) 山崎 特徴選択、特徴表現 3 10/21(月) 山崎 機械学習概論、教師なし学習、クラスタリング 4 10/28(月) 山崎 機械学習 (NN, SVM, RF) 5 11/7(木) 山崎 深層学習 (Deep Neural Networks) 6 11/11(月) 山崎 動画像処理 (ブロックマッチング、背景差分、オプティカルフロー) 7 11/13(水) 山崎 3次元空間情報の取得と処理 8 11/18(月) 相澤 デジタルカメラ系 9 11/25(月) 相澤 表色系 10 12/9(月) 相澤 フィルタリング・画像復元 11 12/16(月) 相澤 特徴抽出 12 12/23(月) 相澤 画像符号化 13 1/@@ テスト パターン認識一般 現在は、90%位が 学習ベース(data-driven) 。残りが解析的手法。最近はこのhybridも。 全体的な流れ 学習(training) 検証(validation)←パラメータ最適化 推論(test, inference) なぜ今 学習ベース なのか？ データの大規模化：インターネット上から大量に収集可。 計算機の進化：ムーアの法則による高速化。さらにはクラウド 労働力のクラウド化 画像特徴 低次特徴量 色ヒストグラム（RGB,HSV,L*a*b*）：単純計算すると \\(256&#94;3\\) 個binができるので、注意。 色共起ヒストグラム（Correlogram）：隣接ピクセルの色を踏まえたヒストグラム 円、コーナー直線の数・大きさ・長さ 物体の円度、曲率等 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html"},{"title":"matplotlibチートシート","text":"In [1]: import numpy as np import matplotlib.pyplot as plt $N$ 枚の画像を plot Vsize , Hsize = () # 画像の横の長さと縦の長さ。 n_fig = \"画像の枚数\" n_col = \"横に並ぶ数\" n_row = n_fig // n_col + 1 if n_fig % n_col != 0 else n_fig // n_col # 行数を計算。 fig = plt . figure ( figsize = ( Vsize * n_col , Hsize * n_row )) for i , hoge in enumerate ( HOGEs ): ax = fig . add_subplot ( row , col , i + 1 ) \"\"\" 描きたいオブジェクトをプロット \"\"\" plt . tight_layout () plt . show () gifの画像の作成 上のようにやって全ての画像をまとめた一枚の画像を出力しても良いが、 n_fig = \"画像の枚数\" digit = len ( str ( N )) for i , hoge in enumerate ( HOGEs ): ax = fig . add_subplot ( row , col , i + 1 ) plt . figure ( figsize = \"サイズ\" ) \"\"\" 描きたいオブジェクトをプロット \"\"\" plt . savefig ( f \"img{i:>0{digit}}.png\" ) として連番の画像を作成し、それを以下のプログラムでgif画像にした方が見やすい場合もある from PIL import Image N = 30 digit = len ( str ( N )) images = [] for i in range ( N ): img = Image . open ( f \"{i:>0{digit}}.png\" ) images . append ( img ) images [ 0 ] . save ( 'out.gif' , save_all = True , append_images = images [ 1 :], loop = 0 , duration = 300 ) # loop=0: 無限ループ # duration: 一枚あたりの表示時間[ms] cmaps In [2]: cmaps = [ 'Accent' , 'Blues' , 'BrBG' , 'BuGn' , 'BuPu' , 'CMRmap' , 'Dark2' , 'GnBu' , 'Greens' , 'Greys' , 'OrRd' , 'Oranges' , 'PRGn' , 'Paired' , 'Pastel1' , 'Pastel2' , 'PiYG' , 'PuBu' , 'PuBuGn' , 'PuOr' , 'PuRd' , 'Purples' , 'RdBu' , 'RdGy' , 'RdPu' , 'RdYlBu' , 'RdYlGn' , 'Reds' , 'Set1' , 'Set2' , 'Set3' , 'Spectral' , 'Wistia' , 'YlGn' , 'YlGnBu' , 'YlOrBr' , 'YlOrRd' , 'afmhot' , 'autumn' , 'binary' , 'bone' , 'brg' , 'bwr' , 'cividis' , 'cool' , 'coolwarm' , 'copper' , 'cubehelix' , 'flag' , 'gist_earth' , 'gist_gray' , 'gist_heat' , 'gist_ncar' , 'gist_rainbow' , 'gist_stern' , 'gist_yarg' , 'gnuplot' , 'gnuplot2' , 'gray' , 'hot' , 'hsv' , 'inferno' , 'jet' , 'magma' , 'nipy_spectral' , 'ocean' , 'pink' , 'plasma' , 'prism' , 'rainbow' , 'seismic' , 'spring' , 'summer' , 'tab10' , 'tab20' , 'tab20b' , 'tab20c' , 'terrain' , 'viridis' , 'winter' ] In [3]: matrix = np . arange ( 100 ) . reshape ( 10 , 10 ) In [4]: Vsize , Hsize = ( 4 , 4 ) n_fig = len ( cmaps ) n_col = 4 n_row = n_fig // n_col + 1 if n_fig % n_col != 0 else n_fig//n_col In [5]: fig = plt . figure ( figsize = ( Vsize * n_col , Hsize * n_row )) for i , cmap in enumerate ( cmaps ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) ax . matshow ( matrix , cmap = cmap ) ax . set_title ( f \"↓ {cmap} ↓\" , fontsize = 24 ), ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-0.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-0.html"},{"title":"生物物理学 第1回","text":"講師： 能瀬聡直 講義資料： 生物物理学 参考書： 神経科学 -脳の探求- 参考書： ニューロンの生物物理 講義概要 生物物理学とは 遺伝情報の流れ 蛋白質の構造と機能 細胞内タンパク質のダイナミックス 遺伝子操作技術 ゲノム科学とバイオインフォマティックス バイオイメージング、生体分子計測 脳・神経系の生物物理 講義日程 # 日付 担当 1 9/25 能瀬 2 10/2 樋口 3 10/9 樋口 4 10/16 樋口 5 10/23 樋口 6 10/30 樋口 7 11/6 樋口 8 11/20 能瀬 9 11/27 能瀬 10 12/4 樋口 11 12/11 能瀬 12 12/18 能瀬 13 1/8 能瀬 14 1/15 能瀬 生物物理学とは？ 物理の手法で生物を見る。 生体分子の機能や構造の研究。 対象は広範囲、ただし物理的理念を背景にもつ。 生体高分子の構造・機能、脳・神経機構など単なる記述中心の従来の生物学と異なり、論理的な思考法を用い、より普遍的な原理を見いだすことを目指している。 生物物理の代表的発見 DNA二重螺旋構造の発見（1953年、1962年ノーベル生理医学賞） 蛋白質の高次構造の解析（1960年、1962年ノーベル化学賞） 神経活動のイオン機構の解明（1953年、1963年ノーベル生理医学賞） 最近の技術革新 ヒトゲノム計画 ヒトの全遺伝子の設計図解読の終了（2000年） イメージング技術 蛍光蛋白質・レーザー顕微鏡（1990年代） 1分子観測・1分子操作 溶液中での蛋白質1分子の観察（1990年代） 神経回路の作動原理の解明に向けた従来の3つのアプローチ 解剖学(Anatomy) 神経の配線を明らかにする。 生理学(Physiology) 神経活動を測定・操作する。 理論 神経活動パターンから原理を抽出 Part1. Introduction 脳神経系における情報の流れ ニューロンの構成 脳とコンピューター 半導体 ↔︎ 半導体素子 ↔︎ 集積回路 ↔︎ コンピューター 分子 ↔︎ 神経細胞 グリア細胞 ↔︎ 神経回路 ↔︎ 脳 活動電位の特徴 全か無か： \\(\\mathrm{Na}\\) チャネル活性化に閾値がある。 一過性： \\(\\mathrm{Na}\\) チャネル不活性化 確実に伝播 一体、どのような構造を持った神経回路の中を、どのように信号が伝わることで特定の演算が創発されるのか。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html"},{"title":"HMMをpythonで実装","text":"（kerasy.ML.HMM.HMM） の使い方 自作のモジュール （kerasy.ML.HMM.HMM） を使って実装をします。 In [1]: from kerasy.ML.HMM import HMM In [2]: model = HMM () In [3]: # 以下のようなパラメタファイルを読み込む。 ! cat params.json { \"M\": 4, \"K\": 4, \"basetypes\": [\"a\", \"c\", \"g\", \"u\"], \"pi\": [0.7, 0.1, 0.1, 0.1], \"A\": [[0.8, 0.1, 0.1, 0.0], [0.0, 0.8, 0.1, 0.1], [0.1, 0.0, 0.8, 0.1], [0.1, 0.0, 0.1, 0.8]], \"phi\": [[0.4, 0.1, 0.1, 0.4], [0.25, 0.25, 0.25, 0.25], [0.1, 0.4, 0.4, 0.1], [0.3, 0.2, 0.2, 0.3]] } In [4]: model . load_params ( \"params.json\" ) In [5]: # インスタンスに読み込まれた各種パラメータ model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 In [6]: # なお、この時以下のような辞書を同時に作成しています。 print ( model . base2int ) print ( model . int2base ) {'a': 0, 'c': 1, 'g': 2, 'u': 3} {0: 'a', 1: 'c', 2: 'g', 3: 'u'} In [7]: # また、パラメータはnumpyの行列の形で読み込まれています。 print ( type ( model . pi )) print ( type ( model . A )) print ( type ( model . phi )) In [8]: # 以下のようにすれば、学習したパラメタを同じ形式で出力することができます。 model . save_params ( \"out.json\" ) Viterbi algorithm HMMのViterbiアルゴリズムを実装して、尤もらしいサンプル配列の隠れ状態列を推定します。 In [9]: from kerasy.utils.bio import alignStr , readMonoSeq , readMultiSeq # ファイルの中身 cat seq1.fasta ``` sample-RNA gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc ``` In [10]: # ファイルの読み込み seq1 = readMonoSeq ( 'seq1.fasta' ) print ( f \"Input Sequence: \\n {alignStr(seq1[0])}\" ) Input Sequence: gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc In [11]: # この時、文字列をリストに格納しています。 print ( type ( seq1 )) In [12]: pred1 = model . predict ( sequences = seq1 , asai = True ) In [13]: # 変数asaiは、隠れ状態がZero-based numberingかどうかを決めるものであり、特に意味はありません。（課題の形式に対応したものがasai=True.） print ( f \"Hidden Indexes: \\n {alignStr(pred1[0])}\" ) Hidden Indexesn [14]: # もちろんパラメタの更新は行われていません。 model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 Baum-Welch algorithm HMMのBaum-Welchアルゴリズムを実装して、モデルを学習させてます。 In [15]: model = HMM () model . load_params ( \"params2.json\" ) model . params () # 文字が \"acgu\"→\"ACGT\"に変わっただけです。 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.4000 0.2500 0.1000 0.3000 C 0.1000 0.2500 0.4000 0.2000 G 0.1000 0.2500 0.4000 0.2000 T 0.4000 0.2500 0.1000 0.3000 cat seq2.txt ``` >Vitis_vinifera_chr14.trna15-AlaAGC (28776087-28776159) Ala (AGC) 73 bp Sc: 68.12 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAGGTACGGGGATCGATA CCCCGCATCTCCA >Vitis_vinifera_chr13.trna5-ArgCCG (2691241-2691313) Arg (CCG) 73 bp Sc: 83.85 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAGGTCGTGGGTTCGAAT CCCACTGCGATCG >Vitis_vinifera_chr3.trna6-GlnCTG (5807449-5807520) Gln (CTG) 72 bp Sc: 71.93 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTAACCCGAGTTCAAATC TCGGTGGGACCT >Vitis_vinifera_chr14.trna19-LeuAAG (25640120-25640040) Leu (AAG) 81 bp Sc: 62.71 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTGTCCGAAAGGGCGTGG GTTCAAATCCCACTCTCCACA >Vitis_vinifera_chr18.trna9-MetCAT (2896034-2896118) Met (CAT) 85 bp Sc: 60.66 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCGAGTAATCCTGAGGTC GAGAGTTCGAGCCTCTCTCACCCCA >Vitis_vinifera_chr3.trna30-ProTGG (7498415-7498344) Pro (TGG) 72 bp Sc: 68.98 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGGTCCCGAGTTCGATTC TCGGAATGACCC >Vitis_vinifera_chr5.trna13-GluTTC (21745120-21745048) Glu (TTC) 73 bp Sc: 36.67 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTGGTCGTGGGTTCGAGC CCTATTGGTGGTT >Vitis_vinifera_chr5.trna3-TyrGTA (7422575-7422666) Tyr (GTA) 92 bp Sc: 33.68 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTGACCCAATAGATATCC TTAGGTCGTTAGTTTGAATCCAACAGGTCTAA >Vitis_vinifera_chr1.trna8-ValCAC (11396083-11396156) Val (CAC) 74 bp Sc: 66.86 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGAGGTCCCTAGTTCGAA CCCAGGCTCAGATA >Vitis_vinifera_chr14.trna2-SerTGA (4021381-4021462) Ser (TGA) 82 bp Sc: 80.82 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTGGGCTTCGCCCGCGCA GGTTCGAACCCTGCTGTCGACG ``` In [16]: seq2 = readMultiSeq ( 'seq2.txt' ) In [17]: for i , seq in enumerate ( seq2 ): print ( f \"No. {i:>02} \\n {alignStr(seq, width=45)}\" ) No.00 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAG GTACGGGGATCGATACCCCGCATCTCCA No.01 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAG GTCGTGGGTTCGAATCCCACTGCGATCG No.02 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTA ACCCGAGTTCAAATCTCGGTGGGACCT No.03 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTG TCCGAAAGGGCGTGGGTTCAAATCCCACTCTCCACA No.04 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCG AGTAATCCTGAGGTCGAGAGTTCGAGCCTCTCTCACCCCA No.05 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGG TCCCGAGTTCGATTCTCGGAATGACCC No.06 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTG GTCGTGGGTTCGAGCCCTATTGGTGGTT No.07 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTG ACCCAATAGATATCCTTAGGTCGTTAGTTTGAATCCAACAGGTCT AA No.08 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGA GGTCCCTAGTTCGAACCCAGGCTCAGATA No.09 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTG GGCTTCGCCCGCGCAGGTTCGAACCCTGCTGTCGACG In [18]: # 学習させる。 model . fit ( sequences = seq2 , epochs = 2000 , verbose = False ) In [19]: import matplotlib.pyplot as plt In [20]: def plotHistory ( model ): \"\"\" 学習の過程をプロットする関数 \"\"\" plt . plot ( model . history ) plt . title ( f \"Mean Log Likelihood Transition (eoochs= {model.epoch} )\" ) plt . xlabel ( \"epochs\" ) plt . ylabel ( \"Mean Log Likelihood\" ) plt . show () In [21]: plotHistory ( model ) In [22]: model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.1024 0.0000 0.8976 0.0000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.2819 0.7181 0.0000 0.0000 z(2) 0.0000 0.5670 0.0000 0.4330 z(3) 0.0521 0.0000 0.3415 0.6064 z(4) 0.5158 0.0000 0.0000 0.4842 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.3436 0.3099 0.1059 0.0055 C 0.2538 0.0592 0.0970 0.4297 G 0.4026 0.4418 0.7971 0.0345 T 0.0000 0.1891 0.0000 0.5304 ※ 隠れ状態ごとにかなり偏った遷移を行なう。 また、 遷移行列の対角成分がそこまで大きい値では無い。 → 特定の構造が、 ある程度の長さのゆとりを持って 繰り返されていると予想される。 In [23]: pred2 = model . predict ( sequences = seq2 , asai = True ) In [24]: for i , pred in enumerate ( pred2 ): print ( f \"No. {i:>02} Hidden Indexes: \\n {alignStr(pred, width=45)}\" ) No.00 Hidden Indexes: 333334122244412241241222224412444124122412222 2411222224412224441241244441 No.01 Hidden Indexes: 334411241241222412241241124412244441224441222 2412412244412244412441122441 No.02 Hidden Indexes: 334441241244412412441222412412244441224441241 244412244412244441241222444 No.03 Hidden Indexes: 341222241244122441244412222244122441222444441 244122222241222244412244412444441241 No.04 Hidden Indexes: 333341241241122441244124112412244412412444441 2241244441222441222244412244444441244441 No.05 Hidden Indexes: 333412441244412412412224444124444122224122222 444412244412444441222412444 No.06 Hidden Indexes: 334441241244412441244122411222244444124444122 2412412244412244441241241244 No.07 Hidden Indexes: 341244441244412441241222412222241241241222441 244412412241244441224124412444122444124122444 12 No.08 Hidden Indexes: 344412241241222441244124112441244412411244122 22444441244412244412244412241 No.09 Hidden Indexes: 344124122444122412441222222412244412224441241 2244412444112412244412244441122441241 補足：上記プログラムにバグがないかの確認 Baum-Welchアルゴリズムが正しく実装できていたか、極端な配列を学習させることで確認します。 In [25]: model = HMM () model . load_params ( \"params3.json\" ) model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 0.7000 0.1000 0.2000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.8000 0.1000 0.1000 z(2) 0.1000 0.8000 0.1000 z(3) 0.1000 0.1000 0.1000 ------------------------------ *emission probability z(1) z(2) z(3) A 0.4000 0.2500 0.1000 C 0.1000 0.2500 0.4000 G 0.1000 0.2500 0.4000 T 0.4000 0.2500 0.1000 In [26]: seq_extreme = readMonoSeq ( 'seq3.txt' ) In [27]: # かなり極端な配列の例で実装してみる。 print ( f \"Input Sequence: \\n {alignStr(seq_extreme[0])}\" ) Input Sequence: TCTTTTTCCTCCTCTCTCCTTTCCCTCTTTTCCCTTCTTCTCTCCCTTTTCCTTCTCTTC TCTCTTTTCTTCCCCTTTTCCTTTTCTCCTCCCTCCCTTTCTTCCCTCCTTCCTCCCCCC CTCCCCTTTCCTTCCTTTCTCCTTCTCCCCATATGGCCATTTACTTCAGCTGATAGACAC CGAGTAACAACAATAAAGCGTTAGGTGGACGAATGCTCTACTCTGACCTCTAGCTTGTGG GTTCGCGGCTTGCCGAACGCTGGCCTCTGCCCGTCGAACCAATAAATGTTTATCCAGGAC ACCCCGTTCTTTGGTGATATCCCTCGCTCGAGTTATAGCATTGAAACCTCCATATCCGGC GATAAGAGCTACGGACCGTATACTGGGCGCCGGTAATTGGTTGCACTCGCCCTCGGTCTT TTTCTTTTTGGTTTAGCAGAGCAAGGCGTGGAAAAGGAGAGAGGGAGAAAAGGGAAAGGG AAAAGAGGAGAAGAAAGAAAAAGGAAGGGGGGAAGAGGAGAGAAGGGAAGGGAAGGGGGA GAAAGAGGGAAAGAGGAGAAAAAAGGAGGGGGAAGAAGGAAGGGGGAAAGGGGGGGAAAG 上の配列は、以下の構造を持っていることがわかります。 index type 1~150 pyrimidine base 151~450 both 451~600 purine base In [28]: model . fit ( sequences = seq_extreme , epochs = 100 , verbose = False ) In [29]: plotHistory ( model ) In [30]: model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 1.0000 0.0000 0.0000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.9933 0.0000 0.0067 z(2) 0.0000 1.0000 0.0000 z(3) 0.0000 0.0033 0.9967 ------------------------------ *emission probability z(1) z(2) z(3) A 0.0000 0.4851 0.2199 C 0.5034 0.0000 0.2627 G 0.0000 0.5149 0.2415 T 0.4966 0.0000 0.2760 In [31]: pred_extreme = model . predict ( sequences = seq_extreme ) In [32]: print ( f \"Hidden Indexes: \\n {alignStr(pred_extreme[0])}\" ) Hidden Indexes: 111111111111111111111111111111111111111111111111111111111111 111111111111111111111111111111111111111111111111111111111111 111111111111111111111111111111333333333333333333333333333333 333333333333333333333333333333333333333333333333333333333333 333333333333333333333333333333333333333333333333333333333333 333333333333333333333333333333333333333333333333333333333333 333333333333333333333333333333333333333333333333333333333333 333333333333333333333333333332222222222222222222222222222222 222222222222222222222222222222222222222222222222222222222222 222222222222222222222222222222222222222222222222222222222222 うまく傾向をつかんでいることから、学習アルゴリズムに大きな誤りはなさそうです。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-4.html"},{"title":"生物統計論 第1回","text":"講師： 木立尚孝 講義概要 09/27 (Fri) 10:25-12:10 10/04 (Fri) 10:25-12:10 10/11 (Fri) 10:25-12:10 10/18 (Fri) 10:25-12:10 10/25 (Fri) 10:25-12:10 11/08 (Fri) 10:25-12:10 11/15 (Fri) 10:25-11:30(Lecture) / 11:30-12:10: (Test) Section1.1 STATISTICAL ANALYSIS Genomic data has recently become available, so the analyzing methods still its infancy at the century scale. It is very important how much information can be extracted from genomic and other omic data. Data-driven Research Development of measurement, communication, computing technologies. data science, e-science Statistics, computer skill, artificial intelligence, machine learning. Statistical Analysis Subjects and measurements are often conclude the random events , such as noise. Aiming for finding the \"True\" distribution, and inferencing on that distribution. Power of Statistical Methods Amount of information we can extract \"Many and high\" / \"Few or low\" quality Event infinite number of data cannot answer all questions. ex) we couldn't answer \"what is the number of eyes on the next dice.\" Data dependency. Section1.2 PROBABILITY DEFINITIONS Probability: Mathematical Probability: The probability of an event consisting of n out of m possible equally likely occurrences, defined to be n / m Statistical Probability: Each event is random, but if you repeat it a lot, you can see the probability that each event occurs. Subjective Probability: A type of probability derived from an individual's personal judgment or own experience about whether a specific outcome is likely to occur. ※ Mathematical Probability is the most strict and basic. Probability space \\(\\left(\\Omega, E, P\\right)\\) $$\\begin{aligned}&\\Omega: \\text{Set, Samplemspace}\\\\&E: \\text{Events,}\\sigma\\text{-algebra}\\\\&P: \\text{Probability measure}\\end{aligned}$$ Sample Space The sets of elementary events. ex.) The number of eyes on the dice. All possible genomes. All possible gene expression profiles \\(\\omega_i\\in\\Omega\\) is the identifier of possible individual stochastic phenomena. \\(\\sigma\\) -algebra $$ \\begin{aligned} &\\varepsilon= \\left\\{E_1,E_2,\\cdots|E_i\\subseteq\\Omega:\\text{event}:\\sigma\\text{-algebra} \\right\\}\\\\ &\\Rightarrow \\varnothing,\\Omega,\\left(E_i\\setminus E_j\\right),\\left(\\bigcup_{i=1}&#94;{\\infty}E_i\\right),\\left(\\bigcap_{i=1}&#94;{\\infty}E_i\\right)\\in\\varepsilon \\end{aligned} $$ The sets of Events. Each event \\(E_i\\subseteq\\Omega\\) Include Empty set \\(\\varnothing\\) , universal set \\(\\Omega\\) Closure to variable \"Set Operation\". (ex. Union, intersection, complement) example) discrete set Real set Power set Borel set \\(\\mathcal{A}\\) Probability measure $$\\begin{aligned}&\\mathbb{P} : \\mathcal{E} \\rightarrow \\mathbb{R} \\\\& 0 \\leq \\mathbb{P}(E) \\leq 1, E \\in \\mathcal{E} \\\\&\\mathbb{P}(\\Omega)=1, \\mathbb{P}(\\varnothing)=0 \\\\&\\text { For } E_{1}, E_{2}, \\cdots \\in \\mathcal{E}, \\text{ s.t. } E_{i} \\cap E_{j}=\\varnothing, \\forall i \\neq j \\\\&\\mathbb{P}\\left(\\bigcup_{i=1}&#94;{\\infty} E_{i}\\right)=\\sum_{i=1}&#94;{\\infty} \\mathbb{P}\\left(E_{i}\\right)\\end{aligned}$$ Each event is assigned a value that indicates the likelihood or probability of occurrence. Random variable $$\\begin{aligned}X: &\\text{random variable}\\\\\\Leftrightarrow &X : \\Omega \\rightarrow \\mathbb{R} \\\\ &\\text { s.t. } X&#94;{-1}(A) \\in \\mathcal{E}, \\forall A \\in \\mathcal{A} \\\\&X&#94;{-1}(A) :=\\{\\omega \\in \\Omega \\mid X(\\omega) \\in A\\}\\end{aligned}$$ Section1.3 PROBABILITY TERMS AND PROPERTIES Probability distribution function \\(F_x\\) (cumulative distribution) Probability density function \\(f_x\\) $$F_x\\left(x+dx\\right)-F_x\\left(x\\right)=:f_x(x)dx$$ Conditional Probability Joint Probability distribution $$(X,Y): \\Omega\\rightarrow\\mathbb{R}&#94;2; (X,Y)(\\omega) = \\left(X(\\omega),Y(\\omega)\\right)\\\\\\left(X,Y\\right)&#94;{-1}(A) = \\left\\{\\omega\\in\\Omega|\\left(X(\\omega),Y(\\omega)\\right)\\in A\\right\\}$$ Independent random variables Expected Value Variance Covariance: $$\\begin{cases}X,Y: \\text{independent random variables}\\Rightarrow \\mathrm{Cov}(X,Y) = 0\\\\X,Y: \\text{independent random variables}\\not\\Leftarrow \\mathrm{Cov}(X,Y) = 0 \\end{cases}$$ Indicator Function: $$\\mathbb{I}_A(x)=\\begin{cases}1 & x\\in A\\\\0 & x\\notin A\\end{cases},A\\in\\mathcal{A}$$ Marginalization Section1.4 PROBABILITY DISTRIBUTIONS Look Here!! if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html"},{"title":"生物統計論 第0回","text":"Section1.4 PROBABILITY DISTRIBUTIONS In [1]: import numpy as np import collections import matplotlib.pyplot as plt In [2]: N = 100000 Bernoulli Distribution In [3]: def BernoulliVar ( q , N , seed = None ): rng = np . random . RandomState ( seed ) if seed is not None else np . random return np . var ( rng . rand ( N ) < q ) In [4]: qs = np . linspace ( 0 , 1 , 1000 ) In [5]: probs = [ BernoulliVar ( q , N ) for q in qs ] In [6]: plt . title ( \"Bernoulli distribution\" ) plt . plot ( qs , probs , label = \"$Var(X)$\" ) plt . xlabel ( \"q\" ) plt . ylabel ( \"$Var(X)$\" ) plt . legend () plt . show () Binomial Distribution In [7]: def BinomialProb ( n , p , N , seed = None , color = None , ax = None ): if ax == None : fig , ax = plt . subplots () rng = np . random . RandomState ( seed ) if seed is not None else np . random counter = collections . Counter ( rng . binomial ( n , p , N )) count , freqs = zip ( * sorted ( counter . most_common ())) probs = [ freq / N for freq in freqs ] ax . plot ( count , probs , color = color , label = f \"p= {p} and n= {n} \" ) ax . scatter ( count , probs , color = color ) return ax In [8]: ax = BinomialProb ( 20 , 0.5 , N , seed = 0 , color = \"blue\" ) ax = BinomialProb ( 20 , 0.7 , N , seed = 0 , color = \"green\" , ax = ax ) ax = BinomialProb ( 40 , 0.5 , N , seed = 0 , color = \"red\" , ax = ax ) plt . legend () plt . show () Normal Distribution In [9]: from scipy import stats In [10]: def NormalProb ( mu , sigma ): X = np . arange ( mu - 3.5 * sigma , mu + 3.5 * sigma , sigma / 50 ) Y = stats . norm . pdf ( X , mu , sigma ) for i in np . arange ( - 3 , 4 , 1 ): idx = np . argmin ( abs ( X - ( mu + i * sigma ))) plt . plot ([ X [ idx ], X [ idx ]], [ 0 , Y [ idx ]], 'k-' ) plt . scatter ( X [ idx ], Y [ idx ], color = \"black\" ) plt . plot ( X , Y , color = \"black\" ) In [11]: NormalProb ( mu = 0 , sigma = 0.1 ) Multivariate Normal Distribution In [12]: from scipy.stats import multivariate_normal In [13]: x , y = np . mgrid [ - 3 : 3.5 : . 01 , - 3 : 3 : . 01 ] pos = np . dstack (( x , y )) rv = multivariate_normal ([ 0.5 , - 0.2 ], [[ 2.0 , 2.3 ], [ 0.3 , 0.8 ]]) plt . contourf ( x , y , rv . pdf ( pos )) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html"},{"title":"HMMのスケーリング","text":"HMMを実装する際に課題となるのが、forward-algorithm で \\(\\alpha\\) を再帰的に求める際に、 \\(\\alpha\\left(\\mathbf{z}_{n-1}\\right)\\) に \\(p(\\mathbf{z}_n|\\mathbf{z}_{n-1})\\) と \\(p(\\mathbf{x}_n|\\mathbf{z}_n)\\) をかけるため、値が非常に小さくなり、計算機の ダイナミックレンジ を超えてしまうことです。 そこで、ここでは \\(\\alpha\\left(\\mathbf{z}_{n}\\right)\\) と \\(\\beta\\left(\\mathbf{z}_{n}\\right)\\) にスケーリングを施し、それらの値が \\(1\\) のオーダーに止まるようにする手法を説明します。 forward-backward \\(\\alpha,\\beta\\) forward-backward algorithm で用いられていた \\(\\alpha,\\beta\\) は以下のように定義されていました。 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ Scaling factors まず、スケーリングされた \\(\\alpha,\\beta\\) は以下のように表されます。スケーリングによって、 \\(\\alpha\\) は高々 \\(K\\) 個の変数上の確率分布 、 \\(\\beta\\) は2つの条件付き確率の比 になることがわかります。 $$ \\begin{aligned} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.55)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\frac{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)}=\\frac{\\beta\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.61) \\end{aligned} $$ ここで、これらと \\(\\alpha,\\beta\\) を関連付けるためのスケーリング係数 \\(c\\) を導入します。 $$ c_{n}=p\\left(\\mathbf{x}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}\\right)\\qquad (13.56) $$ すると、 $$ \\begin{aligned} p\\left(\\mathbf{x}_1,\\ldots,\\mathbf{x}_n\\right) &= p\\left(\\mathbf{x}_n | \\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\cdots p\\left(\\mathbf{x}_3 | \\mathbf{x}_1,\\mathbf{x}_{2}\\right)p\\left(\\mathbf{x}_2 | \\mathbf{x}_1\\right)p(\\mathbf{x}_1)\\\\ &= c_n\\cdots c_3c_2c_1\\\\ &= \\prod_{m=1}&#94;{n} c_{m} \\end{aligned}\\qquad (13.58) $$ と展開することができるので、 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\left(\\prod_{m=1}&#94;{n} c_{m}\\right) \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) & (13.58)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)\\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) = \\left(\\prod_{m=n+1}&#94;{N} c_{m}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.60) \\end{aligned} $$ と対応関係がわかります。 \\(\\gamma,\\xi\\) 続いて、 \\(\\gamma,\\xi\\) と \\(\\widehat{\\alpha},\\widehat{\\beta}\\) の対応関係を求めます。 \\(\\alpha,\\beta\\) \\(\\alpha,\\beta\\) を用いると、以下のように表されていました。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} &(13.43) \\end{aligned}$$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) 先の対応関係を用いれば、 \\(\\widehat{\\alpha},\\widehat{\\beta}\\) を用いると、 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=\\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.64)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\left(c_{n}\\right)&#94;{-1} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.65) \\end{aligned} $$ と表されることがわかります。 Recursion 最後に、再帰式の対応関係も求めます。 \\(\\alpha,\\beta\\) $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) $$ \\begin{aligned} c_{n} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.58)\\\\ \\widehat{\\alpha}\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{z}_{1}| \\mathbf{x}_{1}\\right)=\\frac{p\\left(\\mathbf{z}_{1}\\right)p\\left(\\mathbf{x}_{1}| \\mathbf{z}_{1}\\right)}{p\\left(\\mathbf{x}_{1}\\right)} = \\frac{\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}}}{p\\left(\\mathbf{x}_{1}\\right)}\\\\ c_{n+1} \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\widehat{\\beta}\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) &(13.62)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)}{\\widehat{\\alpha}\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)}{p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} = 1 & (13.30) \\end{aligned} $$ なお、ここで \\((13.58)\\) でどのようにして \\(c_n\\) を求めるかですが、 $$ \\begin{aligned} \\mathrm{R.H.S}\\ (13.58) &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}}p\\left(\\mathbf{z}_{n-1}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\\\ &=p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) \\end{aligned} $$ となることから、 \\((13.58)\\) の右辺を \\(\\mathbf{z}_n\\) について周辺化すれば、 $$\\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = p\\left(\\mathbf{x}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = c_n$$ となるので、 \\(c_n\\) が求められることがわかります。 おまけ（尤度関数） 尤度関数はスケーリング係数 \\(c\\) を用いるだけで簡単に求められることがわかります。 $$p(\\mathbf{X})=\\prod_{n=1}&#94;{N} c_{n}\\qquad (13.63)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-3.html"},{"title":"HMMの最尤推定の計算過程","text":"ここでは、 HMMの最尤推定 で省略した計算過程について記述します。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) $$ \\begin{aligned} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})&=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10)\\\\ &=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\left[ \\prod_{n=2}&#94;{N}\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}} \\right] \\prod_{m=1}&#94;{N}\\prod_{i=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{i k}&#94;{x_{ni} z_{nk}}\\\\ \\therefore\\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta}) &=\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k\\left[\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk}\\right]\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;Kx_{ni}z_{nk}\\ln\\phi_{ik} \\end{aligned} $$ であるから、これを \\((13.12)\\) に代入して、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=&\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12)\\\\ =& \\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;Kx_{ni}z_{nk}\\ln\\phi_{ik} \\end{aligned} $$ ここで、 \\(\\sum_{\\mathbf{Z}} = \\sum_{\\mathbf{z_1},\\mathbf{z_2},\\ldots,\\mathbf{z_N}}\\) なので、それぞれ 関係の無い部分を周辺化 でき、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\sum_{\\mathbf{z_1}} p\\left(\\mathbf{z_1} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{1k}\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\sum_{\\mathbf{z_{n-1},z_n}}p\\left(\\mathbf{z_{n-1},z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;K\\sum_{\\mathbf{z_n}}p\\left(\\mathbf{z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)x_{ni}z_{nk}\\ln\\phi_{ik}\\\\ \\end{aligned}$$ となります。また、 \\(\\gamma,\\xi\\) の定義 を用いることで $$\\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_1}} \\gamma\\left(\\mathbf{z}_1\\right)z_{1k}\\right)\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\left(\\sum_{\\mathbf{z_{n-1},z_n}}\\xi\\left(\\mathbf{z_{n-1},z_{n}}\\right) z_{n-1,j}z_{nk}\\right)\\ln A_{jk}\\\\ &+\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_n}}\\gamma\\left(\\mathbf{z}_n\\right)x_{ni}z_{nk}\\right)\\ln\\phi_{ik} \\end{aligned} $$ と書き直せます。この時、潜在変数が離散なので、 \\(\\gamma,\\xi\\) はそれぞれ和が \\(1\\) となる \\(K,\\left(K\\times K\\right)\\) 個の非負の数の集合を用いて以下のように記述できます。 $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ したがって、これらを用いて上記の式を書き直すと、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} \\end{aligned}\\qquad (13.17) $$ Maximization step ここでは、上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) 関数を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化する際の ラグランジュの未定乗数法 を書き下します。 \\(\\boldsymbol{\\pi}\\) $$ \\begin{aligned} L\\left(\\boldsymbol{\\pi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) &= \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k} + \\lambda_1\\left(\\sum_{k=1}&#94;K\\pi_k - 1\\right)\\\\ \\frac{\\partial L}{\\partial \\pi_k}&=\\frac{\\gamma\\left(z_{1 k}\\right)}{\\pi_k} + \\lambda_1 = 0\\quad \\therefore \\pi_k = -\\frac{\\gamma\\left(z_{1 k}\\right)}{\\lambda_1}\\\\ \\frac{\\partial L}{\\partial \\lambda_1}&=\\sum_{k=1}&#94;K\\pi_k - 1 = 0\\quad \\therefore\\lambda_1 = -\\sum_{k=1}&#94;K\\gamma\\left(z_{1 k}\\right)\\\\ \\therefore\\pi_k&#94;{\\star} &= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} \\end{aligned} $$ \\(\\boldsymbol{A}\\) $$\\begin{aligned} L\\left(\\boldsymbol{A},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} + \\sum_{j=1}&#94;K\\lambda_{2,j}\\left(\\sum_{k=1}&#94;K A_{jk} - 1\\right)\\\\ \\frac{\\partial L}{\\partial A_{jk}} &= \\sum_{n=2}&#94;{N}\\frac{\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{A_{jk}} + \\lambda_{2,j} = 0\\quad \\therefore A_{jk} = -\\frac{\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\lambda_{2,j}}\\\\ \\frac{\\partial L}{\\partial \\lambda_{2,j}} &= \\sum_{k=1}&#94;K A_{jk} - 1 = 0\\quad \\therefore \\lambda_{2,j} = -\\sum_{k=1}&#94;K\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)\\\\ \\therefore A_{jk}&#94;{\\star}&=\\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\end{aligned}$$ \\(\\boldsymbol{\\phi}\\) $$\\begin{aligned} L\\left(\\boldsymbol{\\phi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} + \\sum_{k=1}&#94;K\\lambda_{3,k}\\left( \\sum_{i=1}&#94;D\\phi_{ik} - 1\\right)\\\\ \\frac{\\partial L}{\\partial\\phi_{ik}} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\phi_{ik}} + \\lambda_{3,k}=0\\quad \\therefore \\phi_{ik} = -\\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\lambda_{3,k}}\\\\ \\frac{\\partial L}{\\partial\\lambda_{3,k}} &= \\sum_{i=1}&#94;D\\phi_{ik} - 1 = 0 \\quad \\therefore \\lambda_{3,k} = -\\sum_{i=1}&#94;D\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni} = -\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)\\\\ \\therefore \\phi_{ik}&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)} \\end{aligned}$$ Expectation step $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14)\\\\ \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35)\\\\ \\end{aligned} $$ forward-algorithm \\((\\alpha)\\) $$\\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha(\\mathbf{z}_{n-1})p(\\mathbf{z} | \\mathbf{z}_{n-1})\\\\ \\end{aligned}$$ backward-algorithm \\((\\beta)\\) $$\\begin{aligned} \\beta\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N}, \\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}, \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+2}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} \\beta(\\mathbf{z}_{n+1})p(\\mathbf{x}_{n+1}|\\mathbf{z}_{n+1})p(\\mathbf{z}_{n+1}|\\mathbf{z}_n)\\qquad (13.38) \\end{aligned}$$ \\(\\gamma,\\xi\\) $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$\\begin{aligned} \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}\\right) \\\\ &=\\frac{p(\\mathbf{X} | \\mathbf{z}_{n-1}, \\mathbf{z}_{n}) p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{Bayes' theorem})\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{x}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43) \\end{aligned}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-2.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-2.html"},{"title":"HMMの最尤推定","text":"※ かなり導出部分を省略しています。導出は適宜 HMMの最尤推定の計算過程 を参照してください。 隠れマルコフモデルは、一般に以下の式で表されます。 $$ p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10) $$ \\(\\mathbf{X} = \\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) : \\(\\mathbf{Z} = \\{\\mathbf{z}_1,\\ldots,\\mathbf{z}_N\\}\\) \\(\\boldsymbol{\\theta}=\\{\\boldsymbol{\\pi}, \\mathbf{A}, \\boldsymbol{\\phi}\\}\\) ※ 一般に放出確率 \\(p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\boldsymbol{\\phi}\\right)\\) は、 二値のベクトル \\(\\mathbf{z}_n\\) の \\(K\\) 個の可能な状態に対応した \\(K\\) 個の要素を持つベクトルからなる任意の分布 $$ p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\phi\\right)=\\prod_{k=1}&#94;{K} p\\left(\\mathbf{x}_{n} | \\phi_{k}\\right)&#94;{z_{n k}}\\qquad (13.9) $$ を考えることも可能ですが、今回は下記の離散多項分布を考えます。 Name Probability Conditional Distribution initial state \\(\\pi_{k} \\equiv p\\left(z_{1 k}=1\\right)\\) \\(p\\left(\\mathbf{z}_{1} \\mid \\boldsymbol{\\pi}\\right)=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\quad (13.8)\\) transition probability \\(A_{j k} \\equiv p\\left(z_{n k}=1\\mid z_{n-1, j}=1\\right)\\) \\(p\\left(\\mathbf{z}_{n} \\mid \\mathbf{z}_{n-1}, \\mathbf{A}\\right)=\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}}\\quad (13.7)\\) emission probability \\(\\phi_{i k}\\equiv p\\left(x_{n i}=1 \\mid z_{n k}=1\\right)\\) \\(p(\\mathbf{x}_n \\mid \\mathbf{z}_n, \\boldsymbol{\\phi})=\\prod_{i=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{i k}&#94;{x_{ni} z_{nk}}\\quad (13.22)\\) 尤度関数 ここで、データ集合 \\(\\mathbf{X}\\) が観測された際に、上記の同時分布を潜在変数 \\(\\mathbf{Z}\\) について周辺化することで、尤度関数は以下のように記述されます。 $$ p(\\mathbf{X} | \\boldsymbol{\\theta})=\\sum_{\\mathbf{Z}} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.11) $$ しかし、この尤度関数は \\(n\\) について分解できない（ \\(\\mathbf{z}_n\\) ）ごとに和を取れないので、 条件付き独立 の性質を活かして 尤度関数の対数の期待値 を最大化する Baum-Welch algorithm (EM algorithm) を用います。 Baum-Welch (EM) パラメータ \\(\\boldsymbol{\\theta}&#94;{\\text {old }}\\) を用いて \\(p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化する。 対数尤度関数の期待値 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を求める。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化するパラメータに更新する。 \\(\\boldsymbol{\\theta}\\rightarrow\\boldsymbol{\\theta}&#94;{\\text {old }}\\) 1に戻る。 $$ Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12) $$ ここで、表記を簡単にするために、 γ 、 ξ を導入します。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14) \\end{aligned} $$ なお、潜在変数が離散なので、以下のように記述し直せます。（ \\(\\pi_{k},A_{j k},\\phi_{j k}\\) と同様。） $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ これらを用いると、 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) が以下のように書き下せます。 （計算過程） $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} \\end{aligned}\\qquad (13.17) $$ Maximization step ※ 実際の計算の順番からは前後しますが、先にM stepを説明します。 上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化するのは（別ブロックに別れているから）簡単で、それぞれ 適当なラグランジュ乗数を導入する ことで、以下のように求まります。 （計算過程） $$ \\begin{aligned} \\pi_{k}&= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} & (13.18)\\\\ A_{j k}&= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} & (13.19)\\\\ \\phi_{i k}&=\\frac{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right) x_{n i}}{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right)} & (13.23) \\end{aligned} $$ Expectation step M step で必要となる \\(\\gamma,\\xi\\) は、 条件付き独立性 を用いることで効率的に計算することができます。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ 条件付き独立性を用いてそれぞれ変形すると、以下の再帰式を導くことができます。 （計算過程） $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ ※ なお、ここで \\(\\alpha\\) の再起式を forward-algorithm 、 \\(\\beta\\) の再起式を backward-algorithm と呼ぶことがあります。 また、これらを用いて \\(\\xi\\) を記述することもでき、以下のように表せます。 （計算過程） $$\\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ 以上でBaum-Welchに必要な計算式が求まりました。 おまけ（尤度関数） 尤度関数は、アルゴリズムの停止条件に用いられるなど、値を求めることが非常に有用です。 求める際は、 $$ \\gamma\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad (13.33) $$ の両辺を \\(\\mathbf{z}_n\\) について周辺化すれば、左辺は $$\\sum_{\\mathbf{z}_{n}} \\gamma\\left(\\mathbf{z}_{n}\\right) = \\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right) = 1$$ となることが明らかなので、以下のように求まります。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{n}} \\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)\\qquad (13.41)$$ また、上記の式は任意の \\(n\\) について成立するので、 \\(n=N\\) の場合を考えれば \\(\\alpha\\) のみを用いて求めることができます。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{N}} \\alpha\\left(\\mathbf{z}_{N}\\right)\\qquad (13.42)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-1.html"},{"title":"Numpyの行列計算チートシート","text":"はじめに 様々なアルゴリズムを実装する際に漸化式は出るけど実装時にうまくいかない。ということは良くあります。また、 Python を使って実装する場合、そのほとんどが行列の取り扱いです。 （柔軟であるが故にエラーを吐かずに動いてしまう…笑） そこで、まずは行列計算のチートシートを作成します。（随時加筆修正していきます。） 目次 基本事項 内積（行列積） 外積 In [1]: import numpy as np 基本事項 In [2]: N = 3 A = np . arange ( N ) B = np . arange ( N ) . reshape ( - 1 , N ) # np.expand_dims(A, axis=0), A[None,:] C = np . arange ( N ) . reshape ( N , - 1 ) # np.expand_dims(A, axis=1), A[:,None] D = np . arange ( N * N ) . reshape ( N , N ) In [3]: print ( f \"A = {A} \" ) print ( f \"B = {B} \" ) print ( f \"C = {C} \" ) print ( f \"D = {D} \" ) A = [0 1 2] B = [[0 1 2]] C = [[0] [1] [2]] D = [[0 1 2] [3 4 5] [6 7 8]] In [4]: print ( f \"A.shape = {A.shape} \" ) print ( f \"B.shape = {B.shape} \" ) print ( f \"C.shape = {C.shape} \" ) print ( f \"D.shape = {D.shape} \" ) A.shape = (3,) B.shape = (1, 3) C.shape = (3, 1) D.shape = (3, 3) In [5]: print ( f \"A.ndim = {A.ndim} \" ) print ( f \"B.ndim = {B.ndim} \" ) print ( f \"C.ndim = {C.ndim} \" ) print ( f \"D.ndim = {D.ndim} \" ) A.ndim = 1 B.ndim = 2 C.ndim = 2 D.ndim = 2 ndim ex. scalar $(0)$ 1 , 2 ,... vector $1$ A matrix $\\geq2$ B , C , D 内積（行列積） vector & scalar / matrix & scalar スカラーが絡むと、各要素とスカラーの積となる。 shape の変化はない。 どちらから掛けてもエラーは起こらない。 In [6]: print ( f \"np.dot(A,2) = {np.dot(A,2)}\" ) # vector & scalar print ( f \"np.dot(B,2) = {np.dot(B,2)}\" ) # matrix & scalar print ( f \"np.dot(C,2) = {np.dot(C,2)}\" ) # matrix & scalar print ( f \"np.dot(D,2) = {np.dot(D,2)}\" ) # matrix & scalar np.dot(A,2) = [0 2 4] np.dot(B,2) = [[0 2 4]] np.dot(C,2) = [[0] [2] [4]] np.dot(D,2) = [[ 0 2 4] [ 6 8 10] [12 14 16]] vector & vector 内積となる。 結果はスカラーとなる。 shape が異なると、エラーが起きる。 In [7]: print ( f \"np.dot(A,A) = {np.dot(A,A)}\" ) # vector & vector np.dot(A,A) = 5 In [8]: np . dot ( A , np . arange ( N - 1 )) # shape=(3,) & shape=(2,) ValueError : shapes (3,) and (2,) not aligned: 3 (dim 0) != 2 (dim 0) vector & matrix 行列積となる。 ベクトルは、位置によって変換のされ方が異なる。 左がベクトルの場合： np.dot((x,) (y,z)) = np.dot((1,x) (y,z)) 右がベクトルの場合： np.dot((y,z) (x,)) = np.dot((y,z) (x,1)) 行列積であるので、結果の shape は np.dot((x,y) (y,z)) = (x,z) となる。 上で y が異なるとエラーが生じる。 In [9]: print ( np . dot ( A , B )) # np.dot((3,)(1,3)) print ( np . dot ( A , C )) # np.dot((3,)(3,1)) print ( np . dot ( B , A )) # np.dot((1,3)(3,)) print ( np . dot ( C , A )) # np.dot((3,1)(3,)) ValueError : shapes (3,) and (1,3) not aligned: 3 (dim 0) != 3 (dim 0) [5] [5] ValueError : shapes (3,1) and (3,) not aligned: 1 (dim 1) != 3 (dim 0) matrix & matrix c = np.dot(a,b) a.shape=(a1,a2,...,aN,X) b.shape=(b1,b2,...,X,bM) c.shape=(a1,a2,...,aN,b1,b2,...,bM) c[i1,i2,...,iN,j1,j2,...,jM] == a[i1,i2,...,iM,:].dot(b[j1,j2,...,jM-1,:,jM]) In [10]: import itertools def checkNPdot ( shape1 , shape2 ): \"\"\" 計算可能なshapeの関係を列挙する。 \"\"\" a = np . arange ( np . prod ( shape1 )) b = np . arange ( np . prod ( shape2 )) for comb1 in itertools . permutations ( shape1 , len ( shape1 )): for comb2 in itertools . permutations ( shape2 , len ( shape2 )): try : print ( f \" {comb1} .dot( {comb2} ) = {(a.reshape(comb1).dot(b.reshape(comb2))).shape}\" ) except : pass 以下で具体的に見ていく！ np.dot(2D, 3D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,X,k) c.shape=(i,j,k) c[i,j,k] == a[i,:].dot(b[j,:,k]) In [11]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) c = np . dot ( a , b ) In [12]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3) b.shape = (2, 3, 4) np.dot(a,b).shape = (2, 2, 4) In [13]: I , J , K = c . shape In [14]: np . all ([ c [ i , j , k ] == a [ i ,:] . dot ( b [ j ,:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[14]: True np.dot(3D,2D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(X,k) c.shape=(i,j,k) c[i,j,k] == a[i,j,:].dot(b[:,k]) In [15]: a = np . arange ( 24 ) . reshape ( 4 , 2 , 3 ) b = np . arange ( 6 ) . reshape ( 3 , 2 ) c = np . dot ( a , b ) In [16]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (4, 2, 3) b.shape = (3, 2) np.dot(a,b).shape = (4, 2, 2) In [17]: I , J , K = c . shape In [18]: np . all ([ c [ i , j , k ] == a [ i , j ,:] . dot ( b [:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[18]: True np.dot(3D,3D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) In [19]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 60 ) . reshape ( 3 , 4 , 5 ) c = np . dot ( a , b ) In [20]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4) b.shape = (3, 4, 5) np.dot(a,b).shape = (2, 3, 3, 5) In [21]: I , J , K , L = c . shape In [22]: np . all ([ c [ i , j , k , l ] == a [ i , j ,:] . dot ( b [ k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[22]: True np.dot(2D,4D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,:].dot(b[j,k,:,l]) In [23]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 120 ) . reshape ( 2 , 4 , 3 , 5 ) c = np . dot ( a , b ) In [24]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) # c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) a.shape = (2, 3) b.shape = (2, 4, 3, 5) np.dot(a,b).shape = (2, 2, 4, 5) In [25]: I , J , K , L = c . shape In [26]: np . all ([ c [ i , j , k , l ] == a [ i ,:] . dot ( b [ j , k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[26]: True np.dot(3D,4D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,l,X,m) c.shape=(i,j,k,l,m) c[i,j,k,l,m] == a[i,j,:].dot(b[k,l,:,m]) In [27]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 360 ) . reshape ( 3 , 5 , 4 , 6 ) c = np . dot ( a , b ) In [28]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4) b.shape = (3, 5, 4, 6) np.dot(a,b).shape = (2, 3, 3, 5, 6) In [29]: I , J , K , L , M = c . shape In [30]: np . all ([ c [ i , j , k , l , m ] == a [ i , j ,:] . dot ( b [ k , l ,:, m ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M )]) Out[30]: True np.dot(4D,4D) c = np.dot(a,b) a.shape=(i,j,k,X) b.shape=(l,m,X,n) c.shape=(i,j,k,l,m,n) c[i,j,k,l,m,n] == a[i,j,k,:].dot(b[l,m,:,n]) In [31]: a = np . arange ( 120 ) . reshape ( 2 , 3 , 4 , 5 ) b = np . arange ( 360 ) . reshape ( 3 , 4 , 5 , 6 ) c = np . dot ( a , b ) In [32]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4, 5) b.shape = (3, 4, 5, 6) np.dot(a,b).shape = (2, 3, 4, 3, 4, 6) In [33]: I , J , K , L , M , N = c . shape In [34]: np . all ([ c [ i , j , k , l , m , n ] == a [ i , j , k ,:] . dot ( b [ l , m ,:, n ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M ) for n in range ( N )]) Out[34]: True 外積 c = np.outer(a,b) c[i][j] = a.reshape(-1,)[i]*b.reshape(-1,)[j] In [35]: c = np . outer ( a , b ) In [36]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) a.shape = (a1,a2,...,aN) b.shape = (b1,b2,...,bM) In [37]: Na = np . prod ( a . shape ) Nb = np . prod ( b . shape ) In [38]: print ( f \"Na = {Na} \" ) print ( f \"Nb = {Nb} \" ) Na = a1*a2*・・・*aN Nb = b1*b2*・・・*bM In [39]: print ( c . shape ) (Na, Nb) In [40]: np . all ([ c [ i ][ j ] == a . reshape ( - 1 ,)[ i ] * b . reshape ( - 1 ,)[ j ] for i in range ( Na ) for j in range ( Nb )]) Out[40]: True In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-0.html"},{"title":"分子生命科学Ⅲ 第1回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 講義概要 この授業最大の目的は、 「将来僕らが脳を対象とすることになった時に敷居を低くする」 こと。 # タイトル 内容 日付 1 神経系の構造と機能 中枢神経系の構造・機能 末梢神経系の構造・機能 9/26,10/3 2 感覚神経系 感覚系の構成 体性感覚系 視覚系（末梢視覚系・平衡感覚系） 聴覚と平衡感覚（聴覚系・平衡感覚系） 化学感覚系（嗅覚系・味覚系） 10/10,17,24,31 3 運動系 脊髄による運動制御 脳による運動制御 11/14,21 4 脳と行動の化学的制御 11/28 5 摂食行動 12/12 6 脳のリズムと睡眠 脳波 睡眠 概日リズム 12/19 7 精神疾患 統合失調症 感情障害 不安障害 12/26 8 神経変性疾患 アルツハイマー病 パーキンソン病 ALS 1/9 神経系の構造と機能（１） 神経系の機能的構成 神経系は、 感覚系 、 統合系 、 運動系 の３つに分けることができる。 感覚系は、感覚器で何かを感じると、 陽イオン が神経細胞の末端に流れ込み、 活動電位 が上がり、電気的なシグナルとして 中枢神経系(CNS)特に、大脳皮質の感覚野 にこの入力を伝える。 運動系は、逆向きで、脳の運動野からのシグナルが 末梢神経系 に伝わる。 神経系の構成成分 ニューロン(神経細胞,neuron) グリア細胞(glial cells) 血管(blood vessels) ニューロン(neuron) 極性のある細胞で、 細胞体(cell body or soma) 、 樹状突起(dendrites) 、 軸索(axon) からなり、（ほとんどの場合） 活動電位(action potential) を発生する。 膝蓋腱反射(knee-jerk reflex) ニューロンがどのように神経回路に含まれているか、を示す良い例。 医師が膝蓋骨の下の腱を軽く叩くと、大腿四頭筋が伸ばされ、その信号が脊髄まで伝わる。この信号が脊髄で 運動ニューロン に直結しており、運動ニューロンが発火して少し離れた部分の筋肉を収縮させる。その反動で足が上がる。 グリア細胞(glia cells) グリア細胞はニューロン（ヒトでは \\(1\\) - \\(2\\times10&#94;{11}\\) 個）の \\(3\\) - \\(10\\) 倍（マウスだと同数程度）存在し、脳の体積の約半分を占める。 長い軸索と興奮性膜を特徴とするニューロンに対して、グリア細胞の突起は細胞体の周辺に留まり、活動電位を発生しない。 ニューロンの生存や発達、機能発言のための液性環境維持と代謝的支援、神経伝達の調節等を行なっている。 と、ニューロンの補助的な役割だと今までは考えられていたが、最近ではもっと積極的な意味があるのでは無いかと研究されている。 中枢神経系のグリア細胞が下の4種からなる。 アストロサイト(astrocyte)（アストログリア、星状膠細胞） オリゴデンドロサイト(oligodendrocyte)（オリゴデンドログリア、稀突起膠細胞） 上衣細胞(ependymal cell) ミクログリア(microglia)（小膠細胞） アストロサイト(astrocyte)の機能 血液脳関門 を形成してがんが脳に転移しないように防御したりしている。 神経伝達物質の最取り込み（神経伝達物質が出てすぐに取り込まないと、麻薬や覚せい剤のような影響が出てしまう。）。 オリゴデンドロサイト(oligodendrocyte) 中枢神経系 において、 髄鞘（ミエリン・myelin） を形成する。（ 末梢 では シュワン細胞 が髄鞘を形成する。） 上衣細胞(ependymal cells) ミクログリア(microglia) 上衣細胞は脳室と脊髄中心管を覆う一層の上皮性細胞で、脳を脳脊髄液から遮断する（脳脊髄液脳関門(cerebro-spinal fluid brain barrier)） ミクログリアは損傷に際して活性化する脳内の免疫性細胞で貪食能を持つ。アストログリア、オリゴデンドロサイト、上衣細胞が 外胚葉 由来なのに対し、ミクログリアは 中胚葉 由来である。 脳の構造 哺乳動物の脳は、ほぼ共通の構造を持っている。ヒトの特徴は、 連合野 が広いということである。 解剖学用語 解剖学用語 解剖学的切断面 神経系の構成 中枢神経系(CNS: central nervous system) 脳(brain) 大脳(cerebrum) 小脳(cerebellum) 脳幹(brain stem) 脊髄(spinal cord) 末梢神経系(PNS: peripheral nervous system) 体性神経系(somatic nervous system) 脳神経(cranial nerve) 脊髄神経(spinal nerve) 自律神経系(autonomic nervous system) 小脳(cerebellum) 脳幹（延髄・橋・中脳・間脳）の背後に位置する。 大脳や脊髄と広範な連絡を持つ運動制御中枢 言語や思考などの高次脳機能に関与 小脳の 同 側の身体の運動に関与 脳幹(brain stem) 間脳→中脳→橋→延髄からなり、上方で間脳に、下方で脊髄に連なる（狭義では間脳を含めない）。 大脳から脊髄・小脳への情報、逆に脊髄・小脳から大脳への情報を中継 呼吸、意識、体温調節等の生命維持機能を制御 （大脳・小脳の損傷では生存できるが、脳幹の損傷は通常早急な死に至る） 錐体交叉 脳の運動ニューロンの軸索が延髄の後ろで一旦交叉（ 錐体交叉 ）して反対側にいっているから、反対側の機能がうまく制限できなくなる。 一方で 小脳 は同側なので、そのようなことは起こらない。 脊髄(spinal cord) 脊髄は脊柱管にあり、延髄に続いて錐体交叉下端より始まり、脊髄円錐にて終わる。 皮膚・関節・筋肉から脳への情報、逆に脳からの情報を伝える主経路 末梢神経の脊髄神経で身体と通ずる。 脊髄に入る情報を運ぶ軸索は 後根(dorsal root) に含まれ、脊髄から出ていく情報を運ぶ軸索は 前根(ventral root) に含まれる。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html"}]};