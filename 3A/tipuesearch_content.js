var tipuesearch = {"pages":[{"title":"2020年試験問題","text":"前半 ： 相澤先生 （問１） 蛍光灯や。 レンズ口径が同じで薄いレンズと厚いレンズがある。これらを用いたとき、先に焦げるのはどちらか。 \\(\\gamma\\) 補正について説明せよ。 （解答） カメラの ホワイトバランス 機能を用いずに撮影したためと考えられる。 照明とカメラの温度関係によって、画像に青みがかかったり（照明の温度がカメラよりも@高い@時）、赤みがかかったり（その逆）する。 （問２） 周波数領域において、原信号を \\(X(\\omega)\\) 、出力信号を \\(Y(\\omega)\\) 、ノイズを \\(N(\\omega)\\) 、フィルタを \\(H(\\omega)\\) と記述する。この時、これらの間には $$Y(\\omega) = H(\\omega)X(\\omega) + N(\\omega)$$ という関係性が成立している。 （解答） （問３） ハリスの SIFT特徴量 （解答） （問４） 次のような（人間うじゃうじゃ） ハリスの SIFT特徴量 （解答） 後半 ： 山崎先生 （問５） 下記手法について説明せよ。 アンサンブル学習 8点アルゴリズム （解答） （問６） Principle Component Analysis (PCA; 主成分分析法) について。 どのような用途で用いられるのか説明せよ。 具体的なアルゴリズムについて数式を用いて説明せよ。 （解答） （問７） ニューラルネットワークについて。 パーセプトロンの学習方法について数式を用いて説明せよ。 他の機械学習と比較してニューラルネットワークの学習アルゴリズムには特徴がある。その特徴と、それを生かした実用例を2つ答えよ。 （解答） if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2020.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2020.html"},{"title":"分子生命科学Ⅲ 試験問題H26","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 問6 痛覚と聴覚について、各々の感覚受容体の名称・局在・機能および、感覚受容体の活性化で生じるシグナル伝達系の反応、大脳皮質までの伝導路について簡単に述べなさい。 （例）嗅覚系では、感覚受容体は嗅細胞に存在するGタンパク質共役の嗅覚受容体である。嗅覚受容体に匂い物質が結合すると、細胞内で、アデニル酸シクラーぜの活性化に夜cAMPの産生が生じ、陽イオンチャンネルの開口、膜の脱分極が生じる。嗅細胞からのシグナルは、嗅球僧帽細胞を介して、一次嗅皮質へと伝導される。 解答 1. 痛覚 痛覚系では、感覚受容体（ 侵害受容器 ）は 分岐した無髄神経の自由神経終末 である 2. 聴覚 問7 前庭動眼反射 とは何か？ 解答 ¬前庭動眼反射(vestibulo-ocular reflex(VOR))¬とは、 「頭の回転運動で起こる眼球の反射運動。網膜上の視覚像の固定化に寄与する」 正確な視覚には、頭の運動に関わらず、網膜に安定した像が保たれる必要がある。それぞれの眼球は6つで一揃いの外眼筋(extraocular muscle)により動かされているが、VORは頭の回転を検知し、ただちに反対方向に眼の代償性の運動(compensatory movement)を指令する。この運動により、視線が視覚の目標物にしっかり固定される。VORは視覚入力よりも¬前庭(vestibular)¬の入力により引き起こされる反射なので、暗所や眼を閉じている時でも驚くほどよく働く。 問8 眼球優位円柱 とは何か？ 解答 ¬眼球優位円柱（コラム）(ocular dominance column)¬とは、 「主として片眼からの情報を受け取る有線皮質の部位」 のこと。 左右の別々の眼からの情報は¬外側膝状体(lateral geniculate nucleus; LGN)¬の別々の層が扱い、LGNの唯一の主要なシナプス標的である¬一次視覚野（有線皮質,V1野）¬の第ⅣC層に到達するが、この情報伝達に用いる軸索末端の分布がⅣC層では一様ではなく、むしろそれぞれ等間隔を保った約0.5mm幅の小断片に分かれている。これらの断片を¬眼球優位円柱（コラム）(ocular dominance column)¬と呼ぶ。 問9 アルツハイマー病 の発症機序について述べよ。 解答 ¬アルツハイマー病(Alzheimer's disease)¬は、認知機能にとって重要な脳の領域である大脳皮質のニューロンの細胞骨格の破壊によって生じる。 問10 体部位再現(局在)地図 とは何か？ 解答 皮膚上の隣接する受容体が、神経系の内部にある標的構造においても隣接するニューロンに情報を与えるという体性感覚経路の部位局在の機構を¬体部位局在（ソマトトピー）(somatotopy)¬と呼び、これに基づいて体部位を脳表に配置した図を¬体部位再現図¬と呼ぶ。カナダの脳外科医ワイルダー・ペンフィールドらによるホムンクルスが有名。 問11 副腎皮質刺激ホルモン(ACTH) の産生部位、作用部位、作用について述べよ。 解答 ¬副腎皮質刺激ホルモン(ACTH)¬は、 コルチコトロピン放出ホルモン(corticotropin-releasing hormone; CRH) に反応して下垂体前葉から放出されるホルモン。副腎からの¬コルチゾール(cortisol)¬放出を刺激する。 コルチゾール(cortisol) は、血中に放出されると全身に作用し、様々なストレスに耐えて生活するために、貯蔵庫からエネルギー源（グルコース）を動員し、また免疫系を抑制する。 問12 視床下部外側(lateral hypothalamus) と 視床下部腹内側(ventromedial hypothalamus) の摂食における役割について述べよ。 解答 ¬視床下部外側(lateral hypothalamus)¬の両側性の損傷は 食欲不振(anorexia) を引き起こす。対照的に、¬視床下部腹内側(ventromedial hypothalamus)¬の両側性の損傷は、過食と肥満を引き起こす。","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-H26.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-H26.html"},{"title":"試験問題","text":"問題 注意事項： 教科書、ノートは持ち込み不可 机の上には筆記用具以外は置かないこと 解答用紙は切り離さないこと 制限時間90分 （問１） \\(\\alpha,\\lambda > 0\\) をパラメータとするガンマ分布の確率密度関数を $$ \\begin{align} f(x;\\alpha,\\lambda) = \\begin{cases} \\dfrac{\\lambda&#94;\\alpha}{\\Gamma(\\alpha)} x&#94;{\\alpha-1} e&#94;{-\\lambda x} & (x \\geq 0) \\\\ 0 & (x < 0) \\end{cases} \\end{align} $$ とする。ここで、 $$\\Gamma(\\alpha) = \\int_0&#94;\\infty x&#94;{\\alpha-1} e&#94;{-x} dx$$ はガンマ関数である。 ガンマ関数の積率母関数を求め、期待値と分散を導出せよ。 （解答） → No.11: ガンマ分布の積率母関数を求め、期待値と分散を導出せよ （問２） 独立性と無相関性について説明せよ。 （解答） → No.06: 独立と無相関性について説明せよ （問３） ラグランジュ未定乗数法について説明せよ。 （解答） → No.35: ラグランジュ未定乗数法について説明せよ （問４） マルコフ決定問題および期待割引報酬和最大化について説明せよ。 （解答） → No.53: マルコフ決定問題および期待割引報酬和最大化について説明せよ （問５） 隠れマルコフモデルのビタビアルゴリズムを説明せよ。 （解答） → No.67: 隠れマルコフモデルのビタビアルゴリズムを説明せよ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-test.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-test.html"},{"title":"試験問題例","text":"導入 No.01: 汎化能力について説明せよ 学習した問題とその答えの情報などを用い、 未知の問題に対して 正しい答えを導く能力のこと。 確率統計 No.02: 確率統計外れ値がある場合の期待値の問題点と他の統計量との違いを具体例を交えて説明せよ 年収の平均値が400万円、中央値が350万円の合計50人の集団50人に、年収10億円の人が1人加わったとする。すると、その集団の平均年収は約2350万円となるが、一方の中央値はほとんど変わらない。 このように、外れ値がある場合、期待値はごく一部の外れ値に強く影響され、データを代表とする値とならないことがある。一方で、中央値や最頻値ではそのようなことが起こらない。このことを、 「外れ値に対してロバストである（頑健性がある）」 と呼ぶ。 No.03: ２つの確率変数の和の分散を各々の分散と共分散を用いて表せ $$ V(X+Y) = V(X)+V(Y)+2Cov(X,Y) $$ No.04: 分散共分散行列について説明せよ 分散の概念を多次元確率変数に拡張して行列としたもの。 N個の確率変数について、各確率変数同士の共分散を並べたN×N行列。 対角には分散が、非対角には共分散が並ぶ。 半正定値対称。 各確率変数が独立なら対角行列。 No.05: 相関係数及び正の相関・負の相関・無相関について説明せよ 2つの確率変数X,Yの相関係数は $$\\frac{Cov(X,Y)}{\\sqrt{V(X)}\\sqrt{V(Y)}}$$ で定義され、この値は \\(-1\\) 以上 \\(1\\) 以下となる。相関係数が正、負、 \\(0\\) のときそれぞれ正の相関がある、負の相関がある、無相関であるという。 No.06: 独立と無相関性について説明せよ 2つの連続型/離散型の確率変数 \\(X,Y\\) は同時確率密度/質量関数がそれぞれの周辺確率密度/質量関数の積で表されるとき独立であるという。 2つの確率変数 \\(X,Y\\) が独立な時、 積の期待値はそれぞれの期待値の積と一致する。（ \\(E[XY] = E[X]E[y]\\) ） 和の積率母関数はそれぞれの積率母関数の積と一致する。（ \\(M_{X+Y}(t) = M_X(t)M_Y(t)\\) ） 無相関である。 （逆は成り立たない。） No.07: 畳み込みについて説明せよ 2つの独立な確率変数 \\(X,Y\\) の周辺確率密度関数を \\(p_x,p_y\\) とすると \\(X\\) と \\(Y\\) の和 \\(Z\\) の確率密度関数は $$p_z(z) = \\int p_x(x) p_y(z-x) dx$$ と計算できる。このように、 関数 \\(g(=p_x)\\) を平行移動しながら関数 \\(f(=p_y)\\) に重ね足し合わせる二項演算（ \\(f\\ast g\\) ）のことを畳み込み(convolution) と呼ぶ。 No.08: ２項分布の積率母関数を求め、期待値と分散を導出せよ 成功する確率 \\(p\\) 、失敗する確率 \\(1-p\\) の実験を同じ条件で独立に繰り返すことを ベルヌーイ試行 という。このベルヌーイ試行を \\(n\\) 回行った時の成功回数を確率変数とする 離散確率分布 を 二項分布(binomial distribution) と呼ぶ。 $$ P(X=k)=\\left(\\begin{array}{l}{n} \\\\ {k}\\end{array}\\right) p&#94;{k}(1-p)&#94;{n-k} $$ 積率母関数 \\(M_X(t)\\) は、 $$ \\begin{align} M_X(t) &= E\\left(e&#94;{tX}\\right) \\\\ &= \\sum_{x=0}&#94;n e&#94;{tx} P(X=x)\\\\ &= \\sum_{x=0}&#94;n e&#94;{tx} \\left(\\begin{array}{l}{n} \\\\ {x}\\end{array}\\right) p&#94;{x}(1-p)&#94;{n-x}\\\\ &= \\sum_{x=0}&#94;n e&#94;{tx} \\left(\\begin{array}{l}{n} \\\\ {x}\\end{array}\\right) \\left(pe&#94;t\\right)&#94;{x}(1-p)&#94;{n-x}\\\\ &= (pe&#94;t+q)&#94;n \\quad (\\because \\text{ Binomial theorem}) \\end{align} $$ これを用いると、期待値 \\(E(X)\\) は $$ \\begin{aligned} E(X) &=\\left.\\frac{d M_{X}(t)}{d t}\\right|_{t=0} \\\\ &=\\left.n\\left(\\mathrm{e}&#94;{t} p+1-p\\right)&#94;{n-1} p \\mathrm{e}&#94;{t}\\right|_{t=0} \\\\ &=n(1-p+p)&#94;{n-1} p \\\\ &=n p \\end{aligned} $$ 同様にして、分散 \\(V(X)\\) は $$ \\begin{aligned} E\\left(X&#94;{2}\\right) &=\\left.\\frac{d&#94;{2} M_{x}(t)}{d t&#94;{2}}\\right|_{t=0} \\\\ &=\\left.\\left(n p\\left(\\mathrm{e}&#94;{t} p+1-p\\right)&#94;{n-1} \\mathrm{e}&#94;{t}\\right)&#94;{\\prime}\\right|_{t=0} \\\\ &=n(n-1) p\\left(\\mathrm{e}&#94;{t} p+1-p\\right)&#94;{n-2} p \\mathrm{e}&#94;{t}+n p\\left(\\mathrm{e}&#94;{t} p+1-p\\right)&#94;{n-1} \\mathrm{e}&#94;{t} \\\\ &=n(n-1) p&#94;{2}+n p \\\\ V\\left(X\\right) &=E\\left(X&#94;{2}\\right)-E\\left(X\\right)\\\\ &=np\\left(1-p\\right) \\end{aligned} $$ と求められる。 No.09: ポアソン分布の積率母関数を求め、期待値と分散を導出せよ ポアソン分布(Poisson distribution) は、単位時間中に平均 \\(\\lambda\\) 回起こる事象の生起回数の確率分布で、確率質量関数は \\(\\dfrac{e&#94;{-\\lambda} \\lambda&#94;x}{x!}\\) と表される。 ここで、積率母関数 \\(M_X(t)\\) とその微分が $$ \\begin{align} M_X(t) &= \\sum_{x=0}&#94;\\infty e&#94;{tx} \\cdot \\frac{e&#94;{-\\lambda} \\lambda&#94;x}{x!} \\\\ &= e&#94;{-\\lambda} \\sum_{x=0}&#94;\\infty \\frac{(\\lambda e&#94;t)&#94;x}{x!} \\\\ &= e&#94;{-\\lambda} e&#94;{\\lambda e&#94;t} \\quad \\left(\\because \\text{ McLaughlin expansion : } e&#94;t=\\sum_{x=0}&#94;\\infty \\frac{t&#94;x}{x!}\\right) \\\\ &= e&#94;{\\lambda (e&#94;t-1)}\\\\ M_X&#94;\\prime(t) &= \\lambda e&#94;t e&#94;{\\lambda (e&#94;t-1)} \\\\ M_X&#94;{\\prime\\prime}(t) &= \\lambda e&#94;t e&#94;{\\lambda (e&#94;t-1)} + \\lambda&#94;2 e&#94;{2t} e&#94;{\\lambda (e&#94;t-1)} \\end{align} $$ であるから、期待値 \\(E(X)\\) と分散 \\(V(X)\\) はそれぞれ以下で表される。 $$ \\begin{align} E(X) &= M_X&#94;\\prime(0) = \\lambda \\\\ V(X) &= M_X&#94;{\\prime\\prime}(0) - M_X&#94;\\prime(0)&#94;2 = \\lambda \\end{align} $$ No.10: 正規分布の積率母関数を求め、期待値と分散を導出せよ 正規分布(normal distribution) の確率密度関数は $$f(x) = \\dfrac{1}{\\sigma \\sqrt{2 \\pi}} \\exp \\left(-\\frac{(x-\\mu)&#94;2}{2\\sigma&#94;2}\\right)$$ で表されるので、積率母関数 \\(M_X(t)\\) は $$ \\begin{align} M_X(t) &= \\int_{-\\infty}&#94;\\infty e&#94;{tx} f(x) dx \\\\ &= \\exp \\left(\\mu t+\\frac{\\sigma&#94;2 t&#94;2}{2} \\right) \\underbrace{\\int_{-\\infty}&#94;{\\infty} \\frac{1}{\\sigma \\sqrt{2 \\pi}} \\exp \\left(- \\frac{\\{x-(\\mu+\\sigma&#94;2t)\\}&#94;2}{2\\sigma&#94;2} \\right) dx}_{=\\int_{-\\infty}&#94;{\\infty}\\mathcal{N}\\left(\\mu+\\sigma&#94;2 t, \\sigma&#94;2\\right) = 1} \\\\ &= \\exp \\left(\\mu t+ \\frac{\\sigma&#94;2 t&#94;2}{2} \\right) \\end{align} $$ 期待値は \\(\\mu\\) 、分散は \\(\\sigma&#94;2\\) となる。（導出は省略。） No.11: ガンマ分布の積率母関数を求め、期待値と分散を導出せよ ガンマ分布は、 ガンマ関数 \\(\\Gamma(\\alpha) = \\int_0&#94;\\infty x&#94;{\\alpha-1} e&#94;{-x} dx \\quad (>0)\\) を用いて $$ \\begin{align} f(x) = \\begin{cases} \\dfrac{\\lambda&#94;\\alpha}{\\Gamma(\\alpha)} x&#94;{\\alpha-1} e&#94;{-\\lambda x} & (x \\geq 0) \\\\ 0 & (x < 0) \\end{cases} \\end{align} $$ と表される。したがって、積率母関数は $$ \\begin{align} M_X(t) &= \\int_0&#94;\\infty e&#94;{tx} \\frac{\\lambda&#94;\\alpha}{\\Gamma(\\alpha)} x&#94;{\\alpha-1} e&#94;{-\\lambda x} dx \\\\ &= \\frac{\\lambda&#94;\\alpha}{\\Gamma(\\alpha)} \\int_0&#94;\\infty \\left(\\frac{y}{\\lambda - t} \\right)&#94;{\\alpha -1} \\exp(-y) \\frac{1}{\\lambda -t} dy \\quad \\left(\\because y = (\\lambda -t)x\\right) \\\\ &= \\frac{\\lambda&#94;{\\alpha}}{\\Gamma(\\alpha)}\\frac{1}{\\left(\\lambda-t\\right)&#94;{\\alpha}}\\int_0&#94;{\\infty}y&#94;{\\alpha-1}e&#94;{-y}dy\\\\ &= \\frac{\\lambda&#94;\\alpha}{\\Gamma(\\alpha)} \\frac{\\Gamma(\\alpha)}{(\\lambda -t)&#94;\\alpha}\\\\ &= \\lambda&#94;\\alpha (\\lambda -t)&#94;{-\\alpha} \\end{align} $$ となるので、 $$ \\begin{align} M_X(t)&#94;{\\prime} &= \\frac{\\alpha}{\\lambda-t}M_X(t)\\\\ &= \\frac{\\alpha\\lambda&#94;{\\alpha}}{\\left(\\lambda-t\\right)&#94;{\\alpha+1}}\\\\ M_X(t)&#94;{\\prime\\prime} &= \\frac{\\left(\\alpha + 1\\right)}{\\lambda-t}M_X(t)&#94;{\\prime}\\\\ &= \\frac{\\alpha\\left(\\alpha + 1\\right)\\lambda&#94;{\\alpha}}{\\left(\\lambda-t\\right)&#94;{\\alpha+2}} \\end{align} $$ から、 期待値は \\(\\dfrac{\\alpha}{\\lambda}\\) 、分散は \\(\\dfrac{\\alpha}{\\lambda&#94;2}\\) となる。 No.12: 独立同一分布について説明せよ \\(n\\) 個の確率変数 \\(X_1,\\cdots,X_n\\) が 「独立に」 、 「同じ分布に」 従うとき、 独立同一分布に従う という。 このとき、同時確率密度関数は、各標本の確率密度関数を \\(g(x)\\) とすると $$ f(x_1,x_2,\\cdots,x_n) = g(x_1)g(x_2)\\cdots g(x_n) $$ で表される。ここでこれらが期待値 \\(\\mu\\) 、分散 \\(\\sigma&#94;2\\) の独立同一分布に従う標本だとすると、標本平均 \\(\\overline{X}_n = \\displaystyle \\frac{1}{n} \\sum_{i=1}&#94;n X_i\\) の期待値と分散は、期待値が \\(\\mu\\) のままである一方、分散は \\(\\dfrac{\\sigma&#94;2}{n}\\) と減少する。 つまり 標本数を増やすことで、母集団の標本平均値が安定する ことが分かる。 No.13: チェビシェフの不等式について説明せよ 分散を持つ確率分布 に従う任意の確率変数に対して、 \\(k>0\\) のとき $$P(|X-E(X)| \\geq k) \\leq \\frac{V(X)}{k&#94;2}$$ が成り立つ。この不等式を使うことで、 「確率分布の具体的な形はわからないが、期待値と分散がわかる」 といった場合に、確率の上限を計算することが可能になる。 なお、この不等式は以下のように証明できる。 $$ \\begin{align} V(X) &= \\int_{-\\infty}&#94;{\\infty} (x-E(X))&#94;2 f(x) dx \\\\ &\\geq \\int_I (x-E(X))&#94;2 f(x) dx \\quad (I = \\{ x: |x-E(X)| \\geq k \\}) \\\\ &\\geq k&#94;2 \\int_I f(x) dx \\\\ &= k&#94;2 P(|X-E(X)| \\geq k) \\end{align} $$ No.14: 大数の弱法則について説明せよ 標本平均 \\(\\overline{X}_n\\) が期待値に確率収束するということ。 $$ \\forall \\varepsilon > 0 \\lim_{n \\to \\infty} P(|\\overline{X}_n - \\mu| \\geq \\varepsilon) = 0 $$ これより，標本を十分に多く取れば標本平均を真の期待値とみなしてよいことがわかる。これは各標本の期待値を \\(\\mu\\) 、分散を \\(\\dfrac{\\sigma&#94;2}{n}\\) とすると、チェビシェフの不等式より、 $$ \\left(0\\leq\\right)P(|\\overline{X}_n - \\mu| \\geq \\varepsilon) \\leq \\frac{\\sigma&#94;2/n}{\\varepsilon&#94;2} $$ であり、 \\(n \\to \\infty\\) のときに右辺が0に収束することから、左辺も0に収束することにより示される。 この法則は、 実際には分散が存在しなくても成り立つ。 No.15: 大数の強法則について説明せよ 標本平均が 概収束(almost sure convergence) するということ。つまり、無限列 \\(\\{X_n\\}\\) の確率分布が \\(\\mu\\) に収束する。 $$ \\overline{X}_n \\to \\mu \\quad \\textrm{with probability } 1 $$ これにより、 標本平均が母平均に収束する ことが分かる。 No.16: 確率収束と概収束の違いについて説明せよ 確率収束は \\(X_n\\) の確率分布を \\(n\\) ごとに考えるのに対し，概収束は無限列 \\(\\{ X_n \\}\\) の確率分布を考える。 $$ \\begin{align} X_n = \\begin{cases} 0 & \\textrm{with probability } 1-\\frac{1}{n} \\\\ 1 & \\textrm{with probability } \\frac{1}{n} \\end{cases} \\end{align} $$ となるような確率分布を考えると、 \\ $$ \\begin{align} \\lim_{n \\to \\infty} \\textrm{Pr}(|X_n| - 1 > \\varepsilon) &= 0 \\\\ \\sum_{n=1}&#94;\\infty \\textrm{Pr}(|X_n| = 1) &= \\infty \\end{align} $$ となり、0に 確率収束する が、 概収束はしない ことが分かる。厳密には 「ボレル・カンテリの補題」 を用いて示される。 No.17: 中心極限定理について説明せよ 標本平均を標準化する。 $$ \\overline{Z}_n = \\dfrac{\\overline{X}_n-\\mu}{\\sigma / \\sqrt{n}} $$ このとき、任意に固定した \\(a < b\\) に対して \\(n \\to \\infty\\) のとき、次式が成り立つ。 $$ P(a \\leq \\overline{Z}_n \\leq b) \\to \\int_a&#94;b \\dfrac{1}{\\sqrt{2\\pi}} e&#94;{-x&#94;2/2} dx $$ これを、 「 \\(\\overline{Z}_n\\) の分布が標準正規分布に弱収束（または分布収束）する」 と言ったり、 \\(\\overline{Z}_n\\) は漸近的に標準正規分布に従うと言ったりする。ここで、 $$ \\overline{Z}_n \\to Z (\\text{ weakly }) \\Longleftrightarrow \\lim_{n \\to \\infty} M_{\\overline{Z}_n}(t) = M_Z(t) $$ つまり、 「弱収束すること」と「積率母関数が各点収束すること」は同値 である。 まとめると、 \\(n\\) が大きいとき、 標本平均は期待値 \\(\\mu\\) 、分散 \\(\\frac{σ&#94;2}{n}\\) の正規分布にほぼ従う。 No.18: 弱収束・分布収束について説明せよ 弱収束・分布収束は $$ \\lim_{n \\to \\infty} M_{\\overline{Z}_n}(t) = M_Z(t) $$ と同値であり、積率母関数が各点収束することである。これは、 確率収束や概収束よりも弱い収束 である。 No.19: 仮説検定について説明し、社会・科学における利用例とその役割について自由に述べよ 仮説検定とは、 「母集団についての何らかの命題を標本に基づいて検証すること」 である。 帰無仮説の元で成り立つ確率が高々 \\(\\alpha\\) であるような事象を考える。ここで \\(\\alpha\\) は 有意水準 と呼ばれ、5%か1%に設定されることが多い。（検定を行う前に決める。） 次に、標本を観測してその事象が成り立っているかを調べる。 成り立っていれば、帰無仮説がほとんど起こらないことを証明しているので、 帰無仮説を棄却する。 成り立っていなければ、帰無仮説が現実と矛盾することを証明するだけの 「十分な根拠がない」 として帰無仮説を採択する。 社会においては、例えば新たに開発した薬に効能が本当にあるのかどうかを検証する時などに用いられる。プラセボに対する薬の試験を考える（「薬の効果を有意的に主張できるか」を調べる）と、 帰無仮説は、「薬の効果を主張できない」に当たり、「薬に対する反応の平均がプラセボに対するそれと等しい。」という仮説 対立仮説は、「薬の効果を主張できる」に当たり、「薬に対する反応の平均がプラセボに対するそれとは異なる。」という仮説 である。(Wikipedia より) No.20: 帰無仮説と対立仮説について説明せよ 帰無仮説は元の仮説で、何の関係もない、差異はみられない、仮説などそもそもなかった、などを意味する仮説で、対立仮説と排反な仮説である。 No.21: 有意水準について説明せよ 仮説検定において、帰無仮説を棄却する基準となる確率のこと。検定を行う前に決められ、通常1%か5%に設定される。なお、有意水準は 「帰無仮説が正しいのに、謝って棄却してしまう確率（第一種の過誤）」 でもある。 No.22: 正規分布の片側検定・両側検定について説明せよ |#|検定方法|例| |:-:|:-|:-| |両側検定| あるパラメータが目標値と等しいかを調べる検定方法 |ある装置の複製を作ったときに、元の装置と同じ性能が得られるかを調べるときなどに使用される。正規分布においては、有意水準 \\(\\alpha\\) に対して、確率分布の両端の面積が \\(\\frac{\\alpha}{2}\\) の領域を棄却域とし、現実の正規化標本平均 \\(Z\\) が棄却域に入ったら、帰無仮説を棄却する。| |片側検定| あるパラメータが比較対象より大きいかどうかを調べる検定方法 |新しく開発した装置の性能が従来の装置よりも良いかどうかを調べるときなどに使用される。正規分布においては、有意水準 \\(\\alpha\\) に対して、確率分布の右端の面積が \\(\\alpha\\) の領域を棄却域とし、現実の正規化標本平均 \\(Z\\) が棄却域に入ったら、帰無仮説を棄却する。| No.23: 二標本検定について例を交えて説明せよ 期待値がそれぞれ \\(\\mu_X, \\mu_Y\\) の二つの分布に従って取り出した独立同一分布に従う標本 $$ \\{X_i\\}_{i=1}&#94;{n_X}, \\{Y_i\\}_{i=1}&#94;{n_Y} $$ から帰無仮説 \\(\\mu_X = \\mu_Y\\) を検定するような手法。 例えば、ある反応での化合物の生成量を予測する問題を考える。 触媒Xと触媒Yでそれぞれ何度か実験を行い、それぞれの生成量を調べると、触媒Xの方が平均生成量が少なかった。このとき、触媒Yの方が優れていると結論付けてよいかはわからないので、 「触媒Xとの平均生成量の差が有意であるかどうか」 を二標本検定で調べる。 二つの標本はそれぞれ \\(\\mathcal{N}\\left(\\mu_X,\\sigma&#94;2\\right),\\mathcal{N}\\left(\\mu_Y,\\sigma&#94;2\\right)\\) に従うとすると、標本平均の差 \\(\\overline{X}-\\overline{Y}\\) は平均 \\(\\mu_X-\\mu_Y\\) 、分散 \\(\\frac{\\sigma&#94;2}{n_X}+\\frac{\\sigma&#94;2}{n_Y}\\) の正規分布に従う。 母分散が既知の時： 標本平均の差を標準化すると標準正規分布に従うので、棄却域を計算することができる。 母分散が未知の時： \\(t\\) 検定を行う。まず、分散 \\(\\sigma&#94;2\\) を標本から以下のように推定する。 $$ \\hat{\\sigma}&#94;2 = \\dfrac{\\sum_{i=1}&#94;{n_X} (X_i - \\overline{X})&#94;2 + \\sum_{i=1}&#94;{n_Y} (Y_i - \\overline{Y})&#94;2}{n_X + n_Y - 2} $$ このとき、 \\(\\hat{Z}\\) は自由度 \\(\\phi = n_X + n_Y - 2\\) の \\(t\\) 分布に従うので、その \\(t\\) 分布の棄却域を計算すればよい。 制約なし最適化 No.24: 制約なし最適化最適化問題における最適性条件について説明せよ 最適化問題の最適解であるための 必要条件 を最適性条件という。 No.25: 制約なし最適化問題の最適性条件について説明せよ \\(x&#94;{\\ast}\\) が(局所)最適解であるための必要条件は $$\\frac{\\partial}{\\partial x} f(x&#94;{\\ast}) = 0$$ である。 No.26: 凸関数の定義を述べよ 任意の \\(\\theta \\in [0, 1]\\) と \\(x, y \\in dom(f)\\) に対して $$f(\\theta x + (1 - \\theta) y) \\leq \\theta f(x) + (1 - \\theta)f(y)$$ が成立するとき、 \\(f\\) を凸関数という No.27: fが１階微分可能なときfが凸関数であるための必要十分条件について説明せよ 任意の \\(x, y\\) に対して $$f(x) \\ge f(y) + \\nabla f (x)&#94;T (x - y)$$ が成立することである。なお、このとき接線の方程式を \\(g\\) として \\(g \\leq f\\) が成立する No.28: fが２階微分可能なときfが凸関数であるための必要十分条件について説明せよ ヘッセ行列が半正定値であること。すなわち、任意の \\(x\\) に関して $$\\nabla&#94;2 f(x) \\ge 0$$ が成立することである。 No.29: 凸集合について説明せよ 任意の \\(\\theta \\in [0, 1]\\) と \\(x, y \\in S\\) に対して \\(\\theta x + (1 - \\theta) y \\in S\\) となるとき、 \\(S\\) を凸集合という。このとき、 \\(x\\) と \\(y\\) を結ぶ線分上の全ての点が \\(S\\) に属する。 No.30: 凸最適化問題における最適解の必要十分条件について説明せよ 凸関数 \\(f\\) において、 \\(x&#94;{\\ast}\\) が(局所)最適解であるための必要十分条件は $$\\frac{\\partial}{\\partial x} f(x&#94;{\\ast}) = 0$$ である。 No.31: 劣勾配と劣微分について説明せよ 任意の \\(x\\) に対して \\(f(x) \\ge f(x&#94;{\\prime}) + \\theta&#94;T (x - x&#94;{\\prime})\\) を満たすような \\(a\\) を(点 \\(x&#94;{\\prime}\\) における)劣勾配といい、劣勾配全体の集合を(点 \\(x&#94;{\\prime}\\) における)劣微分といい、 \\(\\partial f(x&#94;\\prime)\\) で表す。 なお、 \\(f\\) が微分可能であれば、劣勾配は \\(f\\) の微分に一致する。 No.32: ヘッセ行列とニュートン法について説明せよ 2回微分可能な関数 \\(f\\) に対して \\(H(x) = \\nabla&#94;2 f (x)\\) を点 \\(x\\) におけるヘッセ行列という。つまり、 $$ [\\nabla&#94;2 f(x)]_{j,j&#94;\\prime} = \\dfrac{\\partial&#94;2 f(x)}{\\partial x&#94;{(j)} \\partial x&#94;{(j&#94;\\prime)}} $$ である。ニュートン法は 、ステップ幅を \\(\\varepsilon_k \\in (0,1]\\) として、 $$x_{n+1} = x_n - \\varepsilon_k H(x_n)&#94;{-1} \\nabla f(x_n)$$ という更新式によって(最適性条件を満たす)最適解 \\(x&#94;{\\ast}\\) を求めるアルゴリズムである。一般の勾配降下法が一次微分の情報のみを用いるのに対し、二次微分の情報も用いるため、効率よく最適解に達することができるとされている。 No.33: 正割条件を導出し準ニュートン法との関係について説明せよ 目的関数 \\(f(x)\\) の \\(x_k\\) 周りでの二次近似 \\(f_k(x)\\) は $$ f_k(x) = f(x_k) + \\nabla f(x_k)&#94;T(x-x_k) + \\frac{1}{2}(x-x_k)&#94;T \\nabla &#94;2 f(x_k)(x-x_k) $$ であり、これを \\(x\\) で微分すると、その勾配 \\(\\nabla f_k(x)\\) は $$ \\nabla f_k(x) = \\nabla f(x_k)+\\nabla&#94;2 f(x_k)(x-x_k) $$ となる。 \\(x=x_{k-1}\\) とすると、 \\(\\nabla f(x_{k-1}) = \\nabla f_k(x_{k-1})\\) のとき、 $$ \\nabla&#94;2 f(x_k)(x_k-x_{k-1}) = \\nabla f(x_k) - \\nabla f(x_{k-1}) $$ を得る。これを 正割条件(secant condition) という。 なお、準ニュートン法では、正割条件を満たす \\(H_k\\) の中で性質の良いものを選ぶ。 制約付き最適化 No.34: 制約付き最適化等式制約付き最適化問題の最適性条件について説明せよ 等式制約付き最適化問題 $$ \\min_{x \\in dom(f)} f(x) \\quad \\textrm{subject} \\ \\textrm{to} \\ g(x) = 0 $$ の最適性条件は、 \\(x&#94;\\ast\\) が最適解のとき、 \\(\\nabla f(x&#94;\\ast)\\) と \\(\\nabla g(x&#94;\\ast)\\) が平行になること である。 No.35: ラグランジュ未定乗数法について説明せよ \\(\\min_x \\{ f(x) \\mid g(x)=0 \\}\\) という等式制約付き最適化問題があったときに、ラグランジュ関数 \\(L(x, \\lambda) = f(x) + \\lambda&#94;T g(x)\\) を最適化することでこの最適化問題を解く方法をラグランジュの未定乗数法という。 このとき、 \\(\\dfrac{\\partial }{\\partial x}L = 0, \\dfrac{\\partial}{\\partial \\lambda}L = 0\\) が最適性条件となる。 No.36: 双対上昇法について説明せよ 適当な初期値から ラグランジュ関数の最小化と双対変数の勾配上昇を交互に実行することで主変数を最適化する方法 である。このときに扱う問題はラグランジュ双対問題で、 $$ \\begin{align} f&#94;\\ast &= \\max_{\\lambda \\in \\mathbb{R}&#94;m} \\omega(\\lambda) \\\\ \\omega(\\lambda) &= \\inf_{x \\in \\chi} L(x,\\lambda) \\\\ L(x,\\lambda) &= f(x) + \\lambda&#94;T g(x) \\end{align} $$ 更新式は \\(\\varepsilon_k (>0)\\) をステップ幅として $$ \\begin{align} x_{k+1} &= \\textrm{argmin}_{x \\in \\chi} L(x,\\lambda_k) \\\\ \\lambda_{k+1} &= \\lambda_k + \\varepsilon_k g(x_{k+1}) \\end{align} $$ となる。 No.37: 射影勾配法について説明せよ 射影勾配法(gradient projection method)は、不等式制約付き最適化問題 $$ \\min_{x \\in \\chi} f(x) \\ \\textrm{subject} \\ \\textrm{to} \\ h(x) \\leq 0 $$ を解く手法の一つであり、 勾配降下 \\(\\tilde{x}_{k+1} = x_k - \\varepsilon_k \\nabla f(x_k)\\) 実行可能領域への射影 \\(x_{k+1}=P_k \\tilde{x}_{k+1}\\) を繰り返して最適化を行う。これらをまとめると、更新式は、 \\(x_{k+1}=P_k(x_k-\\varepsilon \\nabla f(x_k))\\) となる。射影が簡単に計算できる時には効率が良い。 No.38: KKT条件について説明せよ 不等式制約付き最適化問題における最適性条件である。一般には必要条件だが、凸最適化問題では必要十分条件となる。 \\(\\min_x \\{ f(x) \\mid g(x) = 0, h(x) \\le 0 \\}\\) なる最適化問題において、条件式は \\(\\nabla f(x&#94;{\\ast}) + \\nabla g(x&#94;{\\ast})&#94;T \\lambda&#94;{\\ast} + \\nabla h(x&#94;{\\ast})&#94;T \\mu&#94;{\\ast} = 0\\) \\(g(x&#94;{\\ast}) = 0\\) \\(h(x&#94;{\\ast}) \\le 0\\) \\(\\mu&#94;{\\ast} \\ge 0\\) \\(\\mu_i&#94;{\\ast} h_i(x&#94;{\\ast}) = 0 \\quad i = 1, \\dots, n\\) である。 教師あり学習 No.39: 教師あり学習教師あり学習について説明し、独自の応用例とその実現可能性・社会的影響について自由に述べよ 手持ちの正解付きデータを使って新たなデータに対する正解を予測するような機械学習の手法 のこと。 代表的な統計手法はとしては回帰と分類がある。前者は降水量の予測、後者は文字画像の認識などに使用される。 No.40: 最小二乗回帰について説明せよ 訓練出力との二乗誤差 $$E_D(\\mathbf{w}) = \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\|\\mathbf{t}_n-\\mathbf{y}\\left(\\mathbf{x}_n, \\mathbf{w}\\right)\\right\\|&#94;2$$ を最小にするモデルパラメータ \\(\\mathbf{w}\\) を求める手法。 ここで、 \\(y\\left(\\mathbf{x}_n, \\mathbf{w}\\right)\\) が \\(\\mathbf{w}\\) に関して線形な線形モデル \\(\\left(y\\left(\\mathbf{x}_n, \\mathbf{w}\\right) = \\mathbf{w}&#94;T\\boldsymbol{\\phi}(\\mathbf{x}_n)\\right)\\) のとき、 $$ \\begin{aligned} \\mathbf{w}_{\\text{ML}}&=\\left(\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi}\\right)&#94;{-1}\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\\\ \\boldsymbol{\\Phi}_{nj}&= \\phi_j(\\mathbf{x}_n) \\end{aligned} $$ と解が解析的に求まるという利点があるが、ノイズを含む訓練標本に過剰に適合する 過適合 という現象が起こるという欠点もある。 No.41: 正則化の役割と具体例について説明せよ モデルの複雑さに罰則を科すことで、不良設定問題を解いたり過学習を防いだりする手法のこと。理論的正当化はオッカムの剃刀にある。 具体的には正則化最小二乗回帰という手法があり、 $$ E_D(\\mathbf{w}) + \\lambda E_{\\mathbf{w}}(\\mathbf{w}) = \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\|\\mathbf{t}_n-\\mathbf{y}\\left(\\mathbf{x}_n, \\mathbf{w}\\right)\\right\\|&#94;2 + \\frac{\\lambda}{2}\\mathbf{w}&#94;T\\mathbf{w} $$ を計算する。最小二乗回帰と同様に解析的に解を求めると、 $$ \\mathbf{w}_{\\text{ML}} = \\left(\\lambda\\mathbf{I} + \\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi}\\right)&#94;{-1}\\boldsymbol{\\Phi}&#94;T\\mathbf{t} $$ となる。 No.42: 交差確認法の役割と具体例について説明せよ 採用した正則化パラメータ \\(\\lambda\\) やガウス幅 \\(h\\) などのハイパーパラメータの精度を判断するために交差確認法を行う。訓練データセットサイズが小さい場合でも適用することができる。 具体的には訓練標本 \\(Z = \\{(x_i,y_i)\\}_{i=1}&#94;n\\) を \\(k\\) 分割して、 \\(\\{Z_i\\}_{i=1}&#94;k\\) を作る。 \\(Z_i\\) 以外を使ってモデルを学習し、残った \\(Z_i\\) を使ってテスト誤差を確認する。これをすべての組み合わせに対して繰り返し、その平均を出力する。 最終的には、この平均が最も小さくなるようなハイパーパラメータを採用することにする。 No.43: マージンについて説明せよ サポートベクターマシンなどにおいて、 分類境界から最も近いデータ点までの距離 をマージンという。 データが線形分離できる場合： マージンの逆数の2乗であるハードマージンを最小化(マージンを最大化)するように分類境界を定める。 そうでない場合： ペナルティを加えたソフトマージンを最小化するように境界を定める。 マージンが大きい分類器は訓練データのずれに対して頑健であり、汎化誤差が小さくなりやすい。 No.44: 教師あり学習におけるカーネルトリックの役割と具体例を述べよ モデルの学習のための式中に現れる \\(\\phi(x)\\) などの特徴量を 直接 計算しなくても、その内積 \\(\\phi(x_i)&#94;T \\phi(x_j)(=K(x_i,x_j))\\) さえわかれば式を計算することができる。 そこで、カーネル関数を用いて式を書き直すと、標本数に対する計算量は悪化するが、 特徴空間が高次元の場合であっても(無限次元であっても)計算量は変わらない。 例えばカーネルトリックを使えば、非線形の基底を用いる分類問題 $$ \\min_\\theta [C\\sum_i \\max (0,1-f_\\theta (x_i) y_i) + \\theta&#94;T K \\theta ] $$ をステップ幅 \\(\\varepsilon (>0)\\) で、更新式を $$ \\theta \\leftarrow \\theta - \\varepsilon \\left( C\\sum_i \\partial_\\theta \\max (0,1-f_\\theta (x_i) y_i) + 2 K \\theta \\right) $$ とする劣勾配法を適用して解くことができる。 探索 No.45: 探索深さ優先探索について説明し、完全性・計算量・最適性に関して述べよ 行き止まりになるまで進み、ゴールが見つからなかったら直前の分岐に戻って別の道を探すアルゴリズム である。探索時のオープンリストをスタックにすることで実現できる。 最大分岐数を \\(b\\) 、最大の深さを \\(m\\) として、 完全性(必ず解が見つかるか): ( \\(m\\) が有限ならば)Yes 時間計算量: \\(O(b&#94;m)\\) 空間計算量: \\(O(bm)\\) 最適性(一番近くの解が見つかるか): No No.46: 幅優先探索について説明し、完全性・計算量・最適性に関して述べよ 分かれ道にきたらそれぞれの道を一歩ずつ進み、ゴールが見つからなかったらそれぞれの道をもう一歩ずつ進むアルゴリズム である。探索時のオープンリストを待ち行列にすることで実現できる。 最大分岐数を \\(b\\) ，一番浅い解の深さを \\(d\\) として， 完全性: Yes 時間計算量: \\(O(b&#94;d)\\) 空間計算量: \\(O(b&#94;d)\\) 最適性: Yes No.47: 反復深化探索について説明し、完全性・計算量・最適性に関して述べよ 深さに制限をつけて深さ優先探索を行い、徐々に深さを深くしていくアルゴリズム である。 最大分岐数を \\(b\\) ，一番浅い解の深さを \\(d\\) として， 完全性: Yes 時間計算量: \\(O(b&#94;d)\\) 空間計算量: \\(O(bd)\\) 最適性: Yes No.48: A*探索について説明せよ A*探索は、グラフ探索アルゴリズムの1つであり、あるノード \\(n\\) を経由する場合のコストを $$ f(n) \\equiv g(n) + h(n) $$ と分割する。ここで \\(g(n)\\) はスタートから \\(n\\) までに要するコストを表し、 \\(h(n)\\) は \\(n\\) からゴールまでに要するコストを表している。最適値については \\(\\ast\\) をつけて表すことにすれば $$ f&#94;{\\ast}(n) \\equiv g&#94;{\\ast}(n) + h&#94;{\\ast}(n) $$ となる。最適経路上の任意のノード \\(n&#94;{\\ast}\\) では \\(f(n&#94;{\\ast}) = f&#94;{\\ast}(n&#94;{\\ast})\\) であることを利用し、 \\(f&#94;{\\ast}(n)\\) の推定値 \\(\\hat{f}(n) \\equiv \\hat{g}(n) + \\hat{h}(n)\\) がより小さくなるノードを優先的に探索する。 ここで、 \\(\\hat{g}(n)\\) は探索済みノードから \\(n\\) に遷移する場合の最小値、 \\(\\hat{h}(n)\\) は \\(h(n)\\) のヒューリスティック推定値であり、8パズル問題などではマンハッタン距離などが使われる。 No.49: ミニマックス探索について説明せよ 想定される最大の損害が最小になるように決断を行う戦略 のことである。 ゲーム木のすべての局面のうち、 自分の手番では評価を最大化するような手 相手の手番では評価を最小化するような手 を選択するとして、最も評価を最大化できるような手を選ぶ探索手法を ミニマックス探索 という。 No.50: アルファ・ベータ探索について説明せよ max 計算の下界を \\(\\alpha\\) min 計算の上界を \\(\\beta\\) として、ミニマックス探索における不要な部分を枝刈りして探索効率を上げた探索手法をアルファ・ベータ法という。 No.51: モンテカルロ木探索について説明せよ 適当な深さ（一定回数以上試行した局面についてはより深く探索するようにする）まで その時点の評価値に基づいて 手を進め、それ以降はランダムにプレイ(ロールアウトを行う)して、勝敗判定を行い、勝率や試行回数などから計算される評価値を得る。 モンテカルロ木探索とは、これを繰り返すことで最適手順を探索する方法であり、UCBスコアを用いれば、無限回の試行で最適手順に収束することが知られている。 強化学習 No.52: 強化学習強化学習について説明し、独自の応用例とその実現可能性・社会的影響について自由に述べよ ある環境内におけるエージェントが、現在の状態を観測し、取るべき行動を決定する問題を扱う機械学習の一種。エージェントは行動を選択することで環境から報酬を得、それを基に方策(policy)を学習する。 具体的には、ロボットの障害物回避などに用いられる。 No.53: マルコフ決定問題および期待割引報酬和最大化について説明せよ 現在の状態 \\(s\\) を観測して行動 \\(a\\) を選択するマルコフ決定過程において、 得られる報酬が最大となるような方策を求める問題 をマルコフ決定問題という。よく用いられる指標として期待割引報酬和があり、次の式で表される。 $$ E\\left( \\sum_{t=0}&#94;\\infty \\gamma&#94;t R(s_t, a_t, s_{t+1}) \\right) $$ ここで \\(\\gamma\\) は0以上1未満の値をとり、割引率と呼ばれる。 \\(\\gamma\\) を大きくするとより長期的な視点で報酬を最大化し、 \\(\\gamma\\) を小さくするとより短期的な視点で報酬を最大化する。 No.54: ベルマン方程式について説明せよ 状態 \\(s\\) で行動 \\(a\\) をとり、その後政策 \\(\\pi\\) に従って行動を続けたときに得られる割引報酬の期待値を表す状態行動価値関数 \\(Q&#94;\\pi(s,a)\\) の定義式 $$ Q&#94;\\pi(s,a) = E \\left(\\sum_{t=0}&#94;\\infty \\gamma&#94;t R(s_t,a_t,s_{t+1}) | s_0=s,a_0=a \\right) $$ から導かれる方程式であり、具体的には「次に得られる報酬」と「その後に得られる報酬和」の期待値である。 $$ Q&#94;\\pi(s, a) = E\\left(R(s, a, s&#94;{\\prime}) + \\gamma Q&#94;\\pi(s&#94;{\\prime}, a&#94;{\\prime})\\right) $$ No.55: 政策反復法の欠点について説明せよ ベルマン方程式ではすべての状態 \\(s\\) 、行動 \\(a\\) に対して \\(Q&#94;\\pi(s,a)\\) を計算する必要があるため、計算量が大きくなってしまう。 特に状態や行動が連続値をとる場合には厳密に計算することができなかったり、ノイズを含む標本に過適合しやすかったりといった問題がある。 No.56: ベルマン二乗残差の最小化について説明せよ 状態行動価値関数 \\(Q&#94;\\pi\\) を何らかのモデルで近似し、ベルマン方程式の両辺の値の差(残差)を2乗したもの $$ [E(R(s, a, s') + \\gamma Q&#94;\\pi(s', a'))-Q&#94;\\pi(s, a)]&#94;2 $$ をベルマン二乗残差という。これを最小化する問題は通常の回帰問題になっている。 No.57: 逆強化学習について説明せよ 報酬関数も未知であるときに、それをデータから学習するような強化学習 を 逆強化学習(Inverse Reinforcement Learning; IRL) という。 報酬関数を \\(R_\\beta (s_t,a_t,s_{t+1})\\) のようにモデル化し、 \"良い\" 行動例をいくつか教えて良い行動に対する報酬が大きくなるようにパラメータ \\(\\beta\\) を学習する。 教師なし学習 No.58: 教師なし学習教師なし学習について説明し、独自の応用例とその実現可能性・社会的影響について自由に述べよ 正解の与えられていないデータのみから意味のある情報を取り出すような機械学習の手法の一つ。クラスタリングという手法がよく用いられる。音声信号の分離などに用いられる。 No.59: 主成分分析について説明せよ 射影誤差が最小となるような射影によって、高次元データを低次元データに圧縮する変換を 主成分分析(Principal component analysis; PCA) という。 \\(d\\) 次元のデータを \\(m\\) 次元に射影することを考える( \\(1 \\leq m \\ll d\\) )。 すると、射影誤差が最小となる射影 \\(T\\) が\"良い\"射影だと考えることができる。つまり、 $$ T_{PCA} = \\textrm{argmin}_{T \\in \\mathbb{R}&#94;{m \\times d}} \\left[ \\sum_i \\| T&#94;TTx_i-x_i\\|&#94;2\\right] \\quad \\textrm{subject to } T&#94;TT=I_m $$ が最も良い射影だと言える。このとき、 $$ \\sum_i \\| T&#94;TTx_i-x_i\\|&#94;2 = -\\textrm{tr} (TCT&#94;T) - \\textrm{tr} (C) \\quad (C = \\sum_i x_i x_i&#94;T) $$ となるので、 $$ T_{PCA} = \\textrm{argmax}_{T \\in \\mathbb{R}&#94;{m \\times d}} \\ \\textrm{tr}(TCT&#94;T) \\quad \\textrm{subject to } T&#94;TT=I_m $$ という関係が導ける。つまり、 \\(C\\) の固有ベクトルを正規化して固有値の大きいものから \\(\\xi_1,\\dots, \\xi_d\\) と選べば $$ T_{PCA} = (\\xi_1,\\dots, \\xi_m)&#94;T $$ が求められる。 No.60: 固有値問題について説明せよ 行列 \\(C\\) の固有値 \\(\\lambda_i\\) および固有ベクトル \\(\\xi_i\\) を求める問題を固有値問題という。これらは固有方程式 $$ C\\xi = \\lambda \\xi $$ の解として与えられる。固有ベクトルはすべて互いに直交し、内積はゼロになる。 No.61: ｋ-平均クラスタリングについて説明せよ クラスタ中心 \\(\\{\\mu_y\\}_{y=1}&#94;c\\) を適当に初期化した後、 各データ点が属するクラスの割当て $$ \\mu_y \\leftarrow \\dfrac{1}{n_y} \\sum_{i:y_i=y} x_i \\quad (i=1,\\dots,c) $$ 各クラスのクラスタ中心の更新 $$ y_i \\leftarrow \\textrm{argmin}_{y \\in \\{1,\\dots,c\\}} \\|x_i-\\mu_y\\|&#94;2 \\quad (i=1,\\dots c) $$ を交互に行うことで、ラベルなしのデータ点にクラスラベルをつけるアルゴリズム。 これはクラスタ内散布和の最小化問題の局所最適解を求めるアルゴリズムになっていて、k-平均クラスタリングによって得られたクラスタは凸になっている。 No.62: ｋ-平均クラスタリングにおけるカーネルトリックについて説明せよ 非線形な基底関数 \\(\\phi\\) によってデータ点 \\(x_i\\) を \\(\\phi(x_i)\\) に変換することで、非線形なクラスタの分類を行うことが可能になる。また、この \\(\\phi\\) の内積などをカーネル関数に置き換えることで、特徴量を直接計算することなくk-平均クラスタリングを適用できる。 自然言語処理 No.63: 自然言語処理について独自の応用例とその実現可能性・社会的影響について自由に述べよ No.64: 系列ラベリングが適用できる具体的な応用例を挙げ、定式化を与えよ 系列ラベリングの応用例として 形態素解析 固有名認識 DNA解析 音声解析 動作認識 などがある。このとき、 入力は記号列 で 出力はラベル列 である。 No.65: 隠れマルコフモデルの定義を与え、それを用いて品詞タグ付けを行う方法を説明せよ 隠れマルコフモデル(以下HMMとする)は、 状態集合 \\(S\\) 出力記号集合 \\(\\Sigma\\) 初期状態分布 \\(\\pi_i\\) 状態遷移確率 \\(a_{ij}\\) 出力確率 \\(b_{io}\\) の組で表現される。品詞タグ付けの例では、状態集合は品詞の集合、出力記号集合は単語の集合となっている。 パラメータ \\(\\pi_i, a_{ij}, b_{io}\\) が与えられたとき、生成確率 $$ p(s_{1:T}, o_{1:T}) = \\pi \\Pi_{t=T-1} a_{s_t,s_{t+1}} b_{s_t,o_t} $$ が最大となるような状態系列をビタビアルゴリズム等で求めることで品詞タグ付けを行う。 No.66: トレリス構造について説明し、品詞タグ付けとの関係を説明せよ トレリス構造は、 生成確率が最も高くなるような状態系列を求めるための枠組み である。縦軸は各状態、横軸は時刻に対応しており、トレリス上のパスは状態系列を表す。品詞タグ付けでは、縦軸は品詞、横軸は単語列となっている。 No.67: 隠れマルコフモデルのビタビアルゴリズムを説明せよ ビタビアルゴリズムとは、（観測データ系列の）生成確率が最大となるような状態系列を動的計画法によって求めるアルゴリズムである。時刻 \\(t\\) で状態 \\(s_t=k\\) にいたる状態系列の最大確率を $$ q_t(k) \\equiv \\max_{s_{1:t-1}} p(s_{1:t-1}, o_{1:t}, s_t=k) $$ と定義すると、 $$ q_{t+1}(k) = \\max_{i} [ q_t(i) a_{i, k} ] b_{k, o_{t+1}} $$ と書けるので、動的計画法によって \\(q_t(k)\\) を順に求めることができる。 状態数を \\(K\\) 、系列の長さを \\(T\\) とすると、素朴に計算すると計算量 \\(O(K&#94;T)\\) かかるが、ビタビアルゴリズムでは \\(O(TK&#94;2)\\) で済む。これは各系列位置で各状態への最適経路は一つ前の系列位置での各状態への最適経路とそこからの遷移確率を用いて \\(O(K)\\) で計算でき、これが状態数と系列の長さ分だけあるので、合計で \\(O(TK&#94;2)\\) の計算量になるからである。 No.68: 隠れマルコフモデルのパラメータの教師付き学習方法を説明せよ 訓練データの状態系列が既知であるときには人手で正解を付与したデータであるタグ付きコーパスなどから教師つき学習によってパラメータを推定することができる。パラメータの推定方法の1つに最尤推定法がある。最尤推定法では、学習データの尤度(生成確率)を最大化するようにパラメータを決定する。 HMMのパラメータ \\(\\pi_i,a_{i,j},b_{i,o}\\) を求めるためには $$ \\begin{align} p(o_{1:T},s_{1:T})&=p(s_1) \\prod_{t=1}&#94;T p(s_{t+1}|s_t)p(o_t|s_t)=\\pi_{s_1} \\prod_{t=1}&#94;T a_{s_t,s_{t+1}}b_{s_t,o_t} \\\\ &\\textrm{s.t. } \\sum_{i \\in S} \\pi_i = 1, \\sum_{j \\in S} a_{i,j} = 1, \\sum_{a \\in \\Sigma} b_{i,o} = 1 \\end{align} $$ を最大化すれば良いので、これを計算すると、結果は $$ \\begin{align} \\pi_i &= \\dfrac{C(s_1=i)}{\\sum_{i \\in S} C(s_1=i)} \\\\ a_{i,j} &= \\dfrac{C(i,j)}{\\sum_{j \\in S} C(i,j)} \\\\ b_{i,o} &= \\dfrac{C(i,o)}{\\sum_{o \\in \\Sigma} C(i,o)} \\end{align} $$ となる。 No.69: 前向き・後向き確率の定義を与え、効率的な計算方法を説明せよ 時刻 \\(t\\) ・状態 \\(i\\) にいたる全ての系列の確率の和を前向き確率 時刻 \\(t\\) ・状態 \\(i\\) から最後に至る全ての系列の確率の和を後ろ向き確率 という。それぞれ $$ \\begin{align} \\alpha_t(i) &\\equiv p(o_{1:t}, s_t=i | \\theta&#94;{old}) \\\\ \\beta_t(i) &\\equiv p(o_{t+1:T} | s_t=i, \\theta&#94;{old}) \\end{align} $$ で表される。これは動的計画法で再帰的に計算できて $$ \\begin{align} \\alpha_{t+1}(i) &= \\sum_{j \\in S} [a_{j,i} \\alpha_t(j)] b_{i, o_{t+1}} \\\\ \\beta_{t-1}(i) &= \\sum_{j \\in S} [a_{i,j} b_{j, o_t} \\beta_t(j)] \\end{align} $$ となる。 No.70: Baum-Welch アルゴリズムについて説明せよ 訓練データの状態列が未知であるときに、状態および状態遷移の期待値とパラメータを交互に推定していくアルゴリズムである。詳しく言えば、「現在のパラメータ \\(\\theta&#94;{old}\\) によって状態の期待値を計算する」「状態の期待値を使ってパラメータを更新する」を収束するまで繰り返す。ここで、状態の期待値は $$ \\begin{align} \\gamma_t(i) &\\equiv p(s_t=i| o_{1:T},\\theta&#94;{old}) \\\\ \\xi_t(i,j) &\\equiv p(s_t=i, s_{t+1}=j| o_{1:T},\\theta&#94;{old}) \\end{align} $$ と定義される。これらは前向き確率・後ろ向き確率を用いて効率的に計算できる。 No.71: ビタビアルゴリズムと前向き・後向きアルゴリズムの関係について説明せよ ビタビアルゴリズムは 「積の最大値」 前向き・後ろ向きアルゴリズムは 「積の和」 を順に求めている点で類似している。両方とも分配法則を利用しているので、半環なら同じアルゴリズムが適用できる。 No.72: ログ線形モデルによる品詞タグ付け方法について説明せよ ログ線形モデルでは、特徴ベクトルを \\(\\boldsymbol{\\phi}\\) として $$ p(y|x) \\propto exp(\\mathbf{w}&#94;T \\boldsymbol{\\phi}(\\mathbf{x}, y)) $$ という生成分布を考えて、パラメータ \\(\\mathbf{w}\\) を最尤推定する。ここで \\(\\mathbf{x}\\) はデータであり、 \\(y\\) はそのラベルである。 品詞タグ付けの場面では、 \\(\\mathbf{x}\\) は入力された単語列、 \\(y\\) はその品詞列(隠れ状態)であり、 \\(\\mathbf{w}&#94;T \\boldsymbol{\\phi}(\\mathbf{x}, y)\\) を最大化するような \\(y\\) を求める問題となる。 No.73: 条件付き確率場の定義を与え、隠れマルコフモデルに対する優位性を説明せよ 条件付き確率場とは、ログ線形モデルによる構造予測において用いられる枠組みである。 単純なログ線形モデルでは \\(\\mathbf{w}&#94;T \\phi(\\mathbf{x}, y)\\) を最大化するような \\(y\\) を求めるのが困難であるが、特徴ベクトルを状態・遷移に分解できると仮定することでHMMで行うような動的計画法のアルゴリズムが利用できる。 No.74: 条件付き確率場のビタビアルゴリズムを説明せよ HMMのビタビアルゴリズムとほぼ同様である。 No.75: 条件付き確率場のパラメータ推定アルゴリズムを説明せよ HMMのアルゴリズムとほぼ同様である。 No.76: CKY法について具体例（曖昧性のある文脈自由文法）を挙げて説明せよ Chomsky標準形(CNF)のCFGの構文解析アルゴリズム。 No.77: 確率文脈自由文法(PCFG)の定義を与え、それを用いて構文解析を行う方法を説明せよ CFG(文脈自由文法)に生成規則が適用される確率を導入したものをPCFGという。 入力された単語列に対して、それを生成するような構文木のうち確率が最大となるものを単語列に対応する構文木とする。確率を導入することで曖昧性が解消される。 No.78: 確率文脈自由文法(PCFG)による構文解析のビタビアルゴリズムを説明せよ 通常の(CFGにおける)のCKY法ではCKY表の各セルに 「生成される非終端記号」 を書き込んでいくが、PCFGにおけるCKY法では、各セルに 「非終端記号とそれを生成する確率の最大値」 を書き込んでいく。これによって、効率的に生成確率を求めることができる。 No.79: 確率文脈自由文法(PCFG)の学習方法について説明せよ 構文木のデータセット(ツリーバンク)を利用して学習を行う。ツリーバンクにおける品詞の出現頻度に基づいて生成規則の確率を推定する。 No.80: 確率文脈自由文法(PCFG)による自然言語構文解析の精度が低い原因を具体例を挙げて説明し、構文解析精度を上げる方法を議論せよ 同じ品詞列でも単語によって構文木の形が変わるから。例えば We applied the algorithm to parsing. と We selected the approach to parsing. がその一例である。そのため、品詞だけでなく単語の意味や熟語なども使って構文解析を行う必要がある。 No.81: 確率文脈自由文法(PCFG)の応用例(自然言語の構文解析以外)を挙げ、その実現可能性・社会的影響について自由に述べよ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-glossary.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-glossary.html"},{"title":"進化生態情報学 第7回","text":"講師： 岩崎渉 参考書： 分子系統学への統計的アプローチ -計算分子進化学-（共立出版、2009） 参考書： 進化ー分子・個体・生態系（メディカルサイエンスインターナショナル、2009） 参考書： 分子進化と分子系統学（培風館、2006） 参考書： Brock Biology of Microorganisms 14th Edition（Benjamin Cummings、2014） 参考書： ディジタル画像処理 改訂新版（CG-ARTS協会、2015） In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt from OpenCV.plot_img import cv2plot 生物学と画像処理 ※ 数字は参考書： ディジタル画像処理 改訂新版（CG-ARTS協会、2015） の章に基づいている。 2. ディジタル画像の撮影 2-4-1. グレースケール画像 2-4-2. 標本化と量子化 3. 画像の性質と色空間 3-1-1. 画像の統計量 3-1-2. コントラストとシャープネス 4. 画素ごとの濃淡変換 4-1. 明るさ・コントラストの変換 4-3-2. 疑似カラー 4-4-1. 画像間演算 5. 領域に基づく濃淡変換（空間変換） 5-1. 空間フィルタリング 5-2. 平滑化 5-3. エッジ抽出 5-4. 鮮鋭化 6. 周波数領域におけるフィルタリング 6-1. 画像のフーリエ変換 6-2. 周波数フィルタリング 9. 2値画像処理 9-1. 2値化 9-2-1. 連結性 9-2-2. 輪郭追跡 9-2-4. 収縮・膨張処理 9-2-6. ラベリング 9-3. 線画像のベクトル化 10. 領域処理 10-2-3. ミーンシフトを用いた領域分割処理 11. パターン・図形・特徴の検出とマッチング 11-3-1. コーナー検出 11-3-2. DoG画像を用いた特徴点とスケールの検出 11-4-1. スケールと回転に不変な特徴記述(SIFT) 13. 動画像処理 13-1. 差分画像を用いた移動物体検出 13-2. オプティカルフロー 16. 画像符号化 16-3-1. ハフマン符号化 16-5-1. ランレングス符号化 In [2]: img = cv2 . imread ( \"Lenna.png\" ) fig , ax = plt . subplots ( figsize = ( 6 , 6 )) ax = cv2plot ( img , ax = ax ) ax . set_title ( \"Sample Image: Lenna\" ) plt . show () 2. ディジタル画像の撮影 2-4-1. グレースケール画像 元々グレースケールの画像 カラー画像データはより多くの情報を含むが、カラー情報が必要ない事もある。 （生物分野だと必要ない事が多いらしい。） 単一チャネルでのアルゴリズムが既に確立している場合 計算時間を短縮したい場合 特定チャンネルのデータに興味がある場合（蛍光など） RGBの3チャネルの情報をまとめてグレースケール変換する手法 単純：(R+G+B)/2 人間の光受容を考慮：(2R+4G+B)/7 In [3]: opencv_ch = [ \"red\" , \"green\" , \"blue\" ] In [4]: fig , axes = plt . subplots ( ncols = 3 , nrows = 1 , figsize = ( 18 , 6 )) for i ,( ax , ch ) in enumerate ( zip ( axes , opencv_ch )): ax . imshow ( img [:,:, i ], cmap = 'gray' ) ax . set_title ( f \" { ch } channel.\" , fontsize = 20 , color = ch ) plt . tight_layout () plt . show () In [5]: cv2_gray = cv2 . cvtColor ( img , cv2 . COLOR_BGR2GRAY ) pure_gray = np . mean ( img , axis = 2 , dtype = np . int ) cie_gray = np . average ( img , axis = 2 , weights = [ 0.298912 , 0.586611 , 0.114478 ]) . astype ( np . int ) In [6]: grays = [ cv2_gray , pure_gray , cie_gray ] titles = [ \"OpenCV default\" , \"Average\" , \"Weighted Average\" ] In [7]: fig , axes = plt . subplots ( ncols = 3 , nrows = 1 , figsize = ( 18 , 6 )) for i , ax in enumerate ( axes ): ax . imshow ( grays [ i ], cmap = 'gray' ) ax . set_title ( titles [ i ], fontsize = 20 ) plt . tight_layout () plt . show () 2-4-2. 標本化と量子化 標本化(sampling) ：アナログ信号から、離散的な位置におけるアナログ値を取り出す処理。 量子化(quantization) ：標本値を有限分解能の数値に変換する処理。(ex.8ビット量子化→(0-255),1ビット量子化→2値画像) 標本化により画像は一般的に横 $M$ 個・縦 $N$ 個の 画素(pixel) で表現される。 原点 $(0,0)$ は \"左上\" である事が多い。 3次元ではさらに奥行き方向(voxel)にも標本化を行う。 動画ではさらに時間軸方向(temporal)にも標本化を行う。 画像の標本化では、2次元的な像(アナログ画像)の光強度に対して、縦横に等間隔の格子状に配置した 標本点(sampling point) における光強度を電圧値として取り出す。 標本点 の間隔を 標本化間隔(sampling interval) と呼び、 標本点 におけるアナログ値を 標本値(sampling value) と呼ぶ。 標本化間隔 が周波数成分の半分よりも大きいと、 エリアシングノイズ(aliasing noise) が発生する事がある。 3. 画像の性質と色空間 3-1-1. 画像の統計量 横軸に画素値、縦軸にそれぞれの画素値の頻度を取る 濃淡ヒストグラム（単にヒストグラム） が一般的。 その他、 平均値 ・ 分散 ・ 中央値(median) ・ 最頻値(mode) など。 ヒストグラムが詰まっている → コントラストが低い In [8]: fig , ( axgray , ax3ch ) = plt . subplots ( ncols = 2 , nrows = 1 , figsize = ( 12 , 4 ), sharey = True , sharex = True ) axgray . hist ( np . ravel ( cv2_gray ), bins = 256 , color = \"black\" , density = True ) for i , ch in enumerate ( opencv_ch ): ax3ch . hist ( np . ravel ( img [:,:, i ]), bins = 256 , color = ch , density = True , alpha = 0.3 ) axgray . set_ylabel ( \"Frequency\" , fontsize = 16 ) axgray . set_title ( \"Grayscale Image.\" ), ax3ch . set_title ( \"RGB 3ch Image.\" ) plt . show () 3-1-2. コントラストとシャープネス コントラスト は、画像のヒストグラムの分布の広がりを表す。画素値の最大値を $I_{\\max}$、最小値を $I_{\\min}$ とするとき、以下のような求め方がある。 $$ \\begin{aligned} C_1 &= I_{\\max} - I_{\\min}\\\\ C_2 &= \\left(I_{\\max} - I_{\\min}\\right) / \\left(I_{\\max} + I_{\\min}\\right)\\\\ C_3 &= I_{\\max} / I_{\\min} \\end{aligned} $$ どの求め方も外れ値に対して敏感である。そのため、頻度が一定値よりも小さな画素値を考慮しない、などの工夫が必要になる。 $C_2$ を使うと、$I_{\\min}=0$ のとき、$\\forall I_{\\max}C_2=1$ となるので注意が必要である。 シャープネス（鮮鋭度;sharpness） は、画像を見た時に感じる鮮鋭感を表す尺度である 鮮鋭度が 高い 画像：エッジ付近の画素値変化が急激で、画像中の細やかな部分まで鮮明に観察する事ができる。 鮮鋭度が 低い 画像：ピントが合ってないような印象を受け、エッジ付近の画素値変化が緩やかで、画像中の細やかな部分を読み取りにくい。 4. 画素ごとの濃淡変換 4-1. 明るさ・コントラストの変換 ディジタル画像の各画素は、その濃淡を表す値（画素値）を持っている。そこで、画像の濃淡を変化させるためには、 「入力画像のそれぞれの画素値」 に対し、 「出力画像の画素値」 をどのように対応づけるか指定すれば良い。 そのような対応関係を与える関数のことを 階調変換関数(gray-level transformation function) 、また、それをグラフで表したものを トーンカーブ(tone curve) と呼ぶ。 In [9]: pixels = np . arange ( 0 , 2 ** 8 , 1 ) colors = [ \"black\" , \"green\" , \"red\" , \"blue\" ] gammas = [ 1 , 1.5 , 2 , 3 ] In [10]: gamma_transform = lambda x , gamma : 255 * ( x / 255 ) ** gamma In [11]: plt . figure ( figsize = ( 6 , 6 )) for gamma , color in zip ( gammas , colors ): plt . plot ( pixels , gamma_transform ( pixels , 1 / gamma ), color = color , linestyle = \":\" , label = f \"$\\gamma= { 1 / gamma : .2f } $\" ) plt . plot ( pixels , gamma_transform ( pixels , gamma ), color = color , label = f \"$\\gamma= { gamma : .1f } $\" ) plt . legend (), plt . title ( \"Gamma tone Curve\" ) plt . show () 有名な トーンカーブ に、上図の ガンマ補正（ガンマ変換） がある。これは、以下の形で表される。 $$y = 255\\left(\\frac{x}{255}\\right)&#94;{\\gamma}$$ ここで、$y=x$ よりも下側（$\\gamma > 1$）だと出力画像が入力画像に比べて明るくなり、上側（$\\gamma < 1$）はその逆が起こる事がわかる。 また、コントラストが低い画像は S字トーンカーブ を用いて変換される事がある。これは、binの密度が高い部分を引き延ばす事で、コントラストを上げている。（ ヒストグラム平坦化(histogram equalization) と似ている。） 4-3-2. 疑似カラー R,G,B各チャンネルに対して 適当に異なるトーンカーブを用いる ことで、グレースケール画像に対して疑似的な色（ 疑似カラー(pseudo color) ）をつける事ができる。 グレースケール画像の解釈を容易にする。（区別のつきにくい微妙な濃淡の違いを 視覚的に 表現できる。） 正解画像データの作成時に利用する。 診断補助に用いる。 In [12]: def apply_pseudo_color ( x ): r = 255 if x >= 192 else 0 if x <= 128 else 4 * ( x - 128 ) g = 255 if 64 <= x <= 192 else 4 * x if x <= 64 else 4 * ( 255 - x ) b = 255 if x <= 64 else 0 if x >= 128 else 4 * ( 128 - x ) return ( r , g , b ) In [13]: R , G , B = np . vectorize ( apply_pseudo_color )( pixels ) In [14]: plt . plot ( R , color = \"red\" ) plt . plot ( G , color = \"green\" ) plt . plot ( B , color = \"blue\" ) plt . xlabel ( \"Input pixel\" , fontsize = 16 ), plt . ylabel ( \"Output pixel\" , fontsize = 16 ), plt . title ( \"Simple Pseudo Color Transformer.\" , fontsize = 14 ) plt . xticks ([ 0 , 255 ]), plt . yticks ([ 0 , 255 ]) plt . show () In [15]: pseudo_img = np . stack ( np . vectorize ( apply_pseudo_color )( cv2_gray ), axis =- 1 ) In [16]: fig , axes = plt . subplots ( ncols = 2 , nrows = 1 , figsize = ( 12 , 6 )) axes [ 0 ] . imshow ( cv2_gray , cmap = 'gray' ), axes [ 0 ] . set_title ( \"Grayscale\" , fontsize = 16 ) axes [ 1 ] . imshow ( pseudo_img ), axes [ 1 ] . set_title ( \"Pseudo Color\" , fontsize = 16 ) plt . tight_layout () plt . show () 4-4-1. 画像間演算 複数の入力画像（$f_1,f_2$）の同じ画素に対して AND , OR などの 論理演算(logic operation) や 四則演算(arithmetic operation) などの演算を用いて出力画像（$g$）を生成する。例としては、 アルファブレンディング(alpha blending) ： $$g = \\alpha f_1 + \\left(1-\\alpha\\right)f_2$$ ディゾルブ(dissolve) ・ オーバーラップ(overlap) ：$\\alpha$ の値を画素の位置で変化させる。 エンボス(emboss) ：濃淡を反転した画像（$\\bar{f_1}$）を平行移動させ（$\\bar{f_1}_{x+dx}$）元の画像と足し合わせる。 $$g = f_1 + \\bar{f_1}_{x+dx} - 128$$ In [17]: def emboss ( f1 , dx = 0.01 , constant_values = 0 ): \"\"\" @params f1: shape=(H,W) must be the grayscale image. @params dx: (int,float) distance of translation. \"\"\" H , W = f1 . shape if dx < 1 : dx = min ( H , W ) * dx dx = int ( dx ) f1_inv = 255 - f1 f2 = np . pad ( f1_inv , ( 0 , dx ), 'constant' , constant_values = constant_values )[ - H :, - W :] g = np . clip ( f1 + f2 - 128 , 0 , 255 ) . astype ( int ) return g In [18]: embossed_img = emboss ( cv2_gray , dx = 2 ) In [19]: fig , axes = plt . subplots ( ncols = 2 , nrows = 1 , figsize = ( 12 , 6 )) axes [ 0 ] . imshow ( cv2_gray , cmap = 'gray' ), axes [ 0 ] . set_title ( \"Grayscale\" , fontsize = 16 ) axes [ 1 ] . imshow ( embossed_img , cmap = 'gray' ), axes [ 1 ] . set_title ( \"Embossed\" , fontsize = 16 ) plt . tight_layout () plt . show () 5. 領域に基づく濃淡変換（空間変換） 5-1. 空間フィルタリング 「画素ごと(pixel-to-pixel operation)に」 画素値を変換するのではなく、 「周囲の画素の画素値も利用して(area-to-pixel operation)」 画素値を変換する。 大別すると、 「線形フィルタ(linear filter)」 と 「非線型フィルタ(nonlinear filter)」 がある。 線形フィルタは以下で表される。 $$g(i,j) = \\sum_{n=-W}&#94;W\\sum_{m=-W}&#94;Wf(i+m,j+n)h(m,n)$$ 非線型フィルタは、上記以外で表されるもの全てである。 In [20]: def apply_filter ( img , f ): \"\"\" @params img: (ndarray) Grayscale Image, shape=(W,H) @params f : (ndarray) Filter: shape=(FW,FH) @params out: (ndarray) Output Image, shape=(OW,OH) \"\"\" W , H = img . shape FW , FH = f . shape OW , OH = ( W - FW + 1 , H - FH + 1 ) out = np . zeros ( shape = ( OW , OH )) for i in range ( OW ): for j in range ( OH ): out [ i , j ] = np . sum ( f * img [ i : i + FW , j : j + FH ]) out = np . clip ( out , 0 , 255 ) . astype ( int ) return out 5-2. 平滑化 平滑化(smoothing) を行うと、画像の濃淡変化を滑らかにする事ができる。したがって、画像に含まれるノイズなどの不要な濃淡変化を軽減するために用いられる。 In [21]: def mk_average_filter ( filter_size ): \"\"\"filter_size: (int)\"\"\" if filter_size <= 0 : return np . ones ( shape = ( 1 , 1 )) return np . full ( shape = ( filter_size , filter_size ), fill_value = 1 / filter_size ** 2 ) In [22]: filter_sizes = [ 0 , 3 , 5 ] In [23]: fig , axes = plt . subplots ( ncols = 3 , nrows = 1 , figsize = ( 18 , 6 )) for ax , fs in zip ( axes , filter_sizes ): f = mk_average_filter ( fs ) ax . imshow ( apply_filter ( cv2_gray , f ), cmap = 'gray' ) ax . set_title ( f \"Filter Size: { fs } \" , fontsize = 20 ) plt . tight_layout () plt . show () ※ だんだんとボケているのがわかる。 他にも、 加重平均フィルタ(weighted average filter) ガウシアンフィルタ(gaussian filter) メディアンフィルタ(median filter) 特定方向の平滑化 などがある。 5-3. エッジ抽出 エッジ抽出(edge extraction) は、画像中で明るさが急激に変化するエッジ部分を取り出す事であり、 微分フィルタ ：連続関数の場合は $$f&#94;{\\prime}(x) = \\lim_{h\\rightarrow0}\\frac{f(x+h)-f(x)}{h}$$ で微分が計算できるが、デジタル画像の場合には、 注目画素とその隣接画素との差分 で置き換えられる。 プリューウィットフィルタ(Prewitt filter) ： 微分フィルタでは、エッジ部分を抽出すると同時に 「画像に含まれるノイズを強調する」 傾向がある。そこで、 ノイズを抑えながらエッジを強調する ために、 「 ある方向への微分」 と 「それに直交する方向に関する平滑化」 を施すことを考えたフィルタ。 ソーベルフィルタ(Sobel filter) ： プリューウィットフィルタ(Prewitt filter)における「縦方向への平滑化」のときに、中央に重みを付けた平均化を行う方法。 2次微分フィルタ(second derivative filter) : 上記の微分フィルタの概念を拡張し、微分を2回繰り返したフィルタ。 ラプラシアンフィルタ(Laplacian filter) ： 2次微分の値を用いてラプラシアンを $$\\frac{\\partial&#94;2}{\\partial x&#94;2}f(x,y) + \\frac{\\partial&#94;2}{\\partial y&#94;2}f(x,y)$$ 求める事ができるので、これを用いて 方向に依存しないエッジを直接得る。 LoGフィルタ ： 一般に、ラプラシアンは微分を繰り返すため、ノイズを強調してしまう。そこで、まずガウシアンフィルタを適用してある程度の平滑化を行ったのち、ラプラシアンフィルタを施す事がよく行われる。2次元ガウス分布のラプラシアンは $$h_{log}(x,y) = \\frac{x&#94;2+y&#94;2-2\\sigma&#94;2}{2\\pi\\sigma&#94;6}\\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)$$ で得られるので、この $h_{log}(x,y)$ を係数とするフィルタを用意すれば良い。 In [24]: prewitt_filter_h = 1 / 6 * np . array ([[ - 1 , 0 , 1 ],[ - 1 , 0 , 1 ],[ - 1 , 0 , 1 ]]) prewitt_filter_v = np . rot90 ( prewitt_filter_h ) sobel_filter_h = 1 / 8 * np . array ([[ - 1 , 0 , 1 ],[ - 2 , 0 , 2 ],[ - 1 , 0 , 1 ]]) sobel_filter_v = np . rot90 ( sobel_filter_h ) In [25]: filters = [ [ prewitt_filter_h , prewitt_filter_v ], [ sobel_filter_h , sobel_filter_v ] ] titles = [ [ \"Prewitt filter (Vertical)\" , \"Prewitt filter (Horizontal)\" ], [ \"Sobel filterr (Vertical)\" , \"Sobel filter (Horizontal)\" ], ] In [26]: fig , axes = plt . subplots ( ncols = 2 , nrows = 2 , figsize = ( 8 , 8 )) for i , ax_cols in enumerate ( axes ): for j , ax in enumerate ( ax_cols ): ax . imshow ( apply_filter ( cv2_gray , filters [ i ][ j ]), cmap = 'gray' ) ax . set_title ( f \"Filter: { titles [ i ][ j ] } \" ) plt . tight_layout () plt . show () In [27]: derivative_filter = np . array ([[ 0 , 0 , 0 ],[ - 1 / 2 , 0 , 1 / 2 ],[ 0 , 0 , 0 ]]) second_derivative_filter = np . array ([[ 0 , 0 , 0 ],[ 1 , - 2 , 1 ],[ 0 , 0 , 0 ]]) laplacian_filter = np . array ([[ 0 , 1 , 0 ],[ 1 , - 4 , 1 ],[ 0 , 1 , 0 ]]) In [28]: filters = [ derivative_filter , second_derivative_filter , laplacian_filter ] titles = [ \"Derivative Filter (Horizontal)\" , \"Second Derivative Filter (Horizontal)\" , \"Laplacian Filter\" ] In [29]: fig , axes = plt . subplots ( ncols = 3 , nrows = 1 , figsize = ( 18 , 6 )) for i , ax in enumerate ( axes ): ax . imshow ( apply_filter ( cv2_gray , filters [ i ]), cmap = 'gray' ) ax . set_title ( f \"Filter: { titles [ i ] } \" , fontsize = 20 ) plt . tight_layout () plt . show () 5-4. 鮮鋭化 上のフィルタは、画像のエッジ部分だけを取り出すようなものであった。ここでは、 元の画像の濃淡を残したまま エッジを強調する 、画像の 鮮鋭化(sharpening)処理 を考える。 入力画像に対して平滑化処理を施し、その結果を元の画像から引く → 元の画像のエッジ部分が取り出されたような画像が得られる。 それを元の入力画像と足し合わせることにより、画像のエッジが強調された（鮮鋭化された）画像が得られる。 このような処理を アンシャープマスキング(unsharp masking) と呼ぶ。 なお、この二段階の処理は上記のエッジ抽出のフィルター同様一つのフィルタ（ 鮮鋭化フィルタ(sharping filter) ）で表現する事ができる。 In [30]: def mk_sharpening_filter ( k , filter_size = 3 ): f = np . full ( shape = ( 3 , 3 ), fill_value =- k / 9 ) f [ 1 ][ 1 ] = 1 + 8 / 9 * k return f In [31]: ks = [ 4 , 9 , 18 ] In [32]: fig , axes = plt . subplots ( ncols = 3 , nrows = 1 , figsize = ( 18 , 6 )) for ax , k in zip ( axes , ks ): f = mk_sharpening_filter ( k ) ax . imshow ( apply_filter ( cv2_gray , f ), cmap = 'gray' ) ax . set_title ( f \"Filter Size: { fs } \" , fontsize = 20 ) plt . tight_layout () plt . show () 6. 周波数領域におけるフィルタリング 画像のフーリエ変換 2次元画像は、2次元空間で定義される関数 $f(x,y)$ として表されるので、 2次元フーリエ変換 を行う事で、 $x,y$ で表される 空間領域(spatial domain) $u,v$ で表される 周波数領域(frequency domain) を関連づける事ができる。 $$ \\begin{cases} \\begin{aligned} F(u,v) &= \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty} f(x,y)\\exp\\left\\{-j2\\pi\\left(ux+vy\\right)\\right\\}dxdy & \\left(\\text{Fourie transform}\\right)\\\\ f(x,y) &= \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty} F(u,v)\\exp\\left\\{-j2\\pi\\left(ux+vy\\right)\\right\\}dudv & \\left(\\text{inverse Fourie transform}\\right)\\\\ \\end{aligned} \\end{cases}\\\\ j = \\sqrt{-1} $$ なお、上は 連続関数のフーリエ変換 であるが、ディ 離散的フーリエ変換(discrete Fourier transform) ジタル画像を変換する場合には、 離散的逆フーリエ変換(inverse discrete Fourier transform) を用いる。 さらに、その計算を高速に実行する 高速フーリエ変換(Fast Fourier transform; FFT) があり、実用的によく用いられている。 なお、お気持ち的には、 「2次元の様々な周波数の三角関数（ex.$z = \\sin(ax)\\cdot\\sin(by)$）」 が入力にどの程度含まれているかを周波数ごとに分解する事で調べる。 周波数フィルタリング 画像はフーリエ変換により、 周波数領域における別の形で表現する事ができる。 フーリエ変換の結果は、 画像に含まれるそれぞれの周波数成分を示している。 フーリエ変換の 各周波数成分の大きさを各成分ごとに変える 事により、元の画像の性質を変化させる事ができる。 このような処理を 周波数フィルタリング(frequency filtering) と呼ぶ。 元の画像をフーリエ変換したものを $F(u,v)$ フィルタリングの出力を $G(u,v)$ 周波数フィルタを $H(u,v)$ とするとき、周波数フィルタリングは $$G(u,v) = F(u,v)H(u,v)$$ として表される。なお、周波数フィルタリングでは、 入力の各周波数成分 $F(u,v)$ が、周波数ごとにフィルタ $H(u,v)$ と掛け算され、出力 $G(u,v)$ となる。 周波数フィルタの具体例として、 「画像に含まれる空間周波数成分のうち、ある特定の範囲の周波数成分を残す」 ようなタイプのフィルタとして、 ローパスフィルタ(lowpass filter) ：低周波数成分のみ残す。 ハイパスフィルタ(highpass filter) ：高周波数成分のみ残す。 バンドパスフィルタ(bandpass filter) ：ある中間的な周波数の範囲を残す。 ガウス分布型のローパスフィルタ ：空間領域のガウシアンフィルタに対応。 などがある。一方、上記のハイパスフィルタでは、画像の直流成分を含む低周波数成分を除去してしまうため、画像の平均的な明るさが保たれないという問題がある。 そこで、画像の低周波数成分は そのまま保ち つつ、高周波数成分を 強調 するフィルタとして 高域強調フィルタ(high-emphasis filter) がある。 9. 2値画像処理 9-1. 2値化 目的に応じて具体的な手法は様々。 判別分析法(discriminant analysis method)（大津の2値化） が有名。 変数 意味 $$t$$ しきい値 $$m_1,\\sigma_1&#94;2,\\omega_1$$ 黒画素クラスの平均・分散・画素数 $$m_2,\\sigma_2&#94;2,\\omega_2$$ 白画素クラスの平均・分散・画素数 $$\\sigma_{\\omega}&#94;2 = \\frac{\\omega_1\\sigma_1&#94;2 + \\omega_2\\sigma_2&#94;2}{\\omega_1+\\omega_2}$$ クラス内分散(within-class variance) $$\\begin{aligned}\\sigma_b&#94;2 &= \\frac{\\omega_1(m_1-m_t)&#94;2 + \\omega_2(m_2-m_t)&#94;2}{\\omega_1 + \\omega_2}\\\\&= \\frac{\\omega_1\\omega_2(m_1-m_2)&#94;2}{(\\omega_1+\\omega_2)&#94;2}\\end{aligned}$$ クラス間分散(between-class variance) $$\\sigma_2&#94;2=\\sigma_b&#94;2 + \\sigma_{\\omega}&#94;2$$ 全分散(total variance) $$\\frac{\\sigma_b&#94;2}{\\sigma_w&#94;2} = \\frac{\\sigma_b&#94;2}{\\sigma_t&#94;2 - \\sigma_b&#94;2}$$ 分離度(separation metrics) この定義の下で、 分離度 を最大にするしきい値 $t$ を求めたいが、このとき、しきい値 $t$ に関係なく全分散 $\\sigma_t&#94;2$ は一定のため、クラス間分散 $\\sigma_b&#94;2$ が最大になるような $t$ を決めれば良い。 In [33]: def maximize_separation_metrics ( img ): thresholds = np . arange ( 0 , 256 , 1 ) between_class_variances = np . zeros_like ( thresholds ) N = len ( img ) for i , t in enumerate ( thresholds ): black_img = img [ img >= t ] white_img = img [ img < t ] Nb = len ( black_img ); Nw = len ( white_img ) if Nb == 0 or Nw == 0 : continue Mb = np . mean ( black_img ); Mw = np . mean ( white_img ); between_class_variances [ i ] = Nb * Nw * ( Mb - Mw ) ** 2 / ( N ) ** 2 return thresholds , between_class_variances In [34]: thre , bcv = maximize_separation_metrics ( cv2_gray ) In [35]: opt_i = np . argmax ( bcv ) opt_t = thre [ opt_i ] opt_bcv = bcv [ opt_i ] In [36]: plt . plot ( thre , bcv , color = \"black\" ) plt . scatter ( opt_t , opt_bcv , color = \"red\" , s = 100 , label = \"Optimal\" ) plt . title ( \"Discriminant Analysis Method\" ), plt . xlabel ( \"Thresholds\" ), plt . ylabel ( \"between-class variance\" ) plt . show () In [37]: binary_img = np . where ( cv2_gray >= opt_t , 255 , 0 ) fig , axes = plt . subplots ( ncols = 2 , nrows = 1 , figsize = ( 12 , 6 )) axes [ 0 ] . imshow ( cv2_gray , cmap = \"gray\" ), axes [ 0 ] . set_title ( \"Grayscale\" , fontsize = 16 ) axes [ 1 ] . imshow ( binary_img , cmap = \"gray\" ), axes [ 1 ] . set_title ( \"Optimal Binary Image.\" , fontsize = 16 ) plt . show () 9-2-1. 連結性 2値画像では、値1を持つひとまとまりの領域を定義するため、 連結(connection) という概念を用いる。 ディジタル画像では、注目画素に対して上下左右の画素を 4近傍(4-connected neighbor) と呼ぶ。 4近傍に斜め方向の近傍を加えたものを 8近傍(8-connected neighbor) と呼び、その近傍に対して注目の画素の連結を定義したものを 8連結(8-connection) と呼ぶ。 連結している画素の集合を 連結成分(connected component) と呼ぶ。 対象の連結成分の中にあり、背景に連結していない白画素の集合を 穴(hole) と呼ぶ。 9-2-2. 輪郭追跡 連結成分の境界を求めることを 輪郭追跡(contour tracking) と呼ぶ。 詳しいアルゴリズムに関しては 3S-Bioinformatics-Programming/c++/README.md に説明がある。 kadai16.cpp にC++のコードがある。 9-2-4. 収縮・膨張処理 背景または穴に接する対象の画素をひとまわりはぎとる処理を、 収縮(erosion) と呼ぶ。この処理は、 連結性を保存しない 。 背景または穴に接する対象の画素に、画素をひとまわり加える処理を、 膨張(dilation) と呼ぶ。この処理も 連結性を保存しない 。 同じ回数だけ、膨張して収縮する処理を クロージング(closing) と呼ぶ。これを施すことで 画像の小さな穴を除くことができる 。 同じ回数だけ、収縮したのち膨張する処理を オープニング(opening) と呼ぶ。これを施すことで 画像の小さな連結成分を除くことができる 。 9-2-6. ラベリング ラスタキャノンによるラベリング 輪郭追跡による距離変換画像(distance transform image) 9-3. 線画像のベクトル化 連結成分の 連結性を保存したまま 画素を削る処理を繰り返すことを 細線化(thinning) と呼ぶ。 しきい値処理をして得られた2値画像の線分は、一般に幅を持っており、 線分の特徴を抽出しにくい。 細線化を行い、線幅$1$の2値画像に変換する。細線化された2値画像の画素は、特徴点である以下の3種類に分けられる。 端点(end point) 分岐点(branch point) 通過点(passing point) 幾何学的特徴を見るために、「端点-端点」・「端点-分岐点」・「分岐点-分岐点」というように、細線を画素列に分割し、さらにその画素列を直線近似し、始点と終点の座標値で表現するベクトル型の数値データに変換する。 10. 領域処理 10-2-3. ミーンシフトを用いた領域分割処理 ミーンシフト(mean shift)法 は、画像処理の分割や対象画像の追跡に用いられる手法である。 カーネル密度推定法に求められる密度分布の勾配を計算することで重心の移動方向を決定する。 アルゴリズムは以下： カラー画像の$N$個の各画素の位置$\\mathbf{x}_i$とその画素値を$\\boldsymbol{\\nu}_i=(H_i,S_i,I_i)$とし、画素位置-画素値を結合した5次元空間内の点 $\\mathbf{z}_i=(\\mathbf{x}_i,\\boldsymbol{\\nu_i})$ を考えてみて、 ミーンシフト法 で各画素をクラスタリングする。 画素位置に関するバンド幅$h_s$、画素値に関するバンド幅$h_r$を与え、全ての$\\mathbf{z}_i$にミーンシフトを行い、収束位置$\\mathbf{z}&#94;c=(\\mathbf{x}&#94;c,\\boldsymbol{\\nu}&#94;c)$を計算する。 $\\mathbf{x}_i$ の画素値を、収束位置の値（$H&#94;c,S&#94;c,I&#94;c$）に置き換えることによって画像の平滑化ができる。 なお、ミーンシフトは、$\\mathbf{x}&#94;s,\\mathbf{x}&#94;r$ をそれぞれ5次元ベクトル（位置を表す2次元+色を表す3次元）の空間に対応するものとし、カーネル密度推定を以下の通り定義する。（$c$ は全体の積分値を$1$にするための係数である。） $$f(\\mathbf{x})= \\frac{c}{Nh_s&#94;2h_r&#94;3}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}&#94;s-\\mathbf{x}&#94;s_i}{h_s}\\right|&#94;2\\right)k\\left(\\left|\\frac{\\mathbf{x}&#94;r-\\mathbf{x}&#94;r_i}{h_r}\\right|&#94;2\\right)$$ 10-2-4. 対象物と背景の間のエッジを利用した領域分割処理 対象領域がエッジで囲まれているときは、エッジを閉曲線として抽出する スネーク(snakes) と呼ばれる手法によって領域分割が行える。 画像中の対象領域の多くは、背景との境界において画素値の差を生じ、それがエッジとなって現れる。 必然的に対象物体の領域は、 エッジを境界線とした閉領域になる。 対象物体を囲む閉曲線を初期値として与え、徐々に閉曲線が縮んでいき、エッジの境界に沿って貼り付くことによって、対象物体の領域を抽出する。 11. パターン・図形・特徴の検出とマッチング 11-3-1. コーナー検出 ハリスのコーナー検出(Harris corner detector) は、画像からコーナーを検出する代表的な手法である。 入力画像$I$に対して、$x$軸方向の勾配画像$I_{x}$、$y$軸方向の勾配画像$I_{y}$を生成する。ここでは、 ガウス関数$G(\\sigma)$を$x,y$の各方向で微分した$G_x(\\sigma),G_y(\\sigma)$を画像に畳み込むことで、勾配画像を求める。 $$I_x = G_x(\\sigma)\\ast I,\\quad I_y =G_y(\\sigma)\\ast I$$ 各勾配画像の積により、各方向における勾配の大きさを算出する。 $$I_{x2}=I_x\\cdot I_x,\\quad I_{2y}=I_y\\cdot I_y,\\quad I_{xy}=I_x\\cdot I_y$$ $I_{x2},I_{y2},I_{xy}$ の局所領域における勾配の総和$S_{x2},S_{xy},S_{y2}$を求める。$S_{x2},S_{y2},S_{xy}$ は局所領域における単純な総和でも良いが、以下に示すようなガウス関数$G(\\sigma&#94;{\\prime})$による重み付き和を用いることが多い $$S_{x2} = G(\\sigma&#94;{\\prime})\\ast I_{x2},\\quad S_{y2} = G(\\sigma&#94;{\\prime})\\ast I_{y2},\\quad S_{xy} = G(\\sigma&#94;{\\prime})\\ast I_{xy}$$ 画素$(x,y)$における局所領域の勾配の総和$S_{x2}(x,y),S_{y2}(x,y),S_{xy}(x,y)$を要素にもつ行列 $\\mathbf{M}(x,y)$ を定義する。 $$\\mathbf{M}(x,y)=\\left[\\begin{array}{rrr} S_{x2}(x,y) & S_{xy}(x,y) \\\\ S_{xy}(x,y) & S_{y2}(x,y) \\\\ \\end{array}\\right]$$ 画素$(x,y)$がコーナーである場合、行列$\\mathbf{M}$の固有値$\\lambda_1,\\lambda_2$は共に大きな値 となる。そこで、 コーナー関数 $R$ を以下のように定義する。なお、$k$は調整パラメータであり、$0.04\\sim0.06$ が最適値とされている。 $$\\begin{aligned} R&=\\operatorname{det}\\mathbf{M}-k\\left(\\operatorname{tr}\\mathbf{M}\\right)&#94;2\\\\ \\operatorname{det}\\mathbf{M} &= \\lambda_1\\cdot\\lambda_2,\\quad\\operatorname{tr}\\mathbf{M} = \\lambda_1+\\lambda_2 \\end{aligned}$$ 上式の値が局所的な最大値となる画素をコーナーとして検出する。実際には、画像中に非常に多くの局所的な最大値が存在するため、適当なしきい値を設け、有効なコーナーだけを選択する。また、 類似度補間手法 のように $2$次関数を当てはめる ことで、コーナーのサブピクセル位置を推定することもできる。 11-3-2. DoG画像を用いた特徴点とスケールの検出 画像中に 拡大縮小があると、画像間の特徴点領域の濃淡パターンが変化する ため、特徴点の対応づけができない。 そこで、 特徴点とその領域の大きさを表すスケールを検出する 必要があり、複数の DoG(Difference-of-Gaussian) 画像を用いて計算することができる。 DoGは LoG(Laplacian-of-Gaussian) を近似したものであり、スケールの異なるガウス関数$G(\\sigma)$と入力画像を畳み込んだ平滑化画像 $L$ の差分により、DoG画像 $D(\\sigma)$ を求める。 $$ \\begin{aligned} D(\\sigma) &= \\left(G(k\\sigma)-G(\\sigma)\\right)\\ast I\\\\&= L(k\\sigma)-L(\\sigma)\\\\ L(\\sigma) &= G(\\sigma)\\ast I \\end{aligned} $$ ここで、$k$は$\\sigma$の増加率であり、スケールを少しずつ大きくして複数のDoG画像を求める。 11-4-1. スケールと回転に不変な特徴記述(SIFT) SIFT特徴記述では、 回転に不変な特徴量を記述する ために オリエンテーション を求める。 特徴量記述の際にオリエンテーションにより向きの正規化をすることで、 回転に不変な特徴量を得ることができる。 13. 動画像処理 13-1. 差分画像を用いた移動物体検出 動画像の情報抽出処理では、異なる時間に撮影された$2$枚の画像の差を観察することによって、変化情報を得ることができる。 2毎の画像において同じ位置にある画素値の差の絶対値を画像としたものを 差分画像(subtraction image) と呼ぶ。 背景差分法(background subtraction method) 移動物体がない状態の画像を固定カメラで背景画像として取り込む。 移動物体が入った画像から1の画像を差分し、移動物体の領域が0以外の値を持った差分画像を得る。 得られた差分画像の画素値に対してしきい値処理を行い、2値画像を得る。 クロージング および オープニング を用いてこれらを取り除き、移動物体の領域を得る。 得られた2値画像を利用して対象物体の領域に位置する画素を取り出すことにより、移動物体の画像を得る。 移動物体がない 理想的な背景画像 を得ることができない場合、移動物体を撮影した異なる時間の3枚の画像を用いて、 フレーム間差分法(frame subtraction method) によって移動物体領域を取り出すことができる。 AとB、BとCの差分画像を作成し、しきい値処理を施し2値画像ABとBCを得る。 2値画像ABとBCの論理積処理(AND)を行い、ABとBCの共通領域を取り出す。 観測される対象シーンの中に樹木などの 定常的に変動している物体 が写り込んでしまう場合がある。そのような場合、今までの手法だと樹木の小枝も移動物体として検出されてしまう。そこで、画素値の定常的な変動を考慮して移動物体を検出する 統計的背景差分法(statistical background subtraction method) がある。 13-2. オプティカルフロー 異なる時間に撮影された2枚の画像を用いて、静止カメラで撮影した移動物体の運動を解析することができる。 異なる時間に撮影された2枚の画像間での対象の移動量をベクトルデータとして表現したものを オプティカルフロー(optical flow) と呼ぶ。 ブロックマッチング法(block matching method) は、 テンプレートマッチング を用いてオプティカルフローを求める方法である。 勾配法(gradient-based method) は、 連続する2枚の画像での対象物の移動量が微小であること を前提にオプティカルフローを求める手法である。 16. 画像符 16-3-1. ハフマン符号化 ハフマン符号化(Huffman coding) は、以下の手順によって処理される。 出現確率の最も小さい2つのシンボルを選択する。 出現確率の大きい方に符号0、小さい方に符号1を割り当て、部分木を作成する。 2つのシンボルにおける出現確率の和を出現確率とする新たなシンボルに結合する。 1~3を繰り返す。 16-5-1. ランレングス符号化 2値画像において、画素値を横方向にスキャンすると、0の連続と1の連続が繰り返すことがわかる。 これを、同じ画素値が連続したもの（ ラン ）と、その連続数（ レングス ）の組の並びで符号化することを ランレングス符号化(run-length coding) と呼ぶ。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"進化生態情報学","url":"https://iwasakishuto.github.io/University/3A/進化生態情報学-7.html","loc":"https://iwasakishuto.github.io/University/3A/進化生態情報学-7.html"},{"title":"分子生命科学Ⅲ 第13回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 神経変性疾患","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-13.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-13.html"},{"title":"7.クラスタリング","text":"In [1]: import numpy as np import matplotlib.pyplot as plt seed = 0 階層的クラスタリング(Hierarchical Clustering): 凝集型(agglomerative)：各データのみを含むクラスタを併合してゆくことでデータの階層構造を作成する。 最短距離法 最長距離砲 群平均法 ウォード法 分割型(divisive)：データ集合を分割することで階層を生成する。 非階層クラスタリング：分割の良さを評価する関数（ 同質性(homogeneity) と 分離性(separation) ）を定め、良い分割を探す。最適解はNP困難なので準最適解を探す。 クラスタの評価基準(Cluster validity Index) 教師なし クラスタ内誤差平方和 （ エルボー法 で極度にSSEが落ちるクラスタ数が良い。） $$\\operatorname{SSE} = \\sum_k\\sum_{x\\in C_k}\\|x-m_i\\|&#94;2$$ Calinski-Harabasz index $$\\operatorname{VRC} = \\frac{\\sum_k n_k\\|m_k-m_{all}\\|&#94;2}{\\sum_j\\sum_{x\\in C_k}\\|x-m_k\\|&#94;2}\\times\\frac{N-k}{k-1}$$ Dunn index $$\\operatorname{DI} = \\underset{i=1\\cdots n_C}{\\min}\\left\\{\\underset{j=i+1\\cdots n_C}{\\min}\\left\\{\\frac{\\underset{x\\in C_i,y\\in C_j}{\\min\\{d(x,y)\\}}}{\\underset{k=1\\cdots n_C}{\\max}\\left\\{\\underset{x,y\\in C_k}{\\max}\\{d(x,y)\\}\\right\\}}\\right\\}\\right\\}$$ Silhouette coefficient $$\\operatorname{Si} = \\frac{b_i-a_i}{\\max\\{a_i,b_i\\}}$$ $a_i$ はデータ $i$ と同一クラスタ内のデータとの 距離の平均 $b_i$ はデータ $i$ が含まれないクラスタのデータとの 距離の平均のうち最小値 高い値ほど含まれるクラスタに一致し、他のクラスタと離れていると判定。 シルエット分析 ：個々のデータのシルエット係数を計算し、各クラスタ別に高い順にプロットされたシルエット図を作成する。 Shilhouette index ：$\\operatorname{Sil} = 1/N\\sum_i\\operatorname{Si}$ アルゴリズムの例 $k$-means clustering ： $k$個のクラスタの重心との距離から各点を分類。 更新されたクラスタから再度重心を求める。 重心が収束するまで1,2を繰り返す。 DBSCAN：データを隣接点の数から3種に分類しクラスタリングする。 Mean-shift：密度分布の極大を探す。一定半径の球の中の平均値へ移動。 教師あり クラスタリング結果を $C = \\{C_1,C_2,\\cdots,C_k\\}$ 正解のクラスタを $A=\\{A_1,A_2,\\cdots,A_k\\}$ $C_i$ に含まれる $A_j$ の要素の個数を $X_ij=|C_i\\cap A_j|$ とする。 エントロピー ： $C_i$ のエントロピー $E_i$ は $$E_i = -\\sum_{k}\\operatorname{Prob}(A_k|C_i)\\log \\operatorname{Prob}(A_k|C_i)$$ 全体のエントロピーは以下で表される。低いほど良いと判定。 $$\\sum_k\\frac{|C_k|}{N}E_k$$ 純度 ：ある正解のクラスタをどの程度含むか？ $C_i$ の純度 $P_i$ は $$P_i = \\frac{1}{|C_i|}\\max_k|X_{ik}|$$ 全てのデータの純度は以下で表される。高いほど良いと判定。 $$\\sum_k\\frac{|C_k|}{N}P_k$$ F値 ： 再現度 $R_{hk}$ と精度 $P_{hk}$ を以下のように定義 $$R_{hk} = \\frac{\\left|A_h\\cap C_k\\right|}{|A_h|}\\quad P_{hk} = \\frac{\\left|A_h\\cap C_k\\right|}{|C_k|}$$ $A_h$ と $C_k$ のF値 $F_{hk}$ は $R_{hk}$ と $P_{hk}$ の調和平均 $$F_{hk} = \\frac{2R_{hk}P_{hk}}{R_{hk} + P_{hk}}$$ 全体のF値は $A_h$ に対して最大になる $k$ を求めて $$F = \\sum_{h=1}&#94;K\\frac{|A_h|}{N}\\max_kF_{hk}$$ $k$-means法 まずは、 $k$-means clustering の実装を行う。 長所： 原理がわかりやすい。 1ステップの計算量が $O(kN)$ 短所： 「次元の呪い」 高次元において点が疎になりやすい。 次元 $d$ が大きくなるほど、データは中心点から離れ、点の分布は疎になる。 半径 $r$ の $d$ 次元ユークリッド球面の体積は $$V_d(r) = \\frac{\\pi&#94;{d/2}}{\\Gamma\\left(\\frac{d}{2} + 1\\right)}r&#94;d$$ 各辺の長さが $2r$ の超立方体の体積は $$(2r)&#94;d$$ したがって、超球が超立方体に占める割合は $$V_d(r)/(2r)&#94;d = \\frac{\\pi&#94;{d/2}}{2&#94;d\\Gamma\\left(\\frac{d}{2} + 1\\right)}\\underset{d\\rightarrow\\infty}{\\longrightarrow}0$$ クラスタ数をあらかじめ与える必要がある。 データが超球状に分布することを仮定している。（ユークリッド二乗距離で測るのならば） 初期代表点の選び方に依存する。 KZZ法 (Katsavounidis 1994)：最も離れた点を選ぶ。 K-means++ (David Arthur 2007)：最近接の中心から遠いほど選ばれやすい。 ランダムに1点選び、中心とする。 各点 $x$ に対し、最近接の中心との距離を $D(x)$ とし点 $x_i$ を確率 $\\frac{D(x_i)&#94;2}{\\sum_i D(x_i)&#94;2}$ で新たな中心として選ぶ。 2を繰り返して $k$ 個の中心を初期値として選ぶ。 $k$-means法の亜種 kernel $k$-means：$k$-meansの評価関数をカーネルを使用して行う。非線形関数でデータを高次元に写像してクラスタを作成することが可能。 spectral clustering：データからグラフを作成し、グラフの行列表現の固有値を解き、固有ベクトルのクラスタリングをすることで分類する手法。（重み付きkernel $k$-meansとnormalized cutのspectral clusteringが等価であることが示されている → Kernel k-means, Spectral Clustering and Normalized Cuts ） Q.1 Lloydのk-means実装 $K$ 個のクラスタにデータを分類するプログラムの実装 入力：$K$ 個のクラスタにデータを分類する実数データ 出力：データの各クラスタへの分類結果 乱数データを生成し、 「データの性質（次元・データ数・クラスタ数）」 と 「計算時間・誤差二乗平均・ループ回数」 の関係性の測定 超球内に一様分布したデータをクラスタリングする。 ランダムに設定した複数の中心の、超球体により構成されたデータで計測 k-means++の実装 解答 1 # データの取得 ! wget https://mlab.cb.k.u-tokyo.ac.jp/~ichikawa/cluster/three_clusters.txt In [2]: with open ( \"three_clusters.txt\" , \"r\" ) as f : three_clusters_data = np . asarray ([ line . strip ( \" \\n \" ) . split ( \" \\t \" ) for line in f . readlines ()], dtype = float ) print ( f \"data.shape= { three_clusters_data . shape } \" ) data.shape=(300, 2) In [3]: from kerasy.ML.EM import KMeans In [4]: model = KMeans ( n_clusters = 3 , random_state = seed ) model . fit ( three_clusters_data ) model . silhouette ( three_clusters_data ) KMeans Lloyd 004/300 [--------------------] 1.33% - 0.000s average inertia: 6.578, center shift total: 0.000 2 ※ 超球体内部に一様分布する乱数は、 ギブスサンプリング により生成する。 なお、これから先の実行時間については、以下のプログラムファイルを用いた。 備忘録（ディレクトリ構造） ```sh # file 群を整える。 $ tree kadai07 kadai07/ ├── kadai07.py ├── kadai07.sh ├── kerasy (https://github.com/iwasakishuto/Kerasy) └── output ├── Elkan.txt ├── Hamerly.txt ├── Lloyd_Random.txt └── Lloyd_k++.txt ``` kadai07.py ```python #coding: utf-8 import subprocess import argparse import numpy as np from kerasy.ML.sampling import GibbsMsphereSampler from kerasy.utils import measure_complexity from kerasy.ML.EM import KMeans, HamerlyKMeans, ElkanKMeans ModelHandler = { 'Lloyd_Random': KMeans, 'Lloyd_k++' : KMeans, 'Hamerly' : HamerlyKMeans, 'Elkan' : ElkanKMeans, } dimensions = [2,10,100] sample_nums = [1000,10000,100000] cluster_nums = [10,100,1000] repetitions = 10 if __name__ == \"__main__\": parser = argparse.ArgumentParser() parser.add_argument(\"-m\", \"--model\", choices=['Lloyd_Random', 'Lloyd_k++', 'Hamerly', 'Elkan']) parser.add_argument(\"-s\", \"--seed\", type=int, default=0) args = parser.parse_args() init = \"random\" if 'Lloyd_Random' else 'k++' Model = ModelHandler[args.model] seed = args.seed def func(data, n_clusters, random_state): model = Model(n_clusters, init=init, random_state=random_state) model.fit(data, verbose=-1) inertia = model.inertia_ n_iter = model.iterations_ return (inertia, n_iter) print(f\"#dimensions : {dimensions}\") print(f\"#sample_nums : {sample_nums}\") print(f\"#cluster_nums: {cluster_nums}\") print(f\"#repetitions : {repetitions}\") print(f\"#seed : {seed}\") print(\"num_samples, dimensions, num_clusters, processing_time, num_iterations, MSE\") for d in dimensions: sampler = GibbsMsphereSampler(d, r=1) for n in sample_nums: data = sampler.sample(n, random_state=seed, verbose=-1) for k in cluster_nums: p_time, metrics = measure_complexity(func, data=data, n_clusters=k, random_state=seed, repetitions_=10) inertia, n_iter = np.mean(np.asarray(metrics, dtype=float), axis=0) print(f\"{n}, {d}, {k}, {p_time}, {n_iter}, {inertia/n}\") ``` kadai07.sh ```bash #!/bin/bash # chmod +x kadai07.sh # sh ./kadai07.sh LOGDIR=\"output\" if [ -d $LOGDIR ]; then echo \"Deleted ${LOGDIR}\" rm -r $LOGDIR fi echo \"Created ${LOGDIR}\" mkdir $LOGDIR for Model in Lloyd_Random Lloyd_k++ Hamerly Elkan do python3 kadai07.py -m $Model -s 0 > output/$Model.txt done ``` In [5]: from kerasy.ML.sampling import GibbsMsphereSampler from kerasy.utils import measure_complexity from kerasy.ML.EM import KMeans In [6]: dimensions = [ 2 , 10 , 100 ] sample_nums = [ 1000 , 10000 , 100000 ] cluster_nums = [ 10 , 100 , 1000 ] repetitions = 10 In [7]: # init=\"random\" def func_1_2 ( data , n_clusters , random_state ): model = KMeans ( n_clusters , init = \"random\" , random_state = random_state ) model . fit ( data , verbose =- 1 ) inertia = model . inertia_ n_iter = model . iterations_ return ( inertia , n_iter ) In [8]: for d in dimensions : sampler = GibbsMsphereSampler ( d , r = 1 ) for n in sample_nums : data = sampler . sample ( n , random_state = 0 , verbose =- 1 ) for k in cluster_nums : p_time , metrics = measure_complexity ( func_1_2 , data = data , n_clusters = k , random_state = seed , repetitions_ = 10 ) inertia , n_iter = np . mean ( np . asarray ( metrics , dtype = float ), axis = 0 ) print ( f \"n= { int ( n ) : <6 } d= { d : <3 } k= { k : <4 } processing time: { p_time : .3f } [s], n_iter= { n_iter : .2f } , mse= { inertia / n : .3f } \" ) n=1000 d=2 k=10 processing time: 0.003[s], n_iter=17.10, mse=0.214 n=1000 d=2 k=100 processing time: 0.013[s], n_iter=13.70, mse=0.060 n=1000 d=2 k=1000 processing time: 0.087[s], n_iter=11.00, mse=0.000 n=10000 d=2 k=10 processing time: 0.019[s], n_iter=18.80, mse=0.217 n=10000 d=2 k=100 processing time: 0.214[s], n_iter=36.90, mse=0.067 n=10000 d=2 k=1000 processing time: 0.766[s], n_iter=16.70, mse=0.019 n=100000 d=2 k=10 processing time: 0.125[s], n_iter=15.40, mse=0.217 n=100000 d=2 k=100 processing time: 2.546[s], n_iter=54.60, mse=0.068 n=100000 d=2 k=1000 processing time: 23.783[s], n_iter=71.40, mse=0.021 n=1000 d=10 k=10 processing time: 0.005[s], n_iter=26.10, mse=0.750 n=1000 d=10 k=100 processing time: 0.018[s], n_iter=14.20, mse=0.542 n=1000 d=10 k=1000 processing time: 0.104[s], n_iter=11.00, mse=0.000 n=10000 d=10 k=10 processing time: 0.084[s], n_iter=56.00, mse=0.767 n=10000 d=10 k=100 processing time: 0.692[s], n_iter=70.00, mse=0.596 n=10000 d=10 k=1000 processing time: 1.661[s], n_iter=18.60, mse=0.423 n=100000 d=10 k=10 processing time: 0.570[s], n_iter=37.60, mse=0.771 n=100000 d=10 k=100 processing time: 20.520[s], n_iter=210.20, mse=0.611 n=100000 d=10 k=1000 processing time: 115.203[s], n_iter=129.90, mse=0.470 n=1000 d=100 k=10 processing time: 0.022[s], n_iter=17.30, mse=0.968 n=1000 d=100 k=100 processing time: 0.164[s], n_iter=15.60, mse=0.880 n=1000 d=100 k=1000 processing time: 0.823[s], n_iter=8.00, mse=0.000 n=10000 d=100 k=10 processing time: 0.374[s], n_iter=30.10, mse=0.974 n=10000 d=100 k=100 processing time: 4.506[s], n_iter=42.40, mse=0.949 n=10000 d=100 k=1000 processing time: 29.492[s], n_iter=28.90, mse=0.857 n=100000 d=100 k=10 processing time: 3.162[s], n_iter=25.40, mse=0.976 n=100000 d=100 k=100 processing time: 143.194[s], n_iter=136.40, mse=0.957 n=100000 d=100 k=1000 processing time: 944.928[s], n_iter=91.40, mse=0.933 ※ jupyter notebook上でプログラムを実装すると面倒なので、プログラムの実行結果をDataFrame で表示する。 In [9]: pd . read_csv ( \"path/to/Desktop/kadai07/output/Lloyd_Random.txt\" , header = 5 ) Out[9]: .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } num_samples dimensions num_clusters processing_time num_iterations MSE 0 1000 2 10 0.003000 17.1 0.214077 1 1000 2 100 0.008318 13.7 0.060291 2 1000 2 1000 0.058851 11.0 0.000000 3 10000 2 10 0.025715 18.8 0.217284 4 10000 2 100 0.188476 36.9 0.066868 5 10000 2 1000 0.801624 16.7 0.019371 6 100000 2 10 0.160234 15.4 0.216636 7 100000 2 100 2.854768 54.6 0.067740 8 100000 2 1000 28.435977 71.4 0.021463 9 1000 10 10 0.007561 26.1 0.750468 10 1000 10 100 0.017962 14.2 0.541632 11 1000 10 1000 0.125840 11.0 0.000000 12 10000 10 10 0.104764 56.0 0.767139 13 10000 10 100 0.821057 70.0 0.596278 14 10000 10 1000 1.857213 18.6 0.422616 15 100000 10 10 0.628574 37.6 0.770892 16 100000 10 100 24.182504 210.2 0.610780 17 100000 10 1000 132.526588 129.9 0.469519 18 1000 100 10 0.025806 17.3 0.967887 19 1000 100 100 0.181885 15.6 0.879964 20 1000 100 1000 0.927639 8.0 0.000000 21 10000 100 10 0.420188 30.1 0.974091 22 10000 100 100 5.110555 42.4 0.948616 23 10000 100 1000 33.450845 28.9 0.857024 24 100000 100 10 3.649111 25.4 0.976308 25 100000 100 100 161.841166 136.4 0.956602 26 100000 100 1000 1062.492614 91.4 0.932622 3 In [10]: # init=\"k++\" def func_1_3 ( data , n_clusters , random_state ): model = KMeans ( n_clusters , init = \"k++\" , random_state = random_state ) model . fit ( data , verbose =- 1 ) inertia = model . inertia_ n_iter = model . iterations_ return ( inertia , n_iter ) In [11]: pd . read_csv ( \"path/to/Desktop/kadai07/output/Lloyd_k++.txt\" , header = 5 ) Out[11]: .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } num_samples dimensions num_clusters processing_time num_iterations MSE 0 1000 2 10 0.002448 17.1 0.214077 1 1000 2 100 0.007464 13.7 0.060291 2 1000 2 1000 0.055270 11.0 0.000000 3 10000 2 10 0.017802 18.8 0.217284 4 10000 2 100 0.188478 36.9 0.066868 5 10000 2 1000 0.685685 16.7 0.019371 6 100000 2 10 0.142654 15.4 0.216636 7 100000 2 100 2.580266 54.6 0.067740 8 100000 2 1000 27.534592 71.4 0.021463 9 1000 10 10 0.005895 26.1 0.750468 10 1000 10 100 0.017444 14.2 0.541632 11 1000 10 1000 0.116181 11.0 0.000000 12 10000 10 10 0.098078 56.0 0.767139 13 10000 10 100 0.794802 70.0 0.596278 14 10000 10 1000 1.873039 18.6 0.422616 15 100000 10 10 0.633468 37.6 0.770892 16 100000 10 100 23.653552 210.2 0.610780 17 100000 10 1000 131.244952 129.9 0.469519 18 1000 100 10 0.025248 17.3 0.967887 19 1000 100 100 0.180452 15.6 0.879964 20 1000 100 1000 0.914976 8.0 0.000000 21 10000 100 10 0.412541 30.1 0.974091 22 10000 100 100 5.021165 42.4 0.948616 23 10000 100 1000 32.758777 28.9 0.857024 24 100000 100 10 3.649448 25.4 0.976308 25 100000 100 100 161.627738 136.4 0.956602 26 100000 100 1000 1092.051946 91.4 0.932622 $k$-means法の高速化 $k$-means clusteringにおいて、最も計算時間を取るのは各点と代表点との距離計算（$O(kN)$） 繰り返しステップが進むと代表点の移動距離は減り、 各点と最も近い代表点は変化しなくなる。 この不要な距離計算を行わないことで計算の高速化を行う → 三角不等式(Triangle Inequality) 「中心 $c$ の移動距離」 + 「移動前の中心 $c$ との距離」 >= 「移動後の中心 $c&#94;{\\prime}$ との距離」 より、$\\operatorname{dis}\\left(\\mathbf{c}_p&#94;{\\prime},\\mathbf{x}\\right) < \\operatorname{dis}\\left(\\mathbf{c}_q&#94;{\\prime},\\mathbf{x}\\right)$ の判断が $c&#94;{\\prime}$ との距離」**より、$\\operatorname{dis}\\left(\\mathbf{c}_p,\\mathbf{x}\\right) < \\operatorname{dis}\\left(\\mathbf{c}_q,\\mathbf{x}\\right)$ を用いることでできる。 $50$ 次元以上で高速（ Elkanの命題 ）： Charles Elkan. Using the triangle inequality to accelerate k-means. ICML, pages 147–153. AAAI Press, 2003. $50$ 次元以下で高速（ Hamerlyの命題 ）： Hamerly, G. Making k-means even faster. SDM (Symposium on Data Mining) 130-140, 2010. ### Hamerlyの命題 点 $x_i$ の - 最近接の重心への距離の上界の一つを $u_i\\geq\\operatorname{d}\\left(x_i, c(\\operatorname{cls}(i))\\right)$ - 2番目に近い重心への距離の下界の一つを $l_i\\leq\\min_{j\\neq \\operatorname{cls}(i)}\\operatorname{d}\\left(x_i, c(j)\\right)$ - 所属するクラスターを $\\operatorname{cls}(i)$ - $\\operatorname{cls}(i)$ の重心を $c\\left(\\operatorname{cls}(i)\\right)$ - $c\\left(\\operatorname{cls}(i)\\right)$ と最も近い他のクラスタの重心との距離を $s\\left(\\operatorname{cls}(i)\\right) = \\min_{j\\neq \\operatorname{cls}(i)}\\left\\{\\operatorname{d}\\left(c\\left(\\operatorname{cls}(i)\\right), c\\left(j\\right)\\right)\\right\\}$ とする。この時、 1. $u_i\\leq l_i$ 2. $u_i\\leq s\\left(\\operatorname{cls}(i)\\right)/2$ のどちらかが成立するならば、$x_i$ に最も近いクラスターは重心移動後も $\\operatorname{cls}(i)$ のまま。 証明 $u_i\\leq l_i$ が成立する時 ： $$ \\begin{aligned} \\operatorname{d}\\left(x_i, c\\left(\\operatorname{cls}(i)\\right)\\right)&\\leq u_i &\\left(\\because \\text{ definition.}\\right)\\\\ u_i&\\leq l_i & \\left(\\because \\text{ definition.}\\right)\\\\ l_i&\\leq\\min_{j\\neq \\operatorname{cls}(i)}\\operatorname{d}\\left(x_i, c(j)\\right) &\\left(\\because \\text{ hypothesis.}\\right) \\end{aligned} $$ $u_i\\leq s\\left(\\operatorname{cls}(i)\\right)/2$ が成立する時 ： $$ \\begin{aligned} 2u_i&\\leq s\\left(\\operatorname{cls}(i)\\right) &\\left(\\because \\text{ hypothesis.}\\right)\\\\ s\\left(\\operatorname{cls}(i)\\right)&\\leq\\operatorname{d}\\left(x_i,c\\left(\\operatorname{cls}(i)\\right)\\right) + \\min_{j\\neq \\operatorname{cls}(i)}\\operatorname{d}\\left(x_i,c(j)\\right) & \\left(\\because \\text{ Triangle Inequality.}\\right)\\\\ \\operatorname{d}\\left(x_i, c\\left(\\operatorname{cls}(i)\\right)\\right) &\\leq u_i & \\left(\\because \\text{ definition.}\\right)\\\\ \\therefore 2u_i&\\leq u_i + \\min_{j\\neq \\operatorname{cls}(i)}\\operatorname{d}\\left(x_i,c(j)\\right) \\end{aligned} $$ より、 どちらの場合でも以下が成立する。 $$\\operatorname{d}\\left(x_i,c\\left(\\operatorname{cls}(i)\\right)\\right)\\leq\\min_{j\\neq \\operatorname{cls}(i)}\\operatorname{d}\\left(x_i, c(j)\\right)$$ Q.2 高速化手法の実装 Hamerlyの高速化手法の実装 入力：$K$ 個のクラスタにデータを分類する実数データ 出力：データの各クラスタへの分類結果 初期代表点が同じ場合Lloydのアルゴリズムと等しいクラスタを出力することを確認。 乱数データを生成し、 「データの性質（次元・データ数・クラスタ数）」 と 「計算時間・誤差二乗平均・ループ回数」 の関係性の測定 Elkanの高速化手法の実装 解答 1 In [12]: from kerasy.ML.EM import HamerlyKMeans model = HamerlyKMeans ( n_clusters = 3 , random_state = seed ) model . fit ( three_clusters_data ) model . silhouette ( three_clusters_data ) KMeans Hamerly 004/300 [--------------------] 1.33% - 0.004s average inertia: 48.774, center shift total: 0.000 2 In [13]: def func_2_2 ( data , n_clusters , random_state ): model = HamerlyKMeans ( n_clusters , init = \"k++\" , random_state = random_state ) model . fit ( data , verbose =- 1 ) inertia = model . inertia_ n_iter = model . iterations_ return ( inertia , n_iter ) In [14]: for d in dimensions : sampler = GibbsMsphereSampler ( d , r = 1 ) for n in sample_nums : data = sampler . sample ( n , random_state = 0 , verbose =- 1 ) for k in cluster_nums : p_time , metrics = measure_complexity ( func_2_2 , data = data , n_clusters = k , random_state = seed , repetitions_ = 10 ) inertia , n_iter = np . mean ( np . asarray ( metrics , dtype = float ), axis = 0 ) print ( f \"n= { int ( n ) : <6 } d= { d : <3 } k= { k : <4 } processing time: { p_time : .3f } [s], n_iter= { n_iter : .2f } , mse= { inertia / n : .3f } \" ) In [15]: pd . read_csv ( \"path/to/Desktop/kadai07/output/Hamerly.txt\" , header = 5 ) Out[15]: .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } num_samples dimensions num_clusters processing_time num_iterations MSE 0 1000 2 10 0.023849 17.1 0.052717 1 1000 2 100 0.027358 13.7 0.004419 2 1000 2 1000 0.189211 4.3 0.000052 3 10000 2 10 0.227350 18.8 0.054107 4 10000 2 100 0.548283 36.9 0.005168 5 10000 2 1000 1.418466 17.0 0.000456 6 100000 2 10 1.800782 15.4 0.053838 7 100000 2 100 7.439619 54.6 0.005232 8 100000 2 1000 24.365071 71.4 0.000535 9 1000 10 10 0.038065 26.1 0.572297 10 1000 10 100 0.042575 15.6 0.301990 11 1000 10 1000 0.217259 4.4 0.029081 12 10000 10 10 0.737034 56.0 0.597806 13 10000 10 100 1.683053 70.0 0.362525 14 10000 10 1000 2.819311 18.1 0.184919 15 100000 10 10 5.201289 37.7 0.603486 16 100000 10 100 49.458843 216.3 0.379651 17 100000 10 1000 144.102286 128.6 0.224751 18 1000 100 10 0.053269 17.3 0.939033 19 1000 100 100 0.203089 15.8 0.830536 20 1000 100 1000 0.389724 3.4 0.085066 21 10000 100 10 1.070933 29.8 0.949124 22 10000 100 100 5.654799 41.5 0.903714 23 10000 100 1000 28.223907 27.2 0.799790 24 100000 100 10 9.533237 25.3 0.953361 25 100000 100 100 178.447388 135.1 0.915487 26 100000 100 1000 995.824564 93.5 0.875549 3 ### Elkanの命題 点 $x_i$ の - 最近接の重心への距離の上界の一つを $u_i\\geq\\operatorname{d}\\left(x_i, c(\\operatorname{cls}(i))\\right)$ - $j$ 番のクラスタの重心への距離 の下界を $l_{ij}\\leq\\operatorname{d}\\left(x_i, c(j)\\right)$ - 所属するクラスターを $\\operatorname{cls}(i)$ - $\\operatorname{cls}(i)$ の重心を $c\\left(\\operatorname{cls}(i)\\right)$ - $A$ の、一つ前のイテレーション時の値を $A&#94;{\\prime}$ とする。この時、 1. $\\frac{1}{2}\\operatorname{d}\\left(c\\left(\\operatorname{cls}(i)\\right),c(j)\\right)\\geq u_i$ が成立する時、$\\operatorname{d}\\left(x_i,c(j)\\right)$ を計算する必要がない。 2. $l_{ij} = \\max\\left\\{0, l_{ij}&#94;{\\prime}-\\operatorname{d}\\left(c(j), c&#94;{\\prime}(j)\\right)\\right\\}$ と下界を計算できる。 ※ Hamerlyの手法 では、全てのクラスタ重心への距離の下界の一つ $l_i$ を使用する のに対し、ここでは それぞれのクラスタ重心に対して距離の下界 $l_{ij}$ を保持している 証明 $\\frac{1}{2}\\operatorname{d}\\left(c\\left(\\operatorname{cls}(i)\\right),c(j)\\right)\\geq u_i$ が成立する時 $\\left(j{\\neq\\operatorname{cls}(i)}\\right)$： $$ \\begin{aligned} \\frac{1}{2}\\operatorname{d}\\left(c\\left(\\operatorname{cls}(i)\\right),c(j)\\right)\\geq u_i&\\geq\\operatorname{d}\\left(x_i, c(\\operatorname{cls}(i))\\right) &\\left(\\because\\text{ definition.}\\right)\\\\ \\underset{-\\frac{1}{2}\\operatorname{d}\\left(x_i,c\\left(\\operatorname{cls}(i)\\right)\\right)}{\\Longleftrightarrow}\\frac{1}{2}\\operatorname{d}\\left(c\\left(\\operatorname{cls}(i)\\right),c(j)\\right) - \\frac{1}{2}\\operatorname{d}\\left(x_i,c\\left(\\operatorname{cls}(i)\\right)\\right)&\\geq\\frac{1}{2}\\operatorname{d}\\left(x_i,c\\left(\\operatorname{cls}(i)\\right)\\right)\\\\ \\operatorname{d}\\left(x_i,c(j)\\right)&\\geq\\operatorname{d}\\left(c\\left(\\operatorname{cls}(i)\\right),c(j)\\right) - \\operatorname{d}\\left(x_i,c\\left(\\operatorname{cls}(i)\\right)\\right)&\\left(\\because\\text{ Triangle Inequality.}\\right)\\\\ \\therefore\\operatorname{d}\\left(x_i,c(j)\\right) &\\geq\\operatorname{d}\\left(x_i,c\\left(\\operatorname{cls}(i)\\right)\\right) \\end{aligned} $$ この下界は、$l_{ij}&#94;{\\prime}$ が良い下界で、$j$ 番のクラスタの重心の移動距離が小さいほど良い推定となる。(trivial) $$ \\begin{cases} \\begin{aligned} \\operatorname{d}\\left(x_i,c(j)\\right) &\\geq \\operatorname{d}\\left(x_i,c&#94;{\\prime}(j)\\right) -\\operatorname{d}\\left(c(j), c&#94;{\\prime}(j)\\right) & \\left(\\because\\text{ Triangle Inequality.}\\right)\\\\ \\operatorname{d}\\left(x_i,c&#94;{\\prime}(j)\\right)&\\geq l_{ij}&#94;{\\prime} & \\left(\\because\\text{ definition.}\\right)\\\\ \\end{aligned} \\end{cases}\\\\ \\begin{aligned} \\operatorname{d}\\left(x_i,c(j)\\right) &\\geq\\max\\left\\{0, \\operatorname{d}\\left(x_i,c&#94;{\\prime}(j)\\right) -\\operatorname{d}\\left(c(j), c&#94;{\\prime}(j)\\right)\\right\\}\\\\ &\\geq\\max\\left\\{0,l_{ij}&#94;{\\prime} - \\operatorname{d}\\left(c(j), c&#94;{\\prime}(j)\\right)\\right\\} \\end{aligned} $$ In [16]: from kerasy.ML.EM import ElkanKMeans model = ElkanKMeans ( n_clusters = 3 , random_state = seed ) model . fit ( three_clusters_data ) model . silhouette ( three_clusters_data ) KMeans Elkan 004/300 [--------------------] 1.33% - 0.001s average inertia: 48.774, center shift total: 0.000 In [17]: def func_2_3 ( data , n_clusters , random_state ): model = ElkanKMeans ( n_clusters , init = \"k++\" , random_state = random_state ) model . fit ( data , verbose =- 1 ) inertia = model . inertia_ n_iter = model . iterations_ return ( inertia , n_iter ) In [18]: for d in dimensions : sampler = GibbsMsphereSampler ( d , r = 1 ) for n in sample_nums : data = sampler . sample ( n , random_state = 0 , verbose =- 1 ) for k in cluster_nums : p_time , metrics = measure_complexity ( func_2_3 , data = data , n_clusters = k , random_state = seed , repetitions_ = 10 ) inertia , n_iter = np . mean ( np . asarray ( metrics , dtype = float ), axis = 0 ) print ( f \"n= { int ( n ) : <6 } d= { d : <3 } k= { k : <4 } processing time: { p_time : .3f } [s], n_iter= { n_iter : .2f } , mse= { inertia / n : .3f } \" ) In [19]: pd . read_csv ( \"path/to/Desktop/kadai07/output/Elkan.txt\" , header = 5 ) Out[19]: .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } num_samples dimensions num_clusters processing_time num_iterations MSE 0 1000 2 10 0.008630 17.1 0.052717 1 1000 2 100 0.035841 13.7 0.004419 2 1000 2 1000 0.302168 4.3 0.000052 3 10000 2 10 0.030790 18.8 0.054107 4 10000 2 100 0.350015 36.9 0.005168 5 10000 2 1000 3.153855 17.0 0.000456 6 100000 2 10 0.262165 15.4 0.053838 7 100000 2 100 6.310825 54.6 0.005232 8 100000 2 1000 170.179370 71.4 0.000535 9 1000 10 10 0.008973 26.1 0.572297 10 1000 10 100 0.023564 15.6 0.301990 11 1000 10 1000 0.221342 4.4 0.029081 12 10000 10 10 0.096483 56.0 0.597806 13 10000 10 100 0.899312 70.0 0.362525 14 10000 10 1000 4.821373 18.1 0.184919 15 100000 10 10 1.058213 37.7 0.603486 16 100000 10 100 26.485513 216.3 0.379651 17 100000 10 1000 391.500860 128.6 0.224751 18 1000 100 10 0.033819 17.3 0.939033 19 1000 100 100 0.080545 15.8 0.830536 20 1000 100 1000 0.370563 3.4 0.085066 21 10000 100 10 0.620781 29.8 0.949124 22 10000 100 100 1.786801 40.5 0.903733 23 10000 100 1000 8.276154 27.2 0.799790 24 100000 100 10 5.763180 25.4 0.953359 25 100000 100 100 48.678868 133.5 0.915492 26 100000 100 1000 277.882119 93.5 0.875549 1細胞RNA-seq(scRNA-seq) 微量なサンプルからcDNAライブラリーを作成する技術の発展により、1細胞単位での遺伝子発現量データを得ることが可能となった。（ がん ・ メタゲノム ・ 細胞系譜 ・ 神経生物学 など。） 各細胞が数千~数万種類の遺伝子発現量のデータを持つscRNA-seq dataを解析するための手法として以下の手法がある。 2次元または3次元に次元削減することによる 可視化 次元削減されたデータをクラスタリングすることによる細胞集団や細胞系譜の 同定 例として、sc-RNAseqにより線虫(c.elegans)の原腸形成から最終分化細胞に至る発達段階の胚のトランスクリプトームを分析し、 「sc-RNAseqの結果から細胞が分化する過程の細胞系譜木の再構成」 をおこなったものがある（ \"A lineage-resolved molecular atlas of C.elegans embryogenesis at single-cell resolution\" ） workflow Single-cell RNA sequencing workflow Cell isolation Library Preparation Full-length RNA-seq from single cells using Smart-seq2 Highly Parallel Genome-wide Expression Profiling of Individual Cells Using Nanoliter Droplets 00549-8) 次元削減法 scRNA-seqの遺伝子発現マトリックスでは各Sampleが高次元の情報を持つためのクラスタリングを行う前に次元削減が必要 PCA: 「データの分散最大化」 or 「次元削減による誤差の最小化」 から主成分を求める。 線形変換 t-SNE: データ点間の類似度を確率で表し低次元に埋め込む 非線形変換 UMAP: 多様体学習を使用した非線型変換 ※ scRNA-seqでは、t-SNE, UMAPが可視化のためによく用いられる。 t-SNE t-distribution: 低次元へ変換したデータ間の類似度を表すために自由度1のt-分布を使用する。 Stochastic Neighbor Embedding: 高次元空間でのデータ間のユークリッド距離類似度を確率で表現し低次元に変換する。 「データ点間の類似度を表す確率分布」 と 「低次元に変換した点間の類似度を表す確率分布」 を求め、その間の Kullback-Leibler divergence が最小化するように 勾配法 によって変換後の点の座標を求める手法。 確率分布 高次元のデータ点 $x_i$ に対するデータ点 $x_j$ の類似度を対象化された結合確率(joint distribution)で表す。 $$p_{ij} = \\frac{p_{j|i} + p_{i|j}}{2n}$$ データ点 $x_j$ は点 $x_i$ を中心とする標準偏差 $\\sigma_i$ のガウス分布に比例して選び、条件付確率 $p_{j|i}$ は以下のように求める。 $$p_{j|i} = \\frac{\\exp\\left(-\\left\\|x_i-x_j\\right\\|/2\\sigma_i&#94;2\\right)}{\\sum_{k\\neq i}\\exp\\left(-\\left\\|x_i-x_k\\right\\|/2\\sigma_i&#94;2\\right)}$$ 低次元に変換した点 $y_i$ と点 $y_j$ の類似度を自由度$1$のt分布の同時確率で表す。 $$q_{ij} = \\frac{\\left(1 + \\left\\|y_i-y_j\\right\\|&#94;2\\right)&#94;{-1}}{\\sum_{k\\neq l} \\left(1 + \\left\\|y_k-y_l\\right\\|&#94;2\\right)&#94;{-1}}$$ の $p_{ij}$ と $q_{ij}$ のミスマッチを最小化する。 Perplexity 全ての点のガウス分布に対して同じ標準偏差 $\\sigma$ を使用するのではなく、 「密度の高い領域の点は小さい標準偏差」 を 「密度の低い領域では大きい標準偏差」 を用いる。 ここで、上記の条件を満たすために、データ点 $x_i$ 周辺のデータ密度を表現するPerplexityを以下のように定義する。 $$ \\begin{aligned} \\text{Perp}\\left(P_i\\right) &= 2&#94;{H\\left(P_i\\right)}\\\\ H\\left(P_i\\right) &= -\\sum_jp_{j|i}\\log_2p_{j|i} \\end{aligned} $$ ここで、 $\\text{Perp}(P_i)$ に対して $H(P_i)$ は単調増加 $H(P_i)$ に対して標準偏差 $\\sigma_i$ は単調増加 より、 ガウス分布の標準偏差 $\\sigma_i$ が大きいほど、距離が遠い点でも条件付き確率 $p_{j|i}$ が大きな値(negligibleでない)を取ることが多く なる。 Pros and Cons. 利点： Stochastic Neighbor Embeddingからの改善点であり、t-分布の裾が重いため低次元の空間において距離の遠いデータを遠くに配置できる。 データ間の近さに対称性がある 欠点： 2,3次元へのマッピング以外では計算コストが高い。 局所構造が次元の呪いの影響を受けやすい。 最適化アルゴリズムの収束性が保証されていない。 perplexityの選択により出力に大きな影響がある。 マッピング後のクラスタ間の距離関係は元の距離を必ずしも反映していない。 DBSCAN 空間の中で密集している点をクラスタとしてまとめ、疎な領域の点を外れ値とするクラスタリング手法。 半径 $\\varepsilon$、最小点数 $\\text{minPts}$ が与えられた時に、点を $3$ 種類（ 「コア点」 ・ 「到達可能」 ・ 「外れ値」 ）に分類してクラスタリングを行う。 コア点 ：点 $P$ を含め半径 $\\varepsilon$ 以内に $\\text{minPts}$ 個以上の点が存在する点。 直接到達可能 ：コア点 $P$ から $\\varepsilon$ 以内にある点 $q$ 到達可能 ：コア点 $P_i$ から直接到達可能なコア点 $P_{i+1}$ のパス $P_1P_2\\cdots P_nq$ が存在するとき、点 $q$ はコア点 $P_1$ から到達可能。 外れ値 ：どの点からも到達可能でない点 アルゴリズム def DBSCAN ( data , epsilon , minPts ): \"\"\" @params data : 点集合 @params epsilon: 半径`epsilon`以内の点を直接到達可能と定義する。 @params minPts : 半径`epsilon`以内に`minPts`個以上の点が存在する場合、コア点とする。 \"\"\" Clusters = [] while ( data ): # 未探索の点Pを選ぶ。 p = point_lists . pop () if p . searched : continue # 点pから半径ε以内にある点の個数。 Ps_NeighborPts = p . reacheable ( epsilon ) # minPts個以上の点が存在する場合 if minPts <= len ( Ps_NeighborPts ): # 点Pを新たなクラスタCに追加する。 cluster = [ p ] for q in Ps_NeighborPts : # 未探索の場合、探索済みにする。 if not q . searched : q . searched = True # 点qから半径ε以内にある点の個数。 Qs_NeighborPts = q . reacheable ( epsilon ) # minPts個以上の点が存在する場合 if minPts <= len ( Qs_NeighborPts ): # 点qから直接到達可能な点の集合を追加する。 Ps_NeighborPts += Qs_NeighborPts if q not in cluster : cluster . append ( q ) Clusters . append ( cluster ) # minPts個未満の点しか存在しない場合 else : # 探索済みとして終了。 p . searched = True return Clusters Pros and Cons. 利点： k-meansと異なり、あらかじめクラスタ数を与える必要がない。 クラスタが超球状であることを仮定していない。 欠点： クラスタ間で密度に大きな差がある場合正しくクラスタリングされない。 パラメータの選択により出力が影響を受ける。 高次元では次元の呪いにより半径 $\\varepsilon$ の選択が困難。 Q.3 t-SNE+DBSCAN 点の集合をDBSCANを用いてクラスタに分類するプログラムの実装 入力：データ集合・半径 $\\varepsilon$・最小の近接数 minPts 出力：クラスタへの分類結果 線虫の細胞系譜の論文 \"A lineage-resolved molecular atlas of C. elegans embryogenesis at single-cell resolution\" の gene expression matrix data のクラスタリング: https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE126954 GSE126954_cell_annotation.csv は、各細胞の情報（cell type, embryo time, lineage など。） GSE126954_gene_annotation.csv は、各遺伝子の情報（wormbase での ID と short name.） GSE126954_gene_by_cell_count_matrix.txt.gz は、遺伝子発現マトリックスのデータであり、疎な行列のため、圧縮した書き方をしている。 その他の細胞種のデータを使用してt-SNEを実行し、DBSCANでクラスタリングを行う。 GSE126954_gene_by_cell_count_matrix.txtから特定のcell typeのデータを取り出す PCAによる次元削減 t-SNEまたはUMAPによる次元削減 DBSCANによるクラスタリング 各細胞種での遺伝子発現量のヒートマップを作成する 解答 GSE126954_gene_by_cell_count_matrix.txt のデータをクラスタリングする。 細胞総数は$89701$個 遺伝子総数は$20222$個 celltype は$37$種類 embryo time のbinは$12$種類 In [20]: # 全てのデータを取得する場合。 with open ( 'GSE126954_gene_by_cell_count_matrix.txt' , mode = 'r' ) as f : header = f . readline () # １行目は説明 meta_data = f . readline () # ２行目は遺伝子総数・細胞総数・データの行数 lines = [ line . strip ( \" \\n \" ) . split ( \" \" ) for line in f ] # ３行目以降が (遺伝子番号)(細胞番号)(発現量)の形式のデータ。 gene_data = np . asarray ( lines , dtype = np . int ) print ( f \"data.shape= { gene_data . shape } \" ) data.shape=(82802059, 3) 特定の細胞種に絞って解析を行う。 In [21]: import pandas as pd num_gene = 20222 # 今回注目する細胞種 cell_type = [ \"Glia\" , \"Intestine\" , \"Seam_cell\" , \"Coelomocyte\" ] In [22]: # アノテーションファイルから、特定の細胞種の細胞idを調べる。 df_cell_anno = pd . read_csv ( \"GSE126954_cell_annotation.csv\" ) df_cell_used = df_cell_anno [ df_cell_anno [ \"cell.type\" ] . isin ( cell_type )] print ( f \"データ総数: { len ( df_cell_anno ) } \" ) print ( f \"利用するデータ数: { len ( df_cell_used ) } \" ) num_cell_type = len ( df_cell_used ) # Array の形で保持する。 use_cell_id = np . asarray ( df_cell_used . index + 1 ) use_cell_type = df_cell_used [ \"cell.type\" ] . to_numpy () cell_id2idx = dict ( zip ( use_cell_id , np . arange ( num_cell_type ))) データ総数: 89701 利用するデータ数: 7142 In [23]: # Cell type ごとの細胞数の分布。 df_cell_used . groupby ( \"cell.type\" ) . size () Out[23]: cell.type Coelomocyte 787 Glia 1857 Intestine 1732 Seam_cell 2766 dtype: int64 In [25]: # 取得したidを用いて、抽出。 # （この作業を↑のテキスト読み込み時に行った方が速い） gene_data_used = gene_data [ np . asarray ( list ( map ( lambda x : x in use_cell_id , gene_data [:, 1 ]) )) ] In [26]: # 圧縮されていたので、元の行列の形に直す。 gene_expression_matrix = np . zeros ( shape = ( num_cell_type , num_gene ), dtype = np . int ) for ( gene_id , cell_id , val ) in gene_data_used : row = cell_id2idx . get ( cell_id ) gene_expression_matrix [ row , gene_id - 1 ] = val In [27]: # 一度保存（不要） np . save ( \"GSE126954_gene_by_extracted_cell_count_matrix.npy\" , gene_expression_matrix ) Decomposition In [28]: # ロード（不要） gene_expression_matrix = np . load ( \"GSE126954_gene_by_extracted_cell_count_matrix.npy\" ) . astype ( float ) In [29]: num_cell , num_gene = gene_expression_matrix . shape print ( f \"データ数: { num_cell } \" ) print ( f \"特徴量数: { num_gene } \" ) データ数: 7142 特徴量数: 20222 In [30]: from kerasy.utils import CategoricalEncoder encoder = CategoricalEncoder () cell_color = encoder . to_categorical ( use_cell_type ) In [31]: def plot_result ( X , labels = cell_color , model = None , ax = None , cmap = \"jet\" ): if ax is None : fig , ax = plt . subplots ( figsize = ( 4 , 4 )) uni_labels = np . unique ( labels ) for i , label in enumerate ( uni_labels ): ax . scatter ( X [ labels == label , 0 ], X [ labels == label , 1 ], cmap = cmap , label = f \"cls { i + 1 } \" , s = 3 , alpha =. 7 ) ax . legend () mn = model . __class__ . __name__ ax . set_title ( f \" { mn } result \\n num cluster: { len ( uni_labels ) } \" , fontsize = 20 ) ax . set_xlabel ( \"$x_{\" + mn + \"1}$\" , fontsize = 16 ), ax . set_ylabel ( \"$x_{\" + mn + \"2}$\" , fontsize = 16 ) return ax PCA In [32]: from kerasy.ML.decomposition import PCA In [33]: model_pca = PCA ( n_components = 2 ) model_pca . fit ( gene_expression_matrix ) ge_matrix_pca = model_pca . transform ( gene_expression_matrix ) In [34]: plot_result ( ge_matrix_pca . real , model = model_pca ) plt . show () tSNE In [35]: from kerasy.ML.decomposition import tSNE In [36]: model_tsne = tSNE ( initial_momentum = 0.5 , final_momoentum = 0.8 , eta = 500 , random_state = seed ) In [37]: ge_matrix_tsne = model_tsne . fit_transform ( gene_expression_matrix , n_components = 2 , initial_dims = 50 , perplexity = 30.0 , verbose = 1 , epochs = 500 ) Preprocessing the data using PCA to reduce the dimentions 20222→50 Each conditional Gaussian has the same perplexity: 30.0 Mean value of sigma: 0.005 500/500 [####################] 100.00% - 2081.965s KL(P||Q): 0.6061920748571116 In [38]: plot_result ( ge_matrix_tsne , model = model_tsne ) plt . show () UMAP In [39]: from kerasy.ML.decomposition import UMAP In [40]: model_umap = UMAP ( min_dist = 0.1 , spread = 1.0 , sigma_iter = 40 , sigma_init = 1.0 , sigma_tol = 1e-5 , sigma_lower = 0 , sigma_upper = np . inf , ) In [41]: ge_matrix_umap = model_umap . fit_transform ( gene_expression_matrix , n_components = 2 , n_neighbors = 15 , init = \"random\" , epochs = 500 , init_lr = 1.0 , ) 500/500 [####################] 100.00% - 917.261s In [42]: plot_result ( ge_matrix_umap , model = model_umap ) plt . show () Results In [43]: fig , ( ax_pca , ax_tsne , ax_umap ) = plt . subplots ( 1 , 3 , figsize = ( 18 , 6 )) ax_pca = plot_result ( ge_matrix_pca . real , model = model_pca , ax = ax_pca ) ax_tsne = plot_result ( ge_matrix_tsne , model = model_tsne , ax = ax_tsne ) ax_umap = plot_result ( ge_matrix_umap , model = model_umap , ax = ax_umap ) plt . tight_layout () plt . show () Clustering In [44]: from kerasy.ML.cluster import DBSCAN tSNE In [45]: dbscan_tsne = DBSCAN ( eps = 0.8 , min_samples = 10 ) dbscan_labels_tsne = dbscan_tsne . fit_predict ( ge_matrix_tsne ) 7142/7142 [####################] 100.00% - 0.639s num cluster: 6 In [46]: fig , ( ax_tsne , ax_tsne_dbscan ) = plt . subplots ( 1 , 2 , figsize = ( 12 , 6 )) ax_tsne = plot_result ( ge_matrix_tsne , labels = cell_color , model = model_tsne , ax = ax_tsne ) ax_tsne_dbscan = plot_result ( ge_matrix_tsne , labels = dbscan_labels_tsne , model = dbscan_tsne , ax = ax_tsne_dbscan ) plt . tight_layout () plt . show () UMAP In [47]: dbscan_umap = DBSCAN ( eps = 0.5 , min_samples = 5 ) dbscan_labels_umap = dbscan_umap . fit_predict ( ge_matrix_umap ) 7142/7142 [####################] 100.00% - 1.140s num cluster: 7 In [48]: fig , ( ax_umap , ax_umap_dbscan ) = plt . subplots ( 1 , 2 , figsize = ( 12 , 6 )) ax_umap = plot_result ( ge_matrix_umap , labels = cell_color , model = model_umap , ax = ax_umap ) ax_tsne_dbscan = plot_result ( ge_matrix_umap , labels = dbscan_labels_umap , model = dbscan_umap , ax = ax_umap_dbscan ) plt . tight_layout () plt . show () Results In [49]: fig , (( ax_tsne , ax_tsne_dbscan ),( ax_umap , ax_umap_dbscan )) = plt . subplots ( 2 , 2 , figsize = ( 12 , 12 )) ax_tsne = plot_result ( ge_matrix_tsne , labels = cell_color , model = model_tsne , ax = ax_tsne ) ax_tsne_dbscan = plot_result ( ge_matrix_tsne , labels = dbscan_labels_tsne , model = dbscan_tsne , ax = ax_tsne_dbscan ) ax_umap = plot_result ( ge_matrix_umap , labels = cell_color , model = model_umap , ax = ax_umap ) ax_tsne_dbscan = plot_result ( ge_matrix_umap , labels = dbscan_labels_umap , model = dbscan_umap , ax = ax_umap_dbscan ) plt . tight_layout () plt . show () 紹介していただいた参考文献 サンガー研究所のscRNA-seq解析トレーニングコース シングルセル研究論文集Vol.2 –最近のシングルセル論文まとめ Barnes-Hut アルゴリズム-푂(푁log푁)に高速化したt-SNE How to Use t-SNE Effectively -t-SNEを使う際の注意点 UMAP: Uniform Manifold Approximation and Projection for Dimension Reduction if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(森下)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-7.html"},{"title":"分子生命科学Ⅲ 第12回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 脳と行動(4) 精神疾患","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-12.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-12.html"},{"title":"生命情報表現論 第7回","text":"グループ議論とプレゼンテーション システムバイオロジーで何ができるか","tags":"生命情報表現論","url":"https://iwasakishuto.github.io/University/3A/生命情報表現論-7.html","loc":"https://iwasakishuto.github.io/University/3A/生命情報表現論-7.html"},{"title":"生命情報表現論 第6回","text":"データの共有と結合","tags":"生命情報表現論","url":"https://iwasakishuto.github.io/University/3A/生命情報表現論-6.html","loc":"https://iwasakishuto.github.io/University/3A/生命情報表現論-6.html"},{"title":"6.統計遺伝学","text":"Homework.1 ある1つのSNPと表現型の関連を調べたい。 - $y_k(k=1,\\ldots,N)$: Sample $k$ の表現型（中心化: $\\mathbb{E}\\left[\\mathbf{y}\\right]=0$） - $x_k(k=1,\\ldots,N)$: Sample $k$ の注目する遺伝型（中心化: $\\mathbb{E}\\left[\\mathbf{x}\\right]=0$） - $\\varepsilon_k(k=1,\\ldots,N)$: 残差項、$\\varepsilon_k\\sim_{\\mathrm{i.i.d.}}\\mathcal{N}\\left(0, \\sigma&#94;2\\right)$ とし、 $$y_k = \\beta x_k + \\varepsilon_k$$ のモデルを立てる。 Q.1-1 （必須課題） $\\beta$ の最小二乗（OLS; Ordinary least squares）推定量 $\\hat{\\beta}$ の値を $\\varepsilon_k$ を⽤いて、$\\hat{\\beta}$ の分布を $\\sigma&#94;2$ を用いて求めてください。 $\\beta=0$ の帰無仮説の元で、$\\hat{\\beta}$ を線形変換して $z\\sim\\mathcal{N}(0,1)$ に従う確率変数 $z$ と $z&#94;2$ が従う分布を求めてください。 （ちなみに、OLS推定量は最尤推定量と一致する。） 解答 この問題では、データの真の分布が上記の方程式で表され、$\\varepsilon_k$ が誤差の実現値であるとみなす。したがって、求めるべきパラメータは $\\beta$ であるが、 観測されたデータは $(x,y)$ の一部であるため、観測されたデータから推定された $\\hat{\\beta}$ が真の値であるとは限らない。 よって、$\\hat{\\beta}$ が残差項 $\\varepsilon$ の確率分布の影響を受け、ある確率分布に従うと考える。 1 したがって、あるパラメータ $\\beta$ の下でSample $k$ の表現型（$x_k$）から推定される遺伝型（$\\hat{y_k}$）は、$\\hat{y_k}=\\beta x_k$ で表される。この推定値と観測値 $y_k$ の二乗誤差を最小にする $\\beta$ が 最小二乗推定量 $\\hat{\\beta}_{\\text{OLS}}$ なので、二乗誤差 $$S = \\sum_k\\left(y_k-\\hat{y_k}\\right)&#94;2 = \\left(y_k-\\beta x_k\\right)&#94;2$$ を最小にすることを考えれば良い。よって、$S$ を $\\beta$ について微分して、 $$ \\begin{aligned} \\left.\\frac{\\partial S}{\\partial\\beta}\\right|_{\\beta=\\hat{\\beta}_{\\text{OLS}}} &= \\sum_k\\left(y_k-\\beta x_k\\right)\\left(-x_k\\right)\\\\ &= \\sum_k\\beta x_k&#94;2 - \\sum_kx_ky_k = 0\\quad\\cdots(\\ast)\\\\ \\therefore\\hat{\\beta}_{\\text{OLS}} &=\\frac{\\sum_kx_ky_k}{\\sum_k x_k&#94;2}\\\\ \\end{aligned} $$ によって最小二乗推定量 $\\hat{\\beta}_{\\text{OLS}}$ が求まった。ここで、先述の通り $\\hat{\\beta}_{\\text{OLS}}$ は残差項 $\\varepsilon$ の影響を受けてある確率分布に従っているので、 $$ \\begin{aligned} \\hat{\\beta}_{\\text{OLS}} &=\\frac{\\sum_kx_ky_k}{\\sum_k x_k&#94;2}\\\\ &=\\frac{\\sum_kx_k\\left(\\beta x_k + \\varepsilon_k\\right)}{\\sum_k x_k&#94;2}\\\\ &=\\beta + \\frac{\\sum_kx_k\\varepsilon_k}{\\sum_k x_k&#94;2} \\end{aligned} $$ と表せる。 ここで、 $\\hat{\\beta}_{\\text{OLS}}$ の確率分布を求めるために、統計量を調べる。 まず、$(\\ast)$ の式から、 $$ \\begin{cases} \\begin{aligned} \\sum_k\\varepsilon_k &= y_k -\\beta x_k = 0\\\\ \\sum_kx_k\\varepsilon_k &= \\sum_kx_ky_k - \\sum_k\\beta x_k&#94;2 = 0\\\\ \\end{aligned} \\end{cases} $$ が成り立っていることがわかる。これは、 残差の平均が $0$ 、 残差と説明変数 $x_k$ が無相関 となるように $\\beta$ が推定されていることを表す。 これを用いて $\\hat{\\beta}_{\\text{OLS}}$ の統計量を求めると、 $$ \\begin{cases} \\begin{aligned} \\mathbb{E}\\left[\\hat{\\beta}_{\\text{OLS}}\\right] &= \\beta\\\\ \\mathbb{V}\\left[\\hat{\\beta}_{\\text{OLS}}\\right] &= \\mathbb{E}\\left[\\left(\\hat{\\beta}_{\\text{OLS}}-\\beta\\right)&#94;2\\right]\\\\ &= \\mathbb{E}\\left[\\sum_k\\varepsilon_k&#94;2\\right]\\mathbb{E}\\left[\\frac{\\sum_kx_k&#94;2}{\\left(\\sum_kx_k&#94;2\\right)&#94;2}\\right]\\\\ &=\\frac{\\sigma&#94;2}{\\sum_kx_k&#94;2} \\end{aligned} \\end{cases} $$ したがって、 $\\varepsilon_k\\sim_{\\mathrm{i.i.d.}}\\mathcal{N}\\left(0, \\sigma&#94;2\\right)$ より $\\hat{\\beta}_{\\text{OLS}}$ が正規分布に従うことは明らか なので、上記の統計量より、$\\hat{\\beta}_{\\text{OLS}}\\sim\\mathcal{N}\\left(\\beta, \\sigma&#94;2/\\sum_kx_k&#94;2\\right)$ 2 $\\beta=0$ の帰無仮説の元で、$\\mathcal{N}\\left(0,1\\right)$ に従うように $\\hat{\\beta}_{\\text{OLS}}$ を線形変換するには、$\\sqrt{\\mathbb{V}\\left[\\hat{\\beta}_{\\text{OLS}}\\right]}$ で $\\hat{\\beta}_{\\text{OLS}}$ を割ってスケーリングすれば良いので、 $$ \\begin{aligned} z &= \\frac{\\hat{\\beta}_{\\text{OLS}}}{\\sqrt{\\mathbb{V}\\left[\\hat{\\beta}_{\\text{OLS}}\\right]}}\\\\ &= \\frac{ \\sum_kx_k\\varepsilon_k / \\sum_kx_k&#94;2}{\\sqrt{\\sigma&#94;2 / \\sum_kx_k&#94;2}}\\\\ &= \\frac{\\sum_kx_k\\varepsilon_k}{\\sigma\\sqrt{\\sum_kx_k&#94;2}}\\sim\\mathcal{N}\\left(0, 1\\right) \\end{aligned} $$ したがって、 $z$ は平均 $0$、分散 $1$ の正規分布に従う。 ここで、標準正規分布の確率密度関数は $p(x) = \\frac{1}{\\sqrt{2\\pi}}\\exp\\left(-\\frac{x&#94;2}{2}\\right)$ とかけるので、$y = f(x) = x&#94;2$ と変数変換する。この時、 逆関数が多価関数となる ので、変換後の密度関数 $q(y)$ は、 $$q(y) = \\sum_ip_i\\left(f_i&#94;{-1}(y)\\right)\\left|\\frac{\\partial f_i&#94;{-1}(y)}{\\partial y}\\right|$$ と 全ての逆関数の和で表される。 したがって、 $$ \\begin{aligned} q(y)\\Delta y &= p(x)\\Delta x + p(-x)\\Delta x\\\\ &= 2p(x)\\Delta x\\quad (y\\geq0)\\\\ q(y) &= 2p\\left(\\sqrt{y}\\right)\\left|\\frac{\\partial \\left(\\sqrt{y}\\right)}{\\partial y}\\right|\\\\ &= 2\\cdot\\frac{1}{\\sqrt{2\\pi}}\\exp\\left(-\\frac{y}{2}\\right)\\frac{1}{2\\sqrt{y}}\\\\ &= \\frac{1}{2&#94;{\\frac{1}{2}}\\sqrt{\\pi}}y&#94;{-\\frac{1}{2}}\\exp\\left(-\\frac{y}{2}\\right) \\end{aligned} $$ 一方、自由度 $n$ のカイ二乗分布は、以下の確率密度関数 $(\\ast)$ で表される分布であるので、 $z&#94;2$ が自由度 $1$ のカイ二乗分布に従うことがわかる。 $$ \\begin{cases} \\begin{aligned} f_n(x) &= \\frac{1}{2&#94;{\\frac{n}{2}}\\Gamma\\left(\\frac{n}{2}\\right)}x&#94;{\\frac{n}{2}-1}\\exp\\left(-\\frac{x}{2}\\right)\\quad\\cdots\\left(\\ast\\right)\\\\ \\Gamma\\left(\\frac{1}{2}\\right) &= \\sqrt{\\pi} \\end{aligned} \\end{cases} $$ Q.1-2 （選択課題） $\\sigma&#94;2$ を不偏推定量 $\\hat{\\sigma}&#94;2=c\\sum_k\\left(y_k-\\hat{\\beta}x_k\\right)&#94;2$ （$c$ は定数）に置換するとき、$\\hat{\\sigma}&#94;2$ の値を求めて下さい。また、$\\beta=0$ の帰無仮説の元で $z_{\\hat{\\sigma}&#94;2}$ が自由度 $N-1$ のt分布に従うことを示して下さい。 解答 全 $N$ サンプルの不偏分散なので、$c=N-1$ であり、 $$ \\begin{aligned} \\hat{\\sigma}&#94;2 &= \\frac{1}{N-1}\\sum_{k=1}&#94;N\\left(y_k - \\hat{\\beta}_{\\text{OLS}}\\right)&#94;2\\\\ &= \\frac{1}{N-1}\\sum_{k=1}&#94;N\\left(y_k - \\left(\\beta + \\frac{\\sum_jx_j\\varepsilon_j}{\\sum_j x_j&#94;2}\\right)x_k\\right)&#94;2\\\\ &= \\frac{1}{N-1}\\sum_{k=1}&#94;N\\left(y_k - \\beta x_k - \\frac{\\sum_jx_j\\varepsilon_j}{\\sum_j x_j&#94;2}x_k\\right)&#94;2\\\\ &= \\frac{1}{N-1}\\sum_{k=1}&#94;N\\left(y_k-\\beta x_k\\right)&#94;2\\\\ &= \\frac{1}{N-1}\\sum_{k=1}&#94;N\\varepsilon_k&#94;2\\\\ &= \\frac{\\sigma&#94;2}{N-1}\\sum_{k=1}&#94;N\\left(\\frac{\\varepsilon_k}{\\sigma}\\right)&#94;2 \\end{aligned} $$ よって、$\\beta=0$ の帰無仮説の元で、$z$ は $$ \\begin{aligned} z_{\\hat{\\sigma}&#94;2} &= \\frac{\\sum_kx_k\\varepsilon_k}{\\hat{\\sigma}\\sqrt{\\sum_kx_k&#94;2}}\\\\ &= \\frac{\\sum_kx_k\\varepsilon_k}{\\sqrt{\\frac{\\sigma&#94;2}{N-1}\\sum_{k=1}&#94;N\\left(\\frac{\\varepsilon_k}{\\sigma}\\right)&#94;2}\\sqrt{\\sum_kx_k&#94;2}}\\\\ &= \\frac{\\sum_kx_k\\varepsilon_k}{\\sigma\\sqrt{\\sum_kx_k&#94;2}}/\\sqrt{\\sum_{k=1}&#94;N\\left(\\frac{\\varepsilon_k}{\\sigma}\\right)&#94;2/\\left(N-1\\right)} \\end{aligned} $$ ここで、 $$ \\begin{aligned} \\frac{\\sum_kx_k\\varepsilon_k}{\\sigma\\sqrt{\\sum_kx_k&#94;2}} &\\sim \\mathcal{N}(0,1)\\\\ \\sum_{k=1}&#94;N\\left(\\frac{\\varepsilon_k}{\\sigma}\\right)&#94;2&\\sim\\mathcal{\\chi}&#94;2_N \\end{aligned} $$ なので、 $z_{\\hat{\\sigma}&#94;2}$ が自由度 $N-1$ のt分布に従うことは示せなかった。 どのようにして自由度 $N-1$ のカイ二乗分布に従う確率変数を導くのかわかりませんでした。 Q.1-3 （選択課題） $\\beta\\neq0$ の仮定の元で、Q.1-1 の $z$ はどのような分布に従うかを $\\beta,\\sigma&#94;2$ を用いて求めてください。また、$z&#94;2$ はどのような分布に従うかを求めてください。 解答 $\\beta\\neq0$ の仮定のもとで Q.1-1 と同様の線形変換を行うと、 $$ \\begin{aligned} z &= \\frac{\\hat{\\beta}_{\\text{OLS}}}{\\sqrt{\\mathbb{V}\\left[\\hat{\\beta}_{\\text{OLS}}\\right]}}\\\\ &= \\frac{\\beta+\\left( \\sum_kx_k\\varepsilon_k / \\sum_kx_k&#94;2\\right)}{\\sqrt{\\sigma&#94;2 / \\sum_kx_k&#94;2}}\\\\ &= \\frac{\\beta}{\\sigma}\\sqrt{\\sum_kx_k&#94;2}+\\frac{\\sum_kx_k\\varepsilon_k}{\\sigma\\sqrt{\\sum_kx_k&#94;2}}\\sim\\mathcal{N}\\left(\\frac{\\beta}{\\sigma}\\sqrt{\\sum_kx_k&#94;2}, 1\\right) \\end{aligned} $$ したがって、 $z$ は平均 $\\frac{\\beta}{\\sigma}\\sqrt{\\sum_kx_k&#94;2}$ 分散 $1$ の正規分布に従う。 ここで、上記の正規分布は、$\\mu = \\frac{\\beta}{\\sigma}\\sqrt{\\sum_kx_k&#94;2}$ として $f(x)=\\frac{1}{\\sqrt{2\\pi}}\\exp\\left(-\\frac{(x-\\mu)&#94;2}{2}\\right)$ とかけるので、先ほどと同様に $y=x&#94;2$ と変数変換すると、 $$ \\begin{aligned} q(y) &= \\frac{1}{2\\sqrt{y}}\\frac{1}{\\sqrt{2\\pi}}\\left[\\exp\\left(-\\frac{\\left(y-2\\sqrt{y}\\mu+\\mu&#94;2\\right)}{2}\\right) + \\exp\\left(-\\frac{\\left(y+2\\sqrt{y}\\mu+\\mu&#94;2\\right)}{2}\\right)\\right]\\\\ &= \\frac{1}{2\\sqrt{y}}\\frac{1}{\\sqrt{2\\pi}}\\exp\\left(-\\frac{y + \\mu&#94;2}{2}\\right)\\left[\\exp\\left(\\sqrt{y}\\mu\\right) + \\exp\\left(-\\sqrt{y}\\mu\\right)\\right]\\\\ &= \\frac{1}{\\sqrt{2\\pi y}}\\exp\\left(-\\frac{y + \\lambda}{2}\\right)\\cosh\\left(\\sqrt{y\\lambda}\\right),\\quad\\left(\\lambda = \\mu&#94;2\\right)\\\\ &= \\frac{1}{\\sqrt{2\\pi y}}\\exp\\left(-\\frac{y + \\lambda}{2}\\right)\\sum_{n=0}&#94;{\\infty}\\frac{\\left(\\sqrt{y\\lambda}\\right)&#94;{2n}}{2n!}\\\\ &= \\frac{1}{\\sqrt{2\\pi y}}\\exp\\left(-\\frac{y + \\lambda}{2}\\right)\\sum_{n=0}&#94;{\\infty}\\frac{\\left(y\\lambda\\right)&#94;{n}}{2n!} \\end{aligned} $$ 一方、自由度 $k$、非心パラメータ $\\lambda$ の $\\chi&#94;2$ 分布の確率密度関数が $$f(x;k,\\lambda) = \\frac{1}{2}\\exp\\left(-\\frac{x + \\lambda}{2}\\right)\\left(\\frac{x}{2}\\right)&#94;{\\frac{k}{2}-1}\\sum_{n=0}&#94;{\\infty}\\frac{1}{n!\\Gamma\\left(\\frac{k}{2} + n\\right)}\\left(\\frac{\\lambda z}{4}\\right)&#94;n$$ と表される [Wiki] ことから、 $z&#94;2$ が自由度 $1$、非心パラメータ $\\lambda=\\mu&#94;2 = \\frac{\\beta&#94;2}{\\sigma&#94;2}\\sum_kx_k&#94;2$ の非心カイ二乗分布に従う ことがわかる。 $k=1$ とした時、非心カイ二乗分布は、 $$ \\begin{aligned} f(x;1,\\lambda) &= \\frac{1}{2}\\exp\\left(-\\frac{x+\\lambda}{2}\\right)\\left(\\frac{x}{2}\\right)&#94;{-\\frac{1}{2}}\\sum_{n=0}&#94;{\\infty}\\frac{1}{n!\\Gamma\\left(\\frac{1}{2} + n\\right)}\\left(\\frac{\\lambda x}{4}\\right)&#94;n\\\\ &= \\frac{1}{\\sqrt{2x}}\\exp\\left(-\\frac{x+\\lambda}{2}\\right)\\sum_{n=0}&#94;{\\infty}\\frac{1}{n!\\Gamma\\left(\\frac{1}{2} + n\\right)}\\left(\\frac{\\lambda x}{4}\\right)&#94;n \\end{aligned} $$ と書けるので、先ほどの式と比べると、 $$\\frac{1}{\\sqrt{\\pi}}\\sum_{n=0}&#94;{\\infty}\\frac{\\left(x\\lambda\\right)&#94;{n}}{2n!} = \\sum_{n=0}&#94;{\\infty}\\frac{1}{n!\\Gamma\\left(\\frac{1}{2} + n\\right)}\\left(\\frac{\\lambda x}{4}\\right)&#94;n$$ が言えれば良い。ここで、 $$ \\begin{aligned} \\frac{1}{n!\\Gamma\\left(\\frac{1}{2} + n\\right)}\\left(\\frac{\\lambda x}{4}\\right)&#94;n &= \\frac{1}{n!\\frac{\\left(2n - 1\\right)!!}{2&#94;n}\\sqrt{\\pi}}\\left(\\frac{\\lambda x}{4}\\right)&#94;n\\\\ &= \\frac{1}{\\sqrt{\\pi}}\\frac{1}{n!\\left(2n-1\\right)!!}\\left(\\frac{\\lambda x}{2}\\right)&#94;n\\\\ &= \\frac{1}{\\sqrt{\\pi}}\\frac{1}{n!\\frac{(2n)!}{2&#94;nn!}}\\left(\\frac{\\lambda x}{2}\\right)&#94;n\\\\ &= \\frac{1}{\\sqrt{\\pi}}\\frac{\\left(\\lambda x\\right)&#94;n}{2n!} \\end{aligned} $$ と変換できるので、正しさが確認された。 Q.1-4 （選択課題） 上記の解析 （全tag SNPに対して独立に、表現型との間に線形な関係があると仮定して線形回帰を行う） を全SNPについて行うとする。$i$ 番目のSNPの効果量を $\\beta_i$、$q_i:=\\mathrm{Var}\\left[\\beta_ix_i\\right]/\\mathrm{Var}[y]$ としたとき、Q.1-3で求めた非心パラメータ $\\lambda_i$ を $q_i&#94;2$ を用いて表してください。 解答 $i$ 番目のSNPに関するモデルは以下のように表される。 （$y_{ik}$ は、$i$ に依らず、Sample $k$ のみに依存） $$y_{ik} = \\beta_ix_{ik} + \\varepsilon_{ik}$$ したがって、誤差項が独立であることから分散の線型性を用いると、 $$ \\begin{aligned} \\mathbb{V}\\left[\\mathbf{y}_i\\right] &= \\mathbb{V}\\left[\\beta_i\\mathbf{x}_{ik}\\right] + \\mathbb{V}\\left[\\boldsymbol{\\varepsilon}_i\\right]\\\\ &= \\mathbb{V}\\left[\\beta_i\\mathbf{x}_{ik}\\right] + \\sigma_i&#94;2\\\\ \\end{aligned} $$ であるので、これを用いると、 $$ \\begin{aligned} 1/q_i&#94;2 &= \\mathbb{V}\\left[\\mathbf{y}_i\\right] / \\mathbb{V}\\left[\\beta_i\\mathbf{x}_{ik}\\right]\\\\ &= 1 + \\frac{\\sigma_i&#94;2}{\\mathbb{V}\\left[\\beta_i\\mathbf{x}_{ik}\\right]}\\\\ &= 1 + \\frac{\\sigma_i&#94;2}{\\beta_i&#94;2\\sum_kx_{ik}&#94;2} \\end{aligned} $$ という関係が導かれる。 以上より、非心パラメータ $\\lambda_i$ を $q_i&#94;2$ で表すと $$ \\lambda_i= \\frac{\\beta_i&#94;2}{\\sigma_i&#94;2}\\sum_kx_{ik}&#94;2 = \\frac{q_i&#94;2}{1-q_i&#94;2} $$ Q.1-5 （選択課題） 全 $M$ 個のSNPの $\\chi&#94;2$ 統計量(null仮説の時 $\\chi&#94;2$ 分布に従う統計量)のみからこの表現型の遺伝率 $h&#94;2$ を推定するためにはどうすれば良いか、ただし、 LD（連鎖不均衡） は存在しないものとし、causal variants は全て Genotyping されており、complex trait ($q_i\\ll1$) と仮定して良い。 解答 遺伝率は、 表現型の分散のうち遺伝型で説明される分散の割合 を表す。つまり、 $$\\underbrace{y_k}_{P\\text{: Phenotype}} = \\underbrace{\\sum_i&#94;M\\beta_ix_{ik}}_{G\\text{: Gene}} + \\underbrace{\\varepsilon_k}_{E\\text{: Environment}}$$ とおいた時に、$h&#94;2:=\\mathbb{V}\\left[G\\right]/\\mathbb{V}\\left[P\\right]$ として定義される。 ここで、complex diseaseでは、GWAS解析において少数の有意なSNPと、多数の弱い関連SNPがある。そこで、 $h_{\\text{GWAS}}$（表現型の分散のうち、GWASで有意なSNPのみで説明できる分散の割合） を求める。これは、各SNPの効果量のGWAS推定値 $\\hat{\\beta_i}$ を重みとし、線形和として表現型の推定値 $\\hat{\\phi_i}$ を $$\\hat{\\phi_i} = \\sum_{\\text{Significant SNP i}}\\hat{\\beta_i}x_{ik}$$ で求め、$h_{\\text{GWAS}}&#94;2 = r&#94;2\\left(\\hat{\\boldsymbol{\\phi}},\\mathbf{y}\\right)$ という関係を用いて求める。 Homework.2 与えられた身長のSimulation dataを見て、気が付いたことを答えてください。 PCAを行い、サンプル内にクラスタが存在するか確認せよ。 （必須課題） QQplotを書いてみよ。 （必須課題） 余裕があれば、後述のPrediction(Risk Score)も求めよ。 ※ 遺伝型は real data ですが、表現型は simulation data です。 解答 ファイル名 概要 カラムの説明 simu.legend SNPに関する情報が書いてあります。1行が1つのSNPに対応しています。 sid : SNPの名前 chrom : 染色体番号 position : 位置 minor : minor allele major : major allele simu.phe サンプルに関する情報が書いてあります。1行が1サンプルに対応しています。 id : サンプルid pop : population group : populationのグループ(EAS: east asian, EUR: european, AFR: african) simu.genot 遺伝型情報が書いてあります。1行が1サンプルに、1列が1SNPに対応しています。順番は simu.genot , simu.phe と同じです。 各要素はminor alleleの個数 In [1]: import numpy as np from scipy import stats import pandas as pd import matplotlib.pyplot as plt In [2]: df_legend = pd . read_csv ( \"simu/simu.legend\" ) df_phe = pd . read_csv ( \"simu/simu.phe\" ) df_genot = pd . read_csv ( \"simu/simu.genot\" , header = None , sep = \" \" ) In [3]: print ( f \"Total num of Samples (N): { len ( df_phe ) } \" ) print ( f \"Total num of SNPs (M): { len ( df_legend ) } \" ) print ( f \"(M,N) = { df_genot . shape } \" ) Total num of Samples (N): 1668 Total num of SNPs (M): 83440 (M,N) = (83440, 1668) In [4]: Y = df_phe . height X = np . asarray ( df_genot ) . T In [5]: # 標準化 X = ( X - np . average ( X , axis = 0 )) / np . std ( X , axis = 0 ) Y = ( Y - np . average ( Y )) / np . std ( Y ) PCAを行い、サンプル内にクラスタが存在するか確認せよ。 In [6]: from sklearn.decomposition import PCA In [7]: print ( f \"(N,M) = { X . shape } \" ) (N,M) = (1668, 83440) In [8]: pca = PCA ( n_components = 2 ) pca . fit ( X ) Out[8]: PCA(copy=True, iterated_power='auto', n_components=2, random_state=None, svd_solver='auto', tol=0.0, whiten=False) In [9]: X_transformed = pca . transform ( X ) In [10]: X_pc1 , X_pc2 = X_transformed . T In [11]: plt . figure ( figsize = ( 6 , 6 )) plt . scatter ( X_pc1 , X_pc2 , s = 10 ) plt . title ( \"PCA\" , fontsize = 16 ), plt . xlabel ( \"Principle Component 1\" ), plt . ylabel ( \"Principle Component 2\" ) plt . show () 上のプロットより、 サンプル内にクラスタが存在することが確認できた。 そこで、試しにKMeans法を用いてクラスを分割する In [12]: from kerasy.utils import findLowerUpper In [13]: from sklearn.cluster import KMeans model = KMeans ( n_clusters = 3 , random_state = 0 ) In [14]: model . fit ( X_transformed ) Out[14]: KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, n_clusters=3, n_init=10, n_jobs=1, precompute_distances='auto', random_state=0, tol=0.0001, verbose=0) In [15]: Xlus = findLowerUpper ( X_transformed , margin = 5e-2 , N = 100 ) X1lus , X2lus = np . meshgrid ( * Xlus ) Xs = np . c_ [ X1lus . ravel (), X2lus . ravel ()] Zs = model . predict ( Xs ) . reshape ( X1lus . shape ) In [16]: cls = model . predict ( X_transformed ) In [17]: plt . figure ( figsize = ( 6 , 6 )) plt . scatter ( X_pc1 , X_pc2 , s = 15 , c = cls , cmap = \"jet\" ) plt . pcolor ( X1lus , X2lus , Zs , alpha = 0.2 , cmap = \"jet\" ) plt . title ( \"PCA\" , fontsize = 16 ), plt . xlabel ( \"Principle Component 1\" ), plt . ylabel ( \"Principle Component 2\" ) plt . show () QQplotを書いてみよ。 各SNPと表現型の間に以下のモデルを立てる。 $$y_k = \\beta x_k + \\varepsilon_k$$ In [18]: def calc_uniform_order_statistic_medians ( sample_size ): v = np . zeros ( sample_size , dtype = np . float64 ) v [ - 1 ] = 0.5 ** ( 1.0 / sample_size ) v [ 0 ] = 1 - v [ - 1 ] i = np . arange ( 2 , sample_size ) v [ 1 : - 1 ] = ( i - 0.3175 ) / ( sample_size + 0.365 ) return v In [19]: betas = np . asarray ([ np . sum ( x * Y ) / np . sum ( x * x ) for x in X . T ]) In [20]: sample_size = len ( betas ) osm_uniform = calc_uniform_order_statistic_medians ( sample_size ) osm = stats . norm . ppf ( osm_uniform ) osr = np . sort ( betas ) In [21]: plt . scatter ( osm , osr , color = \"b\" , s = 10 ) plt . title ( \"QQ Plot\" ), plt . xlabel ( 'Theoretical quantiles' ), plt . ylabel ( \"Ordered Values\" ), plt . grid () plt . show () Homework.3 Q.1では、各SNPごとに単回帰を行い、$\\hat{\\beta}_i$ を推定していたが、ここでは、全SNPによる効果と表現型の関連を 同時に 考えたい。 - $\\mathbf{y} = \\left(y_k\\right)$: 従属変数ベクトル（表現型） - $\\boldsymbol{\\beta} = \\left(\\beta_i\\right)$: 効果量ベクトル - $\\mathbf{X} = \\left(x_{k,i}\\right)$: 独立変数行列 - $\\boldsymbol{\\varepsilon}=\\left(\\varepsilon_k\\right)$: 残差項ベクトル $\\left(\\sim_{\\text{i.i.d.}}\\mathcal{N}\\left(0,\\sigma&#94;2\\mathbf{I}_n\\right)\\right)$ $$ \\begin{aligned} y_{k} = \\sum_{i=1}&#94;M\\beta_ix_{ik} + \\varepsilon_{k}\\quad \\left(\\underbrace{\\mathbf{y}}_{(N)} = \\underbrace{\\mathbf{X}}_{(N\\times M)}\\underbrace{\\boldsymbol{\\beta}}_{(M)} + \\underbrace{\\boldsymbol{\\varepsilon}}_{(N)}\\right) \\end{aligned} $$ の多重線形モデルを考える。また、この時 $x_{ik},y_{k}$ は標準化されているものとする。 Q.3-1 （必須課題） 重回帰を用いて遺伝型 $\\mathbf{X}$ と表現型 $\\mathbf{y}$ から最小二乗推定値 $\\tilde{\\boldsymbol{\\beta}}$ を求めてください。また、LDがないとき、$\\tilde{\\beta_i}$ の分布を $\\beta_i$ を用いて求めてください。 解答 最小二乗推定量 $\\hat{\\boldsymbol{\\beta}}_{\\text{OLS}}$ は、残差平方和 $$s:= \\left\\|\\mathbf{y}-\\hat{\\mathbf{y}}\\right\\|&#94;2 = \\left(\\mathbf{y}-\\mathbf{X}\\boldsymbol{\\beta}\\right)&#94;T\\left(\\mathbf{y}-\\mathbf{X}\\boldsymbol{\\beta}\\right)$$ を最小化するので、 $$ \\begin{aligned} \\left.\\frac{\\partial s}{\\partial\\boldsymbol{\\beta}}\\right|_{\\boldsymbol{\\beta}=\\hat{\\boldsymbol{\\beta}}_{\\text{OLS}}} &= \\frac{\\partial}{\\partial\\boldsymbol{\\beta}}\\left(\\mathbf{y}&#94;T\\mathbf{y} - 2\\boldsymbol{\\beta}&#94;T\\mathbf{X}&#94;T\\mathbf{y} + \\boldsymbol{\\beta}&#94;T\\mathbf{X}&#94;T\\mathbf{X}\\boldsymbol{\\beta}\\right)\\\\ &= -2\\mathbf{X}&#94;T\\mathbf{y} + 2\\mathbf{X}&#94;T\\mathbf{X}\\boldsymbol{\\beta}\\quad\\cdots\\left(\\ast\\right)\\\\ &= \\mathbf{0}\\\\ \\therefore\\hat{\\boldsymbol{\\beta}}_{\\text{OLS}} &=\\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{y} \\end{aligned} $$ ここで、$D:=\\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)$ の各要素は、 $$ D_{ij} = \\mathbf{x}_i&#94;T\\mathbf{x}_j = \\begin{cases} N\\mathrm{Var}\\left[\\mathbf{x}_i\\right] = N & (i=j)\\\\ N\\mathrm{Cov}\\left[\\mathbf{x}_i,\\mathbf{x}_j\\right] & (i\\neq j) \\end{cases} $$ LDが存在しない時、つまり、SNP間に相関がない時 $\\left(\\mathrm{Cov}\\left[\\mathbf{x}_i,\\mathbf{x}_j\\right] = 0\\left(i\\neq j\\right)\\right)$ 、全てのSNPが独立なので、$\\hat{\\boldsymbol{\\beta}}_{\\text{OLS}}=\\mathbf{X}&#94;T\\mathbf{y}/N$ とかける。 これより、 $$ \\begin{aligned} \\hat{\\boldsymbol{\\beta}}_{\\text{OLS}_i} &= \\frac{1}{N}\\left(\\mathbf{X}&#94;T\\mathbf{y}\\right)_i\\\\ &= \\frac{1}{N}\\left(\\mathbf{X}&#94;T\\left(\\mathbf{X}\\boldsymbol{\\beta} + \\boldsymbol{\\varepsilon}\\right)\\right)_i\\\\ &= \\left(\\boldsymbol{\\beta} + \\frac{1}{N}\\mathbf{X}&#94;T\\boldsymbol{\\varepsilon}\\right)_i \\end{aligned} $$ と分解できるので、 $$ \\begin{cases} \\begin{aligned} \\mathbb{E}\\left[\\hat{\\boldsymbol{\\beta}}_{\\text{OLS}_i}\\right] &= \\boldsymbol{\\beta}_i\\quad \\left(\\because \\text{equation }(\\ast)\\right)\\\\ \\mathbb{V}\\left[\\hat{\\boldsymbol{\\beta}}_{\\text{OLS}_i}\\right] &= \\boldsymbol{\\varepsilon}&#94;T\\boldsymbol{\\varepsilon} = \\frac{1}{N}\\mathbb{V}\\left[\\boldsymbol{\\varepsilon}\\right] \\end{aligned} \\end{cases} $$ と $\\boldsymbol{\\beta}$ の統計量がわかる。この時、遺伝率が $$\\underbrace{y_k}_{P\\text{: Phenotype}} = \\underbrace{\\sum_i&#94;M\\beta_ix_{ik}}_{G\\text{: Gene}} + \\underbrace{\\varepsilon_k}_{E\\text{: Environment}}$$ において $h&#94;2:=\\mathbb{V}\\left[G\\right]/\\mathbb{V}\\left[P\\right]$ と表されていたことを考えれば、$\\mathbb{V}\\left[\\boldsymbol{\\varepsilon}\\right] = 1-h&#94;2$ であることがわかる。以上より、 $$\\hat{\\boldsymbol{\\beta}}_{\\text{OLS}_i}\\sim\\mathcal{N}\\left(\\beta_i,\\frac{1-h&#94;2}{N}\\right)$$ Q.3-2 （選択課題） LDがなく、Infinitesimal Modelの場合、$\\beta_i|\\tilde{\\beta_i}$ が従う事後分布を求めてください。 解答 Q.3-2,Q.3-3 では、ベイズの定理を用いて $\\beta_i$ の事後分布を求める。 $$p\\left(\\beta_i|\\hat{\\beta}_{\\text{OLS}_i}\\right)\\propto p(\\beta_i)p\\left(\\hat{\\beta}_{\\text{OLS}_i}|\\beta_i\\right)$$ Infinitensimal Model では、 全SNPが小さな効果量を持つ と仮定し、全SNPに等しく分散を割り当てる。 $$\\beta_i\\sim\\mathcal{N}\\left(0,\\frac{h&#94;2}{M}\\right)$$ したがって、 $$ \\begin{aligned} p\\left(\\beta_i|\\hat{\\beta}_{\\text{OLS}_i}\\right) &\\propto p(\\beta_i)p\\left(\\hat{\\beta}_{\\text{OLS}_i}|\\beta_i\\right)\\\\ &=\\mathcal{N}\\left(0,\\frac{h&#94;2}{M}\\right)\\mathcal{N}\\left(\\beta_i,\\frac{1-h&#94;2}{N}\\right)\\\\ &\\propto\\exp\\left(-\\frac{1}{2\\frac{h&#94;2}{M}}\\left(x-0\\right)&#94;2\\right)\\exp\\left(-\\frac{1}{2\\frac{1-h&#94;2}{N}}\\left(x-\\beta_i\\right)&#94;2\\right)\\\\ &=\\exp\\left(-\\frac{1}{2}\\left(\\frac{M}{h&#94;2}x&#94;2 + \\frac{N}{1-h&#94;2}\\left(x&#94;2-2\\beta_ix + \\beta_i&#94;2\\right)\\right)\\right)\\\\ &\\propto\\exp\\left(-\\frac{1}{2}\\left(\\frac{M(1-h)&#94;2+Nh&#94;2}{h&#94;2(1-h)&#94;2}\\right)\\left(x&#94;2 - 2\\frac{Nh&#94;2\\beta_i}{M(1-h)&#94;2+Nh&#94;2}\\right)x\\right)\\\\ &\\propto\\exp\\left(-\\frac{1}{2}\\left(\\frac{M(1-h)&#94;2+Nh&#94;2}{h&#94;2(1-h)&#94;2}\\right)\\left(x - \\frac{Nh&#94;2\\beta_i}{M(1-h)&#94;2+Nh&#94;2}\\right)&#94;2\\right)\\\\ &= \\mathcal{N}\\left(\\frac{Nh&#94;2\\beta_i}{M(1-h)&#94;2+Nh&#94;2},\\frac{h&#94;2(1-h)&#94;2}{M(1-h)&#94;2+Nh&#94;2}\\right) \\end{aligned} $$ Q.3-3 （選択課題） LDがなく、Non-infinitesimal Modelの場合、$\\beta_i|\\tilde{\\beta_i}$ が従う事後分布を求めてください。 解答 Non-infinitensimal Model では、 割合 $\\rho$ のSNPのみ効果量を持つ と仮定し、それらに等しく分散を割り当てる。 $$ \\beta_i\\sim \\begin{cases}\\begin{aligned} &\\mathcal{N}\\left(0,\\frac{h&#94;2}{M_{\\rho}}\\right) & \\left(\\text{with probability $\\rho$}\\right)\\\\ &0 & \\left(\\text{else}\\right) \\end{aligned}\\end{cases} $$ よって、Q.3-2と同様に考えて、 $$ p\\left(\\beta_i|\\hat{\\beta}_{\\text{OLS}_i}\\right)\\sim \\begin{cases}\\begin{aligned} &\\mathcal{N}\\left(\\frac{Nh&#94;2\\beta_i}{M_{\\rho}(1-h)&#94;2+Nh&#94;2},\\frac{h&#94;2(1-h)&#94;2}{M_{\\rho}(1-h)&#94;2+Nh&#94;2}\\right) & \\left(\\text{with probability $\\rho$}\\right)\\\\ &0 & \\left(\\text{else}\\right) \\end{aligned}\\end{cases} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(森下)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-6.html"},{"title":"分子生命科学Ⅲ 第11回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 脳と行動(3) 脳のリズムと睡眠","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-11.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-11.html"},{"title":"5.de Bruijn graphとその表現","text":"定義：ゲノムアセンブリ **※ インデックスは0-originである。** |記号・用語|定義| |:-:|:-| |$$\\Sigma=\\{A,C,G,T\\}$$|塩基の集合| |$$\\Sigma&#94;{\\ast}$$|全ての配列| |$$&#94;-:\\Sigma&#94;\\ast\\rightarrow\\Sigma&#94;\\ast$$|配列の相補塩基対（通常のワトソンクリックの相補対）を取るという演算 | |$$\\mathbf{G}$$|ゲノム。塩基上の文字列| |$$G=\\|\\mathbf{G}\\|$$|ゲノムの文字列長| |$$r$$|リード。ゲノム $\\mathbf{G}$ からサンプリングされた、**長さ $l \\in \\mathbb{N},l < G$ の配列。**より正確には、$[0\\cdots G-1]$ 上の一様分布に従う確率変数 $X$ の関数 $\\mathbf{G}[X\\cdots X+l)$ なお、スライスがインデックスの範囲を超えた場合は、環状ゲノムのことを示していると考える。$$\\mathbf{G}[X\\cdots X+l] = \\mathbf{G}[X\\cdots G] + \\mathbf{G}[0\\cdots X-G+l] $$| |$$R$$|独立にサンプリングした $N\\in\\mathbb{N}$ 本のリードの集合 $\\{r_1,r_2,\\cdots,r_N\\}$ 各リードの長さは固定長 $l$ とする。| |$$c=lN/G$$|平均深度**（データサイズ/ゲノムサイズ）**。$\\times10.4$ などと記されている。ここで、$\\mathbf{G}$ がわかっていないにも関わらず $G$ がわかるのは、染色体の大きさから推定することができるからである。| |深度|何回読まれたか| |被覆度|どのくらいの割合が、最低1回読まれるか。| |強連結成分 $V&#94;{\\prime}$|頂点の部分集合で（$V&#94;{\\prime}\\subset V(G)$）、「$V&#94;{\\prime}$ の頂点の中では互いに行き来できる」が、「$V&#94;{\\prime}$ から外には行き来できない（行くだけ、来るだけは可能でも良い。）」もの。| Lemma 1 (Coverage) ゲノム中の任意の場所 $G[i]$ での深度 $C_i$ は、$l\\ll G$ かつ $G$ が十分に大きい時、パラメータ $\\lambda=-c$ のポアソン分布に従う。 Proof $i < G-l$ の時を考える。**ある位置 $i$ を覆うリードは、$i-l+1,\\cdots,i$ の部分から開始されたリード**なので、一様分布からサンプリングしていることと合わせると、位置 $i$ での深度 $C_i$ は、 $$ \\begin{aligned} \\operatorname{Pr}\\left\\{C_{i}=k\\right\\} &=\\left(\\begin{array}{l}{N} \\\\ {k}\\end{array}\\right)\\left(\\frac{l}{G}\\right)&#94;{k}\\left(1-\\frac{l}{G}\\right)&#94;{N-k}\\\\ \\end{aligned} $$ なる確率分布に従う。よって、仮定から**$\\lambda=lN/G$ を固定して $G\\rightarrow\\infty$ の極限を取る**ことで、与式を得る。 Lemma 2 リード長 $l$、ゲノムサイズ $G$、リード数 $N$ のシークエンシングをした際、$c=lN/G$ が一定で $G\\rightarrow\\infty$ とした時、ある位置が少なくとも $1$ つのリードで覆われる確率は $1-e&#94;{-c}$ である。 Proof [Lemma1](#lemma1)より、$\\operatorname{Pr}\\left\\{C_{i}=k\\right\\}=\\frac{e&#94;k}{k!}\\exp(-c)$ であるから、求める確率は、 $$1-\\operatorname{Pr}\\left\\{C_{i}=0\\right\\} = 1-e&#94;{-c}$$ 以上より、 「十分多くのリードを読めば、全ての箇所が読まれる確率が1に近づく」 ことがわかる。 またここで、ゲノム $\\mathbf{G}$ がわかっていて、2つのリード $r_i,r_j$ が $l\\ast\\theta\\ (0<\\theta\\leq1)$ だけ重なっていれば、その2つは 「重なった部分から取ってこられた」 と検知できるとする。 Lemma 3 ある場所からリードが始まり、それから $l(1-\\theta)$ 回、新しくリードが始まらない確率を考えれば、連続して取ってこられる領域の長さの期待値が $$l\\ast\\left[\\frac{e&#94;{c(1-\\theta)}-1}{c} + \\theta\\right]$$ となる。 Proof $l\\left(1-\\theta\\right)$ 回、新しくリードが**「始まらない」**確率は、$1-\\theta=s$ とおけば、 $$ \\begin{aligned} \\left(1 - \\frac{N}{G}\\right) &#94; { l\\left(1-\\theta\\right)} &= \\left(\\underbrace{\\left(1 - \\frac{N}{G}\\right)&#94;\\left(-\\frac{G}{N}\\right)}_{\\underset{G\\rightarrow\\infty}{\\Longrightarrow} e}\\right)&#94;{\\left(-\\frac{N}{G}\\right)\\cdot l\\left(1-\\theta\\right)}\\\\ &= \\exp\\left(-cs\\right)\\\\ \\end{aligned} $$ とかける。したがって、**ある連続して取ってこられる領域にあるリードの個数 $J$** は、**失敗（新しく始まらない）** 確率 $\\exp\\left(-cs\\right)$ でコイン投げをして、最初に失敗するまでの回数と考えることができる。（ 幾何分布(geometric distribution) ） さらに、ここで各リード $i=1,\\ldots,J$ が**次のリードに当たるまでの長さ**を $X_i$ とすると、これは**失敗確率 $1-N/G$ の幾何分布**に従う。よって、求める値は $$\\mathbb{E}\\left[ X_1 + X_2 + \\cdots + X_{J-1} + l\\right]$$ となる。最後のリード開始点から固定長 $l$ の長さ分は確実に取ってこれるので、上式の形となる。また、$J$ 個のリードは**連続して取ってこられる領域内にある**ため、 $0\\leq X_i \\leq ls$ となることがわかる。**（これより大きいと、$X_{i-1}$ と $X_i$ が重なったと判断できない。）** ここで、[Wald's equation](https://en.wikipedia.org/wiki/Wald%27s_equation)を用いると、 $$\\begin{aligned} &\\mathbb{E}\\left[ X_1 + X_2 + \\cdots + X_{J-1} + l\\right]\\\\ =& \\mathbb{E}\\left[ X_1 + X_2 + \\cdots + X_{J-1} + \\left(X_J - X_J\\right) + l\\right]\\\\ =& \\mathbb{E}\\left[J\\right]\\mathbb{E}\\left[X_1\\right] - \\mathbb{E}\\left[X_J\\right] + l\\\\ \\end{aligned} $$ と整理できる。また、 $$ \\begin{cases} \\mathbb{E}\\left[X_i\\right] &= l\\left[ \\frac{1-\\exp\\left(-cs\\right)}{c} - s\\exp\\left(-cs\\right)\\right]\\\\ \\mathbb{E}\\left[J\\right] &= \\exp\\left(cs\\right) \\end{cases} $$ を用いてこれを解くと、 $$ \\begin{aligned} &\\mathbb{E}\\left[J\\right]\\mathbb{E}\\left[X_1\\right] - \\mathbb{E}\\left[X_J\\right] + l\\\\ =& \\exp\\left(cs\\right) \\cdot l\\left[ \\frac{1-\\exp\\left(-cs\\right)}{c} - s\\exp\\left(-cs\\right)\\right] - l\\left[ \\frac{1-\\exp\\left(-cs\\right)}{c} - s\\exp\\left(-cs\\right)\\right] + l \\\\ =& l \\left[ \\frac{\\exp(cs) - 1}{c} + 1 - s + \\underbrace{s\\exp(-cs)}_{\\underset{c\\rightarrow\\infty}{\\longrightarrow} 0} - \\underbrace{\\frac{1-\\exp(-cs)}{c}}_{\\underset{c\\rightarrow\\infty}{\\longrightarrow} 0} \\right]\\\\ \\Longrightarrow & l \\left[ \\frac{\\exp(cs) - 1}{c} + 1 - s \\right]\\\\ =& l\\left[\\frac{e&#94;{c(1-\\theta)}-1}{c} + \\theta\\right] \\end{aligned} $$ なお、これはアセンブリが完全に実現できた場合の解析であり、 ある種のアセンブリの上界を与えている と捉えることができる。 ところで、ここにおける確証のためのパラメータ $\\theta$ はどのくらいだろうか？これはゲノムの構成に依存する。例えば、ゲノムの中に、長い $A$ の連続が2箇所以上あった場合、ポリAのリードに対しては、$\\theta=1$ でも、私達が思っている意味での確証はできないように思われる。敷衍して言えば、 このパラメータ $\\theta$ は、ゲノム配列とゲノム上の位置に依存するパラメータであって、どちらもアセンブリの前には手に入らないものだ。 さて、では 「これらのリード $R$ から、元のゲノム $\\mathbf{G}$ を復元する方法」 について考える。ここでは、以下の2つを挙げる。 OLC de Bruijn Graph OLC 最も愚直な手法は、以下の OLC である。 (Overlap) 各リード $r_i$ と $r_j$ が、ゲノム上で連続した領域にあるかを判断する。 (Layout) これらの情報を元に、リード $r_i$ を並べる。 (Consensus) 並んだリードにたいして、各位置で、何らかの手法（例えば多数決）で塩基を確定させる。 OLCは、ゲノムアセンブリ初期に行われ、現在でも、ロングリードシークエンサーの発達とともに再び日の目を見ている。しかし、 Overlapは計算が重い ： 「全リードvs.全リード」の計算を行う必要があり、Suffix Array等で前計算を行い（$O(n\\ast l)$）、 SIMD(Single Instruction Multiple Data) 等で並列にDPを行うことで $O(n\\ast l)$ で \"近似的に\" 実行することができるが、それでも重い。 Overlapが真であるかを確かめることが難しい： 「$r_i,r_j$ がアラインメントをすると良いスコアでアラインできる」からといって「$r_i,r_j$ がゲノム上で重複する部分から読まれている」とは言えない。 Layoutは、厳密解を求めるのが難しい： 「各リードをノードとして、overlapしている組をエッジで結んだグラフ」 において、 「全てのノードを一回だけ使って、全てのノードを回るパスを発見すること」 であるが、この問題はNP完全に属するハミルトン路問題と同一である。 といった問題から、 OLCのパラダイムに基づいて、ゲノムアセンブリを実行する際には、発見的方法、制約条件や作業仮説をつけることが必須になる。 de Bruijn Graph 定義：de Bruijn Graph 正の整数 $k$ に対して、$k$-de Bruijn Graphとは、次のような有向グラフ $G=(V,E)$ のことである。（文字に対しては半開区間でスライスを作ることに注意） 1. $V\\subset\\Sigma&#94;k$ 2. $(u,v)\\in E\\Longleftrightarrow u[1,\\ldots,k) = v[0,\\ldots,k-1)$ 簡単に言えば、$k$-mer の集合を、 『後ろ $k-1$ 文字と先頭 $k-1$ 文字が一致したら辺を引く』 というルールに基づいて辺を引けるだけ引いたグラフである。 ここで、リードの集合 $R$ から作られるde Bruijn Graphを、$R$ 中に出現する $k$-merをノードとするde Bruijn Graphだとする。つまり、 $k+1$ より長いリードに関しては、短い断片にバラバラにしてしまう。 （この時 $R$ 中に何回その $k$-merが現れたかを数えてノードに計数としてのせておく。） それでは、このde Bruijn Graphを用いてアセンブリを行う手法について考えるが、これは 「ある $k$ を固定して、与えられたリードから、全ての $k$-merを抽出してde Bruijn Graphを作り、 オイラー閉路 （環状ゲノム） / オイラーパス （線状ゲノム） を構築する」 ことに他ならない。また、このアルゴリズムは 明らかに $O(|E|)$ で計算できる。 一般に、グラフ $G=(V,E)$ のオイラー閉路/パスを探すアルゴリズムを実装する際は、次のようにパス $P$、開始頂点 $v$ を持っておいて、深さ優先探索を一度だけ、グラフ $G$ を破壊しながら、再帰呼び出して行う擬似コードが用いられることが多い。 1. For each nodes in {u | (v,u) ∈ E} 2. (a) Remove (v,u) from E (b) Call DFS(G,u) 3. Push v to P このプログラムは、 スタック数の上限にさえ気をつければ、辺の数に関して線形時間で解ける。 本来は難しいはずの問題が、辺の数に関して線形時間で解けるのは、どこかでおかしいことが起きているということだと思われる。 「ここまでの定式化のどこがおかしかったのだろうか？」 「現実世界で目にするインスタンスの中で、先程のオイラー閉路/オイラーパスとして解けないものには、どのようなものがあるだろうか？」 詳しく見ていく。 相補鎖 リピート（反復配列） シークエンシングエラー 相補鎖 シークエンシングを行う際に、 「相補鎖・鋳型鎖」 のどちらかを選択することは困難であり、またあるリードの対に対して、それらが同じ鎖から出てきたのか、それとも相補鎖から出てきたのかを知ることもできない。このとき、 2つの鎖が共通の $k$-merを持っていない：2つの弱連結成分からなり、オイラー閉路/パスが2つ獲得できる。 2つの鎖が共通の $k$-merを持っている：グラフを巡回する間に別の鎖に乗り移ってしまうことがあり、これに対処するために以下の面倒な実装が必要となる。 各ノードに $k$-merとその相補鎖を対応させる。 ノード間のエッジが必ず両方向に伸びる。 自分自身への多重ループができうる。 エッジに「鋳型鎖-相補鎖」というようなラベル付けをする。 リピート（反復配列） 2つの異なったゲノム上の位置を占める配列が、全く同じ $k$-merを持ってしまう場合（$\\ldots ARB\\ldots CRD\\ldots$）： ここから構築されるde Bruijn Graohから、グラフが「$\\ldots ARB\\ldots CRD\\ldots$」から読んだリードから構成されたものなのか、「$\\ldots ARD\\ldots CRB\\ldots$」から構成されたものなのかを判別することができない。 このようなグラフから、オイラー閉路/オイラーパスを構築できるかも定かではない。（パスが合流するところ（$R[0]$）では 「出次数<入次数」 となるが、分流する場所ではその逆となる。） paired endというシークエンシング法を使えば、元のリードの情報から、オイラー閉路を選んだり・ノードを複製したり・エッジを複製したりしてアセンブリ結果を良くすることができる。 タンデムリピートの場合（$\\ldots RRRR\\ldots RRRRR\\ldots$） ループ構造になり、$R$ の繰り返し回数を推定することが極めて難しい。 ※ これらの難しい問題に対処するために、現代的なアセンブラでは、リピートに関しては、解決できない部分は諦めて、確信が持てる– 必ず正しいような– 配列のみを出力するようになっている。 シークエンシングエラー de Bruijn Graphは、 「全てのリードが完全に正しいこと」 を要求しており、一塩基の誤りが、$k$ 個の誤った頂点と、$k − 1$ 個の誤った辺を誘導する。 （辺の重みを持たない）de Bruijn Graph そのものには、 このようなエラーを訂正する機能がない ため、オイラー閉路/パスを辿る過程でも、エラーかどうか判定できない。 被覆度を上げるためには十分な量のリードを読む （スループットを上げる） 必要があるが、これに伴って、エラーの総数が、リードの個数に線形に増えていってしまう。 対処法としては、以下が挙げられる。 Fastqファイルの信頼度を利用し、 何らかの閾値を用いて塩基の精度が低いものを取り除く。 ほとんど現れない $k$-merに関しては、単に無視する。 de Bruijn Graphの実装において、 ある頂点の近くだけで探索することによって、エラーを検知して、他の辺にマージする。 深さ優先探索をしていく中で、極端にすぐに行き止まる（本当は無い道を進んでしまった）場合は、直前の分岐までをなかったことにする。 実装における工夫：BloomFilter $k = 50$ 程度でde novo アセンブリを行うと、あり得る $k$-mer の数も多くなり、シークエンス深度によっては、数百ギガバイトものメモリを要求することもある。現在では、多数の実装が開発されており、その最適化の方法、実際の問題に対する性能もまちまちだが、今回は Bloom Filter を用いた確率的 de Bruijn Graph について記述する。 BloomFilterとは、1970 年にBloomらによって開発された、確率的データ構造である。このデータ構造は、ハッシュが計算できるような要素の集合に対する表現を与えるもので、空間効率が非常に高くなるほか、集合に対する所属、追加、そして集合同士の和を高速に計算できることが特徴である。 定義：Bloom Filter $M$ を正の整数、$U$ を任意の集合として、$U$ に対して、$p$ 個のハッシュ函数 $h_i:U\\rightarrow\\{1\\cdots M\\}$ があるとする。このとき、集合 $U$、ハッシュ関数 $\\{h_i\\}$ から構成されるBloomFilter $B$ とは、$M$ 長のBit列 $B\\in\\{t,f\\}&#94;M$ のことである。 演算 BloomFilter $B,B&#94;{\\prime}$、要素 $e\\in U$ に対して、次のように演算を定義する。 # 演算 Return 説明 1 add:(BloomFilter:B, U:e) → BloomFilter $$B&#94;{\\prime} \\text { such that } B&#94;{\\prime}[i]=B[i] \\wedge h_{1}(e) \\wedge h_{2}(e) \\cdots \\wedge h_{p}(e) \\text { for all } i \\in\\{1, \\cdots, M\\}$$ 各ハッシュ値を計算して、その番地に true を立てる。 2 has:(BloomFilter:B, U:e) → {t,f} $$B\\left[h_{1}(e)\\right] \\wedge B\\left[h_{2}(e)\\right] \\cdots \\wedge B\\left[h_{p}(e)\\right]$$ 各ハッシュ値を計算して、それらの番地の場所に全て true が立っているか返す。 3 union:(BloomFilter:B, BloomFilter:B′) → BloomFilter $$B\\mid B&#94;{\\prime}$$ 2つのBloomFilterのBitORを取って返す。 1つの要素 $e\\in U$ に対して、$p$ 個のハッシュ値を計算し、それらが 「全て true であれば含まれている」 / 「どれか一つでも false であれば含まれていない」 とする。 一度BloomFilter $B$ に要素 $e$ を挿入( B.add(e) すれば、以降、 この要素が存在するかどうかのクエリ( B.has(e) は、必ず正しい答え( true ) を返す。 union がBitORを取っていることから、 この条件は union 後も満たされる。 挿入していないある要素 $e&#94;{\\prime}$ については、 B.has(e′) は ほとんどの場合 false になる が、偶然、ハッシュ値 $h_1(e&#94;{\\prime})\\cdots h_p(e&#94;{\\prime})$ がすでに全て埋められているときには、間違えて true を返してしまう。 ※ つまり、 BloomFilterには偽陰性はないが、偽陽性はある。 直感的には、 ハッシュ函数が少なすぎると、同じハッシュ函数値の集合を持った要素がたくさん出てきてしまう ハッシュ函数が多すぎると、すぐにBitVectorがすべて true で埋まってしまう。 $N$ 個の要素を挿入した、$M$ 長のBitVectorと $p$ 個のハッシュ函数からなるBloomFilterの偽陽性は、簡単な計算から $\\left(1-e&#94;{-pN/M}\\right)&#94;p$ と近似できる。 この近似から、 最適なハッシュ函数の個数が $p=\\frac{N}{M}\\ln2$ の近くの整数になることがわかる。 このBloomFilterを用いた「ゆるい」de Bruijn Graohが probabilistic de Bruijn Graph である。 de Bruijn Graphにおいて、 「2つのノードに対してエッジが引かれること」 と 「それらの $k-1$ 長の接頭辞と接尾辞が同じこと」 は同値であるため、 ノードを確定すれば、エッジは自動的に決まる。 ゆえに、de Bruijn Graph を表現するためには、ある $k$-mer に対して、 「それが含まれるか否かを答えるメソッド」 が定義できればよいことになる。 このとき問題となるのは、 偽陽性 であり、そのうちの 「偽陽性であるとしてしまった $k$-merが、本当の $k$-mer間にパスを構成する時」 である。（ 小さな引き込み路しか作らないなら、リードに混入するエラーを取り除くアルゴリズムを流用すれば対処可能。 ） うその $k$-merの集合を予め全て列挙 （Black List） しておけば間違いは無くなるが、これだと 情報論理の観点から、一切の圧縮ができなくなる。 そこで、 偽陽性のうちの重大なもの（`B.has(e)`とクエリされる $e$ のみ） を列挙しようと考える。 定義：Critical False Positive |記号・用語|定義|definition| |:-:|:-|:-| |$$\\mathcal{S}$$|リード中の $k$-merの集合|true positive nodes| |$$\\mathcal{E}$$|$\\mathcal{S}$ の要素と直接辺で結ばれている $k$-mer。言い換えれば、グラフを巡回する際に、クエリになる $k$-merの集合|extensions of nodes from $\\mathcal{S}$| |$$\\mathcal{P}$$|$e\\in\\mathcal{E}$ で BloomFilter $B$ が `B.has(e) = true` を返す $k$-merの集合|all elements of $\\mathcal{E}$ for which the Bloom filter answers _yes_.| ここで、我々が気をつけるべき偽陽性は、 『$\\mathcal{P}$ のうち、$\\mathcal{S}$ には無いようなもの』 である。このことを Critical False Positive と呼ぶ。$\\left(cFP = \\mathcal{P}\\setminus\\mathcal{S}\\right)$ 課題1: Bloom Filter(One of two) 次の三題から二題を選んで解け。 集合 $U$ から $N$ 個の要素をランダムにサンプリングして、$M$ 長の BitVector を使った BloomFilter で表現する時、偽陽性が最も小さくなるようなハッシュ関数の個数を求めよ。ハッシュ関数は $U$ の要素を、$\\{1,\\cdots,M\\}$ までの値に偏りなくマップすると考えてよい。 $M$ を $3$ 以上の素数とする。$A,B$ を、$\\{1,\\cdots,M\\}$ 上の一様分布に独立に従うものとする。確率変数 $Y_i=A\\ast i+B, i=1,\\cdots,t$ について、 『$i\\neq j\\Rightarrow\\text{$Y_i$ and $Y_j$ are independent.}$』 であることを示せ。 ただし、素数 $M$ の剰余類で、連立方程式 $y_i=a\\ast i+b, y_j=a\\ast j+b$ は、$a,b$ について必ず一意に解けることを用いてもよい。ここから、BloomFilter において、$p$ 個のハッシュ関数をどのように構築すればよいか示せ。ハッシュ函数についてより知りたい場合は \"Adam Kirsch and Michael Mitzenmacher. Less hashing, same performance: Building abetter Bloom filter.Random Structures and Algorithms, 33(2):187–218, sep 2008.\" などを参考にせよ。 k-merの集合 $S$ に対して、CriticalFalseNegative を $O(\\|S\\|k)$ で構成するアルゴリズムを与えよ。ランダムアクセスメモリを仮定してよく、メモリ空間は必要な分だけ好きに確保できるとしてよい。 解答 1 Bit Vectorの $i$ 番目の位置に true を立てるハッシュ値の数を $B[i]$ で表す。ここで、$Np$ 個のハッシュ値が一様分布に従っていると仮定すると、 $$ \\begin{aligned} \\operatorname{Pr}\\left\\{B[i]=k\\right\\} &=\\left(\\begin{array}{l}{pN} \\\\ {k}\\end{array}\\right)\\left(\\frac{1}{M}\\right)&#94;{k}\\left(1-\\frac{1}{M}\\right)&#94;{pN-k}\\\\ &=\\frac{(pN)!}{k!(pN-k)!}\\left(\\frac{\\lambda}{pN}\\right)&#94;k\\left(1-\\frac{\\lambda}{pN}\\right)&#94;{-k}\\left(1-\\frac{\\lambda}{pN}\\right)&#94;{pN}\\quad\\left(\\because \\lambda=pN/M\\right)\\\\ &=\\frac{\\lambda&#94;k}{k!} {\\underbrace{\\left(1-\\frac{\\lambda}{pN}\\right)}_{\\underset{pN\\rightarrow\\infty}{\\longrightarrow}e&#94;{-\\lambda}}}&#94;{pN} {\\underbrace{\\left(1-\\frac{\\lambda}{pN}\\right)}_{{\\underset{pN\\rightarrow\\infty}{\\longrightarrow1}}}}&#94;{-k} \\underbrace{\\frac{(pN)!}{(pN-k)!(pN)&#94;k}}_{\\underset{pN\\rightarrow\\infty}{\\longrightarrow1}}\\\\ &\\underset{pN\\rightarrow\\infty}{\\longrightarrow} e&#94;{-\\lambda}\\frac{\\lambda&#94;k}{k!} \\end{aligned} $$ なる確率分布に従う。従って、偽陽性となる確率(False Positive Rate; FPR)は、以下で 近似 できる。 $$ \\begin{aligned} \\operatorname{FPR}(p) &= \\left(1-\\operatorname{Pr}\\left\\{B[i]=0\\right\\}\\right)&#94;p\\\\ &= \\left(1-e&#94;{-\\lambda}\\right)&#94;p\\\\ &= \\left(1 - e&#94;{-pN/M}\\right)&#94;p \\end{aligned} $$ ここで、 $$ \\begin{aligned} \\frac{\\partial\\ln\\left(\\operatorname{FPR}(p)\\right)}{\\partial p} &= \\frac{\\partial}{\\partial p}\\left(p\\ln\\left(1 - e&#94;{-pN/M}\\right)\\right)\\\\ &=\\ln\\left(1 - e&#94;{-pN/M}\\right) + \\frac{pN}{M}\\frac{e&#94;{-pN/M}}{1 - e&#94;{-pN/M}}\\\\ \\therefore\\left.\\frac{\\partial\\ln\\left(\\operatorname{FPR}(p)\\right)}{\\partial p}\\right|_{p = \\frac{M}{N}\\ln2} &=\\ln\\left(1 - \\frac{1}{2}\\right) + \\ln2\\frac{1/2}{1 - 1/2}\\\\ &= -\\ln2 + \\ln2 \\\\ &= 0 \\end{aligned} $$ となるため、最適なハッシュ函数の個数は整数値であるから、 $p = \\frac{M}{N}\\ln2$ 付近の整数 2 素数 $M$ の剰余類で、連立方程式 $$\\begin{cases} y_i&=a\\ast i+b\\\\ y_j&=a\\ast j+b \\end{cases}$$ は、$a,b$ について必ず一意に解けることを用いれば、$y_i$ が与えられた時、 $$y_j = a\\ast \\left(j-i\\right) + y_i$$ となり、これは $i\\neq j$ の時、$y_i$ と独立になる。 従って、 $$h_i = A\\ast i + B\\quad\\operatorname{mod} M$$ というハッシュ関数を $p$ 個用意すれば良いことになる。 3 Critical False Positive は、「 『リード中のk-merの集合 $\\mathcal{S}$ の要素と直接辺で結ばれている $k$-merで、BloomFilter $B$ が B.has(e) = true を返すもの』 のうち、$\\mathcal{S}$ に無いようなもの」を指す。 したがって、以下のアルゴリズムで、$O(\\|S\\|k)$ によって Critical False Positive の構築が可能である。 cFP = [] P = [] for kmer in S : for e in kmer . extensions : if B . has ( e ): # O(1) # P.append(e) if e not in S : # O(k): Using Trie Tree cFP . append ( e ) 課題2: Information theory $n$ 通りのものから一つを選び、それを表現するときは、 $\\log n$ bit が必要になる（$n$ 個を『辞書式順序』で並べて、何番目かを伝えれば良い）。 $n$ 通り値を取り得るものから、重複無しに $m$ 個選んだ集合を表す（i.e, $V\\in U, |U|=n,|V|=m$ なる $V$ を表す）場合には、$\\Omega\\left(\\log \\left(\\begin{array}{c}{n} \\\\ {m}\\end{array}\\right)\\right)$ bit 必要になる。 ここで、$k$-de Bruijn Graph を表現するときは、頂点、すなわち $\\Sigma&#94;k$ の任意の部分集合を表現すれば良い。したがって、$k$-de Bruijn Graph を表現するには、$k$、ノードの個数 $n$ に続けて、どの $k$- mer を選んだかを伝えなければならず、最低でも以下のbitが必要になる（桁数を表すのに追加でbitが使われる）。 $$ \\Omega\\left(\\log k+\\log n+\\log \\left(\\begin{array}{l}{\\Sigma&#94;{k}} \\\\ {n}\\end{array}\\right)\\right) $$ 次の問いに答えよ。 一般に、$n$ 通りの値を取り得るものから、重複無しに $m$ 個選んだ集合を Bloom Filter で表現すると、上記で示した下界より小さくできる。これは下界を破っているように見えるが、そうではない理由を説明せよ（つまり、この BloomFilter は対象の集合を表せていないことを示せ） $k$-de Bruijn graph を、二つの BloomFilter を使って表現することを考える。このデータ構造は複数の BloomFilter からなり、さらに、de Bruijn graph をたどるようなクエリに対しては偽陽性はない。しかも、必要なbit数は上記の下界よりも小さい。一見、この状態は下界を破っているように見えるが、実はそうではない理由を説明せよ。 解答 In [1]: raise KeyboardInterrupt ( \"I didn't understand what the problem statement means.\" ) --------------------------------------------------------------------------- KeyboardInterrupt Traceback (most recent call last) in 1 raise KeyboardInterrupt( ----> 2 \"I didn't understand what the problem statement means.\" 3 ) KeyboardInterrupt : I didn't understand what the problem statement means. 課題3: de Bruijn Graph(Optional) Remark 以下で用いるデータセットは、人為的に作成されており、次のような性質を満たす。 カバレッジは十分量ある（被覆度は1になるように設計してある） 各リードは必ずゲノム中の位置からサンプリングされているし、エラーはない。 どちらか一方の鎖からしかリードはサンプリングされていない。つまり、相補鎖について考える必要はない。 あるkがあり、このkを用いて作った k-mer de Bruijn Graph は \"ほとんど\" リニアになっている。つまり、ほとんどのノードの入次数と出次数は1になる。 （確率的であれ、別のものであれ）de Bruijn Graph を実装し、 .fasta fileと整数 $k$ を入力として、何らかの .fasta fileを出力するようなプログラムを書け（注：頑張りすぎないこと。ノードを選んで探索すればよい）。 余裕がある人は、2つのデータセット tiny と large に対して、何か $k$ を決めて、リードから $k$-deBruijn Graph を構築して、その上で何かしらのパスを求めてみよ。 参考のために、リードをサンプリングした配列もデータセットに含めておいた。 解答 In [2]: from kerasy.utils import read_fastseq In [3]: true_seq = read_fastseq ( \"dataset/tiny/assumed_genome_size1K_readlength_100.fasta\" )[ 0 ] reads = read_fastseq ( \"dataset/tiny/tiny.fa\" ) In [4]: from kerasy.search.debruijn import kmer_deBruijnGraph k = 89 model = kmer_deBruijnGraph ( k = k ) model . build ( reads ) In [5]: print ( f \"num sequences : { model . num_reads } \" ) print ( f \"average length: { model . ave_read_length } \" ) num sequences : 150 average length: 100.0 model . export_graphviz ( f \"deBruijnGraph_ { k } mer.png\" ) In [6]: from kerasy.Bio.alignment import SmithWaterman score_model = SmithWaterman () score_model . load_params () Loading Parameters from /Users/iwasakishuto/Github/portfolio/Kerasy/kerasy/utils/default_params/SmithWaterman.json In [7]: print ( f \"length of the true sequence: { len ( true_seq ) } \" ) print ( true_seq ) length of the true sequence: 1000 GAAGACTGCACGTTGCATATTTGCCATCATCTATGGACCGTGCGAGAATTCAATACTAATCCTGTCCGCAGTTAGTTTAAATCCGACGGGCTCAGTTCGCTAGTAGAACCAACGCGCTCTCCAGGAATCTAACAATCAACTTCTTCATTGCCGGTAACCTTGTTCAATAACACTAACACCTTTCTAAGCCACCCGTAACAGTACTCCTTCCTGGGCTGTTCTACAACAAGGAGAGGTTTACGTTTGACCCGGTTTCCATTTATTTAACAGCGGCTTATTATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATCCCTAGGTAAACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTGAGTCAACGCGGGCCTAACCAGTAGGTCGGTGCAGTACTGAAGACAAGGCGATCAAGGCGTCCAAGAGCGCATGCCCCGACCGAAGGTACATCCCGTGCTGTAGACGGACAGATCTTGCCCATCGGGTTTCCATTTATTTAACAGCGGCTTATTATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATCCCTAGGTAAACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTACTTATCAAATTAAGTAGTCATCCGTCACACGAGACGGAAGCCTTGCCGGTGACCGTAACCTAGTTACTACGCAGAGGACACTTGTCACTCTCCTTCGAAACTCTACACCGGGGAAACTCGTCTCCATCCCCTTTGCATAGGTGTCTTCATTAAAAGTGTCATAGACTCAGACGTTCGCCTTCCTGAACCAACAGGATCAGCGGCTCCCGGCCACCACTTGGATTACCGCCAGAGGCCATCGCTGCGCGAGTTCTGGAAAAAGATTGAAACCAGCGTCTAACTTCTCTTACAGGCACAATCTCAGGTCGTTTATCCAGAATGACCACAAATCTCGGTAAAATCTTTCTCGGCCTCTTACTCGGTGTGGACGGCGC In [8]: for init in model . inits : result_trail = model . assemble ( init ) for result in result_trail : score_model . align ( true_seq , result , verbose =- 1 ) print () print ( \"*\" * 60 ) Model: SmithWaterman Alignment score: 102.000 ============================================================================= A: [0858] AGGCCATCGCTGCGCGAGTTCTGGAAAAAGATTGAAACCAGCGTCTAACTTCTCTTACAG [0918] B: [0000] AGGCCATCGCTGCGCGAGTTCTGGAAAAAGATTGAAACCAGCGTCTAACTTCTCTTACAG [0060] A: [0918] GCACAATCTCAGGTCGTTTATCCAGAATGACCACAAATCTCG [0959] B: [0060] GCACAATCTCAGGTCGTTTATCCAGAATGACCACAAATCTCG [0101] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 107.000 ============================================================================= A: [0785] CATAGACTCAGACGTTCGCCTTCCTGAACCAACAGGATCAGCGGCTCCCGGCCACCACTT [0845] B: [0000] CATAGACTCAGACGTTCGCCTTCCTGAACCAACAGGATCAGCGGCTCCCGGCCACCACTT [0060] A: [0845] GGATTACCGCCAGAGGCCATCGCTGCGCGAGTTCTGGAAAAAGATTG [0891] B: [0060] GGATTACCGCCAGAGGCCATCGCTGCGCGAGTTCTGGAAAAAGATTG [0106] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 63.000 ============================================================================= A: [0937] ATCCAGAATGACCACAAATCTCGGTAAAATCTTTCTCGGCCTCTTACTCGGTGTGGACGG [0997] B: [0000] ATCCAGAATGACCACAAATCTCGGTAAAATCTTTCTCGGCCTCTTACTCGGTGTGGACGG [0060] A: [0997] CGC [0999] B: [0060] CGC [0062] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 115.000 ============================================================================= A: [0580] GTAAACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTACTTATCAAATTAAG [0640] B: [0000] GTAAACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTACTTATCAAATTAAG [0060] A: [0640] TAGTCATCCGTCACACGAGACGGAAGCCTTGCCGGTGACCGTAACCTAGTTACTA [0694] B: [0060] TAGTCATCCGTCACACGAGACGGAAGCCTTGCCGGTGACCGTAACCTAGTTACTA [0114] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 102.000 ============================================================================= A: [0608] TATCTTATTGCACGCGTACTTATCAAATTAAGTAGTCATCCGTCACACGAGACGGAAGCC [0668] B: [0000] TATCTTATTGCACGCGTACTTATCAAATTAAGTAGTCATCCGTCACACGAGACGGAAGCC [0060] A: [0668] TTGCCGGTGACCGTAACCTAGTTACTACGCAGAGGACACTTG [0709] B: [0060] TTGCCGGTGACCGTAACCTAGTTACTACGCAGAGGACACTTG [0101] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 108.000 ============================================================================= A: [0818] AGGATCAGCGGCTCCCGGCCACCACTTGGATTACCGCCAGAGGCCATCGCTGCGCGAGTT [0878] B: [0000] AGGATCAGCGGCTCCCGGCCACCACTTGGATTACCGCCAGAGGCCATCGCTGCGCGAGTT [0060] A: [0878] CTGGAAAAAGATTGAAACCAGCGTCTAACTTCTCTTACAGGCACAATC [0925] B: [0060] CTGGAAAAAGATTGAAACCAGCGTCTAACTTCTCTTACAGGCACAATC [0107] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 117.000 ============================================================================= A: [0146] ATTGCCGGTAACCTTGTTCAATAACACTAACACCTTTCTAAGCCACCCGTAACAGTACTC [0206] B: [0000] ATTGCCGGTAACCTTGTTCAATAACACTAACACCTTTCTAAGCCACCCGTAACAGTACTC [0060] A: [0206] CTTCCTGGGCTGTTCTACAACAAGGAGAGGTTTACGTTTGACCCGGTTTCCATTTAT [0262] B: [0060] CTTCCTGGGCTGTTCTACAACAAGGAGAGGTTTACGTTTGACCCGGTTTCCATTTAT [0116] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 112.000 ============================================================================= A: [0873] GAGTTCTGGAAAAAGATTGAAACCAGCGTCTAACTTCTCTTACAGGCACAATCTCAGGTC [0933] B: [0000] GAGTTCTGGAAAAAGATTGAAACCAGCGTCTAACTTCTCTTACAGGCACAATCTCAGGTC [0060] A: [0933] GTTTATCCAGAATGACCACAAATCTCGGTAAAATCTTTCTCGGCCTCTTACT [0984] B: [0060] GTTTATCCAGAATGACCACAAATCTCGGTAAAATCTTTCTCGGCCTCTTACT [0111] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 106.000 ============================================================================= A: [0219] TCTACAACAAGGAGAGGTTTACGTTTGACCCGGTTTCCATTTATTTAACAGCGGCTTATT [0279] B: [0000] TCTACAACAAGGAGAGGTTTACGTTTGACCCGGTTTCCATTTATTTAACAGCGGCTTATT [0060] A: [0279] ATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATC [0324] B: [0060] ATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATC [0105] ============================================================================= ************************************************************ Model: SmithWaterman Alignment scoreodel: SmithWaterman Alignment score: 96.000 ============================================================================= A: [0000] GAAGACTGCACGTTGCATATTTGCCATCATCTATGGACCGTGCGAGAATTCAATACTAAT [0060] B: [0018] GAAGACTGCACGTTGCATATTTGCCATCATCTATGGACCGTGCGAGAATTCAATACTAAT [0078] A: [0060] CCTGTCCGCAGTTAGTTTAAATCCGACGGGCTCAGT [0095] B: [0078] CCTGTCCGCAGTTAGTTTAAATCCGACGGGCTCAGT [0113] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 101.000 ============================================================================= A: [0359] ATCTTATTGCACGCGTGAGTCAACGCGGGCCTAACCAGTAGGTCGGTGCAGTACTGAAGA [0419] B: [0000] ATCTTATTGCACGCGTGAGTCAACGCGGGCCTAACCAGTAGGTCGGTGCAGTACTGAAGA [0060] A: [0419] CAAGGCGATCAAGGCGTCCAAGAGCGCATGCCCCGACCGAA [0459] B: [0060] CAAGGCGATCAAGGCGTCCAAGAGCGCATGCCCCGACCGAA [0100] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 100.000 ============================================================================= A: [0549] TCACCTTTACGACTCTCTCATTAATCCCTAGGTAAACCTTGCATCCACGAACTAATTGCT [0609] B: [0000] TCACCTTTACGACTCTCTCATTAATCCCTAGGTAAACCTTGCATCCACGAACTAATTGCT [0060] A: [0609] ATCTTATTGCACGCGTACTTATCAAATTAAGTAGTCATCC [0648] B: [0060] ATCTTATTGCACGCGTACTTATCAAATTAAGTAGTCATCC [0099] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 69.000 ============================================================================= A: [0000] GAAGACTGCACGTTGCATATTTGCCATCATCTATGGACCGTGCGAGAATTCAATACTAAT [0060] B: [0039] GAAGACTGCACGTTGCATATTTGCCATCATCTATGGACCGTGCGAGAATTCAATACTAAT [0099] A: [0060] CCTGTCCGC [0068] B: [0099] CCTGTCCGC [0107] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 102.000 ============================================================================= A: [0898] GCGTCTAACTTCTCTTACAGGCACAATCTCAGGTCGTTTATCCAGAATGACCACAAATCT [0958] B: [0000] GCGTCTAACTTCTCTTACAGGCACAATCTCAGGTCGTTTATCCAGAATGACCACAAATCT [0060] A: [0958] CGGTAAAATCTTTCTCGGCCTCTTACTCGGTGTGGACGGCGC [0999] B: [0060] CGGTAAAATCTTTCTCGGCCTCTTACTCGGTGTGGACGGCGC [0101] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 210.000 ============================================================================= A: [0396] GTAGGTCGGTGCAGTACTGAAGACAAGGCGATCAAGGCGTCCAAGAGCGCATGCCCCGAC [0456] B: [0000] GTAGGTCGGTGCAGTACTGAAGACAAGGCGATCAAGGCGTCCAAGAGCGCATGCCCCGAC [0060] A: [0456] CGAAGGTACATCCCGTGCTGTAGACGGACAGATCTTGCCCATCGGGTTTCCATTTATTTA [0516] B: [0060] CGAAGGTACATCCCGTGCTGTAGACGGACAGATCTTGCCCATCGGGTTTCCATTTATTTA [0120] A: [0516] ACAGCGGCTTATTATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATCC [0576] B: [0120] ACAGCGGCTTATTATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATCC [0180] A: [0576] CTAGGTAAACCTTGCATCCACGAACTAATT [0605] B: [0180] CTAGGTAAACCTTGCATCCACGAACTAATT [0209] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 208.000 ============================================================================= A: [0025] ATCATCTATGGACCGTGCGAGAATTCAATACTAATCCTGTCCGCAGTTAGTTTAAATCCG [0085] B: [0000] ATCATCTATGGACCGTGCGAGAATTCAATACTAATCCTGTCCGCAGTTAGTTTAAATCCG [0060] A: [0085] ACGGGCTCAGTTCGCTAGTAGAACCAACGCGCTCTCCAGGAATCTAACAATCAACTTCTT [0145] B: [0060] ACGGGCTCAGTTCGCTAGTAGAACCAACGCGCTCTCCAGGAATCTAACAATCAACTTCTT [0120] A: [0145] CATTGCCGGTAACCTTGTTCAATAACACTAACACCTTTCTAAGCCACCCGTAACAGTACT [0205] B: [0120] CATTGCCGGTAACCTTGTTCAATAACACTAACACCTTTCTAAGCCACCCGTAACAGTACT [0180] A: [0205] CCTTCCTGGGCTGTTCTACAACAAGGAG [0232] B: [0180] CCTTCCTGGGCTGTTCTACAACAAGGAG [0207] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 100.000 ============================================================================= A: [0844] TGGATTACCGCCAGAGGCCATCGCTGCGCGAGTTCTGGAAAAAGATTGAAACCAGCGTCT [0904] B: [0000] TGGATTACCGCCAGAGGCCATCGCTGCGCGAGTTCTGGAAAAAGATTGAAACCAGCGTCT [0060] A: [0904] AACTTCTCTTACAGGCACAATCTCAGGTCGTTTATCCAGA [0943] B: [0060] AACTTCTCTTACAGGCACAATCTCAGGTCGTTTATCCAGA [0099] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 109.000 ============================================================================= A: [0373] GTGAGTCAACGCGGGCCTAACCAGTAGGTCGGTGCAGTACTGAAGACAAGGCGATCAAGG [0433] B: [0000] GTGAGTCAACGCGGGCCTAACCAGTAGGTCGGTGCAGTACTGAAGACAAGGCGATCAAGG [0060] A: [0433] CGTCCAAGAGCGCATGCCCCGACCGAAGGTACATCCCGTGCTGTAGACG [0481] B: [0060] CGTCCAAGAGCGCATGCCCCGACCGAAGGTACATCCCGTGCTGTAGACG [0108] ============================================================================= ************************************************************ Model: SmithWaterman Alignment scoreodel: SmithWaterman Alignment score: 151.000 ============================================================================= A: [0274] TTATTATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATCCCTAGGTAA [0334] B: [0000] TTATTATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATCCCTAGGTAA [0060] A: [0334] ACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTGAGTCAACGCGGGCCTAAC [0394] B: [0060] ACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTGAGTCAACGCGGGCCTAAC [0120] A: [0394] CAGTAGGTCGGTGCAGTACTGAAGACAAGGC [0424] B: [0120] CAGTAGGTCGGTGCAGTACTGAAGACAAGGC [0150] ============================================================================= Model: SmithWaterman Alignment score: 110.000 ============================================================================= A: [0524] TTATTATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATCCCTAGGTAA [0584] B: [0000] TTATTATTAGCCATCGACTCTGAGTTCACCTTTACGACTCTCTCATTAATCCCTAGGTAA [0060] A: [0584] ACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTACTTATCAA [0633] B: [0060] ACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTACTTATCAA [0109] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 110.000 ============================================================================= A: [0246] ACCCGGTTTCCATTTATTTAACAGCGGCTTATTATTAGCCATCGACTCTGAGTTCACCTT [0306] B: [0000] ACCCGGTTTCCATTTATTTAACAGCGGCTTATTATTAGCCATCGACTCTGAGTTCACCTT [0060] A: [0306] TACGACTCTCTCATTAATCCCTAGGTAAACCTTGCATCCACGAACTAATT [0355] B: [0060] TACGACTCTCTCATTAATCCCTAGGTAAACCTTGCATCCACGAACTAATT [0109] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 119.000 ============================================================================= A: [0185] AAGCCACCCGTAACAGTACTCCTTCCTGGGCTGTTCTACAACAAGGAGAGGTTTACGTTT [0245] B: [0000] AAGCCACCCGTAACAGTACTCCTTCCTGGGCTGTTCTACAACAAGGAGAGGTTTACGTTT [0060] A: [0245] GACCCGGTTTCCATTTATTTAACAGCGGCTTATTATTAGCCATCGACTCTGAGTTCACC [0303] B: [0060] GACCCGGTTTCCATTTATTTAACAGCGGCTTATTATTAGCCATCGACTCTGAGTTCACC [0118] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 105.000 ============================================================================= A: [0340] CATCCACGAACTAATTGCTATCTTATTGCACGCGTGAGTCAACGCGGGCCTAACCAGTAG [0400] B: [0000] CATCCACGAACTAATTGCTATCTTATTGCACGCGTGAGTCAACGCGGGCCTAACCAGTAG [0060] A: [0400] GTCGGTGCAGTACTGAAGACAAGGCGATCAAGGCGTCCAAGAGCG [0444] B: [0060] GTCGGTGCAGTACTGAAGACAAGGCGATCAAGGCGTCCAAGAGCG [0104] ============================================================================= ************************************************************ Model: SmithWaterman Alignment score: 100.000 ============================================================================= A: [0567] CATTAATCCCTAGGTAAACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTAC [0627] B: [0000] CATTAATCCCTAGGTAAACCTTGCATCCACGAACTAATTGCTATCTTATTGCACGCGTAC [0060] A: [0627] TTATCAAATTAAGTAGTCATCCGTCACACGAGACGGAAGC [0666] B: [0060] TTATCAAATTAAGTAGTCATCCGTCACACGAGACGGAAGC [0099] ============================================================================= ************************************************************ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(森下)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-5.html"},{"title":"生命情報表現論 第5回","text":"生命科学におけるネットワークデータの表現法と知識抽出","tags":"生命情報表現論","url":"https://iwasakishuto.github.io/University/3A/生命情報表現論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生命情報表現論-5.html"},{"title":"4.Boosting","text":"統計的学習理論: PAC learning ここでは 二値分類(binary classification) の問題を考える。この問題の目標は、 「与えられた訓練データ $(\\mathbf{x}_i,y_i): \\mathbf{x}_i\\in\\mathcal{X},y_i\\in\\{+1,-1\\},1\\leq i\\leq N$ をもとに、良い分類器 $H:\\mathcal{X}\\rightarrow\\{+1,-1\\}$ を見つけること」 である。 理想的な状況として、 「$\\mathbf{x}_i$ が $y_i$ を完全に決定している」 すなわち 「$y_i = c(\\mathbf{x}_i)$ となる対応 $c$ が存在する」 ような設定を考える。ここで $c$ が任意の関数から選ばれる場合、有限個の学習データから $c$ の値を学習することは不可能となってしまう。つまり、学習が可能であるためには、 「$c$ が関数のより小さなクラス $\\mathcal{C}$（例えば、「滑らかな」関数）から選ばれている $(c\\in\\mathcal{C})$」 という設定が必要である。このように、 問題の学習可能性は、$\\mathcal{C}$ の性質として捉えることができる。 特に大事なのが、 Probably Approximately Correct (PCA) learnable の概念である。 strong learnability: 任意の $P$、正数 $\\epsilon,\\delta>0$ に対し、十分な訓練データが利用できれば、 汎化誤差 $\\epsilon$ 未満となるような分類器 を、$1-\\delta$ 以上の確率で返せる時、$\\mathcal{C}$ は strong PAC learnable であるという。 weak learnability: 任意の $P$、正数 $\\delta>0$ に対し、十分な訓練データが利用できれば、 汎化誤差 $0.5$ 未満となるような分類器 を、$1-\\delta$ 以上の確率で返せる時、$\\mathcal{C}$ は weakly PAC learnable であるという。 なお、AdaBoostは、 ブースティング(weakly PAC learnable → strongly PAC learnable) を達成できるアルゴリズムである。 ※ 学習データにノイズがある場合、 「$\\mathbf{x}_i$ が $y_i$ を完全に決定している」 という理想的な状況から外れてしまうが、 この場合に関しても拡張して論じられている。 一方で、この状況において学習で推定するべき $c$ に相当するのは条件付き確率 $P\\left(y|\\mathbf{x}\\right)$ であるとも考えられる。 AdaBoost weak learnability と類似の概念である empirical weak learnability のみ仮定し、AdaBoostが与えられた訓練データに対する訓練誤差をいくらでも小さくできる。 empirical weak learnability: 任意の訓練データと、任意の重み $w_i(0\\leq w_i\\leq1)$ に対して、重み付き訓練誤差 $\\sum_{i=1}&#94;Nw_i\\mathbb{1}\\{H(\\mathbf{x}_i)\\neq y_i\\}$ が $0.5$ 未満となる $H$ を選べる。 アルゴリズム 分類器 $h_t$ を、重み付き訓練誤差 $\\sum_{i=1}&#94;Nw_{i,t}\\mathbf{1}\\{h_t(\\mathbf{x}_i)\\neq y_i\\}$ が $0.5$ 未満となるように選ぶ。 重みを更新する：$w_{t+1,i} = w_{t,i}\\times\\exp\\{-\\alpha_ty_ih_t(\\mathbf{x}_i)\\}/Zt$ ただし、ここで $\\alpha_t = (1/2)\\times\\ln\\left((1-e_t)/e_t\\right)$ $Z_t$ は規格化定数で $\\sum_i&#94;Nw_{t+1,i} = 1$ が成り立つように決める。 $T$ 回の繰り返しが終了したら、最後に $H(\\mathbf{x}) = \\text{sign}\\left(\\sum_t&#94;T\\alpha_th_t(\\mathbf{x})\\right)$ を返して終了。 def AdaBoost ( N , data , T ): \"\"\" AdaBoost Algorithm. @params N : Total data num. @params data: Training data.| x in X, y in [+1,-1] @params T : Iteration count. \"\"\" # Initialization. W = [ 1 / N for _ in range ( N )] ALPHA = [ 0 for _ in range ( T )] H = [] # Iteration. for t in range ( T ): # select a classifier \"h\" whose Weighted training error \"e\" is smaller than 0.5 h , e = randomSelectClassifier ( W ) ALPHA [ t ] = ( 1 / 2 ) * log (( 1 - e ) / e ) W = W * [ exp ( - alpha [ t ] * y * h ( x )) for ( x , y ) in data ] Z = sum ( W ) # Normalized constant. W = [ w / Z for w in W ] H . append ( h ) def model ( x ): return 1 if sum ([ alpha * h ( x ) for ( alpha , h ) in zip ( ALPHA , H )]) >= 0 else - 1 return model ※ randomSelectClassifier がweak learner の仕事である。理論解析が成り立つためにこの関数が必ず成功して分類器を選ぶことが要求されるが、あくまで理論的保証を得るための要求であり、実際には厳密にこれを満たす weak learner が作れないこともある。その場合は、その時点で繰り返しから抜けて最後のモデルを返すのが一般的である。 問1 $Z_t$ を $e_t$ で表す式を導いて、$e_t<1/2$ の時、$Z_t<1$ であることを確かめよ。 解答 $$ \\begin{aligned} Z_t &= \\sum_i&#94;Nw_{t,i}\\times\\exp\\left(-\\alpha_ty_ih_t\\left(\\mathbf{x}_i\\right)\\right)\\\\ &= \\sum_i&#94;Nw_{t,i}\\times\\exp\\left(-\\alpha_ty_ih_t\\left(\\mathbf{x}_i\\right)\\right)\\left(\\mathbf{1}\\left\\{h_t(\\mathbf{x}_i)\\neq y_i\\right\\} + \\mathbf{1}\\left\\{h_t(\\mathbf{x}_i)= y_i\\right\\}\\right)\\\\ &= e_t\\times\\exp(\\alpha_t) + (1-e_t)\\times\\exp(-\\alpha_t)\\\\ &= e_t\\times\\left(\\frac{1-e_t}{e_t}\\right)&#94;{1/2} + \\left(1-e_t\\right)\\left(\\frac{1-e_t}{e_t}\\right)&#94;{-1/2}\\\\ &= 2\\sqrt{e_t\\left(1-e_t\\right)}\\\\ & < 2\\times\\sqrt{1/4} = 1\\qquad\\left(\\because0 < e_t < 1/2\\right) \\end{aligned}\\\\ $$ 訓練誤差の評価式 ここで、最終分類器 $H$ による訓練誤差は、 $$ \\begin{aligned} & \\sum_{i}&#94;{N}(1 / N) \\mathbf{1}\\left\\{H\\left(\\mathbf{x}_{i}\\right) \\neq y_{i}\\right\\} \\\\ =& \\sum_{i}&#94;{N} w_{1, i} \\mathbf{1}\\left\\{\\operatorname{sign}\\left(\\sum_{t=1}&#94;T\\alpha_th_t\\left(\\mathbf{x}_{i}\\right)\\right) \\neq y_{i}\\right\\} \\qquad\\left(\\because w_{1,i}=1/N\\right)\\\\ \\leq & \\sum_{i}&#94;{N} w_{1, i} \\underbrace{\\exp \\left(-y_{i} \\sum_{t=1}&#94;T\\alpha_th_t\\left(\\mathbf{x}_{i}\\right)\\right)}_{\\begin{cases}\\geq1 &\\text{ if $\\operatorname{sign}()\\neq y_i$ }\\\\ > 0 &\\text{otherwise.}\\end{cases}}\\\\ = & \\sum_i&#94;Nw_{1,i}\\prod_{t=1}&#94;T\\exp\\left(-\\alpha_ty_ih_t\\left(\\mathbf{x}_i\\right)\\right)\\\\ = & \\sum_i&#94;Nw_{T+1,i}\\prod_{t=1}&#94;TZ_t \\qquad\\left(\\because w_{t+1,i}Z_t = w_{t,i}\\times\\exp\\left(-y_i\\alpha_th_t\\left(\\mathbf{x}_i\\right)\\right)\\right)\\\\ = & \\prod_{t=1}&#94;TZ_t\\underset{T\\rightarrow\\infty}{\\longrightarrow}0\\qquad\\left(\\because Z_t < 1\\right) \\end{aligned} $$ となるので、最終分類器が、($T$ を十分大きくとれば) 任意の精度を実現できる(strong learnability) ことを確認できた。 期待損失最小化とAdaBoost ここで、一見唐突に出現したように見える $$\\alpha_t = (1/2)\\times\\ln\\left((1-e_t)/e_t\\right)$$ が、以下で定義する指数損失を最小化するという条件を考えると、 自然に 導かれることを示す。 $t$ ラウンドまで足し合わせた分類器 $H_t(\\mathbf{x}) = \\sum_{\\tau=1}&#94;t\\alpha_{\\tau}h_{\\tau}(\\mathbf{x})$ を考えて、$H_t$ の指数損失を $$l_t:=\\sum_i&#94;Nw_{1,i}\\exp\\left(-y_iH_t(\\mathbf{x}_i)\\right)$$ と定義する。 新しく選ばれる分類器 $h_t$ ではなく、計算途中の分類器 $H_t$ に対して考えられている。 訓練データごとの重み $w_{t,i}$ は、初期値のままである。 ことに注意する。 $$ \\begin{aligned} l_t &= \\sum_i&#94;Nw_{1,i}\\exp\\left(-y_iH_t(\\mathbf{x}_i)\\right)\\\\ &= \\sum_i&#94;Nw_{1,i}\\exp\\left(-y_i\\sum_{\\tau=1}&#94;t\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right)\\\\ &= \\sum_i&#94;Nw_{1,i}\\prod_{\\tau=1}&#94;t\\exp\\left(-y_i\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right)\\\\ &= \\sum_i&#94;Nw_{1,i}\\left(\\prod_{\\tau=1}&#94;{t-1}\\exp\\left(-y_i\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right)\\right)\\exp\\left(-\\alpha_ty_ih_t(\\mathbf{x}_i)\\right)\\\\ &= \\left(\\prod_{\\tau}&#94;{t-1}Z_{\\tau}\\right)\\sum_i&#94;Nw_{t,i}\\exp\\left(-\\alpha_ty_ih_t(\\mathbf{x}_i)\\right)\\quad \\left(\\because w_{t,i} = \\frac{w_{t-1,i}\\exp(-\\alpha_{t-1}y_ih_{t-1}(\\mathbf{x}_i))}{Z_{t-1}}\\right) \\end{aligned} $$ ここで、この式の $\\alpha_t$ に対する依存性を考えると、 $$ \\begin{aligned} l_t&\\propto\\sum_i&#94;Nw_{t,i}\\exp\\left(-\\alpha_ty_ih_t(\\mathbf{x}_i)\\right)\\\\ &= \\sum_i&#94;Nw_{t,i}\\times\\exp\\left(-\\alpha_ty_ih_t\\left(\\mathbf{x}_i\\right)\\right)\\left(\\mathbf{1}\\left\\{h_t(\\mathbf{x}_i)\\neq y_i\\right\\} + \\mathbf{1}\\left\\{h_t(\\mathbf{x}_i)= y_i\\right\\}\\right)\\\\ &= e_t\\exp(\\alpha_t) + (1-e_t)\\exp(-\\alpha_t)\\\\ \\end{aligned} $$ となるので、 $$Z(\\alpha_t) = e_t\\exp(\\alpha_t) + (1-e_t)\\exp(-\\alpha_t)$$ と定義する。 問2 $Z_t(\\alpha_t)$ を $\\alpha_t$ について微分して、$Z_t$ を最小にする $\\alpha_t$ とそのときの $Z_t$ の値を求めよ。 ただし、$e_t$ は $\\alpha_t$ からみて定数として考える。 解答 $$ \\begin{aligned} \\frac{\\partial Z_t(\\alpha_t)}{\\partial\\alpha_t} = e_t\\exp(\\alpha_t) - (1-e_t)\\exp(-\\alpha_t) &= 0\\\\ \\therefore\\exp(-\\alpha_t)\\left(e_t\\exp(2\\alpha_t) - (1-e_t)\\right) &= 0\\\\ \\exp\\left(2\\alpha_t\\right) &= \\frac{1-e_t}{e_t}\\\\ \\therefore\\alpha_t &= \\frac{1}{2}\\ln\\left(\\frac{1-e_t}{e_t}\\right) \\end{aligned}\\\\ $$ また、このとき $$ \\begin{aligned} Z(\\alpha_t) &= Z\\left( \\frac{1}{2}\\ln\\left(\\frac{1-e_t}{e_t}\\right)\\right)\\\\ &= e_t \\sqrt{\\frac{1-e_t}{e_t}} + (1-e_t)\\sqrt{\\frac{e_t}{1-e_t}}\\\\ &= 2\\sqrt{e_t(1-e_t)} \\end{aligned}\\\\ $$ したがって、$Z_t$ を最小化するように $\\alpha_t$ を選ぶと、$Z_t$ が 問1 で求めた規格化定数になっていることがわかる。また、$Z_t$ は $l_t$ に比例しているので、 AdaBoostが指数損失 $l_t$ を最小化する ように $\\alpha_t$ を選んでいることがわかる。 $L&#94;2$-Boosting: 回帰問題のためのBoosting AdaBoostの定式化を（ほぼ）同値に言い換えていくことで、回帰のためのBoostingアルゴリズム $L&#94;2$-Boosting が自然に得られることを見ていく。なお、最終的には $y_i\\in\\mathbb{R}$ として回帰問題を扱いたいが、分類問題の枠組みを維持して $y_i\\in\\{+1,-1\\}$ としておく。 Summary 手法 損失関数 補足 Coordinate Descent $$l = \\sum_i&#94;n\\exp\\left(-y_iH(\\mathbf{x}_i)\\right) = \\sum_i&#94;n\\exp\\left(-y_i\\sum_{\\lambda}\\beta_{\\lambda}h_{\\lambda}(\\mathbf{x}_i)\\right)$$ 各ラウンドで選ぶ $h_t$ が大きさ $L$ の有限集合 $\\{h_{\\lambda}\\}(1\\leq\\lambda\\leq L)$ から選ばれるとする。 Gradient descent algorithm $$l_t = \\sum_i&#94;N\\exp\\left(-y_i\\left(H_{t-1}(\\mathbf{x}_i) - \\alpha_t\\frac{\\partial l}{\\partial\\beta}(\\mathbf{x}_i)\\right)\\right)$$ 詳しくは https://mitpress.mit.edu/books/boosting Functional Gradient Descent $$\\mathcal{L}(H)$$ $\\mathcal{L}(H)$ を選択して、AnyBoostアルゴリズムの形に落とし込む。 AdaBoost $$\\mathcal{L}(H) = \\sum_i&#94;N\\exp\\left(-y_iH(\\mathbf{x}_i)\\right)$$ 分類問題の枠組み（$\\mathcal{Y} = \\{+1,-1\\}$） LogitBoost $$\\mathcal{L}(H) = \\sum_i&#94;N\\ln\\left(1 + \\exp\\left(-y_iH(\\mathbf{x}_i)\\right)\\right)$$ 分類問題の枠組み $L&#94;2$-Boosting $$\\mathcal{L}(H) = \\sum_i&#94;N\\left(y_i-H(\\mathbf{x}_i)\\right)&#94;2$$ 回帰問題の枠組み（$\\mathcal{Y} = \\mathbb{R}$） Coordinate Descent法としてのAdaBoost まずは、AdaBoostを Coordinate Descent(座標降下) 法という観点から見てみる。 簡単のため、各ラウンドで選ぶ $h_t$ が大きさ $L$ の有限集合 $\\{h_{\\lambda}\\}(1\\leq\\lambda\\leq L)$ から選ばれるとする。 途中までの分類器 $H_t$ や最終分類器 $H_T$ は $h_{\\lambda}$ の線形結合 $\\beta_{\\lambda}h_{\\lambda}$ として表されるので、$\\beta_{\\lambda}$ を指定すれば完全に定まることになる。 最小化すべき指数損失は、次のように表される。 $$l = \\sum_i&#94;n\\exp\\left(-y_iH(\\mathbf{x}_i)\\right) = \\sum_i&#94;n\\exp\\left(-y_i\\sum_{\\lambda}\\beta_{\\lambda}h_{\\lambda}(\\mathbf{x}_i)\\right)$$ この最小化は、結局 $L$ 個（有限個）のパラメタ $\\beta_{\\lambda}$ の最適化に帰着する。つまり、 各ラウンド $t$ で損失関数が最も減少するように1つのパラメタを選ぶことになる。 アルゴリズムは、以下のように書ける。なお、このアルゴリズムは、$h_t$ の候補が有限に絞られているという条件を別とすれば、AdaBoostと等価となる。（$h_t$ や $\\alpha_t$ として同じものが選ばれてくる。） 初期化：$H_0=0$ つまり、$\\forall\\lambda(\\beta_{\\lambda}=0)$ $t=1,\\ldots,T$ に関して、以下の処理を繰り返す。 exponential loss $$l_t = \\sum_i&#94;N\\exp\\left(-y_iH_t(\\mathbf{x}_i)\\right)$$ が最小になるように $\\lambda$ と $\\alpha_t$ を選ぶ。 つまり、更新すべき分類器 $h_{\\lambda}$ と、その係数 $\\beta_{\\lambda}$ の更新幅を決めるということ であり、数学的に表すと $$H_t(\\mathbf{x}):=H_{t-1}(\\mathbf{x}) + \\alpha_th_{\\lambda}(\\mathbf{x})$$ である。$\\beta_{\\lambda}\\leftarrow\\beta_{\\lambda} + \\alpha_t$ と更新したものが $H_t(\\mathbf{x})$ とも言える。 最後に、以下を返す。 $$H(\\mathbf{x}) = \\text{sign}\\left(H_T(\\mathbf{x})\\right) = \\text{sign}\\left(\\sum_{\\lambda}\\beta_{\\lambda}h_{\\lambda}(\\mathbf{x})\\right)$$ ※ ここまでの議論をまとめると、 $h_t$ が有限の候補から選ばれてくると仮定することで、合成された分類器 $H$ が $h_t$ の線形結合となった →「$H$ を決めること」が「 $L$ 個の実数値（$\\beta_{\\lambda}$）を指定すること」と等価であった。 → $H$ 自体を $L$ 次元の実ベクトル $H\\in\\mathbb{R}&#94;L$ と見なせた。 Functinal Gradient Descent法としてのAdaBoost ここでは、AdaBoostをFunctinal Gradient Descent(汎関数勾配降下)法という観点から定式化してみる。 $h_t$ の候補が有限という仮定を捨てて、$h_t:\\mathcal{X}\\rightarrow\\mathcal{Y}$ という 「関数」 を決めるのだという態度を明確にする。 （関数空間の中で、損失汎関数を最小化する要素を選ぶ。） $\\mathcal{Y}$ として $\\{+1,-1\\}$ を取れば分類問題になる。 $\\mathcal{Y}$ として $\\mathbb{R}$ を取れば回帰問題になる。 選ばれた関数 $H$ の良し悪しは、損失汎関数 $\\mathcal{L}(H)$ によって測る。この値は以下の形をとる。 $$\\mathcal{L}(H) = \\sum_i&#94;N\\text{loss}(\\mathbf{x}_i,y_i)$$ つまり、$H$ は $\\mathbf{x}_i$ で評価した $N$ 個の値 $\\left\\{H(\\mathbf{x}_i)\\right\\}_{1\\leq i\\leq N}$ にのみ依存していると考えることができる。そこで、 $\\mathcal{L}(H)$ を $\\mathbb{R}&#94;N$ 上で定義された関数とみなして勾配降下法の発想が適用する。 （$H(\\mathbf{x}_i) =: f_i$ とおいて、$\\mathcal{L}\\left(f_1,f_2,\\ldots,f_N\\right)$ の勾配ベクトルを計算できる。） ここで、一般の勾配法では $-\\nabla\\mathcal{L}$ の方向に $f_i$ を更新すれば良いので、 $$f_i\\leftarrow f_i - \\alpha\\nabla\\mathcal{L}_i$$ と更新する。よって、Boostingの場合では $$H_t(\\mathbf{x}_i)\\leftarrow H_{t-1}(\\mathbf{x}_i) + \\alpha_th_t(\\mathbf{x}_i)$$ と表せる。なお、ここでは $h_t$ を第 $i$ 成分が $h_t(\\mathbf{x}_i)$ の $N$ 次元ベクトルと考えて、 $H_{t-1}$ で評価した $\\nabla\\mathcal{L}$ と $h_t$ が平行となるように $h_t$ を選んでいる。 しかし、 $h_t$ としてそのようなものが存在するとは限らない。 そこで、次善の策として、 「$h_t$ の向きが $\\nabla\\mathcal{L}$ に最も近いもの」 を探す。ベクトルの向きの近さは内積を利用することで、 $$ (-\\nabla \\mathcal{L}) \\cdot \\frac{h_{t}}{\\left\\|h_{t}\\right\\|}=\\left.\\frac{-1}{\\left\\|h_{t}\\right\\|} \\sum_{i}&#94;{N} \\frac{\\partial \\mathcal{L}}{\\partial f_{i}}\\right|_{f_{i}=H_{t-1}(\\mathbf{x}_i)} h_{t}\\left(\\mathbf{x}_{i}\\right) $$ で測れるので、これの絶対値が最大となる $h_t$ を選び、実係数 $\\alpha_t$ を掛けて $H_{t-1}$ に足せば良い。このようにして更新に用いる $h_t$ を選んで得られるのが、 Functional Gradient DescentによるAnyBoostアルゴリズム である。 $(-\\nabla \\mathcal{L}) \\cdot \\frac{h_{t}}{\\left\\|h_{t}\\right\\|}$ の絶対値が最大となる $h_t$ を選ぶ。 $\\mathcal{L}\\left(H_{t-1} + \\alpha_th_t\\right)$ が最小となる $\\alpha_t$ を選ぶ。 $H_t = H_{t-1} + \\alpha_th_t$ と更新する。 最後に $H=H_T$ を返す。 $L&#94;2$-Boostingの導出 $L&#94;2$-Boostingとは、AnyBoostにおいて損失関数を $L&#94;2$ 損失（自乗誤差）としたものに他ならない。 $$ \\begin{cases} \\begin{aligned} \\mathcal{L}(H) &= \\sum_i&#94;N\\left(y_i - H(\\mathbf{x}_i)\\right)&#94;2\\\\ \\mathcal{L}(f_1,f_2,\\ldots,f_N) &= \\sum_i&#94;N\\left(y_i-f_i\\right)&#94;2\\quad \\left(f_i:=H(\\mathbf{x}_i)\\right) \\end{aligned} \\end{cases} $$ 問3 $\\mathcal{L}(f_1,f_2,\\ldots,f_N)$ と $f_i$ で偏微分した式 $\\frac{\\partial\\mathcal{L}(f_1,f_2,\\ldots,f_N)}{f_i}$ を求めよ（これが $\\nabla\\mathcal{L}$ の成分である）。その式に $f_i = H_{t-1}(\\mathbf{x}_i)$ を代入して、次に選択される $h_t$ の条件を $$\\mathbf{x}_i,y_i(1\\leq i\\leq N),\\alpha_{\\tau},h_{\\tau}(1\\leq\\tau\\leq t-1)$$ の式として表せ。 解答 $$ \\begin{aligned} \\frac{\\partial\\mathcal{L}(f_1,f_2,\\ldots,f_N)}{f_i} &= -2(y_i-f_i)\\\\ &= -2\\left(y_i - H_{t-1}(\\mathbf{x}_i)\\right)\\\\ &= -2\\left(y_i - \\sum_{\\tau=1}&#94;{t-1}\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right)\\\\ \\end{aligned} $$ したがって、 $$ \\begin{aligned} h_t &= \\text{argmax}_h\\left|(-\\nabla \\mathcal{L}) \\cdot \\frac{h}{\\left\\|h\\right\\|}\\right|\\\\ &= \\text{argmax}_h\\left|\\frac{-1}{\\|h\\|}\\sum_i&#94;N-2\\left(y_i - \\sum_{\\tau=1}&#94;{t-1}\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right)h\\left(\\mathbf{x}_{i}\\right)\\right|\\\\ &= \\text{argmax}_h\\left|\\frac{1}{\\|h\\|}\\sum_i&#94;N\\left(y_i - \\sum_{\\tau=1}&#94;{t-1}\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right)h\\left(\\mathbf{x}_{i}\\right)\\right|\\\\ \\end{aligned} $$ 問4 問3 の結果を残差 $\\hat{y}_i:=y_i - H_{t-1}(\\mathbf{x}_i)$ を用いて整理せよ。また、選択の条件を 「距離」 についてのものに書き換えることで、$L&#94;2$-Boostingが、ほとんど 「残差に対する繰り返しの線形回帰」 であることを確認せよ。 つまり、この状況では以下の二つの描像はだいたい等価である。 訓練データはそのまま で、途中の予測器 $H_t$ が更新されていく 訓練データ（の教師信号）を更新 していった $\\hat{y}_i(t)$ に対して $h_t$（と $\\alpha_t$）を選ぶ 解答 残差 $\\hat{y}_i$ を用いれば、 $$ \\begin{aligned} h_t &= \\text{argmax}_h\\left|\\frac{1}{\\|h\\|}\\sum_i&#94;N\\left(y_i - \\sum_{\\tau=1}&#94;{t-1}\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right)h\\left(\\mathbf{x}_{i}\\right)\\right|\\\\ &= \\text{argmax}_h\\left|\\frac{1}{\\|h\\|}\\sum_i&#94;N\\hat{y}_ih(\\mathbf{x}_i)\\right|\\\\ \\end{aligned} $$ と整理できる。また、選択の条件を 「距離」 についてのものに書き換えると、 $$ \\begin{aligned} h_t &= \\text{argmax}_h\\left|(-\\nabla \\mathcal{L}) \\cdot \\frac{h}{\\left\\|h\\right\\|}\\right|\\\\ &= \\text{argmin}_h\\left\\|(-\\nabla \\mathcal{L}) - \\frac{h}{\\left\\|h\\right\\|}\\right\\|\\qquad \\left(\\because \\text{$\\frac{h}{\\left\\|h\\right\\|}$ is const.}\\right)\\\\ &= \\text{argmin}_h\\sqrt{\\sum_{i=1}&#94;N\\left(2\\left(y_i - \\sum_{\\tau=1}&#94;{t-1}\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right) - \\frac{h(\\mathbf{x}_i)}{\\left\\|h\\right\\|} \\right)&#94;2}\\\\ &= \\text{argmin}_h\\sum_{i=1}&#94;N\\left(2\\hat{y}_i - \\frac{h(\\mathbf{x}_i)}{\\left\\|h\\right\\|} \\right)&#94;2\\\\ \\end{aligned} $$ よって、ほとんど 「残差に対する繰り返しの線形回帰」 であることが確認できた。 問5 ここまでで $L&#94;2$-Boostingの導出は完了であるが、 問3 ・ 問4 で一般論から導かれた条件は、$L&#94;2$ 損失の変化分を直接計算することでも出てくる。そこで、変化分 $\\Delta\\mathcal{L}:=\\mathcal{L}(H_t) - \\mathcal{L}(H_{t-1})$ を $\\alpha_t$ の関数と考えて、変化分 $\\Delta\\mathcal{L}$ が最大となる $\\alpha_t$ の値と、そのときの $\\Delta\\mathcal{L}$ の値を求めることで、この条件が 問3 ・ 問4 で求めた条件と同値であることを確かめよ。 解答 $$ \\begin{aligned} \\Delta\\mathcal{L} &= \\mathcal{L}(H_t) - \\mathcal{L}(H_{t-1})\\\\ &= \\sum_{i=1}&#94;N\\left(y_i - \\sum_{\\tau=1}&#94;{t}\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)\\right)&#94;2 - \\sum_{i=1}&#94;N\\left(\\underbrace{y_i - \\sum_{\\tau=1}&#94;{t-1}\\alpha_{\\tau}h_{\\tau}(\\mathbf{x}_i)}_{\\hat{y}_i}\\right)&#94;2\\\\ &= \\sum_{i=1}&#94;N\\left(\\hat{y}_i - \\alpha_th_t\\left(\\mathbf{x}_i\\right)\\right)&#94;2 - \\hat{y}_i&#94;2\\\\ &= \\sum_{i=1}&#94;N\\alpha_t&#94;2h_t&#94;2(\\mathbf{x}_i) - 2\\alpha_th_t(\\mathbf{x}_i)\\hat{y}_i \\end{aligned} $$ ここで、$\\hat{y}_i$ は $\\alpha_t$ に依存していないので、 $$ \\begin{aligned} \\frac{\\partial\\left(\\Delta\\mathcal{L}\\right)}{\\partial\\alpha_t} &= \\sum_{i=1}&#94;N2\\alpha_th_t&#94;2(\\mathbf{x}_i) - 2h_t(\\mathbf{x}_i)\\hat{y}_i = 0\\\\ \\therefore \\alpha_t&=\\frac{\\sum_{i=1}&#94;Nh_t(\\mathbf{x}_i)\\hat{y}_i}{\\sum_{i=1}&#94;Nh_t&#94;2(\\mathbf{x}_i)} \\\\ &= \\frac{1}{\\|h_t\\|&#94;2}\\sum_{i=1}&#94;Nh_t(\\mathbf{x}_i)\\hat{y}_i\\\\ \\end{aligned} $$ をとる時変化分 $\\Delta\\mathcal{L}$ は最大となる。また、この時 $\\Delta\\mathcal{L}$ の値は、 $$ \\begin{aligned} \\Delta\\mathcal{L}\\left(\\alpha_t\\right) &= \\alpha_t\\left(\\alpha_t\\sum_{i=1}&#94;Nh_t&#94;2(\\mathbf{x}_i) - \\sum_{i=1}&#94;N 2h_t(\\mathbf{x}_i)\\hat{y}_i\\right)\\\\ &= \\alpha_t\\left(\\sum_{i=1}&#94;Nh_t(\\mathbf{x}_i)\\hat{y}_i - \\sum_{i=1}&#94;N 2h_t(\\mathbf{x}_i)\\hat{y}_i\\right)\\\\ &= - \\alpha_t\\sum_{i=1}&#94;N h_t(\\mathbf{x}_i)\\hat{y}_i\\\\ &= - \\left(\\frac{1}{\\|h_t\\|}\\sum_{i=1}&#94;Nh_t(\\mathbf{x}_i)\\hat{y}_i\\right)&#94;2 \\end{aligned} $$ となる。これは、 問3 の結果を残差 $\\hat{y}_i:=y_i - H_{t-1}(\\mathbf{x}_i)$ を用いて整理した結果と等しい。 演習 $L&#94;2$-Boostingを使ってKaggle のデータセット King County の住宅価格を予測してみる。[https://www.kaggle.com/harlfoxem/housesalesprediction](https://www.kaggle.com/harlfoxem/housesalesprediction) からCSVのデータセットを取得して、`price` を説明するモデルを学習する。k-fold cross validation を実施してテストデータに対する性能を単純な線形回帰のモデルと比較する。 In [1]: import numpy as np import pandas as pd import matplotlib.pyplot as plt In [2]: df = pd . read_csv ( \"kc_house_data.csv\" ) df . head ( 3 ) Out[2]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } id date price bedrooms bathrooms sqft_living sqft_lot floors waterfront view ... grade sqft_above sqft_basement yr_built yr_renovated zipcode lat long sqft_living15 sqft_lot15 0 7129300520 20141013T000000 221900.0 3 1.00 1180 5650 1.0 0 0 ... 7 1180 0 1955 0 98178 47.5112 -122.257 1340 5650 1 6414100192 20141209T000000 538000.0 3 2.25 2570 7242 2.0 0 0 ... 7 2170 400 1951 1991 98125 47.7210 -122.319 1690 7639 2 5631500400 20150225T000000 180000.0 2 1.00 770 10000 1.0 0 0 ... 6 770 0 1933 0 98028 47.7379 -122.233 2720 8062 3 rows × 21 columns 単純な線形モデルの構築 以下の形で表される最も簡単なモデルを構築する。なお、このとき最も相関が強い特徴量 $x$ を選択する。 $$h_{\\theta}(x) = \\theta_0 + \\theta_1x$$ In [3]: df . corr () . loc [ \"price\" ] . sort_values ( ascending = False ) Out[3]: price 1.000000 sqft_living 0.702035 grade 0.667434 sqft_above 0.605567 sqft_living15 0.585379 bathrooms 0.525138 view 0.397293 sqft_basement 0.323816 bedrooms 0.308350 lat 0.307003 waterfront 0.266369 floors 0.256794 yr_renovated 0.126434 sqft_lot 0.089661 sqft_lot15 0.082447 yr_built 0.054012 condition 0.036362 long 0.021626 id -0.016762 zipcode -0.053203 Name: price, dtype: float64 sqft_living が最も price と相関が強いことがわかる。そこで、 sqft_living を用いて 最も簡単なモデル を作成して、関係性をプロットする。 In [4]: from kerasy.ML.linear import LinearRegression from kerasy.utils import root_mean_squared_error , train_test_split In [5]: y = df [ \"price\" ] . values . reshape ( - 1 , 1 ) x = df [ \"sqft_living\" ] . values . reshape ( - 1 , 1 ) In [6]: ( x_train , x_test ),( y_train , y_test ) = train_test_split ( x , y , train_size = 0.8 , random_state = 0 ) In [7]: simple_lr = LinearRegression () simple_lr . fit ( x_train , y_train ) In [8]: y_pred = simple_lr . predict ( x_test ) rmse = root_mean_squared_error ( y_pred , y_test ) intercept , coef = simple_lr . w [:, 0 ] In [9]: print ( f \"Average Price for Test Data : { y_test . mean () } \" ) print ( f \"Root Mean Squared Error (RMSE): { rmse [ 0 ] } \" ) print ( f \"Intercept (theta_0) : { intercept } \" ) print ( f \"Coefficient (theta_1) : { coef } \" ) Average Price for Test Data : 537445.2153597039 Root Mean Squared Error (RMSE): 251670.11404872165 Intercept (theta_0) : -46927.77334565681 Coefficient (theta_1) : 282.34041948849676 In [10]: plt . figure ( figsize = ( 8 , 6 )) plt . scatter ( x_test , y_test , color = 'darkgreen' , label = \"Data\" , alpha =. 1 ) plt . plot ( x_test , y_pred , color = \"red\" , label = \"Predicted Regression Line\" ) plt . xlabel ( \"Living Space (sqft)\" , fontsize = 15 ) plt . ylabel ( \"Price ($)\" , fontsize = 15 ) plt . xticks ( fontsize = 13 ) plt . yticks ( fontsize = 13 ) plt . legend () plt . show () この図より、 sqft_living だけでもある程度の予測ができていることがわかる。 各種特徴量の可視化 In [11]: remove_cols = [ 'id' , 'date' ] feature_columns = [ col for col in df . columns if col not in remove_cols ] In [12]: print ( feature_columns ) ['price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15'] In [13]: hist = df [ feature_columns ] . hist ( bins = 25 , figsize = ( 16 , 16 ), xlabelsize = '10' , ylabelsize = '10' , xrot =- 15 ) [ x . title . set_size ( 18 ) for x in hist . ravel ()] plt . tight_layout () plt . show () ここで、離散的な特徴量と連続的な特徴量があることが見て取れる。全てを可視化することはしないが、それぞれ objVSexp で可視化が可能である。 In [14]: from kerasy.utils import objVSexp In [15]: fig = plt . figure ( figsize = ( 18 , 4 )) # 離散値 ax1 = fig . add_subplot ( 1 , 3 , 1 ) ax1 = objVSexp ( df [ \"price\" ], df [ \"grade\" ], var_type = \"discrete\" , ax = ax1 ) ax1 . set ( xlabel = 'Grade' , ylabel = 'Price' ) # 連続値(2次元) ax2 = fig . add_subplot ( 1 , 3 , 2 ) ax2 = objVSexp ( df [ \"price\" ], df [ \"sqft_living\" ], var_type = \"continuous\" , ax = ax2 ) ax2 . set ( xlabel = 'sqft Living' , ylabel = 'Price' ) # 連続値(3次元) ax3 = fig . add_subplot ( 1 , 3 , 3 , projection = \"3d\" ) ax3 = objVSexp ( df [ \"bedrooms\" ], df [ 'sqft_living' ], df [ 'sqft_lot' ], var_type = \"continuous\" , ax = ax3 ) ax3 . set ( xlabel = ' \\n sqft Living' , ylabel = ' \\n sqft Lot' , zlabel = 'Bedrooms' , ylim = [ 0 , 250000 ]) plt . tight_layout () plt . show () 特徴量の追加 date , yr_built , yr_renovated から、より意味のある特徴量 age (築年数), age_rnv （改築年数）を作成する。 In [16]: df [ 'sales_yr' ] = df [ 'date' ] . astype ( str ) . str [: 4 ] . astype ( int ) df [ \"age\" ] = df [ 'sales_yr' ] - df [ 'yr_built' ] df [ 'age_rnv' ] = df . apply ( lambda x : x . sales_yr - x . yr_renovated if x . yr_renovated != 0 else 0 , axis = 1 ) In [17]: ax = objVSexp ( df [ \"price\" ], df [ \"age\" ], var_type = \"discrete\" ) plt . show () このままでは利用しづらいので、Binningを行う。 In [18]: bins = [ - 2 , 0 , 5 , 10 , 25 , 50 , 75 , 100 , 100000 ] labels = [ '<1' , '1-5' , '6-10' , '11-25' , '26-50' , '51-75' , '76-100' , '>100' ] df [ 'age_binned' ] = pd . cut ( df [ 'age' ], bins = bins , labels = labels ) In [19]: age_rank = np . arange ( len ( labels )) age_encoder = dict ( zip ( labels , age_rank )) In [20]: fig = plt . figure ( figsize = ( 12 , 4 )) ax1 = fig . add_subplot ( 1 , 2 , 1 ) ax1 = objVSexp ( df [ \"price\" ], df [ \"age_binned\" ], var_type = \"discrete\" , ax = ax1 ) ax1 . set_title ( \"Age\" , fontsize = 18 ) ax2 = fig . add_subplot ( 1 , 2 , 2 ) ax2 = objVSexp ( df [ \"price\" ], df [ \"sales_yr\" ], var_type = \"discrete\" , ax = ax2 ) ax2 . set_title ( \"Sales Year\" , fontsize = 18 ) plt . tight_layout () plt . show () 意外なことに、築年数だけでは価格を予測できそうになかった。 線形回帰 In [21]: df [ \"age_binned\" ] = df [ \"age_binned\" ] . apply ( lambda x : age_encoder [ x ]) In [22]: remove_cols = [ 'id' , 'date' , 'age' , 'yr_built' , 'yr_renovated' , 'zipcode' ] feature_columns = [ col for col in df . columns if col not in remove_cols ] In [23]: Ycol = \"price\" Xcols = [ col for col in feature_columns if col != Ycol ] In [24]: print ( Xcols ) ['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'lat', 'long', 'sqft_living15', 'sqft_lot15', 'sales_yr', 'age_rnv', 'age_binned'] In [25]: X = df [ Xcols ] . values Y = df [ Ycol ] . values . reshape ( - 1 , 1 ) In [26]: ( X_train , X_test ),( Y_train , Y_test ) = train_test_split ( X , Y , train_size = 0.8 , random_state = 0 ) In [27]: from kerasy.utils import cross_validation In [28]: k_fold_seed = 134 単純な線形回帰のモデル 全ての特徴量について線形に足し合わせるた単純なモデルを考える。 $$h_{\\theta}(\\mathbf{x}) = \\theta_0 + \\theta_1x_1 + \\cdots + \\theta_Mx_M$$ In [29]: modelkwargs = { \"basis\" : \"none\" , \"add_bias\" : True , } In [30]: score = cross_validation ( k = 5 , x = X_train , y = Y_train , metrics = root_mean_squared_error , seed = k_fold_seed , modelcls = LinearRegression , modelkwargs = modelkwargs ) In [31]: lr = LinearRegression ( ** modelkwargs ) lr . fit ( X_train , Y_train ) In [32]: Y_pred = lr . predict ( X_test ) max_val = max ( np . concatenate ([ Y_pred , Y_test ]))[ 0 ] In [33]: plt . figure ( figsize = ( 8 , 6 )) plt . scatter ( Y_pred , Y_test , color = 'darkgreen' , label = \"Data\" , alpha =. 1 ) plt . plot (( 0 , max_val ), ( 0 , max_val ), color = \"red\" ) plt . xlabel ( \"Predicted\" , fontsize = 15 ), plt . ylabel ( \"Answer\" , fontsize = 15 ) plt . xticks ( fontsize = 13 ), plt . yticks ( fontsize = 13 ), plt . title ( f \"Simple Linear Regression (k-fold RMSE= { score [ 0 ] : .3f } )\" ) plt . legend () plt . show () 多項式の特徴量を追加した線形回帰のモデル 続いて、全ての特徴量について、多項式の影響も考えたモデルを考える。ここでは、$K=3$ で考える。 $$h_{\\theta}(\\mathbf{x}) = \\theta_0 + \\left(\\theta_{1,1}x_1 +\\cdots+ \\theta_{1,K}x_1&#94;K\\right) + \\cdots + \\left(\\theta_{M,1}x_M +\\cdots+ \\theta_{M,K}x_M&#94;K\\right)$$ In [34]: modelkwargs = { \"basis\" : \"polynomial\" , \"add_bias\" : True , \"exponent\" : np . arange ( 1 , 4 ) } In [35]: score = cross_validation ( k = 5 , x = X_train , y = Y_train , metrics = root_mean_squared_error , seed = k_fold_seed , modelcls = LinearRegression , modelkwargs = modelkwargs ) In [36]: lr = LinearRegression ( ** modelkwargs ) lr . fit ( X_train , Y_train ) In [37]: Y_pred = lr . predict ( X_test ) max_val = max ( np . concatenate ([ Y_pred , Y_test ]))[ 0 ] In [38]: plt . figure ( figsize = ( 8 , 6 )) plt . scatter ( Y_pred , Y_test , color = 'darkgreen' , label = \"Data\" , alpha =. 1 ) plt . plot (( 0 , max_val ), ( 0 , max_val ), color = \"red\" ) plt . xlabel ( \"Predicted\" , fontsize = 15 ), plt . ylabel ( \"Answer\" , fontsize = 15 ) plt . xticks ( fontsize = 13 ), plt . yticks ( fontsize = 13 ), plt . title ( f \"Simple Linear Regression (k-fold RMSE= { score [ 0 ] } )\" ) plt . legend () plt . show () Boosting Algorithm In [39]: from kerasy.ML.boosting import L2Boosting In [40]: num_iteration = 30 num_elements = 20 max_num_feature = 3 boosting_seed = 0 In [41]: N , D = X_train . shape idxes = np . arange ( D ) features = np . asarray ( Xcols ) In [42]: import itertools In [43]: AllModelComb = [] for num_feature in range ( 1 , max_num_feature + 1 ): AllModelComb += list ( itertools . combinations ( idxes , num_feature )) selected_idxes = np . random . RandomState ( boosting_seed ) . choice ( AllModelComb , num_elements , replace = False ) In [44]: Models = [] Masks = np . zeros ( shape = ( 0 , D ), dtype = bool ) print ( f \" { 'id' : &#94; { len ( str ( num_elements )) }} : features\" ) print ( \"-\" * 30 ) for i , idxcomb in enumerate ( selected_idxes ): idxes = np . asarray ( idxcomb ) mask = np . zeros ( shape = ( D ,), dtype = bool ) mask [ idxes ] = 1 X = X_train [:, mask ] # Weak Learners lr = LinearRegression ( \"polynomial\" , exponent = 1 ) lr . fit ( X , Y_train ) Models . append ( lr ) Masks = np . r_ [ Masks , mask . reshape ( 1 , D )] print ( f \" { i : >0 { len ( str ( num_elements )) }} : { ', ' . join ( features [ mask ]) } \" ) id: features ------------------------------ 00: waterfront, condition, grade 01: bedrooms, sqft_above, lat 02: bedrooms, sqft_basement 03: view, condition, age_binned 04: waterfront, long, sqft_lot15 05: sqft_living, sqft_living15, age_rnv 06: sqft_lot, sqft_above, lat 07: waterfront, sqft_basement, sales_yr 08: long, sqft_living15, age_rnv 09: view, sqft_living15, age_binned 10: bathrooms, sqft_lot, sqft_lot15 11: bedrooms, sqft_living15, sales_yr 12: sqft_lot, sqft_above, sqft_living15 13: sqft_living, floors, lat 14: floors, condition, sqft_lot15 15: sqft_lot15 16: sqft_above, sqft_basement, sqft_lot15 17: bathrooms, sqft_basement, sqft_lot15 18: bathrooms, sqft_living, age_rnv 19: waterfront, grade, lat 上記の特徴量を用いたモデルが作成できたので、これらを用いてBoostingを行う。 In [45]: modelkwargs = { \"Models\" : Models , \"Masks\" : Masks , } In [46]: trainkwargs = { \"T\" : num_iteration } In [47]: score = cross_validation ( k = 5 , x = X_train , y = Y_train , metrics = root_mean_squared_error , seed = k_fold_seed , modelcls = L2Boosting , modelkwargs = modelkwargs , trainkwargs = trainkwargs ) In [48]: boosting = L2Boosting ( ** modelkwargs ) In [49]: boosting . fit ( X_train , Y_train , ** trainkwargs ) In [50]: Y_pred = boosting . predict ( X_test ) max_val = max ( np . concatenate ([ Y_pred , Y_test ]))[ 0 ] In [51]: plt . figure ( figsize = ( 8 , 6 )) plt . scatter ( Y_pred , Y_test , color = 'darkgreen' , label = \"Data\" , alpha =. 1 ) plt . plot (( 0 , max_val ), ( 0 , max_val ), color = \"red\" ) plt . xlabel ( \"Predicted\" , fontsize = 15 ), plt . ylabel ( \"Answer\" , fontsize = 15 ) plt . xticks ( fontsize = 13 ), plt . yticks ( fontsize = 13 ), plt . title ( f \"L2-Boosting (k-fold RMSE= { score [ 0 ] } )\" ) plt . legend () plt . show () 単純な線形回帰のモデル 多項式の特徴量を追加した線形回帰のモデル Boosting Algorithm RMSE 210,425 2,966,244 244,652 プロット if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(森下)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-4.html"},{"title":"レポート課題10(12/12出題)","text":"wQAJTwwdF6WYplLvpzo8qg==;OR5BbiLptkQj4Jx3emNP00kLV7SElh//7snv5c0Kpvm34TXbLKgzKc9IERJXMjFwGUYWGJRg0MIjIL6QKjvWXDo0Fwb6Ec9Gte3b1EeTa7P33llW/BYu+Zz+7EMINPLBg22OPOEYQmesKk+B3SXrXhQPQTFxlb8s1z1pTNKYbL+wdhCiIIkw5M/hasBj8ITNYOpeX/F39h4fY22BaSYj7ypSQ1m4xzKEfRsSowqJY+IxvdVs1bV761D64nmT8bgemBFluhB6q1j7QSmviTXbSug55BkwW1OPCh1HKf5eDMIkqXLs15BrljawhZUNq6XTgJVEeOjLCn9RInJPlEdqn9ch1zpBUShz06jV+GC0jghFd7njsSHevTdkOAhoHG5ss7rubraRzfUdQsmEgGDUE1yRRRQD+jGSLVbSE8uTY8atO2RGFkqjlu1SLYOIPz/Vwx6m8n6IWkxNLFj7gdPUwMEwRoZNYFgCZVE9GqfuW65Xs6vFqUmGRVVMkQsRj4Ns37KaVruA6QCHBIfW2bP/+8ZAxMAPRgSSTC6iWS4cwTtFBd8wyecEyMCdN6tp4pvwMrr3WAfPXOKfXgf7on03rMJpK8LBE+U90CvVE7KeYowT6r6yZCW7CVqjjDcLDXs4y3YBFjJS/ey+3n7EE0dpSb6S60yC/a3ToRK6uGFskLt59c6WlRRAV9+zaHCzJfzBF01VdoYxsynX/Pc4ynMffyYggotgE27FBvHKaWnHYahUxf7tbEQil1WVAH9EKjQu2aEgRpMKCAMeLhbZ/y3n8VauhEvddf+8T0zkuQDOLU0/1s0Fn9P0weeT2fOQI+Rj4OFL3Vl+XZlOE1erlriuxLU852FK5JKBhgpnO4XOkIv5CG7khP+GuNkIu8M9BTEk2mULEMdrKoic2BsLH6hLDpt+1bEjTkG2B/VVI2shQ3Ci1M1HQom/Ivh4US0ZzmT6E+YQzGENWn7RFLU0MYFK7hW0uYMyQp78kNpVRsYHyHDpGMX10pz8U+oCpWy6Lp52K1OF8FcWrPqW5v5NynvSkJac+y5l+qeDsB5stLUREiFfTNGxU/06Spv/QlGODHB7D080goTBGub9nq9b0VQrHn4tkhds13whIGrYphBZ8Lmo92gtBseQwlj+LqigVAA552lQMgdKyxGUaP+ca5rn8SOYhjeqesWqfBhwdYdSvx6KFmRPNOxX228aEa4sa3gQ0/QOPU2IoJJDrg1O2ieqaq/L3fU7MMjRCbE9GLMbXaUmnaVh3v+Taas0ox0zZXX0SpnkIa5ykz0PmvA0YSyGIld8aGG8k0SVP6yOzXZPT8ohShxi0IdZnhTT1Ko1k8DwmWw4f/jNzUcMM5nxneEvvibnLKrEJPIdspzvK4rBRSa0aleAHmL2rdBFHgagaaji3x6XHeRWdA+yqrLdTPvyQN1xPXYRrxgUFZBrpD3JqPx4kk7DjM42v2cyutXeYx3M63dRH3106cjwumrjM4Uv97v4xBTWi1mVKelanvrbM+48rBmjbo8xc+cISs/eX9fGgqQPKbLigt0QgsnV3LxJ74k/C620hzx12f7UeStLrh/niKmm5YA+RV2bwxn8cDKbpxzyIO7apa4T/JWNHWPjcVm/HYBsTnjWAkvFI/aOpk0lpMCkcvtLgHKef3zgzKF/SLrIMsqaaJzyu0T2oNJRNKFT45y3FHxqWg255Dh2Z4aXCNkFHOHDXFbHCBvdUPH0qSpUG9p69EgtKFSK9lckYwkt0Re4qyWyagtW4t9EOUiX4NhXcagN7L3Pqr0jM3VuDl58kIBl/6SnT5u9Xsirde3iSTKyNSR1WXIBT28rLZ5keWWuxCS7+LBefDbL08ZmZP6JyEI30yur5aqF26ZKGsJ0vV8pWBBDQKG/2F13IRUwyUT0dp0yMPDUmnUnh0vQg+/iieKhCLh7ZmXPv+Wo/mgChmSF5Dl7iwQd9SHWc/DiiYvcuFrAGX/bg1Sga87h3nZq2igGuEq7PO0vlW6ny1r0qThquwBVG1cTVDyNxCt9A4XrhFGBj77hWJPRQja9QDsoeRL+j5lqGHZTgj4h9+6J2TDWry/+VeZEXGU06cPlL8udkx9IMEqBQaZoUXkXPhoo3OCnJ29Sey2ldkKzSQ7tCWv1Nx3suv19l1Qn1Rt3HmRtZGSrLQirrPhC/LbJqk8kFJNNRRFA7DWX4tYIII9RXeaCQ38efpvRWoi4nSLXvfRACGKYVUdLVUjeoZn0r2Dtiz6XTq7s+nJmiTZM6BEN1qRAr3CaaFK4DpnOUJBUGPrBPODUGXCt2faT3mblPokmkgwJDzeitenEXa9za4U5o+7Wns+yItSqbiAWgvNUadEtj/rygYDTKpb5azsvdVMVEsvmQ7mLBunPgyt2AsuABVgMkYKX8T3fyxxCqifQVusdy7W2R05cmNzH7OJVDslYT9pRXjwxkz/2/iyMJjrTsRfFoOu5bp06AC8Z4jd4bhPl933TicmT7QGIbNIjGuk6W0oz371nZ4rlLNu6/25TrWdplqjmjCdQh2hych61ggZ0sS3Lf1n99AiVdwv4pQ/RNIjF9PZq1ULhBV9WtVa3GOmLNlvXANnS1EX67PK6rLIy7WCYz/shEBu+wdUNkvPo0/kX/aXfWiq8+Z7uIarciJimlADrb7ZbW6ICb1D3X3RqSlWzmJbP+swJrreYXHSIczE0DbiaqDvS/Zi0cZLgUsD/lhrBUkBZVoa1o8lbqeDgSfePyVrCVO9Lq2KTH4+IL1R3qImF7q6tAtVsyPNvuUlPuMakUb9wnUdn7tr2jWjRaLFWJAKwK+5XOovBYNyJBurZIyqcDIeNq1JeHekHKId+fjlunEwzVrIcoVgqTziONMQaGopY1Kad2aeDSHYdSC4b9mz78bzRv7h4z6py/tNh9oR9FUchDXLsleMEpN4SRPgWnjGDep5LzkoRyDzFGkPmputhckxPNLijn7LHT3zpMRtty5OteizBK5vrPOTXaYjr0Flx9Ia4gRi1iUYbstdfEaYgx6cZFZrW3+zlfFDnhy9x4upWzWdJf7qBeYkxZ2IqrWO0iNhNDfbggmIF0MVVPYfqOB9PDpKsTYk7n50aDqNkymQQOyVc+rJXJQMd3lH3bObeUyD/+fCqZBSYLKBHLn0qgYO9x49isX5eBVax9DkODDReFV34+BOaCQNO+C9GtQpvo3iU3ttHQfwBAOo3XaLm8SEczkc9cxdfbsw3LgqXYS/6LXYjXnIxzCfEs4mn1pnZ9PYcR0BCsOk2/pAW2NbVmNc55DQU2lxrkdDsSKA5sCH6JbrxxfleHmxqQruxjZUQxNld5yRNuztvy2pWuXegsnFYkQcdlRlN+GtKk0OZhm2t6AxrjZ1Mzjw7TK2N3LfCfOnlAQqmVav1w0n24miS+zn3LBw4UjtkPVd70B6T87S8dI+/RPnv3fSF6cpqUwAfcRGF4f9WDnvDXkdgJetCnv24SdpCVzr1E0o13svoyzKvTVCl8is9gUid2JfOZ69xszLMASqKlwH2ItXwGYAFurIL7uNQbMo7PMEp10x24EJG4yNeUBKZksXfA2FgKKuhxACL9xN6n6wwgLDQ+m9tE3N3Mt98K3IhnYRG1S/gYrPYyW/Xs7wpv8AGZ0K3EIAMaPKu+SyiHltcWB9uTDbdH/yzBPXurwq/BOxjLIJ6ndAMISFm1pIgnYaXUv2xwd9skKEju/Ng/WSgR4UUVqnS+/+Vfu2d+X9awif/e2OZgkMtRUnWXxraQdrBhKI/+oisBTArkfPNgriGP1LZE4T9hto2k+YnnsQ911zHR80zelbzByk5ChDbeWUOal1+z6ntv1nTklT9MHVmRcTQcELPH+TIbbCpVn03KFApE9rTbOr1d4v3qA8o8iZ77FvHqUDbXiFhTNI4Csg76bwZpnJiQxGtlwySzZCtptimkL9hLrcgz+V3xXk3oOm499rqdWs0yLIMTHN62aYR0SS1a9xvCuxgqgpUBNh+1jky7lKpCvfcQN469emCfDB9Z2g0PRHKffzzW/aG8hkkPp5OcMlcn/WzDN5TuQXTqlekazyc6gSNmqQLU0wyDkuqBFJmkfDFogWoE9qSoo8Dvg4MjpRPZVyV7kWOtSs6B3V1W6tRT0NG/q4OpeIy3dTt+kiM431pQqTMapQF1bVxY0aSlwI639LcmwUCeHrqiYHmE78zk81QlqKQUzZzFzyg2+S29BVFToFzK7xcTl6OOP78bqekOJbqxPfrcRAO612tV7FFynak008qU4ZFY+324RoA+9VOzPtgApDz4MhkyUMnLNlXh9x/mey6H+ZdQNWDn0R6AVYYhl5XeznYBKEhrhM6oMPtDpPDxZ475bI7VFI4gu7CAyXVj6Hs9bn9P9/nuSOUxBqfzv26GQixcl7gieHRx3l3kNLXMMKMMljoReILSW99xQaoMDMD+svKlpfgA0CUO+n7uhrCzxYasILfv77dlJdJ6da0nRAGjhxW80lJn449B+yiHnGm8upytXyvu9dE6P+ZSWAlwVuCF762jkTKQijFSy3VGJsfB+sFGqqW5erDEWAH449ceQsUqGNSahowlxAU7waWrSPXMW/lWt2tPLIaYJxdW3nj1aeAH6f/WHyg4bLV5bDb4N21ejNEFe1Tnx+nUn6VHomOsX3TJLXt/FU2er63xuk77pJ0Eb4KAIdDxFuzRyC5JFVMdFSJKns4cfKq2SLE5aOvIdUoqrLIqiA8uKFP+L+mQWIH5OmG8sqJpUqk94ob1KdwG2D2nC7f2BApy+rIr7oO4mEtse3sItdKP570eBFZY/Qiw8PvcgC9MyyG2wzEdbcPK2f987uhTfhx4iL4SvuUq/EHGQbD1Y6hV/Fb0vgrNTJqkpNuWekjEqv4QRJJuGbHhWuUZG1+vtKPoODKU1pb2U56PhIAxWhpld5gLCOXd+CcqYkDJJO8N4Om9KamCSck3PKqY/LcBeX+z1pYOF8EZL2e9xdMhr19tg6z8GkQpW2Qi9ndqT1w20o5W37p/fWNCwbjz1js111PECQGBIOW1JULBqHizBXUPnvchQLdT5DNSvhtDxZBIjuv4QRzWDJKFGsa/t7whJhbS1RRlEbTszXs2F6x7N/4j2AdAo+J0abu4zfj/1H1O3/RIig+vjPrgqrYRS2++f24DAufuEleUsAbmn2UqwObZC4E0T5OcVKf76IxCi39v6IRfWSHj0sBNBv0IRSUKFKDtK9PDuIm5q/4vciW8I+d9g9mueNYbSHaqeWWIFv6CHfQJ3JAG5aI1tkZHnP6JATHSejQZO8HCr18c2S8kNU60tp0XtQ7WYLCdfHifTrRi60a7RvM5K4PlQmQ9RyTGausqlUToKYXAzC2ysNBBOvO0CJrBeIJbLHb6Zhg4g4qrn0Je0hBq3IfyNzA7nw6lo6bmH7fb9zi1zENr8UFW4oatPECe33AYbDfCEqJekYbBUIj0FPPpcfPexkmB8tAyjvBei/QbRGdSEHvrV7ySy3CIqcrs47Wr+UmC4DMVAxUKq4LCbVBxc5ufLMA8H2srjy6cY/dYq7cCuRheq6HUQaSgQ1umTAwZV/zfjIt5Ez9mWk3xzWMcbqWQKw0w2dE2NL9sULAjj4UhvDEjEByOcF9sDNixubFisaUvs5abW5sFMIIvrGFSfHY2Qr+wIzXwSfm94hbj9nvSbJBaKhbc6XEfiBbWDKeVRY+/ypOw+0W0pdc+V7XiVS/8ueNoeVEhUqn3JCU44KGyMz1zcbEz/n96w9YDLssH6oaH0rH93Z/rU7jSOYc3mdUE4c7uCfRyphiGIVpji0uD468rLQqNNniyLL4nSrQMMTWHe9cLAqFTA1z8Cx2Z/owILFqkB4olrPmSTd524JnRCZgGkLa/i86iyWMd5C/hraI7sxRm7ubcwhTe4Y7qiQYlB05EQVueKqtji93S0K6WbQsbOf0Am5abksI8BeKrFKvUUs8+yThizxFcnAb8hv4UpZF+GFhMOBQei5HTC6bS/XJ6/FrmAfJgbQHyVYG+5oGQ9zhMj/ic1faUm1ufFRsyVFy+ceJUVnwQkqB/nC+eDNcAFIxq+X0zdDA04TgBYrvTQ5STNiT+6+xStymF3e4ghYgzzMMENsh+5/f7ZaLevEDCqTF9rioNW1pe9pH1jePzoO9L6lTeiF2ILW+r1oUpTo3qI1+n7ICKMUQnuYEPzNP/qODOWigudktP4Lcl471WSIT/bwRcDys+4AEq7VpB4x5f3fauOw4vYCi0MsRhzk00o4OJd0sGqu8SRUyI6zFcE1o+/DNKMxxaGSVqg90UCFLgT/7ZkyzUyIX1DwPBGRUgC5Z8f0DvsK4DupNXfrC/8QHUr0L6yfu27zURXBOS7Cj3xEwVr+vUfSDXjV1HnDBAxh6lYhwVZnRjA8euDslj81jBBQjC9gRe5TP1AyMyiTqU7DdJNoMQD3DvMxo5Xky7guSqjJsTyTUH2H6/4GlQBjEmi1pRIf7hC3ECnY3aBvmyfH1G+N2UGPXSy0T+D/9pjoB7xqqIoCH2xA2SaGcrjYZ+TMQPJQM6kAROZOlz88kdAIm/ysePsjOuPwruSAnGhsSLCwLD5AZNiHcY2K9VSUMFj2sifQH1RlOKXOb4S0ENBjALNxckCZzKlZFRMvsbNHVQA5xdhAq/etZYurL8O1csfRgOItfUV6OXLYDFWeKDtxHEdrWO5V9Rs3Ndv1LmMhlqCRZdPDbcLOvz3SQQj+PWJC13CM5hDnogL86Z0BGu3vjbbcWtsVaVlGtAG+VwqJe4ZLcVN5+GggNZRun9/pllMep3Yag+QKfFMKZF/bSt//yUTHseingW9nTe2Kr/oPV8uFeDXvcRmW/jhtFZEDsY5nw97t/++YZ1vyfsT9F0n8yADp1yKMsHMZKlvW/N3gT5rMsT1vugyrgpNm5p6Xi9FxndxDCe2mP+o0Ua4+P5KBiD91KZzf8JEjusJy4YLRDmgwPsELVJ9Yr8UbG2A1k9s7MhnBReyLA9Q==;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report10.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report10.html"},{"title":"分子生命科学Ⅲ 第10回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 脳と行動(2) 摂食行動","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-10.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-10.html"},{"title":"3.区間分割アルゴリズム","text":"In [1]: import numpy as np import pandas as pd import matplotlib.pyplot as plt 課題1 区間推定アルゴリズムを実装して、実際のデータに適用する。 データは、 http://egg2.wustl.edu/roadmap/data/byDataType/dnamethylation/WGBS/ からbigWig形式で取得できる。 bigWigはbigWigToWigでwigm形式に変換できる。 http://hgdownload.cse.ucsc.edu/admin/exe # 今回は、E003: ESC.H1 H1_Cell_Line を選択。 # メチル化率を求める。 $ wget https://egg2.wustl.edu/roadmap/data/byDataType/dnamethylation/WGBS/FractionalMethylation_bigwig/E003_WGBS_FractionalMethylation.bigwig $ bigWigToWig E003_WGBS_FractionalMethylation.bigwig E003_WGBS_FractionalMethylation.wig # リードの長さを求める。 $ wget https://egg2.wustl.edu/roadmap/data/byDataType/dnamethylation/WGBS/ReadCoverage_bigwig/E003_WGBS_ReadCoverage.bigwig $ bigWigToWig E003_WGBS_ReadCoverage.bigwig E003_WGBS_ReadCoverage.wig # データの前処理 with open ( \"E003_WGBS_2.wig\" ) as f : methylation = [ float ( line . split ( \" \\t \" )[ - 1 ] . rstrip ( \" \\n \" )) for line in f . readlines () if line [ 0 ] != \"#\" ] with open ( \"E003_WGBS_ReadCoverage.wig\" ) as f : readcoverage = [ int ( line . split ( \" \\t \" )[ - 1 ] . rstrip ( \" \\n \" )) for line in f . readlines () if line [ 0 ] != \"#\" ] print ( f \"Fractional Methylation Rate: { len ( methylation ) } \" ) print ( f \"Depth of Read Coverage : { len ( readcoverage ) } \" ) >>> Fractional Methylation Rate : 51328201 >>> Depth of Read Coverage : 51328201 converted = [ round ( l * r ) for l , r in zip ( readcoverage , methylation )] # u unconverted = [ t - u for t , u in zip ( readcoverage , converted )] # m ファイルが重いため、上記の一つ一つの操作にかなり時間がかかったので、メチル化されたリード数( converted )、されなかったリード数( unconverted )をまとめたファイル( E003_FractionalMethylatioLength.txt )を作成したので、それを用いる。 In [2]: df = pd . read_csv ( \"E003_FractionalMethylatioLength.txt\" ) In [3]: df . head () Out[3]: .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Chromosome begin end converted unconverted section 0 chr1 10468 10469 23 7 chr1:10468-527254 1 chr1 10469 10470 23 7 chr1:10468-527254 2 chr1 10470 10471 26 3 chr1:10468-527254 3 chr1 10471 10472 26 3 chr1:10468-527254 4 chr1 10483 10484 25 4 chr1:10468-527254 In [4]: R = ( df . unconverted - df . converted ) . values In [5]: print ( f \"データ数: { len ( R ) } \" ) データ数: 51328201 ここでは、 DNAメチル化状態 を考察する。微生物・植物・動物はCpG以外でもメチル化を 様々な用途（ Restriction-Modefication system (R-M system),トランスポゾンの活動抑制,転写制御（〜分化と発生）,環境への応答（〜老化・ガン化） ） で利用しているが、特に CpGメチル化 を考察し、機能的な領域を探索する。すると、 区間推定問題 は、以下のように定義できる。 入力：各CpG siteにおける、bisulfite-seqでの(unconverted C, converted C)を読んだリード数を表すペア $\\{m_i,u_i\\}$（ 補足：$\\left\\{m_i,u_i\\right\\}$ から実数列を $\\{r_i = u_i - m_i\\}$ で選ぶ。 ） 出力：検出できた低メチル化領域のリスト なお、メチル化計測データには以下のような種類がある。 bisulfite sequencing (MethylC-seq) : C -> T: bisulfite conversion methylation array: beta for selected CpG sites SMRT sequencing (PacBio): IPD (inter-pulse duration), IPD ratio for each base Nanopore sequencing (ONT) 参考論文 Peter A. Jones, Functions of DNA methylation: islands, start sites, gene bodies and beyond, Nature Reviews Genetics 13, 484-492 (July 2012) doi:10.1038/nrg3230: http://www.nature.com/nrg/journal/v13/n7/full/nrg3230.html Dirk Schübeler, Function and information content of DNA methylation, Nature 517, 321–326 (15 January 2015) doi:10.1038/nature14192: https://www.nature.com/articles/nature14192.html また、これを解くモデルは以下の2つが有名である。 課題 モデル 概要 特徴 1-1 MSS(maximal segment sum)問題 与えられた数列上で、その上での和が最大となる区間を見つける問題。つまり、所与の実数列 $r_1,\\ldots,r_n$ と正整数 $L$ に対し、次の式を満たす区間の集合 $S$ を求める。$$\\underset{S}{\\text{argmax}}\\sum_{I\\in S}\\sum_{i\\in I}r_i\\ \\text{ s.t. }\\ \\forall I\\in S, \\mid I\\mid\\geq L$$ 実数列の長さ $n$ に関する動的計画法を用いることで、線形時間で解くことが可能。また、区間の長さを直接制御することも可能。 1-2 HMM パラメタと出力確率の関数型を適当に決め、Viterbiアルゴリズムで隠れ状態列を推定する問題。 「高メチル化/低メチル化」の2つの隠れ状態を想定する。 隠れ状態列の推定（Viterbiアルゴリズム）は線形時間で可能だが、区間が細かく分割されすぎてしまうことがある。また、本来は 「マルコフ性」 や 「区間の長さが幾何分布に従う」 ことなどを吟味すべき。HSMMなどの拡張もある。 Q.1-1 （必須課題） 最小長制約付区間推定による低メチル化領域検出を実装して実際のデータに適用せよ。また、パラメタの選び方により、低メチル化領域の長さ（genomic distance or #CpGs）の分布はどう変わるか？平均・分散・中央値・90%分位点などを Lの関数として プロットせよ。 解答 Recursion 長さ $n$ の数列に対して、次のような量を計算することを考える。 記号 説明 再帰式 $$S_n&#94;0$$ 数列の末尾である $r_n$ を 含まない ような区間の集合で、その上の和が最大のもの。 $$S_n&#94;0 = \\max\\left\\{S_{n-1}&#94;0,S_{n-1}&#94;L\\right\\}$$ $$S_n&#94;k\\left(k=1,\\ldots,L-1\\right)$$ 最も右にある区間が $r_n$ を 含み 、かつその長さが $k$ である区間の集合で、その上の和が最大のもの。 $$S_n&#94;k = S_{n-1}&#94;{k-1} + \\underline{r_n}$$ $$S_n&#94;L$$ 最も右にある区間が $r_n$ を 含み 、かつその長さが $L$ 以上 である区間の集合で、その上の和が最大のもの。 $$S_n&#94;L = \\max\\left\\{S_{n-1}&#94;L,S_{n-1}&#94;{L-1}\\right\\}+\\underline{r_n}$$ となり、元の問題に対して $O(nL)$ のアルゴリズムが構築できた。ここで、さらに再帰式を使って式を簡潔にすると、 $$S_{n}&#94;{L-1} = S_{n-1}&#94;{L-2} + r_{n} = \\cdots = S_{n-(L-1)}&#94;0 + \\sum_{n-(L-1)+1}&#94;n r_i$$ という関係が導けるので、 $$ \\begin{aligned} S_{n}&#94;0 &= \\max\\left\\{S_{n-1}&#94;0,S_{n-1}&#94;L\\right\\}\\\\ S_{n}&#94;L &= \\max\\left\\{S_{n-1}&#94;L,S_{n-L}&#94;0 + \\sum_{n-L+1}&#94;{n-1}r_i\\right\\} + r_n \\end{aligned} $$ と変数の数を $L$ に関係になく $2$ 個に抑えることができるので、$O(n)$ のアルゴリズムが導けたことがわかる。なお、以下で初期化する。 $$ \\begin{cases} S_{0}&#94;0 &= 0\\\\ S_{0}&#94;L &= -\\infty\\\\ r_i &= -\\infty\\quad(2-L\\leq i\\leq0) \\end{cases} $$ TraceBack 次に、トレースバックについて考えると、メモリに関しては、$n$ 番目の値を考える時には $S_{n-L}&#94;0,S_{n-1}&#94;0,S_{n-1}&#94;L$ がどの要素を取得しているかのみが必要となるが、それらから $n+1$ 番目の値を考える際に必要となる $S_{\\left(n+1\\right)-L}&#94;0$ を再帰式無しで導くことができないので、実際には $S_{n-L}&#94;0,\\ldots,S_{n-1}&#94;0,S_{n-1}&#94;L$ の計 $L+1$ 個の集合がどの要素を保持していたか記憶する必要がある。 単純にトレースバックポインタを保持すれば良いことになる。 In [6]: from kerasy.Bio.maxsets import MSS In [7]: model = MSS () model . run ( R , limit = 5 , verbose = 1 ) np . save ( f \" { limit : >02 } .npy\" , model . cotinuous_area ) traceback 102/101 [####################] 100.99% - 0.006s ※ verbose=1 だとjupyter notebookのファイル容量制限を超えてしまうので、以下のプログラムファイルを作成して実行した。 kadai03_MSS.py ```python # coding: utf-8 import numpy as np import pandas as pd from kerasy.Bio.maxsets import MSS if __name__ == \"__main__\": df = pd.read_csv(\"E003_FractionalMethylatioLength.txt\") df.head(3) R = (df.unconverted - df.converted).values print(f\"データ数: {len(R)}\") for limit in range(5,11): model = MSS() model.run(R, limit=limit, verbose=1) np.save(f\"{limit:>02}.npy\", model.detected_area) ``` In [8]: def decorate_axes ( ax , stats , xlabel ): ax . set_xlabel ( xlabel , fontsize = 16 ) ax . set_title ( stats , fontsize = 18 ) ax . set_ylabel ( stats , fontsize = 16 ) return ax In [9]: fig , (( ax1 , ax2 ),( ax3 , ax4 ),( ax5 , ax6 )) = plt . subplots ( nrows = 3 , ncols = 2 , figsize = ( 15 , 18 ), sharex = \"all\" ) for limit in range ( 5 , 11 ): detected_area = np . load ( f \" { limit : >02 } .npy\" ) detected_length = detected_area [:, 1 ] median , tile90 = np . percentile ( a = detected_length , q = [ 50 , 90 ]) mean = np . mean ( detected_length ) var = np . var ( detected_length ) score = np . sum ( detected_length ) num = len ( detected_length ) ax1 . scatter ( limit , median , color = \"red\" , s = 100 ) ax2 . scatter ( limit , tile90 , color = \"blue\" , s = 100 ) ax3 . scatter ( limit , mean , color = \"green\" , s = 100 ) ax4 . scatter ( limit , var , color = \"orange\" , s = 100 ) ax5 . scatter ( limit , score , color = \"black\" , s = 100 ) ax6 . scatter ( limit , num , color = \"black\" , s = 100 ) ax1 = decorate_axes ( ax1 , stats = \"median\" , xlabel = \"limit\" ) ax2 = decorate_axes ( ax2 , stats = \"90%-tile\" , xlabel = \"limit\" ) ax3 = decorate_axes ( ax3 , stats = \"mean\" , xlabel = \"limit\" ) ax4 = decorate_axes ( ax4 , stats = \"variance\" , xlabel = \"limit\" ) ax5 = decorate_axes ( ax5 , stats = \"score\" , xlabel = \"limit\" ) ax6 = decorate_axes ( ax6 , stats = \"num detected area\" , xlabel = \"limit\" ) plt . suptitle ( \"The relationship between \\n limit length and Statistics.\" , fontsize = 20 ) # plt.tight_layout() plt . show () In [10]: plt . hist ( detected_length , bins = 30 ) plt . title ( f \"The histgram of detected length (limit= { limit } )\" ) plt . xlabel ( \"detected length\" ), plt . ylabel ( \"frequency\" ) plt . show () Q.1-2 （選択課題） HMMによる低メチル化領域検出を実装して実際のデータに適用せよ。また、パラメタの選び方により、低メチル化領域の長さ（genomic distance or #CpGs）の分布はどう変わるか？平均・分散・中央値・90%分位点などを $\\theta,t$ の関数として プロットせよ。 なお、この時簡単のためHMMは以下の条件を満たす。 2つの隠れ状態（ Hypermethylated , Hypomethylated ）を取る。 遷移確率は $p_1 = p_2 = t$ とする。（等しい） 出力確率は以下のように決める。 $$ \\begin{cases} P\\left(m | \\text{hyper} \\right) &= 1 - P\\left(u | \\text{hyper} \\right) &= \\theta\\\\ P\\left(u | \\text{hypo} \\right) &= 1 - P\\left(m | \\text{hypo} \\right) &= \\theta\\end{cases}\\\\ \\therefore P\\left(m_i,u_i | s_i = \\text{hyper} \\right) = \\theta&#94;{m_i}\\ast\\left(1-\\theta\\right)&#94;{u_i} $$ この時、 $$ \\begin{aligned} \\sum_{m_i}\\sum_{u_i}P\\left(m_i,u_i | s_i = \\text{hyper} \\right) &= \\sum_{m_i\\geq1}\\theta&#94;{m_i}\\ast\\sum_{u_i\\geq1}\\left(1-\\theta\\right)&#94;{u_i}\\\\ &= \\left(\\frac{\\theta}{1-\\theta}\\right)\\left(\\frac{1-\\theta}{\\theta}\\right)\\\\ &= 1 \\end{aligned} $$ となるので、この出力確率が確率の条件を満たすことがわかる。（$P\\left(m_i,u_i | s_i = \\text{hypo} \\right) $ も同様。） ※ ここで、題意の意図を汲み取って $m_i\\geq1,u_i\\geq1$ と定義しているが、正直この定義はよくわからない。 また、この確率分布では、単純なリード数が増えることにもペナルティがかかるため、あまり良い定義とは思えない。 （※問題文の解釈が間違っている可能性もある。） 例えば、全体で読んだリード数が $\\text{total}_i( = m_i + u_i)$ と与えられた状況で、 $$P\\left(m_i,u_i | s_i = \\text{hyper} \\right) = _{\\text{total}_i}C_{m_i} \\theta&#94;{m_i} \\ast \\left(1-\\theta\\right)&#94;{u_i}$$ という二項分布でモデル化を行うことも一つの手である。（この時、$\\text{total}_i$ は単純なマルコフモデルに従うと考えればサンプリングも行えるが、サンプリングを行う有用性があまり考えられなかったので今回は割愛する。） したがって、この条件で $Q$ 関数を表すと、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\ln \\phi_k\\left(m_n,u_n\\right) \\end{aligned}\\qquad (13.17) $$ となる。なお、ここで $$ \\phi_k\\left(m_n,u_n\\right) = \\begin{cases} \\theta&#94;{m_n}\\ast\\left(1-\\theta\\right)&#94;{u_n} & \\left(z_{nk} = \\text{hyper}\\right)\\\\ \\left(1-\\theta\\right)&#94;{m_n}\\ast\\theta&#94;{u_n} & \\left(z_{nk} = \\text{hypo}\\right)\\\\ \\end{cases} $$ 解答 ※ 先ほどと同様に、以下のプログラムファイルを作成して実行した。 kadai03_HMM.py ```python # coding: utf-8 import numpy as np import pandas as pd from kerasy.ML.HMM import MSSHMM from kerasy.clib._pyutils import extract_continuous_area if __name__ == \"__main__\": df = pd.read_csv(\"E003_FractionalMethylatioLength.txt\") X = df[[\"converted\", \"unconverted\"]].values model = MSSHMM(n_hstates=2, random_state=0) model._init_params(X, \"random\") for t in [0.3,0.5,0.7]: for theta in [0.2, 0.5, 0.8]: model.transit = np.asarray([ [t, 1-t], [1-t, t], ], dtype=float) model.theta = theta predictions = model.predict(X).astype(np.int32) detected_area = extract_continuous_area(predictions).astype(np.int32) np.save(f\"t:{t}_theta:{theta}.npy\", detected_area) ``` median $\\theta$ \\ $t$ 0.3 0.5 0.7 0.2 16.0 30.0 36.0 0.5 1.0 1.0 - 0.8 2.0 2.0 2.0 90% tile $\\theta$ \\ $t$ 0.3 0.5 0.7 0.2 123.0 164.0 196.0 0.5 1.0 1.0 - 0.8 4.0 6.0 6.0 mean $\\theta$ \\ $t$ 0.3 0.5 0.7 0.2 44.89 64.36 76.48 0.5 1.00 1.00 - 0.8 5.31 8.22 8.57 variance $\\theta$ \\ $t$ 0.3 0.5 0.7 0.2 5568.55 9178.02 13449.15 0.5 0.00 0.00 - 0.8 488.51 1020.93 1374.86 score $\\theta$ \\ $t$ 0.3 0.5 0.7 0.2 45792177 45854238 46085466 0.5 25664100 1 - 0.8 5411770 5123127 5167225 num $\\theta$ \\ $t$ 0.3 0.5 0.7 0.2 1020041 712421 602620 0.5 25664100 1 0 0.8 1020041 623326 602620 パラメータ学習 ※ ここでは、遷移確率がただ一つのパラメータ $t$ に依存し、出力確率もただ一つのパラメータ $\\theta$ に依存する kerasy.ML.HMM.MSSHMM ではなく、より一般化された Binomial HMM を利用することにする。 In [11]: from kerasy.ML.HMM import BinomialHMM from kerasy.clib._pyutils import extract_continuous_area In [12]: X = df [[ \"converted\" , \"unconverted\" ]] . values In [13]: model = BinomialHMM ( n_hstates = 2 ) In [14]: model . fit ( X ) BinomialHMM (Baum-Welch) 002/100 [--------------------] 2.00% - 378.288s log probability: -132606130.87920488 In [15]: # Not necessary model . save_params ( \"kadai03_HMM.json\" ) In [16]: # Not necessary model . load_params ( \"kadai03_HMM.json\" ) Loading Parameters from kadai03_HMM.json Converted model_params type from list to np.ndarray. Converted initial type from list to np.ndarray. Converted transit type from list to np.ndarray. Converted thetas type from list to np.ndarray. Set rnd the internal state of the generator. In [17]: predictions = model . predict ( X ) . astype ( np . int32 ) detected_area = np . asarray ( extract_continuous_area ( predictions ), dtype = np . int32 ) detected_length = detected_area [:, 1 ] In [18]: plt . hist ( detected_length , bins = 30 ) plt . title ( f \"The histgram of detected length (HMM)\" ) plt . xlabel ( \"detected length\" ), plt . ylabel ( \"frequency\" ) plt . show () In [19]: median , tile90 = np . percentile ( a = detected_length , q = [ 50 , 90 ]) print ( f \"- median : { median } \" ) print ( f \"- 90%-tile: { tile90 } \" ) print ( f \"- mean : { np . mean ( detected_length ) } \" ) print ( f \"- variance: { np . var ( detected_length ) } \" ) print ( f \"- score : { np . sum ( detected_length ) } \" ) print ( f \"- num : { len ( detected_length ) } \" ) - median : 32.0 - 90%-tile: 158.0 - mean : 63.31114068764987 - variance: 8260.976020518077 - score : 45332866 - num : 716033 課題2 以下のデータの関連を調べよ。例えば、「（プロモータ領域の）CpG islandsは低メチル化しているか」「高/低メチル化領域を伴う遺伝子は、それぞれ特徴があるか」など。 低メチル化領域：g;Profiler -> http://biit.cs.ut.ee/gprofiler/gost など。 CpG islands：hg38参照配列から検出を行う。この時、CpG islandsの定義は \"Gardiner-Garden, Frommer (1987) CpG islands in vertebrate genomes\" で定義されているものがよく参照される。 （CGIs are regions with >= 200 bp, O/E CpG >= 0.6, %GC >= 0.5） 遺伝子領域： GENCODE を利用する。 解答 In [20]: raise NotImplementedError ( \"Not Checked.\" ) --------------------------------------------------------------------------- NotImplementedError Traceback (most recent call last) in ----> 1 raise NotImplementedError ( \"Not Checked.\" ) NotImplementedError : Not Checked. 課題3 動的計画法（応用例題） 額面が $d_k\\left(1\\leq k\\leq K\\right)$ の $K$ 種類の硬貨が通用しているとする。 $T$ 単位をちょうど支払うのに必要な硬貨の最小枚数 $m(T)$ は？ ただし、額面 $d_1$ の硬貨は同時に $L$ 枚以下しか使えないものとする。 $m(T)$ と、具体的な支払方法を出力するアルゴリズムを実装する。この時の計算量を $K,T,L$ の式で表現し、実際に計測する。 解答 In [21]: # 内訳を整形して記述する関数 def breakdown ( combs ): \"\"\" display breakdowns \"\"\" use_coins = sorted ( set ( combs )) num_coins = [ combs . count ( coin ) for coin in use_coins ] total_pay = [ n * coin for n , coin in zip ( use_coins , num_coins )] width_coin = max ([ len ( str ( e )) for e in use_coins ] + [ len ( \"coins\" )]) width_num = max ([ len ( str ( e )) for e in num_coins ] + [ len ( \"number\" )]) width_total = max ([ len ( str ( e )) for e in total_pay ] + [ len ( \"pay\" ), len ( str ( sum ( total_pay )))]) width_line = width_coin + width_num + width_total + 2 print_func = lambda c , n , p : print ( f \" { c : &#94; { width_coin }} | { n : > { width_num }} | { p : > { width_total }} \" ) print_func ( 'coins' , 'number' , 'pay' ) print ( \"=\" * width_line ) for coin , num , t in zip ( use_coins , num_coins , total_pay ): print_func ( coin , num , t ) print ( \"-\" * width_line ) print_func ( 'total' , sum ( num_coins ), sum ( total_pay )) アルゴリズム 制約なし まず、 額面 $d_1$ の硬貨が $L$ 回しか使えない という制約式がないとして、上記の問題を考える。すると、この問題は 最適性の原理を満たす。 $$m\\left(T\\right) = \\min_k\\left\\{m\\left(T - d_k\\right)\\right\\} + 1$$ これは当然のことで、もしこの等号が成り立たなければ、$m\\left(T - d_k\\right)$ と $m\\left(T\\right)$ のどちらかが最小枚数でないことになってしまうので、 矛盾 が生じてしまう。ゆえに、 この再帰的関係の右辺を展開してゆけば、そのうち解が求まる。 In [22]: def not_restricted_smart_pay ( coins , total ): \"\"\" Find the minimum number of coin combinations by using Dynamic Programming. @params coins: (list) Coin Types. @params total: (int) Amount of Payment. \"\"\" total += 1 # because 0-origin. coins = np . asarray ( coins , dtype = int ) if len ( np . unique ( coins )) < len ( coins ): raise ValueError ( \"All elements of `coins` must be different integers.\" ) # Initialization. B = np . zeros ( shape = ( total ), dtype = int ) # Memory for Traceback. m = np . full ( fill_value = np . inf , shape = ( total )) m [ 0 ] = 0 for coin in coins : m [ coin ] = 1 # Recursion for t in range ( 1 , total ): cands = [ m [ t - coin ] if ( t - coin ) >= 0 else np . inf for coin in coins ] if np . all ( np . array ( cands ) == np . inf ): continue k = np . argmin ( cands ) m [ t ] = m [ t - coins [ k ]] + 1 B [ t ] = t - coins [ k ] # Trace Back. idx = total - 1 combs = [] while idx : last = B [ idx ] combs . append ( idx - last ) idx = last breakdown ( combs ) In [23]: not_restricted_smart_pay ([ 11 , 7 , 4 , 2 ], 100 ) coins|number|pay ================ 4 | 3| 12 11 | 8| 88 ---------------- total| 11|100 制約付き① 次に、 ただし、額面 $d_1$ の効果は同時に $L$ 枚以下しか使えないものとする。 という制約条件を考える。そこで、 「$d_1$ をちょうど $l$ 枚だけ使って $t$ 単位支払うのに必要な硬貨の枚数の最小枚数」 を表す $m_l(t)\\left(0\\leq l\\leq L\\right)$ を導入し、先ほどの 区間分割アルゴリズム の考え方を用いて、これらの効率的な求め方を考える。 まず、純粋に $L+1$ 個の状態を別々の変数として保持すると、以下のようになる。 $$ \\begin{cases} \\begin{aligned} m_0(t) &= \\min_{k\\neq1}\\left\\{m_0(t-d_k)\\right\\}\\\\ m_l(t) &= m_{l-1}\\left(t-d_1\\right) + 1\\qquad\\left(0 < l < L\\right)\\\\ m_L(t) &= \\min\\left\\{\\min_{k\\neq1}\\left\\{m_{L}(t-d_k)\\right\\}, m_{L-1}\\left(t-d_1\\right)\\right\\} + 1\\\\ \\end{aligned} \\end{cases} $$ ここで、 $$ \\begin{aligned} m_{L-1}(t) &= m_{L-2}(t-d_1)+1\\\\ &= \\cdots\\\\ &= m_0\\left(t - (L-1)d_1\\right) + \\left(L-1\\right) \\end{aligned} $$ という関係が導けるので、上記を用いて整理すると、 $$ \\begin{cases} \\begin{aligned} m_0(t) &= \\min_{k\\neq1}\\left\\{m_0(t-d_k)\\right\\}\\\\ m_l(t) &= m_{0}\\left(t-ld_1\\right) + l\\qquad\\left(0 < l < L\\right)\\\\ m_L(t) &= \\min\\left\\{\\min_{k\\neq1}\\left\\{m_{L}(t-d_k)\\right\\}+1, m_0\\left(t-Ld_1\\right) + L\\right\\}\\\\ \\end{aligned} \\end{cases} $$ となり、 $L$ に依存することなく、\"2つ\"の変数のみでこれを表せた。 In [24]: def restricted_smart_pay ( coins , total , L ): # Initialization. coins = np . asarray ( coins , dtype = int ) if len ( np . unique ( coins )) < len ( coins ): raise ValueError ( \"All elements of `coins` must be different integers.\" ) K = len ( coins ) total += 1 # because 0-origin. B = np . zeros ( shape = ( total * 2 ), dtype = int ) # Memory for Traceback. m = np . full ( fill_value = np . inf , shape = ( total , 2 )) m [ 0 , 0 ] = 0 for k in range ( 1 , K ): m [ coins [ k ], 0 ] = 1 # Recursion for t in range ( 1 , total ): # m0 cands = [ m [ t - coins [ k ], 0 ] if ( t - coins [ k ]) >= 0 else np . inf for k in range ( 1 , K )] if np . all ( np . array ( cands ) == np . inf ): continue k = np . argmin ( cands ) + 1 m [ t , 0 ] = m [ t - coins [ k ], 0 ] + 1 B [ t ] = t - coins [ k ] # mL cands = [ m [ t - coins [ k ], 1 ] if ( t - coins [ k ]) >= 0 else np . inf for k in range ( 1 , K )] k = np . argmin ( cands ) + 1 if t - L * coins [ 0 ] >= 0 and m [ t - L * coins [ 0 ], 0 ] + L < m [ t - coins [ k ], 1 ] + 1 : m [ t , 1 ] = m [ t - L * coins [ 0 ], 0 ] + L B [ t + total ] = t - L * coins [ 0 ] else : if np . all ( np . array ( cands ) == np . inf ): continue m [ t , 1 ] = m [ t - coins [ k ], 1 ] + 1 B [ t + total ] = t - coins [ k ] + total num_d1 = np . argmin ([ m [ - 1 - coins [ 0 ] * l , 0 ] + l for l in range ( L + 1 )]) idx = total - 1 - num_d1 * coins [ 0 ] if num_d1 != L else total * 2 - 1 combs = [ coins [ 0 ] for _ in range ( num_d1 )] while idx : last = B [ idx ] combs . append ( idx % total -last%total) idx = last if num_d1 == L : combs . pop ( - 1 ) breakdown ( combs ) In [25]: restricted_smart_pay ([ 11 , 7 , 4 , 2 ], 100 , 1 ) coins|number|pay ================ 2 | 1| 2 7 | 14| 98 ---------------- total| 15|100 制約付き② しかし、 $$ \\begin{aligned} m_L(t) &= \\min \\begin{cases} \\begin{aligned} &\\min_{k\\neq1}\\left\\{m_{L}(t-d_k)\\right\\}+1\\\\ &m;_0\\left(t-Ld_1\\right) + L \\end{aligned} \\end{cases}\\\\ &=\\min \\begin{cases} \\begin{aligned} &\\min_{k\\neq1}\\left\\{m_{0}\\left(\\left(t-Ld_1\\right)-d_k\\right)\\right\\}+\\left(L+1\\right)\\\\ &m;_0\\left(t-Ld_1\\right) + L \\end{aligned} \\end{cases}\\\\ \\end{aligned} $$ と変形でき、最終式の中身が等しくなることは明らか。したがって、 $$ \\begin{cases} \\begin{aligned} m_0(t) &= \\min_{k\\neq1}\\left\\{m_0(t-d_k)\\right\\}\\\\ m_l(t) &= m_{0}\\left(t-ld_1\\right) + l\\qquad\\left(0 < l \\leq L\\right)\\\\ \\end{aligned} \\end{cases} $$ となり、 $L$ に依存することなく、\"1つ\"の変数のみでこれを表せた。 In [26]: def smart_pay ( coins , total , limit = None , verbose = 1 ): \"\"\" Find the minimum number of coin combinations by using Dynamic Programming. @params coins: (int list) Coins. @params total: (int) Amount of Payment. @params limit: (int) Maximum number of times a restricted coin can be used. \"\"\" total += 1 # because 0-origin. if len ( set ( coins )) < len ( coins ): raise ValueError ( \"All elements of `coins` must be different integers.\" ) restricted = coins [ 0 ] free_coins = coins [ 1 :] if limit is None : limit = total // restricted + 1 elif verbose : print ( f ' { restricted } coin can only be used up to { limit } times at the same time.' ) # Initialization. B = [ 0 for _ in range ( total )] # Memory for Traceback. m = [ 0 if t == 0 else 1 if t in free_coins else float ( 'inf' ) for t in range ( total )] # Recursion for t in range ( 1 , total ): cands = [ m [ t - coin ] if ( t - coin ) >= 0 else float ( 'inf' ) for coin in free_coins ] if sum ([ e != float ( 'inf' ) for e in cands ]) == 0 : continue # B[t]=0; m[t]=float('inf') : default. minnum = min ( cands ) m [ t ], B [ t ] = [( e + 1 , t - coin ) for e , coin in zip ( cands , free_coins ) if e == minnum ][ 0 ] ms = [( l , m [ - 1 - restricted * l ] + l ) for l in range ( limit + 1 ) if restricted * l <= total ] num_restricted , num_total = min ( ms , key = lambda x : x [ 1 ]) idx = total - 1 - restricted * num_restricted combs = [ restricted for _ in range ( num_restricted )] while idx : last = B [ idx ] combs . append ( idx - last ) idx = last if verbose : breakdown ( combs ) In [27]: for l in range ( 0 , 9 , 2 ): smart_pay ([ 11 , 7 , 4 , 2 ], 100 , limit = l ) print () 11 coin can only be used up to 0 times at the same time. coins|number|pay ================ 2 | 1| 2 7 | 14| 98 ---------------- total| 15|100 11 coin can only be used up to 2 times at the same time. coins|number|pay ================ 4 | 2| 8 7 | 10| 70 11 | 2| 22 ---------------- total| 14|100 11 coin can only be used up to 4 times at the same time. coins|number|pay ================ 7 | 8| 56 11 | 4| 44 ---------------- total| 12|100 11 coin can only be used up to 6 times at the same time. coins|number|pay ================ 7 | 8| 56 11 | 4| 44 ---------------- total| 12|100 11 coin can only be used up to 8 times at the same time. coins|number|pay ================ 2 | 1| 2 7 | 3| 21 11 | 7| 77 ---------------- total| 11|100 計算量 $L$ に依存することなく、\"1つ\"の変数のみで再帰式を表せた ことから、アルゴリズムの計算量は $O\\left(KT\\right)$ となることがわかる。 実測 In [28]: from kerasy.utils import measure_complexity In [29]: seed = 0 coin_cands = np . arange ( 1 , 100 ) limit In [30]: total = 100000 K = 10 coins = np . random . RandomState ( seed ) . choice ( coin_cands , K , replace = False ) In [31]: for l in [ 10 , 50 , 100 ]: kwargs = { 'limit' : l , 'verbose' : 0 } time = measure_complexity ( smart_pay , coins , total , ** kwargs ) print ( f \"L: { l : >3 } , processing time: { time : >5.3f } \" ) L: 10, processing time: 2.267 L: 50, processing time: 2.236 L:100, processing time: 2.161 以上より、少し雑だが $L$ が計算量に関与しないことがわかる。続いて、$K$ と $T$ について調べる。 In [32]: kwargs = { 'limit' : 10 , 'verbose' : 0 } Tcands = [ 1000 , 10000 , 100000 , 1000000 ] Kcands = [ 3 , 30 , 300 ] coin_cands = np . arange ( 1 , 1000 ) In [33]: print_func = lambda K , T , time : print ( f \" { K : >5 } | { T : >7 } | { time : >7.3f } [s]\" ) In [34]: memory = [] print ( f \" { 'coins' : &#94;5 } | { 'total' : &#94;7 } | { 'time[s]' : >10 } \" ) print ( \"=\" * 24 ) for K in Kcands : coins = np . random . RandomState ( seed ) . choice ( coin_cands , K , replace = False ) for T in Tcands : time = measure_complexity ( smart_pay , coins , T , repetitions_ = 3 , ** kwargs ) print_func ( K , T , time ) memory . append ([ K , T , time ]) coins| total | time[s] ======================== 3| 1000| 0.011[s] 3| 10000| 0.080[s] 3| 100000| 0.920[s] 3|1000000| 9.394[s] 30| 1000| 0.043[s] 30| 10000| 0.470[s] 30| 100000| 4.822[s] 30|1000000| 59.325[s] 300| 1000| 0.438[s] 300| 10000| 5.137[s] 300| 100000| 51.688[s] 300|1000000|525.224[s] 上記より、$K,T$ に関しても線形に計算量が増えていることがわかる。プロットで確かめると、以下のようになる。 K In [35]: fig , axes = plt . subplots ( nrows = 1 , ncols = 3 , figsize = ( 18 , 6 )) for ax , k in zip ( axes , Kcands ): tmp = [( e [ 1 ], e [ 2 ]) for e in memory if e [ 0 ] == k ] for t , time in tmp : ax . scatter ( t , time , color = \"red\" ) ax . grid () ax . set_xscale ( \"log\" ), ax . set_yscale ( \"log\" ) ax . set_title ( f \"$K= { k } $\" ), ax . set_xlabel ( \"total amount\" ), ax . set_ylabel ( \"Processing time\" ) plt . show () T In [224]: fig , axes = plt . subplots ( nrows = 1 , ncols = 4 , figsize = ( 24 , 6 )) for ax , T in zip ( axes , Tcands ): tmp = [( e [ 0 ], e [ 2 ]) for e in memory if e [ 1 ] == t ] for k , time in tmp : ax . scatter ( k , time , color = \"blue\" ) ax . grid () ax . set_xscale ( \"log\" ), ax . set_yscale ( \"log\" ) ax . set_title ( f \"$T= { t } $\" ), ax . set_xlabel ( \"total amount\" ), ax . set_ylabel ( \"Processing time\" ) plt . show () こちらも、共に線形に増えているように見える。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(森下)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-3.html"},{"title":"生命情報表現論 第4回","text":"グループ議論とプレゼンテーション 述語論理","tags":"生命情報表現論","url":"https://iwasakishuto.github.io/University/3A/生命情報表現論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生命情報表現論-4.html"},{"title":"1.繰返し構造","text":"定義：タンデムリピート 記号の集合を $\\Sigma$（例えば $\\{A,C,G,T\\}$）、長さ1以上の記号列の集合を $\\Sigma&#94;{+}$ と表記する。記号列 $p\\in\\Sigma&#94;{+}$ が $k(\\geq1)$ 回連続して出現する記号列を、正確な タンデムリピート(tandem repeat) と呼び、$p&#94;k$ と表記する。ある記号列を正確なタンデムリピートとアラインメントした時に、ある閾値以上の配列類似度を持つ時、タンデムリピートと呼ぶ。 Ref: Kerasy Documentation: Tandem Repeats 演習問題1(必須) 記号列 $q$ が正確なタンデムリピート $p&#94;k$ を部分列として含むとする。$p$ と $k$ を検出するアルゴリズムを考えよ。 例題として $10$ 個の配列を与えるので、各配列から $p$ と $k$ を決定せよ。 解答 In [1]: import time import matplotlib.pyplot as plt In [2]: from kerasy.Bio.tandem import find_tandem from kerasy.Bio.string import StringSearch from kerasy.utils import readMultiSeq In [3]: sequences = readMultiSeq ( \"exact.fasta\" ) In [4]: len_sequences = [ len ( seq ) for seq in sequences ] Results In [8]: fig , ( ax_sais , ax_dp ) = plt . subplots ( 1 , 2 , figsize = ( 12 , 6 )) ax_sais . scatter ( len_sequences , pt_sais , color = \"r\" ) ax_sais . set_xlabel ( \"the length of sequence\" ), ax_sais . set_ylabel ( \"Processing time.\" ), ax_sais . set_title ( \"Suffix Array\" , fontsize = 18 ) ax_dp . scatter ( len_sequences , pt_dp , color = \"b\" ) ax_dp . set_xlabel ( \"the length of sequence\" ), ax_dp . set_ylabel ( \"Processing time.\" ), ax_dp . set_title ( \"Dynamic Programming\" , fontsize = 18 ) plt . tight_layout () plt . show () Suffix Array Dynamic Programming $$O(n)$$ $$O(n&#94;2)$$ find tandem repeat DP In [5]: pt_dp = [] for seq in sequences : s = time . time () score , tandems = find_tandem ( seq , method = \"DP\" ) pt_dp . append ( time . time () - s ) print ( f \"score : { score : <4 } \" ) print ( f \"tandem: \\n { tandems [ 0 ] } \" ) print () score : 33 tandem: TTG score : 259 tandem: TTTTGCC score : 493 tandem: ATCAGTTTAAATTACCA score : 3127 tandem: TCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGC score : 1001 tandem: ACTGGTATATGGAGAGTACCACGCCACAAAACGTTCTCGTGAACGGGCCGCATTAACAAGTTTTACTCATCTTGCAATTGGGACGTCCCTG score : 2369 tandem: CCCGGGTTAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCG score : 2869 tandem: CGTTCTGATTTTACTTGCCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAATCACGGAAGATTATGAGCACTTCGCGG score : 2223 tandem: TAAACACATTCACGGCATAGCATTTAAAGTGACCGCGGGCGGCAGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCGGGCGGGCCAGAACAGAGCACGCAACCCCACTACAATAGCTACCATCCGTCTGGCGTACCTGATGCATCACTGATTGATTGGAGAGC score : 8517 tandem: CATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGAC score : 7007 tandem: ATTAGTACCCCATCGGTTTTATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCTTCGGAGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTACCGTACTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTACTTCAACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCTGACCGAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGTAAAAGCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACGGGCGCTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGTGGGCTTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAGTTTGTTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCTGCAGTTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATTCTGTTCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTGATCCCTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTTGTATTTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGAACCAAGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAACACGGACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCCGGTCATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGTAAGATCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTCTGCTGGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCCGAACTATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAAGTGCTACAGTCTTACTCCCCCTATAGCTGGGTGACT find tandem repeat using Suffix Array In [6]: pt_sais = [] for seq in sequences : s = time . time () score , tandems = find_tandem ( seq , method = \"SAIS\" ) pt_sais . append ( time . time () - s ) print ( f \"score : { score : <4 } \" ) print ( f \"tandem: \\n { tandems [ 0 ] } \" ) print () score : 33 tandem: TGT score : 259 tandem: TTTGCCT score : 493 tandem: TCAGTTTAAATTACCAA score : 3127 tandem: TCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGC score : 1001 tandem: GTATATGGAGAGTACCACGCCACAAAACGTTCTCGTGAACGGGCCGCATTAACAAGTTTTACTCATCTTGCAATTGGGACGTCCCTGACTG score : 2369 tandem: CCCGGGTTAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCG score : 2869 tandem: GTTCTGATTTTACTTGCCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAATCACGGAAGATTATGAGCACTTCGCGGC score : 2223 tandem: TAAACACATTCACGGCATAGCATTTAAAGTGACCGCGGGCGGCAGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCGGGCGGGCCAGAACAGAGCACGCAACCCCACTACAATAGCTACCATCCGTCTGGCGTACCTGATGCATCACTGATTGATTGGAGAGC score : 8517 tandem: CATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGAC score : 7007 tandem: ATTAGTACCCCATCGGTTTTATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCTTCGGAGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTACCGTACTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTACTTCAACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCTGACCGAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGTAAAAGCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACGGGCGCTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGTGGGCTTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAGTTTGTTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCTGCAGTTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATTCTGTTCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTGATCCCTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTTGTATTTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGAACCAAGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAACACGGACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCCGGTCATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGTAAGATCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTCTGCTGGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCCGAACTATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAAGTGCTACAGTCTTACTCCCCCTATAGCTGGGTGACT display tandem repeat In [7]: for seq in sequences : db = StringSearch ( seq , verbose = 0 ) tandem = db . find_tandem () db . where ( tandem , width = 50 ) print ( \" \\n \" ) Model: Suffix Array Number of matches: 11 Query: TGT =============================================================== S: [00] GCCCCTGCACTCTCGAGTTGCGCAAAGTCTTGTTGTTGTTGTTGTTGTTG [50] : [00] <-><-><-><-><-><-><- [50] S: [50] TTGTTGTTGTTGTGGGAATTGGC [72] : [50] ><-><-><-><-> [72] =============================================================== Model: Suffix Array Number of matches: 37 Query: TTTGCCT ================================================================= S: [000] ATTACTATTCGCCGATGGTTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTT [050] : [000] <-----><-----><-----><-----><- [050] S: [050] TGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTT [100] : [050] ----><-----><-----><-----><-----><-----><-----><-- [100] S: [100] GCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTG [150] : [100] ---><-----><-----><-----><-----><-----><-----><--- [150] S: [150] CCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGC [200] : [150] --><-----><-----><-----><-----><-----><-----><---- [200] S: [200] CTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCCTTTTGCC [250] : [200] -><-----><-----><-----><-----><-----><-----><----- [250] S: [250] TTTTGCCTTTTGCCTTTTGCCTTTTGCCTCAGTGTTTGCCCATGTAATG [298] : [250] ><-----><-----><-----><-----> [298] ================================================================= Model: Suffix Array Number of matches: 29 Query: TCAGTTTAAATTACCAA ================================================================= S: [000] GATAGACGGATCAGTTTAAATTACCAATCAGTTTAAATTACCAATCAGTT [050] : [000] <---------------><---------------><----- [050] S: [050] TAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTACCAATCAGT [100] : [050] ----------><---------------><---------------><---- [100] S: [100] TTAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTACCAATCAG [150] : [100] -----------><---------------><---------------><--- [150] S: [150] TTTAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTACCAATCA [200] : [150] ------------><---------------><---------------><-- [200] S: [200] GTTTAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTACCAATC [250] : [200] -------------><---------------><---------------><- [250] S: [250] AGTTTAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTACCAAT [300] : [250] --------------><---------------><--------------->< [300] S: [300] CAGTTTAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTACCAA [350] : [300] ---------------><---------------><---------------> [350] S: [350] TCAGTTTAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTACCA [400] : [350] <---------------><---------------><--------------- [400] S: [400] ATCAGTTTAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTACC [450] : [400] ><---------------><---------------><-------------- [450] S: [450] AATCAGTTTAAATTACCAATCAGTTTAAATTACCAATCAGTTTAAATTAC [500] : [450] -><---------------><---------------><------------- [500] S: [500] CAACTATAGGAGCAAGGTTGGTTTCTAACTCCT [532] : [500] --> [532] ================================================================= Model: Suffix Array Number of matches: 53 Query: TCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGC =================================================================== S: [0000] ACCACTACGGTTTGATGAAAGTAGTCAAGGAGGTCGACGTGTAGGGCGTG [0050] : [0000] [0050] S: [0050] TCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCT [0100] : [0050] <------------------------------------------------- [0100] S: [0100] CCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTG [0150] : [0100] --------><---------------------------------------- [0150] S: [0150] ACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCC [0200] : [0150] -----------------><------------------------------- [0200] S: [0200] CGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAG [0250] : [0200] --------------------------><---------------------- [0250] S: [0250] GCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTA [0300] : [0250] -----------------------------------><------------- [0300] S: [0300] GGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCAC [0350] : [0300] --------------------------------------------><---- [0350] S: [0350] CCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATC [0400] : [0350] -------------------------------------------------- [0400] S: [0400] ATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTC [0450] : [0400] ---><--------------------------------------------- [0450] S: [0450] AGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGG [0500] : [0450] ------------><------------------------------------ [0500] S: [0500] CCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGC [0550] : [0500] ---------------------><--------------------------- [0550] S: [0550] AGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAAC [0600] : [0550] ------------------------------><------------------ [0600] S: [0600] GAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGA [0650] : [0600] ---------------------------------------><--------- [0650] S: [0650] CTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCT [0700] : [0650] ------------------------------------------------>< [0700] S: [0700] CCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTC [0750] : [0700] -------------------------------------------------- [0750] S: [0750] CATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGA [0800] : [0750] -------><----------------------------------------- [0800] S: [0800] CGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCC [0850] : [0800] ----------------><-------------------------------- [0850] S: [0850] GTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGG [0900] : [0850] -------------------------><----------------------- [0900] S: [0900] CAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAG [0950] : [0900] ----------------------------------><-------------- [0950] S: [0950] GAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACC [1000] : [0950] -------------------------------------------><----- [1000] S: [1000] CCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCA [1050] : [1000] -------------------------------------------------- [1050] S: [1050] TGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCA [1100] : [1050] --><---------------------------------------------- [1100] S: [1100] GCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGC [1150] : [1100] -----------><------------------------------------- [1150] S: [1150] CTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCA [1200] : [1150] --------------------><---------------------------- [1200] S: [1200] GCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACG [1250] : [1200] -----------------------------><------------------- [1250] S: [1250] AAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGAC [1300] : [1250] --------------------------------------><---------- [1300] S: [1300] TTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTC [1350] : [1300] -----------------------------------------------><- [1350] S: [1350] CACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCC [1400] : [1350] -------------------------------------------------- [1400] S: [1400] ATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGAC [1450] : [1400] ------><------------------------------------------ [1450] S: [1450] GTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCG [1500] : [1450] ---------------><--------------------------------- [1500] S: [1500] TGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGC [1550] : [1500] ------------------------><------------------------ [1550] S: [1550] AGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGG [1600] : [1550] ---------------------------------><--------------- [1600] S: [1600] AACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCC [1650] : [1600] ------------------------------------------><------ [1650] S: [1650] CGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCAT [1700] : [1650] -------------------------------------------------- [1700] S: [1700] GCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAG [1750] : [1700] -><----------------------------------------------- [1750] S: [1750] CTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCC [1800] : [1750] ----------><-------------------------------------- [1800] S: [1800] TGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAG [1850] : [1800] -------------------><----------------------------- [1850] S: [1850] CCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGA [1900] : [1850] ----------------------------><-------------------- [1900] S: [1900] AGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACT [1950] : [1900] -------------------------------------><----------- [1950] S: [1950] TAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCC [2000] : [1950] ----------------------------------------------><-- [2000] S: [2000] ACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCA [2050] : [2000] -------------------------------------------------- [2050] S: [2050] TCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACG [2100] : [2050] -----><------------------------------------------- [2100] S: [2100] TCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGT [2150] : [2100] --------------><---------------------------------- [2150] S: [2150] GGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCA [2200] : [2150] -----------------------><------------------------- [2200] S: [2200] GCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGA [2250] : [2200] --------------------------------><---------------- [2250] S: [2250] ACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCC [2300] : [2250] -----------------------------------------><------- [2300] S: [2300] GACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATG [2350] : [2300] -------------------------------------------------- [2350] S: [2350] CTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGC [2400] : [2350] ><------------------------------------------------ [2400] S: [2400] TCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCT [2450] : [2400] ---------><--------------------------------------- [2450] S: [2450] GACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGC [2500] : [2450] ------------------><------------------------------ [2500] S: [2500] CCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAA [2550] : [2500] ---------------------------><--------------------- [2550] S: [2550] GGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTT [2600] : [2550] ------------------------------------><------------ [2600] S: [2600] AGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCA [2650] : [2600] ---------------------------------------------><--- [2650] S: [2650] CCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCAT [2700] : [2650] -------------------------------------------------- [2700] S: [2700] CATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGT [2750] : [2700] ----><-------------------------------------------- [2750] S: [2750] CAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTG [2800] : [2750] -------------><----------------------------------- [2800] S: [2800] GCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAG [2850] : [2800] ----------------------><-------------------------- [2850] S: [2850] CAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAA [2900] : [2850] -------------------------------><----------------- [2900] S: [2900] CGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGCTCCACCCCG [2950] : [2900] ----------------------------------------><-------- [2950] S: [2950] ACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCTCCATCATGC [3000] : [2950] -------------------------------------------------> [3000] S: [3000] TCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTGACGTCAGCT [3050] : [3000] <------------------------------------------------- [3050] S: [3050] CCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCCCGTGGCCTG [3100] : [3050] --------><---------------------------------------- [3100] S: [3100] ACGTCAGCTCCATCATGCTCCACCCCGACTTAGGAACGAAGGCAGCAGCC [3150] : [3100] -----------------><------------------------------- [3150] S: [3150] CGTGGCCTGACGTCAGCTCCATCATGCATTGGCGACTTCGTTATTGCTAC [3200] : [3150] --------------------------> [3200] S: [3200] CACCTGTCTTACAGAGG [3216] : [3200] [3216] =================================================================== Model: Suffix Array Number of matches: 11 Query: GTATATGGAGAGTACCACGCCACAAAACGTTCTCGTGAACGGGCCGCATTAACAAGTTTTACTCATCTTGCAATTGGGACGTCCCTGACTG =================================================================== S: [0000] TATTCAATCAATCCGTCGTTTTAACAACACTCAGAAGCCAACTGGTATAT [0050] : [0000] <----- [0050] S: [0050] GGAGAGTACCACGCCACAAAACGTTCTCGTGAACGGGCCGCATTAACAAG [0100] : [0050] -------------------------------------------------- [0100] S: [0100] TTTTACTCATCTTGCAATTGGGACGTCCCTGACTGGTATATGGAGAGTAC [0150] : [0100] ----------------------------------><-------------- [0150] S: [0150] CACGCCACAAAACGTTCTCGTGAACGGGCCGCATTAACAAGTTTTACTCA [0200] : [0150] -------------------------------------------------- [0200] S: [0200] TCTTGCAATTGGGACGTCCCTGACTGGTATATGGAGAGTACCACGCCACA [0250] : [0200] -------------------------><----------------------- [0250] S: [0250] AAACGTTCTCGTGAACGGGCCGCATTAACAAGTTTTACTCATCTTGCAAT [0300] : [0250] -------------------------------------------------- [0300] S: [0300] TGGGACGTCCCTGACTGGTATATGGAGAGTACCACGCCACAAAACGTTCT [0350] : [0300] ----------------><-------------------------------- [0350] S: [0350] CGTGAACGGGCCGCATTAACAAGTTTTACTCATCTTGCAATTGGGACGTC [0400] : [0350] -------------------------------------------------- [0400] S: [0400] CCTGACTGGTATATGGAGAGTACCACGCCACAAAACGTTCTCGTGAACGG [0450] : [0400] -------><----------------------------------------- [0450] S: [0450] GCCGCATTAACAAGTTTTACTCATCTTGCAATTGGGACGTCCCTGACTGG [0500] : [0450] ------------------------------------------------>< [0500] S: [0500] TATATGGAGAGTACCACGCCACAAAACGTTCTCGTGAACGGGCCGCATTA [0550] : [0500] -------------------------------------------------- [0550] S: [0550] ACAAGTTTTACTCATCTTGCAATTGGGACGTCCCTGACTGGTATATGGAG [0600] : [0550] ---------------------------------------><--------- [0600] S: [0600] AGTACCACGCCACAAAACGTTCTCGTGAACGGGCCGCATTAACAAGTTTT [0650] : [0600] -------------------------------------------------- [0650] S: [0650] ACTCATCTTGCAATTGGGACGTCCCTGACTGGTATATGGAGAGTACCACG [0700] : [0650] ------------------------------><------------------ [0700] S: [0700] CCACAAAACGTTCTCGTGAACGGGCCGCATTAACAAGTTTTACTCATCTT [0750] : [0700] -------------------------------------------------- [0750] S: [0750] GCAATTGGGACGTCCCTGACTGGTATATGGAGAGTACCACGCCACAAAAC [0800] : [0750] ---------------------><--------------------------- [0800] S: [0800] GTTCTCGTGAACGGGCCGCATTAACAAGTTTTACTCATCTTGCAATTGGG [0850] : [0800] -------------------------------------------------- [0850] S: [0850] ACGTCCCTGACTGGTATATGGAGAGTACCACGCCACAAAACGTTCTCGTG [0900] : [0850] ------------><------------------------------------ [0900] S: [0900] AACGGGCCGCATTAACAAGTTTTACTCATCTTGCAATTGGGACGTCCCTG [0950] : [0900] -------------------------------------------------- [0950] S: [0950] ACTGGTATATGGAGAGTACCACGCCACAAAACGTTCTCGTGAACGGGCCG [1000] : [0950] ---><--------------------------------------------- [1000] S: [1000] CATTAACAAGTTTTACTCATCTTGCAATTGGGACGTCCCTGACTGCATAG [1050] : [1000] --------------------------------------------> [1050] S: [1050] AACAGACATACATCCGTATAA [1070] : [1050] [1070] =================================================================== Model: Suffix Array Number of matches: 23 Query: CCCGGGTTAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCG =================================================================== S: [0000] GTATAAAACTGAAGTAGTGAATCCAGTGATCCCGGGTTAAGTCATCATTC [0050] : [0000] <------------------- [0050] S: [0050] AACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGTT [0100] : [0050] -------------------------------------------------- [0100] S: [0100] CTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAAGTCATCA [0150] : [0100] --------------------------------><---------------- [0150] S: [0150] TTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAA [0200] : [0150] -------------------------------------------------- [0200] S: [0200] GTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAAGTCA [0250] : [0200] -----------------------------------><------------- [0250] S: [0250] TCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACG [0300] : [0250] -------------------------------------------------- [0300] S: [0300] AAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAAG [0350] : [0300] --------------------------------------><---------- [0350] S: [0350] TCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAG [0400] : [0350] -------------------------------------------------- [0400] S: [0400] ACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTT [0450] : [0400] -----------------------------------------><------- [0450] S: [0450] AAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACT [0500] : [0450] -------------------------------------------------- [0500] S: [0500] AAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGG [0550] : [0500] --------------------------------------------><---- [0550] S: [0550] GTTAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGC [0600] : [0550] -------------------------------------------------- [0600] S: [0600] ACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCC [0650] : [0600] -----------------------------------------------><- [0650] S: [0650] CGGGTTAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCT [0700] : [0650] -------------------------------------------------- [0700] S: [0700] CGCACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCC [0750] : [0700] -------------------------------------------------- [0750] S: [0750] GCCCGGGTTAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGAT [0800] : [0750] ><------------------------------------------------ [0800] S: [0800] CCTCGCACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCG [0850] : [0800] -------------------------------------------------- [0850] S: [0850] GCCGCCCGGGTTAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTG [0900] : [0850] ---><--------------------------------------------- [0900] S: [0900] GATCCTCGCACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAG [0950] : [0900] -------------------------------------------------- [0950] S: [0950] TCGGCCGCCCGGGTTAAGTCATCATTCAACCCGAGTAATACGCACGGTAT [1000] : [0950] ------><------------------------------------------ [1000] S: [1000] TTGGATCCTCGCACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGC [1050] : [1000] -------------------------------------------------- [1050] S: [1050] GAGTCGGCCGCCCGGGTTAAGTCATCATTCAACCCGAGTAATACGCACGG [1100] : [1050] ---------><--------------------------------------- [1100] S: [1100] TATTTGGATCCTCGCACTAAGACGAAAGTTCTTTTACAAGATACTGGAAC [1150] : [1100] -------------------------------------------------- [1150] S: [1150] TGCGAGTCGGCCGCCCGGGTTAAGTCATCATTCAACCCGAGTAATACGCA [1200] : [1150] ------------><------------------------------------ [1200] S: [1200] CGGTATTTGGATCCTCGCACTAAGACGAAAGTTCTTTTACAAGATACTGG [1250] : [1200] -------------------------------------------------- [1250] S: [1250] AACTGCGAGTCGGCCGCCCGGGTTAAGTCATCATTCAACCCGAGTAATAC [1300] : [1250] ---------------><--------------------------------- [1300] S: [1300] GCACGGTATTTGGATCCTCGCACTAAGACGAAAGTTCTTTTACAAGATAC [1350] : [1300] -------------------------------------------------- [1350] S: [1350] TGGAACTGCGAGTCGGCCGCCCGGGTTAAGTCATCATTCAACCCGAGTAA [1400] : [1350] ------------------><------------------------------ [1400] S: [1400] TACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGTTCTTTTACAAGA [1450] : [1400] -------------------------------------------------- [1450] S: [1450] TACTGGAACTGCGAGTCGGCCGCCCGGGTTAAGTCATCATTCAACCCGAG [1500] : [1450] ---------------------><--------------------------- [1500] S: [1500] TAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGTTCTTTTACA [1550] : [1500] -------------------------------------------------- [1550] S: [1550] AGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAAGTCATCATTCAACCC [1600] : [1550] ------------------------><------------------------ [1600] S: [1600] GAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGTTCTTTT [1650] : [1600] -------------------------------------------------- [1650] S: [1650] ACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAAGTCATCATTCAA [1700] : [1650] ---------------------------><--------------------- [1700] S: [1700] CCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGTTCT [1750] : [1700] -------------------------------------------------- [1750] S: [1750] TTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAAGTCATCATT [1800] : [1750] ------------------------------><------------------ [1800] S: [1800] CAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAAAGT [1850] : [1800] -------------------------------------------------- [1850] S: [1850] TCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAAGTCATC [1900] : [1850] ---------------------------------><--------------- [1900] S: [1900] ATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGACGAA [1950] : [1900] -------------------------------------------------- [1950] S: [1950] AGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAAGTC [2000] : [1950] ------------------------------------><------------ [2000] S: [2000] ATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAAGAC [2050] : [2000] -------------------------------------------------- [2050] S: [2050] GAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGTTAA [2100] : [2050] ---------------------------------------><--------- [2100] S: [2100] GTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCACTAA [2150] : [2100] -------------------------------------------------- [2150] S: [2150] GACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCGGGT [2200] : [2150] ------------------------------------------><------ [2200] S: [2200] TAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCGCAC [2250] : [2200] -------------------------------------------------- [2250] S: [2250] TAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGCCCG [2300] : [2250] ---------------------------------------------><--- [2300] S: [2300] GGTTAAGTCATCATTCAACCCGAGTAATACGCACGGTATTTGGATCCTCG [2350] : [2300] -------------------------------------------------- [2350] S: [2350] CACTAAGACGAAAGTTCTTTTACAAGATACTGGAACTGCGAGTCGGCCGT [2400] : [2350] ------------------------------------------------> [2400] S: [2400] AGATTCAATTCTGTCTGAG [2418] : [2400] [2418] =================================================================== Model: Suffix Array Number of matches: 19 Query: GTTCTGATTTTACTTGCCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAATCACGGAAGATTATGAGCACTTCGCGGC =================================================================== S: [0000] TACTAGCGACATTACGCGTACGTTCTGATTTTACTTGCCATGCAACCACG [0050] : [0000] <---------------------------- [0050] S: [0050] CACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTTAGATT [0100] : [0050] -------------------------------------------------- [0100] S: [0100] TTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAATCACGG [0150] : [0100] -------------------------------------------------- [0150] S: [0150] AAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCATGCAACCAC [0200] : [0150] ---------------------><--------------------------- [0200] S: [0200] GCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTTAGAT [0250] : [0200] -------------------------------------------------- [0250] S: [0250] TTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAATCACG [0300] : [0250] -------------------------------------------------- [0300] S: [0300] GAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCATGCAACCA [0350] : [0300] ----------------------><-------------------------- [0350] S: [0350] CGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTTAGA [0400] : [0350] -------------------------------------------------- [0400] S: [0400] TTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAATCAC [0450] : [0400] -------------------------------------------------- [0450] S: [0450] GGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCATGCAACC [0500] : [0450] -----------------------><------------------------- [0500] S: [0500] ACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTTAG [0550] : [0500] -------------------------------------------------- [0550] S: [0550] ATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAATCA [0600] : [0550] -------------------------------------------------- [0600] S: [0600] CGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCATGCAAC [0650] : [0600] ------------------------><------------------------ [0650] S: [0650] CACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTTA [0700] : [0650] -------------------------------------------------- [0700] S: [0700] GATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAATC [0750] : [0700] -------------------------------------------------- [0750] S: [0750] ACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCATGCAA [0800] : [0750] -------------------------><----------------------- [0800] S: [0800] CCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGTT [0850] : [0800] -------------------------------------------------- [0850] S: [0850] AGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAAT [0900] : [0850] -------------------------------------------------- [0900] S: [0900] CACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCATGCA [0950] : [0900] --------------------------><---------------------- [0950] S: [0950] ACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAGT [1000] : [0950] -------------------------------------------------- [1000] S: [1000] TAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAAA [1050] : [1000] -------------------------------------------------- [1050] S: [1050] TCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCATGC [1100] : [1050] ---------------------------><--------------------- [1100] S: [1100] AACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAAG [1150] : [1100] -------------------------------------------------- [1150] S: [1150] TTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGAA [1200] : [1150] -------------------------------------------------- [1200] S: [1200] ATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCATG [1250] : [1200] ----------------------------><-------------------- [1250] S: [1250] CAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTAA [1300] : [1250] -------------------------------------------------- [1300] S: [1300] GTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATGA [1350] : [1300] -------------------------------------------------- [1350] S: [1350] AATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCAT [1400] : [1350] -----------------------------><------------------- [1400] S: [1400] GCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGTA [1450] : [1400] -------------------------------------------------- [1450] S: [1450] AGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTATG [1500] : [1450] -------------------------------------------------- [1500] S: [1500] AAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCCA [1550] : [1500] ------------------------------><------------------ [1550] S: [1550] TGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAGT [1600] : [1550] -------------------------------------------------- [1600] S: [1600] AAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTAT [1650] : [1600] -------------------------------------------------- [1650] S: [1650] GAAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGCC [1700] : [1650] -------------------------------><----------------- [1700] S: [1700] ATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGAG [1750] : [1700] -------------------------------------------------- [1750] S: [1750] TAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATTA [1800] : [1750] -------------------------------------------------- [1800] S: [1800] TGAAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTGC [1850] : [1800] --------------------------------><---------------- [1850] S: [1850] CATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAGA [1900] : [1850] -------------------------------------------------- [1900] S: [1900] GTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACATT [1950] : [1900] -------------------------------------------------- [1950] S: [1950] ATGAAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTTG [2000] : [1950] ---------------------------------><--------------- [2000] S: [2000] CCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTAG [2050] : [2000] -------------------------------------------------- [2050] S: [2050] AGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACAT [2100] : [2050] -------------------------------------------------- [2100] S: [2100] TATGAAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACTT [2150] : [2100] ----------------------------------><-------------- [2150] S: [2150] GCCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCTA [2200] : [2150] -------------------------------------------------- [2200] S: [2200] GAGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGACA [2250] : [2200] -------------------------------------------------- [2250] S: [2250] TTATGAAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTACT [2300] : [2250] -----------------------------------><------------- [2300] S: [2300] TGCCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCCT [2350] : [2300] -------------------------------------------------- [2350] S: [2350] AGAGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGAC [2400] : [2350] -------------------------------------------------- [2400] S: [2400] ATTATGAAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTAC [2450] : [2400] ------------------------------------><------------ [2450] S: [2450] TTGCCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGCC [2500] : [2450] -------------------------------------------------- [2500] S: [2500] TAGAGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACGA [2550] : [2500] -------------------------------------------------- [2550] S: [2550] CATTATGAAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTTA [2600] : [2550] -------------------------------------><----------- [2600] S: [2600] CTTGCCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTGC [2650] : [2600] -------------------------------------------------- [2650] S: [2650] CTAGAGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTACG [2700] : [2650] -------------------------------------------------- [2700] S: [2700] ACATTATGAAATCACGGAAGATTATGAGCACTTCGCGGCGTTCTGATTTT [2750] : [2700] --------------------------------------><---------- [2750] S: [2750] ACTTGCCATGCAACCACGCACCTATATAATAGAGAACACCCCTCCATGTG [2800] : [2750] -------------------------------------------------- [2800] S: [2800] CCTAGAGTAAGTTAGATTTTCCAAGTACCTTAGTACCTCATGGCTGTTAC [2850] : [2800] -------------------------------------------------- [2850] S: [2850] GACATTATGAAATCACGGAAGATTATGAGCACTTCGCGGCTGCATGCCC [2898] : [2850] ---------------------------------------> [2898] =================================================================== Model: Suffix Array Number of matches: 13 Query: TAAACACATTCACGGCATAGCATTTAAAGTGACCGCGGGCGGCAGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCGGGCGGGCCAGAACAGAGCACGCAACCCCACTACAATAGCTACCATCCGTCTGGCGTACCTGATGCATCACTGATTGATTGGAGAGC =================================================================== S: [0000] GTCGCACCAATAAACACATTCACGGCATAGCATTTAAAGTGACCGCGGGC [0050] : [0000] <--------------------------------------- [0050] S: [0050] GGCAGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCGGGCGG [0100] : [0050] -------------------------------------------------- [0100] S: [0100] GCCAGAACAGAGCACGCAACCCCACTACAATAGCTACCATCCGTCTGGCG [0150] : [0100] -------------------------------------------------- [0150] S: [0150] TACCTGATGCATCACTGATTGATTGGAGAGCTAAACACATTCACGGCATA [0200] : [0150] ------------------------------><------------------ [0200] S: [0200] GCATTTAAAGTGACCGCGGGCGGCAGTAAGACTTGCCGCGCTTGCGTGCA [0250] : [0200] -------------------------------------------------- [0250] S: [0250] GGATGGTAGAAGACCGGGCGGGCCAGAACAGAGCACGCAACCCCACTACA [0300] : [0250] -------------------------------------------------- [0300] S: [0300] ATAGCTACCATCCGTCTGGCGTACCTGATGCATCACTGATTGATTGGAGA [0350] : [0300] -------------------------------------------------- [0350] S: [0350] GCTAAACACATTCACGGCATAGCATTTAAAGTGACCGCGGGCGGCAGTAA [0400] : [0350] -><----------------------------------------------- [0400] S: [0400] GACTTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCGGGCGGGCCAGAAC [0450] : [0400] -------------------------------------------------- [0450] S: [0450] AGAGCACGCAACCCCACTACAATAGCTACCATCCGTCTGGCGTACCTGAT [0500] : [0450] -------------------------------------------------- [0500] S: [0500] GCATCACTGATTGATTGGAGAGCTAAACACATTCACGGCATAGCATTTAA [0550] : [0500] ----------------------><-------------------------- [0550] S: [0550] AGTGACCGCGGGCGGCAGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTA [0600] : [0550] -------------------------------------------------- [0600] S: [0600] GAAGACCGGGCGGGCCAGAACAGAGCACGCAACCCCACTACAATAGCTAC [0650] : [0600] -------------------------------------------------- [0650] S: [0650] CATCCGTCTGGCGTACCTGATGCATCACTGATTGATTGGAGAGCTAAACA [0700] : [0650] -------------------------------------------><----- [0700] S: [0700] CATTCACGGCATAGCATTTAAAGTGACCGCGGGCGGCAGTAAGACTTGCC [0750] : [0700] -------------------------------------------------- [0750] S: [0750] GCGCTTGCGTGCAGGATGGTAGAAGACCGGGCGGGCCAGAACAGAGCACG [0800] : [0750] -------------------------------------------------- [0800] S: [0800] CAACCCCACTACAATAGCTACCATCCGTCTGGCGTACCTGATGCATCACT [0850] : [0800] -------------------------------------------------- [0850] S: [0850] GATTGATTGGAGAGCTAAACACATTCACGGCATAGCATTTAAAGTGACCG [0900] : [0850] --------------><---------------------------------- [0900] S: [0900] CGGGCGGCAGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCG [0950] : [0900] -------------------------------------------------- [0950] S: [0950] GGCGGGCCAGAACAGAGCACGCAACCCCACTACAATAGCTACCATCCGTC [1000] : [0950] -------------------------------------------------- [1000] S: [1000] TGGCGTACCTGATGCATCACTGATTGATTGGAGAGCTAAACACATTCACG [1050] : [1000] -----------------------------------><------------- [1050] S: [1050] GCATAGCATTTAAAGTGACCGCGGGCGGCAGTAAGACTTGCCGCGCTTGC [1100] : [1050] -------------------------------------------------- [1100] S: [1100] GTGCAGGATGGTAGAAGACCGGGCGGGCCAGAACAGAGCACGCAACCCCA [1150] : [1100] -------------------------------------------------- [1150] S: [1150] CTACAATAGCTACCATCCGTCTGGCGTACCTGATGCATCACTGATTGATT [1200] : [1150] -------------------------------------------------- [1200] S: [1200] GGAGAGCTAAACACATTCACGGCATAGCATTTAAAGTGACCGCGGGCGGC [1250] : [1200] ------><------------------------------------------ [1250] S: [1250] AGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCGGGCGGGCC [1300] : [1250] -------------------------------------------------- [1300] S: [1300] AGAACAGAGCACGCAACCCCACTACAATAGCTACCATCCGTCTGGCGTAC [1350] : [1300] -------------------------------------------------- [1350] S: [1350] CTGATGCATCACTGATTGATTGGAGAGCTAAACACATTCACGGCATAGCA [1400] : [1350] ---------------------------><--------------------- [1400] S: [1400] TTTAAAGTGACCGCGGGCGGCAGTAAGACTTGCCGCGCTTGCGTGCAGGA [1450] : [1400] -------------------------------------------------- [1450] S: [1450] TGGTAGAAGACCGGGCGGGCCAGAACAGAGCACGCAACCCCACTACAATA [1500] : [1450] -------------------------------------------------- [1500] S: [1500] GCTACCATCCGTCTGGCGTACCTGATGCATCACTGATTGATTGGAGAGCT [1550] : [1500] ------------------------------------------------>< [1550] S: [1550] AAACACATTCACGGCATAGCATTTAAAGTGACCGCGGGCGGCAGTAAGAC [1600] : [1550] -------------------------------------------------- [1600] S: [1600] TTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCGGGCGGGCCAGAACAGA [1650] : [1600] -------------------------------------------------- [1650] S: [1650] GCACGCAACCCCACTACAATAGCTACCATCCGTCTGGCGTACCTGATGCA [1700] : [1650] -------------------------------------------------- [1700] S: [1700] TCACTGATTGATTGGAGAGCTAAACACATTCACGGCATAGCATTTAAAGT [1750] : [1700] -------------------><----------------------------- [1750] S: [1750] GACCGCGGGCGGCAGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTAGAA [1800] : [1750] -------------------------------------------------- [1800] S: [1800] GACCGGGCGGGCCAGAACAGAGCACGCAACCCCACTACAATAGCTACCAT [1850] : [1800] -------------------------------------------------- [1850] S: [1850] CCGTCTGGCGTACCTGATGCATCACTGATTGATTGGAGAGCTAAACACAT [1900] : [1850] ----------------------------------------><-------- [1900] S: [1900] TCACGGCATAGCATTTAAAGTGACCGCGGGCGGCAGTAAGACTTGCCGCG [1950] : [1900] -------------------------------------------------- [1950] S: [1950] CTTGCGTGCAGGATGGTAGAAGACCGGGCGGGCCAGAACAGAGCACGCAA [2000] : [1950] -------------------------------------------------- [2000] S: [2000] CCCCACTACAATAGCTACCATCCGTCTGGCGTACCTGATGCATCACTGAT [2050] : [2000] -------------------------------------------------- [2050] S: [2050] TGATTGGAGAGCTAAACACATTCACGGCATAGCATTTAAAGTGACCGCGG [2100] : [2050] -----------><------------------------------------- [2100] S: [2100] GCGGCAGTAAGACTTGCCGCGCTTGCGTGCAGGATGGTAGAAGACCGGGC [2150] : [2100] -------------------------------------------------- [2150] S: [2150] GGGCCAGAACAGAGCACGCAACCCCACTACAATAGCTACCATCCGTCTGG [2200] : [2150] -------------------------------------------------- [2200] S: [2200] CGTACCTGATGCATCACTGATTGATTGGAGAGCCACAATACTCTTGCTAA [2250] : [2200] --------------------------------> [2250] S: [2250] GGA [2252] : [2250] [2252] =================================================================== Model: Suffix Array Number of matches: 17 Query: CATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGAC =================================================================== S: [0000] CGCGCATGCCTGGGCCTGAAGGCAGTCCCCATTTGGCTGACATGGAGCTT [0050] : [0000] <--------- [0050] S: [0050] GTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTGAGGCT [0100] : [0050] -------------------------------------------------- [0100] S: [0100] AACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACATCACA [0150] : [0100] -------------------------------------------------- [0150] S: [0150] AACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCAAGACC [0200] : [0150] -------------------------------------------------- [0200] S: [0200] CGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCTAATGC [0250] : [0200] -------------------------------------------------- [0250] S: [0250] CGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAACTCGGT [0300] : [0250] -------------------------------------------------- [0300] S: [0300] GCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGTTGACA [0350] : [0300] -------------------------------------------------- [0350] S: [0350] CGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGCTTCGT [0400] : [0350] -------------------------------------------------- [0400] S: [0400] AGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTATAAAG [0450] : [0400] -------------------------------------------------- [0450] S: [0450] ACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCCCTTCC [0500] : [0450] -------------------------------------------------- [0500] S: [0500] ATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACCATGGAGCT [0550] : [0500] ----------------------------------------><-------- [0550] S: [0550] TGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTGAGGC [0600] : [0550] -------------------------------------------------- [0600] S: [0600] TAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACATCAC [0650] : [0600] -------------------------------------------------- [0650] S: [0650] AAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCAAGAC [0700] : [0650] -------------------------------------------------- [0700] S: [0700] CCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCTAATG [0750] : [0700] -------------------------------------------------- [0750] S: [0750] CCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAACTCGG [0800] : [0750] -------------------------------------------------- [0800] S: [0800] TGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGTTGAC [0850] : [0800] -------------------------------------------------- [0850] S: [0850] ACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGCTTCG [0900] : [0850] -------------------------------------------------- [0900] S: [0900] TAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTATAAA [0950] : [0900] -------------------------------------------------- [0950] S: [0950] GACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCCCTTC [1000] : [0950] -------------------------------------------------- [1000] S: [1000] CATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACCATGGAGC [1050] : [1000] -----------------------------------------><------- [1050] S: [1050] TTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTGAGG [1100] : [1050] -------------------------------------------------- [1100] S: [1100] CTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACATCA [1150] : [1100] -------------------------------------------------- [1150] S: [1150] CAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCAAGA [1200] : [1150] -------------------------------------------------- [1200] S: [1200] CCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCTAAT [1250] : [1200] -------------------------------------------------- [1250] S: [1250] GCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAACTCG [1300] : [1250] -------------------------------------------------- [1300] S: [1300] GTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGTTGA [1350] : [1300] -------------------------------------------------- [1350] S: [1350] CACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGCTTC [1400] : [1350] -------------------------------------------------- [1400] S: [1400] GTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTATAA [1450] : [1400] -------------------------------------------------- [1450] S: [1450] AGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCCCTT [1500] : [1450] -------------------------------------------------- [1500] S: [1500] CCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACCATGGAG [1550] : [1500] ------------------------------------------><------ [1550] S: [1550] CTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTGAG [1600] : [1550] -------------------------------------------------- [1600] S: [1600] GCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACATC [1650] : [1600] -------------------------------------------------- [1650] S: [1650] ACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCAAG [1700] : [1650] -------------------------------------------------- [1700] S: [1700] ACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCTAA [1750] : [1700] -------------------------------------------------- [1750] S: [1750] TGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAACTC [1800] : [1750] -------------------------------------------------- [1800] S: [1800] GGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGTTG [1850] : [1800] -------------------------------------------------- [1850] S: [1850] ACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGCTT [1900] : [1850] -------------------------------------------------- [1900] S: [1900] CGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTATA [1950] : [1900] -------------------------------------------------- [1950] S: [1950] AAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCCCT [2000] : [1950] -------------------------------------------------- [2000] S: [2000] TCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACCATGGA [2050] : [2000] -------------------------------------------><----- [2050] S: [2050] GCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTGA [2100] : [2050] -------------------------------------------------- [2100] S: [2100] GGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACAT [2150] : [2100] -------------------------------------------------- [2150] S: [2150] CACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCAA [2200] : [2150] -------------------------------------------------- [2200] S: [2200] GACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCTA [2250] : [2200] -------------------------------------------------- [2250] S: [2250] ATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAACT [2300] : [2250] -------------------------------------------------- [2300] S: [2300] CGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGTT [2350] : [2300] -------------------------------------------------- [2350] S: [2350] GACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGCT [2400] : [2350] -------------------------------------------------- [2400] S: [2400] TCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTAT [2450] : [2400] -------------------------------------------------- [2450] S: [2450] AAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCCC [2500] : [2450] -------------------------------------------------- [2500] S: [2500] TTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACCATGG [2550] : [2500] --------------------------------------------><---- [2550] S: [2550] AGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCTG [2600] : [2550] -------------------------------------------------- [2600] S: [2600] AGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGACA [2650] : [2600] -------------------------------------------------- [2650] S: [2650] TCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGCA [2700] : [2650] -------------------------------------------------- [2700] S: [2700] AGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACCT [2750] : [2700] -------------------------------------------------- [2750] S: [2750] AATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAAC [2800] : [2750] -------------------------------------------------- [2800] S: [2800] TCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGGT [2850] : [2800] -------------------------------------------------- [2850] S: [2850] TGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGGC [2900] : [2850] -------------------------------------------------- [2900] S: [2900] TTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGTA [2950] : [2900] -------------------------------------------------- [2950] S: [2950] TAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGCC [3000] : [2950] -------------------------------------------------- [3000] S: [3000] CTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACCATG [3050] : [3000] ---------------------------------------------><--- [3050] S: [3050] GAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTCT [3100] : [3050] -------------------------------------------------- [3100] S: [3100] GAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGAC [3150] : [3100] -------------------------------------------------- [3150] S: [3150] ATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCGC [3200] : [3150] -------------------------------------------------- [3200] S: [3200] AAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGACC [3250] : [3200] -------------------------------------------------- [3250] S: [3250] TAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACAA [3300] : [3250] -------------------------------------------------- [3300] S: [3300] CTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAGG [3350] : [3300] -------------------------------------------------- [3350] S: [3350] TTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTGG [3400] : [3350] -------------------------------------------------- [3400] S: [3400] CTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAGT [3450] : [3400] -------------------------------------------------- [3450] S: [3450] ATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCGC [3500] : [3450] -------------------------------------------------- [3500] S: [3500] CCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACCAT [3550] : [3500] ----------------------------------------------><-- [3550] S: [3550] GGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCTC [3600] : [3550] -------------------------------------------------- [3600] S: [3600] TGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGGA [3650] : [3600] -------------------------------------------------- [3650] S: [3650] CATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGCG [3700] : [3650] -------------------------------------------------- [3700] S: [3700] CAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGAC [3750] : [3700] -------------------------------------------------- [3750] S: [3750] CTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAACA [3800] : [3750] -------------------------------------------------- [3800] S: [3800] ACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCAG [3850] : [3800] -------------------------------------------------- [3850] S: [3850] GTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCTG [3900] : [3850] -------------------------------------------------- [3900] S: [3900] GCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAAG [3950] : [3900] -------------------------------------------------- [3950] S: [3950] TATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTCG [4000] : [3950] -------------------------------------------------- [4000] S: [4000] CCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACCA [4050] : [4000] -----------------------------------------------><- [4050] S: [4050] TGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTCT [4100] : [4050] -------------------------------------------------- [4100] S: [4100] CTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTGG [4150] : [4100] -------------------------------------------------- [4150] S: [4150] ACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAGC [4200] : [4150] -------------------------------------------------- [4200] S: [4200] GCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAGA [4250] : [4200] -------------------------------------------------- [4250] S: [4250] CCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAAC [4300] : [4250] -------------------------------------------------- [4300] S: [4300] AACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCCA [4350] : [4300] -------------------------------------------------- [4350] S: [4350] GGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGCT [4400] : [4350] -------------------------------------------------- [4400] S: [4400] GGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGAA [4450] : [4400] -------------------------------------------------- [4450] S: [4450] GTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCTC [4500] : [4450] -------------------------------------------------- [4500] S: [4500] GCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGACC [4550] : [4500] ------------------------------------------------>< [4550] S: [4550] ATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTTC [4600] : [4550] -------------------------------------------------- [4600] S: [4600] TCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCTG [4650] : [4600] -------------------------------------------------- [4650] S: [4650] GACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAAG [4700] : [4650] -------------------------------------------------- [4700] S: [4700] CGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCAG [4750] : [4700] -------------------------------------------------- [4750] S: [4750] ACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACAA [4800] : [4750] -------------------------------------------------- [4800] S: [4800] CAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCCC [4850] : [4800] -------------------------------------------------- [4850] S: [4850] AGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAGC [4900] : [4850] -------------------------------------------------- [4900] S: [4900] TGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACGA [4950] : [4900] -------------------------------------------------- [4950] S: [4950] AGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGCT [5000] : [4950] -------------------------------------------------- [5000] S: [5000] CGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGAC [5050] : [5000] -------------------------------------------------> [5050] S: [5050] CATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTTT [5100] : [5050] <------------------------------------------------- [5100] S: [5100] CTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTCT [5150] : [5100] -------------------------------------------------- [5150] S: [5150] GGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAAA [5200] : [5150] -------------------------------------------------- [5200] S: [5200] GCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCCA [5250] : [5200] -------------------------------------------------- [5250] S: [5250] GACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGACA [5300] : [5250] -------------------------------------------------- [5300] S: [5300] ACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGCC [5350] : [5300] -------------------------------------------------- [5350] S: [5350] CAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATAG [5400] : [5350] -------------------------------------------------- [5400] S: [5400] CTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCACG [5450] : [5400] -------------------------------------------------- [5450] S: [5450] AAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCGC [5500] : [5450] -------------------------------------------------- [5500] S: [5500] TCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTGA [5550] : [5500] -------------------------------------------------- [5550] S: [5550] CCATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGTT [5600] : [5550] ><------------------------------------------------ [5600] S: [5600] TCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTTC [5650] : [5600] -------------------------------------------------- [5650] S: [5650] TGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATAA [5700] : [5650] -------------------------------------------------- [5700] S: [5700] AGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGCC [5750] : [5700] -------------------------------------------------- [5750] S: [5750] AGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGAC [5800] : [5750] -------------------------------------------------- [5800] S: [5800] AACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAGC [5850] : [5800] -------------------------------------------------- [5850] S: [5850] CCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCATA [5900] : [5850] -------------------------------------------------- [5900] S: [5900] GCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCAC [5950] : [5900] -------------------------------------------------- [5950] S: [5950] GAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGCG [6000] : [5950] -------------------------------------------------- [6000] S: [6000] CTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGTG [6050] : [6000] -------------------------------------------------- [6050] S: [6050] ACCATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACGT [6100] : [6050] -><----------------------------------------------- [6100] S: [6100] TTCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGTT [6150] : [6100] -------------------------------------------------- [6150] S: [6150] CTGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAATA [6200] : [6150] -------------------------------------------------- [6200] S: [6200] AAGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGGC [6250] : [6200] -------------------------------------------------- [6250] S: [6250] CAGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTGA [6300] : [6250] -------------------------------------------------- [6300] S: [6300] CAACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAAG [6350] : [6300] -------------------------------------------------- [6350] S: [6350] CCCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCAT [6400] : [6350] -------------------------------------------------- [6400] S: [6400] AGCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGCA [6450] : [6400] -------------------------------------------------- [6450] S: [6450] CGAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGGC [6500] : [6450] -------------------------------------------------- [6500] S: [6500] GCTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGGT [6550] : [6500] -------------------------------------------------- [6550] S: [6550] GACCATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACACG [6600] : [6550] --><---------------------------------------------- [6600] S: [6600] TTTCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGGT [6650] : [6600] -------------------------------------------------- [6650] S: [6650] TCTGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAAT [6700] : [6650] -------------------------------------------------- [6700] S: [6700] AAAGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTGG [6750] : [6700] -------------------------------------------------- [6750] S: [6750] CCAGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATTG [6800] : [6750] -------------------------------------------------- [6800] S: [6800] ACAACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCAA [6850] : [6800] -------------------------------------------------- [6850] S: [6850] GCCCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATCA [6900] : [6850] -------------------------------------------------- [6900] S: [6900] TAGCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTGC [6950] : [6900] -------------------------------------------------- [6950] S: [6950] ACGAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTGG [7000] : [6950] -------------------------------------------------- [7000] S: [7000] CGCTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAGG [7050] : [7000] -------------------------------------------------- [7050] S: [7050] TGACCATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACAC [7100] : [7050] ---><--------------------------------------------- [7100] S: [7100] GTTTCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACGG [7150] : [7100] -------------------------------------------------- [7150] S: [7150] TTCTGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGAA [7200] : [7150] -------------------------------------------------- [7200] S: [7200] TAAAGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTTG [7250] : [7200] -------------------------------------------------- [7250] S: [7250] GCCAGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAATT [7300] : [7250] -------------------------------------------------- [7300] S: [7300] GACAACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGCA [7350] : [7300] -------------------------------------------------- [7350] S: [7350] AGCCCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGATC [7400] : [7350] -------------------------------------------------- [7400] S: [7400] ATAGCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTTG [7450] : [7400] -------------------------------------------------- [7450] S: [7450] CACGAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCTG [7500] : [7450] -------------------------------------------------- [7500] S: [7500] GCGCTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGAG [7550] : [7500] -------------------------------------------------- [7550] S: [7550] GTGACCATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAACA [7600] : [7550] ----><-------------------------------------------- [7600] S: [7600] CGTTTCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAACG [7650] : [7600] -------------------------------------------------- [7650] S: [7650] GTTCTGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTGA [7700] : [7650] -------------------------------------------------- [7700] S: [7700] ATAAAGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGTT [7750] : [7700] -------------------------------------------------- [7750] S: [7750] GGCCAGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAAT [7800] : [7750] -------------------------------------------------- [7800] S: [7800] TGACAACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCGC [7850] : [7800] -------------------------------------------------- [7850] S: [7850] AAGCCCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGAT [7900] : [7850] -------------------------------------------------- [7900] S: [7900] CATAGCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCTT [7950] : [7900] -------------------------------------------------- [7950] S: [7950] GCACGAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCCT [8000] : [7950] -------------------------------------------------- [8000] S: [8000] GGCGCTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGGA [8050] : [8000] -------------------------------------------------- [8050] S: [8050] GGTGACCATGGAGCTTGTCAAGTAGTCCGGGGGCTACCAACGCATCCAAC [8100] : [8050] -----><------------------------------------------- [8100] S: [8100] ACGTTTCTCTGAGGCTAACCCCGTAAACAGTCTAGCGCAAAAAACGTAAC [8150] : [8100] -------------------------------------------------- [8150] S: [8150] GGTTCTGGACATCACAAACACAACACACTTAGAGCCAGTTTCTGGACTTG [8200] : [8150] -------------------------------------------------- [8200] S: [8200] AATAAAGCGCAAGACCCGTATATCCAACTTCTCCCGCTCAGTCGCGGAGT [8250] : [8200] -------------------------------------------------- [8250] S: [8250] TGGCCAGACCTAATGCCGTGTGATGTCTAGCTTAGCATACTAAGTTCCAA [8300] : [8250] -------------------------------------------------- [8300] S: [8300] TTGACAACAACTCGGTGCCCGCCTACTATTCCCCGTCACTTAGCTACCCG [8350] : [8300] -------------------------------------------------- [8350] S: [8350] CAAGCCCAGGTTGACACGTAGGTGGCGGGCGGCGGGACCGGGGACAGCGA [8400] : [8350] -------------------------------------------------- [8400] S: [8400] TCATAGCTGGCTTCGTAGAATGCAGGCTGTCGGACCGTATAGCGTTGCCT [8450] : [8400] -------------------------------------------------- [8450] S: [8450] TGCACGAAGTATAAAGACGGTTCGGAAAAAATTAACGTGGGAGATGATCC [8500] : [8450] -------------------------------------------------- [8500] S: [8500] TGGCGCTCGCCCTTCCATCATTCTGTGAGAATCGAGGTTTATACTATAGG [8550] : [8500] -------------------------------------------------- [8550] S: [8550] AGGTGACTACCGAAATGCTCGTAGGATCAAATGTGTG [8586] : [8550] ------> [8586] =================================================================== Model: Suffix Array Number of matches: 7 Query: ATTAGTACCCCATCGGTTTTATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCTTCGGAGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTACCGTACTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTACTTCAACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCTGACCGAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGTAAAAGCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACGGGCGCTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGTGGGCTTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAGTTTGTTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCTGCAGTTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATTCTGTTCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTGATCCCTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTTGTATTTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGAACCAAGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAACACGGACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCCGGTCATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGTAAGATCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTCTGCTGGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCCGAACTATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAAGTGCTACAGTCTTACTCCCCCTATAGCTGGGTGACT =================================================================== S: [0000] ATGGCAAATCTTGGGCAAGTAGCTGCGCGCATTAGTACCCCATCGGTTTT [0050] : [0000] <------------------- [0050] S: [0050] ATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCTTCGGA [0100] : [0050] -------------------------------------------------- [0100] S: [0100] GATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTACCGTAC [0150] : [0100] -------------------------------------------------- [0150] S: [0150] TAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTACTTCA [0200] : [0150] -------------------------------------------------- [0200] S: [0200] ACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCTGACCG [0250] : [0200] -------------------------------------------------- [0250] S: [0250] AGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGTAAAAG [0300] : [0250] -------------------------------------------------- [0300] S: [0300] CCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACGGGCGC [0350] : [0300] -------------------------------------------------- [0350] S: [0350] TATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGTGGGCT [0400] : [0350] -------------------------------------------------- [0400] S: [0400] TATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAGTTTGT [0450] : [0400] -------------------------------------------------- [0450] S: [0450] TAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCTGCAGT [0500] : [0450] -------------------------------------------------- [0500] S: [0500] TTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATTCTGTT [0550] : [0500] -------------------------------------------------- [0550] S: [0550] CAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTGATCCC [0600] : [0550] -------------------------------------------------- [0600] S: [0600] TTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTTGTATT [0650] : [0600] -------------------------------------------------- [0650] S: [0650] TGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGAACCAA [0700] : [0650] -------------------------------------------------- [0700] S: [0700] GGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAACACGG [0750] : [0700] -------------------------------------------------- [0750] S: [0750] ACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCCGGTCA [0800] : [0750] -------------------------------------------------- [0800] S: [0800] TTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGTAAGAT [0850] : [0800] -------------------------------------------------- [0850] S: [0850] CTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTCTGCTG [0900] : [0850] -------------------------------------------------- [0900] S: [0900] GCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCCGAACT [0950] : [0900] -------------------------------------------------- [0950] S: [0950] ATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAAGTGCT [1000] : [0950] -------------------------------------------------- [1000] S: [1000] ACAGTCTTACTCCCCCTATAGCTGGGTGACTATTAGTACCCCATCGGTTT [1050] : [1000] ------------------------------><------------------ [1050] S: [1050] TATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCTTCGG [1100] : [1050] -------------------------------------------------- [1100] S: [1100] AGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTACCGTA [1150] : [1100] -------------------------------------------------- [1150] S: [1150] CTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTACTTC [1200] : [1150] -------------------------------------------------- [1200] S: [1200] AACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCTGACC [1250] : [1200] -------------------------------------------------- [1250] S: [1250] GAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGTAAAA [1300] : [1250] -------------------------------------------------- [1300] S: [1300] GCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACGGGCG [1350] : [1300] -------------------------------------------------- [1350] S: [1350] CTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGTGGGC [1400] : [1350] -------------------------------------------------- [1400] S: [1400] TTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAGTTTG [1450] : [1400] -------------------------------------------------- [1450] S: [1450] TTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCTGCAG [1500] : [1450] -------------------------------------------------- [1500] S: [1500] TTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATTCTGT [1550] : [1500] -------------------------------------------------- [1550] S: [1550] TCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTGATCC [1600] : [1550] -------------------------------------------------- [1600] S: [1600] CTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTTGTAT [1650] : [1600] -------------------------------------------------- [1650] S: [1650] TTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGAACCA [1700] : [1650] -------------------------------------------------- [1700] S: [1700] AGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAACACG [1750] : [1700] -------------------------------------------------- [1750] S: [1750] GACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCCGGTC [1800] : [1750] -------------------------------------------------- [1800] S: [1800] ATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGTAAGA [1850] : [1800] -------------------------------------------------- [1850] S: [1850] TCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTCTGCT [1900] : [1850] -------------------------------------------------- [1900] S: [1900] GGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCCGAAC [1950] : [1900] -------------------------------------------------- [1950] S: [1950] TATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAAGTGC [2000] : [1950] -------------------------------------------------- [2000] S: [2000] TACAGTCTTACTCCCCCTATAGCTGGGTGACTATTAGTACCCCATCGGTT [2050] : [2000] -------------------------------><----------------- [2050] S: [2050] TTATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCTTCG [2100] : [2050] -------------------------------------------------- [2100] S: [2100] GAGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTACCGT [2150] : [2100] -------------------------------------------------- [2150] S: [2150] ACTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTACTT [2200] : [2150] -------------------------------------------------- [2200] S: [2200] CAACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCTGAC [2250] : [2200] -------------------------------------------------- [2250] S: [2250] CGAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGTAAA [2300] : [2250] -------------------------------------------------- [2300] S: [2300] AGCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACGGGC [2350] : [2300] -------------------------------------------------- [2350] S: [2350] GCTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGTGGG [2400] : [2350] -------------------------------------------------- [2400] S: [2400] CTTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAGTTT [2450] : [2400] -------------------------------------------------- [2450] S: [2450] GTTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCTGCA [2500] : [2450] -------------------------------------------------- [2500] S: [2500] GTTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATTCTG [2550] : [2500] -------------------------------------------------- [2550] S: [2550] TTCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTGATC [2600] : [2550] -------------------------------------------------- [2600] S: [2600] CCTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTTGTA [2650] : [2600] -------------------------------------------------- [2650] S: [2650] TTTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGAACC [2700] : [2650] -------------------------------------------------- [2700] S: [2700] AAGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAACAC [2750] : [2700] -------------------------------------------------- [2750] S: [2750] GGACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCCGGT [2800] : [2750] -------------------------------------------------- [2800] S: [2800] CATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGTAAG [2850] : [2800] -------------------------------------------------- [2850] S: [2850] ATCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTCTGC [2900] : [2850] -------------------------------------------------- [2900] S: [2900] TGGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCCGAA [2950] : [2900] -------------------------------------------------- [2950] S: [2950] CTATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAAGTG [3000] : [2950] -------------------------------------------------- [3000] S: [3000] CTACAGTCTTACTCCCCCTATAGCTGGGTGACTATTAGTACCCCATCGGT [3050] : [3000] --------------------------------><---------------- [3050] S: [3050] TTTATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCTTC [3100] : [3050] -------------------------------------------------- [3100] S: [3100] GGAGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTACCG [3150] : [3100] -------------------------------------------------- [3150] S: [3150] TACTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTACT [3200] : [3150] -------------------------------------------------- [3200] S: [3200] TCAACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCTGA [3250] : [3200] -------------------------------------------------- [3250] S: [3250] CCGAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGTAA [3300] : [3250] -------------------------------------------------- [3300] S: [3300] AAGCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACGGG [3350] : [3300] -------------------------------------------------- [3350] S: [3350] CGCTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGTGG [3400] : [3350] -------------------------------------------------- [3400] S: [3400] GCTTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAGTT [3450] : [3400] -------------------------------------------------- [3450] S: [3450] TGTTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCTGC [3500] : [3450] -------------------------------------------------- [3500] S: [3500] AGTTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATTCT [3550] : [3500] -------------------------------------------------- [3550] S: [3550] GTTCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTGAT [3600] : [3550] -------------------------------------------------- [3600] S: [3600] CCCTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTTGT [3650] : [3600] -------------------------------------------------- [3650] S: [3650] ATTTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGAAC [3700] : [3650] -------------------------------------------------- [3700] S: [3700] CAAGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAACA [3750] : [3700] -------------------------------------------------- [3750] S: [3750] CGGACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCCGG [3800] : [3750] -------------------------------------------------- [3800] S: [3800] TCATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGTAA [3850] : [3800] -------------------------------------------------- [3850] S: [3850] GATCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTCTG [3900] : [3850] -------------------------------------------------- [3900] S: [3900] CTGGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCCGA [3950] : [3900] -------------------------------------------------- [3950] S: [3950] ACTATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAAGT [4000] : [3950] -------------------------------------------------- [4000] S: [4000] GCTACAGTCTTACTCCCCCTATAGCTGGGTGACTATTAGTACCCCATCGG [4050] : [4000] ---------------------------------><--------------- [4050] S: [4050] TTTTATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCTT [4100] : [4050] -------------------------------------------------- [4100] S: [4100] CGGAGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTACC [4150] : [4100] -------------------------------------------------- [4150] S: [4150] GTACTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTAC [4200] : [4150] -------------------------------------------------- [4200] S: [4200] TTCAACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCTG [4250] : [4200] -------------------------------------------------- [4250] S: [4250] ACCGAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGTA [4300] : [4250] -------------------------------------------------- [4300] S: [4300] AAAGCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACGG [4350] : [4300] -------------------------------------------------- [4350] S: [4350] GCGCTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGTG [4400] : [4350] -------------------------------------------------- [4400] S: [4400] GGCTTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAGT [4450] : [4400] -------------------------------------------------- [4450] S: [4450] TTGTTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCTG [4500] : [4450] -------------------------------------------------- [4500] S: [4500] CAGTTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATTC [4550] : [4500] -------------------------------------------------- [4550] S: [4550] TGTTCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTGA [4600] : [4550] -------------------------------------------------- [4600] S: [4600] TCCCTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTTG [4650] : [4600] -------------------------------------------------- [4650] S: [4650] TATTTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGAA [4700] : [4650] -------------------------------------------------- [4700] S: [4700] CCAAGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAAC [4750] : [4700] -------------------------------------------------- [4750] S: [4750] ACGGACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCCG [4800] : [4750] -------------------------------------------------- [4800] S: [4800] GTCATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGTA [4850] : [4800] -------------------------------------------------- [4850] S: [4850] AGATCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTCT [4900] : [4850] -------------------------------------------------- [4900] S: [4900] GCTGGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCCG [4950] : [4900] -------------------------------------------------- [4950] S: [4950] AACTATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAAG [5000] : [4950] -------------------------------------------------- [5000] S: [5000] TGCTACAGTCTTACTCCCCCTATAGCTGGGTGACTATTAGTACCCCATCG [5050] : [5000] ----------------------------------><-------------- [5050] S: [5050] GTTTTATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGCT [5100] : [5050] -------------------------------------------------- [5100] S: [5100] TCGGAGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTAC [5150] : [5100] -------------------------------------------------- [5150] S: [5150] CGTACTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCTA [5200] : [5150] -------------------------------------------------- [5200] S: [5200] CTTCAACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTCT [5250] : [5200] -------------------------------------------------- [5250] S: [5250] GACCGAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCGT [5300] : [5250] -------------------------------------------------- [5300] S: [5300] AAAAGCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGACG [5350] : [5300] -------------------------------------------------- [5350] S: [5350] GGCGCTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGGT [5400] : [5350] -------------------------------------------------- [5400] S: [5400] GGGCTTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGAG [5450] : [5400] -------------------------------------------------- [5450] S: [5450] TTTGTTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACCT [5500] : [5450] -------------------------------------------------- [5500] S: [5500] GCAGTTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAATT [5550] : [5500] -------------------------------------------------- [5550] S: [5550] CTGTTCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGTG [5600] : [5550] -------------------------------------------------- [5600] S: [5600] ATCCCTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCTT [5650] : [5600] -------------------------------------------------- [5650] S: [5650] GTATTTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAGA [5700] : [5650] -------------------------------------------------- [5700] S: [5700] ACCAAGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCAA [5750] : [5700] -------------------------------------------------- [5750] S: [5750] CACGGACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGCC [5800] : [5750] -------------------------------------------------- [5800] S: [5800] GGTCATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGGT [5850] : [5800] -------------------------------------------------- [5850] S: [5850] AAGATCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCTC [5900] : [5850] -------------------------------------------------- [5900] S: [5900] TGCTGGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGCC [5950] : [5900] -------------------------------------------------- [5950] S: [5950] GAACTATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGAA [6000] : [5950] -------------------------------------------------- [6000] S: [6000] GTGCTACAGTCTTACTCCCCCTATAGCTGGGTGACTATTAGTACCCCATC [6050] : [6000] -----------------------------------><------------- [6050] S: [6050] GGTTTTATCAGCGACGTCCACAGACTGCTCATGACATCAGGTGAACTAGC [6100] : [6050] -------------------------------------------------- [6100] S: [6100] TTCGGAGATAGTTTTGGAACATTTTGCACACACCATAAGACGTTTATTTA [6150] : [6100] -------------------------------------------------- [6150] S: [6150] CCGTACTAGGTAGGCATAGCCGGCAATCGGCGGCGGAGGAGATCGCCTCT [6200] : [6150] -------------------------------------------------- [6200] S: [6200] ACTTCAACCCCAGTCGCTTAGACCATGGTTTCACTGTTTCCGGCAAGTTC [6250] : [6200] -------------------------------------------------- [6250] S: [6250] TGACCGAGATAGATCATCCATATTTTGTAGTAGTTGTAAGAAGCGTAGCG [6300] : [6250] -------------------------------------------------- [6300] S: [6300] TAAAAGCCGGAGGCGGCTCTGCGCATGCCGGAGTGCACTTAGAAAGTGAC [6350] : [6300] -------------------------------------------------- [6350] S: [6350] GGGCGCTATTGACAAGGCTACGTATCCCAATGTATGTTAAGTCCCCTGGG [6400] : [6350] -------------------------------------------------- [6400] S: [6400] TGGGCTTATCTATTATGAGAGACTAGTTACGGACCACATATTGGTGGCGA [6450] : [6400] -------------------------------------------------- [6450] S: [6450] GTTTGTTAGGAGGAAGTAACCGCCGGGGCGACTATCGGATCGAGTCTACC [6500] : [6450] -------------------------------------------------- [6500] S: [6500] TGCAGTTTGAACGTCTTAAAGTGCACTAGGAGAATAACTAATAGGCAAAT [6550] : [6500] -------------------------------------------------- [6550] S: [6550] TCTGTTCAGGATTAAAATGTCTAGAATTCGTACAACCGATTACTTCCCGT [6600] : [6550] -------------------------------------------------- [6600] S: [6600] GATCCCTTGCTATGCTATTGAAGCAGATGCTGCTAAGTCCATTGGTTGCT [6650] : [6600] -------------------------------------------------- [6650] S: [6650] TGTATTTGACGGAACCCAGCGGGAGGCGAATTAGCTTTCTGTATTGATAG [6700] : [6650] -------------------------------------------------- [6700] S: [6700] AACCAAGGCCCCATCTGCCTCCGACGCTGTTTCCCCGGACAATGATTCCA [6750] : [6700] -------------------------------------------------- [6750] S: [6750] ACACGGACACTTGCGCCACATGCGCATTGGAGCTCCAGCGACACGGACGC [6800] : [6750] -------------------------------------------------- [6800] S: [6800] CGGTCATTGAACCGACTGGCTGGACGTCCCGTCGCCAAACGATCGTATGG [6850] : [6800] -------------------------------------------------- [6850] S: [6850] TAAGATCTCTCCCCTGTCTCTGAGGAGGTTCCTGGGTATAGCATACGCCT [6900] : [6850] -------------------------------------------------- [6900] S: [6900] CTGCTGGCGGCCGTAGATTTCTTTTGACCTCCAAGATACGGTAACAATGC [6950] : [6900] -------------------------------------------------- [6950] S: [6950] CGAACTATGATGTACGACCAGTGGTACTCACATCTTAGCCCCTACGATGA [7000] : [6950] -------------------------------------------------- [7000] S: [7000] AGTGCTACAGTCTTACTCCCCCTATAGCTGGGTGACTGTTCCACTCCTGA [7050] : [7000] ------------------------------------> [7050] S: [7050] AGTCAGAGGGATCCCAAGTCTGGTGAT [7076] : [7050] [7076] =================================================================== 演習問題2(オプション) 記号列 $q$ が正確なタンデムリピート $p&#94;k$ を部分列として含むとする。$q$ に対して、ランダムに1塩基の変異・挿入・削除を加えた配列を $q&#94;{\\prime}$ とする。$q&#94;{\\prime}$ から $p&#94;k$ を予測するアルゴリズムを考えよ。 例題として $10$ 個の配列を与えるので、各配列から $p$ と $k$ を決定せよ（$k$ を正確に予測するのは難しいので問わない） 解答 In [9]: raise NotImplementedError ( \"Not Implemented.\" ) --------------------------------------------------------------------------- NotImplementedError Traceback (most recent call last) in ----> 1 raise NotImplementedError ( \"Not Implemented.\" ) NotImplementedError : Not Implemented. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(森下)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-1.html"},{"title":"0.英語論文","text":"問題1 数学やアルゴリズムの論文では余計な表現を省いた簡潔な記述が好まれます。例えば： ⻑さ $n$ の⾃然数の列に対して、隣接する数 $a,b$ をその差の絶対値 $|a-b|$ で置き換える作業を繰返し、最終的に１つの数を計算する。異なる計算順序の総数 $P(n)$ は、列を分割し統治することで、漸化式 $$P(1) = 1,\\quad P(n) = \\sum_{k=1}&#94;{n-1}P(k)P(n-k)\\ (n\\geq2)$$ と表現できる。 これでは⾏間を補わないと理解できないと思います。⼀⽅、⽣命科学の論⽂では、数式やアルゴリズムに不慣れな読者を意識して丁寧に説明するのは親切だし、論⽂を読む読者層を広げることになります。たとえば下記の説明⽂のように書き換えられます。丁寧な英⽂を⼼がけるために、この⽂章を英語にしましょう。 ⾃然数の列 $x_1,x_2,\\ldots,x_n$ が与えられたとき、隣接する２つの数 $a,b$ の差の絶対値 $a-b$ を取り、$a,b$ を置き換える作業を繰返し、最終的に１つの数を計算することを考えよう。どの２つの数を選択するか、その順番で最終結果は異なる場合がある。そこで選択した２つの数 $a,b$ を $(a,b)$ で置き換え、計算の順序を表現しよう。たとえば列 $1, 2, 3, 4$ から以下のような計算過程を表現できる。 $$((1, 2), (3, 4)) = (1, 1) = 0 \\quad (1, ((2, 3), 4)) = (1, (1, 4))=(1, 3) =2$$ では $x_1,x_2,\\ldots,x_n$ から得られる異なる計算順序の総数 $P(n)$ はどのぐらいだろうか？まず $P(n)$ は⻑さ $n$ だけで決まり、その中⾝ $x_i$ には依存しないことに注意しよう。次に、$P(n)$ を計算するには⼊⼒列を２つに分割する考え⽅が有⽤である。いま $x_1,x_2,\\ldots,x_n$ を⻑さ $k$ の前半と残りの後半へ分割したとき、前半と後半の部分列の計算順序の総数は、$P(k)$ と $P(n-k)$ であるから、この分割を満たす計算順序の総数は $P(k)P(n-k)$ となる。したがって $k=1,\\ldots,n-1$ について $P(k)P(n-k)$ の和を計算すれば $P(n)$ になりそうだが、$P(1)$ の扱い⽅を考える必要がある。$1$ 個の要素しかない列では計算順序の総数は $0$ としたいところであるが、$P(1)P(n-1) = P(n-1)$ としたい。そこで便宜上 $P(1)=1$ と約束する。まとめると $P(n)$ は以下の漸化式で計算できる。 $$P(1) = 1,\\quad P(n) = \\sum_{k=1}&#94;{n-1}P(k)P(n-k)\\ (n\\geq2)$$ 解答 Given a sequence of Natural numbers $\\mathcal{D} = \\{x_1,x_2,\\ldots,x_n\\}$ , the goal is to calculate the value $x&#94;{\\ast}$ by repeatedly replacing adjacent number pairs $a,b$ to one value $|a-b|$. In this problem, $x&#94;{\\ast}$ depends on how to chose the consecutive two numbers $a$ and $b$, so by denoting $(a,b)$ as the selected numbers , we express the calculation process uniquely . For example, in the case of $\\mathcal{D} = \\{1,2,3,4\\}$ we can express following calculation processes $$\\left(\\left(1,2\\right), \\left(3,4\\right)\\right) = \\left(1,1\\right) = 0 \\quad \\left(1,\\left(\\left(2,3\\right)\\right), 4\\right) = \\left(1,\\left(1,4\\right)\\right) = \\left(1,3\\right) = 2$$ We now discuss $P(n)$, denoting the total number of calculation processes. Noting that $P(n)$ depends only the sequence length $n$, we take an approach to calculate $P(n)$ by using a recurrence formula. If we divide the sequence into $\\{x_1,x_2,\\ldots,x_k\\}$ and $\\{x_{k+1},\\ldots,x_n\\}$, the total number of calculation processes under this division is given by $P(k)P(n-k)$. Therefore, $P(n)$ can be obtained by summing it over $k$. In the case of $n=1$, we define $P(1)=1$ since expression $P(1)(n-1) = P(n-1)$ holds. To summarize, $P(n)$ is given by $$P(1) = 1,\\quad P(n) = \\sum_{k=1}&#94;{n-1}P(k)P(n-k)\\ (n\\geq2)\\ .$$ 問題2 ３年間の研究が実って以下のような研究成果が得られました。 （研究成果の要約）ゲノムのタンデムリピートは⻑くなるほど検出が難しく、どのような機能を持つか解明が待たれる。モデル⽣物 A のゲノムをロングリード・シーケンシングにより解読したところ、従来のショートリード・シーケンシングでは検出できなかったタンデムリピート X がゲノムの約 5%を占めることが分かった。X を含む転写物が神経細胞と⽣殖細胞に統計的に有意に発現しており、RNA ⼲渉でノックダウンしたところ雄の⽣殖能⼒が有意に低下した。タンデムリピート配列が機能することを⽰す注⽬すべき結果である。さらに、近縁種のゲノムと⽐較した結果、X はモデル⽣物 A の近縁種のゲノムでは殆ど存在せず、急速に進化し新しい機能を獲得したことを⽰唆している。 多くの⼈達にその成果を知ってほしいので、読者層の広い雑誌 SNC に投稿することにしました。雑誌 SNC では専属の編集者がいて、研究成果がどの程度広い読者層に関⼼を持たれるかを評価します。⾼評価であれば専⾨的な研究者に査読を依頼します。編集者に価値を理解してもらうため、通常はかなり苦労します。研究成果をアピールする以下の英⽂で、⻩⾊いマーカー部分を埋めてください。 Dear Editor of Scientific Nature of the Cell, We are pleased to submit a manuscript entitled \"要約の適切な題名を考えてください\" for consideration for publication in Scientific Nature of the Cell. 要約を魅力的に伝えるパラグラフ We believe that our findings should interest a broad readership of Scientific Nature of the Cell. Sincerely yours, \"あなたの名前\" Department of Bioinformatics and Systems BiologyFaculty of Science, The University of Tokyo 解答 Dear Editor of Scientific Nature of the Cell, We are pleased to submit a manuscript entitled \"Long-read sequencing reveals unexplored tandem repeats\" for consideration for publication in Scientific Nature of the Cell. Repetitive genome regions have been difficult to detect and remain unexplained, mainly because of the comparative small size of the fragments used in assembly. To address this issue, we used long-read sequencers for \"A\" and found that tandem repeat \"X\" accounts for 5% of the whole genome, which has not been detected by conventional short-read sequencing. \"X\"-related transcript is significantly expressed in nerve cell and germ cell, and male fertility is declined when it knocked down by RNA interference. This shows that detected tandem repeat actually works. Surprisingly, X was hardly detected in related species of \"A\", and this suggests that \"A\" evolved rapidly and acquire functions recently. We believe that our findings should interest a broad readership of Scientific Nature of the Cell. Sincerely yours, Shuto Iwasaki Department of Bioinformatics and Systems BiologyFaculty of Science, The University of Tokyo 問題3 論⽂は査読者に回わしてもらえたものの、以下のような厳しいコメントが返ってきました。 Reviewer 1: My major concern with this manuscript is the avoidance of showing actual data, and that trait is very consistent throughout the manuscript. The most prominent example is the repeats assembled by their software program. The authors only claim that their software works, but they do not show any evidence for that claim. そこで以下のような⽇本語の返答を考えてみました。査読者の懐に⼊れるような英⽂を 考えてみてください。 まず、とても貴重なコメントを頂きました Reviewer 1 に感謝いたします。コメントに従いまして本⽂を修正いたしました。リピート領域を解読することはとても難しい問題ですので、注意深くソフトウエアを設計しました。まず、正解領域が分かっているデータを現実のエラーパターンを考慮して⽣成し、そのデータを使って私達のソフトウエアの性能を評価しました。その結果、新しく追加した表１に⽰しますように、既存のソフトウエア⽐べて精度を10%以上改善できることが分かりました。⽣成データに加えて、現実のデータでもリピート領域を正しい⻑さでアセンブリしていることを、サザンブロットで確認しました。 解答 Thank you very much for your time and valuable feedback on our manuscript. Following the reviewer's suggestion, we confirm the correctness of our software and add the evidence. Validity check was conducted by the following steps: We generate ground truth according to a real observation. We compare the performance of various softwares in that data, and as shown in the Table 1, which is newly inserted, our software recorded more than 10% higher accuracy than the previous softwares. Our software also predicted the repeat regions for raw sequences, and its accuracy was confirmed by Southern blotting. 添削コメント：上手く書けています。一つ注意が必要なのは \"software\" は単数形です。複数形にしたい場合には \"software programs\" にしましょう。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(森下)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下)-0.html"},{"title":"レポート課題9(12/5出題)","text":"UkYgyYI9pXyyhMwHBKYYCw==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report9.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report9.html"},{"title":"Introduction","text":"講師： 森下 真一 （3Sで 生物情報ソフトウエア論 を担当されていた方） 資料： 講義HP 計算演習 |#|担当者|課題名| |:-:|:-|:-:| |0|森下真一| 英語で論文を投稿して受理されるまで | |1|森下真一| 繰返し構造 O(n²), O(n log n) | |2|森下真一| 配列アラインメントの下界 Ω(n²) | |3|鈴木裕太 中林亮| 区間分割アルゴリズム | |4|鈴木裕太| Boosting (2値クラス分類問題および連続値回帰問題) | |5|舛谷万象| de Bruijn graphとその表現 データ | |6|太田力文| 統計遺伝学（GWAS, Risk Score） | |7|市川和樹| クラスタリング １細胞データ |m","tags":"情報基礎実験(森下)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下).html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(森下).html"},{"title":"生命情報表現論 第3回","text":"ゲノム配列、ゲノムアノテーションと遺伝子進化","tags":"生命情報表現論","url":"https://iwasakishuto.github.io/University/3A/生命情報表現論-3.html","loc":"https://iwasakishuto.github.io/University/3A/生命情報表現論-3.html"},{"title":"進化生態情報学 第1回","text":"講師： 岩崎渉 参考書： 分子系統学への統計的アプローチ -計算分子進化学-（共立出版、2009） 参考書： 進化ー分子・個体・生態系（メディカルサイエンスインターナショナル、2009） 参考書： 分子進化と分子系統学（培風館、2006） 参考書： Brock Biology of Microorganisms 14th Edition（Benjamin Cummings、2014） 参考書： ディジタル画像処理 改訂新版（CG-ARTS協会、2015） In [1]: import numpy as np import matplotlib.pyplot as plt 塩基置換のマルコフモデル $$P(t)$$ $$Q$$ 離散 連続（に限りなく近づけた極限） 遷移確率行列 置換速度行列（遷移強度行列） 時間 $t$ 後に塩基 $i$ が $j$ になっている確率を $P_{ij}(t)=p_{ij}(t)$ とする。 間隔 $(t,t+\\Delta t)$ に起きた遷移 $i\\rightarrow j$ の確率が $q_{ij}\\Delta t$ 定義より、$t=0$ の遷移確率行列 $P(0)$ は 単位行列 $I$ $Q$ は積の形 $Qt$ のみで現れ、積のみが意味を持つ。（＝ 相対的 な置換速度しか表せない。 チャップマン-コルモゴロフの定理 以下が成立することは、定義から明らか。 $$ \\begin{aligned} &p;_{ij}(s+t) = \\sum_{k}p_{ik}(s)p_{kj}(t)\\\\ &\\Longleftrightarrow P(s+t) = P(s)P(t) \\end{aligned} $$ $P(t)$ と $Q$ の関係 $P(t)$ は微分可能であり、上式を用いて導関数を計算することができる。 $$\\begin{aligned} P(t+\\Delta t) &= P(t)P(\\Delta t) \\\\ &= P(t)P(0)(I + Q\\Delta t)\\\\ &= P(t) + P(t)Q\\Delta t\\\\ \\frac{P(t+\\Delta t) - P(t)}{(t+\\Delta t) - t}&= P(t)Q\\\\ \\underset{t\\rightarrow0}{\\Longrightarrow} \\frac{dP(t)}{dt} &= P(t)Q \\end{aligned}$$ ここで、この微分方程式は簡単に解くことができる。 一般の $n\\times n$ 行列 $A$ に対し、$e&#94;{tA} = \\sum_{k=0}&#94;{\\infty}\\frac{t&#94;k}{k!}A&#94;k$ 上の式で $t$ に対して微分すると、$\\frac{d}{dt}e&#94;{tA} = Ae&#94;{tA}$ 先の式と照らし合わせると、以下を得る。 $$P(t) = e&#94;{Qt}$$ 対角化と $P(t)$ の解 行列 $Q$ が 異なる固有値を $n(=4)$ 個持つ （対角化できる） とする と、正則行列 $U$ を用いて以下のように対角化できる。 $$\\Lambda = U&#94;{-1}QU\\Longleftrightarrow Q=U\\Lambda U&#94;{-1}$$ これを先の式に代入すると、 $$ \\begin{aligned} P(t) &=\\exp\\left(Qt\\right)\\\\ &= \\sum_{k=0}&#94;{\\infty}\\frac{t&#94;k}{k}Q&#94;k\\\\ &= \\sum_{k=0}&#94;{\\infty}\\frac{t&#94;k}{k}\\left(U\\Lambda U&#94;{-1}\\right)&#94;k\\\\ &= U\\left(\\sum_{k=0}&#94;{\\infty}\\frac{t&#94;k}{k}\\Lambda&#94;k\\right)U&#94;{-1}\\\\ &= U\\exp\\left(\\Lambda t\\right) U&#94;{-1}\\\\ &= U \\text{diag}\\left\\{\\exp(\\lambda_1t), \\exp(\\lambda_2t),\\cdots,\\exp(\\lambda_nt)\\right\\}U&#94;{-1} \\end{aligned} $$ よって、$\\Sigma$ が消えて簡単な形で表せるようになった。 各塩基の分布 $\\pi(t)$ 状態 $k$ の初期確率分布が $\\pi(0)$ で与えられる時、時刻 $t$ の分布は次式によって計算できる。 $$\\pi(t) = \\pi(0)P(t)$$ 定常分布 の時、 $$ \\begin{aligned} \\pi &= \\pi P(t)\\\\ &= \\pi P(0)(I + Qt)\\\\ &= \\pi + \\pi Qt\\\\ \\therefore \\pi Qt &= 0 \\end{aligned} $$ 最後の式は、$t$ の値に依存せずに成り立つので、$\\pi Q=0$ 提案されているモデル 基本的に $Q$ を定義して、以下の式から $P(t)$ を求める、というのが一般的。 $$ \\begin{cases} \\begin{aligned} P(t) &=\\exp\\left(Qt\\right) \\\\ &= U \\text{diag}\\left\\{\\exp(\\lambda_1t), \\exp(\\lambda_2t),\\cdots,\\exp(\\lambda_nt)\\right\\}U&#94;{-1} \\end{aligned}\\\\ Q=U\\Lambda U&#94;{-1} \\end{cases} $$ JC69モデル JC69 (Jukes and Cantor, 1969)は、最も単純な塩基モデルであり、以下の 置換速度行列 で表される。 $$ Q = \\{ q_{i,j} \\} = \\left[ \\begin{array}{rrrr} -3\\mu & \\mu & \\mu & \\mu \\\\ \\mu & -3\\mu & \\mu & \\mu \\\\ \\mu & \\mu & -3\\mu & \\mu \\\\ \\mu & \\mu & \\mu & -3\\mu \\end{array} \\right] $$ ここで、$Q$ の固有方程式を解くと、 $$ \\begin{aligned} \\det\\left(Q-\\lambda I\\right) &= \\mu\\left(x&#94;4 - 6x&#94;2 + 8x -3\\right), \\qquad \\left(x = (-3-\\lambda/\\mu)\\right)\\\\ &= (x-1)(x&#94;3 + x&#94;2 - 5x + 3)\\\\ &= (x-1)(x-1)(x&#94;2 + 2x -3)\\\\ &= (x-1)(x-1)(x-1)(x+3) \\end{aligned} $$ したがって、以下の対角化の結果（の一つ）が得られる。 $$ Q = \\left( \\begin{array}{rrrr} -1 & -1 & -1 & 1 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 1 & 0 & 1 \\\\ 0 & 0 & 0 & 1 \\end{array} \\right) \\left( \\begin{array}{rrrr} -4\\mu & 0 & 0 & 0 \\\\ 0 & -4\\mu & 0 & 0 \\\\ 0 & 0 & -4\\mu & 0 \\\\ 0 & 0 & 0 & 0 \\end{array} \\right) \\left(\\frac{1}{4} \\left( \\begin{array}{rrrr} -1 & -1 & -1 & 3 \\\\ -1 & -1 & 3 & -1 \\\\ -1 & 3 & -1 & -1 \\\\ 1 & 1 & 1 & 1 \\end{array} \\right) \\right) $$ In [2]: class JC69 (): def __init__ ( self ): self . substitution_rate_matrix = np . array ([ [ - 3 , 1 , 1 , 1 ], [ 1 , - 3 , 1 , 1 ], [ 1 , 1 , - 3 , 1 ], [ 1 , 1 , 1 , - 3 ], ]) self . eigvals , self . U = np . linalg . eig ( self . substitution_rate_matrix ) self . U_inv = np . linalg . inv ( self . U ) def Q ( self , lamda ): \"\"\" Substitution Rate Matrix \"\"\" return lamda * self . substitution_rate_matrix def P ( self , t , lamda ): Lambda = np . diag ( np . exp ( t * lamda * self . eigvals )) return np . dot ( self . U , np . dot ( Lambda , self . U_inv )) def p0 ( self , t , lamda ): return self . P ( t , lamda )[ 0 ][ 0 ] def p1 ( self , t , lamda ): return self . P ( t , lamda )[ 0 ][ 1 ] In [3]: time = np . linspace ( 0 , 2 , 10000 ) In [4]: model = JC69 () In [5]: plt . plot ( np . vectorize ( model . p0 )( time , lamda = 1 ), color = \"red\" , label = \"$p_0$\" ) plt . plot ( np . vectorize ( model . p1 )( time , lamda = 1 ), color = \"blue\" , label = \"$p_1$\" ) plt . axhline ( 1 / 4 , linestyle = \"--\" , color = \"black\" ) plt . legend (), plt . grid (), plt . xticks ([ 0 , 2500 , 5000 , 7500 , 10000 ], [ 0 , 0.5 , 1 , 1.5 , 2 ]) plt . show () if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"進化生態情報学","url":"https://iwasakishuto.github.io/University/3A/進化生態情報学-1.html","loc":"https://iwasakishuto.github.io/University/3A/進化生態情報学-1.html"},{"title":"レポート課題8(11/28出題)","text":"wPqAYEQ/g3DXtu9kiEHATA==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report8.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report8.html"},{"title":"機械学習(1)教師付き学習","text":"講師： 杉山将 講師： 本多淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 講義概要 回帰 モデル 最小二乗回帰 正則化最小二乗回帰 交差確認法 分類 超平面分類器 サポートベクトルマシン 非線形化 最適化 回帰 回帰の目標は、 「訓練標本から真の関数にできるだけ近い関数を求めること」 である。 モデル モデル：学習結果の関数を探す候補集合。パラメータ $\\boldsymbol{\\theta}$ の値を指定すると関数が一つ決まる。 $$\\left\\{f_{\\boldsymbol{\\theta}}(\\mathbf{x}) | \\boldsymbol{\\theta} = (\\theta_1,\\ldots,\\theta_b)&#94;T\\right\\}$$ 線形モデル：$f_{\\boldsymbol{\\theta}}(\\mathbf{x})$ が 「 $\\boldsymbol{\\theta}$ に関して」 線形 $$f_{\\boldsymbol{\\theta}}(\\mathbf{x}) = \\sum_{j=1}&#94;b\\theta_j\\phi_j(\\mathbf{x})\\quad \\mathbf{x}\\in\\mathbb{R}&#94;d$$ 非線形モデル：それ以外。 カーネルモデル $$f_{\\boldsymbol{\\theta}}\\mathbf{x}) = \\sum_{j=1}&#94;n\\theta_jK(\\mathbf{x},\\mathbf{x}_j)$$ 線形モデル の一種。 基底関数が入力に依存する。 $K(\\mathbf{x},\\mathbf{c})$ はカーネル関数であり、$\\phi_j(\\cdot) = K(\\cdot,\\mathbf{x}_j)$ に対応する。 （入力に依存している！！） カーネル関数として最も一般的なものは ガウスカーネル ガウス関数を各訓練入力標本の場所に配置 $$K(\\mathbf{x},\\mathbf{c}) = \\exp\\left(-\\frac{\\|\\mathbf{x}-\\mathbf{c}\\|&#94;2}{2h&#94;2}\\right),\\quad h(>0)$$ 訓練標本が入力空間上に偏って分布している時、ガウスカーネルモデルは 訓練入力標本が存在しない領域を無視する 関数が学習される。→ある種の 次元削減効果 が得られる（？） 最小二乗回帰 訓練出力との二乗誤差を最小にすることを目的とした回帰。 $$\\min_{\\boldsymbol{\\theta}}\\left[\\frac{1}{2}\\sum_{i=1}&#94;n\\left(y_i-f_{\\boldsymbol{\\theta}}(\\mathbf{x}_i)\\right)&#94;2\\right]$$ 正則化最小二乗回帰 過学習を抑えるため、 「回帰係数 $\\boldsymbol{\\theta}$ の各要素の絶対値が大きくなることに罰則を加えた」 最小二乗回帰。 $$\\min_{\\boldsymbol{\\theta}}\\left[\\frac{1}{2}\\sum_{i=1}&#94;n\\left(y_i-f_{\\boldsymbol{\\theta}}(\\mathbf{x}_i)\\right)&#94;2 + \\frac{\\lambda}{2}\\sum_{j=1}&#94;n\\theta_j&#94;2\\right]\\quad \\lambda>0$$ 交差確認法 正則化パラメータ $\\lambda$ や、ガウスカーネルのバンド幅 $h$ などは、設計者が 独断で決定する 。 より汎化性能の高いモデルを選択するため、 訓練標本を $k$ 分割し、「そのうち一つを検証用。残りを訓練用」に分ける 方法が一般的。この作業を $k$ 回繰り返して平均スコアを比較する。 分類 分類の目標は、 「クラス間の分離境界を求めること」 である。 超平面分類器 標本空間を超平面 $f_{\\mathbf{w},b} = \\mathbf{w}&#94;T\\mathbf{x} + b = 0$ で分離する。 サポートベクトルマシン 二つのクラスを分類する超平面はいくつかあるが、 「二つのクラス間の 隙間（マージン） の大きさが最大」 なものが汎化性能が高いという考えから マージン最大化 を目標とする手法。 標本が線形分離可能でない時には、マージンを定義することができないので、標本毎に少しの誤差 $\\xi_i$ を許す。 $$ \\begin{aligned} \\min_{\\mathbf{w},b,\\boldsymbol{\\xi}} \\quad&\\|\\mathbf{w}\\|&#94;2 + C\\sum_{i=1}&#94;n\\xi_i,\\quad f_{\\mathbf{w},b}(\\mathbf{x}) = \\mathbf{w}&#94;T\\mathbf{x} + b\\\\ \\text{subject to }\\quad&y;_if_{\\mathbf{w},b}(\\mathbf{x}_i)\\geq1-\\xi_i\\Longleftrightarrow\\xi_i\\geq1-y_if_{\\mathbf{w},b}(\\mathbf{x}_i)\\\\ &\\xi_i\\geq0\\quad\\text{for $i=1,\\ldots,n$} \\end{aligned} $$ $\\xi_i$ が小さいほど目的関数が減るので、結局必要な計算は $$\\min_{\\mathbf{w},b}\\left[\\|\\mathbf{w}\\|&#94;2 + C\\sum_{i=1}&#94;n\\max\\left\\{0,1-y_if_{\\mathbf{w},b}(\\mathbf{x}_i)\\right\\}\\right]$$ 非線形化 非線形関数 $\\phi(\\mathbf{x})$ で標本を特徴空間へ写像し、特徴空間内でマージン最大の超平面を求める。 $$f_{\\mathbf{w},b}(\\mathbf{x}) = \\mathbf{w}&#94;T\\mathbf{x} + b \\rightarrow f_{\\mathbf{w},b}(\\mathbf{x}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x}) + b$$ これをそのまま解く場合 $\\phi(\\mathbf{x})$ の次元が大きい場合は計算が大変なので、 カーネルトリック を用いる。 カーネルトリック 線形モデルにおける多くの回帰・分類手法では、特徴量 $\\phi(\\mathbf{x}_i)$ を 直接求めなくても、その内積 $\\phi(\\mathbf{x}_i)&#94;T\\phi(\\mathbf{x}_j)$ さえわかれば実装可能。 → 特徴空間上の内積を カーネル関数 で直接表現する。 計算量が特徴空間の次元によらない！ 【サポートベクターマシンの場合】 仮定 ： $$\\mathbf{w}=\\sum_{j=1}&#94;n\\theta_j\\phi(\\mathbf{x}_j),b=0$$ 最小化したい目的関数は、以下の形で表される。 $$ \\begin{cases} \\begin{aligned} &\\min_{\\mathbf{w},b}\\left[\\|\\mathbf{w}\\|&#94;2 + C\\sum_{i=1}&#94;n\\max\\left\\{0,1-y_if_{\\mathbf{w},b}(\\mathbf{x_i})\\right\\}\\right]\\\\ &f;_{\\mathbf{w},b}(\\mathbf{x}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x}) + b \\end{aligned} \\end{cases} \\rightarrow \\begin{cases} \\begin{aligned} &\\min_{\\boldsymbol{\\theta}}\\left[\\boldsymbol{\\theta}&#94;T\\mathbf{K}\\boldsymbol{\\theta} + C\\sum_{i=1}&#94;n\\max\\left\\{0,1-y_if_{\\mathbf{w},b}(\\mathbf{x_i})\\right\\}\\right]\\\\ &f;_{\\mathbf{w},b}(\\mathbf{x}) = \\sum_{j=1}&#94;n\\theta_jK(\\mathbf{x},\\mathbf{x}_j),\\quad\\phi(\\mathbf{x}_i)&#94;T\\phi(\\mathbf{x}_j) = K(\\mathbf{x}_i,\\mathbf{x}_j) \\end{aligned} \\end{cases} $$ 最適化 劣勾配 凸関数 $f$ の $\\mathbf{x}&#94;{\\prime}$ での 劣勾配(sub-gradient) とは、全ての $\\mathbf{x}\\in\\mathbb{R}&#94;d$ に対して次式を満たす $\\boldsymbol{\\xi}$： $$f(\\mathbf{x}) \\geq f(\\mathbf{x&#94;{\\prime}}) + \\boldsymbol{\\xi}&#94;T(\\mathbf{x}-\\mathbf{x}&#94;{\\prime})$$ $f$ が微分可能なとき、$\\boldsymbol{\\xi} = \\nabla f(\\mathbf{x}&#94;{\\prime})$ 上式を満たす $\\boldsymbol{\\xi}$ 全体を $\\partial f(\\mathbf{x}&#94;{\\prime})$ で表し、 劣微分(sub-differential) とよぶ。 劣勾配法：勾配法において、微分不可能な点では、劣微分のどれかの値を用いる。 【引用】 Qiita: 劣微分・劣勾配と共役関数の可視化 サポートベクトルマシン ※ 仮定：$\\mathbf{w}=\\sum_{j=1}&#94;n\\theta_j\\phi(\\mathbf{x}_j),b=0$ $$ \\begin{cases} \\begin{aligned} &\\min_{\\boldsymbol{\\theta}}\\left[\\boldsymbol{\\theta}&#94;T\\mathbf{K}\\boldsymbol{\\theta} + C\\sum_{i=1}&#94;n\\max\\left\\{0,1-y_if_{\\mathbf{w},b}(\\mathbf{x_i})\\right\\}\\right]\\\\ &f;_{\\mathbf{w},b}(\\mathbf{x}) = \\sum_{j=1}&#94;n\\theta_jK(\\mathbf{x},\\mathbf{x}_j),\\quad\\phi(\\mathbf{x}_i)&#94;T\\phi(\\mathbf{x}_j) = K(\\mathbf{x}_i,\\mathbf{x}_j) \\end{aligned} \\end{cases} $$ $\\min$ の中身を劣微分すれば、 $$ \\partial_{\\theta_j}\\max\\left(0, 1-f_{\\boldsymbol{\\theta}}(\\mathbf{x}_i)y_i\\right)= \\begin{cases} \\begin{aligned} &-y_iK(\\mathbf{x}_i,\\mathbf{x}_j) & \\left(\\text{if $1-f_{\\boldsymbol{\\theta}}(\\mathbf{x}_i)y_i > 0$ }\\right)\\\\ &0 & (\\text{otherwise.}) \\end{aligned} \\end{cases} $$ となるので、劣勾配法による実装時は以下で表せる。 $$\\boldsymbol{\\theta}\\longleftarrow\\boldsymbol{\\theta} - \\varepsilon\\left(C\\sum_{i=1}&#94;n\\partial_{\\boldsymbol{\\theta}}\\max\\left(0,1-f_{\\boldsymbol{\\theta}}(\\mathbf{x}_i)y_i\\right) + 2\\mathbf{K}\\boldsymbol{\\theta}\\right)$$ まとめ 教師付き学習 ：訓練データ（入出力の組）から、その背後に潜む関数を学習 回帰も分類も、 「損失*正則化(regularization)」の最小化 を目標としている。 $$\\min_{\\boldsymbol{\\theta}}\\left[\\sum_{i=1}&#94;n\\text{loss}\\left(f_{\\boldsymbol{\\theta}}(\\mathbf{x}_i),y_i\\right) + \\lambda\\text{Reg}(\\boldsymbol{\\theta})\\right]$$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-8.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-8.html"},{"title":"分子生命科学Ⅲ 第9回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 脳と行動(1) 脳と行動の化学的制御（総論） ホルモンによる性分化、性行動の制御（各論）","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-9.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-9.html"},{"title":"生命情報表現論 第2回","text":"非構造化知識の処理 〜情報検索から電子カルテまで〜 情報検索 情報検索 とは、 大量のデータ群から目的に合うものを取り出すこと であり、文書、画像、音声、映像など、検索の対象は多岐にわたる。 基本的な流れとしては、 データベースには、検索対象のデータが蓄積・管理されている。 検索対象のデータからメタデータ（索引語）が作成・管理されている。 検索の利用者は、ユーザインターフェースを通して検索質問をする。 検索アルゴリズムが、検索質問をメタデータに照合し、それに対応するデータをデータベースから選択する。 選択されたメタデータに対応する検索対象のデータをユーザインターフェイスを通して利用者に返答する。 となっている。（メタデータを使わない直接検索もありうる。） 検索技術に関しては 検索対象データの抽象度 直接検索（特に全文検索） 関節検索： データベースに蓄積されたデータからメタデータを生成して保管する。 検索時は、検索質問をメタデータの表現形式に変換する。 それをメタデータに対して照合、照合結果に紐づいたデータを取得。 検索入力の種類 単語：キーワードで検索 検索言語：システム特有の検索言語を使う。論理和・論理積など。 直接入力：例えば画像を入力し、類似した画像を検索する。 自然文：人が使う言葉そのもので検索する。後述の自然言語処理が必要。 文書：文書そのものを入力し、入力文書と類似する文書を検索する。 などの種類があり、主要なアルゴリズムは パターンマッチング ブール論理 ： パターンマッチングの検索に加え、メタデータの属性ごとの絞り込み条件を論理和・論理積などで組み合わせて併用する。 ベクトル空間モデル ： ユーザーからの検索質問やデータベース中の各データを高次元のベクトルで表現し、それらの類似度を元に関係の強さを計算する。 質疑応答システム 自然言語処理 テキストマイニング 電子カルテ ゲノム配列、ゲノムアノテーションと遺伝子進化 〜ゲノムデータの表現、系統樹、アノテーションまで〜 ゲノム配列データの表現と解析の概要 系統樹 系統樹 とは、 生物の類縁関係を表現する際に、分類群を樹枝状の線でつなぐ形で示したもの であり、枝分かれは系統の分岐を、枝の長さ・高さは進化の程度や時間経過を表す。 主な作成法としては、 近隣結合法(Neighbor-joining method) 複数のOTUの近隣を段階的に見いだし、最終的に無根系統樹を得る方法。 本法は各OTU間の距離行列を計算し、これを星状系統樹に配置した後、二つのOTUを結合したときにもっとも星状系統樹の枝長の総和を小さくするのに都合のよい系統樹を選択する。 この操作を段階的に繰り返すことによって最終的な系統樹を得る。 この方法は段階的クラスター法に属し、他の方法よりもはるかに短い計算時間で系統樹を作成できる利点がある。 進化速度を一定と仮定しないため、進化速度が異なる系統であっても、比較的正しく系統樹を作成することが可能である。 サイトごとに異なる進化速度は結果に反映されない。 最大節約法(Maximum parsimony method) 塩基配列上に有意な塩基置換の起こった座位を抽出し、これらがもっとも少ない置換回数で説明できる系統関係を選択する方法。 プリン塩基同士あるいはピリミジン塩基同士などの置換の起こりやすさを反映させることが可能。 系統学的に深い位置で分岐したもの同士を含む場合や特定の系統で進化速度が速くなっている場合には同じ座位で起こる多重置換を無視することができず、偏った推測をしてしまう可能性もある。 複数得られた系統関係の中からもっとも置換が少ない関係を選び出す目的には有用。 最尤法(Maximum likelihood method) 塩基置換における何らかのモデルを仮定し、そのモデルに基づいて、対象とする塩基配列が時間経過に伴って先祖配列から子孫配列へ塩基置換する確率を計算し、もっとも尤度（確率）の高い樹形を導く方法。 最尤法は網羅的探索法に属する。 探索のアルゴリズムやデータによってはきわめて計算時間がかかることがある。 ベイズ法 マルコム連鎖モンテカルロ法に基づいて大量の系統樹を作成し、単系統群の出現頻度（事後確率）を求める方法。 初期系統樹を攪乱し、得られた系統樹が初期系統樹の置換モデル・樹形・枝の長さから導かれる確率によって受理・棄却されるかを決定し、受理される場合は新たな系統樹に対してこの操作を繰り返す（棄却された場合はもとの系統樹に対して再度この操作を行う）。 このマルコフ連鎖を繰り返し、定常状態に達した時に単系統群の出現頻度が事後確率に相当する。 ベイズ法は比較的新しい系統解析法で今後に注目されているが、一方で計算時間がかかることや事後確率が過大評価されるなどの問題がある。 ゲノムアノテーション","tags":"生命情報表現論","url":"https://iwasakishuto.github.io/University/3A/生命情報表現論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生命情報表現論-2.html"},{"title":"レポート課題7(11/21出題)","text":"byHxZa8dAOeCAZs7sffECw==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report7.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report7.html"},{"title":"確率と統計(3)確率不等式・大数の法則・中心極限定理・仮説検定","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 In [1]: import numpy as np import matplotlib.pyplot as plt from scipy import stats In [2]: seed = 0 N = 10000 trials = np . arange ( 1 , N + 1 ) 講義概要 確率不等式 ： 確率分布がわからなくても確率の上限・下限がわかる。 大数の法則 ： 標本平均は真の期待値に収束。 中心極限定理 ： 標本平均は漸近的に正規分布に従う。 仮説検定 ： 「帰無仮説と対立仮説」 ・ 「有意水準」 ・ 「両側検定と片側検定」 ・ 「二標本検定」 枠組み ： 両側検定 ： 二標本検定 ： 確率不等式 チェビシェフの不等式(Chebyshev's inequality) $$P\\left(\\left| X-\\mathbb{E}[X]\\right|\\geq k\\right) \\leq \\frac{\\mathbb{V}[X]}{k&#94;2},\\quad k>0$$ 確率分布の具体的な形がわからなくても良い。 確率分布の期待値と分散がわかる時、上式によって 確率の上限が計算できる 。 分散を持つ任意の確率変数 に対して成立する。 【証明】 $$ \\begin{aligned} \\mathbb{V}[X] &= \\int_{-\\infty}&#94;{\\infty}\\left(x - \\mathbb{E}[X]\\right)&#94;2f(x)dx\\\\ &\\geq \\int_{I}\\left(x - \\mathbb{E}[X]\\right)&#94;2f(x)dx\\quad I=\\left\\{x:|x-\\mathbb{E}[X]| \\geq k\\right\\}\\\\ &\\geq \\int_{I}k&#94;2f(x)dx\\\\ &= k&#94;2\\mathrm{P}\\left(|X-\\mathbb{E}[X]|\\geq k\\right) \\end{aligned} $$ その他の便利な不等式 マルコフの不等式(Markov's inequality)： $$P(X\\geq a)\\leq \\frac{1}{a}\\mathbb{E}[X]\\quad\\text{for any $a>0$}\\quad X\\geq0$$ イェンセンの不等式(Jensen's inequality)： $$\\mathbb{E}\\left[h(X)\\right]\\geq h\\left(\\mathbb{E}[X]\\right)\\quad h(x):\\text{Convex function}$$ ヘルダーの不等式(Hölder's inequality)： $$\\mathbb{E}[|XY|]\\leq\\left(\\mathbb{E}[|X|&#94;p]\\right)&#94;{1/p}\\left(\\mathbb{E}[|Y|&#94;q]\\right)&#94;{1/q}\\quad \\text{ for any $p,q>0$ such that $1/p+1/q=1$}$$ ※ ヘルダーの不等式において、特に $p=q=2$ の場合を コーシー・シュワルツの不等式(Cauchy-Schwarz's inequality) と呼ぶ。 大数の法則 独立同一分布 同じ分布から独立に $n$ 個の標本 $X_1,X_2,\\ldots,X_n$ を取り出したとき、これらは 独立同一分布に従う(independently and identically distributed, i.i.d) という。 $X_1,X_2,\\ldots,X_n$ の同時確率密度関数は $$f(x_1,x_2,\\ldots,x_n) = g(x_1)g(x_2),\\cdots,g(x_n)$$ 期待値 $\\mu$ 分散 $\\sigma&#94;2$ の i.i.d.標本 $X_1,X_2,\\ldots,X_n$ の標本平均 $\\bar{X_n}=\\frac{1}{n}\\sum_{i=1}&#94;nX_i$ を考える。 期待値 → 変化なし。 $$\\mathbb{E}\\left[\\frac{1}{n}\\sum_{i=1}&#94;nX_i\\right] = \\frac{1}{n}\\sum_{i=1}&#94;n\\mathbb{E}[X_i] = \\frac{1}{n}\\sum_{i=1}&#94;n\\mu = \\mu$$ 分散 → $1/n$ になり、標本平均を取ると値が安定する。 $$\\mathbb{V}\\left[\\frac{1}{n}\\sum_{i=1}&#94;nX_i\\right] = \\frac{1}{n&#94;2}\\sum_{i=1}&#94;n\\mathbb{V}[X_i] = \\frac{1}{n&#94;2}\\sum_{i=1}&#94;n\\sigma&#94;2 = \\frac{\\sigma&#94;2}{n}$$ 大数の弱法則 任意の正の定数 $\\varepsilon$ に対して、$n\\rightarrow\\infty$ のとき $$P\\left(|\\bar{X_n}-\\mu|\\geq\\varepsilon\\right)\\rightarrow0$$ 確率論の用語では、これを $\\bar{X_n}$ が $\\mu$ に 確率収束(convergence in probability)する と呼ぶ。 標本を十分たくさんとれば、 「標本平均を真の期待値とみなしても良い」 ということ。 チェビシェフの不等式を使って証明可能。 大数の強法則 $n\\rightarrow\\infty$ で、$\\bar{X_n}$ は $\\mu$ に 概収束(almost sure convergence) する。 In [3]: dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = N ) ave_dices = np . cumsum ( dices ) / trials In [4]: plt . axhline ( 3.5 , color = \"blue\" , label = \"Theoretical mean\" ) plt . plot ( trials , ave_dices , label = \"Observed average\" , color = \"green\" ) plt . ylim ( 1 , 6 ), plt . xlim ( - 1e1 , 1e3 ) plt . title ( \"Average dice roll by number of rolls\" ), plt . xlabel ( \"Number of trials $(n)$\" ), plt . ylabel ( \"Average\" ) plt . grid (), plt . legend () plt . show () 確率収束vs概収束 確率収束は 「$X_n$ の確率分布を $n$ ごとに考える」 のに対し、概収束では 「無限列 $\\{X_n\\}$ の確率分布」 を考える。 例えば，互いに独立な以下の確率変数列を考える。 $$X_n = \\begin{cases}0,&\\text{with probability $1-1/n$}\\\\1,&\\text{with probability $1/n$}\\end{cases}$$ $\\lim_{n\\rightarrow\\infty}\\mathrm{Pr}\\left(|X_n|>\\varepsilon\\right) = 0$：$X_n$ は $0$ に確率収束する。 $\\sum_{n=1}&#94;{\\infty}\\mathrm{Pr}\\left(|X_n|=\\varepsilon\\right) = \\infty$：$\\{X_n\\}$ は（確率1で）無限個の $n$ について値 $1$ を取る。→ 「概収束しない」 コーシー分布 $$f(x) = \\frac{\\alpha}{\\pi\\left(\\alpha&#94;2 + (x-\\lambda)&#94;2\\right)}\\quad\\alpha>0$$ 標準正規分布に独立に従う確率変数 $X,Y$ の比 $X/Y$ は、$\\alpha=1,\\lambda=0$ のコーシー分布に従う。 見た目は正規分布に似ている。 期待値と分散が存在しない → 大数の法則が適応できない In [5]: for k in range ( 3 ): samples = np . random . RandomState ( seed + k ) . standard_cauchy ( size = N ) ave_samples = np . cumsum ( samples ) / trials plt . plot ( trials , ave_samples , label = f \"Observation { k + 1 } \" ) plt . xlabel ( \"n\" ), plt . ylabel ( \"$(\\mathbf {X} _1+\\cdots+\\mathbf {X} _n)/n$\" ) plt . legend (), plt . grid () plt . show () 中心極限定理 大数の法則から、標本平均が真の期待値に近づいていくことがわかった。 大標本の極限の少し手前では、標本平均はどのように分布しているだろうか？ （任意に固定した $a < b$ に対して）$n\\rightarrow\\infty$ のとき $$P\\left(a\\leq Z_n \\leq b\\right)\\rightarrow\\int_a&#94;b\\frac{1}{\\sqrt{2\\pi}}e&#94;{-x&#94;2/2}dx,\\quad Z_n = \\frac{\\bar{X_n}-\\mu}{\\sigma/\\sqrt{n}}$$ $Z_n$ の分布が 標準正規分布に 「弱収束(weak convergence)」 する。 （$Z_n$ が $Z$ に弱収束 ↔︎ $\\lim_{n\\rightarrow\\infty}M_{Z_n}(t)=M_Z(t)$） 標準正規分布に 「分布収束(convergence in distribution)」 する。 「漸近的(asymptotically)」 に標準正規分布に従う。 【証明】 目標：「標準正規分布の積率母関数は $e&#94;{t&#94;2/2}$ なので、次式を示す。」 $$\\lim_{n\\rightarrow\\infty}M_{Z_n}(t) = e&#94;{t&#94;2/2}$$ $Y_i = \\frac{X_i-\\mu}{\\sigma}$ は期待値 $0$、分散 $1$ なので、積率母関数は $$M_{Y_i}(t) = \\mathbb{E}\\left[e&#94;{tY_i}\\right] = \\mathbb{E}\\left(1 + tY_i + \\frac{t&#94;2}{2!}Y_i&#94;2 + \\frac{t&#94;3}{3!}Y_i&#94;3 + \\cdots\\right) = 1 + \\frac{1}{2}t&#94;2 + \\sum_{n=3}&#94;{\\infty}\\frac{t&#94;n}{n!}Y_i&#94;n$$ ここで、 $$Z_n = \\frac{\\bar{X_n}-\\mu}{\\sigma/\\sqrt{n}} = \\frac{\\frac{1}{n}\\sum_{i=1}&#94;n X_i - \\mu}{\\sigma/\\sqrt{n}} = \\frac{1}{\\sqrt{n}}\\sum_{i=1}&#94;n Y_i$$ であり、積率母関数の性質 $$ \\begin{cases} M_{Y_1+Y_2}(t) = M_{Y_1}(t)M_{Y_2}(t)\\quad (\\text{$Y_1$ and $Y_2$ are independent.})\\\\ M_{aY}(t) = \\mathbb{E}\\left[e&#94;{taY}\\right] = M_Y(at) \\end{cases} $$ を利用すれば、$Z_n$ の積率母関数は $$ \\begin{aligned} M_{Z_n}(t) &= \\left[M_{Y_i/\\sqrt{n}}(t)\\right]&#94;n & \\left(\\because{Z_n = \\frac{1}{\\sqrt{n}}\\sum_{i=1}&#94;n Y_i}\\right)\\\\ &= \\left[M_{Y_i}\\left(\\frac{t}{\\sqrt{n}}\\right)\\right]&#94;n & \\left(\\because M_{aY}(t)=M_Y(at) \\right)\\\\ &= \\left[1 + \\frac{1}{2}\\left(\\frac{t}{\\sqrt{n}}\\right)&#94;2 + \\sum_{n=3}&#94;{\\infty}\\frac{Y_i&#94;n}{n!}\\left(\\frac{t}{\\sqrt{n}}\\right)&#94;n \\right]&#94;n & \\left(\\because M_{Y_i}(t) = 1 + \\frac{1}{2}t&#94;2 + \\sum_{n=3}&#94;{\\infty}\\frac{t&#94;n}{n!}Y_i&#94;n \\right)\\\\ &= \\left(1 + u_n\\right)&#94;n \\end{aligned} $$ （ここまでまとめ）主目標：「標準正規分布の積率母関数は $e&#94;{t&#94;2/2}$ なので、次式を示す。」 $$\\lim_{n\\rightarrow\\infty}M_{Z_n}(t) = e&#94;{t&#94;2/2}$$ $M_{Z_n}(t)$ は、以下のように示せた。 $$M_{Z_n}(t) = \\left(1 + u_n\\right)&#94;n\\quad \\left(u_n = \\frac{1}{2}\\left(\\frac{t}{\\sqrt{n}}\\right)&#94;2 + \\sum_{n=3}&#94;{\\infty}\\frac{Y_i&#94;n}{n!}\\left(\\frac{t}{\\sqrt{n}}\\right)&#94;n\\right)$$ 以下、 「$\\lim_{n\\rightarrow\\infty}\\log M_{Z_n}(t) = t&#94;2/2$ を示す。」 $n\\rightarrow\\infty$ のとき $|u_n| < 1$ なので、テーラー展開すると $$\\log(1 + u_n) = u_n - u_n&#94;2/2 + u_n&#94;3/3 - \\cdots$$ したがって、$\\log M_{Z_n}(t) = n\\log(1 + u_n) = n\\left(u_n - u_n&#94;2/2 + u_n&#94;3/3 - \\cdots\\right)$ 第1項目に注目すると $$\\lim_{n\\rightarrow\\infty}nu_n = \\lim_{n\\rightarrow\\infty}\\left(\\frac{t&#94;2}{2} + \\sum_{n=3}&#94;{\\infty}\\frac{Y_i&#94;n}{n!}\\frac{t&#94;n}{\\left(\\sqrt{n}\\right)&#94;{n-2}}\\right) = \\frac{t&#94;2}{2}$$ 第2項目以降に注目すると $$\\lim_{n\\rightarrow\\infty}n|-u_n&#94;2/2 + u_n&#94;3/3 - \\cdots | = 0$$ 以上より、 「$\\lim_{n\\rightarrow\\infty}\\log M_{Z_n}(t) = t&#94;2/2$」 $$P\\left(a\\leq Z_n \\leq b\\right)\\rightarrow\\int_a&#94;b\\frac{1}{\\sqrt{2\\pi}}e&#94;{-x&#94;2/2}dx,\\quad Z_n = \\frac{\\bar{X_n}-\\mu}{\\sigma/\\sqrt{n}}$$ 例①：一様分布 $\\mathrm{Uni}(0,1)$ In [6]: fig = plt . figure ( figsize = ( 16 , 4 )) for i , n in enumerate ( range ( 1 , 4 )): ax = fig . add_subplot ( 1 , 3 , i + 1 ) X = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = ( n , N * 10 )) X_ave = np . mean ( X , axis = 0 ) hist , bin_edges , _ = ax . hist ( X_ave , color = \"blue\" , bins = 30 , alpha = 0.5 ) bins = 1 / 2 * ( bin_edges [ 1 :] + bin_edges [: - 1 ]) ax . plot ( bins , hist , color = \"red\" ) ax . set_xlim ( 0 , 1 ), ax . grid (), ax . set_title ( f \"Uniform distribution [0,1] (n= { n } )\" ) plt . tight_layout () plt . show () 例②：指数分布 $f(x) = e&#94;{-x}$ ※ np.random.exponential(beta) は以下の分布から乱数を生成する $$f\\left(x; \\frac{1}{\\beta}\\right) = \\frac{1}{\\beta} \\exp\\left(-\\frac{x}{\\beta}\\right)$$ In [7]: fig = plt . figure ( figsize = ( 16 , 4 )) for i , n in enumerate ([ 1 , 3 , 30 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) X = np . random . RandomState ( seed ) . exponential ( size = ( n , N * 10 )) X_ave = np . mean ( X , axis = 0 ) hist , bin_edges , _ = ax . hist ( X_ave , color = \"blue\" , bins = 30 , alpha = 0.5 ) bins = 1 / 2 * ( bin_edges [ 1 :] + bin_edges [: - 1 ]) ax . plot ( bins , hist , color = \"red\" ) ax . set_xlim ( 0 , 5 ), ax . grid (), ax . set_title ( f \"Exponential distribution (n= { n } )\" ) plt . tight_layout () plt . show () 仮説検定 枠組み 語彙 説明 （例） 仮説検定(hypothesis testing) 母集団についての何らかの命題を、標本に基づいて検証すること コインを20回投げて表が17回出た。この結果から表が出やすいと言えるか？ 帰無仮説(null hypothesis) もとの仮説 コインは歪んでいない。（表が出る確率 $p=1/2$） 対立仮説(alternative hypothesis) 帰無仮説と対立する仮説 表が出やすい。（$p>1/2$） 有意水準(significance level) 検定において帰無仮説を設定したときに、その帰無仮説を棄却する基準となる確率。検定の前に決定する。 $5$% か $1$% のことが多い。 上の例であれば、 「コインは歪んでいない（ $p=1/2$ ） 」 と仮定すれば、 「コインを20回投げて表が17回出る」 という事象の確率は、 $$\\left( _{20}C_{17} + _{20}C_{18} + _{20}C_{19} + _{20}C_{20}\\right) \\times (1/2)&#94;{20} \\approx 0.0013$$ となり、有意水準 $1$ % よりも値が小さい。したがって、帰無仮説を棄却し、 「有意水準 $1$% ので表が出やすい（$p>1_2$）」 と結論づけられる。 注意 「帰無仮説を棄却するとき」 は 「帰無仮説がほとんど起こらないことを証明」 している 「帰無仮説を採択するとき」 は積極的に帰無仮説が起こることを証明しているの 「ではなく」 帰無仮説が現実と矛盾することを証明するだけの 「十分な根拠がない」 と言っているだけである。 両側検定 両側検定(two-sided test) ：あるパラメータが目標値と等しいかどうかを調べる。 片側検定(one-sided test) ：あるパラメータが比較対象より大きいかどうかを調べる。 二標本検定 二標本検定(two-sample test) ：期待値がそれぞれ $\\mu_X,\\mu_Y$ の二つの分布にしたがって取り出した i.i.d.標本（ $\\{X_i\\}_{i=1}&#94;{n_X},\\{Y_i\\}_{i=1}&#94;{n_Y}$ ）から、 「帰無仮説 $\\mu_X=\\mu_Y$ 」 を検定する。 例題 ある反応での化合物の生成量を予測する問題を考える。 触媒Aと触媒Bでそれぞれ何度か実験を行い、それぞれの生成量を調べてみると以下であった。 触媒Aでの平均生成量は16g 触媒Bでの平均生成量は18g 触媒Bのほうが平均生成量が大きいので，触媒A よりも優れていると単純に結論づけて良いか？ → 触媒Aとの 「平均生成量の差が有意(significant)かどうか」 を調べたい。 「仮定」 ：標本はそれぞれ正規分布に従う。 $$X_i\\overset{\\text{i.i.d.}}{\\approx}N(\\mu_X,\\sigma&#94;2),\\quad Y_i\\overset{\\text{i.i.d.}}{\\approx}N(\\mu_Y,\\sigma&#94;2)$$ このとき、 「標本平均の差」 は以下の正規分布に従う。 $$\\bar{X}-\\bar{Y} \\sim N\\left(\\mu_X-\\mu_Y, \\frac{\\sigma&#94;2}{n_X}+\\frac{\\sigma&#94;2}{n_Y}\\right)$$ 「母分散が既知かどうか」 によって、以下の2通りに場合分けされる。 「母分散が既知のとき」 ： 標本平均の差を標準化すると、標準正規分布に従う。 $$Z = \\frac{\\left(\\bar{X} - \\bar{Y}\\right) - \\left(\\mu_X-\\mu_Y\\right)}{\\sqrt{\\frac{\\sigma&#94;2}{n_X} + \\frac{\\sigma&#94;2}{n_Y}}}\\sim N(0,1)$$ 標準正規分布の棄却率は計算できるので、$\\hat{Z}$ が棄却域に入るかどうかを調べれば良い。 $$Z = \\frac{\\bar{X}-\\bar{Y}}{\\sqrt{\\frac{\\sigma&#94;2}{n_X} + \\frac{\\sigma&#94;2}{n_Y}}}$$ 「母分散が未知のとき」 ： 分散 $\\sigma&#94;2$ を標本から推定する。 $$\\hat{\\sigma}&#94;2 = \\frac{\\sum_{i=1}&#94;{n_X}\\left(X_i-\\bar{X}\\right)&#94;2 + \\sum_{i=1}&#94;{n_Y}\\left(Y_i-\\bar{Y}\\right)&#94;2}{n_X + n_Y - 2}$$ $\\hat{Z} = \\frac{\\bar{X} - \\bar{Y}}{\\sqrt{\\frac{\\hat{\\sigma}&#94;2}{n_X}} + \\sqrt{\\frac{\\hat{\\sigma}&#94;2}{n_Y}}}$ は自由度 $\\phi = n_X + n_Y - 2$ の t分布 に従う。 t分布の棄却率は計算できるので、$\\hat{Z}$ が棄却域に入るかどうかを調べれば良い。 t分布 $$f(x) = \\frac{1}{\\sqrt{\\phi}B\\left(\\frac{\\phi}{2},{\\frac{1}{2}}\\right)}\\left(1 + \\frac{x&#94;2}{\\phi}\\right)&#94;{-\\frac{\\phi + 1}{2}},\\quad \\phi = 1,2,\\ldots$$ $X$ を標準正規分布に従う確率変数、$Y$ を自由度 $\\phi$ のカイ二乗分布に従う独立な確率変数としたとき、 $$X/\\sqrt{Y/\\phi}$$ は自由度 $\\phi$ のｔ分布に従う。なお、発見者のペンネームにちなんで、 スチューデンのt分布(Student's t-distribution) と呼ぶこともある。 In [8]: x = np . linspace ( - 3 , 3 , N ) In [9]: fig = plt . figure ( figsize = ( 14 , 4 )) for i , phi in enumerate ([ 1 , 3 , 10 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax . plot ( x , stats . t . pdf ( x , phi ), color = \"r\" , alpha = 0.7 , label = f \"Student's t ($\\phi= { phi } $)\" ) ax . plot ( x , stats . norm . pdf ( x ), color = \"g\" , alpha = 0.5 , label = \"Normal\" ) ax . plot ( x , stats . cauchy . pdf ( x ), color = \"b\" , alpha = 0.5 , label = \"Cauchy\" ) ax . legend () plt . tight_layout () plt . show () 自由度 $\\phi$ が $1$ のとき、 「ｔ分布はコーシー分布になる」 自由度 $\\phi$ が $\\infty$ 限大のとき、ｔ分布は正規分布になる． 自由度 $\\phi$ が 「$2$ 以上」 のとき、期待値は $$\\mathbb{E}[X] = 0$$ 自由度 $\\phi$ が 「$3$ 以上」 のとき、分散は $$\\mathbb{V}[X] = \\frac{\\phi}{\\phi - 2}$$ まとめ 確率不等式 ： 確率分布がわからなくても確率の上限・下限がわかる。 大数の法則 ： 標本平均は真の期待値に収束。 中心極限定理 ： 標本平均は漸近的に正規分布に従う。 仮説検定 ： 「帰無仮説と対立仮説」 ・ 「有意水準」 ・ 「両側検定と片側検定」 ・ 「二標本検定」 枠組み ： 両側検定 ： 二標本検定 ： In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-7.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-7.html"},{"title":"分子生命科学Ⅲ 第8回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 運動系(2) 脳による運動制御 ¬中枢運動系(central motor system)¬には、上部は前頭葉から下部は脊髄まで、階層化された制御レベルの構成が見られる。この運動制御の階層性は、以下のような3段階に分けて考えるとわかりやすい。 高位レベル： 戦略(strategy) （企画・立案） ¬大脳新皮質の連合野¬と¬前脳の基底核¬が、戦略、動作の目標とその達成のための最良の運動方針を立てる。 中位レベル： 戦術(tactics) （実行計画・プログラミング） ¬大脳新皮質の連合野¬と¬小脳¬は、戦術、一連の筋の収縮により、限られた空間と時間で滑らかでかつ正確に目標を達成する計画を作製する。 下位レベル： 実行 ¬脳幹¬と¬脊髄¬は、実行、運動ニューロンと介在ニューロン群の発火により、目的とした運動を達成し、同時に必要な姿勢の調節を行う。 下行性脊髄路 脳は脊髄の運動ニューロンと連絡するが、脳からの軸索は、2つの主要な経路により脊髄を下行する。 @外側経路(lateral pathway)@は、遠位筋の随意運動に関わり、大脳皮質から直接的な制御を受けている。 最も重要な経路は、@皮質脊髄路(corticospinal tract)@である。この経路は、大脳新皮質から起こり、最も長く中枢神経系で最も大きな神経回路の一つで、約100万本の軸索を含む。 @腸内側経路(ventromedial pathway)@は、姿勢と歩行運動の制御に関わり、脳幹による制御を受けている。 @前提脊髄路(vestibulospinal tract)@は内耳の¬前庭迷路(vestibular labyrinth)¬からの感覚情報を受ける延髄の¬前庭神経核(vestibular nuclei)¬から始まる。頭部の動きに対する姿勢反射に関与する。 @視蓋脊髄路(tectospinal tract)@は、網膜からの直接入力を受ける中脳の上丘から始まる。感覚刺激に対する体位の指向運動に関与する。 網様体脊髄路 は橋および延髄網様体からの下行路で、体幹筋や近位四肢筋の運動を制御する。 運動野 大脳皮質の4野と6野は¬運動野(motor cortex)¬と呼ばれるが、随意運動の制御にはほぼ全ての大脳新皮質が関わっている。","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-8.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-8.html"},{"title":"デジタルカメラ系","text":"講師： 相澤清晴 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 講義内容（相澤先生） 入力・カメラ系：デジタルカメラでの撮像過程 表色系 フィルタリング・画像復元 特徴抽出(Global features, Local features, Deep features) 画像符号化 デジタルカメラ系 ポイントは、 「空間方向の標本化」 と 「色信号の量子化」 人間の眼と電子の眼の ダイナミックレンジ は、 人の視覚：8桁（星空〜太陽光下） フィルム：4桁 CCD,CMOS：3桁 デジタルカメラ構造 CMOSセンサー・CCDセンサー CMOS(Complementary Metal Oxide Semiconductor・相補性金属酸化膜半導体)センサー は、 CCD(Charge-Coupled Device)センサー と同じように、光を感じて電気信号に変える半導体センサーである。 CMOSセンサーには 受光素子と電気信号を増幅するアンプがたくさん並んでついている ため、CCDセンサーに比べて低い電圧で動作し、読み出しを高速化することが容易である。 More: キヤノン：技術のご紹介 \\| サイエンスラボ CMOSセンサー デモザイキング 単板式（↔︎3板式） カメラは画素ごとに 「 R ・ G ・ B 」 のどの色を読み取るかが決まっており、その並び方を ベイヤー配列 と呼ぶ。 この場合、欠損した画素値を補完する必要がある。 このような画素ごとに色チャネルが異なる1枚のグレースケール画像（モザイク状のカラー画像）から1枚のRGBカラー画像を再構成する処理を （カラー）デモザイキング と呼ぶ。 周囲の色情報から線形補完する バイリニア補間 や、エッジの方向を判別して、滑らかに変化する方向のが措置だけを用いて補完する エッジセンシング補完 などがある。 3板式 ダイクロイックプリズム を用いて入射光を3つの波長帯域に分解して、それぞれを専用の撮像素子で撮像する。 最初の反射面は青の波長帯域だけを反射して残りの波長帯域は通過、次の反射面は赤の波長帯域だけを反射して緑の波長帯域を通過、といった感じ。 高画質なカラー画像を撮影できるが、レンズ光学系と撮像素子の間にダイクロイックプリズムを配置する必要があることと、3つの撮像素子が必要なことから、コストやカメラサイズの面では不利な場合もある。 放送や取材などのための業務用のカメラではこちらが使われる。 コントラストAF コントラストは、 「画像のヒストグラムの分布の広がり」 のこと。画素値の最大値を \\(I_{\\max}\\) 、最小値を \\(I_{\\min}\\) とすると、以下のような求め方がある。 $$\\begin{cases}\\begin{aligned}C_1 &= I_{\\max}-I_{\\min}\\\\C_2 &= \\left(I_{\\max}-I_{\\min}\\right)/\\left(I_{\\max}+I_{\\min}\\right)\\end{aligned}\\end{cases}$$ いずれの求め方でも画像中に1画素でも極端に大きな（小さな）画素が含まれると、画像全体から受ける印象は同じにも関わらずコントラストが異なってしまう。このため、 頻度が一定値よりも小さな画素値を考慮しない などの工夫がある。 コントラストAF(Auto Focus) は、撮像素子に映った映像をもとに、ピントレンズを動かしながら 明暗差（コントラスト） が大きなところを探してピントを合わせる方式。 撮像素子とAF用センサーを兼用できるのでカメラ本体の 小型化が可能 となるため、コンパクトデジカメで広く使われる方式である。 （スマホでも使われている。） レンズを動かして （フォーカスを動かしながら） AFエリアの輝度を把握しないといけないので、後述の位相差AF方式に比べて、ピント検出に時間がかかる 位相差AF 位相差AF は、レンズから入った光を2つに分けて専用のセンサーへ導き、結像した2つの画像の間隔からピントの方向と量を判断する方式。 コントラストAFに比べると、レンズを動かしながらピントを探る必要がないので 高速にピント合わせを行うことができる。 専用センサーとレンズから入った光を撮像素子と専用センサーへ分岐させる仕組みが必要となるために カメラ本体の小型化が難しい。 AE&AGC AE: Auto Exposure.自動露出。露出（絞り値とシャッター速度の組み合わせ）を自動で決定する機能のこと。 AGC: オートゲインコントロール(Auto Gain Control)。撮影場所が薄暗い場合などに、光を増幅し、明るい映像に調整する機能。この値を大きくすればするほど、より暗い場所を明るく撮影できるが、その分ノイズが増える。 画像処理 \\(\\gamma\\) 補正 デジタル画像を表示する際、それぞれに色情報の伝送を行いますが各機器には固有の発色特性があり、入力された色情報をそのまま表示することが出来ない。 このとき生じる誤差を \\(\\gamma\\) 特性 と呼び、画像を自然の色に近くなるよう輝度や彩度の誤差を修正する機能を \\(\\gamma\\) 補正 と呼ぶ。 AWB（オートホワイトバランス） 異なる照明下でも、白が白に写るような色の調整、赤と青の利得調整をすることが多い。 照明とカメラの温度関係によって、画像に 青みがかかったり 、 赤みがかかったり する。 白い対象を写し、白と見えるようにバランス調整を行う。 あらかじめ、白熱灯、蛍光灯、太陽光などの何種類かの補正係数を求めておき、切り替えて使う。 心理学の世界では 灰色世界仮説 というものもある。 非常に難しい。綺麗に解決できれば有名になれるXD AS（オートスラビライゼーション） 手ぶれ補正 揺れの検出： 映像〜動きベクトル センサ〜角速度ベクトル 揺れの補正： 映像の切り出し 可変頂角プリズム（光軸の変化） 撮像デバイス駆動 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-8.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-8.html"},{"title":"表色系","text":"色を定量的に表す体系を¬表色系(color specification system)¬と呼ぶ。 表色系 には、人間が知覚した色を記号や 色票 などで 定性的 に扱う¬顕色系(color appearance system)¬と、実験に基づいて色を心理物理量として 定量的 に扱う¬混色系(color mixing system)¬がある。 色空間 ¬加法混色(additive colour mixing)¬と¬減法混色(subtractive colour mixing)¬。 表色系： RGB(CIE-RGB) CIE-XYZ表色系 CIE-L*a*b* HSV(HSI)表色系 マンセル表色系 YCbCr 加法混色と減法混色 波長が約 400~800nm の¬電磁波(electromagnetic wave)¬を人間の眼に入力すると、 電磁波の波長によって定まる色 の光として知覚する。したがって、ある色の光を作る際には、その色に対応する波長の電磁波を用意すれば良いことになる。 しかし、互いに 独立した3つの色の光 （¬原刺激(reference color stimuli)¬）を混ぜることでも、任意の色を再現できるという経験則が知られている。これは、人間の眼の波長に対する感度の異なる3種類の¬錐体¬の存在で説明できると考えられている。 ここで、複数の色の光を混ぜ合わせることで別の色の光をつくることを¬混色(colour mixing)¬と呼ぶが、これには以下の2つの方法がある。 |#| 加法混色(additive colour mixing) | 減法混色(subtractive colour mixing) | |:-:|:-:|:-:| |画像| | | |混色方法|白いスクリーン上に異なる色の光を重ねて投影する。|白い紙の上で絵の具を混ぜ合わせる。または、色付きフィルタを通して白色光を見る。| |原色| 赤(red) ・ 緑(green) ・ 青(blue) | シアン(cyan) ・ マゼンタ(magenta) ・ 黄(yellow) | 表色系 撮影対象の色を測定する際に、3種類の原刺激を用意して 加法混色 し、色が一致した際に両者は¬等色(color match)¬したという。 $$\\mathbf{C} \\underset{=}{\\text{color match}} R\\mathbf{R} + G\\mathbf{G} + B\\mathbf{B}$$ 測定対象からの反射光 \\(\\mathbf{C}\\) は一般に¬連続した分光強度分布を持つ¬が、右辺の3種類の原色光の混色と区別できない。 この方法で対象の光 \\(\\mathbf{C}\\) を表現するとき、三刺激値を調整する前に、原刺激それ自体の大きさを決める必要がある。これは、白色光 \\(\\mathbf{W}\\) （これを¬基礎刺激¬と呼ぶ）に等色するような原刺激の強度を求め、それを単位量とすることで達成されるが、波長 \\(\\lambda\\) に依存する。よって、単位放射量を発行する仮装光 \\(\\mathbf{U}(\\lambda)\\) （等エネルギー白色光）を用いて、 $$\\mathbf{U}(\\lambda) = \\bar{r}(\\lambda)\\mathbf{R} + \\bar{g}(\\lambda)\\mathbf{G} + \\bar{b}(\\lambda)\\mathbf{B}$$ の式が成り立つ三値刺激の分布（ \\(\\bar{r}(\\lambda), \\bar{g}(\\lambda), \\bar{b}(\\lambda)\\) ）を考える。なお、これらを用いれば、先ほどの反射光 \\(\\mathbf{C}\\) の分光エネルギー分布 \\(L(\\lambda)\\) から、次のように三値刺激（ \\(R,G,B\\) ）を計算できる。 $$ \\begin{cases} \\begin{aligned} R &= \\int_VL(\\lambda)\\bar{r}(\\lambda)d\\lambda\\\\ G &= \\int_VL(\\lambda)\\bar{g}(\\lambda)d\\lambda\\\\ B &= \\int_VL(\\lambda)\\bar{b}(\\lambda)d\\lambda \\end{aligned} \\end{cases} $$ ただし、積分範囲 \\(V\\) は可視光の波長範囲を表す。この \\(\\bar{r}(\\lambda), \\bar{g}(\\lambda), \\bar{b}(\\lambda)\\) を¬等色関数(color matching function)¬と呼ぶ。つまり、 原刺激 \\(\\mathbf{R},\\mathbf{G},\\mathbf{B}\\) 基礎刺激 \\(\\mathbf{W}\\) に等色する原刺激の強度 原刺激に対応した等色関数 \\(\\bar{r}(\\lambda), \\bar{g}(\\lambda), \\bar{b}(\\lambda)\\) がわかれば、任意の分光強度分布を持つ光の色彩を3つの数値で表すことができる。 CIE-RGB 原刺激を（R:700.0nm, G:546.1nm, B:435.8nm）として上記の等色関数を用いたもの。等色関数には一部に負の値の領域があるが、この領域では、左辺の反射光 \\(\\mathbf{C}\\) に一定量の原刺激を加えることで等色させる。 CIE-XYZ CIE-XYZ 表色系は、 CIE-RGB 表式系と同時に採用された標準表色系である。 CIE-RGB 表色系の等色関数は、部分的に負の値があり、扱いにくかったので、¬等色関数が非負となる¬ように仮想的な原刺激を設定し、¬CIE-RGB表式系の等色関数から線形変換によって¬求めた等色関数 \\(\\bar{x}(\\lambda),\\bar{y}(\\lambda),\\bar{z}(\\lambda)\\) を用いて三値刺激 \\(X,Y,Z\\) を求めて色を定量的に表現する。 $$ \\left[\\begin{array}{l}{X} \\\\ {Y} \\\\ {Z}\\end{array}\\right]=\\left[\\begin{array}{ccc}{2.7689} & {1.7518} & {1.1302} \\\\ {1.0000} & {4.5907} & {0.0601} \\\\ {0} & {0.0565} & {5.5943}\\end{array}\\right]\\left[\\begin{array}{l}{R} \\\\ {G} \\\\ {B}\\end{array}\\right] $$ ここで、 明るさを無視する と、任意の色は¬色度座標(trichromatic coodinates)¬で表現できる。さらに、 \\(X+Y+Z=1\\) の制約を用いてこれを平面表示することも可能である。 上図の \\(xy\\) 色度図中で釣鐘状の曲線を¬スペクトル軌跡(spectrum locus)¬と呼び、軌跡に沿って最も純度の高い単色光が並ぶ。人間が知覚できる全ての色は、380~780nmの点に至るスペクトル軌跡と、その両端を結ぶ直線（¬純紫軌跡(purple lines)¬）で囲まれた領域内にある。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-9.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-9.html"},{"title":"生命情報表現論 第1回","text":"講師： 角田達彦 講義概要 # タイトル 内容 コマ 1 生命情報表現論イントロダクション 生命情報の表現法と解析法・推論法の研究開発がなぜ必要か？ 1コマ目 2 人工知能研究と知識表現 関係代数とSQL、述語論理、フレーム、NoSQL、深層学習とその表現 3 非構造化知識の処理 テキストマイニング、電子カルテ、医療情報 2コマ目 脳と行動の化学的制御 4 ゲノム配列、ゲノムアノテーションと遺伝子進化 ゲノム配列データの表現と解析の概要、系統樹、ゲノムアノテーション GWAS、ゲノム多様性解析、eQTL、polygenic risk score 3コマ目 パラログ・オルソログ・インパラログ・次世代シークエンサー技術とデータの扱い がんゲノム・オミクス・がん免疫の解析 5 グループ議論とプレゼンテーション 「述語論理」を担当。 4コマ目 6 生命科学におけるネットワークデータの表現法と知識抽出 相互作用、遺伝子共発現、パスウェイ、システム生物学、分子から細胞へ 5コマ目 7 データの共有と結合 遺伝子機能アノテーション、オントロジー、統合解析 6コマ目 オープンデータ、オープンアクセス、CCライセンス 8 グループ議論とプレゼンテーション 「システムバイオロジーで何ができるか」 7コマ目 生命情報表現論イントロダクション 〜生命情報の表現法と解析法・推論法の研究開発がなぜ必要か？〜 生命現象の裏にある普遍法則を知りたい。 （還元論） ： 例）生物物理、分子生物学 全体を要素と要素間の関係に 分解 し、各要素を さらに分解する ことを繰り返す。 → 要素と要素間の関係で書き尽くしたい。 現象と説明に矛盾があるときは、さらなる要素との関係を探る。 これまでの多くの論文としての蓄積。 これまでの知識を再利用したい。 推論や予測をしたい。 （全体論） 要素間の関係を再統合し、全体としての挙動を解明し推論する。 因果・時間発展推論。 予測を行い、観測と合わない部分から科学的発見につなげる。 相互作用を扱う。 以上から、記述法と推論方法が必要。 計算機にやらせたい。（計算機が推論できる＝現象をよく理解した。） 計算機による科学的発見への期待。 しかし、生命現象はとんでもなく複雑である。 扱う現象の膨大さ。 階層性：分子、細胞、組織、臓器、全身、環境 個体差：個人差、集団（人種）差、種差 環境による影響：栄養、刺激（煙草、紫外線…）、運動… ストキャスティクス（≒確率的）：ゆらぎ。進化をドライブする原動力でもある。 人間の直感を超えている（ものも扱いたい）。 複雑すぎて追いきれない。予想がつかない。 ただし、根本原理が捉えられれば良い。 システムバイオロジー（例：鳥から飛行機の原理） 計算機で適切なレベルで再現・推論したい（機能・原理vs.複雑な現象、個々の分子・細胞など） 情報科学の、データ構造とアルゴリズムの関係 適切なデータの表現方法とデータのメモリ上の置き方。 アルゴリズム：データのアクセス、計算、書き込み チューリングマシンから深層ニューラルネット・深層学習まで まとめ ゲノム研究の進展により生命科学は仮説駆動型からデータ駆動型の科学に変貌しつつある。このような科学を推進するには、多種多様で複雑なデータや知識を計算機で うまく 扱えるようにすることが不可欠である。 〜計算機に推論させるのに必要十分な表現方法は何か？〜 人工知能研究と知識表現 〜関係代数とSQL、述語論理、フレーム、NoSQL、深層学習とその表現〜 いきなり生命現象の表現方法と推論方法を考え始めても、対象が複雑すぎて発散する。そこで、コンピュータサイエンスで開発された種々の知識表現法と推論をおさらいしてみる。 関係代数（関係モデル）とSQL 関係データベース（リレーショナルデータベース） において、集合論と一階述語論理に基づいて、関係（リレーション、表、テーブル）として表現されたデータを扱う、コンピュータ科学における 代数的な演算の体系 関係代数：和、差、交わり (交差) 、直積、制限 (選択) 、射影、結合、商の8種類が言及されることが多い。 （ただし属性名変更や拡張、要約などこの他の演算子も考案されている。） 関係論理：関係代数と等価。関係代数で表現された式は、等価な関係論理の式で表現することができる。 関係代数の演算子は、 閉包性(closure) をもつ。関係において閉包である。つまり次のことがいえる。 関係代数は、1つもしくは複数の関係を基にして演算を行う。 関係代数で演算を行って返される結果は、必ず関係である。 関係代数演算の結果として返された関係を基にして、さらに関係代数で演算することができる。入れ子になった関係代数演算を行うことができる。 関係代数を実装した データベース言語 としては、SQLが挙げられる。 述語論理 述語論理(predicate logic) とは、数理論理学における記号的形式体系群を指す用語で、 一階述語論理 、二階述語論理、多ソート論理、無限論理などが含まれる。 これらの形式体系は 命題論理(propositional logic) を拡張したものであり、論理式に含まれる変数を 量化 できるという特徴を持つ。 各アルファベットは 命題変数 を表す。これらは 原子式 である。 原始命題の真偽しか表すことができない。 結合子（または論理演算子）を表す記号は（一般的に） 「 \\(\\lnot, \\land, \\lor, \\rightarrow\\) 」 のみ。 一階述語論理(first-order predicate logic) とは、個体の 量化 のみを許す 述語論理(predicate logic) である。 全称量化記号(universal quantifier) \\(\\forall\\) や、 存在量化記号 (existential quantifier) \\(\\exist\\) を用いることができる。 オブジェクトの性質(property)や関係(relation)、オブジェクト間の関数(function)を命題として表現できる。 これにより、命題論理では導くことのできなかった 機械的な推論 が可能になる。 プロダクションシステム if-then 形式（「条件ー行動」）プロダクションルールを用い、プロダクションルールと外部から与えられた事実を元に、推論・問題解決を行うシステム。 外部世界や推論によって得られた事実を蓄積する場所を と呼ぶ。 プロダクションルールを蓄積しておく場所を と呼ぶ。 既知の事実とプロダクションルールから推論を行う機構を と呼ぶ。 フレーム 人工知能の大家、M.Minskyにより提唱された (1975年) 宣言的知識に関する知識表現 事柄を表すフレームは以下の３つの値からなる。 事柄の 名称 事柄の 属性 事柄の 属性の値 上位概念の持つ属性は、例外を指定しない限り、下位概念に継承される。 NoSQL 膨大、速い、多様というビッグデータに対応するために考え出された技術。 定義は明確化されていない。 様々なデータモデルがある キーバリュー型： キーと値の組み合わせ、それだけからなる。 テーブルとか関係性とか面倒なものは定義しない。 データが増えると縦に追加される。 カラム指向型 キーバリュー型に横方向のデータ追加も許す。 ドキュメント指向型 ドキュメント単位でデータを管理する。 グラフ型 データ間の関係も管理できる。 ノード、リレーションシップ、プロパティ ややこしい関係による検索もできる。 深層学習とその表現 深層方向 2層はパーセプトロン 3層以上はニューラルネットワーク 視神経を参考にした 各層から次の層へのコネクション 特徴抽出 ローカルなコネクション：階層構造表現とローカルなパタンの表現 DeepInsightの紹介： Issue.3: DeepInsight にまとめてある。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生命情報表現論","url":"https://iwasakishuto.github.io/University/3A/生命情報表現論-1.html","loc":"https://iwasakishuto.github.io/University/3A/生命情報表現論-1.html"},{"title":"レポート課題6(11/14出題)","text":"VMaIhj1Y4cYtVgNk+3i3gQ==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report6.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report6.html"},{"title":"確率と統計(2)確率分布の例","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 In [1]: import numpy as np import matplotlib.pyplot as plt from scipy import stats In [2]: seed = 0 N = 10000 講義概要 離散型確率分布の例 一様分布 ：さいころ投げ 二項分布 ：コイン投げ、復元抽出 超幾何分布 ：非復元抽出 ポアソン分布 ：二項分布の極限、ポアソン分布の少数の法則 連続型確率分布の例 正規分布 ：最も重要な連続型確率分布 ガンマ分布 ：様々な形状を表現可能 ベータ分布 ：様々な形状を表現可能 離散型の確率変数と確率関数 離散型(discrete type)確率変数 ：可算集合の中の値をとる確率変数 離散型の確率変数の確率分布＝ 「確率変数がそれぞれの値をとる確率」 $$P(X=x) = f(x)$$ ここで、$f(x)$ は 確率質量関数(probability mass function) と呼ばれるもので、以下の性質を満たす。 $$f(x)\\geq0,\\quad\\sum_xf(x) = 1$$ 積率母（モーメント）関数 は、以下で表される。 $$M_X(t) = \\mathbb{E}\\left[e&#94;{tX}\\right]$$ 一様分布 名前 値 確率質量関数 $$f(x) = \\frac{1}{N}\\text{ for $x=1,2,\\ldots,N$}$$ 平均 $$\\mathbb{E}(X) = \\frac{N+1}{2}$$ 分散 $$\\mathbb{V}(X) = \\frac{N&#94;2-1}{12}$$ In [3]: DiceEyes = np . arange ( 1 , 7 ) In [4]: plt . hist ( DiceEyes , bins = 6 , density = True , color = \"blue\" ) plt . ylim ( 0 , 1 ), plt . title ( \"Discrete Uniform Distribution\" ) plt . show () 二項分布 ベルヌーイ施行 に対して、実験が成功する回数 $X$ の確率分布 $x$ 回成功して $n-x$ 回失敗：$p&#94;x\\left(1-p\\right)&#94;{n-x}$ 順番を入れ替えた時の組み合わせの数：$_nC_x$ 名前 値 積率母（モーメント）関数 $$M_X(t) = \\left(pe&#94;t + (1-p)\\right)&#94;n$$ 確率質量関数 $$f(x) = _nC_xp&#94;x\\left(1-p\\right)&#94;{n-x}$$ 期待値 $$\\mathbb{E}(X) = np$$ 分散 $$\\mathbb{V}(X) = np(1-p)$$ In [5]: n = 10 In [6]: def plotBinomial ( p , n , N , ax = None , seed = None ): if ax == None : fig , ax = plt . subplots () counts = np . sum ( np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = ( n , N )) < p , axis = 0 ) ax . hist ( counts , density = True , color = \"blue\" ) ax . set_xlim ( 0 , n ), ax . set_ylim ( 0 , 1 ) ax . set_xlabel ( \"$x$\" , fontsize = 14 ), ax . set_ylabel ( \"Probability\" , fontsize = 14 ), ax . set_title ( f \"Binomial Distribution $p= { p } $\" , fontsize = 14 ), ax . grid () return ax In [7]: fig = plt . figure ( figsize = ( 14 , 4 )) for i , p in enumerate ([ 0.1 , 0.5 , 0.9 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) plotBinomial ( p , n , N , ax = ax , seed = seed ) plt . tight_layout () plt . show () 超幾何分布 $\\mathrm{A}$ が $M$ 個、$\\mathrm{B}$ が $N-M$ 個の合計 $N$ 個の玉が入っている袋から無作為に玉を $n$ 個取り出す。 非復元抽出(sampling without emplacement) したときに、$\\mathrm{A}$ が出てくる個数 $X$ の分布 確率の和や積率母関数などの統計量が 超幾何級数 によって表現されることが名前の由来。 名前 値 $X$ の最大値 $$\\min\\left\\{n,M\\right\\}$$ $X$ の最小値 $$\\max\\left\\{0,n-\\left(N-M\\right)\\right\\}$$ 確率質量関数 $$f(x) = \\frac{_MC_x\\times _{N-M}C_{n-x}}{_NC_n}$$ 期待値 $$\\mathbb{E}(X) = n\\frac{M}{N}$$ 分散 $$\\mathbb{V}(X) = n\\frac{M(N-M)}{N&#94;2}\\frac{N-n}{N-1}$$ In [8]: def plotHypergeometric ( n_tot , n_a , n , N , ax = None , seed = None ): if ax == None : fig , ax = plt . subplots () counts = np . asarray ([ np . count_nonzero ( np . random . choice ( n_tot , size = ( n ), replace = False ) < n_a ) for _ in range ( N )]) ax . hist ( counts , density = True , color = \"blue\" ) ax . set_xlim ( 0 , n ), ax . set_ylim ( 0 , 1 ) ax . set_xlabel ( \"$x$\" , fontsize = 14 ), ax . set_ylabel ( \"Probability\" , fontsize = 14 ), ax . set_title ( \"Hypergenometric Distribution \\n \" + f \"$N_A= { n_a } ,N_B= { n_tot - n_a } $\" , fontsize = 14 ), ax . grid () return ax In [9]: fig = plt . figure ( figsize = ( 14 , 4 )) for i , M in enumerate ([ 10 , 50 , 90 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plotHypergeometric ( n_tot = 100 , n_a = M , n = 10 , N = N , ax = ax , seed = seed ) plt . tight_layout () plt . show () ※ $N$ が十分に大きいとき、玉を袋に戻しても戻さなくても大して変わらない。 ポアソン分布 成功確率が低い事象を表現するのに長けている。 二項分布で、成功確率 $p$ が非常に小さい場合めったに成功しないが、いくら $p$ が小さくても、試行回数 $n$ が非常に大きい場合、ある程度の回数は成功する。 この時、例えば $p=0.00003,n=100000$ だった場合、期待値 $\\mathbb{E}(X) = np = 3$ となり、$x=3$ の生起確率はそれほど小さくはなさそう。 しかし、その確率の計算は非常に大変。 $$f(3) = _{100000}C_3\\left(0.00003\\right)&#94;3\\left(0.99997\\right)&#94;{99997}$$ そこで、 ポアソンの少数の法則(Poisson's law of small numbers) を用いる。$p=\\lambda/n$ に対して、 $$_nC_xp&#94;x\\left(1-p\\right)&#94;{n-x}\\longrightarrow\\frac{e&#94;{-\\lambda}\\lambda&#94;x}{x!}\\quad\\left(n\\rightarrow\\infty\\right)$$ In [10]: fig = plt . figure ( figsize = ( 14 , 4 )) for i , lam in enumerate ([ 1 , 10 , 25 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax . hist ( np . random . RandomState ( seed ) . poisson ( lam = lam , size = N * 100 ), density = True , color = \"blue\" ) ax . set_xlim ( 0 , 50 ), ax . set_ylim ( 0 , 1 ), ax . set_title ( f \"Poisson Distribution $\\lambda= { lam } $\" ), ax . grid () plt . tight_layout () plt . show () 【証明】 $$ \\begin{aligned} \\lim_{n\\rightarrow\\infty}&\\ _nC_x\\left(\\frac{\\lambda}{n}\\right)&#94;x\\left(1-\\frac{\\lambda}{n}\\right)&#94;{n-x}\\\\ &=\\lim_{n\\rightarrow\\infty}\\frac{n!}{x!\\left(n-x\\right)!}\\left(\\frac{\\lambda}{n}\\right)&#94;x\\left(1-\\frac{\\lambda}{n}\\right)&#94;{n-x}\\\\ &= \\frac{\\lambda&#94;x}{x!}\\lim_{n\\rightarrow\\infty}\\frac{n!}{\\left(n-x\\right)!n&#94;x}\\left(1-\\frac{\\lambda}{n}\\right)&#94;{n-x}\\\\ &=\\frac{\\lambda&#94;x}{x!}\\lim_{n\\rightarrow\\infty}\\left(\\frac{n}{n}\\times\\frac{n-1}{n}\\times\\cdots\\times\\frac{n-x+1}{n}\\right)\\left(1-\\frac{\\lambda}{n}\\right)&#94;{n}\\left(1-\\frac{\\lambda}{n}\\right)&#94;{-x}\\\\ &= \\frac{\\lambda&#94;x}{x!}\\cdot1\\cdot e&#94;{-\\lambda}\\cdot 1 \\quad\\left(\\because e=\\lim_{t\\rightarrow0}\\left(1+t\\right)&#94;{\\frac{1}{t}}\\right)\\\\ &= \\frac{e&#94;{-\\lambda}\\lambda&#94;x}{x!} \\end{aligned} $$ 名前 値 積率母関数 $$M_X(t) = \\mathbb{E}\\left[e&#94;{tX}\\right]=\\exp\\left\\{\\lambda\\left(e&#94;t-1\\right)\\right\\}$$ 確率質量関数 $$f(x) = \\frac{e&#94;{-\\lambda}\\lambda&#94;x}{x!}$$ 期待値 $$\\mathbb{E}(X) =\\lambda$$ 分散 $$\\mathbb{V}(X) = \\lambda$$ 連続型の確率変数と確率密度関数 連続型(continuous type)確率変数 ：連続値をとる確率変数 連続型の確率変数の確率分布＝ 「確率変数が $a$ 以上 $b$ 以下の値をとる確率」 $$P(a\\leq X\\leq b) = \\int_a&#94;b f(x)dx$$ ここで、$f(x)$ は 確率密度関数(probability mass function) と呼ばれるもので、以下の性質を満たす。 $$f(x)\\geq0,\\quad\\int f(x)dx = 1$$ ※ 連続型の確率変数がある値 $a$ をとる確率は、$0$ $$P(X=a) = \\int_a&#94;a f(x)dx = 0$$ 正規分布 名前 値 積率母関数 $$M_X(t) = \\mathbb{E}\\left[e&#94;{tX}\\right]=\\exp\\left(\\mu t + \\frac{\\sigma&#94;2t&#94;2}{2}\\right)$$ 確率密度関数 $$f(x) = \\frac{1}{\\sqrt{2\\pi\\sigma&#94;2}}\\exp\\left(-\\frac{(x-\\mu)&#94;2}{2\\sigma&#94;2}\\right)\\text{ for $x\\in(-\\infty,\\infty)$}$$ 期待値 $$\\mathbb{E}(X) =\\mu$$ 分散 $$\\mathbb{V}(X) = \\sigma&#94;2$$ In [11]: def NormalProb ( ax , mu , sigma ): \"\"\" Only [µ-3σ, µ+3σ] \"\"\" X = np . arange ( mu - 3.5 * sigma , mu + 3.5 * sigma , sigma / 50 ) Y = stats . norm . pdf ( X , mu , sigma ) ax . plot ( X , Y , color = \"red\" ) return ax In [12]: fig = plt . figure ( figsize = ( 14 , 4 )) for i , sigma in enumerate ([ 1 , 2 , 3 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = NormalProb ( ax , 0 , sigma ) ax . set_xlim ( - 8 , 8 ), ax . set_ylim ( 0 , 0.5 ), ax . set_title ( f \"Normal Distribution $\\sigma= { sigma } $\" ), ax . grid () plt . tight_layout () plt . show () 2次元正規分布 各要素が独立に標準正規分布に従う $\\mathbf{Z}$ を以下用いて $\\mathbf{W} = \\mathbf{TZ} + \\boldsymbol{\\mu}$ と変換する。 $2\\times2$ 正則行列 $T$ 2次元ベクトル $\\boldsymbol{\\mu}$ $$ \\begin{aligned} l(\\mathbf{w}) \\propto f(\\mathbf{z}) &= f\\left(\\mathbf{T}&#94;{-1}\\left(\\mathbf{w}-\\boldsymbol{\\mu}\\right)\\right)\\\\ &= \\frac{1}{2\\pi}\\exp\\left(-\\frac{1}{2}\\left(\\mathbf{w}-\\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{w}-\\boldsymbol{\\mu}\\right)\\right)\\\\ \\therefore l(\\mathbf{w}) &= \\frac{1}{2\\pi|\\boldsymbol{\\Sigma}|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(\\mathbf{w}-\\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{w}-\\boldsymbol{\\mu}\\right)\\right) \\end{aligned} $$ ガンマ分布 名前 値 積率母関数 $$M_X(t) = \\mathbb{E}\\left[e&#94;{tX}\\right]=\\left(\\frac{\\lambda}{\\lambda-t}\\right)&#94;{\\alpha}$$ 確率密度関数 $$f(x) = \\begin{cases}\\begin{aligned}&\\frac{\\lambda&#94;{\\alpha}}{\\Gamma(\\alpha)}x&#94;{\\alpha-1}e&#94;{-\\lambda x} & (0\\leq x)\\\\&0 & (0>x)\\end{aligned}\\end{cases}$$ 期待値 $$\\mathbb{E}(X) =\\alpha/\\lambda$$ 分散 $$\\mathbb{V}(X) = \\alpha/\\lambda&#94;2$$ なお、ガンマ関数は以下の性質を持つ。 $$ \\begin{aligned} \\Gamma(\\alpha) &= \\int_{0}&#94;{\\infty}x&#94;{\\alpha-1}e&#94;{-x}dx > 0\\\\ \\Gamma(\\alpha) &= (\\alpha-1)! \\end{aligned} $$ In [13]: fig = plt . figure ( figsize = ( 14 , 4 )) x = np . linspace ( 0 , 8 , N ) for i , alpha in enumerate ([ 1 , 2 , 3 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax . plot ( x , stats . gamma . pdf ( x , a = alpha ), color = \"red\" ) ax . set_xlim ( 0 , 8 ), ax . set_ylim ( 0 , 0.5 ), ax . set_title ( \"Gamma Distribution \\n \" + f \"$\\lambda=1, alpha= { alpha } $\" , fontsize = 14 ), ax . grid () plt . tight_layout () plt . show () 指数分布 $\\alpha=1$ のガンマ分布に対応 $$f(x) = \\begin{cases}\\begin{aligned} &\\frac{\\lambda&#94;{\\alpha}}{\\Gamma(\\alpha)}x&#94;{\\alpha-1}e&#94;{-\\lambda x} & (0\\leq x)\\\\ &0 & (0>x) \\end{aligned}\\end{cases}$$ 単位時間に平均 $\\lambda$ 回起こる事象が初めて起こるまでの時間 $X$ の分布 （ポアソン分布：単位時間に平均 $\\lambda$ 回起こる事象が単位時間中に起こる回数 $Y$ の分布） カイ二乗分布 確率変数 $X_i$ が独立に標準正規分布 $\\mathcal{N}(0,1)$ に従うとき、 $$\\chi&#94;2 = \\sum_{i=1}&#94;nX_i&#94;2$$ はガンマ分布 $\\mathrm{Ga}(n/2,1/2)$ に従う。 このガンマ分布 $\\mathrm{Ga}(n/2,1/2)$ を特に、 自由度 $n$ の $\\chi&#94;2$ 分布(chi-squared distribution) と呼ぶ。 $$f(x) = \\begin{cases}\\begin{aligned} &\\frac{\\left(\\frac{1}{2}\\right)&#94;{\\frac{n}{2}}}{\\Gamma\\left(\\frac{n}{2}\\right)}x&#94;{\\frac{n}{2}-1}e&#94;{-\\frac{1}{2}x} & (0\\leq x)\\\\ &0 & (0>x) \\end{aligned}\\end{cases}$$ ベータ分布 名前 値 確率密度関数 $$f(x) = \\begin{cases}\\begin{aligned}&\\frac{x&#94;{\\alpha-1}\\left(1-x\\right)&#94;{\\beta-1}}{B(\\alpha,\\beta)} & (1>x>0)\\\\&0 & (\\text{otherwise.})\\end{aligned}\\end{cases}$$ 期待値 $$\\mathbb{E}(X) =\\frac{\\alpha}{\\alpha+\\beta}$$ 分散 $$\\mathbb{V}(X) = \\frac{\\alpha\\beta}{\\left(\\alpha+\\beta\\right)&#94;2\\left(\\alpha+\\beta+1\\right)}$$ なお、 ベータ関数 $B(\\alpha,\\beta)$ は以下で表される。 $$B(\\alpha,\\beta) = \\int_0&#94;1x&#94;{\\alpha-1}(1-x)&#94;{\\beta-1}dx = \\frac{\\Gamma(\\alpha)\\Gamma(\\beta)}{\\Gamma(\\alpha+\\beta)}$$ In [14]: fig = plt . figure ( figsize = ( 14 , 12 )) x = np . linspace ( 0 , 1 , N ) for i , alpha in enumerate ([ 0.5 , 1 , 3 , 5 ]): for j , beta in enumerate ([ 0.5 , 1 , 3 , 5 ]): ax = fig . add_subplot ( 4 , 4 , i * 4 + j + 1 ) ax . plot ( x , stats . beta . pdf ( x , alpha , beta ), color = \"red\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( 0 , 3 ), ax . set_title ( \"Beta Distribution \\n \" + f \"$alpha= { alpha } , beta= { beta } $\" , fontsize = 14 ), ax . grid () plt . tight_layout () plt . show () $\\alpha=\\beta=1$ のとき、特に 連続一様分布(uniform distribution of continuous type) と呼び、$U(0,1)$ で表す。 $n$ 個の標本 $X_1,X_2,\\ldots,X_n$ があるとき、それらのうち $k$ 番目に小さい標本を 「第 $k$ 順序統計量」 と呼ぶ。 最小値：第 $1$ 順序統計量 最大値：第 $n$ 順序統計量 中央値：第 $(n+1)/2$ 順序統計量 $X_i$ がそれぞれ独立に $[0,1]$ 上の一様分布に従うとき、その第 $k$ 順序統計量は「ベータ分布 $Be\\left(k,n-k+1\\right)$」に従う。 まとめ 離散型確率分布の例 一様分布 ：さいころ投げ 二項分布 ：コイン投げ、復元抽出 超幾何分布 ：非復元抽出 ポアソン分布 ：二項分布の極限、ポアソン分布の少数の法則 連続型確率分布の例 正規分布 ：最も重要な連続型確率分布 ガンマ分布 ：様々な形状を表現可能 ベータ分布 ：様々な形状を表現可能 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-6.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-6.html"},{"title":"分子生命科学Ⅲ 第7回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 運動系(1) ¬運動系(motor system)¬は、約700個全ての筋とそれらを支配するニューロンによって構成されている。 脊髄による運動制御 \"Running around like a chicken with its head cut off\" という表現があるように、複雑な行動パターンが脳の関与なしでも引き起こされることは観察されている。 脊髄の中にはかなりの数の神経回路網があり、（特に歩行に関連した反復的な） 行動の制御 を行なっていることから、現代の見解では、 「脊髄には調和の取れた運動の発生を行う@運動プログラム(motor program)@があり、この@運動プログラム(motor program)@が脳から下行する命令によって呼び起こされ、実行され、そして修正される」 というものである。このように運動制御は、 脊髄による筋の収縮命令と個々の筋収縮を調和のとれたものにする制御機構 脳による脊髄内の@運動プログラム(motor program)@への命令と制御機構 の2つに分けることができる。 筋の種類 @横紋筋(striated muscle)@：収縮性の筋原線維の反復構造（サルコメア）を持ち、 横紋 と呼ばれる縞模様が観察される。 @骨格筋(skeletal muscle)@： 身体の大部分の筋を構成し、関節の周囲の骨や後頭部にある眼球を動かす。 体性運動神経に支配され、運動や姿勢の保持に働く。 体幹の運動を担う筋であり、姿勢の維持に重要である@体幹筋(axial muscle)@・肩や肘、骨盤、膝を動かす筋であり、歩行運動に重要である@近位筋(proximal muscle)@ / @肢帯筋(girdle muscle)@・手首や足首から先、そして手足の指を動かす筋であり、物を巧みに取り扱うのに重要となる@遠位筋(distal muscle)@など、様々な種類がある。 @心筋(cardiac muscle)@： 心臓の筋で神経支配がなくても律動的に収縮している。 自律神経系により心拍の上昇や低下をもたらす。 @平滑筋(smooth muscle)@： 筋原線維に横紋を持たない@平滑筋(smooth muscle)@細胞からなる。 消化管や動脈壁にあり、自律神経系の神経支配を受けている。 蠕動 （ぜんどう） 運動（腸管内の物の移動）や血圧の調節等に関与している。 下位運動ニューロン 体性筋（@骨格筋(skeletal muscle)@）線維は、脊髄の前角にある体性運動ニューロンにより、支配されている。このニューロンは、¬「下位運動ニューロン(lower motor neuron)」¬と呼ばれ、脊髄へ信号を送る脳の高次の¬「上位運動ニューロン(upper motor neuron)」¬と区別されている。 上位運動ニューロン(upper motor neuron)は、 グルタミン酸作動性 で、単シナプス性もしくは介在ニューロンを介して多シナプス性にグルタミン酸作動性である。 下位運動ニューロン(lower motor neuron)は、 コリン作動性 で、下位のみが筋収縮を引き起こす。 脊髄の下位運動ニューロンは2つに大別される。@α運動ニューロン(α-motor neuron)@と@γ運動ニューロン(γ-motor neuron)@である。@α運動ニューロン(α-motor neuron)@は、支配する筋を収縮させて、力を発生させる。 1個の@α運動ニューロン(α-motor neuron)@とそれに支配される全ての筋線維が集まって運動制御の単位を構成する。これを、@運動単位(motor unit)@と呼ぶ。また、単一の筋（ex.上腕二頭筋）を支配する@α運動ニューロン(α-motor neuron)@の全体を@運動ニューロンプール(motor neuron pool)@ 運動する際、筋は適切な強さの力を出すことが重要である。神経系が筋の収縮力の制御を行うには、2つの方法がある。 |個々の運動ニューロンの発火頻度による筋の収縮力の制御|協同作用を持つ運動単位数の増加による筋の収縮力の制御| |:-|:-| |@α運動ニューロン(α-motor neuron)@の単一の活動電位は筋線維に単収縮(twitch)を起こす。入力する活動電位の数と頻度に従い、単収縮は加重し、持続的な筋肉収縮(tetanus)になる。|活性化した@運動単位(motor unit)@の増加により新たに起こる筋張力の程度は、@運動単位(motor unit)@に含まれている筋線維の数（神経支配比）に依存する。多くの筋では、神経支配比の小さな運動単位（小さな@α運動ニューロン(α-motor neuron)@を持つ）から活性化が起こる¬（サイズの原理）¬。この機構により、軽い負荷の時の方が、重い負荷の時よりも細かい運動制御が可能である。| 運動単位(motor unit)の種類 1つの筋は複数の筋線維によって構成されるが、1つの@運動単位(motor unit)@は一種類の筋線維によって構成される。 遅い@運動単位(motor unit)@（slow: S型）： 小型の@α運動ニューロン(α-motor neuron)@により支配される発生張力の小さい@運動単位(motor unit)@は赤色の筋線維（赤筋）で構成されている。赤筋は多くのミトコンドリアと酸化的エネルギー代謝を行う酵素を持ち（Ⅰ型：有酸素系、TCA回路）、収縮がゆっくりだが、疲労を伴わず長時間収縮が可能である。脚の抗重力筋など。 速い@運動単位(motor unit)@（fast fatigable: FF型）： 大型の@α運動ニューロン(α-motor neuron)@により支配される発生張力の大きい@運動単位(motor unit)@は白色の筋線維（白筋）で構成されている。白筋はミトコンドリアをわずかにしか持たず、無酸素的な代謝に依存している。（ⅡB型：無酸素系、解糖系）収縮が速く力が強いがすぐに疲れる。ヒトでは、腕の筋など。 速く疲れにくい@運動単位(motor unit)@（fast fatigue-resistant: FR型）： 上記の2つの筋の中間的な@運動単位(motor unit)@。大型の@α運動ニューロン(α-motor neuron)@により支配され、中間の発生張力を持つ白筋（ⅡA型：有酸素系+無酸素系）で構成されている。速い@運動単位(motor unit)@ほど速くないが、遅い@運動単位(motor unit)@の2倍の力を持ち、持久力も中間である。 興奮-収縮連関 @α運動ニューロン(α-motor neuron)@の軸索末端から@アセチルコリン(ACh)@が放出されることで筋収縮が始まるが、ニコチン性@アセチルコリン(ACh)@作動性受容体の活性化の結果として、シナプス後膜に大きな@興奮性シナプス後電位(excitatory postsynaptic potential;EPSP)@が引き起こされる。 筋細胞の細胞膜には電位依存性 \\(\\mathrm{Na}&#94;{+}\\) チャネルがあるため、この@興奮性シナプス後電位(excitatory postsynaptic potential;EPSP)@は筋線維に活動電位を発生させるのに十分である。発生した活動電位は筋線維内にある細胞小器官からの \\(\\mathrm{Ca}&#94;{2+}\\) 放出の引き金となり、放出された \\(\\mathrm{Ca}&#94;{2+}\\) は筋線維を収縮させる。また、 \\(\\mathrm{Ca}&#94;{2+}\\) の細胞小器官への取り込みにより \\(\\mathrm{Ca}&#94;{2+}\\) 濃度が低下すると、筋線維の弛緩が起こる。 筋線維（筋細胞）の構造 画像 説明 筋線維は胎生期の初期に、中胚葉由来の筋芽細胞の融合により形成される。融合の結果、筋細胞は@多核(multinucleated)@であり、細胞は長くなる（線維）。 筋線維は、@筋細胞膜(sarcolemma)@と呼ばれる興奮性膜で包まれている。 筋線維の中にある多くの円柱構造は@筋原線維(myofibril)@と呼ばれ、Ca2+を貯蔵する大きな細胞内の復路である@筋小胞体(sarcoplasmic reticulum)@に取り囲まれている。 @T菅(T tube, T;transverse)@（横行小管）により、活動電位は筋細胞膜から深部に伝わる。 なお、筋肉は収縮弛緩を繰り返すので、@筋細胞膜(sarcolemma)@は大きな力に耐えなければならない。そこで、筋細胞膜タンパク質は、 細胞内では@ジストロフィン(dystrophin)@を介してアクチンと 細胞外では細胞外マトリックスの@ラミニン(laminin)@と 結合している。これらはそれぞれ網状構造を作っており、この網状構造を細胞膜タンパク質@ジストログリカン(dystroglycan)@が固定している。その破綻は@筋ジストロフィー(muscular dystrophy)@などの疾患に繋がる。これは、筋肉が萎縮し、次第に筋力が低下していく病気である。最も頻度が高いのはX染色体上のdystrophin遺伝子の欠損によるDuchenne型である。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-7.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-7.html"},{"title":"3次元空間情報の取得と処理","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 大きく分けて2種類ある。 アクティブ法 ：光やレーザーなど、エネルギーを当てて反応を観測。 パッシブ法 ：カメラなど、エネルギーを放出しないもののみを使う。 アクティブ法 手法 説明 特徴 time-of-flight法(ToF) 光を照射して戻るまでの時間から算出。直接は計算できないので、変調をかけて位相差等から計算する。 （計算可能な範囲が指定されるのはこの為。） 高精度だが、時間がかかる。そのため、動物体に弱い。 XBox2(Microsoft)のKinect2というコントローラや自動運転用のLIDARなどで使われている。 スリット光照射法 線状のレーザー光等を照射し、線の歪みから計算する。（→ エポピーラ幾何学 p.312 を参照） Structured light 法 細かさの異なる市松模様（チェッカーボードパターン）や、パターンが既知のランダムドット等を照射し、位置ずれから計算 XBoxのKinectで使われていた。 パッシブ法 手法 説明 ステレオ法 複数のカメラを用いて、見え方の違いから奥行推定 平行ステレオ法 近くのものは大きくズレ、遠くのものはズレない。正確には 以下 照度差ステレオ法 複数の見え方があれば良いので、カメラを1台にして照明を変化させても良い。詳細は 以下 Shape-from-motion(SfM) 首里城プロジェクトや \"Building Roma in a Day\" などで使用されている。詳細は 以下 ) 平行ステレオ法 物体の3次位置：$(X,Y,Z)$ 2カメラの距離：$b$ それぞれのカメラで点 $(X,Y,Z)$ が見えている画素位置 $(u,v),(u&#94;{\\prime},v&#94;{\\prime})$ イメージセンサのピクセル間隔：$\\delta$（縦・横とも） カメラの焦点距離：$f$ 画像面と光軸の交点が画像座標原点 このとき、視差（$=u-v$）がわかると、奥行き情報 $Z$ がわかる。なお、視差は ブロックマッチング法 等で見つける。 照度差ステレオ法 最も簡単な反射モデル （均等拡散反射のみ。鏡面反射なし。） で行う。 $$\\text{Lambert model: }I_x\\left(\\text{Brightness}\\right)=\\rho L\\mathbf{n}\\cdot\\mathbf{S} = \\rho L \\cos\\theta$$ $\\rho, \\mathbf{S},L$ は予め知ることができる。 未知なのは、$\\mathbf{n} = \\left(n_x,n_y,n_z\\right)$ の3変数のみ。（$n_z = \\sqrt{1-\\left(n_x&#94;2+n_y&#94;2\\right)}$ とすると2変数） 2~3通りの位置から観測すると、$\\mathbf{n}$ がわかる。 通常は20~100の位置に照明をおき、最小2乗法で解く。 Shape-from-motion(SfM) 2枚の視点の異なる画像があるとする。 3次元中の点 $p$ がそれぞれの画像中で点 $(u.v),(u&#94;{\\prime},v&#94;{\\prime})$ で見えていたとする。 2つの視点間には回転 $\\mathbf{R}(3\\times3)$ と平行移動 $\\mathbf{t}(3\\times1)$ から成る行列で次の関係がある。 $$ \\left(u&#94;{\\prime},v&#94;{\\prime},1\\right)\\begin{pmatrix} f_{11} & & \\\\ & \\ddots & \\\\&&f;_{33} \\end{pmatrix}\\begin{pmatrix} u\\\\v\\\\1 \\end{pmatrix} = \\mathbf{0} $$ 逆に $\\mathbf{F}$ がわかれば2枚の画像の全てのピクセルで対応がとれているはず。対応点がわかっている点が9点以上あると、最小2乗法で解ける。 しかし、実は $\\mathbf{F}$ は規格化できるので、$8$ パラメータが決まれば残り $1$ つは自動的に決定できる。 （自由度 $8$, eight-point algorithmと呼ぶ。） 今は five-point algorithm まで進化。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-7.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-7.html"},{"title":"動画像処理","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt 動画像は、静止画の集まり（パラパラ漫画） 10~15[fps]あると、人は動画だと感じる。 映画：24[fps] TV、インターネット動画：30~60[fps] ロボット制御に必要な速度（アクチュエーターの反応速度が~ms）：1,000[fps] 自動運転 ~ 10,000[fps] 10[fps] 25[fps] 50[fps] Start Stop → 何をするか？ 動物体の検出・解析 動画の編集 動画の理解・認識 動物体の検出・解析 背景差分・フレーム間差分 【問題】 照明変化（屋外では良く起こる）、背景の変化（木の揺れ等）に弱い。 背景画像をどうやって作るかもポイント。 【統計的背景差分】 各ピクセルで時間的に統計情報を取ってもう少しsmartに背景差分することを考える。背景クラスを $w_b$ 前景クラスを $w_f$ とすると、やることは、$\\left(p\\left(w_f | I(x,y)\\right), p\\left(w_b | I(x,y)\\right)\\right)$ のうち確率の高いクラスを採用する。 ここで、ベイズの定理より、 $$ \\begin{cases} \\begin{aligned} p\\left(w_f | I(x,y)\\right) &= \\frac{p(w_f)p(I\\left(x,y)|w_f\\right)}{p(I(x,y))}\\propto p(w_f)p\\left(I(x,y)|w_f\\right)\\\\ p\\left(w_b | I(x,y)\\right) &= \\frac{p(w_b)p(I\\left(x,y)|w_b\\right)}{p(I(x,y))}\\propto p(w_b)p\\left(I(x,y)|w_b\\right) \\end{aligned} \\end{cases} $$ $p(w_b, w_f)$：その画素が $w_b, w_f$ である事前確率（例：木の上に人や車はいないので、$p_b$ 大, $p_f$：小） $p(I|w_c)$：$w_c$ だった時に、どの程度の確率でその画素値が観測されるか。 動き量の計算 【ブロックマッチング(Block Matching)】 ある時刻 $t$ におけるある領域に最も似ている時刻 $t+1$ の領域を、以下の手法等を用いて探す。 SSD(Sum of Squared Difference) SAD(Sum of Absolute Difference) NCC(Normalized Cross Correlation) 動画像圧縮では、この動きベクトル(motion vector)と差分を符号化することで圧縮を実現。 【オプティカルフロー(optical flow)】 2枚の画像間で、変化が微小だとすると、 $$\\begin{aligned}I(x+\\Delta x, y+\\Delta y, t+\\Delta t) &\\simeq I(x,y,t) + \\frac{\\partial I}{\\partial x}\\Delta x + \\frac{\\partial I}{\\partial y} \\Delta y+ \\frac{\\partial I}{\\partial t} \\Delta t + \\cdots\\\\\\rightarrow I_x\\Delta x + I_y\\Delta y + I_t\\Delta t&\\simeq0\\\\ I_x\\frac{\\Delta x}{\\Delta t} + I_y\\frac{\\Delta y}{\\Delta t} + I_t &= 0\\\\\\left(\\Delta t\\rightarrow0\\right)\\qquad I_xu+I_yv+I &= 0\\\\(u,v) &= \\left(\\frac{dx}{dt},\\frac{dy}{dt}\\right)\\end{aligned}$$ これだけだと、自由度が高すぎて一意に決まらないので、微小領域では動きが滑らかという仮定を置く。（Lucas-Kanada法, 1981） $$\\mathbf{G} = \\left[\\begin{array}{c}I_{x_1} &I;_{y_1} \\\\\\vdots&\\vdots\\\\I_{x_m}&I;_{y_m}\\end{array}\\right],\\quad \\mathbf{f} = \\left[\\begin{array}{c}u \\\\v\\end{array}\\right],\\quad\\mathbf{b} = \\left[\\begin{array}{c}I_{t_1} \\\\\\vdots\\\\I_{t_m}\\end{array}\\right]$$ 上記のように定義し、滑らかさの条件を使うと、 $$\\begin{aligned}\\mathbf{Gf}+\\mathbf{b} &= \\mathbf{0}\\\\\\therefore\\mathbf{f}&#94;{\\ast}&=-\\left(\\mathbf{G}&#94;T\\mathbf{G}\\right)&#94;{-1}\\mathbf{G}&#94;T\\mathbf{b}\\quad \\left(\\because\\text{Least squares}\\right)\\end{aligned}$$ 【DNNによる映像処理】 (x,y,t)の3次元をどう扱うか？ 画像（2次元）と時間の情報を分ける。 3D Convolution：空間情報と時間情報を同時に畳み込む。 仮想3D Convolution：空間情報を畳み込んで、その後時間方向に畳み込む。 動画の編集 In [ ]: 動画の理解・認識 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-6.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-6.html"},{"title":"4.Guided NEST exercises (intermediate)","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Thomas Burns Lecture Material https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-4_Plasticity-and-Learning Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial4.py In [1]: import sys sys . path . append ( \"path/to/library/\" ) Part 1: STDP and its varities Part-2:-Unsupervised-pattern-detection-using-STDP Make a training data NEST-simulation Part 1: STDP and its varities STDP alters the weights of synapses depending on the relative spike timing between the postsynaptic neuron and the presynaptic neuron. _STDP overview (from Sjöström J, Gerstner W (2010) Spike-timing dependent plasticity. Scholarpedia )_ Within some time windows: if \"PRE before POST\" , we get Long-Term Potentiation (LTP) if \"POST before PRE\" , we get Long-Term Depression (LTD) The time windows for LTP and LTD are generally on the order of tens of milliseconds . The LTD window is generally longer than the LTP window. Implementation To implement STDP in spiking neural network models, different STDP rules can be used. In general, different rules result in different distributions of synaptic weights over the course of learning. Examples of such weight distributions are shown below. STDP rules (from Gilson M, Fukai T (2011) Stability versus Neuronal Specialization for STDP. PLoS ONE ) Additive STDP tends to produce competition between synapses but needs to have its weights bound to ensure network stability (e.g. to avoid over-excitation) Multiplicative STDP tends to produce less competition between synapses but owing to its weight-dependent manipulation of synaptic weights does not require artificial bounds. Logorithmic STDP attempts to reconcile the two. Additive STDP rule In the following exercise, we will use the additive STDP rule , sometimes also called the exponential STDP rule : $$ \\Delta w_j= \\begin{cases} a&#94;+ \\cdot e&#94;{\\big( \\dfrac{t_j-t_i}{\\tau&#94;+} \\big)} & \\text{if}\\ t_j \\leq t_i & \\text{(LTP)} \\\\ -a&#94;- \\cdot e&#94;{\\big( - \\dfrac{t_j-t_i}{\\tau&#94;-} \\big)} & \\text{if}\\ t_j > t_i & \\text{(LTD)} \\end{cases} $$ variable Meaning $a&#94;+$ learning rate for LTP $a&#94;-$ learning rate for LTD $t_j$ spike time of the presynaptic neuron $j$ $t_i$ spike time of the postsynaptic neuron $i$ $\\tau&#94;+$ time constant for LTP (ms) $\\tau&#94;-$ time constant for LTD (ms) Using pre-defined paramaters which we will use in the second part of this tutorial , let's plot **\"how the this STDP rule changes weights depending on the timing of presynaptic and postsynaptic spikes.\"** In [2]: import numpy as np import matplotlib.pyplot as plt In [3]: from OIST.tutorial4 import AddSTDP In [4]: add_STDP_paramaters = { 'a_LTP' : 0.03125 , 'a_LTD' : 0.85 * 0.03125 , 'tau_LTP' : 16.8 , 'tau_LTD' : 33.7 } In [5]: model = AddSTDP () model . load_params ( ** add_STDP_paramaters ) In [6]: time_differences = np . linspace ( - 125 , 125 , 1000 ) In [7]: model . simulate ( time_differences ) Exercise 1 What features do you notice in this STDP curve? Experiment with different values in add_STDP_paramaters . How do each of the values change the shape of the STDP curve? How, in a network of neurons, could this STDP rule lead to over-excitation or network instability? The closer the spike timing between the postsynaptic neuron and the presynaptic neuron are, the bigger the influence is. If a becomes larger, the STDP curve expand in the y-axis direction , and if tau becomes larger, the STDP curve shrink in the x-axis direction . When the time difference gets ver close to 0, weight changes will diverge and lead to over-excitation or network instability. Part 2: Unsupervised pattern-detection using STDP In this part of the tutorial we will be replicating the results from [Masquelier et al. (2008) Spike Timing Dependent Plasticity Finds the Start of Repeating Patterns in Continuous Spike Trains. PLoS ONE](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0001377) . (In fact, we already reproduced Figure 2 from their paper in the first part of this tutorial.) Masquelier et al. (2008) create a spiking neural network with 2,000 presynaptic neurons just one postsynpatic neuron. They implement additative STDP in this network, which allows the \"postsynaptic neuron\" to learn to detect the beginning of repeating patterns of spiking activity arriving from the 2,000 presynaptic neurons. Importantly, the presynaptic neurons also have periods of random , non-patterned activity and have additional noisy spiking activity at all times. Let's begin by constructing the spike trains of the 2,000 presynaptic neurons. We will run our simulations for 450s, so we will create 450s worth of spike trains for these neurons. The first step is construct random activity with the following properties: Each presynpatic neuron will emit spikes independently generated by a Poisson process with a variable instantaneous firing rate $r$ $r$ varies randomly beteen $0$ and $90$ Hz. The rate of change in $r$ is modified by $dr$ $dr$ starts at $0$ $dr$ is modified by $ds$, randomly picked from a uniform distribution over $[−360,+360]$ Hz/s. $dr$ is clipped to within $[-1800,1800]$ Hz/s we will also manually add some additional spikes to guarantee that \"in every 50ms time bin, each neuron spikes at least once\" Make a training data In [8]: from OIST.tutorial4 import PoissonProcessGenerator , plotPatternRaster In [9]: poisson_params = { \"min_span\" : 50 , # [ms] \"starting_Hz\" : 54 , # [Hz] \"min_r\" : 0 , # [Hz] \"max_r\" : 90 , # [Hz] \"min_ds\" : - 3.6e-1 , # [Hz/ms] \"max_ds\" : 3.6e-1 , # [Hz/ms] \"min_dr\" : - 1.8 , # [Hz/ms] \"max_dr\" : 1.8 , # [Hz/ms] \"segment_length\" : 50 , # [ms] Length of 1 Presynaptic spiking segment length. } In [10]: seed = 0 In [11]: num_presynaptic_neurons = 2000 # Number of the presynaptic neurons. simulation_length = 1000 # [ms] In [12]: poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) In [13]: spikes = poisson_generator . generate_spikes ( simulation_length , num_presynaptic_neurons , seed = seed ) Processing Time: 0.708[s] Now we will Divide the presynaptic spiking activity into segments of 50ms Select a random 50ms segment to be considered as the \"pattern\" Copy and paste this pattern across the raster plot in a certain proportion of segments. Add 10Hz Noises to all neurons at all times. Divide and Select \"Pattern\" In [14]: poisson_generator . select_segment ( seed = seed ) Spikes divided into 20 segments. 13-th segment was selected as a Pattern. In [15]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( spikes , ax = ax ) plt . tight_layout () plt . show () Copy and Paste this \"Pattern\" In [16]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [17]: pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) Number of spikes added: 250000.0 Spikes are saved as `self.pattern_repeated_spikes`. Add Poisson Noises In [18]: frequency = 10 # [Hz] In [19]: noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes are saved as `self.noise_added_spikes`. In [20]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) plt . tight_layout () plt . show () Firing Rates In [21]: from OIST.tutorial4 import plotFiringRates In [22]: fig = plt . figure ( figsize = ( 12 , 4 )) fig = plotFiringRates ( noise_added_spikes , fig = fig ) plt . show () Check the Repeated Position In [23]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) ax = plotPatternRaster ( output_identities , cmap = \"RdGy_r\" , ax = ax , alpha = 0.7 ) plt . tight_layout () plt . show () With these paramaters, we can embed a repeating pattern within some pseduo-random, spontaneous activity. However, learning takes time! And we have only been simulating 1s of activity. In this task, the authors reported they needed 13.5s of activity (or 700 pattern presentations) for the neuron to show signs of learning to recognise the pattern. Figure 4 from Masquelier et al. 2008: Overview of the 450 s simulation. Here we plotted the membrane potential as a function of simulation time, at the beginning, middle, and end of the simulation. Grey rectangles indicate pattern presentations. (a) At the beginning of the simulation the neuron is non-selective because the synaptic weights are all equal. It thus fires periodically, both inside and outside the pattern. (b) At t≈13.5 s, after about 70 pattern presentations and 700 discharges, selectivity to the pattern is emerging: gradually the neuron almost stops discharging outside the pattern (no false alarms), while it does discharge most of the time the pattern is present (high hit rate), here even twice (c) End of the simulation. The system has converged (by saturation). Postsynaptic spike latency is about 4 ms. Hit rate is 99.1% with no false alarms (estimated on the last 150 s). It is therefore necessary to use some pre-computed spontaneous activity prepared earlier, found in the file spont_100s_alt.npy . It contains 100s of pseduo-random, spontaneous activity for us to use in our simulations. Warning, it is a large file at ~1.6GB! $ wget --content-disposition https://www.dropbox.com/sh/p9ml6l402znbzmy/AAA2LP7W1bcvwSgYnmx9ahyga?dl = 0 & preview = spont_100s_alt.npy # Pattern1. Download pre-computed files. pre_spikes_wrepeats_100s = np . load ( \"path/to/spont_100s_alt.npy\" ) poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) poisson_generator . memorize ( pre_spikes_wrepeats_100s , repeated = False ) # Pattern2. Make by myself. simulation_length_100s = 100_000 num_presynaptic_neurons = 2_000 poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) pre_spikes_wrepeats_100s = poisson_generator . generate_spikes ( simulation_length_100s , num_presynaptic_neurons , seed = seed ) In [24]: # Pattern.1 pre_spikes_wrepeats_100s = np . load ( \"path/to/spont_100s_alt.npy\" ) poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) poisson_generator . memorize ( pre_spikes_wrepeats_100s , repeated = False ) [Before] simulation length: None Number of the presynaptic neurons: None Memorizing... [After] simulation length: 100000 Number of the presynaptic neurons: 2000 In [25]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [26]: # Repeat & Paste. poisson_generator . select_segment ( seed = seed ) pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes divided into 2000 segments. 685-th segment was selected as a Pattern. Number of spikes added: 25000000.0 Spikes are saved as `self.pattern_repeated_spikes`. Spikes are saved as `self.noise_added_spikes`. In [27]: repeated_idxes = np . any ( poisson_generator . repeated_position , axis = 1 ) In [28]: print ( f \"Pattern shape = { poisson_generator . pattern_spikes . shape } \" ) print ( f \"Poisson Process shape = { noise_added_spikes . shape } \" ) Pattern shape = (2000, 50) Poisson Process shape = (2000, 100000) Now we are ready to use these spike trains to train a postsynaptic neuron! ... or are we? Creating a model conceptually or mathematically is just the first step. Next we have to figure out how to simulate it computationally. NEST simulation In [29]: import nest NEST contains many STDP synapse rules. Which one should we use? We said earlier that we will use an additive/exponential STDP rule, however that is not the only parameter to consider. Another consideration is \"how to pair two continuous spikes trains\" such that we can apply STDP appropriately to all presynaptic spikes $j$ coming to the postsynaptic neuron $i$. A list of STDP models implemented in NEST can be found here: https://nest-simulator.readthedocs.io/en/latest/models/stdp.html The following models correspond to the below figure for pairing of spikes for STDP: stdp_nn_symm_synapse (panel A) stdp_nn_pre-centered_synapse (panel B) stdp_nn_restr_synapse (panel C) Figure 7 from Morrison et al. 2008 . Examples of nearest neighbor spike pairing schemes for a presynaptic neuron j and a postsynaptic neuron i. In each case, the dark gray indicate which pairings contribute toward depression of a synapse, and light gray indicate which pairings contribute toward potentiation. Symmetric interpretation : each presynaptic spike is paired with the last postsynaptic spike, and each postsynaptic spike is paired with the last presynaptic spike (Morrison et al. 2007). Presynaptic centered interpretation : each presynaptic spike is paired with the last postsynaptic spike and the next postsynaptic spike (Izhikevich and Desai 2003; Burkitt et al. 2004: Model II). Reduced symmetric interpretation : as in c but only for immediate pairings (Burkitt et al. 2004: Model IV, also implemented in hardware by Schemmel et al. 2006) [Masquelier et al. (2008)](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0001377) uses something akin to panel C In the (unreleased) NEST 3.0 there is a stdp_nn_restr_synapse model which is quite similar. (However, we are using NEST 2.X. now.) After going through the available STDP models, none appeared to be capable of replicating the paper due to this paper requiring a particular spike-pairing method which doesn't seem to be represented in any of the currently-implemented STDP models in NEST. Therefore, we need to make some changes to our experiment! But before we do that, let's simulate the current model using some different synapses which are available to us. Start with the static synapse and then experiment with some STDP synapse models to see what goes wrong and \"how different paramaters affect the results.\" # Check what model we can use. nest . Models ( 'synapses' ) In [30]: from OIST.tutorial4 import NeuronalNetwork In [31]: simulation_times = 1000 In [32]: spike_indicies = [ np . where ( is_spike )[ 0 ] for is_spike in noise_added_spikes == 1 ] In [33]: STDP_paramaters = { 'a_LTP' : 0.03125 , 'a_LTD' : 0.85 * 0.03125 , 'tau_LTP' : 16.8 , 'tau_LTD' : 33.7 , } In [34]: model = NeuronalNetwork ( ** STDP_paramaters ) In [35]: model . build ( spike_indicies ) Created 2000 spike generators. Created 2000 parrot neurons. Created 1 post_neuron. Created spike detector. Created voltmeter. In [36]: model . compile ( synapse_model = \"static\" , ex = 1 ) Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: static_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [37]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [38]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [39]: model . compile ( synapse_model = \"standard\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [40]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [41]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [42]: model . compile ( synapse_model = \"triplet\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_triplet_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [43]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [44]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [45]: model . compile ( synapse_model = \"FACETS\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_facetshw_synapse_hom Connected post neuron to spike detector Connected voltmeter to post neuron In [46]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [47]: ax = model . plotWeights ( repeated_idxes ) plt . show () Couldn't recognize the patterns. Exercise 2 What are some general problems with the STDP synapses? How do these synapse models cause failure of our model to replicate the original paper? What can we do to the task or the model which might help? In [48]: model = NeuronalNetwork ( ** STDP_paramaters ) model . build ( spike_indicies ) Created 2000 spike generators. Created 2000 parrot neurons. Created 1 post_neuron. Created spike detector. Created voltmeter. In [49]: gaussian_params = { \"simulation_length_pulses\" : 10000.0 , \"proportion_of_neurons_pulsing\" : 0.5 , \"number_of_pulses\" : 50 , \"spikes_per_pulse\" : 5 , \"std_spikes_per_pulse\" : 5.0 } In [50]: # Overwrite the spike generator. noise_rate = 35.0 # firing rate of Poisson neurons (Hz) model . spike_generator = nest . Create ( \"poisson_generator\" , model . num_presynaptic_neurons , params = { 'rate' : noise_rate }) In [51]: # Add the gaussian Packets as an additional input. model . addGaussianPackets ( ** gaussian_params ) In [52]: model . compile ( synapse_model = \"standard\" , ex = 2 ) Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [53]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [54]: ax = model . plotWeights ( repeated_idxes ) plt . show () Difficult to find a best parameter :( → How about using Bayesian optimization ?? 【Challenge Exercise】 Consider whether and how your network could learn multiple patterns, e.g. would you need to add more post-synaptic neurons to the network? Hint: see [Masquelier et al. (2009) Competitive STDP-Based Spike Pattern Learning. Neural Computation](https://www.ncbi.nlm.nih.gov/pubmed/19718815) . In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-4.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-4.html"},{"title":"3.Guided NEST exercises (basic)","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Milena Menezes Carvalho Lecture Material https://github.com/oist-ncbc/skill-pill-plus/blob/master/Tutorial-3_Synapses-and-Networks Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial3.py In [1]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Synapses Neuronal connectivity Neurons are connected at specific sites called synapses . Usually, the axon of a presynaptic neuron will make contact with the dendrite (or soma ) of a postsynaptic in what's called a chemical synapse : neurotransmitters are transferred via the tiny gap between the two neurons ( synaptic cleft ) thanks to biochemical processes. This generates a change in membrane potential at the postsynaptic site, called postsynaptic potential . Electrical synapses , also known as gap junctions , can also be present -- in this case, specialized proteins make a direct electrical connection between neurons. [1] from [2] In this tutorial we will connect two or more neurons in NEST to create our first neuronal networks. First, we will learn the basic commands following [3] and [4] Then apply these to a well-known balanced network known as the Brunel network . By the end of this tutorial, you should be able to understand that a network's stability and activity behavior is deeply influenced by its parametrization. Sources: [1] Wulfram Gerstner and Werner M. Kistler, \"Spiking Neuron Models\". Cambridge University Press, 2002 [2] Peter Dayan and L. F. Abbot, \"Theoretical Neuroscience: Computational and Mathematical Modeling of Neural Systems\". The MIT Press, 2001 [3] PyNEST tutorial: Part 2, Populations of Neurons [4] PyNEST tutorial: Part 3, Connecting Networks with Synapses Synapse types The simplest synapse type is the static_synapse . The synaptic weight , a measure of how strong is the influence of the presynaptic neuron on the postsynaptic neuron, is static , i.e. does not change over time. The synaptic transmission, however , is not instantaneous. The synaptic delay is defined as the \"time\" between the presynaptic neuron activation ( action potential ) and the moment the postsynaptic potential is generated. In NEST, we can check the default values for all parameters using the GetDefaults function: nest.GetDefaults('static_synapse') The common model which is more suit to real biological event is spike-time dependent plasticity . The synaptic weight changes according to the temporal order between pre and postsynaptic spike times. In NEST, the most common STDP mechanisms are implemented in stdp_synapse . The change for normalized synaptic weights is described by $$ \\begin{aligned} \\Delta w &= \\begin{cases} \\lambda f {-}(w) \\times K -(\\Delta t) & \\text{if $\\Delta t \\leq 0$,} \\ \\lambda f {+}(w) \\times K +(\\Delta t) & \\text{if $\\Delta t > 0$,} \\end{cases}\\ \\Delta t &\\equiv t {post} - t {pre}\\ K {(+,-)}(\\Delta t) &= \\exp(-|\\Delta t| / \\tau {(+,-)}) \\end{aligned} $$ The update functions $$f_{+}(w) = (1-w)&#94;{\\mu_{+}} \\text{ and } f_{-}(w) = \\alpha w&#94;{\\mu_{-}}$$ create synaptic potentiation (stronger weights) when causal spiking is detected ($\\Delta t > 0$), otherwise generating synaptic depression (weaker weights). This rule is also known as temporally asymmetric Hebbian plasticity and has been thoroughly studied under different parametrizations. (below) STDP Type Parametrization Ref. multiplicative STDP $\\mu_{+}=\\mu_{-}=1.0$ [6] additive STDP $\\mu_{+}=\\mu_{-}=0.0$ [7] Guetig STDP $\\mu_{+}=\\mu_{-}=[0.0, 1.0]$ [5] van Rossum STDP $\\mu_{+}=0.0, \\mu_{-} = 1.0$ [8] Sources: [5] Guetig et al. (2003). Learning input correlations through nonlinear temporally asymmetric hebbian plasticity. Journal of Neuroscience, 23:3697-3714 DOI: https://doi.org/10.1523/JNEUROSCI.23-09-03697.2003 [6] Rubin J, Lee D, Sompolinsky H (2001). Equilibrium properties of temporally asymmetric Hebbian plasticity. Physical Review Letters, 86:364-367. DOI: https://doi.org/10.1103/PhysRevLett.86.364 [7] Song S, Miller KD, Abbott LF (2000). Competitive Hebbian learning through spike-timing-dependent synaptic plasticity. Nature Neuroscience 3(9):919-926. DOI: https://doi.org/10.1038/78829 [8] van Rossum MCW, Bi G-Q, Turrigiano GG (2000). Stable Hebbian learning from spike timing-dependent plasticity. Journal of Neuroscience, 20(23):8812-8821. DOI: https://doi.org/10.1523/JNEUROSCI.20-23-08812.2000 Introduction: synapses in NEST Check the synapse types you can call Found in the following link: [9] NEST Docs: All synapse models Running the following command: import nest nest . Models ( 'synapses' ) For STDP synaptic models, the time constant of the depressing window of STDP ( tau_minus ) is exceptionally a parameter of the post-synaptic neuron. nest . Create ( \"iaf_psc_alpha\" , params = { \"tau_minus\" : 30.0 }) However, tau_plus is a synapse parameter. nest . SetDefaults ( \"stdp_synapse\" ,{ \"tau_plus\" : 15.0 }) Customized variants of a synapse model can be created using CopyModel() , and can be used anywhere that a built-in model name can be used. nest . CopyModel ( \"stdp_synapse\" , \"layer1_stdp_synapse\" ,{ \"Wmax\" : 90.0 }) Connectivity rules for multiple neurons can be defined. Please check [3] to learn more details about creating and connecting neuron populations. Synaptic parameters can also be randomly distributed by assigning a dictionary to the parameter. This should contain the target distribution and its optional parameters, as listed below: Distributions Keys normal mu , sigma lognormal mu , sigma uniform low , high uniform_int low , high binomial n , p exponential lambda gamma order , scale poisson lambda Synapse information can be retrieved from its origin, target and synapse model using GetConnections() : Example. num_nurons = 10 epop1 = nest . Create ( \"iaf_psc_delta\" , num_nurons , params = { \"tau_m\" : 30.0 }) epop2 = nest . Create ( \"iaf_psc_delta\" , num_nurons ) conn_dict = { \"rule\" : \"fixed_indegree\" , \"indegree\" : 5 } syn_dict = { \"model\" : \"stdp_synapse\" , \"alpha\" : 1.0 } nest . Connect ( epop1 , epop2 , conn_dict , syn_dict ) neuron = nest . Create ( \"iaf_psc_alpha\" ) syn_dict = { \"model\" : \"stdp_synapse\" , \"alpha\" : { \"distribution\" : \"uniform\" , \"low\" : 0.1 , \"high\" : 2. }, \"weight\" : { \"distribution\" : \"uniform\" , \"low\" : 0.5 , \"high\" : 5. }, \"delay\" : 1.0 } nest . Connect ( epop1 , neuron , \"all_to_all\" , syn_dict ) # Synapse information can be retrieved print ( nest . GetConnections ( epop1 , target = epop2 , synapse_model = \"stdp_synapse\" )) # We can then extract the data using `GetStatus()`. # Specific information can be retrieved by providing a list of desired parameters. conns = nest . GetConnections ( epop1 , synapse_model = \"stdp_synapse\" ) conn_vals = nest . GetStatus ( conns , [ \"target\" , \"weight\" ]) Networks Example1: connecting two neurons In this example, we will create and connect two neurons, A and B. Neuron A is of type iaf_psc_delta : Receives external current $I_e = 376.0 pA$. This current is sufficient to elicit a spike every $\\approx$ 50ms. Neuron B is solely connected to neuron A: Can only spike if the input from A is strong enough. Let's observe how B can be influenced by A. In [2]: import nest import matplotlib.pyplot as plt In [3]: from OIST.tutorial3 import NeuronA , NeuronB , plotMultipleNeurons In [4]: # First, verify the activity of neuron A. nest . ResetKernel () modelA = NeuronA () modelA . build () In [5]: ax = plotMultipleNeurons ( modelA ) plt . show () Now let's create neuron B as iaf_psc_delta with no external current: In [6]: modelB = NeuronB () modelB . build () In [7]: ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Neuron B is still inactive. We need to connect both neurons: In [8]: nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) In [9]: ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Q. Suggest at least 3 alterations we can make in this example to elicit spiking activity from B. Lower the threshold V_th : nest.SetStatus(neuron_B,{'V_th': -69.}) # default: -55 Higher thr current I_e Highre the weights between nuron_A and nuron_B In [10]: # Lower the threshold V_th. nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , V_th =- 69. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () In [11]: # Higher the current I_e. nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , I_e = 350. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () In [12]: # Highre the weights between \"nuron_A\" and \"nuron_B\" nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 14.9 }) nest . Simulate ( 300. ) nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 15. }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Because of the shape of B, and scale of observation, we couldn't find the spikes but neuron B also spikes after connection weight increased. Q. Check what happens if the neuron model is different: for example, change `iaf_psc_delta` to `hh_psc_alpha`. In [13]: # Lower the threshold V_th. nest . ResetKernel () modelA = NeuronA ( model_name = \"hh_psc_alpha\" ) modelA . set_params ( \"neuron\" , I_e = 250. ) modelA . build () modelB = NeuronB ( model_name = \"hh_psc_alpha\" ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Q. connect B to A reciprocally and check their dynamics. How can you describe their behavior? In [14]: nest . ResetKernel () modelA = NeuronA () modelA . build () modelB = NeuronB () modelB . set_params ( \"neuron\" , V_th =- 65. ) modelB . build () nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" }) nest . Connect ( modelA . neuron , modelB . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 5. }) nest . Connect ( modelB . neuron , modelA . neuron , { \"rule\" : \"one_to_one\" }, { \"model\" : \"static_synapse\" , \"weight\" : 1 }) ax = plotMultipleNeurons ( modelA , modelB ) plt . show () Example2: Random Balanced Network We will now simulate a network of integrate-and-fire (IAF) , excitatory and inhibitory spiking neurons connected randomly with fixed weights . This network (called Brunel Network ) was proposed and studied in [10]: The network is composed of excitatory neurons (80%) inhibitory neurons (20%) connection probability $\\epsilon = 10\\%$ ( epsilon ). All neuron types can be connected (E$\\rightarrow$E, E$\\rightarrow$I, I$\\rightarrow$E and I$\\rightarrow$I). Neurons receive external input from oustide the network modeled by a Poisson spike train generator [11] rate nu_ex , $\\nu_{ex} = \\eta * \\nu_{th}$ threshold rate $\\nu_{th}$ ( nu_th ) is calculated using $$\\nu_{th} = \\frac{\\theta}{J * \\text{CE} * \\tau_{m}}$$ In general, the interspike intervals drawn are exponentially distributed. The synaptic input current on each neuron is calculated as $$I_i(t) = \\tau \\sum_j J_j \\sum_k \\delta(t-\\delta-t_j&#94;k)$$ Sum over $j$ covers all synapses (internal and external to the network) Sum over $k$ covers all spikes arriving at times $t&#94;k_j$ with delay $\\delta$ ( delta ). This simple postsynaptic current model is called delta synapse , in which stimulation is applied in a single point in time for simplicity using the Dirac delta function . In biological systems, synaptic models are diverse and can vary within the same neuron depending on the function of the synapse, for example. In NEST, we will create a network of iaf_psc_delta neurons connected using static_synapse with weights $J_E$ and $J_I = -g*J_E$. We will study how this network changes its behavior depending on its parametrization. Sources: [10] Brunel N (2000). Dynamics of sparsely connected networks of excitatory and inhibitory spiking neurons. Journal of Computational Neuroscience 8, 183-208. [11] Poisson distribution m In [15]: from OIST.tutorial3 import BrunelNetwork In [16]: model = BrunelNetwork () In [17]: # Model parameters. model . __dict__ Out[17]: {'g': 5.0, 'eta': 2.0, 'delay': 1.5, 'dt': 0.1, 'epsilon': 0.1} $$ \\begin{aligned} \\begin{cases} \\epsilon &= 10\\%\\\\ v_{ex} &= \\eta v_{th}\\\\ \\delta\\\\ J_I &= -gJ_E \\end{cases} \\end{aligned} $$ In [18]: neuron_params = { \"C_m\" : 1.0 , \"tau_m\" : 20.0 , \"t_ref\" : 2.0 , \"E_L\" : 0.0 , \"V_reset\" : 0.0 , \"V_m\" : 0.0 , \"V_th\" : 20.0 } In [19]: model . build ( N_total_neuron = 12500 , N_rec_volt = 5 , N_rec = 50 , J = 0.1 , ** neuron_params ) Number of neurons : 12500 Excitatory: 10000 Inhibitory: 2500 Number of synapses: 15625000 Excitatory: 12500000 Inhibitory: 3125000 Building time : 4.58 s In [20]: model . simulate ( T = 900. ) Simulation time : 900.0 ms Processing time : 56.00 s Completed. Please use following methods to plot results. - `plotVoltageEx(n)`, `plotVoltageIn(n)` - `plotVoltageCompare(idx=0)` - `plotRaster()` Below we plot the voltage, raster, and activity rate of the excitatory and inhibitory populations. In [21]: model . plotVoltageEx () \u001b Membrane potential plots [Excitatory Neurons] In [22]: model . plotVoltageIn () \u001b Membrane potential plots [Inhibitory Neurons] In [23]: model . plotVoltageCompare ( 0 ) \u001b Membrane potential Compaison. In [24]: model . plotRaster () \u001b Raster Plot.(N=50) One of the main findings in Brunel's paper is the different activity states that can be observed in this network depending on $g$: the ratio between inhibitory and excitatory synaptic weights $\\eta$: the external excitation rate relative to the threshold rate $\\delta$: the synaptic delay $\\epsilon$: the connection probability . By altering these arguments, he observed different collective behaviors identified as asynchronous irregular (AI) asynchronous regular (AR) synchronous irregular (SI) synchronous regular (SR). These behaviors are exemplified in the images below. from [1] Q. Use the graphs as a starting point. Try to elaborate on how each of the four parameters affects the state of this network. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-3.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-3.html"},{"title":"2.Introduction to NEST Simulator","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Gastón Sivori Lecture Material https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-2_NEST-Introduction Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial2.py In [1]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Agenda Installation leaky integrate-and-fire (LIF) HH-neuron model Connecting nodes with different inputs F-I curve Installation Documentation: https://nest-simulator.readthedocs.io/en/latest/installation/ Github: https://github.com/nest/nest-simulator/tree/v2.18.0 Memo(What I did) pip $ pip install python-nest ※ This `nest` has lack of some module (ex. `nest.Create`) cmake # Install dependencies via Homebrew $ brew install gcc cmake gsl open-mpi libtool $ mkdir NEST $ cd NEST # Clone source files from Github. $ wget --content-disposition https://github.com/nest/nest-simulat or/archive/v2.16.0.tar.gz $ tar zxf nest-simulator-2.16.0.tar.gz $ mkir bld $ cd bld # Configure and build NEST inside the build directory # (replacing gcc-9 and g++-9 with the GCC compiler versions you installed with brew). # You can check it with `g++ -v` or `gcc -v` command. $ cmake -DCMAKE_INSTALL_PREFIX:PATH = . \\ -DCMAKE_C_COMPILER = gcc-9 \\ -DCMAKE_CXX_COMPILER = g++-9 \\ ../nest-simulator-2.16.0/ $ make -j4 $ make install $ make installcheck ※ This `nest` also has lack of some module (ex. `nest.Create`) Anacond # If you want to use jupyter notebook, please include \"jupyter\" $ conda create --name skill-pill-plus -c conda-forge nest-simulator python jupyter # path/to/activate is like \"/Users/iwasakishuto/.pyenv/versions/anaconda3-5.0.1/bin/activate\" $ source [ path/to/activate ] skill-pill-plus # Activated!! ( skill-pill-plus ) $ If you want to use this environment on the jupyter notebook, please follow this. $ pip install environment_kernels $ jupyter notebook --generate-config $ vi ~/.jupyter/jupyter_notebook_config.py # Add these line >>> c.NotebookApp.kernel_spec_manager_class = 'environment_kernels.EnvironmentKernelSpecManager' >>> c.EnvironmentKernelSpecManager.conda_env_dirs =[ '/Users/iwasakishuto/.pyenv/versions/anaconda3-5.0.1/env' ] $ jupyter notebook # If successful, you can chose your ideal environment at [Kernel → Change kernel] # NOTE: You should install `jupyter` in the environment. # If you not, please run `conda install --name \"Your Environment Name\" jupyter` ※ This `nest` has all modules :) In [2]: import nest import numpy as np import matplotlib.pyplot as plt # If you need to import other packages like scipy or scikit-learn # You should import these \"before\" nest!! For NEST to simulate different experiments, its kernel (core functionality) needs to be reseted ( nest.ResetKernel() ) for every new simulation. Please remember to run this code before running each simulation. About NEST Conceptually, neural networks consists of neurons and connections . Nodes can be neurons , sub-networks or devices inside the NEST framework. We will use devices to stimulate neurons and to measure their membrane potential. Sub-networks , on the other hand, are arrangements of neurons whose parameters may be modified as a group. We will look at sub-networks in the following lectures. leaky integrate-and-fire (LIF) For now, we will focus on constructing a leaky integrate-and-fire (LIF) neuron with delta-shaped synaptic currents: In this figure, a delta-shaped pulse $\\delta(t-t_j&#94;f)$ from neuron $j$ is being transmitted along its axon until it reaches neuron $i$'s dendrites through a synapse. Synapses are modelled as low-pass RC circuit filters which output a current $\\alpha(t-t_j&#94;f)$. These presynaptic currents reach the soma as an input current $I(t)$ which charges the capacitor $C$ (integration) while some of it leaks out through the resistance $R$. ($I(t) = I_R + I_C$) The electrical components here represent a circuit modelization of the biological mechanisms happening at the synapse and the soma. In this model, the membrane's potential is represented by capacitor $C$ such that when it has enough charge and reaches the threshold potential $\\vartheta$, a spike $\\delta(t-t_i&#94;f)$ is generated and transmitted. In [3]: from OIST.tutorial2 import LIFmodel In [4]: model = LIFmodel ( model_name = \"iaf_psc_alpha\" ) Create LIF neuron with alpha-function shaped synaptic currents. Created a spike_generator. Created a voltmeter. Created a spike detector. In [5]: # Check the neuron params. model . neuron_params () C_m : 250.0 pF E_L : -70.0 mV I_e : 0.0 pA V_m : -70.0 mV V_reset: -70.0 mV V_th : -55.0 mV t_ref : 2.0 ms tau_m : 10.0 ms Q1. You might have noticed that there is no parameter for the membrane resistance `R_m` as shown in the previous figure. Do you know why? The membrane time constant tau_m corresponds to the membrane capacitance C_m and membrane resistance R_m as observed in the electrical circuit above. Therefore it's possible to calculate what is the R_m value given the following formula: $$ \\tau_m = C_m R_m $$ In [6]: # Retrieve a particular set of parameters model . neuron_params ( \"V_reset\" , \"V_th\" ) Out[6]: ((-70.0, -55.0),) In [7]: # Modify spike generation to values 10 and 50 ms print ( f \"Before: { model . spike_params ( 'spike_times' ) } \" ) model . set_params ( node = \"spike_generator\" , spike_times = [ 10. , 50. ]) print ( f \"After : { model . spike_params ( 'spike_times' ) } \" ) Before: ((array([], dtype=float64),),) After : ((array([10., 50.]),),) In [8]: # Connect the spike generator and the voltmeter to the neuron. model . build ( weight = 1e3 ) Connect spike generator with a given synaptic specification ({'weight': 1000.0}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. Simulate for 100 ms and observe the results In [9]: ax = model . simulate ( ms = 100 ) plt . show () Q2. What can we observe here? Are these neuron spikes? We can observe the membrane trace of the LIF neuron model excited with alpha-function shaped spikes at times 10 ms and 50 ms. The observed peaks in the membrane trace are not spikes since the membrane threshold V_th is -55mV. If we modify the external current or lower the membrane's threshold potential we should be able to observe spikes. In [10]: # Modifying the threshold model = LIFmodel ( model_name = \"iaf_psc_alpha\" , display = False ) model . set_params ( \"neuron\" , V_th =- 58. ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . build ( weight = 1e3 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () In [11]: # modifying external current to LIF neuron model = LIFmodel ( model_name = \"iaf_psc_alpha\" , display = False ) model . set_params ( \"neuron\" , I_e = 300. ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e3 , display = False ) model . simulate ( ms = 100 ) plt . show () In this neuron model, the membrane potential does not follow the biologically observed dynamics that neurons have. Their use is limited to understand and experiment with network dynamics and spiking activity :( HH-neuron model For comparison, let's observe the membrane potential of a HH-neuron model (Hodgkin and Huxley, 1952). This model was the \"conclusion of a series of papers\" concerned with the flow of electric current through the surface membrane of the giant nerve fibre in the squid. Using voltage-clamp experiments and by varying extracellular sodium and potassium concentrations, Hodgkin and Huxley developed a model in which the properties of an excitable cell are described by a set of ordinary differential equations. For simplicity, we will not focus on these equations. NEST's framework integrates these equations to obtain the instantaneous membrane potential. The following figure represents an electric circuit model of the neuron's membrane. The HH-model (Hodgkin and Huxley, 1952) considers the ionic channels present on the cellular membrane. These channels allows the conduction of specific types of ions. Sodium channels (Na+) are scarce inside the cell , so that when sodium channel opens, positive charges rush into the cell to cause excitation. Potassium ions (K+) are rich inside the cell , so that when potassium channel opens, positive charges rush out of the cell to cause inhibition. The model assumes a leak current composed of all other remaining ionic currents (Cl, Mg, etc.) This model is based on careful data analysis and follows the following equation : $$C_m \\frac{dV}{dt} = \\bar{g_{Na}}m&#94;3h(E_{Na}-V) + \\bar{g_K}n&#94;4(E_K-V) + g_{Leak}(E_{Leak}-V) + I$$ Where the conductances $g_{Na}$ and $g_{K}$ are: $$ g_{Na} = \\bar{g_{Na}}m&#94;3h $$$$ g_{K} = \\bar{g_K}n&#94;4 $$ Let's see these parameters in NEST by creating a hh_psc_alpha neuron. A HH-model neuron with delta-shaped synaptic currents. In [12]: from OIST.tutorial2 import HHmodel In [13]: model = HHmodel () Create Hodgkin-Huxley neuron with alpha-function shaped synaptic currents. Created a spike_generator. Created a voltmeter. Created a spike detector. In [14]: model . neuron_params () C_m : 100.0 pF E_K : -77.0 mV E_L : -54.402 mV E_Na : 50.0 mV g_K : 3600.0 nS g_L : 30.0 nS g_Na : 12000.0 nS I_e : 0.0 pA V_m : -65.0 mV t_ref: 2.0 ms In [15]: model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e3 ) Connect spike generator with a given synaptic specification ({'weight': 1000.0}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. In [16]: ax = model . simulate ( ms = 100 ) plt . show () Q3. Modify the previous example to observe spikes. In [17]: # modifying the synaptic strength (w) to observe spikes model = HHmodel ( display = False ) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 50. ]) model . build ( weight = 1e4 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () In [18]: print ( f \"Number of spikes: { model . spikes } \" ) Number of spikes: 2 Could you observe the spikes? Just after a spike, the membrane potential resets to -77 mV and a short refractory period of 2 ms (check these parameter value t_ref from the parameter list shown above!). During this period, the neuron is unable to react to excitation. Q4. Can you try exciting the neuron during this period to observe this phenomena? In [19]: # In the following example the spike generator generates spikes at times 10ms, 11ms, 50ms and 52ms. model = HHmodel ( display = False ) model . set_params ( \"voltmeter\" , interval = 0.1 ) model . set_params ( \"spike_generator\" , spike_times = [ 10. , 11.0 , 50. , 52.0 ]) # Add!! model . build ( weight = 1e4 , display = False ) ax = model . simulate ( ms = 100 ) plt . show () The figure is the same as before due to the refractory period of the neuron. Connecting nodes with different inputs To compare neurons with different inputs, let's see how the parameters of the input affect the neurons' output. In the following example, we will use constant input current and belows with the same mean strength as the constant input current. a Poisson spike train The probability density function and firing rates of neurons will be shaped given by these inputs. First, let us define the parameters of the simulation and input currents. In [20]: T = 1.2e3 # simulation time nu_ext = 15e3 # firing rate of external Poisson source J = 0.08 # synaptic weight d = 0.1 # delay C = 250.0 # membrane potential capacitance mu = J * 1e-3 * nu_ext * C # mean input in pAa I_ext = mu # external current In [21]: neuron_params = { 'C_m' : C , # (pF) 'E_L' : 0. , # (mV) 'I_e' : 0.0 , # (pA) 'V_m' : 0. , # (mV) 'V_reset' : 0. , # (mV) 'V_th' : 15. , # (mV) 't_ref' : 2.0 , # (ms) 'tau_m' : 10.0 , # (ms) } In [22]: plot_infos = { \"color\" : [ \"blue\" , \"red\" ], \"label\" : [ \"constant input\" , \"Poisson input\" ] } Then, make two types of models and compare them. In [23]: from OIST.tutorial2 import mkMultiDetectors , plotMultResults In [24]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) Create LIF neuron with delta-shaped synaptic currents. Created a voltmeter. Created a spike detector. In [25]: poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d ) Create LIF neuron with delta-shaped synaptic currents. Created a poisson_generator. Created a voltmeter. Created a spike detector. Connect spike generator with a given synaptic specification ({'weight': 0.08, 'delay': 0.1}) Connected voltmeter to the neuron for measurements. Connected the neuron to spike detector for measurements. In [26]: neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) Created 2 multimeter to record membrane potential of the neurons. Created 2 spike detectors to record spikes times and neuron identifiers, but not record from file. In [27]: nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axR . legend (), axR . set_xlim ( 0 , T ) plt . show () What!? There are no spikes?! Well, look at the figures and consider the threshold potential value V_th . Let's try increasing the synaptic strengh J . The neuron receiving Poisson input will be in different firing rate regimes! In [28]: print ( f \"poisson_model.neuron_params('V_th') = { poisson_model . neuron_params ( 'V_th' )[ 0 ][ 0 ] } \" ) print ( f \"const_model.neuron_params('V_th') = { const_model . neuron_params ( 'V_th' )[ 0 ][ 0 ] } \" ) poisson_model.neuron_params('V_th') = 15.0 const_model.neuron_params('V_th') = 15.0 Q5. Try to make the neuron fire at an irregular regime. In [29]: T = 1.2e3 # nu_ext = 15e3 # J = 0.09 # From 0.08 to 0.09. d = 0.1 # C = 250.0 # mu = J * 1e-3 * nu_ext * C # I_ext = mu # In [30]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axR . legend (), axR . set_xlim ( 0 , T ) plt . show () Q6. Try to make the neuron spike at a regular regime. In [31]: T = 1.2e3 # nu_ext = 15e3 # J = 0.11 # From 0.08 to 0.11. d = 0.1 # C = 250.0 # mu = J * 1e-3 * nu_ext * C # I_ext = mu # In [32]: const_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = LIFmodel ( model_name = \"iaf_psc_delta\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , rate = True , ** plot_infos ) axL . legend (), axR . legend (), axR . set_xlim ( 0 , T ) plt . show () Since we are using the LIF neuron model with a membrane threshold potential V_th at 15mV , you will not be able to see proper spikes. Instead, you will only see the after-spike dynamics (membrane potential reset and refractory period). Q7. Try to make HH neuron models spike at a regular regime for both input conditions. In [33]: T = 500.0 # simulation time nu_ext = 15e3 # firing rate of external Poisson source J = 0.08 # synaptic weight d = 0.1 # delay C = 100.0 # membrane potential capacitance mu = J * 1e-3 * nu_ext * C # mean input in pAa I_ext = mu # external current In [34]: neuron_params = { 'g_K' : 3000.0 , 'g_Na' : 16000.0 , 'g_L' : 60.0 } In [35]: const_model = HHmodel ( model_name = \"hh_psc_alpha\" , spike_generator = None , reset = True , display = False ) const_model . set_params ( \"neuron\" , ** neuron_params ) const_model . set_params ( \"neuron\" , I_e = I_ext ) poisson_model = HHmodel ( model_name = \"hh_psc_alpha\" , spike_generator = \"poisson_generator\" , reset = False , display = False ) poisson_model . set_params ( \"neuron\" , ** neuron_params ) poisson_model . set_params ( \"spike_generator\" , rate = nu_ext ) poisson_model . build ( weight = J , delay = d , display = False ) neurons = const_model . neuron + poisson_model . neuron multimeters , spikedetectors = mkMultiDetectors ( 2 , display = False ) nest . Connect ( multimeters , neurons , 'one_to_one' ) nest . Connect ( neurons , spikedetectors , 'one_to_one' ) nest . Simulate ( T ) axL , axR = plotMultResults ( multimeters , spikedetectors , ** plot_infos ) axL . legend (), axR . legend (), axR . set_xlim ( 0 , T ), axR . set_ylim ( - 80 , 40 ) plt . show () Rate of neuron stimulated with constant input input: 56.112 Rate of neuron stimulated with Poisson input input: 48.096 F-I curve As you have seen in the past figures, the firing rate of the neuron can change given different external current I_e . It's possible to plot this relationship and its usually referred to as the F-I curve . In [36]: from OIST.tutorial2 import FiringRate In [37]: neuron_params = { 'C_m' : 250.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [38]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () As you can observe from this figure, given the parameter setup, the neuron in a leaky-integrate-and-fire model starts to fire spikes at around 370 pA of external input current I_e . For this particular case, V_th was chosen to be low to observe the trend of the firing rate as external current is increasing. Modifying the value of the capacitance C_m moves this curve in the x-axis Modifying the refractory period t_ref slows down the firing rate i.e. more current is required for a given firing rate. Q8. Observe these changes in the F-I curve by modifying the neuron model parameters. In [39]: neuron_params = { 'C_m' : 150.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [40]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () In [41]: neuron_params = { 'C_m' : 350.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 2.0 , 'tau_m' : 10.0 , } In [42]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () In [43]: neuron_params = { 'C_m' : 250.0 , 'E_L' : 0. , 'V_m' : 0. , 'V_reset' : 0. , 'V_th' : 15. , 't_ref' : 1.0 , 'tau_m' : 10.0 , } In [44]: I_es = ( 200.0 , 600.0 , 5.0 ) rates = [ FiringRate ( \"iaf_psc_delta\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ), plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () Q10. Repeat these simulations with the HH neuron model hh_psc_alpha by modifying channel conductances. In [45]: neuron_params = { 'g_K' : 3600.0 , 'g_Na' : 12000.0 , 'g_L' : 30.0 } In [46]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [47]: neuron_params = { 'g_K' : 3600.0 , 'g_Na' : 13000.0 , 'g_L' : 30.0 } In [48]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [49]: neuron_params = { 'g_K' : 3800.0 , 'g_Na' : 12000.0 , 'g_L' : 30.0 } In [50]: I_es = ( 300.0 , 1000.0 , 5.0 ) rates = [ FiringRate ( \"hh_psc_alpha\" , I_e , ** neuron_params ) for I_e in np . arange ( * I_es )] plt . plot ( np . arange ( * I_es ), rates ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ), plt . xlabel ( r '$I_e$ (pA)' ), plt . ylabel ( 'Firing rate (Hz)' ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-2.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-2.html"},{"title":"1.Mathematical Models and Numerical Methods of Computational Neuroscience","text":"Unit Neural Coding and Brain Computing Unit (Tomoki Fukai) Teacher Alan Func Lecture Materials https://github.com/oist-ncbc/skill-pill-plus/tree/master/Tutorial-1_Ordinary-Differential-Equations Library https://github.com/iwasakishuto/University/tree/gh-pages/3A/theme/program/OIST/tutorial1.py In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: import sys sys . path . append ( \"path/to/library\" ) # Like \"University/3A/theme/program\" Agenda Brief introduction of Differential Equations Neuronal Models Numerical Method to Simulate Neuronal Models How the Network can be trained Brief introduction of Differential Equations Ordinary Differential Equations A fundamental tool in theoretical Science The differential equation gives the dependence of derivatives $$F\\left[\\frac{d&#94;nx(t)}{dt&#94;n},\\cdots,\\frac{dx(t)}{dt},C\\right] = 0$$ As we can calculate the whole path ways if we know the velocity($v=dx(t)/dt$), by knowing the slopes, one may trace the whole curve!! Examples of Models and Theories Simple Harmonic Oscillator Heat Equation(1-D) An oscillator that is neither driven nor damped. How the distribution of some quantity (such as heat) evolves over time in a solid medium $$\\underset{\\text{Acceleration}}{\\frac{d&#94;2x(t)}{dt&#94;2}}+\\underset{\\text{Returning Force}}{\\omega&#94;2x(t)} = 0$$ $$\\underset{\\text{Rate of Heat}}{\\frac{\\partial u(x,t)}{\\partial t}}+\\underset{\\text{Returning Force}}{\\alpha\\frac{\\partial&#94;2u(x,t)}{\\partial x&#94;2}} = 0$$ Implementation by Numerical Method Euler Method Runge-Kutta Methods Euler Method Euler method has a relatively large error. There are some extensions of the Euler method(one of them are Mid-Point method. ) In [3]: X = np . arange ( - 1.0 , 6.5 , 0.5 ) Y = 1 / 6 * X ** 3 dYdX = 1 / 2 * X ** 2 In [4]: Euler_dYdX_bigger = ( Y [ 2 :] - Y [: - 2 ])[ 2 :] # step size=1 dY/dX(t) = X(t+1)-X(t) Euler_dYdX_smaller = ( Y [ 1 :] - Y [: - 1 ])[ 2 : - 1 ] / 0.5 # step size=0.5 dY/dX(t) = (X(t+0.5)-X(t))/0.5 MidPointEuler_dYdX = ( Y [ 2 :] - Y [: - 2 ])[ 1 : - 1 ] # step size=1 dY/dX(t) = X(t+0.5)-X(t-0.5) In [5]: def CompareNumerical ( ax , X , Y , label , marker , color ): ax . scatter ( X [ 2 : - 2 ], Y , label = label , marker = marker , color = color ) ax . plot ( X [ 2 : - 2 ], Y , color = color , alpha = 0.5 ) return ax In [6]: fig , ax = plt . subplots () ax = CompareNumerical ( ax , X , Euler_dYdX_bigger , \"Step = 1.0\" , \"s\" , \"b\" ) ax = CompareNumerical ( ax , X , Euler_dYdX_smaller , \"Step = 0.5\" , \"o\" , \"r\" ) ax = CompareNumerical ( ax , X , MidPointEuler_dYdX , \"Mid-point h=1.0\" , \"&#94;\" , \"g\" ) ax . plot ( X [ 2 : - 2 ], dYdX [ 2 : - 2 ], linestyle = \"--\" , label = \"Analytic\" , color = \"black\" ) ax . legend (), ax . grid (), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$y$\" ) plt . show () The mid-point method is surprisingly good!! Runge-Kutta Methods A family of implicit and explicit iterative methods. More: Wikipedia Neuronal Models To Model a Neuron... Neurons can be excited by current injection . If the membrance potential(Voltage) is larger than some thresholds , an action potential will be triggered. Membrance potential means the potential difference across the neuron membrance. → Relative can be controlled by concentrations of irons($\\mathrm{Na}&#94;+,\\mathrm{K}&#94;+,\\mathrm{Cl}&#94;-$) is maintained by their ion bumps , and at the resting state, it is around $65\\mathrm{mV}$. sometimes across the threshold , and when it occurs, the neuron fires works like a capacitor with a leaky current. Leaky Integrate-and-Fire(LIF) model In 1907, Lapicque proposed a simple model(which is just the time derivative of the law of capacitance ($Q=CV$) .) for neurons: $$I(t)-\\frac{V_m(t) - V_{rest}}{R_m} = C_m\\frac{dV_m(t)}{dt}$$ $I$: Input current (=const.) $V_m$: Membrance potential $V_{rest}$: Resting potential of the membrance $R_m$: Membrane resistance (we find it is not a perfect insulator as assumed previously) $C_m$: Capacity of the membrance. When an input current is applied, the membrane voltage increases with time until it reaches a constant threshold $V_{th}$ At the point, a delta function spike occurs and the voltage is reset to its resting potential($V_{rest}$). The LIF neuron fired more frequently as the input current increases. Leak Conductance Ion permeability at resting membrane potential, allowing a constant flow of current through the cell membrane due to channels that remain open at resting membrane potential (Ref: Encyclopedia of Neuroscience ) In [7]: from OIST.tutorial1 import LIFsimulation , LITSpikeFrequency In [8]: params = { 'V_rest' : - 65 , 'V_thre' : - 40 , 'V_reset' : - 70 , 'V_fire' : 20 , 'C' : 2e-4 , 'R' : 7.5e4 , 'I' : 5e-4 , 'dt' : 0.1 , 'T' : 100 , } In [9]: time , Vm = LIFsimulation ( ** params ) plt . plot ( time , Vm , color = \"black\" ) plt . xlabel ( \"time[ms]\" ), plt . ylabel ( \"V[mV]\" ), plt . grid () plt . show () In [10]: Is = [ 0.5e-3 , 1e-3 , 1.5e-3 , 2.0e-3 , 2.5e-3 , 3.0e-3 ] freqs = LITSpikeFrequency ( Is , ** params ) plt . plot ( Is , freqs , color = \"blue\" ), plt . scatter ( Is , freqs , color = \"blue\" , marker = \"s\" ) plt . title ( \"How Spiking Frequency Depends on Input Current\" ), plt . xlabel ( \"Input Current: I [uA]\" ), plt . ylabel ( \"Spiking Frequency [Hz]\" ), plt . grid () plt . show () ※ The LIF neuron fired more frequently as the input current increases. Hodgkin-Huxley model $$ I = C_m + \\frac{dV_m}{dt} + g_{\\mathrm{l}}\\left(V_m-V_{\\mathrm{l}}\\right) + g_{\\mathrm{K}}n&#94;4\\left(V_m-V_{\\mathrm{K}}\\right) + g_{\\mathrm{Na}}m&#94;3h\\left(V_m-V_{\\mathrm{Na}}\\right)\\\\ \\begin{cases} \\begin{aligned} \\frac{dn}{dt} &= \\alpha_n(V_m)(1-n) + \\beta_n(V_m)n\\\\ \\frac{dm}{dt} &= \\alpha_m(V_m)(1-m) + \\beta_m(V_m)m\\\\ \\frac{dh}{dt} &= \\alpha_h(V_m)(1-h) + \\beta_h(V_m)h\\\\ \\end{aligned} \\end{cases} $$ Proposed by Hodgkin and Huxley in 1952 (They received the 1963 Nobel Prize in Physiology or medicin for this work.) Like Leaky Integrate-and-Fire(LIF) model , the input current (const.) charges up the membrance capacitor. Leaky conductance This model considers also ion currents invoving potassium ion ($\\mathrm{K}&#94;+$) and Sodium ion ($\\mathrm{Na}&#94;{+}$) induced by the potential difference. Sodium ion : has a reversal potential depolarizing the membrance. The conductivity is voltage-gated. Potassium ion : has a reversal potential hyper-polarizing the membrance. The conductivity is voltage-gated. The individual gates act like a first order chemical reaction with two states: $$\\text{Shut}\\overset{\\alpha}{\\underset{\\beta}{\\rightleftarrows}}\\text{Open}$$ Propose that Each $\\mathrm{K}$ channel has $4$ identical activation gates.( $\\mathbb{P}_{\\text{open}}=n$ ) Each $Na$ channel has $3$ avtivation gates( $\\mathbb{P}_{\\text{open}}=m$ ), and $1$ inactivation gate( $\\mathbb{P}_{\\text{open}}=h$ ). Action Potential Stimulas raises the membrane potential. (Depolarization) If membrance potential over the Threshold , voltage-gated sodium channels will open, and due to the sodium concentration gradient (ex > in) , sodium ion flow into the cell. This process raises the membrance potential, and it gets further depolarized. As the membrance become **\"too large\"**, sodium ion channel closes , and after that ( there is a delay ), voltage-gated potassium channel will open. When the membrance potential return to the resting state, potassium channel closes, but as this response takes time, the membrance potential will be lower than the initial voltage. (Hyperpolarization) (※ Resting membrance potential means the equilibrium point between \"electrical gradient\" and \"concentration gradient\".) How the Network can be trained Long-term Synaptic Plasticity Stimulas are passed through a glutamate . Glutamate connects with AMPA receptor and it causes sodium channels opening. If Depolarization occurs, NMDA channel (which was closed by Magnesium) open, and Calcium flows into the cell. The amount of Calcium is Large : LTP(Long-term potentiation) occurs. Increase the AMPA. Small : LTD(Long-term depression) occurs. Decrease the AMPA. Spike-Timing-Depenent Plasticity (Classical) The change in $w_{ji}$ depends on the spike timings In order to perform STDP with differential equatins, an online implementation of STDP is proposed $$ \\begin{aligned} \\tau_+\\frac{dx}{dt} &= -x + a_+(x)\\sum_{t_f}\\delta(t-t_f)\\\\ \\tau_-\\frac{dy}{dt} &= -y + a_-(y)\\sum_{t_n}\\delta(t-t_n)\\\\ \\Longrightarrow \\frac{dw}{dt} &= A_+(w)x(t)\\sum_{t_n}\\delta(t-t_n) - A_-(w)y(t)\\sum_{t_f}\\delta(t-t_f) \\end{aligned} $$ In [11]: from OIST.tutorial1 import STDPsimulation In [12]: time , Results , Info = STDPsimulation ( pre = 10 , post = 30 ) In [13]: fig = plt . figure ( figsize = ( 14 , 6 )) for i , vals in enumerate ( Results ): ax = fig . add_subplot ( 3 , 2 , i + 1 ) ax . plot ( time , vals , color = Info . get ( \"color\" )[ i ]) ax . set_xlabel ( \"time\" ), ax . set_ylabel ( Info . get ( \"label\" )[ i ]), ax . set_title ( Info . get ( \"label\" )[ i ]) plt . tight_layout () plt . show () ※ As \"Pre - Post\" changes... In [14]: pre = 40 for diff in range ( - 40 , 40 ): _ , Results , _ = STDPsimulation ( pre = pre , post = pre - diff ) dws = Results [ - 1 ] dw = dws [ np . argmax ( np . abs ( dws ))] plt . scatter ( diff , dw , color = \"black\" , s = 10 ) plt . grid (), plt . xlabel ( \"$t_ {pre} - t_ {post} $\" , fontsize = 20 ), plt . ylabel ( \"$\\Delta w$\" , fontsize = 20 ) plt . show () Then, with an appropriate firing sequence, the network can be trained!! Take-Home Message Some neuronal behaviors can be mathematically modeled. Networks of neurons has the potential to do different computations. Those networks can be trained. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"OIST","url":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-1.html","loc":"https://iwasakishuto.github.io/University/3A/SkillPillPlus-tutorial-1.html"},{"title":"生物物理学 第7回(小テスト)","text":"k9xY5AJzEGKsgPzKIcHzfA==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-7-quiz.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-7-quiz.html"},{"title":"Pro.4 Itemset mining algorithm","text":"Problem Setting Implement the \"Itemset mining algorithm (LCM)\" to find out the most frequent closed patterns. Frequent Itemset Mining Finding all \"frequent\" sets of elements (items) appearing $\\sigma$ times or more in a database. Terminology Name description Itemset $$I = \\left\\{1,\\ldots,M\\right\\}$$ Transaction $$t\\subset I$$ Transaction database $$\\mathcal{T}=\\left\\{t_1,\\ldots,t_N\\right\\}$$ Pattern $$P \\subset I$$ Occurrence $$P\\subset\\exists t\\in\\mathcal{T}$$ Denotation $$\\mathcal{T}(P) = \\left\\{t\\in\\mathcal{T}\\mid P\\subset t\\right\\}$$ Support/Frequency $$n_{\\mathcal{T}}(P) = \\mid\\mathcal{T}(P)\\mid$$ Implementation data In [1]: from kerasy.utils import flatten_dual In [2]: # retail_1based_500.txt with open ( \"itemset_mining/retail_1based_500.txt\" , mode = \"r\" ) as f : retail_500 = [ name . rstrip ( \" \\n \" ) . split ( \" \" ) for name in f . readlines ()] print ( f \"The number of transactions: { len ( retail_500 ) } \" ) print ( f \"The number of unique items: { len ( set ( flatten_dual ( retail_500 ))) } \" ) The number of transactions: 500 The number of unique items: 2058 In [3]: # retail_1based_1000.txt with open ( \"itemset_mining/retail_1based_1000.txt\" , mode = \"r\" ) as f : retail_1000 = [ name . rstrip ( \" \\n \" ) . split ( \" \" ) for name in f . readlines ()] print ( f \"The number of transactions: { len ( retail_1000 ) } \" ) print ( f \"The number of unique items: { len ( set ( flatten_dual ( retail_1000 ))) } \" ) The number of transactions: 1000 The number of unique items: 3182 In [4]: from kerasy.search.itemset import FrequentSet from kerasy.search.itemset import create_one_hot def mine ( method , data_name = \"500\" , threshold = 10 ): retail = { \"500\" : retail_500 , \"1000\" : retail_1000 , } . get ( data_name ) database , idx2data = create_one_hot ( retail ) model = FrequentSet ( threshold = threshold ) model . fit ( database , method = method ) print ( f \"num frequent sets: { len ( model . all ) - 1 } \" ) fn = f \"tree_structure-retail_ { data_name } - { method } .png\" ret = model . export_graphviz ( fn , class_names = idx2data ) if ret : print ( f \"Graph image was saved at: ` { fn } `\" ) else : raise ValueError ( \"Graph was not generated.\" ) print () itemset_mining / Algorithm In [5]: mine ( method = \"all\" , data_name = \"500\" , threshold = 10 ) num frequent sets: 68 Graph image was saved at: `tree_structure-retail_500-all.png` In [6]: mine ( method = \"all\" , data_name = \"1000\" , threshold = 10 ) num frequent sets: 217 Graph image was saved at: `tree_structure-retail_1000-all.png` Summary Itemset mining is the simplest of all mining algorithms. Need to maintain occurrence of each pattern in database. Tree by lexicographical order is (implicitly) used. Closed Itemset mining PROBLEM in Frequent Pattern Mining Huge Number of frequent itemsets Hard to analyze Most of them are similar SOLUTION in Frequent Pattern Mining Find only closed patterns Observation : Most frequent itemset $X$ can be extended without changing occurrence by adding new elements. definition : An itemset $X$ is a \"closed set\" iff there is no proper superset of $X$ with the same frequency (thus the same occurrence set). A closed itemset is the maximal set among all itemsets with the same occurrences. Equivalence class $[X] =\\left\\{Y | \\mathrm{Occ}(X)=\\mathrm{Occ}(Y)\\right\\}$ Implementation (LCM) In [7]: mine ( method = \"closed\" , data_name = \"500\" , threshold = 10 ) num frequent sets: 59 Graph image was saved at: `tree_structure-retail_500-closed.png` In [8]: mine ( method = \"closed\" , data_name = \"1000\" , threshold = 10 ) num frequent sets: 213 Graph image was saved at: `tree_structure-retail_1000-closed.png` Compare # all closed retail_1based_500.txt retail_1based_1000.txt Optimization [ ] Occurrence deliver when num_items large and sparse transaction. Exclude many potential children. database reduction [x] Create small transaction database in any iteration by removing. [ ] transaction not containing $C$. [ ] items of $C$. [x] items with frequency less than minimal support. [x] transaction id and item id re-indexing. [ ] duplicated transactions are merged with weight factor. [x] Bit matrix Reference LCM: An Efficient Algorithm for Enumerating Frequent Closed Item Sets Statistical significance of combinatorial regulations. A Fast Method of Statistical Assessment for Combinatorial Hypotheses Based on Frequent Itemset Enumeration In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-19.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-19.html"},{"title":"Pro.3 Gene Network Inference","text":"Problem Setting Implement the \"SCODE algorithm\" to find out the regulatory relationships of genes in single cells. SCODE Link: paper: SCODE: An efficient regulatory network inference algorithm from single-cell RNA-Seq during differentiation Github: SCODE developed the novel and efficient algorithm SCODE to infer regulatory networks, based on ordinary differential equations. The performance and runtimes of SCODE was SOTA. provides a promising approach for further single-cell differentiation analyses. Algorithms In the paper above, they focus on TFs and inferring TF regulatory networks. 1. Describing regulatory networks and expression dynamics with linear ODEs First, they describe TF expression dynamics throughout differentiation with linear ODEs: $$\\frac{d\\mathbf{x}_t}{dt} = \\mathbf{Ax}_t,\\quad \\mathbf{x}_t\\in\\mathbb{R}&#94;G,\\mathbf{A}\\in\\mathbb{R}&#94;{G\\times G}\\quad\\cdots (1)$$ where $G$ is the number of TFs. The observed expression data consist of a $G \\times C$ matrix $\\left(\\mathbf{⁠X}(e)\\right)$, where $C$ is the number of cells. In addition, the time parameter of a cell $c$ is given as $t_c$. 1.1. Deriving $\\mathbf{A}$ from a linear ODE transformation At first, they consider the following linear ODE: $$d\\mathbf{z} = \\mathbf{Bz}dt\\quad\\cdots (2)$$ where $\\mathbf{z}$ is a vector of length $G$ and $\\mathbf{B}$ is a known square matrix. If we know a matrix $\\mathbf{W}$ that satisfies $\\mathbf{x} = \\mathbf{Wz}$, we can derive the ODE of $\\mathbf{x}$ by transforming the ODE of $\\mathbf{z}$ as follows: $$d\\mathbf{z} = \\mathbf{Bz}dt\\quad\\cdots (3)$$$$ \\begin{aligned} d\\mathbf{z} &= \\mathbf{BW}&#94;{-1}\\mathbf{Wz}dt\\\\ \\mathbf{W}d\\mathbf{z} &= \\mathbf{WBW}&#94;{-1}\\mathbf{Wz}dt\\\\ d\\mathbf{x} &= \\underbrace{\\mathbf{WBW}&#94;{-1}}_{\\mathbf{A}}\\mathbf{x}dt \\end{aligned} $$ Therefore, if the parameter $\\mathbf{B}$ of $d\\mathbf{z} = \\mathbf{Bz}dt$ and the relationship $\\mathbf{x} = \\mathbf{Wz}$ are given, we can derive $\\mathbf{A}$ from $\\mathbf{WBW}&#94;{-1}$. 1.2. Estimating $\\mathbf{W}$ using linear regression They assume that the problem of $\\mathbf{W}$ inference can be regarded as a linear regression problem for each gene, as follows: $$\\mathbf{X}_{gc}&#94;{(e)} = \\sum_{i=1}&#94;G \\mathbf{W}_{gi}\\mathbf{Z}_{ic}&#94;{(e)} + \\boldsymbol{\\varepsilon}\\quad\\cdots (4)$$ where $\\boldsymbol{\\varepsilon}$ is a noise term. Therefore, $\\mathbf{W}$ can be optimized analytically and efficiently by linear regression for each TF. 1.3. Dimension reduction of $\\mathbf{z}$ The basic idea of reduction is that the patterns of expression dynamics are limited and expression dynamics can be reconstructed with a small number of patterns. For the next step, they consider a small vector $\\mathbf{z}$ to represent the original expression dynamics. Hereafter, $\\mathbf{z}$ is a vector of length $D$, with $D\\ll G$⁠. In this case, $\\mathbf{W}$ is a $G\\times D$ matrix, and hence we used a pseudo-inverse matrix $\\mathbf{W}&#94;{+}$ instead of the inverse matrix, and $\\mathbf{A}$ is derived from $\\mathbf{A}=\\mathbf{WBW}&#94;{+}$. The matrix $\\mathbf{W}$ is estimated as before, via linear regression. By using a small vector $\\mathbf{z}$, the time complexity of estimation of $\\mathbf{W}$ becomes much lower. 1.4 Optimizing $\\mathbf{B}$ Thus far, we have assumed $\\mathbf{B}$ is given. To represent the original expression dynamics with small values of $D$, we optimize $\\mathbf{B}$ for the next step. We suppose that the appropriate value of $\\mathbf{B}$ satisfes the condition that the $\\mathbf{Z}&#94;{(e)}$ generated from $d\\mathbf{z}=\\mathbf{Bz}dt$ can predict $\\mathbf{X}&#94;{(e)}$ with $\\mathbf{WZ}&#94;{(e)}$ accurately. $$\\frac{d\\mathbf{z}_t}{dt} = \\mathbf{Bz}_t\\longrightarrow \\mathbf{z}_t = \\left(e&#94;{b_1t},\\ldots,e&#94;{b_Dt}\\right)$$ Therefore, we evaluate the appropriateness of the matrix $\\mathbf{B}$ with the following residual sum of squares (RSS) : $$\\text{RSS}\\left(\\mathbf{B},\\mathbf{W}\\right) = \\sum_{g,c}\\left(\\mathbf{X}&#94;{(e)}_{gc} - \\sum_{i=1}&#94;D\\mathbf{W}_{gi}\\mathbf{Z}_{ic}&#94;{(e)}\\right)\\quad\\cdots (5)$$ In this research, they assume $\\mathbf{B}$ is a diagonal matrix and the elements $\\mathbf{B}_{ii}$ satisfy $b_{\\min}\\leq \\mathbf{B}_{ii}\\leq b_{\\max}$. This limitation is acceptable because large and small values of $\\mathbf{B}_{ii}$ represent a dynamics of sharp change and seem to be an inefficient basis for reconstructing the expression dynamics. They optimize $\\mathbf{B}$ by random sampling and iterative optimization so that the RSS decreases. The code is given from \"kerasy/Bio/scode.py\" , and the brief pseudocode is given below. B = initialize () for k in range ( iter_max ): # Generate from dz = B&#94;{(k)}zdt Z = generateZ ( B ) # Solution of linear regression (X&#94;{(e)}≃WZ&#94;{(e)}) W = optimize ( X , Z ) if RSS ( B , W ) < RSS ( B_best , W_best ): B_best = B W_best = W else : B = B_best # Uniform random value [1,D] i = np . random . randint ( D ) B [ i , i ] = np . random . uniform ( low = b_min , high = b_max , size = 1 ) 1.5. Regularized Least Square It is likely to over-fit especially when model is too complicated. For avoiding it, we introduce the idea of adding a regularization term to an error function. $$\\text{RSS}\\left(\\mathbf{W},\\mathbf{B}\\right) + \\lambda \\left\\|\\mathbf{W}\\right\\|&#94;2$$ Then, the total error function and Maximum likelihood estimated $\\mathbf{W}$ is expressed as $$ \\begin{aligned} E\\left(\\mathbf{W}\\right) &= \\text{RSS}\\left(\\mathbf{W},\\mathbf{B}\\right) + \\lambda \\left\\|\\mathbf{W}\\right\\|&#94;2\\\\ &= \\sum_{g=1}&#94;G\\sum_{c=1}&#94;C\\left(x_{gc}&#94;{\\text{obs}} - \\sum_{d=1}&#94;DW_{gd}z_{t_cd}\\right)&#94;2 + \\lambda\\sum_{g=1}&#94;G\\sum_{d=1}&#94;DW_{gd}&#94;2\\\\ &= \\text{Tr}\\left\\{\\left(\\mathbf{X}&#94;{\\text{obs}} - \\mathbf{WZ}&#94;T\\right)&#94;T\\left(\\mathbf{X}&#94;{\\text{obs}} - \\mathbf{WZ}&#94;T\\right) + \\lambda\\mathbf{W}&#94;T\\mathbf{W}\\right\\}\\\\ \\frac{\\partial E\\left(\\mathbf{W}\\right)}{\\partial W_{gd}}&= -2\\sum_{c=1}&#94;Cz_{t_cd}\\left(x_{gc}&#94;{\\text{obs}}\\ - \\sum_{d&#94;{\\prime}=1}&#94;DW_{gd}z_{t_cd&#94;{\\prime}}\\right) + 2\\lambda W_{gd} = 0\\\\ 0 &= -2\\left\\{\\sum_{c=1}&#94;Cx_{gc}&#94;{\\text{obs}}z_{t_cd} - \\sum_{d&#94;\\prime=1}&#94;DW_{gd&#94;{\\prime}}\\left(\\sum_{c=1}&#94;Cz_{t_cd&#94;{\\prime}}z_{t_cd} + \\lambda\\right)\\right\\}\\\\ &= -2 \\left\\{\\mathbf{X}&#94;{\\text{obs}}\\mathbf{Z} - \\mathbf{W}\\left(\\mathbf{Z}&#94;T\\mathbf{Z} + \\lambda \\mathbf{I}\\right)\\right\\}_{gd}\\\\ \\therefore\\mathbf{W}_{\\text{ML}} &= \\mathbf{X}&#94;{\\text{obs}}\\mathbf{Z}\\left(\\mathbf{Z}&#94;T\\mathbf{Z} + \\lambda \\mathbf{I}\\right)&#94;{-1} \\end{aligned} $$ Implementation data In [1]: import numpy as np In [2]: with open ( \"singlecell/tf.txt\" , mode = \"r\" ) as f : tf_names = [ name . rstrip ( \" \\n \" ) for name in f . readlines ()] print ( f \"TF Name types: { len ( tf_names ) } \" ) TF Name types: 100 In [3]: with open ( \"singlecell/expr.txt\" , mode = \"r\" ) as f : expressions = np . asarray ([ line . rstrip ( \" \\n \" ) . split ( \" \\t \" ) for line in f . readlines () ], dtype = float ) num_tf , num_cells = expressions . shape print ( f \"the number of tf : { num_tf } \" ) print ( f \"the number of cells: { num_cells } \" ) the number of tf : 100 the number of cells: 758 In [4]: with open ( \"singlecell/time_normalized.txt\" , mode = \"r\" ) as f : time_normalized = np . asarray ([ line . rstrip ( \" \\n \" ) . split ( \" \\t \" )[ - 1 ] for line in f . readlines () ], dtype = float ) print ( f \"the number of cells: { len ( time_normalized ) } \" ) the number of cells: 758 Algorithm In [5]: from kerasy.Bio.scode import SCODE In [6]: D = 4 lamda = 1e-2 b_min = - 10 b_max = 10 seed = 2020 max_iter = 1000 In [7]: model = SCODE ( lamda = lamda , b_min = b_min , b_max = b_max , random_state = seed ) In [8]: model . fit ( X = expressions , t = time_normalized , dimension = D , max_iter = max_iter , verbose = 1 ) 1000/1000 [####################] 100.00% - 0.909s RSS: 410.1052927893475 In [9]: model . show_corr ( 10 , gene_name = tf_names ) | # | Regulate | Regulated | Correlation | =================================== | 01 | NANOG | SMAD2 | +3.022 | | 02 | NANOG | PRDM1 | +2.941 | | 03 | TERF1 | SMAD2 | +2.500 | | 04 | TERF1 | PRDM1 | +2.457 | | 05 | KAT7 | SMAD2 | +2.368 | | 06 | POU5F1 | SMAD2 | +2.351 | | 07 | NANOG | BBX | +2.337 | | 08 | NANOG | MIER1 | +2.274 | | 09 | NANOG | OTX2 | +2.258 | | 10 | NANOG | AEBP2 | +2.235 | Observe how dimension affects the results In [10]: RSSs = [] dimensions = np . arange ( 1 , 10 ) for d in dimensions : print ( f \" \\n Dimension: { d } \" ) model = SCODE ( lamda = lamda , b_min = b_min , b_max = b_max , random_state = seed ) model . fit ( X = expressions , t = time_normalized , dimension = d , max_iter = max_iter , verbose =- 1 ) model . show_corr ( 5 , gene_name = tf_names ) RSSs . append ( model . RSS ) Dimension: 1 | # | Regulate | Regulated | Correlation | ================================== | 1 | SMAD2 | SMAD2 | +0.214 | | 2 | SOX11 | SMAD2 | +0.211 | | 3 | SMAD2 | SOX11 | +0.211 | | 4 | SOX11 | SOX11 | +0.209 | | 5 | TERF1 | SMAD2 | +0.207 | Dimension: 2 | # | Regulate | Regulated | Correlation | ================================== | 1 | NANOG | EOMES | +0.325 | | 2 | TERF1 | EOMES | +0.310 | | 3 | NANOG | GATA6 | +0.307 | | 4 | TERF1 | GATA6 | +0.294 | | 5 | NANOG | SMAD2 | +0.285 | Dimension: 3 | # | Regulate | Regulated | Correlation | ================================== | 1 | EOMES | ZNF516 | +1.017 | | 2 | EOMES | ID2 | -1.007 | | 3 | EOMES | MIER1 | +0.903 | | 4 | EOMES | SMAD2 | +0.889 | | 5 | EOMES | AEBP2 | +0.886 | Dimension: 4 | # | Regulate | Regulated | Correlation | ================================== | 1 | NANOG | SMAD2 | +3.022 | | 2 | NANOG | PRDM1 | +2.941 | | 3 | TERF1 | SMAD2 | +2.500 | | 4 | TERF1 | PRDM1 | +2.457 | | 5 | KAT7 | SMAD2 | +2.368 | Dimension: 5 | # | Regulate | Regulated | Correlation | ================================== | 1 | NANOG | HAND1 | -10.761 | | 2 | SOX11 | HAND1 | -10.228 | | 3 | POU5F1 | HAND1 | -10.041 | | 4 | SMAD2 | HAND1 | -9.692 | | 5 | NANOG | FOXF1 | -9.415 | Dimension: 6 | # | Regulate | Regulated | Correlation | ================================== | 1 | ZEB1 | HAND1 | -801.468 | | 2 | MAF | HAND1 | -755.309 | | 3 | SALL1 | HAND1 | -750.851 | | 4 | PRDM1 | HAND1 | +692.698 | | 5 | SMAD2 | HAND1 | +683.039 | Dimension: 7 | # | Regulate | Regulated | Correlation | ================================== | 1 | ZEB1 | HAND1 | +34.654 | | 2 | MAF | HAND1 | +28.955 | | 3 | SALL1 | HAND1 | +27.721 | | 4 | SMAD2 | HAND1 | -26.947 | | 5 | SOX11 | HAND1 | -26.131 | Dimension: 8 | # | Regulate | Regulated | Correlation | ================================== | 1 | OTX2 | GATA6 | -67023.987 | | 2 | ZEB1 | GATA6 | -64173.030 | | 3 | OTX2 | HAND1 | -62032.353 | | 4 | ZEB1 | HAND1 | -59377.698 | | 5 | MAF | GATA6 | -55372.882 | Dimension: 9 | # | Regulate | Regulated | Correlation | ================================== | 1 | MAF | HAND1 | -1363.145 | | 2 | ZEB1 | HAND1 | -1214.007 | | 3 | MAF | GATA6 | -1178.206 | | 4 | BAZ2B | HAND1 | -1062.895 | | 5 | ZEB1 | GATA6 | -1042.358 | In [11]: import matplotlib.pyplot as plt plt . plot ( dimensions , RSSs , color = \"red\" ) plt . title ( \"The relationship between \\n dimensions and RSS\" , fontsize = 16 ) plt . xlabel ( \"dimensions\" ) plt . ylabel ( \"RSS\" ) plt . grid () plt . show () According to Elbow Law, dimension=3 looks best. In [12]: best_dimension = 3 In [13]: model = SCODE ( lamda = lamda , b_min = b_min , b_max = b_max , random_state = seed ) model . fit ( X = expressions , t = time_normalized , dimension = best_dimension , max_iter = max_iter , verbose =- 1 ) In [14]: model . plot_corr () In [15]: reg , reged = model . top_pairs () time = sorted ( time_normalized ) expressions_pred = model . predict ( time ) model . show_corr ( 1 , gene_name = tf_names ) | # | Regulate | Regulated | Correlation | ================================== | 1 | EOMES | ZNF516 | +1.017 | In [16]: def plot_expression_level ( idx , text = \"\" ): plt . title ( f \"The relationship between \\n Predicted and Answer ( { tf_names [ idx ] }{ text } )\" ) plt . plot ( time , expressions_pred [ idx ], color = \"red\" , label = \"Pred expression level\" ) plt . scatter ( time_normalized , expressions [ idx ], color = \"blue\" , label = \"Ans expression level\" , s = 1 ) plt . legend () plt . show () In [17]: plot_expression_level ( reg , text = \", regulate\" ) In [18]: plot_expression_level ( reged , text = \", regulated\" ) Relationship between EOMES and ZNF516 EOMES This gene belongs to the TBR1 (T-box brain protein 1) sub-family of T-box genes that share the common DNA-binding T-box domain. The encoded protein is a transcription factor which is crucial for embryonic development of mesoderm and the central nervous system in vertebrates. The protein may also be necessary for the differentiation of effector CD8+ T cells which are involved in defense against viral infections. A similar gene disrupted in mice is shown to be essential during trophoblast development and gastrulation. Alternative splicing results in multiple transcript variants. [provided by RefSeq, May 2013] ZNF516 Zinc-finger proteins bind nucleic acids and play important roles in various cellular functions, including cell proliferation, differentiation, and apoptosis. This gene encodes a zinc-finger protein, and belongs to the krueppel C2H2-type zinc-finger protein family. It may be involved in transcriptional regulation. [provided by RefSeq, Sep 2012] In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-18.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-18.html"},{"title":"Pro.2 最適行動列アルゴリズム","text":"quXhNcXvdC4ghegm4OpBAA==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-17.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-17.html"},{"title":"Pro.1 配列モチーフ探索","text":"Problem Setting Identify the common sequencial features(sequence motif) from large amount of sequences data containing tf-binding regions. DeepBind Link: Paper Software tool \"Deep Learning\" techniques to ascertain the sequence specificities of DNA- and RNA-binding proteins from experimental data . outperforms other state-of-the-art methods. (Published: 27 July 2015) Results are readily visualized as a weighted ensemble of position weight matrices(PWMs) a mutation map that indicates how variations affect binding within a specific sequence. computes a binding score $f(s)$ using four stages: $$f(s) = \\text{Neural Network}_W\\left(\\text{pool}\\left(\\text{rect}_b\\left(\\text{conv}_M(s)\\right)\\right)\\right)$$ Convolution : Scan a set of motif detectors (length=$L$) with parameters $M&#94;{(j)}$ $$\\text{conv}_M(s)_{ij} = \\sum_{k=0}&#94;{K-1}\\sum_{l=0}&#94;{L-1}M&#94;{(j)}_{k,i+l}s_{ki}$$ Rectification : Extract some positions $$\\text{rect}_b(x_{ij}) =\\begin{cases} x_{ij} + b & (\\text{if }x_{ij} + b>0)\\\\0 & (\\text{otherwise})\\end{cases}$$ Pooling : Compute the maximum and average of each $\\text{rect}_b\\left(\\cdot\\right)$ across the sequence. Maximizing : identify the presence of longer motifs . Averaging : identify cumulative effects of short motifs $$\\text{pool}_{\\alpha}(x_{ij}) = \\alpha\\max_i\\left(x_{ij}\\right) + \\left(1-\\alpha\\right)\\underset{i}{\\text{ave}}\\left(x_{ij}\\right)$$ Neural Network : Combines the responses to produce a score. a: Five independent sequences being processed in parallel by single DeepBind model. b: The calibration, training and testing procedure. Implementation generate DataSets In [1]: import numpy as np from kerasy.utils import generateSeq_embedded_Motif ※ See kerasy/utils/generateSeq_embedded_Motif In [2]: # Types of Base (DNA) nuc = [ \"A\" , \"C\" , \"G\" , \"T\" ] num_class = len ( nuc ) nuc2code = dict ( zip ( nuc , np . identity ( num_class , dtype = np . int8 )[ range ( num_class )])) In [3]: nuc2code Out[3]: {'A': array([1, 0, 0, 0], dtype=int8), 'C': array([0, 1, 0, 0], dtype=int8), 'G': array([0, 0, 1, 0], dtype=int8), 'T': array([0, 0, 0, 1], dtype=int8)} In [4]: motif = np . asarray ([ [ 0.0 , 1.0 , 0.0 , 0.0 ], # C [ 0.5 , 0.0 , 0.0 , 0.5 ], # A/T [ 0.0 , 0.5 , 0.5 , 0.0 ], # C/G [ 0.0 , 0.0 , 1.0 , 0.0 ], # G [ 0.0 , 0.0 , 0.0 , 1.0 ], # T ]) len_motif , num_base_types = motif . shape In [5]: import matplotlib.pyplot as plt import seaborn as sns def visMotif_std ( motif , name , ax = None ): motif_std = ( motif - motif . min ()) / ( motif . max () - motif . min ()) if ax is None : fig , ax = plt . subplots ( figsize = ( 4 , 5 )) sns . heatmap ( motif_std , cbar = False , cmap = \"binary\" , ax = ax , fmt = \".3f\" , annot = True ) ax . set_xticklabels ( nuc ), ax . set_ylabel ( \"Motif position\" , fontsize = 14 ) ax . set_title ( name , fontsize = 18 ) return ax In [6]: visMotif_std ( motif , name = \"True\" ) plt . show () In [7]: len_sequence = 20 n_pos_train = 5000 n_neg_train = 5000 n_pos_test = 500 n_neg_test = 500 In [8]: seed_train = 2020 seed_test = seed_train + 1 In [9]: # Although DeepBind can be trained and tested on datasets containing varying-length sequences, # here, we fix the length for simplicity x_train , y_train = generateSeq_embedded_Motif ( n_pos_train , n_neg_train , len_sequence , motif , nuc , seed = seed_train ) x_test , y_test = generateSeq_embedded_Motif ( n_pos_test , n_neg_test , len_sequence , motif , nuc , seed = seed_test ) In [10]: x_train = np . asarray ([ np . vstack ([ nuc2code [ x ] for x in x_seq ]) for x_seq in x_train ]) x_test = np . asarray ([ np . vstack ([ nuc2code [ x ] for x in x_seq ]) for x_seq in x_test ]) y_train = np . asarray ( y_train ) . reshape ( - 1 , 1 ) y_test = np . asarray ( y_test ) . reshape ( - 1 , 1 ) In [11]: print ( f \"x_train.shape = { x_train . shape } \" ) print ( f \"y_train.shape = { y_train . shape } \" ) print ( f \"x_test.shape = { x_test . shape } \" ) print ( f \"y_test.shape = { y_test . shape } \" ) x_train.shape = (10000, 20, 4) y_train.shape = (10000, 1) x_test.shape = (1000, 20, 4) y_test.shape = (1000, 1) Building Network In [12]: import keras from keras.models import Sequential from keras.layers import Activation from keras.layers import Conv1D , GlobalAveragePooling1D from keras import backend as K Using TensorFlow backend. In [13]: # Single candidate motif is considered num_cand_mortif = 1 seed_weight = seed_train + seed_test batch_size = 32 epochs = 1000 In [14]: def prob_reg ( motif_matrix ): \"\"\" @params motif_matrix : shape=(len_motif, num_base_types, num_cand_mortif) \"\"\" # shape=(num_base_types,) probs = K . sum ( motif_matrix , axis = ( 1 , - 1 )) mean = K . mean ( probs ) return 0.001 * K . sqrt ( K . sum ( K . square ( probs - mean ))) In [15]: # Fixed the initial kernel weight. initial_kernel_weight = np . random . RandomState ( seed_weight ) . uniform ( size = ( len_motif , num_base_types , num_cand_mortif )) . astype ( np . float32 ) # initial_bias_weight = np.zeros(shape=1, dtype=np.float32) initial_conv_weights = [ initial_kernel_weight ] #, initial_bias_weight] In [16]: fig , ( ax_true , ax_ini ) = plt . subplots ( 1 , 2 , figsize = ( 8 , 5 ), sharey = True ) ax_true = visMotif_std ( motif , name = \"True\" , ax = ax_true ) ax_ini = visMotif_std ( initial_kernel_weight [:,:, 0 ], name = \"initial\" , ax = ax_ini ) plt . tight_layout () plt . show () simple model In [17]: # If there is a motif, indicate a high value. # # [Positive] [Negative] # ...... ========= .. .................... # ...... | Motif | .. .................... # ...... ========= .. .................... # \\\\\\\\ //// Convolution \\\\\\\\ //// # ____----___ ____________ # | | # | Global Average Pooling | # v v # High value (Positive!!) Low value (Negative!!) In [18]: model_simple = Sequential () model_simple . add ( Conv1D ( filters = num_cand_mortif , kernel_size = len_motif , kernel_initializer = \"TruncatedNormal\" , kernel_regularizer = prob_reg , input_shape = ( len_sequence , num_base_types ), activation = \"relu\" , padding = \"valid\" , use_bias = False )) model_simple . add ( GlobalAveragePooling1D ()) model_simple . add ( Activation ( \"sigmoid\" )) # Initialize to the same weights. model_simple . layers [ 0 ] . set_weights ( initial_conv_weights ) In [19]: model_simple . summary () _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= conv1d_1 (Conv1D) (None, 16, 1) 20 _________________________________________________________________ global_average_pooling1d_1 ( (None, 1) 0 _________________________________________________________________ activation_1 (Activation) (None, 1) 0 ================================================================= Total params: 20 Trainable params: 20 Non-trainable params: 0 _________________________________________________________________ Deeper Model In [20]: import keras from keras.models import Sequential from keras.layers import Dense , Dropout , Flatten from keras.layers import Conv1D , MaxPool1D In [21]: model_deeper = Sequential () model_deeper . add ( Conv1D ( filters = num_cand_mortif , kernel_size = len_motif , kernel_initializer = \"TruncatedNormal\" , input_shape = ( len_sequence , num_base_types ), activation = \"relu\" , padding = \"valid\" , use_bias = False )) model_deeper . add ( Conv1D ( filters = 1 , kernel_size = 2 , kernel_initializer = \"TruncatedNormal\" , bias_initializer = \"zero\" , activation = \"relu\" , padding = \"valid\" )) model_deeper . add ( MaxPool1D ( pool_size = 2 )) model_deeper . add ( Dropout ( 0.5 )) model_deeper . add ( Flatten ()) model_deeper . add ( Dense ( 4 , activation = \"relu\" )) model_deeper . add ( Dropout ( 0.5 )) model_deeper . add ( Dense ( 1 , activation = \"sigmoid\" )) # Initialize to the same weights. model_deeper . layers [ 0 ] . set_weights ( initial_conv_weights ) In [22]: model_deeper . summary () _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= conv1d_2 (Conv1D) (None, 16, 1) 20 _________________________________________________________________ conv1d_3 (Conv1D) (None, 15, 1) 3 _________________________________________________________________ max_pooling1d_1 (MaxPooling1 (None, 7, 1) 0 _________________________________________________________________ dropout_1 (Dropout) (None, 7, 1) 0 _________________________________________________________________ flatten_1 (Flatten) (None, 7) 0 _________________________________________________________________ dense_1 (Dense) (None, 4) 32 _________________________________________________________________ dropout_2 (Dropout) (None, 4) 0 _________________________________________________________________ dense_2 (Dense) (None, 1) 5 ================================================================= Total params: 60 Trainable params: 60 Non-trainable params: 0 _________________________________________________________________ Training In [23]: loss = keras . losses . binary_crossentropy optimizer = keras . optimizers . sgd () # es = keras.callbacks.EarlyStopping(monitor='val_loss', patience=int(epochs*0.3), verbose=0, mode='auto') # ms = keras.callbacks.ModelCheckpoint(filepath=\"{epoch}epochs.h5\", monitor='val_loss', verbose=0, save_best_only=True, save_weights_only=True, mode='auto', period=1) # callbacks = [es, ms] In [24]: model_simple . compile ( loss = loss , optimizer = optimizer , metrics = [ 'accuracy' ]) model_deeper . compile ( loss = loss , optimizer = optimizer , metrics = [ 'accuracy' ]) In [25]: history_simple = model_simple . fit ( x_train , y_train , batch_size = batch_size , epochs = epochs , verbose = 0 , # callbacks=callbacks, validation_data = ( x_test , y_test ) ) In [26]: history_deeper = model_deeper . fit ( x_train , y_train , batch_size = batch_size , epochs = epochs , verbose = 0 , # callbacks=callbacks, validation_data = ( x_test , y_test ) ) Results In [27]: def plot_hist ( history , axes , name ): epochs = history . epoch val_loss = history . history . get ( \"val_loss\" ) val_acc = history . history . get ( \"val_acc\" ) loss = history . history . get ( \"loss\" ) acc = history . history . get ( \"acc\" ) ax_acc , ax_loss = axes ax_acc . plot ( epochs , acc , \"r\" , label = \"training acc\" ) ax_acc . plot ( epochs , val_acc , \"b\" , label = \"validation acc\" ) ax_acc . set_title ( f \"Training and Validation acc ( { name } )\" ) ax_acc . set_xlabel ( \"Epochs\" ), ax_acc . set_ylabel ( \"Accuracy\" ) ax_acc . legend () # Loss Plot ax_loss . plot ( epochs , loss , \"r\" , label = \"training loss\" ) ax_loss . plot ( epochs , val_loss , \"b\" , label = \"validation loss\" ) ax_loss . set_title ( f \"Training and Validation loss ( { name } )\" ) ax_loss . set_xlabel ( \"Epochs\" ), ax_loss . set_ylabel ( \"Loss\" ) ax_loss . legend () return ( ax_acc , ax_loss ) In [28]: fig , ( ax_simpel , ax_deeper ) = plt . subplots ( 2 , 2 , figsize = ( 18 , 12 ), sharex = True ) ax_simple = plot_hist ( history_simple , ax_simpel , \"simlple\" ) ax_deeper = plot_hist ( history_deeper , ax_deeper , \"deeper\" ) Evaluation In [29]: def getKernel ( model ): conv_layer = [ l for l in model . layers if l . name . startswith ( \"conv1d\" )][ 0 ] conv_weight = conv_layer . get_weights ()[ 0 ][:,:, 0 ] return conv_weight In [30]: fig , (( ax_true , ax_ini ),( ax_simple , ax_deep )) = plt . subplots ( 2 , 2 , figsize = ( 8 , 10 ), sharex = \"all\" , sharey = \"all\" ) ax_true = visMotif_std ( motif , name = \"True\" , ax = ax_true ) ax_ini = visMotif_std ( initial_kernel_weight [:,:, 0 ], name = \"initial\" , ax = ax_ini ) ax_simple = visMotif_std ( getKernel ( model_simple ), name = \"simple\" , ax = ax_simple ) ax_deep = visMotif_std ( getKernel ( model_deeper ), name = \"deeper\" , ax = ax_deep ) plt . tight_layout () In [31]: def print_score ( model , x_test , y_test , data_type = \"Test\" ): loss , acc = model . evaluate ( x_test , y_test , verbose = 0 ) print ( f \" \\t - { data_type } loss : { loss : .3f } \" ) print ( f \" \\t - { data_type } accuracy: { acc * 100 : .1f } %\" ) In [32]: print ( \"- Model Simple\" ) print_score ( model_simple , x_test , y_test ) print ( \"- Model Deeper\" ) print_score ( model_deeper , x_test , y_test ) - Model Simple - Test loss : 0.474 - Test accuracy: 86.6% - Model Deeper - Test loss : 0.693 - Test accuracy: 50.0% Trained simple model in more epochs, but not using Regularization and use_bias=True In [33]: fig , ax_simpel = plt . subplots ( 1 , 2 , figsize = ( 18 , 6 )) ax_simple = plot_hist ( history_simple , ax_simpel , \"simlple\" ) plt . tight_layout () plt . show () In [34]: model_simple . load_weights ( \"simple_model_30000epochs.h5\" ) In [35]: model_simple . compile ( loss = loss , optimizer = optimizer , metrics = [ 'accuracy' ]) In [36]: print ( \"- Model Simple\" ) print_score ( model_simple , x_train , y_train , data_type = \"Train\" ) print_score ( model_simple , x_test , y_test ) - Model Simple - Train loss : 0.447 - Train accuracy: 96.9% - Test loss : 0.450 - Test accuracy: 96.9% In [37]: fig , ( ax_true , ax_simple ) = plt . subplots ( 1 , 2 , figsize = ( 8 , 5 ), sharey = True ) ax_true = visMotif_std ( motif , name = \"True\" , ax = ax_true ) ax_simple = visMotif_std ( getKernel ( model_simple ), name = \"simple\" , ax = ax_simple ) plt . tight_layout () plt . show () Motif is well captured!! Consideration In this case, the data was too simple without any noise, so it was easier to capture the motif with a simple model without adding additional layers. future work: DeeperBind As shown in this paper ( \"DeeperBind: Enhancing Prediction of Sequence Specificities of DNA Binding Proteins\" ), DeepBind was the first deep convolutional method ever designed to address the need for accurate characterization of motifs for protein targets. Despite its name , it employs only one convolution layer followed by a non-linear thresholding, a max-pooling layer and one/two fully connected layer(s) to estimate the intensity of input probes. Therefore, it is expected that its performance will be further enhanced by using various deep learning techniques like RNN, Attention, Metric Learning, and so on. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-16.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-16.html"},{"title":"Ex.15 Neural Network","text":"解答 $$ \\begin{aligned} h_{nj}&#94;{(1)} &= \\text{sigmoid}\\left(\\sum_{i=1}&#94;mx_{ni}w_{ji}&#94;{(1)} + b_j&#94;{(1)}\\right)\\\\ \\vdots\\\\ h_{nj}&#94;{(l)} &= \\text{sigmoid}\\left(\\sum_{i}h_{ni}&#94;{(l-1)}w_{ji}&#94;{(l-1)} + b_j&#94;{(l-1)}\\right)\\\\ y_{nj} &= \\text{softmax}_j\\left(\\right) \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-15.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-15.html"},{"title":"Ex.14 Brownian motion","text":"解答 1 \\(n=n\\) の時に以下が成立すると仮定する。 $$p\\left(x_n|x_0\\right) = \\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2n}}\\exp\\left(-\\frac{1}{2\\sigma_s&#94;2n}\\left(x_n-x_0\\right)&#94;2\\right)$$ すると、 $$ \\begin{aligned} p\\left(x_{n+1}|x_0\\right) &= \\int_{-\\infty}&#94;{\\infty}dx_np\\left(x_{n+1}|x_n\\right)p\\left(x_n|x_0\\right)\\\\ &= \\int_{-\\infty}&#94;{\\infty}dx_n\\left(\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2}}\\exp\\left(-\\frac{1}{2\\sigma_s&#94;2}\\left(x_{n+1}-x_n\\right)&#94;2\\right)\\right)\\left(\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2n}}\\exp\\left(-\\frac{1}{2\\sigma_s&#94;2n}\\left(x_n-x_0\\right)&#94;2\\right)\\right)\\\\ &= \\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2}}\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2n}}\\int_{-\\infty}&#94;{\\infty}dx_n\\exp\\left\\{-\\frac{1}{2\\sigma_s&#94;2}\\left(\\left(x_{n+1}-x_n\\right)&#94;2 +\\frac{1}{n}\\left(x_n-x_0\\right)&#94;2\\right)\\right\\}\\\\ \\end{aligned} $$ ここで、 \\(\\exp\\) の内部を \\(x_n\\) に注目すると、 $$ \\begin{aligned} &\\left(x_{n+1}-x_n\\right)&#94;2 +\\frac{1}{n}\\left(x_n-x_0\\right)&#94;2\\\\ &=\\frac{n+1}{n}x_n&#94;2 + 2\\left(x_{n+1}+\\frac{x_0}{n}\\right)x_n + \\left(x_{n+1}&#94;2 + \\frac{1}{n}x_0&#94;2\\right)\\\\ &=\\frac{n+1}{n}\\left(x_n-\\frac{n}{n+1}\\left(x_{n+1}+\\frac{x_0}{n}\\right)\\right)&#94;2 + \\frac{1}{n+1}\\left(x_{n+1}-x_0\\right)&#94;2 \\end{aligned} $$ と整理できる。また、ガウス積分より上式の第1項は、 $$ \\int_{-\\infty}&#94;{\\infty}dx_n\\exp\\left(-\\frac{1}{2\\sigma_s&#94;2}\\frac{n+1}{n}\\left(x_n-\\frac{n}{n+1}\\left(x_{n+1}+\\frac{x_0}{n}\\right)\\right)&#94;2\\right) = \\sqrt{2\\pi\\sigma_s&#94;2\\frac{n}{n+1}} $$ と積分できる。したがって、これらを代入して、 $$ \\begin{aligned} p\\left(x_{n+1}|x_0\\right) &= \\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2}}\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2n}}\\int_{-\\infty}&#94;{\\infty}dx_n\\exp\\left\\{-\\frac{1}{2\\sigma_s&#94;2}\\left(\\left(x_{n+1}-x_n\\right)&#94;2 +\\frac{1}{n}\\left(x_n-x_0\\right)&#94;2\\right)\\right\\}\\\\ &= \\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2}}\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2n}}\\left(\\sqrt{2\\pi\\sigma_s&#94;2\\frac{n}{n+1}}\\right)\\exp\\left\\{-\\frac{1}{2\\sigma_s&#94;2}\\frac{1}{n+1}\\left(x_{n+1}-x_0\\right)&#94;2\\right\\}\\\\ &=\\frac{1}{\\sqrt{2\\pi\\sigma_s&#94;2\\left(n+1\\right)}}\\exp\\left(-\\frac{1}{2\\sigma_s&#94;2\\left(n+1\\right)}\\left(x_{n+1}-x_0\\right)&#94;2\\right) \\end{aligned} $$ 以上より、帰納法から題意が示せた。 2 $$ \\begin{aligned} \\frac{\\partial p}{\\partial t} &=\\frac{1}{\\sqrt{2\\pi\\sigma&#94;2}}\\left(-\\frac{1}{2}t&#94;{-\\frac{3}{2}} + \\frac{\\left(x-y\\right)&#94;2}{2\\sigma&#94;2}t&#94;{-\\frac{5}{2}}\\right)\\exp\\left(-\\frac{1}{2\\sigma&#94;2t}\\left(x-y\\right)&#94;2\\right)\\\\ \\frac{\\partial p}{\\partial x} &= \\frac{1}{\\sqrt{2\\pi\\sigma&#94;2t}}\\left(-\\frac{1}{\\sigma&#94;2t}\\left(x-y\\right)\\right)\\exp\\left(-\\frac{1}{2\\sigma&#94;2t}\\left(x-y\\right)&#94;2\\right)\\\\ \\frac{\\partial&#94;2 p}{\\partial x&#94;2} &= \\frac{1}{\\sqrt{2\\pi\\sigma&#94;2t}}\\left(-\\frac{1}{\\sigma&#94;2t}-\\frac{1}{\\sigma&#94;2t}\\left(x-y\\right)\\left(-\\frac{x-y}{\\sigma&#94;2t}\\right)\\right)\\exp\\left(-\\frac{1}{2\\sigma&#94;2t}\\left(x-y\\right)&#94;2\\right)\\\\ &=\\frac{1}{\\sqrt{2\\pi\\sigma&#94;2}}\\frac{1}{\\sqrt{t}}\\left(\\frac{1}{\\sigma&#94;2t}\\right)\\left(-1 + \\frac{\\left(x-y\\right)&#94;2}{\\sigma&#94;2t}\\right)\\exp\\left(-\\frac{1}{2\\sigma&#94;2t}\\left(x-y\\right)&#94;2\\right)\\\\ &=\\frac{1}{\\sqrt{2\\pi\\sigma&#94;2}}\\left(\\frac{1}{\\sigma&#94;2}\\right)\\left(-t&#94;{-\\frac{3}{2}} + \\frac{\\left(x-y\\right)&#94;2}{\\sigma&#94;2}t&#94;{-\\frac{5}{2}}\\right)\\exp\\left(-\\frac{1}{2\\sigma&#94;2t}\\left(x-y\\right)&#94;2\\right)\\\\ &=\\frac{2}{\\sigma&#94;2}\\frac{\\partial p}{\\partial t} \\end{aligned} $$ より、題意が示された。 これにより、 「ミクロスコピックな」 ブラウン運動から 「マクロスコピックな」 拡散方程式を導出できた。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-14.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-14.html"},{"title":"Ex.13 Sparse Modeling","text":"解答 1 $$ \\begin{aligned} \\frac{\\partial}{\\partial\\mathbf{w}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) &=\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\frac{1}{2}\\|\\mathbf{y}-\\mathbf{Xw}\\|_{\\text{L2}}&#94;2 + \\lambda\\|\\mathbf{z}\\|_{\\text{L1}} + \\boldsymbol{\\alpha}&#94;T\\left(\\mathbf{w}-\\mathbf{z}\\right) + \\frac{\\rho}{2}\\|\\mathbf{w}-\\mathbf{z}\\|&#94;2_{\\text{L2}}\\right)\\\\ &=\\left(-\\mathbf{X}&#94;T\\mathbf{y} + \\mathbf{X}&#94;T\\mathbf{Xw}\\right) + \\boldsymbol{\\alpha} + \\rho\\left(\\mathbf{w}-\\mathbf{z}\\right)\\\\ &= 0\\\\ \\therefore\\left(\\mathbf{X}&#94;T\\mathbf{X} + \\rho\\mathbf{I}\\right)\\mathbf{w} &= \\mathbf{X}&#94;T\\mathbf{y} - \\boldsymbol{\\alpha} + \\rho\\mathbf{z}\\\\ \\therefore\\underset{\\mathbf{w}}{\\text{argmin}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) &= \\left(\\mathbf{X}&#94;T\\mathbf{X} + \\rho\\mathbf{I}\\right)&#94;{-1}\\left(\\mathbf{X}&#94;T\\mathbf{y} - \\boldsymbol{\\alpha} + \\rho\\mathbf{z}\\right) \\end{aligned} $$ 2 $z$ の正負で場合分けをすれば、 $$ \\begin{aligned} \\underset{z}{\\text{argmin}}\\left\\{c|z| + \\frac{1}{2}\\left(z-z_0\\right)&#94;2\\right\\} &= \\begin{cases}z_0-c & \\left(z>0\\right)\\\\z_0+c & \\left(0>z\\right)\\\\0&\\left(\\text{otherwise.}\\right)\\\\\\end{cases}\\\\ &= \\begin{cases}z_0-c & \\left(z_0>c\\right)\\\\z_0+c & \\left(-c>z_0\\right)\\\\0&\\left(\\text{otherwise.}\\right)\\end{cases}\\\\ \\end{aligned} $$ 3 $$ \\begin{aligned} \\underset{z_i}{\\text{argmin}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) &= \\underset{z_i}{\\text{argmin}}\\left\\{\\lambda\\|z_i\\|_{\\text{L1}} - \\alpha_iz_i + \\frac{\\rho}{2}\\left(-2w_iz_i + z_i&#94;2\\right)\\right\\}\\\\ &= \\underset{z_i}{\\text{argmin}}\\left\\{\\lambda\\|z_i\\|_{\\text{L1}} + \\frac{\\rho}{2}\\left(z&#94;2_i - 2\\left(w_i + \\frac{\\alpha_i}{\\rho}\\right)z_i\\right)\\right\\}\\\\ &= \\underset{z_i}{\\text{argmin}}\\left\\{\\frac{\\lambda}{\\rho}\\|z_i\\|_{\\text{L1}} + \\frac{1}{2}\\left(z_i-\\left(w_i + \\frac{\\alpha_i}{\\rho}\\right)\\right)&#94;2\\right\\}\\\\ \\end{aligned} $$ これは、$2$ の式において $$ \\begin{cases} \\begin{aligned} c&\\longrightarrow\\frac{\\lambda}{\\rho}\\\\ z_0&\\longrightarrow w_i + \\frac{\\alpha_i}{\\rho} \\end{aligned} \\end{cases} $$ とした場合に対応する。以上より、 $$\\underset{\\mathbf{z}}{\\text{argmin}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) = \\text{prox}_{\\frac{\\lambda}{\\rho}|\\ast|}\\left(w_i + \\frac{\\alpha_i}{\\rho}\\right)$$ ここでは、 「L1正則化項の下での線形回帰問題」 を考えた。全体の流れは以下 二乗和誤差関数 $\\frac{1}{2}\\|\\mathbf{y}-\\mathbf{Xw}\\|&#94;2$ にL1正則化項を加えた誤差関数を定義する。（$\\lambda$ は手動で決定。） 解析的に最小解を求めるのが難しいので、新しい変数 $\\mathbf{z}$ を代入してそれぞれ独立の変数としてみる。 とはいえ $\\mathbf{z}=\\mathbf{w}$ という関係は成り立っているので、ラグランジュ乗数 $\\{\\alpha_i\\}$ を導入して、制約条件を付け加える。 $$L\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) = \\frac{1}{2}\\|\\mathbf{y}-\\mathbf{Xw}\\|_{\\text{L2}}&#94;2 + \\lambda\\|\\mathbf{z}\\|_{\\text{L1}} + \\boldsymbol{\\alpha}&#94;T\\left(\\mathbf{w}-\\mathbf{z}\\right)$$ このままでも良いが、凸性を増すために、制約条件を二次の形で加える。この式を 拡張ラグランジュ関数(Augmented Lagrangian) と呼ぶ。 [参考:知能システム論 第3回] $$L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right) = \\frac{1}{2}\\|\\mathbf{y}-\\mathbf{Xw}\\|_{\\text{L2}}&#94;2 + \\lambda\\|\\mathbf{z}\\|_{\\text{L1}} + \\boldsymbol{\\alpha}&#94;T\\left(\\mathbf{w}-\\mathbf{z}\\right) + \\rho\\|\\mathbf{w}-\\mathbf{z}\\|_{\\text{L2}}&#94;2$$ 解析的に求めることができないので、拡張ラグランジュ関数の最小化と双対変数の勾配上昇を繰り返す。 拡張ラグランジュ関数の最小化 $$\\begin{aligned}\\mathbf{w}&\\longleftarrow \\underset{\\mathbf{w}}{\\text{argmin}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right)\\quad \\text{with fixed $\\mathbf{z},\\boldsymbol{\\alpha}$}\\\\\\mathbf{z}&\\longleftarrow \\underset{\\mathbf{z}}{\\text{argmin}}L_{\\rho}\\left(\\mathbf{w},\\mathbf{z},\\boldsymbol{\\alpha}\\right)\\quad \\text{with fixed $\\mathbf{w},\\boldsymbol{\\alpha}$}\\\\\\end{aligned}$$ 双対変数の勾配上昇 $$\\boldsymbol{\\alpha}\\longleftarrow\\boldsymbol{\\alpha} + \\rho\\nabla\\omega\\left(\\boldsymbol{\\alpha}\\right) = \\boldsymbol{\\alpha} + \\rho\\left(\\mathbf{w}-\\mathbf{z}\\right)$$ 実装 以下では、実際に「線形回帰」「L1正則化項の下での線形回帰」「L2正則化項の下での線形回帰」のそれぞれを実装し、違いや特徴を調べる。 結論 以下のような違いが出た。 線形回帰 L1正則化項の下での線形回帰 L2正則化項の下での線形回帰 In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: from kerasy.utils.data_generator import generateSin , generateGausian sample data In [3]: N = 10 # data size xmin = 0 xmax = 1 seed = 0 In [4]: X_test_ori = np . linspace ( xmin , xmax , 1000 ) Y_test = np . sin ( 2 * np . pi * X_test_ori ) In [5]: X_train_ori , Y_train = generateSin ( N , xmin = xmin , xmax = xmax , seed = seed ) _ , Noise = generateGausian ( N , x = X_train_ori , seed = seed ) Y_train += Noise In [6]: plt . scatter ( X_train_ori , Y_train , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) plt . plot ( X_test_ori , Y_test , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) plt . legend (), plt . grid () plt . show () Training In [7]: from kerasy.utils.preprocessing import PolynomialBaseTransformer In [8]: Ms = [ 2 , 4 , 8 , 16 ] Linear Regression In [9]: fig = plt . figure ( figsize = ( 16 , 6 )) for i , M in enumerate ( Ms ): axT = fig . add_subplot ( 2 , 4 , i + 1 ) #=== Transform === phi = PolynomialBaseTransformer ( M ) X_train = phi . transform ( X_train_ori ) X_test = phi . transform ( X_test_ori ) #=== Training === w = np . linalg . solve ( X_train . T . dot ( X_train ), X_train . T . dot ( Y_train )) Y_pred = X_test . dot ( w ) #=== RSS === RSS = np . sqrt ( np . sum ( np . square ( X_train . dot ( w ) - Y_train ))) # Plot. axT . plot ( X_test_ori , Y_test , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) axT . plot ( X_test_ori , Y_pred , color = \"red\" , label = f \"prediction ($M= { M } $)\" ) axT . scatter ( X_train_ori , Y_train , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) axT . set_title ( f \"Results (RSS=$ { RSS : .3f } $,M=$ { M } $)\" ), axT . set_xlabel ( \"$x$\" ), axT . set_ylabel ( \"$t$\" ) axT . set_xlim ( 0 , 1 ), axT . set_ylim ( - 1.2 , 1.2 ), axT . legend () axB = fig . add_subplot ( 2 , 4 , i + 5 ) axB . barh ( np . arange ( len ( w )), w , color = \"black\" ) axB . set_ylim ( 0 , max ( Ms )) plt . tight_layout () plt . savefig ( f \"LinearRegression_seed { seed } .png\" ) plt . show () Linear Regression + L2 norm In [10]: lambda_ = 1e-4 In [11]: fig = plt . figure ( figsize = ( 16 , 6 )) for i , M in enumerate ( Ms ): axT = fig . add_subplot ( 2 , 4 , i + 1 ) #=== Transform === phi = PolynomialBaseTransformer ( M ) X_train = phi . transform ( X_train_ori ) X_test = phi . transform ( X_test_ori ) #=== Training === w = np . linalg . solve ( lambda_ * np . identity ( M + 1 ) + X_train . T . dot ( X_train ), X_train . T . dot ( Y_train )) Y_pred = X_test . dot ( w ) #=== RSS === RSS = np . sqrt ( np . sum ( np . square ( X_train . dot ( w ) - Y_train ))) # Plot. axT . plot ( X_test_ori , Y_test , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) axT . plot ( X_test_ori , Y_pred , color = \"red\" , label = f \"prediction ($M= { M } $)\" ) axT . scatter ( X_train_ori , Y_train , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) axT . set_title ( f \"Results (RSS=$ { RSS : .3f } $,M=$ { M } $)\" ), axT . set_xlabel ( \"$x$\" ), axT . set_ylabel ( \"$t$\" ) axT . set_xlim ( 0 , 1 ), axT . set_ylim ( - 1.2 , 1.2 ), axT . legend () axB = fig . add_subplot ( 2 , 4 , i + 5 ) axB . barh ( np . arange ( len ( w )), w , color = \"black\" ) axB . set_ylim ( 0 , max ( Ms )) plt . tight_layout () plt . savefig ( f \"LinearRegression_L2_seed { seed } .png\" ) plt . show () Linear Regression + L1 norm In [12]: lambda_ = 1e-3 rho = 1e-3 In [13]: def prox ( w , alpha , rho , lambda_ ): z0 = w + alpha / rho c = lambda_ / rho return z0 - c if c < z0 else z0 + c if z0 <- c else 0 In [14]: fig = plt . figure ( figsize = ( 16 , 6 )) for i , M in enumerate ( Ms ): axT = fig . add_subplot ( 2 , 4 , i + 1 ) #=== Transform === phi = PolynomialBaseTransformer ( M ) X_train = phi . transform ( X_train_ori ) X_test = phi . transform ( X_test_ori ) #=== Training === alpha = np . ones ( shape = ( M + 1 )) z = np . ones ( shape = ( M + 1 )) while True : w = np . linalg . solve ( X_train . T . dot ( X_train ) + rho * np . identity ( M + 1 ), X_train . T . dot ( Y_train ) - alpha + rho * z ) z = np . asarray ([ prox ( w_ , alpha_ , rho , lambda_ ) for w_ , alpha_ in zip ( w , alpha )]) alpha += rho * ( w - z ) if np . sqrt ( np . sum ( np . square ( w - z ))) < 1e-9 : break Y_pred = X_test . dot ( w ) #=== RSS === RSS = np . sqrt ( np . sum ( np . square ( X_train . dot ( w ) - Y_train ))) # Plot. axT . plot ( X_test_ori , Y_test , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) axT . plot ( X_test_ori , Y_pred , color = \"red\" , label = f \"prediction ($M= { M } $)\" ) axT . scatter ( X_train_ori , Y_train , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) axT . set_title ( f \"Results (RSS=$ { RSS : .3f } $,M=$ { M } $)\" ), axT . set_xlabel ( \"$x$\" ), axT . set_ylabel ( \"$t$\" ) axT . set_xlim ( 0 , 1 ), axT . set_ylim ( - 1.2 , 1.2 ), axT . legend () axB = fig . add_subplot ( 2 , 4 , i + 5 ) axB . barh ( np . arange ( len ( w )), w , color = \"black\" ) axB . set_ylim ( 0 , max ( Ms )) plt . tight_layout () plt . savefig ( f \"LinearRegression_L1_seed { seed } .png\" ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-13.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-13.html"},{"title":"Ex.12 Order Statistics","text":"解答 1 $$\\mathbb{F}_{X_h}(x)\\equiv\\mathbb{P}\\left(X_h\\leq x\\right) = \\int_0&#94;x1dx&#94;{\\prime} = x$$ 2 $$\\begin{aligned} \\mathbb{F}_{X_{\\max}}(x) &\\equiv\\mathbb{P}\\left(X_{\\max}\\leq x\\right) = \\mathbb{P}\\left(X_{(1)}\\leq x,X_{(2)}\\leq x,\\ldots,X_{(n)}\\leq x\\right)\\\\ &=\\int_0&#94;x1dx_{(1)}&#94;{\\prime}\\int_0&#94;x1dx_{(2)}&#94;{\\prime}\\cdots\\int_0&#94;x1dx_{(n)}&#94;{\\prime} = x&#94;n \\end{aligned}$$ 3 $$f_{X_{\\max}}(x) = \\frac{d\\mathbb{F}_{X_{\\max}}}{dx}(x) = \\frac{d}{dx}x&#94;n = nx&#94;{n-1}$$ 4 $$\\mathbb{E}\\left(X_{\\max}\\right) = \\int_0&#94;1xf_{X_{\\max}}(x)dx = \\int_0&#94;1nx&#94;ndx = \\frac{n}{n+1}\\left[x&#94;{n+1}\\right]_0&#94;1 = \\frac{n}{n+1}$$ 5 $$\\begin{aligned} \\mathbb{F}_{X_{\\min}}(x) &\\equiv\\mathbb{P}\\left(X_{\\min}\\leq x\\right) = 1 - \\mathbb{P}\\left(X_{(1)}> x,X_{(2)}> x,\\ldots,X_{(n)}> x\\right)\\\\ &=1 - \\int_x&#94;11dx_{(1)}&#94;{\\prime}\\int_x&#94;11dx_{(2)}&#94;{\\prime}\\cdots\\int_x&#94;11dx_{(n)}&#94;{\\prime} = 1 - \\left(1-x\\right)&#94;n \\end{aligned}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-12.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-12.html"},{"title":"Ex.11 Data Assimilation","text":"解答 1 最適性条件より、最適な \\(\\{x_i\\},\\{\\lambda_i\\},\\theta\\) の下では、 $$ \\begin{cases} \\begin{aligned} \\frac{\\partial L}{\\partial x_i} &= 0 & (i=1,\\ldots,n+1)\\\\ \\frac{\\partial L}{\\partial \\lambda_i} &= 0 & (i=1,\\ldots,n+1)\\\\ \\frac{\\partial L}{\\partial\\theta} &= 0 \\end{aligned} \\end{cases} $$ が成り立つので、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x_i} &= \\frac{\\partial J_D\\left(x_1,\\ldots,x_n\\right)}{\\partial x_i} - \\left(\\lambda_i - \\lambda_{i+1}\\frac{\\partial F\\left(x_i,\\theta\\right)}{\\partial x_i}\\right) = 0\\\\ \\therefore \\lambda_i &= \\lambda_{i+1}\\frac{\\partial F\\left(x_i,\\theta\\right)}{\\partial x_i} + \\frac{\\partial J_D\\left(x_1,\\ldots,x_n\\right)}{\\partial x_i} \\end{aligned} $$ となる。特に、 \\(i=n+1\\) に関しては、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x_{n+1}} &= \\frac{\\partial J_D\\left(x_1,\\ldots,x_n\\right)}{\\partial x_{n+1}} - \\lambda_{n+1} = -\\lambda_{n+1} = 0\\\\ \\therefore \\lambda_{n+1} &= 0 \\end{aligned} $$ が成り立つ。 2 $$ \\begin{aligned} x_{i+1} &= F\\left(x_i;\\theta\\right)\\\\ \\frac{\\partial x_{i+1}}{\\partial\\theta} &= \\frac{\\partial F\\left(x_i;\\theta\\right)}{\\partial\\theta}\\\\ &= \\frac{\\partial F}{\\partial x}\\left(x_i;\\theta\\right)\\frac{}{} \\end{aligned} $$ a if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-11.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-11.html"},{"title":"Ex.10 Expectation Maximization Algorithm","text":"解答 1 $$ \\begin{aligned} &\\mathcal{Q}_{\\text{EM}}\\left(\\theta|\\theta&#94;{\\prime}\\right) + H\\left(\\theta&#94;{\\prime}\\right) + \\mathrm{KL}\\left(\\theta&#94;{\\prime}\\|\\theta\\right)\\\\ =&\\sum_{h=1}&#94;n\\sum_{z_h}\\log\\left(p\\left(x_h,z_h|\\theta\\right)\\right)\\frac{p\\left(x_h,z_h|\\theta&#94;{\\prime}\\right)}{p\\left(x_h|\\theta&#94;{\\prime}\\right)} - \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\right)\\\\ &+ \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(\\frac{p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)}{p\\left(z_h|x_h,\\theta\\right)}\\right)\\\\ =&\\sum_{h=1}&#94;n\\sum_{z_h}\\log\\left(p\\left(x_h,z_h|\\theta\\right)\\right)\\frac{p\\left(x_h,z_h|\\theta&#94;{\\prime}\\right)}{p\\left(x_h|\\theta&#94;{\\prime}\\right)} - \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(p\\left(z_h|x_h,\\theta\\right)\\right)\\\\ =&\\sum_{h=1}&#94;n\\sum_{z_h}\\log\\left(p\\left(x_h,z_h|\\theta\\right)\\right)p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right) - \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(p\\left(z_h|x_h,\\theta\\right)\\right)\\quad\\left(\\because\\text{ Conditional probability}\\right)\\\\ =&\\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(p\\left(x_h|\\theta\\right)\\right)\\quad\\left(\\because\\text{ Conditional probability}\\right)\\\\ =&\\sum_{h=1}&#94;n\\log\\left(p\\left(x_h|\\theta\\right)\\right)\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\\\ =&\\sum_{h=1}&#94;n\\log\\left(p\\left(x_h|\\theta\\right)\\right)\\quad\\left(\\because\\text{ Marginalization}\\right)\\\\ =&l\\left(\\theta|D\\right) \\end{aligned} $$ 2 $$ \\begin{aligned} \\mathrm{KL}\\left(\\theta&#94;{\\prime}\\|\\theta\\right)|_{\\theta=\\theta&#94;{\\prime}} &= \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\log\\left(\\frac{p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)}{p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)}\\right)\\\\ &= \\sum_{h=1}&#94;n\\sum_{z_h}p\\left(z_h|x_h,\\theta&#94;{\\prime}\\right)\\cdot\\log(1) = 0\\\\ \\end{aligned} $$ より、 \\(\\theta=\\theta&#94;{\\prime}\\) で \\(l\\left(\\theta|D\\right) = \\mathcal{Q}_{\\text{EM}}\\left(\\theta|\\theta&#94;{\\prime}\\right)+H\\left(\\theta&#94;{\\prime}\\right)\\) また、 $$ \\begin{aligned} \\frac{\\partial}{\\partial\\theta}l\\left(\\theta|D\\right)|_{\\theta=\\theta&#94;{\\prime}} &= \\sum_{h=1}&#94;n\\frac{\\partial}{\\partial\\theta}\\left(\\log\\left(p\\left(x_h|\\theta\\right)\\right)\\right)|_{\\theta=\\theta&#94;{\\prime}}\\\\ &=\\sum_{h=1}&#94;n\\frac{1}{p\\left(x_h|\\theta&#94;{\\prime}\\right)}\\frac{\\partial}{\\partial\\theta}\\left(p\\left(x_h|\\theta\\right)\\right)|_{\\theta=\\theta&#94;{\\prime}}\\\\ \\frac{\\partial}{\\partial\\theta}\\left(\\mathcal{Q}_{\\text{EM}}\\left(\\theta|\\theta&#94;{\\prime}\\right) + H\\left(\\theta&#94;{\\prime}\\right)\\right)|_{\\theta=\\theta&#94;{\\prime}} &=\\sum_{h=1}&#94;n\\sum_{z_h}\\frac{\\frac{\\partial}{\\partial\\theta}\\left(p\\left(x_h,z_h|\\theta\\right)\\right)}{p\\left(x_h,z_h|\\theta\\right)}|_{\\theta=\\theta&#94;{\\prime}}\\frac{p\\left(x_h,z_h|\\theta&#94;{\\prime}\\right)}{p\\left(x_h|\\theta&#94;{\\prime}\\right)}\\\\ &= \\sum_{h=1}&#94;n\\frac{1}{p\\left(x_h|\\theta&#94;{\\prime}\\right)}\\sum_{z_h}\\frac{\\partial}{\\partial\\theta}\\left(p\\left(x_h,z_h|\\theta\\right)\\right)|_{\\theta=\\theta&#94;{\\prime}}\\\\ &=\\sum_{h=1}&#94;n\\frac{1}{p\\left(x_h|\\theta&#94;{\\prime}\\right)}\\frac{\\partial}{\\partial\\theta}\\left(p\\left(x_h|\\theta\\right)\\right)|_{\\theta=\\theta&#94;{\\prime}} \\end{aligned} $$ となるので、 \\(\\theta\\) に関する一階微分に関しても先の等式が成り立つ。 ゆえに、題意が成り立つ。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-10.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-10.html"},{"title":"Ex.9 Kullback-Leibler Divergence","text":"解答 1 $$ \\begin{cases} \\begin{aligned} g(1) &= 1-1=0 & g&#94;{\\prime}(1) &= 1-0 = 1\\\\ h(1) &= \\log(1)=0 &h;&#94;{\\prime}(1)&= \\frac{1}{1} = 1 \\end{aligned} \\end{cases} $$ より、接する。実際にグラフを描いて確かめてみる。 In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: g = lambda x : x - 1 h = lambda x : np . log ( x ) In [3]: X = np . linspace ( 1e-2 , 5 , 1000 ) In [4]: plt . plot ( X , g ( X ), color = \"red\" , label = \"$g(x)=x-1$\" ), plt . scatter ( 1 , g ( 1 ), color = \"red\" , s = 100 , alpha = 0.5 ) plt . plot ( X , h ( X ), color = \"blue\" , label = \"$h(x)=\\log(x)$\" ), plt . scatter ( 1 , h ( 1 ), color = \"blue\" , s = 100 , alpha = 0.5 ) plt . grid (), plt . xlabel ( \"$x$\" ), plt . ylabel ( \"$y$\" ), plt . legend () plt . show () 2 $d(x) = x-1-\\log(x)$ は、$1$ で調べたように $x=1$ で $d(1) = 0$ となる。 また、$d&#94;{\\prime}(x) = \\begin{cases}1-\\frac{1}{x} > 0 & (\\text{when $x>1$})\\\\1-\\frac{1}{x} \\leq 0 & (\\text{when $x\\leq1$})\\end{cases}$ となることから、$d$ は $1>x>0$ で単調減少し、$x>1$ で単調増加することがわかる。 以上より、題意が成立する。ついでにこのグラフも描いてみる。 In [5]: plt . plot ( X , g ( X ) - h ( X ), color = \"green\" , label = \"$d(x)=x-1-\\log(x)$\" ), plt . scatter ( 1 , g ( 1 ) - h ( 1 ), color = \"green\" , label = \"$x=1$\" , s = 100 ) plt . axvspan ( 1 , 5 , color = \"red\" , alpha = 0.2 ), plt . axvspan ( 0 , 1 , color = \"blue\" , alpha = 0.2 ) plt . grid (), plt . xlabel ( \"$x$\" ), plt . ylabel ( \"$y$\" ), plt . legend () plt . show () 3 $p_k>0$ だから、 $$ \\begin{aligned} p_kd\\left(\\frac{q_k}{p_k}\\right) &= p_k\\left(\\frac{q_k}{p_k} - 1 - \\log\\left(\\frac{q_k}{p_k}\\right)\\right)\\\\ &= q_k - p_k + p_k\\log\\left(\\frac{p_k}{q_k}\\right)\\\\ &\\geq0\\quad\\left(\\text{with equality if and only if $p_k=q_k$}\\right)\\\\ \\therefore p_k\\log\\left(\\frac{p_k}{q_k}\\right) &\\geq p_k-q_k\\\\ \\sum_{k=1}&#94;mp_k\\log\\left(\\frac{p_k}{q_k}\\right) &\\geq \\sum_{k=1}&#94;m\\left(p_k-q_k\\right)\\quad\\left(\\text{with equality if and only if $p_k=q_k$, giving $k=1,\\ldots,m$}\\right)\\\\ \\therefore \\mathrm{KL}\\left(p\\|q\\right) &\\geq 0 \\end{aligned} $$ 4 $$ \\begin{aligned} \\hat{\\boldsymbol{\\theta}} &= \\underset{\\boldsymbol{\\theta}}{\\text{argmin}} \\mathrm{KL}\\left(p_D\\|q_{\\boldsymbol{\\theta}}\\right)\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmin}} \\int p_D(x)\\log\\left(\\frac{p_D(x)}{q_{\\boldsymbol{\\theta}}(x)}\\right)dx\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmin}} \\sum_{k=1}&#94;np_D(x_k)\\log\\left(\\frac{p_D(x_k)}{q_{\\boldsymbol{\\theta}}(x_k)}\\right)\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmin}} \\left(-\\sum_{k=1}&#94;np_D(x_k)\\log\\left(q_{\\boldsymbol{\\theta}}(x_k)\\right)\\right)\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}} \\sum_{k=1}&#94;n\\frac{1}{n}\\log\\left(p\\left(x_k|\\boldsymbol{\\theta}\\right)\\right) \\end{aligned} $$ したがって、題意が成り立つ。 これは、 「経験分布 $p_D$ に対するモデル分布 $q_{\\boldsymbol{\\theta}}$ の Kullback-Leibler Divergence の 最小化 「経験分布 $p_D$ について平均をとったモデル分布 $q_{\\boldsymbol{\\theta}}$ の対数尤度 の 最大化 が等しいことを表す。 KL Divergence 以下では、問題と直接関係ないが、いくつかの確率分布で 実際にKL-Divergenceを求めてみる。 確率分布名 scipy クラス 正規分布 stats.norm ベータ分布 stats.beta $\\chi$ 二乗分布 stats.chi2 F分布 stats.f ガンマ分布 stats.gamma t分布 stats.t 一様分布 stat.uniform In [6]: from scipy import stats In [7]: N = 1000 xmin = - 3 xmax = 3 In [8]: x = np . linspace ( xmin , xmax , N ) y = stats . norm . pdf ( x ) dXs = np . arange ( - 1 , 0.2 , 0.2 ) In [9]: n_fig = len ( dXs ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 In [10]: def KL_diver ( P , Q ): return np . sum ([ q * np . log ( q / p ) for p , q in zip ( P , Q )]) In [11]: fig = plt . figure ( figsize = ( 6 * n_col , 4 * n_row )) for i , dx in enumerate ( dXs ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) y_ = stats . norm . pdf ( x + dx ) ax . plot ( x , y , \"b\" ), ax . fill_between ( x , 0 , y , color = \"b\" , alpha = 0.3 ) ax . plot ( x , y_ , \"r\" ), ax . fill_between ( x , 0 , y_ , color = \"r\" , alpha = 0.3 ) ax . set_title ( f \"KL Divergence: { KL_diver ( y , y_ ) : .2f } \" ) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-9.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-9.html"},{"title":"Ex.8 Multivariate Normal Distribution","text":"解答 1 $$ \\begin{aligned} \\int_{\\mathbb{R}&#94;m}f_X(\\mathbf{x})d&#94;mx &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|\\boldsymbol{\\Sigma}\\right|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}}\\exp\\left(-\\frac{1}{2}\\left(x_1&#94;2 + \\cdots + x_m&#94;2\\right)\\right)d&#94;mx\\\\ &=\\prod_{k=1}&#94;m\\int_{\\mathbb{R}}\\frac{1}{\\sqrt{2\\pi}}\\exp\\left(-\\frac{1}{2}x_k&#94;2\\right)dx_k\\\\ &=1 \\end{aligned} $$ 上では、以下の ガウス積分 を用いた。 $$I = \\int_{-\\infty}&#94;{\\infty}e&#94;{-ax&#94;2}dx = \\int_{-\\infty}&#94;{\\infty}e&#94;{-ay&#94;2}dy$$ を考える。ここで、 $$\\begin{aligned} I&#94;2 &= \\left(\\int_{-\\infty}&#94;{\\infty}e&#94;{-ax&#94;2}dx\\right)&#94;2\\\\ &= \\left(\\int_{-\\infty}&#94;{\\infty}e&#94;{-ax&#94;2}dx\\right)\\left(\\int_{-\\infty}&#94;{\\infty}e&#94;{-ay&#94;2}dy\\right)\\\\ &=\\int_{\\infty}&#94;{\\infty}dx\\int_{-\\infty}&#94;{\\infty}dye&#94;{-a(x&#94;2+y&#94;2)}\\\\ &= \\int_0&#94;{\\infty}rdr\\int_0&#94;{2\\pi}d\\theta e&#94;{-ar&#94;2}\\\\ &= 2\\pi\\left[-\\frac{1}{2a}e&#94;{-ar&#94;2}\\right]_0&#94;{\\infty}\\\\ &= \\frac{\\pi}{a}\\\\ \\therefore I&= \\sqrt{\\frac{\\pi}{a}} \\end{aligned}$$ 2 \\(\\Sigma\\) が実対称行列なので、実直交行列 \\(O\\) を用いて \\(\\Sigma = O\\Lambda O&#94;T\\) と対角化できる。（ \\(\\Lambda = \\left(\\lambda_1,\\ldots,\\lambda_m\\right)\\) ） したがって、 $$ \\begin{aligned} \\int_{\\mathbb{R}&#94;m}f_X(\\mathbf{x})d&#94;mx &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|\\Sigma\\right|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)&#94;T\\Sigma&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|O\\Lambda O&#94;T\\right|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)&#94;T\\left(O\\Lambda O&#94;T\\right)&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|\\Lambda\\right|&#94;{1/2}}\\exp\\left(-\\frac{1}{2}\\left(O&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)&#94;T\\Lambda&#94;{-1}\\left(O&#94;{-1}\\left(\\mathbf{x} - \\boldsymbol{\\mu}\\right)\\right)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\left|\\Lambda\\right|&#94;{1/2}}\\exp\\left(\\sum_{k=1}&#94;m-\\frac{1}{2}\\mathbf{o}_k&#94;{-1T}(x_k-\\mu_k)\\lambda_k&#94;{-1}\\mathbf{o}_k&#94;{-1}(x_k-\\mu_k)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\sum_{k=1}&#94;m\\lambda_k&#94;{1/2}}\\exp\\left(\\sum_{k=1}&#94;m-\\frac{1}{2}(x_k-\\mu_k)\\lambda_k&#94;{-1}(x_k-\\mu_k)\\right)d&#94;mx\\\\ &= \\prod_{k=1}&#94;m\\int_{\\mathbb{R}}\\frac{1}{(2\\pi)&#94;{1/2}\\lambda_k&#94;{(1/2)}}\\exp\\left(-\\frac{1}{2}\\lambda_k&#94;{-1}y_k&#94;2\\right)dy_k\\\\ &= \\prod_{k=1}&#94;m\\frac{1}{(2\\pi)&#94;{1/2}\\lambda_k&#94;{(1/2)}}\\sqrt{\\frac{2\\pi}{\\lambda_k&#94;{-1}}}\\\\ &= 1 \\end{aligned} $$ 3 \\(2\\) と同様に考えて、 $$ \\begin{aligned} \\mathbb{E}\\left(X_k\\right) &= \\int_{\\mathbb{R}&#94;m}x_kf_X(\\mathbf{x})d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\sum_{k=1}&#94;m\\lambda_k&#94;{1/2}}x_k\\exp\\left(\\sum_{k=1}&#94;m-\\frac{1}{2}(x_k-\\mu_k)\\lambda_k&#94;{-1}(x_k-\\mu_k)\\right)d&#94;mx\\\\ &= \\int_{\\mathbb{R}&#94;m}\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\lambda_k&#94;{1/2}}x_k\\exp\\left(-\\frac{1}{2}\\left(x_k-\\mu_k\\right)\\lambda_k&#94;{-1}\\left(x_k-\\mu_k\\right)\\right)dx_k\\\\ &=\\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\lambda_k&#94;{1/2}}\\int_{\\mathbb{R}&#94;m}\\left(y_k + \\mu_k\\right)\\exp\\left(-\\frac{1}{2}\\lambda_k&#94;{-1}y_k&#94;2\\right)dy_k\\\\ &= \\frac{1}{\\left(2\\pi\\right)&#94;{m/2}\\lambda_k&#94;{1/2}}\\left[-\\frac{1}{\\lambda_k&#94;{-1}}\\exp\\left(-\\frac{1}{2}\\lambda_k&#94;{-1}y_k&#94;2\\right)\\right]_{-\\infty}&#94;{\\infty} + \\mu_k\\\\ &=\\mu_k \\end{aligned} $$ 4 \\(2\\) と同様に考えて、 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-8.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-8.html"},{"title":"Ex.7 Positive Definite Symmetric Matrix","text":"解答 1 $$A = O\\Lambda O&#94;T\\Longleftrightarrow O&#94;TAO = \\Lambda$$ ここで、 \\(O=\\left(\\mathbf{u}_1,\\cdots\\mathbf{u}_m\\right)\\) と分解できるので、 \\(O\\) の第 \\(k\\) 列ベクトル \\(\\mathbf{u}_k\\) に注目すると、 $$\\lambda_k = \\mathbf{u}_k&#94;TA\\mathbf{u}_k > 0\\quad\\left(\\because\\text{positive definite}\\right)$$ 2 \\(k\\) 成分のみゼロではない次のベクトルを考える。 $$\\mathbf{e}_k = \\left(\\begin{array}{ccc}0\\\\\\vdots\\\\1\\\\\\vdots\\\\0\\end{array}\\right)$$ すると、 $$A_{kk} = \\mathbf{e}_k&#94;TA\\mathbf{e}_k > 0\\quad\\left(\\because\\text{positive definite}\\right)$$ 3 \\(k,l\\) 成分のみゼロではないベクトル \\(\\mathbf{v}\\) を考える。ここで、 $$v_k = x,v_l=y \\qquad \\forall x,y\\in\\mathbb{R},x.y\\neq0$$ とする。すると、 $$\\begin{aligned} \\mathbf{v}&#94;TA\\mathbf{v} &= x&#94;2A_{kk} + xyA_{kl} + yxA_{lk} + y&#94;2A_{ll}\\\\ &= \\left(\\begin{array}{ccc}x\\\\y\\end{array}\\right)&#94;T\\left(\\begin{array}{ccc}A_{kk} & A_{kl}\\\\A_{lk} & A_{ll}\\end{array}\\right)\\left(\\begin{array}{ccc}x\\\\y\\end{array}\\right) > 0 \\end{aligned}$$ したがって、行列 $$A&#94;{(kl)} = \\left(\\begin{array}{ccc}A_{kk} & A_{kl}\\\\A_{lk} & A_{ll}\\end{array}\\right)$$ は正定値行列であることがわかる。ゆえに、 \\((1)\\) より、行列 \\(A&#94;{(kl)}\\) の固有値（ \\(\\lambda&#94;{(kl)}_1,\\lambda&#94;{(kl)}_2\\) ）は全て非負。 一方、行列式は固有値の積でかけるので、以下の関係が成り立つ。 $$\\left|A&#94;{(kl)}\\right| = A_{kk}A_{ll} - A_{kl}A_{lk} = \\lambda&#94;{(kl)}_1\\lambda&#94;{(kl)}_2 > 0$$ また、 \\(A&#94;T=A\\) より \\(A_{kl} = A_{lk}\\) なので、上より、 $$A_{kk}A_{ll} - A_{kl}&#94;2 > 0\\Longleftrightarrow\\sqrt{A_{kk}A_{ll}} > \\left|A_{kl}\\right|$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-7.html"},{"title":"Ex.6 Multinomial Distribution","text":"解答 1 $$ \\begin{aligned} \\mathbb{E}\\left(N_k\\right) &= \\mathbb{E}\\left(\\sum_{h=1}&#94;{n_0}Y_k&#94;{(h)}\\right) = \\mathbb{E}\\left(\\sum_{h=1}&#94;{n_0}\\mathbb{I}\\left(X&#94;{(h)} = k\\right)\\right)\\\\ &= \\sum_{h=1}&#94;{n_0}\\mathbb{E}\\left(\\sum_{h=1}&#94;{n_0}\\mathbb{I}\\left(X&#94;{(h)} = k\\right)\\right)\\\\ &= n_0q_k \\end{aligned} $$ 2 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-6.html"},{"title":"Ex.5 Categorical Distribution","text":"解答 1 $$\\mathbb{E}\\left(1\\right) = \\sum_{k=1}&#94;m 1\\cdot q_k = 1$$ 2 $$\\mathbb{E}\\left(X\\right) = \\sum_{k=1}&#94;m k\\mathbb{P}\\left(X=k\\right) = \\sum_{k=1}&#94;mkq_k$$ 3 $$\\mathbb{E}\\left(Y_k\\right) = \\sum_{k&#94;{\\prime}=1}&#94;m \\mathbb{I}\\left(X=k\\right) \\mathbb{P}\\left(X=k&#94;{\\prime}\\right)=\\mathbb{P}\\left(X=k\\right) = q_k$$ 4 EX1. Covariance より、 $$ \\begin{aligned} \\mathrm{Cov}\\left(Y_k,Y_l\\right) &= \\mathbb{E}\\left(Y_kY_l\\right) - \\mathbb{E}\\left(Y_k\\right)\\mathbb{E}\\left(Y_l\\right)\\\\ &= \\sum_{k&#94;{\\prime},l&#94;{\\prime}}\\mathbb{I}\\left(X=k,X=l\\right)\\mathbb{P}\\left(X=k&#94;{\\prime},X=l&#94;{\\prime}\\right) - q_kq_l\\\\ &=\\delta_{kl}q_k - q_kq_l \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-5.html"},{"title":"Ex4. Exponential Distribution","text":"解答 1 $$ \\int_0&#94;{\\infty}f_X(x)dx = \\int_0&#94;{\\infty}\\lambda e&#94;{-\\lambda x}dx = \\left[-e&#94;{-\\lambda x}\\right]_0&#94;{\\infty} = 1 $$ 2 $$\\begin{aligned} \\mathbb{E}\\left(X\\right) &= \\int_0&#94;{\\infty}xf_X(x)dx = \\int_0&#94;{\\infty}x\\lambda e&#94;{-\\lambda x}dx\\\\ &= \\int_0&#94;{\\infty}x\\left(-e&#94;{-\\lambda x}\\right)&#94;{\\prime}dx\\\\ &= \\left[-xe&#94;{-\\lambda x}\\right]_0&#94;{\\infty} - \\int_0&#94;{\\infty}-e&#94;{-\\lambda x} dx\\\\ &= \\left[-\\frac{1}{\\lambda}e&#94;{-\\lambda x}\\right]_0&#94;{\\infty}\\\\ &= \\frac{1}{\\lambda} \\end{aligned}$$ 3 $$ \\mathbb{P}\\left(X>t\\right) = \\int_t&#94;{\\infty}f(x)dx = \\left[-e&#94;{-\\lambda x}\\right]_t&#94;{\\infty} = e&#94;{-\\lambda t} $$ 4 $$\\begin{aligned} \\mathbb{P}\\left(X>s+t|X>s\\right) &= \\frac{\\mathbb{P}\\left(X>s+t\\right)}{\\mathbb{P}\\left(X>s\\right)}\\\\ &= \\frac{\\int_{s+t}&#94;{\\infty}f_X(x)dx}{\\int_s&#94;{\\infty}f_X(x)dx}\\\\ &= \\frac{e&#94;{-\\lambda\\left(s+t\\right)}}{e&#94;{-\\lambda s}}\\\\ &= e&#94;{-\\lambda t} = \\mathbb{P}\\left(X>t\\right) \\end{aligned}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-4.html"},{"title":"EX3. Law of Large Numbers","text":"解答 1 $$ \\begin{aligned} \\varphi_{Z}(t) &= \\int_{-\\infty}&#94;{\\infty}e&#94;{itz}\\delta\\left(z-\\mu\\right)dz\\\\ &= e&#94;{it\\mu} \\end{aligned} $$ 2 $$ \\begin{aligned} \\varphi_{\\bar{X}&#94;{(n)}}(t) &= \\varphi_{\\frac{X_1 + \\cdots + X_n}{n}}(t)\\\\ &= \\varphi_X\\left(\\frac{X_1}{n}\\right)\\cdots\\varphi_X\\left(\\frac{X_n}{n}\\right)\\\\ &= \\left[\\varphi_X\\left(\\frac{X}{n}\\right)\\right]&#94;n\\\\ &= \\exp\\left(n\\log\\left(\\varphi_X\\left(\\frac{X}{n}\\right)\\right)\\right)\\\\ &= \\exp\\left(n\\log\\left(1 + \\mathbb{E}\\left(X\\right)\\frac{1}{1!}\\left(\\frac{it}{n}\\right)&#94;1 + \\mathcal{O}\\left(\\frac{1}{n&#94;2}\\right)\\right)\\right)\\\\ \\end{aligned} $$ ここで、 $$ \\begin{aligned} &\\log\\left(1 + \\mathbb{E}\\left(X\\right)\\frac{1}{1!}\\left(\\frac{it}{n}\\right)&#94;1 + \\mathcal{O}\\left(\\frac{1}{n&#94;2}\\right)\\right)\\\\ &= \\sum_{k=1}&#94;{\\infty}\\left(-1\\right)&#94;{k+1}\\cdot\\frac{\\left(\\mathbb{E}\\left(X\\right)\\frac{it}{n} + \\mathcal{O}\\left(\\frac{1}{n&#94;2}\\right)\\right)&#94;k}{k}\\\\ &= \\mathbb{E}\\left(X\\right)\\frac{it}{n} + \\mathcal{O}\\left(\\frac{1}{n&#94;2}\\right) \\end{aligned} $$ だから、 $$ \\begin{aligned} \\varphi_{\\bar{X}&#94;{(n)}}(t) &= \\exp\\left(n\\cdot\\mathbb{E}\\left(X\\right)\\frac{it}{n} + \\mathcal{O}\\left(\\frac{1}{n}\\right)\\right)\\\\ &= \\exp\\left(it\\mu + \\mathcal{O}\\left(\\frac{1}{n}\\right)\\right)\\\\ &\\underset{n\\rightarrow\\infty}{\\longrightarrow}e&#94;{it\\mu} = \\varphi_{\\bar{X}&#94;{(n)}}(t) \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-3.html"},{"title":"EX2. Characteristic function","text":"解答 1 $$\\varphi_{X}(0) = \\mathbb{E}\\left(e&#94;{i\\cdot0\\cdot X}\\right) = \\mathbb{E}(1) = 1$$ 2 $$ \\begin{aligned} \\frac{d&#94;m\\varphi_{X}}{dt&#94;m} &= \\underset{\\text{m個}}{0+\\cdots+0} + \\frac{m!\\cdot i&#94;m}{m!}\\mathbb{E}\\left(X&#94;m\\right) \\\\&+\\frac{\\left\\{(m+1)\\cdot m\\cdots 3\\cdot2\\right\\} i&#94;m\\cdot(it)}{(m+1)!}\\mathbb{E}\\left(X&#94;{m+1}\\right) + \\frac{\\left\\{(m+2)\\cdot (m+1)\\cdots 4\\cdot3\\right\\}i&#94;m\\cdot(it)&#94;2}{(m+2)!}\\mathbb{E}\\left(X&#94;{m+2}\\right)+\\cdots\\\\ &= \\frac{m!\\cdot i&#94;m}{m!}\\mathbb{E}\\left(X&#94;m\\right) + \\sum_{n}&#94;{\\infty}\\frac{i&#94;m(it)&#94;n}{n!}\\mathbb{E}\\left(m+n\\right)\\\\ \\therefore\\left.\\frac{d&#94;{m} \\varphi_{x}}{d t&#94;{m}}\\right|_{t=0} &= i&#94;m \\mathbb{E}\\left(X&#94;m\\right) + 0\\qquad \\\\ \\therefore \\frac{1}{i&#94;m}\\left.\\frac{d&#94;{m} \\varphi_{x}}{d t&#94;{m}}\\right|_{t=0} &=\\mathbb{E}\\left(X&#94;m\\right)\\\\ \\end{aligned} $$ 3 $$\\begin{aligned} \\varphi_X(t) &= \\sum_{n=0}&#94;{\\infty}\\frac{\\lambda&#94;k}{k!}e&#94;{-\\lambda}e&#94;{itk}\\\\ &=\\sum_{n=0}&#94;{\\infty}\\frac{\\left(\\lambda e&#94;{it}\\right)&#94;k}{k!}e&#94;{-\\lambda}\\\\ &= e&#94;{\\lambda e&#94;{it}}e&#94;{-\\lambda}\\\\ &= e&#94;{\\lambda\\left(e&#94;{it}-1\\right)} \\end{aligned}$$ 4 オイラーの公式より、 $$e&#94;{it} = \\cos t+i\\sin t$$ が成り立つので、 $$ \\begin{aligned} e&#94;{it\\left(aX+bY\\right)} =& e&#94;{itaX}e&#94;{itbY}\\\\ =& \\left(\\cos \\left(taX\\right) + i\\sin\\left(taX\\right)\\right)\\left(\\cos \\left(tbY\\right) + i\\sin\\left(tbY\\right)\\right)\\\\ =& \\left(\\cos\\left(taX\\right)\\cos\\left(tbY\\right) - \\sin\\left(taX\\right)\\sin\\left(tbY\\right)\\right) \\\\ &+ i\\left(\\cos \\left(taX\\right)\\sin\\left(tbY\\right) + \\sin\\left(taX\\right)\\cos \\left(tbY\\right)\\right) \\end{aligned} $$ と分解できる。したがって、 \\(X,Y\\) が独立なので、 $$ \\begin{aligned} \\varphi_{aX+bY}(t) =&\\mathbb{E}\\left(e&#94;{it\\left(aX+bY\\right)}\\right)\\\\ =& \\mathbb{E}\\left(\\cos\\left(taX\\right)\\right)\\mathbb{E}\\left(\\cos\\left(tbY\\right)\\right) - \\mathbb{E}\\left(\\sin\\left(taX\\right)\\right)\\mathbb{E}\\left(\\sin\\left(tbY\\right)\\right) \\\\ &+ i\\left(\\mathbb{E}\\left(\\cos \\left(taX\\right)\\right)\\mathbb{E}\\left(\\sin\\left(tbY\\right)\\right) + \\mathbb{E}\\left(\\sin\\left(taX\\right)\\right)\\mathbb{E}\\left(\\cos \\left(tbY\\right)\\right)\\right)\\\\ =& \\left(\\mathbb{E}\\left(\\cos taX\\right) + i\\mathbb{E}\\left(\\sin taX\\right)\\right)\\cdot\\left(\\mathbb{E}\\left(\\cos tbY\\right) + i\\mathbb{E}\\left(\\sin tbY\\right)\\right)\\\\ =&\\mathbb{E}\\left(e&#94;{itaX}\\right)\\cdot\\mathbb{E}\\left(e&#94;{itbY}\\right)\\\\ =&\\varphi_{X}(at)\\varphi_{Y}(bt) \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-2.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-2.html"},{"title":"EX1. Covariance","text":"解答 1 $$ \\begin{aligned} \\mathbb{E}\\left(\\left(X-\\mu_X\\right)\\left(Y-\\mu_Y\\right)\\right) &= \\mathbb{E}\\left(XY - \\mu_YX-\\mu_XY + \\mu_X\\mu_Y\\right)\\\\ &= \\mathbb{E}\\left(XY\\right) - \\mu_Y\\mathbb{E}(X) - \\mu_X\\mathbb{E}(Y) + \\mu_X\\mu_Y\\\\ &= \\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\quad (\\because\\mu_X=\\mathbb{E}(X),\\mu_Y=\\mathbb{E}(Y)) \\end{aligned} $$ 2 連続型確率変数の場合で証明する。（離散型は \\(\\int\\rightarrow\\sum\\) ） $$ \\begin{aligned} \\mathbb{E}(XY) &= \\int_{x}\\int_{y} xy\\mathbb{P}(X=x,Y=y)dxdy\\\\ &= \\int_{x}\\int_{y} xy\\mathbb{P}(X=x)\\mathbb{P}(Y=y)dxdy\\quad(\\because X,Y: \\text{independent})\\\\ &= \\int_{x} x\\mathbb{P}(X=x)dx\\int_{y}y\\mathbb{P}(Y=y)dy\\\\ &= \\mathbb{E}(X)\\mathbb{E}(Y) \\end{aligned} $$ となるので、 \\((1)\\) より、 $$ \\begin{aligned} \\mathrm{Cov}(X,Y) &= \\mathbb{E}\\left(\\left(X-\\mu_X\\right)\\left(Y-\\mu_Y\\right)\\right)\\\\ &=\\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\\\ &=0 \\end{aligned} $$ 3 $$ \\begin{aligned} \\mathrm{Var}(X+Y) &= \\mathbb{E}\\left((X+Y)&#94;2\\right) - \\left(\\mathbb{E}\\left(X+Y\\right)\\right)&#94;2\\\\ &= \\mathbb{E}\\left(X&#94;2 + 2XY + Y&#94;2\\right) - \\left(\\mathbb{E}(X) + \\mathbb{E}(Y)\\right)&#94;2 \\\\ &= \\left(\\mathbb{E}(X&#94;2) - \\mathbb{E}(X)&#94;2\\right) + \\left(\\mathbb{E}(Y&#94;2) - \\mathbb{E}(Y)&#94;2\\right) + 2\\left(\\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\right)\\\\ &= \\mathrm{Var}(X) + \\mathrm{Var}(Y) + 2\\mathrm{Cov}(X,Y) \\end{aligned} $$ 4 $$ \\begin{aligned} \\mathrm{Cov}\\left(aX+bY,cZ+dW\\right) &= \\mathbb{E}\\left(\\left(aX+bY\\right)\\left(cZ+dW\\right)\\right) - \\mathbb{E}\\left(aX+bY\\right)\\mathbb{E}\\left(cZ+dW\\right)\\\\ &= \\left(\\mathbb{E}\\left(aXcZ\\right) + \\cdots + \\mathbb{E}\\left(bYdW\\right)\\right) - \\left(\\mathbb{E}(aX)\\mathbb{E}(cZ) + \\cdots + \\mathbb{E}(bY)\\mathbb{E}(dW) \\right)\\\\ &= \\left\\{\\mathbb{E}\\left(aXcZ\\right) - \\mathbb{E}(aX)\\mathbb{E}(cZ) \\right\\} + \\cdots + \\left\\{\\mathbb{E}\\left(bYdW\\right) - \\mathbb{E}(bY)\\mathbb{E}(dW) \\right\\}\\\\ &= ac\\left\\{\\mathbb{E}\\left(XZ\\right) - \\mathbb{E}(X)\\mathbb{E}(Z)\\right\\} + \\cdots + bd\\left\\{\\mathbb{E}\\left(YW\\right) - \\mathbb{E}(Y)\\mathbb{E}(W)\\right\\}\\\\ &= ac\\mathrm{Cov}(X,Z) + ad\\mathrm{Cov}(X,W) + bc\\mathrm{Cov}(Y,Z) + bd\\mathrm{Cov}(Y,W) \\end{aligned} $$ 5 $$ \\begin{aligned} \\mathrm{Cov}\\left(X,Y\\right)&#94;2 &= \\left(\\sum_{x,y}(x-\\mu_X)(y-\\mu_Y)\\mathbb{P}(X=x,Y=y)\\right)&#94;2\\\\ &= \\left(\\sum_{z,w}zw\\mathbb{P}(X=x,Y=y)\\right)&#94;2\\\\ &= \\left(\\sum_{z,w}zwP_{zw}\\right)\\left(\\sum_{z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime}w&#94;{\\prime}P_{z&#94;{\\prime}w&#94;{\\prime}}\\right)\\\\ &=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}zwz&#94;{\\prime}w&#94;{\\prime}P_{zw}P_{z&#94;{\\prime}w&#94;{\\prime}}\\quad\\left(\\because\\text{expansion}\\right)\\\\ \\mathrm{Var}(X)\\mathrm{Var}(Y) &= \\left(\\sum_{x}\\left(x-\\mu_X\\right)&#94;2\\mathbb{P}(X=x)\\right)\\left(\\sum_{y}\\left(y-\\mu_Y\\right)&#94;2\\mathbb{P}(Y=y)\\right)\\\\ &= \\left(\\sum_{x,y}\\left(x-\\mu_X\\right)&#94;2\\mathbb{P}(X=x,Y=y)\\right)\\left(\\sum_{x,y}\\left(y-\\mu_Y\\right)&#94;2\\mathbb{P}(X=x,Y=y)\\right)\\\\ &= \\left(\\sum_{z,w}z&#94;2P_{x,y}\\right)\\left(\\sum_{z,w}w&#94;2P_{x,y}\\right)\\\\ &=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\left(=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\right)\\\\ &=\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}+\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}} \\end{aligned} $$ と変形できるので、 $$ \\begin{aligned} \\mathrm{Var}(X)\\mathrm{Var}(Y) - \\mathrm{Cov}\\left(X,Y\\right)&#94;2 &= \\left(\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}+\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\right) - \\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}zwz&#94;{\\prime}w&#94;{\\prime}P_{zw}P_{z&#94;{\\prime}w&#94;{\\prime}}\\\\ &= \\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}\\left(z&#94;2w&#94;{\\prime2} + z&#94;{\\prime2}w&#94;2 - 2zwz&#94;{\\prime}w&#94;{\\prime}\\right)P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\\\ &=\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}\\left(zw&#94;{\\prime} - z&#94;{\\prime}w\\right)&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\\\ &\\geq0\\\\ \\therefore\\mathrm{Var}(X)\\mathrm{Var}(Y) &\\geq \\mathrm{Cov}\\left(X,Y\\right)&#94;2 \\end{aligned} $$ memo ある定数 \\(k\\) について以下が成り立つ時 （ \\(X\\) と \\(Y\\) に以下の関係が成り立つ時） 等号条件が成立する。 $$Y = kX$$ \\(\\mathbb{P}\\left(X=x_n,Y=y_m\\right) = \\mathbb{P}\\left(X=x_n\\right)\\delta_{nm}\\) if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-1.html"},{"title":"Neural Networks","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開)","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-5.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-5.html"},{"title":"レポート課題5(10/31出題)","text":"NKiA9FtaXgLNjqLRBcg31g==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report5.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report5.html"},{"title":"確率と統計(1)基礎概念","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 In [1]: import numpy as np import matplotlib.pyplot as plt 講義概要 確率変数と確率分布 確率分布の性質を表す指標 同時確率 条件付き確率 確率変数と確率分布 用語 意味 確率(probability) 事象の起こりやすさを定量的に示す $0$ から $1$ の値 確率変数(random variable) その変数に関する任意の事象に対して確率が定義されている変数 確率分布(probability distribution) 確率変数に関する各事象に対してその確率を与える関数 離散型(discrete type)確率変数 ある可算集合 $\\mathcal{X}$ の中のいずれかの値をとる確率変数 確率質量関数(probability mass function) $f(x)$ $$f(x)\\geq0,\\quad \\sum_{x\\in\\mathcal{X}}f(x) = 1$$ 連続型(continuous type)確率変数 連続値をとる確率変数 確率密度関数(probability density function) $f(x)$ $$f(x)\\geq0,\\quad\\int_{-\\infty}&#94;{\\infty}f(x)dx=1$$ 累積分布関数(cumulative distribution function) $F(x)$ $$F(x) = P(X\\leq x)=\\int_{-\\infty}&#94;{x}f(u)du\\ \\text{ or } \\sum_{i:i\\leq x}f(i)$$ 確率分布の性質を表す指標 用語 数式 説明 期待値(expectation) $$E(X) = \\sum_xxf(x)\\ \\text{ or }\\int xf(x)dx$$ 確率変数の値の平均（正確には確率による重み付きの平均） 確率変数を代表する値を表す指標 ※ 外れ値(outlier)に敏感 中央値(median) $P(X\\leq x)=1/2$ を満たす $x$ データを大きい順（または小さい順）に並べたときの真ん中の値。 最頻値(mode) $f(x)$ を最大にする $x$ データの中で最も頻度が高い値 分散(variance) $$\\begin{aligned}V(X) &= E\\left\\{(X-E[X])&#94;2\\right\\}\\\\&=E\\left\\{X&#94;2-2E[X]X+(E[X])&#94;2\\right\\}\\\\&=E[X&#94;2]-E\\left[2E[X]X\\right]+(E[X])&#94;2\\\\&=E[X&#94;2]-2E[X]E[X]+(E[X])&#94;2\\\\&=E[X&#94;2]-(E[X])&#94;2\\end{aligned}$$ 確率変数の散らばり具合を表す指標 標準偏差(standard devariation) $\\sqrt{V(X)}$ 分散の平方根 標準化(standardization) $$Z=\\frac{X-E(X)}{\\sqrt{V(X)}}$$ 任意の確率変数 $X$ に対して、期待値 $0$、分散 $1$ の確率変数 $Z$ が定義できる。 歪度(skewness) $$\\alpha_3 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;3\\right\\}}{\\left\\{V(X)\\right\\}&#94;{3/2}}$$ 確率変数の非対称性を表す。 劣度(kurtosis) $$\\beta_4 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;4\\right\\}}{\\left\\{V(X)\\right\\}&#94;{2}}-3$$ 確率分布の尖り具合を表す。 積率(moment) $$\\mu_r = E\\left[X&#94;r\\right]$$ 期待値・分散・歪度・劣度などを表すパラメータ。全ての次数の積率を指定すれば、確率分布を一位に決定することができる。（左は $r$ 次の積率） 積率母関数(moment generating function) $$M_X(t) = E[e&#94;{tX}]=\\begin{cases}\\sum_xe&#94;{tx}f(x)\\\\\\int e&#94;{tx}f(x)dx\\end{cases}\\\\ M_X&#94;{(r)}(0)=\\mu_r$$ 全ての次数の積率を生成する関数。存在しない（無限大に発散する）こともある。 In [2]: def computation_variance ( n = 10000 , mu = 0 , sigma = 1 , seed = None ): X = np . random . RandomState ( seed ) . normal ( loc = mu , scale = sigma , size = n ) EX = sum ( X ) / n EX2 = sum ( X ** 2 ) / n # Calculate variance in 3 ways. var1 = np . var ( X ) var2 = sum (( X - EX ) ** 2 ) / n var3 = EX2 - EX ** 2 print ( \"`np.var(X)` =\" , var1 ) print ( \"E{(X - E[X])&#94;2} =\" , var2 ) print ( \"E[X&#94;2] - (E[X])&#94;2 =\" , var3 ) In [3]: computation_variance ( mu = 100 , seed = 0 ) `np.var(X)` = 0.9752679753477969 E{(X - E[X])&#94;2} = 0.9752679753477979 E[X&#94;2] - (E[X])&#94;2 = 0.9752679752218683 In [4]: computation_variance ( mu = 1e8 , seed = 1 ) `np.var(X)` = 0.9975731614280597 E{(X - E[X])&#94;2} = 0.9975731614281662 E[X&#94;2] - (E[X])&#94;2 = -98.0 ※ 「二乗の平均 - 平均の二乗」は丸め誤差の影響を受けやすい 歪度(skewness) 確率変数の非対称性を表す。 $$\\alpha_3 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;3\\right\\}}{\\left\\{V(X)\\right\\}&#94;{3/2}}$$ In [5]: def plot_skewness ( ax = None , seed = None , n = 100 ): if ax == None : fig , ax = plt . subplots () X = np . random . RandomState ( seed ) . randint ( low = 1 , high = 7 , size = n ) ax . hist ( X , density = True , bins = 6 , color = \"blue\" , align = 'left' ) EX = np . mean ( X ) VX = np . var ( X ) skewness = np . mean (( X - EX ) ** 3 ) / VX ** ( 3 / 2 ) ax . set_title ( f \"skewness = { skewness : .3f } \" ) return ax In [6]: fig = plt . figure ( figsize = ( 12 , 3 )) for i , seed in enumerate ([ 44756 , 96331 , 76432 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plot_skewness ( ax = ax , seed = seed ) plt . show () 劣度(kurtosis) 確率分布の尖り具合を表す。 $$\\beta_4 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;4\\right\\}}{\\left\\{V(X)\\right\\}&#94;{2}}-3$$ In [7]: X = np . linspace ( - 5 , 5 , 10000 ) In [8]: f1 = lambda x : 1 / 1250 * ( 5 - abs ( x )) ** 4 f2 = lambda x , mu = 0 , sigma = 1 : 1 / np . sqrt ( 2 * np . pi * sigma ** 2 ) * np . exp ( - ( x - mu ) ** 2 / 2 * sigma ** 2 ) f3 = lambda x : 1 / 4 if abs ( x ) <= 2 else 0 In [9]: def plot_kurtosis ( X , func , ax = None ): if ax == None : fig , ax = plt . subplots () Y = np . array ([ func ( x ) for x in X ]) ax . plot ( X , Y , color = \"red\" ) Y /= sum ( Y ) EX = np . sum ( Y * X ) VX = np . sum ( Y * ( X - EX ) ** 2 ) kurtosis = np . sum ( Y * ( X - EX ) ** 4 ) / VX ** 2 - 3 ax . set_title ( f \"kurtosis = { kurtosis : .3f } \" ) return ax In [10]: fig = plt . figure ( figsize = ( 12 , 3 )) for i , func in enumerate ([ f1 , f2 , f3 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plot_kurtosis ( X = X , func = func , ax = ax ) ax . set_xlim ( - 5 , 5 ); ax . set_ylim ( 0 , 1 ) plt . show () 同時確率 用語 数式 説明 同時確率(joint probability) 複数の確率変数が関わる確率 同時確率質量関数 $$P(X=x,Y=y) = f(x,y)\\\\f(x,y)\\geq0,\\quad\\sum_{x\\in\\mathcal{X}}\\sum_{y\\in\\mathcal{Y}}f(x,y)=1$$ 離散型の同時確率 同時確率密度関数 $$P(a\\leq X\\leq b,c\\leq Y\\leq d) = \\int_c&#94;d\\int_a&#94;bf(x,y)dxdy\\\\f(x,y)\\geq0,\\quad\\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x,y)dxdy=1$$ 連続型の同時確率 共分散 $X$ と $X&#94;{\\prime}$ の 共分散(covariance) ： $$\\mathrm{Cov}(X,X&#94;{\\prime}) = E\\left[(X-E[X])(X&#94;{\\prime}-E[X&#94;{\\prime}])\\right]$$ $\\mathrm{Cov}(X,X&#94;{\\prime})>0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 同傾向 $\\mathrm{Cov}(X,X&#94;{\\prime})<0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 逆傾向 $\\mathrm{Cov}(X,X&#94;{\\prime})=0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 無関係 共分散は、以下の形でも表されるので、A社の株価を $X$、B社の株価を $X&#94;{\\prime}$ とすると、以下の解釈も可能 $$V(X+X&#94;{\\prime}) = V(X) + V(X&#94;{\\prime}) + 2\\mathrm{Cov}(X,X&#94;{\\prime})$$ $\\mathrm{Cov}(X,X&#94;{\\prime})>0\\Longleftrightarrow V(X+X&#94;{\\prime})>V(X)+V(X&#94;{\\prime})$ なので、A,B両者の株を買うと分散が 拡大 する → 変動リスクが増大し、資産価値は不安定 $0>\\mathrm{Cov}(X,X&#94;{\\prime})\\Longleftrightarrow V(X)+V(X&#94;{\\prime})>V(X+X&#94;{\\prime})$ なので、A,B両者の株を買うと分散が 縮小 する → 変動リスクが抑制され、資産価値は安定 独立性 全ての $(x,y)$ で $p_{X,Y}(x,y) = p_X(x)p_Y(y)$ の時、$X$ と $Y$ は互いに 独立(independent) 2つの確率変数が独立の時、 積の期待値は各々の期待値の積と一致 $$E[XY] = E[X]E[Y]$$ 和の積率母関数は各々の積率母関数の積と一致 $$M_{X+Y}(t) = M_X(t)M_Y(t)$$ ２つの確率変数は無相関 $$\\mathrm{Cov}(X,Y) = 0$$ 2つの確率変数が独立ならば無相関であるが、逆は一般には正しくない。 条件付き確率 ベイズの定理(Bayes' theorem) $$P(X|Y) = \\frac{P(Y|X)P(X)}{P(Y)}$$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-5.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-5.html"},{"title":"分子生命科学Ⅲ 第6回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 感覚神経系(4) 聴覚系(auditory system) によりもたらされている 聴覚(audition) と、 前庭系(vestibular system) による 平衡感覚(sense of balance) は、機能は全く異なるが、構造と機序においては驚くほど似ている。 また、 味（ 味覚(gustation) ） と におい（ 嗅覚(olfaction) ） に関しても、どちらも化学物質に反応性のある細胞、すなわち 1 を用いて 聴覚系 音の 2 とは、1秒毎に耳を通過する、圧縮あるいは希薄化された空気の数であり、 3 と呼ばれる単位で表されるが、ヒトは、20~20,000Hzの範囲の音を聞き取れる。 音の高さの感覚のことを 4 は 2 で決まる。 部屋を振動させるようなオルガンの低い音が 20Hz 耳を貫くようなピッコロの高い音が 10,000 Hz ヒトの音の強さの感受性は、1兆倍のレンジを持つ。 ヒトは水平面なら2°の正確さで音源の位置を特定できる。 音の 5 は圧縮された空気と希薄となった空気との圧力の差であるが、これは私たちが感知する 音の強さ（大きさ）(loudness) を決定する。 聴覚系の構造 耳は、外から見える部分は皮膚に覆われた軟骨からなり、 6 と呼ばれる一種の漏斗を形成し、広い領域から音を集めるのに役立っている。 6 の構造によって、後方より前方からの音に感受性がより強い。また、 6 の折り曲がった構造は音の発生源の位置を知ること、つまり 音源定位 に役立っている。ヒトではほとんど固定されているが、猫や馬では 6 の筋肉支配が発達しており、音源の方向に 6 を向けることができる。 耳の内部への入り口は 7 と呼ばれ、頭蓋骨の中を 8 に達するまで約2.5cm伸びている。 8 の内側表面に接するのは 9 であり、 9 は、 8 の振動を 10 と呼ばれる頭蓋骨の穴を覆っている2番目の膜の振動に伝える。 10 の奥には、液体に満たされた 11 があり、 11 には 10 の膜の物理的な振動をニューロンの反応へと変換する装置がある。 これらをまとめると、基本的な聴覚系の第一段階は、 音波が 8 を動かす。 8 が 9 を動かす。 9 が 10 の膜を動かす。 10 の膜の運動が 11 の液体を動かす。 11 内の液体の運動が感覚ニューロン（聴覚受容細胞）の反応を引き起こす。 なおここで、耳の構造は、 6 から 8 までの 12 8 から 9 までの 13 10 より内側の 14 というように3つの部位に分けるのが一般的である。 14 で音に対するニューロンの反応が生じると、信号は 脳幹 にある一連の神経核に伝えられ処理する。これらの神経核からの出力は視床の中継核、すなわち 15 に送られ、最終的には側頭葉の 16 （もしくは 17 ）に投射する。 感覚受容器から始まり、初期の統合機構（視覚では網膜であり、聴覚では脳幹）につながり、そして視床中継核を経て、感覚野に達するという意味で、聴覚系と視覚系は似かよっている。 前庭感覚系（平衡感覚系） 音楽を聴くこと （聴覚系） と自転車に乗ること （前庭感覚系） は、共に 18 による機械受容機構が関与する感覚に依存している。 前庭感覚系は、頭の位置と運動の情報を検知して、体のつり合いと平衡の感覚を伝え、そして頭と眼球の協調的な運動と体の姿勢の調節とを助けている。 前庭感覚系の機能が障害されると、乗り物酔いと表現される不快な感覚が起こる。 内耳の平衡感覚に関する部分は 19 （あるいは、 20 ）と呼ばれている。 19 には、異なった機能を持つ2種類の構造がある。 21 ：重力と頭の傾きを検知する。迷路の中心に 22 と 23 の一対の比較的大きな腔からなる。 24 ：頭の回転に感受性を持つ。３つの 24 は互いに直交するC字型の半管で、それぞれの基部に膨大部というふくらみが1つずつあり、内部に感覚装置である膨大部稜を入れる。 それぞれの構造の本質的な働きは、 頭の運動に由来する機械的なエネルギーを 18 に伝えること であり、 18 が存在しているそれぞれの構造の 特異性 によって、それぞれ異なった種類の動きに感受性を持つ。 味覚系 基本味 基本味は、 25 、 26 、 27 、 28 、 29 の5種類ある。また、食物の風味の近くの方法は以下の通りである。 食物はそれぞれに特有の基本味を持つ。 食物は味とにおいの両者が同時に生じることによって独特の風味を持つ。（→ 風邪を引くと味がわからなくなる。） 痛覚（ 辛味；カプサイシン受容体TRPV1 ）等の味覚や嗅覚以外の感覚が食物の味の近くに関与する。 味覚器 舌の表面には、 30 と呼ばれる小さな突起が点在する。 30 には 屋根の煉瓦状のもの： 31 小丘状のもの： 32 茸状のもの： 33 がある。舌の前と両脇には小さな丸い 30 を、奥の方には大きな 30 を容易に見ることができる。各々の 30 には、顕微鏡でしか観察できない 34 が百〜数百個存在し、それぞれの 34 の中には、50~150個の 35 が並んでいる他、味覚求心性線維と味細胞とのシナプス、基底細胞からなる。 35 の微絨毛は味孔へと突き出ており、ここで唾液に溶解している化学物質が直接 35 と反応する。 34 の細胞は約10日でターンオーバーを繰り返す。 味覚の刺激変換機構 環境からの刺激が感覚受容細胞で電気的反応を引き起こす過程を、 36 というが、いくつかの感覚系では1つの刺激変換機構を利用するために、基本的な受容細胞を1種類だけ持っていることが多い（ex.聴覚系）。 しかし、味覚の 36 には多くの機構が存在し、それぞれの基本味の近くには1つないしは複数のメカニズムが関与している。味刺激、すなわち 味刺激(tastant) は、 開いたイオンチャネルを直接通過する： 25 （ \\(\\mathrm{Na}&#94;{+}\\) ）、 26 （ \\(\\mathrm{H}&#94;{+}\\) ）は直接イオンチャネルに作用し、膜を脱分極させる。 イオンチャネルに結合してブロックする：（ 26 ） 膜受容体に結合し二次メッセンジャー系を活性化させることにより、イオンチャネルを開ける： 28 、 27 、 29 （アミノ酸）は、三量体Gタンパク質を活性化させる。 などの方法で最終的に味覚受容細胞の細胞内カルシウム濃度を上昇させ、神経伝達物質（ATPだと考えられている）を放出し、一次味覚神経に活動電位を生じさせている。 嗅覚系 自己と非自己、動物と植物に関する情報を検知する。 味覚系と協同して食物の同定に役立ち、有害物質を検知する。 ヒトは数十万の物質の匂いをかぐことができる。 嗅覚器 鼻腔の天井に位置する 37 で匂いを嗅ぐ。 37 には、主として3種類の細胞がある。 38 は、刺激情報の変換の場である。 35 と異なり、 38 は本来ニューロンであり、その軸索は中枢神経系に入っていく。ただ、 35 と同様に、約4~8習慣のサイクルで絶えず成長、死、再生を繰り返す。この性質は、神経系のニューロンとしては非常に珍しい。 39 は、グリア細胞に類似している。機能的には、粘液(mucus)の分泌を手助けすることも知られている。 40 は、新たな受容細胞の供給源となる。 嗅覚の刺激変換機構 味覚受容細胞はたくさんの刺激変換分子機構を使用するが、嗅覚受容細胞が使用しているのはおそらく1種類だけだと考えられる。刺激変換を担う全ての分子は細い線毛にあり、嗅覚の変換経路は におい物質(odorant) と呼ばれる空気中にある化学物質 膜上のにおい物質受容タンパクとの結合 Gタンパク質の刺激 cAMPの産生 cAMPと特異的陽イオンチャネルの結合 陽イオンチャネルの開口とNa+およびCA2+の流入 Ca2+作動性Cl-チャネルの開口 電流の流入による膜の脱分極（受容器電位） if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-6.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-6.html"},{"title":"生物物理学 第6回","text":"講師： 樋口秀男 エネルギー生産系の仕組み（細胞内小器官） |光関連の現象|細胞・器官|たんぱく質等| |:-|:-|:-| |眼で見る|視細胞（桿体、錐体細胞）|ロドプシン等| | 光合成 | 葉緑体 | 光システム（タンパク質複合体） | |蛍の光|発色細胞|ルシフェリン+ルシフェラーゼ| |クラゲの光|発色細胞|エコーリン、GFP(green fluorescence protein)| |日焼け|色素形成細胞（メラノサイト）|メラニン（チロシンの重合体）| |体内時計|目のメラノプシン発現網膜神経細胞|メラノプシン| ATPを作るプロセス 光合成(photosynthesis) は、高等植物や緑藻（青色細菌）が 葉緑体（クロロプラスト） 内で行う、二酸化炭素の固定反応である。 この過程で水が酸素に酸化され、二酸化炭素は還元されて糖になる。 光合成は大きく2つの段階に区別される。 1つは 明反応 と呼ばれ、光のエネルギーを利用して水が酸素に酸化されるとともに、二酸化炭素の還元に必要な \\(\\mathrm{NADPH}_2&#94;+\\) と \\(\\mathrm{ATP}\\) をつくりだす。 もう1つの段階は 暗反応 と呼ばれ、 \\(\\mathrm{NADPH}_2&#94;+\\) と \\(\\mathrm{ATP}\\) を利用して二酸化炭素から種々の糖がつくられる。 クロロプラスト中の大部分のクロロフィルは 光を集めるアンテナ の役割を果たす。吸収された光子のエネルギーはアンテナクロロフィル間を励起エネルギーとして移動し、 アンテナクロロフィル よりも励起エネルギーの 低い 反応中心クロロフィル に集められる。 FRET(Fluorescence resonance energy transfer) $$\\text{Transfer Efficiency at two rates: } E= \\frac{k_T}{k_T+k_F} = \\frac{1}{1 + \\frac{k_F}{k_T}}$$ \\(k_T\\) ：Donor から Acceptor に移動する速度 \\(k_F\\) ：Donor が吸収する速度 |Chl(from)|Chl(to)|移動効率（移動距離）| |:-:|:-:|:-| |b(F)|a(A)|高| |b(F)|b(A)|中| |a(F)|a(A)|中| |a(F)|b(A)|低| 幅 \\(L\\) の中の電子のエネルギー準位： \\(E_n = \\frac{1}{8m}\\left(\\frac{nh}{L&#94;{\\prime}}\\right)&#94;2\\) フェミルの黄金律 時間的に変化しない弱い相互作用（摂動）のある電子系が、あるエネルギー固有状態から別のエネルギー固有状態へ移る際の単位時間あたりの遷移確率は、摂動法（時間で展開）の最低次数として近似計算できる。 遷移速度 \\(k_T\\) は、エネルギー固有状態の単位時間あたりの遷移確率である。 $$\\Psi_{\\mathrm{Da}}\\Psi_{\\mathrm{Ab}}\\underset{k_T}{\\longrightarrow}\\Psi_{\\mathrm{Db}}\\Psi_{\\mathrm{Aa}}$$ Da: Active state of Donor Ab: Ground state of Acceptor 光合成の概要 水を分解して、電子を膜間に入れる。 光を用いて電子の酸化還元電位を上げる。 酸化還元電位を利用してチラコイド外のプロトンを内側に輸送する。 内側のプロトンのケミカルポテンシャルを利用してATPを合成する。 まとめ 共役長が長くなる と吸収波長は長くなり、可視光の利用が可能となる。 分子間距離が近いと エネルギー移動や電子移動 が起こる。電子移動の方向は、酸化還元電位に依存する。 エネルギーを 酸化還元電位 に交換する（逆も） 生物は、 多数のタンパク質が 上記1-3の原理を巧みに利用して、光化学反応（葉緑体内の光合成）や電子伝達（ミトコンドリア内）の機能を行う。 ATP を合成するF1,F0は高効率でATPを合成する。特に、F1は仕事効率が約100%である。 .prompt { /* This is for jupyter blog.*/ min-width: 0; /* This padding is tuned to match the padding on the CodeMirror editor. */ padding: 0em 0.4em 0em 0em; margin: 0px; font-family: monaco; } /*蛍光ペン(pink)*/ .marker-pink { color: #c45a5a; background: linear-gradient(transparent 70%, #ff66ff 60%); font-weight: bold; } /*蛍光ペン(blue) & hover info*/ .marker-info { color: #5C7DC4; background: linear-gradient(transparent 70%, #66FFCC 60%); font-weight: bold; position: relative; cursor: pointer; } .marker-info:hover:before { opacity: 1; z-index: 2; } .marker-info:before { content: attr(aria-label); opacity: 0; position: absolute; top: 30px; right: -90px; font-size: 14px; width: 300px; padding: 10px; color: #fff; background-color: #555; border-radius: 3px; pointer-events: none; } /* 枠囲み */ .frame { border: solid 1.0px #000000; padding: 0.5em 1em; margin: 2em 0; } /* 暗記用 question box */ span .qbox{ display: none; } span.qbox-wrapper:hover .qbox-default{ display: none; } span.qbox-wrapper:hover .qbox{ display: inline; } .qbox-wrapper{ font-weight: bold; padding: 5px 10px; border-radius: 5px; border: solid 2px #000000; margin: 5px } .qbox-wrapper:hover{ text-shadow: 0px 0px 6px rgba(255, 255, 255, 1); -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); transition: all 0.4s ease 0s; } /* 画像吹き出し */ .balloon { display: table; width: 100%; } .balloon_img { display: table-cell; vertical-align: middle; width: 50%; padding-right: 10px; } .balloon_comment { border: #83274e solid 4px; position: relative; background: #fff; padding: 12px; border-radius: 13px; display: block } .balloon_comment::before { content: \"\"; position: absolute; border-right: 23px solid #83274e; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -23px; } .balloon_comment::after { content: \"\"; position: absolute; border-right: 24px solid #fff; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -17px; } if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-6.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-6.html"},{"title":"Introduction","text":"講師： 木立 尚孝 （ 生物データマイニング論 も担当されている方） 計算演習 |#|リンク|問題| |:-:|:-|:-:| |1| Covariance | | |2| Characteristic function | | |3| Law of Large Numbers | | |4| Exponential Distribution | | |5| Categorical Distribution | | |6| Multinomial Distribution | | |7| Positive Definite Symmetric Matrix | | |8| Multivariate Normal Distribution | | |9| Kullback-Leibler Divergence | | |10| Expectation Maximization Algorithm | | |11| Data Assimilation | | |12| Order Statistics | | |13| Sparse Modeling | | |14| Brownian motion | | |15| Neural Network | | プログラミング演習 配列モチーフ探索 最適行動列アルゴリズム Gene Network Inference Itemset mining algorithm","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-0.html"},{"title":"頻度パターンマイニング","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 参考資料： 頻出パターン発見アルゴリズム入門 -アイテム集合からグラフまで- Data Mining A formal study of efficient methods for extracting interesting rules and patterns from massive data. Frequent itemset mining. Closed pattern mining. Structured data mining. Itemset Mining Frequent Itemset Mining Closed Itemset Mining Closure Extension LCM Itemset Mining Frequent Itemset Mining Finding all \"frequent\" sets of elements(items) appearing $\\sigma$ times or more in a database. Definitions Database A set $\\Sigma = \\{1,\\ldots,n\\}$ of items(elements). Tramsaction database A set $T=\\{t_1,\\ldots,t_m\\}$ of subsets of $\\Sigma$ Each subset $t\\subseteq\\Sigma$ is called a transaction Frequent sets Itemset $X$ appears in transaction t: $X\\subseteq t$ Occurrence of $X$ in database $T$: $$\\mathrm{Occ}(X,T) = \\left\\{t\\in T: X\\subseteq t\\right\\}$$ Frequency of $X$: $\\mathrm{Fr}(X,T) = |\\mathrm{Occ}(X,T)|$ Minimum support (minsup): $0\\leq\\sigma\\leq|T|$ $X$ is frequent in $T$ if $\\mathrm{Fr}(X,T)\\geq\\sigma$ Market Basket Data Popular application of itemset mining. Business and Market data analysis. ※ Visit \"The Instacart Online Grocery Shopping Dataset 2017\" and Download \"instacart_2017_05_01\" Folder. In [1]: ! tree instacart_2017_05_01 instacart_2017_05_01 ├── aisles.csv ├── departments.csv ├── order_products__prior.csv ├── order_products__train.csv ├── orders.csv └── products.csv 0 directories, 6 files In [2]: import numpy as np import pandas as pd products.csv In [3]: df_products = pd . read_csv ( \"./instacart_2017_05_01/products.csv\" ) df_products . head ( 3 ) Out[3]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } product_id product_name aisle_id department_id 0 1 Chocolate Sandwich Cookies 61 19 1 2 All-Seasons Salt 104 13 2 3 Robust Golden Unsweetened Oolong Tea 94 7 In [4]: print ( f \"`products.csv` data num: { len ( df_products ) } \" ) `products.csv` data num: 49688 In [5]: id2name = dict ( zip ( df_products . product_id , df_products . product_name )) order_products__train.csv In [6]: df_order_products = pd . read_csv ( \"./instacart_2017_05_01/order_products__train.csv\" ) df_order_products . head ( 3 ) Out[6]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } order_id product_id add_to_cart_order reordered 0 1 49302 1 1 1 1 11109 2 1 2 1 10246 3 0 In [7]: N_transactions_total = len ( df_order_products . groupby ( \"order_id\" )) print ( f \"Total number of transactions: { N_transactions_total } \" ) Total number of transactions: 131209 Extract Only N products In [8]: N = 10 In [9]: extracted_ids = df_order_products . groupby ( \"product_id\" ) . size () . reset_index () . sort_values ( by = 0 , ascending = False ) . product_id [: N ] . values In [10]: # Only focus on N products. df_order_products_extracted = df_order_products [ df_order_products . product_id . apply ( lambda x : x in extracted_ids )] In [11]: N_transactions_extracted = len ( df_order_products_extracted . groupby ( \"order_id\" )) print ( f \"Transactions: { N_transactions_extracted } / { N_transactions_total } \" ) Transactions: 59887/131209 In [12]: for i , extracted_id in enumerate ( extracted_ids ): print ( f \"No. { i + 1 : >0 { len ( str ( N )) }} : { id2name [ extracted_id ] } \" ) No.01: Banana No.02: Bag of Organic Bananas No.03: Organic Strawberries No.04: Organic Baby Spinach No.05: Large Lemon No.06: Organic Avocado No.07: Organic Hass Avocado No.08: Strawberries No.09: Limes No.10: Organic Raspberries In [13]: df_product_id_OneHot = pd . get_dummies ( df_order_products_extracted . product_id ) In [14]: df_order_OneHot = pd . concat ([ df_order_products_extracted . order_id , df_product_id_OneHot ], axis = 1 ) In [15]: df = df_order_OneHot . groupby ( \"order_id\" ) . sum () . reset_index () In [16]: df . head ( 3 ) Out[16]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } order_id 13176 16797 21137 21903 24852 26209 27966 47209 47626 47766 0 1 1 0 0 0 0 0 0 1 0 0 1 96 0 0 0 0 0 0 1 0 0 0 2 98 1 0 0 0 0 0 1 0 0 0 In [17]: database = np . array ( df [ df . columns [ 1 :]]) In [18]: database Out[18]: array([[1, 0, 0, ..., 1, 0, 0], [0, 0, 0, ..., 0, 0, 0], [1, 0, 0, ..., 0, 0, 0], ..., [0, 0, 1, ..., 0, 0, 0], [0, 0, 0, ..., 0, 0, 0], [0, 0, 1, ..., 0, 0, 0]], dtype=uint8) In [19]: N , M = database . shape In [20]: print ( f \"n_samples: { N } \" ) print ( f \"n_features: { M } \" ) n_samples: 59887 n_features: 10 In [21]: from kerasy.search.itemset import FrequentSet In [22]: model = FrequentSet ( threshold = 100 ) In [23]: model . fit ( database ) In [24]: # Frequent Itemset. (frq >= threshold) model . all Out[24]: [None, array([0]), array([0, 1]), array([0, 1, 3]), array([0, 2]), array([0, 2, 3]), array([0, 2, 3, 6]), array([0, 2, 3, 7]), array([0, 2, 5]), array([0, 2, 6]), array([0, 2, 6, 7]), array([0, 2, 7]), array([0, 2, 8]), array([0, 2, 9]), array([0, 3]), array([0, 3, 5]), array([0, 3, 6]), array([0, 3, 6, 7]), array([0, 3, 7]), array([0, 3, 8]), array([0, 3, 9]), array([0, 5]), array([0, 5, 6]), array([0, 5, 7]), array([0, 5, 8]), array([0, 5, 9]), array([0, 6]), array([0, 6, 7]), array([0, 6, 8]), array([0, 6, 9]), array([0, 7]), array([0, 7, 8]), array([0, 8]), array([0, 8, 9]), array([0, 9]), array([1]), array([1, 3]), array([1, 3, 4]), array([1, 3, 9]), array([1, 4]), array([1, 4, 5]), array([1, 4, 8]), array([1, 4, 9]), array([1, 5]), array([1, 5, 8]), array([1, 6]), array([1, 7]), array([1, 8]), array([1, 8, 9]), array([1, 9]), array([2]), array([2, 3]), array([2, 3, 4]), array([2, 3, 5]), array([2, 3, 6]), array([2, 3, 7]), array([2, 3, 8]), array([2, 3, 9]), array([2, 4]), array([2, 4, 5]), array([2, 4, 6]), array([2, 4, 7]), array([2, 4, 8]), array([2, 4, 9]), array([2, 5]), array([2, 5, 6]), array([2, 5, 7]), array([2, 5, 8]), array([2, 5, 9]), array([2, 6]), array([2, 6, 7]), array([2, 6, 8]), array([2, 6, 9]), array([2, 7]), array([2, 7, 8]), array([2, 8]), array([2, 8, 9]), array([2, 9]), array([3]), array([3, 4]), array([3, 4, 5]), array([3, 4, 5, 8]), array([3, 4, 6]), array([3, 4, 7]), array([3, 4, 8]), array([3, 4, 8, 9]), array([3, 4, 9]), array([3, 5]), array([3, 5, 7]), array([3, 5, 8]), array([3, 5, 8, 9]), array([3, 5, 9]), array([3, 6]), array([3, 6, 7]), array([3, 6, 8]), array([3, 6, 9]), array([3, 7]), array([3, 7, 8]), array([3, 8]), array([3, 8, 9]), array([3, 9]), array([4]), array([4, 5]), array([4, 5, 7]), array([4, 5, 8]), array([4, 5, 8, 9]), array([4, 5, 9]), array([4, 6]), array([4, 6, 8]), array([4, 6, 9]), array([4, 7]), array([4, 7, 8]), array([4, 8]), array([4, 8, 9]), array([4, 9]), array([5]), array([5, 6]), array([5, 6, 7]), array([5, 6, 8]), array([5, 7]), array([5, 7, 8]), array([5, 8]), array([5, 8, 9]), array([5, 9]), array([6]), array([6, 7]), array([6, 8]), array([6, 8, 9]), array([6, 9]), array([7]), array([7, 8]), array([8]), array([8, 9]), array([9])] Association Rule Mining Confidence : $\\mathrm{Supp}(A\\text{ and }B)/\\mathrm{Supp}(A)$ (Probability of $B$, Given $A$) What item is likely to be bought when $A$ is bought. Search: large support, confidence large Post-processing of itemset mining Summary Itemset mining is the simplest of all mining algorithms. Need to maintain occurrence of each pattern in database. Tree by lexicographical order is (implicitly) used. Closed Itemset Mining [Problem] in Frequent Pattern Mining Huge Number of frequent itemsets Hard to analyze Most of them are similar [Solution] Closed Pattern Mining Find only closed patterns Observation : Most frequent itemset $X$ can be extended without changing occurrence by adding new elements. definition : An itemset $X$ is a \"closed set\" if and only if there is no proper superset of $X$ with the same frequency (thus the same occurrence set). A closed itemset is the maximal set among all itemsets with the same occurrences. Equivalence class $[X] =\\left\\{Y | \\mathrm{Occ}(X)=\\mathrm{Occ}(Y)\\right\\}$ Implementation. Brute-force: Stupid Baseline ALGORITHM: Bruteforcel First, generate all frequent itemsets. Check them one by one via maximality test Finally, extract all closed sets Maximality test for each candidate frequent set $X$ Add some element $e$ in $\\Sigma$ to $X$ If $\\mathrm{Freq}(X U \\{e\\})$ is properly less than $\\mathrm{Freq}(X)$ then reject $X$. ※ Number of patterns usually exponential to input size, so Brute-force is exponential delay w.r.t. pattern size. Reverse Search A general mathematical framework to design enumeration algorithms. Can be used to prove the correctness of the algorithm. Popular in computational geometry. Data mining algorithms can be explained in remarkable simplicity. How to do reverse Search? Native Backtracking → Duplication Duplication chack by Marking → Exponential Memory. Reduction Map : Mapping from a children to the parent. LCM(Linear Time Closed Sets Miner) Key Algorithm: Prefix Preserving Closure Extension = Children generation from the reduction map. 飽和集合列挙アルゴリズムを用いた大規模データベースからのルール発見手法 Python Implementation: I'm doing now XD Summary Closure Extension: Jump from closed set to closed set. LCM: Linear Delay. Very fast in practice, too (Winner of FIMI'04(Frequent Itemset Mining Implementation Workshop)). Relation to clique enumeration. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-5.html"},{"title":"機械学習概論","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 教師付き学習(Supervised learning) 大量の教師データがあれば、DNNですごい性能を出せるので、今の研究の主流は以下。 transfer learning (転移学習) few-shot learning (一枚だけで汎化性能を得る。) zero-shot learning (文字の情報を用いて画像の識別を行う。) メタ学習 (どうやって学習すれば良いかを学ぶ。) Nearest Neighbor法 決定木(decision tree) Support Vector Machine(SVM) アンサンブル学習 Neural Network Nearest Neighbor法 In [2]: N = 150 ; K = 3 In [3]: data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 1 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [4]: cls = np . concatenate ([ np . full ( shape = int ( N / 3 ), fill_value = 0 ), np . full ( shape = int ( N / 3 ), fill_value = 1 ), np . full ( shape = int ( N / 3 ), fill_value = 2 ), ]) In [5]: xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [6]: # Nearest Neighbor Zs = np . asarray ([ cls [ np . argmin ( np . sum ( np . square ( xy - data ), axis = 1 ))] for xy in XYs ], dtype = int ) . reshape ( Xs . shape ) In [7]: plt . figure ( figsize = ( 8 , 6 )) plt . scatter ( x , y , c = cls , s = 50 ) plt . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) plt . title ( \"Nearest Neighbor\" ), plt . xlim ( xmin , xmax ), plt . ylim ( ymin , ymax ) plt . xticks ([]), plt . yticks ([]) plt . show () 決定木(decision tree) $M$ 個のクラスに分割したとして、 $$\\text{Information gain} = \\text{Entropy}(S) - \\left\\{\\text{Entropy}(S_1) + \\cdots + \\text{Entropy}(S_M)\\right\\}$$ が最大になるように条件を設定する。 In [8]: from kerasy.ML.tree import DecisionTreeClassifier In [9]: N = 150 ; K = 3 In [10]: data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 1 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [11]: cls = np . concatenate ([ np . full ( shape = int ( N / 3 ), fill_value = 0 ), np . full ( shape = int ( N / 3 ), fill_value = 1 ), np . full ( shape = int ( N / 3 ), fill_value = 2 ), ]) In [12]: xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [13]: model = DecisionTreeClassifier ( criterion = \"gini\" , max_depth = 3 , random_state = 0 ) model . fit ( data , cls ) predictions = model . predict ( data ) In [14]: # Decision Tree Zs = model . predict ( XYs ) . reshape ( Xs . shape ) In [15]: fig = plt . figure ( figsize = ( 18 , 4 )) for i , seed in enumerate ([ 0 , 1 , 5 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) model = DecisionTreeClassifier ( criterion = \"gini\" , max_depth = 3 , random_state = seed ) model . fit ( data , cls ) predictions = model . predict ( data ) Zs = model . predict ( XYs ) . reshape ( Xs . shape ) ax . scatter ( x , y , c = predictions , s = 50 ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_title ( f \"Decision Tree seed= { seed } \" ), ax . set_xlim ( xmin , xmax ), ax . set_ylim ( ymin , ymax ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () Support Vector Machine(SVM) $$f(\\mathbf{x}) = \\mathbf{w}\\cdot\\mathbf{x} + \\mathbf{b} = \\mathbf{0}$$ $\\|\\mathbf{w}\\|$ を決定するためには、黄色の線上にある点(support vector)のみ寄与。SVMの重要なところは、通常 $$\\mathrm{Error}_{\\text{世の中全体}}>\\mathrm{Error}_{\\text{見たことのある世界}}$$ であるが、発明者 Vapnic が $$\\mathrm{Error}_{\\text{世の中全体}}\\leq\\mathrm{Error}_{\\text{見たことのある世界}} + \\alpha$$ を証明してしまった。なお、$\\alpha$ も $\\|\\mathbf{w}\\|$ の最小化で最小化できるため、$\\|\\mathbf{w}\\|$ の最小化をひたすら頑張るだけで良い。 ※ 実装は ここ アンサンブル学習 名前 説明 強学習器 bagging トレーニングデータをランダムにサンプリングして学習器 $f&#94;b(\\mathbf{x}),(b=1,2,\\ldots,B)$ を作る。 $$f(\\mathbf{x}) = \\frac{1}{B}\\sum_b&#94;Bf&#94;b(\\mathbf{x})$$ Random Forest (RF) 決定木 $f&#94;r(\\mathbf{x}),(r=1,2,\\ldots,R)$ をランダムに作る。木がたくさんあるので森(forest)になる。 $$f(\\mathbf{x}) = \\frac{1}{R}\\sum_r&#94;Rf&#94;r(\\mathbf{x})$$ boosting 弱学習器 $f&#94;t(\\mathbf{x})$ の精度に応じた重み付き多数決を行う。なお、$\\alpha$ の決め方はadaboostやXGboostなど様々ある。 $$f(\\mathbf{x}) = \\frac{1}{T}\\sum_t&#94;T\\alpha&#94;tf&#94;t(\\mathbf{x})$$ Neural Network パーセプトロン $\\mathbf{w}$ を法線と考えると、超平面のあっちとこっちを判定しているだけ＝SVMと同じ。 perceptronの学習アルゴリズムは、下記の流れで収束することが知られている。 重み（法線）ベクトルをランダムに設定 2クラス $0,1$ があったとして、training dataから順に取り出して、$y$ を出力してみる（平面のどちら側か） 合っていたら何もしない。間違っていたら $$ \\begin{cases} \\mathbf{w}\\longleftarrow\\mathbf{w} +\\rho \\mathbf{x} & (\\text{クラス1を0と誤判定した時})\\\\ \\mathbf{w}\\longleftarrow\\mathbf{w} -\\rho \\mathbf{x} & (\\text{クラス0を1と誤判定した時}) \\end{cases}$$ 2,3を全てのtraining dataに対して行う。 全てのtraining dataに対して正解が規定回数に達したら終了。それ以外の場合、2に戻る。 # Pythonでプログラム化すると以下。 while True : n_true = 0 for x , c in zip ( data , cls ): if c == 1 and sum ( w * x ) < 0 : w += rho * x elif c == 0 and sum ( w * x ) >= 0 : w -= rho * x else : n_true += 1 if n_true > N * true_rate : break In [16]: n_cls0 = 30 ; n_cls1 = 40 N = n_cls0 + n_cls1 In [17]: w = np . random . RandomState ( 0 ) . uniform ( size = 2 ) # Initialization. rho = 1e-3 # step size. true_rate = 0.9 In [18]: # train_x data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 2 , 4 ], cov = np . eye ( 2 ), size = n_cls0 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 1 ], cov = np . eye ( 2 ), size = n_cls1 ), ]) X1 , X2 = data . T # train_t cls = np . concatenate ([ np . zeros ( shape = ( n_cls0 ), dtype = int ), np . ones ( shape = ( n_cls1 ), dtype = int ) ]) In [19]: while True : n_true = 0 for x , c in zip ( data , cls ): if c == 1 and sum ( w * x ) < 0 : w += rho * x elif c == 0 and sum ( w * x ) >= 0 : w -= rho * x else : n_true += 1 if n_true > N * true_rate : break In [20]: X = np . linspace ( min ( X1 ), max ( X2 ), 1000 ) Y = ( - w [ 0 ] / w [ 1 ]) * X In [21]: plt . scatter ( X1 , X2 , c = cls ) plt . plot ( X , Y , color = \"red\" ) plt . xlabel ( \"$x_1$\" , fontsize = 18 ), plt . ylabel ( \"$x_2$\" , fontsize = 18 ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-4.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-4.html"},{"title":"生物統計論 第5回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section5.1 Bayesian Model Comparison Overfitting In [2]: N = 15 Ms = [ 2 , 4 , 8 , 16 ] seed = 0 In [3]: # Training data. x = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = N ) Noise = np . random . RandomState ( seed ) . normal ( loc = 0 , scale = 0.1 , size = N ) t = np . sin ( 2 * np . pi * x ) + Noise In [4]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= { M } $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ { RSS : .3f } $,M=$ { M } $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Varying Component Number In [5]: from kerasy.ML.MixedDistribution import MixedGaussian from kerasy.utils.data_generator import generateMultivariateNormal In [6]: N = 200 cls = 6 seed = 123 In [7]: data , means = generateMultivariateNormal ( cls = cls , N = N , scale = 8e-3 , same = False , seed = seed ) x , y = data . T mux , muy = means . T In [8]: # Background Color xmin , ymin = np . min ( data , axis = 0 ); xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [9]: Nfig = cls col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col fig = plt . figure ( figsize = ( 6 * col , 4 * row )) Likelihoods = [] for i , K in enumerate ( range ( 1 , cls + 1 )): ax = fig . add_subplot ( row , col , i + 1 ) model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data , span = 20 ) Z = model . predict ( XYs ) idx = np . argmax ( model . predict ( data ), axis = 1 ) Zs = np . sum ( Z , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. likelihood = np . sum ( Z ) ax . scatter ( x , y , c = idx ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( xmin , xmax ) ax . set_ylim ( ymin , ymax ) ax . set_title ( f \"K= { K } , { np . sum ( Z ) : .1f } \" ) Likelihoods . append ( likelihood ) plt . tight_layout () plt . show () In [10]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . scatter ( x , y , label = \"data\" ) axL . scatter ( mux , muy , label = \"mean\" , marker = \"*\" , color = \"red\" , s = 150 ) axL . set_title ( \"Training Data.\" ) axL . legend () axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( np . arange ( cls ) + 1 , Likelihoods ) axR . scatter ( np . arange ( cls ) + 1 , Likelihoods ) axR . set_xlabel ( \"num comp\" ) axR . set_ylabel ( \"likelihoods\" ) axR . set_title ( \"Log likelihood vs num comp\" , fontsize = 18 ) plt . tight_layout () plt . show () Cross Validation ※ Not Bayesian estimate the skill of a machine learning model on unseen data. use a limited sample in order to estimate how the model is expected to perform in general when used to make predictions on data not used during the training of the model. In [11]: n_fold = 5 size = N // n_fold Kmax = 30 In [12]: Likelihoods = [] CrossValidationLikelihoods = [] for i , K in enumerate ( range ( 1 , Kmax + 1 )): H = 0 for h in range ( n_fold ): mask = np . ones ( shape = N , dtype = bool ) mask [ h * size :( h + 1 ) * size ] = False model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data [ mask ], span = 20 ) Z = model . predict ( data [ np . logical_not ( mask )]) H += np . sum ( Z ) model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data , span = 20 ) Z = model . predict ( data ) Likelihoods . append ( np . sum ( Z )) CrossValidationLikelihoods . append ( H ) In [13]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . plot ( np . arange ( Kmax ) + 1 , CrossValidationLikelihoods ) axL . scatter ( np . arange ( Kmax ) + 1 , CrossValidationLikelihoods ) axL . set_xlabel ( \"num comp\" ), axL . set_ylabel ( \"Cross Validation likelihoods\" ), axL . set_title ( \"Cross Validation Log likelihood vs num comp\" , fontsize = 18 ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( np . arange ( Kmax ) + 1 , Likelihoods ) axR . scatter ( np . arange ( Kmax ) + 1 , Likelihoods ) axR . set_xlabel ( \"num comp\" ), axR . set_ylabel ( \"likelihoods\" ), axR . set_title ( \"Log likelihood vs num comp\" , fontsize = 18 ) plt . tight_layout () plt . show () Cross Entropy of Prediction ※ Not Bayesian empirical distribution $D = \\left\\{\\mathbf{x}&#94;{(h)}|h=1,\\ldots,n\\right\\}$ $x\\sim\\mathrm{Emp}(D)$ $f_X(\\mathbf{X}) = \\frac{1}{n}\\sum_{h=1}&#94;n\\delta\\left(\\mathbf{x}-\\mathbf{x}&#94;{(h)}\\right)$ $\\mathbb{E}\\left(g(\\mathbf{x})\\right) = \\frac{1}{n}\\sum_{h=1}&#94;n\\int d\\mathbf{x}g(\\mathbf{x})\\delta\\left(\\mathbf{x}-\\mathbf{x}&#94;{(h)}\\right) = \\frac{1}{n}\\sum_{h=1}&#94;ng\\left(\\mathbf{x}&#94;{(h)}\\right)$ In [14]: seed = 0 N = 1000 In [15]: data = np . random . RandomState ( seed ) . normal ( size = N ) In [16]: Emp = dict ( zip ( data , np . zeros ( N ))) for x in data : Emp [ x ] += 1 / N In [17]: for X , Y in sorted ( Emp . items ()): plt . plot (( X , X ),( 0 , Y ), color = \"black\" , alpha = 0.1 ) plt . title ( \"Empirical distribution (Normal)\" ) plt . xlabel ( \"x\" ) plt . show () We can assume Empirical distribution as a true distribution . Cross Entropy $$ \\begin{aligned} H(D,\\boldsymbol{\\theta}) &= \\text{Cross Entropy between }f_{\\text{Emp}(D)} \\text{ and }f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)\\\\ &= \\mathbb{E}_{\\text{Emp}(D)}\\left(-\\log f\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right)\\right)\\\\ &= -\\int f_{\\text{Emp}(D)}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &= -\\frac{1}{n}\\sum_{h=1}&#94;n\\log f\\left(\\mathbf{x}&#94;{(h)}|\\boldsymbol{\\theta}\\right)\\\\ &= -\\bar{l}&#94;{(n)}\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right) \\end{aligned} $$ We can also say that: $$ \\begin{aligned} H(D,\\boldsymbol{\\theta}) &= -\\int f_{\\text{Emp}}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &\\Rightarrow \\int f_{\\text{Emp}}(\\mathbf{x})\\log f_{\\text{Emp}}(\\mathbf{x})d\\mathbf{x} -\\int f_{\\text{Emp}}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &= -\\int f_{\\text{Emp}}(\\mathbf{x})\\log\\left\\{\\frac{f_{\\text{Emp}}(\\mathbf{x})}{f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)}\\right\\}d\\mathbf{x}\\\\ &= \\mathrm{KL}\\left(f_{\\text{Emp}}\\|f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)\\right)\\\\ &= \\text{Kullback-Leibler divergence between}f_{\\text{Emp}(D)} \\text{ and }f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right) \\end{aligned} $$ Evidence Approximation ※ Yes Bayesian In a fully Bayesian treatment of the linear basis function model, we would introduce prior distributions over the hyperparameters $\\alpha$, and $\\beta$. $$ \\begin{aligned} p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x},\\alpha,\\beta) &= \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)d\\mathbf{w}& (3.57)\\\\ &\\Rightarrow \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)p(\\alpha,\\beta|\\mathbf{t},\\mathbf{X})d\\mathbf{w}d\\alpha d\\beta& (3.74) \\end{aligned} $$ Marginalize with respect to these hyperparameters as well as with respect to the parameters $\\mathbf{w}$ to make predictions. Complete marginalization over all of these variables is analytically intractable. We will maximize $(3.74)$ in line with the framework of empirical Bayes (or type 2 maximum likelihood , generalized maximum likelihood , evidence approximation ) Obtain the marginal likelihoo function by first integrating over the parameters $\\mathbf{w}$ $$p(\\mathbf{t}|\\alpha,\\beta) = \\int p(\\mathbf{t}|\\mathbf{w},\\mathbf{X},\\beta)p(\\mathbf{w}|\\alpha)d\\mathbf{w}\\qquad (3.77)$$ Maximize $p(\\mathbf{t}|\\alpha,\\beta)$ with respect to $\\alpha$ and $\\beta$. In [18]: from kerasy.utils.preprocessing import PolynomialBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian from kerasy.ML.linear import EvidenceApproxBayesianRegression In [19]: N = 20 Ms = np . arange ( 10 ) xmin = 0 ; xmax = 1 seed = 0 In [20]: x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 0.15 , seed = seed ) y_train += 1 + y_noise In [21]: alpha = 100 beta = 100 In [22]: evidences = [] history = [] for M in Ms : phi = PolynomialBaseTransformer ( M = M ) x_train_features = phi . transform ( x_train ) model = EvidenceApproxBayesianRegression ( alpha = alpha , beta = beta , iter_max = 10000 ) model . fit ( x_train_features , y_train ) evidences . append ( model . evidence ( x_train_features , y_train )) history . append ( model ) best_M = np . argmax ( evidences [ 1 :]) + 1 best_model = history [ best_M ] In [23]: x_test = np . linspace ( xmin , xmax , 1000 ) phi = PolynomialBaseTransformer ( M = best_M ) x_test_features = phi . transform ( x_test ) y_test = 1 + np . sin ( 2 * np . pi * x_test ) y_pred , y_std = best_model . predict ( x_test_features ) In [24]: fig = plt . figure ( figsize = ( 12 , 4 )) axEVI = fig . add_subplot ( 1 , 2 , 1 ) axEVI . plot ( Ms , evidences ) axEVI . scatter ( Ms , evidences ) axEVI . set_title ( \"The relationship between 'model evidence' and $M$\" ), axEVI . set_xlabel ( \"$M$\" ), axEVI . set_ylabel ( \"$\\log({model\\ evidence})$\" , fontsize = 16 ) axBest = fig . add_subplot ( 1 , 2 , 2 ) axBest . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) axBest . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) axBest . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) axBest . scatter ( x_train , y_train , s = 50 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) axBest . set_ylim ( - 0.5 , 2.5 ), axBest . legend (), axBest . set_title ( f \"Bayesian Linear Regression (M= { best_M } )\" ) plt . tight_layout () plt . show () In [25]: print ( \"[Best Parameter]\" ) print ( f \"M = { best_M } \" ) print ( f \"alpha = { best_model . alpha } \" ) print ( f \"beta = { best_model . beta } \" ) [Best Parameter] M = 3 alpha = 0.0025750535934692723 beta = 56.07833727501231 Section5.2 Markov Process Biological Diversity Single Origin of Life \"Nothing in Biology Makes Sense Except in the Light of Evolution\" C.T. Dobzhansky Stochastic Transcription (Stochasticity vs Regulation) Stochasticity in Development Stochastic Process Mathematical description of stochastic behaviors. data: $\\left\\{\\mathbf{X}_t|t=1,\\ldots,n\\right\\}$ Probability: $\\mathbb{P}\\left(\\mathbf{X}_{t_m} = \\mathbf{x}_{t_m},\\ldots,\\mathbf{X}_{t_2} = \\mathbf{x}_{t_2},\\mathbf{X}_{t_1} = \\mathbf{x}_{t_1}\\right)$ $\\omega$ is one of the random paths. $\\mathbf{X}_t$ is a map indicats which state random paths $\\omega$ is in at time $t$ Events $E$ is a constraint on the value of $\\mathbf{X}_t$ at some times. $P(E)$ is the probability if the random paths satisfy the constraint $E$. markov Process $$\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t|\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right) = \\mathbb{P}\\left(\\mathbf{X}_t=\\mathbf{x}_t|\\mathbf{X}_{t-1}=\\mathbf{x_{t-1}}\\right)$$ Decomposition of Joint Distribution $$ \\begin{aligned} &\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t,\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &=\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &=\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1} | \\mathbf{X}_{t-2} = \\mathbf{x}_{t-2},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_{t-2} = \\mathbf{x}_{t-2},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &= \\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\cdots \\times\\mathbb{P}\\left(\\mathbf{X}_2=\\mathbf{x}_2|\\mathbf{X}_1=\\mathbf{x}_1,\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_1=\\mathbf{x}_1|\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_0=\\mathbf{x}_0\\right)\\\\ &= \\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1}\\right) \\times \\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1} | \\mathbf{X}_{t-2} = \\mathbf{x}_{t-2}\\right)\\times \\cdots\\times\\mathbb{P}\\left(\\mathbf{X}_1=\\mathbf{x}_1|\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_0=\\mathbf{x}_0\\right)\\quad\\left(\\because \\text{Markov Process}\\right) \\end{aligned} $$ Transition Matrix (Assume Time Independence ): $$P = \\left\\{P_{ij}\\right\\} = \\left\\{\\mathbb{P}\\left(\\mathbf{X}_t=i|\\mathbf{X}_{t-1}=j\\right)\\right\\},\\quad P_{ij}\\geq0,\\sum_i P_{ij}=1$$ Computing transition probability Birth and Death process $$ P= \\left(\\begin{matrix}1-\\lambda_0&\\mu_1&0&0\\\\\\lambda_0&1-\\lambda_1-\\mu_1&\\mu_2&0\\\\0&\\lambda_1&1-\\lambda_2-\\mu_2&\\mu_3\\\\0&0&\\lambda_2&1-\\mu_3\\end{matrix}\\right) $$ $P = U\\Lambda U&#94;{-1}$: Eigen decomposition $P&#94;n = U\\Lambda&#94;n U&#94;{-1}$ In [26]: def makeRandomP ( N , seed = 123 ): lambdas = np . r_ [ np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 / N , size = N - 1 ), np . zeros ( shape = 1 )] mus = np . r_ [ np . zeros ( shape = 1 ), np . random . RandomState ( seed + 1 ) . uniform ( low = 0 , high = 1 / N , size = N - 1 )] P = np . zeros ( shape = ( N , N )) for i in range ( N ): P [ i , - 1 + i ] = mus [ i ]; P [ i , i ] = 1 - mus [ i ] - lambdas [ i ]; P [ i , 1 + i if 1 + i < N else 1 + i - N ] = lambdas [ i ] return P In [27]: def LongTimeBehaviors ( P , even = True ): inf = 50 if even else 51 eigenvals , eigenvecs = np . linalg . eig ( P ) Lambda = np . diag ( eigenvals ) eigenvecs_inv = np . linalg . inv ( eigenvecs ) Pn = np . dot ( eigenvecs , np . dot ( Lambda ** inf , eigenvecs_inv )) Pn = np . where ( Pn < 1e-5 , 0 , Pn ) return Pn example Periodic In [28]: P = np . array ([ [ 0 , 1 , 0 ], [ 1 / 2 , 0 , 1 / 2 ], [ 0 , 1 , 0 ] ]) In [29]: print ( f \"P&#94;2n: \\n { LongTimeBehaviors ( P , even = True ) } \\n \" ) print ( f \"P&#94;2n+1: \\n { LongTimeBehaviors ( P , even = False ) } \" ) P&#94;2n: [[0.5 0. 0.5] [0. 1. 0. ] [0.5 0. 0.5]] P&#94;2n+1: [[0. 1. 0. ] [0.5 0. 0.5] [0. 1. 0. ]] Reducible In [30]: P = np . array ([ [ 1 / 3 , 3 / 4 , 0 , 0 ], [ 2 / 3 , 1 / 4 , 0 , 0 ], [ 0 , 0 , 1 / 3 , 3 / 4 ], [ 0 , 0 , 2 / 3 , 1 / 4 ] ]) In [31]: LongTimeBehaviors ( P ) Out[31]: array([[0.52941176, 0.52941176, 0. , 0. ], [0.47058824, 0.47058824, 0. , 0. ], [0. , 0. , 0.52941176, 0.52941176], [0. , 0. , 0.47058824, 0.47058824]]) Absorbing In [32]: P = np . array ([ [ 1 , 1 / 2 , 0 , 0 ], [ 0 , 0 , 1 / 2 , 0 ], [ 0 , 1 / 2 , 0 , 0 ], [ 0 , 0 , 1 / 2 , 1 ] ]) In [33]: LongTimeBehaviors ( P ) Out[33]: array([[1. , 0.66666667, 0.33333333, 0. ], [0. , 0. , 0. , 0. ], [0. , 0. , 0. , 0. ], [0. , 0.33333333, 0.66666667, 1. ]]) Irreducible, Aperiodic In [34]: P = np . array ([ [ 2 / 3 , 1 / 12 , 0 ], [ 1 / 3 , 5 / 8 , 1 / 8 ], [ 0 , 7 / 24 , 7 / 8 ], ]) In [35]: LongTimeBehaviors ( P ) Out[35]: array([[0.06976762, 0.06976748, 0.06976741], [0.27906992, 0.2790698 , 0.27906974], [0.65116246, 0.65116272, 0.65116286]]) In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-5.html"},{"title":"レポート課題4(10/24出題)","text":"vTJ4f3tjCLGZGyO1zx0jhA==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report4.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report4.html"},{"title":"探索","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 講義概要 状態空間 15パズル 迷路 コスト無しグラフの探索 コスト付きグラフの探索 ゲーム木の探索 状態空間 ありうる局面の１つ１つを 状態 と言う。 状態全体からなる集合を 状態空間 と言う。 目的： 初期状態から出発して、許される 状態遷移 を繰り返し、最終状態へたどり着くこと。 これは、 グラフ(graph) の 探索(search) 問題と等価 （ノードが状態に、エッジが状態遷移にそれぞれ対応する。） 15パズル ルール： 一度に動かせるのは1パネルのみ。 飽きますに隣のパネルをずらす操作のみ可能 目標： 「できるだけ少ない手数で」 与えられた配置から元の配置に戻すこと。 元に戻すことが不可能な問題を識別する。 迷路 目的：スタートからゴールまで誘導する。 状態(state) $s$：移動できる場所 行動(action) $a$：進む方向 コスト無しグラフの探索 用語 意味 オープンリスト(open list) これから探索するノードの候補リスト クローズドリスト(closed list) 探索が終わったノードのリスト キュー(queue) 先入れ先出し スタック(stack) 後入れ先出し 探索の基本アルゴリズム open_list = [ initial_state ] # オープンリストは初期化状態のみ closed_list = [] # クローズドリストは空 while ( open_list ): # オープンリストが空になるまで以下を繰り返す。 state = getOptimalState ( open_list ) # オープンリストから（何らかの基準で）状態sを取り出す。 closed_list . append ( state ) # sをクローズドリストに追加する。 if state == last_state : break # sが最終状態ならば探索終了 open_list += [ s for s in state . transibles () if s not in closed_list ] # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストに追加する。 深さ優先探索 行き止まりに当たるまで進み、ゴールが見つからなかったら直近の分岐に戻って別の道を探す探索法。 メモリ使用量が少ない ゴールが近くにあっても、他の深い別れ道に迷い込むと時間がかかる ゴールが複数ある時、一番近くのものが見つかるとは限らない オープンリストは スタック （後入れ先出し） にする。 open_list = [ initial_state ] closed_list = [] while ( open_list ): state = open_list . pop ( 0 ) # オープンリストの先頭の状態sを取り出す。 closed_list . append ( state ) if state == last_state : break open_list . push ([ s for s in state . transibles () if s not in closed_list ]) # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストの\"先頭に\"追加する。 幅優先探索 分かれ道に来たらそれぞれの道を一歩ずつ進み，ゴールが見つからなかったらそれぞれの道をもう一歩ずつ進む探索法。 ゴールが近くにある時、早く見つかる。 ゴールが複数ある時、一番近くのものが見つかる。 分かれ道での分岐数が多いとメモリ使用量が多い。 オープンリストは キュー （先入れ後出し） にする。 open_list = [ initial_state ] closed_list = [] while ( open_list ): state = open_list . pop ( - 1 ) # オープンリストの\"末尾\"の状態sを取り出す。 closed_list . append ( state ) if state == last_state : break open_list . push ([ s for s in state . transibles () if s not in closed_list ]) # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストの\"先頭に\"追加する。 反復深化探索 深さに制限をつけて深さ優先探索を行い、徐々に深さを深くしていく探索法 ゴールが近くにある時、早く見つかる ゴールが複数ある時、一番近くのものが見つかる 同じノードを何度も訪れる（分岐が多いと影響小） まとめ 深さ優先探索・幅優先探索・反復深化探索は、グラフに関する特別な知識を使わずにオープンリストから状態を選択することから、 ブラインド探索(blined search) と呼ばれる。 # 探さ優先探索 幅優先探索 反復深化探索 完全性（必ず解が見つかるか） (completeness) $m$ が有限なら Yes Yes Yes 時間計算量 (time complexity) $\\mathrm{O}(b&#94;m)$ $\\mathrm{O}(b&#94;d)$ $\\mathrm{O}(b&#94;d)$ 空間計算量(space complexity) $\\mathrm{O}(bm)$ $\\mathrm{O}(b&#94;d)$ $\\mathrm{O}(bd)$ 最適性（一番近くの解が見つかるか） (optimality) Yes Yes Yes $b$：最大分岐数 $d$：一番浅い解の深さ $m$：最大の深さ コスト付きグラフの探索 各エッジに 遷移コスト が割り当てられている場合の最適遷移パス探索問題。 ブラインド探索 ：グラフに関する特別な知識を使わずにオープンリストから状態を選択。 貪欲探索(greedy search)：現在の状態からの遷移コストが最小の状態を選ぶ。 （深さ優先探索に対応） 最適探索(optimal search)：初期状態からの遷移コスト和が最小の状態を選ぶ。 （各コストが1だと幅優先探索になる。ダイクストラ法とも。） ヒューリスティック探索（最良優先探索, best-first search） ：グラフに関する何らかの知識を使ってオープンリストから適切と思われる状態を選択。 貪欲最良優先探索 $A&#94;{\\ast}$ 探索 貪欲最良優先探索 $\\hat{h}(s)$ を最小にする状態を選ぶ $h(s)$：$s$ から最終状態までの遷移コスト和の最小値 $\\hat{h}(s)$：$h(s)$ の推定（ヒューリスティック関数） 一度オープンリストに入ったの評価値更新は不要 ヒューリスティック関数の選び方： ユーザが 事前知識 により構築（例：直線距離） データから 機械学習 により自動構築 一般には完全性も最適性もないが、実用上は（そこそこ）うまくいくことが（それなりに）多い。 $A&#94;{\\ast}$ 探索(A-start search) $s$ を経由する場合の遷移コスト和の推定値 $\\left(\\hat{g}(s)+\\hat{h}(s)\\right)$ を最小にする状態を選ぶ。 $g(s)$：初期状態から $s$ までの遷移コスト和の最小値 $\\hat{g}(s)$：探索済みノードから $s$ に遷移する場合の最小値（ダイクストラ法と同じ） ノード $s$ を訪れると隣接ノードの $\\hat{g}(s&#94;{\\prime})$ が更新される。 $h(s)$：$s$ から最終状態までの遷移コスト和の最小値 $\\hat{h}(s)$：$h(s)$ のヒューリスティック推定値 最適経路上の $s$ ではいずれも $g(s)+h(s)$ が最小、経路外の点ではそれより大きい値をとることを利用 $\\forall s, 0\\leq\\hat{h}(s)\\leq h(s)$ が成り立つ時、$\\hat{h}(s)$ は 許容的(admissible) であるといい、この場合には $A&#94;{\\ast}$ 探索は最適性を持つ。 ※ 実装等は、 レポート課題 に記載。 In [1]: from kerasy.search.Astar import OptimalTransit In [2]: n = 3 m = 3 initial_str = \"2,-1,6,1,3,4,7,5,8\" last_str = \"1,2,3,4,5,6,7,8,-1\" In [3]: OptimalTransit ( n , m , initial_str , last_str , heuristic_method = \"Manhattan_distance\" , n_row = 5 ) n_transition = 9 ゲーム木の探索 2人のプレイヤーが交互に遷移先を決めるゲーム（ex. 将棋・囲碁・リバーシ・◯×など）における最適遷移探索問題 ミニマックス探索 自分は一番良い（点数を最大化する）手を選ぶ 相手は一番悪い（点数を最小化する）手を選ぶ アルファ・ベータ探索 ミニ・マックス探索では、全ての局面に対する点数を求める必要があり、時間がかかる。 不要な点数計算を省略することで効率化 $\\alpha$：max計算の際の下界値 $\\beta$：min計算の際の上界値 モンテカルロ木探索 アルファ・ベータ法を用いても、ゲーム木を深く探索するのは困難（$b&#94;d$ が $b&#94;{d/2}$ になる程度。） そこで、 ランダムに 手を打つ。 囲碁やスケジューリングなどで活用されている。 まとめ 広大な状態空間を効率よく探索したい コスト無しグラフの探索 コスト付きグラフの探索 ゲーム木の探索 膨大な状態空間の探索には，近似的な手法が有用 事前知識や機械学習によるヒューリスティック関数の構築 モンテカル 木探索 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-4.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-4.html"},{"title":"分子生命科学Ⅲ 第5回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 感覚神経系(3) 視覚系 末梢視覚系(眼) 網膜神経節細胞(retinal granule cell; RGC) 1 の受容野は、光によって 1 の発火パターンが変化する視野の領域または、それに相当する 網膜領域 である。 1 のそばに細胞外電極をおいて、単一のニューロンの発火パターンを測定できる。（ 2 ） 下図にあるスポット光を網膜上で動かし、 1 の発火パターンを調べることで、2種類の 1 があることが分かった。 実験結果 説明 （最上段） どちらの 1 も視覚刺激が無い状態で発火があった。 （2段目） 中心ON型 1 では中心部への明るい小さなスポット光で最もよく興奮した。 （3段目） スポットの直径を大きくすると、発火頻度は減少した。 これは、中心ON型 1 では、周辺部の光刺激が細胞を抑制するからである。中心OFF型 1 では、これと反対の性質を持つ。このように、 1 は、 単純に光に応答するのではなく、網膜内の狭い領域の明暗の対比を認識している ことがわかる。 では、続いて 受容野に照射した光の明暗境界に対する 神経節細胞の出力を調べる。 実験結果 説明 中心OFF神経節細胞は、全面が均等に照射された時は、中心部と周辺部が相殺して低レベルの反応を示す。 影が周辺部から入って中心部に達するまでは神経節細胞は過分極し、さらに反応が低下する。 影が中心部に入り始めると、中心部からの活性化が周辺部からの抑制を圧倒し、反応が増加する。 影が全面を覆うと中心部からの反応は再び相殺される。 これより、神経節細胞の反応は、 主に受容野内に明暗の境界があるかないか によって調節されることがわかる。 これらの実験から、視覚系は網膜上に当たる光の絶対的な強さよりも、むしろ空間の局所変化を感知するよう特殊化していると考えられる。 明暗知覚に関するコントラストの影響 このことは、視覚における 錯覚（錯視） が多くあることでもわかる。例えば、明暗知覚に関するコントラストの影響を考えると、以下の二つの画像は 中心の四角形の灰色の明度は同じ だが、左の方が 明るい ために、左の四角形の方が 暗く 見える。 中心ON型受容野は、左側では右側よりも周辺部に強い光を受けている。これより、左側の神経節細胞の反応は小さくなる。その結果、左の四角はより暗くなると考えられる。 網膜神経節細胞(retinal granule cell; RGC) 哺乳動物の網膜の神経節細胞は、その大半が中心ON型か、中心OFF型の中心-周辺受容野の仕組みを持つ。これらは細胞の 形態 ・ 接続様式 ・ 電気生理学的特性 に基づいてさらに分類されている。 マカグザルとヒトの網膜では、主要な2タイプの神経節細胞が際立っている。大きな 3 と、それよりは小さい 4 である。 4 は神経節細胞の約90%を締め、これは色（赤-緑対立）や形の識別に関与する。この細胞は、 刺激が与えられている間は持続的に放電し続ける 反応を示す。 3 は神経節細胞の約5%を締め、これは動きの検出に関与する。 4 に比べて より大きな受容野 を持ち、視神経内の活動電位を より速く伝達 し、光のコントラストが 小さい刺激に対してもより高い感受性 を持つ。また、 受容野中心部の刺激に対して一過性で群発性の活動電位で反応 する。 残りの5%は、特性がはっきりしない 5 からなる。 他にも、色（青-黄対立）や暗時には桿体からの情報を集める 6 など、網膜神経節細胞は全部で約20種類に分類されており、それぞれの種類の神経節細胞が網膜全体をタイルのように覆っている。 中枢視覚系 網膜（末梢視覚系）によって検出された情報から中枢視覚系が、物体の色・位置・動き等を抽出し、認知する。 視神経に始まる神経経路は、しばしば 7 と呼ばれる。 なお、 -fugal という接尾語は 遠ざかる という意のラテン語に由来しており、神経解剖学では一般的に、ある構造から離れていく経路を示すのに用いられる。 網膜から \"遠ざかる\" 神経節細胞の軸索は、3つの部位を通過した後、脳幹内でシナプスを形成する。網膜からのこの遠心路の3つの部位は、順に 8 、 9 、 10 である。 8 は視神経円板（視神経乳頭ともいう）の位置で左右の眼から出て、眼球背部の眼窩内にある脂肪組織をくぐり抜けた後、頭蓋底の孔（ 11 ）を通り頭蓋腔に入る。 左右の眼からの 8 は合流し、下垂体のすぐ前方の脳底部で 9 を形成する。 9 において、鼻側網膜からの軸索は互いに対側に交叉する。一側から他側への対をなす線維束の交叉は 12 と呼ばれる。（鼻側網膜から出る軸索だけが交叉するため、視交叉では網膜からの投射が半交叉することになる。） 網膜から出た軸索は、視交叉における半交叉を経て 10 を構成し、間脳の外側表面に沿って軟膜直下を走行する。 網膜の神経節細胞の軸索である視神経線維の一部は、中脳の 13 や視蓋前野にも投射する。 13 は、周囲で生じた感覚刺激に対して目と頭を向ける反射に関与している。 視蓋前野は、瞳孔の大きさやある種の眼球運動を制御する。また、日内リズムの振動体である視床下部の視交叉上核へも投射し、日内リズムの光同調に関与する。 脳機能の頭端移動の法則 いかなる動物においても 13 （ 14 ）は発達している。特に下等生物では 13 （ 14 ）はあらゆる感覚入力を統合し、延髄や脊髄に出力する重要な統合中枢である。 しかし、哺乳類になると、視覚の最高中枢は大脳皮質視覚野に移動する。 13 は視覚の面で言えば、 眼球運動（サッケード） の調節や頭の位置の制御を分担する。このように、 進化の過程で、下位脳の機能が大脳に代替されていくこと を、 「脳機能の頭端移動の法則」 という。 外側膝状体 視床背側に位置する左右の 15 は、2本の 10 の主要な投射部位である。横断面で見ると、それぞれの 15 では細胞が明瞭な6層構造をなして並んでいる。 | 15 | 15 の各層への網膜からの入力|左右の眼と各タイプの神経節細胞からの入力の分離| |:-:|:-:|:-:| | | | | 腹側の1,2層の細胞体は大きいので 大細胞層 と呼ばれる。 背側の4層は 小細胞層 と呼ばれる。 半交叉の結果、 15 には左右の眼球から、対側視野の視覚情報が届けられる。2,3,5層は同側の網膜から、1,4,6層は反対側の網膜からの投射を受ける。層が異なっても、それぞれの層の対応する部位は、視野の同じ部位から投射を受ける。 左右網膜の 3 ・ 4 ・ 5 も、それぞれ異なる層の細胞にシナプス結合する。 一次視覚野 15 の唯一の主要なシナプス標的は 一次視覚野 である。一次視覚野はブロードマンBrodmann17野で、霊長類の脳の後頭葉に位置する。この17野は、後頭葉内側面の鳥距離溝 （ちょうきょこう） を挟む領域で、その第4層に有髄線維が観察されるため、 16 とも呼ばれる。一次視覚野を指す用語としては、他に 17 などがある。 | | | |:-|:-| |網膜で隣接する部位は、隣接する 15 に投射する。この網膜部位局在関係は、一次視覚野に投射する 15 でも保存されている。|一次視覚野の下部は、視野の上半分の情報を再現し、上部は視野の下半分の情報を再現する。中心視野の分析により多くの皮質が対応している。| 視覚野では、特性の類似した細胞が垂直に並んでおり、以下の3つの視覚野の円柱構造（カラム, column）構造がある。 18 は、同側もしくは反対側網膜からの視覚入力を受けて発達する構造で、成熟動物ではこのカラム内のⅣ層ニューロンは単眼性の投射を受ける。 19 は、特定の方位を持つ単純な棒状刺激に反応するニューロンのカラム構造のこと。 20 は、Ⅱ層とⅢ層に見られる色刺激に感受性の高いニューロン集団で、ミトコンドリア代謝酵素活性の高いブロッブ(blob)領域と一致する。","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-5.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-5.html"},{"title":"ガウシアンプロセスとベイズ最適化","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt import seaborn as sns データ駆動科学とベイズ最適化 データ駆動科学では、データに基づいて、新たな知見・事柄を発見することが求められる 単に予測を行うだけでなく、それに基づいて「行動」を設計することが必要 これらは、「ベイズ最適化」の枠組みに乗ることが多い 概要 ベイズ線形回帰 ガウシアンプロセス ベイズ最適化 ベイズ線形回帰 線形回帰モデルのパラメータを 最尤推定 によって決める場合、 解こうとしている問題に合わせてモデルの複雑さを適切に決めることが必要 ↑は、単純に尤度を最大化するだけでは 過学習 を引き起こしてしまう。 データの一部を独立なテスト用データとして取っておく ことでモデルの汎化性能を評価できるが、この方法は 計算量が大きく 、 データの無駄遣い となり得る。 これらの問題に対処するため、線形回帰モデルをベイズ的に取り扱うことで最尤推定の過学習を回避するとともに 「訓練データだけからモデルの複雑さを自動的に決定する。」 概要 解こうとしている問題に沿った 尤度関数(likelihood function) （ $p(\\mathbf{t}|\\mathbf{X},\\mathbf{w})$ ） を定義する。 モデルパラメータの 事前分布(prior distribution) （ $p(\\mathbf{w})$ ） を、 尤度関数 の 共役事前分布(conjugate prior) の形で定義する。 ベイズの公式より、 事後分布(posterior distribution) は 事前分布 と 尤度関数 の積に比例する。 （ $p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})\\propto p(\\mathbf{t}|\\mathbf{X},\\mathbf{w})\\cdot p(\\mathbf{w})$ ） あるパラメータ （ $\\mathbf{w}$ ） 下で入力 $\\mathbf{x}$ が与えられた時の確率分布 （ $p(t|\\mathbf{w},\\mathbf{x})$ ） を、3で求めた 事後分布 （ $p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})$ ） で重み付けしながら 周辺化(marginalization) する （ $p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x}) = \\int p(t|\\mathbf{w},\\mathbf{x})p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})d\\mathbf{w}$ ） ことで、 予測分布(predivtive distribution) （ $p(t|\\mathbf{w},\\mathbf{x})$ ） を得る。 具体例 ※ $D$ 次元の説明変数 $\\mathbf{x}$ で一次元の目標変数 $t$ を線形回帰するモデルをベイズ的に取り扱う。 目標変数 $t$ が決定論的な関数 $y(\\mathbf{x},\\mathbf{w})$ と加法性のガウスノイズの和で与えられる場合を考える。 $$t = y(\\mathbf{x},\\mathbf{w}) + \\epsilon\\qquad (3.7)$$ ここで、$\\epsilon$ は期待値が $0$ で精度が $\\beta$ のガウス確率変数である。すなわち、以下で表すことができる。 $$p(t|\\mathbf{x},\\mathbf{w},\\beta) = \\mathcal{N}\\left(t|y(\\mathbf{x},\\mathbf{w}),\\beta&#94;{-1}\\right)\\qquad (3.8)$$ データ点が $(3.8)$ の分布から 独立に生成された と仮定すると、尤度関数を次のように表せる。 $$p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) = \\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)\\qquad (3.10)$$ モデルパラメータ $\\mathbf{w}$ の事前分布を導入する。 ここで、 $\\beta$ が既知 と仮定すると、上記の尤度関数の共役事前分布である、期待値 $\\mathbf{m}_0$ 共分散 $\\mathbf{S}_0$ を持つガウス分布で表すのが適当である。 $$p(\\mathbf{w}) = \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)\\qquad (3.48)$$ ※ なお、$\\mathbf{w},\\beta$ の両方が未知である場合、共役事前分布は ガウス-ガンマ分布 隣、予測分布は スチューデントのt分布 となる。 ベイズの公式より、 事後分布は事前分布と尤度関数の積に比例する ので、これを解くことで事後分布を次の形で書き出すことができる。 （導出） $$ p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) = \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N) \\qquad (3.49)\\\\ \\begin{cases} \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51) \\end{cases} $$ $\\mathbf{w}$ で周辺化することで、予測分布を求めるが、議論の簡単のために、 「モデルパラメータ $\\mathbf{w}$ の事前分布 $p(\\mathbf{w})$ が、単一の制度パラメータ $\\alpha$ で記述される期待値が $0$ の等方的ガウス分布である」 とする。 $$p(\\mathbf{w}|\\alpha) = \\mathcal{N}\\left(\\mathbf{w}|\\mathbf{0},\\alpha&#94;{-1}\\mathbf{I}\\right)\\qquad (3.52)$$ この時、上記の $\\mathbf{w}$ の事後分布 $(3.49)$ の形は変わらず、$\\mathbf{m}_N,\\mathbf{S}_N$ の値が $$ \\begin{cases} \\mathbf{m}_N &= \\beta\\mathbf{S}_N\\boldsymbol{\\Phi}&#94;T\\mathbf{t} & (3.53)\\\\ \\mathbf{S}_N&#94;{-1} &= \\alpha\\mathbf{I} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.54) \\end{cases} $$ となる。この条件下で周辺化すると、以下の結果を得る。 （導出） $$ \\begin{aligned} p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x},\\alpha,\\beta) &= \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)d\\mathbf{w}& (3.57)\\\\ &= \\mathcal{N}\\left(t|\\mathbf{m}_N&#94;T\\phi(\\mathbf{x}),\\sigma_N&#94;2(\\mathbf{x})\\right) & (3.58)\\\\ \\sigma_N&#94;2(\\mathbf{x}) &= \\frac{1}{\\beta} + \\phi(\\mathbf{x})&#94;T\\mathbf{S}\\phi(\\mathbf{x}) & (3.59) \\end{aligned} $$ ※ ここで、$(3.59)$ の第1項はデータに含まれるノイズを、第2項は $\\mathbf{w}$ に関する不確かさを反映している。 事後分布の計算の導出過程 $$ \\begin{aligned} \\text{likelihood function : } p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) &= \\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)& (3.10)\\\\ \\text{prior distribution : } p(\\mathbf{w}) &= \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)& (3.48)\\\\ \\text{posterior distribution : } p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) &= \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N) & (3.49)\\\\ \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51)\\\\ \\mathcal{N}(x|\\mu,\\sigma&#94;2) &= \\frac{1}{\\left(2\\pi\\sigma&#94;2\\right)&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2\\sigma&#94;2}(x-\\mu)&#94;2\\right\\} & (2.42)\\\\ \\mathcal{N}(\\mathbf{x}|\\boldsymbol{\\mu},\\boldsymbol{\\Sigma}) &= \\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}|&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)\\right\\} & (2.43) \\end{aligned} $$ $$ \\begin{aligned} p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) &\\propto p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) p(\\mathbf{w}) \\\\ &=\\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)\\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)\\\\ &\\propto\\prod_{n=1}&#94;N\\exp\\left\\{-\\frac{\\beta}{2}\\left(t_n-\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\right)&#94;2\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &=\\exp\\left\\{-\\frac{\\beta}{2}\\sum_{n=1}&#94;N\\left(t_n-\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\right)&#94;2\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &= \\exp\\left\\{-\\frac{\\beta}{2}\\left( \\begin{array}{c}t_1 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_1)\\\\ t_2 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_2) \\\\ \\vdots \\\\ t_N - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_N) \\end{array} \\right)&#94;T\\left( \\begin{array}{c}t_1 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_1)\\\\ t_2 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_2) \\\\ \\vdots \\\\ t_N - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_N) \\end{array} \\right) \\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &= \\exp\\left\\{-\\frac{\\beta}{2}\\left(\\mathbf{t}-\\boldsymbol{\\Phi}\\mathbf{w}\\right)&#94;T\\left(\\mathbf{t}-\\boldsymbol{\\Phi}\\mathbf{w}\\right)\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\}\\\\ &= \\exp\\left\\{ -\\frac{1}{2} \\left(\\beta\\mathbf{t}&#94;T\\mathbf{t} - \\beta\\mathbf{t}&#94;T\\boldsymbol{\\Phi}\\mathbf{w} - \\beta\\mathbf{w}&#94;T\\boldsymbol{\\Phi}&#94;T\\mathbf{t} + \\beta\\mathbf{w}&#94;T\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi}\\mathbf{w} + \\mathbf{w}&#94;T\\mathbf{S}_0&#94;{-1}\\mathbf{w} - \\mathbf{w}&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0 - \\mathbf{m}_0&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{w} + \\mathbf{m}_0&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right)\\right\\}\\\\ &= \\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}&#94;T\\left(\\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} + \\mathbf{S}&#94;{-1}_0\\right)\\mathbf{w} - \\mathbf{w}&#94;T\\left(\\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t} + \\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right) - \\left(\\beta\\mathbf{t}&#94;T\\boldsymbol{\\Phi} + \\mathbf{m}_0\\mathbf{S}&#94;{-1}_0\\right)\\mathbf{w} + \\left(\\beta\\mathbf{t}&#94;T\\mathbf{t} + \\mathbf{m_0}&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right)\\right)\\right\\} \\\\ &=\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w} - \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right)\\right)&#94;T\\mathbf{S}_N&#94;{-1}\\left(\\mathbf{w} - \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right)\\right) + \\mathrm{C} \\right\\}\\\\ &\\propto\\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N)\\\\ &\\begin{cases} \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51)\\\\\\end{cases} \\end{aligned}\\\\ $$ 周辺化計算の導出過程 以下の「ガウス分布の周辺分布と条件付き分布の関係」の $(2.115)$ の結果を用いる。 $\\mathbf{x}$ の周辺ガウス分布と、$\\mathbf{x}$ が与えられた時の $\\mathbf{y}$ の条件付きガウス分布が次式で与えられたとする。 $$ \\begin{aligned} p(\\mathbf{x}) &=\\mathcal{N}\\left(\\mathbf{x} | \\boldsymbol{\\mu}, \\mathbf{\\Lambda}&#94;{-1}\\right) & (2.113)\\\\ p(\\mathbf{y} | \\mathbf{x}) &=\\mathcal{N}\\left(\\mathbf{y} | \\mathbf{A} \\mathbf{x}+\\mathbf{b}, \\mathbf{L}&#94;{-1}\\right) & (2.114)\\end{aligned} $$ この時、$\\mathbf{y}$ の周辺分布と、$\\mathbf{y}$ が与えられた時の $\\mathbf{x}$ の条件付き分布は $$ \\begin{aligned} p(\\mathbf{y}) &=\\mathcal{N}\\left(\\mathbf{y} | \\mathbf{A} \\boldsymbol{\\mu}+\\mathbf{b}, \\mathbf{L}&#94;{-1}+\\mathbf{A} \\mathbf{\\Lambda}&#94;{-1} \\mathbf{A}&#94;{\\mathrm{T}}\\right) & (2.115)\\\\ p(\\mathbf{x} | \\mathbf{y}) &=\\mathcal{N}\\left(\\mathbf{x} | \\mathbf{\\Sigma}\\left\\{\\mathbf{A}&#94;{\\mathrm{T}} \\mathbf{L}(\\mathbf{y}-\\mathbf{b})+\\mathbf{\\Lambda} \\boldsymbol{\\mu}\\right\\}, \\mathbf{\\Sigma}\\right) & (2.116) \\end{aligned} $$ で与えられる。ただし、 $$\\mathbf{\\Sigma} = \\left(\\mathbf{\\Lambda} + \\mathbf{A}&#94;T\\mathbf{LA}\\right)&#94;{-1}\\qquad (2.117)$$ である。 実装 In [2]: from kerasy.ML.linear import BayesianLinearRegression from kerasy.utils.preprocessing import GaussianBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian In [3]: N = 25 ; D = 1 ; M = 25 xmin = 0 ; xmax = 1 seed = 10 In [4]: alpha = 1 beta = 25 In [5]: x_test = np . linspace ( xmin , xmax , 1000 ) y_test = np . sin ( 2 * np . pi * x_test ) x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 1 / beta , seed = seed ) y_train += y_noise In [6]: # transform mu = np . linspace ( xmin , xmax , M ); sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) x_train_features = phi . transform ( x_train ) x_test_features = phi . transform ( x_test ) In [7]: random_idx = np . random . RandomState ( seed ) . choice ( N , N ) In [8]: fig = plt . figure ( figsize = ( 16 , 8 )) for i , n in enumerate ([ 1 , 2 , 4 , 25 ]): ax = fig . add_subplot ( 2 , 2 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( x_train_features [ random_idx [: n ]], y_train [ random_idx [: n ]]) y_pred , y_std = model . predict ( x_test_features ) ax . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) ax . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( x_train [ random_idx [: n ]], y_train [ random_idx [: n ]], s = 150 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) ax . set_ylim ( - 1.5 , 1.5 ), ax . legend (), ax . set_title ( f \"Bayesian Linear Regression (N= { n } )\" ) plt . tight_layout () plt . show () ガウシアンプロセス 回帰分析のための カーネル法 テストサンプルに対して、 予測値だけでなく、予測分散も与えることができる。 線形回帰のモデルは、以下で表されていた。 $$y(\\mathbf{x},\\mathbf{w}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x})\\qquad (3.3)$$ この結果に、ベイズ線形回帰の結果 $(3.53)$ を代入すると、 $$ \\begin{aligned} y(\\mathbf{x},\\mathbf{m}_N) &= \\mathbf{m}_N\\phi(\\mathbf{x}) = \\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\boldsymbol{\\Phi}&#94;T\\mathbf{t} \\\\ &= \\sum_{n=1}&#94;N\\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}_n)t_n & (3.60)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51) \\end{aligned} $$ したがって、点 $\\mathbf{x}$ での予測分布の平均は訓練データの目標変数 $t_n$ の線型結合で与えられるので、 $$ \\begin{aligned} y(\\mathbf{x},\\mathbf{m}_N) &= \\sum_{n=1}&#94;Nk(\\mathbf{x}, \\mathbf{x}_n)t_n & (3.61)\\\\ k(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}) &= \\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}&#94;{\\prime}) & (3.62)\\\\ &= \\left(\\beta&#94;{1/2}\\mathbf{S}_N&#94;{1/2}\\phi(\\mathbf{x})\\right)&#94;T\\left(\\beta&#94;{1/2}\\mathbf{S}_N&#94;{1/2}\\phi(\\mathbf{x})\\right) & (3.65) \\end{aligned} $$ とかける。なお、$k(\\mathbf{x}, \\mathbf{x}&#94;{\\prime})$ を 平滑化行列(smoother matrix) 、または 等価カーネル(equivalent kernel) と呼ぶ。（$(3.65)$ から、等価カーネルが通常のカーネル関数が満たすべき性質を満たしていることがわかる。） また、訓練データの目標値の線型結合を取ることで予測を行う上記のような回帰関数を 線形平滑器(linear smoother) と呼ぶ。 In [9]: from kerasy.utils.preprocessing import GaussianBaseTransformer , SigmoidBaseTransformer , PolynomialBaseTransformer In [10]: X = np . linspace ( - 1 , 1 , 200 ) M = 15 mu = np . linspace ( - 0.9 , 0.9 , M ); sigma = 0.1 gausian_phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) In [11]: def mkSmootherMatrix ( X , phi , alpha = 1 , beta = 25 ): X_feature = phi . transform ( X ) N , M = X_feature . shape SN = np . linalg . inv ( alpha * np . eye ( M ) + beta * X_feature . T . dot ( X_feature )) K = beta * np . dot ( X_feature , np . dot ( SN , X_feature . T )) return K In [12]: K = mkSmootherMatrix ( X , gausian_phi ) In [13]: SP = [ 30 , 120 , 150 ] colors = [ \"red\" , \"salmon\" , \"pink\" ] In [14]: fig = plt . figure ( figsize = ( 12 , 6 )) axKernel = plt . subplot2grid (( 3 , 2 ), ( 0 , 1 ), rowspan = 3 ) axKernel = sns . heatmap ( K , vmin = np . min ( K ), vmax = np . max ( K ), cmap = \"jet\" , cbar = False , square = True , ax = axKernel ) axKernel . set_xticks ([]), axKernel . set_yticks ([]) axKernel . set_xlabel ( \"$x$\" , fontsize = 18 ), axKernel . set_ylabel ( \"$x&#94;{\\prime}$\" , fontsize = 18 ) for i in range ( 3 ): axL = plt . subplot2grid (( 3 , 2 ), ( i , 0 )) axL . set_facecolor ( 'lightcyan' ) axL . plot ( K [ SP [ i ]], color = colors [ i ], linewidth = 4 ) axL . set_xticks ([]), axL . set_yticks ([]) axKernel . axhline ( SP [ i ], color = colors [ i ], linewidth = 10 , alpha = 0.7 ) plt . tight_layout () plt . show () In [15]: Transformers = [ ( GaussianBaseTransformer , mu ), ( SigmoidBaseTransformer , mu ), ( PolynomialBaseTransformer , 10 ), ] In [16]: fig = plt . figure ( figsize = ( 12 , 4 )) for i ,( phi_func , param ) in enumerate ( Transformers ): ax = fig . add_subplot ( 1 , 3 , i + 1 ) phi = phi_func ( param ) K = mkSmootherMatrix ( X , phi ) ax . plot ( K [ 100 ], color = \"blue\" ) ax . scatter ( 100 , 0 , color = \"red\" , marker = \"x\" , s = 150 , label = \"$x&#94;{\\prime}$\" ) ax . set_xticks ([]), ax . set_yticks ([]), ax . set_title ( f \"$k(x,x')$: { phi . __name__ } \" , fontsize = 16 ) ax . set_xlabel ( \"$x$\" , fontsize = 18 ), ax . legend () plt . tight_layout () plt . show () カーネル関数の例 を見ればわかるよう、 対応する基底関数が局所的でないにも関わらず、等価カーネルは $x&#94;{\\prime}$ に関して局所的な関数となっていることがわかる！！ また、$y(\\mathbf{x})$ と $y(\\mathbf{x}&#94;{\\prime})$ の共分散を考えると、 $$ \\begin{aligned} \\mathrm{cov}\\left[y(\\mathbf{x}),y(\\mathbf{x}&#94;{\\prime})\\right] &= \\mathrm{cov}\\left[\\phi(\\mathbf{x})&#94;T\\mathbf{w}, \\mathbf{w}&#94;T\\phi(\\mathbf{x})\\right]\\\\ &= \\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}&#94;{\\prime}) = \\beta&#94;{-1}k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})\\quad(3.63) \\end{aligned} $$ となる。ここで、上述の等価カーネルの形状を考えると、 近接での予測平均は互いに強い相関を持っている一方で、より離れた点の組では相関は小さくなることがわかる。 ベイズ線形回帰 のように基底関数の集合を明示的に定義するのではなく、局所的なカーネルを直接定義し、観測された訓練集合が与えられた時、この局所的なカーネルを用いて新たな入力ベクトル $\\mathbf{x}$ に対する予測値を求めることができる。 この定式化から、回帰（と分類）に対する実用的な枠組みである ガウス過程(Gaussian process) が得られる。 ベイズ最適化 $M$ 個の候補点があり、この中から最大の観測値を持つものを探したい。 できるだけ実験数を少なくしたい。 $N$ 個の候補点に対する実験が終わった。$M-N$ 個の候補点が残っている。 次の $N+1$ 個目の候補点を最適に選びたい。 $N$ 個の化合物から予測モデルを学習し、それを用いて、残りの候補点を スコアリング し決定。 Maximum Probability of Improvement: Current Maxを超える確率。 Maximum Expected Improvement: (観測値-Current Max)の期待値。 Thompson Sampling: 残りのM-N個候補点に対して、条件つき結合確率からサンプリングを行い、そのサンプリング値をスコアとする。 In [17]: xmin = 0 ; xmax = 1 N = 1000 ; M = 25 seed = 1 In [18]: alpha = 1 beta = 25 In [19]: X = np . linspace ( xmin , xmax , N ) Y = 5e1 * X * ( X - 0.2 ) * ( X - 0.3 ) * ( X - 0.7 ) * ( X - 1 ) _ , noise = generateGausian ( size = 1000 , x = X , loc = 0 , scale = 1 / beta , seed = seed ) Y_ob = Y + noise In [20]: mu = np . linspace ( xmin , xmax , M ) sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) In [21]: X_features = phi . transform ( X ) In [22]: fig = plt . figure ( figsize = ( 18 , 8 )) idx = np . random . RandomState ( seed ) . choice ( N , 2 ) # Initialization. next_idx = idx for i , _ in enumerate ( range ( 12 )): ax = fig . add_subplot ( 3 , 4 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( X_features [ idx ], Y_ob [ idx ]) y_pred , y_std = model . predict ( X_features ) current_max = np . max ( Y_ob [ idx ]) max_improve_id = np . argmax ( y_pred ) ax . plot ( X , Y , color = \"black\" , label = \"True distribution\" ) ax . plot ( X , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( X , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( X [ idx ], Y_ob [ idx ], s = 50 , edgecolors = 'black' , facecolor = \"white\" , label = \"Observation\" ) ax . scatter ( X [ next_idx ], Y_ob [ next_idx ], s = 150 , edgecolors = 'black' , facecolor = \"black\" , label = \"New Obsevation\" ) ax . set_xlabel ( \"Explanatory Variable\" ), ax . set_ylabel ( \"Measured Value\" ), ax . set_title ( f \"N= { len ( idx ) } , Max= { current_max : .3f } \" ) ax . set_ylim ( - 0.5 , 0.3 ), ax . set_xticks ([]), ax . set_yticks ([]) ax . axhline ( current_max , color = \"green\" , label = \"Current Maximum\" ) ax . axvline ( np . max ( X [ max_improve_id ]), color = \"blue\" , label = \"Maximum Probability of Improvement\" ) next_idx = max_improve_id if np . random . uniform () > 0.5 else np . random . choice ( N , 1 ) idx = np . r_ [ idx , next_idx ] ax . legend () plt . tight_layout () plt . show () おわりに（データ駆動科学） データ駆動科学では、データに基づいて、新たな知見・事柄を発見することが求められる。 単に予測を行うだけでなく、それに基づいて次の「行動」を設計することが必要 これらは、ベイズ最適化の枠組みに乗ることが多い。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-4.html"},{"title":"特徴選択","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 主成分分析(PCA) In [2]: N = 20 seed = 0 In [3]: X = np . linspace ( 0 , 1 , N ) Y = X + np . random . RandomState ( N ) . normal ( loc = 0 , scale = 5e-2 , size = N ) data = np . vstack (( X , Y )) In [4]: def Rotate ( x , radian ): A = np . array ([ [ np . cos ( radian ), - np . sin ( radian )], [ np . sin ( radian ), np . cos ( radian )] ]) return np . dot ( A , data ) In [5]: fig = plt . figure ( figsize = ( 10 , 4 )) ax = fig . add_subplot ( 1 , 2 , 1 ) ax . scatter ( X , Y , color = \"black\" ), ax . set_title ( \"Original\" ) X_tra , Y_tra = Rotate ( data , radian =- 1 / 4 * np . pi ) ax = fig . add_subplot ( 1 , 2 , 2 ) ax . scatter ( X_tra , Y_tra , color = \"red\" ), ax . set_title ( \"Rotated\" ), ax . set_ylim ( - 1 / 2 * np . sqrt ( 2 ), 1 / 2 * np . sqrt ( 2 )) plt . tight_layout () plt . show () $2$ 次元空間で左上図のようなデータがあったとする。この時、このデータを表現するのに $(x,y)$ の二次元が必要だろうか？ データ全体を右に $1/4\\pi$ 回転させると、右上図のようなデータれるとなる。この場合、$y&#94;{\\prime}$ 軸方向はノイズとみなせ、$x&#94;{\\prime}$ 軸のみでデータを表現していると言える。 この例のように、$K$ 次元のデータであっても、で０他の偏りによって $M( こういった場合に、 「$M$ 方向の軸をどのように決めるか？」 、 「$M$ をどうやって決めるか？」 などが問題となる。 ※ 詳しくは 主成分分析(PCA) に記載。 線形判別分析(LDA) 入力ベクトル $\\mathbf{x}$ を $K$ クラスの一つ $C_k$ に割り当てる関数である識別（決定面が超平面となるとき、 線形識別(linear discriminant) ）を、 「次元の削減」 という観点から捉えることができる。 2クラス分類 $D$ 次元入力ベクトルを得て、それを以下の式で $1$ 次元に射影するとする。 $$y = \\mathbf{w}&#94;T\\mathbf{x}\\qquad (4.20)$$ ある閾値を設定し、$y\\geq-w_0$ の場合クラス $C_1$、そうでない場合クラス $C_2$ であるとすると、 標準的な線形分類器が得られる。 一般に、$D$ 次元から $1$ 次元へ射影することによって相当量の情報量の損失を発生させる。 重みベクトル $\\mathbf{w}$ の要素を調整することで、 クラスの分離を最大にする射影を選択したい。 $\\mathbf{w}$ 上へ射影された際のクラス分離度の最も簡単な測定法は、 射影されたクラスの平均の分離度（以下の式） を見ることである。 $$m_2-m_1 = \\mathbf{w}&#94;T\\left(\\mathbf{m}_2-\\mathbf{m}_1\\right) = \\mathbf{w}&#94;T\\left(\\frac{1}{N_2}\\sum_{n\\in C_2}\\mathbf{x}_n -\\frac{1}{N_1}\\sum_{n\\in C_1}\\mathbf{x}_n\\right)\\qquad (4.21)\\ \\&\\ (4.22)$$ 上の式は $\\mathbf{w}$ の値を大きくすればいくらでも大きな値にすることができるので、 $\\mathbf{w}$ が単位長である（$\\sum_i w_i&#94;2 = 1$）という制約を加える。 ラグランジュ乗数を用いてこれを解くと、$\\mathbf{w}\\propto(\\mathbf{m}_2-\\mathbf{m}_1)$ が得られる。 クラス分布の非対角な共分散が強い場合など、一般に、 各クラスの平均値だけを見ていても上手く判別する事ができない。 そこでフィッシャーが提案した方法が、 「射影されたクラス平均間の分離度を大きくすると同時に、各クラス内では小さな分散を与える関数を最大化する」 クラス $C_k$ から射影されたデータのクラス内分散は以下で与えられる。 $$s_k&#94;2 = \\sum_{n\\in C_k}(y_n-m_k)&#94;2\\qquad (4.2)$$ 全データ集合に対する総クラス内分散が $s_1&#94;2+s_2&#94;2$ であると定義する。 フィッシャーの判別基準は、 クラス間分離度 と クラス内分散 の比率で表される。 $$ \\begin{aligned} J(\\mathbf{w}) &= \\frac{(m_2-m_1)&#94;2}{s_1&#94;2 + s_2&#94;2} & (4.25)\\\\ &= \\frac{\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}}{\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}} & (4.27)\\\\ \\mathbf{S}_{\\mathrm{B}} &= (\\mathbf{m}_2-\\mathbf{m}_1)(\\mathbf{m}_2-\\mathbf{m}_1)&#94;T & (4.27)\\\\ \\mathbf{S}_{\\mathrm{W}} &= \\sum_{n\\in C_1}(\\mathbf{x}_n-\\mathbf{m}_1)(\\mathbf{x}_n-\\mathbf{m}_1)&#94;T + \\sum_{n\\in C_2}(\\mathbf{x}_n-\\mathbf{m}_2)(\\mathbf{x}_n-\\mathbf{m}_2)&#94;T& (4.27)\\\\ \\end{aligned} $$ $\\mathbf{S}_{\\mathrm{B}}$ を クラス間共分散行列(between-class covariance matrix) と呼ぶ。 $\\mathbf{S}_{\\mathrm{W}}$ を (総)クラス内共分散行列(within-class covariance matrix) と呼ぶ。 $J(\\mathbf{w})$ を $\\mathbf{w}$ に関して微分すると、以下の式が満たされる場合に $J(\\mathbf{w})$ が最大となる事がわかる。 $$ \\begin{aligned} \\frac{dJ(\\mathbf{w})}{d\\mathbf{w}} &= \\frac{\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}} + \\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right) - \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}} + \\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)}{\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)&#94;2}\\\\ \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}} + \\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right) &= \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}} + \\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)\\\\ \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}&= \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\qquad (4.29) \\end{aligned} $$ $(4.27)$ から、 $\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}$ は常に $(\\mathbf{m}_2-\\mathbf{m}_1)$ と同じ方向を持つ。 $\\mathbf{w}$ の方向だけが重要で、 大きさは考慮する必要がないので、スカラーファクタ $\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)$ と $\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)$ を無視できる。 $(4.29)$ の両辺に $\\mathbf{S}_{\\mathrm{W}}&#94;{-1}$ を左からかけて、 フィッシャーの線形判別(Fisher's linear discriminant) が得られる。 $$\\mathbf{w}\\propto\\mathbf{S}_{\\mathrm{W}}&#94;{-1}(\\mathbf{m}_2-\\mathbf{m}_1)\\qquad (4.30)$$ フィッシャーの線形判別(Fisher's linear discriminant) は、厳密には識別子ではなく、 むしろ $1$ 次元へ削減する際のデータの射影方向の選択を行なっている。 In [6]: from kerasy.ML.decomposition import LDA In [7]: N1 = 100 ; N2 = 100 cov = [[ 10 , 1 ],[ 1 , 3 ]] In [8]: x1 = np . random . RandomState ( seed ) . multivariate_normal ([ 0 , 7 ], cov , N1 ) x2 = np . random . RandomState ( seed + 1 ) . multivariate_normal ([ 8 , 6 ], cov , N2 ) x1min = np . min ( x1 ); x1max = np . max ( x1 ) x2min = np . min ( x2 ); x2max = np . max ( x2 ) m1 = np . mean ( x1 , axis = 0 ); m2 = np . mean ( x2 , axis = 0 ) m = ( m1 + m2 ) / 2 data = np . r_ [ x1 , x2 ] In [9]: X = np . linspace ( - 100 , 100 , 1000 ) In [10]: fig = plt . figure ( figsize = ( 12 , 6 )) for i , tf in enumerate ([ True , False ]): model = LDA () model . fit ( x1 , x2 , mean_only = tf ) w1 , w2 = model . w alpha = - w2 / w1 beta = m [ 1 ] - alpha * m [ 0 ] x_features = model . transform ( data ) axT = fig . add_subplot ( 2 , 2 , i + 1 ) axT . plot ( X , X * ( - w2 / w1 ) + beta , color = \"black\" , label = \"linear discriminant\" ) axT . scatter ( x1 [:, 0 ], x1 [:, 1 ], color = \"blue\" , label = \"class1\" ) axT . scatter ( x2 [:, 0 ], x2 [:, 1 ], color = \"red\" , label = \"class2\" ) axT . scatter ( m1 [ 0 ], m1 [ 1 ], color = \"green\" , marker = \"*\" , s = 200 ), axT . scatter ( m2 [ 0 ], m2 [ 1 ], color = \"green\" , marker = \"*\" , s = 200 , label = \"mean\" ) axT . set_xlim ( x1min , x1max ), axT . set_ylim ( x2min , x2max ) axT . set_xticks ([]), axT . set_yticks ([]), axT . legend (), axT . set_title ( \"Only Mean\" if tf else \"Fisher's linear discriminant\" ) axB = fig . add_subplot ( 2 , 2 , 3 + i ) axB . hist ( x_features [: N1 ], alpha = 0.3 , color = \"blue\" , label = \"class1\" ) axB . hist ( x_features [ N1 :], alpha = 0.3 , color = \"red\" , label = \"class2\" ) axB . set_xticks ([]), axB . set_yticks ([]), axB . legend () plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-3.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-3.html"},{"title":"生物統計論 第4回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section4.1 Expectation Maximization Algorithm The expectation maximization algorithm, or EM algorithm, is a general technique for finding maximum likelihood solutions for probabilistic models having latent variable. Consider a probabilistic model in which we collectively denote all of the observed variables by $\\mathbf{X}$ all of the hidden variables by $\\mathbf{Z}$ (assuming discrete, but discussion is identical if continuous) joint distribution by $p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)$ Goal is to maximize the likelihood function that is given by $$p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) = \\sum_{\\mathbf{Z}}p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)\\qquad (9.69)$$ Properties Guaranteed to terminate Likelihood always increases Solving M-step is often easy No need to traverse the data Separation of parameter dependency $\\log(pq)=\\log(p)+\\log(q)$ Sometimes solved exactly Often a few times faster than gradient descent (if stopping condition is not too stringent) Expectation values characterize the optimized model Lower Bound of Likelihood $\\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right)$ and $\\mathrm{KL}\\left(q\\|p\\right)$ We shall suppose that direct optimization of $p(\\mathbf{X}|\\boldsymbol{\\theta})$ is difficult the optimization of the complete-data likelihood function $p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)$ is significantly easier We introduce a distribution $q\\left(\\mathbf{Z}\\right)$ defined over the latent variables. For any choice of $q\\left(\\mathbf{Z}\\right)$, the following decomposition holds $$ \\begin{aligned} \\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) &= \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) + \\mathrm{KL}\\left(q\\|p\\right) &(9.70)\\\\ \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.71)\\\\ \\mathrm{KL}\\left(q\\|p\\right) &= -\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.72) \\end{aligned} $$ NOTE : $\\mathcal{L}(q,\\boldsymbol{\\theta})$ is a functional of the distribution $q(\\mathbf{Z})$, and a function of the parameters $\\boldsymbol{\\theta}$ $$ \\begin{aligned} \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) + \\mathrm{KL}\\left(q\\|p\\right) &=\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} -\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\}\\\\ &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}\\right\\}\\\\ &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right)\\\\ &= \\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) \\end{aligned}$$ From $(9.72)$, we see that $\\mathrm{KL}(q\\|p)$ is the Kullback-Leibler divergence between $q(\\mathbf{Z})$ and the posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta})$ Kullback-Leibler divergence satisfies $\\mathrm{KL}(q\\|p)\\geq0$ with eqyality if, and only if, $q(\\mathbf{Z})=p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta})$. Therefore, $\\mathcal{L}(q,\\boldsymbol{\\theta})\\leq\\ln p(\\mathbf{X}|\\boldsymbol{\\theta})$, in other words that $\\mathcal{L}(q,\\boldsymbol{\\theta})$ is a lower bound on $\\ln p(\\mathbf{X}|\\boldsymbol{\\theta})$ E step In the E step, the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ is maximized with respect to $q(\\mathbf{Z})$ while holding $\\boldsymbol{\\theta}&#94;{\\text{old}}$ fixed. $\\ln p(\\mathbf{X}|\\boldsymbol{\\theta}&#94;{\\text{old}})$ does not depend on $q(\\mathbf{Z})$ the largest value of $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ will occur when the Kullback-Leibler divergence vanishes. ∴ When $q(\\mathbf{Z})$ is equal to the posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}})$, $\\mathrm{KL}(q\\|p)=0$ and the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ will be maximized. M step In the M step, the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ is maximized with respect to $\\boldsymbol{\\theta}$ to give some new value $\\boldsymbol{\\theta}&#94;{\\text{new}}$ while holding $q(\\mathbf{Z})$ fixed. This will cause the lower bound $\\mathcal{L}$ to increase This will necessarily cause the corrresponding log likelihood function to increase. Because $q$ is held fixed during the M step, it will not equal the new posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}})$ $\\left(\\mathrm{KL}(q\\|p)\\neq0\\right)$ $\\mathcal{Q}(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}})$ $$ \\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)=\\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right) \\qquad (9.33)\\\\ $$ If we substitute $q(\\mathbf{Z}) = p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)$ into $(9.71)$, $$ \\begin{aligned} \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.71)\\\\ &= \\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right) - \\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\\\ &= \\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right) + \\text{const.} \\end{aligned} $$ ∴ \"Maximizing $\\mathcal{L}(q,\\boldsymbol{\\theta})$\" is equal to \"Maximizing $\\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)$\". In [2]: from kerasy.ML.MixedDistribution import MixedGaussian In [3]: # Train Data. data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = 50 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 5 ], cov = np . eye ( 2 ), size = 50 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = 50 ), ]) X , Y = data . T K = 3 In [4]: # Back Ground Color xmin , ymin = np . min ( data , axis = 0 ) - 0.3 xmax , ymax = np . max ( data , axis = 0 ) + 0.3 Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [5]: model = MixedGaussian ( K = 3 , random_state = 1234 ) model . fit ( data , memo_span = 1 ) ll_hist = [ ll for _ , _ , _ , ll in model . history ] mu_hist = [ mu for _ , _ ,( mu , _ , _ ), _ in model . history ] In [6]: plt_model = MixedGaussian ( K = 3 ) plt_model . N , plt_model . M = data . shape L_old = min ( ll_hist ) - 300 for epoch , idx ,( mu , S , pi ), ll in model . history [: - 1 ]: fig = plt . figure ( figsize = ( 12 , 8 )) ll_old = ll_hist [ epoch ]; ll_new = ll_hist [ epoch + 1 ] mu_old = mu_hist [ epoch ]; mu_new = mu_hist [ epoch + 1 ] L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 dL_old = ll_old - L_old ; dL_new = L_new - ll_old ; dll_old = ll_new - ll_old ax1 = fig . add_subplot ( 2 , 2 , 1 ) plt_model . mu = mu ; plt_model . S = S ; plt_model . pi = pi gammas = plt_model . predict ( XYs ) Zs = np . sum ( gammas , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. ax1 . pcolor ( Xs , Ys , Zs , alpha =. 5 , cmap = \"jet\" ) ax1 . scatter ( X , Y , c = idx , cmap = \"prism\" ) ax1 . set_xlim ( xmin , xmax ), ax1 . set_ylim ( ymin , ymax ), ax1 . set_title ( f \"epochs: { epoch : >02 } \" , fontsize = 18 ) ax2 = fig . add_subplot ( 2 , 2 , 2 ) ax2 . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf {X} ,θold)$\" , linewidth = 3 ) ax2 . axhline ( L_old , color = \"black\" , label = \"$L(q,θold)$\" , linestyle = \":\" ) ax2 . arrow ( x = 0.3 , y = L_old , dx = 0 , dy = dL_old , head_width = dL_old / 6000 , head_length = dL_old * 0.1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax2 . set_title ( f \"E step (Epoch= { epoch } )\" , fontsize = 18 ), ax2 . legend (), ax2 . set_xticks ([]), ax2 . set_ylim ( - 600 , - 570 ) ax3 = fig . add_subplot ( 2 , 2 , 3 ) for k in range ( K ): xb , yb = mu_old [ k ]; xa , ya = mu_new [ k ] ax3 . plot (( xb , xa ),( yb , ya ), color = \"black\" ) ax3 . scatter ( xb , yb , color = \"black\" , s = 50 ) ax3 . scatter ( xa , ya , color = \"red\" , marker = \"*\" , s = 150 ) ax3 . set_xlim ( xmin , xmax ), ax3 . set_ylim ( ymin , ymax ), ax3 . set_title ( \"θ → θnew\" ) ax3 . grid () ax4 = fig . add_subplot ( 2 , 2 , 4 ) L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 ax4 . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf {X} ,θold)$\" , linestyle = \"--\" ) ax4 . axhline ( ll_new , color = \"black\" , label = \"$\\ln p(\\mathbf {X} ,θnew)$\" , linewidth = 3 ) ax4 . axhline ( L_new , color = \"black\" , label = \"$L(q,θnew)$\" , linestyle = \":\" ) ax4 . arrow ( x = 0.7 , y = ll_old , dx = 0 , dy = dll_old , head_width = dll_old / 6000 , head_length = dll_old * 0.1 , fc = 'k' , ec = 'k' , length_includes_head = True ) ax4 . arrow ( x = 0.3 , y = ll_old , dx = 0 , dy = dL_new , head_width = dL_new / 6000 , head_length = dL_new * 0.1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax4 . set_title ( f \"M step (Epoch= { epoch } )\" , fontsize = 18 ), ax4 . legend (), ax4 . set_xticks ([]), ax4 . set_ylim ( - 600 , - 570 ) plt . tight_layout () plt . savefig ( f \"img/img { epoch : >02 } \" ) L_old = L_new fig_no = 0 L_old = min ( ll_hist ) - 300 for epoch in range ( len ( model . history ) - 1 ): ll_old = ll_hist [ epoch ]; ll_new = ll_hist [ epoch + 1 ] L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 dL_old = ll_old - L_old ; dL_new = L_new - ll_old ; dll_old = ll_new - ll_old # Estep fig = plt . figure ( figsize = ( 3 , 10 )) ax = fig . add_subplot ( 1 , 1 , 1 ) ax . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf {X} ,θold)$\" , linewidth = 3 ) ax . axhline ( L_old , color = \"black\" , label = \"$L(q,θold)$\" , linestyle = \":\" ) ax . arrow ( x = 0.3 , y = L_old , dx = 0 , dy = dL_old , head_width = dL_old / 60 , head_length = dL_old * 2e-1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax . set_title ( f \"E step (Epoch= { epoch } )\" , fontsize = 18 ), ax . legend (), ax . set_xticks ([]), ax . set_ylim ( - 600 , - 570 ) plt . savefig ( f \"img/img { fig_no : >02 } \" ); fig_no += 1 plt . clf () # Mstep fig = plt . figure ( figsize = ( 3 , 10 )) ax = fig . add_subplot ( 1 , 1 , 1 ) L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 ax . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf {X} ,θold)$\" , linestyle = \"--\" ) ax . axhline ( ll_new , color = \"black\" , label = \"$\\ln p(\\mathbf {X} ,θnew)$\" , linewidth = 3 ) ax . axhline ( L_new , color = \"black\" , label = \"$L(q,θnew)$\" , linestyle = \":\" ) ax . arrow ( x = 0.7 , y = ll_old , dx = 0 , dy = dll_old , head_width = dll_old / 60 , head_length = dll_old * 2e-1 , fc = 'k' , ec = 'k' , length_includes_head = True ) ax . arrow ( x = 0.3 , y = ll_old , dx = 0 , dy = dL_new , head_width = dL_new / 60 , head_length = dL_new * 2e-1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax . set_title ( f \"M step (Epoch= { epoch } )\" , fontsize = 18 ), ax . legend (), ax . set_xticks ([]), ax . set_ylim ( - 600 , - 570 ) plt . savefig ( f \"img/img { fig_no : >02 } \" ); fig_no += 1 plt . clf () L_old = L_new Section4.2 Mixture Model Implementation Gaussian Mixture Distribution k-means clustering Section4.3 Linear Regression Least Squares polynomial function we observe a real-value input variable $x$ and we wish to use this observation to predict the value of a real-valued target variable $t$. In the most simplest approach based on curve fitting, we shall fit the data using a polynomial function of the form : $$y(x,\\mathbf{w}) = w_0+w_1x+w_2x&#94;2+\\cdots+w_Mx&#94;M=\\sum_{j=0}&#94;Mw_jx&#94;j\\qquad (1.1)$$ data we are given a training set comprising $N$ observation of $x$, written $\\mathbf{X}\\equiv(\\mathbf{x_1},\\ldots,\\mathbf{x}_N)&#94;T$ with corresponding observation of the values of $t$, denoted $\\mathbf{t}\\equiv(t_1\\ldots,t_N)&#94;T$ we can difine $M$, which is the order of the polynomial. The values of the coefficients($w_j$) will be determined by fitting the polynomial to the training data. This can be done by minimizing an error function that measures the misfit between the function $y(x,\\mathbf{w})$ and the training set data points. One simple choice of error function, which is widely used, is given by the sum of the squares of the errors $$E(\\mathbf{w}) = \\frac{1}{2}\\mathrm{RSS} = \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\{y(\\mathbf{x}_n,\\mathbf{w}) - t_n\\right\\}&#94;2\\qquad (1.2)$$ (the factor of $1/2$ is included for later convenience.) Trainig Aim: find the best $\\mathbf{w}&#94;{\\star}=\\underset{w\\in\\mathbb{R}}{\\mathrm{argmin}}\\left\\{\\mathrm{RSS}(\\mathbf{w})\\right\\}$ $\\mathbf{t} = \\left(\\begin{matrix}t_1\\\\\\vdots\\\\t_N\\end{matrix}\\right),\\quad\\mathbf{X} = \\left(\\begin{matrix}x_1&#94;0&x;_1&#94;1&\\cdots&x;_1&#94;M\\\\x_2&#94;0&x;_2&#94;1&\\cdots&x;_2&#94;M\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\x_N&#94;0&x;_N&#94;1&\\cdots&x;_N&#94;M\\end{matrix}\\right),\\quad\\mathbf{w}=\\left(\\begin{matrix}w_1\\\\\\vdots\\\\w_M\\end{matrix}\\right)$ $\\mathrm{RSS}(\\mathbf{w}) = \\left(\\mathbf{t} - \\mathbf{Xw}\\right)&#94;T\\left(\\mathbf{t} - \\mathbf{Xw}\\right)$ Solution: $$ \\begin{aligned} \\frac{\\partial E(\\mathbf{w})}{\\partial\\mathbf{w}} &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\|\\mathbf{t}-\\mathbf{Xw}\\|&#94;2\\\\ &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\|\\mathbf{t}\\|&#94;2 - 2\\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{t} + \\|\\mathbf{Xw}\\|&#94;2\\right)\\\\ &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\|\\mathbf{t}\\|&#94;2 - 2\\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{t} + \\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{Xw}\\right)\\\\ &=\\frac{1}{2} \\left(-2\\mathbf{X}&#94;T\\mathbf{t} + \\left(\\mathbf{X}&#94;T\\mathbf{X} + \\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;T\\right)\\mathbf{w}\\right)\\\\ &= -\\mathbf{X}&#94;T\\mathbf{t}+\\mathbf{X}&#94;T\\mathbf{Xw}=\\mathbf{0}\\\\ \\therefore\\mathbf{w}&#94;{\\star} &= \\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{t} \\end{aligned}$$ ※ In the following programs, I use np.linalg.solve to calcurate $\\mathbf{w}&#94;{\\ast}$ equation program $$\\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)\\mathbf{w}&#94;{\\star} = \\mathbf{X}&#94;T\\mathbf{t}$$ w = np.linalg.solve(X.T.dot(X), X.T.dot(t)) In [7]: N = 15 Ms = [ 2 , 4 , 8 , 16 ] seed = 0 In [8]: # Training data. x = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = N ) Noise = np . random . RandomState ( seed ) . normal ( loc = 0 , scale = 0.1 , size = N ) t = np . sin ( 2 * np . pi * x ) + Noise In [9]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= { M } $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ { RSS : .3f } $,M=$ { M } $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Regularized Least Square $$ \\begin{aligned} E(\\mathbf{w}) &= E_{D}(\\mathbf{w}) + \\lambda E_W(\\mathbf{w}) & (3.24)\\\\ &= \\frac{1}{2}\\mathrm{RSS} + \\lambda\\frac{1}{2}\\mathbf{w}&#94;T\\mathbf{w}\\\\ &= \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\{y(\\mathbf{x}_n,\\mathbf{w}) - t_n\\right\\}&#94;2+\\frac{1}{2}\\mathbf{w}&#94;T\\mathbf{w} & (3.27)\\\\ \\therefore\\mathbf{w}&#94;{\\star} &= \\left(\\lambda\\mathbf{I} + \\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{t} & (3.28) \\end{aligned} $$ In [10]: lambda_ = 1e-4 In [11]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( lambda_ * np . identity ( M + 1 ) + X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= { M } $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ { RSS : .3f } $,M=$ { M } $,$\\lambda= { lambda_ } $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Section4.4 Bayesian Inference Maximal Likelihood Estimate $$ l(\\boldsymbol{\\theta}|D) = \\log L(\\boldsymbol{\\theta}|D) = \\log\\mathbb{P}(D|\\boldsymbol{\\theta})\\\\ \\hat{\\boldsymbol{\\theta}}_{\\text{ML}} = \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}l(\\boldsymbol{\\theta}|D) $$ ※ $l$: large → High probability of observing $D$ from the model $\\boldsymbol{\\theta}$ Maximum a Posteriori Estimate Maximum a posteriori estimate $$ \\begin{aligned} \\hat{\\boldsymbol{\\theta}_{\\text{MAP}}} &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}f(\\boldsymbol{\\theta}|D)\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}f(D|\\boldsymbol{\\theta})f(\\boldsymbol{\\theta})\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}\\left\\{l(\\boldsymbol{\\theta}|D) L \\log f(\\boldsymbol{\\theta})\\right\\}\\\\ \\end{aligned} $$ Posterior mean estimate $$ \\hat{\\boldsymbol{\\theta}_{\\text{PME}}} = \\int\\boldsymbol{\\theta}f(\\boldsymbol{\\theta}|D)d\\boldsymbol{\\theta} $$ Implementation of Gaussian Prior for Regression. In [12]: seed = 123 In [13]: from kerasy.ML.linear import BayesianLinearRegression from kerasy.utils.preprocessing import GaussianBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian In [14]: N = 25 ; D = 1 ; M = 25 xmin = 0 ; xmax = 1 In [15]: alpha = 1 beta = 25 In [16]: x_test = np . linspace ( xmin , xmax , 1000 ) y_test = np . sin ( 2 * np . pi * x_test ) x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 1 / beta , seed = seed ) y_train += y_noise In [17]: # transform mu = np . linspace ( xmin , xmax , M ); sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) x_train_features = phi . transform ( x_train ) x_test_features = phi . transform ( x_test ) In [18]: random_idx = np . random . RandomState ( seed ) . choice ( N , N ) In [19]: fig = plt . figure ( figsize = ( 16 , 8 )) for i , n in enumerate ([ 1 , 2 , 4 , 25 ]): ax = fig . add_subplot ( 2 , 2 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( x_train_features [ random_idx [: n ]], y_train [ random_idx [: n ]]) y_pred , y_std = model . predict ( x_test_features ) ax . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) ax . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( x_train [ random_idx [: n ]], y_train [ random_idx [: n ]], s = 150 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) ax . set_ylim ( - 1.5 , 1.5 ), ax . legend (), ax . set_title ( f \"Bayesian Linear Regression (N= { n } )\" ) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-4.html"},{"title":"レポート課題3(10/17出題)","text":"gslHaT8gFHu+Ka3nBG1Y2A==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report3.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report3.html"},{"title":"連続最適化(2)制約付き最適化","text":"講師： 佐藤一誠 参考書： 最適化手法 参考書： 機械学習のための連続最適化 講義概要 等式制約付き最適化問題 ラグランジュ未定乗数法 ラグランジュ双対問題 双対変数の最適化 不等式制約付き最適化問題 制約なし最適化問題への変換 双対問題 まとめ 制約付き最適化問題(constrained optimization problem) \\(\\mathcal{X}\\subset\\mathbb{R}&#94;d\\) 上に定義される関数 \\(f:\\mathcal{X}\\rightarrow\\mathbb{R}\\) の最小値を求める。 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ &h(\\mathbf{x})\\leq\\mathbf{0} \\end{aligned} $$ \"subject to\"は、 「…を条件として」 という意味。 \\(g_i,h_i\\) は互いに 一次独立(linearly independent) であると仮定。 実行可能解(feasible solution) ：全ての制約条件を満たす \\(\\mathbf{x}\\) 凸最適化問題(convex optimization problem) ：関数 \\(f\\) が凸、集合 \\(\\mathcal{X}\\) が凸、制約条件 \\(\\mathbf{g},\\mathbf{h}\\) が凸であれば、最適値が一意に定まる。 ※ 以下、凸最適化問題を考える。 等式制約付き最適化問題 等式制約付き最適化問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ \\end{aligned} $$ \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) + c_k\\|\\mathbf{g}(x)\\|&#94;2$$ \\(c_k\\) の値を徐々に増やしていく。 $$0 < c_1 < c_2 < \\cdots$$ ラグランジュ未定乗数法 詳しくは ラグランジュ未定乗数法 に記載されているので、ここでは具体例を紹介する。 問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{min : }}&3x&#94;2 + 2y&#94;2\\\\ \\text{subject to : }&x+y=1\\\\ \\end{aligned} $$ 解答 ラグランジュ関数は、 $$L(x,y,\\lambda) = 3x&#94;2 + 2y&#94;2 + \\lambda(x+y-1)$$ となるから、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x} &= 6x+\\lambda=0 &\\therefore x = -\\frac{1}{6}\\lambda\\\\ \\frac{\\partial L}{\\partial y} &= 4y+\\lambda=0 &\\therefore y = -\\frac{1}{4}\\lambda\\\\ \\frac{\\partial L}{\\partial \\lambda} &= x+y-1=0 &\\therefore \\lambda = -\\frac{12}{5}\\\\ \\end{aligned} $$ よって、 \\((x,y) = (0.4,0.6)\\) ラグランジュ双対問題 これも、詳しくは ラグランジュ双対問題 に記載されているので、ここでは具体例を紹介する。 問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{min : }}&3x&#94;2 + 2y&#94;2\\\\ \\text{subject to : }&x+y=1\\\\ \\end{aligned} $$ 解答 ラグランジュ関数は、 $$L(x,y,\\lambda) = 3x&#94;2 + 2y&#94;2 + \\lambda(x+y-1)$$ となるから、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x} &= 6x+\\lambda=0 &\\therefore x = -\\frac{1}{6}\\lambda\\\\ \\frac{\\partial L}{\\partial y} &= 4y+\\lambda=0 &\\therefore y = -\\frac{1}{4}\\lambda \\end{aligned} $$ よって、これらを \\(L(x,y,\\lambda)\\) に代入して、 $$\\omega(\\lambda) = \\underset{x,y\\in\\mathbb{R}}{\\inf}L(x,y,\\lambda) = -\\frac{5}{24}\\lambda&#94;2-\\lambda$$ したがって、 \\(\\underset{\\lambda\\in\\mathbb{R}}{\\text{argmax}}\\omega(\\lambda) = -\\frac{12}{5}\\Longrightarrow(x,y) = (0.4,0.6)\\) 双対変数の最適化 上の問題では、双対変数 \\(\\lambda\\) の最適化問題を解析的に解けたが、解析的に解くことができない問題もある。その場合に使うのが 双対上昇法 や 乗数法 と呼ばれる 双対変数の勾配上昇 を行う手法である。 | 手法 | 数式 | 解説 | | ---- | ---- | ---- | | 双対上昇法 | $$\\begin{aligned}\\mathbf{x}_{k+1} &= \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}L(\\mathbf{x},\\boldsymbol{\\lambda}_{k})\\\\\\boldsymbol{\\lambda}_{k+1} &= \\boldsymbol{\\lambda}_k + \\varepsilon_k\\nabla\\omega(\\mathbf{\\boldsymbol{\\lambda}}_k) \\\\&= \\boldsymbol{\\lambda}_k + \\varepsilon_k\\mathbf{g}(\\mathbf{x}_{k+1})\\end{aligned}$$ | 適当な初期値から，ラグランジュ関数の最小化と双対変数の勾配上昇を交互に実行 | | 乗数法 | $$\\begin{aligned}\\mathbf{x}_{k+1} &= \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}L_c(\\mathbf{x},\\boldsymbol{\\lambda}_{k})\\\\\\boldsymbol{\\lambda}_{k+1} &= \\boldsymbol{\\lambda}_k + c\\nabla\\omega(\\mathbf{\\boldsymbol{\\lambda}}_k) \\\\&= \\boldsymbol{\\lambda}_k + c\\mathbf{g}(\\mathbf{x}_{k+1})\\end{aligned}$$ | 適当な初期値から， 拡張ラグランジュ関数 の最小化と双対変数の勾配上昇を交互に実行 | なお、 拡張ラグランジュ関数(augmented Lagrangian) は、以下で表される関数で、二次の項を加えることで凸性を増している。 $$L_c(\\mathbf{x},\\boldsymbol{\\lambda}) = f(\\mathbf{x}) + \\boldsymbol{\\lambda}&#94;T\\mathbf{g}(\\mathbf{x}) + \\frac{c}{2}\\|\\mathbf{g}(\\mathbf{x})\\|&#94;2$$ ※実装は レポート課題3 に記載。 不等式制約付き最適化問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&h(\\mathbf{x})\\leq\\mathbf{0}\\\\ \\end{aligned} $$ 実行可能解 \\(\\mathbf{x}\\) において \\(h_i(\\mathbf{x}) = 0\\) の時、この制約を 有効制約(active constraint) と呼ぶ。 実行可能解 \\(\\mathbf{x}\\) においてそれ以外の時、この制約を 無効制約(inactive constraint) と呼ぶ。 制約なし最適化問題への変換 障壁法(barrier method) 初期値を \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の制約なし最適化問題を解く。 $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) - c_k\\log(-h(\\mathbf{x}))$$ \\(c_k\\) の値を徐々に減らしていく。 途中の解 \\(\\mathbf{x}_{k+1}\\) が常に \\(h(\\mathbf{x}_{k+1})\\leq0\\) を満たす （つまり、実行可能領域の内側にある） ことから、 内点法(interior-point method) ともよばれる。 \\(c_k\\) の決め方が難しい。 罰則法(penalty method) 初期値を \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の制約なし最適化問題を解く。 $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) + c_k\\max(0,h(\\mathbf{x}))&#94;2$$ \\(c_k\\) の値を徐々に増やしていく。 途中の解 \\(\\mathbf{x}_{k+1}\\) が一般に \\(h(\\mathbf{x}_{k+1})>0\\) を満たす （つまり、実行可能領域の外側にある） ことから、 外点法(exterior-point method) ともよばれる。 \\(c_k\\) の決め方が難しい。 射影勾配法(projected gradient method) 勾配降下（ \\(\\tilde{\\mathbf{x}}_{k+1} = \\mathbf{x}_k-\\varepsilon_k\\nabla f(\\mathbf{x}_k)\\) ）と実行可能領域への射影（ \\(\\mathbf{x}_{k+1} = \\mathbf{P}_k\\tilde{\\mathbf{x}}_{k+1}\\) ）を繰り返す。 まとめると $$\\mathbf{x}_{k+1} = \\mathbf{P}_k\\left(\\mathbf{x}_k - \\varepsilon_k\\nabla f(\\mathbf{x}_k)\\right)$$ 射影が簡単に計算できる時、効率が良い。 双対問題 詳しくは ラグランジュ未定乗数法 に記載。 まとめ 制約付き最適化問題： $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ &h(\\mathbf{x})\\leq\\mathbf{0} \\end{aligned} $$ ラグランジュ関数： $$L\\left(\\mathbf{x},\\boldsymbol{\\lambda},\\boldsymbol{\\mu}\\right) = f(\\mathbf{x}) + \\boldsymbol{\\lambda}&#94;Tg(\\mathbf{x}) + \\boldsymbol{\\mu}&#94;Th(\\mathbf{x})$$ 双対問題： $$ \\begin{aligned} \\underset{\\boldsymbol{\\lambda,\\mu},\\ \\mathbf{x}\\in\\mathcal{X}}{\\text{maximization : }}&L\\left(\\mathbf{x},\\boldsymbol{\\lambda},\\boldsymbol{\\mu}\\right)\\\\ \\text{subject to : }&\\boldsymbol{\\mu}\\geq\\mathbf{0}\\\\ \\end{aligned} $$ KKT条件： $$ \\begin{aligned} \\begin{cases} \\nabla_{\\mathbf{x}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) = \\mathbf{0}\\\\ \\nabla_{\\boldsymbol{\\lambda}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) = \\mathbf{0} & \\boldsymbol{\\mu}&#94;{\\ast}\\geq\\mathbf{0}\\\\ \\nabla_{\\boldsymbol{\\mu}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) \\leq \\mathbf{0} & \\mu_i&#94;{\\ast}h_i(\\mathbf{x}&#94;{\\ast}) = 0,\\ \\forall i \\end{cases} \\end{aligned} $$ .prompt { /* This is for jupyter blog.*/ min-width: 0; /* This padding is tuned to match the padding on the CodeMirror editor. */ padding: 0em 0.4em 0em 0em; margin: 0px; font-family: monaco; } /*蛍光ペン(pink)*/ .marker-pink { color: #c45a5a; background: linear-gradient(transparent 70%, #ff66ff 60%); font-weight: bold; } /*蛍光ペン(blue) & hover info*/ .marker-info { color: #5C7DC4; background: linear-gradient(transparent 70%, #66FFCC 60%); font-weight: bold; position: relative; cursor: pointer; } .marker-info:hover:before { opacity: 1; z-index: 2; } .marker-info:before { content: attr(aria-label); opacity: 0; position: absolute; top: 30px; right: -90px; font-size: 14px; width: 300px; padding: 10px; color: #fff; background-color: #555; border-radius: 3px; pointer-events: none; } /* 枠囲み */ .frame { border: solid 1.0px #000000; padding: 0.5em 1em; margin: 2em 0; } /* 暗記用 question box */ span .qbox{ display: none; } span.qbox-wrapper:hover .qbox-default{ display: none; } span.qbox-wrapper:hover .qbox{ display: inline; } .qbox-wrapper{ font-weight: bold; padding: 5px 10px; border-radius: 5px; border: solid 2px #000000; margin: 5px } .qbox-wrapper:hover{ text-shadow: 0px 0px 6px rgba(255, 255, 255, 1); -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); transition: all 0.4s ease 0s; } /* 画像吹き出し */ .balloon { display: table; width: 100%; } .balloon_img { display: table-cell; vertical-align: middle; width: 50%; padding-right: 10px; } .balloon_comment { border: #83274e solid 4px; position: relative; background: #fff; padding: 12px; border-radius: 13px; display: block } .balloon_comment::before { content: \"\"; position: absolute; border-right: 23px solid #83274e; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -23px; } .balloon_comment::after { content: \"\"; position: absolute; border-right: 24px solid #fff; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -17px; } if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-3.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-3.html"},{"title":"分子生命科学Ⅲ 第4回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 感覚神経系(2) 体性感覚 痛覚 機械受容器に加え、体性感覚は 1 に強く依存している。 1 は無髄神経である \\(C\\) 線維と薄いエミリンを持つ \\(A\\delta\\) 線維の自由神経終末で、体の組織を受けていることや損傷される危険にあることを伝える。 しかし、侵害受容と痛みは常に同じものではなく、 2 は 主観的 に感じること。あるいは知覚することである。 3 は、痛みを引き起こす信号についての感覚系の処理過程を指す。 したがって、 1 が活性化（発火）しても 2 は起こる時も起こらない時もある。 痛覚受容体は、侵害刺激によって活性化するイオンチャネル型受容体で、温度に反応する 4 受容体(TRPV1)が代表例である。他にも、プロトン感受性カチオンチャンネルのASIC(acid-sensing ion channel)等がある。 4 は、多くの種類の唐辛子の中にある活性成分で、 3 の \\(C\\) 線維\">5 および \\(A\\delta\\) 線維\">6 にあるリガンド結合性イオンチャネルTRPV1を活性化し、 \\(\\mathrm{Na}&#94;{+}\\) と \\(\\mathrm{Ca}&#94;{2+}\\) の流入を引き起こし、ニューロンを発火させる。また、 4 や酸は、TRPV1の活性化温度域を43℃から体温以下にまで下げる可能性があり、そのような条件では体温すら熱い刺激になることになる。 （これによって、辛いとhotが結びつく） 一次痛覚と二次痛覚 皮膚の 1 の刺激は、すばやく鋭い一次痛覚（ \\(A\\delta\\) 線維\">6 ）と、それに引き続く、鈍く長く持続する二次痛覚（ \\(C\\) 線維\">5 ）を生み出す。 \\(A\\delta\\) 線維\">6 は、危険な強度の機械刺激と熱に応答し、急性で局所的な痛みを仲介している。 無髄の \\(C\\) 線維\">5 は熱や寒冷の他、傷害や組織の炎症によって放出される内因性化学物質によって活性化され、局在していない遅い痛みや慢性炎症性質を仲介している。 痛みの制御 痛み知覚が変化に富んでいることは昔からよく知られている。同時に起こっている痛覚以外の入力の程度や行動している状況に応じて、同じレベルでの痛覚受容器の活性化が、時には強い、時には弱い痛みを生ずる。この痛みの調節に関する理解は、 慢性疼痛 の治療に対する新しい戦略を勘案するために重要である。 慢性疼痛 は、20%にも及ぶ成人を悩ませている。 |現象|例|説明| |:-:|:-|:-| | 求心経路 での痛みの制御|向う脛を痛めた時、その周囲の皮膚をさすることによって、痛みが和らぐ感じがする。|向う脛を痛めた時、 \\(C\\) 線維を通して脊髄後角にあるニューロンを活性化し、侵害情報が伝えられる。一方で、痛みではない触覚刺激は \\(A\\beta\\) 線維を活性化し、脊髄後角にあるニューロンを不活性化し、侵害情報の伝達を 抑制 する。| | 下行経路 での痛みの制御|兵士や運動選手が、傷を受けながらも明らかに痛みを感じていない。|強い情動・ストレス等により、脳が痛みの感覚を抑制。その一つは中脳にある細胞集団で、脳室周囲および 7 である。ここへの電気刺激は、脊髄後角にあるニューロンを不活性化し、強い無痛覚を引き起こす。| |アヘンの活性化成分モルヒネ|モルヒネ（オピエート）は癌性疼痛等の激しい痛みに対して劇的な鎮痛作用をもたらす。|オピオイド受容体が \\(A\\beta,C\\) 線維終末からの神経伝達物質グルタミンの放出阻害を行う。| 温度感覚 温度感受性ニューロン(temperature-sensitive neuron)は 8 と 9 に集まっていて、これは体温を一定に保つ生理学的な反応に重要である。 しかし、温度知覚に関与するのは、実際にところは皮膚にある 10 である。 10 は温度に対して敏感で、2-5℃の皮膚の温度差を検知できる。 温度に関する感受性は皮膚の部位で一定ではなく、温と冷の感覚の部位が異なっている。このことは、別々の受容器が温度情報を変換していることを示している。 （辛いトウガラシの活性化成分が\"温hot\"覚の受容器にあるTRPV1と呼ばれるタンパク質の同定に使われたように、） ミントに含まれる活性成分である 11 が\"冷cold\"覚を引き起こすことから、メンソールがTRPM8と呼ばれる受容体を刺激しており、一方でこの受容体は温度を25℃以下にすることによっても非痛覚性に活性化される。 視覚系 外界で起こっている状況を把握する上で、ヒトにとって視覚機能はその質と量において最も重要な感覚系。ヒトの大脳皮質の約半分が視覚世界の分析に関わっている。 末梢視覚系(眼) ： 網膜上には1億2500万個の視細胞があり、光子エネルギーを膜電位に変換する。網膜は、網膜の異なる部位に入射する光の強さの 差異 を感知する。 中枢視覚系 ： 視細胞からの情報を分析・解釈し、物体の色、形、位置、動き等を抽出する。（ex.色：物理的観点からいえば、この世に色は存在しない。ただ周囲の物体が反射する可視光線の異なった波長スペクトルがあるだけである。脳は、3つのタイプの錐体が検出した情報に基づいて多彩な色を作り出している。） 末梢視覚系(眼) 目の断面解剖 角膜 には血管はなく、背後にある液体、 12 により養われている。 虹彩の背後にある透明な 13 は、 14 に付着した毛様体小体となってこれにより支えられている。 13 の形が変化することにより、眼は異なる距離の対象物に焦点を合わせることができる。 13 はまた、眼の内部を多少異なる液体を含む2つの区域に分けている。前述の 12 は、 角膜 と 13 の間にある水のような液体である。 13 と 網膜 の間にある 15 はそれより粘性が高く、その圧力によって眼球は球状に保たれている。 検眼鏡による眼底像 瞳孔を通して網膜を覗き見る装置、すなわち 検眼鏡(ophthalmoscope) を用いれば、眼を別の視点から観察できる。 検眼鏡(ophthalmoscope)で見る網膜で最も際立った特徴は、網膜表面を走行する血管である。これらの血管は 16 と呼ばれる淡い色の円形部から出ている。この円形部は、視神経線維の網膜からの出口でもある。 16 は、視神経が結合する部位で、ここから網膜の栄養に重要な血管が出入りする。この部位は視細胞を欠き、 盲点 となる。 網膜の中心部には、周囲に明るい黄色の色調を伴った暗い領域がある。これが 17 であり、中心視覚を担当する網膜部位である。 17 には大きな血管が周囲より少なく、中央部に 18 （くぼみ）があり、ここに視野の中心が焦点を結ぶ。解像度の最も高い視覚像が得られる部位でもある。 網膜情報処理の基本構造 視覚の神経科学、つまり光エネルギーの神経活動への変換についての話に移る。 網膜の情報処理の基本形は以下の図で示されている。 19 から 20 を経て 21 に至るまでが、視覚信号の流れの最も直接的な経路である。 21 が光に反応して活動電位を発すると、これらの インパルス（活動電位） は視神経を経て脳に伝えられる。視細胞から脳までの直接経路にあるこれら細胞群は、さらに2つのタイプの補助的な細胞の影響も受けている。 22 は、視細胞からの入力を受けると神経突起を側方に伸ばして周囲の 20 や 21 に伝える。 23 は、 20 から入力を受けて周囲の 21 ・ 21 ・別の 23 に信号を側方に伝達する。 視細胞の構造：桿体細胞と錐体細胞 桿体と錐体 説明 電磁波からニューロンのシグナルへの変換は、網膜の最外側にある一億2500万個の視細胞が行う。 24 は長い円筒形の外節を持ち、その中に多くの円板を含む。 24 は光に対する感受性が 25 よりも1000倍も高く、夜間の弱い明かり（暗所視）では 24 だけが視覚にかかわる。また、 24 は網膜周辺で割合が高く、視細胞の密度が高いので高い光感受性を持つ。 25 は短く先細りした外節を持ち、内部の円板の数は少ない。 25 は日中の光（明所視）で働く。また、 25 は 18 の付近に集中しており、神経節細胞に対する視細胞の数が少なく、高い解像能を持つ。したがって、 18 は色覚に富むが、感度で劣る。 24 は1種類のオプシン(500nm(青緑)にピーク)、 25 は3種類のオプシン(430nm(青)、530nm（緑）、560nm(赤)にピーク)を持つ。 我々が知覚する色は、網膜に当たる光信号に対する各 25 の相対的な貢献度で概ね決定される。したがって、正常な場合は3種類の 25 オプシンを持つが、2種類の 25 オプシンしか持たない場合、赤と緑の区別がつかない。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-4.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-4.html"},{"title":"RNA-seqデータ解析（バッチスクリプト版）","text":"ui3hJBMBOOrkDjfabW6D8g==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-12.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-12.html"},{"title":"RNA-seqデータ解析（対話モード版）","text":"il9oE0+ZsAjaYFzn0NoSZA==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-11.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-11.html"},{"title":"ゲノム解析ツールの環境構築","text":"e7wISuH42lJFfeCJHbtBzQ==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-10.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-10.html"},{"title":"逐次最小問題最適化法(SMO)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt 二次計画問題を解くアルゴリズム概観 アルゴリズム 説明 伝統的な二次計画法のアルゴリズム 計算コスト及びメモリ使用量の面で現実的には厳しい。 チャンキング(chunking) カーネル行列からラグランジュ乗数が $0$ となるデータに対応する行および列を取り除いても、ラグランジュ関数が不変であることを利用し、元々の二次計画問題は、より次元数の小さな問題を順番に解くことで、最終的には $0$ とならないラグランジュ乗数だけを残す、という問題に帰着する。 射影共役勾配法(projected conjugate gradient method) チャンキングを実装する手法 分解法(decomposition method) チャンキングと同様 サイズの小さな二次計画問題を繰り返し解く という手法だが、ここの部分問題の大きさが一定であるため、任意の大きさのデータに対応できる。 逐次最小問題最適化法(SMO;sequential minimal optimization) 分解法の計算コストを削減した手法。たった２つのラグランジュ乗数を含む部分問題を逐次解いていくことで最終的な解を得る。 逐次最小問題最適化法(SMO;sequential minimal optimization) ラグランジュ双対問題 を以下のように定義する。 $$ \\begin{aligned} \\tilde{L}(\\mathbf{a}) &=\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)& (7.10)\\\\ a_n & \\geq 0,\\quad n=1,\\ldots,N & (7.11)\\\\ \\sum_{n=1}&#94;Na_nt_n &= 0 & (7.12) \\end{aligned} $$ 逐次最小問題最適化法(SMO;sequential minimal optimization) は反復法である。 適当な初期値 $\\mathbf{a}&#94;{(0)}$ から出発して、更新 $\\mathbf{a}&#94;{(k)} \\rightarrow \\mathbf{a}&#94;{(k+1)}$ を繰り返す。 この際、 １度には2つの成分しか動かさない。 ここで、$a_p$ と $a_q$ だけ動かすことを考える。 （他の $a_n$ は定数とみなす） この時、制約条件より $$ a_pt_p + a_qt_q = 0-\\sum_{n\\neq p,q} a_nt_n = \\mathrm{const.}$$ が成立する。したがって、 $$ \\frac{\\partial a_q}{\\partial a_p} = -\\frac{t_p}{t_q} =-t_pt_q \\cdots (\\ast)$$ と解析的に偏微分を求めることが可能である。 目的関数 $\\tilde{L}$ の変化量 以下、$K_{ij} = k\\left(\\mathrm{x}_i,\\mathrm{x}_j\\right)$ とおく。ここで、 $$a_p\\mapsto a_p+\\Delta_p, \\quad a_q\\mapsto a_q+\\Delta_q$$ と更新した時、目的関数 $\\tilde{L}$ の変化量 $\\Delta\\tilde{L}$ は、 $$ \\begin{aligned} \\Delta\\tilde{L} &= \\Delta_p + \\Delta_q - \\Delta_pt_p\\sum_{n=1}&#94;Na_nt_nk(\\mathbf{x}_p,\\mathbf{x}_n) - \\Delta_qt_q\\sum_{n=1}&#94;Na_nt_nk(\\mathbf{x}_q,\\mathbf{x}_n)\\\\ &-\\frac{1}{2}\\left[\\Delta_p&#94;2k(\\mathbf{x}_p,\\mathbf{x}_p) + 2\\Delta_p\\Delta_qt_pt_qk(\\mathbf{x}_p,\\mathbf{x}_q) + \\Delta_q&#94;2k(\\mathbf{x}_q,\\mathbf{x}_q)\\right] \\end{aligned} $$ となる。 $(\\ast)$ より $\\Delta_q = -t_pt_q\\Delta_p$ である。 $t_p=t_q(\\Longleftrightarrow\\Delta_q=-\\Delta_p)$ の時と $t_p\\neq t_q$ の時に場合分けをし、それぞれ $\\Delta_p$ で変化量を偏微分して $0$ とおく。 結果は共に等しく、以下で表される。 $$ \\begin{aligned} \\Delta_p &= \\frac{1-t_pt_q + t_p\\left(\\sum_{n=1}&#94;Na_nt_nK_{qn} - \\sum_{n=1}&#94;Na_nt_nK_{pn}\\right)}{K_{pp} - 2K_{pq} + K_{qq}}\\\\ &= \\frac{1-t_pt_q + t_p\\left(y(\\mathbf{x_q}) - y(\\mathbf{x}_q)\\right)}{K_{pp} - 2K_{pq} + K_{qq}}\\\\ \\end{aligned} $$ クリッピング この時、 $t_pa_p+t_qa_q=c$ $a_p\\geq0$ $a_q\\geq0$ が成立していなければならないので、以下を満たすように $\\Delta_p$ の クリッピング を行う必要がある。 $t_p=t_q$ のときは $ 0 \\leq a_p + \\Delta_p \\leq c/t_p$ $t_p=-t_q$ のときは $ \\mathrm{max}\\{0,c/t_p\\}\\leq a_p+\\Delta_p$ 変数の選択方法 最後に、動かす $\\mu_p,\\mu_q$ の選択基準であるが、SMO法の発見者である $John C. Platt$ の論文に従うならば以下の様になる。 $KTT$条件を破る$a_p$を$1$つ目に選ぶ。 続いて、$\\left|y\\left(\\mathbf{x_q}\\right)-y\\left(\\mathbf{x_p}\\right)\\right|$ が最大となる$a_p$を次に選ぶ。 これは、$\\left|y\\left(\\mathbf{x_q}\\right)-y\\left(\\mathbf{x_p}\\right)\\right|$ が大きければそれだけステップ幅も大きくなるため収束が早くなるというヒューリスティックス（直感）である。 これを繰り返して、$\\tilde{L}$ が収束するまで反復を繰り返せば学習完了である。 実装例 kerasy.ML.svm.BaseSVM に記載。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-5.html"},{"title":"ラグランジュ双対問題","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) はじめに このノートは、 Qiita記事『ラグランジュ双対問題について解説』 を引用しています。 ラグランジュ双対関数 ラグランジアン 次の最小化問題を考える. $$ \\begin{aligned} \\min_{x\\in\\mathbb{R}&#94;n} &~ f_0(x)\\\\ \\mathrm{s.t.} &~ f_i(x)\\le 0,~ i=1,\\ldots,m\\\\ &~ h_i(x)=0, ~i=1,\\ldots, p \\end{aligned} $$ 実行可能領域は 空でない とする この最適化問題の 最適値 を \\(p&#94;\\star\\) と書く 凸性は特に仮定しない 主問題 という ラグランジアンは次のように定義される。 $$L(x, \\lambda, \\nu):=f_0(x)+\\sum_{i=1}&#94;m\\lambda_i f_i(x)+\\sum_{i=1}&#94;p\\nu_i h_i(x)$$ \\(\\lambda_i, \\nu_i\\) はラグランジュ未定乗数 ラグランジュ双対関数 ラグランジュ双対関数は次のように定義される. $$ \\begin{aligned} g(\\lambda,\\nu)&:=\\inf_{x\\in D} L(x, \\lambda, \\nu)\\\\ &=\\inf_{x\\in D} \\left(f_0(x)+\\sum_{i=1}&#94;m\\lambda_i f_i(x)+\\sum_{i=1}&#94;p\\nu_i h_i(x)\\right) \\end{aligned} $$ \\(D:=\\bigcap_{i=0}&#94;m \\mathrm{dom}(f_i) \\cap \\bigcap_{i=1}&#94;p \\mathrm{dom}(h_i)\\) 双対関数は, \\((\\lambda,\\nu)\\) のアフィン関数の各点でのinfになっているため, 必ずconcave(上に凸)となる (もとの問題が凸でなくても) 証明してみた: $$ \\begin{aligned} & g(t\\lambda_a+(1-t)\\lambda_b, t\\nu_a+(1-t)\\nu_b)\\\\ =&\\inf_{x\\in\\mathcal{D}}\\left(tL(x,\\lambda_a,\\nu_a)+(1-t)L(x,\\lambda_b,\\nu_b)\\right)\\\\ \\ge& t\\inf_{x\\in\\mathcal{D}}L(x,\\lambda_a,\\nu_a)+(1-t)L(x,\\lambda_b,\\nu_b)\\\\ =& tg(\\lambda_a,\\nu_a)+(1-t)g(\\lambda_b,\\nu_b) \\end{aligned} $$ 最適値の下限 任意の \\(\\lambda\\ge0, \\nu\\) に対して, 次が成り立つ. \\($g(\\lambda,\\nu)\\le p&#94;\\star\\) 証明: \\(\\tilde{x}\\) を実行可能解とする: \\(f_i(\\tilde{x})\\le 0, h_i(\\tilde{x}) = 0\\) \\(\\lambda\\ge 0\\) を仮定 このとき, \\(L(\\tilde{x},\\lambda,\\nu)\\) の値は, \\(f_0(\\tilde{x})\\) でおさえられる: $$ L(\\tilde{x},\\lambda,\\nu)=f_0(\\tilde{x})+\\underbrace{\\sum_{i=1}&#94;{m}\\lambda_if_i(\\tilde{x})}_{\\le0}+\\underbrace{\\sum_{i=1}&#94;{p}\\nu_ih_i(\\tilde{x})}_{=0}\\le f_0(\\tilde{x}) $$ ゆえに, \\(g(\\lambda, \\nu)\\) は \\(f_0(\\tilde{x})\\) でおさえられる: $$ \\therefore~g(\\lambda, \\nu)=\\inf_{x\\in\\mathcal{D}}L(x,\\lambda,\\nu)\\le L(\\tilde{x},\\lambda,\\nu)\\le f_0(\\tilde{x}) $$ 任意の \\(\\tilde{x}\\) に対して, \\(g(\\lambda, \\nu)\\le f_0(\\tilde{x})\\) が成り立つため, \\(g(\\lambda, \\nu)\\le p&#94;\\star\\) が成り立つ. 結論: 双対関数の値は, 主問題の最適値を超えない 線形近似による解釈 元の主問題と等価な次の最小化問題を考える. $$ \\min_{x}~f_0(x)+\\sum_{i=1}&#94;{m}I_-(f_i(x))+\\sum_{i=1}&#94;{p}I_0(h_i(x)) $$ ただし, \\(I_{-},I_{0}\\) は 指示関数 : $$ I_-(u):=\\begin{cases} 0&u\\le 0\\\\ \\infty& u>0 \\end{cases},~~~ I_0(u):=\\begin{cases} 0&u = 0\\\\ \\infty& u\\ne 0 \\end{cases} $$ 最小化するのが目的であるが, 指示関数は制約を満たさないと無限大になってしまう. この指示関数は, 制約違反に対する不満度 を表していると解釈できる. ここで, \\(I_-(u)\\) を \\(\\lambda_i u (\\lambda_i\\ge 0)\\) \\(I_0(u)\\) を \\(\\nu_iu\\) というように指示関数を近似する. $$ \\min_{x}~L(x,\\lambda,\\nu)=f_0(x)+\\sum_{i=1}&#94;{m}\\lambda_i f_i(x)+\\sum_{i=1}&#94;{p}\\nu_i h_i(x) $$ これは制約違反をソフトに近似したものと考えられる もちろん, 制約を違反するほど不満度は上昇するようになっている 不等式制約に関して, 違反しているとき \\(f_i(x)>0\\) であり, \\(\\lambda_if_i(x)\\ge0\\) 任意の \\(u\\) に関して, \\(\\lambda_iu \\le I_-(u)\\) と \\(\\nu_iu \\le I_0(u)\\) が成り立つため, 双対関数が元の主問題の下限を与えることがわかる 共役関数 \\(f\\) の共役関数 \\(f&#94;\\ast\\) は次で定義される. $$ f&#94;*(y)=\\sup_{x\\in\\mathrm{dom} f}(y&#94;\\top x-f(x)). $$ 共役関数と双対問題には密接な関係がある. ( フェンシェル双対定理 ) たとえば, 機械学習のよくある形 $$ \\min_{w\\in\\mathbb{R}&#94;d} f(Xw)+g(w) $$ の双対問題は, $$ \\max_{\\alpha\\in\\mathbb{R}&#94;n} -f&#94;\\ast(-\\alpha)-g&#94;\\ast(X&#94;\\top\\alpha) $$ というように共役関数を使って表現できる. そのため, 凸共役 を覚えておけば, 形式的に双対問題を導出できる. 証明は簡単で, ラグランジアン \\(L(w,z,\\alpha)=f(z)+g(w)+\\alpha&#94;\\top(z-Xw)\\) を考えて, 双対関数の定義にしたがって \\(w\\in\\mathbb{R}&#94;d,z\\in\\mathbb{R}&#94;n\\) に関して最小化するだけだ. ちなみに, このとき最適解 \\(w&#94;\\star,\\alpha&#94;\\star\\) に関して $$ w&#94;\\star \\in \\partial g&#94;\\ast(X&#94;\\top \\alpha&#94;\\star), \\quad \\alpha&#94;\\star \\in -\\partial f(Xw&#94;\\star) $$ が成立する (KKT条件). ラグランジュ双対問題 双対関数から双対問題へ. ラグランジュ双対問題 ここまでで, 双対関数が主問題の下限を与えることを示した. 自然な疑問は, 「ラグランジュ双対関数から得られる最も良い下限はどれくらいなのか?」ということだ. 最も良い下限は次の最大化問題を解くことで得られる. $$ \\begin{aligned} \\max_{\\lambda,\\nu}~&g(\\lambda,\\nu)\\\\ \\mathrm{s.t.} ~&\\lambda\\ge0 \\end{aligned} $$ $ これは, ラグランジュ双対問題 と呼ばれる 双対実行可能領域: \\((\\lambda,\\nu)\\) に関して, \\(\\lambda\\ge0\\) かつ \\(g(\\lambda,\\nu)>-\\infty\\) \\((\\lambda&#94;\\star,\\nu&#94;\\star)\\) : 双対問題の最適解 \\(d&#94;\\star\\) : 双対問題の最適値 双対問題は必ず凸最適化問題 目的関数が必ずconcaveで, 制約が凸であるため これは, 主問題が凸最適化でなくても成り立つ 弱双対性 $$ d&#94;\\star\\le p&#94;\\star $$ 主問題の凸性にかかわらず, 成り立つ この不等式は, \\(p&#94;\\star, d&#94;\\star\\) が発散しないときに成り立つ \\(p&#94;\\star - d&#94;\\star\\) を 双対ギャップ という よく最適化アルゴリズムの停止条件に使われる \\(p&#94;\\star\\) を求めるのことが難しいときに \\(d&#94;\\star\\) を求めることで, \\(p&#94;\\star\\) の下限を知ることができる 双対問題は必ず凸であるため, 多くの場合効率的に解ける 強双対性 $$ d&#94;\\star=p&#94;\\star $$ 主問題の最適値が双対問題の最適値と一致するという性質 強双対性は常には成り立たない もし主問題が凸, すなわち: $$ \\begin{aligned} \\min_{x\\in\\mathbb{R}&#94;n} &~ f_0(x)\\\\ \\mathrm{s.t.} &~ f_i(x)\\le 0, ~i=1,\\ldots,m\\\\ &~ Ax=b \\end{aligned} $$ で \\(f_0,\\ldots,f_m\\) が 凸なら, たいていは(いつもではない)強双対性が成り立つ. たとえば, SVMの最適化問題は凸であり, 強双対性が成り立つため, 主問題/双対問題のどちらを解いてもよい. スレーター条件 次を満たすような \\(x\\in\\mathrm{relint}(D)\\) が存在することをいう. $$ f_i(x)<0,~i=1,\\ldots,m,~~~Ax=b $$ $ 主問題が凸でスレーター条件を満たすとき, 強双対性が成り立つ スレーター条件は強双対性の十分条件である (必要十分ではない) もし, \\(f_1,\\ldots,f_k\\) がアフィンなら, より弱い条件が成り立てばよい: $$ f_i(x)\\le 0,~i=1,\\ldots,k,~~~f_i(x)<0,~i=k+1,\\ldots,m,~~~Ax=b $$ 言い換えれば, アフィンの不等式制約は等号を含んでもよい 補足: int(内部)とrelint(相対的内部) \\(\\mathrm{int}(S)\\) : Sに含まれる最大開集合 Sから境界上の点を取り除いたもの \\(\\mathrm{relint}(S)\\) : Sによって拘束される線形空間上で, Sから境界上の点を取り除いたもの. intとrelintの違いのイメージとしては, まっすぐな下敷きのような平面を考えたとき, intは下敷きの平面ごと取り除いてしまい空集合になるのに対して, relintは下敷きの縁を削って残った部分. Example1 \\(S=\\lbrace(x_1,x_2)\\mid 0\\le x_1\\le 1,x_2=0\\rbrace\\) $$ \\mathrm{int}(S)=\\emptyset, \\mathrm{relint}(S)=\\{(x_1,x_2)\\mid 0 < x_1 < 1,x_2=0\\}, (\\mathrm{aff}(S)=\\{(x_1,x_2)\\in\\mathbb{R}&#94;2\\mid x_2=0\\}) $$ Example2 \\(S= \\lbrace (x_1,x_2)\\mid 0\\le x_1\\le 1,0\\le x_2\\le 1\\rbrace\\) $$ \\mathrm{int}(S)=\\mathrm{relint}(S)=\\{(x_1,x_2)\\mid 0 < x_1 < 1,0<x_2<1\\}, (\\mathrm{aff}(S)=\\{(x_1,x_2)\\in\\mathbb{R}&#94;2\\}) $$ 最適性条件 特に主問題の凸性を仮定しない. 相補性条件 特に, 強双対性条件を満たすと仮定すると, $$ \\begin{aligned} f_0(x&#94;\\star)&=g(\\lambda&#94;\\star,\\nu&#94;\\star)\\\\ &=\\inf_{x\\in D} \\left(f_0(x)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star h_i(x)\\right)\\\\ &\\le f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star h_i(x&#94;\\star)\\\\ &\\le f_0(x&#94;\\star) \\end{aligned} $$ 1行目: 強双対性 2行目: 双対関数の定義 3行目: \\(\\inf\\) の定義 4行目: \\(\\lambda_i&#94;\\star\\ge0, f_i(x&#94;\\star)\\le0, ~i=1,\\ldots,m\\) と \\(h_i(x&#94;\\star)=0, ~i=1,\\ldots,p\\) 1,3行目と3,4行目を考慮すると, $$ \\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x&#94;\\star)=0. $$ 和の各項は非負であるため, $$ \\lambda_i&#94;\\star f_i(x&#94;\\star)=0,~~~i=1,\\ldots,m. $$ これを相補性条件という もし \\(\\lambda_i&#94;\\star>0\\) なら, \\(f_i(x&#94;\\star)=0\\) もし \\(f_i(x&#94;\\star)<0\\) なら, \\(\\lambda_i&#94;\\star=0\\) KKT条件 (Karush-Kuhn-Tucker条件) 強双対性を仮定すると, \\(x&#94;\\star\\) は \\(L(x,\\lambda&#94;\\star,\\nu&#94;\\star)\\) を最小化するため, \\(x&#94;\\star\\) における勾配は0である: $$ \\nabla f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star \\nabla f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star\\nabla h_i(x&#94;\\star)=0 $$ ゆえに, 最適解で成り立つ式を列挙すると: \\(f_i(x&#94;\\star)\\le 0,~i=1,\\ldots,m\\) \\(h_i(x&#94;\\star)= 0,~i=1,\\ldots,p\\) \\(\\lambda_i\\ge0,~i=1,\\ldots,m\\) \\(\\lambda_i f_i(x&#94;\\star)= 0,~i=1,\\ldots,m\\) \\(\\nabla f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star \\nabla f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star\\nabla h_i(x&#94;\\star)=0\\) これがいわゆる KKT条件 である. (必要条件) まとめると, 強双対性を満たすなら, 最適解において主変数と双対変数はKKT条件を満たさなければならない. 主問題が凸であるとき, KKT条件は十分条件にもなる. つまり, ある点 \\(\\tilde{x},\\tilde{\\lambda}, \\tilde{\\nu}\\) がKKT条件を満たすなら, \\(\\tilde{x}=x&#94;\\star, \\tilde{\\lambda}=\\lambda&#94;\\star, \\tilde{\\nu}=\\nu&#94;\\star\\) . 十分条件の証明: $$ \\begin{aligned} g(\\tilde{\\lambda},\\tilde{\\nu})&=L(\\tilde{x},\\tilde{\\lambda},\\tilde{\\nu})\\\\ &= f_0(\\tilde{x})+\\sum_{i=1}&#94;m\\tilde{\\lambda}_i f_i(\\tilde{x})+\\sum_{i=1}&#94;p\\tilde{\\nu}_i h_i(\\tilde{x})\\\\ &= f_0(\\tilde{x}) \\end{aligned} $$ 1行目: \\(\\tilde{x}\\) がKKT条件の最後の条件を満たすため 主問題が凸であるため, \\(L(x,\\tilde{\\lambda},\\tilde{\\nu})\\) は \\(x\\) に関して凸である ( \\(\\because\\tilde{\\lambda}_i\\ge0\\) ) \\(\\therefore~L\\) を最小化する \\(x\\) は, 勾配が0である 2行目: ラグランジアンの定義 3行目: \\(\\tilde{x}\\) がKKT条件の2つ目と4つ目を満たすため この式は, 双対ギャップが0であることを意味するため, \\(\\tilde{x},\\tilde{\\lambda}, \\tilde{\\nu}\\) は最適解である. 結論: スレーター条件を満たすとき, KKT条件は最適性の必要十分条件となる if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-4.html"},{"title":"サポートベクターマシーン(SVM)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: seed = 0 サポートベクターマシーン(SVM) マージン最大化 に基づく線形識別器 カーネル関数と組み合わせることによって非線形な識別も可能 サンプル間の類似度にしか依存しない （→非ベクトルデータの分類にも適用可能 ） まとめ マージン最大化 という方針で誤差関数を定義する。 汎化性能を高めるために、 スラック変数 を導入して ソフトなマージン最大化に緩和 する ラグランジュ未定乗数法 を用いてラグランジュ関数を得る。 各パラメータについて微分する。 ラグランジュ関数に代入して 双対問題 を得る。 SMO法 などを用いて二次計画問題である双対問題を解く。 無効制約のデータ点は識別関数に影響しなくなる。 （SVMが疎になる。） マージン最大化 「個々のデータに関して確率計算をし、何らかの識別面を求める」 のではなく、 「汎化性能の最も高い識別面を直接考える」 そこで、 「マージン最大化」 という方針で識別面を最適化する。（正則化理論・VC理論により正当化されている。） 最も近いデータ $\\phi(\\mathbf{x}_n)$ までの距離（ マージン ）が最大となるような識別面を選ぶ。（ここでは、距離＝ユークリッド距離とする。） 識別面からちょうどマージンの分だけ離れた面上に乗る特徴ベクトル（一般に複数）を、(広義の) サポートベクトル (support vector) と呼ぶ。 学習法の定式化（2クラス分類） ※ 二クラスが線形分離可能であると仮定する。 線形識別関数が $y(\\mathbf{x}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x})+b$ で表され、$y(\\mathbf{x})$ の正負でクラスを識別するとする。 $y(\\mathbf{x})>0$ の時 $t=1$ $y(\\mathbf{x})<0$ の時 $t=-1$ したがって、 $t_ny(\\mathbf{x}_n)>0$ が全てのデータ $(\\mathbf{x}_n,t_n)$ に対して成り立つ （∵特徴空間で線形分離可能） 学習の目的は「パラメータ $\\mathbf{w}$ と $b$ を決定すること」。 データと識別面の最小距離は $1 / \\|\\mathbf{w}\\|$ で表される。（理由は以下） ※ 記述を簡単にするために線形識別問題の場合で考えるが、非線形写像 $\\phi$ を通しても同様の議論が成り立つ。 点 $\\mathbf{x}_n$ から識別面に下ろした垂線の足を $\\mathbf{x}_{n\\perp}$ 点 $\\mathbf{x}_n$ から識別面までの符号付き距離を $d_n$ と定義すると、 $\\mathbf{w}$ が識別面の法ベクトルであるから、 $\\mathbf{x}_{n\\perp} = \\mathbf{x}_n - d_n\\frac{\\mathbf{w}}{\\|\\mathbf{w}\\|}$ と表せる。 $\\mathbf{x}_{n\\perp}$ は識別面上にあるので、$\\mathbf{w}&#94;T\\mathbf{x}_{n\\perp} + b = 0$ が成り立つ。 したがって、 $$\\mathbf{w}&#94;T\\left(\\mathbf{x}_n - d_n\\frac{\\mathbf{w}}{\\|\\mathbf{w}\\|}\\right) + b = 0\\qquad \\therefore d_n = \\frac{\\mathbf{w}&#94;T\\mathbf{x}_n + b}{\\|\\mathbf{w}\\|}$$ として距離 $d_n$ が定義できる。ここで、$(\\mathbf{w},b)\\rightarrow(k\\mathbf{w},kb)$ としても $d_n$ の値は不変なので、 $$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n + b \\right)= 1\\qquad (7.4)$$ とスケーリングしても一般性を失わない。 なお、 このスケーリング下では、全てのデータ $\\mathbf{x}_n$ に対して $$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n + b \\right) \\geq 1\\qquad (7.5)$$ が成り立つ。 ここまでをまとめると、 マージン最大 は、 『$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n+b\\right)\\geq1\\quad(i=1,\\ldots,n)$ という条件下で、$\\frac{1}{2}||\\mathbf{w}||&#94;2$ を最小化する問題』 であると言える。 この制約付き最適化問題を解くために、$(7.5)$ の各制約式ごとにラグランジュ乗数 $a_n\\geq0$ を導入すると、次のラグランジュ関数が得られる。 $$L(\\mathbf{w},b,\\mathbf{a}) = \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2 - \\sum_{n=1}&#94;{N}a_n\\left\\{t_n\\left(\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n) + b\\right) - 1\\right\\}\\qquad (7.7)$$ よって、$\\mathbf{w},b$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) =0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) & (7.8)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_nt_n = 0 \\quad\\therefore\\sum_{n=1}&#94;Na_n&#94;{\\ast}t_n = 0 & (7.9)\\\\ \\end{aligned} $$ が得られる。これらの結果を $(7.7)$ に代入して $\\mathbf{w},b$ を消去すると、元の問題は以下の 双対問題 に変換される。 $$ \\tilde{L}(\\mathbf{a}) =\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.10)$$ なお、$\\mathbf{a}$ は以下の制約を満たす。 $$ \\begin{aligned} a_n & \\geq 0,\\quad n=1,\\ldots,N & (7.11)\\\\ \\sum_{n=1}&#94;Na_nt_n &= 0 & (7.12) \\end{aligned} $$ また、カーネル関数 $k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ は、$k(\\mathbf{x},\\mathbf{x}&#94;{\\prime}) = \\phi(\\mathbf{x})&#94;T\\phi(\\mathbf{x})$ と定義される。 この双対問題は二次計画問題であり、 逐次最小問題最適化法(SMO;sequential minimal optimization) などで解くことができる。 なお、今回の場合、 制約条件が全て線形 であることから 実行可能域が凸領域 であることがわかるので、 任意の局所解が大局解になる。 一旦最適な $\\mathbf{a}$ が求まると、識別関数 $y(\\mathbf{x})$ は、 $$y(\\mathbf{x}) = \\mathbf{w}&#94;{\\ast T}\\phi(\\mathbf{x})+b = \\sum_{n=1}&#94;N a_nt_nk(\\mathbf{x},\\mathbf{x}_n) + b \\qquad (7.13)$$ として表すことができる。ここで、 KKT条件より $a_n=0\\Leftrightarrow t_ny(\\mathbf{x}_n)-1>0$ のデータは識別関数に影響しないので、計算から除外することができる。（SVMが疎になる理由） なお、バイアスパタメータ $b$ は、任意のサポートベクトル $\\mathbf{x}_n$ が $t_ny(\\mathbf{x}_n) = 1$ を満たすことから、 $$ \\begin{aligned} &t;_n\\left(\\sum_{m\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m) + b\\right) = 1 & (7.17)\\\\ &\\therefore b&#94;{\\ast}= \\frac{1}{N_{\\mathcal{S}}}\\sum_{n\\in\\mathcal{S}}\\left(t_n-\\sum_{n\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\right)&(7.18) \\end{aligned} $$ として求めることができる。（数値計算の誤差の影響を小さくするため、$(7.17)$ の両辺に $t_n$ をかけ、全てのサポートベクトルで平均をとった。 In [3]: from kerasy.ML.svm import hardSVC In [4]: n_cls1 = 20 ; n_cls2 = 20 N = n_cls1 + n_cls2 In [5]: train_x = np . concatenate ([ np . random . RandomState ( seed ) . normal ( loc = [ 0.5 , 0 ], scale = [ 0.2 , 0.4 ], size = ( n_cls1 , 2 )), np . random . RandomState ( seed ) . normal ( loc = [ - 0.5 , 0 ], scale = [ 0.2 , 0.4 ], size = ( n_cls2 , 2 )) ]) train_y = np . concatenate ([ np . ones ( shape = n_cls1 ), - np . ones ( shape = n_cls2 ) ]) In [6]: X , Y = np . meshgrid ( np . linspace ( - 1 , 1 , 100 ), np . linspace ( - 1 , 1 , 100 )) In [7]: kernels = [ \"linear\" , \"polynomial\" , \"gaussian\" , \"sigmoid\" , \"laplacian\" , \"inverse_multiquadric\" ] In [8]: n_fig = len ( kernels ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i , kernel in enumerate ( kernels ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) model = hardSVC ( kernel = kernel ) model . fit ( train_x , train_y , max_iter = 1500 , sparse_memorize = False ) Z = np . vectorize ( lambda x , y : model . predict ( np . array ([ x , y ]) . reshape ( 1 , - 1 )))( X , Y ) == 1 ax . pcolor ( X , Y , Z , alpha = 0.3 ) for i in range ( N ): alpha = 1 if i in model . isSV () else 0.3 color = \"red\" if train_y [ i ] == 1 else \"blue\" ax . plot ( train_x [ i , 0 ], train_x [ i , 1 ], marker = \"o\" , color = color , markersize = 10 , alpha = alpha ) ax . set_title ( f \" { kernel } kernel\" ) ax . set_xlim ( - 1 , 1 ), ax . set_ylim ( - 1 , 1 ) plt . tight_layout () plt . show () ソフトマージン ここまで、 「二クラスが線形分離可能である」 という仮定を置いていたが、実際の問題では クラスの分布が重なる場合 があり、そのような場合訓練データを完全に分離する解が汎化能力に優れるとは限らない（というより、過学習する。） そこで、各学習データ $(\\mathbf{x}_n,t_n)$ に対して、 スラック変数 (slack variable) $\\xi_n\\geq 0$ を導入して、 $$ t_ny(\\mathbf{x}_n) \\geq 1 \\Longrightarrow t_ny(\\mathbf{x}_n) \\geq 1 - \\xi_n \\qquad (7.20)$$ と条件を緩める。 （ハードマージンの制約のソフトマージンへの緩和） つまり、 $\\xi_n > 1$ となるデータは誤識別している事になる。 ここでの目標は 『マージンよりも内側（$\\xi_n>0$）のデータ $n$ に対してソフトにペナルティを与えつつマージンを最大化する』 ことである。したがって、次の目的関数を最小化する。 $$C\\sum_{n=1}&#94;N\\xi_n + \\frac{1}{2}\\|\\mathbf{w}\\| \\qquad (7.21)$$ なお、$C>0$ は スラック変数を用いて表されるペナルティとマージンの大きさの間の トレードオフを制御するパラメータ である。 したがって、この最小化問題のラグランジュ関数は、新たにラグランジュ乗数 $\\{\\mu_n\\}$ を導入して以下のようになる。 $$L(\\mathbf{w},b,\\boldsymbol{\\xi},\\mathbf{a},\\boldsymbol{\\mu}) = \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2 + C\\sum_{n=1}&#94;N\\xi_n - \\sum_{n=1}&#94;{N}a_n\\left\\{t_n\\left(\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n) + b\\right) - 1 + \\xi_n\\right\\} - \\sum_{n=1}&#94;N\\mu_n\\xi_n\\qquad (7.22)$$ 先程同様 $\\mathbf{w},b,\\xi_n$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) =0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) & (7.29)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_nt_n = 0 \\quad\\therefore\\sum_{n=1}&#94;Na_n&#94;{\\ast}t_n = 0 & (7.30)\\\\ \\frac{\\partial L}{\\partial \\xi_n} &= C-a_n-\\mu_n \\quad\\therefore a_n = C-\\mu_n & (7.31) \\end{aligned} $$ が得られる。これらの結果を $(7.22)$ に代入すると、以下の 双対形のラグランジュ関数 が得られる。 $$ \\tilde{L}(\\mathbf{a}) =\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.32)$$ これは、先程の $(7.10)$ と同様の形である。なお、制約式は $$ \\begin{aligned} &a;_n \\geq 0,\\mu_n\\geq 0 \\quad n=1,\\ldots,N\\\\ &\\therefore 0\\leq a_n \\leq C & (7.33)\\\\ &\\sum_{n=1}&#94;Na_nt_n = 0 & (7.34) \\end{aligned} $$ である。 なお、バイアスパタメータ $b$ は、サポートベクトルは $a_n>0$ を満たすが、KKT条件より $a_n$ $\\mu_n$ $\\xi_n$ 説明 $a_n=0$ 識別関数に影響を及ぼさない。 $0 < a_n < C$ $\\mu_n>0$ $\\xi_n=0$ ちょうどマージン境界上ある。 $a_n=C$ $\\mu_n=0$ $\\xi_n>0$ マージン内に侵入している。 となることから、$0 < a_n < C$ となるサポートベクトルについては $t_ny(\\mathbf{x}_n) = 1$ が成立するので、 $$ \\begin{aligned} &t;_n\\left(\\sum_{m\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m) + b\\right) = 1 & (7.36)\\\\ &\\therefore b&#94;{\\ast}= \\frac{1}{N_{\\mathcal{M}}}\\sum_{n\\in\\mathcal{M}}\\left(t_n-\\sum_{n\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\right)&(7.37) \\end{aligned} $$ として求めることができる。 In [9]: from kerasy.ML.svm import SVC In [10]: train_x = np . concatenate ([ np . random . RandomState ( seed ) . normal ( loc = [ 0.2 , 0.2 ], scale = [ 0.2 , 0.4 ], size = ( n_cls1 , 2 )), np . random . RandomState ( seed ) . normal ( loc = [ - 0.2 , - 0.2 ], scale = [ 0.3 , 0.2 ], size = ( n_cls2 , 2 )) ]) train_y = np . concatenate ([ np . ones ( shape = n_cls1 ), - np . ones ( shape = n_cls2 ) ]) In [11]: params = [ ( 1e-2 , 1e-2 ),( 1e-2 , 1e0 ),( 1e-2 , 1e2 ), ( 1e1 , 1e-2 ),( 1e1 , 1e0 ),( 1e1 , 1e2 ), ( 1e4 , 1e-2 ),( 1e4 , 1e0 ),( 1e4 , 1e2 ), ] In [12]: n_fig = len ( params ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i ,( C , sigma ) in enumerate ( params ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) model = SVC ( kernel = \"gaussian\" , C = C , sigma = sigma ) model . fit ( train_x , train_y , max_iter = 1500 , sparse_memorize = False ) Z = np . vectorize ( lambda x , y : model . predict ( np . array ([ x , y ]) . reshape ( 1 , - 1 )))( X , Y ) == 1 ax . pcolor ( X , Y , Z , alpha = 0.3 ) for i in range ( N ): alpha = 1 if i in model . isSV () else 0.3 color = \"red\" if train_y [ i ] == 1 else \"blue\" ax . plot ( train_x [ i , 0 ], train_x [ i , 1 ], marker = \"o\" , color = color , markersize = 10 , alpha = alpha ) ax . set_title ( f \"gaussian kernel (C= { C } , $\\sigma= { sigma } $)\" ) ax . set_xlim ( - 1 , 1 ), ax . set_ylim ( - 1 , 1 ) plt . tight_layout () plt . show () 多クラスSVM SVMは本来2クラス識別の為の分類器であるが、これを複数組み合わせるなどの方法によって $K>2$クラスの識別に利用する事が出来る。最もよく用いられる方法は、 one-versus-the-rest方式 と呼ばれる方法であり、「データ $\\mathbf{x}$ が クラス $k$ かそれ以外であるか を識別するSVM $y_k(\\mathbf{x})$ を $K$ クラスそれぞれについて構築し、$ y(\\mathbf{x}) = \\mathop{\\rm arg~max}\\limits_{k}y_k(\\mathbf{x})$ によって $\\mathbf{x}$ のクラスを決定する」 SVM回帰 単純な線形回帰問題においては、次の式で定義される正則化された誤差関数を最小化する。 $$\\frac{1}{2}\\sum_{n=1}&#94;N\\{y_n-t_n\\}&#94;2 + \\frac{\\lambda}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.50)$$ 疎な解を得るために、二条誤差関数を $\\epsilon$ 許容誤差関数($\\epsilon$-insentive error function) で置き換える。つまり、予測値 $y(\\mathbf{x})$ と観測値 $t$ の差が $\\epsilon(>0)$ 未満のときは、$\\epsilon$ 許容誤差関数の値は $0$ となる。$\\epsilon$ 許容誤差関数の簡単な例は、 「許容範囲外の値に関しては線形のコストを生じさせる」 ものである。 $$ \\begin{aligned} E_{\\epsilon}\\left(y(\\mathbf{x})-t\\right) = \\begin{cases} 0 & (\\text{ when }|y(\\mathbf{x} - t)| < \\epsilon)\\\\ |y(\\mathbf{x} - t)| - \\epsilon & (\\text{ otherwise }) \\end{cases}\\qquad (7.51) \\end{aligned} $$ In [13]: squareError = lambda x , y_true : 1 / 2 * ( x - y_true ) ** 2 # Sum of Squares Error function epsilonError = lambda x , y_true , epsilon = 1 : 0 if abs ( x - y_true ) < epsilon else abs ( x - y_true ) - epsilon In [14]: X = np . linspace ( - 2 , 2 , 1000 ) plt . plot ( X ,[ squareError ( x , y_true = 0 ) for x in X ], color = \"black\" , label = \"sum of squares error function\" , linestyle = \"--\" ) plt . plot ( X ,[ epsilonError ( x , y_true = 0 ) for x in X ], color = \"black\" , label = \"$\\epsilon$-insentive error function\" ) plt . scatter ( 0 , 0 , marker = \"x\" , color = \"red\" , label = \"y_true\" ) plt . title ( \"Error function comparison\" , fontsize = 16 ), plt . xlim ( - 2 , 2 ), plt . ylim ( -. 1 , 2 ) plt . xlabel ( \"$x$\" , fontsize = 16 ), plt . ylabel ( \"$E(x)$\" , fontsize = 16 ) plt . legend () plt . show () この $\\epsilon$ 許容誤差関数を用いると、結局次の正則化された誤差関数を最小化することになる。 $$C\\sum_{n=1}&#94;NE_{\\epsilon}\\left(y(\\mathbf{x}_n)-t_n\\right) + \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.52)$$ 分類問題と同様、この最適化問題をスラック変数 $\\xi_n,\\hat{\\xi}_n$ を導入して表現する。 $\\epsilon$ チューブの中に位置するという条件は $y_n-\\epsilon\\leq t_n \\leq y_n+\\epsilon$ と表せるので、チューブの外側にデータ点が存在することを許すような制約条件は以下のようにかける。 $$ \\begin{aligned} t_n&\\leq y(\\mathbf{x}_n) + \\epsilon + \\xi_n & (7.53)\\\\ t_n&\\geq y(\\mathbf{x}_n) - \\epsilon - \\xi_n & (7.54)\\\\ \\end{aligned} $$ よって、スラック変数を用いると、SVM回帰の誤差関数は次のようにかける。 $$C\\sum_{n=1}&#94;N\\left(\\xi_n + \\hat{\\xi}_n\\right) + \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.55)$$ したがって、この最小化問題のラグランジュ関数は、ラグランジュ乗数 $a_n,\\hat{a}_n,\\mu_n,\\hat{\\mu}_n$ を導入して以下のようになる。（$y(\\mathbf{x}_n)= \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)+b$） $$ \\begin{aligned} L &=C\\sum_{n=1}&#94;N\\left(\\xi_n+\\hat{\\xi}_n\\right)+\\frac{1}{2}\\|\\mathbf{w}\\|&#94;2-\\sum_{n=1}&#94;N\\left(\\mu_n\\xi_n+\\hat{\\mu}_n\\hat{\\xi}_n\\right)\\\\ &-\\sum_{n=1}&#94;Na_n\\left(\\epsilon + \\xi_n + y_n - t_n \\right)-\\sum_{n=1}&#94;N\\hat{a}_n\\left(\\epsilon + \\hat{\\xi}_n - y_n + t_n\\right) \\qquad (7.56)\\\\ \\end{aligned} $$ これまで同様 $\\mathbf{w},b,\\xi_n,\\hat{\\xi}_n$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;Na_n\\phi(\\mathbf{x}_n)-\\sum_{n=1}&#94;N\\hat{a}_n\\phi(\\mathbf{x}_n)=0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N \\left(a_n-\\hat{a}_n\\right)\\phi(\\mathbf{x}_n) & (7.57)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_n + \\sum_{n=1}&#94;N\\hat{a}_n = 0 \\quad\\therefore\\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right) = 0 & (7.58)\\\\ \\frac{\\partial L}{\\partial \\xi_n} &= C-a_n-\\mu_n \\quad\\therefore a_n + \\mu_n = C & (7.59)\\\\ \\frac{\\partial L}{\\partial \\hat{\\xi}_n} &= C-\\hat{a}_n-\\hat{\\mu}_n \\quad\\therefore \\hat{a}_n + \\hat{\\mu}_n = C & (7.60)\\\\ \\end{aligned} $$ が得られる。これらの結果を $(7.56)$ に代入すると、以下の 双対形のラグランジュ関数 が得られる。 $$ \\begin{aligned} \\tilde{L}(\\mathbf{a},\\hat{\\mathbf{a}}) &= -\\frac{1}{2}\\sum_{n=1}&#94;N\\sum_{m=1}&#94;N\\left(a_n-\\hat{a}_n\\right)\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\\\ &- \\epsilon\\sum_{n=1}&#94;N\\left(a_n + \\hat{a}_n\\right) + \\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right)t_n \\end{aligned} \\qquad (7.61) $$ なお、制約式は $$ \\begin{aligned} 0 \\leq a_n &\\leq C & (7.62)\\\\ 0 \\leq \\hat{a}_n &\\leq C & (7.63) \\end{aligned} $$ である。したがって、新しい入力に対する予測値は $$y(\\mathbf{x}) = \\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right)k(\\mathbf{x},\\mathbf{x}_n) + b\\qquad (7.64)$$ とカーネル関数のみを用いて計算できることがわかる。 なお、バイアスパタメータ $b$ は次のように計算できる。 $C>a_n>0$ が成り立つデータ点についてはKKT条件より $\\xi_n = 0 \\quad \\therefore \\epsilon+y_n-t_n=0$ が成り立つ。よって、 $$ \\begin{aligned} b &= t_n - \\epsilon - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\\\ &= t_n - \\epsilon - \\sum_{m=1}&#94;N\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.69) \\end{aligned} $$ $C>\\hat{a}_n>0$ が成り立つデータ点についてはKKT条件より $\\hat{\\xi}_n = 0 \\quad \\therefore \\epsilon+y_n-t_n=0$ が成り立つ。よって、 $$ \\begin{aligned} b &= t_n - \\epsilon - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\\\ &= t_n - \\epsilon - \\sum_{m=1}&#94;N\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.69) \\end{aligned} $$ なお、このようにして得られた $b$ の値を全て平均した結果を用いると数値誤差の影響を小さくできる。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-3.html"},{"title":"ラグランジュ未定乗数法","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 条件なし最適化 ある関数 \\(f\\) が与えられた時、それが最小値を取る点を見つけ出す。 $$\\text{min : } f(\\mathbf{x})$$ したがって、微分をとって \\(0\\) になる点を見つければ良い。 $$\\frac{\\partial}{\\partial x}f(x) = 0\\Longrightarrow x&#94;{\\ast}$$ 等式制約付き最適化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g(\\mathbf{x})=0\\\\ \\end{aligned} $$ ラグランジュ乗数(Lagrangian multiplier) と呼ばれるパラメータ \\(\\lambda\\) を導入した ラグランジュ関数(Lagrangian function) $$L(\\mathbf{x},\\lambda) \\equiv f(\\mathbf{x})+\\lambda g(\\mathbf{x})\\qquad (E.4)$$ の \\(\\mathbf{x}\\) と \\(\\lambda\\) の両方に対する停留点（鞍点）を見つければ、制約付き問題の最適解が得られる。 理由 以下２つの理由より、 \\(\\nabla f\\) と \\(\\nabla g\\) は、 向きが逆の場合も含めて 平行なベクトルとなる。したがって、 あるパラメータ \\(\\lambda\\neq0\\) が存在して、 $$\\nabla f + \\lambda\\nabla g = 0\\qquad (E.3)$$ が成立しなければならない。これは、 \\(\\nabla_{\\mathbf{x}}L=0\\) と表されることがわかる。また、 \\(\\partial L/\\partial\\lambda = 0\\) より、制約式 \\(g(\\mathbf{x})=0\\) も導かれる。 1) \\(\\nabla g(\\mathbf{x})\\) が制約面 \\(g(\\mathbf{x})=0\\) に対して常に垂直 制約面 \\(g(\\mathbf{x})\\) 上の点 \\(\\mathbf{x}\\) と \\(\\mathbf{x}+\\boldsymbol{\\varepsilon}\\) を考える。 すると、 \\(\\mathbf{x}\\) の周りでの \\(g(\\mathbf{x})\\) のテイラー展開より、 $$g(\\mathbf{x} + \\boldsymbol{\\varepsilon}) \\sim g(\\mathbf{x}) + \\boldsymbol{\\varepsilon}&#94;T\\nabla g(\\mathbf{x})\\qquad (E.2)$$ いま、 \\(\\mathbf{x}\\) と \\(\\mathbf{x}+\\boldsymbol{\\varepsilon}\\) は共に制約面上に存在するので $$g(\\mathbf{x})=g(\\mathbf{x}+\\boldsymbol{\\varepsilon})=0$$ が成り立つ。ゆえに、 \\(\\|\\boldsymbol{\\varepsilon}\\|\\rightarrow0\\) の極限では \\(\\boldsymbol{\\varepsilon}&#94;T\\nabla g(\\mathbf{x})\\sim0\\) が成り立つ。 \\(\\boldsymbol{\\varepsilon}&#94;T\\) は制約面上の接線である。 より、ベクトル \\(\\nabla g(\\mathbf{x})\\) は制約面 \\(g(\\mathbf{x})=0\\) に対して垂直である。 2) \\(\\nabla f(\\mathbf{x}&#94;{\\ast})\\) も制約面に対して垂直 もし \\(\\nabla f(\\mathbf{x}&#94;{\\ast})\\) が制約面に対して垂直でないとすると、制約面にそって \\(f(\\mathbf{x})\\) の値がさらに大きくなるように点を動かすことができるはずである。 したがって、制約面上の点で \\(f(\\mathbf{x})\\) を最大化する点 \\(\\mathbf{x}&#94;{\\ast}\\) においては、ベクトル \\(\\nabla f(\\mathbf{x})\\) も制約面に対して垂直でなければならない。 不等式制約付き最適化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g(\\mathbf{x})\\leq0\\\\ \\end{aligned} $$ ここで、解 \\(\\mathbf{x}&#94;{\\ast}\\in\\Omega\\) には、 無効制約(inactive constraint) \\(\\overset{\\text{def}}{\\Longleftrightarrow}g(\\mathbf{x}&#94;{\\ast}) < 0\\) 有効制約(active constraint) \\(\\overset{\\text{def}}{\\Longleftrightarrow}g(\\mathbf{x}&#94;{\\ast}) = 0\\) の2つの可能性がある。 $$ \\Omega:= \\left\\{\\mathbf{x}\\in\\mathbb{R}&#94;D: g(\\mathbf{x})<0 \\right\\} $$ 無効制約の場合 無効制約 \\(\\left(g(\\mathbf{x})<0\\right)\\) の場合、関数 \\(g(\\mathbf{x})\\) は何も制約を課していないのと同様なので、停留条件は単に \\(\\nabla f(\\mathbf{x}) = 0\\) となる。 なお、これは上記の 等式制約におけるラグランジュ関数 \\((E.4)\\) において \\(\\lambda=0\\) とした場合の停留条件に等しい。 有効制約の場合 有効制約 \\(\\left(g(\\mathbf{x})=0\\right)\\) の場合、 等式制約におけるラグランジュ関数 \\((E.4)\\) において \\(\\lambda\\neq0\\) とした場合の停留条件に等しい。 ただし、 \\(-\\nabla f(\\mathbf{x}&#94;{\\ast})\\) は \\(g(\\mathbf{x})<0\\) の外側へと向かうはず だから、 あるパラメータ \\(\\lambda>0\\) が存在して、 $$\\nabla f(\\mathbf{x}) = -\\lambda\\nabla g (\\mathbf{x})$$ が成立しなければならない。 |勾配|意味|最適化問題における問題における意味| |:-:|:-|:-| | \\(\\nabla f(\\mathbf{x})\\) | \\(f\\) が大きくなる方向|目的とは別の方向| | \\(\\nabla g(\\mathbf{x})\\) | \\(g\\) が大きくなる方向| \\(g(\\mathbf{x})<0\\) の外側へと向かう方向| KKT条件 上記の無効制約・有効制約のどちらの場合にせよ、 \\(\\lambda g(\\mathbf{x})=0\\) が成立することがわかる。 したがって、 \\(g(\\mathbf{x})\\leq0\\) という制約の下で \\(f(\\mathbf{x})\\) を最小化するには、以下の Karush-Kuhn-Tucker(KKT)条件 のもとで、 \\(\\mathbf{x},\\lambda\\) に関して ラグランジュ関数 \\((E.4)\\) の停留点を求めれば良い。 $$ \\begin{aligned} \\begin{cases} \\text{Primal feasibility} &g(\\mathbf{x})\\leq0 & (E.9)\\\\ \\text{Dual feasibility} &\\lambda \\geq 0 & (E.10)\\\\ \\text{Complementary slackness} &\\lambda g(\\mathbf{x}) = 0 & (E.11) \\end{cases} \\end{aligned} $$ なお、当然ではあるが、「制約条件の符号の向き」と「目的関数の最大化・最小化」には以下の関係がある。（ \\(\\lambda\\geq0\\) ） |目的関数 \\(f(\\mathbf{x})\\) |制約条件 \\(g(\\mathbf{x})\\) |ラグランジュ関数 \\(L(\\mathbf{x},\\lambda)\\) | |:-:|:-:|:-:| | \\(\\min f(\\mathbf{x})\\) | \\(g(\\mathbf{x})\\leq0\\) | \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) + \\lambda g(\\mathbf{x})\\) | | \\(\\min f(\\mathbf{x})\\) | \\(g(\\mathbf{x})\\geq0\\) | \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) - \\lambda g(\\mathbf{x})\\) | | \\(\\max f(\\mathbf{x})\\) | \\(g(\\mathbf{x})\\leq0\\) | \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) - \\lambda g(\\mathbf{x})\\) | | \\(\\max f(\\mathbf{x})\\) | \\(g(\\mathbf{x})\\geq0\\) | \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) + \\lambda g(\\mathbf{x})\\) | 一般化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g_j(\\mathbf{x})=0 & (j=1,\\ldots,J)\\\\ & h_k(\\mathbf{x})\\leq0 & (k=1,\\ldots,K)\\\\ \\end{aligned} $$ 以下のラグランジュ関数を最適化する。 $$L\\left(\\mathbf{x},\\{\\lambda_j\\},\\{\\mu_k\\}\\right) = f(\\mathbf{x}) + \\sum_{j=1}&#94;J\\lambda_jg_j(\\mathbf{x}) + \\sum_{k=1}&#94;K\\mu_kh_k(\\mathbf{x})\\qquad (E.12)$$ ここで、KKT条件は、以下となる。 $$ \\begin{aligned} \\begin{cases} \\text{Primal feasibility} &g_j(\\mathbf{x})=0,h_k(\\mathbf{x})\\leq0 \\\\ \\text{Dual feasibility} &\\mu_k \\geq 0\\\\ \\text{Complementary slackness} &\\mu_kh_k(\\mathbf{x}) = 0 \\end{cases} \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-2.html"},{"title":"カーネル法","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt 講義の構成 パターン認識 カーネル法の紹介 最適化理論の復習 サポートベクターマシーン パターン認識 対象を識別するルールを訓練データより、自動的に取得する。 各対象を全データ共通次元のベクトルで表現すれば、識別関数 $f(\\mathbf{x})$ は、特徴空間上に定義される。 元の空間 （入力空間） を非線形に写像すれば、写像先 （特徴空間） で線形識別することで非線形識別が達成される。 $$\\phi:\\mathbf{X}\\rightarrow\\mathbb{R}&#94;m$$ どのように写像を定めるかは難しい問題。 カーネル法の紹介 上で紹介した写像を、 類似度関数（カーネル関数） に基づいて決める手法。（例：ガウシアンカーネル $K(\\mathbf{x},\\mathbf{x}&#94;{\\prime}) = \\exp\\left(-\\frac{\\|\\mathbf{x}-\\mathbf{x}&#94;{\\prime}\\|}{\\sigma}\\right)$） 類似度さえ定義できればどのような対象（例：生物学的ネットワーク上のタンパク質の分類）にでも適用できる。 複雑な問題になると非常に高い次元に写像する必要があるが、カーネル関数さえ求められれば写像 $\\phi$ を陽に求める必要はない （カーネルトリック） 。 $k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ が有効なカーネル関数であるための必要十分条件は、任意の $\\{\\mathbf{x}_n\\}$ に対して、要素が $k(\\mathbf{x}_n,\\mathbf{x}_m)$ で与えられるグラム行列 $\\mathbf{K}$ が半正定値であること。 新しいカーネル関数を定義してそれが有効な関数かを確認するのは大変なので、次の性質を用いて新たな関数を定義することが多い。 新たなカーネル関数を構築するための方法 有効なカーネルとして $k_1(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ と $k_2(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ が与えられた時、次の関数もやはりカーネル関数として有効である。 $$\\begin{aligned} k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=c k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) & (6.13)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=f(\\mathbf{x}) k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) f\\left(\\mathbf{x}&#94;{\\prime}\\right) & (6.14)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=q\\left(k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.15)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=\\exp \\left(k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.16)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)+k_{2}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)& (6.17)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) k_{2}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) & (6.18)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{3}\\left(\\phi(\\mathbf{x}), \\phi\\left(\\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.19)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=\\mathbf{x}&#94;{\\mathrm{T}} \\mathbf{A} \\mathbf{x}&#94;{\\prime}& (6.20) \\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{a}\\left(\\mathbf{x}_{a}, \\mathbf{x}_{a}&#94;{\\prime}\\right)+k_{b}\\left(\\mathbf{x}_{b}, \\mathbf{x}_{b}&#94;{\\prime}\\right) & (6.21)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{a}\\left(\\mathbf{x}_{a}, \\mathbf{x}_{a}&#94;{\\prime}\\right) k_{b}\\left(\\mathbf{x}_{b}, \\mathbf{x}_{b}&#94;{\\prime}\\right) & (6.22) \\end{aligned}$$ ※ ここで、それぞれの変数は以下の意味を持つ。 変数 説明 $c>0$ 定数 $f(\\cdot)$ 任意の関数 $q(\\cdot)$ 非負の係数を持つ多項式 $\\phi(\\mathbf{x})$ $\\mathbf{x}$ から $\\mathbb{R}&#94;{M}$ への関数 $k_3(\\cdot,\\cdot)$ $\\mathbb{R}&#94;{M}$ で定義された有効なカーネル $\\mathbf{A}$ 対象な半正定値行列 $\\mathbf{x}_a,\\mathbf{x}_b$ $\\mathbf{x}=(\\mathbf{x}_a,\\mathbf{x}_b)$ であるような変数（必ずしも互いに素である必要はない） $k_a,k_b$ それぞれの特徴空間において有効なカーネル関数 カーネル関数の例 $$k(x,x&#94;{\\prime}) = \\boldsymbol{\\phi}(x)&#94;T\\boldsymbol{\\phi}(x&#94;{\\prime}) = \\sum_{i=1}&#94;M\\phi_i(x)\\phi_i(x&#94;{\\prime})\\qquad (6.10)$$ # 多項式 ガウス シグモイド 基底関数 $$\\phi_j(x) = cx&#94;j$$ $$\\phi_j(x) = \\exp\\left\\{-\\frac{(x-\\mu_j)&#94;2}{2s&#94;2}\\right\\}\\qquad(3.4)$$ $$\\begin{aligned}\\phi_j(x) &= \\sigma\\left(\\frac{x-\\mu_j}{s}\\right) & (3.5)\\\\\\sigma(a) &=\\frac{1}{1+\\exp(-a)} & (3.6)\\end{aligned}$$ In [2]: # mapping function def polynomial ( x , d , c = 1 ): return c * x ** d def gaussian ( x , mu , s = 0.1 ): return np . exp ( - (( x - mu ) ** 2 ) / ( 2 * s ** 2 ) ) def logistic ( x , mu , s = 0.1 ): return 1 / ( 1 + np . exp ( - ( x - mu ) / s )) In [3]: # mapping function kernel = lambda phi , x_prime , X , key = None , ** params : np . array ([ sum ([ phi ( x_prime , ** { key : val }) * phi ( x , ** { key : val }) for val in params [ key ]]) for x in X ]) In [4]: params = [ ( polynomial , - 0.5 , \"d\" , np . linspace ( 1 , 11 , 11 )), ( gaussian , 0 , \"mu\" , np . linspace ( - 1 , 1 , 11 )), ( logistic , 0 , \"mu\" , np . linspace ( - 1 , 1 , 11 )), ] In [5]: X = np . linspace ( - 1 , 1 , 1000 ) In [6]: ncol = len ( params ) fig = plt . figure ( figsize = ( 12 , 6 )) for i , param in enumerate ( params ): phi , x_prime , key , vals = param ax_base = plt . subplot2grid (( 5 , ncol ),( 0 , i ), rowspan = 3 ) for val in vals : Y = phi ( X , ** { key : val }) ax_base . plot ( X , Y ) ax_base . set_title ( phi . __name__ ) ax_kernel = plt . subplot2grid (( 5 , ncol ),( 3 , i ), rowspan = 2 ) ax_kernel . plot ( X , kernel ( phi , x_prime , X , key , ** { key : vals })) ax_kernel . scatter ( x_prime , min ( ax_kernel . get_ylim ()), marker = \"x\" , color = \"black\" , label = \"$x&#94;{\\prime}$\" ) ax_kernel . set_xlabel ( \"$x$\" ), ax_kernel . set_title ( \"$k(x,x&#94;{\\prime})$\" ), ax_kernel . legend () plt . tight_layout () plt . show () 様々なカーネル 生物学的配列のカーネル Spectrum kernel (Leslie et al., 2002) Marginalized kernel (Tsuda et al., 2002) Profile kernel (Kuang et al., 2004) Local alignment kernel (Saigo et al., 2004) 木構造に関するカーネル Kernel for phylogenetic profiles (Vert, 2002) Kernel for natural language (Suzuki et al., 2003) Kernel for RNA sequences (Kin et al., 2002) ※ 詳しくは、 Kernel Methods in Computational Biology, MIT Press, 2004 を参照 最適化理論の復習 ラグランジュ未定乗数法 に記載。 サポートベクターマシーン マージン最大化 に基づく線形識別器 カーネル関数と組み合わせることによって非線形な識別も可能 サンプル間の類似度にしか依存しない （→非ベクトルデータの分類にも適用可能） 詳しくは サポートベクターマシン(SVM) に記載。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-1.html"},{"title":"生物統計論 第3回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section3.1 Multiple Test Correction \"The more inferences are made, the more likely erroneous inferences are to occur.\" (ex. Even if the type1 error rate is 1% for each data, 10 out of 1000 sample will be rejected on average.) Terminology FWER(Family-wise error rate) : the probability of making at least one type I error (FP) in the family. FDR(False discovery rate) : the expected type I error (FP) rate in rejected data. FDR(False discovery rate) Null hypotheses: $H_1,\\ldots,H_{g_j}$ Alternative hypotheses: $H_{g_j+1},\\ldots,H_g$ Procedure to reject hypotheses : $d_{\\alpha}: \\left(P_1,P_2,\\ldots,P_g\\right)\\rightarrow\\left\\{H_{i_1},\\ldots,H_{i_K}\\right\\}$ Expected ratio of FP in rejected hypotheses: $\\mathrm{FP}=\\sum_{k=1}&#94;K\\mathbb{I}(1\\leq i_k\\leq g_j),\\quad \\mathrm{TP}=K-\\mathrm{FP}$ $\\mathcal{Q} = \\begin{cases}0 & \\text{if }K=(\\mathrm{FP+TP})=0\\\\\\frac{\\mathrm{FP}}{\\mathrm{FP}+\\mathrm{TP}} & \\text{if }K>0\\end{cases}$ $$\\mathrm{FDR}(d_{\\alpha})=\\mathbb{E}\\left(\\mathcal{Q}|H_1,\\ldots,H_g\\right)$$ Methods to counteract this problem Bonferroni Correction Set $\\alpha\\left(=s_{\\alpha}\\leq S_h|H_0\\right)\\leftarrow 1/g\\cdot\\alpha_{\\mathrm{FWER}}$ ($g$: sample size) Therefore, we have: $$\\mathbb{P}\\left(\\{s_{\\alpha}\\leq S_1\\}\\cup\\cdots\\cup\\{s_{\\alpha}\\leq S_g\\}|H_0\\right)\\leq\\sum_{h=1}&#94;g\\mathbb{P}\\left(s_{\\alpha}\\leq S_h|H_0\\right) = g\\cdot\\left(\\frac{1}{g}\\alpha_{\\mathrm{FWER}}\\right) = \\alpha_{\\mathrm{FWER}}$$ Benjamini-Hochberg Procedure (B-H Procedure) If we assume data are distributed independently, we have: $$\\left(P_1,\\ldots,P_g\\right)\\sim\\mathrm{Unif}\\left(0,1\\right)&#94;{\\times g_j}\\times\\mathbb{P}\\left(P|H_{\\text{alternative}}\\right)&#94;{\\times\\left(g-g_j\\right)}$$ We sort the p-value as $p_1\\leq\\cdots\\leq p_g$ Then, $$ \\begin{aligned} d_{\\alpha_{\\mathrm{FDR}}}&#94;{\\mathrm{B-H}}(p_1,\\cdots,p_g) &:=\\mathrm{Reject}\\left\\{H_i|1\\leq i\\max\\left\\{n|p_n\\leq\\left(\\frac{n}{g}\\alpha_{\\mathrm{FDR}}\\right)\\right\\}\\right\\}\\\\ &\\Rightarrow \\mathrm{FDR}\\left(d_{\\alpha_{\\mathrm{FDR}}&#94;{\\mathrm{B-H}}}\\right)\\leq\\alpha_{\\mathrm{FDR}} \\end{aligned} $$ Example. $H_i$ $G_1$ $G_2$ $G_3$ $G_4$ $G_5$ $G_6$ $G_7$ $G_8$ $G_9$ $G_{10}$ $p_i$ $0.1$ $0.4$ $0.8$ $0.035$ $0.9$ $0.04$ $0.001$ $0.002$ $0.6$ $0.7$ In [2]: alpha_FDR = 0.1 g = 10 In [3]: idx = np . array ([ i + 1 for i in range ( g )]) p_value = data = np . array ([ 0.1 , 0.4 , 0.8 , 0.035 , 0.9 , 0.04 , 0.001 , 0.002 , 0.6 , 0.7 ]) q = np . array ([( i + 1 ) / g * alpha_FDR for i in range ( g )]) In [4]: p_value_rank = np . argsort ( p_value ) In [5]: for i in reversed ( range ( g )): if q [ i ] >= p_value [ p_value_rank [ i ]]: break In [6]: print ( f \"Reject: { [ f 'G { idx } ' for idx in idx [ p_value_rank [: i + 1 ]]] } \" ) Reject: ['G7', 'G8', 'G4', 'G6'] Quantile-Quantile plot In [7]: x = - np . log10 ( np . array ([( i + 1 ) / g for i in range ( g )])) y = - np . log10 ( p_value [ p_value_rank ]) In [8]: plt . plot ( x , y , color = \"red\" , label = \"observed\" ) plt . plot (( 0 , min ( x [ 0 ], y [ 0 ])),( 0 , min ( x [ 0 ], y [ 0 ])), color = \"black\" , label = \"$y=x$\" ) plt . title ( \"Quantile-Quantile plot\" ) plt . xlabel ( \"$-\\log_ {10} $ expected P-value\" ) plt . ylabel ( \"$-\\log_ {10} $ observed P-value\" ) plt . legend () plt . grid () plt . show () Section3.2 Probabilistic Models Hypothesis Testing Probabilistic Modeling Models data generation processes in uninteresting scenarios $H_0$ Models data generation processes under interesting biological scenario $H_1$ (possibly as well as $H_0$) Show inconsistency with $H_0$ Check fit of the model to the data Problems of Hypothesis Testing Approaches Difficult to model satisfactory, uninteresting scenarios Does not model interesting biological scenarios A rejected hypothesis does not necessarily tell anything interesting Still useful for many small parts of a full analysis probabilistic Modeling Strong regularity from the probability condition Can include various biological knowledge Adjustable to the quality, amount, randomness of the data Conditional probability makes it easy to integrate multiple models Once a satisfactory model is obtained, we can extract various information from expectation values Powerful general tools are available Maximal Likelihood EM algorithms Bayesian inference MCMC sampling etc... Section3.3 Likelihood Q. How to adjust parameters?? A. Maximize the Likelihood likelihood observed data: $\\mathbf{D} = \\left\\{x&#94;{(h)}|h=1,\\cdots,n\\right\\}$ parametrized model distribution: $\\mathbb{P}(x|\\theta)$ Likelihood: $L(\\theta|D) = \\mathbb{P}(D|\\theta) = \\prod_{h=1}&#94;n\\mathbb{P}\\left(x&#94;{(h)}|\\theta\\right)$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html"},{"title":"レポート課題2(10/10出題)","text":"8aKnQNvDti0YwdHMX9nP7w==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html"},{"title":"連続最適化(1)制約なし最適化","text":"講師： 佐藤一誠 参考書： 最適化手法 参考書： 機械学習のための連続最適化 In [1]: import numpy as np import matplotlib.pyplot as plt 講義概要 凸最適化問題 最急降下法 ニュートン法 準ニュートン法 凸最適化問題 凸関数 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、以下が成り立つような関数を 凸関数(convex function) と呼ぶ。 $$f\\left(\\left(1-\\theta\\right)x + \\theta x&#94;{\\prime}\\right)\\leq\\left(1-\\theta\\right)f(x) + \\theta f\\left(x&#94;{\\prime}\\right)$$ $f$ が一階微分可能の時、$f$ が凸関数になるための必要十分条件は、感覚的には接戦が常に関数の下に来ることで、 $$\\forall x,x&#94;{\\prime}\\in\\mathcal{X},\\quad f\\left(x&#94;{\\prime}\\right)\\geq f(x) + \\nabla f(x)&#94;T\\left(x&#94;{\\prime}-x\\right)$$ $f$ が二階微分可能の時、$f$ が凸関数になるための必要十分条件は、 ヘッセ行列(Hessian matrix) $\\nabla&#94;2f(x)$ が 半正定値(positive semi-definite) ↔︎$\\nabla&#94;2f(x)$ の 固有値(eigenvalue) が全て非負 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、$(1-\\theta)x+\\theta x&#94;{\\prime}$ も $\\mathcal{X}$ に属するとき、$\\mathcal{X}$ を 凸集合(convex set) と呼ぶ。$x$ と $x&#94;{\\prime}$ を結ぶ線分上の全ての点が $\\mathcal{X}$ に属するということ。 最適化 最適化問題(optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 最適化アルゴリズム(optimization algorithm)： 収束する点列の生成アルゴリズム 最適性条件：最適化問題の最適解であるための必要条件 制約なし最適化問題(unconstrained optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 $f$ を 目的関数(objective function) と呼ぶ。 目的関数は 微分可能(differentiable) と仮定する。 最適性条件：$\\mathbf{x}&#94;{\\star}$ が最適解のとき $$\\nabla f(\\mathbf{x}&#94;{\\star}) = 0$$ 凸最適化問題(convex optimization problem)： 関数 $f$ が凸で集合 $\\mathcal{X}$ も凸 最適解（の集合）が 一意に定まる。 最適解の必要十分条件： 勾配(gradient) がゼロ（凸でない場合は 必要条件 ） 最急降下法 最急降下法(steepest descent method) ※ 勾配法(gradient method)とも。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\quad (\\varepsilon_k>0\\text{ : step size})$$ 凸最適化問題の場合、 大域的最適解(global optimization solution) が求まる 非凸最適化問題の場合、 局所最適解(local optimization solution) しか求められず、様々な初期値から何回か学習して最適解を採用する、ことしかできない。 ステップ幅(step size)の選択 焼きなまし(annealing) ：「最初は大きく、徐々に小さく」。しかし、適切に実装することは容易でない。 正規化(normalization) ：$\\varepsilon_k = \\varepsilon_k&#94;{\\prime}/\\|\\nabla f(\\mathbf{x}_k)\\|$ 勾配が大きいとき安定するが、勾配が小さいときは不安定 厳密直線探索(exact line search) 目的関数の値を最小にするステップ幅を求める。 $$\\underset{\\varepsilon_k>0}{\\min}f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)$$ $f$ が 単峰関数(unimodal function) の場合は、 二分探索法(binary search) や 黄金分割探索(golden section search) などの探索によって最小値を探す。 一般に、一次元の非線形最小化問題を解く必要があるため、最適なステップ幅の探索に時間がかかる。 厳密直線探索を用いた最急降下法は、 一次収束(linear convergence) する。 $$\\text{Q-linear convergence: }\\|\\mathbf{x}_{k+1}-\\mathbf{x}&#94;{\\star}\\| c\\leq \\|\\mathbf{x}_k-\\mathbf{x}&#94;{\\star}\\|&#94;q,\\quad 0 In [2]: ITERATION = 10 N = 100 fsize = 4 In [3]: a = 10 ; b = 1 A = 2 * np . diag ([ a , b ]) func = lambda x , y : a * x ** 2 + b * y ** 2 In [4]: x1min =- 5 ; x1max = 5 ; x2min =- 5 ; x2max = 5 initialX = np . array ([ x1min + 1 , x2max - 2 ]) x1 = np . linspace ( x1min , x1max , N ) x2 = np . linspace ( x2min , x2max , N ) X1 , X2 = np . meshgrid ( x1 , x2 ) Z = func ( X1 , X2 ) In [5]: def find_step_size ( method , f , X , A , ** kwargs ): df = A . dot ( X ) if method == \"fixed\" : epsilon = 1e-1 elif method == \"exact line search\" : epsilon = np . sum ( np . square ( df )) / np . sum ( np . square ( df ) * A . diagonal ()) elif method == \"backtracking line search\" : epsilon = 1 alpha = kwargs [ \"alpha\" ]; beta = kwargs [ \"beta\" ] while True : newX = X - epsilon * df if f ( newX [ 0 ], newX [ 1 ]) - f ( X [ 0 ], X [ 1 ]) <= - alpha * epsilon * np . sum ( np . square ( df )): break epsilon = beta * epsilon return epsilon In [6]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [7]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 例：$f(x) = 1/2\\mathbf{x}&#94;T\\mathbf{Ax}$ $$ \\begin{aligned} \\frac{\\partial f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)}{\\partial\\varepsilon_k} &= \\frac{\\partial}{\\partial\\varepsilon_k}\\frac{1}{2}\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)&#94;T\\mathbf{A}\\left(\\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\\\ &= \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right) - \\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{Ax}_k\\\\ &=0\\\\ \\therefore \\varepsilon_k&#94;{\\star} &= \\frac{\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2}{\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right)}\\qquad (\\nabla f\\left(\\mathbf{x}_k\\right) = \\mathbf{Ax}) \\end{aligned} $$ バックトラック直線探索(backtracking line search) $\\varepsilon_k=1$ に初期化 アルミホ基準(Armijo rule) ： $$f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right) - f\\left(\\mathbf{x}_k\\right)\\right) \\leq\\alpha\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2$$ が成り立つまで $\\varepsilon_k$ を $\\varepsilon_k\\leftarrow\\beta\\varepsilon_k$ と減衰させる。（$0<\\alpha, \\beta<1$） 目的関数の減少量の線形予測値の $\\alpha$ 倍の減少を保証している。 $f$ の真の減少量： $$g\\left(\\varepsilon_k\\right) = f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right) - f\\left(\\mathbf{x}_k\\right)$$ $f$ の減少量の 線形予測値 $$\\begin{aligned}\\varepsilon_kg&#94;{\\prime}(0) &=\\varepsilon_k\\cdot\\left( -\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k-0\\cdot\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\right)\\\\&=-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k\\right)\\\\&=-\\varepsilon_k\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2 \\end{aligned}$$ In [8]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [9]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 微分不可能な場合 目的関数 $f$ が 微分不可能(non-differentiable) の場合は、微分の概念を一般化した 劣微分 を用いる。 凸関数 $f$ の $\\mathbf{x}&#94;{\\prime}$ での 劣勾配(sub-gradient) とは、全ての $\\mathbf{x}\\in\\mathcal{X}$ に対して次式を満たす $\\mathbf{\\xi}$ $$f(\\mathbf{x})\\geq f\\left(\\mathbf{x}&#94;{\\prime}\\right) + \\mathbf{\\xi}&#94;T\\left(\\mathbf{x}-\\mathbf{x}&#94;{\\prime}\\right)$$ $f$ が微分可能な時、$\\mathbf{\\xi} = \\nabla f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ 上式を満たす $\\mathbf{\\xi}$ 全体を $\\partial f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ で表し、 劣微分(sub-differential) と呼ぶ。 微分不可能な点では、劣微分のどれかの値を用いる。 ニュートン法 一般にニュートン法という名称は、方程式の解を求めるアルゴリズムを指すが、以下を表すことが多い。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ 勾配法では一階微分しか用いていないので、二階微分も用いることで反復回数を減らすことが狙い。実際 $k$ が十分大きい時、最適解 $\\mathbf{x}&#94;{\\star}$ の近傍で 二次収束(quadratic convergence) するが、逆行列を求める計算コストが大きい。 二次の テーラー展開(Taylor expansion) を用いて $f$ を現在の解 $\\mathbf{x}_k$ の周りで近似 $\\left(f(\\mathbf{x})\\approx f_k(\\mathbf{x})\\right)$ し、その二次近似を最小にする $\\mathbf{x}_k$ に更新する。 $$f_k(\\mathbf{x}) = f(\\mathbf{x}_k) + \\nabla f(\\mathbf{x}_k)&#94;T\\left(\\mathbf{x}-\\mathbf{x}_k\\right) + \\frac{1}{2}\\left(\\mathbf{x}-\\mathbf{x}_k\\right)&#94;T\\nabla&#94;2f(\\mathbf{x}_k)(\\mathbf{x}-\\mathbf{x}_k)$$ $f_k$ の勾配をゼロと置いた方程式 $$\\nabla f_k(\\mathbf{x}) = \\frac{\\partial f_k(\\mathbf{x})}{\\partial \\mathbf{x}}= \\nabla f(\\mathbf{x}_k) + \\nabla&#94;2f(\\mathbf{x}_k)\\left(\\mathbf{x}-\\mathbf{x}_k\\right) = \\mathbf{0}$$ を解けば、$f_k$ の最小解が以下のように求まる $$\\mathbf{x}&#94;{\\star} = \\mathbf{x}_k - \\left(\\nabla&#94;2 f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ なお、ヘッセ行列が逆行列を持たない時は、 単位行列の定数倍を加えて対処する（正則化, regularization） らしい。 $$\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right) + \\mu\\mathbf{I}\\right)&#94;{-1},\\quad\\mu>0$$ 準ニュートン法 ニュートン法の近似。ニュートン法ではヘッセ行列の逆行列を求めるのに計算コストがかかるので、勾配ベクトル $\\nabla f(\\mathbf{x})$ を用いて近似計算する。 BFGSアルゴリズムを用いたヘッセ行列の更新式が有名 なお、 レポート課題 で詳しく記述しているが、BFGSアルゴリズムのヘッセ行列の更新式は以下で表される。 $$ \\mathbf{H}_{k+1} =\\mathbf{H}_k+\\frac{\\mathbf{t}_k\\mathbf{t}_k&#94;T}{\\mathbf{s}_k&#94;T\\mathbf{t}_k}-\\frac{\\mathbf{H}_k\\mathbf{s}_k\\mathbf{s}_k&#94;T\\mathbf{H}_k}{\\mathbf{s}_k&#94;T\\mathbf{H}_k\\mathbf{s}_k} $$ なお、この時 $$ \\begin{aligned} \\begin{cases} \\mathbf{s}_k &= \\mathbf{x}_{k+1} - \\mathbf{x}_k\\\\ \\mathbf{t}_k &= \\nabla f(\\mathbf{x}_{k+1}) - \\nabla f(\\mathbf{x}_k) \\end{cases} \\end{aligned} $$ まとめ 凸最適化問題 目的関数が凸関数で定義域が凸集合 最適解が一意に定まる 最急降下法 勾配を降下するように値を更新 ステップ幅の選択が重要 目的関数が微分不可能な場合は、劣勾配法や近接勾配法を用いる ニュートン法 二階微分の情報を利用する ヘッセ行列の近似を用いる準ニュートン法が実用的 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html"},{"title":"分子生命科学Ⅲ 第3回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 感覚神経系(1) 感覚系の構成 1 ：外界や内界からの感覚刺激を電気信号に変換する装置 2 ：感覚細胞で生じた電気信号は、一次感覚ニューロンに始まる感覚神経のリレーにより中枢に伝達される。種々の感覚情報は、特定の伝達路を通り、大部分が 3 を経由して特定の 4 に到達する。 5 （ 4 ）：感覚情報は、 4 の 5 （体性 5 、視覚野等…）を興奮させる 体性感覚 体性感覚系(somatosensory system) は、 受容体が体の一部ではなく、全身に分布 しており、皮膚・粘膜・関節・筋・腱など様々な場所から感覚を受け取る。 多様な刺激に対応するため、 単一の感覚というよりも、少なくとも4つの感覚（ 6 ・ 7 ・ 8 ・ 9 ）によって構成されている。 6 ・ 7 の刺激は機械的、もしくは熱・寒冷・化学物質 8 の刺激は機械的刺激 9 は、関節の屈曲度や筋の収縮度に関する感覚情報で、脳はこの感覚により身体各部の位置感覚、運動の状態、体に加わる抵抗感覚、重量感覚等の情報を得る。 という点で他の感覚系と異なっている。 感覚ニューロン 体性感覚系は、皮膚および筋肉全体から構成される最大の感覚器を有している。 体性感覚系の全ての感覚ニューロンの細胞体は、ヒトでは 10 対の 11 ：同じく 10 対の 12 と一対一の関係になっている。ただし、1つの 11 が切断されても、隣接する 11 が重複する領域を神経支配しているため、対応する 13 と同側の感覚が全て失われるわけではない。（3つの隣接する 11 が切断されると1つの 13 の感覚が消失する。） 14 対の 15 ：脳幹に隣接しており、顔の体性感覚を担っている。 |皮膚の分節構造|脊髄の分節構造| |:-:|:-:| | | | ※ 10 対の 12 は、神経の始まる椎骨にちなんで名付けられている。 のいずれかに位置している。 皮膚の機械受容器 体性感覚系の受容器の多くは 16 であり、それぞれの受容器の中心部には無髄の神経突起の枝がある。これらの神経突起の終末は 17 を持っている。これらのイオンチャネルの開閉は、チャネル周囲の細胞膜の伸展や張力の変化に依存する。 皮膚の機械受容器を上図に示した。 |名称|役割|受容野の大きさ|順応| |:-:|:-|:-:|:-:| | 18 |真皮の深くに位置し、最大で2mm、多くは1mm程度であり、裸眼で見ることができるほど大きい|大きい| 19 | | 20 |有毛部および無毛部に見られ、 18 よりわずかに小さい。|大きい| 21 | | 22 | 18 の1/10程度の大きさで、無毛皮膚の隆起部（ex.指紋の隆起部）にある。|小さい| 19 | | 23 |表皮内にあり、神経終末と扁平な非神経性の上皮細胞からなる。|小きい| 21 | なお、刺激の詳細な性質を識別する能力は、体の部分によって大きく異なっており、 2点識別覚 の結果は以下のようになる。指先が最も分解能が高い。これは、 指先の機械受容器の密度が体のどの部分よりも高い。 指先には小さな受容野を持つ受容器が多い。 多くの脳組織が、体の他の部分より指先の感覚の分析に充てられている。 脳には高分解能の識別を担う特別な神経機構がある。 などの理由が挙げられる。 一次求心性軸索 皮膚は豊富な神経支配を受けており、この軸索は 末梢神経系 の膨大なネットワークを形成し、中枢神経系に達している。 体性感覚受容器から脊髄、あるいは脳幹に情報を伝播する軸索は、体性感覚の 24 である。 24 の径は様々であり、その太さは接続している感覚受容器の種類に関係している。 太い有髄神経線維（ \\(A\\alpha,A\\beta\\) 線維）は、伝達速度30-120m/sで速く、 9 と 8 を運ぶ。 細い有髄神経線維（ \\(A\\delta\\) 線維;伝達速度4-30m/s ）、無髄神経線維（ \\(C\\) 線維;伝達速度0.5-2m/s）は 7 ・ 6 と一部の 8 （優しく撫でる等の快楽的な接触等）を運ぶ。 体性感覚野 全ての感覚野と同様に、体性感覚の処理の最も複雑な段階は 大脳皮質 で起こる。なお、体性感覚系に関連する皮質の大部分は、 25 にある。 ブロードマン3b野 は現在、 26 とされており、中心溝のすぐ後ろにある中心後回と呼ばれる皮質に存在する。 S1野の皮質表面の電気刺激により、体の特定の部位の体性感覚を生じさせることができるので、これを用いて 皮質の体性感覚の体表面地図 （ 27 ） を作ることができる。また、皮質の単一ニューロンの活動を記録して、そのニューロンの体性感覚受容野の体表面上の部位を明らかにする方法でも、これを作ることは可能である。 上記の 27 からは、 地図は必ずしも連続しているのではなく、分離されていることもあること。（ex.手の部位再現は顔や頭からは分離している。また、外陰部は足指の下にあり、最も深い隠された位置にある。） 体性感覚地図を立体で表現した 28 を見ると、 28 はヒトの体の相似形ではなく、むしろ戯画のように見えること。体のそれぞれの部位に当てられる皮膚の相対的な大きさは、その部位からの感覚入力の 密度 （≒重要性）に関係を持っている。 がわかる。なお、皮質地図は感覚 経験 の量に応じて動的に変化することが知られている。（刺激を消失させると、その場所に与えられていた皮膚部位は隣接部位に当てられる/刺激が増加された場合、刺激された部位が拡大。） シナプス伝達 シナプスには2つの面、 29 と 30 がある。シナプス前側は一般に軸索終末で、直径約50nmのシナプス小胞が多数含まれている。シナプス小胞は 31 を含み、これを用いて 他のニューロンの樹状突起や細胞体 からなるシナプス後側と情報伝達を行なっている。シナプス前膜とシナプス後膜の間は、20-50nmの 32 がある。 31 のシナプス前からの放出によって引き起こされる 短時間の シナプス後膜の 33 は、 34 と呼ばれている。これは、アセチルコリンおよびグルタミン酸動性イオンチャネルで、リガンドが結合すると、非選択的陽イオンチャネルが開口し、 \\(\\mathrm{Na}&#94;{+}\\) や \\(\\mathrm{K}&#94;{+}\\) の陽イオンを通過させる。 35 は、 36 と呼ばれている。 GABA 、グリシン作動性チャネルはリガンドの結合により、陰イオン、主に \\(\\mathrm{Cl}&#94;{-}\\) を選択的に通過させる。 神経伝達物質 37 多くのニューロンはただ1つの神経伝達物質（アミノ酸、アセチルコリン、モノアミン）を持つ。一方、神経ペプチドを含む多くのニューロンは、アミノ酸、アセチルコリンあるいはモノアミンと神経ペプチドを放出する。 主要な神経伝達物質としては以下が挙げられる。 |種類|神経伝達物質|説明| |:-:|:-|:-| |アミノ酸|グルタミン酸(Glu)|中枢神経系の 38 ニューロンのほとんど、感覚ニューロンのほとんど| |アミノ酸|GABA(γ-アミノ酸)|中枢神経系の 39 ニューロンのほとんど| |アミノ酸|グリシン(Gly)|中枢神経系の 39 ニューロンの一部（脳幹や脊髄に存在）| ||アセチルコリン(Ach)|筋肉を興奮させる運動ニューロン、自律神経系のニューロン（交感神経の節後以外全て）、中枢神経系の興奮性および調節性ニューロン| |モノアミン(monoamine)|セロトニン(5-HT)|中枢神経系の 40 ニューロン| |モノアミン(monoamine)|ドーパミン(DA)|中枢神経系の 40 ニューロン| |モノアミン(monoamine)|ノルアドレナリン(NA)|中枢神経系の 40 ニューロン、自律神経系のニューロン（交感神経の節後ニューロン）| |モノアミン(monoamine)|ヒスタミン|中枢神経系の 40 ニューロン| ||神経ペプチド| 38 、 39 、 40 のニューロンから共放出、神経内分泌細胞| if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-3.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-3.html"},{"title":"Zuker Algorithm","text":"Free energy minimization of RNA seconary structure. In cells, RNAs are likely to form energetically stable secondary structure. The correctness of secondary structure should be evaluated based on the free energy, rather than the number of base-pairs ( Nussinov Algorithm ) We first describe a way to calculate the free energy of a particular RNA secondary structure. We describe the Zuker algorithm which calculates the RNA secondary structure with the minimum free energy (MFE). Free energy of RNA secondary structure The free energy of a secondary structure is approximated as the sum of the free energy of \"loops\". $$E = \\sum_iE_i$$ The free energy of individual loop is given by experimental data. (ex. $\\mathrm{C-G: }-3.4\\mathrm{kcal/mol}$, $\\mathrm{U-A: }-0.9\\mathrm{kcal/mol}$) Five types of \"loops\" hairpin loop stacking bulge loop internal loop multi-loop F1(i,j) F2(i,j,h,l) Fm=a+bk+cu a,b,c: constant k: the number of base-pairs in a multi-loop u: the number of single stranded nucleotides in a multi-loop Algorithm variable meaning $W(i,j)$ the minimum free energy of subsequence from $i$ to $j$. $V(i,j)$ the minimum free energy of subsequence from $i$ to $j$ when $i$ to $j$ forms a base-pair. $M(i,j)$ the minimum free energy of subsequence closed by two or more base pairs. $M1(i,j)$ the minimum free energy of subsequence closed by one or more base pairs. Recursion $$ \\begin{aligned} W(i,j) &= \\min \\begin{cases} W(i+1,j)\\\\W(i,j-1)\\\\V(i,j)\\\\\\min_{i\\leq k Initialization In [1]: from kerasy.Bio.structure import Zuker from kerasy.utils.bio import readMonoSeq In [2]: model = Zuker () In [3]: # 以下の形のパラメタファイルを受け取ります。 ! cat params.json { \"inf\": 1e3, \"type\": \"RNA\", \"Watson_Crick\": true, \"Wobble\": true, \"hairpin\": [Infinity, Infinity, 4.4, 4.6, 4.7, 4.4, 5.0, 4.5, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 5.9, 6.0, 6.1, 6.1, 6.2, 6.2, 6.3, 6.3, 6.4, 6.4, 6.5, 6.5, 6.5, 6.6, 6.6, 6.7, Infinity], \"internal\": [Infinity, 1.0, 1.0, 1.1, 2.0, 2.0, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9, 3.0, 3.1, 3.1, 3.2, 3.3, 3.3, 3.4, 3.4, 3.5, 3.5, 3.5, 3.6, 3.6, 3.7, 3.7, Infinity], \"buldge\": [1.0, 1.0, 1.0, 1.1, 2.0, 2.0, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9, 3.0, 3.1, 3.1, 3.2, 3.3, 3.3, 3.4, 3.4, 3.5, 3.5, 3.5, 3.6, 3.6, 3.7, 3.7, Infinity], \"a\": 6.0, \"b\": -1.0, \"c\": 0.1, \"stacking_cols\": [\"CG\", \"AU\", \"GU\"], \"stacking_score\": [[-3.0, -2.0, -2.0], [-2.0, -0.5, -0.5], [-2.0, -0.5, -0.5]] } In [4]: model . load_params ( \"params.json\" ) In [5]: model . params () | parameter |value | --------------------- |a | 6.0| |b | -1.0| |c | 0.1| |inf |1000.0| |type | RNA| |Watson_Crick| 1| |Wobble | 1| In [6]: model . stacking_cols Out[6]: array(['CG', 'AU', 'GU'], dtype=' In [7]: model . stacking_score Out[7]: array([[-3.e+00, -2.e+00, -2.e+00, 1.e+03], [-2.e+00, -5.e-01, -5.e-01, 1.e+03], [-2.e+00, -5.e-01, -5.e-01, 1.e+03], [ 1.e+03, 1.e+03, 1.e+03, 1.e+03]]) In [8]: # サンプル配列 sequence = readMonoSeq ( path = \"sample_seq4.fasta\" ) In [9]: print ( sequence ) ['CCACCUCGCCGCGAAGAUUGGAUGUAAUGUUCACUUAAGCCUAGGCGUUCGCAAAGAAAUACCUAUGGUAAUUUGACUAGCGGUAACAAUGAAAGAAAAGGUGUAGGCGAGGUGGG'] In [10]: # 最大ペアの配列 model . predict ( sequence [ 0 ]) Zuker Algorithm Score: -37.5 ================================================================= seq: CCACCUCGCCGCGAAGAUUGGAUGUAAUGUUCACUUAAGCCUAGGCGUUCGCAAAGAAAU : ((((((((((((((((..((((((...)))))))))..((((....((((((..(((((( seq: ACCUAUGGUAAUUUGACUAGCGGUAACAAUGAAAGAAAAGGUGUAGGCGAGGUGGG : (((...))))))))..)).))))..))...........)))))).)))))))))). ================================================================= In [11]: model . W Out[11]: array([[ 0. , 0. , 0. , ..., -34.5, -37.5, -37.5], [ 0. , 0. , 0. , ..., -34.5, -34.5, -34.5], [ 0. , 0. , 0. , ..., -32.5, -32.5, -32.5], ..., [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ]]) In [12]: model . M Out[12]: array([[1000. , 999. , 999. , ..., -35.4, -38.5, -38.4], [1000. , 1000. , 999. , ..., -35.5, -35.4, -35.3], [1000. , 1000. , 1000. , ..., -33.4, -33.3, -33.2], ..., [1000. , 1000. , 1000. , ..., 1000. , 999. , 999. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 999. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ]]) In [13]: model . V Out[13]: array([[1000. , 1000. , 1000. , ..., -31.5, -37.5, -34.5], [1000. , 1000. , 1000. , ..., -34.5, -31.5, -31.5], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], ..., [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ]]) if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-9.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-9.html"},{"title":"生物物理学 第3回","text":"講師： 樋口秀男 タンパク質の構造と安定性 タンパク質の定義 特定のアミノ酸（20種類）が重合した重合体である。 特定の立体構造をとる。 （これがないと ポリペプチド ） |機能|説明| |:-:|:-| | 分子認識 |ミオグロビンは酸素を結合。抗体は抗原と結合。| | 触媒（酵素） |化学反応の反応速度は \\(10&#94;8\\) ~ \\(10&#94;{17}\\) 倍にも加速される。| | 制御 |基質の結合や環境の変化に伴い構造を変化し、タンパク質の反応を制御する。| | エネルギー変換 |光を電位に換え、ATP分解を力に換える。| | 構造形成・維持 |タンパク質重合体は細胞や細胞内器官の構造を支える。| タンパク質を構成するアミノ酸 d-グリセルアルデヒドの立体配置を基準として、この立体配置を崩さずにできる化合物をD-体、その鏡像異性体がL-体。 ※ タンパク質はL体 |構造|名前|略（三文字）|略（一文字）| |:-:|:-:|:-:|:-:| | | アラニン | Ala | A | | | アルギニン | Arg | R | | | アスパラギン | Asn | N | | | アスパラギン酸 | Asp | D | | | システイン | Cys | C | | | グルタミン酸 | Glu | E | | | グルタミン | Gln | Q | | | グリシン | Gly | G | | | ヒスチジン | His | H | | | イソロイシン | Ile | I | | | ロイシン | Leu | L | | | リシン | Lys | K | | | メチオニン | Met | M | | | フェニルアラニン | Phe | F | | | プロリン | Pro | P | | | セリン | Ser | S | | | トレオニン | Thr | T | | | トリプトファン | Trp | W | | | チロシン | Tyr | Y | | | バリン | Val | V | ```python 上記の表は以下のコードを応用して作成した。 url = \"https://ja.wikipedia.org/wiki/タンパク質を構成するアミノ酸\" soup = BeautifulSoup(requests.get(url).content, 'lxml') for li in soup.findAll(\"li\", {\"class\": \"gallerybox\"}): text = str(li).replace('\\n', '') src = re.findall(r' ', text)[0] name, l3, l1 = re.findall(r' . title=\"(.+?)\". ((.+?)\\xa0\\/\\xa0(.+?)) ', text)[0] ``` 理論的構造決定法 アミノ酸配列→量子力学→タンパク質の構造とエネルギー状態を決定 シュレディンガー方程式は水素原子のみ解析的に解くことができ、それ以外は近似を行う必要がある。 現在、高精度に計算（第一原理分子動力学法）できるのは1つの構造に対して100原子程度である。 水分子を考慮しなければ、タンパク質の構造や電子軌道を精度よく求めることはできない。 アミノ酸がポリペプチド結合した重合体から機能を持つ立体構造を創り構造を維持するためには、 立体構造が熱力学的に安定でなければならない。 → Gibbs自由エネルギー \\(G\\) を見る。 準安定なのは、 \\(G\\) が極小の時。 最も安定なのは、 \\(G\\) が最小の時。 まとめ 生体の機能を主に担っているのは、タンパク質である。（RNAも機能に重要である。） タンパク質は分子認識・触媒・制御・エネルギー変換・構造形成維持などの機能を有している。 アミノ酸配列から計算によってタンパク質構造を決定することに成功していない。（部分構造はできている。） 酵素機能を行うとき、酵素の多くの場所が構造変化を行う。 第7回目の講義(11/6)の小テスト 指定課題： 第1,2,3回の講義の中で、最も興味のある事柄について300~500字でまとめる。 この事柄と関連する内容を調べるなどして、自分の意見を300~500字で述べる。 図や式を使いわかりやすく説明すること。図や式は文字数に含めない。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html"},{"title":"領域分割","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt import matplotlib.patches as patches # 円を描画 領域分割 色によるクラス分け（画像のみ） k-means法 mean-shift法 色によるクラス分け（画像のみ） 例えば、画素(RGB)や位置(x,y)の似たものをグループ分けする。 二値分類(FG/BG分類)で有名なのが クロマキー （ 青色・緑色 背景） k-means法 予めクラス数 $k$ を指定してクラスタリング。 $k$ 個の代表点をランダムにサンプリング（$k$ 個をデータの中からとってきても良いし、完全にランダムでばらまいても良い。） 全てのデータ点から一番近い代表点を $1$ つ探す。 $k$ 個のグループの重心を計算し、それを新たな代表点とする。 2,3を繰り返す。 In [2]: from kerasy.ML.KMeans import KMeans In [3]: def decomposeImg ( path , K ): imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== KMeans === x = rgb_img . reshape ( - 1 , 3 ) model = KMeans ( K = K , random_state = 0 ) model . fit ( x ) cls , mu = model . predict ( x ) mu = mu . astype ( int ) for k in range ( K ): x [ cls == k ] = mu [ k ] # KMeansed Image. ax_K = fig . add_subplot ( 1 , 2 , 2 ) ax_K . imshow ( x . reshape ( img_shape )) ax_K . set_title ( f \"K= { K } \" ), ax_K . set_xticks ([]), ax_K . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No. { i + 1 : <0 { len ( str ( K )) }} , rgb=( { ',' . join ( mu [ k ] . astype ( int ) . astype ( str )) } )\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () In [4]: decomposeImg ( path = \"lenna.png\" , K = 8 ) mean-shift法 画像領域の分割や対象画像の追跡に用いられる手法。 $d$ 次元の特徴量（ex. $\\mathrm{R,G,B},x,y$）を持った $N$ 個のデータ点 $\\mathbf{x}_i$ が分布しているときに、この点群 $\\mathbf{x}_i$ を標本点として得られるような確率密度関数 $f(\\mathbf{x})$ を考え、その標本点から確率密度関数 $f(\\mathbf{x})$ の極大点を探索する手法。 点群が集中している場所は確率密度関数 $f(\\mathbf{x})$ の値が高く、まばらな場所は低くなる。 ある任意の観測点 $\\mathbf{y}_j$ から半径 $h$ の超球を考え、その範囲にある点群 $\\mathbf{x}_i$ の平均 $\\mathbf{x}_c$ を計算し、その位置に観測点 $\\mathbf{y}_{j+1}$ を移動する。 この操作を繰り返すと観測点は最大勾配の方向に移動し、やがて極大点に収束する。 このように、 「近傍の点群の平均(mean)位置に移動(shift)を繰り返し、極大点を求める方法」 から ミーンシフト法(mean-shift) と呼ばれる。 In [5]: fig , ax = plt . subplots ( figsize = ( 6 , 6 )) # Circle r = 0.7 c = patches . Circle ( xy = ( 0 , 0 ), radius = r , ec = 'black' , fill = False ) ax . add_patch ( c ) # Sample Data X , Y = np . random . RandomState ( 123 ) . uniform ( low =- 0.3 , high = 1 , size = ( 2 , 50 )) cls = np . sqrt ( X ** 2 + Y ** 2 ) < r ax . scatter ( X , Y , c = cls , cmap = \"Set1_r\" , alpha = 0.7 ) # Center ax . scatter ( 0 , 0 , color = \"black\" , s = 100 ) ax . text ( 0.05 , - 0.05 , \"$\\mathbf {y} _ {j} $\" , fontsize = 12 ) # Mean mux , muy = np . mean ( X [ cls ]), np . mean ( Y [ cls ]) ax . scatter ( mux , muy , color = \"black\" , marker = '*' , s = 100 ) ax . text ( mux + 0.05 , muy , \"$\\mathbf {x} _c(=\\mathbf {y} _{j+1})$\" , fontsize = 12 ) # Arrow ax . annotate ( '' , xy = ( mux , muy ), xytext = ( 0 , 0 ), arrowprops = dict ( width = 2 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'blue' , edgecolor = 'blue' ) ) # Radius ax . plot (( 0 , 0 ),( 0 , - r ), color = \"black\" ) ax . text ( 0.05 , - r / 2 , \"r\" , fontsize = 12 ) ax . set_xlim ( - 1 , 1 ) ax . set_ylim ( - 1 , 1 ) plt . show () カーネル密度関数を用いた確率密度関数の推定 $d$ 次元空間内の $N$ 個の点群 $\\mathbf{x}_i$ を考える。この点群をある確率分布に従う標本と考えたとき、$d$ 次元空間内の任意の点 $\\mathbf{x}$ における確率密度関数 $f(\\mathbf{x})$ は、以下の方法で推定される。 $$f(\\mathbf{x}) = \\frac{c_{kd}}{Nh&#94;{d}}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)$$ $c_{hd}$ は、確率密度関数 $f(\\mathbf{x})$ 全体の積分を $1$ にするための正規化係数。 $k(t)$ は、カーネル関数 $K(t)$ の プロファイル で、$K(t)=k(|t|&#94;2)$ 以下の２つのカーネルが代表的である。 ガウシアンカーネル(Gaussian) エパネックニコフカーネル(Epanechnikov) $$K(t) = \\exp\\left(-\\frac{\\mid t\\mid&#94;2}{2}\\right)$$ $$K(t) = \\begin{cases}1- \\mid t\\mid&#94;2 & (\\mid t\\mid\\leq1)\\\\0 & (\\text{otherwise})\\end{cases}$$ 確率密度関数の勾配 勾配法(gradient method) を用いて極大点を逐次的に求めるために、確率密度関数の勾配 $\\nabla f(\\mathbf{x})$ を求める。 $$ \\begin{aligned} \\nabla f(\\mathbf{x}) &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;Nk'\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)\\left(\\mathbf{x}-\\mathbf{x}_i\\right)\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;N\\left(g_i\\mathbf{x}_i-g_i\\mathbf{x}\\right), \\quad g(t) = -k'(t),g'(t)=g\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|\\right)&#94;2\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\} \\end{aligned} $$ 項 説明 $$\\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}$$ ガウシアンカーネルやエパネックニコフカーネルを用いた場合、正になる。 $$\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\}$$ ミーンシフト と呼ばれる項で、観測点 $\\mathbf{x}$ の近傍のデータ点群 $\\mathbf{x}_i$ の加重平均位置と $\\mathbf{x}$ 自身の差分ベクトルを示す。 勾配法を用いた極大点探索（ミーンシフト法） 初期化：$\\mathbf{y}_0\\leftarrow\\mathbf{x}$ 更新（ミーンシフト） $$\\mathbf{y}_{j+1}\\leftarrow \\mathbf{y}_j + \\left(\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{y}_j\\right) = \\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}$$ $|\\mathbf{y}_{j+1}-\\mathbf{y}_j|<\\text{threshold}$ となるまで2を繰り返す。 収束した $\\mathbf{y}_{j+1}$ を極大点として出力する。 ※ 一般的な勾配法では、更新式 $\\mathbf{y}_{j+1}\\rightarrow\\mathbf{y}_i + \\alpha\\nabla f$ のステップ数 $\\alpha$ を与える必要があるが、ミーンシフト法では ベクトルの大きさは自動的に計算される ので、$\\alpha$ を与える必要がない（らしい…）。 ミーンシフト法を用いたクラスタリングへの応用 $d$ 次元空間中の $N$ 個の点群 $\\mathbf{x}_i$ が与えられた時に、密に分布する点群をクラスタとして分割する。 各点にミーンシフト法を適用し、収束位置 $\\mathbf{x}_i&#94;c$ を計算する。 任意の2個の点 $\\mathbf{x}_i,\\mathbf{x}_j$ について、その収束位置が閾値以下なら（$|\\mathbf{x}_i-\\mathbf{x}_j|<\\text{threshold}$）、この2点を同じ極大点として同じクラスタに入れる。 1,2より、全ての点群 $\\mathbf{x}_i$ を 同じ収束位置（極大点）に属するものごとにクラスタに識別する。 全ての点 $\\mathbf{x}_i$ でこの処理を行わなければならないが、並行化できる。 k-means手法とは異なり、クラスタの数を予め指定する必要がない。 ミーンシフト法を用いたカラー画像の領域分割 カラー画像の $N$ 個の各画素の位置 $\\mathbf{x}_i$ とその画素値 $\\mathbf{v}_i=\\left(R_i,G_i,B_i\\right)$ とし、画素位置-画素値を結合した5次元空間内の点 $\\mathbf{z}_i=(\\mathbf{x}_i,\\mathbf{v}_i)$ を考える。 「距離および色が近い画素が5次元空間内でクラスタを形成している」 とみて、ミーンシフト法で各画素をクラスタリングする。 画素位置に関するバンド幅 $h_s$、画素値に関するバンド幅 $h_r$ を与え、全ての $z_i$ にミーンシフトを行い、収束位置 $\\mathbf{z}&#94;c=(\\mathbf{x}&#94;c,\\mathbf{v}&#94;c)$ を計算する。 $\\mathbf{x}_i$ の画素値を、収束位置の画素の値 $(R&#94;c,G&#94;c,B&#94;c)$ に置き換えることによって、画像の平滑化ができる。 ミーンシフトは、以下の通り計算する。 $$f(\\mathbf{x}) = \\frac{c}{Nh_s&#94;2h_r&#94;3}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}&#94;s-\\mathbf{x}&#94;s_i}{h_s}\\right|&#94;2\\right)k\\left(\\left|\\frac{\\mathbf{x}&#94;r-\\mathbf{x}&#94;r_i}{h_r}\\right|&#94;2\\right)$$ したがって、以下のとおりに位置を更新する。 $$\\mathbf{y}&#94;{s}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;s\\mathbf{x}_i&#94;s}{\\sum_{i=1}&#94;Ng_i&#94;s},\\quad\\mathbf{y}&#94;{r}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;r\\mathbf{x}_i&#94;r}{\\sum_{i=1}&#94;Ng_i&#94;r}$$ $(h_s,h_r)$ のパラメータを大きくすると、より大きな領域に同色が統合され、大まかに分割される。 In [6]: from sklearn.cluster import MeanShift In [7]: import time s = time . time () imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) path = \"lenna.png\" bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== MeanShift === x = rgb_img . reshape ( - 1 , 3 ) model = MeanShift () model . fit ( x ) cls = model . predict ( x ) mu = model . cluster_centers_ . astype ( int ) K = max ( cls ) + 1 for k in range ( K ): x [ cls == k ] = mu [ k ] # MeanShifted Image. ax_Mean = fig . add_subplot ( 1 , 2 , 2 ) ax_Mean . imshow ( x . reshape ( img_shape )) ax_Mean . set_title ( f \"n_cluster= { K } \" ), ax_Mean . set_xticks ([]), ax_Mean . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No. { i + 1 : <0 { len ( str ( K )) }} , rgb=( { ',' . join ( mu [ k ] . astype ( int ) . astype ( str )) } )\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () e = time . time () print ( f \"Processing time: { int (( e - s ) // 60 ) : >02 } m { ( e - s ) % 60 : .3f } s\" ) plt . show () Processing time: 31m 13.287s In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html"},{"title":"領域処理のための特徴量","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 領域の特徴量 フーリエ変換 ガボールフィルタ(Gabor Filter) 同時生起確率 In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt （２次元）フーリエ変換 画像は、フーリエ変換によって周波数領域における別の形で表現される。 フーリエ変換の結果は、画像に含まれるそれぞれの周波数成分を表している。 フーリエ変換後の各周波数成分の大きさを成分ごとに変えることにより、元の画像の性質を変えることができる。 （周波数フィルタリング(frequency filtering)） ローパスフィルタ(lowpass fileter) ：画像に含まれる空間周波数成分のうち、低周波数成分は残し、高周波数成分は除去するようなフィルタ。 ハイパスフィルタ(highpass filter) ：上の逆。高周波数成分は残し、低周波数成分を除去するようなフィルタ。 バンドパスフィルタ(bandpass filter) ：ある中間的な周波数の範囲を残すようなフィルタ。 高域強調フィルタ(high-emphasis filter) ：画像の低周波数成分はそのまま保ちつつ、高周波数成分を強調するフィルタ。 $1$ 次元フーリエ変換 簡単のため、まずは一次元フーリエ変換をみる。 名前 数式 説明 フーリエ変換 $$F(\\omega) = \\int_{-\\infty}&#94;{\\infty}f(t)e&#94;{-i\\omega t}dt$$ 数直線上の表現 （空間領域） から周波数による表現 （周波数領域） への変換 逆フーリエ変換 $$f(x) = \\int_{-\\infty}&#94;{\\infty}F(\\omega)e&#94;{i\\omega x}d\\omega$$ 周波数領域にある関数を元の空間領域に戻す変換 実装 二つの正弦波を重ねた波から、それぞれの成分を取り出すことができるか確かめる。なお、ここでは numpy.fft.fft を利用しています。 これは、 高速フーリエ変換(Fast Fourier Transform) と呼ばれる、 高速に「離散フーリエ変換」を行うアルゴリズム を実装したものです。 In [2]: N = 10000 dt = 0.01 time = np . arange ( 0 , N * dt , dt ) freq = np . linspace ( 0 , 1.0 / dt , N ) In [3]: def sin ( A , f , p ): \"\"\" @param A: Amplitude @param f: Frequency[Hz] @param p: phase \"\"\" func = lambda t : A * np . sin ( 2 * np . pi * f * t + p1 ) return func In [4]: # parameters f1 , f2 = 5 , 8 # frequency[Hz] A1 , A2 = 5 , 3 # Amplitude p1 , p2 = 0 , 1 / 2 * np . pi # phase In [5]: y1 = sin ( A1 , f1 , p1 )( time ) y2 = sin ( A2 , f2 , p2 )( time ) y = y1 + y2 # superposition In [6]: # Computes the discrete Fourier transform (DFT) of a sequence yf = np . fft . fft ( y ) / ( N / 2 ) # Fast Fourier transform. In [7]: fig = plt . figure ( figsize = ( 8 , 4 )) ax1 = fig . add_subplot ( 2 , 1 , 1 ) ax1 . set_ylabel ( \"amplitude\" ) ax1 . set_xlabel ( \"time\" ) ax1 . set_xlim ( 0 , 1 ) ax1 . plot ( time , y , label = \"y(y1+y2)\" , color = \"blue\" ) ax1 . plot ( time , y1 , label = f \"y1(A= { A1 } ,f= { f1 } )\" , alpha = 0.3 , color = \"green\" ) ax1 . plot ( time , y2 , label = f \"y2(A= { A2 } ,f= { f2 } )\" , alpha = 0.3 , color = \"red\" ) ax1 . axhline ( 0 , alpha = 0.3 , color = \"black\" ) ax1 . legend () ax2 = fig . add_subplot ( 2 , 1 , 2 ) ax2 . set_ylabel ( \"amplitude\" ) ax2 . set_xlabel ( \"frequency\" ) ax2 . set_xlim ( 0 , 10 ) ax2 . plot ( freq , abs ( yf ), color = \"blue\" ) plt . tight_layout () plt . show () 見事に、二つの周波数成分を取り出すことができました。 $2$ 次元フーリエ変換 ※ 一般に画像は2次元空間で定義されたある関数 $f(x,y)$ として表現することができる！ 名前 数式 フーリエ変換 $$F(u,v) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x,y)\\exp\\left\\{-j2\\pi\\left(ux+vy\\right)\\right\\}dxdy$$ 逆フーリエ変換 $$f(x,y) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}F(u,v)\\exp\\left\\{j2\\pi\\left(ux+vy\\right)\\right\\}dudv$$ ここで、以下の値に注目することがよくある。 名前 数式 説明 振幅スペクトル(amplitude spectrum) $$\\mid F(u,v)\\mid = \\sqrt{\\mathrm{Re}\\left\\{F(u,v)\\right\\}&#94;2 + \\mathrm{Im}\\left\\{F(u,v)\\right\\}&#94;2}$$ 絶対値 位相スペクトル(phase spectrum) $$\\arg\\left\\{F(u,v)\\right\\} = \\tan&#94;{-1}\\frac{\\mathrm{Im}\\left\\{F(u,v)\\right\\}}{\\mathrm{Re}\\left\\{F(u,v)\\right\\}}$$ 偏角 パワースペクトル(power spectrum) $$\\mid F(u,v)\\mid&#94;2$$ In [8]: img = cv2 . imread ( 'lenna.png' , 0 ) f = np . fft . fft2 ( img ) fshift = np . fft . fftshift ( f ) magnitude_spectrum = 20 * np . log ( np . abs ( fshift )) plt . subplot ( 121 ), plt . imshow ( img , cmap = 'gray' ) plt . title ( 'Input Image' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'x' ), plt . ylabel ( 'y' ) plt . subplot ( 122 ), plt . imshow ( magnitude_spectrum , cmap = 'gray' ) plt . title ( 'Magnitude Spectrum' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'u' ), plt . ylabel ( 'v' ) plt . show () ガボールフィルタ(Gabor Filter) 正弦波とガウス関数の積で表される。（例：2次元ガボールフィルタ） $$g(x,y,\\lambda,\\phi) = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\exp\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 実数部： $$\\mathrm{Re}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\cos\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 虚数部： $$\\mathrm{Im}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\sin\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ フーリエ変換では、所望の周波数成分が領域のどこにあるのかわからないのに対し、ガボールフィルタは、 「領域のどの位置にどの方向の周波数が、どの強度であるか」 を知ることができる。 パラメータを操作して様々な方向と強度を持つフィルタ （フィルタバンク(filter bank)） を多数準備 し、特徴抽出を行う。また、ここで抽出された特徴量群は texton と呼ばれる。 入力された画像に対してガボールフィルタを畳み込んで（たたみ込み＝二次元の内積＝類似度を反映）、特徴量 $G(x,y,\\lambda,\\phi)$ を求める式は以下となる。 $$G(x,y,\\lambda,\\phi) = \\sum_u\\sum_vI(x,y)\\ast g(x-u, y-v, \\lambda, \\phi)$$ OpenCVの cv2.getGaborKerne を用いることで簡単にガボールフィルタを生成することができる、 引数 説明 ksize Size of the filter returned. sigma Standard deviation of the gaussian envelope. theta Orientation of the normal to the parallel stripes of a Gabor function. lambd Wavelength of the sinusoidal factor. gamma Spatial aspect ratio. psi Phase offset. In [9]: default_gabor = { \"ksize\" : ( 50 , 50 ), \"sigma\" : 4 , \"theta\" : 0 , \"lambd\" : 10 , \"gamma\" : 0.5 , \"psi\" : 0 , } In [10]: gabor = cv2 . getGaborKernel ( ** default_gabor ) plt . imshow ( gabor , cmap = \"gray\" ) plt . title ( \"default\" ) plt . show () In [11]: def argsGaborRelation ( key , vals ): global default_gabor defaul_val = default_gabor [ key ] N = len ( vals ) n_col = 4 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i , val in enumerate ( vals ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) ax . imshow ( gabor , cmap = \"gray\" ) ax . set_title ( f \" { key } = { val } \" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [12]: argsGaborRelation ( key = \"ksize\" , vals = [( 30 , 30 ),( 20 , 40 ),( 40 , 20 ),( 50 , 50 )]) In [13]: argsGaborRelation ( key = \"sigma\" , vals = [ x for x in range ( 8 )]) In [14]: argsGaborRelation ( key = \"theta\" , vals = [ np . radians ( x ) for x in range ( 0 , 180 , 45 )]) In [15]: argsGaborRelation ( key = \"gamma\" , vals = [ x for x in range ( 4 )]) In [16]: argsGaborRelation ( key = \"psi\" , vals = [ np . radians ( x ) for x in range ( 0 , 360 , 45 )]) In [17]: img = cv2 . imread ( 'lenna.png' , 0 ) color_img = cv2 . imread ( 'lenna.png' ) In [18]: def argsGaborSuperposition ( key , vals ): global default_gabor , img defaul_val = default_gabor [ key ] N = len ( vals ) * 2 n_col = 8 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) dests = 0 for i , val in enumerate ( vals ): default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) dest = cv2 . filter2D ( img , cv2 . CV_32F , gabor ) dests += dest ax_dst = fig . add_subplot ( n_row , n_col , 2 * i + 1 ) ax_dst . imshow ( np . power ( dest , 2 ), cmap = \"gray\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) ax_gab = fig . add_subplot ( n_row , n_col , 2 * i + 2 ) ax_gab . imshow ( gabor , cmap = \"gray\" ), ax_gab . set_xticks ([]), ax_gab . set_yticks ([]) # Superposition fig = plt . figure ( figsize = ( 8 , 16 )) ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( cv2 . cvtColor ( color_img , cv2 . COLOR_BGR2RGB )) ax_org . set_title ( \"original image\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) ax_dst = fig . add_subplot ( 1 , 2 , 2 ) ax_dst . imshow ( dests , cmap = \"gray\" ) ax_dst . set_title ( f \"Superposition of dst (key= { key } )\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [19]: argsGaborSuperposition ( key = \"theta\" , vals = [ np . radians ( x ) for x in np . linspace ( 0 , 180 , 8 )]) ※ 入力画像の８分割した全ての方向のエッジを重ね合わせると、元の画像をかなり高い精度で復元していることがわかる。 同時生起確率 テクスチャの統計的特徴量を求める。 離れた２つの場所にある画素対の値から、画素値の 一様性 ・ 方向性 ・ コントラスト などの性質を表す特徴量を求める。 ある画素 $i$ と、$i$ から離れた位置にある画素 $j$ の画素対を考え、画素 $i$ と画素 $j$ の相対的な位置を $\\delta=\\langle d,\\theta\\rangle$ とする。 それぞれの画素値を $L_i,L_j$ とし、画素値の対 $(L_i,L_j)$ が生じる出現頻度で、ある同時生起行列 $\\mathbf{H}_{\\delta}(L_i,L_j)$ を考える。ここで、出現頻度の総数で $\\mathbf{H}_{\\delta}(L_1,L_2)$ を正規化し、確率に変換した同時生起行列を $\\mathbf{P}_{\\delta}(L_i,L_j)$ とする。 確率に変換した同時生起行列を用いて計算する主な特徴量には次の $7$ 種類がある。（ここで、画素値のレベル数は $L$ である。）他にも様々な統計量を計算できるが、テクスチャの物理的な意味と直接には結びつかない数値もある。 $$ \\begin{aligned} \\mathrm{ENR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left\\{P_{\\delta}(L_i,L_j)\\right\\}&#94;2 & (\\text{energy})\\\\ \\mathrm{CNT} &= \\sum_{k=0}&#94;{L-1}k&#94;2P_{x-y}(k) & (\\text{contrast})\\\\ \\mathrm{CRR} &= \\frac{\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}L_iL_jP_{\\delta}(L_i,L_j) - \\mu_x\\mu_y}{\\delta_x\\delta_y} & (\\text{correlation})\\\\ \\mathrm{VAR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left(L_i-\\mu_x\\right)&#94;2P_{\\delta}(L_i,L_j) & (\\text{variance})\\\\ \\mathrm{EPY} &= -\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\log\\left\\{P_{\\delta}(L_i,L_j)\\right\\} & (\\text{entropy})\\\\ \\mathrm{SEP} &= -\\sum_{k=0}&#94;{2L-2}P_{x+y}(k)\\log\\left\\{P_{x+y}(k)\\right\\} & (\\text{sum entropy})\\\\ \\mathrm{IDM} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\frac{1}{1+(L_i-L_j)&#94;2}P_{\\delta}(L_i,L_j) & (\\text{inverse difference moment})\\\\ \\end{aligned} $$ ただし、 $$ \\mu_x = \\sum_{L_i=0}&#94;{L-1}L_iP_x(L_i), \\quad \\mu_y = \\sum_{L_j=0}&#94;{L-1}L_jP_y(L_j)\\\\ \\delta_x&#94;2 = \\sum_{L_i=0}&#94;{L-1}(L_i-\\mu_x)&#94;2P_x(L_i), \\quad \\delta_y&#94;2 = \\sum_{L_j=0}&#94;{L-1}(L_j-\\mu_y)&#94;2P_y(L_j)\\\\ P_x(L_i) = \\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j), \\quad P_y(L_j) = \\sum_{L_i=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\\\ P_{x-y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i-L_j|= k\\\\ P_{x+y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i+L_j|= k\\\\ $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html"},{"title":"主成分分析(PCA)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 主成分分析(PCA) 次元削減・非可逆データ圧縮・特徴抽出・データの可視化などに使われる。 主部分空間(principal subspace) と呼ばれる低次元の線形空間の上への、データ点の直交射影として、以下の2つの定義方法がある。 「射影されたデータの分散が最大化されるような直交射影」 として定義。→ 分散最大化による定式化 「データ点と射影した点の間の2乗距離の平均値で定義される 射影コスト関数 の期待値を最小化するような線形射影」 として定義。（要はデータ点からの距離を最小化）→ 誤差最小化による定式化 Pythonによる実装 分散最大化による定式化 次元 $D$ のユークリッド空間内のデータ集合 $\\{\\mathbf{x}_n\\}(n=1,\\ldots,N)$ を考える。ここで、 「射影されたデータ点の分散を最大化しながら、データを次元 $M ことを考える。 1次元空間の上への射影（$M=1$） この空間の方向を $D$ 次元ベクトル $\\mathbf{u}_1$ として表す。ここで、興味があるのは $\\mathbf{u}_1$ の方向だけであるので、$\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ としても一般性を失わない。 したがって、各データ点 $\\mathbf{x}_n$ は スカラー値 $\\mathbf{u}_1&#94;T\\mathbf{x}_n$ の上に射影される。ここで、射影されたデータの平均・分散は以下のようになる。 統計量 平均値 $$\\mathbf{u}_1&#94;T\\bar{\\mathbf{x}}\\qquad\\bar{\\mathbf{x}} = \\frac{1}{N}\\sum_{n=1}&#94;N\\mathbf{x}_n\\qquad (12.1)$$ 分散 $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1\\qquad\\mathbf{S} = \\frac{1}{N}\\sum_{n=1}&#94;N\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\qquad (12.3)$$ ここで、 射影されたデータの分散を、$\\mathbf{u}_1$ に関して最大化 することを考える。 制約条件 $\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ をラグランジュ乗数 $\\lambda_1$ を利用して導入して $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1 + \\lambda_1\\left(1-\\mathbf{u}&#94;T_1\\mathbf{u}_1\\right)\\qquad (12.4)$$ を最大化すれば良い。$\\mathbf{u}_1$ に関する微分を $0$ とおくことにより、停留条件は $$\\mathbf{Su}_1 = \\lambda_1\\mathbf{u}_1\\qquad (12.5)$$ となることがわかる。これは、 $\\mathbf{u}_1$ が $\\mathbf{S}$ の固有ベクトルであること を示している。左から $\\mathbf{u}&#94;T_1$ をかけると、 $$\\text{Variance} = \\mathbf{u}&#94;T_1\\mathbf{Su}_1 = \\lambda_1 \\qquad (12.6)$$ となる。よって、 分散は $\\mathbf{u}_1$ を、最大固有値 $\\lambda_1$ に属する固有ベクトルに選んだ時に最大になる ことがわかる。 $M$ 次元空間の上への射影（一般解） 演習12.1 帰納法を用いて、 射影されたデータの分散を最大化するようなM次元部分空間の上への線形写像が、データ共分散行列Sの上位M個の固有値に属するM本の固有ベクトルによって定義される ことを示す。 仮定 $M$ に対して上記が成り立つ。 データ空間に対する新しい方向ベクトル $\\mathbf{u}_{M+1}$ は、次を満たす。 $\\mathbf{u}_{M+1}$ は、$\\mathbf{u}_1,\\ldots,\\mathbf{u}_M$ と直交する。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0$） 単位長に規格化されている。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{M+1}=1$） 制約条件を踏まえると、 $$L = \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\lambda_{M+1}\\left(1-\\mathbf{u}&#94;T_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_j$$ 両辺を $\\mathbf{u}_{M+1}$ で微分すると、 $$0 = \\frac{\\partial L}{\\partial \\mathbf{u}_{M+1}} = 2\\left(\\mathbf{Su}_{M+1} - \\lambda_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_j\\cdots(\\ast)$$ これに左から $\\mathbf{u}&#94;T_{j}$ をかけると、 $$0 = \\lambda&#94;{\\prime}_j\\quad(\\because \\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0)$$ となるので、これを $(\\ast)$ に代入して、 $$\\mathbf{Su}_{M+1} = \\lambda_{M+1}\\mathbf{u}_{M+1}$$ また、この時分散は $$\\begin{aligned} \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i &= \\sum_{i=1}&#94;{M}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\mathbf{u}&#94;T_{M+1}\\mathbf{Su}_{M+1}\\\\ &= \\sum_{i=1}&#94;{M}\\lambda_i + \\lambda_{M+1} \\end{aligned}$$ ここで、仮定より $\\lambda_i$ は、データ共分散行列 $\\mathbf{S}$ の上位 $M$ 個の固有値なので、この分散を最大する $\\lambda_{M+1}$ は、$M+1$ 番目に大きい固有値となる。 誤差最小化による定式化 続いて、射影誤差の最小化に基づいた主成分分析の定式化を考える。 まず、$D$ 次元の基底ベクトル $\\{\\mathbf{u}_i\\}$ から成る完全正規直交系を導入する。（$\\mathbf{u}_i&#94;T\\mathbf{u}_i = \\delta_{ij}$） すると、各データ点はこれらの基底ベクトルの線形結合なので、以下の形で表すことができる。 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\alpha_{ni}\\mathbf{u}_i\\qquad (12.8)$$ なお、ここで式 $(12.8)$ は、各データ点 $\\{\\mathbf{x}_n\\}$ を、もともとの座標系から $\\{\\mathbf{u}_i\\}$ で表される新しい座標系への回転を表していると解釈できる （もともと $D$ 個の成分 $\\{x_{n1},\\ldots,x_{nD}\\}$ が、等価な集合 $\\{a_{n1},\\ldots,a_{nD}\\}$ に置き換えられている） 。 上式と $\\mathbf{u}_j$ との内積を取り、正規直交性を使うと、$\\alpha_{nj} = \\mathbf{x}_n&#94;T\\mathbf{u}_j$ を得るので、 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right)\\mathbf{u}_i\\qquad (12.9)$$ $D$ 次元から $M$ 次元への近似 ここで、$M （$M$ 次元空間で完全に $\\mathbf{x}_n$ を表現するのは一般に不可能なので、近似する。） したがって、各データ点を $$\\tilde{\\mathbf{x}}_n = \\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\qquad (12.10)$$ $\\{z_{ni}\\}$ は特定のデータ点に依存。 $\\{b_i\\}$ は全てのデータ点に共通な定数。 と近似して表す。つまり、 $\\{\\mathbf{u}_i\\}$ と $\\{z_{ni}\\}$ と $\\{b_i\\}$ を調整することで、次元が減ることによってもたらされる歪みを最小化すること がここでの目的となる。 近似による歪み尺度 $J$ 近似による歪みの尺度として、元々のデータ点 $\\mathbf{x}_n$ とその近似 $\\tilde{\\mathbf{x}}_n$ の間の2乗距離をデータ集合に渡って平均したものを採用する。 $$\\begin{aligned} J &= \\frac{1}{N}\\sum_{n=1}&#94;N\\|\\mathbf{x}_n-\\tilde{\\mathbf{x}}_n\\|&#94;2\\qquad (12.11)\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\left\\|\\mathbf{x}_n-\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)\\right\\|&#94;2 \\end{aligned}$$ そこで、各変数についての微分を $0$ としてこれを最小化する変数を求める。 $\\{z_{ni}\\}$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial z_{ni}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\left\\|\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\sum_{i=1}&#94;Mz_{ni}&#94;2-2\\sum_{i=1}&#94;Mz_{ni}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=1}&#94;M2\\left\\{z_{ni}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore z_{ni}&#94;{\\star} &= \\mathbf{x}_n&#94;T\\mathbf{u}_i \\qquad (12.12) \\end{aligned} $$ $b_i$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial b_{i}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\left\\|\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\sum_{i=M+1}&#94;Db_{i}&#94;2-2\\sum_{i=M+1}&#94;Db_{i}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D2\\left\\{b_{i}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore b_{i}&#94;{\\star} &= \\bar{\\mathbf{x}}_n&#94;T\\mathbf{u}_i \\qquad (12.13) \\end{aligned} $$ $J$ の整頓 ここで、$(12.10)$ の $z_{ni},b_i$ を置き換えると、 $$ \\begin{aligned} \\mathbf{x}_n-\\tilde{\\mathbf{x}}_n &= \\mathbf{x}_n-\\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=1}&#94;D\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i - \\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=M+1}&#94;D\\left\\{\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\mathbf{u}_i\\right\\}\\mathbf{u}_i\\qquad (12.14) \\end{aligned} $$ と表すことができる。この式から、 $\\tilde{\\mathbf{x}}_n$ から $\\mathbf{x}_n$ への変位を表すベクトルは、主部分空間に直交する空間にあることがわかる。 以上より、歪み尺度 $J$ に対する表現を、純粋に $\\{\\mathbf{u}_i\\}$ の関数として、以下のような形で得られることがわかる。 $$J = \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i-\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\right)&#94;2 = \\sum_{i=M+1}&#94;D\\mathbf{u}&#94;T_i\\mathbf{Su}_i\\qquad (12.15)$$ したがって、あとは$J$ を $\\{\\mathbf{u}_i\\}$ に対して最小化すれば良い。 $M=1,D=2$ の場合 $M=1,D=2$ の場合、 「規格化条件 $\\mathbf{u}&#94;T_2\\mathbf{u}_2 = 1$ の下で、方向 $\\mathbf{u}_2$ を、$J=\\mathbf{u}&#94;T_2\\mathbf{Su}_2$ が最小化されるように選ぶ」 問題となる。 つまり、ラグランジュ乗数を用いて、 $$\\tilde{J} =\\mathbf{u}&#94;T_2\\mathbf{Su}_2 + \\lambda_2\\left(1-\\mathbf{u}&#94;T_2\\mathbf{u}_2\\right)\\qquad (12.16)$$ を最小化する問題となる。 $\\mathbf{u}_i$ についての微分を $0$ とおくと、$\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を得る。つまり、$\\mathbf{u}_2$ は固有値 $\\lambda_2$ に属する $\\mathbf{S}$ の固有ベクトルであるので、 任意の固有ベクトルは、この歪み尺度の停留点を定義することとなる。 $(12.16)$ に $\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を代入すると、$J=\\lambda_2$ となる。ゆえに、 「$\\mathbf{u}_2$ を、2つある固有値のうち小さい方に対応した固有ベクトルを選ぶことにより、$J$ の最小値を得ることができる」 （↔︎ 主部分空間では大きい方 ） 任意の $D$ と任意の $M 任意の $D$ と任意の $M $$\\mathbf{Su}_i = \\lambda_i\\mathbf{u}_i\\qquad (12.17)$$ で与えられる共分散行列の固有ベクトルに選ぶことによって得られる。ここで $i=1,\\ldots,D$ であり、固有ベクトル $\\{\\mathbf{u}_i\\}$ は正規直交するように選ばれる。 また、対応する歪み尺度の値は、 $$J = \\sum_{i=M+1}&#94;D\\lambda_i\\qquad (12.18)$$ のように、 主部分空間に直交する固有ベクトルの固有値についての単なる和 で与えられる。したがって、$J$ の最小値は、小さい順から $D-M$ 個の固有値に対応する固有ベクトルを選ぶことによって得られ、つまり主部分空間を定義する固有ベクトルは大きい順から $M$ 個の固有値に対応する固有ベクトルになる。 実装 Wine Data Set (UCI Machine Learning Repository) のデータを利用し、13次元、178データ、3種類のワインの属性データから、2つの主成分を取って可視化を行います。 また、PCAは自作のモジュール （ kerasy.ML.decomposition.PCA ） を用います。 In [1]: # データ取得。 ! wget https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt --2019-10-07 13:20:45-- https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.228.133 Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.228.133|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 12173 (12K) [text/plain] Saving to: `wine.txt' wine.txt 100%[===================>] 11.89K --.-KB/s in 0s 2019-10-07 13:20:45 (40.4 MB/s) - `wine.txt' saved [12173/12173] In [2]: from kerasy.ML.decomposition import PCA In [3]: import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib.colors import LinearSegmentedColormap In [4]: colors = [( 1 , 0 , 0 ), ( 0 , 0 , 1 ), ( 0 , 1 , 0 )] n_bin = len ( colors ) cmap_name = 'my_list' cm = LinearSegmentedColormap . from_list ( cmap_name , colors , N = n_bin ) In [5]: df = pd . read_csv ( \"wine.txt\" , sep = \" \\t \" , index_col = 0 ) In [6]: df . head ( 3 ) Out[6]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } class Alcohol Malic acid Ash Alcalinity of ash Magnesium Total phenols Flavanoids Nonflavanoid phenols Proanthocyanins Color intensity Hue OD280/OD315 of diluted wines Proline 0 1 14.23 1.71 2.43 15.6 127 2.80 3.06 0.28 2.29 5.64 1.04 3.92 1065 1 1 13.20 1.78 2.14 11.2 100 2.65 2.76 0.26 1.28 4.38 1.05 3.40 1050 2 1 13.16 2.36 2.67 18.6 101 2.80 3.24 0.30 2.81 5.68 1.03 3.17 1185 class カラムがワインの種類を表しているので、この列は主成分分析から取り除きます。 In [7]: cls = df . iloc [:, 0 ] . values In [8]: df_use = df . iloc [:, 1 :] また、 データの標準化 を行います。 In [9]: df_std = df_use . apply ( lambda x : ( x - x . mean ()) / x . std (), axis = 0 ) In [10]: data = np . array ( df_std ) データの準備ができたので、主成分分析を行います。 In [11]: pca = PCA () pca . fit ( data ) features = pca . transform ( data ) In [12]: plt . figure ( figsize = ( 6 , 6 )) plt . scatter ( features [:, 0 ], features [:, 1 ], c = cls , cmap = cm , edgecolors = 'black' ) plt . title ( \"Same fig with slide :)\" ) plt . xlabel ( \"PC1\" ) plt . ylabel ( \"PC2\" ) plt . grid () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html"},{"title":"Nussinov Algorithm","text":"Nussinov Algorithmは、最もシンプルな二次構造予測アルゴリズムである。 「最大いくつの塩基対を作ることができるか」 を調べる。 動的計画法を用いて効率的に調べるために、以下のような Pseudoknot は無視している。様々な重要なRNAが、Pseudoknotの形をとることが確認されているが、相対的にこのような構造をとる確率は低いので、計算の効率を優先し、これらを無視する。 Algorithm ※「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 今回の実装では $j-i-1<3$ の時は、$i,j$ が塩基対を作れないものとしている。 ポイントはRecursionの最後の式で、 「$i$ から $k$ までの部分塩基配列」 と 「$k+1$ から $j$ までの部分塩基配列」 を足し合わせる操作を行う。 （Bifurcation） Initialization: $$\\begin{aligned} \\gamma(i,i)&=0&\\text{ for }i=1\\text{ to }L\\\\ \\gamma(i,i-1)&=0&\\text{ for }i=2\\text{ to }L \\end{aligned}$$ Recursion: $$ \\gamma(i,j) = \\max \\begin{cases} \\gamma(i+1,j)\\\\ \\gamma(i,j-1)\\\\ \\gamma(i+1,j-1)+\\delta(i,j)\\\\ \\max_{i\\leq k\\verb|<|j}\\left[\\gamma(i,k) + \\gamma(k+1,j)\\right] \\end{cases} $$ TraceBack 基本的なアルゴリズムは同じですが、 Bifurcationが起きた際にトレースバックポインターを複数用意する必要があることには注意が必要です。 bp = [] stack = [( 0 , N - 1 )] while ( stack ): i , j = stack . pop ( 0 ) delta = 1 if self . _is_bp ( sequence [ i ], sequence [ j ]) and ( j - i > 3 ) else 0 if ( i >= j ): continue elif gamma [ i + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( i + 1 , j )) elif gamma [ i ][ j - 1 ] == gamma [ i ][ j ]: stack . append (( i , j - 1 )) elif gamma [ i + 1 ][ j - 1 ] + delta == gamma [ i ][ j ]: bp . append (( i , j )); stack . append (( i + 1 , j - 1 )) else : # Bifurcation for k in range ( i , j ): if gamma [ i ][ k ] + gamma [ k + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( k + 1 , j )) stack . append (( i , k )) break 自作のモジュール （kerasy.Bio.structure.Nussinov） を使って実装します。 In [1]: from kerasy.Bio.structure import Nussinov In [2]: model = Nussinov () In [3]: # 以下の形のパラメタファイルを受け取ります。 ! cat params.json { \"type\": \"DNA\", \"Watson_Crick\": true, \"Wobble\": true } In [4]: model . load_params ( \"params.json\" ) In [5]: model . params () | parameter |value| -------------------- |type | DNA| |Watson_Crick| 1| |Wobble | 1| In [6]: # サンプル配列 sequence = \"GCGGAAACGGGGTCA\" In [7]: # 最大ペアの配列 model . predict ( sequence , memorize = True , traceback = True ) Nussinov Algorithm Score: 3 ================================================================= seq: GCGGAAACGGGGTCA : ( (( ))) ================================================================= In [8]: gamma = model . gamma In [9]: # DP行列は以下のようになっています。 model . _printAsTerai ( gamma , sequence ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 1 2 2 2 2 2 3 3 C - 0 0 0 0 0 0 1 2 2 2 2 2 3 3 G - - 0 0 0 0 0 1 1 1 1 1 2 3 3 G - - - 0 0 0 0 1 1 1 1 1 2 3 3 A - - - - 0 0 0 0 0 0 0 1 2 2 2 A - - - - - 0 0 0 0 0 0 1 2 2 2 A - - - - - - 0 0 0 0 0 1 2 2 2 C - - - - - - - 0 0 0 0 1 1 1 1 G - - - - - - - - 0 0 0 0 0 1 1 G - - - - - - - - - 0 0 0 0 1 1 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 $i,j$ が塩基対を組むときの塩基対最大化 塩基 $i,j$ が塩基対を組むという制約がある場合を考えます。これは、「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を保持した $\\omega(i,j)$ と $\\gamma(i,j)$ を組み合わせることで効率的に求めることができます。 Algorithm 「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を $\\omega(i,j)$ が保持している。 Initialization: $$\\omega(i,L) = 0$$ Recursion: $$ \\omega(i,j) = \\max \\begin{cases} \\omega(i-1,j)\\\\ \\omega(i,j+1)\\\\ \\omega(i-1,j+1)+\\delta(i-1,j+1)\\\\ \\max_{1\\leq k\\verb|<|i}\\left[\\omega(k,j) + \\gamma(k,i-1)\\right]\\\\ \\max_{j\\verb|<| k\\leq L}\\left[\\omega(j+1,k) + \\gamma(i,k)\\right] \\end{cases} $$ In [10]: model . outside ( sequence , memorize = True ) In [11]: omega = model . omega In [12]: # DP行列は以下のようになっています。 model . _printAsTerai ( omega , sequence ) \\ G C G G A A A C G G G G T C A G 3 3 3 2 2 2 1 1 1 0 0 0 0 0 0 C - 3 3 3 3 3 2 1 1 1 1 1 1 0 0 G - - 3 3 3 3 2 2 2 2 2 1 1 0 0 G - - - 3 3 3 2 2 2 2 2 1 1 0 0 A - - - - 3 3 2 2 2 2 2 1 1 0 0 A - - - - - 3 3 2 2 2 2 2 1 0 0 A - - - - - - 3 2 2 2 2 2 1 0 0 C - - - - - - - 2 2 2 2 2 1 0 0 G - - - - - - - - 3 3 3 2 2 1 1 G - - - - - - - - - 3 3 3 3 2 2 G - - - - - - - - - - 3 3 3 2 2 G - - - - - - - - - - - 3 3 2 2 T - - - - - - - - - - - - 3 2 2 C - - - - - - - - - - - - - 2 2 A - - - - - - - - - - - - - - 3 $Z(i,j)$ の計算 variable definition $\\gamma\\left(i,j\\right)$ the maximum number of base-pairs for subsequence from $i$ to $j$. $\\omega\\left(i,j\\right)$ the maximum number of base-pairs excluding subsequence from $i$ to $j$. 上記の定義より、$\\gamma,\\omega$ を用いて $Z(i,j)$ が以下のように求まることがわかります。 $$Z(i,j) = \\begin{cases} \\gamma\\left(i+1,j-1\\right) + 1 + \\omega\\left(i,j\\right) & (\\text{if }i\\text{ and }j\\text{-th nucleotides can form a base-pair})\\\\ 0 & (\\text{otherwise}) \\end{cases}$$ In [13]: model . ConstrainedMaximize ( sequence , memorize = False ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 2 0 0 0 0 0 3 0 C - 0 0 0 0 0 0 0 3 3 3 3 0 0 0 G - - 0 0 0 0 0 3 0 0 0 0 0 3 0 G - - - 0 0 0 0 3 0 0 0 0 0 3 0 A - - - - 0 0 0 0 0 0 0 0 3 0 0 A - - - - - 0 0 0 0 0 0 0 3 0 0 A - - - - - - 0 0 0 0 0 0 3 0 0 C - - - - - - - 0 0 0 0 3 0 0 0 G - - - - - - - - 0 0 0 0 0 2 0 G - - - - - - - - - 0 0 0 0 3 0 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 備忘録 Nussinov Algorithmでは、これまでの動的計画法とは異なり、 $i,j$ を斜め方向に舐める必要がありました。 そこで、その際に使用したコードを備忘録として残しておきます。 In [14]: import numpy as np In [15]: N = 4 In [16]: # Nussinov Algorithm (γ) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for ini_i in reversed ( range ( N )): diff = N - ini_i for i in reversed ( range ( ini_i )): arr [ i ][ i + diff ] = idx idx += 1 print ( arr ) [[0 3 5 6] [0 0 2 4] [0 0 0 1] [0 0 0 0]] In [17]: # Nussinov outsie (ω) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for j in reversed ( range ( N )): for i in range ( N - j ): arr [ i ][ j + i ] = idx idx += 1 print ( arr ) [[ 7 4 2 1] [ 0 8 5 3] [ 0 0 9 6] [ 0 0 0 10]] In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-8.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-8.html"},{"title":"Pair HMM の最尤推定","text":"Baum-Welch Pair HMMとは、二本の配列を受け取ってペアワイズアラインメントを出力するHMMで、 「アラインメントの確率的な解釈が可能になる」 （アラインメントのどの部分が信頼できるかを確率的に評価できる） という利点があります。 このPair HMMは、一般的なHMMと同様にBaum-Welchアルゴリズムによってパラメータを最尤推定していきます。 \\(\\xi\\) HMM 一般的なHMMでは、例えば 遷移確率 \\(A_{jk}\\) （状態 \\(j\\) から状態 \\(k\\) に遷移する確率） を最尤推定する際は、 直感的には 「状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「状態 \\(j\\) から遷移する回数」 で割れば最尤解が求まる。 実際の隠れ状態の遷移が確定していないので、 「 期待される 状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「 期待される 状態 \\(j\\) から遷移する回数」 で割れば良い。 \\(\\mathbf{z}_{n-1}\\) で状態 \\(j\\) におり、 \\(\\mathbf{z}_n\\) で状態 \\(k\\) にいる確率 \\(\\xi\\left(z_{n-1,j},z_{nk}\\right)\\) は、forward-backward algorithmの \\(\\alpha,\\beta\\) を用いれば以下のように求めることができる。 $$\\xi_n\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ \\(\\xi\\) を用いて、最尤推定を行う。 $$A_{j k}= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\qquad (13.19)$$ という様に行いますが、Pair HMMは、 挿入・欠失を考えるため、 \\(n\\) で配列 \\(\\mathbf{X,Y}\\) のどの要素（ \\(\\mathbf{x}_u,\\mathbf{y}_v\\) ）を考えているのか一意に定まらない という点で普通のHMMとは異なります。 Pair HMM そこで、 「 \\(n\\) ではなく \\(u,v\\) に注目する」 ことで、 \\((13.43)\\) の式を以下のように書き換えます。 $$\\xi_{u,v}\\left(i,j\\right)=\\frac{f_i\\left(u,v\\right)A_{ij}\\phi_j\\left(\\diamond_1\\right)b_j\\left(\\diamond_2,\\diamond_3\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ ここで、分子に注目すると、各変数の意味が |variable|meaning| |:-:|:-| | \\(f_i\\left(u,v\\right)\\) |The probability of ending up in state \\(i\\) after aligning the two sequences \\(\\mathbf{X,Y}\\) up to observation \\(u\\) and \\(v\\) respectively.| | \\(A_{ij}\\) |the transition probability from state \\(i\\) to state \\(j\\) .| | \\(\\phi_j\\left(\\diamond_1\\right)\\) |the emission probability of emitting \\(\\diamond_1\\) in state \\(j\\) .| | \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) |the probability of being in state \\(j\\) , given the sequences \\(\\mathbf{X,Y}\\) are aligned from observation \\(\\diamond_2+1\\) and \\(\\diamond_3+1\\) to the end of the sequences respectively.| であるので、 \\(\\diamond\\) は状態によって異なり、具体的に書き下すと以下のようになります。 |state\\variable| \\(\\phi_j\\left(\\diamond_1\\right)\\) | \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) | |:-:|:-:|:-:| | \\(M\\) | \\(e\\left(x_{u+1},y_{v+1}\\right)\\) | \\(b_j\\left(u+1,v+1\\right)\\) | | \\(X\\) | \\(e\\left(x_{u+1}\\right)\\) | \\(b_j\\left(u+1,v\\right)\\) | | \\(Y\\) | \\(e\\left(y_{v+1}\\right)\\) | \\(b_j\\left(u,v+1\\right)\\) | \\(\\gamma\\) 同様に \\(\\gamma\\) も考えると、 $$ \\gamma_n\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad(13.33)$$ から、 $$\\gamma_i\\left(u,v\\right)=\\frac{f_i\\left(u,v\\right)b_j\\left(u,v\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ のように書き換えることになります。 Maximization step ここまでで \\(\\gamma,\\xi\\) が求まったので、M stepで各パラメータを更新します。なお、以下で \\(w\\) は全ての記号の組を表します。 $$w\\in\\left\\{(k_x,k_y)|k_x,k_y\\in\\left\\{A,T,G,C,\\epsilon \\right\\}\\right\\}\\setminus(\\epsilon,\\epsilon)$$ \\(\\pi_k\\) $$\\pi&#94;{\\star}_i = \\sum_w\\gamma_i&#94;w(0,0)$$ \\(A_{ij}\\) $$A&#94;{\\star}_{ij} = \\frac{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\sum_{j}&#94;{K}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}$$ |final emitting state| \\(\\tilde{U}\\) | \\(\\tilde{V}\\) | |:-:|:-:|:-:| | \\(M\\) | \\(U-1\\) | \\(V-1\\) | | \\(X\\) | \\(U-1\\) | \\(V\\) | | \\(Y\\) | \\(U\\) | \\(V-1\\) | \\(\\phi_{i}(k)\\) $$\\phi_i\\left(k\\right) = \\frac{\\sum_w\\sum_{u=0}&#94;{U\\ast1}\\sum_{v=0}&#94;{V\\ast2}\\gamma_i&#94;w\\left(u,v\\right)}{\\sum_w\\sum_{u=0}&#94;U\\sum_{v=0}&#94;V\\gamma_i&#94;w\\left(u,v\\right)}$$ \\(\\ast1\\) ： \\(x_u=k_x\\) and state \\(i\\) equals the state \\(M\\) or \\(X\\) . (in the state \\(Y\\) , a gap is present in observation stream \\(x\\) therefore \\(k_x\\) is not present.) \\(\\ast2\\) ： \\(y_v=k_y\\) and state \\(j\\) equals the state \\(M\\) or \\(Y\\) . Reference Wahle, Johannes and Armin Buch. \"Alignment and word comparison with Pair Hidden Markov Models.\" (2013). pp.22-31 Martijn B. Wieling. \"Comparison of Dutch Dialects\" (2007) pp.36-50 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-7.html"},{"title":"生物統計論 第2回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section2.1 Central Limit Theorem Law of Large Numbers Estimation is accurate with many samples. Foundation of repeated measurement. Regardless of true distribution. Assuming independence. Theorem Let $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ be an independent trials process, with finite expected value $\\mu = \\mathbb{E}\\left(\\mathbf{X}_i\\right)$ Let $\\bar{\\mathbf{X}}_n = \\frac{1}{n}\\left(\\mathbf{X}_1,\\mathbf{X}_2+\\cdots+\\mathbf{X}_n\\right)$ be a sample mean. Weak law : $$\\lim_{n\\rightarrow\\infty}P\\left(|\\bar{\\mathbf{X}}_n-\\mu|>\\varepsilon\\right) = 0 \\quad\\left(\\forall\\varepsilon>0\\right)$$ Strong law $$P\\left(\\lim_{n\\rightarrow\\infty}\\bar{\\mathbf{X}}_n = \\mu\\right) = 1$$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Chebyshev Inequality Let $\\mathbf{X}$ be a discrete random variable with expected value $\\mu=\\mathbb{E}\\left(\\mathbf{X}\\right)$ $$ P \\left(|\\mathbf{X}-\\mu|>\\varepsilon\\right)\\leq\\frac{\\mathbb{V}\\left(\\mathbf{X}\\right)}{\\varepsilon&#94;2}$$ Example In [2]: N = 1000 seed = 0 In [3]: trials = np . arange ( 1 , N + 1 ) In [4]: dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = N ) ave_dices = np . cumsum ( dices ) / trials In [5]: plt . axhline ( 3.5 , color = \"blue\" , label = \"Theoretical mean\" ) plt . plot ( trials , ave_dices , label = \"Observed average\" , color = \"green\" ) plt . ylim ( 1 , 6 ) plt . title ( \"Average dice roll by number of rolls\" ) plt . ylabel ( \"Average\" ) plt . xlabel ( \"Number of trials\" ) plt . grid () plt . legend () plt . show () If we keep rolling the dice over and over again, the sample average of dice roll will converge to the true average. Exception The law of large numbers assumes the existance of expected values . Therefore, it will not hold when there is no expected value. (ex. Cauchy distribution ) Cauchy distribution $$ \\begin{aligned} f(x;x_0,\\gamma) &= \\frac{1}{\\pi\\gamma\\left[1 + \\left(\\frac{x-x_0}{\\gamma}\\right)&#94;2\\right]} = \\frac{1}{\\pi}\\frac{\\gamma}{\\left(x-x_0\\right)&#94;2 + \\gamma&#94;2} & \\begin{cases}x_0: \\text{Location paramete}\\\\\\gamma: \\text{Scale parameter}\\end{cases}\\\\ f(x;0,1) &= \\frac{1}{\\pi\\left(1+x&#94;2\\right)} & (\\text{standard cauchy distribution}) \\end{aligned} $$ In [6]: N = 5000 K = 3 seed = 1 In [7]: trials = np . arange ( 1 , N + 1 ) In [8]: samples = np . random . RandomState ( seed ) . standard_cauchy ( size = ( K * N )) . reshape (( K , N )) ave_samples = np . cumsum ( samples , axis = 1 ) / trials In [9]: for k in range ( K ): plt . plot ( trials , ave_samples [ k ], label = f \"Observation { k + 1 } \" ) plt . ylabel ( \"$(\\mathbf {X} _1+\\cdots+\\mathbf {X} _n)/n$\" ) plt . xlabel ( \"n\" ) plt . legend () plt . grid () Central Limit Theorem Sample mean follows normal distribution. Foundation of many statistical tests. Regardless of true distribution. Assuming independence. Theorem Let $\\{\\mathbf{X}_1,\\ldots,\\mathbf{X}_n\\}$ be a random sample of size $n$, which is a sequence of independent and identically distributed random variables drawn from a distribution. expected value given by $\\mu$. finite variance given by $\\sigma&#94;2$. Let $S_n:=\\sum_{k=1}&#94;n\\mathbf{X}_k$ $$P\\left(\\frac{S_n-n\\mu}{\\sqrt{n}\\sigma}\\leq\\alpha\\right)\\rightarrow\\frac{1}{\\sqrt{2\\pi}}\\int_{-\\infty}&#94;{\\alpha}e&#94;{-\\frac{x&#94;2}{2}}dx\\quad(n\\rightarrow\\infty)$$ Therefore: $$ \\begin{aligned} S_n&\\sim\\mathcal{N}\\left(n\\mu, n\\sigma&#94;2\\right) & (n\\rightarrow\\infty)\\\\ \\bar{\\mathbf{X}}_n = \\left(\\mathbf{X}_1+\\cdots+\\mathbf{X}_n\\right)/n&\\sim\\mathcal{N}\\left(\\mu,\\sigma&#94;2/n\\right) & (n\\rightarrow\\infty) \\end{aligned} $$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Example In [10]: N = 10000 ns = [ 10 , 100 , 1000 , 10000 ] roll = 4 seed = 0 In [11]: fig = plt . figure ( figsize = ( 12 , 6 )) ax_all = plt . subplot2grid (( 2 , len ( ns )), ( 0 , 0 ), colspan = len ( ns )) for i , n in enumerate ( ns ): ax = plt . subplot2grid (( 2 , len ( ns )), ( 1 , i )) dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = ( n , N )) rate_dice_eq_4 = np . count_nonzero ( dices == roll , axis = 1 ) / N freqs , bins , patches = ax . hist ( rate_dice_eq_4 , bins = 20 , density = True ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] ax_all . plot ( cent_bins , freqs , label = f \"n= { n } \" ) ax . set_title ( f \"n= { n } \" ) ax . set_xlabel ( f \"Probability of { roll } roll.\" ) ax . set_ylabel ( \"freq\" ) ax_all . set_title ( \"Central Limit Theorem\" ) ax_all . legend () plt . tight_layout () plt . show () Section2.2 ChIP-seq Peak Detection ChIP-sequencing, also known as ChIP-seq, is a method used to analyze protein interactions with DNA. ChIP-seq combines chromatin immunoprecipitation (ChIP) with massively parallel DNA sequencing to identify the binding sites of DNA-associated proteins. It can be used to map global binding sites precisely for any protein of interest. Previously, ChIP-on-chip was the most common technique utilized to study these protein–DNA relations. Peak calling Problem: How to identify transcription factor binding sites and histone modification enriched regions? Random Read Model Assume that read appears with equal probability in any region. Calcurate the p-value (the Probability of obtaining more or equally extreme value than observed value under the random model.) → Smaller is more significant. Setting the threshold (p-value) manually. We could calcurate the threshold ($n_{obs}$) → If the $n_{obs}$ exceeds this threshold, it is determined as the peak region. In [12]: from scipy.special import comb In [13]: g = 10000 # total DNA length n = 1000 # total number of reads l = 100 # bin size q = l / g n_bins = g / l lambda_ = n * q # mean read count seed = 0 xmax = 30 In [14]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) read_points = np . random . RandomState ( seed ) . randint ( 0 , g , size = n ) axL . scatter ( read_points , np . zeros ( shape = n ), s = 3 , label = \"read\" , color = \"black\" ) ledge = 0 read_counts = [] for edge in range ( l , g + 1 , l ): middl = ( ledge + edge ) / 2 count = np . count_nonzero ([( ledge <= read_points ) & ( read_points < edge )]) read_counts . append ( count ) if edge <= l * 10 : axL . axvline ( edge , color = \"red\" ) axL . text ( x = middl , y = 1e-3 , s = count , horizontalalignment = 'center' ) ledge = edge axL . set_xlim ( 0 , l * 10 ) axL . set_ylim ( - 1e-3 , 2e-3 ) axL . set_yticks ([]) axL . legend () Poisson = [ comb ( n , i , exact = True ) * ( q ** i ) * (( 1 - q ) ** ( n - i )) for i in range ( n )] axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axR . plot ([ read_counts . count ( i ) / n_bins for i in range ( n )], color = \"red\" , label = \"Observed\" ) axR . set_xlim ( 0 , xmax ) axR . set_xlabel ( \"Read count for each bin\" ) axR . set_ylabel ( \"Frequency\" ) axR . legend () plt . show () In [15]: n_obs = 15 p_values = np . cumsum ( Poisson [:: - 1 ])[:: - 1 ] # Calcurate p-value for each n_obs. thresh_p = 1e-2 bp = np . argmax ( p_values <= thresh_p ) In [16]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axL . fill_between ( np . arange ( n_obs , xmax ), y1 = Poisson [ n_obs : xmax ], y2 = 0 , facecolor = 'red' ) axL . annotate ( 'p-value \\n = $\\mathbb {P} (n_ {obs} \\leq N)$ \\n $=\\sum_{i=n_ {obs} }&#94;{\\infty}(\\lambda&#94;i/i!)\\cdot e&#94;{-\\lambda}$' , xy = ( 17 , 1e-2 ), xytext = ( 20 , 4e-2 ), fontsize = 12 , arrowprops = dict ( width = 1 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'black' ) ) axL . set_xlim ( 0 , 30 ) axL . set_title ( \"Poisson distribution\" ) axL . set_xlabel ( \"N\" ) axL . set_ylabel ( \"Freq\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( p_values , color = \"black\" ) axR . scatter ( n_obs , p_values [ n_obs ], color = \"red\" , label = \"pvalue($n_ {obs} $=\" + f \" { n_obs } )\" ) axR . scatter ( bp , p_values [ bp ], color = \"blue\" , label = \"Boundary point\" ) axR . axhline ( thresh_p , color = \"blue\" , label = f \"threshold(p_value= { thresh_p } )\" ) axR . axvspan ( xmin = bp , xmax = xmax , color = \"blue\" , alpha = 0.3 ) axR . set_xlim ( 0 , xmax ) axR . set_title ( \"The relationship between p-value and $n_ {obs} $\" ) axR . set_xlabel ( \"$n_ {obs} $\" ) axR . set_ylabel ( \"p-value\" ) axR . legend () plt . show () In this case, we could say the threshold($n_{obs}$) = 19(=bp). ※ In ChIP-seq, we have to do \"Tag shift\" due to the DNA strand asymmetry. （→ more: MACS ） Section2.3 Hypothesis Testing Terminology In [17]: fig , ax = plt . subplots ( figsize = ( 6 , 4 )) X = np . arange ( 10 , 100 , 1 ) Y = 1 / X # Null distribution ax . plot ( X , Y , color = \"red\" ), ax . text ( x = 15 , y = 8e-2 , s = \"Null distribution \\n $f_S(s|H)$\" , fontsize = 15 ) # Thereshold: Sα ax . plot (( 50 , 50 ),( 0 , 7e-2 ), color = \"black\" ), ax . text ( x = 48 , y = 7.5e-2 , s = \"$S_ {α} $\" , fontsize = 12 ) # Reject & Accept ax . annotate ( '' , xy = ( 75 , 5e-2 ), xytext = ( 52 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 55 , y = 5.5e-2 , s = \"reject\" , fontsize = 12 ) # Reject ax . annotate ( '' , xy = ( 25 , 5e-2 ), xytext = ( 48 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 35 , y = 5.5e-2 , s = \"accept\" , fontsize = 12 ) # Accept # Observation sample. ax . plot (( 70 , 70 ),( 0 , 1 / 70 ), color = \"black\" ), ax . scatter ( 70 , 1 / 70 , color = \"black\" ), ax . text ( x = 68 , y = 2e-2 , s = \"$S_ {obs} $\" , fontsize = 12 ) ax . set_xticks ([]), ax . set_yticks ([]) ax . set_xlabel ( \"S\" ), ax . set_ylabel ( \"freq\" ) ax . set_xlim ( min ( X ), max ( X )), ax . set_ylim ( min ( Y ), max ( Y )) plt . show () Null Hypothesis $H_0$ Alternative Hypothesis $H_1$ Test Static $S$ Null distribution Significance threshold Reject/Accept $H_0$ Null hypothesis is True Null hypothesis is False Do not reject Null hypothesis ($H_0$) Correct Type2 error (False negative) Reject Null hypothesis ($H_0$) Type1 error (False positive) Correct P-value distribute uniformly under $H_0$ Proof. p-value is the probability of obtaining more or equally extreme value than observed value under the null distribution. $$p = \\mathbb{P}\\left(S\\geq s|H_0\\right) = 1-\\mathbb{P}\\left(S< s|H_0\\right)$$ By noting $F_0$ the cumulative distribution function of $S$ under $H_0$, we obtain: $$p = 1-F_0(s)$$ Thanks to the fact that the cdf is monotonic, increasing and (left-)continuous: $$\\mathbb{P}\\left(S\\geq s|H_0\\right) = \\mathbb{P}\\left(F_0\\left(S\\right)\\geq F_0\\left(s\\right)\\right) = 1-\\mathbb{P}\\left(F_0\\left(S\\right)< F_0\\left(s\\right)\\right)$$ Therefore, we have: $$\\mathbb{P}\\left(F_0\\left(S\\right)< F_0\\left(s\\right)\\right) = F_0\\left(s\\right)$$ Which means that $F_0\\left(S\\right)$ is following a uniform distribution. And, as this means also that $1-F_0\\left(S\\right)$ is following a uniform distributed, then we can conclude that p-value are uniformly distributed under the null hypothesis. In [18]: from scipy.stats import norm In [19]: N = 10000 loc = 0 scale = 1 seed = 0 In [20]: obs = np . random . RandomState ( seed ) . normal ( loc = loc , scale = scale , size = N ) # observation sample \"s\". p_value = 1 - norm . cdf ( x = obs , loc = loc , scale = scale ) # p-value = 1 - F(s) In [21]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) freqs , bins , patches = axL . hist ( obs , bins = 50 , density = True , color = \"blue\" , alpha = 0.7 ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] axL . plot ( cent_bins , freqs , color = \"blue\" ) axL . set_title ( \"Histogram of observation sample s \\n under the null distribution (This time: Normal distribution)\" ), axL . set_xlabel ( \"observation s\" ), axL . set_ylabel ( \"Frequency\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . hist ( p_value , bins = 20 , edgecolor = \"black\" ) axR . set_title ( \"Histogram of p-value\" ), axR . set_xlabel ( \"p-value\" ), axR . set_ylabel ( \"Frequency\" ) plt . tight_layout () plt . show () ※ We could argue about the p-value under the null hypothesis, but we could not confirm whether null hypothesis is true or not. Section2.4 Hypothesis Test Example $\\chi&#94;2$-test Any statistical hypothesis test where the sampling distribution of the test statistic is a chi-squared distribution when the null hypothesis is true. Used to determine whether there is a significant difference between the expected frequencies and the observed frequencies in one or more categories. $\\chi&#94;2$-distribution $Y_i\\sim\\mathcal{N}\\left(0,1\\right), i=1,\\ldots,\\nu$: i.i.d. $X=Y_1&#94;2+\\cdots+Y_{\\nu}$ $\\rightarrow X\\sim\\chi&#94;2(\\nu), X\\in \\mathbb{R}_{\\geq0}$ $$ \\begin{aligned} f_X(x) &= \\frac{1}{2&#94;{\\nu/2}\\Gamma(\\nu/2)}x&#94;{\\nu/2-1}e&#94;{-x/2}\\\\ \\Gamma(z) &= \\int_{0}&#94;{\\infty}t&#94;{z-1}e&#94;{-t}dt(\\mathrm{Re}(z)>0)\\\\ \\mathbb{E}(X) &= \\nu\\\\ \\mathbb{V}(X) &= 2\\nu \\end{aligned} $$ In [22]: from scipy.stats import chi2 In [23]: K = 5 In [24]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( 0 , 8 , 1000 ) for k in range ( 1 , K + 1 ): plt . plot ( X , chi2 . pdf ( X , k ), label = f \"$k= { k } $\" ) plt . xlim ( 0 , 8 ), plt . ylim ( 0 , 1.0 ) plt . title ( \"$\\chi&#94;2$-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Pearson's chi-square test goodness of fit test # $C_1$ $C_2$ $\\cdots$ $C_k$ total Observation frequency $n_1$ $n_2$ $\\cdots$ $n_k$ $n$ Theoretical probability (under $H_0$) $p_1$ $p_2$ $\\cdots$ $p_k$ $1$ Theoretical frequency $m_1=np_1$ $m_2=np_2$ $\\cdots$ $m_k=np_k$ $n$ Null Hypothesis($H_0$): $P(C_i) = p_i\\quad(i=1,2,\\ldots,k)$ If null hypothesis is true, $U$ are distributed as $\\chi&#94;2(k-1)$. $$ U=\\sum_{i=1}&#94;k\\frac{(n_i-m_i)&#94;2}{m_i}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ test for independence A\\B $B_1$ $B_2$ $\\cdots$ $B_b$ total $A_1$ $n_{11}$ $n_{12}$ $\\cdots$ $n_{1b}$ $n_{1\\cdot}$ $A_2$ $n_{21}$ $n_{22}$ $\\cdots$ $n_{2b}$ $n_{2\\cdot}$ $\\vdots$ $\\vdots$ $\\vdots$ $\\cdots$ $\\ddots$ $\\vdots$ $A_a$ $n_{a1}$ $n_{a2}$ $\\cdots$ $n_{ab}$ $n_a$ total $n_{\\cdot1}$ $n_{\\cdot2}$ $\\cdots$ $n_{\\cdot b}$ $n_{a\\cdot}$ $P(A_i) = p_i,P(B_j)=q_j,\\quad (1\\leq i\\leq a,1\\leq j\\leq b)$ Null Hypothesis($H_0$): $A$ and $B$ are independence. $$P(A_i\\cap B_j) = p_iq_j$$ If null hypothesis is true, we could presume: $\\bar{p_i}=n_{i\\cdot}/n$, $\\bar{q_j}=n_{\\cdot j}/n$. $m_{ij} = n\\bar{p_i}\\bar{q_j}$ (Theoretical frequency) $$ U=\\sum_{i=1}&#94;a\\sum_{j=1}&#94;b\\frac{(n_{ij}-m_{ij})&#94;2}{m_{ij}}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ t-test One-sample test: Determine whether a sample of observations could have been generated by a process with a specific mean $\\mu$. Two-sample test: Compare the average values of the two data sets and determine if they came from the same population. t-distribution $$ \\begin{aligned} f_{t(\\nu)}(x) &= \\frac{\\Gamma\\left(\\frac{\\nu+1}{2}\\right)}{\\sqrt{\\nu\\pi}\\Gamma\\left(\\frac{\\nu}{2}\\right)}\\left(1+\\frac{x&#94;2}{\\nu}\\right)&#94;{-\\frac{\\nu+1}{2}}\\\\ \\mathbb{E}(X) &= 0(\\nu>1)\\\\ \\mathbb{V}(X) &= \\begin{cases}\\infty&(1<\\nu\\leq2)\\\\\\frac{\\nu}{\\nu-2}&(2<\\nu)\\end{cases} \\end{aligned} $$ In [25]: from scipy.stats import t as tdist In [26]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( - 6 , 6 , 1000 ) nus = [ 1 , 2 , 5 , 1000 ] for nu in nus : plt . plot ( X , tdist . pdf ( X , nu ), label = f \"$ν= { nu } $\" ) plt . plot ( X , norm . pdf ( X , 0 , 1 ), linestyle = ':' , linewidth = 5 , label = \"Standard Normal Distribution\" ) plt . xlim ( - 6 , 6 ), plt . ylim ( 0 , 0.4 ) plt . title ( \"t-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Student's t-test One-sample test: $$ X_1,\\ldots,X_n\\sim\\mathcal{N}(\\mu,\\sigma)\\text{: i.i.d.}\\\\ \\bar{X} = \\frac{X_1,\\ldots,X_n}{n}, S = \\frac{\\left(X_1-\\bar{X}\\right)&#94;2 + \\cdots+\\left(X_n-\\bar{X}\\right)&#94;2}{n-1}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}-\\mu\\sqrt{n}\\right)}{S}\\sim t(n-1) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{X_{11}+\\cdots+X_{1m}}{m}\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{X_{21}+\\cdots+X_{2n}}{n}\\\\ S=\\frac{\\sum_{i=1}&#94;m\\left(X_{1i}-\\bar{X}_1\\right)&#94;2 + \\sum_{i=1}&#94;n\\left(X_{2i}-\\bar{X}_2\\right)&#94;2}{m+n-2}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)\\sqrt{mn}}{S\\sqrt{m+n}}\\sim t(m+n-2) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{\\sum_{i=1}&#94;mX_{1i}}{m}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{1i} - \\bar{X}_1\\right)&#94;2}{m-1}, A=S_1/m\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{\\sum_{i=1}&#94;mX_{2i}}{n}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{2i} - \\bar{X}_2\\right)&#94;2}{n-1}, B=S_2/n\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)}{S\\sqrt{A+B}}\\approx t(\\nu), \\nu=\\frac{(A+B)&#94;2}{A&#94;2/(m-1)+B&#94;2/(n-1)} $$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html"},{"title":"レポート課題1(10/3出題)","text":"DFSQ08KHikVXXEySjTkI+w==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html"},{"title":"イントロダクション","text":"講義計画 確率と統計の基礎 ： 最先端の機械学習技術の数学的基盤 探索と最適化 ： 広大な探索空間から最適解を効率よく探索 機械学習 ： データの背後に潜む知識を発見 自然言語処理 ： 人工知能技術の応用例 |#|日付|内容|担当| |:-:|:-:|:-|:-:| |1|10/3|概要|杉山| |2|10/10|最適化（連続1）|佐藤| |3|10/17|最適化（連続2）|佐藤| |4|10/24|最適化（探索）|本多| |5|10/31|確率と統計|本多| |6|11/14|確率と統計|本多| |7|11/21|確率と統計|本多| |8|11/28|機械学習（教師付き学習）|本多| |9|12/5|機械学習（教師付き学習）|佐藤| |10|12/12|自然言語処理|宮尾| |11|12/19|自然言語処理|宮尾| |12|12/26|自然言語処理|宮尾| |13|1/9|機械学習（強化学習）|杉山| |1|1/16|試験|佐藤| 人工知能とは 1956年：\"The Dartmouth Summer Research Project on Artificial Intelligence\" にて Artificial Intelligence という言葉が提唱された。 |Watoson|Nature|AlphaGo| |:-:|:-:|:-:| | | | | 人工知能関連分野の発展 人工知能研究 1960年頃(1次ブーム)：記号処理、論理推論 1980年頃(2次ブーム)：エキスパートシステム ニューラルネット研究 1960年頃(1次ブーム)：パーセプトロン（１層） 1990年頃(2次ブーム)：誤差逆伝播ほう（多層） 機械学習研究 1995年頃〜：統計・凸最適化 1995年頃〜：ベイズ推論 2010年頃〜：深層学習 3種類の機械学習 教師付き学習 ：人間が教師となり、コンピュータの学習を手伝う。 教師なし学習 ：コンピュータが人間の手を介さずに自発的に学習する。 強化学習 ：ロボットが人間の手を介さずに自発的に意思決定を行う。 まとめ 人工知能 ： 知的なコンピュータシステムを作る 数学・プログラミング・実世界応用をつなぐ架け橋 探索 ： 広大な探索空間を効率よく探索 機械学習 ： データの背後に潜む知識を発見","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html"},{"title":"分子生命科学Ⅲ 第2回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 神経系の構造と機能（2） 中枢神経系の構造・機能 中枢神経系(CNS; Central nervous system) は、神経系の中で 多数の神経細胞が集まって大きなまとまりになっている領域 であり、 1 と 2 からなる。 全てのCNSは、胚発生の初期段階で形成される、液で満ちた1本の管（→成人の 脳室系 ）の壁から発生する。 胚の始まりは、 3 ・ 4 ・ 5 と呼ばれる3つの異なる細胞層からなる平らな円盤でもある。 3 は、最終的に多くの内臓のもととなる。 4 からは骨と筋肉が発生する。 5 からは 神経系(Nervous system) と皮膚が発生する。 神経管(Neural tube) 形成 神経系 が起こる 5 部分、特に 5 に由来する板状の 6 に焦点を当てる。 6 は、発生にしたがってダイナミクスに形態変化する。 吻側 (ふんそく) から尾側に走る1本の溝である 7 が形成される。 この溝の壁である 8 は、その後背側で合わさって融合し、 9 を形成する。 8 が合わさる際に、一部の神経性外胚葉ははみ出して、ちょうど 9 の横にくる。この組織は、 10 と呼ばれる。 10 は、その下にある 11 （脊柱の33個の椎骨および関連する骨格筋となる）と関連して発達する。それゆえ、これらの骨格筋を支配する神経は 12 と呼ばれる。 全てのCNSは、 9 の壁から発生し、 末梢神経系(PNS; peripheral nervous system) に 細胞体 を持つ全てのニューロンは、 10 に由来する。 分化 発達の間に構造がさらに綿密に仕上げられ、特殊化されたものになる過程は 分化(differentiation) と呼ばれる。 脳における 分化 の第一段階は、 9 の吻側に起こる3つの隆起の発達であり、これらは 13 と呼ばれている。なお、 脳全体は 9 の3個の 13 に由来する。 3個の 13 は、引き続き発達を続ける。 前脳の分化(終脳、間脳；側脳室、第三脳室) 前脳では 14 （× 2）と 15 （× 2）と呼ばれる二次脳胞が両側に出て、残った不対の構造は 16 （× 1）と呼ばれる。 14 は、成長の後に陥入して 17 と 18 を形成する。これらは最終的に、人の左右の 19 と 20 になる。重要な点は、 眼球の裏の構造である 20 と、眼と 16 を連絡する 19 は脳の一部であり、PNS ではない ということである。 終脳と間脳の分化 15 は、2つの大脳半球からなる 21 を形成する。ここで、 21 は、次の4つの仕方で発達を続ける。 後方へ成長し、 16 の上および側方に位置するようになる。 （包み込む） 別の一対の小胞が大脳半球の腹側面から出て、 22 と嗅覚に関連する構造の元となる。 終脳胞壁の細胞は分裂し、様々な構造へ分化する。 白質系が発達し、 21 のニューロンから、あるいはこのニューロンへと軸索が伸展する。 大脳半球内にあり、液体で満たされている腔は 23 と呼ばれ、 16 の中心部にある腔は 24 と呼ばれる。 21 において 25 と 26 、 16 において 27 と 28 のそれぞれ2つの異なるタイプの 灰白室 を形成する。 なお、発達中の前脳のニューロンは 軸索 を伸ばして他の神経系の領域と連絡を行う。これらの軸索は、ともに束をなして3つの主な 白質系 を形成する。 29 は、 25 のニューロンに出入りして走るすべての軸索を含む 30 は、 29 に続いており、左右の大脳半球にある皮質ニューロンをつなぐ軸索で形成されている。 29 は、 31 にも続いており、これは皮質と脳幹、特に 27 と連絡している。 前脳の構造と機能の相関 前脳は知覚・意識的な気づき・認知・随意運動の場である。この全ては 脳幹 と 脊髄 の感覚および運動ニューロンとの広範な相互の神経連絡に依存している。 25 を始めとした皮質ニューロンは感覚情報を受け取り、外界についての認知を形成し、随意運動を命令する。この時、 各感覚経路は、皮質に向かう途中で 27 を中継する。 そのため、 27 はしばしば \"大脳皮質への入り口\" と称される。 なお、 22 のニューロンは、鼻腔内の化学物質を検出する細胞からの情報を受け取り、尾側にある 25 の部分へこの情報を伝達するため、 嗅覚だけは 27 を中継しない。 27 のニューロンは、しばしば 31 を経由して 25 へ軸索を送る。この時、送る情報は身体の反対側に関するものである。（右足の感覚 → 左 27 → 左 31 の軸索 → 左皮質） 右脳と左脳が互いの情報を連絡する方法は、 30 の軸索による大脳半球間の連絡が最も重要である。 中脳の分化(中脳蓋、中脳被蓋；中脳水道) 前脳 とは異なり、脳の発達において 中脳は比較的分化が少ない。 中脳胞の背側面は 32 になる。 中脳胞の腹側面は 33 になる。 両者の中間にあり、 34 で満たされている腔は、 35 と呼ばれる水路である。これは、吻側で終脳の 24 と接続する。 中脳の構造と機能の相関 見た目は上記の通り簡潔だが、「脊髄・前脳間の情報伝達に加え、感覚系、運動制御、およびその他の機能」など、役割は多様である。 33 は2つの構造に分化する。 36 は、眼から直接入力を受けるので、 視蓋(optic tectum) とも呼ばれる。視蓋の機能として、眼球の運動の制御などがある。 37 は、耳からの情報を受ける。 33 は、 黒質(substantia nigra) と 赤核(red nucleus) の両方があるため、脳の中で最も色彩に富む領域の1つである。これら2つの細胞群は随意運動の制御に関わる。 その他の細胞群は、CNSの大部分に広く投射する軸索を持ち、その機能は意識や気分、快、痛みの調節機能に関わる。 菱脳の分化(小脳、橋、延髄；第四脳室) 菱脳は「 38 ・ 39 ・ 40 （ 41 ）」の3つの重要な構造に分化する。 なお、菱脳の中にある 34 で満たされた管は、 35 から続くもので、 42 となる。 菱脳の構造と機能の相関 中脳と同様に、菱脳も脊髄・前脳間を流れる情報が通る。これに加えて、感覚情報の加工や随意運動の制御、および自律神経系の調節などを行う。 38 は重要な運動制御中枢である。 38 は大量の軸索入力を受けているが、経路によって受け取る情報が異なる。 脊髄からの入力は、身体の空間的な位置についての情報をもたらす。 25 からの情報は、 39 で中継されて入力される。これは、意図した運動の目標を知らせるものである。 38 はこの情報を比較処理して、運動目標の達成に求められる一連の筋収縮過程を計算する。したがって、 38 が障害されると、調和の取れない不正確な運動となる。 逆に、中脳を通って下行する軸索のうち、90%以上が 39 のニューロンにシナプス結合し、 39 の細胞はこの情報の全てを反対側の 38 へ中継する。 このように、 39 は 25 と 38 をつなぐ大規模な配電盤のような働きをする。 脊髄の分化(脊髄；中心管) 以下の図に示すように、尾側にある 9 から脊髄への変形は、脳の分化に比べればさほど複雑ではない。管壁の組織の増加により、神経管の内腔は押されて、 34 で満たされた細い 43 となる。 横断面で見ると、中心にある脊髄の 灰白室 （ここにニューロンが存在する）は蝶のような形をしている。 蝶の羽の上部に相当する部は 44 であり、このニューロンは後根線維からの感覚入力を受ける。 下部は 45 であり、このニューロンは筋肉を支配する前根線維に軸索を投射する。 これらの間は 46 であり、このニューロンは感覚入力や脳からの命令に応じて運動出力を形成する介在ニューロンである。 統合 ここまで個別に見てきた部分を組み合わせて、中枢神経系全体を組み立てる。以下は、ヒトを含めた全哺乳動物における中枢神経系の基本設計図を単純化した模式図である。 21 の一対の大脳半球が側脳室を囲む。 側脳室の腹側および側面には大脳基底核（基底核）がある。 側脳室は 16 の 24 に続いている。 この 24 を囲むのは 27 と 28 である。 24 は 35 に続いている。 35 の背側には 32 があり、腹側には 33 がある。 35 が繋がるのは菱脳の中心にある 42 である。 42 の背側に 38 が突き出ており、腹側には 39 と 40 がある。 |脳室名|関連した脳の構造| |:-|:-| |側脳室|大脳皮質、終脳基底部| |第三脳室|視床、視床下部| |中脳水道|中脳蓋、中脳被蓋| |第四脳室|小脳、橋、延髄| ヒトの中枢神経系の特徴 これまで、 全ての哺乳類に適用される中枢神経系の基本設計 について見てきた。ここでは、ラットとヒトの脳を比較することで、類似点と相違点に目を向ける。 類似点 脳を背側から見ると、双方の終脳には対をなした半球がある。 脳を正中面から見ると、終脳は間脳の吻側にある。 間脳は第三脳室を囲み、中脳は中脳水道を囲み、菱脳の小脳、橋、延髄は第四脳室を囲んでいる。 小脳の下で橋が膨らんでおり、小脳は構造的に精巧である。 相違点 大脳表面にある皺 (しわ) の数。大脳表面の溝は 47 と呼ばれ、隆起は 48 と呼ばれるが、これらはヒト胎生期の大脳表面の凄まじい拡大の結果生じる。頭蓋容量の制限に適合するために折り曲がり、皺を作らなければならないのである。この大脳皮質の表面積の増加が、ヒトの脳の \"歪み\" を生み出す原因の1つだが、大脳皮質がヒトの思考や認知の唯一の座であることが示されている。 ラットに比べ、ヒトの嗅球は小さい。一方で、ヒトの脳の大脳半球は大きく膨らんでいる。 大脳の各葉のうち、4つは近くにある頭蓋骨の名称から取られている。 |葉|頭蓋骨|機能| |:-:|:-:|:-| |前頭葉|前頭骨|運動に関わる領域（一次運動野、前運動野、前頭眼野）・発話に関わる領域（ブローカ野）・計画などに関わる領域（前頭前野）| |側頭葉|側頭骨|聴覚に関わる領域（一次聴覚野、ウェルニッケ野）、視覚中の対象の情報（腹側皮質視覚路）| |頭頂葉|頭頂骨|体性感覚に関わる領域（一次体性感覚皮質）、視覚中の対象の位置情報（背側皮質視覚路）| |後頭葉|後頭骨|視覚に関わる領域（視覚野）| |辺縁葉||情動に関わる領域、記憶に関わる領域（海馬）| |島葉|||","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-2.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-2.html"},{"title":"Pair HMM","text":"※実装時のパラメータ PairHMMによるアラインメントを実装していく。なお、 （ kerasy.Bio.alignment.PairHMM ） に定義してあります。 In [1]: from kerasy.Bio.alignment import PairHMM In [2]: # サンプル配列 seqX = \"CCAGAGCTGTGGCAGACAGTGGCT\" seqY = \"CCAGCTGTGCAGACACTGGCTT\" In [3]: model = PairHMM () In [4]: ! cat params.json { \"delta\": \"1/10\", \"epsilon\": \"1/5\", \"tau\": \"1/30\", \"px_e_y\": \"1/8\", \"px_ne_y\": \"1/24\", \"qx\": \"1/4\", \"qy\": \"1/4\" } In [5]: model . set_params ( path = \"params.json\" ) Pair HMM とその利点 HMMのために開発されたアルゴリズムを使える。（らしい←正解ラベルの無いアラインメントでBaum-Welchアルゴリズムをどのように使うのかは現在考察中です。） アラインメントの確率的な解釈が可能になる。 グローバルアラインメントを出力する Pair-HMM Mは $x$ と $y$ がマッチした状態。（$x_i$ と $y_j$ がアライン） Xは $x$ に挿入が起きている状態。（$x_i$ と $-$ がアライン） Yは $x$ に欠失が起きている状態。（$-$ と $y_j$ がアライン） Pair HMMのためのViterbiアルゴリズム 2本数の配列 $x,y$ を与えると確率最大のアラインメントを求めるアルゴリズム。 Initialization: $$ \\begin{cases} V&#94;M(0,0)=1, V&#94;M(i,0)=V&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ V&#94;X(0,0)=0, V&#94;X(1,0)=\\delta q_{x_1} V&#94;X(i,0)=\\varepsilon q_{x_i}V&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ V&#94;Y(0,0)=0, V&#94;Y(0,1)=\\delta q_{y_1} V&#94;Y(0,j)=\\varepsilon q_{y_j}V&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} V&#94;M(i,j) &= p_{x_iy_j}\\max\\begin{cases}(1-2\\delta-\\tau)V&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;Y(i-1,j-1)\\end{cases}\\\\ V&#94;X(i,j) &= q_{x_i}\\max\\begin{cases}\\delta V&#94;M(i-1,j)\\\\\\varepsilon V&#94;X(i-1,j)\\end{cases}\\\\ V&#94;Y(i,j) &= q_{y_j}\\max\\begin{cases}\\delta V&#94;M(i,j-1)\\\\\\varepsilon V&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$v_e = \\tau\\max\\left(V&#94;M(n,m),V&#94;X(n,m),V&#94;Y(n,m)\\right)$$ In [6]: P_optimal = model . align ( seqX , seqY , return_score = True ) Pair HMM (Viterbi) Alignment score: 3.551370651291424e-30 |parameter| value | -------------------------------- |delta | 0.1| |epsilon | 0.2| |tau | 0.03333333333333333| |px_e_y | 0.125| |px_ne_y |0.041666666666666664| |qx | 0.25| |qy | 0.25| =============================================================== X: CCAGAGCTGTGGCAGACAGTGGC-T Y: CC--AGCTGT-GCAGACACTGGCTT =============================================================== In [7]: print ( f \"π*= { P_optimal } \" ) π*=3.551370651291424e-30 アラインメントの信頼性 配列 $x,y$ が与えられた時、アラインメント $\\pi$ が得られる条件付き確率を考えることができ、それが アラインメントの信頼度 を表していると考ることができる。 $$ P(\\pi|x,y) = \\frac{P(x,y,\\pi)}{P(x,y)}\\\\ P(x,y) = \\sum_{\\text{alignments }\\pi}P(x,y,\\pi) $$ ※ なお、ここで $P(x,y)$ は $x,y$ に関する全ての可能なアラインメントについて確率を足し合わせたもの であり、Forwardアルゴリズムで計算することができる。 Pair HMMのためのForwardアルゴリズム ※ Viterbiの $\\max$ を $\\text{sum}$ に変更しただけ。 Initialization: $$ \\begin{cases} F&#94;M(0,0)=1, F&#94;M(i,0)=F&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ F&#94;X(0,0)=0, F&#94;X(1,0)=\\delta q_{x_1} F&#94;X(i,0)=\\varepsilon q_{x_i}F&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ F&#94;Y(0,0)=0, F&#94;Y(0,1)=\\delta q_{y_1} F&#94;Y(0,j)=\\varepsilon q_{y_j}F&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} F&#94;M(i,j) &= p_{x_iy_j}\\text{sum}\\begin{cases}(1-2\\delta-\\tau)F&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;Y(i-1,j-1)\\end{cases}\\\\ F&#94;X(i,j) &= q_{x_i}\\text{sum}\\begin{cases}\\delta F&#94;M(i-1,j)\\\\\\varepsilon F&#94;X(i-1,j)\\end{cases}\\\\ F&#94;Y(i,j) &= q_{y_j}\\text{sum}\\begin{cases}\\delta F&#94;M(i,j-1)\\\\\\varepsilon F&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$F_e = \\tau\\ \\text{sum}\\left(F&#94;M(n,m),F&#94;X(n,m),F&#94;Y(n,m)\\right)$$ In [8]: F , P_all = model . forward ( seqX , seqY ) In [9]: print ( f \"𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)= { P_all } \" ) 𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)=2.0457988072916236e-28 In [10]: print ( f \"P(π*|x, y)= { P_optimal / P_all } \" ) P(π*|x, y)=0.017359334840912267 $x_i$ と $y_j$ がアラインされる確率 次の式で表される。 $$ \\begin{aligned} P(x_i\\diamondsuit y_i|x,y) &= \\frac{\\sum_{\\pi\\in\\Omega_{ij}}P(x,y,\\pi)}{P(x,y)}\\\\ &= \\frac{F&#94;M(i,j)\\cdot B&#94;M(i,j)}{P(x,y)} \\end{aligned}$$ ※ $\\Omega_{ij}$：$x_i$ と $y_j$ がアラインされるアラインメントの集合 Pair HMMのためのBackwardアルゴリズム Needleman-Wunsh-Gotoh のBackwardアルゴリズムとの類似性に注目！ Initialization: $$ \\begin{cases} B&#94;M(n,m)=B&#94;X(n,m)=B&#94;Y(n,m)=\\tau\\\\ B&#94;X(i,m)=\\varepsilon q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;Y(i,m)=\\varepsilon q_{y_{j+1}}B&#94;X(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ B&#94;M(i,m)=\\delta q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;M(n,j)=\\delta q_{y_{j+1}}B&#94;Y(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ \\end{cases} $$ Recursion: $i=n-1,\\ldots,1,\\quad j=m-1,\\ldots,1$ $$ \\begin{aligned} B&#94;M(i,j) &= \\text{sum}\\begin{cases}(1-2\\delta-\\tau)p_{x_iy_j}B&#94;M(i+1,j+1)\\\\\\delta q_{x_{i+1}}B(i+1,j)\\\\\\delta q_{y_{j+1}}B&#94;Y(i,j+1)\\end{cases}\\\\ B&#94;X(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{x_{i+1}}B&#94;X(i+1,j)\\\\ B&#94;Y(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{y_{j+1}}B&#94;Y(i,j+1)\\\\ \\end{aligned} $$ In [11]: B = model . backward ( seqX , seqY ) In [12]: Pij = ( F * B ) / P_all In [13]: import seaborn as sns import matplotlib.pyplot as plt In [14]: sns . heatmap ( Pij ) plt . show () In [15]: # 可視化のために pandas を使用。 import pandas as pd r , c = Pij . shape pd . set_option ( 'display.max_rows' , r ) pd . set_option ( 'display.max_columns' , c ) In [16]: df = pd . DataFrame ( Pij ) In [17]: df Out[17]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 0 1.139605e+00 1.145169e-02 1.061625e-04 9.380071e-06 7.330898e-07 1.256616e-08 5.467340e-10 2.910714e-11 5.763005e-12 3.410212e-13 5.102192e-15 2.187247e-16 1.988821e-17 1.147484e-18 1.367416e-20 6.720910e-22 4.976161e-24 7.098501e-26 9.237930e-28 2.211060e-29 3.898762e-32 1.763484e-40 1 1.002452e-01 9.915333e-01 6.192125e-03 1.868999e-04 4.332564e-05 9.546525e-07 4.066396e-08 2.157028e-09 9.465879e-11 4.846141e-11 4.058759e-13 3.267685e-14 8.754145e-16 1.928520e-16 1.373420e-18 1.082830e-19 9.927246e-22 1.394016e-23 1.508549e-25 4.777080e-27 9.963503e-30 8.788027e-38 2 2.530997e-02 1.110298e-01 7.189425e-01 4.724160e-03 2.510915e-04 4.961792e-05 1.187062e-06 1.017255e-07 3.970235e-09 2.068131e-10 9.703401e-11 7.255597e-13 1.565563e-13 2.611280e-15 3.254769e-16 2.694314e-18 1.079695e-19 1.562036e-21 1.545424e-23 1.735256e-25 1.265060e-27 2.215960e-35 3 1.439692e-03 1.313691e-01 9.101842e-02 4.446381e-01 5.912097e-03 3.126913e-04 8.585244e-05 1.538885e-06 1.919091e-07 8.250641e-09 2.393023e-10 1.283784e-10 1.387610e-12 2.250638e-13 4.821068e-15 2.111543e-16 4.457287e-18 2.448800e-19 3.227733e-21 1.284984e-23 8.240296e-26 3.335362e-33 4 3.517101e-05 3.000139e-03 4.131934e-01 8.504087e-02 1.663724e-01 9.561056e-03 2.917045e-04 9.039141e-05 1.788740e-06 1.312414e-07 2.869640e-08 4.101759e-10 1.507867e-10 3.456004e-12 5.959996e-13 5.757530e-15 2.024716e-16 4.111221e-18 7.279991e-20 1.060049e-21 6.121304e-24 4.843531e-31 5 9.934762e-06 1.458875e-04 3.927027e-03 6.740773e-01 8.441291e-02 7.234362e-02 1.094905e-02 1.879103e-04 1.252776e-04 1.454564e-06 1.059818e-07 2.729047e-08 9.494833e-10 8.082013e-11 1.033243e-11 3.411004e-13 6.554134e-15 3.958672e-16 8.201302e-18 3.482706e-20 2.714352e-22 4.461969e-29 6 5.322130e-07 6.381400e-05 4.257593e-04 6.688387e-03 9.174344e-01 4.917686e-02 4.329939e-02 3.819221e-03 1.763480e-04 1.328334e-04 1.940120e-06 9.105133e-08 1.541103e-08 2.609538e-09 8.150731e-11 2.404569e-11 1.889654e-13 3.985572e-15 1.024288e-16 6.839760e-18 1.341414e-20 4.476503e-27 7 5.863612e-10 7.892422e-07 1.012986e-04 1.397365e-03 1.342858e-02 1.002812e+00 2.593641e-02 3.890025e-02 1.670263e-03 1.614886e-04 8.871868e-05 1.756325e-06 1.155298e-07 1.122902e-08 2.203971e-09 1.028948e-10 2.509711e-11 1.531285e-13 2.099939e-15 4.258022e-17 2.374690e-18 1.208869e-24 8 1.171184e-11 2.035729e-09 3.700419e-07 2.397639e-04 4.844063e-03 2.599346e-02 9.949710e-01 1.502418e-02 2.712144e-02 1.478651e-03 1.433184e-04 6.712671e-05 1.454730e-06 9.766789e-08 9.072910e-09 2.328874e-09 6.340026e-11 1.502027e-11 1.916941e-13 1.314758e-15 1.242412e-17 4.691715e-23 9 3.005919e-13 6.399055e-11 5.515662e-09 3.748097e-07 1.153167e-04 1.497122e-02 6.310820e-02 8.863944e-01 1.030851e-02 1.491223e-02 2.002265e-03 8.941933e-05 3.530505e-05 1.470719e-06 9.754840e-08 8.043302e-09 3.375435e-09 3.679377e-11 2.917845e-12 5.484419e-14 1.471719e-15 4.178025e-21 10 1.792807e-15 1.557812e-12 1.844985e-10 1.289502e-08 7.545128e-07 6.340240e-05 2.061627e-02 1.787166e-01 5.419262e-01 1.188051e-02 1.024380e-02 2.347055e-03 7.577232e-05 1.796622e-05 1.114937e-06 7.069534e-08 8.011504e-09 2.756012e-09 4.374664e-11 6.704524e-13 1.075503e-14 1.217530e-19 11 1.923711e-17 4.362099e-15 1.941124e-12 6.147024e-10 1.551641e-08 5.550653e-07 1.380449e-04 9.537258e-03 5.398937e-01 1.863598e-01 1.452105e-02 9.548898e-03 1.837989e-03 5.136835e-05 1.397535e-05 6.835406e-07 5.429499e-08 8.819330e-09 1.851138e-09 1.231506e-11 1.775772e-13 2.576473e-18 12 5.638842e-19 1.455168e-16 9.139939e-15 1.547158e-12 1.037887e-09 2.248539e-08 1.151600e-06 9.872926e-05 5.973776e-03 8.862574e-01 6.786997e-02 1.624026e-02 4.029496e-03 2.179139e-03 2.921118e-05 1.601828e-05 5.561847e-07 3.123249e-08 2.978327e-09 9.604760e-10 3.744283e-12 9.636167e-17 13 3.331427e-21 7.494769e-19 2.963338e-16 6.987305e-15 4.315679e-12 6.087761e-10 3.497465e-08 3.604967e-06 8.639915e-05 5.915526e-03 9.923696e-01 2.749764e-02 2.345296e-02 2.411435e-03 1.600356e-03 2.967960e-05 1.263876e-05 5.535990e-07 1.777340e-08 1.086922e-09 1.497803e-10 4.715717e-15 14 8.334075e-23 3.113616e-20 1.885485e-18 4.096232e-16 1.085250e-14 2.877122e-12 9.801182e-10 2.465783e-08 7.111413e-06 1.332057e-04 5.532024e-03 1.019408e+00 1.546140e-02 2.230611e-02 1.326417e-03 7.657518e-04 3.756285e-05 1.397395e-05 7.084890e-07 8.614586e-09 3.251784e-10 1.560898e-13 15 2.761536e-24 1.577325e-22 1.652226e-19 6.855680e-18 4.640406e-16 1.789313e-14 1.881340e-12 7.696555e-10 3.721167e-08 3.131924e-06 2.768933e-04 5.432195e-03 1.019385e+00 1.220031e-02 2.678270e-02 1.012065e-03 4.234835e-04 2.691482e-05 8.312535e-06 2.735984e-07 4.296980e-09 1.264609e-12 16 1.125679e-25 3.526855e-23 5.295754e-22 1.029758e-19 2.954167e-17 8.415539e-16 3.337555e-14 1.886064e-12 3.708635e-10 8.103999e-08 2.979865e-06 2.717052e-04 5.867388e-03 1.008690e+00 1.398136e-02 2.796359e-02 1.094449e-03 2.222028e-04 1.653854e-05 6.727102e-06 7.321521e-08 3.095212e-11 17 5.314132e-29 1.371847e-25 1.002377e-22 1.431441e-21 2.329882e-19 2.824449e-17 1.264033e-15 1.039492e-13 1.896385e-12 2.117496e-10 8.676212e-08 1.428983e-06 4.224040e-04 7.551663e-03 9.828098e-01 2.577489e-02 2.154489e-02 1.348560e-03 1.271999e-04 1.123527e-05 1.554246e-06 1.061734e-09 18 1.311292e-30 3.344026e-28 1.039987e-25 1.917693e-22 4.842995e-21 2.644625e-19 5.424283e-17 1.016892e-15 2.466777e-13 3.876336e-12 1.412328e-10 6.644843e-08 1.307534e-06 2.267450e-04 1.352321e-02 9.236001e-01 4.123399e-02 2.242045e-02 1.780378e-03 1.137684e-04 4.658387e-06 2.707169e-08 19 3.685034e-32 1.308860e-29 1.727006e-27 1.846830e-25 9.168694e-23 2.025241e-20 2.015727e-19 7.009128e-17 1.110761e-15 2.135974e-13 8.991483e-12 3.294862e-10 2.170110e-08 1.342768e-06 1.738901e-04 1.366663e-02 9.157034e-01 5.085192e-02 1.134612e-02 1.333942e-03 1.601513e-04 7.755075e-07 20 2.627187e-34 3.307561e-31 6.412082e-29 8.638204e-27 5.130913e-25 5.421429e-23 2.735844e-20 4.581117e-19 4.673008e-17 1.996269e-15 1.567873e-13 2.425635e-11 7.144030e-10 2.339911e-08 4.401237e-07 1.583398e-04 8.993801e-03 8.715290e-01 1.032744e-01 9.301698e-03 8.040002e-04 1.264439e-05 21 3.712503e-36 1.248259e-33 7.484327e-31 4.015876e-28 1.275117e-26 7.126689e-25 1.294296e-22 1.126902e-20 1.562753e-18 3.245370e-17 8.822502e-16 3.618329e-13 1.719160e-11 9.436607e-10 3.634534e-08 4.567520e-07 2.489897e-05 1.031566e-02 8.313752e-01 1.337435e-01 9.529909e-03 1.755113e-04 22 1.081603e-37 4.975375e-35 3.859345e-33 1.396911e-30 8.994506e-28 2.233130e-26 1.907603e-24 1.395483e-22 7.223861e-21 2.385762e-18 3.020013e-17 1.437842e-15 1.876938e-13 2.135337e-11 5.432165e-10 7.346489e-08 4.608162e-07 1.776497e-05 2.915009e-03 7.255898e-01 2.520881e-01 4.862597e-03 23 7.053935e-40 3.695478e-37 9.639089e-35 1.470014e-32 2.795455e-30 1.235666e-27 2.213410e-26 7.771768e-24 1.829949e-22 1.539068e-20 1.623359e-18 3.985091e-17 3.521057e-15 1.986472e-13 1.486597e-11 3.334896e-10 7.576041e-08 5.116867e-07 2.834710e-05 1.528768e-03 3.676275e-01 6.239253e-01 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-6.html"},{"title":"生物物理学 第2回","text":"講師： 樋口秀男 生命体（生物）の一般的定義 生物とは、以下の四つの条件を満たす物質システム 自己と外界との境界 エネルギーと物質の代謝 自己複製 恒常性 電子 分子 細胞数 整体の階層性 $10&#94;{28}$ $10&#94;{23}$ $10&#94;{13}$ ヒト 意識・運動・代謝 $10&#94;{24}$ $10&#94;{19}$ $10&#94;{9}$ 心臓 循環・拡散 $10&#94;{15}$ $10&#94;{10}$ $10&#94;{0}$ 心筋細胞 生理的なリズム単位 $10&#94;{5}$ $10&#94;{5}$ 筋節 ゆらぎを制した振動 $10&#94;{0}$ タンパク質 反応のゆらぎ $10&#94;{2}$ アミノ酸 タンパク質の性質の起源 $10&#94;{0}$ 電子 量子力学の支配領域 生命科学を覆う謎 生命誕生の謎（+生命の進化、分化の謎） タンパク質構造の決定と機能との関係の謎 細胞が超多種分子（タンパク質、脂質、小分子、イオン、…）の濃度・種類・機能の制御を行う謎 個体（臓器、器官等）の構造と機能構築の謎 生命誕生の謎 元素誕生は超新星の爆発→重金属ができる。 現宇宙の元素の割合と人体内の元素比が非常に似通っている。 RNAワールド プロテインワールド 原始地球上に存在したと仮定される、RNA からなる自己複製系のこと。また、これがかつて存在し、現生生物へと進化したという仮説。 まずアミノ酸ができ、重合してポリペプチド、さらにタンパク質が作り出され、これが触媒として働いて生命を作り出したという仮説。 生命誕生を示唆した実験事実 ミラーの放電によるアミノ酸合成(1953) $\\mathrm{CH_3,NH_3,H_2,H_2O}$ を含む気体に放電（落雷を模した）をする。 実験２週間後に以下の化合物 （アミノ酸） ができた。 グリシン アラニン グルタル酸 酢酸（脂肪酸） 塩基や糖（リボース）、核酸基、RNA、タンパク質なども化学合成可能。 生命基本物質の化学合成が成功した理由 地球には、エネルギーの高い（海底火山、紫外線、雷、高音）場所と低く安定な場所が共存していたので、分子は 高エネルギー環境で合成され、低エネルギー環境で安定化する ことができた。 $$A\\overset{k_1}{{\\longrightarrow}}B\\overset{k_2}{{\\longrightarrow}}C$$ In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: def simulate ( ax , color , tp , A = 1 , B = 0 , C = 0 , dt = 1e-3 , k1 = 0.07 , k2 = 0.02 , K = 1 ): time = np . arange ( 0 , 100 , dt ) As = np . zeros ( shape = len ( time )) Bs = np . zeros ( shape = len ( time )) Cs = np . zeros ( shape = len ( time )) for i , t in enumerate ( time ): dA = ( - k1 * A ) * dt * K dB = ( k1 * A - k2 * B ) * dt * K dC = ( k2 * B ) * dt * K A += dA ; B += dB ; C += dC As [ i ] = A ; Bs [ i ] = B ; Cs [ i ] = C if t > tp : K = 1e-6 # 温度を下げ、反応速度が1e-6倍になったことをシミュレーション ax . plot ( time , As , color = color ) ax . plot ( time , Bs , color = color ) ax . plot ( time , Cs , color = color ) if tp < 100 : ax . vlines ( x = tp , ymin = 0 , ymax = 1 , linestyle = \":\" ) return ax In [3]: fig , ax = plt . subplots () ax = simulate ( ax = ax , color = \"red\" , tp = 20 ) ax = simulate ( ax = ax , color = \"black\" , tp = 100 ) ax . set_xlabel ( \"Time\" ) ax . set_ylabel ( \"RQ\" ) ax . set_title ( \"Simulation Result\" ) plt . show () 上記のシミュレーション結果から、$A,B$ 分子を得るためには、 途中で（温度が下がるなどの結果）反応速度が下がる必要がある ことがわかる。 生体分子が濃縮され、多次反応による分子合成速度が上がった。 地球は巨大で多様な反応槽であったため、合成確率が上がった。 考えられる生物 地球型炭素生物 地球環境のように水と二酸化炭素（あるいはメタン）が豊富な惑星であるなら、情報記憶（DNA）→伝令（mRNA）→機能（タンパク質、RNA）のような地球型の仕事を分担した炭素生物が生まれる可能性は高い。 炭素生物 vs ケイ素生物 常温常圧で安定な炭素ー炭素結合 とは違い、 ケイ素ーケイ素結合はパイ結合やシグマ結合による二重三重結合を作る傾向がほとんど無く、非常に不安定 である。 炭素ーケイ素結合は安定 なので、炭素生物の中にケイ素が含まれるだろう。したがって、ケイ素生物の存在する確率は非常に低い。 金属生物 常温において金属結合が安定であり、分子としての機能を持つことは困難であるため、生物の中心にはならないだろう。ただし、金属イオンや錯体として、炭素生物やケイ素生物に利用されることはありうる。 講義のまとめ 生命分子や細胞の種類は多く、構造や機能をどのように理解するかが、 生命科学全体の 課題である。 生命は 宇宙の元素を効率よく利用した。 地球上の 高↔︎低エネルギーを行き交い 、多様な環境や濃縮により高確率かつ安定的に生体分子が合成された。 これが生命の誕生の確率を大きくした。 初めにRNAが合成され、それを鋳型としてタンパク質が合成され、原子生命が誕生したと想像される。 系外惑星にも、炭素生命体が存在する可能性がある。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html"},{"title":"ペアワイズアラインメント","text":"ペアワイズアラインメントとは 2本のDNAの塩基配列（タンパク質のアミノ酸配列）を比較する方法の一つ バイオインフォマティクスでは最も基本的な解析手法 なぜDNA配列の比較をするのか DNAの機能を知りたい （∵ DNAの配列が似ていると機能が似ている） DNAのどの部分が重要かを知りたい。 （∵ 「保存されている＝重要」だと考えられる） 生物の進化系統樹を知りたい 新型シーケンサーで読まれたDNAの由来を知りたい DNAの変異や新型シークエンサーの読み取りエラーでは 長さが異なる ことがあるので、 長さの変化を考慮し効率の良い動的計画法 を用いる アラインメントの種類 説明 例 グローバルアラインメント 2本の配列の 全体 をアラインメントする。 Needleman-Wunsch ローカルアラインメント 2本の配列の 似ている部分を検出 し、その部分をアランメントする Smith-Waterman 実装 各種アラインメントを実装していく。なお、全て Affine gap penalty を利用する。 In [1]: from kerasy.Bio.alignment import NeedlemanWunshGotoh , SmithWaterman , BackwardNeedlemanWunshGotoh In [2]: # サンプル配列 seqX = \"GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACGGAGCTGTGGCAGACCTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGCGAGGACTG\" seqY = \"CGCATGCGGAGTGAGGGGAGCAGTTGGGAACAGATGGTCCCGCCGAGGGACCGGTGGGCAGACGGGGCCAGCTGTGGCAGACACTGGCTTCTAACCACCGAACGTTCTTTCCGCTCCGC\" Needleman-Wunsch-Gotoh 自作のモジュール （ kerasy.Bio.alignment.NeedlemanWunshGotoh ） を使ってアラインメントをします。 In [3]: model = NeedlemanWunshGotoh () In [4]: model . align ( seqX , seqY ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== Smith-Waterman 自作のモジュール （ kerasy.Bio.alignment.SmithWaterman ） を使ってアラインメントをします。 In [5]: model = SmithWaterman () In [6]: model . align ( seqX , seqY ) Smith-Waterman Alignment score: 37.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== Aligned positions: X[0,111] Y[7,118] X: GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACG Y: GGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GGGCAGACG X: G----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGC Y: GGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCTCCGC =============================================================== 制約付きアラインメント $x_i$ と $y_j$ がアラインされるという制約下で最大のアラインメントスコアを求める。 全てのパターンを列挙すると $\\mathcal{O}(n&#94;2m&#94;2)$ の時間がかかるが、 後ろ向きアラインメント と組み合わせることで全てのパターンを $\\mathcal{O}(nm)$ で計算可能。 前向き：xiとyjがアラインされる時の、iまでとjまでの配列の最大アラインメントスコアを保持。 後ろ向き：xiとyjがアラインされる時の、i+1以降とj+1以降の配列の最大アラインメントスコアを保持。 Needleman-Wunsch-Gotohの逆向きアラインメントは （ kerasy.Bio.alignment.BackwardNeedlemanWunshGotoh ） に定義してあります。 In [7]: model_forward = NeedlemanWunshGotoh () model_backward = BackwardNeedlemanWunshGotoh () In [8]: model_forward . align ( seqX , seqY , memorize = True ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== In [9]: model_backward . align ( seqX , seqY , memorize = True ) Backward Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGGAACA-GATGGTCC-CGCCGAGGGACCGGTGG- X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTTC-TAACCACCGAACGTTCTTTCCG-CT X: CCGCGAGGACT Y: CCGC------- =============================================================== In [10]: k = 3 n = len ( seqX ) + 1 m = len ( seqY ) + 1 In [11]: M = model_forward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] bM = model_backward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] In [12]: A = M + bM In [13]: # 上の配列を見れば、seqX[0] と seqY[7] がアラインされている時に最大スコア14を取ることがわかるので、それを確かめる。 print ( A [ 0 , 7 ]) 14.0 In [14]: # 可視化のために pandas を使用。 import pandas as pd pd . set_option ( 'display.max_rows' , m ) pd . set_option ( 'display.max_columns' , n ) In [15]: df = pd . DataFrame ( A ) In [16]: df Out[16]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 0 12.0 10.0 8.0 8.0 8.0 10.0 8.0 14.0 7.0 2.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -17.0 -20.0 -25.0 -26.0 -31.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -51.0 -54.0 -55.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -129.0 -132.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -150.0 -156.0 -156.0 -159.0 -160.0 -163.0 -164.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -181.0 -184.0 -187.0 -190.0 -193.0 -194.0 -197.0 -198.0 -201.0 -200.0 -203.0 -206.0 -209.0 -210.0 -211.0 -214.0 -217.0 -218.0 -221.0 -224.0 -225.0 -228.0 -229.0 -230.0 -235.0 -238.0 -241.0 -242.0 -243.0 -246.0 1 5.0 12.0 8.0 6.0 6.0 8.0 8.0 8.0 14.0 5.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -14.0 -17.0 -22.0 -25.0 -26.0 -33.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -53.0 -54.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -131.0 -132.0 -135.0 -140.0 -141.0 -144.0 -147.0 -148.0 -150.0 -157.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -171.0 -174.0 -179.0 -180.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -200.0 -203.0 -206.0 -211.0 -210.0 -211.0 -216.0 -217.0 -220.0 -223.0 -224.0 -227.0 -228.0 -229.0 -232.0 -237.0 -240.0 -243.0 -242.0 -243.0 2 2.0 3.0 10.0 8.0 6.0 6.0 6.0 6.0 6.0 14.0 3.0 0.0 -3.0 -4.0 -9.0 -12.0 -13.0 -16.0 -17.0 -24.0 -27.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -47.0 -48.0 -53.0 -54.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -125.0 -126.0 -131.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -150.0 -150.0 -157.0 -156.0 -159.0 -158.0 -163.0 -166.0 -169.0 -172.0 -171.0 -176.0 -177.0 -180.0 -183.0 -184.0 -187.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -200.0 -203.0 -204.0 -209.0 -210.0 -213.0 -214.0 -217.0 -220.0 -221.0 -224.0 -225.0 -228.0 -231.0 -234.0 -237.0 -238.0 -241.0 -242.0 3 -1.0 2.0 3.0 8.0 6.0 6.0 4.0 6.0 6.0 4.0 14.0 1.0 0.0 -5.0 -4.0 -9.0 -12.0 -13.0 -18.0 -17.0 -24.0 -29.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -49.0 -48.0 -55.0 -56.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -127.0 -126.0 -133.0 -136.0 -137.0 -142.0 -143.0 -146.0 -150.0 -151.0 -150.0 -157.0 -156.0 -159.0 -160.0 -165.0 -166.0 -169.0 -172.0 -171.0 -176.0 -179.0 -182.0 -185.0 -186.0 -187.0 -192.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -209.0 -212.0 -213.0 -216.0 -217.0 -220.0 -223.0 -224.0 -225.0 -230.0 -233.0 -236.0 -239.0 -238.0 -241.0 4 -4.0 -3.0 0.0 1.0 8.0 4.0 4.0 2.0 4.0 4.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -11.0 -14.0 -15.0 -20.0 -19.0 -22.0 -27.0 -26.0 -29.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -60.0 -63.0 -64.0 -67.0 -66.0 -69.0 -68.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -87.0 -92.0 -91.0 -94.0 -95.0 -100.0 -103.0 -100.0 -105.0 -106.0 -109.0 -112.0 -113.0 -116.0 -119.0 -118.0 -121.0 -124.0 -127.0 -128.0 -131.0 -136.0 -137.0 -142.0 -145.0 -148.0 -148.0 -153.0 -150.0 -155.0 -156.0 -159.0 -160.0 -165.0 -168.0 -169.0 -170.0 -171.0 -176.0 -177.0 -182.0 -185.0 -186.0 -189.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -220.0 -221.0 -224.0 -227.0 -228.0 -233.0 -234.0 -237.0 -238.0 5 -7.0 -4.0 -3.0 -2.0 -1.0 8.0 2.0 4.0 4.0 2.0 4.0 2.0 14.0 1.0 0.0 -3.0 -6.0 -9.0 -14.0 -15.0 -20.0 -21.0 -20.0 -25.0 -26.0 -29.0 -32.0 -33.0 -36.0 -39.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -59.0 -60.0 -61.0 -64.0 -65.0 -64.0 -67.0 -66.0 -73.0 -74.0 -77.0 -76.0 -81.0 -78.0 -83.0 -84.0 -85.0 -90.0 -91.0 -92.0 -95.0 -98.0 -101.0 -98.0 -103.0 -106.0 -107.0 -110.0 -111.0 -114.0 -117.0 -118.0 -121.0 -122.0 -127.0 -130.0 -131.0 -136.0 -137.0 -140.0 -144.0 -147.0 -146.0 -151.0 -150.0 -153.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -173.0 -176.0 -179.0 -182.0 -183.0 -184.0 -187.0 -190.0 -191.0 -190.0 -195.0 -198.0 -201.0 -200.0 -203.0 -206.0 -207.0 -210.0 -213.0 -214.0 -217.0 -218.0 -219.0 -224.0 -227.0 -230.0 -233.0 -232.0 -235.0 6 -10.0 -9.0 -6.0 -3.0 -4.0 -1.0 6.0 2.0 2.0 4.0 2.0 2.0 2.0 14.0 1.0 -2.0 -5.0 -8.0 -9.0 -14.0 -17.0 -18.0 -23.0 -20.0 -23.0 -28.0 -31.0 -34.0 -33.0 -34.0 -37.0 -38.0 -43.0 -44.0 -49.0 -52.0 -55.0 -56.0 -57.0 -58.0 -61.0 -64.0 -66.0 -62.0 -65.0 -66.0 -71.0 -74.0 -77.0 -76.0 -79.0 -76.0 -81.0 -84.0 -85.0 -88.0 -91.0 -94.0 -97.0 -96.0 -99.0 -98.0 -101.0 -104.0 -107.0 -110.0 -113.0 -114.0 -115.0 -116.0 -121.0 -124.0 -127.0 -130.0 -133.0 -136.0 -139.0 -141.0 -142.0 -147.0 -146.0 -149.0 -148.0 -153.0 -156.0 -159.0 -162.0 -163.0 -166.0 -167.0 -170.0 -173.0 -174.0 -177.0 -180.0 -183.0 -182.0 -187.0 -188.0 -191.0 -190.0 -193.0 -196.0 -199.0 -200.0 -203.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -218.0 -221.0 -224.0 -227.0 -228.0 -231.0 -232.0 7 -13.0 -10.0 -9.0 -8.0 -5.0 -2.0 -1.0 6.0 2.0 0.0 4.0 0.0 2.0 1.0 14.0 3.0 0.0 -3.0 -8.0 -9.0 -14.0 -17.0 -18.0 -22.0 -18.0 -21.0 -26.0 -29.0 -32.0 -33.0 -34.0 -37.0 -38.0 -43.0 -46.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -59.0 -64.0 -64.0 -60.0 -63.0 -66.0 -69.0 -72.0 -75.0 -76.0 -77.0 -74.0 -79.0 -82.0 -83.0 -86.0 -89.0 -94.0 -95.0 -96.0 -97.0 -98.0 -99.0 -102.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -121.0 -124.0 -125.0 -130.0 -131.0 -134.0 -139.0 -139.0 -142.0 -145.0 -146.0 -147.0 -150.0 -153.0 -154.0 -157.0 -160.0 -163.0 -164.0 -167.0 -170.0 -173.0 -176.0 -177.0 -180.0 -181.0 -184.0 -185.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -204.0 -207.0 -208.0 -211.0 -212.0 -213.0 -218.0 -221.0 -224.0 -225.0 -226.0 -229.0 8 -16.0 -13.0 -12.0 -11.0 -10.0 -5.0 -4.0 -1.0 6.0 0.0 2.0 2.0 2.0 0.0 3.0 14.0 3.0 0.0 -5.0 -6.0 -11.0 -14.0 -15.0 -18.0 -21.0 -16.0 -21.0 -26.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -52.0 -55.0 -56.0 -59.0 -64.0 -62.0 -60.0 -61.0 -66.0 -69.0 -72.0 -75.0 -74.0 -75.0 -74.0 -79.0 -80.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -95.0 -96.0 -99.0 -102.0 -105.0 -108.0 -109.0 -112.0 -113.0 -118.0 -121.0 -122.0 -127.0 -128.0 -131.0 -135.0 -138.0 -137.0 -142.0 -143.0 -144.0 -147.0 -150.0 -151.0 -154.0 -157.0 -160.0 -161.0 -164.0 -167.0 -170.0 -173.0 -174.0 -177.0 -178.0 -179.0 -182.0 -183.0 -186.0 -189.0 -190.0 -191.0 -194.0 -197.0 -198.0 -201.0 -204.0 -205.0 -208.0 -209.0 -210.0 -215.0 -218.0 -221.0 -222.0 -223.0 -226.0 9 -19.0 -16.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 4.0 2.0 0.0 2.0 0.0 2.0 3.0 14.0 3.0 -2.0 -3.0 -8.0 -11.0 -12.0 -17.0 -16.0 -19.0 -16.0 -21.0 -26.0 -27.0 -28.0 -31.0 -32.0 -37.0 -40.0 -39.0 -44.0 -47.0 -48.0 -49.0 -52.0 -53.0 -58.0 -57.0 -62.0 -62.0 -58.0 -61.0 -66.0 -69.0 -72.0 -73.0 -72.0 -75.0 -74.0 -77.0 -80.0 -83.0 -88.0 -89.0 -90.0 -95.0 -94.0 -93.0 -96.0 -99.0 -102.0 -105.0 -106.0 -109.0 -110.0 -115.0 -118.0 -119.0 -124.0 -125.0 -128.0 -132.0 -133.0 -136.0 -137.0 -140.0 -141.0 -144.0 -147.0 -148.0 -151.0 -154.0 -157.0 -158.0 -161.0 -164.0 -167.0 -170.0 -171.0 -174.0 -175.0 -178.0 -177.0 -180.0 -183.0 -186.0 -187.0 -188.0 -191.0 -194.0 -195.0 -198.0 -201.0 -202.0 -205.0 -206.0 -207.0 -212.0 -215.0 -218.0 -219.0 -220.0 -223.0 10 -22.0 -19.0 -18.0 -17.0 -16.0 -11.0 -10.0 -7.0 -4.0 -3.0 4.0 0.0 0.0 0.0 0.0 2.0 3.0 14.0 1.0 0.0 -5.0 -8.0 -9.0 -14.0 -15.0 -14.0 -19.0 -16.0 -21.0 -24.0 -25.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -44.0 -45.0 -46.0 -49.0 -50.0 -55.0 -58.0 -55.0 -62.0 -60.0 -58.0 -61.0 -66.0 -69.0 -70.0 -71.0 -72.0 -77.0 -72.0 -77.0 -80.0 -83.0 -88.0 -87.0 -90.0 -93.0 -92.0 -93.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -112.0 -115.0 -116.0 -121.0 -122.0 -125.0 -129.0 -130.0 -131.0 -136.0 -135.0 -138.0 -141.0 -144.0 -145.0 -148.0 -151.0 -154.0 -155.0 -158.0 -161.0 -162.0 -167.0 -168.0 -169.0 -172.0 -175.0 -176.0 -175.0 -180.0 -183.0 -186.0 -185.0 -188.0 -191.0 -192.0 -195.0 -198.0 -199.0 -202.0 -203.0 -204.0 -209.0 -212.0 -213.0 -218.0 -217.0 -220.0 11 -22.0 -24.0 -21.0 -18.0 -19.0 -16.0 -12.0 -12.0 -9.0 -4.0 -5.0 2.0 -2.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -13.0 -14.0 -19.0 -16.0 -19.0 -22.0 -23.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -42.0 -43.0 -46.0 -49.0 -52.0 -55.0 -58.0 -55.0 -60.0 -60.0 -58.0 -61.0 -66.0 -67.0 -68.0 -71.0 -74.0 -75.0 -72.0 -79.0 -82.0 -81.0 -86.0 -87.0 -88.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -120.0 -124.0 -127.0 -127.0 -128.0 -131.0 -134.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -151.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -168.0 -167.0 -172.0 -173.0 -176.0 -175.0 -178.0 -181.0 -184.0 -185.0 -188.0 -189.0 -192.0 -195.0 -196.0 -199.0 -200.0 -203.0 -206.0 -209.0 -212.0 -211.0 -216.0 -217.0 12 -28.0 -22.0 -24.0 -23.0 -20.0 -17.0 -16.0 -12.0 -10.0 -9.0 -4.0 -4.0 2.0 -4.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -11.0 -12.0 -17.0 -16.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -35.0 -36.0 -37.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -55.0 -58.0 -58.0 -56.0 -61.0 -64.0 -65.0 -66.0 -71.0 -72.0 -73.0 -70.0 -79.0 -80.0 -81.0 -84.0 -87.0 -86.0 -89.0 -90.0 -91.0 -94.0 -97.0 -100.0 -101.0 -106.0 -109.0 -110.0 -115.0 -116.0 -118.0 -124.0 -126.0 -127.0 -126.0 -131.0 -132.0 -135.0 -138.0 -139.0 -140.0 -145.0 -148.0 -149.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -166.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -179.0 -182.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -198.0 -203.0 -206.0 -209.0 -212.0 -209.0 -214.0 13 -29.0 -30.0 -22.0 -26.0 -25.0 -22.0 -17.0 -17.0 -12.0 -12.0 -10.0 -6.0 -4.0 0.0 -4.0 -2.0 -4.0 -3.0 -2.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -9.0 -12.0 -11.0 -12.0 -15.0 -14.0 -19.0 -22.0 -25.0 -28.0 -31.0 -34.0 -35.0 -34.0 -35.0 -38.0 -43.0 -44.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -60.0 -54.0 -59.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -70.0 -77.0 -78.0 -81.0 -82.0 -85.0 -88.0 -89.0 -92.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -124.0 -127.0 -124.0 -129.0 -130.0 -135.0 -138.0 -141.0 -140.0 -145.0 -146.0 -147.0 -152.0 -155.0 -158.0 -157.0 -158.0 -163.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -178.0 -179.0 -182.0 -181.0 -186.0 -189.0 -190.0 -191.0 -192.0 -197.0 -198.0 -203.0 -204.0 -207.0 -210.0 -209.0 14 -33.0 -30.0 -29.0 -22.0 -27.0 -25.0 -21.0 -18.0 -15.0 -10.0 -12.0 -8.0 -8.0 -2.0 -1.0 -5.0 -3.0 -6.0 -2.0 -2.0 4.0 14.0 1.0 -2.0 -3.0 -6.0 -7.0 -10.0 -9.0 -10.0 -13.0 -14.0 -19.0 -20.0 -25.0 -26.0 -31.0 -32.0 -33.0 -34.0 -37.0 -40.0 -43.0 -44.0 -49.0 -48.0 -51.0 -52.0 -53.0 -56.0 -58.0 -54.0 -59.0 -62.0 -65.0 -66.0 -69.0 -72.0 -73.0 -70.0 -75.0 -76.0 -79.0 -82.0 -83.0 -86.0 -89.0 -90.0 -91.0 -92.0 -97.0 -100.0 -103.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -122.0 -125.0 -124.0 -129.0 -132.0 -135.0 -136.0 -139.0 -142.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -159.0 -158.0 -163.0 -164.0 -167.0 -166.0 -169.0 -170.0 -175.0 -176.0 -179.0 -180.0 -183.0 -186.0 -187.0 -190.0 -191.0 -194.0 -197.0 -200.0 -203.0 -204.0 -207.0 -208.0 15 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -7.0 -2.0 -1.0 6.0 14.0 3.0 0.0 -1.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -14.0 -19.0 -22.0 -23.0 -24.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -42.0 -47.0 -48.0 -49.0 -50.0 -51.0 -56.0 -57.0 -52.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -73.0 -70.0 -73.0 -76.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -107.0 -110.0 -115.0 -117.0 -118.0 -121.0 -122.0 -123.0 -126.0 -129.0 -130.0 -133.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -152.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -165.0 -168.0 -169.0 -168.0 -173.0 -176.0 -177.0 -178.0 -181.0 -184.0 -187.0 -188.0 -189.0 -194.0 -197.0 -200.0 -203.0 -202.0 -205.0 16 -37.0 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -5.0 -2.0 1.0 8.0 14.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -13.0 -14.0 -17.0 -22.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -37.0 -40.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -49.0 -54.0 -55.0 -52.0 -57.0 -62.0 -63.0 -66.0 -67.0 -70.0 -71.0 -70.0 -71.0 -74.0 -79.0 -80.0 -83.0 -84.0 -85.0 -88.0 -91.0 -94.0 -95.0 -100.0 -101.0 -106.0 -109.0 -112.0 -114.0 -117.0 -118.0 -119.0 -120.0 -123.0 -124.0 -129.0 -132.0 -133.0 -132.0 -135.0 -140.0 -141.0 -146.0 -149.0 -150.0 -153.0 -154.0 -157.0 -158.0 -161.0 -162.0 -165.0 -168.0 -167.0 -168.0 -171.0 -174.0 -175.0 -176.0 -179.0 -184.0 -185.0 -188.0 -191.0 -192.0 -197.0 -200.0 -201.0 -202.0 17 -38.0 -37.0 -32.0 -33.0 -30.0 -29.0 -22.0 -25.0 -23.0 -19.0 -19.0 -11.0 -11.0 -8.0 -8.0 -9.0 -2.0 -3.0 -5.0 -3.0 -5.0 0.0 1.0 10.0 14.0 5.0 4.0 -1.0 -2.0 -3.0 -4.0 -7.0 -10.0 -13.0 -12.0 -17.0 -22.0 -21.0 -24.0 -25.0 -28.0 -31.0 -34.0 -35.0 -38.0 -37.0 -40.0 -43.0 -46.0 -47.0 -48.0 -47.0 -52.0 -53.0 -50.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -68.0 -69.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -97.0 -98.0 -103.0 -106.0 -108.0 -111.0 -114.0 -115.0 -116.0 -117.0 -120.0 -121.0 -126.0 -129.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -146.0 -147.0 -150.0 -151.0 -154.0 -155.0 -158.0 -159.0 -162.0 -163.0 -166.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -181.0 -182.0 -185.0 -188.0 -189.0 -194.0 -195.0 -198.0 -199.0 18 -39.0 -38.0 -37.0 -32.0 -35.0 -30.0 -27.0 -22.0 -23.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -5.0 -3.0 -3.0 2.0 3.0 10.0 14.0 7.0 6.0 1.0 0.0 -1.0 -4.0 -5.0 -10.0 -13.0 -12.0 -15.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -34.0 -33.0 -36.0 -35.0 -38.0 -41.0 -46.0 -45.0 -46.0 -45.0 -50.0 -51.0 -50.0 -55.0 -58.0 -61.0 -62.0 -63.0 -68.0 -67.0 -66.0 -67.0 -70.0 -75.0 -78.0 -79.0 -82.0 -83.0 -88.0 -91.0 -92.0 -96.0 -98.0 -101.0 -106.0 -106.0 -109.0 -112.0 -113.0 -114.0 -117.0 -118.0 -121.0 -124.0 -127.0 -130.0 -131.0 -134.0 -137.0 -140.0 -143.0 -144.0 -147.0 -148.0 -151.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -168.0 -171.0 -174.0 -175.0 -178.0 -179.0 -180.0 -185.0 -188.0 -189.0 -192.0 -193.0 -196.0 19 -40.0 -39.0 -38.0 -37.0 -32.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -7.0 -2.0 -1.0 2.0 5.0 12.0 14.0 7.0 6.0 3.0 2.0 -1.0 -2.0 -7.0 -10.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -33.0 -34.0 -35.0 -38.0 -41.0 -44.0 -43.0 -44.0 -45.0 -50.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -65.0 -66.0 -65.0 -66.0 -67.0 -70.0 -75.0 -76.0 -79.0 -80.0 -85.0 -88.0 -89.0 -94.0 -94.0 -98.0 -103.0 -105.0 -104.0 -109.0 -110.0 -111.0 -114.0 -117.0 -116.0 -121.0 -124.0 -127.0 -128.0 -131.0 -134.0 -137.0 -140.0 -141.0 -142.0 -145.0 -148.0 -149.0 -150.0 -153.0 -156.0 -157.0 -158.0 -161.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -177.0 -182.0 -185.0 -188.0 -187.0 -190.0 -193.0 20 -45.0 -40.0 -39.0 -40.0 -39.0 -30.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -7.0 0.0 -1.0 4.0 7.0 12.0 14.0 7.0 8.0 5.0 2.0 1.0 -4.0 -7.0 -8.0 -11.0 -12.0 -13.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -32.0 -31.0 -34.0 -35.0 -38.0 -39.0 -42.0 -41.0 -44.0 -45.0 -48.0 -49.0 -50.0 -55.0 -58.0 -57.0 -60.0 -63.0 -64.0 -65.0 -66.0 -67.0 -70.0 -73.0 -76.0 -77.0 -82.0 -85.0 -86.0 -91.0 -92.0 -94.0 -100.0 -102.0 -103.0 -104.0 -107.0 -108.0 -111.0 -114.0 -115.0 -116.0 -121.0 -124.0 -125.0 -128.0 -131.0 -134.0 -135.0 -138.0 -141.0 -140.0 -143.0 -146.0 -147.0 -150.0 -153.0 -154.0 -155.0 -158.0 -159.0 -162.0 -165.0 -168.0 -169.0 -170.0 -173.0 -174.0 -179.0 -182.0 -185.0 -188.0 -185.0 -190.0 21 -44.0 -45.0 -40.0 -39.0 -40.0 -37.0 -30.0 -33.0 -30.0 -27.0 -22.0 -25.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -5.0 0.0 1.0 6.0 7.0 12.0 14.0 9.0 10.0 5.0 2.0 -1.0 -4.0 -7.0 -8.0 -11.0 -10.0 -11.0 -14.0 -19.0 -20.0 -23.0 -28.0 -29.0 -30.0 -31.0 -34.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -48.0 -51.0 -50.0 -55.0 -56.0 -59.0 -58.0 -61.0 -64.0 -65.0 -68.0 -67.0 -68.0 -73.0 -76.0 -77.0 -82.0 -85.0 -88.0 -91.0 -94.0 -94.0 -99.0 -100.0 -103.0 -102.0 -105.0 -106.0 -111.0 -114.0 -117.0 -116.0 -119.0 -122.0 -123.0 -128.0 -131.0 -134.0 -133.0 -136.0 -139.0 -138.0 -141.0 -146.0 -147.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -166.0 -167.0 -168.0 -173.0 -174.0 -179.0 -180.0 -183.0 -186.0 -185.0 22 -47.0 -44.0 -45.0 -42.0 -39.0 -40.0 -35.0 -30.0 -33.0 -28.0 -29.0 -20.0 -25.0 -20.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 3.0 8.0 9.0 14.0 14.0 9.0 8.0 3.0 0.0 -1.0 -6.0 -9.0 -8.0 -11.0 -10.0 -13.0 -16.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -55.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -67.0 -70.0 -75.0 -78.0 -77.0 -84.0 -85.0 -89.0 -93.0 -95.0 -94.0 -99.0 -100.0 -103.0 -102.0 -107.0 -106.0 -113.0 -116.0 -117.0 -116.0 -119.0 -124.0 -123.0 -130.0 -133.0 -134.0 -135.0 -136.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -168.0 -167.0 -170.0 -175.0 -174.0 -181.0 -180.0 -183.0 -186.0 23 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 5.0 10.0 11.0 14.0 14.0 7.0 8.0 1.0 -2.0 -1.0 -6.0 -9.0 -8.0 -11.0 -12.0 -13.0 -18.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -44.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -70.0 -77.0 -80.0 -77.0 -86.0 -85.0 -89.0 -94.0 -95.0 -94.0 -99.0 -100.0 -103.0 -104.0 -109.0 -106.0 -113.0 -116.0 -119.0 -116.0 -121.0 -126.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -148.0 -151.0 -150.0 -151.0 -154.0 -155.0 -160.0 -159.0 -162.0 -165.0 -168.0 -167.0 -172.0 -177.0 -176.0 -183.0 -180.0 -183.0 24 -51.0 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -4.0 -1.0 2.0 5.0 10.0 11.0 14.0 14.0 5.0 8.0 -1.0 -4.0 -3.0 -6.0 -9.0 -8.0 -13.0 -14.0 -13.0 -20.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -39.0 -36.0 -37.0 -44.0 -41.0 -46.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -63.0 -64.0 -67.0 -68.0 -71.0 -72.0 -79.0 -82.0 -79.0 -86.0 -87.0 -89.0 -92.0 -93.0 -94.0 -97.0 -98.0 -103.0 -106.0 -109.0 -108.0 -113.0 -116.0 -117.0 -118.0 -123.0 -124.0 -125.0 -130.0 -131.0 -132.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -150.0 -153.0 -154.0 -157.0 -160.0 -159.0 -164.0 -165.0 -168.0 -169.0 -174.0 -177.0 -178.0 -181.0 -180.0 25 -54.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -41.0 -38.0 -33.0 -32.0 -31.0 -30.0 -25.0 -22.0 -25.0 -22.0 -21.0 -16.0 -13.0 -14.0 -8.0 -10.0 -9.0 -4.0 -4.0 -1.0 2.0 7.0 10.0 9.0 14.0 12.0 7.0 6.0 -1.0 -4.0 -3.0 -6.0 -7.0 -10.0 -13.0 -16.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -64.0 -65.0 -70.0 -73.0 -74.0 -79.0 -82.0 -81.0 -88.0 -89.0 -89.0 -94.0 -93.0 -94.0 -97.0 -100.0 -105.0 -108.0 -111.0 -108.0 -115.0 -116.0 -119.0 -120.0 -123.0 -124.0 -125.0 -132.0 -131.0 -134.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -170.0 -171.0 -176.0 -177.0 -178.0 -181.0 26 -57.0 -54.0 -52.0 -52.0 -49.0 -46.0 -45.0 -42.0 -39.0 -38.0 -33.0 -34.0 -31.0 -30.0 -25.0 -22.0 -23.0 -22.0 -23.0 -16.0 -15.0 -15.0 -8.0 -12.0 -10.0 -4.0 -2.0 1.0 2.0 5.0 8.0 7.0 14.0 10.0 5.0 6.0 -1.0 -4.0 -3.0 -6.0 -9.0 -10.0 -15.0 -18.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -32.0 -29.0 -34.0 -39.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -66.0 -65.0 -72.0 -75.0 -74.0 -81.0 -82.0 -81.0 -89.0 -90.0 -89.0 -94.0 -93.0 -94.0 -99.0 -102.0 -105.0 -108.0 -111.0 -110.0 -115.0 -118.0 -121.0 -122.0 -125.0 -124.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -167.0 -170.0 -173.0 -176.0 -175.0 -178.0 27 -60.0 -59.0 -56.0 -52.0 -54.0 -51.0 -48.0 -46.0 -44.0 -39.0 -39.0 -35.0 -35.0 -31.0 -31.0 -26.0 -24.0 -25.0 -22.0 -23.0 -18.0 -15.0 -15.0 -8.0 -12.0 -9.0 -6.0 -4.0 1.0 2.0 3.0 8.0 6.0 14.0 8.0 3.0 6.0 -1.0 -2.0 -3.0 -6.0 -9.0 -12.0 -13.0 -16.0 -13.0 -20.0 -21.0 -20.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -46.0 -43.0 -48.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -61.0 -66.0 -67.0 -72.0 -75.0 -76.0 -81.0 -83.0 -83.0 -87.0 -92.0 -89.0 -94.0 -93.0 -96.0 -101.0 -104.0 -107.0 -108.0 -109.0 -110.0 -115.0 -118.0 -119.0 -122.0 -125.0 -126.0 -125.0 -132.0 -133.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -163.0 -164.0 -169.0 -172.0 -175.0 -176.0 -175.0 28 -62.0 -62.0 -59.0 -57.0 -52.0 -54.0 -50.0 -49.0 -44.0 -43.0 -41.0 -37.0 -36.0 -33.0 -32.0 -31.0 -26.0 -26.0 -26.0 -24.0 -24.0 -19.0 -17.0 -13.0 -8.0 -10.0 -7.0 -7.0 -4.0 -1.0 0.0 2.0 6.0 6.0 14.0 8.0 1.0 6.0 -1.0 -2.0 -5.0 -8.0 -11.0 -14.0 -13.0 -16.0 -13.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -38.0 -37.0 -42.0 -43.0 -48.0 -43.0 -48.0 -49.0 -50.0 -57.0 -58.0 -59.0 -62.0 -63.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -83.0 -84.0 -89.0 -92.0 -89.0 -94.0 -95.0 -96.0 -103.0 -106.0 -107.0 -108.0 -109.0 -112.0 -115.0 -120.0 -121.0 -122.0 -127.0 -126.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -158.0 -159.0 -162.0 -165.0 -164.0 -171.0 -172.0 -175.0 -176.0 29 -65.0 -62.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -42.0 -43.0 -42.0 -37.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -25.0 -22.0 -19.0 -18.0 -13.0 -8.0 -8.0 -5.0 -6.0 -5.0 -2.0 -1.0 2.0 5.0 6.0 14.0 8.0 1.0 6.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -11.0 -14.0 -13.0 -18.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -35.0 -40.0 -37.0 -40.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -56.0 -59.0 -60.0 -65.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -81.0 -84.0 -89.0 -90.0 -89.0 -94.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -111.0 -114.0 -117.0 -120.0 -121.0 -124.0 -125.0 -128.0 -127.0 -130.0 -133.0 -136.0 -135.0 -136.0 -141.0 -140.0 -143.0 -148.0 -151.0 -152.0 -155.0 -156.0 -157.0 -162.0 -165.0 -166.0 -169.0 -170.0 -173.0 30 -64.0 -65.0 -64.0 -61.0 -60.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -18.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 2.0 6.0 -1.0 -2.0 -5.0 -10.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -40.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -59.0 -62.0 -67.0 -68.0 -69.0 -74.0 -75.0 -80.0 -84.0 -81.0 -84.0 -89.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -113.0 -116.0 -117.0 -120.0 -123.0 -124.0 -125.0 -128.0 -127.0 -130.0 -135.0 -138.0 -135.0 -136.0 -143.0 -140.0 -145.0 -148.0 -151.0 -154.0 -155.0 -156.0 -159.0 -164.0 -167.0 -166.0 -169.0 -170.0 31 -67.0 -64.0 -65.0 -64.0 -61.0 -58.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -17.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 4.0 4.0 -2.0 -4.0 -7.0 -11.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -27.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -38.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -61.0 -62.0 -67.0 -68.0 -71.0 -75.0 -76.0 -81.0 -82.0 -81.0 -84.0 -87.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -102.0 -107.0 -106.0 -113.0 -114.0 -115.0 -120.0 -121.0 -122.0 -123.0 -128.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -141.0 -140.0 -145.0 -146.0 -149.0 -152.0 -155.0 -158.0 -159.0 -164.0 -167.0 -166.0 -169.0 32 -68.0 -67.0 -62.0 -65.0 -64.0 -61.0 -56.0 -55.0 -52.0 -51.0 -50.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -25.0 -22.0 -19.0 -15.0 -10.0 -8.0 -8.0 -5.0 -6.0 -3.0 -4.0 -1.0 2.0 3.0 10.0 14.0 9.0 6.0 2.0 0.0 -3.0 -6.0 -9.0 -10.0 -11.0 -10.0 -16.0 -13.0 -19.0 -22.0 -21.0 -26.0 -24.0 -28.0 -31.0 -29.0 -32.0 -36.0 -39.0 -36.0 -43.0 -44.0 -45.0 -45.0 -46.0 -47.0 -52.0 -56.0 -57.0 -62.0 -64.0 -68.0 -70.0 -73.0 -74.0 -76.0 -80.0 -81.0 -80.0 -84.0 -86.0 -91.0 -93.0 -97.0 -96.0 -98.0 -101.0 -102.0 -108.0 -106.0 -114.0 -113.0 -114.0 -119.0 -120.0 -121.0 -122.0 -127.0 -129.0 -131.0 -134.0 -135.0 -137.0 -136.0 -142.0 -142.0 -145.0 -146.0 -148.0 -153.0 -154.0 -159.0 -159.0 -163.0 -166.0 -165.0 33 -71.0 -68.0 -65.0 -62.0 -65.0 -62.0 -59.0 -56.0 -53.0 -50.0 -51.0 -48.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -24.0 -21.0 -18.0 -13.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -4.0 -1.0 2.0 5.0 12.0 14.0 7.0 4.0 1.0 -2.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -15.0 -15.0 -19.0 -22.0 -19.0 -24.0 -24.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -47.0 -53.0 -56.0 -59.0 -62.0 -65.0 -68.0 -71.0 -73.0 -74.0 -75.0 -78.0 -79.0 -80.0 -85.0 -88.0 -91.0 -94.0 -95.0 -98.0 -98.0 -102.0 -104.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -120.0 -121.0 -120.0 -125.0 -130.0 -131.0 -132.0 -135.0 -136.0 -138.0 -142.0 -142.0 -146.0 -146.0 -150.0 -153.0 -154.0 -159.0 -159.0 -163.0 -164.0 34 -72.0 -71.0 -68.0 -65.0 -62.0 -63.0 -60.0 -59.0 -56.0 -51.0 -50.0 -49.0 -48.0 -43.0 -42.0 -43.0 -40.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -25.0 -22.0 -19.0 -16.0 -11.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -2.0 1.0 4.0 7.0 14.0 12.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -15.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -49.0 -55.0 -58.0 -61.0 -64.0 -67.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -82.0 -87.0 -90.0 -91.0 -94.0 -97.0 -98.0 -100.0 -104.0 -104.0 -106.0 -105.0 -114.0 -113.0 -114.0 -119.0 -122.0 -121.0 -120.0 -127.0 -130.0 -131.0 -132.0 -135.0 -138.0 -140.0 -142.0 -142.0 -146.0 -148.0 -152.0 -155.0 -154.0 -161.0 -159.0 -163.0 35 -73.0 -74.0 -69.0 -70.0 -66.0 -64.0 -61.0 -62.0 -59.0 -56.0 -53.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -42.0 -41.0 -38.0 -33.0 -34.0 -31.0 -28.0 -28.0 -25.0 -22.0 -19.0 -16.0 -13.0 -8.0 -10.0 -10.0 -7.0 -6.0 -5.0 -2.0 1.0 6.0 9.0 14.0 10.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -47.0 -48.0 -49.0 -57.0 -60.0 -63.0 -65.0 -69.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -84.0 -87.0 -92.0 -91.0 -96.0 -97.0 -98.0 -102.0 -106.0 -106.0 -106.0 -105.0 -114.0 -113.0 -114.0 -121.0 -122.0 -123.0 -120.0 -127.0 -130.0 -133.0 -132.0 -137.0 -138.0 -140.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -161.0 -159.0 36 -78.0 -73.0 -74.0 -71.0 -72.0 -66.0 -66.0 -61.0 -60.0 -59.0 -56.0 -55.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -30.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -10.0 -12.0 -9.0 -6.0 -3.0 -2.0 1.0 4.0 7.0 14.0 8.0 3.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -45.0 -47.0 -50.0 -51.0 -56.0 -61.0 -62.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -80.0 -81.0 -84.0 -86.0 -91.0 -93.0 -95.0 -98.0 -100.0 -102.0 -105.0 -106.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -120.0 -127.0 -128.0 -131.0 -134.0 -137.0 -136.0 -139.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -159.0 37 -79.0 -80.0 -73.0 -76.0 -73.0 -71.0 -66.0 -68.0 -63.0 -62.0 -60.0 -58.0 -57.0 -54.0 -53.0 -49.0 -47.0 -46.0 -45.0 -44.0 -39.0 -39.0 -37.0 -36.0 -34.0 -31.0 -28.0 -25.0 -22.0 -21.0 -18.0 -17.0 -12.0 -12.0 -14.0 -11.0 -8.0 -5.0 0.0 3.0 4.0 5.0 14.0 8.0 1.0 0.0 -1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -39.0 -44.0 -47.0 -47.0 -52.0 -53.0 -58.0 -62.0 -64.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -82.0 -83.0 -84.0 -86.0 -92.0 -93.0 -94.0 -99.0 -102.0 -101.0 -104.0 -106.0 -106.0 -105.0 -112.0 -115.0 -114.0 -119.0 -122.0 -125.0 -120.0 -125.0 -126.0 -131.0 -134.0 -135.0 -134.0 -137.0 -142.0 -142.0 -148.0 -147.0 -152.0 -153.0 -154.0 38 -81.0 -80.0 -78.0 -75.0 -77.0 -75.0 -69.0 -66.0 -68.0 -64.0 -64.0 -58.0 -59.0 -56.0 -55.0 -54.0 -49.0 -49.0 -47.0 -46.0 -44.0 -40.0 -39.0 -39.0 -37.0 -34.0 -30.0 -28.0 -25.0 -24.0 -21.0 -19.0 -19.0 -14.0 -14.0 -14.0 -11.0 -8.0 -3.0 0.0 3.0 2.0 5.0 14.0 6.0 -1.0 -1.0 1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -41.0 -46.0 -47.0 -49.0 -54.0 -55.0 -60.0 -63.0 -64.0 -64.0 -72.0 -71.0 -71.0 -73.0 -76.0 -77.0 -84.0 -85.0 -84.0 -88.0 -92.0 -93.0 -96.0 -101.0 -104.0 -101.0 -104.0 -108.0 -106.0 -105.0 -114.0 -115.0 -116.0 -119.0 -122.0 -124.0 -122.0 -125.0 -128.0 -133.0 -134.0 -135.0 -134.0 -139.0 -142.0 -144.0 -148.0 -147.0 -152.0 -153.0 39 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -46.0 -45.0 -40.0 -37.0 -39.0 -35.0 -32.0 -28.0 -28.0 -27.0 -25.0 -23.0 -19.0 -21.0 -16.0 -14.0 -12.0 -11.0 -8.0 -5.0 -2.0 3.0 0.0 4.0 14.0 4.0 0.0 -1.0 2.0 -3.0 -5.0 -4.0 -7.0 -7.0 -11.0 -8.0 -16.0 -17.0 -18.0 -22.0 -19.0 -23.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -38.0 -41.0 -47.0 -49.0 -49.0 -56.0 -55.0 -60.0 -62.0 -65.0 -64.0 -71.0 -70.0 -71.0 -75.0 -78.0 -77.0 -83.0 -85.0 -86.0 -88.0 -93.0 -95.0 -98.0 -102.0 -105.0 -101.0 -106.0 -108.0 -106.0 -105.0 -114.0 -117.0 -118.0 -119.0 -122.0 -125.0 -122.0 -127.0 -130.0 -133.0 -136.0 -135.0 -134.0 -141.0 -144.0 -146.0 -150.0 -147.0 -152.0 40 -87.0 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -44.0 -45.0 -40.0 -36.0 -37.0 -36.0 -34.0 -28.0 -28.0 -29.0 -23.0 -25.0 -19.0 -22.0 -17.0 -16.0 -14.0 -11.0 -8.0 -6.0 -4.0 1.0 -1.0 4.0 14.0 2.0 -1.0 -2.0 2.0 -1.0 -4.0 -4.0 -7.0 -7.0 -10.0 -8.0 -16.0 -17.0 -16.0 -21.0 -19.0 -21.0 -24.0 -26.0 -29.0 -33.0 -31.0 -35.0 -36.0 -40.0 -43.0 -47.0 -50.0 -51.0 -56.0 -57.0 -61.0 -60.0 -67.0 -64.0 -69.0 -68.0 -73.0 -76.0 -79.0 -79.0 -83.0 -86.0 -86.0 -90.0 -93.0 -94.0 -97.0 -102.0 -103.0 -100.0 -106.0 -108.0 -108.0 -105.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -124.0 -129.0 -130.0 -133.0 -134.0 -137.0 -136.0 -143.0 -146.0 -146.0 -150.0 -147.0 41 -90.0 -87.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -54.0 -49.0 -52.0 -49.0 -44.0 -45.0 -42.0 -34.0 -35.0 -34.0 -33.0 -28.0 -29.0 -28.0 -23.0 -26.0 -19.0 -20.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -5.0 0.0 1.0 6.0 14.0 3.0 1.0 -1.0 2.0 1.0 -2.0 -3.0 -6.0 -5.0 -8.0 -8.0 -14.0 -15.0 -16.0 -21.0 -19.0 -19.0 -22.0 -25.0 -28.0 -31.0 -31.0 -35.0 -36.0 -41.0 -44.0 -45.0 -50.0 -51.0 -54.0 -58.0 -59.0 -60.0 -65.0 -64.0 -67.0 -70.0 -73.0 -74.0 -77.0 -79.0 -83.0 -84.0 -87.0 -90.0 -93.0 -96.0 -99.0 -100.0 -103.0 -100.0 -105.0 -106.0 -108.0 -107.0 -112.0 -113.0 -116.0 -119.0 -120.0 -123.0 -126.0 -127.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -144.0 -145.0 -148.0 42 -93.0 -90.0 -89.0 -88.0 -85.0 -82.0 -81.0 -76.0 -75.0 -74.0 -71.0 -66.0 -67.0 -66.0 -63.0 -58.0 -57.0 -56.0 -57.0 -54.0 -51.0 -52.0 -49.0 -46.0 -46.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -28.0 -25.0 -28.0 -19.0 -20.0 -19.0 -16.0 -13.0 -12.0 -9.0 -8.0 -5.0 0.0 -1.0 8.0 14.0 3.0 1.0 1.0 4.0 3.0 -2.0 -3.0 -4.0 -5.0 -8.0 -8.0 -12.0 -13.0 -18.0 -19.0 -18.0 -19.0 -22.0 -25.0 -28.0 -29.0 -32.0 -33.0 -38.0 -41.0 -42.0 -47.0 -48.0 -51.0 -55.0 -56.0 -57.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -98.0 -103.0 -106.0 -109.0 -107.0 -111.0 -113.0 -117.0 -118.0 -121.0 -124.0 -125.0 -128.0 -129.0 -130.0 -134.0 -138.0 -140.0 -142.0 -143.0 -145.0 43 -96.0 -93.0 -90.0 -91.0 -90.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -51.0 -48.0 -44.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -20.0 -19.0 -16.0 -15.0 -12.0 -9.0 -10.0 -3.0 -2.0 1.0 8.0 14.0 1.0 3.0 3.0 6.0 3.0 -2.0 -1.0 -4.0 -5.0 -8.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -19.0 -22.0 -25.0 -26.0 -29.0 -30.0 -35.0 -38.0 -39.0 -44.0 -45.0 -48.0 -52.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -78.0 -81.0 -84.0 -87.0 -90.0 -91.0 -92.0 -97.0 -98.0 -99.0 -96.0 -103.0 -106.0 -109.0 -107.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 -125.0 -126.0 -127.0 -132.0 -135.0 -138.0 -141.0 -140.0 -143.0 44 -97.0 -96.0 -93.0 -90.0 -91.0 -88.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -50.0 -47.0 -44.0 -41.0 -34.0 -35.0 -36.0 -31.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -18.0 -17.0 -16.0 -15.0 -12.0 -9.0 -8.0 -3.0 -2.0 1.0 8.0 14.0 3.0 5.0 5.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -6.0 -5.0 -10.0 -13.0 -16.0 -17.0 -18.0 -19.0 -22.0 -23.0 -24.0 -29.0 -32.0 -35.0 -38.0 -41.0 -44.0 -47.0 -49.0 -50.0 -51.0 -54.0 -55.0 -56.0 -61.0 -64.0 -67.0 -70.0 -71.0 -74.0 -75.0 -78.0 -81.0 -82.0 -85.0 -90.0 -89.0 -90.0 -95.0 -98.0 -97.0 -96.0 -101.0 -106.0 -107.0 -107.0 -111.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -126.0 -129.0 -132.0 -135.0 -136.0 -139.0 -140.0 45 -100.0 -97.0 -96.0 -93.0 -92.0 -89.0 -88.0 -85.0 -84.0 -79.0 -78.0 -77.0 -76.0 -71.0 -68.0 -71.0 -68.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -53.0 -51.0 -50.0 -47.0 -44.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -30.0 -32.0 -29.0 -24.0 -19.0 -16.0 -19.0 -16.0 -13.0 -14.0 -7.0 -6.0 -5.0 -2.0 1.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 0.0 1.0 -2.0 -3.0 -6.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -20.0 -21.0 -26.0 -29.0 -32.0 -35.0 -38.0 -41.0 -43.0 -46.0 -47.0 -52.0 -49.0 -54.0 -53.0 -58.0 -61.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -78.0 -79.0 -82.0 -85.0 -88.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -105.0 -106.0 -109.0 -112.0 -115.0 -116.0 -117.0 -120.0 -123.0 -126.0 -129.0 -130.0 -135.0 -134.0 -137.0 46 -99.0 -100.0 -95.0 -96.0 -93.0 -92.0 -87.0 -88.0 -83.0 -82.0 -79.0 -78.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -52.0 -49.0 -48.0 -45.0 -42.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -31.0 -30.0 -27.0 -22.0 -17.0 -16.0 -19.0 -14.0 -13.0 -12.0 -5.0 -6.0 -3.0 -2.0 3.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 -2.0 1.0 -2.0 -3.0 -8.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -22.0 -23.0 -26.0 -31.0 -34.0 -37.0 -40.0 -43.0 -43.0 -46.0 -49.0 -52.0 -49.0 -54.0 -53.0 -60.0 -63.0 -66.0 -65.0 -70.0 -71.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -90.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -107.0 -106.0 -111.0 -114.0 -115.0 -116.0 -117.0 -122.0 -123.0 -128.0 -129.0 -130.0 -135.0 -134.0 47 -104.0 -99.0 -100.0 -97.0 -98.0 -93.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -78.0 -77.0 -74.0 -71.0 -68.0 -67.0 -68.0 -63.0 -60.0 -59.0 -60.0 -59.0 -55.0 -50.0 -47.0 -46.0 -45.0 -44.0 -41.0 -36.0 -37.0 -36.0 -35.0 -28.0 -31.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -10.0 -3.0 -4.0 -1.0 0.0 5.0 10.0 14.0 7.0 9.0 9.0 10.0 7.0 0.0 1.0 0.0 -5.0 -6.0 -3.0 -8.0 -9.0 -12.0 -15.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -34.0 -35.0 -38.0 -42.0 -43.0 -44.0 -49.0 -50.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -80.0 -83.0 -82.0 -87.0 -88.0 -87.0 -90.0 -93.0 -96.0 -95.0 -96.0 -101.0 -104.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -117.0 -122.0 -125.0 -128.0 -129.0 -130.0 -133.0 48 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -62.0 -60.0 -53.0 -50.0 -47.0 -48.0 -45.0 -44.0 -41.0 -36.0 -39.0 -38.0 -35.0 -28.0 -33.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -8.0 -3.0 -4.0 -3.0 2.0 5.0 10.0 14.0 5.0 11.0 9.0 10.0 7.0 2.0 3.0 -2.0 -3.0 -4.0 -3.0 -8.0 -9.0 -12.0 -13.0 -16.0 -17.0 -22.0 -25.0 -26.0 -31.0 -32.0 -35.0 -40.0 -40.0 -41.0 -44.0 -47.0 -48.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -68.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -85.0 -86.0 -87.0 -90.0 -93.0 -96.0 -93.0 -96.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -128.0 -127.0 -130.0 49 -106.0 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -89.0 -86.0 -81.0 -82.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -58.0 -53.0 -50.0 -47.0 -48.0 -45.0 -42.0 -41.0 -38.0 -39.0 -40.0 -35.0 -28.0 -31.0 -28.0 -27.0 -24.0 -17.0 -16.0 -15.0 -16.0 -11.0 -8.0 -3.0 -4.0 -1.0 2.0 7.0 10.0 14.0 7.0 11.0 9.0 10.0 9.0 4.0 3.0 0.0 -3.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -16.0 -19.0 -20.0 -25.0 -26.0 -31.0 -34.0 -36.0 -39.0 -38.0 -41.0 -42.0 -45.0 -48.0 -49.0 -54.0 -57.0 -58.0 -59.0 -60.0 -65.0 -66.0 -71.0 -74.0 -77.0 -78.0 -81.0 -82.0 -83.0 -84.0 -87.0 -90.0 -93.0 -94.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -109.0 -110.0 -113.0 -116.0 -117.0 -122.0 -125.0 -126.0 -127.0 50 -111.0 -106.0 -105.0 -104.0 -101.0 -102.0 -97.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -56.0 -51.0 -48.0 -47.0 -48.0 -43.0 -42.0 -39.0 -38.0 -39.0 -38.0 -33.0 -28.0 -29.0 -28.0 -27.0 -22.0 -17.0 -16.0 -13.0 -14.0 -9.0 -6.0 -1.0 -2.0 -1.0 4.0 9.0 12.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -1.0 -4.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -22.0 -25.0 -28.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -40.0 -45.0 -48.0 -51.0 -54.0 -55.0 -58.0 -59.0 -62.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -79.0 -80.0 -81.0 -82.0 -85.0 -90.0 -91.0 -92.0 -95.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -110.0 -113.0 -116.0 -119.0 -122.0 -123.0 -124.0 51 -112.0 -111.0 -104.0 -105.0 -104.0 -101.0 -100.0 -97.0 -94.0 -91.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -78.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -59.0 -54.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -39.0 -36.0 -31.0 -26.0 -29.0 -28.0 -25.0 -22.0 -17.0 -14.0 -13.0 -12.0 -7.0 -4.0 -1.0 -2.0 1.0 6.0 11.0 14.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -42.0 -47.0 -50.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -91.0 -94.0 -95.0 -98.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -115.0 -118.0 -121.0 -122.0 -123.0 52 -113.0 -112.0 -109.0 -104.0 -105.0 -104.0 -99.0 -100.0 -95.0 -92.0 -91.0 -90.0 -89.0 -82.0 -81.0 -80.0 -81.0 -76.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -63.0 -61.0 -59.0 -57.0 -52.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -37.0 -34.0 -29.0 -26.0 -29.0 -26.0 -25.0 -20.0 -15.0 -14.0 -11.0 -10.0 -5.0 -4.0 -1.0 0.0 3.0 8.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -9.0 -12.0 -17.0 -20.0 -23.0 -25.0 -29.0 -31.0 -30.0 -35.0 -34.0 -37.0 -36.0 -41.0 -42.0 -49.0 -52.0 -53.0 -56.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -104.0 -105.0 -108.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 53 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -76.0 -75.0 -76.0 -71.0 -68.0 -71.0 -66.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -29.0 -26.0 -23.0 -18.0 -15.0 -12.0 -9.0 -8.0 -7.0 -4.0 1.0 2.0 5.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -7.0 -6.0 -11.0 -14.0 -17.0 -22.0 -23.0 -25.0 -31.0 -31.0 -30.0 -35.0 -34.0 -37.0 -38.0 -43.0 -42.0 -49.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -66.0 -67.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -82.0 -81.0 -82.0 -87.0 -92.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -105.0 -110.0 -113.0 -116.0 -115.0 -118.0 -121.0 54 -117.0 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -69.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -36.0 -33.0 -34.0 -29.0 -26.0 -29.0 -24.0 -23.0 -16.0 -15.0 -12.0 -9.0 -6.0 -7.0 -2.0 1.0 2.0 7.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -8.0 -13.0 -14.0 -19.0 -22.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -39.0 -40.0 -43.0 -42.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -63.0 -66.0 -67.0 -70.0 -69.0 -74.0 -75.0 -76.0 -81.0 -84.0 -81.0 -82.0 -87.0 -90.0 -93.0 -96.0 -97.0 -98.0 -101.0 -102.0 -107.0 -110.0 -111.0 -116.0 -113.0 -118.0 55 -116.0 -117.0 -112.0 -113.0 -112.0 -109.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -68.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -37.0 -34.0 -33.0 -34.0 -29.0 -26.0 -27.0 -24.0 -21.0 -16.0 -15.0 -12.0 -7.0 -6.0 -5.0 -2.0 1.0 4.0 7.0 10.0 13.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -10.0 -15.0 -16.0 -21.0 -24.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -41.0 -42.0 -45.0 -42.0 -51.0 -52.0 -53.0 -58.0 -61.0 -64.0 -61.0 -66.0 -69.0 -70.0 -69.0 -74.0 -75.0 -78.0 -79.0 -84.0 -81.0 -84.0 -87.0 -92.0 -95.0 -96.0 -97.0 -98.0 -103.0 -102.0 -109.0 -110.0 -111.0 -116.0 -113.0 56 -121.0 -116.0 -117.0 -114.0 -113.0 -110.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -93.0 -94.0 -91.0 -90.0 -87.0 -82.0 -83.0 -80.0 -81.0 -76.0 -75.0 -76.0 -73.0 -68.0 -66.0 -63.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -39.0 -36.0 -33.0 -34.0 -31.0 -26.0 -27.0 -22.0 -19.0 -14.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 3.0 4.0 7.0 8.0 11.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 0.0 -3.0 -8.0 -9.0 -10.0 -17.0 -16.0 -21.0 -25.0 -24.0 -25.0 -32.0 -31.0 -30.0 -37.0 -36.0 -41.0 -42.0 -45.0 -44.0 -49.0 -52.0 -55.0 -58.0 -61.0 -64.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -77.0 -80.0 -79.0 -82.0 -83.0 -84.0 -89.0 -92.0 -93.0 -96.0 -97.0 -98.0 -103.0 -104.0 -109.0 -110.0 -111.0 -114.0 57 -124.0 -123.0 -118.0 -117.0 -116.0 -111.0 -112.0 -111.0 -106.0 -103.0 -104.0 -101.0 -98.0 -93.0 -94.0 -93.0 -92.0 -89.0 -82.0 -83.0 -82.0 -81.0 -78.0 -75.0 -74.0 -74.0 -70.0 -68.0 -63.0 -60.0 -63.0 -58.0 -59.0 -52.0 -55.0 -52.0 -49.0 -48.0 -43.0 -40.0 -41.0 -36.0 -33.0 -36.0 -31.0 -26.0 -27.0 -24.0 -21.0 -14.0 -11.0 -14.0 -11.0 -6.0 -3.0 -2.0 1.0 4.0 5.0 8.0 9.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 -2.0 -5.0 -8.0 -11.0 -12.0 -17.0 -17.0 -23.0 -23.0 -26.0 -25.0 -30.0 -29.0 -32.0 -37.0 -38.0 -41.0 -42.0 -47.0 -44.0 -51.0 -54.0 -55.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -79.0 -80.0 -79.0 -82.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -105.0 -104.0 -111.0 -110.0 -111.0 58 -123.0 -126.0 -121.0 -118.0 -117.0 -116.0 -109.0 -112.0 -109.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -89.0 -84.0 -83.0 -82.0 -83.0 -78.0 -75.0 -73.0 -72.0 -71.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -55.0 -54.0 -51.0 -46.0 -41.0 -40.0 -43.0 -36.0 -33.0 -34.0 -29.0 -26.0 -25.0 -24.0 -21.0 -14.0 -11.0 -12.0 -9.0 -4.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 11.0 4.0 3.0 -2.0 -7.0 -10.0 -13.0 -14.0 -19.0 -17.0 -24.0 -23.0 -26.0 -25.0 -30.0 -29.0 -34.0 -39.0 -40.0 -41.0 -44.0 -47.0 -44.0 -53.0 -56.0 -57.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -71.0 -72.0 -79.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -93.0 -98.0 -99.0 -102.0 -105.0 -104.0 -111.0 -110.0 59 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -90.0 -87.0 -84.0 -83.0 -82.0 -83.0 -78.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -52.0 -49.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -32.0 -27.0 -24.0 -23.0 -22.0 -19.0 -14.0 -11.0 -10.0 -7.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 9.0 4.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -17.0 -22.0 -23.0 -26.0 -25.0 -30.0 -31.0 -34.0 -37.0 -40.0 -43.0 -44.0 -47.0 -46.0 -53.0 -56.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -69.0 -72.0 -71.0 -72.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -93.0 -98.0 -101.0 -104.0 -105.0 -104.0 -109.0 60 -129.0 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -88.0 -87.0 -84.0 -83.0 -82.0 -81.0 -77.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -30.0 -27.0 -24.0 -23.0 -20.0 -19.0 -14.0 -11.0 -10.0 -5.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 13.0 10.0 9.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -15.0 -20.0 -17.0 -22.0 -23.0 -26.0 -27.0 -32.0 -31.0 -34.0 -37.0 -42.0 -43.0 -46.0 -49.0 -48.0 -55.0 -58.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -71.0 -74.0 -71.0 -72.0 -79.0 -80.0 -83.0 -86.0 -87.0 -90.0 -91.0 -92.0 -95.0 -100.0 -101.0 -106.0 -105.0 -104.0 61 -132.0 -131.0 -128.0 -123.0 -126.0 -123.0 -120.0 -119.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -95.0 -92.0 -93.0 -90.0 -87.0 -86.0 -85.0 -84.0 -82.0 -79.0 -76.0 -71.0 -70.0 -71.0 -66.0 -67.0 -60.0 -63.0 -62.0 -59.0 -54.0 -53.0 -50.0 -49.0 -48.0 -43.0 -42.0 -41.0 -36.0 -35.0 -32.0 -29.0 -24.0 -23.0 -22.0 -19.0 -16.0 -13.0 -10.0 -7.0 -4.0 -3.0 -2.0 -3.0 4.0 3.0 4.0 7.0 12.0 9.0 8.0 11.0 14.0 8.0 7.0 0.0 -3.0 -6.0 -9.0 -12.0 -13.0 -15.0 -18.0 -17.0 -22.0 -21.0 -26.0 -29.0 -30.0 -33.0 -34.0 -39.0 -40.0 -43.0 -46.0 -47.0 -48.0 -55.0 -56.0 -57.0 -62.0 -61.0 -64.0 -61.0 -66.0 -69.0 -72.0 -71.0 -74.0 -77.0 -80.0 -83.0 -84.0 -87.0 -88.0 -91.0 -94.0 -97.0 -100.0 -99.0 -104.0 -105.0 62 -135.0 -132.0 -131.0 -130.0 -125.0 -124.0 -123.0 -120.0 -117.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -97.0 -92.0 -95.0 -92.0 -87.0 -88.0 -87.0 -83.0 -80.0 -77.0 -76.0 -73.0 -72.0 -71.0 -66.0 -67.0 -62.0 -63.0 -60.0 -59.0 -56.0 -53.0 -52.0 -49.0 -48.0 -45.0 -42.0 -41.0 -36.0 -33.0 -30.0 -29.0 -26.0 -25.0 -20.0 -17.0 -16.0 -11.0 -10.0 -7.0 -6.0 -5.0 -2.0 -5.0 2.0 3.0 4.0 7.0 12.0 7.0 6.0 9.0 14.0 6.0 5.0 0.0 -5.0 -6.0 -9.0 -14.0 -14.0 -15.0 -18.0 -17.0 -22.0 -23.0 -28.0 -29.0 -30.0 -33.0 -36.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -57.0 -56.0 -57.0 -62.0 -61.0 -64.0 -63.0 -66.0 -69.0 -72.0 -71.0 -74.0 -79.0 -82.0 -83.0 -84.0 -87.0 -88.0 -93.0 -96.0 -99.0 -102.0 -99.0 -104.0 63 -136.0 -137.0 -132.0 -133.0 -132.0 -127.0 -124.0 -125.0 -122.0 -119.0 -118.0 -111.0 -114.0 -111.0 -110.0 -105.0 -106.0 -103.0 -100.0 -99.0 -92.0 -97.0 -94.0 -89.0 -90.0 -88.0 -85.0 -82.0 -79.0 -78.0 -73.0 -74.0 -73.0 -68.0 -69.0 -64.0 -65.0 -62.0 -57.0 -54.0 -53.0 -54.0 -49.0 -48.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -27.0 -26.0 -25.0 -22.0 -19.0 -16.0 -13.0 -12.0 -7.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 2.0 5.0 12.0 8.0 6.0 7.0 14.0 4.0 3.0 -2.0 -6.0 -8.0 -9.0 -14.0 -16.0 -15.0 -17.0 -17.0 -21.0 -25.0 -29.0 -31.0 -30.0 -33.0 -36.0 -38.0 -43.0 -46.0 -49.0 -49.0 -50.0 -56.0 -55.0 -57.0 -61.0 -61.0 -63.0 -63.0 -66.0 -69.0 -73.0 -71.0 -76.0 -78.0 -81.0 -82.0 -83.0 -88.0 -88.0 -94.0 -95.0 -98.0 -101.0 -99.0 64 -141.0 -138.0 -137.0 -134.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -113.0 -114.0 -113.0 -112.0 -107.0 -106.0 -105.0 -102.0 -101.0 -94.0 -98.0 -94.0 -89.0 -91.0 -88.0 -85.0 -82.0 -81.0 -80.0 -75.0 -76.0 -73.0 -68.0 -71.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -54.0 -51.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -29.0 -28.0 -25.0 -20.0 -19.0 -18.0 -15.0 -14.0 -9.0 -10.0 -9.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 10.0 6.0 6.0 6.0 14.0 3.0 3.0 -3.0 -5.0 -9.0 -10.0 -14.0 -15.0 -15.0 -17.0 -19.0 -21.0 -26.0 -29.0 -30.0 -30.0 -32.0 -37.0 -38.0 -43.0 -46.0 -49.0 -51.0 -50.0 -56.0 -55.0 -57.0 -59.0 -62.0 -61.0 -63.0 -65.0 -68.0 -71.0 -71.0 -75.0 -76.0 -81.0 -82.0 -85.0 -88.0 -88.0 -94.0 -95.0 -98.0 -99.0 65 -144.0 -141.0 -140.0 -139.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -113.0 -110.0 -107.0 -108.0 -103.0 -104.0 -101.0 -94.0 -99.0 -96.0 -89.0 -89.0 -86.0 -85.0 -84.0 -83.0 -80.0 -75.0 -76.0 -75.0 -68.0 -69.0 -68.0 -65.0 -62.0 -61.0 -56.0 -57.0 -56.0 -51.0 -50.0 -45.0 -42.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -17.0 -16.0 -9.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 8.0 6.0 4.0 4.0 14.0 1.0 3.0 -3.0 -5.0 -10.0 -10.0 -14.0 -15.0 -15.0 -17.0 -21.0 -21.0 -26.0 -29.0 -30.0 -30.0 -34.0 -39.0 -40.0 -45.0 -48.0 -51.0 -51.0 -50.0 -56.0 -55.0 -57.0 -61.0 -64.0 -61.0 -63.0 -67.0 -68.0 -73.0 -71.0 -75.0 -78.0 -81.0 -82.0 -87.0 -90.0 -90.0 -96.0 -95.0 -98.0 66 -147.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -109.0 -108.0 -105.0 -104.0 -103.0 -94.0 -97.0 -97.0 -91.0 -91.0 -88.0 -87.0 -86.0 -83.0 -82.0 -77.0 -76.0 -77.0 -70.0 -69.0 -68.0 -65.0 -64.0 -63.0 -58.0 -59.0 -56.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -37.0 -34.0 -31.0 -26.0 -21.0 -22.0 -21.0 -20.0 -19.0 -18.0 -11.0 -14.0 -13.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 6.0 4.0 4.0 2.0 14.0 1.0 1.0 -5.0 -3.0 -10.0 -10.0 -12.0 -13.0 -16.0 -15.0 -22.0 -23.0 -26.0 -27.0 -28.0 -32.0 -34.0 -39.0 -42.0 -43.0 -46.0 -49.0 -50.0 -50.0 -54.0 -55.0 -58.0 -59.0 -62.0 -61.0 -63.0 -67.0 -68.0 -71.0 -71.0 -77.0 -78.0 -81.0 -84.0 -85.0 -88.0 -90.0 -94.0 -95.0 67 -150.0 -147.0 -146.0 -145.0 -144.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -113.0 -114.0 -109.0 -110.0 -107.0 -104.0 -103.0 -96.0 -97.0 -95.0 -91.0 -91.0 -90.0 -89.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -68.0 -67.0 -64.0 -63.0 -60.0 -57.0 -56.0 -51.0 -48.0 -45.0 -44.0 -41.0 -40.0 -35.0 -32.0 -31.0 -26.0 -21.0 -22.0 -23.0 -22.0 -19.0 -18.0 -13.0 -14.0 -11.0 -8.0 -7.0 -6.0 -3.0 -2.0 1.0 4.0 2.0 4.0 1.0 14.0 3.0 0.0 -4.0 -1.0 -8.0 -9.0 -10.0 -13.0 -16.0 -15.0 -20.0 -23.0 -26.0 -27.0 -30.0 -33.0 -36.0 -39.0 -42.0 -41.0 -44.0 -47.0 -48.0 -49.0 -52.0 -55.0 -56.0 -57.0 -60.0 -63.0 -63.0 -67.0 -70.0 -71.0 -73.0 -75.0 -76.0 -81.0 -84.0 -87.0 -86.0 -89.0 -92.0 68 -153.0 -150.0 -149.0 -148.0 -147.0 -142.0 -141.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -124.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -111.0 -110.0 -107.0 -106.0 -103.0 -96.0 -97.0 -95.0 -93.0 -91.0 -92.0 -89.0 -86.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -70.0 -67.0 -66.0 -65.0 -60.0 -59.0 -54.0 -51.0 -48.0 -47.0 -44.0 -43.0 -38.0 -35.0 -34.0 -29.0 -26.0 -21.0 -24.0 -25.0 -22.0 -21.0 -20.0 -13.0 -14.0 -11.0 -8.0 -8.0 -6.0 -5.0 -2.0 -1.0 2.0 2.0 2.0 3.0 14.0 2.0 1.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -27.0 -30.0 -33.0 -36.0 -37.0 -42.0 -39.0 -42.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -72.0 -73.0 -78.0 -81.0 -84.0 -87.0 -84.0 -89.0 69 -154.0 -155.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -140.0 -137.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -120.0 -119.0 -118.0 -117.0 -112.0 -113.0 -112.0 -109.0 -106.0 -105.0 -98.0 -99.0 -97.0 -95.0 -91.0 -92.0 -91.0 -88.0 -87.0 -86.0 -81.0 -78.0 -75.0 -72.0 -71.0 -72.0 -67.0 -66.0 -65.0 -62.0 -57.0 -56.0 -53.0 -50.0 -45.0 -44.0 -43.0 -40.0 -37.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -24.0 -21.0 -22.0 -15.0 -16.0 -13.0 -8.0 -6.0 -8.0 -7.0 -2.0 -3.0 0.0 0.0 0.0 1.0 14.0 4.0 3.0 -2.0 1.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -20.0 -21.0 -22.0 -27.0 -30.0 -33.0 -34.0 -35.0 -40.0 -37.0 -40.0 -43.0 -46.0 -49.0 -50.0 -53.0 -54.0 -57.0 -56.0 -61.0 -64.0 -65.0 -66.0 -67.0 -72.0 -73.0 -78.0 -79.0 -82.0 -85.0 -84.0 70 -159.0 -156.0 -155.0 -150.0 -153.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -125.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -108.0 -103.0 -98.0 -98.0 -97.0 -97.0 -91.0 -94.0 -89.0 -90.0 -87.0 -86.0 -83.0 -80.0 -77.0 -72.0 -73.0 -72.0 -67.0 -68.0 -63.0 -62.0 -55.0 -56.0 -51.0 -50.0 -47.0 -46.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -21.0 -28.0 -25.0 -26.0 -22.0 -20.0 -15.0 -18.0 -14.0 -10.0 -6.0 -10.0 -9.0 -4.0 -5.0 0.0 -2.0 -2.0 1.0 14.0 6.0 5.0 0.0 1.0 -4.0 -7.0 -10.0 -13.0 -14.0 -17.0 -18.0 -21.0 -24.0 -25.0 -28.0 -31.0 -36.0 -35.0 -40.0 -37.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -66.0 -69.0 -72.0 -75.0 -78.0 -79.0 -82.0 -83.0 71 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -84.0 -81.0 -80.0 -77.0 -72.0 -75.0 -74.0 -67.0 -68.0 -63.0 -60.0 -53.0 -54.0 -53.0 -52.0 -47.0 -44.0 -43.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -30.0 -27.0 -26.0 -22.0 -18.0 -15.0 -18.0 -12.0 -10.0 -6.0 -12.0 -11.0 -4.0 -7.0 0.0 -2.0 0.0 1.0 14.0 8.0 5.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -14.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -29.0 -34.0 -37.0 -38.0 -35.0 -38.0 -43.0 -46.0 -45.0 -48.0 -51.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -64.0 -69.0 -72.0 -75.0 -76.0 -77.0 -80.0 72 -161.0 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -118.0 -119.0 -112.0 -113.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -82.0 -79.0 -80.0 -77.0 -72.0 -75.0 -72.0 -67.0 -66.0 -63.0 -60.0 -53.0 -52.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -29.0 -27.0 -26.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -11.0 -4.0 -7.0 0.0 -2.0 2.0 3.0 14.0 10.0 7.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -27.0 -28.0 -27.0 -32.0 -35.0 -36.0 -35.0 -36.0 -43.0 -44.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -60.0 -63.0 -66.0 -69.0 -72.0 -73.0 -74.0 -77.0 73 -162.0 -161.0 -158.0 -159.0 -156.0 -155.0 -150.0 -151.0 -148.0 -145.0 -142.0 -141.0 -138.0 -137.0 -134.0 -135.0 -130.0 -129.0 -128.0 -123.0 -122.0 -119.0 -118.0 -117.0 -112.0 -113.0 -110.0 -108.0 -105.0 -102.0 -98.0 -100.0 -97.0 -96.0 -91.0 -94.0 -91.0 -88.0 -83.0 -80.0 -79.0 -80.0 -75.0 -72.0 -73.0 -70.0 -67.0 -64.0 -61.0 -58.0 -53.0 -52.0 -51.0 -48.0 -45.0 -42.0 -41.0 -38.0 -35.0 -36.0 -33.0 -30.0 -21.0 -27.0 -27.0 -24.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -9.0 -4.0 -7.0 0.0 -1.0 2.0 5.0 14.0 12.0 7.0 2.0 -1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -15.0 -18.0 -21.0 -22.0 -25.0 -26.0 -27.0 -30.0 -33.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -44.0 -49.0 -52.0 -53.0 -52.0 -55.0 -60.0 -61.0 -66.0 -67.0 -70.0 -71.0 -72.0 74 -165.0 -164.0 -159.0 -158.0 -161.0 -156.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -137.0 -136.0 -133.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -113.0 -111.0 -108.0 -107.0 -102.0 -100.0 -100.0 -97.0 -98.0 -93.0 -94.0 -91.0 -86.0 -83.0 -80.0 -81.0 -78.0 -75.0 -74.0 -73.0 -70.0 -67.0 -64.0 -61.0 -56.0 -53.0 -54.0 -50.0 -47.0 -45.0 -44.0 -43.0 -38.0 -37.0 -36.0 -33.0 -28.0 -21.0 -27.0 -27.0 -26.0 -20.0 -18.0 -17.0 -18.0 -12.0 -12.0 -6.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 2.0 7.0 13.0 14.0 5.0 2.0 -1.0 0.0 -3.0 -6.0 -7.0 -12.0 -15.0 -18.0 -19.0 -22.0 -25.0 -24.0 -27.0 -30.0 -31.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 -57.0 -58.0 -63.0 -64.0 -67.0 -70.0 -69.0 75 -166.0 -167.0 -166.0 -159.0 -158.0 -159.0 -154.0 -153.0 -152.0 -149.0 -148.0 -143.0 -144.0 -139.0 -138.0 -137.0 -136.0 -131.0 -132.0 -127.0 -128.0 -123.0 -126.0 -121.0 -116.0 -117.0 -114.0 -114.0 -111.0 -110.0 -107.0 -102.0 -100.0 -98.0 -97.0 -99.0 -93.0 -92.0 -91.0 -86.0 -84.0 -82.0 -83.0 -79.0 -77.0 -75.0 -72.0 -69.0 -67.0 -64.0 -60.0 -56.0 -54.0 -54.0 -48.0 -45.0 -46.0 -46.0 -45.0 -39.0 -39.0 -36.0 -32.0 -29.0 -21.0 -28.0 -29.0 -26.0 -20.0 -19.0 -19.0 -18.0 -12.0 -14.0 -6.0 -13.0 -13.0 -8.0 -6.0 -4.0 0.0 2.0 5.0 13.0 14.0 3.0 0.0 -1.0 0.0 -3.0 -8.0 -7.0 -14.0 -17.0 -20.0 -21.0 -22.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -52.0 -51.0 -54.0 -59.0 -58.0 -63.0 -64.0 -67.0 -70.0 76 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -126.0 -123.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -110.0 -105.0 -102.0 -100.0 -98.0 -97.0 -97.0 -93.0 -93.0 -90.0 -86.0 -84.0 -83.0 -84.0 -79.0 -78.0 -73.0 -70.0 -67.0 -66.0 -63.0 -60.0 -56.0 -54.0 -53.0 -48.0 -45.0 -46.0 -47.0 -44.0 -39.0 -38.0 -35.0 -30.0 -29.0 -21.0 -28.0 -28.0 -25.0 -20.0 -19.0 -20.0 -19.0 -12.0 -15.0 -6.0 -12.0 -12.0 -9.0 -4.0 -3.0 2.0 3.0 4.0 13.0 14.0 3.0 0.0 -3.0 0.0 -5.0 -10.0 -9.0 -16.0 -19.0 -22.0 -21.0 -24.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -44.0 -43.0 -46.0 -49.0 -52.0 -51.0 -56.0 -61.0 -60.0 -63.0 -64.0 -67.0 77 -172.0 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -113.0 -108.0 -105.0 -104.0 -100.0 -98.0 -97.0 -97.0 -91.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -81.0 -76.0 -73.0 -70.0 -67.0 -64.0 -64.0 -58.0 -56.0 -56.0 -51.0 -48.0 -45.0 -47.0 -47.0 -42.0 -39.0 -38.0 -33.0 -30.0 -29.0 -21.0 -28.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -14.0 -12.0 -7.0 -4.0 -3.0 4.0 1.0 2.0 13.0 14.0 3.0 0.0 -1.0 -2.0 -7.0 -10.0 -9.0 -16.0 -19.0 -20.0 -21.0 -24.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -35.0 -36.0 -41.0 -44.0 -43.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -62.0 -61.0 -64.0 78 -171.0 -172.0 -167.0 -166.0 -167.0 -164.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -108.0 -105.0 -104.0 -100.0 -98.0 -98.0 -95.0 -89.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -79.0 -76.0 -73.0 -70.0 -65.0 -64.0 -62.0 -58.0 -56.0 -54.0 -51.0 -48.0 -45.0 -47.0 -45.0 -42.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -12.0 -10.0 -7.0 -2.0 -1.0 4.0 1.0 2.0 13.0 14.0 5.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -22.0 -23.0 -26.0 -25.0 -26.0 -31.0 -34.0 -33.0 -34.0 -39.0 -42.0 -43.0 -44.0 -49.0 -50.0 -55.0 -56.0 -59.0 -62.0 -61.0 79 -174.0 -173.0 -172.0 -167.0 -166.0 -167.0 -164.0 -161.0 -160.0 -157.0 -156.0 -151.0 -152.0 -149.0 -148.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -130.0 -123.0 -124.0 -125.0 -122.0 -120.0 -116.0 -115.0 -113.0 -112.0 -111.0 -106.0 -105.0 -104.0 -99.0 -96.0 -98.0 -95.0 -89.0 -91.0 -90.0 -86.0 -84.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -65.0 -64.0 -60.0 -56.0 -54.0 -54.0 -51.0 -48.0 -45.0 -45.0 -43.0 -40.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -26.0 -25.0 -20.0 -21.0 -18.0 -19.0 -14.0 -13.0 -6.0 -10.0 -8.0 -5.0 -2.0 -1.0 4.0 1.0 4.0 13.0 14.0 7.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -20.0 -23.0 -26.0 -25.0 -24.0 -29.0 -32.0 -33.0 -32.0 -37.0 -42.0 -43.0 -46.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 80 -177.0 -174.0 -175.0 -174.0 -167.0 -166.0 -167.0 -166.0 -161.0 -160.0 -159.0 -154.0 -153.0 -150.0 -149.0 -150.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -128.0 -123.0 -126.0 -123.0 -123.0 -118.0 -116.0 -117.0 -111.0 -114.0 -109.0 -106.0 -107.0 -104.0 -97.0 -96.0 -96.0 -96.0 -89.0 -91.0 -92.0 -86.0 -85.0 -83.0 -80.0 -77.0 -72.0 -69.0 -69.0 -67.0 -63.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -43.0 -43.0 -40.0 -39.0 -37.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -17.0 -16.0 -13.0 -8.0 -9.0 -8.0 -3.0 -4.0 -1.0 2.0 3.0 3.0 13.0 14.0 5.0 4.0 -1.0 -2.0 -7.0 -8.0 -7.0 -12.0 -15.0 -16.0 -17.0 -18.0 -23.0 -24.0 -23.0 -24.0 -29.0 -30.0 -33.0 -32.0 -37.0 -40.0 -43.0 -46.0 -47.0 -52.0 -53.0 -54.0 -57.0 81 -178.0 -177.0 -172.0 -175.0 -174.0 -167.0 -164.0 -167.0 -164.0 -159.0 -160.0 -157.0 -154.0 -153.0 -150.0 -149.0 -148.0 -145.0 -144.0 -139.0 -138.0 -135.0 -134.0 -133.0 -128.0 -123.0 -126.0 -122.0 -121.0 -118.0 -116.0 -116.0 -111.0 -112.0 -109.0 -106.0 -108.0 -102.0 -97.0 -94.0 -96.0 -96.0 -89.0 -91.0 -90.0 -84.0 -83.0 -81.0 -78.0 -75.0 -70.0 -69.0 -67.0 -65.0 -61.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -41.0 -41.0 -40.0 -39.0 -35.0 -31.0 -28.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -15.0 -14.0 -13.0 -8.0 -7.0 -6.0 -3.0 -4.0 -1.0 2.0 4.0 5.0 13.0 14.0 5.0 2.0 -1.0 0.0 -5.0 -6.0 -5.0 -10.0 -13.0 -14.0 -17.0 -16.0 -21.0 -22.0 -23.0 -24.0 -29.0 -32.0 -33.0 -32.0 -35.0 -40.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 82 -179.0 -178.0 -175.0 -172.0 -175.0 -172.0 -167.0 -164.0 -165.0 -162.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -123.0 -125.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -109.0 -106.0 -107.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -92.0 -89.0 -82.0 -81.0 -81.0 -78.0 -73.0 -70.0 -71.0 -65.0 -64.0 -59.0 -58.0 -57.0 -54.0 -55.0 -53.0 -50.0 -45.0 -41.0 -42.0 -42.0 -38.0 -33.0 -31.0 -30.0 -31.0 -21.0 -28.0 -30.0 -27.0 -24.0 -23.0 -18.0 -17.0 -16.0 -15.0 -8.0 -9.0 -6.0 -5.0 -6.0 -3.0 2.0 2.0 5.0 14.0 12.0 5.0 2.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -11.0 -14.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -30.0 -31.0 -32.0 -37.0 -38.0 -43.0 -44.0 -47.0 -50.0 -49.0 83 -182.0 -179.0 -178.0 -175.0 -172.0 -173.0 -170.0 -167.0 -164.0 -163.0 -162.0 -157.0 -158.0 -155.0 -154.0 -153.0 -148.0 -145.0 -146.0 -143.0 -142.0 -139.0 -138.0 -133.0 -130.0 -131.0 -126.0 -122.0 -123.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -107.0 -104.0 -105.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -90.0 -87.0 -80.0 -79.0 -80.0 -77.0 -74.0 -71.0 -70.0 -63.0 -62.0 -59.0 -58.0 -57.0 -54.0 -53.0 -52.0 -49.0 -46.0 -41.0 -42.0 -41.0 -36.0 -33.0 -33.0 -32.0 -32.0 -21.0 -28.0 -28.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -11.0 -6.0 -7.0 -6.0 -4.0 2.0 4.0 5.0 14.0 10.0 3.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -32.0 -31.0 -34.0 -39.0 -38.0 -45.0 -46.0 -47.0 -50.0 84 -183.0 -182.0 -179.0 -178.0 -175.0 -174.0 -173.0 -172.0 -167.0 -162.0 -165.0 -162.0 -157.0 -156.0 -157.0 -156.0 -153.0 -146.0 -145.0 -146.0 -143.0 -140.0 -141.0 -138.0 -135.0 -130.0 -131.0 -125.0 -120.0 -123.0 -120.0 -119.0 -118.0 -115.0 -116.0 -109.0 -110.0 -105.0 -104.0 -103.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -88.0 -85.0 -78.0 -77.0 -78.0 -77.0 -74.0 -71.0 -68.0 -63.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -50.0 -47.0 -46.0 -41.0 -40.0 -39.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -26.0 -29.0 -29.0 -26.0 -21.0 -21.0 -19.0 -18.0 -13.0 -12.0 -13.0 -8.0 -9.0 -7.0 -4.0 0.0 2.0 5.0 14.0 10.0 1.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -15.0 -16.0 -15.0 -18.0 -19.0 -24.0 -21.0 -26.0 -29.0 -32.0 -33.0 -36.0 -41.0 -40.0 -45.0 -46.0 -47.0 85 -182.0 -183.0 -180.0 -179.0 -178.0 -175.0 -174.0 -173.0 -170.0 -165.0 -162.0 -163.0 -162.0 -157.0 -156.0 -157.0 -154.0 -151.0 -146.0 -145.0 -146.0 -141.0 -140.0 -139.0 -136.0 -135.0 -130.0 -130.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -102.0 -103.0 -100.0 -97.0 -94.0 -97.0 -92.0 -89.0 -88.0 -83.0 -76.0 -77.0 -78.0 -75.0 -72.0 -69.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -50.0 -51.0 -48.0 -47.0 -46.0 -39.0 -38.0 -37.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -26.0 -29.0 -29.0 -24.0 -22.0 -21.0 -21.0 -16.0 -15.0 -14.0 -15.0 -10.0 -10.0 -7.0 -3.0 -1.0 2.0 5.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -4.0 -5.0 -12.0 -13.0 -14.0 -15.0 -18.0 -21.0 -24.0 -21.0 -26.0 -29.0 -32.0 -35.0 -36.0 -41.0 -40.0 -43.0 -46.0 86 -185.0 -182.0 -181.0 -180.0 -179.0 -178.0 -173.0 -174.0 -171.0 -168.0 -165.0 -162.0 -163.0 -160.0 -157.0 -156.0 -155.0 -152.0 -151.0 -146.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -133.0 -129.0 -128.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -114.0 -107.0 -106.0 -101.0 -102.0 -103.0 -98.0 -97.0 -94.0 -95.0 -92.0 -87.0 -86.0 -81.0 -76.0 -77.0 -76.0 -73.0 -70.0 -67.0 -66.0 -63.0 -62.0 -57.0 -56.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -37.0 -36.0 -37.0 -34.0 -33.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -27.0 -26.0 -22.0 -21.0 -21.0 -16.0 -16.0 -16.0 -15.0 -10.0 -10.0 -7.0 -1.0 1.0 1.0 3.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -6.0 -5.0 -12.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -21.0 -26.0 -31.0 -32.0 -37.0 -36.0 -41.0 -40.0 -43.0 87 -182.0 -186.0 -180.0 -183.0 -180.0 -181.0 -176.0 -173.0 -172.0 -169.0 -170.0 -165.0 -162.0 -163.0 -160.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -147.0 -146.0 -143.0 -140.0 -139.0 -136.0 -132.0 -127.0 -130.0 -123.0 -122.0 -123.0 -118.0 -121.0 -118.0 -115.0 -112.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -97.0 -92.0 -93.0 -90.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -68.0 -67.0 -66.0 -63.0 -62.0 -55.0 -54.0 -51.0 -50.0 -51.0 -48.0 -45.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -27.0 -27.0 -27.0 -22.0 -21.0 -21.0 -18.0 -16.0 -18.0 -14.0 -11.0 -9.0 -5.0 -1.0 1.0 1.0 3.0 14.0 10.0 3.0 2.0 1.0 2.0 -5.0 -6.0 -5.0 -10.0 -13.0 -12.0 -17.0 -20.0 -21.0 -22.0 -21.0 -28.0 -29.0 -34.0 -35.0 -36.0 -41.0 -40.0 88 -189.0 -182.0 -187.0 -180.0 -183.0 -178.0 -179.0 -176.0 -173.0 -170.0 -169.0 -168.0 -165.0 -160.0 -163.0 -160.0 -159.0 -156.0 -153.0 -150.0 -149.0 -146.0 -147.0 -144.0 -141.0 -140.0 -137.0 -135.0 -130.0 -127.0 -130.0 -123.0 -122.0 -121.0 -118.0 -121.0 -118.0 -113.0 -110.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -90.0 -92.0 -90.0 -83.0 -82.0 -79.0 -78.0 -75.0 -72.0 -71.0 -70.0 -67.0 -66.0 -63.0 -62.0 -53.0 -52.0 -51.0 -50.0 -51.0 -46.0 -43.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -29.0 -27.0 -27.0 -22.0 -21.0 -22.0 -18.0 -16.0 -18.0 -15.0 -10.0 -7.0 -6.0 -1.0 1.0 3.0 2.0 14.0 10.0 1.0 2.0 1.0 3.0 -4.0 -6.0 -5.0 -9.0 -12.0 -14.0 -18.0 -19.0 -20.0 -22.0 -23.0 -29.0 -31.0 -33.0 -37.0 -36.0 -40.0 89 -188.0 -189.0 -182.0 -187.0 -180.0 -183.0 -176.0 -179.0 -176.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -163.0 -158.0 -157.0 -156.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -141.0 -138.0 -136.0 -133.0 -130.0 -127.0 -128.0 -123.0 -122.0 -121.0 -118.0 -119.0 -116.0 -111.0 -108.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -88.0 -91.0 -88.0 -83.0 -82.0 -79.0 -78.0 -73.0 -70.0 -71.0 -70.0 -67.0 -64.0 -63.0 -60.0 -53.0 -50.0 -51.0 -50.0 -49.0 -44.0 -41.0 -42.0 -37.0 -36.0 -35.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -27.0 -29.0 -27.0 -25.0 -22.0 -21.0 -22.0 -18.0 -15.0 -18.0 -13.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 4.0 14.0 10.0 2.0 2.0 1.0 3.0 -2.0 -5.0 -7.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -23.0 -23.0 -29.0 -30.0 -31.0 -36.0 -35.0 90 -189.0 -188.0 -187.0 -182.0 -189.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -159.0 -154.0 -153.0 -152.0 -147.0 -146.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -119.0 -116.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -86.0 -89.0 -88.0 -85.0 -82.0 -77.0 -78.0 -71.0 -70.0 -71.0 -70.0 -67.0 -62.0 -63.0 -60.0 -53.0 -50.0 -51.0 -48.0 -49.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -33.0 -30.0 -21.0 -27.0 -27.0 -27.0 -25.0 -23.0 -21.0 -22.0 -18.0 -15.0 -16.0 -11.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 6.0 14.0 10.0 4.0 3.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -17.0 -18.0 -23.0 -25.0 -29.0 -30.0 -31.0 -34.0 91 -194.0 -189.0 -190.0 -187.0 -182.0 -187.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -154.0 -151.0 -152.0 -147.0 -144.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -117.0 -114.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -99.0 -96.0 -93.0 -86.0 -87.0 -88.0 -85.0 -82.0 -77.0 -76.0 -71.0 -70.0 -71.0 -68.0 -65.0 -62.0 -61.0 -58.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -31.0 -30.0 -21.0 -27.0 -25.0 -28.0 -25.0 -23.0 -21.0 -22.0 -17.0 -13.0 -14.0 -9.0 -8.0 -5.0 -4.0 1.0 3.0 7.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 -31.0 92 -193.0 -194.0 -187.0 -190.0 -187.0 -182.0 -185.0 -180.0 -183.0 -176.0 -179.0 -174.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -156.0 -151.0 -150.0 -147.0 -146.0 -145.0 -143.0 -138.0 -137.0 -134.0 -133.0 -134.0 -131.0 -130.0 -125.0 -126.0 -121.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -108.0 -105.0 -102.0 -99.0 -94.0 -91.0 -84.0 -87.0 -86.0 -83.0 -80.0 -77.0 -76.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -59.0 -58.0 -53.0 -50.0 -49.0 -46.0 -49.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -21.0 -17.0 -13.0 -12.0 -9.0 -8.0 -3.0 -2.0 3.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -7.0 -8.0 -7.0 -8.0 -13.0 -18.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 93 -196.0 -193.0 -192.0 -187.0 -190.0 -185.0 -182.0 -185.0 -180.0 -181.0 -176.0 -177.0 -174.0 -171.0 -170.0 -167.0 -166.0 -161.0 -160.0 -159.0 -156.0 -157.0 -156.0 -149.0 -148.0 -147.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -133.0 -131.0 -130.0 -127.0 -124.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -108.0 -103.0 -102.0 -97.0 -92.0 -89.0 -84.0 -87.0 -84.0 -81.0 -80.0 -79.0 -78.0 -71.0 -72.0 -71.0 -64.0 -61.0 -62.0 -59.0 -60.0 -53.0 -48.0 -49.0 -46.0 -49.0 -44.0 -43.0 -42.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -19.0 -15.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 5.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 -2.0 -9.0 -8.0 -7.0 -8.0 -15.0 -18.0 -21.0 -20.0 -23.0 -25.0 -29.0 94 -197.0 -196.0 -193.0 -192.0 -187.0 -190.0 -183.0 -182.0 -185.0 -178.0 -181.0 -174.0 -177.0 -172.0 -171.0 -170.0 -165.0 -164.0 -161.0 -158.0 -159.0 -156.0 -157.0 -154.0 -147.0 -148.0 -145.0 -146.0 -142.0 -141.0 -138.0 -137.0 -134.0 -131.0 -133.0 -131.0 -128.0 -127.0 -122.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -106.0 -101.0 -100.0 -95.0 -90.0 -89.0 -84.0 -85.0 -82.0 -79.0 -80.0 -79.0 -78.0 -71.0 -72.0 -69.0 -62.0 -61.0 -62.0 -59.0 -60.0 -51.0 -48.0 -49.0 -46.0 -49.0 -44.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -36.0 -31.0 -28.0 -21.0 -25.0 -25.0 -26.0 -24.0 -24.0 -18.0 -17.0 -16.0 -13.0 -12.0 -9.0 -6.0 -3.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 4.0 0.0 1.0 1.0 -4.0 -7.0 -8.0 -7.0 -10.0 -15.0 -20.0 -21.0 -20.0 -23.0 -25.0 95 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -164.0 -159.0 -158.0 -160.0 -156.0 -155.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -141.0 -138.0 -137.0 -132.0 -131.0 -133.0 -129.0 -126.0 -127.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -110.0 -103.0 -104.0 -99.0 -98.0 -93.0 -90.0 -89.0 -84.0 -83.0 -80.0 -79.0 -80.0 -79.0 -78.0 -71.0 -70.0 -67.0 -62.0 -61.0 -62.0 -57.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -34.0 -31.0 -28.0 -21.0 -25.0 -25.0 -25.0 -24.0 -23.0 -16.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 2.0 1.0 -1.0 1.0 -4.0 -9.0 -8.0 -7.0 -12.0 -17.0 -22.0 -23.0 -20.0 -23.0 96 -201.0 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -162.0 -159.0 -156.0 -161.0 -156.0 -153.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -139.0 -138.0 -137.0 -132.0 -131.0 -134.0 -129.0 -124.0 -125.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -104.0 -99.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -77.0 -76.0 -71.0 -68.0 -65.0 -62.0 -61.0 -62.0 -57.0 -56.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -42.0 -39.0 -40.0 -35.0 -34.0 -35.0 -32.0 -31.0 -28.0 -21.0 -25.0 -25.0 -23.0 -22.0 -21.0 -14.0 -17.0 -16.0 -11.0 -8.0 -7.0 -4.0 1.0 0.0 5.0 4.0 9.0 10.0 14.0 10.0 4.0 3.0 0.0 1.0 -6.0 -7.0 -10.0 -9.0 -12.0 -19.0 -20.0 -23.0 -20.0 97 -200.0 -201.0 -200.0 -197.0 -200.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -170.0 -163.0 -162.0 -159.0 -156.0 -159.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -144.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -132.0 -129.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -109.0 -106.0 -101.0 -102.0 -97.0 -96.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -75.0 -74.0 -69.0 -66.0 -65.0 -62.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -34.0 -35.0 -32.0 -33.0 -28.0 -21.0 -25.0 -24.0 -23.0 -22.0 -19.0 -14.0 -17.0 -14.0 -9.0 -6.0 -5.0 -2.0 1.0 0.0 5.0 4.0 9.0 12.0 14.0 10.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -18.0 -21.0 98 -205.0 -200.0 -201.0 -200.0 -197.0 -198.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -168.0 -163.0 -160.0 -159.0 -156.0 -157.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -142.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -130.0 -127.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -112.0 -111.0 -106.0 -101.0 -102.0 -97.0 -94.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -78.0 -75.0 -72.0 -67.0 -68.0 -67.0 -62.0 -63.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -32.0 -33.0 -28.0 -21.0 -24.0 -22.0 -21.0 -20.0 -19.0 -14.0 -17.0 -12.0 -7.0 -4.0 -4.0 -4.0 0.0 -2.0 3.0 4.0 9.0 14.0 14.0 10.0 6.0 3.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -16.0 -19.0 -18.0 99 -206.0 -205.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -192.0 -185.0 -186.0 -181.0 -182.0 -181.0 -178.0 -179.0 -174.0 -173.0 -172.0 -169.0 -168.0 -163.0 -160.0 -157.0 -156.0 -157.0 -154.0 -153.0 -151.0 -146.0 -145.0 -142.0 -142.0 -138.0 -139.0 -136.0 -135.0 -132.0 -129.0 -128.0 -127.0 -122.0 -123.0 -122.0 -119.0 -116.0 -113.0 -110.0 -109.0 -104.0 -99.0 -102.0 -95.0 -92.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -77.0 -76.0 -73.0 -70.0 -67.0 -68.0 -67.0 -62.0 -61.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -34.0 -31.0 -28.0 -21.0 -24.0 -22.0 -19.0 -20.0 -19.0 -14.0 -15.0 -10.0 -5.0 -2.0 -4.0 -4.0 0.0 -2.0 3.0 6.0 9.0 14.0 14.0 10.0 6.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -15.0 -16.0 -19.0 100 -207.0 -206.0 -203.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -185.0 -184.0 -181.0 -182.0 -181.0 -178.0 -179.0 -172.0 -175.0 -172.0 -169.0 -166.0 -163.0 -158.0 -157.0 -156.0 -157.0 -153.0 -152.0 -151.0 -146.0 -143.0 -142.0 -140.0 -138.0 -139.0 -136.0 -133.0 -132.0 -127.0 -128.0 -127.0 -120.0 -123.0 -120.0 -117.0 -114.0 -111.0 -108.0 -107.0 -102.0 -99.0 -100.0 -93.0 -90.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -75.0 -74.0 -71.0 -70.0 -67.0 -68.0 -65.0 -60.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -44.0 -39.0 -40.0 -37.0 -32.0 -36.0 -36.0 -30.0 -27.0 -21.0 -24.0 -20.0 -19.0 -20.0 -17.0 -12.0 -13.0 -8.0 -3.0 -2.0 -4.0 -5.0 0.0 0.0 3.0 6.0 7.0 14.0 14.0 10.0 4.0 1.0 -2.0 -5.0 -6.0 -7.0 -14.0 -15.0 -16.0 101 -208.0 -209.0 -206.0 -205.0 -198.0 -203.0 -198.0 -197.0 -196.0 -191.0 -192.0 -183.0 -184.0 -181.0 -182.0 -181.0 -178.0 -177.0 -172.0 -173.0 -172.0 -167.0 -166.0 -161.0 -158.0 -157.0 -156.0 -156.0 -151.0 -152.0 -151.0 -144.0 -143.0 -140.0 -140.0 -138.0 -139.0 -134.0 -133.0 -130.0 -127.0 -128.0 -125.0 -120.0 -121.0 -118.0 -115.0 -112.0 -109.0 -106.0 -105.0 -102.0 -97.0 -98.0 -91.0 -90.0 -89.0 -88.0 -89.0 -84.0 -79.0 -78.0 -73.0 -72.0 -71.0 -70.0 -65.0 -66.0 -65.0 -60.0 -63.0 -62.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -42.0 -37.0 -40.0 -37.0 -32.0 -37.0 -35.0 -28.0 -27.0 -21.0 -22.0 -20.0 -19.0 -20.0 -15.0 -10.0 -11.0 -6.0 -3.0 -2.0 -4.0 -5.0 0.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 4.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -13.0 102 -213.0 -208.0 -207.0 -208.0 -207.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -177.0 -170.0 -173.0 -170.0 -167.0 -164.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -152.0 -149.0 -144.0 -141.0 -140.0 -140.0 -138.0 -137.0 -134.0 -131.0 -132.0 -127.0 -126.0 -127.0 -118.0 -119.0 -116.0 -113.0 -110.0 -107.0 -104.0 -105.0 -100.0 -95.0 -96.0 -91.0 -90.0 -89.0 -88.0 -87.0 -82.0 -77.0 -76.0 -71.0 -72.0 -71.0 -68.0 -63.0 -64.0 -65.0 -60.0 -63.0 -60.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -45.0 -40.0 -37.0 -40.0 -37.0 -32.0 -36.0 -33.0 -28.0 -27.0 -20.0 -22.0 -20.0 -19.0 -18.0 -13.0 -8.0 -9.0 -6.0 -3.0 -2.0 -4.0 -3.0 2.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 6.0 1.0 0.0 -3.0 -8.0 -5.0 -10.0 103 -210.0 -213.0 -208.0 -207.0 -208.0 -205.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -175.0 -170.0 -171.0 -170.0 -167.0 -162.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -140.0 -141.0 -138.0 -135.0 -132.0 -131.0 -132.0 -127.0 -126.0 -125.0 -118.0 -117.0 -116.0 -113.0 -112.0 -105.0 -104.0 -103.0 -100.0 -95.0 -94.0 -91.0 -92.0 -89.0 -86.0 -87.0 -84.0 -75.0 -74.0 -71.0 -72.0 -73.0 -68.0 -61.0 -64.0 -65.0 -60.0 -61.0 -58.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -43.0 -40.0 -37.0 -40.0 -37.0 -32.0 -34.0 -31.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -16.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 -2.0 -3.0 4.0 2.0 2.0 2.0 5.0 14.0 14.0 6.0 6.0 -1.0 0.0 -3.0 -8.0 -5.0 104 -215.0 -210.0 -213.0 -210.0 -207.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -179.0 -176.0 -177.0 -170.0 -171.0 -170.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -156.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -141.0 -136.0 -137.0 -132.0 -131.0 -132.0 -129.0 -126.0 -123.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -104.0 -101.0 -98.0 -93.0 -94.0 -91.0 -92.0 -89.0 -84.0 -85.0 -82.0 -75.0 -74.0 -71.0 -72.0 -71.0 -68.0 -61.0 -64.0 -67.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -47.0 -44.0 -45.0 -40.0 -37.0 -38.0 -37.0 -32.0 -32.0 -29.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -14.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 0.0 -1.0 4.0 2.0 2.0 4.0 7.0 14.0 14.0 5.0 4.0 -1.0 0.0 -3.0 -6.0 105 -218.0 -215.0 -210.0 -213.0 -210.0 -205.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -177.0 -176.0 -175.0 -170.0 -171.0 -168.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -139.0 -134.0 -139.0 -132.0 -131.0 -134.0 -129.0 -128.0 -121.0 -116.0 -115.0 -116.0 -109.0 -112.0 -105.0 -104.0 -103.0 -96.0 -93.0 -94.0 -93.0 -92.0 -89.0 -84.0 -85.0 -80.0 -75.0 -74.0 -71.0 -72.0 -71.0 -70.0 -61.0 -64.0 -65.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -45.0 -44.0 -45.0 -40.0 -37.0 -38.0 -36.0 -31.0 -30.0 -27.0 -26.0 -25.0 -18.0 -22.0 -18.0 -15.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 -2.0 2.0 -1.0 4.0 2.0 4.0 6.0 5.0 14.0 12.0 5.0 4.0 -1.0 2.0 -3.0 106 -219.0 -220.0 -215.0 -210.0 -213.0 -212.0 -205.0 -208.0 -205.0 -200.0 -199.0 -198.0 -197.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -175.0 -170.0 -171.0 -170.0 -167.0 -164.0 -159.0 -160.0 -158.0 -157.0 -156.0 -151.0 -152.0 -151.0 -144.0 -141.0 -136.0 -137.0 -134.0 -139.0 -132.0 -131.0 -132.0 -129.0 -126.0 -121.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -104.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -91.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -64.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -47.0 -42.0 -37.0 -37.0 -36.0 -29.0 -30.0 -29.0 -26.0 -23.0 -16.0 -20.0 -16.0 -13.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 0.0 2.0 -1.0 6.0 2.0 6.0 6.0 5.0 14.0 10.0 5.0 4.0 -1.0 2.0 107 -220.0 -219.0 -218.0 -215.0 -210.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -197.0 -198.0 -195.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -173.0 -170.0 -171.0 -168.0 -166.0 -163.0 -159.0 -160.0 -158.0 -157.0 -154.0 -151.0 -152.0 -149.0 -142.0 -139.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -130.0 -127.0 -124.0 -119.0 -114.0 -113.0 -114.0 -109.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -88.0 -89.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -62.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -45.0 -42.0 -37.0 -35.0 -34.0 -29.0 -30.0 -29.0 -24.0 -23.0 -16.0 -19.0 -16.0 -15.0 -12.0 -11.0 -10.0 -11.0 -4.0 1.0 0.0 2.0 1.0 8.0 2.0 6.0 6.0 6.0 14.0 8.0 5.0 4.0 -1.0 108 -223.0 -220.0 -219.0 -218.0 -217.0 -210.0 -209.0 -212.0 -205.0 -206.0 -203.0 -202.0 -197.0 -196.0 -195.0 -194.0 -193.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -176.0 -173.0 -170.0 -171.0 -169.0 -166.0 -163.0 -159.0 -161.0 -160.0 -155.0 -154.0 -153.0 -152.0 -147.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -128.0 -127.0 -122.0 -117.0 -112.0 -113.0 -114.0 -107.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -91.0 -86.0 -87.0 -82.0 -85.0 -80.0 -75.0 -72.0 -71.0 -70.0 -71.0 -70.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -47.0 -48.0 -44.0 -41.0 -39.0 -35.0 -34.0 -29.0 -30.0 -27.0 -22.0 -21.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -9.0 -4.0 1.0 0.0 2.0 0.0 8.0 2.0 6.0 8.0 6.0 14.0 8.0 5.0 4.0 109 -222.0 -223.0 -218.0 -219.0 -218.0 -217.0 -210.0 -209.0 -210.0 -203.0 -206.0 -201.0 -202.0 -197.0 -196.0 -195.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -174.0 -173.0 -170.0 -170.0 -167.0 -166.0 -163.0 -159.0 -161.0 -158.0 -155.0 -154.0 -153.0 -150.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -129.0 -126.0 -125.0 -120.0 -115.0 -112.0 -113.0 -112.0 -105.0 -104.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -89.0 -86.0 -87.0 -82.0 -83.0 -78.0 -75.0 -72.0 -71.0 -70.0 -71.0 -68.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -49.0 -47.0 -44.0 -39.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -22.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -7.0 -4.0 1.0 2.0 2.0 2.0 8.0 2.0 8.0 8.0 6.0 14.0 8.0 5.0 110 -227.0 -222.0 -223.0 -218.0 -219.0 -216.0 -215.0 -210.0 -209.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -191.0 -186.0 -187.0 -184.0 -181.0 -180.0 -177.0 -174.0 -171.0 -169.0 -168.0 -167.0 -166.0 -163.0 -159.0 -159.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -127.0 -124.0 -123.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -102.0 -101.0 -96.0 -91.0 -92.0 -89.0 -86.0 -87.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -49.0 -47.0 -42.0 -37.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -20.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 4.0 4.0 2.0 8.0 4.0 8.0 8.0 4.0 14.0 8.0 111 -228.0 -229.0 -222.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -203.0 -206.0 -201.0 -202.0 -199.0 -196.0 -195.0 -192.0 -191.0 -186.0 -187.0 -186.0 -183.0 -178.0 -179.0 -174.0 -173.0 -171.0 -170.0 -167.0 -164.0 -165.0 -161.0 -161.0 -160.0 -157.0 -154.0 -149.0 -146.0 -145.0 -144.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -129.0 -124.0 -121.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -100.0 -99.0 -96.0 -89.0 -90.0 -89.0 -86.0 -87.0 -80.0 -79.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -48.0 -45.0 -40.0 -35.0 -39.0 -39.0 -32.0 -27.0 -26.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -17.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 6.0 4.0 2.0 8.0 4.0 8.0 8.0 6.0 14.0 112 -233.0 -228.0 -227.0 -224.0 -227.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -197.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -170.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -157.0 -154.0 -151.0 -148.0 -145.0 -146.0 -139.0 -136.0 -135.0 -134.0 -133.0 -128.0 -127.0 -122.0 -121.0 -118.0 -113.0 -112.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -97.0 -94.0 -89.0 -90.0 -89.0 -86.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -46.0 -43.0 -40.0 -35.0 -40.0 -37.0 -32.0 -27.0 -24.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -15.0 -10.0 -11.0 -8.0 -5.0 -2.0 3.0 6.0 4.0 4.0 8.0 4.0 6.0 8.0 8.0 113 -234.0 -233.0 -228.0 -227.0 -224.0 -225.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -195.0 -192.0 -189.0 -188.0 -187.0 -182.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -168.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -133.0 -134.0 -133.0 -128.0 -125.0 -122.0 -121.0 -118.0 -113.0 -110.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -95.0 -92.0 -89.0 -90.0 -89.0 -86.0 -83.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -66.0 -61.0 -58.0 -55.0 -56.0 -55.0 -52.0 -52.0 -47.0 -44.0 -43.0 -40.0 -35.0 -38.0 -35.0 -30.0 -25.0 -22.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -13.0 -10.0 -11.0 -8.0 -3.0 0.0 3.0 6.0 4.0 4.0 8.0 6.0 6.0 8.0 114 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -199.0 -194.0 -197.0 -192.0 -189.0 -190.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -161.0 -158.0 -155.0 -152.0 -151.0 -150.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -131.0 -128.0 -125.0 -120.0 -119.0 -116.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -103.0 -98.0 -93.0 -92.0 -89.0 -90.0 -89.0 -84.0 -83.0 -80.0 -81.0 -78.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -54.0 -52.0 -50.0 -45.0 -42.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -23.0 -22.0 -25.0 -18.0 -19.0 -14.0 -17.0 -14.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 8.0 4.0 4.0 8.0 8.0 8.0 115 -238.0 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -194.0 -195.0 -192.0 -189.0 -188.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -159.0 -156.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -129.0 -128.0 -123.0 -120.0 -119.0 -114.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -101.0 -96.0 -93.0 -92.0 -89.0 -90.0 -87.0 -84.0 -83.0 -80.0 -81.0 -76.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -56.0 -52.0 -51.0 -48.0 -43.0 -42.0 -43.0 -40.0 -33.0 -34.0 -31.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 2.0 5.0 8.0 4.0 6.0 8.0 8.0 116 -241.0 -240.0 -235.0 -234.0 -235.0 -230.0 -229.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -210.0 -205.0 -206.0 -201.0 -200.0 -199.0 -194.0 -195.0 -194.0 -191.0 -190.0 -187.0 -184.0 -179.0 -177.0 -180.0 -175.0 -174.0 -171.0 -170.0 -171.0 -166.0 -165.0 -160.0 -159.0 -158.0 -155.0 -154.0 -151.0 -150.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -126.0 -125.0 -122.0 -119.0 -116.0 -111.0 -112.0 -109.0 -110.0 -103.0 -104.0 -101.0 -98.0 -95.0 -94.0 -89.0 -90.0 -87.0 -84.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -55.0 -50.0 -49.0 -46.0 -43.0 -42.0 -41.0 -38.0 -31.0 -32.0 -29.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -11.0 -6.0 -5.0 -4.0 1.0 2.0 5.0 8.0 4.0 8.0 8.0 117 -242.0 -243.0 -238.0 -235.0 -236.0 -233.0 -228.0 -231.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -212.0 -205.0 -208.0 -203.0 -200.0 -201.0 -194.0 -193.0 -192.0 -191.0 -190.0 -188.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -169.0 -168.0 -163.0 -158.0 -159.0 -160.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -124.0 -123.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -108.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -87.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -66.0 -63.0 -57.0 -55.0 -55.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -38.0 -31.0 -30.0 -31.0 -30.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -12.0 -11.0 -4.0 -5.0 -4.0 3.0 0.0 5.0 10.0 6.0 10.0 118 -243.0 -242.0 -241.0 -238.0 -235.0 -236.0 -231.0 -228.0 -229.0 -224.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -201.0 -194.0 -191.0 -192.0 -189.0 -189.0 -186.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -167.0 -166.0 -163.0 -158.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -143.0 -142.0 -139.0 -136.0 -131.0 -130.0 -129.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -106.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -64.0 -62.0 -57.0 -54.0 -53.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -36.0 -31.0 -30.0 -31.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -5.0 -2.0 3.0 0.0 5.0 10.0 8.0 119 -246.0 -243.0 -242.0 -241.0 -238.0 -235.0 -234.0 -231.0 -228.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -215.0 -212.0 -209.0 -210.0 -205.0 -206.0 -203.0 -200.0 -199.0 -194.0 -191.0 -190.0 -188.0 -187.0 -186.0 -185.0 -181.0 -177.0 -178.0 -177.0 -172.0 -171.0 -170.0 -167.0 -164.0 -163.0 -158.0 -159.0 -156.0 -153.0 -152.0 -147.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -128.0 -127.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -112.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -95.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -79.0 -80.0 -77.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -63.0 -60.0 -57.0 -54.0 -51.0 -48.0 -49.0 -46.0 -43.0 -40.0 -37.0 -34.0 -31.0 -30.0 -29.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -3.0 -2.0 3.0 2.0 7.0 12.0 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-5.html"},{"title":"混合ガウス分布のEMアルゴリズム","text":"クラスタリング で省略した、混合ガウス分布のEMアルゴリズムの計算過程を記述します。 EMアルゴリズム 観測データ \\(\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) に対する対数尤度関数は、 \\((9.7)\\) から以下のように書けます。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ E step $$\\begin{aligned} p(z_{k}=1|\\mathbf{x}) &\\equiv \\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{p(\\mathbf{x})}\\qquad (\\because\\text{Bayes' theorem})\\\\ &\\propto p(z_{k}=1)p(\\mathbf{x}|z_{k}=1) \\\\ &=\\pi_k\\mathcal{N}(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ なので、総和が \\(1\\) になるように正規化を行えば 負担率 が以下のように求まります。 $$\\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) =\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13)$$ ※ なお、この時分母である \\(\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})\\) が \\(p(\\mathbf{x})\\) であることは有用です。 （ 生物データマイニング論 第1回 では、これを用いて可視化していました。） Maximization step ※ 対数尤度関数 \\((9.14)\\) を \\(\\ln L\\) と記述します。 \\(\\boldsymbol{\\mu}_k\\) 対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\mu}_k\\) で微分します。この時 正規分布は \\(e&#94;{\\text{hoge}}\\) という形をしており、微分しても形が変わらないので、 $$\\begin{aligned} \\frac{\\partial\\ln L}{\\partial\\boldsymbol{\\mu}_k} &= \\sum_{i=n}&#94;N \\frac{\\pi_k\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= \\boldsymbol{\\Sigma}_k&#94;{-1}\\sum_{n=1}&#94;N \\gamma_{nk}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= 0\\\\ \\therefore\\boldsymbol{\\mu}_k&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.17)\\\\ \\end{aligned}$$ と最適解が求まりました。 \\(\\pi_k\\) パラメータ \\(\\pi_k\\) については、 \\(\\sum_{k=1}&#94;K \\pi_k = 1\\) という制約に注意する必要があります。ですが、 隠れマルコフモデルの最尤推定 で行なった能登同様に、ラグランジュの未定乗数 \\(\\lambda\\) を導入すればこの問題は解けます。 $$L_{\\lambda} = \\log L + \\lambda\\left(\\sum_{c=1}&#94;K \\pi_c - 1\\right)$$ の導関数が \\(0\\) となる条件を求める事になるので、 $$\\begin{aligned} \\frac{\\partial L_{\\lambda}}{\\partial\\pi_k} &= \\sum_{n=1}&#94;N \\frac{\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_k \\pi_k \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)} + \\lambda\\\\ &= \\sum_{n=1}&#94;N \\frac{\\gamma_{nk}}{\\pi_k} + \\lambda = 0 &\\therefore \\pi_k = -\\frac{1}{\\lambda}\\sum_{n=1}&#94;N \\gamma_{ic}\\\\ \\frac{\\partial L_{\\lambda}}{\\partial\\lambda} &= \\sum_{k=1}&#94;K \\pi_k - 1\\\\ &= \\left(-\\frac{1}{\\lambda}\\sum_{k=1}&#94;K\\sum_{n=1}&#94;N \\gamma_{nk}\\right) - 1 = 0 &\\therefore \\lambda = -n \\end{aligned}$$ より、 $$\\pi_k&#94;{\\star} = \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} \\qquad(9.22)$$ と最適解が求まりました。 \\(\\boldsymbol{\\Sigma}_k\\) \\(\\boldsymbol{\\mu}_k\\) と同様に、対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\Sigma}_k\\) で微分します。すると、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\log L = \\sum_{n=1}&#94;N\\frac{\\pi_k\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}$$ となります。ここで、 \\(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\) を計算すると、 $$\\begin{aligned} &\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\biggr)\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\left(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\right)\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(-\\frac{1}{2}\\biggr)|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\quad (\\ast1)\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\frac{1}{2}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\quad (\\ast2)\\\\ =&-\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)+\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{1}{2}\\left\\{\\boldsymbol{\\Sigma}_k&#94;{-1}-\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\right\\}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ したがって、 $$ \\boldsymbol{\\Sigma}_k&#94;{\\star}= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.19) $$ と最適解が求まりました。 ※ \\(\\ast1,\\ast2\\) の式変形は以下でより詳細に説明します。 が、その前にいくつか基本事項の定義を振り返ります。 行列式 $$\\det A=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)\\prod_{i=1}&#94;na_{i\\sigma(i)}=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)a_{1\\sigma(1)}a_{2\\sigma(2)}\\cdots a_{n\\sigma(n)}$$ \\(\\sigma\\) は \\(1\\) から \\(n\\) の置換（順列）を表す。 \\(\\mathrm{sgn}(\\sigma)\\) は置換の符号を表す。なお、\b置換の符号は 互\b換の数 に注目しており、奇置換（互換の数が奇数個）なら \\(-1\\) 、偶置換なら \\(+1\\) \b\b 余韻子 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\(i\\) 行と \\(i\\) 列を \\(1\\) つずつ取り去って作られる小行列を \\(M_{ij}\\) とする。つまり、 $$ M_{ij} = \\small \\left[ \\begin{array}{ccc} a_{11} & \\cdots &a_{1\\hspace{1mm}j-1} & a_{1\\hspace{1mm}j+1} & \\cdots & a_{1n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{i-1 \\hspace{1mm} 1} & \\cdots &a_{i-1\\hspace{1mm}j-1} & a_{i-1\\hspace{1mm}j+1} & \\cdots & a_{i-1 \\hspace{1mm}n} \\\\ a_{i+1 \\hspace{1mm} 1} & \\cdots &a_{i+1\\hspace{1mm}j-1} & a_{i+1\\hspace{1mm}j+1} & \\cdots & a_{i+1 \\hspace{1mm}n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{n1} &\\cdots &a_{n\\hspace{1mm}j-1} & a_{n\\hspace{1mm}j+1} &\\cdots &a_{nn} \\end{array} \\right] $$ です。ここで、 \\(\\Delta_{ij}=(-1)&#94;{i+j}|M_{ij}|\\) とすると、以下の 余因子展開 ができます。 \\(A\\) の行列式は \\(j\\) 列に関して、以下のように展開されます。 $$\\det A=\\Delta_{1j}a_{1j}+\\Delta_{2j}a_{2j}+\\cdots+\\Delta_{nj}a_{nj}$$ \\(A\\) の行列式は \\(i\\) 行に関して、以下のように展開されます。 $$\\det A=\\Delta_{i1}a_{i1}+\\Delta_{i2}a_{i2}+\\cdots+\\Delta_{in}a_{in}$$ \b 余韻子行列 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\((i, j)\\) 余因子を \\((j, i)\\) 成分に持つ行列 $$\\tilde{A} := \\begin{pmatrix}&\\Delta_{11}&\\Delta_{21}&\\cdots&\\Delta_{n1}\\\\&\\Delta_{21}&\\Delta_{22}&\\ldots&\\Delta_{n2}\\\\&\\vdots&\\vdots&\\ddots&\\vdots\\\\&\\Delta_{n1}&\\Delta_{n2}&\\cdots&\\Delta_{nn}\\end{pmatrix}$$ を 余韻子行列 と呼びます。ここで、余韻子展開を考えれば、余韻子行列に関して、 $$\\tilde{A}A=A\\tilde{A}=\\det(A)I_n$$ が成り立つことがわかります。 \\(\\ast1\\) の変形 以上を踏まえると、 \\(\\frac{\\partial\\det(A)}{\\partial a_{ij}} = \\Delta_{ij}\\) なので、 $$\\frac{\\partial|\\Sigma|}{\\partial\\Sigma} =\\tilde\\Sigma = |\\Sigma|\\Sigma&#94;{-1}$$ が成り立ち、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}} =-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-\\frac{3}{2}}\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\boldsymbol{\\Sigma_k}=-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma_k}&#94;{-1}$$ となることがわかります。 トレースと固有値の関係性 【命題】 トレースには、 \\(Tr(A) = \\sum_{k=1}&#94;{n}\\lambda_{k}\\) という関係がある。 トレース： \\(n\\times n\\) の正方行列 \\(A\\) に対して、\b対角成分の和 \\(\\sum_{k=1}&#94;{n}a_{kk}\\) を \\(A\\) のトレースと呼び、 \\(\\mathrm{Tr}(A),\\mathrm{tr}A\\) \b と表す。 【証明】 まず、固有方程式は、 $$\\phi(t) = |A-tI| = \\left|\\begin{array}{cccc} a_{11}-t & a_{12} & \\ldots & a_{1n} \\\\ a_{21} & a_{22}-t & \\ldots & a_{2n} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_{n1} & a_{n2} & \\ldots & a_{nn}-t \\end{array} \\right|$$ である。ここで、 \\(t\\) の係数に着目する。 \\(t&#94;n\\) の係数 これは、対角成分を全て掛け合わせた次の多項式 $$(a_{11}-t)(a_{22}-t)\\ldots(a_{nn}-t)$$ における \\(t&#94;n\\) の係数と等しくなる。よって、係数は「 \\((-1)&#94;n\\) 」 \\(t&#94;{n-1}\\) の係数 これも\b、先ほどの多項式の \\(t&#94;{n-1}\\) の係数と等しくなる。（ \\(\\because\\) 余韻子展開を考える。 \\(\\sigma\\) が全単射のため、１行（列）対角成分ではないものがあると、\b少なくともあと１つは体格成分でないものがあることがわかる。） 定数項 これは、\b余韻子展開を考えれば \\(|A|\\) そのもの。 よって、係数は「 \\((-1)&#94;{n-1}(a_{11}+a_{22}+\\ldots+a_{nn})\\) 」であり、これは対角和を用いて「 $(-1)&#94;{n-1}\\mathrm{Tr}(A) $ 」とも書ける。 一方先ほどの固有方程式は固有値を解に持つ。 つまり、 \\(A\\) の固有値を \\(\\lambda_1\\) 〜 \\(\\lambda_n\\) として、 $$\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)$$ とかける。（ \\((-1)&#94;n\\) によって、 \\(t&#94;n\\) の係数を合わせている。） この式を展開すると、 \\(t&#94;{n-1}\\) の係数が「 \\((-1)&#94;{n-1}(\\lambda_1+\\lambda_2+\\ldots+\\lambda_n)\\) 」であることから $$\\mathrm{Tr}(A) = \\lambda_1+\\lambda_2+\\ldots+\\lambda_n$$ ※ちなみに、 \\(\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)\\) の定数項を考えることで、 $$|A| = \\lambda_1\\lambda_2\\ldots\\lambda_n$$ であることもわかる。 トレースの循環性 \\(A\\) を \\(m \\times n\\) 、 \\(B\\) を \\(n \\times m\\) の行列とすると、 \\(AB\\) は \\(m \\times m\\) の行列であり、 $$ \\begin{aligned} \\mathrm{Tr}[AB]&= \\sum_{i=1}&#94;{m} (AB)_{ii} \\\\&= \\sum_{i=1}&#94;{m}\\sum_{j=1}&#94;{n} A_{ij}B_{ji} \\\\&= \\sum_{j=1}&#94;{n} \\sum_{i=1}&#94;{m} B_{ji} A_{ij} \\\\&= \\sum_{j=1}&#94;{n} (BA)_{jj} \\\\&= \\mathrm{Tr}[BA] \\end{aligned} $$ となる。これを応用すれば、以下の 循環性 が証明できる。 \\(A,B,C\\) をそれぞれ \\(m\\times n,n \\times l,l \\times m\\) の行列とするとき、 $$\\begin{aligned} \\mathrm{Tr}[ABC] =& \\mathrm{Tr}[BCA] \\\\=& \\mathrm{Tr}[CAB] \\end{aligned} $$ が成り立つ。（ \\(\\because\\) ２つの\b行列積をセットで考えれば明らか） 逆行列の微分 正則行列 \\(A\\) に対して、 \\(A&#94;{-1}A=I\\) が成立するので、\bこの等式の両辺を \\(A\\) で微分して、 $$\\begin{aligned} \\biggr(\\frac{\\partial }{\\partial A}A&#94;{-1}\\biggl)A + A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl) = 0\\\\ \\biggr(\\frac{\\partial A&#94;{-1}}{\\partial A}\\biggl) = -A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl)A&#94;{-1} \\end{aligned}$$ シングルエントリ行列 \\((i,j)\\) 成分のみが \\(1\\) で、残りが全て \\(0\\) の行列 \\(\\mathbf{J}&#94;{ij}\\) を シングルエントリ行列 と呼ぶ。なお、\b以下の式が成り立つ。 $$\\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{ij}\\bigl)=\\mathbf{A}_{ji}$$ \b \\(2 \\times 2\\) の行列でこれを示す。 $$\\begin{aligned} \\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{12}\\bigl)&=\\mathrm{Tr}\\biggr(\\begin{pmatrix}a_{11}&a_{12}\\\\a_{21}&a_{22}\\end{pmatrix}\\begin{pmatrix}0&1\\\\0&0\\end{pmatrix}\\biggl)\\\\ &=\\mathrm{Tr}\\begin{pmatrix}0&a_{11}\\\\0&a_{21}\\end{pmatrix}\\\\ &=a_{21}\\\\ &=\\mathbf{A}_{21} \\end{aligned}$$ \\(\\ast2\\) の変形 以上を踏まえれば、 $$\\begin{aligned} \\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu}) &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr((\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\biggl)\\\\ &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\frac{\\partial\\boldsymbol{\\Sigma}}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\biggl)\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ji}\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ij}\\\\ \\end{aligned}$$ よって、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})=-\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html"},{"title":"クラスタリング","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 講義の方針 データ解析アルゴリズムは、生物学の研究に不可欠 R や python のパッケージとして、すぐダウンロードして使うことができる。 しかし、原理を知らずに使うと、アルゴリズムの出す結果を盲信することになり危険。 正しい理解：結果を疑えるようになること。 階層的クラスタリング クラスタリング データ点を クラスタ（互いに類似したグループ） に分割する。 距離尺度：ユークリッド距離、コサイン距離など。 階層的クラスタリング 最初は各点がクラスタとなる。 二つのクラスタを選んで合併していく。 Single Link ：二つのクラスタをまたぐ最近点の距離 chaining により、ゆるいクラスタができる （非推奨） Complete Link ：二つのクラスタをまたぐ最遠点の距離 最も固いクラスタができるが、細かく分け過ぎる傾向がある。 Average Link ：二つのクラスタをまたぐ点対の平均距離 最もバランスがとれており、通常はこれを用いる。 最後は一つのクラスタになる。 デンドログラム ：合併の過程を樹形図の形で表したもの。 K-Means 分割的クラスタリング の一手法。$K$ クラスにデータ点を分割する。 以下を繰り返す。 各データ点 $\\mathbf{x}$ を最も近い中心点 $\\mu_k$ に割り当てて、クラスタ $c_1,\\ldots,c_K$ を作成する。 割当を元に中心点を計算しなおす。 $$\\mu_k = \\sum_{j\\in C_i} \\mathbf{x}_j$$ 実装 In [1]: import numpy as np import matplotlib.pyplot as plt Data. In [2]: np . random . seed ( 0 ) In [3]: N = 30 ; K = 5 vmin = 0 ; vmax = 1 In [4]: # Training Data. data = np . random . uniform ( vmin , vmax , ( N , 2 )) x , y = data . T In [5]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [6]: # Background Color Xs , Ys = np . meshgrid ( np . linspace ( vmin , vmax , 100 ), np . linspace ( vmin , vmax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.KMeans.KMeans ） を使って学習させます。 In [7]: from kerasy.ML.KMeans import KMeans In [8]: model = KMeans ( K = K , random_state = 0 ) In [9]: model . fit ( data ) Visualization. In [10]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [11]: # For Visualization. plt_model = KMeans ( K = K ) In [12]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( idx , mu ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Plot Representative points(µk) of each class. mux , muy = mu . T ax . scatter ( mux , muy , marker = 'x' , c = \"red\" , s = 200 ) # Background. plt_model . mu = mu Z , _ = plt_model . predict ( XYs ) Zs = Z . reshape ( Xs . shape ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( vmin , vmax ) ax . set_ylim ( vmin , vmax ) ax . set_title ( f \"Iteration. { i : >02 } \" ) plt . show () 混合ガウス分布 混合ガウス分布は、次のように混合係数 $\\pi_k$ でガウス分布を線形重ね合わせした形でかける。 $$p(\\mathbf{x}) = \\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\qquad (9.7)$$ ここで、 二値ベクトル（1-of-K符号化法） $\\mathbf{z}$ の周辺分布は、$0\\leq\\pi_k\\leq1$ と $\\sum_{k=1}&#94;K\\pi_k = 1 $ を満たす $\\pi_k$ を用いて、 $$p\\left(\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\pi_k&#94;{z_k}\\qquad (9.9)$$ と書ける。また、$\\mathbf{z}$ が与えられた時の $\\mathbf{x}$ の事後分布は当然ながら次のガウス分布である。 $$p\\left(\\mathbf{x}|\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)&#94;{z_k}\\qquad(9.11)$$ EMアルゴリズム 観測データ $\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}$ に対する対数尤度関数は、$(9.7)$ から以下のように書ける。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ Expectation step M stepで必要となる $\\gamma(z_{nk})$ を求める。 この値は、$\\mathbf{x}$ が与えられた下での $\\mathbf{z}$ の条件付き確率であり、混合要素 $k$ が $\\mathbf{x}$ の観測を 「説明する」 度合いを表す 負担率(responsibility) として解釈することもできる。 $$ \\begin{aligned} \\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) &=\\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{\\sum_{j=1}&#94;{K}p(z_{j}=1)p(\\mathbf{x}|z_{j}=1)}\\\\ &=\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13) \\end{aligned} $$ Maximization step M stepでは、尤度関数を最大化するように各パラメータの値を更新する。 ※ 導出過程は 混合ガウス分布のEMアルゴリズム に載せています。 $$ \\begin{aligned} \\boldsymbol{\\mu}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.17)\\\\ \\boldsymbol{\\Sigma}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.19)\\\\ \\pi_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} & (9.22) \\end{aligned} $$ 実装 Data. In [13]: np . random . seed ( 0 ) In [14]: N = 150 ; K = 3 In [15]: # Train Data. data = np . concatenate ([ np . random . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 0 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [16]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [17]: # Background Color xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.MixedDistribution.MixedGaussian ） を使って学習させます。 In [18]: from kerasy.ML.MixedDistribution import MixedGaussian In [19]: model = MixedGaussian ( K = K , random_state = 1234 ) In [20]: model . fit ( data , span = 20 ) Visualization. In [21]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [22]: # For Visualization. plt_model = MixedGaussian ( K = K ) plt_model . N , plt_model . M = data . shape In [23]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( epoch , idx , mu , S , pi ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Background. plt_model . mu = mu plt_model . S = S plt_model . pi = pi Z = plt_model . predict ( XYs ) Zs = np . sum ( Z , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( xmin , xmax ) ax . set_ylim ( ymin , ymax ) ax . set_title ( f \" { epoch : >02 } epochs.\" ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html"},{"title":"イントロダクション","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 講義予定 前半（山崎担当） 画像の操作 画像の特徴抽出・内容理解・構造化 機械学習一般 後半（相澤担当） 画像を撮る：カメラの内部処理・センサ・レンズ・標本化 画像を表現する。色の知覚・表現 画像の基礎的な処理。周波数変換、線形・非線形フィルタリング |#|日付|担当|内容| |:-:|:-:|:-:|:-| |1|9/30(月)|山崎| 画像・映像を中心とした現在の技術動向の紹介、低次・領域・局所画像特徴 | |2|10/7(月)|山崎| 特徴選択、特徴表現 | |3|10/21(月)|山崎| 機械学習概論、教師なし学習、クラスタリング | |4|10/28(月)|山崎| 機械学習 (NN, SVM, RF) | |5|11/7(木)|山崎| 深層学習 (Deep Neural Networks) | |6|11/11(月)|山崎| 動画像処理 (ブロックマッチング、背景差分、オプティカルフロー) | |7|11/13(水)|山崎| 3次元空間情報の取得と処理 | |8|11/18(月)|相澤| デジタルカメラ系 | |9|11/25(月)|相澤| 表色系 | |10|12/9(月)|相澤| フィルタリング | |11|12/16(月)|相澤| 画像復元 | |12|12/23(月)|相澤| 画像符号化 | |13|12/25(水)|相澤| 特徴抽出 | |13|1/27|| テスト | パターン認識一般 現在は、90%位が 学習ベース(data-driven) 。残りが解析的手法。最近はこのhybridも。 全体的な流れ 学習(training) 検証(validation)←パラメータ最適化 推論(test, inference) なぜ今 学習ベース なのか？ データの大規模化：インターネット上から大量に収集可。 計算機の進化：ムーアの法則による高速化。さらにはクラウド 労働力のクラウド化 画像特徴 低次特徴量 色ヒストグラム（RGB,HSV,L*a*b*）：単純計算すると \\(256&#94;3\\) 個binができるので、注意。 色共起ヒストグラム（Correlogram）：隣接ピクセルの色を踏まえたヒストグラム 円、コーナー直線の数・大きさ・長さ 物体の円度、曲率等 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html"},{"title":"matplotlibチートシート","text":"In [1]: import numpy as np import matplotlib.pyplot as plt $N$ 枚の画像を plot Vsize , Hsize = () # 画像の横の長さと縦の長さ。 n_fig = \"画像の枚数\" n_col = \"横に並ぶ数\" n_row = n_fig // n_col + 1 if n_fig % n_col != 0 else n_fig // n_col # 行数を計算。 fig = plt . figure ( figsize = ( Vsize * n_col , Hsize * n_row )) for i , hoge in enumerate ( HOGEs ): ax = fig . add_subplot ( row , col , i + 1 ) \"\"\" 描きたいオブジェクトをプロット \"\"\" plt . tight_layout () plt . show () $N$ 色をグラデーション的に利用。 In [2]: import matplotlib.pyplot as plt import matplotlib.cm as cm N = 30 for n in range ( N ): plt . plot (( 0 , 1 ),( 0 , n ), color = cm . jet ( n / N )) plt . show () gifの画像の作成 上のようにやって全ての画像をまとめた一枚の画像を出力しても良いが、 n_fig = \"画像の枚数\" digit = len ( str ( N )) for i , hoge in enumerate ( HOGEs ): ax = fig . add_subplot ( row , col , i + 1 ) plt . figure ( figsize = \"サイズ\" ) \"\"\" 描きたいオブジェクトをプロット \"\"\" plt . savefig ( f \"img { i : >0 { digit }} .png\" ) として連番の画像を作成し、それを以下のプログラムでgif画像にした方が見やすい場合もある from PIL import Image N = 30 digit = len ( str ( N )) images = [] for i in range ( N ): img = Image . open ( f \" { i : >0 { digit }} .png\" ) images . append ( img ) images [ 0 ] . save ( 'out.gif' , save_all = True , append_images = images [ 1 :], loop = 0 , duration = 300 ) # loop=0: 無限ループ # duration: 一枚あたりの表示時間[ms] cmaps In [3]: cmaps = [ 'Accent' , 'Blues' , 'BrBG' , 'BuGn' , 'BuPu' , 'CMRmap' , 'Dark2' , 'GnBu' , 'Greens' , 'Greys' , 'OrRd' , 'Oranges' , 'PRGn' , 'Paired' , 'Pastel1' , 'Pastel2' , 'PiYG' , 'PuBu' , 'PuBuGn' , 'PuOr' , 'PuRd' , 'Purples' , 'RdBu' , 'RdGy' , 'RdPu' , 'RdYlBu' , 'RdYlGn' , 'Reds' , 'Set1' , 'Set2' , 'Set3' , 'Spectral' , 'Wistia' , 'YlGn' , 'YlGnBu' , 'YlOrBr' , 'YlOrRd' , 'afmhot' , 'autumn' , 'binary' , 'bone' , 'brg' , 'bwr' , 'cividis' , 'cool' , 'coolwarm' , 'copper' , 'cubehelix' , 'flag' , 'gist_earth' , 'gist_gray' , 'gist_heat' , 'gist_ncar' , 'gist_rainbow' , 'gist_stern' , 'gist_yarg' , 'gnuplot' , 'gnuplot2' , 'gray' , 'hot' , 'hsv' , 'inferno' , 'jet' , 'magma' , 'nipy_spectral' , 'ocean' , 'pink' , 'plasma' , 'prism' , 'rainbow' , 'seismic' , 'spring' , 'summer' , 'tab10' , 'tab20' , 'tab20b' , 'tab20c' , 'terrain' , 'viridis' , 'winter' ] In [4]: matrix = np . arange ( 100 ) . reshape ( 10 , 10 ) In [5]: Vsize , Hsize = ( 4 , 4 ) n_fig = len ( cmaps ) n_col = 4 n_row = n_fig // n_col + 1 if n_fig % n_col != 0 else n_fig//n_col In [6]: fig = plt . figure ( figsize = ( Vsize * n_col , Hsize * n_row )) for i , cmap in enumerate ( cmaps ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) ax . matshow ( matrix , cmap = cmap ) ax . set_title ( f \"↓ { cmap } ↓\" , fontsize = 24 ), ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-0.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-0.html"},{"title":"生物物理学 第1回","text":"講師： 能瀬聡直 講義資料： 生物物理学 参考書： 神経科学 -脳の探求- 参考書： ニューロンの生物物理 講義概要 生物物理学とは 遺伝情報の流れ 蛋白質の構造と機能 細胞内タンパク質のダイナミックス 遺伝子操作技術 ゲノム科学とバイオインフォマティックス バイオイメージング、生体分子計測 脳・神経系の生物物理 講義日程 |#|日付|担当| |:-:|:-:|:-:| |1|9/25|能瀬| |2|10/2|樋口| |3|10/9|樋口| |4|10/16|樋口| |5|10/23|樋口| |6|10/30|樋口| |7|11/6|樋口| |8|11/20|能瀬| |9|11/27|能瀬| |10|12/4|樋口| |11|12/11|能瀬| |12|12/18|能瀬| |13|1/8|能瀬| |14|1/15|能瀬| 生物物理学とは？ 物理の手法で生物を見る。 生体分子の機能や構造の研究。 対象は広範囲、ただし物理的理念を背景にもつ。 生体高分子の構造・機能、脳・神経機構など単なる記述中心の従来の生物学と異なり、論理的な思考法を用い、より普遍的な原理を見いだすことを目指している。 生物物理の代表的発見 DNA二重螺旋構造の発見（1953年、1962年ノーベル生理医学賞） 蛋白質の高次構造の解析（1960年、1962年ノーベル化学賞） 神経活動のイオン機構の解明（1953年、1963年ノーベル生理医学賞） 最近の技術革新 ヒトゲノム計画 ヒトの全遺伝子の設計図解読の終了（2000年） イメージング技術 蛍光蛋白質・レーザー顕微鏡（1990年代） 1分子観測・1分子操作 溶液中での蛋白質1分子の観察（1990年代） 神経回路の作動原理の解明に向けた従来の3つのアプローチ 解剖学(Anatomy) 神経の配線を明らかにする。 生理学(Physiology) 神経活動を測定・操作する。 理論 神経活動パターンから原理を抽出 Part1. Introduction 脳神経系における情報の流れ ニューロンの構成 脳とコンピューター |半導体|↔︎|半導体素子|↔︎|集積回路|↔︎|コンピューター| |:-:|:-:|:-:|:-:|:-:|:-:|:-:| |分子|↔︎|神経細胞 グリア細胞|↔︎|神経回路|↔︎|脳| 活動電位の特徴 全か無か： \\(\\mathrm{Na}\\) チャネル活性化に閾値がある。 一過性： \\(\\mathrm{Na}\\) チャネル不活性化 確実に伝播 一体、どのような構造を持った神経回路の中を、どのように信号が伝わることで特定の演算が創発されるのか。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html"},{"title":"HMMをpythonで実装","text":"（kerasy.ML.HMM.HMM） の使い方 自作のモジュール （kerasy.ML.HMM.HMM） を使って実装をします。 In [1]: from kerasy.ML.HMM import HMM In [2]: model = HMM () In [3]: # 以下のようなパラメタファイルを読み込む。 ! cat params.json { \"M\": 4, \"K\": 4, \"basetypes\": [\"a\", \"c\", \"g\", \"u\"], \"pi\": [0.7, 0.1, 0.1, 0.1], \"A\": [[0.8, 0.1, 0.1, 0.0], [0.0, 0.8, 0.1, 0.1], [0.1, 0.0, 0.8, 0.1], [0.1, 0.0, 0.1, 0.8]], \"phi\": [[0.4, 0.1, 0.1, 0.4], [0.25, 0.25, 0.25, 0.25], [0.1, 0.4, 0.4, 0.1], [0.3, 0.2, 0.2, 0.3]] } In [4]: model . load_params ( \"params.json\" ) In [5]: # インスタンスに読み込まれた各種パラメータ model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 In [6]: # なお、この時以下のような辞書を同時に作成しています。 print ( model . base2int ) print ( model . int2base ) {'a': 0, 'c': 1, 'g': 2, 'u': 3} {0: 'a', 1: 'c', 2: 'g', 3: 'u'} In [7]: # また、パラメータはnumpyの行列の形で読み込まれています。 print ( type ( model . pi )) print ( type ( model . A )) print ( type ( model . phi )) In [8]: # 以下のようにすれば、学習したパラメタを同じ形式で出力することができます。 model . save_params ( \"out.json\" ) Viterbi algorithm HMMのViterbiアルゴリズムを実装して、尤もらしいサンプル配列の隠れ状態列を推定します。 In [9]: from kerasy.utils.bio import alignStr , readMonoSeq , readMultiSeq # ファイルの中身 cat seq1.fasta ``` sample-RNA gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc ``` In [10]: # ファイルの読み込み seq1 = readMonoSeq ( 'seq1.fasta' ) print ( f \"Input Sequence: \\n { alignStr ( seq1 [ 0 ]) } \" ) Input Sequence: gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc In [11]: # この時、文字列をリストに格納しています。 print ( type ( seq1 )) In [12]: pred1 = model . predict ( sequences = seq1 , asai = True ) In [13]: # 変数asaiは、隠れ状態がZero-based numberingかどうかを決めるものであり、特に意味はありません。（課題の形式に対応したものがasai=True.） print ( f \"Hidden Indexes: \\n { alignStr ( pred1 [ 0 ]) } \" ) Hidden Indexesn [14]: # もちろんパラメタの更新は行われていません。 model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 Baum-Welch algorithm HMMのBaum-Welchアルゴリズムを実装して、モデルを学習させてます。 In [15]: model = HMM () model . load_params ( \"params2.json\" ) model . params () # 文字が \"acgu\"→\"ACGT\"に変わっただけです。 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.4000 0.2500 0.1000 0.3000 C 0.1000 0.2500 0.4000 0.2000 G 0.1000 0.2500 0.4000 0.2000 T 0.4000 0.2500 0.1000 0.3000 cat seq2.txt ``` >Vitis_vinifera_chr14.trna15-AlaAGC (28776087-28776159) Ala (AGC) 73 bp Sc: 68.12 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAGGTACGGGGATCGATA CCCCGCATCTCCA >Vitis_vinifera_chr13.trna5-ArgCCG (2691241-2691313) Arg (CCG) 73 bp Sc: 83.85 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAGGTCGTGGGTTCGAAT CCCACTGCGATCG >Vitis_vinifera_chr3.trna6-GlnCTG (5807449-5807520) Gln (CTG) 72 bp Sc: 71.93 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTAACCCGAGTTCAAATC TCGGTGGGACCT >Vitis_vinifera_chr14.trna19-LeuAAG (25640120-25640040) Leu (AAG) 81 bp Sc: 62.71 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTGTCCGAAAGGGCGTGG GTTCAAATCCCACTCTCCACA >Vitis_vinifera_chr18.trna9-MetCAT (2896034-2896118) Met (CAT) 85 bp Sc: 60.66 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCGAGTAATCCTGAGGTC GAGAGTTCGAGCCTCTCTCACCCCA >Vitis_vinifera_chr3.trna30-ProTGG (7498415-7498344) Pro (TGG) 72 bp Sc: 68.98 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGGTCCCGAGTTCGATTC TCGGAATGACCC >Vitis_vinifera_chr5.trna13-GluTTC (21745120-21745048) Glu (TTC) 73 bp Sc: 36.67 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTGGTCGTGGGTTCGAGC CCTATTGGTGGTT >Vitis_vinifera_chr5.trna3-TyrGTA (7422575-7422666) Tyr (GTA) 92 bp Sc: 33.68 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTGACCCAATAGATATCC TTAGGTCGTTAGTTTGAATCCAACAGGTCTAA >Vitis_vinifera_chr1.trna8-ValCAC (11396083-11396156) Val (CAC) 74 bp Sc: 66.86 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGAGGTCCCTAGTTCGAA CCCAGGCTCAGATA >Vitis_vinifera_chr14.trna2-SerTGA (4021381-4021462) Ser (TGA) 82 bp Sc: 80.82 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTGGGCTTCGCCCGCGCA GGTTCGAACCCTGCTGTCGACG ``` In [16]: seq2 = readMultiSeq ( 'seq2.txt' ) In [17]: for i , seq in enumerate ( seq2 ): print ( f \"No. { i : >02 } \\n { alignStr ( seq , width = 45 ) } \" ) No.00 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAG GTACGGGGATCGATACCCCGCATCTCCA No.01 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAG GTCGTGGGTTCGAATCCCACTGCGATCG No.02 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTA ACCCGAGTTCAAATCTCGGTGGGACCT No.03 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTG TCCGAAAGGGCGTGGGTTCAAATCCCACTCTCCACA No.04 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCG AGTAATCCTGAGGTCGAGAGTTCGAGCCTCTCTCACCCCA No.05 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGG TCCCGAGTTCGATTCTCGGAATGACCC No.06 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTG GTCGTGGGTTCGAGCCCTATTGGTGGTT No.07 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTG ACCCAATAGATATCCTTAGGTCGTTAGTTTGAATCCAACAGGTCT AA No.08 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGA GGTCCCTAGTTCGAACCCAGGCTCAGATA No.09 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTG GGCTTCGCCCGCGCAGGTTCGAACCCTGCTGTCGACG In [18]: # 学習させる。 model . fit ( sequences = seq2 , epochs = 2000 , verbose = False ) In [19]: import matplotlib.pyplot as plt In [20]: def plotHistory ( model ): \"\"\" 学習の過程をプロットする関数 \"\"\" plt . plot ( model . history ) plt . title ( f \"Mean Log Likelihood Transition (eoochs= { model . epoch } )\" ) plt . xlabel ( \"epochs\" ) plt . ylabel ( \"Mean Log Likelihood\" ) plt . show () In [21]: plotHistory ( model ) In [22]: model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.1024 0.0000 0.8976 0.0000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.2819 0.7181 0.0000 0.0000 z(2) 0.0000 0.5670 0.0000 0.4330 z(3) 0.0521 0.0000 0.3415 0.6064 z(4) 0.5158 0.0000 0.0000 0.4842 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.3436 0.3099 0.1059 0.0055 C 0.2538 0.0592 0.0970 0.4297 G 0.4026 0.4418 0.7971 0.0345 T 0.0000 0.1891 0.0000 0.5304 ※ 隠れ状態ごとにかなり偏った遷移を行なう。 また、 遷移行列の対角成分がそこまで大きい値では無い。 → 特定の構造が、 ある程度の長さのゆとりを持って 繰り返されていると予想される。 In [23]: pred2 = model . predict ( sequences = seq2 , asai = True ) In [24]: for i , pred in enumerate ( pred2 ): print ( f \"No. { i : >02 } Hidden Indexes: \\n { alignStr ( pred , width = 45 ) } \" ) No.00 Hidden Indexes: 333334122244412241241222224412444124122412222 2411222224412224441241244441 No.01 Hidden Indexes: 334411241241222412241241124412244441224441222 2412412244412244412441122441 No.02 Hidden Indexes: 334441241244412412441222412412244441224441241 244412244412244441241222444 No.03 Hidden Indexes: 341222241244122441244412222244122441222444441 244122222241222244412244412444441241 No.04 Hidden Indexes: 333341241241122441244124112412244412412444441 2241244441222441222244412244444441244441 No.05 Hidden Indexes: 333412441244412412412224444124444122224122222 444412244412444441222412444 No.06 Hidden Indexes: 334441241244412441244122411222244444124444122 2412412244412244441241241244 No.07 Hidden Indexes: 341244441244412441241222412222241241241222441 244412412241244441224124412444122444124122444 12 No.08 Hidden Indexes: 344412241241222441244124112441244412411244122 22444441244412244412244412241 No.09 Hidden Indexes: 344124122444122412441222222412244412224441241 2244412444112412244412244441122441241 補足：上記プログラムにバグがないかの確認 Baum-Welchアルゴリズムが正しく実装できていたか、極端な配列を学習させることで確認します。 In [25]: model = HMM () model . load_params ( \"params3.json\" ) model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 0.7000 0.1000 0.2000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.8000 0.1000 0.1000 z(2) 0.1000 0.8000 0.1000 z(3) 0.1000 0.1000 0.1000 ------------------------------ *emission probability z(1) z(2) z(3) A 0.4000 0.2500 0.1000 C 0.1000 0.2500 0.4000 G 0.1000 0.2500 0.4000 T 0.4000 0.2500 0.1000 In [26]: seq_extreme = readMonoSeq ( 'seq3.txt' ) In [27]: # かなり極端な配列の例で実装してみる。 print ( f \"Input Sequence: \\n { alignStr ( seq_extreme [ 0 ]) } \" ) Input Sequence: TCTTTTTCCTCCTCTCTCCTTTCCCTCTTTTCCCTTCTTCTCTCCCTTTTCCTTCTCTTC TCTCTTTTCTTCCCCTTTTCCTTTTCTCCTCCCTCCCTTTCTTCCCTCCTTCCTCCCCCC CTCCCCTTTCCTTCCTTTCTCCTTCTCCCCATATGGCCATTTACTTCAGCTGATAGACAC CGAGTAACAACAATAAAGCGTTAGGTGGACGAATGCTCTACTCTGACCTCTAGCTTGTGG GTTCGCGGCTTGCCGAACGCTGGCCTCTGCCCGTCGAACCAATAAATGTTTATCCAGGAC ACCCCGTTCTTTGGTGATATCCCTCGCTCGAGTTATAGCATTGAAACCTCCATATCCGGC GATAAGAGCTACGGACCGTATACTGGGCGCCGGTAATTGGTTGCACTCGCCCTCGGTCTT TTTCTTTTTGGTTTAGCAGAGCAAGGCGTGGAAAAGGAGAGAGGGAGAAAAGGGAAAGGG AAAAGAGGAGAAGAAAGAAAAAGGAAGGGGGGAAGAGGAGAGAAGGGAAGGGAAGGGGGA GAAAGAGGGAAAGAGGAGAAAAAAGGAGGGGGAAGAAGGAAGGGGGAAAGGGGGGGAAAG 上の配列は、以下の構造を持っていることがわかります。 index type 1~150 pyrimidine base 151~450 both 451~600 purine base In [28]: model . fit ( sequences = seq_extreme , epochs = 100 , verbose = False ) In [29]: plotHistory ( model ) In [30]: model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 1.0000 0.0000 0.0000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.9933 0.0000 0.0067 z(2) 0.0000 1.0000 0.0000 z(3) 0.0000 0.0033 0.9967 ------------------------------ *emission probability z(1) z(2) z(3) A 0.0000 0.4851 0.2199 C 0.5034 0.0000 0.2627 G 0.0000 0.5149 0.2415 T 0.4966 0.0000 0.2760 In [31]: pred_extreme = model . predict ( sequences = seq_extreme ) In [32]: print ( f \"Hidden Indexes: \\n { alignStr ( pred_extreme [ 0 ]) } \" ) Hidden Indexesうまく傾向をつかんでいることから、学習アルゴリズムに大きな誤りはなさそうです。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-4.html"},{"title":"生物統計論 第1回","text":"講師： 木立尚孝 講義概要 09/27 (Fri) 10:25-12:10 10/04 (Fri) 10:25-12:10 10/11 (Fri) 10:25-12:10 10/18 (Fri) 10:25-12:10 10/25 (Fri) 10:25-12:10 11/08 (Fri) 10:25-12:10 11/15 (Fri) 10:25-11:30(Lecture) / 11:30-12:10: (Test) Section1.1 STATISTICAL ANALYSIS Genomic data has recently become available, so the analyzing methods still its infancy at the century scale. It is very important how much information can be extracted from genomic and other omic data. Data-driven Research Development of measurement, communication, computing technologies. data science, e-science Statistics, computer skill, artificial intelligence, machine learning. Statistical Analysis Subjects and measurements are often conclude the random events , such as noise. Aiming for finding the \"True\" distribution, and inferencing on that distribution. Power of Statistical Methods Amount of information we can extract \"Many and high\" / \"Few or low\" quality Event infinite number of data cannot answer all questions. ex) we couldn't answer \"what is the number of eyes on the next dice.\" Data dependency. Section1.2 PROBABILITY DEFINITIONS Probability: Mathematical Probability: The probability of an event consisting of n out of m possible equally likely occurrences, defined to be n / m Statistical Probability: Each event is random, but if you repeat it a lot, you can see the probability that each event occurs. Subjective Probability: A type of probability derived from an individual's personal judgment or own experience about whether a specific outcome is likely to occur. ※ Mathematical Probability is the most strict and basic. Probability space \\(\\left(\\Omega, E, P\\right)\\) ||| |:-:|:-| | | $$\\begin{aligned}&\\Omega: \\text{Set, Samplemspace}\\\\&E: \\text{Events,}\\sigma\\text{-algebra}\\\\&P: \\text{Probability measure}\\end{aligned}$$ | Sample Space The sets of elementary events. ex.) The number of eyes on the dice. All possible genomes. All possible gene expression profiles \\(\\omega_i\\in\\Omega\\) is the identifier of possible individual stochastic phenomena. \\(\\sigma\\) -algebra $$ \\begin{aligned} &\\varepsilon= \\left\\{E_1,E_2,\\cdots|E_i\\subseteq\\Omega:\\text{event}:\\sigma\\text{-algebra} \\right\\}\\\\ &\\Rightarrow \\varnothing,\\Omega,\\left(E_i\\setminus E_j\\right),\\left(\\bigcup_{i=1}&#94;{\\infty}E_i\\right),\\left(\\bigcap_{i=1}&#94;{\\infty}E_i\\right)\\in\\varepsilon \\end{aligned} $$ The sets of Events. Each event \\(E_i\\subseteq\\Omega\\) Include Empty set \\(\\varnothing\\) , universal set \\(\\Omega\\) Closure to variable \"Set Operation\". (ex. Union, intersection, complement) example) |discrete set|Real set| |:--:|:--:| | | | |Power set| Borel set \\(\\mathcal{A}\\) | Probability measure ||| |:-:|:-:| | | $$\\begin{aligned}&\\mathbb{P} : \\mathcal{E} \\rightarrow \\mathbb{R} \\\\& 0 \\leq \\mathbb{P}(E) \\leq 1, E \\in \\mathcal{E} \\\\&\\mathbb{P}(\\Omega)=1, \\mathbb{P}(\\varnothing)=0 \\\\&\\text { For } E_{1}, E_{2}, \\cdots \\in \\mathcal{E}, \\text{ s.t. } E_{i} \\cap E_{j}=\\varnothing, \\forall i \\neq j \\\\&\\mathbb{P}\\left(\\bigcup_{i=1}&#94;{\\infty} E_{i}\\right)=\\sum_{i=1}&#94;{\\infty} \\mathbb{P}\\left(E_{i}\\right)\\end{aligned}$$ | Each event is assigned a value that indicates the likelihood or probability of occurrence. Random variable ||| |:-:|:-:| | | $$\\begin{aligned}X: &\\text{random variable}\\\\\\Leftrightarrow &X : \\Omega \\rightarrow \\mathbb{R} \\\\ &\\text { s.t. } X&#94;{-1}(A) \\in \\mathcal{E}, \\forall A \\in \\mathcal{A} \\\\&X&#94;{-1}(A) :=\\{\\omega \\in \\Omega \\mid X(\\omega) \\in A\\}\\end{aligned}$$ | Section1.3 PROBABILITY TERMS AND PROPERTIES Probability distribution function \\(F_x\\) (cumulative distribution) Probability density function \\(f_x\\) $$F_x\\left(x+dx\\right)-F_x\\left(x\\right)=:f_x(x)dx$$ Conditional Probability Joint Probability distribution $$(X,Y): \\Omega\\rightarrow\\mathbb{R}&#94;2; (X,Y)(\\omega) = \\left(X(\\omega),Y(\\omega)\\right)\\\\\\left(X,Y\\right)&#94;{-1}(A) = \\left\\{\\omega\\in\\Omega|\\left(X(\\omega),Y(\\omega)\\right)\\in A\\right\\}$$ Independent random variables Expected Value Variance Covariance: $$\\begin{cases}X,Y: \\text{independent random variables}\\Rightarrow \\mathrm{Cov}(X,Y) = 0\\\\X,Y: \\text{independent random variables}\\not\\Leftarrow \\mathrm{Cov}(X,Y) = 0 \\end{cases}$$ Indicator Function: $$\\mathbb{I}_A(x)=\\begin{cases}1 & x\\in A\\\\0 & x\\notin A\\end{cases},A\\in\\mathcal{A}$$ Marginalization Section1.4 PROBABILITY DISTRIBUTIONS Look Here!! if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html"},{"title":"生物統計論 第0回","text":"Section1.4 PROBABILITY DISTRIBUTIONS In [1]: import numpy as np import collections import matplotlib.pyplot as plt In [2]: N = 100000 Bernoulli Distribution In [3]: def BernoulliVar ( q , N , seed = None ): rng = np . random . RandomState ( seed ) if seed is not None else np . random return np . var ( rng . rand ( N ) < q ) In [4]: qs = np . linspace ( 0 , 1 , 1000 ) In [5]: probs = [ BernoulliVar ( q , N ) for q in qs ] In [6]: plt . title ( \"Bernoulli distribution\" ) plt . plot ( qs , probs , label = \"$Var(X)$\" ) plt . xlabel ( \"q\" ) plt . ylabel ( \"$Var(X)$\" ) plt . legend () plt . show () Binomial Distribution In [7]: def BinomialProb ( n , p , N , seed = None , color = None , ax = None ): if ax == None : fig , ax = plt . subplots () rng = np . random . RandomState ( seed ) if seed is not None else np . random counter = collections . Counter ( rng . binomial ( n , p , N )) count , freqs = zip ( * sorted ( counter . most_common ())) probs = [ freq / N for freq in freqs ] ax . plot ( count , probs , color = color , label = f \"p= { p } and n= { n } \" ) ax . scatter ( count , probs , color = color ) return ax In [8]: ax = BinomialProb ( 20 , 0.5 , N , seed = 0 , color = \"blue\" ) ax = BinomialProb ( 20 , 0.7 , N , seed = 0 , color = \"green\" , ax = ax ) ax = BinomialProb ( 40 , 0.5 , N , seed = 0 , color = \"red\" , ax = ax ) plt . legend () plt . show () Normal Distribution In [9]: from scipy import stats In [10]: def NormalProb ( mu , sigma ): X = np . arange ( mu - 3.5 * sigma , mu + 3.5 * sigma , sigma / 50 ) Y = stats . norm . pdf ( X , mu , sigma ) for i in np . arange ( - 3 , 4 , 1 ): idx = np . argmin ( abs ( X - ( mu + i * sigma ))) plt . plot ([ X [ idx ], X [ idx ]], [ 0 , Y [ idx ]], 'k-' ) plt . scatter ( X [ idx ], Y [ idx ], color = \"black\" ) plt . plot ( X , Y , color = \"black\" ) In [11]: NormalProb ( mu = 0 , sigma = 0.1 ) Multivariate Normal Distribution In [12]: from scipy.stats import multivariate_normal In [13]: x , y = np . mgrid [ - 3 : 3.5 : . 01 , - 3 : 3 : . 01 ] pos = np . dstack (( x , y )) rv = multivariate_normal ([ 0.5 , - 0.2 ], [[ 2.0 , 2.3 ], [ 0.3 , 0.8 ]]) plt . contourf ( x , y , rv . pdf ( pos )) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html"},{"title":"HMMのスケーリング","text":"HMMを実装する際に課題となるのが、forward-algorithm で \\(\\alpha\\) を再帰的に求める際に、 \\(\\alpha\\left(\\mathbf{z}_{n-1}\\right)\\) に \\(p(\\mathbf{z}_n|\\mathbf{z}_{n-1})\\) と \\(p(\\mathbf{x}_n|\\mathbf{z}_n)\\) をかけるため、値が非常に小さくなり、計算機の ダイナミックレンジ を超えてしまうことです。 そこで、ここでは \\(\\alpha\\left(\\mathbf{z}_{n}\\right)\\) と \\(\\beta\\left(\\mathbf{z}_{n}\\right)\\) にスケーリングを施し、それらの値が \\(1\\) のオーダーに止まるようにする手法を説明します。 forward-backward \\(\\alpha,\\beta\\) forward-backward algorithm で用いられていた \\(\\alpha,\\beta\\) は以下のように定義されていました。 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ Scaling factors まず、スケーリングされた \\(\\alpha,\\beta\\) は以下のように表されます。スケーリングによって、 \\(\\alpha\\) は高々 \\(K\\) 個の変数上の確率分布 、 \\(\\beta\\) は2つの条件付き確率の比 になることがわかります。 $$ \\begin{aligned} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.55)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\frac{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)}=\\frac{\\beta\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.61) \\end{aligned} $$ ここで、これらと \\(\\alpha,\\beta\\) を関連付けるためのスケーリング係数 \\(c\\) を導入します。 $$ c_{n}=p\\left(\\mathbf{x}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}\\right)\\qquad (13.56) $$ すると、 $$ \\begin{aligned} p\\left(\\mathbf{x}_1,\\ldots,\\mathbf{x}_n\\right) &= p\\left(\\mathbf{x}_n | \\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\cdots p\\left(\\mathbf{x}_3 | \\mathbf{x}_1,\\mathbf{x}_{2}\\right)p\\left(\\mathbf{x}_2 | \\mathbf{x}_1\\right)p(\\mathbf{x}_1)\\\\ &= c_n\\cdots c_3c_2c_1\\\\ &= \\prod_{m=1}&#94;{n} c_{m} \\end{aligned}\\qquad (13.58) $$ と展開することができるので、 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\left(\\prod_{m=1}&#94;{n} c_{m}\\right) \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) & (13.58)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)\\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) = \\left(\\prod_{m=n+1}&#94;{N} c_{m}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.60) \\end{aligned} $$ と対応関係がわかります。 \\(\\gamma,\\xi\\) 続いて、 \\(\\gamma,\\xi\\) と \\(\\widehat{\\alpha},\\widehat{\\beta}\\) の対応関係を求めます。 \\(\\alpha,\\beta\\) \\(\\alpha,\\beta\\) を用いると、以下のように表されていました。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} &(13.43) \\end{aligned}$$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) 先の対応関係を用いれば、 \\(\\widehat{\\alpha},\\widehat{\\beta}\\) を用いると、 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=\\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.64)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\left(c_{n}\\right)&#94;{-1} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.65) \\end{aligned} $$ と表されることがわかります。 Recursion 最後に、再帰式の対応関係も求めます。 \\(\\alpha,\\beta\\) $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) $$ \\begin{aligned} c_{n} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.58)\\\\ \\widehat{\\alpha}\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{z}_{1}| \\mathbf{x}_{1}\\right)=\\frac{p\\left(\\mathbf{z}_{1}\\right)p\\left(\\mathbf{x}_{1}| \\mathbf{z}_{1}\\right)}{p\\left(\\mathbf{x}_{1}\\right)} = \\frac{\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}}}{p\\left(\\mathbf{x}_{1}\\right)}\\\\ c_{n+1} \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\widehat{\\beta}\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) &(13.62)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)}{\\widehat{\\alpha}\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)}{p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} = 1 & (13.30) \\end{aligned} $$ なお、ここで \\((13.58)\\) でどのようにして \\(c_n\\) を求めるかですが、 $$ \\begin{aligned} \\mathrm{R.H.S}\\ (13.58) &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}}p\\left(\\mathbf{z}_{n-1}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\\\ &=p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) \\end{aligned} $$ となることから、 \\((13.58)\\) の右辺を \\(\\mathbf{z}_n\\) について周辺化すれば、 $$\\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = p\\left(\\mathbf{x}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = c_n$$ となるので、 \\(c_n\\) が求められることがわかります。 おまけ（尤度関数） 尤度関数はスケーリング係数 \\(c\\) を用いるだけで簡単に求められることがわかります。 $$p(\\mathbf{X})=\\prod_{n=1}&#94;{N} c_{n}\\qquad (13.63)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-3.html"},{"title":"HMMの最尤推定の計算過程","text":"ここでは、 HMMの最尤推定 で省略した計算過程について記述します。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) $$ \\begin{aligned} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})&=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10)\\\\ &=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\left[ \\prod_{n=2}&#94;{N}\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}} \\right] \\prod_{n=1}&#94;{N}\\prod_{d=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{d k}&#94;{x_{nd} z_{nk}}\\\\ \\therefore\\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta}) &=\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k + \\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk} + \\sum_{n=1}&#94;N\\sum_{d=1}&#94;D\\sum_{k=1}&#94;Kx_{nd}z_{nk}\\ln\\phi_{dk} \\end{aligned} $$ であるから、これを \\((13.12)\\) に代入して、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=&\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12)\\\\ =& \\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{n=1}&#94;N\\sum_{d=1}&#94;D\\sum_{k=1}&#94;Kx_{nd}z_{nk}\\ln\\phi_{dk} \\end{aligned} $$ ここで、 \\(\\sum_{\\mathbf{Z}} = \\sum_{\\mathbf{z_1},\\mathbf{z_2},\\ldots,\\mathbf{z_N}}\\) なので、それぞれ 関係の無い部分を周辺化 でき、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\sum_{\\mathbf{z_1}} p\\left(\\mathbf{z_1} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{1k}\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\sum_{\\mathbf{z_{n-1},z_n}}p\\left(\\mathbf{z_{n-1},z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{n=1}&#94;N\\sum_{d=1}&#94;D\\sum_{k=1}&#94;K\\sum_{\\mathbf{z_n}}p\\left(\\mathbf{z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)x_{nd}z_{nk}\\ln\\phi_{dk}\\\\ \\end{aligned}$$ となります。また、 \\(\\gamma,\\xi\\) の定義 を用いることで $$\\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_1}} \\gamma\\left(\\mathbf{z}_1\\right)z_{1k}\\right)\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\left(\\sum_{\\mathbf{z_{n-1},z_n}}\\xi\\left(\\mathbf{z_{n-1},z_{n}}\\right) z_{n-1,j}z_{nk}\\right)\\ln A_{jk}\\\\ &+\\sum_{n=1}&#94;N\\sum_{d=1}&#94;D\\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_n}}\\gamma\\left(\\mathbf{z}_n\\right)x_{nd}z_{nk}\\right)\\ln\\phi_{dk} \\end{aligned} $$ と書き直せます。この時、潜在変数が離散なので、 \\(\\gamma,\\xi\\) はそれぞれ和が \\(1\\) となる \\(K,\\left(K\\times K\\right)\\) 個の非負の数の集合を用いて以下のように記述できます。 $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ したがって、これらを用いて上記の式を書き直すと、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{d=1}&#94;Dx_{nd} \\ln \\phi_{d k} \\end{aligned}\\qquad (13.17) $$ Maximization step ここでは、上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) 関数を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化する際の ラグランジュの未定乗数法 を書き下します。 \\(\\boldsymbol{\\pi}\\) $$ \\begin{aligned} L\\left(\\boldsymbol{\\pi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) &= \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k} + \\lambda_1\\left(\\sum_{k=1}&#94;K\\pi_k - 1\\right)\\\\ \\frac{\\partial L}{\\partial \\pi_k}&=\\frac{\\gamma\\left(z_{1 k}\\right)}{\\pi_k} + \\lambda_1 = 0\\quad \\therefore \\pi_k = -\\frac{\\gamma\\left(z_{1 k}\\right)}{\\lambda_1}\\\\ \\frac{\\partial L}{\\partial \\lambda_1}&=\\sum_{k=1}&#94;K\\pi_k - 1 = 0\\quad \\therefore\\lambda_1 = -\\sum_{k=1}&#94;K\\gamma\\left(z_{1 k}\\right)\\\\ \\therefore\\pi_k&#94;{\\star} &= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} \\end{aligned} $$ \\(\\boldsymbol{A}\\) $$\\begin{aligned} L\\left(\\boldsymbol{A},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} + \\sum_{j=1}&#94;K\\lambda_{2,j}\\left(\\sum_{k=1}&#94;K A_{jk} - 1\\right)\\\\ \\frac{\\partial L}{\\partial A_{jk}} &= \\sum_{n=2}&#94;{N}\\frac{\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{A_{jk}} + \\lambda_{2,j} = 0\\quad \\therefore A_{jk} = -\\frac{\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\lambda_{2,j}}\\\\ \\frac{\\partial L}{\\partial \\lambda_{2,j}} &= \\sum_{k=1}&#94;K A_{jk} - 1 = 0\\quad \\therefore \\lambda_{2,j} = -\\sum_{k=1}&#94;K\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)\\\\ \\therefore A_{jk}&#94;{\\star}&=\\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\end{aligned}$$ \\(\\boldsymbol{\\phi}\\) $$\\begin{aligned} L\\left(\\boldsymbol{\\phi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} + \\sum_{k=1}&#94;K\\lambda_{3,k}\\left( \\sum_{i=1}&#94;D\\phi_{ik} - 1\\right)\\\\ \\frac{\\partial L}{\\partial\\phi_{ik}} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\phi_{ik}} + \\lambda_{3,k}=0\\quad \\therefore \\phi_{ik} = -\\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\lambda_{3,k}}\\\\ \\frac{\\partial L}{\\partial\\lambda_{3,k}} &= \\sum_{i=1}&#94;D\\phi_{ik} - 1 = 0 \\quad \\therefore \\lambda_{3,k} = -\\sum_{i=1}&#94;D\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni} = -\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)\\\\ \\therefore \\phi_{ik}&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)} \\end{aligned}$$ Expectation step $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14)\\\\ \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35)\\\\ \\end{aligned} $$ forward-algorithm \\((\\alpha)\\) $$\\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha(\\mathbf{z}_{n-1})p(\\mathbf{z} | \\mathbf{z}_{n-1})\\\\ \\end{aligned}$$ backward-algorithm \\((\\beta)\\) $$\\begin{aligned} \\beta\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N}, \\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}, \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+2}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} \\beta(\\mathbf{z}_{n+1})p(\\mathbf{x}_{n+1}|\\mathbf{z}_{n+1})p(\\mathbf{z}_{n+1}|\\mathbf{z}_n)\\qquad (13.38) \\end{aligned}$$ \\(\\gamma,\\xi\\) $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$\\begin{aligned} \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}\\right) \\\\ &=\\frac{p(\\mathbf{X} | \\mathbf{z}_{n-1}, \\mathbf{z}_{n}) p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{Bayes' theorem})\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{x}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43) \\end{aligned}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-2.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-2.html"},{"title":"HMMの最尤推定","text":"※ かなり導出部分を省略しています。導出は適宜 HMMの最尤推定の計算過程 を参照してください。 隠れマルコフモデルは、一般に以下の式で表されます。 $$ p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10) $$ \\(\\mathbf{X} = \\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) : \\(\\mathbf{Z} = \\{\\mathbf{z}_1,\\ldots,\\mathbf{z}_N\\}\\) \\(\\boldsymbol{\\theta}=\\{\\boldsymbol{\\pi}, \\mathbf{A}, \\boldsymbol{\\phi}\\}\\) ※ 一般に放出確率 \\(p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\boldsymbol{\\phi}\\right)\\) は、 二値のベクトル \\(\\mathbf{z}_n\\) の \\(K\\) 個の可能な状態に対応した \\(K\\) 個の要素を持つベクトルからなる任意の分布 $$ p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\phi\\right)=\\prod_{k=1}&#94;{K} p\\left(\\mathbf{x}_{n} | \\phi_{k}\\right)&#94;{z_{n k}}\\qquad (13.9) $$ を考えることも可能ですが、今回は下記の離散多項分布を考えます。 |Name|Probability|Conditional Distribution| |:-|:-:|:-:| |initial state| \\(\\pi_{k} \\equiv p\\left(z_{1 k}=1\\right)\\) | \\(p\\left(\\mathbf{z}_{1} \\mid \\boldsymbol{\\pi}\\right)=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\quad (13.8)\\) | |transition probability| \\(A_{j k} \\equiv p\\left(z_{n k}=1\\mid z_{n-1, j}=1\\right)\\) | \\(p\\left(\\mathbf{z}_{n} \\mid \\mathbf{z}_{n-1}, \\mathbf{A}\\right)=\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}}\\quad (13.7)\\) | |emission probability| \\(\\phi_{i k}\\equiv p\\left(x_{n i}=1 \\mid z_{n k}=1\\right)\\) | \\(p(\\mathbf{x}_n \\mid \\mathbf{z}_n, \\boldsymbol{\\phi})=\\prod_{i=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{i k}&#94;{x_{ni} z_{nk}}\\quad (13.22)\\) | 尤度関数 ここで、データ集合 \\(\\mathbf{X}\\) が観測された際に、上記の同時分布を潜在変数 \\(\\mathbf{Z}\\) について周辺化することで、尤度関数は以下のように記述されます。 $$ p(\\mathbf{X} | \\boldsymbol{\\theta})=\\sum_{\\mathbf{Z}} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.11) $$ しかし、この尤度関数は \\(n\\) について分解できない（ \\(\\mathbf{z}_n\\) ）ごとに和を取れないので、 条件付き独立 の性質を活かして 尤度関数の対数の期待値 を最大化する Baum-Welch algorithm (EM algorithm) を用います。 Baum-Welch (EM) パラメータ \\(\\boldsymbol{\\theta}&#94;{\\text {old }}\\) を用いて \\(p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化する。 対数尤度関数の期待値 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を求める。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化するパラメータに更新する。 \\(\\boldsymbol{\\theta}\\rightarrow\\boldsymbol{\\theta}&#94;{\\text {old }}\\) 1に戻る。 $$ Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12) $$ ここで、表記を簡単にするために、 γ 、 ξ を導入します。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14) \\end{aligned} $$ なお、潜在変数が離散なので、以下のように記述し直せます。（ \\(\\pi_{k},A_{j k},\\phi_{j k}\\) と同様。） $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ これらを用いると、 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) が以下のように書き下せます。 （計算過程） $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} \\end{aligned}\\qquad (13.17) $$ Maximization step ※ 実際の計算の順番からは前後しますが、先にM stepを説明します。 上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化するのは（別ブロックに別れているから）簡単で、それぞれ 適当なラグランジュ乗数を導入する ことで、以下のように求まります。 （計算過程） $$ \\begin{aligned} \\pi_{k}&= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} & (13.18)\\\\ A_{j k}&= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} & (13.19)\\\\ \\phi_{i k}&=\\frac{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right) x_{n i}}{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right)} & (13.23) \\end{aligned} $$ Expectation step M step で必要となる \\(\\gamma,\\xi\\) は、 条件付き独立性 を用いることで効率的に計算することができます。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ 条件付き独立性を用いてそれぞれ変形すると、以下の再帰式を導くことができます。 （計算過程） $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ ※ なお、ここで \\(\\alpha\\) の再起式を forward-algorithm 、 \\(\\beta\\) の再起式を backward-algorithm と呼ぶことがあります。 また、これらを用いて \\(\\xi\\) を記述することもでき、以下のように表せます。 （計算過程） $$\\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ 以上でBaum-Welchに必要な計算式が求まりました。 おまけ（尤度関数） 尤度関数は、アルゴリズムの停止条件に用いられるなど、値を求めることが非常に有用です。 求める際は、 $$ \\gamma\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad (13.33) $$ の両辺を \\(\\mathbf{z}_n\\) について周辺化すれば、左辺は $$\\sum_{\\mathbf{z}_{n}} \\gamma\\left(\\mathbf{z}_{n}\\right) = \\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right) = 1$$ となることが明らかなので、以下のように求まります。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{n}} \\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)\\qquad (13.41)$$ また、上記の式は任意の \\(n\\) について成立するので、 \\(n=N\\) の場合を考えれば \\(\\alpha\\) のみを用いて求めることができます。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{N}} \\alpha\\left(\\mathbf{z}_{N}\\right)\\qquad (13.42)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-1.html"},{"title":"Numpyの行列計算チートシート","text":"はじめに 様々なアルゴリズムを実装する際に漸化式は出るけど実装時にうまくいかない。ということは良くあります。また、 Python を使って実装する場合、そのほとんどが行列の取り扱いです。 （柔軟であるが故にエラーを吐かずに動いてしまう…笑） そこで、まずは行列計算のチートシートを作成します。（随時加筆修正していきます。） 目次 基本事項 内積（行列積） 外積 In [1]: import numpy as np 基本事項 In [2]: N = 3 A = np . arange ( N ) B = np . arange ( N ) . reshape ( - 1 , N ) # np.expand_dims(A, axis=0), A[None,:] C = np . arange ( N ) . reshape ( N , - 1 ) # np.expand_dims(A, axis=1), A[:,None] D = np . arange ( N * N ) . reshape ( N , N ) In [3]: print ( f \"A = { A } \" ) print ( f \"B = { B } \" ) print ( f \"C = { C } \" ) print ( f \"D = { D } \" ) A = [0 1 2] B = [[0 1 2]] C = [[0] [1] [2]] D = [[0 1 2] [3 4 5] [6 7 8]] In [4]: print ( f \"A.shape = { A . shape } \" ) print ( f \"B.shape = { B . shape } \" ) print ( f \"C.shape = { C . shape } \" ) print ( f \"D.shape = { D . shape } \" ) A.shape = (3,) B.shape = (1, 3) C.shape = (3, 1) D.shape = (3, 3) In [5]: print ( f \"A.ndim = { A . ndim } \" ) print ( f \"B.ndim = { B . ndim } \" ) print ( f \"C.ndim = { C . ndim } \" ) print ( f \"D.ndim = { D . ndim } \" ) A.ndim = 1 B.ndim = 2 C.ndim = 2 D.ndim = 2 ndim ex. scalar $(0)$ 1 , 2 ,... vector $1$ A matrix $\\geq2$ B , C , D 内積（行列積） vector & scalar / matrix & scalar スカラーが絡むと、各要素とスカラーの積となる。 shape の変化はない。 どちらから掛けてもエラーは起こらない。 In [6]: print ( f \"np.dot(A,2) = { np . dot ( A , 2 ) } \" ) # vector & scalar print ( f \"np.dot(B,2) = { np . dot ( B , 2 ) } \" ) # matrix & scalar print ( f \"np.dot(C,2) = { np . dot ( C , 2 ) } \" ) # matrix & scalar print ( f \"np.dot(D,2) = { np . dot ( D , 2 ) } \" ) # matrix & scalar np.dot(A,2) = [0 2 4] np.dot(B,2) = [[0 2 4]] np.dot(C,2) = [[0] [2] [4]] np.dot(D,2) = [[ 0 2 4] [ 6 8 10] [12 14 16]] vector & vector 内積となる。 結果はスカラーとなる。 shape が異なると、エラーが起きる。 In [7]: print ( f \"np.dot(A,A) = { np . dot ( A , A ) } \" ) # vector & vector np.dot(A,A) = 5 In [8]: np . dot ( A , np . arange ( N - 1 )) # shape=(3,) & shape=(2,) ValueError : shapes (3,) and (2,) not aligned: 3 (dim 0) != 2 (dim 0) vector & matrix 行列積となる。 ベクトルは、位置によって変換のされ方が異なる。 左がベクトルの場合： np.dot((x,) (y,z)) = np.dot((1,x) (y,z)) 右がベクトルの場合： np.dot((y,z) (x,)) = np.dot((y,z) (x,1)) 行列積であるので、結果の shape は np.dot((x,y) (y,z)) = (x,z) となる。 上で y が異なるとエラーが生じる。 In [9]: print ( np . dot ( A , B )) # np.dot((3,)(1,3)) print ( np . dot ( A , C )) # np.dot((3,)(3,1)) print ( np . dot ( B , A )) # np.dot((1,3)(3,)) print ( np . dot ( C , A )) # np.dot((3,1)(3,)) ValueError : shapes (3,) and (1,3) not aligned: 3 (dim 0) != 3 (dim 0) [5] [5] ValueError : shapes (3,1) and (3,) not aligned: 1 (dim 1) != 3 (dim 0) matrix & matrix c = np.dot(a,b) a.shape=(a1,a2,...,aN,X) b.shape=(b1,b2,...,X,bM) c.shape=(a1,a2,...,aN,b1,b2,...,bM) c[i1,i2,...,iN,j1,j2,...,jM] == a[i1,i2,...,iM,:].dot(b[j1,j2,...,jM-1,:,jM]) In [10]: import itertools def checkNPdot ( shape1 , shape2 ): \"\"\" 計算可能なshapeの関係を列挙する。 \"\"\" a = np . arange ( np . prod ( shape1 )) b = np . arange ( np . prod ( shape2 )) for comb1 in itertools . permutations ( shape1 , len ( shape1 )): for comb2 in itertools . permutations ( shape2 , len ( shape2 )): try : print ( f \" { comb1 } .dot( { comb2 } ) = { ( a . reshape ( comb1 ) . dot ( b . reshape ( comb2 ))) . shape } \" ) except : pass 以下で具体的に見ていく！ np.dot(2D, 3D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,X,k) c.shape=(i,j,k) c[i,j,k] == a[i,:].dot(b[j,:,k]) In [11]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) c = np . dot ( a , b ) In [12]: print ( f \"a.shape = { a . shape } \" ) print ( f \"b.shape = { b . shape } \" ) print ( f \"np.dot(a,b).shape = { c . shape } \" ) a.shape = (2, 3) b.shape = (2, 3, 4) np.dot(a,b).shape = (2, 2, 4) In [13]: I , J , K = c . shape In [14]: np . all ([ c [ i , j , k ] == a [ i ,:] . dot ( b [ j ,:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[14]: True np.dot(3D,2D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(X,k) c.shape=(i,j,k) c[i,j,k] == a[i,j,:].dot(b[:,k]) In [15]: a = np . arange ( 24 ) . reshape ( 4 , 2 , 3 ) b = np . arange ( 6 ) . reshape ( 3 , 2 ) c = np . dot ( a , b ) In [16]: print ( f \"a.shape = { a . shape } \" ) print ( f \"b.shape = { b . shape } \" ) print ( f \"np.dot(a,b).shape = { c . shape } \" ) a.shape = (4, 2, 3) b.shape = (3, 2) np.dot(a,b).shape = (4, 2, 2) In [17]: I , J , K = c . shape In [18]: np . all ([ c [ i , j , k ] == a [ i , j ,:] . dot ( b [:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[18]: True np.dot(3D,3D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) In [19]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 60 ) . reshape ( 3 , 4 , 5 ) c = np . dot ( a , b ) In [20]: print ( f \"a.shape = { a . shape } \" ) print ( f \"b.shape = { b . shape } \" ) print ( f \"np.dot(a,b).shape = { c . shape } \" ) a.shape = (2, 3, 4) b.shape = (3, 4, 5) np.dot(a,b).shape = (2, 3, 3, 5) In [21]: I , J , K , L = c . shape In [22]: np . all ([ c [ i , j , k , l ] == a [ i , j ,:] . dot ( b [ k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[22]: True np.dot(2D,4D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,:].dot(b[j,k,:,l]) In [23]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 120 ) . reshape ( 2 , 4 , 3 , 5 ) c = np . dot ( a , b ) In [24]: print ( f \"a.shape = { a . shape } \" ) print ( f \"b.shape = { b . shape } \" ) print ( f \"np.dot(a,b).shape = { c . shape } \" ) # c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) a.shape = (2, 3) b.shape = (2, 4, 3, 5) np.dot(a,b).shape = (2, 2, 4, 5) In [25]: I , J , K , L = c . shape In [26]: np . all ([ c [ i , j , k , l ] == a [ i ,:] . dot ( b [ j , k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[26]: True np.dot(3D,4D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,l,X,m) c.shape=(i,j,k,l,m) c[i,j,k,l,m] == a[i,j,:].dot(b[k,l,:,m]) In [27]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 360 ) . reshape ( 3 , 5 , 4 , 6 ) c = np . dot ( a , b ) In [28]: print ( f \"a.shape = { a . shape } \" ) print ( f \"b.shape = { b . shape } \" ) print ( f \"np.dot(a,b).shape = { c . shape } \" ) a.shape = (2, 3, 4) b.shape = (3, 5, 4, 6) np.dot(a,b).shape = (2, 3, 3, 5, 6) In [29]: I , J , K , L , M = c . shape In [30]: np . all ([ c [ i , j , k , l , m ] == a [ i , j ,:] . dot ( b [ k , l ,:, m ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M )]) Out[30]: True np.dot(4D,4D) c = np.dot(a,b) a.shape=(i,j,k,X) b.shape=(l,m,X,n) c.shape=(i,j,k,l,m,n) c[i,j,k,l,m,n] == a[i,j,k,:].dot(b[l,m,:,n]) In [31]: a = np . arange ( 120 ) . reshape ( 2 , 3 , 4 , 5 ) b = np . arange ( 360 ) . reshape ( 3 , 4 , 5 , 6 ) c = np . dot ( a , b ) In [32]: print ( f \"a.shape = { a . shape } \" ) print ( f \"b.shape = { b . shape } \" ) print ( f \"np.dot(a,b).shape = { c . shape } \" ) a.shape = (2, 3, 4, 5) b.shape = (3, 4, 5, 6) np.dot(a,b).shape = (2, 3, 4, 3, 4, 6) In [33]: I , J , K , L , M , N = c . shape In [34]: np . all ([ c [ i , j , k , l , m , n ] == a [ i , j , k ,:] . dot ( b [ l , m ,:, n ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M ) for n in range ( N )]) Out[34]: True 外積 c = np.outer(a,b) c[i][j] = a.reshape(-1,)[i]*b.reshape(-1,)[j] In [35]: c = np . outer ( a , b ) In [36]: print ( f \"a.shape = { a . shape } \" ) print ( f \"b.shape = { b . shape } \" ) a.shape = (a1,a2,...,aN) b.shape = (b1,b2,...,bM) In [37]: Na = np . prod ( a . shape ) Nb = np . prod ( b . shape ) In [38]: print ( f \"Na = { Na } \" ) print ( f \"Nb = { Nb } \" ) Na = a1*a2*・・・*aN Nb = b1*b2*・・・*bM In [39]: print ( c . shape ) (Na, Nb) In [40]: np . all ([ c [ i ][ j ] == a . reshape ( - 1 ,)[ i ] * b . reshape ( - 1 ,)[ j ] for i in range ( Na ) for j in range ( Nb )]) Out[40]: True In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-0.html"},{"title":"分子生命科学Ⅲ 第1回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 参考文献： カラー版 神経科学 −脳の探求− 講義概要 この授業最大の目的は、 「将来僕らが脳を対象とすることになった時に敷居を低くする」 こと。 # タイトル 内容 日付 1 神経系の構造と機能 中枢神経系の構造・機能 末梢神経系の構造・機能 9/26 , 10/3 2 感覚神経系 感覚系の構成 体性感覚系 視覚系（末梢視覚系・平衡感覚系） 聴覚と平衡感覚（聴覚系・平衡感覚系） 化学感覚系（嗅覚系・味覚系） 10/10 , 17 , 24 , 31 3 運動系 脊髄による運動制御 脳による運動制御 11/14 , 21 4 脳と行動の化学的制御 11/28 5 摂食行動 12/12 6 脳のリズムと睡眠 脳波 睡眠 概日リズム 12/19 7 精神疾患 統合失調症 感情障害 不安障害 12/26 8 神経変性疾患 アルツハイマー病 パーキンソン病 ALS 1/9 神経系の構造と機能（１） 神経系の機能的構成 神経系は、 感覚系 、 統合系 、 運動系 の３つに分けることができる。 感覚系は、感覚器で何かを感じると、 が神経細胞の末端に流れ込み、 が上がり、電気的なシグナルとして にこの入力を伝える。 運動系は、逆向きで、脳の運動野からのシグナルが 末梢神経系 に伝わる。 神経系の構成成分 ニューロン(neuron) 極性のある細胞で、 、 、 からなり、（ほとんどの場合） を発生する。 膝蓋腱反射(knee-jerk reflex) ニューロンがどのように神経回路に含まれているか、を示す良い例。 医師が膝蓋骨の下の腱を軽く叩くと、大腿四頭筋が伸ばされ、その信号が脊髄まで伝わる。この信号が脊髄で 運動ニューロン に直結しており、運動ニューロンが発火して少し離れた部分の筋肉を収縮させる。その反動で足が上がる。 グリア細胞(glia cells) グリア細胞はニューロン（ヒトでは \\(1\\) - \\(2\\times10&#94;{11}\\) 個）の \\(3\\) - \\(10\\) 倍（マウスだと同数程度）存在し、脳の体積の約半分を占める。 長い軸索と興奮性膜を特徴とするニューロンに対して、グリア細胞の突起は細胞体の周辺に留まり、活動電位を発生しない。 ニューロンの生存や発達、機能発言のための液性環境維持と代謝的支援、神経伝達の調節等を行なっている。 と、ニューロンの補助的な役割だと今までは考えられていたが、最近ではもっと積極的な意味があるのでは無いかと研究されている。 中枢神経系のグリア細胞が下の4種からなる。 アストロサイト(astrocyte)の機能 を形成してがんが脳に転移しないように防御したりしている。 神経伝達物質の最取り込み（神経伝達物質が出てすぐに取り込まないと、麻薬や覚せい剤のような影響が出てしまう。）。 オリゴデンドロサイト(oligodendrocyte) において、 髄鞘（ミエリン・myelin） を形成する。（ 末梢 では が髄鞘を形成する。） |上衣細胞(ependymal cells)|ミクログリア(microglia)| |:--|:--| | | | |上衣細胞は脳室と脊髄中心管を覆う一層の上皮性細胞で、脳を脳脊髄液から遮断する（脳脊髄液脳関門(cerebro-spinal fluid brain barrier)）|ミクログリアは損傷に際して活性化する脳内の免疫性細胞で貪食能を持つ。アストログリア、オリゴデンドロサイト、上衣細胞が 由来なのに対し、ミクログリアは 由来である。| 脳の構造 哺乳動物の脳は、ほぼ共通の構造を持っている。ヒトの特徴は、 連合野 が広いということである。 解剖学用語 |解剖学用語|解剖学的切断面| |:--:|:--:| | | | 神経系の構成 中枢神経系(CNS: central nervous system) 脳(brain) 大脳(cerebrum) 小脳(cerebellum) 脳幹(brain stem) 脊髄(spinal cord) 末梢神経系(PNS: peripheral nervous system) 体性神経系(somatic nervous system) 脳神経(cranial nerve) 脊髄神経(spinal nerve) 自律神経系(autonomic nervous system) 小脳(cerebellum) 脳幹（延髄・橋・中脳・間脳）の背後に位置する。 大脳や脊髄と広範な連絡を持つ運動制御中枢 言語や思考などの高次脳機能に関与 小脳の 側の身体の運動に関与 脳幹(brain stem) 間脳→中脳→橋→延髄からなり、上方で間脳に、下方で脊髄に連なる（狭義では間脳を含めない）。 大脳から脊髄・小脳への情報、逆に脊髄・小脳から大脳への情報を中継 呼吸、意識、体温調節等の生命維持機能を制御 （大脳・小脳の損傷では生存できるが、脳幹の損傷は通常早急な死に至る） 錐体交叉 脳の運動ニューロンの軸索が延髄の後ろで一旦交叉（ ）して反対側にいっているから、反対側の機能がうまく制限できなくなる。 一方で は同側なので、そのようなことは起こらない。 脊髄(spinal cord) 脊髄は脊柱管にあり、延髄に続いて錐体交叉下端より始まり、脊髄円錐にて終わる。 皮膚・関節・筋肉から脳への情報、逆に脳からの情報を伝える主経路 末梢神経の脊髄神経で身体と通ずる。 脊髄に入る情報を運ぶ軸索は に含まれ、脊髄から出ていく情報を運ぶ軸索は に含まれる。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html"},{"title":"生物物理学 2019年度レポート（能瀬担当分）","text":"In [18]: import numpy as np import matplotlib.pyplot as plt 第1問 （１） 活動電位は神経細胞膜の膜電位に依存してイオンの透過度が変化することにより生ずる。この際起こるイオン透過性の一連の変化、および、それに応じた膜電位の変化について記述せよ（５～１０行程度）。 （１） 活動電位は、 膜を挟んだ電荷の劇的な再分配 であり、 細胞が活動電位を発生している時の 脱分極(Depolarization) は、膜を通過する $\\mathrm{Na}&#94;{+}$ の流入 再分極( Repolarization) は、$\\mathrm{K}&#94;+$ の流出 によりそれぞれ生じる。この時の一連の変化を、以下の膜電位の図と対応して記述する。なお、定常状態において、$\\mathrm{Na}&#94;{+}$ は細胞外で、$\\mathrm{K}&#94;{+}$ は細胞内で濃度が高い。 Ref: https://www.moleculardevices.com/applications/patch-clamp-electrophysiology/what-action-potential 外部からの刺激、他のニューロンが放出した神経伝達物質に特異的なチャネルを通過流入するような $\\mathrm{Na}&#94;{+}$、などの諸要因によって膜電位が上昇する。この時、膜電位がある閾値を超える脱分極を起こすと、膜にある $\\mathrm{Na}$ チャネルが開く。 $\\mathrm{Na}$ チャネルが開くと、細胞内外の濃度勾配によって $\\mathrm{Na}&#94;{+}$ がさらに流入し、膜電位が上昇する。 正の膜電位になると、$\\mathrm{Na}$ チャネルが不活性化し、今度は細胞内外の濃度勾配によって $\\mathrm{K}&#94;{+}$ が細胞外へと流出して膜電位が下がる。 この時、膜電位が静止膜電位よりもさらに負になる 過分極( Hyperpolarization) が生じることが知られている。なお、過分極は、ニューロンを不応期にすることで、活動電位が一方向にのみ伝達する仕組みを作っている。 静止膜電位に電位が戻る。 この現象を、 NEST を用いてシミュレーションする。 In [94]: import nest In [95]: # create Hodgkin-Huxley neuron with delta-shaped synaptic currents. neuron = nest . Create ( 'hh_psc_alpha' ) # create a spike generator spikegenerator = nest . Create ( 'spike_generator' ) # modify spike generation with times 10 and 50 ms nest . SetStatus ( spikegenerator ,{ 'spike_times' : [ 10. , 50. ]}) # create a voltmeter voltmeter = nest . Create ( 'voltmeter' ) # create add a spikedetector! spikedetector = nest . Create ( 'spike_detector' ) # connect spike generator with a given synaptic specification (weight) nest . Connect ( spikegenerator , neuron , syn_spec = { 'weight' : 1e3 }) # connect voltmeter to the neuron for measurements nest . Connect ( voltmeter , neuron ) # connect spikedetector to the neuron nest . Connect ( neuron , spikedetector ) In [96]: ### run simulation for 100ms nest . Simulate ( 100. ) # read out recording time and voltage from voltmeter (check the parameter list!) times = nest . GetStatus ( voltmeter )[ 0 ][ 'events' ][ 'times' ] voltage = nest . GetStatus ( voltmeter )[ 0 ][ 'events' ][ 'V_m' ] # plot results plt . plot ( times , voltage ) plt . xlabel ( 'Time (ms)' ); plt . ylabel ( 'Membrane potential (mV)' ) plt . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) plt . show () （２） ホジキンとハクスレーは活動電位の発生機構を研究するため膜電位固定法を用いた。 図１ は膜電位固定実験下において流れる膜電流のうち、$\\mathrm{K}&#94;+$ 成分（$I_k$）のみを取り出したものである。膜をさまざまなテスト電位（$Vc= 25 \\mathrm{mV},\\ 60 \\mathrm{mV},\\ 85\\mathrm{mV},\\ 100 \\mathrm{mV}$）で固定したときの実験データーを示している。 ホジキンとハクスレーはこのような実験データーから活動電位を記述する数理モデルを提出した。講義の内容を踏まえ、以下の問いに答えよ。なお、$\\mathrm{K}&#94;+$ コンダクタンスの最大値$\\bar{g_k}=83\\Omega&#94;{-1}/\\mathrm{cm&#94;2}$、$\\mathrm{K}&#94;+$ の平衡電位 $\\mathrm{E_K}=-80\\mathrm{mV}$ とする。 In [136]: Ek = - 80 # mV gKmax = 83 # Ω&#94;-1/cm&#94;2 Vc = [ 25 , 60 , 85 , 100 ] # mV Ikinf = [ 25 , 60 , 85 , 100 ] # mA/cm&#94;2 （a） 定常状態（$t\\rightarrow\\infty$）における $\\mathrm{K}&#94;+$ コンダクタンス $g_{K_{\\infty}}$ を $I_{K_{\\infty}},\\ Vc, E_K$ で表せ。また $I_{K_{\\infty}}$ の実測値より各テスト電位における $g_{K_{\\infty}}$ の値を求めよ。 （a） ホジキンとハクスレーの提唱した数理モデルは、$\\mathrm{K}&#94;+,\\mathrm{Na}&#94;+$ などの各成分を並列等価に繋いだ回路モデルで表され、数式で表現すると $$ \\begin{aligned} g_{Na} &= \\frac{I_{Na}\\left(V_m,t\\right)}{V_m-E_{Na}}\\\\ g_K &= \\frac{I_K\\left(V_m,t\\right)}{V_m-E_K} \\end{aligned} $$ となる。したがって、定常状態（$t\\rightarrow\\infty$）における $\\mathrm{K}&#94;+$ コンダクタンス $g_{K_{\\infty}}$ は、 $$g_{K_{\\infty}} = \\frac{I_{K_{\\infty}}}{V_c-E_K}$$ で求められる。また、各テスト電位における $g_{K_{\\infty}}$ の値は、 print_func_1a = lambda x , y , z : print ( f \"| { str ( x ) } | { str ( y ) } | { str ( z ) } |\" ) print_func ( \"$$Vc\\ [\\mathrm {mV} ]$$\" , \"$$I_{K_{\\infty}}[\\mathrm{mA/cm&#94;2}]$$\" , \"$$g_{K_{\\infty}}\\ [\\mathrm{\\Omega&#94;{-1}/\\mathrm{cm&#94;2}}]$$\" , ) print_func ( \":-:\" , \":-:\" , \":-:\" ) for i , v in zip ( Ikinf , Vc ): print_func ( v , i , f \" { i / ( v - Ek ) : .2f } \" , ) $$Vc\\ [\\mathrm{mV}]$$ $$I_{K_{\\infty}}[\\mathrm{mA/cm&#94;2}]$$ $$g_{K_{\\infty}}\\ [\\mathrm{\\Omega&#94;{-1}/\\mathrm{cm&#94;2}}]$$ 25 25 0.24 60 60 0.43 85 85 0.52 100 100 0.56 （b） ホジキンとハクスレーは $\\mathrm{K}&#94;+$ コンダクタンス $g_K$ を $g_K = n&#94;4(t,V)\\cdot\\bar{g_K}$ と表した（ここで、$n(t,V)$ および以下に出てくる $\\tau_n,\\alpha_n,\\beta_n$ は講義での定義に従う）。定常状態における $n$ の値 $n_{\\infty}(V)$ を各テスト電位について求めよ。 （b） 題意より、$g_{K_{\\infty}} = n_{\\infty}&#94;4(t,V)\\cdot\\bar{g_K}$ と表せるので、 print_func_1b = lambda x , y , z , w : print ( f \"| { str ( x ) } | { str ( y ) } | { str ( z ) } | { str ( w ) } |\" ) print_func_1b ( \"$$Vc\\ [\\mathrm {mV} ]$$\" , \"$$I_{K_{\\infty}}[\\mathrm{mA/cm&#94;2}]$$\" , \"$$g_{K_{\\infty}}\\ [\\mathrm{\\Omega&#94;{-1}/\\mathrm{cm&#94;2}}]$$\" , \"$$n_{\\infty}$$\" , ) print_func_1b ( \":-:\" , \":-:\" , \":-:\" , \":-:\" ) for i , v in zip ( Ikinf , Vc ): gK_inf = i / ( v - Ek ) n_inf = pow ( gK_inf / gKmax , 1 / 4 ) print_func_1b ( v , i , f \" { gK_inf : .2f } \" , f \" { n_inf : .2f } \" ) $$Vc\\ [\\mathrm{mV}]$$ $$I_{K_{\\infty}}[\\mathrm{mA/cm&#94;2}]$$ $$g_{K_{\\infty}}\\ [\\mathrm{\\Omega&#94;{-1}/\\mathrm{cm&#94;2}}]$$ $$n_{\\infty}$$ 25 25 0.24 0.23 60 60 0.43 0.27 85 85 0.52 0.28 100 100 0.56 0.29 （c） $Vc= 25 \\mathrm{mV},\\ 60 \\mathrm{mV},\\ 85\\mathrm{mV},\\ 100 \\mathrm{mV}$ における $n(t,V)$ の時定数 $\\tau_n$ を 図1 より読みとり、 (b) で得られた $n_{\\infty}(V)$ も用いて各テスト電位における速度定数 $\\alpha_n,\\beta_n$ を求めよ。 $$\\begin{aligned} I_K\\left(V_m,t\\right) &= g_K\\left(V_m-E_K\\right)\\\\ &= n&#94;4(t,V_m)\\cdot\\bar{g_K}\\left(V_m-E_K\\right)\\\\ &= \\left[n_{\\infty}(V_m)-\\left[n_{\\infty}(V_m)-n_{\\infty}(V_0)\\right]\\cdot\\exp\\left(-t/\\tau_n(V_m)\\right)\\right]&#94;4\\cdot\\bar{g_K}\\left(V_m-E_K\\right) \\end{aligned} $$ となるので、$\\tau_n$ は、これからフィッティングすることができる。 パラメータのチューニングをやっていた結果このフィッティングを終えることができませんでした。 以下、 速度定数(rate constant) $\\alpha_n,\\beta_n$ が与えられている場合です。 なお、$n\\in[0,1]$ は無次元の係数であり、$\\mathrm{K}&#94;+$ コンダクタンスの 活性化パラメータ(activation parameter) と呼び、以下の微分方程式で表される。 $$ \\begin{aligned} \\frac{dn\\left(V_m,t\\right)}{dt} =&\\ \\alpha_n\\left(V_m\\right)\\cdot\\alpha_n\\left(1-n\\left(V_m,t\\right)\\right)\\\\&- \\beta_n\\left(V_m\\right)\\cdot\\beta_nn\\left(V_m,t\\right) \\end{aligned}\\qquad\\cdots(\\ast) $$ また、$\\alpha_n,\\beta_n$ は 速度定数(rate constant) であり、$\\left[t&#94;{-1}\\right]$ の次元を持ち、それぞれ以下で表される。 $$ \\begin{cases} \\begin{aligned} \\alpha_n\\left(V\\right) =&\\ \\frac{0.01(10-V)}{\\exp\\left(\\frac{10-V}{10}\\right)-1}\\\\ \\beta_n\\left(V\\right) =&\\ 0.125\\exp\\left(-V/80\\right) \\end{aligned} \\end{cases} $$ In [26]: V = np . linspace ( - 70 , 50 , 1000 ) alpha = lambda V : 0.01 * ( 10 - V ) / ( np . exp (( 10 - V ) / 10 ) - 1 ) beta = lambda V : 0.125 * np . exp ( - V / 80 ) In [27]: plt . title ( \"The relationship between \\n 'Membrane potential(V)' and 'alpha','beta' (6.3 degrees Celsius)\" ) plt . plot ( V , alpha ( V )) plt . plot ( V , beta ( V )) plt . xlabel ( \"Membrance potential (mV)\" ), plt . ylabel ( \"alpha,beta\" ) plt . grid () /Users/iwasakishuto/.pyenv/versions/anaconda3-5.0.1/lib/python3.6/site-packages/ipykernel_launcher.py:2: RuntimeWarning: invalid value encountered in true_divide したがって、$n_{\\infty}(V)$ は、先の式 $(\\ast)$ において $dn/dt=0$ の条件の時に得られるので、 $$n_{\\infty}(V) = \\frac{\\alpha_n\\left(V\\right)}{\\alpha_n\\left(V\\right)+\\beta_n\\left(V\\right)}$$ In [28]: n_inf = lambda V : alpha ( V ) / ( alpha ( V ) + beta ( V )) 第2問 （１） どのようにして記憶は脳内に保持されるのか？その仕組みはまだ完全には分かっていない。しかし、有力な仮説として神経活動の同時性がシナプスの変化として保存されるというものがある（ヘブの原理）。 講義の内容を踏まえ 、この考え方に沿った記憶の機構について論ぜよ（A4 半分～一枚程度）。 （１） ヘブ則(Hebbian theory, Hebb's rule) は、 「神経細胞 $A$ の軸索が細胞 $B$ を発火させるのに関与していると考えられるほど近くにあり、繰り返しその発火に関与する時、何かしらの成長過程または代謝変化が一方あるいは両方の細胞に起こり、細胞 $B$ を発火させる細胞の1つとして細胞 $A$ の効率が増加する。」 というものであり、ある神経細胞（$A$）の軸索が他の神経細胞（$B$）を発火させる パターン が頻繁に生じるのであれば、細胞間の関係（重み）が増し、その パターン をより伝達しやすくなる、というものである。 なお、ヘブ則はドナルド・ヘブ(Donald Hebb)が1949年に提案したものであり、その後似たような性質として、1997年に スパイクタイミング依存可塑性(spike timing-dependent plasticity, STDP) という仕組みも発見された。これは、 神経細胞 $B$ が発火する少し 前 に神経細胞 $A$ が発火していれば、シナプスが 強 まる 神経細胞 $B$ が発火する少し 後 に神経細胞 $A$ が発火していれば、シナプスが 弱 まる というメカニズムである。 ここでも、この現象を NEST を用いてシミュレーションし、STDPを用いて学習を行うモデルを作成するが、コードが長くなってしまったので、 最後 に載せる。 （２） ヘブの原理を応用した記憶のモデルについて考察しよう。 図2 のような神経回路を考える。上側から入力する一群の神経（$f_1&#94;{\\prime}, f_2&#94;{\\prime},\\ldots,f_j&#94;{\\prime},\\ldots$：ここでは軸索のみを示している）が、横にならんだ別の群の神経細胞（$g_1&#94;{\\prime}, g_2&#94;{\\prime},\\ldots,g_i&#94;{\\prime},\\ldots$）にシナプスを形成している。 $f&#94;{\\prime}$ 神経群の活動をベクトル $\\mathbf{f}[f_1,f_2,\\ldots,f_j,\\ldots]$、$g&#94;{\\prime}$ 神経群の活動をベクトル$\\mathbf{g}[g_1,g_2,\\ldots,g_i,\\ldots]$ で表す。また、$f_j&#94;{\\prime}$ が $g_i&#94;{\\prime}$ 上に作るシナプス（図中の交点）の重みを $a_{ij}$ とし、その総体を行列 $\\mathbf{A}[a_{ij}]$ で表す。 ヘブの原理によると、$f_j&#94;{\\prime}$ と $g_i&#94;{\\prime}$ が同時に活動したときに、その間のシナプス $a_{ij}$ が、$\\Delta a_{ij} = k\\cdot f_j\\cdot g_i$（$k$ は定数）で変化する。講義で述べた条件反射に例えると、$f&#94;{\\prime}$ が条件刺激、$g&#94;{\\prime}$ が無条件刺激に対応した神経群であり、条件刺激と無条件刺激が同時に入力した際、その間のシナプスが強化された結果、学習が成立する。 （a） まず具体的な例として、$f&#94;{\\prime},g&#94;{\\prime}$ それぞれ6 個のニューロンからなる回路において、$\\mathbf{A}=\\mathbf{0}$ の状態から $\\mathbf{f}=[0,0,0, 1, 1, 1], \\mathbf{g}=[1,1,0,1,0,0]$ のパターンで同時に活動した時を考える（$1$ は神経が活動した状態、$0$ は活動していない状態と考えればよい）。この時ヘブの原理にしたがってシナプスが変化し学習が成立するとした時、学習後の $\\mathbf{A}$ を求めよ。ここでは簡単のため $k=1$ とする。 （a） In [73]: f = np . array ([ 0 , 0 , 0 , 1 , 1 , 1 ]) g = np . array ([ 1 , 1 , 0 , 1 , 0 , 0 ]) A = np . zeros ( shape = ( g . shape + f . shape )) k = 1 In [74]: A += k * np . expand_dims ( f , axis = 0 ) * np . expand_dims ( g , axis = 1 ) In [75]: print ( A ) [[0. 0. 0. 1. 1. 1.] [0. 0. 0. 1. 1. 1.] [0. 0. 0. 0. 0. 0.] [0. 0. 0. 1. 1. 1.] [0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0.]] （b） 上記 問a において、学習後に今度は条件刺激にあたる神経群 $f&#94;{\\prime}$ の活動のみがあった時を考えよう（記憶成立前に $f&#94;{\\prime},g&#94;{\\prime}$ 神経群両方が活動した際には、$g&#94;{\\prime}$ 神経群は $f&#94;{\\prime}$ 神経群からの入力によってではなく他から来る条件刺激により活動したと考える）。 $f&#94;{\\prime}$ 神経群からの入力のみがあった場合、神経 $g_i&#94;{\\prime}$ の出力 $G_i$ は、 $$G_i = \\sum_j a_{ij} \\cdot f_j$$ となる。記憶成立前と同じパターン $\\mathbf{f}=[0,0,0, 1, 1, 1]$ で$f&#94;{\\prime}$ 神経群が活動したときの $g&#94;{\\prime}$ 神経群の出力 $\\mathbf{G}=[G_1,G_2,\\ldots,G_i]$ を求め、それが $\\mathbf{g}=[1,1,0,1,0,0]$ の整数倍になっている、すなわち記憶のパターンが再現されることを確認せよ。 （b） In [78]: G = A . dot ( f ) In [82]: print ( \"G:\" , G . astype ( int )) print ( \"g:\" , g ) G: [3 3 0 3 0 0] g: [1 1 0 1 0 0] 記憶のパターンが再現されることが確認できた。 （c） つぎに一般化して考える。上と同様の原理にしたがって、$\\mathbf{A}=\\mathbf{0}$ の状態から $\\mathbf{f}, \\mathbf{g}$ のパターンで同時に活動した時、学習成立後の $\\mathbf{A}$ は $k\\mathbf{g}&#94;T\\mathbf{f}$ と表すことができる。このとき、学習後に$f&#94;{\\prime}$ 神経群のみが $\\mathbf{f}$ のパターンで活動したときの$g&#94;{\\prime}$ 神経群の出力 $\\mathbf{G}$ を求め、上と同様に記憶が再現されることを示せ。 （c） $$ \\begin{aligned} G_i &= \\sum_ja_{ij}\\cdot f_j\\\\ &= \\sum_j \\left(k g_i\\cdot f_j\\right)\\cdot f_j\\\\ &= kg_i\\sum_jf_j&#94;2 \\end{aligned} $$ となり、$\\sum_jf_j&#94;2$ は $i$ に依存しないので、$\\mathbf{G}$ は $\\mathbf{g}$ の $k\\sum_jf_j&#94;2$ 倍になることがわかる。 （d） 今度は、同じ回路に複数の記憶が同時に蓄えられる場合を考える。すなわち、$\\mathbf{f}_i$ と $\\mathbf{g}_i$ の同時活動で $A_i= k\\mathbf{g}_i&#94;T\\mathbf{f}_i$ の記憶が形成され、異なった $\\mathbf{f}_i$ と $\\mathbf{g}_i$ による記憶が複数起こった総和として、$\\mathbf{A} = \\sum_iA_i$ となるとする。このとき、複数の記憶が混同せず、再現される（すなわち $\\mathbf{G}_i\\propto\\mathbf{g}_i$）のは、$f&#94;{\\prime}$ 神経群の複数の活動 $\\mathbf{f}_i$ 間にどのような関係があるときかを考察せよ。 （d） 先の式を考えれば、$\\mathbf{f}_i$ が直交していれば良いことがわかる。 （e） この回路の性質について自由に考察せよ。 （e） (d) より、全ての記憶を正確に覚えておくには、全ての刺激パターンが直交している必要があった。これを言い換えると、 おばあちゃん細胞(grand mother cell)説 となる。これは、 「ある特定の対象物についての私たちの知覚は、まだ見つかってないどこか究極の知覚領野で少数の特殊化したニューロンが発火するため」 と考えるモデルである。 しかし、世の中の記憶すべき対象と神経細胞を一対一に対応させるのは現実的に不可能に思える上、ある神経細胞が死んでしまった時にその対象 「だけ」 が記憶から抜け落ちてしまう、と考えるのは少し不自然である。その一方で、例えば側頭葉には 「ある特定の人物や建物を見た時だけに反応する神経細胞」 が見つかっており、この説の真偽は未だ判明していない。 僕は、これに対して、基本的にはヘブ則が成り立っているが、何らかの内部状態が存在し、それによって我々の知覚が多少変化する、というモデルを提唱する。例えば、以下の画像を見る。 Ref: https://www.dailymail.co.uk/femail/article-4471260/Can-spot-real-Mona-Lisa.html この時、何も考えずにこれを見ると 「モナリザである」 と知覚する。これは、過去の経験からこの絵のようなパターンをモナリザだと記憶しているからである。しかし、この絵を逆さまにすると実はモナリザではないことがわかる。それを確かめた後に再び絵を逆さまにすると、今度は 「モナリザではない」 と知覚するようになる。 同じ絵を見せられて同じ刺激が入っているはずなのに、別の知覚が生じるが、これもシナプスの重みだとは考えにくい。このように、我々は日々時間 $t$ に依存した状態を持っており、この状態に応じてシナプス間の重みが変化し、知覚も変化する、と考える方が説明能力は高そうである。 Code In [97]: import nest import time import random import numpy as np import matplotlib.pyplot as plt def plotPatternRaster ( spikes , ax = None , cmap = \"binary_r\" , ** kwargs ): if ax is None : fig , ax = plt . subplots () H , W = spikes . shape ax . matshow ( spikes , aspect = W / H , cmap = cmap , ** kwargs ) ax . set_title ( \"Raster plot of presynaptic neurons\" ), ax . set_xlabel ( \"time (ms)\" ), ax . set_ylabel ( \"neuron ID\" ) return ax def plotFiringRates ( spikes , fig = None ): if fig is None : fig = plt . figure () num_neurons , _ = spikes . shape firing_rates = np . mean ( spikes , axis = 1 ) * 100 neurons_IDs = np . arange ( num_neurons ) #=== Plot === ax1 = fig . add_subplot ( 2 , 1 , 1 ) ax1 . barh ( neurons_IDs , firing_rates , height = 1 ) ax1 . set_title ( \"Average firing rates of presynaptic neurons\" ), ax1 . set_ylabel ( \"Neuron ID\" ) ax2 = fig . add_subplot ( 2 , 1 , 2 ) ax2 . hist ( firing_rates ) ax2 . set_xlabel ( \"Average firing rate (Hz)\" ), ax2 . set_ylabel ( \"Frequency\" ) return fig class PoissonProcessGenerator (): def __init__ ( self , ** params ): if len ( params ) > 0 : self . load_params ( ** params ) self . repeated = False self . pattern_repeated_spikes = None self . simulation_length = None self . num_presynaptic_neurons = None def load_params ( self , ** params ): self . __dict__ . update ( params ) def generate_spikes ( self , simulation_length = 1000 , num_presynaptic_neurons = 2000 , seed = None ): \"\"\"Poisson Process. - each presynpatic neuron will emit spikes independently - generated by a 'Poisson process' which varies randomly in firing rate r in the range of [0,90] Hz - the rate of change in r is modified by dr where: - started at 0 - updated randomly from a uniform distribution over [−360,360] Hz/s every millisecond - clipped to within [−1800,1800] Hz/s - manually add some additional spikes to guarantee that 'in every 50ms time bin, each neuron spikes at least once.' ~~~~~~~~~ Arguments @params simulation_length : (int) the length of the simulation processing. (memorize) @params num_presynaptic_neurons: (int) the number of independent presynaptic neurons. (memorize) @params seed : (int) If you want to make an experiment replicable. \"\"\" np . random . seed ( seed ) start = time . time () self . simulation_length = simulation_length self . num_presynaptic_neurons = num_presynaptic_neurons spikes = np . zeros ( shape = ( num_presynaptic_neurons , simulation_length )) spikes [:, 0 ] = np . clip ( np . random . poisson ( self . starting_Hz / 1000 ), 0 , 1 ) # ds is randomly picked from a uniform distribution over [−360,+360] Hz/s ds = np . random . uniform ( self . min_ds , self . max_ds , size = ( num_presynaptic_neurons , simulation_length )) dr = np . zeros_like ( ds ) for t in range ( simulation_length - 1 ): # dr is clipped to within [−1800,1800] (Hz/s) dr [:, t + 1 ] = np . clip ( dr [:, t ] + ds [:, t ], self . min_dr , self . max_dr ) # r varies beteen [0,90] (Hz) r = np . insert ( dr [:,: - 1 ], 0 , self . starting_Hz , axis = 1 ) for t in range ( simulation_length - 1 ): r [:, t + 1 ] = np . clip ( r [:, t ] + dr [:, t ], self . min_r , self . max_r ) # Manually add some additional spikes to guarantee that # \"in every 50ms time bin, each neuron spikes at least once\". spikes [:, t + 1 ] = np . clip ( np . random . poisson ( r [:, t + 1 ] / 1000 ), 0 , 1 ) if t + 1 >= self . min_span : mask = np . where ( np . sum ( spikes [:, t + 1 - self . min_span : t + 1 ], axis = 1 ) == 0 )[ 0 ] add_pos = np . random . randint ( t + 1 - self . min_span , t + 1 , size = len ( mask )) for idx , pos in zip ( mask , add_pos ): spikes [ idx , pos ] = 1 self . spikes = spikes print ( f \"Processing Time: { time . time () - start : .3f } [s]\" ) return spikes def select_segment ( self , seed = None ): \"\"\"Preprocessing. 1. Divide the presynaptic spiking activity into segments of 50ms (segment_length) 2. select a random 50ms segment (idx=selection) to be considered as the \"pattern\" \"\"\" self . num_segments = int ( self . simulation_length / self . segment_length ) selection = np . random . RandomState ( seed ) . randint ( 1 , self . num_segments ) pattern_spikes = self . spikes [:, selection * self . segment_length :( selection + 1 ) * self . segment_length ] self . pattern_spikes = pattern_spikes self . selection = selection print ( f \"Spikes divided into { self . num_segments } segments.\" ) print ( f \" { selection } -th segment was selected as a Pattern.\" ) def memorize ( self , spikes , repeated = False ): \"\"\" If you already have Poisson Process array (`spont_100s_alt.npy`), you have to memorize it. \"\"\" print ( \"[Before]\" ) print ( f \"simulation length: { self . simulation_length } \" ) print ( f \"Number of the presynaptic neurons: { self . num_presynaptic_neurons } \" ) print ( \"Memorizing...\" ) self . num_presynaptic_neurons , self . simulation_length = spikes . shape if repeated : self . pattern_repeated_spikes = spikes self . repeated = True else : self . spikes = spikes self . repeated = False print ( \"[After]\" ) print ( f \"simulation length: { self . simulation_length } \" ) print ( f \"Number of the presynaptic neurons: { self . num_presynaptic_neurons } \" ) def repeat_segment ( self , proportion_of_neurons = 0.5 , frequency_of_patterns = 0.25 ): if self . repeated : print ( \"Requirement already satisfied.\" ) return ( None , None ) else : self . pattern_repeated_spikes = np . copy ( self . spikes ) self . repeated_position = np . zeros ( self . spikes . shape ) num_repeats = round ( frequency_of_patterns * self . num_segments ) idx_repeats = random . sample ( range ( self . num_segments ), num_repeats ) for idx in idx_repeats : self . pattern_repeated_spikes [ 0 : int ( self . num_presynaptic_neurons * proportion_of_neurons ), idx * self . segment_length :( idx + 1 ) * self . segment_length ] = self . pattern_spikes [ 0 : int ( self . num_presynaptic_neurons * proportion_of_neurons ),:] self . repeated_position [ 0 : int ( self . num_presynaptic_neurons * proportion_of_neurons ), idx * self . segment_length :( idx + 1 ) * self . segment_length ] = 1 print ( f \"Number of spikes added: { np . sum ( self . repeated_position ) } \" ) print ( f \"Spikes are saved as `self.pattern_repeated_spikes`.\" ) self . repeated = True return self . pattern_repeated_spikes , self . repeated_position def generatePoissonNoise ( self , frequency = 10 ): noise = np . random . poisson ( frequency / 1000 , size = ( self . spikes . shape )) return noise def addPoisonNoise ( self , frequency = 10 ): spikes = self . pattern_repeated_spikes if self . pattern_repeated_spikes is not None else self . spikes noise = self . generatePoissonNoise ( frequency = frequency ) self . noise_added_spikes = np . clip ( spikes + noise , 0 , 1 ) print ( f \"Spikes are saved as `self.noise_added_spikes`.\" ) return self . noise_added_spikes class NeuronalNetwork (): def __init__ ( self , ** params ): if len ( params ) > 0 : self . load_params ( ** params ) self . built = False def load_params ( self , ** params ): self . __dict__ . update ( params ) def build ( self , spike_indicies , re = False ): \"\"\"build the Neuronal Network @param spike_indicies: n-th presynaptic_neuron's i-th spike occurs at spike_indicies[n][i] \"\"\" if re : print ( \"Reset Kernel.\" ) re = \"Re\" if re else \"\" nest . ResetKernel () self . num_presynaptic_neurons = len ( spike_indicies ) self . spike_generator = nest . Create ( 'spike_generator' , self . num_presynaptic_neurons , params = [{ \"spike_times\" : np . asarray ( spike_idx , dtype = float ) + 1 } for spike_idx in spike_indicies ]) self . parrot_neuron = nest . Create ( 'parrot_neuron' , self . num_presynaptic_neurons ) self . post_neuron = nest . Create ( 'iaf_psc_alpha' ) self . spike_detector = nest . Create ( 'spike_detector' ) self . voltmeter = nest . Create ( 'voltmeter' , params = { 'interval' : 0.1 }) self . spike_indicies = spike_indicies print ( f \" { re } Created { self . num_presynaptic_neurons } spike generators.\" ) print ( f \" { re } Created { self . num_presynaptic_neurons } parrot neurons.\" ) print ( f \" { re } Created 1 post_neuron.\" ) print ( f \" { re } Created spike detector.\" ) print ( f \" { re } Created voltmeter.\" ) def addGaussianPackets ( self , simulation_length_pulses , proportion_of_neurons_pulsing , number_of_pulses , spikes_per_pulse , std_spikes_per_pulse , seed = None ): pulse_center_times = np . random . RandomState ( seed ) . randint ( 10 , simulation_length_pulses - 10 , number_of_pulses ) . astype ( float ) self . gaussian_pulses = nest . Create ( \"pulsepacket_generator\" , params = { \"pulse_times\" : pulse_center_times , \"activity\" : spikes_per_pulse , \"sdev\" : std_spikes_per_pulse }) conn_dict = { 'rule' : 'fixed_total_number' , 'N' : int ( self . num_presynaptic_neurons / proportion_of_neurons_pulsing ) } nest . Connect ( self . gaussian_pulses , self . parrot_neuron , conn_dict ) def compile ( self , synapse_model = \"static\" , ex = 1 , ** params ): if self . built : self . build ( self . spike_indicies , re = True ) if len ( params ) > 0 : self . load_params ( ** params ) nest . SetStatus ( self . post_neuron , [{ \"tau_minus\" : self . tau_LTD }]) nest . Connect ( self . spike_generator , self . parrot_neuron , \"one_to_one\" ) syn_dict = self . SynapseModelHandler ( name = synapse_model , ex = ex ) nest . Connect ( self . parrot_neuron , self . post_neuron , \"all_to_all\" , syn_dict ) nest . Connect ( self . post_neuron , self . spike_detector ) nest . Connect ( self . voltmeter , self . post_neuron ) print ( f \"Connected { self . num_presynaptic_neurons } spike generators to { self . num_presynaptic_neurons } parrot neurons. (one-to-one)\" ) print ( f \"Connected { self . num_presynaptic_neurons } parrot neurons to 1 post neuron. (all-to-all) Method: { syn_dict [ 'model' ] } \" ) print ( \"Connected post neuron to spike detector\" ) print ( \"Connected voltmeter to post neuron\" ) self . built = True def simulate ( self , T = 1000. , ax = None , ** plotkwargs ): if ax is None : fig , ax = plt . subplots () nest . Simulate ( float ( T )) times = nest . GetStatus ( self . voltmeter )[ 0 ][ 'events' ][ 'times' ] voltage = nest . GetStatus ( self . voltmeter )[ 0 ][ 'events' ][ 'V_m' ] spiketimes = nest . GetStatus ( self . spike_detector )[ 0 ][ 'events' ][ 'times' ] # As the simulation span is larger than reaction length, # we will modify the voltage to Make it understandable. for spike in spiketimes : voltage [( np . abs ( np . asarray ( times ) - spike )) . argmin ()] = 0. ax . plot ( times , voltage , ** plotkwargs ) ax . set_xlabel ( 'Time (ms)' ), ax . set_ylabel ( 'Membrane potential (mV)' ), ax . grid ( linestyle = '-' , linewidth =. 25 , alpha =. 7 ) return ax def mask_pattern ( self , ax , is_pattern , simulation_times ): add_minus_1 = np . insert ( arr = np . any ( is_pattern [:,: simulation_times ], axis = 0 ), obj = 0 , values = False ) . astype ( int ) masks = add_minus_1 [ 1 :] - add_minus_1 [: - 1 ] start_points = np . where ( masks == 1 )[ 0 ] end_points = np . where ( masks == - 1 )[ 0 ] for s , e in zip ( start_points , end_points ): ax . axvspan ( s , e , color = \"coral\" , alpha = 0.7 ) return ax def plotWeights ( self , is_pattern_neuron , ax = None ): if ax is None : fig , ax = plt . subplots () pre_to_post_conninfo = nest . GetConnections ( self . parrot_neuron , self . post_neuron ) pre_to_post_weights = np . asarray ( nest . GetStatus ( pre_to_post_conninfo , keys = 'weight' )) idxes = np . arange ( len ( pre_to_post_weights )) ax . barh ( idxes [ ~ is_pattern_neuron ], pre_to_post_weights [ ~ is_pattern_neuron ], color = \"blue\" , label = \"Random Neuron\" ) ax . barh ( idxes [ is_pattern_neuron ], pre_to_post_weights [ is_pattern_neuron ], color = \"red\" , label = \"Pattern Neuron\" ) ax . set_xlabel ( \"Synaptic weights\" ), ax . set_ylabel ( \"Neuron ID.\" ), ax . legend () return ax def SynapseModelHandler ( self , name , ex ): if ex == 1 : SynapseModelDict = { \"static\" : { \"model\" : \"static_synapse\" , \"weight\" : 0.5 , }, \"standard\" : { \"model\" : \"stdp_synapse\" , \"weight\" : 1.0 , \"tau_plus\" : self . tau_LTP , \"mu_plus\" : self . a_LTP , \"mu_minus\" : self . a_LTD , }, \"triplet\" : { \"model\" : \"stdp_triplet_synapse\" , \"weight\" : 1.0 , \"tau_plus\" : self . tau_LTP , \"Aminus\" : self . a_LTD / 2 , \"Aminus_triplet\" : self . a_LTD / 10 , \"Aplus\" : self . a_LTP , \"Aplus_triplet\" : self . a_LTP * 10 , }, \"FACETS\" : { \"model\" : \"stdp_facetshw_synapse_hom\" , \"weight\" : 0.7 , \"tau_plus\" : self . tau_LTP , \"tau_minus_stdp\" : self . tau_LTD , } } if name not in SynapseModelDict : raise ValueError ( f \"Couldn't understand { name } . Please chose from \\033 [01m \\033 [36m ' { ', ' . join ( SynapseModelDict . keys ()) } ' \\033 [0m\" ) return SynapseModelDict [ name ] elif ex == 2 : SynapseModelDict = { \"static\" : { \"model\" : \"static_synapse\" , \"weight\" : 1.0 , }, \"standard\" : { \"model\" : \"stdp_synapse\" , \"weight\" : 1.0 , \"tau_plus\" : self . tau_LTP , \"mu_plus\" : self . a_LTP * 1000 , \"mu_minus\" : self . a_LTD / 1000 , \"Wmax\" : 5.0 }, \"triplet\" : { \"model\" : \"stdp_triplet_synapse\" , \"weight\" : 1.0 , \"tau_plus\" : self . tau_LTP , \"Aminus\" : self . a_LTD / 2 , \"Aminus_triplet\" : self . a_LTD / 10 , \"Aplus\" : self . a_LTP , \"Aplus_triplet\" : self . a_LTP * 10 , \"Wmax\" : 5.0 }, \"FACETS\" : { \"model\" : \"stdp_facetshw_synapse_hom\" , \"weight\" : 0.75 , \"tau_plus\" : self . tau_LTP , \"tau_minus_stdp\" : self . tau_LTD , \"Wmax\" : 5.0 } } if name not in SynapseModelDict : raise ValueError ( f \"Couldn't understand { name } . Please chose from \\033 [01m \\033 [36m ' { ', ' . join ( SynapseModelDict . keys ()) } ' \\033 [0m\" ) return SynapseModelDict [ name ] In [98]: poisson_params = { \"min_span\" : 50 , # [ms] \"starting_Hz\" : 54 , # [Hz] \"min_r\" : 0 , # [Hz] \"max_r\" : 90 , # [Hz] \"min_ds\" : - 3.6e-1 , # [Hz/ms] \"max_ds\" : 3.6e-1 , # [Hz/ms] \"min_dr\" : - 1.8 , # [Hz/ms] \"max_dr\" : 1.8 , # [Hz/ms] \"segment_length\" : 50 , # [ms] Length of 1 Presynaptic spiking segment length. } In [99]: seed = 0 In [100]: num_presynaptic_neurons = 2000 # Number of the presynaptic neurons. simulation_length = 1000 # [ms] In [101]: poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) In [102]: spikes = poisson_generator . generate_spikes ( simulation_length , num_presynaptic_neurons , seed = seed ) Processing Time: 0.962[s] 領域を分け、パターンを選択する。 In [103]: poisson_generator . select_segment ( seed = seed ) Spikes divided into 20 segments. 13-th segment was selected as a Pattern. In [104]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( spikes , ax = ax ) plt . tight_layout () plt . show () パターンをコピーする。 In [105]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [106]: pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) Number of spikes added: 250000.0 Spikes are saved as `self.pattern_repeated_spikes`. ポアソンノイズを加える。 In [107]: frequency = 10 # [Hz] In [108]: noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes are saved as `self.noise_added_spikes`. In [109]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) plt . tight_layout () plt . show () 生成された繰り返しパターンを確かめる。 In [113]: fig , ax = plt . subplots ( figsize = ( 5 , 5 )) ax = plotPatternRaster ( noise_added_spikes , ax = ax ) ax = plotPatternRaster ( output_identities , cmap = \"RdGy_r\" , ax = ax , alpha = 0.7 ) plt . tight_layout () plt . show () In [114]: simulation_length_100s = 100_000 num_presynaptic_neurons = 2_000 poisson_generator = PoissonProcessGenerator () poisson_generator . load_params ( ** poisson_params ) pre_spikes_wrepeats_100s = poisson_generator . generate_spikes ( simulation_length_100s , num_presynaptic_neurons , seed = seed ) Processing Time: 159.039[s] In [115]: proportion_of_neurons = 0.5 frequency_of_patterns = 0.25 In [116]: poisson_generator . select_segment ( seed = seed ) pre_spikes_wrepeats , output_identities = poisson_generator . repeat_segment ( proportion_of_neurons , frequency_of_patterns ) noise_added_spikes = poisson_generator . addPoisonNoise ( frequency = frequency ) Spikes divided into 2000 segments. 685-th segment was selected as a Pattern. Number of spikes added: 25000000.0 Spikes are saved as `self.pattern_repeated_spikes`. Spikes are saved as `self.noise_added_spikes`. In [117]: repeated_idxes = np . any ( poisson_generator . repeated_position , axis = 1 ) In [118]: print ( f \"Pattern shape = { poisson_generator . pattern_spikes . shape } \" ) print ( f \"Poisson Process shape = { noise_added_spikes . shape } \" ) Pattern shape = (2000, 50) Poisson Process shape = (2000, 100000) In [119]: simulation_times = 1000 In [120]: spike_indicies = [ np . where ( is_spike )[ 0 ] for is_spike in noise_added_spikes == 1 ] In [121]: STDP_paramaters = { 'a_LTP' : 0.03125 , 'a_LTD' : 0.85 * 0.03125 , 'tau_LTP' : 16.8 , 'tau_LTD' : 33.7 , } シナプスの関係性に応じていくつか試す。 In [122]: model = NeuronalNetwork ( ** STDP_paramaters ) model . build ( spike_indicies ) Created 2000 spike generators. Created 2000 parrot neurons. Created 1 post_neuron. Created spike detector. Created voltmeter. In [123]: model . compile ( synapse_model = \"static\" , ex = 1 ) Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: static_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [124]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [125]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [126]: model . compile ( synapse_model = \"standard\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [127]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [128]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [129]: model . compile ( synapse_model = \"triplet\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_triplet_synapse Connected post neuron to spike detector Connected voltmeter to post neuron In [130]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [131]: ax = model . plotWeights ( repeated_idxes ) plt . show () In [132]: model . compile ( synapse_model = \"FACETS\" , ex = 1 ) Reset Kernel. ReCreated 2000 spike generators. ReCreated 2000 parrot neurons. ReCreated 1 post_neuron. ReCreated spike detector. ReCreated voltmeter. Connected 2000 spike generators to 2000 parrot neurons. (one-to-one) Connected 2000 parrot neurons to 1 post neuron. (all-to-all) Method: stdp_facetshw_synapse_hom Connected post neuron to spike detector Connected voltmeter to post neuron In [133]: ax = model . simulate ( T = simulation_times , color = \"black\" ) ax = model . mask_pattern ( ax , output_identities , simulation_times ) plt . show () In [134]: ax = model . plotWeights ( repeated_idxes ) plt . show () パラメータのチューニングが終わりませんでした。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-report-latter.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-report-latter.html"},{"title":"2018年過去問","text":"前半 ： 相澤先生 （問１） F値が2.8のレンズAと5.6のレンズBの像映の明るさを比較せよ。 レンズ口径が同じで焦点距離が28mmのレンズと35mmのレンズの像影の明るさを比較せよ。 （解答） 後半 ： 山崎先生 （問５） 判別分析法（大津の閾値法）について、数式を用いながら説明せよ。 2値画像化の際に用いる他の手法のアルゴリズムを説明せよ。 （解答）","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2018.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2018.html"},{"title":"2017年過去問","text":"前半 ： 相澤先生 （問１） 顔が蛍光灯の下で撮影したら青白く写ったのはなぜか。 虫眼鏡をつかって、開口径、焦点距離 = \\(A(5,2)\\ B(6,3)\\ C(7,4)\\) のうち、一番早く焦げるのはどれか。 服が地下街で見たときお気に入りの服だったが、日中着てみたらお気に入りの色とちょっと違った。なぜか？ （解答） カメラのホワイトバランス機能を用いずに蛍光灯の下で撮影したためと考えられる。昼間の太陽光の色温度は5500K程度であるが、この値より低くなるほど光源の赤みは増し、高くなるほど青みが増す。色温度が高いこの光源が顔に反射したのを撮影したことが、顔が青くなった理由である。 焦光性能が高いレンズの方がより焦げやすいと考えられるので、 \\(F\\) 値の小さいレンズの方が良い。 \\(F\\) 値は \\(F\\) =(焦点距離)/(レンズの直径)で与えられ、レンズの \\(F\\) 値はそれぞれ \\(A(0.4)\\ B(0.5)\\ (0.57)\\) となるので、最も早く焦げるのは、 \\(A\\) 1と同じ。証明の色温度が異なると同じ白色でも赤みがかかったり青みがかかってしまうから。 （問２） 以下の目的のとき、それぞれどのようなフィルタを用いるのが適切か。 大振幅のスパイクノイズを除去したい。 エッジを維持しつつ、小振幅のガウシアンノイズを除去したい。 （解答） ¬メディアンフィルタ¬ メディアンフィルタは、注目画素を中心とした領域で、輝度値の中央値をフィルタの出力とするもので、中央値を用いることで 外れ値に相当するスパイクノイズ を取り除ける。平坦化フィルタでは綺麗に取り除けない上にエッジがぼやけてしまうが、メディアンフィルタではエッジがあまり影響を受けずにスパイクノイズを除くことができる。 ¬バイラテラルフィルタ¬ バイラテラルフィルタは、注目画素からの距離による重みと注目画素との画素値の差分に応じて、ガウス分布に従う重みを付けた平坦化フィルタである。画素値が離れるほど重みが小さくなるため、エッジ周辺で画素値が混ざり合わず、エッジを保存できる。 （問３） 1M枚の画像から完全に一致する画像を見つけるにはどうすればいいか。 1M枚の画像から、輝度値が異なる似た画像を取り出したい。どのようにすればいい か。なぜその手法だと使えるのか。 （解答） ¬粗密探索(coarse-to-fine search)法¬に従い、解像度を下げた画像を次々に作成し、解像度の低い画像で一致したものだけをより高い解像度の画像で判定することを繰り返す。 なお、この時、 「完全に一致する画像」 を見つけたいのであれば、平均化して解像度を落とすのではなく、数点サンプリングして解像度の低い画像を作成した方が効率が良いと考えられる。 ¬BoVM(Bag-of Visual Words)¬という画像特徴表現と最近傍探索によって実現が可能である。BoVF表現とは、SIFTなどの特徴ベクトルをk-means法などによりクラスタリングし、 \\(k\\) クラスに分割する。その後、 \\(k\\) クラスの出現頻度を元にkd-tree法により探索木を構築する。 探索木を用いれば、近接した数データのみを考えれば良いため、非常に効率が良い。 後半 ： 山崎先生 （問５） PCAを説明せよ。 8点アルゴリズムを説明せよ。 （解答） PCA(主成分分析)は多次元の特徴空間に分散する多数の学習用入力画像から、分布をよく説明する低次元の特徴空間（部分空間）を求め、特徴選択を行う手法。誤差最小化、分散最大化の二通りの定式化方法があるが、分散共分散行列の固有値の大きな方から対応するベクトルを第1成分、第2成分、…と決めれば良い。 視点が異なる2枚の画像があるとした時、3次元中の点Pがそれぞれの画像でそれぞれ点 \\((u,v),(u&#94;{\\prime},v&#94;{\\prime})\\) に見えているとする。この時、 $$ \\left(\\begin{array}{lll}{u&#94;{\\prime}} & {v&#94;{\\prime}} & {1}\\end{array}\\right)\\underbrace{\\left(\\begin{array}{lll}{f_{11}} & {f_{12}} & {f_{13}} \\\\ {f_{21}} & {f_{22}} & {f_{23}} \\\\ {f_{31}} & {f_{32}} & {f_{33}}\\end{array}\\right)}_{F}\\left(\\begin{array}{l}{u} \\\\ {v} \\\\ {1}\\end{array}\\right)=0 $$ を満たす行列 \\(F\\) が存在する。 Fが得られると、2つのカメラの位置関係（回転行列 \\(\\mathbf{R}\\) と平行移動ベクトル \\(\\mathbf{t}\\) ）が得られるため、他方のカメラの点がもう一方のカメラでどこに見えるのかわかり、三次元幾何が計算できる。 Fは \\(3\\times3\\) の行列だが、行列Fには定数倍の不定性があるため、未知数の数は8個である。1組の画像座標から1つの線型方程式が得られるため、最低8点の対応点が見つかればFを計算することができ、3次元幾何が得られる。こうして8組の点から3次元幾何を計算する手法を8点アルゴリズムという。 （問６） アンサンブル学習の3つの手法について特徴と違いを説明せよ。 （解答） アンサンブル学習には、@バギング@、@ランダムフォレスト@、@ブースティング@がある。 @バギング@： トレーニングデータを（重複を許して）ランダムに分割して、それぞれ学習器 \\(f&#94;b(\\mathbf{x})(b=1,2,\\ldots,B)\\) を作り、全体の結果は回帰ならば平均 \\(f(\\mathbf{x}) = \\frac{1}{B}\\sum_{b}f&#94;b(\\mathbf{x})\\) m分類ならば多数決とする。複数の学習器を用いることで過学習を防ぐことができる。 @ランダムフォレスト@： 基本的にはバギングと手順は同じであるが、学習器がそれぞれ学習に用いる特徴量もランダムに選択する。これにより、各学習器の性能が全く異なることが、バギングとの違いである。 @ブースティング@： 各学習器の学習時に、その学習器がどのようなときに誤るかをそれぞれの学習器の性能を見て重み付けし、各学習器の重み付けを考慮して平均や多数決を取る。他の2 つと異なり学習を並列に行うことができない。ビッグデータではしばしばランダムフォレストに劣る。 （問７） パーセプトロンの学習が収束するまで表を埋めよ。 初期重み \\((w_2, w_1,w_0) ＝\\) （学生証番号下2桁、下1桁、1) 学習率 \\(\\eta=1\\) 学習データ \\((x,y) = (0, 1) (1, 2 )\\) のとき、正解ラベルは \\(1\\) \\((x,y) = (2,1)\\) のとき 正解ラベルは \\(0\\) 入力値は \\(x_0 = 1, x_1 = y, x_2 = x\\) 出力は $$\\begin{cases} 1 & \\text{if $w_2x_2 + w_1x_1 + w_0x_0 \\geq 0$}\\\\ 0 & \\text{otherwise.} \\end{cases}$$ （解答） 初期重み \\((w_2, w_1,w_0) ＝ (0,3,1)\\) とする。 |Step| \\(x_0\\) | \\(x_1\\) | \\(x_2\\) |真理値| \\(w_0\\) | \\(w_1\\) | \\(w_2\\) |出力値真理値-出力値| \\(\\Delta w_0\\) | \\(\\Delta w_1\\) |$\\Delta w_2| |:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:| |1 |1 |1 |0 |1 |1 |3 |0 |1 |0 |0 |0 |0| |2 |1 |2 |1 |1 |1 |3 |0 |1 |0 |0 |0 |0| |3 |1 |1 |2 |0 |1 |3 |0 |1 |-1|-1|-1|-2| |4 |1 |1 |0 |1 |0 |2 |-2| 1| 0| 0| 0| 0| |5 |1 |2 |1 |1 |0 |2 |-2| 1| 0| 0| 0| 0| |6 |1 |1 |2 |0 |0 |2 |-2| 0| 0| 0| 0| 0| if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2017.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2017.html"},{"title":"2016年過去問","text":"前半 ： 相澤先生 （問１） コサイン４乗則とは何かを述べよ。 位相差オートフォーカスについて説明せよ 色白の友人をデジタルカメラで撮影した。その画像を確認したところ、青い顔に写っていた。その理由として考えられることを述べよ。 （解答） 画像中心での画像の明るさに対して、画像の周辺部の明るさを周辺光量と呼び、画像周辺部が画像中心に対して暗くなる現象を 周辺光量の低下 と呼ぶ。この原因の1つがコサイン4乗則で、光軸に対する入射角度を \\(\\theta\\) とした時、投射面上の照度がコサインの4乗に比例する現象である。コサイン4乗則は、レンズの絞り値には関係しない。 オートフォーカス専用センサーを設けて結像位置のずれから瞬時に合焦位置を算出して焦点を合わせる方法。計測と撮像を切り替えられる一眼レフ式での利用が始まる。 カメラのホワイトバランス機能を用いずに蛍光灯の下で撮影したためと考えられる。昼間の太陽光の色温度は5500K程度であるが、この値より低くなるほど光源の赤みは増し、高くなるほど青みが増す。したがって、色温度が高い蛍光灯などの下で撮影したことが原因であると考えられる。 （問２） 次のそれぞれの場合において、空間フィルタを画像に適用したい。どのようなフィルタを適用すればよいか。その原理と理由を述べよ。必要に応じて数式も用いること。 画像からエッジを抽出したい 画像中の大振幅スパイクノイズを除去したい 画像中のエッジを保持しながら、ガウシアンノイズを除去したい （解答） @LoGフィルタ@： ガウス関数のラプラシアンを計算しておき、それを係数としたフィルタである。ラプラシアンで値がゼロ交差するところがエッジの位置となる。ガウス関数を用いるのは、ラプラシアンによってノイズが強調されてしまうのを平滑化の影響で小さくするため。 @メディアンフィルタ@： 注目画素を中心とした領域の輝度値の中央値を出力としたフィルタである。中央値を採用することによって外れ値に相当するスパイクノイズを除去できる。 @バイラテラルフィルタ@： 注目画素からの距離による重みと注目画素との画素値の差に応じてガウス分布に従う重みをつけた平均化を行うフィルタである。輝度値が離れるほど重みが小さくなるため、エッジ周辺の画素値が混ざらずにエッジが保存される。 （問３） \\(\\gamma\\) 補正について説明せよ トーンカーブとは何か ヒストグラム平坦化とは何か。どのような効果が得られるか。 （解答） もともとは、陰極管の物理特性により、ブラウン管テレビの¬「入力信号の電圧」と「出力する輝度」の間にリニアな関係がなかった¬ことを是正するために、放送局側で色情報を調整するための変換を¬ガンマ変換（ガンマ補正）¬と呼んだ。これは $$y = 255\\left(\\frac{x}{255}\\right)&#94;{\\frac{1}{\\gamma}}$$ で表される式で入力値 \\(x\\in[0,255]\\) を補正する変換式であり、ブラウン管補正のガンマ特性は \\(\\gamma=2.2\\) であった。 なお、式からわかるように、 \\(\\gamma > 1\\) の時はトーンカーブが上に凸に、 \\(\\gamma < 1\\) の時は下に凸になる。 入力画像のそれぞれの画素値に対し、出力画像の画素値をどのように対応づけるかを指定する関数、階調変換関数をグラフで表したもの。 結果として、出力画像のヒストグラムが画素値の全域にわたって均等に分布するようにする変換のこと。これによって、画像の明暗がわかりやすくなる。 後半 ： 山崎先生 （問４） パーセプトロンの学習が収束するまで表を埋めよ。 初期重み \\((w_2, w_1,w_0) ＝\\) （学生証番号下2桁、下1桁、1) 学習率 \\(\\eta=1\\) 学習データ \\((x,y) = (0, 1) (1, 2 )\\) のとき、正解ラベルは \\(1\\) \\((x,y) = (2,1)\\) のとき 正解ラベルは \\(0\\) 入力値は \\(x_0 = 1, x_1 = y, x_2 = x\\) 出力は $$\\begin{cases} 1 & \\text{if $w_2x_2 + w_1x_1 + w_0x_0 \\geq 0$}\\\\ 0 & \\text{otherwise.} \\end{cases}$$ （解答） 初期重み \\((w_2, w_1,w_0) ＝ (0,3,1)\\) とする。 |Step| \\(x_0\\) | \\(x_1\\) | \\(x_2\\) |真理値| \\(w_0\\) | \\(w_1\\) | \\(w_2\\) |出力値真理値-出力値| \\(\\Delta w_0\\) | \\(\\Delta w_1\\) |$\\Delta w_2| |:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:| |1 |1 |1 |0 |1 |1 |3 |0 |1 |0 |0 |0 |0| |2 |1 |2 |1 |1 |1 |3 |0 |1 |0 |0 |0 |0| |3 |1 |1 |2 |0 |1 |3 |0 |1 |-1|-1|-1|-2| |4 |1 |1 |0 |1 |0 |2 |-2| 1| 0| 0| 0| 0| |5 |1 |2 |1 |1 |0 |2 |-2| 1| 0| 0| 0| 0| |6 |1 |1 |2 |0 |0 |2 |-2| 0| 0| 0| 0| 0| （問５） Harrisのコーナー検出系において、数式によりアルゴリズムの概要を説明せよ。 （解答） ¬ハリスのコーナー検出(Harris corner detector)¬は、画像からコーナーを検出する手法である。なお、コーナーとは、 「周辺と自己相似性が低い所」 入力画像に対する \\(x,y\\) 方向の勾配画像 \\(I_x,I_y\\) を生成する。（例えば、ガウス関数 \\(G(\\sigma)\\) を \\(x,y\\) の各方向で微分した \\(G_x(\\sigma),G_y(\\sigma)\\) を画像に畳み込むことで勾配画像を求める。） 各勾配画像の積により、各方向における勾配の大きさを算出する。 $$I_{x2}=I_x\\cdot I_x, I_{y2}=I_y\\cdot I_y,I_{xy} = I_x\\cdot I_y$$ \\(I_{x2},I_{y2},I_{xy}\\) の局所領域における勾配の総和 \\(S_{x2},S_{y2},S_{xy}\\) を求める。 \\(I_{x2},I_{y2},I_{xy}\\) は局所領域における単純な総和でも良いが、以下に示すようなガウス関数 \\(G(\\sigma&#94;{\\prime})\\) による重み付き和を用いることが多い。 $$S_{x2}=G(\\sigma&#94;{\\prime})\\ast I_{x2},\\ S_{y2}=G(\\sigma&#94;{\\prime})\\ast I_{y2},\\ S_{xy}=G(\\sigma&#94;{\\prime})\\ast I_{xy}$$ 画素 \\((x,y)\\) における局所領域の勾配の総和 \\(S_{x2}(x,y),S_{y2}(x,y),S_{xy}(x,y)\\) を要素にもつ行列 \\(\\mathbf{M}(x,y)\\) を定義する。 $$\\mathbf{M}(x,y) = \\left[\\begin{array}{lll}{S_{x2}(x,y)} & {S_{xy}(x,y)} \\\\ {S_{xy}(x,y)} & {S_{2y}(x,y)}\\end{array}\\right]$$ 画素 \\((x,y)\\) がコーナーである場合、行列 \\(\\mathbf{M}\\) の固有値 \\(\\lambda_1,\\lambda_2\\) は共に大きな値となる。そこで、コーナー関数 \\(R\\) を以下のように決める。なお、 \\(k\\) は \\(0.04\\sim0.06\\) が最適値とされている。 $$R = \\operatorname{det}\\mathbf{M} - k\\left(\\operatorname{tr}\\mathbf{M}\\right)&#94;2$$ 上式の値が局所的な最大値となる画素をコーナーとして検出する。実際には、画像中に非常に多くの局所的な最大値が存在するため、上の値に対して適当なしきい値を設け、有効なコーナーだけを選択する。 （問６） シーンの奥行き計測したい。手法を3つ挙げ、その原理の概要とお互いの手法の利害損失を述べよ。 （解答） | 名前 | 原理 | 長所 | 短所 | | ---- | ---- | ---- | ---- | | スポット光投影法 | レーザー光を照射して戻ってくるまでの時間を計測して距離を計算する。 | 単純な原理のために信頼性⾼く計測できる。 | ⼀回の画像で⼀点の計測しかできず計測時間が⻑い。 | | スリット光投影法 | 線状の光を照射してその線の歪みから奥⾏を推定する。 | ⼀回の画像で線上の点の奥⾏が計測できるため⽐較的⾼速である。 | 1枚の画像からすべての点の奥⾏がわかるわけではない。 | | コード化パターン光投影法 | 対象物に対して既知のパターンを照射してその歪みから奥⾏を推定する。 | 1枚の画像からすべての点の奥⾏がわかる。 | コードの復号化の計算コストが⾼く、細部の計測が難しい。 | if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2016.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2016.html"},{"title":"2015年過去問","text":"前半 ： 相澤先生 （問１） 被写界深度について説明せよ。 焦点距離28mm と35mm の同一口径のレンズがある。像面の明るさを比較せよ。 コサイン4 乗則とは何か説明せよ。 （解答） 遠点から近点までの実用上ピントが合っていると判断できる距離範囲のこと。レンズ主点 \\(O\\) から距離 \\(a\\) の位置の被写体 \\(A\\) ni （問２） 以下の三つのフィルタについて説明せよ。必要に応じて数式での表現も行うこと。 LoGフィルタ バイラテラルフィルタ ノンローカルミーンフィルタ （解答） （問３） 入力信号 \\(x(t)\\) 、 \\(x(t)\\) を入力するシステム \\(h(\\tau)\\) 、観測信号 \\(y(t)\\) 、出力観測時に相加的に加えられるノイズ \\(n(t)\\) として、そのフーリエ変換を \\(X(\\omega),H(\\omega),Y(\\omega),N(\\omega)\\) とする。 \\(h(\\tau)\\) は既知とする。出力 \\(y(t)\\) から \\(x(t)\\) を推定したい。以下の問題に答えよ。 \\(Y(\\omega)\\) と \\(X(\\omega)\\) の関係を書け。 逆フィルタを用いて \\(y\\) から \\(x\\) を求める手法を説明せよ。 2の手法を用いる際に突き当たる問題はどのようなものが考えられるか。 ウィーナフィルタを用いて \\(y\\) から \\(x\\) を求める手法の原理を説明せよ。 ウィーナフィルタの式を導け（フーリエ形式でよい）。 （解答） 画像が劣化した過程を逆にたどる処理を行うと、ボケやブレのある画像を復元することができる。 ここで、¬ボケやブレが、原画像に空間フィルタリング処理を施した結果生じた¬と考えると、劣化した画像 \\(g(x,y)\\) は、原画像 \\(f(x,y)\\) およびフィルタ関数 \\(h(x,y)\\) を用いて、以下のたたみ込み積分によって表される。 $$ \\begin{aligned} g(x,y) &= \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x-\\xi,y-\\eta)h(\\xi,\\eta)d\\xi d\\eta\\\\ &= f(x,y)\\ast h(x,y) \\end{aligned} $$ なお、たたみ込み積分のフーリエ変換の性質から、これらを周波数領域における関係性になおす（フーリエ変換する）と、 $$G(u,v) = F(u,v)H(u,v)$$ と表せる。 \\(h(x,y)\\) が既知であれば、¬逆フィルタ(inverse filter) \\(K_{inv}(u,v)\\) ¬ は、 $$K_{inv}(u,v) = \\frac{1}{H(u,v)}$$ と簡単に表せ、これを \\(G(u,v)\\) にかけ、フーリエ逆変換すれば、原画像の復元画像 \\(f(x,y)\\) を得ることができることになる。 ノイズが出力観測時に相加的に加えられるため、 $$Y(\\omega) = X(\\omega)H(\\omega) + N(\\omega)$$ 1の式から、逆フィルタ \\(K_{inv}(\\omega)\\) を適当に求める。（ノイズ \\(N(\\omega)\\) がないと仮定すれば、 \\(K_{inv}(\\omega)=1/H(\\omega)\\) ） これを \\(G(\\omega)\\) にかけて、フーリエ逆変換を施せば、元画像 \\(x\\) が得られる。これらをまとめると、以下で表せる。 $$y(t)\\underset{\\text{Fourier transform}}{\\Longrightarrow} Y(\\omega)\\underset{K_{inv}(\\omega)}{\\Longrightarrow} X(\\omega)\\underset{\\text{Inverse fourier transform}}{\\Longrightarrow} x(t)$$ まず、 \\(h(\\tau)\\) が未知の場合、 \\(K_{inv}(\\omega)\\) を適切に決めることが難しい。また、 \\(H(\\omega)\\) が \\(0\\) 、または \\(0\\) に極めて近い値となる空間周波数 \\(\\omega\\) では、逆フィルタ \\(K_{inv}(\\omega)\\) が発散し、¬劣化画像に含まれるノイズ成分が増幅されてしまう。¬ （→実際には、ノイズの影響を考慮し、 \\(H(\\omega)\\) が \\(0\\) に近い時に発散しないフィルタを考える必要がある。） ¬ウィーナーフィルタ(Wiener filter)¬は、復元された入力 \\(\\hat{f}(t)\\) と原入力 \\(f(t)\\) の間の復元誤差（ 平均二乗誤算 ）を最小にするようなフィルタを用いて復元を行う手法であり、このフィルタは以下で表される。 $$K_w(u,v) = \\frac{1}{H(u,v)}\\frac{\\left|H(u,v)\\right|&#94;2}{\\left|H(u,v)\\right|&#94;2 + \\left|N(u,v)\\right|&#94;2 / \\left|F(u,v)\\right|&#94;2}$$ フィルタを \\(K(\\omega)\\) とすると、平均二乗誤差 \\(\\mathrm{E}_{ave}\\) は、 $$ \\begin{aligned} \\mathrm{E}_{ave} &= E\\left[\\left(X-\\hat{X}\\right)&#94;2\\right] = E\\left[\\left(X-K\\left(XH+N\\right)\\right)&#94;2\\right]\\\\ \\frac{\\partial \\mathrm{E}_{ave}}{\\partial K} &= E\\left[-2\\left(XH + N\\right)\\left(X-K\\left(XH+N\\right)\\right)\\right] \\\\ &= -2\\left(E\\left[X&#94;2\\right]H - K\\left(E\\left[X&#94;2\\right]H&#94;2 + E\\left[N&#94;2\\right]\\right)\\right) = 0\\quad\\left(\\because \\text{$N$ is independent, and $E[N]=0$}\\right)\\\\ \\therefore K_w &= \\frac{E\\left[X&#94;2\\right]H}{E\\left[X&#94;2\\right]H&#94;2 + E\\left[N&#94;2\\right]} = \\frac{H}{H&#94;2 + E\\left[N&#94;2\\right]/E\\left[X&#94;2\\right]}\\\\ \\end{aligned} $$ 後半 ： 山崎先生 （問４） グレースケール画像を二値画像に変換する手法の一つである判別分析法（大津の閾値法）の概略を、数式を用いながら説明せよ。 （解答） （問５） ユークリッド距離とマハラノビス距離の違いを説明せよ。 マハラノビス距離の具体的な計算方法を数式で示せ。 （解答） （問６） ハフ変換とは何か説明せよ。 ハフ変換で直線を検出するアルゴリズムを述べよ。ただし計算機内で計算できるアルゴリズムとする。 （解答） \\(xy\\) 平面上に \\(y=\\hat{a}x + \\hat{b}\\) なる直線があったとして、この直線を検出して \\((\\hat{a},\\hat{b})\\) を推定する際に、 \\(ab\\) 平面を考えて、 \\(x,y\\) 平面上の点 \\((x_i,y_i)\\) につき1つの直線を引き（ \\(b = -x_ia + y_i\\) ）全直線の交わった座標が \\((\\hat{a},\\hat{b})\\) となる。 上で、 （問７） 平行ステレオ法について考える。カメラ間の距離 \\(b\\) を大きくした時、 \\(b\\) が小さい時と比べてどのような利害損失があるか、図や数式を用いて根拠と共に論ぜよ。 （解答） if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2015.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2015.html"},{"title":"2014年過去問","text":"前半 ： 相澤先生 （問１） F値が2.8のレンズAと5.6のレンズBの像映の明るさを比較せよ。 レンズ口径が同じで焦点距離が28mmのレンズと35mmのレンズの像影の明るさを比較せよ。 （解答） ¬F値(絞り値)¬はカメラに入る光の量をコントロールする値であり、「F値を @小さく@ する」↔︎「絞りを空ける」↔︎「穴が広く、光がたくさん入る」という関係がある。したがって、F値の大きいレンズBの方が@暗く@なる。 具体的には、¬像映の明るさはF値の逆数の二乗に比例している¬ ¬F値 = @(焦点距離)/(レンズ口径)@¬ であるため、レンズ口径が同じであると仮定すると焦点距離が@長い@ほど像映は暗くなる。従って焦点距離が@長い@のレンズの方が暗く映る。 （問２） \\(\\gamma\\) 補正とは何か説明せよ。 白米をカメラで撮影したところ赤みがかかっていたがその理由を述べよ。 （解答） もともとは、陰極管の物理特性により、ブラウン管テレビの¬「入力信号の電圧」と「出力する輝度」の間にリニアな関係がなかった¬ことを是正するために、放送局側で色情報を調整するための変換を¬ガンマ変換（ガンマ補正）¬と呼んだ。これは $$y = 255\\left(\\frac{x}{255}\\right)&#94;{\\frac{1}{\\gamma}}$$ で表される式で入力値 \\(x\\in[0,255]\\) を補正する変換式であり、ブラウン管補正のガンマ特性は \\(\\gamma=2.2\\) であった。 なお、式からわかるように、 \\(\\gamma > 1\\) の時はトーンカーブが上に凸に、 \\(\\gamma < 1\\) の時は下に凸になる。 カメラの¬ホワイトバランス¬機能を用いずに、白熱灯の下で撮影したためと考えられる。一般に、照明とカメラの温度関係によって、画像に青みがかかったり（照明の温度がカメラよりも@高い@時）、赤みがかかったり（その逆）する。昼間の太陽光の色温度は5500K程度であり、 ホワイトバランス 機能を用いなければ基本的にこの環境で白い物体が白く映るような調整がされているはずである。白熱灯の色温度は3000K程度であり、照明の温度が（相対的に）低くなったので、赤みがかかった原因だと考えられる。 （問３） 必要に応じて数式を使いながら、以下の2種類のフィルタについて説明せよ。 LoGフィルタ バイラテラルフィルタ （解答） 一般に、関数 \\(f(x,y)\\) のラプラシアンは、 $$\\frac{\\partial&#94;2}{\\partial x&#94;2}f(x,y) + \\frac{\\partial&#94;2}{\\partial y&#94;2}f(x,y) $$ で定義される。そこで、横方向の2次微分の結果と縦方向の2次微分の結果を足し合わせて得られる¬ラプラシアンフィルタ(Laplacian filter)¬を用いれば、方向に依存しないエッジが直接得られる。 ラプラシアンフィルタ を通した後の画像は、エッジの位置の両側に、プラスの値とマイナスの値が対になって現れる。したがって、ちょうど0になる位置（¬ゼロ交差(zero crossing)¬）を求めれば、エッジの位置を求めることができる。 しかし、ラプラシアンは、本質的に微分を繰り返すことになるため、 かなりノイズを強調してしまう。 そのため、まず¬ガウシアンフィルタ(gaussian filter)¬を用いてある程度の平坦化を行ったのち、ラプラシアンフィルタを施すことが一般的によく行われる。 これら2つの処理は1つにまとめて表すことも可能である。2次元ガウシアンフィルタが $$h_g = G(x,y;\\sigma) = \\frac{1}{2\\pi\\sigma&#94;2}\\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)$$ で表されるので、 $$h_{log} = \\nabla&#94;2G(x,y;\\sigma) = \\frac{x&#94;2 + y&#94;2 - 2\\sigma&#94;2}{2\\pi\\sigma&#94;6}\\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)$$ 上記のガウシアンフィルタなどは、注目画素からの距離に応じた重みを付けた平坦化を行うフィルタであり、画像に含まれるノイズなどの不要な濃淡変動を軽減することができたが、同時に、¬画像にもともとあるエッジも滑らかにしてしまっていた。¬そこで、¬バイラテラルフィルタ(bilateral filter)¬では、 「注目画素からの距離」 に加えて、 「注目画素値との画素値の差」 に応じて、同様にガウス分布に従う重みを付ける。こうすると、 輝度差が大きい（エッジと背景など）では画素同士での平均化がされにくくなる ので、エッジを保存してノイズを取り除くことができる。 このフィルタを数式で表すと以下になる。 $$g(i,j) = \\frac{1}{W}\\sum_{m,n} f(i+m,j+n)\\left[\\exp\\left(-\\frac{m&#94;2+n&#94;2}{2\\sigma_1&#94;2}\\right)\\exp\\left(-\\frac{\\left(f(i,j) - f(i+m, j+n)\\right)&#94;2}{2\\sigma_2&#94;2}\\right)\\right]$$ （問４） 入力信号 \\(x(t)\\) 、 \\(x(t)\\) を入力するシステム \\(h(\\tau)\\) 、観測信号 \\(y(t)\\) 、出力観測時に相加的に加えられるノイズ \\(n(t)\\) として、そのフーリエ変換を \\(X(\\omega),H(\\omega),Y(\\omega),N(\\omega)\\) とする。 \\(h(\\tau)\\) は既知とする。出力 \\(y(t)\\) から \\(x(t)\\) を推定したい。以下の問題に答えよ。 \\(Y(\\omega)\\) と \\(X(\\omega)\\) の関係を書け。 逆フィルタを用いて \\(y\\) から \\(x\\) を求める手法を説明せよ。 2の手法を用いる際に突き当たる問題はどのようなものが考えられるか。 ウィーナフィルタを用いて \\(y\\) から \\(x\\) を求める手法の原理を説明せよ。 ウィーナフィルタの式を導け（フーリエ形式でよい）。 （解答） 画像が劣化した過程を逆にたどる処理を行うと、ボケやブレのある画像を復元することができる。 ここで、¬ボケやブレが、原画像に空間フィルタリング処理を施した結果生じた¬と考えると、劣化した画像 \\(g(x,y)\\) は、原画像 \\(f(x,y)\\) およびフィルタ関数 \\(h(x,y)\\) を用いて、以下のたたみ込み積分によって表される。 $$ \\begin{aligned} g(x,y) &= \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x-\\xi,y-\\eta)h(\\xi,\\eta)d\\xi d\\eta\\\\ &= f(x,y)\\ast h(x,y) \\end{aligned} $$ なお、たたみ込み積分のフーリエ変換の性質から、これらを周波数領域における関係性になおす（フーリエ変換する）と、 $$G(u,v) = F(u,v)H(u,v)$$ と表せる。 \\(h(x,y)\\) が既知であれば、¬逆フィルタ(inverse filter) \\(K_{inv}(u,v)\\) ¬ は、 $$K_{inv}(u,v) = \\frac{1}{H(u,v)}$$ と簡単に表せ、これを \\(G(u,v)\\) にかけ、フーリエ逆変換すれば、原画像の復元画像 \\(f(x,y)\\) を得ることができることになる。 ノイズが出力観測時に相加的に加えられるため、 $$Y(\\omega) = X(\\omega)H(\\omega) + N(\\omega)$$ 1の式から、逆フィルタ \\(K_{inv}(\\omega)\\) を適当に求める。（ノイズ \\(N(\\omega)\\) がないと仮定すれば、 \\(K_{inv}(\\omega)=1/H(\\omega)\\) ） これを \\(G(\\omega)\\) にかけて、フーリエ逆変換を施せば、元画像 \\(x\\) が得られる。これらをまとめると、以下で表せる。 $$y(t)\\underset{\\text{Fourier transform}}{\\Longrightarrow} Y(\\omega)\\underset{K_{inv}(\\omega)}{\\Longrightarrow} X(\\omega)\\underset{\\text{Inverse fourier transform}}{\\Longrightarrow} x(t)$$ まず、 \\(h(\\tau)\\) が未知の場合、 \\(K_{inv}(\\omega)\\) を適切に決めることが難しい。また、 \\(H(\\omega)\\) が \\(0\\) 、または \\(0\\) に極めて近い値となる空間周波数 \\(\\omega\\) では、逆フィルタ \\(K_{inv}(\\omega)\\) が発散し、¬劣化画像に含まれるノイズ成分が増幅されてしまう。¬ （→実際には、ノイズの影響を考慮し、 \\(H(\\omega)\\) が \\(0\\) に近い時に発散しないフィルタを考える必要がある。） ¬ウィーナーフィルタ(Wiener filter)¬は、復元された入力 \\(\\hat{f}(t)\\) と原入力 \\(f(t)\\) の間の復元誤差（ 平均二乗誤算 ）を最小にするようなフィルタを用いて復元を行う手法であり、このフィルタは以下で表される。 $$K_w(u,v) = \\frac{1}{H(u,v)}\\frac{\\left|H(u,v)\\right|&#94;2}{\\left|H(u,v)\\right|&#94;2 + \\left|N(u,v)\\right|&#94;2 / \\left|F(u,v)\\right|&#94;2}$$ フィルタを \\(K(\\omega)\\) とすると、平均二乗誤差 \\(\\mathrm{E}_{ave}\\) は、 $$ \\begin{aligned} \\mathrm{E}_{ave} &= E\\left[\\left(X-\\hat{X}\\right)&#94;2\\right] = E\\left[\\left(X-K\\left(XH+N\\right)\\right)&#94;2\\right]\\\\ \\frac{\\partial \\mathrm{E}_{ave}}{\\partial K} &= E\\left[-2\\left(XH + N\\right)\\left(X-K\\left(XH+N\\right)\\right)\\right] \\\\ &= -2\\left(E\\left[X&#94;2\\right]H - K\\left(E\\left[X&#94;2\\right]H&#94;2 + E\\left[N&#94;2\\right]\\right)\\right) = 0\\quad\\left(\\because \\text{$N$ is independent, and $E[N]=0$}\\right)\\\\ \\therefore K_w &= \\frac{E\\left[X&#94;2\\right]H}{E\\left[X&#94;2\\right]H&#94;2 + E\\left[N&#94;2\\right]} = \\frac{H}{H&#94;2 + E\\left[N&#94;2\\right]/E\\left[X&#94;2\\right]}\\\\ \\end{aligned} $$ 後半 ： 山崎先生 （問５） 判別分析法（大津の閾値法）について、数式を用いながら説明せよ。 2値画像化の際に用いる他の手法のアルゴリズムを説明せよ。 （解答） ¬判別分析法(discriminant analysis method)¬とは、しきい値 \\(t\\) を用いて黒画素クラスと白画素クラスに分けた際に、両クラスの¬分離度(separation metrics)¬（＝@クラス間分散(between class variance)@/@クラス内分散(within-class variance)@ = \\(\\sigma_b&#94;2/\\sigma_w&#94;2\\) ）が最大となるような閾値 \\(t\\) を選択する手法である。 なお、黒/白クラスの平均・分散・クラスに属する画素の数を（ \\(m_{1/2},\\sigma&#94;2_{1/2},n_{1/2}\\) ）とすれば、 $$ \\begin{aligned} \\sigma&#94;2_w &= \\frac{1}{n}\\sum_{k}\\sum_{x\\in\\mathcal{X}_k}\\left(x - m_k\\right)&#94;2 = \\frac{1}{n}\\sum_kn_k\\sigma_k&#94;2\\\\ \\sigma&#94;2_b &= \\frac{1}{n}\\sum_kn_k\\left(m_k-m\\right)&#94;2 = \\frac{n_1n_2\\left(m_1-m_2\\right)&#94;2}{n}\\quad\\left(\\because nm = \\sum_kn_km_k\\right) \\end{aligned} $$ である。また、全分散 \\(\\sigma_t&#94;2\\) は、閾値に依らず $$\\sigma_t&#94;2 = \\sigma_b&#94;2 + \\sigma_w&#94;2$$ で一定なので、結局分離度は以下の式を用いてでも表せる。 $$\\frac{\\sigma_b&#94;2}{\\sigma_w&#94;2} = \\frac{\\sigma_b&#94;2}{\\sigma_t&#94;2-\\sigma_w&#94;2}$$ 判別分析法以外の二値化アルゴリズムとして、¬p-タイル法(p-tile method)¬と¬モード法(mode method)¬が挙げられる。 p-タイル法 は、画像に占める黒色（白色）領域の割合が 既知である 場合に、画素値の低い（高い）ものから頻度値を積算し、予想される割合を超えた時の画素値をしきい値とする方法である。 モード法 は、テキスト画像においてはヒストグラムが文字部分と背景部分に相当する二つの山を持つことに着目して、その間の極小値を閾値と定める方法である。この方法では、画素数が十分多くなければ、ノイズによって山や谷がはっきりと現れないため、ノイズによる影響を軽減するような処理を加える必要がある。 （問６） ユークリッド距離とマハラノビス距離の違いを説明せよ。 マハラノビス距離を数式で表現せよ。 （解答） ユークリッド距離は、ユークリッド空間における2点を結ぶ線分の長さであり、マハラノビス距離は、ユークリッド距離を拡張したもので、多変数（クラスごと）の相関に基づくものである。 一般に、ある点 \\(\\mathbf{x}_i\\) が多変数ベクトル \\(\\mathbf{x}_i=\\left(x_{i1},x_{i2},\\ldots,x_{ip}\\right)&#94;T\\) で表される時、 これらの変数ごとの平均を \\(\\boldsymbol{\\mu}=\\left(\\mu_1,\\mu_2,\\ldots,\\mu_p\\right)&#94;T\\) 各変数間の分散共分散行列を \\(\\boldsymbol{\\Sigma}\\) と定義すると、点 \\(\\mathbf{x}\\) のデータ群に対するマハラノビス距離は、以下で表される。 $$D_M(\\mathbf{x}) = \\sqrt{\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)}$$ （問７） ハフ変換とは何か、説明せよ。 ハフ変換で直線を検出するアルゴリズムを述べよ。但し計算機内で計算できるアルゴリズムとする。 （解答） ハフ変換とは、検出したい図形を有限個のパラメータ （直線であれば二つ、円であれば三つ等）で表現すると、画像空間中でその図形を構成する点にそれらのパラメータを対応させた場合、全てパラメータ空間（¬ハフ空間¬）上である一点を通るような図形を描く、ということを利用した図形検出アルゴリズムである。検出したい図形を構成する可能性のある候補点一つ一つについて、有限個のセルに分割したハフ空間上での¬投票(voting)¬を行い、投票度数の最も大きかったセルが画像空間中での検出図形に対応している。投票とは、候補点をハフ空間上に写像した際に描く図形が通るセルの値を1増やすことを指す。ハフ変換の利点は、エッジ検出などの処理によって直線が完全に検出できず、線が途切れていても直線を検出できる点である。 まず元画像にエッジ検出を施し、直線を構成する可能性のある候補点を二値画像で用意する。次に直線を二つのパラメータで表すが、ハフ空間を有限個のセルに分割するため以下のような表現を行う。（ \\(\\hat{b} = -x\\hat{a}+y\\) だと \\(a,b\\) の取りうる値の範囲が \\(-\\infty\\) から \\(\\infty\\) となってしまう。） $$\\hat{\\rho} = x\\cos\\hat{\\theta} + y\\sin\\hat{\\theta}$$ なお、 \\(\\hat{\\rho}\\) は原点から直線までの符号付き距離を、 \\(\\hat{\\theta}\\) は原点から直線への垂角（ \\(0\\leq\\hat{\\theta} < \\pi\\) ）である。 この表現により、画像空間中で直線を構成する点をハフ空間上に写像すると、位相と振幅の異なる複数の正弦波が描け、それらは一点 \\((\\hat{\\rho},\\hat{\\theta})\\) を通る。最後に全ての候補画素についてハフ空間上での投票を行い、投票度数の最も大きいセルを定める。結果としてこのセルが、画像空間上での検出したい直線を表すパラメータとなっている。 （問８） 物体の3次元空間位置を \\((X,Y,Z)\\) 、二つのカメラの距離を \\(b\\) 、二つのカメラで見えている座標を \\((u,v)\\) 、 \\((u&#94;{\\prime},v&#94;{\\prime})\\) とする。また、 \\(f\\) を焦点距離とする。 \\((X,Y,Z)\\) と \\((u,v),(u&#94;{\\prime},v&#94;{\\prime})\\) の関係を示せ。 \\(b\\) を大きくした時、小さい場合と比べてどのような利害があるか、議論せよ。 （解答） 三次元空間上の位置 \\((X,Y,Z)\\) は、二台のカメラの画像中の位置から以下のようにも止まる。 $$(X,Y,Z) = \\left(\\frac{bu}{u-u&#94;{\\prime}},\\frac{bv}{u-u&#94;{\\prime}},\\frac{bf}{u-u&#94;{\\prime}}\\right)$$ カメラの距離 \\(b\\) を基線長と呼ぶが、これを大きくすると 必然的にハードウェアも大きくなってしまい 、ステレオカメラ等では持ち運びのし易さに直結するため、基線長の長さには限度がある。一方、基線長を大きくすることでカメラが離れるので視差が大きくなり、 対象物の奥行き情報についての計測誤差を抑えることができる 、というメリットもある。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2014.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2014.html"}]};