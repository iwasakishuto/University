var tipuesearch = {"pages":[{"title":"動画像処理","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt 動画像は、静止画の集まり（パラパラ漫画） 10~15[fps]あると、人は動画だと感じる。 映画：24[fps] TV、インターネット動画：30~60[fps] ロボット制御に必要な速度（アクチュエーターの反応速度が~ms）：1,000[fps] 自動運転 ~ 10,000[fps] Start End → 何をするか？ 動物体の検出・解析 動画の編集 動画の理解・認識 動物体の検出・解析 背景差分・フレーム間差分 【問題】 照明変化（屋外では良く起こる）、背景の変化（木の揺れ等）に弱い。 背景画像をどうやって作るかもポイント。 【統計的背景差分】 各ピクセルで時間的に統計情報を取ってもう少しsmartに背景差分することを考える。背景クラスを $w_b$ 前景クラスを $w_f$ とすると、やることは、$\\left(p\\left(w_f | I(x,y)\\right), p\\left(w_b | I(x,y)\\right)\\right)$ のうち確率の高いクラスを採用する。 ここで、ベイズの定理より、 $$ \\begin{cases} \\begin{aligned} p\\left(w_f | I(x,y)\\right) &= \\frac{p(w_f)p(I\\left(x,y)|w_f\\right)}{p(I(x,y))}\\propto p(w_f)p\\left(I(x,y)|w_f\\right)\\\\ p\\left(w_b | I(x,y)\\right) &= \\frac{p(w_b)p(I\\left(x,y)|w_b\\right)}{p(I(x,y))}\\propto p(w_b)p\\left(I(x,y)|w_b\\right) \\end{aligned} \\end{cases} $$ $p(w_b, w_f)$：その画素が $w_b, w_f$ である事前確率（例：木の上に人や車はいないので、$p_b$ 大, $p_f$：小） $p(I|w_c)$：$w_c$ だった時に、どの程度の確率でその画素値が観測されるか。 動き量の計算 【ブロックマッチング(Block Matching)】 ある時刻 $t$ におけるある領域に最も似ている時刻 $t+1$ の領域を、以下の手法等を用いて探す。 SSD(Sum of Squared Difference) SAD(Sum of Absolute Difference) NCC(Normalized Cross Correlation) 動画像圧縮では、この動きベクトル(motion vector)と差分を符号化することで圧縮を実現。 【オプティカルフロー(optical flow)】 2枚の画像間で、変化が微小だとすると、 $$\\begin{aligned}I(x+\\Delta x, y+\\Delta y, t+\\Delta t) &\\simeq I(x,y,t) + \\frac{\\partial I}{\\partial x}\\Delta x + \\frac{\\partial I}{\\partial y} \\Delta y+ \\frac{\\partial I}{\\partial t} \\Delta t + \\cdots\\\\\\rightarrow I_x\\Delta x + I_y\\Delta y + I_t\\Delta t&\\simeq0\\\\ I_x\\frac{\\Delta x}{\\Delta t} + I_y\\frac{\\Delta y}{\\Delta t} + I_t &= 0\\\\\\left(\\Delta t\\rightarrow0\\right)\\qquad I_xu+I_yv+I &= 0\\\\(u,v) &= \\left(\\frac{dx}{dt},\\frac{dy}{dt}\\right)\\end{aligned}$$ これだけだと、自由度が高すぎて一意に決まらないので、微小領域では動きが滑らかという仮定を置く。（Lucas-Kanada法, 1981） $$\\mathbf{G} = \\left[\\begin{array}{c}I_{x_1} &I;_{y_1} \\\\\\vdots&\\vdots\\\\I_{x_m}&I;_{y_m}\\end{array}\\right],\\quad \\mathbf{f} = \\left[\\begin{array}{c}u \\\\v\\end{array}\\right],\\quad\\mathbf{b} = \\left[\\begin{array}{c}I_{t_1} \\\\\\vdots\\\\I_{t_m}\\end{array}\\right]$$ 上記のように定義し、滑らかさの条件を使うと、 $$\\begin{aligned}\\mathbf{Gf}+\\mathbf{b} &= \\mathbf{0}\\\\\\therefore\\mathbf{f}&#94;{\\ast}&=-\\left(\\mathbf{G}&#94;T\\mathbf{G}\\right)&#94;{-1}\\mathbf{G}&#94;T\\mathbf{b}\\quad \\left(\\because\\text{Least squares}\\right)\\end{aligned}$$ 【DNNによる映像処理】 (x,y,t)の3次元をどう扱うか？ 画像（2次元）と時間の情報を分ける。 3D Convolution：空間情報と時間情報を同時に畳み込む。 仮想3D Convolution：空間情報を畳み込んで、その後時間方向に畳み込む。 動画の編集 In [ ]: 動画の理解・認識 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-6.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-6.html"},{"title":"生物物理学 第7回(小テスト)","text":"Si6QbVfgzQG2tgN+vBV5iA==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-7-quiz.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-7-quiz.html"},{"title":"Pro.4 Itemset mining algorithm","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-19.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-19.html"},{"title":"Pro.3 Gene Network Inference","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-18.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-18.html"},{"title":"Pro.2 最適行動列アルゴリズム","text":"In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-17.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-17.html"},{"title":"Pro.1 配列モチーフ探索","text":"In [7]: import numpy as np Problem Setting Identify the common sequencial features(sequence motif) from large amount of sequences data containing tf-binding regions. DeepBind Link: Paper Software tool \"Deep Learning\" techniques to ascertain the sequence specificities of DNA- and RNA-binding proteins from experimental data . outperforms other state-of-the-art methods. (Published: 27 July 2015) Results are readily visualized as a weighted ensemble of position weight matrices(PWMs) a mutation map that indicates how variations affect binding within a specific sequence. computes a binding score $f(s)$ using four stages: $$f(s) = \\text{Neural Network}_W\\left(\\text{pool}\\left(\\text{rect}_b\\left(\\text{conv}_M(s)\\right)\\right)\\right)$$ Convolution : Scan a set of motif detectors (length=$L$) with parameters $M&#94;{(j)}$ $$\\text{conv}_M(s)_{ij} = \\sum_{k=0}&#94;{K-1}\\sum_{l=0}&#94;{L-1}M&#94;{(j)}_{k,i+l}s_{ki}$$ Rectification : Extract some positions $$\\text{rect}_b(x_{ij}) =\\begin{cases} x_{ij} + b & (\\text{if }x_{ij} + b>0)\\\\0 & (\\text{otherwise})\\end{cases}$$ Pooling : Compute the maximum and average of each $\\text{rect}_b\\left(\\cdot\\right)$ across the sequence. Maximizing : identify the presence of longer motifs . Averaging : identify cumulative effects of short motifs $$\\text{pool}_{\\alpha}(x_{ij}) = \\alpha\\max_i\\left(x_{ij}\\right) + \\left(1-\\alpha\\right)\\underset{i}{\\text{ave}}\\left(x_{ij}\\right)$$ Neural Network : Combines the responses to produce a score. a: Five independent sequences being processed in parallel by single DeepBind model. b: The calibration, training and testing procedure. Implementation In [11]: # from kerasy.Bio.deepbind import DeepBind In [ ]: In [1]: nuc = [ \"A\" , \"C\" , \"G\" , \"T\" ] def nuc_to_code ( nuc ): return { 'A' : [ 1 , 0 , 0 , 0 ], 'C' : [ 0 , 1 , 0 , 0 ], 'G' : [ 0 , 0 , 1 , 0 ], 'T' : [ 0 , 0 , 0 , 1 ], } . get ( nuc , [ 0 , 0 , 0 , 0 ]) def generate_dataset ( n_p , n_n , length , motif , nuc ): m = len ( motif ) y = ([ 1 ] * n_p + [ 0 ] * n_n ) x = [ None ] * ( n_p + n_n ) for i in range ( n_p + n_n ): seq = np . random . choice ( nuc , size = length ) # random seq if i < n_p : # embed motif at random position j = np . random . randint ( length - m + 1 ) for k in range ( m ): seq [ j + k ] = np . random . choice ( nuc , p = motif [ k ]) x [ i ] = '' . join ( seq ) return ( x , y ) motif = [[ 0.0 , 1.0 , 0.0 , 0.0 ], # C [ 0.5 , 0.0 , 0.0 , 0.5 ], # A/T [ 0.0 , 0.5 , 0.5 , 0.0 ], # C/G [ 0.0 , 0.0 , 1.0 , 0.0 ], # G [ 0.0 , 0.0 , 0.0 , 1.0 ]] # T seq_len = 20 np_train = 1000 nn_train = 1000 np_test = 100 nn_test = 100 In [2]: x_train , y_train = generate_dataset ( np_train , nn_train , seq_len , motif , nuc ) x_test , y_test = generate_dataset ( np_test , nn_test , seq_len , motif , nuc ) In [ ]: - [ Enhanced ]( https : // arxiv . org / pdf / 1611.05777 . pdf ) In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-16.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-16.html"},{"title":"Ex.15 Neural Network","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-15.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-15.html"},{"title":"Ex.14 Brownian motion","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-14.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-14.html"},{"title":"Ex.13 Sparse Modeling","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-13.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-13.html"},{"title":"Ex.12 Order Statistics","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-12.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-12.html"},{"title":"Ex.11 Data Assimilation","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-11.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-11.html"},{"title":"Ex.10 Expectation Maximization Algorithm","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-10.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-10.html"},{"title":"Ex.9 Kullback-Leibler Divergence","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-9.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-9.html"},{"title":"Ex.8 Multivariate Normal Distribution","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-8.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-8.html"},{"title":"Ex.7 Positive Definite Symmetric Matrix","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-7.html"},{"title":"Ex.6 Multinomial Distribution","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-6.html"},{"title":"Ex.5 Categorical Distribution","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-5.html"},{"title":"Ex4. Exponential Distribution","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-4.html"},{"title":"EX3. Law of Large Numbers","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-3.html"},{"title":"EX2. Characteristic function","text":"解答","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-2.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-2.html"},{"title":"EX1. Covariance","text":"解答 1 $$ \\begin{aligned} \\mathbb{E}\\left(\\left(X-\\mu_X\\right)\\left(Y-\\mu_Y\\right)\\right) &= \\mathbb{E}\\left(XY - \\mu_YX-\\mu_XY + \\mu_X\\mu_Y\\right)\\\\ &= \\mathbb{E}\\left(XY\\right) - \\mu_Y\\mathbb{E}(X) - \\mu_X\\mathbb{E}(Y) + \\mu_X\\mu_Y\\\\ &= \\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\quad (\\because\\mu_X=\\mathbb{E}(X),\\mu_Y=\\mathbb{E}(Y)) \\end{aligned} $$ 2 連続型確率変数の場合で証明する。（離散型は \\(\\int\\rightarrow\\sum\\) ） $$ \\begin{aligned} \\mathbb{E}(XY) &= \\int_{x}\\int_{y} xy\\mathbb{P}(X=x,Y=y)dxdy\\\\ &= \\int_{x}\\int_{y} xy\\mathbb{P}(X=x)\\mathbb{P}(Y=y)dxdy\\quad(\\because X,Y: \\text{independent})\\\\ &= \\int_{x} x\\mathbb{P}(X=x)dx\\int_{y}y\\mathbb{P}(Y=y)dy\\\\ &= \\mathbb{E}(X)\\mathbb{E}(Y) \\end{aligned} $$ となるので、 \\((1)\\) より、 $$ \\begin{aligned} \\mathrm{Cov}(X,Y) &= \\mathbb{E}\\left(\\left(X-\\mu_X\\right)\\left(Y-\\mu_Y\\right)\\right)\\\\ &=\\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\\\ &=0 \\end{aligned} $$ 3 $$ \\begin{aligned} \\mathrm{Var}(X+Y) &= \\mathbb{E}\\left((X+Y)&#94;2\\right) - \\left(\\mathbb{E}\\left(X+Y\\right)\\right)&#94;2\\\\ &= \\mathbb{E}\\left(X&#94;2 + 2XY + Y&#94;2\\right) - \\left(\\mathbb{E}(X) + \\mathbb{E}(Y)\\right)&#94;2 \\\\ &= \\left(\\mathbb{E}(X&#94;2) - \\mathbb{E}(X)&#94;2\\right) + \\left(\\mathbb{E}(Y&#94;2) - \\mathbb{E}(Y)&#94;2\\right) + 2\\left(\\mathbb{E}(XY) - \\mathbb{E}(X)\\mathbb{E}(Y)\\right)\\\\ &= \\mathrm{Var}(X) + \\mathrm{Var}(Y) + 2\\mathrm{Cov}(X,Y) \\end{aligned} $$ 4 $$ \\begin{aligned} \\mathrm{Cov}\\left(aX+bY,cZ+dW\\right) &= \\mathbb{E}\\left(\\left(aX+bY\\right)\\left(cZ+dW\\right)\\right) - \\mathbb{E}\\left(aX+bY\\right)\\mathbb{E}\\left(cZ+dW\\right)\\\\ &= \\left(\\mathbb{E}\\left(aXcZ\\right) + \\cdots + \\mathbb{E}\\left(bYdW\\right)\\right) - \\left(\\mathbb{E}(aX)\\mathbb{E}(cZ) + \\cdots + \\mathbb{E}(bY)\\mathbb{E}(dW) \\right)\\\\ &= \\left\\{\\mathbb{E}\\left(aXcZ\\right) - \\mathbb{E}(aX)\\mathbb{E}(cZ) \\right\\} + \\cdots + \\left\\{\\mathbb{E}\\left(bYdW\\right) - \\mathbb{E}(bY)\\mathbb{E}(dW) \\right\\}\\\\ &= ac\\left\\{\\mathbb{E}\\left(XZ\\right) - \\mathbb{E}(X)\\mathbb{E}(Z)\\right\\} + \\cdots + bd\\left\\{\\mathbb{E}\\left(YW\\right) - \\mathbb{E}(Y)\\mathbb{E}(W)\\right\\}\\\\ &= ac\\mathrm{Cov}(X,Z) + ad\\mathrm{Cov}(X,W) + bc\\mathrm{Cov}(Y,Z) + bd\\mathrm{Cov}(Y,W) \\end{aligned} $$ 5 $$ \\begin{aligned} \\mathrm{Cov}\\left(X,Y\\right)&#94;2 &= \\left(\\sum_{x,y}(x-\\mu_X)(y-\\mu_Y)\\mathbb{P}(X=x,Y=y)\\right)&#94;2\\\\ &= \\left(\\sum_{z,w}zw\\mathbb{P}(X=x,Y=y)\\right)&#94;2\\\\ &= \\left(\\sum_{z,w}zwP_{zw}\\right)\\left(\\sum_{z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime}w&#94;{\\prime}P_{z&#94;{\\prime}w&#94;{\\prime}}\\right)\\\\ &=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}zwz&#94;{\\prime}w&#94;{\\prime}P_{zw}P_{z&#94;{\\prime}w&#94;{\\prime}}\\quad\\left(\\because\\text{expansion}\\right)\\\\ \\mathrm{Var}(X)\\mathrm{Var}(Y) &= \\left(\\sum_{x}\\left(x-\\mu_X\\right)&#94;2\\mathbb{P}(X=x)\\right)\\left(\\sum_{y}\\left(y-\\mu_Y\\right)&#94;2\\mathbb{P}(Y=y)\\right)\\\\ &= \\left(\\sum_{x,y}\\left(x-\\mu_X\\right)&#94;2\\mathbb{P}(X=x,Y=y)\\right)\\left(\\sum_{x,y}\\left(y-\\mu_Y\\right)&#94;2\\mathbb{P}(X=x,Y=y)\\right)\\\\ &= \\left(\\sum_{z,w}z&#94;2P_{x,y}\\right)\\left(\\sum_{z,w}w&#94;2P_{x,y}\\right)\\\\ &=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\left(=\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\right)\\\\ &=\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}+\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}} \\end{aligned} $$ と変形できるので、 $$ \\begin{aligned} \\mathrm{Var}(X)\\mathrm{Var}(Y) - \\mathrm{Cov}\\left(X,Y\\right)&#94;2 &= \\left(\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;2w&#94;{\\prime 2}P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}+\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}z&#94;{\\prime 2}w&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\right) - \\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}zwz&#94;{\\prime}w&#94;{\\prime}P_{zw}P_{z&#94;{\\prime}w&#94;{\\prime}}\\\\ &= \\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}\\left(z&#94;2w&#94;{\\prime2} + z&#94;{\\prime2}w&#94;2 - 2zwz&#94;{\\prime}w&#94;{\\prime}\\right)P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\\\ &=\\frac{1}{2}\\sum_{z,w,z&#94;{\\prime},w&#94;{\\prime}}\\left(zw&#94;{\\prime} - z&#94;{\\prime}w\\right)&#94;2P_{x,y}P_{x&#94;{\\prime},y&#94;{\\prime}}\\\\ &\\geq0\\\\ \\therefore\\mathrm{Var}(X)\\mathrm{Var}(Y) &\\geq \\mathrm{Cov}\\left(X,Y\\right)&#94;2 \\end{aligned} $$ memo 任意の \\(n,m\\) に対して以下が成り立つ時、等号条件が成立（？） $$\\mathbb{P}\\left(X=x_n,Y=y_m\\right) = \\mathbb{P}\\left(X=x_n\\right)\\delta_{nm}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-1.html"},{"title":"Neural Networks","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [19]: hoge = [] In [20]: import numpy as np import matplotlib.pyplot as plt In [21]: hoge . append ( np . zeros ( shape = ( 2 , 3 , 4 ))) In [23]: hoge . append ( np . ones ( shape = ( 2 , 3 , 4 ))) In [27]: np . asarray ( hoge ) . shape Out[27]: (2, 2, 3, 4) ただし、それは最初からわかっていたが、 最適化困難。 それを可能にしたのが Back-propagation というアイデア。 （NNの第二世代） シグモイド関数(sigmoid function) ステップ関数に代わるものとして多用された。 $$ \\begin{aligned} s\\left(a\\right) &= \\frac{1}{1 + \\exp\\left(-a\\right)}\\\\ s&#94;{\\prime}(a) &= s(a)\\left(1 - s(a)\\right) \\end{aligned} $$ In [12]: sigmoid = lambda a : 1 / ( 1 + np . exp ( - a )) sigmoid_diff = lambda a : sigmoid ( a ) * ( 1 - sigmoid ( a )) In [13]: X = np . linspace ( - 10 , 10 , 1000 ) In [18]: fig = plt . figure ( figsize = ( 12 , 4 )) ax = fig . add_subplot ( 1 , 2 , 1 ) ax . plot ( X , sigmoid ( X ), color = \"black\" ) ax . set_title ( \"sigmoid function $\\sigma(a)$\" ), ax . set_xlabel ( \"$a$\" ) ax = fig . add_subplot ( 1 , 2 , 2 ) ax . plot ( X , sigmoid_diff ( X ), color = \"black\" ) ax . set_title ( \"sigmoid function $\\sigma(a)&#94;{\\prime}$\" ), ax . set_xlabel ( \"$a$\" ) plt . show () p.12-3-2 In [ ]: w_ij w_jk x → hoge → z In [ ]: net_j = if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-5.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-5.html"},{"title":"レポート課題5(10/31出題)","text":"bBQ4GbzkjLnIWMfVAhzzJA==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report5.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report5.html"},{"title":"確率と統計(1)基礎概念","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 In [1]: import numpy as np import matplotlib.pyplot as plt 講義概要 確率変数と確率分布 確率分布の性質を表す指標 同時確率 条件付き確率 確率変数と確率分布 用語 意味 確率(probability) 事象の起こりやすさを定量的に示す $0$ から $1$ の値 確率変数(random variable) その変数に関する任意の事象に対して確率が定義されている変数 確率分布(probability distribution) 確率変数に関する各事象に対してその確率を与える関数 離散型(discrete type)確率変数 ある可算集合 $\\mathcal{X}$ の中のいずれかの値をとる確率変数 確率質量関数(probability mass function) $f(x)$ $$f(x)\\geq0,\\quad \\sum_{x\\in\\mathcal{X}}f(x) = 1$$ 連続型(continuous type)確率変数 連続値をとる確率変数 確率密度関数(probability density function) $f(x)$ $$f(x)\\geq0,\\quad\\int_{-\\infty}&#94;{\\infty}f(x)dx=1$$ 累積分布関数(cumulative distribution function) $F(x)$ $$F(x) = P(X\\leq x)=\\int_{-\\infty}&#94;{x}f(u)du\\ \\text{ or } \\sum_{i:i\\leq x}f(i)$$ 確率分布の性質を表す指標 用語 数式 説明 期待値(expectation) $$E(X) = \\sum_xxf(x)\\ \\text{ or }\\int xf(x)dx$$ 確率変数の値の平均（正確には確率による重み付きの平均） 確率変数を代表する値を表す指標 ※ 外れ値(outlier)に敏感 中央値(median) $P(X\\leq x)=1/2$ を満たす $x$ データを大きい順（または小さい順）に並べたときの真ん中の値。 最頻値(mode) $f(x)$ を最大にする $x$ データの中で最も頻度が高い値 分散(variance) $$\\begin{aligned}V(X) &= E\\left\\{(X-E[X])&#94;2\\right\\}\\\\&=E\\left\\{X&#94;2-2E[X]X+(E[X])&#94;2\\right\\}\\\\&=E[X&#94;2]-E\\left[2E[X]X\\right]+(E[X])&#94;2\\\\&=E[X&#94;2]-2E[X]E[X]+(E[X])&#94;2\\\\&=E[X&#94;2]-(E[X])&#94;2\\end{aligned}$$ 確率変数の散らばり具合を表す指標 標準偏差(standard devariation) $\\sqrt{V(X)}$ 分散の平方根 標準化(standardization) $$Z=\\frac{X-E(X)}{\\sqrt{V(X)}}$$ 任意の確率変数 $X$ に対して、期待値 $0$、分散 $1$ の確率変数 $Z$ が定義できる。 歪度(skewness) $$\\alpha_3 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;3\\right\\}}{\\left\\{V(X)\\right\\}&#94;{3/2}}$$ 確率変数の非対称性を表す。 劣度(kurtosis) $$\\beta_4 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;4\\right\\}}{\\left\\{V(X)\\right\\}&#94;{2}}-3$$ 確率分布の尖り具合を表す。 積率(moment) $$\\mu_r = E\\left[X&#94;r\\right]$$ 期待値・分散・歪度・劣度などを表すパラメータ。全ての次数の積率を指定すれば、確率分布を一位に決定することができる。（左は $r$ 次の積率） 積率母関数(moment generating function) $$M_X(t) = E[e&#94;{tX}]=\\begin{cases}\\sum_xe&#94;{tx}f(x)\\\\\\int e&#94;{tx}f(x)dx\\end{cases}\\\\ M_X&#94;{(r)}(0)=\\mu_r$$ 全ての次数の積率を生成する関数。存在しない（無限大に発散する）こともある。 In [2]: def computation_variance ( n = 10000 , mu = 0 , sigma = 1 , seed = None ): X = np . random . RandomState ( seed ) . normal ( loc = mu , scale = sigma , size = n ) EX = sum ( X ) / n EX2 = sum ( X ** 2 ) / n # Calculate variance in 3 ways. var1 = np . var ( X ) var2 = sum (( X - EX ) ** 2 ) / n var3 = EX2 - EX ** 2 print ( \"`np.var(X)` =\" , var1 ) print ( \"E{(X - E[X])&#94;2} =\" , var2 ) print ( \"E[X&#94;2] - (E[X])&#94;2 =\" , var3 ) In [3]: computation_variance ( mu = 100 , seed = 0 ) `np.var(X)` = 0.9752679753477969 E{(X - E[X])&#94;2} = 0.9752679753477979 E[X&#94;2] - (E[X])&#94;2 = 0.9752679752218683 In [4]: computation_variance ( mu = 1e8 , seed = 1 ) `np.var(X)` = 0.9975731614280597 E{(X - E[X])&#94;2} = 0.9975731614281662 E[X&#94;2] - (E[X])&#94;2 = -98.0 ※ 「二乗の平均 - 平均の二乗」は丸め誤差の影響を受けやすい 歪度(skewness) 確率変数の非対称性を表す。 $$\\alpha_3 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;3\\right\\}}{\\left\\{V(X)\\right\\}&#94;{3/2}}$$ In [5]: def plot_skewness ( ax = None , seed = None , n = 100 ): if ax == None : fig , ax = plt . subplots () X = np . random . RandomState ( seed ) . randint ( low = 1 , high = 7 , size = n ) ax . hist ( X , density = True , bins = 6 , color = \"blue\" , align = 'left' ) EX = np . mean ( X ) VX = np . var ( X ) skewness = np . mean (( X - EX ) ** 3 ) / VX ** ( 3 / 2 ) ax . set_title ( f \"skewness = {skewness:.3f} \" ) return ax In [6]: fig = plt . figure ( figsize = ( 12 , 3 )) for i , seed in enumerate ([ 44756 , 96331 , 76432 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plot_skewness ( ax = ax , seed = seed ) plt . show () 劣度(kurtosis) 確率分布の尖り具合を表す。 $$\\beta_4 = \\frac{E\\left\\{\\left[X - E(X)\\right]&#94;4\\right\\}}{\\left\\{V(X)\\right\\}&#94;{2}}-3$$ In [7]: X = np . linspace ( - 5 , 5 , 10000 ) In [8]: f1 = lambda x : 1 / 1250 * ( 5 - abs ( x )) ** 4 f2 = lambda x , mu = 0 , sigma = 1 : 1 / np . sqrt ( 2 * np . pi * sigma ** 2 ) * np . exp ( - ( x - mu ) ** 2 / 2 * sigma ** 2 ) f3 = lambda x : 1 / 4 if abs ( x ) <= 2 else 0 In [9]: def plot_kurtosis ( X , func , ax = None ): if ax == None : fig , ax = plt . subplots () Y = np . array ([ func ( x ) for x in X ]) ax . plot ( X , Y , color = \"red\" ) Y /= sum ( Y ) EX = np . sum ( Y * X ) VX = np . sum ( Y * ( X - EX ) ** 2 ) kurtosis = np . sum ( Y * ( X - EX ) ** 4 ) / VX ** 2 - 3 ax . set_title ( f \"kurtosis = {kurtosis:.3f} \" ) return ax In [10]: fig = plt . figure ( figsize = ( 12 , 3 )) for i , func in enumerate ([ f1 , f2 , f3 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) ax = plot_kurtosis ( X = X , func = func , ax = ax ) ax . set_xlim ( - 5 , 5 ); ax . set_ylim ( 0 , 1 ) plt . show () 同時確率 用語 数式 説明 同時確率(joint probability) 複数の確率変数が関わる確率 同時確率質量関数 $$P(X=x,Y=y) = f(x,y)\\\\f(x,y)\\geq0,\\quad\\sum_{x\\in\\mathcal{X}}\\sum_{y\\in\\mathcal{Y}}f(x,y)=1$$ 離散型の同時確率 同時確率密度関数 $$P(a\\leq X\\leq b,c\\leq Y\\leq d) = \\int_c&#94;d\\int_a&#94;bf(x,y)dxdy\\\\f(x,y)\\geq0,\\quad\\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x,y)dxdy=1$$ 連続型の同時確率 共分散 $X$ と $X&#94;{\\prime}$ の 共分散(covariance) ： $$\\mathrm{Cov}(X,X&#94;{\\prime}) = E\\left[(X-E[X])(X&#94;{\\prime}-E[X&#94;{\\prime}])\\right]$$ $\\mathrm{Cov}(X,X&#94;{\\prime})>0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 同傾向 $\\mathrm{Cov}(X,X&#94;{\\prime})<0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 逆傾向 $\\mathrm{Cov}(X,X&#94;{\\prime})=0$ の時：$X$ と $X&#94;{\\prime}$ の増減は 無関係 共分散は、以下の形でも表されるので、A社の株価を $X$、B社の株価を $X&#94;{\\prime}$ とすると、以下の解釈も可能 $$V(X+X&#94;{\\prime}) = V(X) + V(X&#94;{\\prime}) + 2\\mathrm{Cov}(X,X&#94;{\\prime})$$ $\\mathrm{Cov}(X,X&#94;{\\prime})>0\\Longleftrightarrow V(X+X&#94;{\\prime})>V(X)+V(X&#94;{\\prime})$ なので、A,B両者の株を買うと分散が 拡大 する → 変動リスクが増大し、資産価値は不安定 $0>\\mathrm{Cov}(X,X&#94;{\\prime})\\Longleftrightarrow V(X)+V(X&#94;{\\prime})>V(X+X&#94;{\\prime})$ なので、A,B両者の株を買うと分散が 縮小 する → 変動リスクが抑制され、資産価値は安定 独立性 全ての $(x,y)$ で $p_{X,Y}(x,y) = p_X(x)p_Y(y)$ の時、$X$ と $Y$ は互いに 独立(independent) 2つの確率変数が独立の時、 積の期待値は各々の期待値の積と一致 $$E[XY] = E[X]E[Y]$$ 和の積率母関数は各々の積率母関数の積と一致 $$M_{X+Y}(t) = M_X(t)M_Y(t)$$ ２つの確率変数は無相関 $$\\mathrm{Cov}(X,Y) = 0$$ 2つの確率変数が独立ならば無相関であるが、逆は一般には正しくない。 条件付き確率 ベイズの定理(Bayes' theorem) $$P(X|Y) = \\frac{P(Y|X)P(X)}{P(Y)}$$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-5.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-5.html"},{"title":"生物物理学 第6回","text":"講師： 樋口秀男 エネルギー生産系の仕組み（細胞内小器官） 光関連の現象 細胞・器官 たんぱく質等 眼で見る 視細胞（桿体、錐体細胞） ロドプシン等 光合成 葉緑体 光システム（タンパク質複合体） 蛍の光 発色細胞 ルシフェリン+ルシフェラーゼ クラゲの光 発色細胞 エコーリン、GFP(green fluorescence protein) 日焼け 色素形成細胞（メラノサイト） メラニン（チロシンの重合体） 体内時計 目のメラノプシン発現網膜神経細胞 メラノプシン ATPを作るプロセス 光合成(photosynthesis) は、高等植物や緑藻（青色細菌）が 葉緑体（クロロプラスト） 内で行う、二酸化炭素の固定反応である。 この過程で水が酸素に酸化され、二酸化炭素は還元されて糖になる。 光合成は大きく2つの段階に区別される。 1つは 明反応 と呼ばれ、光のエネルギーを利用して水が酸素に酸化されるとともに、二酸化炭素の還元に必要な \\(\\mathrm{NADPH}_2&#94;+\\) と \\(\\mathrm{ATP}\\) をつくりだす。 もう1つの段階は 暗反応 と呼ばれ、 \\(\\mathrm{NADPH}_2&#94;+\\) と \\(\\mathrm{ATP}\\) を利用して二酸化炭素から種々の糖がつくられる。 クロロプラスト中の大部分のクロロフィルは 光を集めるアンテナ の役割を果たす。吸収された光子のエネルギーはアンテナクロロフィル間を励起エネルギーとして移動し、 アンテナクロロフィル よりも励起エネルギーの 低い 反応中心クロロフィル に集められる。 FRET(Fluorescence resonance energy transfer) $$\\text{Transfer Efficiency at two rates: } E= \\frac{k_T}{k_T+k_F} = \\frac{1}{1 + \\frac{k_F}{k_T}}$$ \\(k_T\\) ：Donor から Acceptor に移動する速度 \\(k_F\\) ：Donor が吸収する速度 Chl(from) Chl(to) 移動効率（移動距離） b(F) a(A) 高 b(F) b(A) 中 a(F) a(A) 中 a(F) b(A) 低 幅 \\(L\\) の中の電子のエネルギー準位： \\(E_n = \\frac{1}{8m}\\left(\\frac{nh}{L&#94;{\\prime}}\\right)&#94;2\\) フェミルの黄金律 時間的に変化しない弱い相互作用（摂動）のある電子系が、あるエネルギー固有状態から別のエネルギー固有状態へ移る際の単位時間あたりの遷移確率は、摂動法（時間で展開）の最低次数として近似計算できる。 遷移速度 \\(k_T\\) は、エネルギー固有状態の単位時間あたりの遷移確率である。 $$\\Psi_{\\mathrm{Da}}\\Psi_{\\mathrm{Ab}}\\underset{k_T}{\\longrightarrow}\\Psi_{\\mathrm{Db}}\\Psi_{\\mathrm{Aa}}$$ Da: Active state of Donor Ab: Ground state of Acceptor 光合成の概要 水を分解して、電子を膜間に入れる。 光を用いて電子の酸化還元電位を上げる。 酸化還元電位を利用してチラコイド外のプロトンを内側に輸送する。 内側のプロトンのケミカルポテンシャルを利用してATPを合成する。 まとめ 共役長が長くなる と吸収波長は長くなり、可視光の利用が可能となる。 分子間距離が近いと エネルギー移動や電子移動 が起こる。電子移動の方向は、酸化還元電位に依存する。 エネルギーを 酸化還元電位 に交換する（逆も） 生物は、 多数のタンパク質が 上記1-3の原理を巧みに利用して、光化学反応（葉緑体内の光合成）や電子伝達（ミトコンドリア内）の機能を行う。 ATP を合成するF1,F0は高効率でATPを合成する。特に、F1は仕事効率が約100%である。 .prompt { /* This is for jupyter blog.*/ min-width: 0; /* This padding is tuned to match the padding on the CodeMirror editor. */ padding: 0em 0.4em 0em 0em; margin: 0px; font-family: monaco; } /*蛍光ペン(pink)*/ .marker-pink { color: #c45a5a; background: linear-gradient(transparent 70%, #ff66ff 60%); font-weight: bold; } /*蛍光ペン(blue) & hover info*/ .marker-info { color: #5C7DC4; background: linear-gradient(transparent 70%, #66FFCC 60%); font-weight: bold; position: relative; cursor: pointer; } .marker-info:hover:before { opacity: 1; z-index: 2; } .marker-info:before { content: attr(aria-label); opacity: 0; position: absolute; top: 30px; right: -90px; font-size: 14px; width: 300px; padding: 10px; color: #fff; background-color: #555; border-radius: 3px; pointer-events: none; } /* 枠囲み */ .frame { border: solid 1.0px #000000; padding: 0.5em 1em; margin: 2em 0; } /* 暗記用 question box */ span .qbox{ display: none; } span.qbox-wrapper:hover .qbox-default{ display: none; } span.qbox-wrapper:hover .qbox{ display: inline; } .qbox-wrapper{ font-weight: bold; padding: 5px 10px; border-radius: 5px; border: solid 2px #000000; margin: 5px } .qbox-wrapper:hover{ text-shadow: 0px 0px 6px rgba(255, 255, 255, 1); -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); transition: all 0.4s ease 0s; } /* 画像吹き出し */ .balloon { display: table; width: 100%; } .balloon_img { display: table-cell; vertical-align: middle; width: 50%; padding-right: 10px; } .balloon_comment { border: #83274e solid 4px; position: relative; background: #fff; padding: 12px; border-radius: 13px; display: block } .balloon_comment::before { content: \"\"; position: absolute; border-right: 23px solid #83274e; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -23px; } .balloon_comment::after { content: \"\"; position: absolute; border-right: 24px solid #fff; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -17px; } if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-6.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-6.html"},{"title":"Introduction","text":"講師： 木立 尚孝 （ 生物データマイニング論 も担当されている方） 計算演習 # リンク 問題 1 Covariance 2 Characteristic function 3 Law of Large Numbers 4 Exponential Distribution 5 Categorical Distribution 6 Multinomial Distribution 7 Positive Definite Symmetric Matrix 8 Multivariate Normal Distribution 9 Kullback-Leibler Divergence 10 Expectation Maximization Algorithm 11 Data Assimilation 12 Order Statistics 13 Sparse Modeling 14 Brownian motion 15 Neural Network プログラミング演習 配列モチーフ探索 最適行動列アルゴリズム Gene Network Inference Itemset mining algorithm","tags":"情報基礎実験(木立)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(木立)-0.html"},{"title":"頻度パターンマイニング","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 参考資料： 頻出パターン発見アルゴリズム入門 -アイテム集合からグラフまで- Data Mining A formal study of efficient methods for extracting interesting rules and patterns from massive data. Frequent itemset mining. Closed pattern mining. Structured data mining. Itemset Mining Frequent Itemset Mining Closed Itemset Mining Closure Extension LCM Itemset Mining Frequent Itemset Mining Finding all \"frequent\" sets of elements(items) appearing $\\sigma$ times or more in a database. Definitions Database A set $\\Sigma = \\{1,\\ldots,n\\}$ of items(elements). Tramsaction database A set $T=\\{t_1,\\ldots,t_m\\}$ of subsets of $\\Sigma$ Each subset $t\\subseteq\\Sigma$ is called a transaction Frequent sets Itemset $X$ appears in transaction t: $X\\subseteq t$ Occurrence of $X$ in database $T$: $$\\mathrm{Occ}(X,T) = \\left\\{t\\in T: X\\subseteq t\\right\\}$$ Frequency of $X$: $\\mathrm{Fr}(X,T) = |\\mathrm{Occ}(X,T)|$ Minimum support (minsup): $0\\leq\\sigma\\leq|T|$ $X$ is frequent in $T$ if $\\mathrm{Fr}(X,T)\\geq\\sigma$ Market Basket Data Popular application of itemset mining. Business and Market data analysis. ※ Visit \"The Instacart Online Grocery Shopping Dataset 2017\" and Download \"instacart_2017_05_01\" Folder. In [1]: ! tree instacart_2017_05_01 instacart_2017_05_01 ├── aisles.csv ├── departments.csv ├── order_products__prior.csv ├── order_products__train.csv ├── orders.csv └── products.csv 0 directories, 6 files In [2]: import numpy as np import pandas as pd products.csv In [3]: df_products = pd . read_csv ( \"./instacart_2017_05_01/products.csv\" ) df_products . head ( 3 ) Out[3]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } product_id product_name aisle_id department_id 0 1 Chocolate Sandwich Cookies 61 19 1 2 All-Seasons Salt 104 13 2 3 Robust Golden Unsweetened Oolong Tea 94 7 In [4]: print ( f \"`products.csv` data num: {len(df_products)}\" ) `products.csv` data num: 49688 In [5]: id2name = dict ( zip ( df_products . product_id , df_products . product_name )) order_products__train.csv In [6]: df_order_products = pd . read_csv ( \"./instacart_2017_05_01/order_products__train.csv\" ) df_order_products . head ( 3 ) Out[6]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } order_id product_id add_to_cart_order reordered 0 1 49302 1 1 1 1 11109 2 1 2 1 10246 3 0 In [7]: N_transactions_total = len ( df_order_products . groupby ( \"order_id\" )) print ( f \"Total number of transactions: {N_transactions_total} \" ) Total number of transactions: 131209 Extract Only N products In [8]: N = 10 In [9]: extracted_ids = df_order_products . groupby ( \"product_id\" ) . size () . reset_index () . sort_values ( by = 0 , ascending = False ) . product_id [: N ] . values In [10]: # Only focus on N products. df_order_products_extracted = df_order_products [ df_order_products . product_id . apply ( lambda x : x in extracted_ids )] In [11]: N_transactions_extracted = len ( df_order_products_extracted . groupby ( \"order_id\" )) print ( f \"Transactions: {N_transactions_extracted} / {N_transactions_total} \" ) Transactions: 59887/131209 In [12]: for i , extracted_id in enumerate ( extracted_ids ): print ( f \"No.{i+1:>0{len(str(N))}}: {id2name[extracted_id]} \" ) No.01: Banana No.02: Bag of Organic Bananas No.03: Organic Strawberries No.04: Organic Baby Spinach No.05: Large Lemon No.06: Organic Avocado No.07: Organic Hass Avocado No.08: Strawberries No.09: Limes No.10: Organic Raspberries In [13]: df_product_id_OneHot = pd . get_dummies ( df_order_products_extracted . product_id ) In [14]: df_order_OneHot = pd . concat ([ df_order_products_extracted . order_id , df_product_id_OneHot ], axis = 1 ) In [15]: df = df_order_OneHot . groupby ( \"order_id\" ) . sum () . reset_index () In [16]: df . head ( 3 ) Out[16]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } order_id 13176 16797 21137 21903 24852 26209 27966 47209 47626 47766 0 1 1 0 0 0 0 0 0 1 0 0 1 96 0 0 0 0 0 0 1 0 0 0 2 98 1 0 0 0 0 0 1 0 0 0 In [17]: database = np . array ( df [ df . columns [ 1 :]]) In [18]: database Out[18]: array([[1, 0, 0, ..., 1, 0, 0], [0, 0, 0, ..., 0, 0, 0], [1, 0, 0, ..., 0, 0, 0], ..., [0, 0, 1, ..., 0, 0, 0], [0, 0, 0, ..., 0, 0, 0], [0, 0, 1, ..., 0, 0, 0]], dtype=uint8) In [19]: N , M = database . shape In [20]: print ( f \"n_samples: {N} \" ) print ( f \"n_features: {M} \" ) n_samples: 59887 n_features: 10 In [21]: from kerasy.search.itemset import FrequentSet In [22]: model = FrequentSet ( threshold = 100 ) In [23]: model . fit ( database ) In [24]: # Frequent Itemset. (frq >= threshold) model . all Out[24]: [None, array([0]), array([0, 1]), array([0, 1, 3]), array([0, 2]), array([0, 2, 3]), array([0, 2, 3, 6]), array([0, 2, 3, 7]), array([0, 2, 5]), array([0, 2, 6]), array([0, 2, 6, 7]), array([0, 2, 7]), array([0, 2, 8]), array([0, 2, 9]), array([0, 3]), array([0, 3, 5]), array([0, 3, 6]), array([0, 3, 6, 7]), array([0, 3, 7]), array([0, 3, 8]), array([0, 3, 9]), array([0, 5]), array([0, 5, 6]), array([0, 5, 7]), array([0, 5, 8]), array([0, 5, 9]), array([0, 6]), array([0, 6, 7]), array([0, 6, 8]), array([0, 6, 9]), array([0, 7]), array([0, 7, 8]), array([0, 8]), array([0, 8, 9]), array([0, 9]), array([1]), array([1, 3]), array([1, 3, 4]), array([1, 3, 9]), array([1, 4]), array([1, 4, 5]), array([1, 4, 8]), array([1, 4, 9]), array([1, 5]), array([1, 5, 8]), array([1, 6]), array([1, 7]), array([1, 8]), array([1, 8, 9]), array([1, 9]), array([2]), array([2, 3]), array([2, 3, 4]), array([2, 3, 5]), array([2, 3, 6]), array([2, 3, 7]), array([2, 3, 8]), array([2, 3, 9]), array([2, 4]), array([2, 4, 5]), array([2, 4, 6]), array([2, 4, 7]), array([2, 4, 8]), array([2, 4, 9]), array([2, 5]), array([2, 5, 6]), array([2, 5, 7]), array([2, 5, 8]), array([2, 5, 9]), array([2, 6]), array([2, 6, 7]), array([2, 6, 8]), array([2, 6, 9]), array([2, 7]), array([2, 7, 8]), array([2, 8]), array([2, 8, 9]), array([2, 9]), array([3]), array([3, 4]), array([3, 4, 5]), array([3, 4, 5, 8]), array([3, 4, 6]), array([3, 4, 7]), array([3, 4, 8]), array([3, 4, 8, 9]), array([3, 4, 9]), array([3, 5]), array([3, 5, 7]), array([3, 5, 8]), array([3, 5, 8, 9]), array([3, 5, 9]), array([3, 6]), array([3, 6, 7]), array([3, 6, 8]), array([3, 6, 9]), array([3, 7]), array([3, 7, 8]), array([3, 8]), array([3, 8, 9]), array([3, 9]), array([4]), array([4, 5]), array([4, 5, 7]), array([4, 5, 8]), array([4, 5, 8, 9]), array([4, 5, 9]), array([4, 6]), array([4, 6, 8]), array([4, 6, 9]), array([4, 7]), array([4, 7, 8]), array([4, 8]), array([4, 8, 9]), array([4, 9]), array([5]), array([5, 6]), array([5, 6, 7]), array([5, 6, 8]), array([5, 7]), array([5, 7, 8]), array([5, 8]), array([5, 8, 9]), array([5, 9]), array([6]), array([6, 7]), array([6, 8]), array([6, 8, 9]), array([6, 9]), array([7]), array([7, 8]), array([8]), array([8, 9]), array([9])] Association Rule Mining Confidence : $\\mathrm{Supp}(A\\text{ and }B)/\\mathrm{Supp}(A)$ (Probability of $B$, Given $A$) What item is likely to be bought when $A$ is bought. Search: large support, confidence large Post-processing of itemset mining Summary Itemset mining is the simplest of all mining algorithms. Need to maintain occurrence of each pattern in database. Tree by lexicographical order is (implicitly) used. Closed Itemset Mining [Problem] in Frequent Pattern Mining Huge Number of frequent itemsets Hard to analyze Most of them are similar [Solution] Closed Pattern Mining Find only closed patterns Observation : Most frequent itemset $X$ can be extended without changing occurrence by adding new elements. definition : An itemset $X$ is a \"closed set\" if and only if there is no proper superset of $X$ with the same frequency (thus the same occurrence set). A closed itemset is the maximal set among all itemsets with the same occurrences. Equivalence class $[X] =\\left\\{Y | \\mathrm{Occ}(X)=\\mathrm{Occ}(Y)\\right\\}$ Implementation. Brute-force: Stupid Baseline ALGORITHM: Bruteforcel First, generate all frequent itemsets. Check them one by one via maximality test Finally, extract all closed sets Maximality test for each candidate frequent set $X$ Add some element $e$ in $\\Sigma$ to $X$ If $\\mathrm{Freq}(X U \\{e\\})$ is properly less than $\\mathrm{Freq}(X)$ then reject $X$. ※ Number of patterns usually exponential to input size, so Brute-force is exponential delay w.r.t. pattern size. Reverse Search A general mathematical framework to design enumeration algorithms. Can be used to prove the correctness of the algorithm. Popular in computational geometry. Data mining algorithms can be explained in remarkable simplicity. How to do reverse Search? Native Backtracking → Duplication Duplication chack by Marking → Exponential Memory. Reduction Map : Mapping from a children to the parent. LCM(Linear Time Closed Sets Miner) Key Algorithm: Prefix Preserving Closure Extension = Children generation from the reduction map. 飽和集合列挙アルゴリズムを用いた大規模データベースからのルール発見手法 Python Implementation: I'm doing now XD Summary Closure Extension: Jump from closed set to closed set. LCM: Linear Delay. Very fast in practice, too (Winner of FIMI'04(Frequent Itemset Mining Implementation Workshop)). Relation to clique enumeration. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-5.html"},{"title":"機械学習概論","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 教師付き学習(Supervised learning) 大量の教師データがあれば、DNNですごい性能を出せるので、今の研究の主流は以下。 transfer learning (転移学習) few-shot learning (一枚だけで汎化性能を得る。) zero-shot learning (文字の情報を用いて画像の識別を行う。) メタ学習 (どうやって学習すれば良いかを学ぶ。) Nearest Neighbor法 決定木(decision tree) Support Vector Machine(SVM) アンサンブル学習 Neural Network Nearest Neighbor法 In [2]: N = 150 ; K = 3 In [3]: data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 1 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [4]: cls = np . concatenate ([ np . full ( shape = int ( N / 3 ), fill_value = 0 ), np . full ( shape = int ( N / 3 ), fill_value = 1 ), np . full ( shape = int ( N / 3 ), fill_value = 2 ), ]) In [5]: xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [6]: # Nearest Neighbor Zs = np . asarray ([ cls [ np . argmin ( np . sum ( np . square ( xy - data ), axis = 1 ))] for xy in XYs ], dtype = int ) . reshape ( Xs . shape ) In [7]: plt . figure ( figsize = ( 8 , 6 )) plt . scatter ( x , y , c = cls , s = 50 ) plt . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) plt . title ( \"Nearest Neighbor\" ), plt . xlim ( xmin , xmax ), plt . ylim ( ymin , ymax ) plt . xticks ([]), plt . yticks ([]) plt . show () 決定木(decision tree) $M$ 個のクラスに分割したとして、 $$\\text{Information gain} = \\text{Entropy}(S) - \\left\\{\\text{Entropy}(S_1) + \\cdots + \\text{Entropy}(S_M)\\right\\}$$ が最大になるように条件を設定する。 In [8]: from kerasy.ML.tree import DecisionTreeClassifier In [9]: N = 150 ; K = 3 In [10]: data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 1 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [11]: cls = np . concatenate ([ np . full ( shape = int ( N / 3 ), fill_value = 0 ), np . full ( shape = int ( N / 3 ), fill_value = 1 ), np . full ( shape = int ( N / 3 ), fill_value = 2 ), ]) In [12]: xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [13]: model = DecisionTreeClassifier ( criterion = \"gini\" , max_depth = 3 , random_state = 0 ) model . fit ( data , cls ) predictions = model . predict ( data ) In [14]: # Decision Tree Zs = model . predict ( XYs ) . reshape ( Xs . shape ) In [15]: fig = plt . figure ( figsize = ( 18 , 4 )) for i , seed in enumerate ([ 0 , 1 , 5 ]): ax = fig . add_subplot ( 1 , 3 , i + 1 ) model = DecisionTreeClassifier ( criterion = \"gini\" , max_depth = 3 , random_state = seed ) model . fit ( data , cls ) predictions = model . predict ( data ) Zs = model . predict ( XYs ) . reshape ( Xs . shape ) ax . scatter ( x , y , c = predictions , s = 50 ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_title ( f \"Decision Tree seed= {seed} \" ), ax . set_xlim ( xmin , xmax ), ax . set_ylim ( ymin , ymax ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () Support Vector Machine(SVM) $$f(\\mathbf{x}) = \\mathbf{w}\\cdot\\mathbf{x} + \\mathbf{b} = \\mathbf{0}$$ $\\|\\mathbf{w}\\|$ を決定するためには、黄色の線上にある点(support vector)のみ寄与。SVMの重要なところは、通常 $$\\mathrm{Error}_{\\text{世の中全体}}>\\mathrm{Error}_{\\text{見たことのある世界}}$$ であるが、発明者 Vapnic が $$\\mathrm{Error}_{\\text{世の中全体}}\\leq\\mathrm{Error}_{\\text{見たことのある世界}} + \\alpha$$ を証明してしまった。なお、$\\alpha$ も $\\|\\mathbf{w}\\|$ の最小化で最小化できるため、$\\|\\mathbf{w}\\|$ の最小化をひたすら頑張るだけで良い。 ※ 実装は ここ アンサンブル学習 名前 説明 強学習器 bagging トレーニングデータをランダムにサンプリングして学習器 $f&#94;b(\\mathbf{x}),(b=1,2,\\ldots,B)$ を作る。 $$f(\\mathbf{x}) = \\frac{1}{B}\\sum_b&#94;Bf&#94;b(\\mathbf{x})$$ Random Forest (RF) 決定木 $f&#94;r(\\mathbf{x}),(r=1,2,\\ldots,R)$ をランダムに作る。木がたくさんあるので森(forest)になる。 $$f(\\mathbf{x}) = \\frac{1}{R}\\sum_r&#94;Rf&#94;r(\\mathbf{x})$$ boosting 弱学習器 $f&#94;t(\\mathbf{x})$ の精度に応じた重み付き多数決を行う。なお、$\\alpha$ の決め方はadaboostやXGboostなど様々ある。 $$f(\\mathbf{x}) = \\frac{1}{T}\\sum_t&#94;T\\alpha&#94;tf&#94;t(\\mathbf{x})$$ Neural Network パーセプトロン $\\mathbf{w}$ を法線と考えると、超平面のあっちとこっちを判定しているだけ＝SVMと同じ。 perceptronの学習アルゴリズムは、下記の流れで収束することが知られている。 重み（法線）ベクトルをランダムに設定 2クラス $0,1$ があったとして、training dataから順に取り出して、$y$ を出力してみる（平面のどちら側か） 合っていたら何もしない。間違っていたら $$ \\begin{cases} \\mathbf{w}\\longleftarrow\\mathbf{w} +\\rho \\mathbf{x} & (\\text{クラス1を0と誤判定した時})\\\\ \\mathbf{w}\\longleftarrow\\mathbf{w} -\\rho \\mathbf{x} & (\\text{クラス0を1と誤判定した時}) \\end{cases}$$ 2,3を全てのtraining dataに対して行う。 全てのtraining dataに対して正解が規定回数に達したら終了。それ以外の場合、2に戻る。 # Pythonでプログラム化すると以下。 while True : n_true = 0 for x , c in zip ( data , cls ): if c == 1 and sum ( w * x ) < 0 : w += rho * x elif c == 0 and sum ( w * x ) >= 0 : w -= rho * x else : n_true += 1 if n_true > N * true_rate : break In [16]: n_cls0 = 30 ; n_cls1 = 40 N = n_cls0 + n_cls1 In [17]: w = np . random . RandomState ( 0 ) . uniform ( size = 2 ) # Initialization. rho = 1e-3 # step size. true_rate = 0.9 In [18]: # train_x data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 2 , 4 ], cov = np . eye ( 2 ), size = n_cls0 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 1 ], cov = np . eye ( 2 ), size = n_cls1 ), ]) X1 , X2 = data . T # train_t cls = np . concatenate ([ np . zeros ( shape = ( n_cls0 ), dtype = int ), np . ones ( shape = ( n_cls1 ), dtype = int ) ]) In [19]: while True : n_true = 0 for x , c in zip ( data , cls ): if c == 1 and sum ( w * x ) < 0 : w += rho * x elif c == 0 and sum ( w * x ) >= 0 : w -= rho * x else : n_true += 1 if n_true > N * true_rate : break In [20]: X = np . linspace ( min ( X1 ), max ( X2 ), 1000 ) Y = ( - w [ 0 ] / w [ 1 ]) * X In [21]: plt . scatter ( X1 , X2 , c = cls ) plt . plot ( X , Y , color = \"red\" ) plt . xlabel ( \"$x_1$\" , fontsize = 18 ), plt . ylabel ( \"$x_2$\" , fontsize = 18 ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-4.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-4.html"},{"title":"生物統計論 第5回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section5.1 Bayesian Model Comparison Overfitting In [2]: N = 15 Ms = [ 2 , 4 , 8 , 16 ] seed = 0 In [3]: # Training data. x = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = N ) Noise = np . random . RandomState ( seed ) . normal ( loc = 0 , scale = 0.1 , size = N ) t = np . sin ( 2 * np . pi * x ) + Noise In [4]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Varying Component Number In [5]: from kerasy.ML.MixedDistribution import MixedGaussian from kerasy.utils.data_generator import generateMultivariateNormal In [6]: N = 200 cls = 6 seed = 123 In [7]: data , means = generateMultivariateNormal ( cls = cls , N = N , scale = 8e-3 , same = False , seed = seed ) x , y = data . T mux , muy = means . T In [8]: # Background Color xmin , ymin = np . min ( data , axis = 0 ); xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [9]: Nfig = cls col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col fig = plt . figure ( figsize = ( 6 * col , 4 * row )) Likelihoods = [] for i , K in enumerate ( range ( 1 , cls + 1 )): ax = fig . add_subplot ( row , col , i + 1 ) model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data , span = 20 ) Z = model . predict ( XYs ) idx = np . argmax ( model . predict ( data ), axis = 1 ) Zs = np . sum ( Z , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. likelihood = np . sum ( Z ) ax . scatter ( x , y , c = idx ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( xmin , xmax ) ax . set_ylim ( ymin , ymax ) ax . set_title ( f \"K= {K} , {np.sum(Z):.1f}\" ) Likelihoods . append ( likelihood ) plt . tight_layout () plt . show () In [10]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . scatter ( x , y , label = \"data\" ) axL . scatter ( mux , muy , label = \"mean\" , marker = \"*\" , color = \"red\" , s = 150 ) axL . set_title ( \"Training Data.\" ) axL . legend () axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( np . arange ( cls ) + 1 , Likelihoods ) axR . scatter ( np . arange ( cls ) + 1 , Likelihoods ) axR . set_xlabel ( \"num comp\" ) axR . set_ylabel ( \"likelihoods\" ) axR . set_title ( \"Log likelihood vs num comp\" , fontsize = 18 ) plt . tight_layout () plt . show () Cross Validation ※ Not Bayesian estimate the skill of a machine learning model on unseen data. use a limited sample in order to estimate how the model is expected to perform in general when used to make predictions on data not used during the training of the model. In [11]: n_fold = 5 size = N // n_fold Kmax = 30 In [12]: Likelihoods = [] CrossValidationLikelihoods = [] for i , K in enumerate ( range ( 1 , Kmax + 1 )): H = 0 for h in range ( n_fold ): mask = np . ones ( shape = N , dtype = bool ) mask [ h * size :( h + 1 ) * size ] = False model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data [ mask ], span = 20 ) Z = model . predict ( data [ np . logical_not ( mask )]) H += np . sum ( Z ) model = MixedGaussian ( K = K , random_state = seed ) model . fit ( data , span = 20 ) Z = model . predict ( data ) Likelihoods . append ( np . sum ( Z )) CrossValidationLikelihoods . append ( H ) In [13]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . plot ( np . arange ( Kmax ) + 1 , CrossValidationLikelihoods ) axL . scatter ( np . arange ( Kmax ) + 1 , CrossValidationLikelihoods ) axL . set_xlabel ( \"num comp\" ), axL . set_ylabel ( \"Cross Validation likelihoods\" ), axL . set_title ( \"Cross Validation Log likelihood vs num comp\" , fontsize = 18 ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( np . arange ( Kmax ) + 1 , Likelihoods ) axR . scatter ( np . arange ( Kmax ) + 1 , Likelihoods ) axR . set_xlabel ( \"num comp\" ), axR . set_ylabel ( \"likelihoods\" ), axR . set_title ( \"Log likelihood vs num comp\" , fontsize = 18 ) plt . tight_layout () plt . show () Cross Entropy of Prediction ※ Not Bayesian empirical distribution $D = \\left\\{\\mathbf{x}&#94;{(h)}|h=1,\\ldots,n\\right\\}$ $x\\sim\\mathrm{Emp}(D)$ $f_X(\\mathbf{X}) = \\frac{1}{n}\\sum_{h=1}&#94;n\\delta\\left(\\mathbf{x}-\\mathbf{x}&#94;{(h)}\\right)$ $\\mathbb{E}\\left(g(\\mathbf{x})\\right) = \\frac{1}{n}\\sum_{h=1}&#94;n\\int d\\mathbf{x}g(\\mathbf{x})\\delta\\left(\\mathbf{x}-\\mathbf{x}&#94;{(h)}\\right) = \\frac{1}{n}\\sum_{h=1}&#94;ng\\left(\\mathbf{x}&#94;{(h)}\\right)$ In [14]: seed = 0 N = 1000 In [15]: data = np . random . RandomState ( seed ) . normal ( size = N ) In [16]: Emp = dict ( zip ( data , np . zeros ( N ))) for x in data : Emp [ x ] += 1 / N In [17]: for X , Y in sorted ( Emp . items ()): plt . plot (( X , X ),( 0 , Y ), color = \"black\" , alpha = 0.1 ) plt . title ( \"Empirical distribution (Normal)\" ) plt . xlabel ( \"x\" ) plt . show () We can assume Empirical distribution as a true distribution . Cross Entropy $$ \\begin{aligned} H(D,\\boldsymbol{\\theta}) &= \\text{Cross Entropy between }f_{\\text{Emp}(D)} \\text{ and }f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)\\\\ &= \\mathbb{E}_{\\text{Emp}(D)}\\left(-\\log f\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right)\\right)\\\\ &= -\\int f_{\\text{Emp}(D)}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &= -\\frac{1}{n}\\sum_{h=1}&#94;n\\log f\\left(\\mathbf{x}&#94;{(h)}|\\boldsymbol{\\theta}\\right)\\\\ &= -\\bar{l}&#94;{(n)}\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right) \\end{aligned} $$ We can also say that: $$ \\begin{aligned} H(D,\\boldsymbol{\\theta}) &= -\\int f_{\\text{Emp}}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &\\Rightarrow \\int f_{\\text{Emp}}(\\mathbf{x})\\log f_{\\text{Emp}}(\\mathbf{x})d\\mathbf{x} -\\int f_{\\text{Emp}}(\\mathbf{x})\\log f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)d\\mathbf{x}\\\\ &= -\\int f_{\\text{Emp}}(\\mathbf{x})\\log\\left\\{\\frac{f_{\\text{Emp}}(\\mathbf{x})}{f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)}\\right\\}d\\mathbf{x}\\\\ &= \\mathrm{KL}\\left(f_{\\text{Emp}}\\|f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right)\\right)\\\\ &= \\text{Kullback-Leibler divergence between}f_{\\text{Emp}(D)} \\text{ and }f\\left(\\mathbf{x}|\\boldsymbol{\\theta}\\right) \\end{aligned} $$ Evidence Approximation ※ Yes Bayesian In a fully Bayesian treatment of the linear basis function model, we would introduce prior distributions over the hyperparameters $\\alpha$, and $\\beta$. $$ \\begin{aligned} p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x},\\alpha,\\beta) &= \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)d\\mathbf{w}& (3.57)\\\\ &\\Rightarrow \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)p(\\alpha,\\beta|\\mathbf{t},\\mathbf{X})d\\mathbf{w}d\\alpha d\\beta& (3.74) \\end{aligned} $$ Marginalize with respect to these hyperparameters as well as with respect to the parameters $\\mathbf{w}$ to make predictions. Complete marginalization over all of these variables is analytically intractable. We will maximize $(3.74)$ in line with the framework of empirical Bayes (or type 2 maximum likelihood , generalized maximum likelihood , evidence approximation ) Obtain the marginal likelihoo function by first integrating over the parameters $\\mathbf{w}$ $$p(\\mathbf{t}|\\alpha,\\beta) = \\int p(\\mathbf{t}|\\mathbf{w},\\mathbf{X},\\beta)p(\\mathbf{w}|\\alpha)d\\mathbf{w}\\qquad (3.77)$$ Maximize $p(\\mathbf{t}|\\alpha,\\beta)$ with respect to $\\alpha$ and $\\beta$. In [18]: from kerasy.utils.preprocessing import PolynomialBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian from kerasy.ML.linear import EvidenceApproxBayesianRegression In [19]: N = 20 Ms = np . arange ( 10 ) xmin = 0 ; xmax = 1 seed = 0 In [20]: x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 0.15 , seed = seed ) y_train += 1 + y_noise In [21]: alpha = 100 beta = 100 In [22]: evidences = [] history = [] for M in Ms : phi = PolynomialBaseTransformer ( M = M ) x_train_features = phi . transform ( x_train ) model = EvidenceApproxBayesianRegression ( alpha = alpha , beta = beta , iter_max = 10000 ) model . fit ( x_train_features , y_train ) evidences . append ( model . evidence ( x_train_features , y_train )) history . append ( model ) best_M = np . argmax ( evidences [ 1 :]) + 1 best_model = history [ best_M ] In [23]: x_test = np . linspace ( xmin , xmax , 1000 ) phi = PolynomialBaseTransformer ( M = best_M ) x_test_features = phi . transform ( x_test ) y_test = 1 + np . sin ( 2 * np . pi * x_test ) y_pred , y_std = best_model . predict ( x_test_features ) In [24]: fig = plt . figure ( figsize = ( 12 , 4 )) axEVI = fig . add_subplot ( 1 , 2 , 1 ) axEVI . plot ( Ms , evidences ) axEVI . scatter ( Ms , evidences ) axEVI . set_title ( \"The relationship between 'model evidence' and $M$\" ), axEVI . set_xlabel ( \"$M$\" ), axEVI . set_ylabel ( \"$\\log({model\\ evidence})$\" , fontsize = 16 ) axBest = fig . add_subplot ( 1 , 2 , 2 ) axBest . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) axBest . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) axBest . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) axBest . scatter ( x_train , y_train , s = 50 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) axBest . set_ylim ( - 0.5 , 2.5 ), axBest . legend (), axBest . set_title ( f \"Bayesian Linear Regression (M= {best_M} )\" ) plt . tight_layout () plt . show () In [25]: print ( \"[Best Parameter]\" ) print ( f \"M = {best_M} \" ) print ( f \"alpha = {best_model.alpha} \" ) print ( f \"beta = {best_model.beta} \" ) [Best Parameter] M = 3 alpha = 0.0025750535934692723 beta = 56.07833727501231 Section5.2 Markov Process Biological Diversity Single Origin of Life \"Nothing in Biology Makes Sense Except in the Light of Evolution\" C.T. Dobzhansky Stochastic Transcription (Stochasticity vs Regulation) Stochasticity in Development Stochastic Process Mathematical description of stochastic behaviors. data: $\\left\\{\\mathbf{X}_t|t=1,\\ldots,n\\right\\}$ Probability: $\\mathbb{P}\\left(\\mathbf{X}_{t_m} = \\mathbf{x}_{t_m},\\ldots,\\mathbf{X}_{t_2} = \\mathbf{x}_{t_2},\\mathbf{X}_{t_1} = \\mathbf{x}_{t_1}\\right)$ $\\omega$ is one of the random paths. $\\mathbf{X}_t$ is a map indicats which state random paths $\\omega$ is in at time $t$ Events $E$ is a constraint on the value of $\\mathbf{X}_t$ at some times. $P(E)$ is the probability if the random paths satisfy the constraint $E$. markov Process $$\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t|\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right) = \\mathbb{P}\\left(\\mathbf{X}_t=\\mathbf{x}_t|\\mathbf{X}_{t-1}=\\mathbf{x_{t-1}}\\right)$$ Decomposition of Joint Distribution $$ \\begin{aligned} &\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t,\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &=\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &=\\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1} | \\mathbf{X}_{t-2} = \\mathbf{x}_{t-2},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_{t-2} = \\mathbf{x}_{t-2},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\\\ &= \\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1},\\ldots,\\mathbf{X}_0 = \\mathbf{x}_0\\right)\\times \\cdots \\times\\mathbb{P}\\left(\\mathbf{X}_2=\\mathbf{x}_2|\\mathbf{X}_1=\\mathbf{x}_1,\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times \\mathbb{P}\\left(\\mathbf{X}_1=\\mathbf{x}_1|\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_0=\\mathbf{x}_0\\right)\\\\ &= \\mathbb{P}\\left(\\mathbf{X}_t = \\mathbf{x}_t | \\mathbf{X}_{t-1} = \\mathbf{x}_{t-1}\\right) \\times \\mathbb{P}\\left(\\mathbf{X}_{t-1} = \\mathbf{x}_{t-1} | \\mathbf{X}_{t-2} = \\mathbf{x}_{t-2}\\right)\\times \\cdots\\times\\mathbb{P}\\left(\\mathbf{X}_1=\\mathbf{x}_1|\\mathbf{X}_0=\\mathbf{x}_0\\right)\\times\\mathbb{P}\\left(\\mathbf{X}_0=\\mathbf{x}_0\\right)\\quad\\left(\\because \\text{Markov Process}\\right) \\end{aligned} $$ Transition Matrix (Assume Time Independence ): $$P = \\left\\{P_{ij}\\right\\} = \\left\\{\\mathbb{P}\\left(\\mathbf{X}_t=i|\\mathbf{X}_{t-1}=j\\right)\\right\\},\\quad P_{ij}\\geq0,\\sum_i P_{ij}=1$$ Computing transition probability Birth and Death process $$ P= \\left(\\begin{matrix}1-\\lambda_0&\\mu_1&0&0\\\\\\lambda_0&1-\\lambda_1-\\mu_1&\\mu_2&0\\\\0&\\lambda_1&1-\\lambda_2-\\mu_2&\\mu_3\\\\0&0&\\lambda_2&1-\\mu_3\\end{matrix}\\right) $$ $P = U\\Lambda U&#94;{-1}$: Eigen decomposition $P&#94;n = U\\Lambda&#94;n U&#94;{-1}$ In [26]: def makeRandomP ( N , seed = 123 ): lambdas = np . r_ [ np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 / N , size = N - 1 ), np . zeros ( shape = 1 )] mus = np . r_ [ np . zeros ( shape = 1 ), np . random . RandomState ( seed + 1 ) . uniform ( low = 0 , high = 1 / N , size = N - 1 )] P = np . zeros ( shape = ( N , N )) for i in range ( N ): P [ i , - 1 + i ] = mus [ i ]; P [ i , i ] = 1 - mus [ i ] - lambdas [ i ]; P [ i , 1 + i if 1 + i < N else 1 + i - N ] = lambdas [ i ] return P In [27]: def LongTimeBehaviors ( P , even = True ): inf = 50 if even else 51 eigenvals , eigenvecs = np . linalg . eig ( P ) Lambda = np . diag ( eigenvals ) eigenvecs_inv = np . linalg . inv ( eigenvecs ) Pn = np . dot ( eigenvecs , np . dot ( Lambda ** inf , eigenvecs_inv )) Pn = np . where ( Pn < 1e-5 , 0 , Pn ) return Pn example Periodic In [28]: P = np . array ([ [ 0 , 1 , 0 ], [ 1 / 2 , 0 , 1 / 2 ], [ 0 , 1 , 0 ] ]) In [29]: print ( f \"P&#94;2n: \\n {LongTimeBehaviors(P, even=True)} \\n \" ) print ( f \"P&#94;2n+1: \\n {LongTimeBehaviors(P, even=False)}\" ) P&#94;2n: [[0.5 0. 0.5] [0. 1. 0. ] [0.5 0. 0.5]] P&#94;2n+1: [[0. 1. 0. ] [0.5 0. 0.5] [0. 1. 0. ]] Reducible In [30]: P = np . array ([ [ 1 / 3 , 3 / 4 , 0 , 0 ], [ 2 / 3 , 1 / 4 , 0 , 0 ], [ 0 , 0 , 1 / 3 , 3 / 4 ], [ 0 , 0 , 2 / 3 , 1 / 4 ] ]) In [31]: LongTimeBehaviors ( P ) Out[31]: array([[0.52941176, 0.52941176, 0. , 0. ], [0.47058824, 0.47058824, 0. , 0. ], [0. , 0. , 0.52941176, 0.52941176], [0. , 0. , 0.47058824, 0.47058824]]) Absorbing In [32]: P = np . array ([ [ 1 , 1 / 2 , 0 , 0 ], [ 0 , 0 , 1 / 2 , 0 ], [ 0 , 1 / 2 , 0 , 0 ], [ 0 , 0 , 1 / 2 , 1 ] ]) In [33]: LongTimeBehaviors ( P ) Out[33]: array([[1. , 0.66666667, 0.33333333, 0. ], [0. , 0. , 0. , 0. ], [0. , 0. , 0. , 0. ], [0. , 0.33333333, 0.66666667, 1. ]]) Irreducible, Aperiodic In [34]: P = np . array ([ [ 2 / 3 , 1 / 12 , 0 ], [ 1 / 3 , 5 / 8 , 1 / 8 ], [ 0 , 7 / 24 , 7 / 8 ], ]) In [35]: LongTimeBehaviors ( P ) Out[35]: array([[0.06976762, 0.06976748, 0.06976741], [0.27906992, 0.2790698 , 0.27906974], [0.65116246, 0.65116272, 0.65116286]]) In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-5.html"},{"title":"レポート課題4(10/24出題)","text":"JvpW/SdS1tG/jC9R0E4StA==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report4.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report4.html"},{"title":"探索","text":"講師： 本多 淳也 参考書： エージェントアプローチ人工知能 第2版 参考書： イラストで学ぶ 人工知能概論 講義概要 状態空間 15パズル 迷路 コスト無しグラフの探索 コスト付きグラフの探索 ゲーム木の探索 状態空間 ありうる局面の１つ１つを 状態 と言う。 状態全体からなる集合を 状態空間 と言う。 目的： 初期状態から出発して、許される 状態遷移 を繰り返し、最終状態へたどり着くこと。 これは、 グラフ(graph) の 探索(search) 問題と等価 （ノードが状態に、エッジが状態遷移にそれぞれ対応する。） 15パズル ルール： 一度に動かせるのは1パネルのみ。 飽きますに隣のパネルをずらす操作のみ可能 目標： 「できるだけ少ない手数で」 与えられた配置から元の配置に戻すこと。 元に戻すことが不可能な問題を識別する。 迷路 目的：スタートからゴールまで誘導する。 状態(state) $s$：移動できる場所 行動(action) $a$：進む方向 コスト無しグラフの探索 用語 意味 オープンリスト(open list) これから探索するノードの候補リスト クローズドリスト(closed list) 探索が終わったノードのリスト キュー(queue) 先入れ先出し スタック(stack) 後入れ先出し 探索の基本アルゴリズム open_list = [ initial_state ] # オープンリストは初期化状態のみ closed_list = [] # クローズドリストは空 while ( open_list ): # オープンリストが空になるまで以下を繰り返す。 state = getOptimalState ( open_list ) # オープンリストから（何らかの基準で）状態sを取り出す。 closed_list . append ( state ) # sをクローズドリストに追加する。 if state == last_state : break # sが最終状態ならば探索終了 open_list += [ s for s in state . transibles () if s not in closed_list ] # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストに追加する。 深さ優先探索 行き止まりに当たるまで進み、ゴールが見つからなかったら直近の分岐に戻って別の道を探す探索法。 メモリ使用量が少ない ゴールが近くにあっても、他の深い別れ道に迷い込むと時間がかかる ゴールが複数ある時、一番近くのものが見つかるとは限らない オープンリストは スタック （後入れ先出し） にする。 open_list = [ initial_state ] closed_list = [] while ( open_list ): state = open_list . pop ( 0 ) # オープンリストの先頭の状態sを取り出す。 closed_list . append ( state ) if state == last_state : break open_list . push ([ s for s in state . transibles () if s not in closed_list ]) # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストの\"先頭に\"追加する。 幅優先探索 分かれ道に来たらそれぞれの道を一歩ずつ進み，ゴールが見つからなかったらそれぞれの道をもう一歩ずつ進む探索法。 ゴールが近くにある時、早く見つかる。 ゴールが複数ある時、一番近くのものが見つかる。 分かれ道での分岐数が多いとメモリ使用量が多い。 オープンリストは キュー （先入れ後出し） にする。 open_list = [ initial_state ] closed_list = [] while ( open_list ): state = open_list . pop ( - 1 ) # オープンリストの\"末尾\"の状態sを取り出す。 closed_list . append ( state ) if state == last_state : break open_list . push ([ s for s in state . transibles () if s not in closed_list ]) # sから遷移可能でまだクローズドリストに入っていない状態をオープンリストの\"先頭に\"追加する。 反復深化探索 深さに制限をつけて深さ優先探索を行い、徐々に深さを深くしていく探索法 ゴールが近くにある時、早く見つかる ゴールが複数ある時、一番近くのものが見つかる 同じノードを何度も訪れる（分岐が多いと影響小） まとめ 深さ優先探索・幅優先探索・反復深化探索は、グラフに関する特別な知識を使わずにオープンリストから状態を選択することから、 ブラインド探索(blined search) と呼ばれる。 # 探さ優先探索 幅優先探索 反復深化探索 完全性（必ず解が見つかるか） (completeness) $m$ が有限なら Yes Yes Yes 時間計算量 (time complexity) $\\mathrm{O}(b&#94;m)$ $\\mathrm{O}(b&#94;d)$ $\\mathrm{O}(b&#94;d)$ 空間計算量(space complexity) $\\mathrm{O}(bm)$ $\\mathrm{O}(b&#94;d)$ $\\mathrm{O}(bd)$ 最適性（一番近くの解が見つかるか） (optimality) Yes Yes Yes $b$：最大分岐数 $d$：一番浅い解の深さ $m$：最大の深さ コスト付きグラフの探索 各エッジに 遷移コスト が割り当てられている場合の最適遷移パス探索問題。 ブラインド探索 ：グラフに関する特別な知識を使わずにオープンリストから状態を選択。 貪欲探索(greedy search)：現在の状態からの遷移コストが最小の状態を選ぶ。 （深さ優先探索に対応） 最適探索(optimal search)：初期状態からの遷移コスト和が最小の状態を選ぶ。 （各コストが1だと幅優先探索になる。ダイクストラ法とも。） ヒューリスティック探索（最良優先探索, best-first search） ：グラフに関する何らかの知識を使ってオープンリストから適切と思われる状態を選択。 貪欲最良優先探索 $A&#94;{\\ast}$ 探索 貪欲最良優先探索 $\\hat{h}(s)$ を最小にする状態を選ぶ $h(s)$：$s$ から最終状態までの遷移コスト和の最小値 $\\hat{h}(s)$：$h(s)$ の推定（ヒューリスティック関数） 一度オープンリストに入ったの評価値更新は不要 ヒューリスティック関数の選び方： ユーザが 事前知識 により構築（例：直線距離） データから 機械学習 により自動構築 一般には完全性も最適性もないが、実用上は（そこそこ）うまくいくことが（それなりに）多い。 $A&#94;{\\ast}$ 探索(A-start search) $s$ を経由する場合の遷移コスト和の推定値 $\\left(\\hat{g}(s)+\\hat{h}(s)\\right)$ を最小にする状態を選ぶ。 $g(s)$：初期状態から $s$ までの遷移コスト和の最小値 $\\hat{g}(s)$：探索済みノードから $s$ に遷移する場合の最小値（ダイクストラ法と同じ） ノード $s$ を訪れると隣接ノードの $\\hat{g}(s&#94;{\\prime})$ が更新される。 $h(s)$：$s$ から最終状態までの遷移コスト和の最小値 $\\hat{h}(s)$：$h(s)$ のヒューリスティック推定値 最適経路上の $s$ ではいずれも $g(s)+h(s)$ が最小、経路外の点ではそれより大きい値をとることを利用 $\\forall s, 0\\leq\\hat{h}(s)\\leq h(s)$ が成り立つ時、$\\hat{h}(s)$ は 許容的(admissible) であるといい、この場合には $A&#94;{\\ast}$ 探索は最適性を持つ。 ※ 実装等は、 レポート課題 に記載。 In [1]: from kerasy.search.Astar import OptimalTransit In [2]: n = 3 m = 3 initial_str = \"2,-1,6,1,3,4,7,5,8\" last_str = \"1,2,3,4,5,6,7,8,-1\" In [3]: OptimalTransit ( n , m , initial_str , last_str , heuristic_method = \"Manhattan_distance\" , n_row = 5 ) n_transition = 9 ゲーム木の探索 2人のプレイヤーが交互に遷移先を決めるゲーム（ex. 将棋・囲碁・リバーシ・◯×など）における最適遷移探索問題 ミニマックス探索 自分は一番良い（点数を最大化する）手を選ぶ 相手は一番悪い（点数を最小化する）手を選ぶ アルファ・ベータ探索 ミニ・マックス探索では、全ての局面に対する点数を求める必要があり、時間がかかる。 不要な点数計算を省略することで効率化 $\\alpha$：max計算の際の下界値 $\\beta$：min計算の際の上界値 モンテカルロ木探索 アルファ・ベータ法を用いても、ゲーム木を深く探索するのは困難（$b&#94;d$ が $b&#94;{d/2}$ になる程度。） そこで、 ランダムに 手を打つ。 囲碁やスケジューリングなどで活用されている。 まとめ 広大な状態空間を効率よく探索したい コスト無しグラフの探索 コスト付きグラフの探索 ゲーム木の探索 膨大な状態空間の探索には，近似的な手法が有用 事前知識や機械学習によるヒューリスティック関数の構築 モンテカル 木探索 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-4.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-4.html"},{"title":"ガウシアンプロセスとベイズ最適化","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt import seaborn as sns データ駆動科学とベイズ最適化 データ駆動科学では、データに基づいて、新たな知見・事柄を発見することが求められる 単に予測を行うだけでなく、それに基づいて「行動」を設計することが必要 これらは、「ベイズ最適化」の枠組みに乗ることが多い 概要 ベイズ線形回帰 ガウシアンプロセス ベイズ最適化 ベイズ線形回帰 線形回帰モデルのパラメータを 最尤推定 によって決める場合、 解こうとしている問題に合わせてモデルの複雑さを適切に決めることが必要 ↑は、単純に尤度を最大化するだけでは 過学習 を引き起こしてしまう。 データの一部を独立なテスト用データとして取っておく ことでモデルの汎化性能を評価できるが、この方法は 計算量が大きく 、 データの無駄遣い となり得る。 これらの問題に対処するため、線形回帰モデルをベイズ的に取り扱うことで最尤推定の過学習を回避するとともに 「訓練データだけからモデルの複雑さを自動的に決定する。」 概要 解こうとしている問題に沿った 尤度関数(likelihood function) （ $p(\\mathbf{t}|\\mathbf{X},\\mathbf{w})$ ） を定義する。 モデルパラメータの 事前分布(prior distribution) （ $p(\\mathbf{w})$ ） を、 尤度関数 の 共役事前分布(conjugate prior) の形で定義する。 ベイズの公式より、 事後分布(posterior distribution) は 事前分布 と 尤度関数 の積に比例する。 （ $p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})\\propto p(\\mathbf{t}|\\mathbf{X},\\mathbf{w})\\cdot p(\\mathbf{w})$ ） あるパラメータ （ $\\mathbf{w}$ ） 下で入力 $\\mathbf{x}$ が与えられた時の確率分布 （ $p(t|\\mathbf{w},\\mathbf{x})$ ） を、3で求めた 事後分布 （ $p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})$ ） で重み付けしながら 周辺化(marginalization) する （ $p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x}) = \\int p(t|\\mathbf{w},\\mathbf{x})p(\\mathbf{w}|\\mathbf{t},\\mathbf{X})d\\mathbf{w}$ ） ことで、 予測分布(predivtive distribution) （ $p(t|\\mathbf{w},\\mathbf{x})$ ） を得る。 具体例 ※ $D$ 次元の説明変数 $\\mathbf{x}$ で一次元の目標変数 $t$ を線形回帰するモデルをベイズ的に取り扱う。 目標変数 $t$ が決定論的な関数 $y(\\mathbf{x},\\mathbf{w})$ と加法性のガウスノイズの和で与えられる場合を考える。 $$t = y(\\mathbf{x},\\mathbf{w}) + \\epsilon\\qquad (3.7)$$ ここで、$\\epsilon$ は期待値が $0$ で精度が $\\beta$ のガウス確率変数である。すなわち、以下で表すことができる。 $$p(t|\\mathbf{x},\\mathbf{w},\\beta) = \\mathcal{N}\\left(t|y(\\mathbf{x},\\mathbf{w}),\\beta&#94;{-1}\\right)\\qquad (3.8)$$ データ点が $(3.8)$ の分布から 独立に生成された と仮定すると、尤度関数を次のように表せる。 $$p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) = \\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)\\qquad (3.10)$$ モデルパラメータ $\\mathbf{w}$ の事前分布を導入する。 ここで、 $\\beta$ が既知 と仮定すると、上記の尤度関数の共役事前分布である、期待値 $\\mathbf{m}_0$ 共分散 $\\mathbf{S}_0$ を持つガウス分布で表すのが適当である。 $$p(\\mathbf{w}) = \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)\\qquad (3.48)$$ ※ なお、$\\mathbf{w},\\beta$ の両方が未知である場合、共役事前分布は ガウス-ガンマ分布 隣、予測分布は スチューデントのt分布 となる。 ベイズの公式より、 事後分布は事前分布と尤度関数の積に比例する ので、これを解くことで事後分布を次の形で書き出すことができる。 （導出） $$ p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) = \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N) \\qquad (3.49)\\\\ \\begin{cases} \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51) \\end{cases} $$ $\\mathbf{w}$ で周辺化することで、予測分布を求めるが、議論の簡単のために、 「モデルパラメータ $\\mathbf{w}$ の事前分布 $p(\\mathbf{w})$ が、単一の制度パラメータ $\\alpha$ で記述される期待値が $0$ の等方的ガウス分布である」 とする。 $$p(\\mathbf{w}|\\alpha) = \\mathcal{N}\\left(\\mathbf{w}|\\mathbf{0},\\alpha&#94;{-1}\\mathbf{I}\\right)\\qquad (3.52)$$ この時、上記の $\\mathbf{w}$ の事後分布 $(3.49)$ の形は変わらず、$\\mathbf{m}_N,\\mathbf{S}_N$ の値が $$ \\begin{cases} \\mathbf{m}_N &= \\beta\\mathbf{S}_N\\boldsymbol{\\Phi}&#94;T\\mathbf{t} & (3.53)\\\\ \\mathbf{S}_N&#94;{-1} &= \\alpha\\mathbf{I} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.54) \\end{cases} $$ となる。この条件下で周辺化すると、以下の結果を得る。 （導出） $$ \\begin{aligned} p(t|\\mathbf{t},\\mathbf{X},\\mathbf{x},\\alpha,\\beta) &= \\int p(t|\\mathbf{w},\\mathbf{x},\\beta)p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\alpha,\\beta)d\\mathbf{w}& (3.57)\\\\ &= \\mathcal{N}\\left(t|\\mathbf{m}_N&#94;T\\phi(\\mathbf{x}),\\sigma_N&#94;2(\\mathbf{x})\\right) & (3.58)\\\\ \\sigma_N&#94;2(\\mathbf{x}) &= \\frac{1}{\\beta} + \\phi(\\mathbf{x})&#94;T\\mathbf{S}\\phi(\\mathbf{x}) & (3.59) \\end{aligned} $$ ※ ここで、$(3.59)$ の第1項はデータに含まれるノイズを、第2項は $\\mathbf{w}$ に関する不確かさを反映している。 事後分布の計算の導出過程 $$ \\begin{aligned} \\text{likelihood function : } p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) &= \\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)& (3.10)\\\\ \\text{prior distribution : } p(\\mathbf{w}) &= \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)& (3.48)\\\\ \\text{posterior distribution : } p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) &= \\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N) & (3.49)\\\\ \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51)\\\\ \\mathcal{N}(x|\\mu,\\sigma&#94;2) &= \\frac{1}{\\left(2\\pi\\sigma&#94;2\\right)&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2\\sigma&#94;2}(x-\\mu)&#94;2\\right\\} & (2.42)\\\\ \\mathcal{N}(\\mathbf{x}|\\boldsymbol{\\mu},\\boldsymbol{\\Sigma}) &= \\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}|&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)&#94;T\\boldsymbol{\\Sigma}&#94;{-1}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)\\right\\} & (2.43) \\end{aligned} $$ $$ \\begin{aligned} p(\\mathbf{w}|\\mathbf{t},\\mathbf{X},\\beta) &\\propto p(\\mathbf{t}|\\mathbf{X},\\mathbf{w},\\beta) p(\\mathbf{w}) \\\\ &=\\prod_{n=1}&#94;N\\mathcal{N}\\left(t_n|\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n),\\beta&#94;{-1}\\right)\\mathcal{N}(\\mathbf{w}|\\mathbf{m}_0,\\mathbf{S}_0)\\\\ &\\propto\\prod_{n=1}&#94;N\\exp\\left\\{-\\frac{\\beta}{2}\\left(t_n-\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\right)&#94;2\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &=\\exp\\left\\{-\\frac{\\beta}{2}\\sum_{n=1}&#94;N\\left(t_n-\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\right)&#94;2\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &= \\exp\\left\\{-\\frac{\\beta}{2}\\left( \\begin{array}{c}t_1 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_1)\\\\ t_2 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_2) \\\\ \\vdots \\\\ t_N - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_N) \\end{array} \\right)&#94;T\\left( \\begin{array}{c}t_1 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_1)\\\\ t_2 - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_2) \\\\ \\vdots \\\\ t_N - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_N) \\end{array} \\right) \\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\} \\\\ &= \\exp\\left\\{-\\frac{\\beta}{2}\\left(\\mathbf{t}-\\boldsymbol{\\Phi}\\mathbf{w}\\right)&#94;T\\left(\\mathbf{t}-\\boldsymbol{\\Phi}\\mathbf{w}\\right)\\right\\}\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)&#94;T\\mathbf{S}_0&#94;{-1}\\left(\\mathbf{w}-\\mathbf{m}_0\\right)\\right\\}\\\\ &= \\exp\\left\\{ -\\frac{1}{2} \\left(\\beta\\mathbf{t}&#94;T\\mathbf{t} - \\beta\\mathbf{t}&#94;T\\boldsymbol{\\Phi}\\mathbf{w} - \\beta\\mathbf{w}&#94;T\\boldsymbol{\\Phi}&#94;T\\mathbf{t} + \\beta\\mathbf{w}&#94;T\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi}\\mathbf{w} + \\mathbf{w}&#94;T\\mathbf{S}_0&#94;{-1}\\mathbf{w} - \\mathbf{w}&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0 - \\mathbf{m}_0&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{w} + \\mathbf{m}_0&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right)\\right\\}\\\\ &= \\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w}&#94;T\\left(\\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} + \\mathbf{S}&#94;{-1}_0\\right)\\mathbf{w} - \\mathbf{w}&#94;T\\left(\\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t} + \\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right) - \\left(\\beta\\mathbf{t}&#94;T\\boldsymbol{\\Phi} + \\mathbf{m}_0\\mathbf{S}&#94;{-1}_0\\right)\\mathbf{w} + \\left(\\beta\\mathbf{t}&#94;T\\mathbf{t} + \\mathbf{m_0}&#94;T\\mathbf{S}&#94;{-1}_0\\mathbf{m}_0\\right)\\right)\\right\\} \\\\ &=\\exp\\left\\{-\\frac{1}{2}\\left(\\mathbf{w} - \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right)\\right)&#94;T\\mathbf{S}_N&#94;{-1}\\left(\\mathbf{w} - \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right)\\right) + \\mathrm{C} \\right\\}\\\\ &\\propto\\mathcal{N}(\\mathbf{w}|\\mathbf{m}_N,\\mathbf{S}_N)\\\\ &\\begin{cases} \\mathbf{m}_N &= \\mathbf{S}_N\\left(\\mathbf{S}_0&#94;{-1}\\mathbf{m}_0 + \\beta\\boldsymbol{\\Phi}&#94;T\\mathbf{t}\\right) & (3.50)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51)\\\\\\end{cases} \\end{aligned}\\\\ $$ 周辺化計算の導出過程 以下の「ガウス分布の周辺分布と条件付き分布の関係」の $(2.115)$ の結果を用いる。 $\\mathbf{x}$ の周辺ガウス分布と、$\\mathbf{x}$ が与えられた時の $\\mathbf{y}$ の条件付きガウス分布が次式で与えられたとする。 $$ \\begin{aligned} p(\\mathbf{x}) &=\\mathcal{N}\\left(\\mathbf{x} | \\boldsymbol{\\mu}, \\mathbf{\\Lambda}&#94;{-1}\\right) & (2.113)\\\\ p(\\mathbf{y} | \\mathbf{x}) &=\\mathcal{N}\\left(\\mathbf{y} | \\mathbf{A} \\mathbf{x}+\\mathbf{b}, \\mathbf{L}&#94;{-1}\\right) & (2.114)\\end{aligned} $$ この時、$\\mathbf{y}$ の周辺分布と、$\\mathbf{y}$ が与えられた時の $\\mathbf{x}$ の条件付き分布は $$ \\begin{aligned} p(\\mathbf{y}) &=\\mathcal{N}\\left(\\mathbf{y} | \\mathbf{A} \\boldsymbol{\\mu}+\\mathbf{b}, \\mathbf{L}&#94;{-1}+\\mathbf{A} \\mathbf{\\Lambda}&#94;{-1} \\mathbf{A}&#94;{\\mathrm{T}}\\right) & (2.115)\\\\ p(\\mathbf{x} | \\mathbf{y}) &=\\mathcal{N}\\left(\\mathbf{x} | \\mathbf{\\Sigma}\\left\\{\\mathbf{A}&#94;{\\mathrm{T}} \\mathbf{L}(\\mathbf{y}-\\mathbf{b})+\\mathbf{\\Lambda} \\boldsymbol{\\mu}\\right\\}, \\mathbf{\\Sigma}\\right) & (2.116) \\end{aligned} $$ で与えられる。ただし、 $$\\mathbf{\\Sigma} = \\left(\\mathbf{\\Lambda} + \\mathbf{A}&#94;T\\mathbf{LA}\\right)&#94;{-1}\\qquad (2.117)$$ である。 実装 In [2]: from kerasy.ML.linear import BayesianLinearRegression from kerasy.utils.preprocessing import GaussianBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian In [3]: N = 25 ; D = 1 ; M = 25 xmin = 0 ; xmax = 1 seed = 10 In [4]: alpha = 1 beta = 25 In [5]: x_test = np . linspace ( xmin , xmax , 1000 ) y_test = np . sin ( 2 * np . pi * x_test ) x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 1 / beta , seed = seed ) y_train += y_noise In [6]: # transform mu = np . linspace ( xmin , xmax , M ); sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) x_train_features = phi . transform ( x_train ) x_test_features = phi . transform ( x_test ) In [7]: random_idx = np . random . RandomState ( seed ) . choice ( N , N ) In [8]: fig = plt . figure ( figsize = ( 16 , 8 )) for i , n in enumerate ([ 1 , 2 , 4 , 25 ]): ax = fig . add_subplot ( 2 , 2 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( x_train_features [ random_idx [: n ]], y_train [ random_idx [: n ]]) y_pred , y_std = model . predict ( x_test_features ) ax . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) ax . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( x_train [ random_idx [: n ]], y_train [ random_idx [: n ]], s = 150 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) ax . set_ylim ( - 1.5 , 1.5 ), ax . legend (), ax . set_title ( f \"Bayesian Linear Regression (N= {n} )\" ) plt . tight_layout () plt . show () ガウシアンプロセス 回帰分析のための カーネル法 テストサンプルに対して、 予測値だけでなく、予測分散も与えることができる。 線形回帰のモデルは、以下で表されていた。 $$y(\\mathbf{x},\\mathbf{w}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x})\\qquad (3.3)$$ この結果に、ベイズ線形回帰の結果 $(3.53)$ を代入すると、 $$ \\begin{aligned} y(\\mathbf{x},\\mathbf{m}_N) &= \\mathbf{m}_N\\phi(\\mathbf{x}) = \\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\boldsymbol{\\Phi}&#94;T\\mathbf{t} \\\\ &= \\sum_{n=1}&#94;N\\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}_n)t_n & (3.60)\\\\ \\mathbf{S}_N&#94;{-1} &= \\mathbf{S}_0&#94;{-1} + \\beta\\boldsymbol{\\Phi}&#94;T\\boldsymbol{\\Phi} & (3.51) \\end{aligned} $$ したがって、点 $\\mathbf{x}$ での予測分布の平均は訓練データの目標変数 $t_n$ の線型結合で与えられるので、 $$ \\begin{aligned} y(\\mathbf{x},\\mathbf{m}_N) &= \\sum_{n=1}&#94;Nk(\\mathbf{x}, \\mathbf{x}_n)t_n & (3.61)\\\\ k(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}) &= \\beta\\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}&#94;{\\prime}) & (3.62)\\\\ &= \\left(\\beta&#94;{1/2}\\mathbf{S}_N&#94;{1/2}\\phi(\\mathbf{x})\\right)&#94;T\\left(\\beta&#94;{1/2}\\mathbf{S}_N&#94;{1/2}\\phi(\\mathbf{x})\\right) & (3.65) \\end{aligned} $$ とかける。なお、$k(\\mathbf{x}, \\mathbf{x}&#94;{\\prime})$ を 平滑化行列(smoother matrix) 、または 等価カーネル(equivalent kernel) と呼ぶ。（$(3.65)$ から、等価カーネルが通常のカーネル関数が満たすべき性質を満たしていることがわかる。） また、訓練データの目標値の線型結合を取ることで予測を行う上記のような回帰関数を 線形平滑器(linear smoother) と呼ぶ。 In [9]: from kerasy.utils.preprocessing import GaussianBaseTransformer , SigmoidBaseTransformer , PolynomialBaseTransformer In [10]: X = np . linspace ( - 1 , 1 , 200 ) M = 15 mu = np . linspace ( - 0.9 , 0.9 , M ); sigma = 0.1 gausian_phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) In [11]: def mkSmootherMatrix ( X , phi , alpha = 1 , beta = 25 ): X_feature = phi . transform ( X ) N , M = X_feature . shape SN = np . linalg . inv ( alpha * np . eye ( M ) + beta * X_feature . T . dot ( X_feature )) K = beta * np . dot ( X_feature , np . dot ( SN , X_feature . T )) return K In [12]: K = mkSmootherMatrix ( X , gausian_phi ) In [13]: SP = [ 30 , 120 , 150 ] colors = [ \"red\" , \"salmon\" , \"pink\" ] In [14]: fig = plt . figure ( figsize = ( 12 , 6 )) axKernel = plt . subplot2grid (( 3 , 2 ), ( 0 , 1 ), rowspan = 3 ) axKernel = sns . heatmap ( K , vmin = np . min ( K ), vmax = np . max ( K ), cmap = \"jet\" , cbar = False , square = True , ax = axKernel ) axKernel . set_xticks ([]), axKernel . set_yticks ([]) axKernel . set_xlabel ( \"$x$\" , fontsize = 18 ), axKernel . set_ylabel ( \"$x&#94;{\\prime}$\" , fontsize = 18 ) for i in range ( 3 ): axL = plt . subplot2grid (( 3 , 2 ), ( i , 0 )) axL . set_facecolor ( 'lightcyan' ) axL . plot ( K [ SP [ i ]], color = colors [ i ], linewidth = 4 ) axL . set_xticks ([]), axL . set_yticks ([]) axKernel . axhline ( SP [ i ], color = colors [ i ], linewidth = 10 , alpha = 0.7 ) plt . tight_layout () plt . show () In [15]: Transformers = [ ( GaussianBaseTransformer , mu ), ( SigmoidBaseTransformer , mu ), ( PolynomialBaseTransformer , 10 ), ] In [16]: fig = plt . figure ( figsize = ( 12 , 4 )) for i ,( phi_func , param ) in enumerate ( Transformers ): ax = fig . add_subplot ( 1 , 3 , i + 1 ) phi = phi_func ( param ) K = mkSmootherMatrix ( X , phi ) ax . plot ( K [ 100 ], color = \"blue\" ) ax . scatter ( 100 , 0 , color = \"red\" , marker = \"x\" , s = 150 , label = \"$x&#94;{\\prime}$\" ) ax . set_xticks ([]), ax . set_yticks ([]), ax . set_title ( f \"$k(x,x')$: {phi.__name__} \" , fontsize = 16 ) ax . set_xlabel ( \"$x$\" , fontsize = 18 ), ax . legend () plt . tight_layout () plt . show () カーネル関数の例 を見ればわかるよう、 対応する基底関数が局所的でないにも関わらず、等価カーネルは $x&#94;{\\prime}$ に関して局所的な関数となっていることがわかる！！ また、$y(\\mathbf{x})$ と $y(\\mathbf{x}&#94;{\\prime})$ の共分散を考えると、 $$ \\begin{aligned} \\mathrm{cov}\\left[y(\\mathbf{x}),y(\\mathbf{x}&#94;{\\prime})\\right] &= \\mathrm{cov}\\left[\\phi(\\mathbf{x})&#94;T\\mathbf{w}, \\mathbf{w}&#94;T\\phi(\\mathbf{x})\\right]\\\\ &= \\phi(\\mathbf{x})&#94;T\\mathbf{S}_N\\phi(\\mathbf{x}&#94;{\\prime}) = \\beta&#94;{-1}k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})\\quad(3.63) \\end{aligned} $$ となる。ここで、上述の等価カーネルの形状を考えると、 近接での予測平均は互いに強い相関を持っている一方で、より離れた点の組では相関は小さくなることがわかる。 ベイズ線形回帰 のように基底関数の集合を明示的に定義するのではなく、局所的なカーネルを直接定義し、観測された訓練集合が与えられた時、この局所的なカーネルを用いて新たな入力ベクトル $\\mathbf{x}$ に対する予測値を求めることができる。 この定式化から、回帰（と分類）に対する実用的な枠組みである ガウス過程(Gaussian process) が得られる。 ベイズ最適化 $M$ 個の候補点があり、この中から最大の観測値を持つものを探したい。 できるだけ実験数を少なくしたい。 $N$ 個の候補点に対する実験が終わった。$M-N$ 個の候補点が残っている。 次の $N+1$ 個目の候補点を最適に選びたい。 $N$ 個の化合物から予測モデルを学習し、それを用いて、残りの候補点を スコアリング し決定。 Maximum Probability of Improvement: Current Maxを超える確率。 Maximum Expected Improvement: (観測値-Current Max)の期待値。 Thompson Sampling: 残りのM-N個候補点に対して、条件つき結合確率からサンプリングを行い、そのサンプリング値をスコアとする。 In [17]: xmin = 0 ; xmax = 1 N = 1000 ; M = 25 seed = 1 In [18]: alpha = 1 beta = 25 In [19]: X = np . linspace ( xmin , xmax , N ) Y = 5e1 * X * ( X - 0.2 ) * ( X - 0.3 ) * ( X - 0.7 ) * ( X - 1 ) _ , noise = generateGausian ( size = 1000 , x = X , loc = 0 , scale = 1 / beta , seed = seed ) Y_ob = Y + noise In [20]: mu = np . linspace ( xmin , xmax , M ) sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) In [21]: X_features = phi . transform ( X ) In [22]: fig = plt . figure ( figsize = ( 18 , 8 )) idx = np . random . RandomState ( seed ) . choice ( N , 2 ) # Initialization. next_idx = idx for i , _ in enumerate ( range ( 12 )): ax = fig . add_subplot ( 3 , 4 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( X_features [ idx ], Y_ob [ idx ]) y_pred , y_std = model . predict ( X_features ) current_max = np . max ( Y_ob [ idx ]) max_improve_id = np . argmax ( y_pred ) ax . plot ( X , Y , color = \"black\" , label = \"True distribution\" ) ax . plot ( X , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( X , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( X [ idx ], Y_ob [ idx ], s = 50 , edgecolors = 'black' , facecolor = \"white\" , label = \"Observation\" ) ax . scatter ( X [ next_idx ], Y_ob [ next_idx ], s = 150 , edgecolors = 'black' , facecolor = \"black\" , label = \"New Obsevation\" ) ax . set_xlabel ( \"Explanatory Variable\" ), ax . set_ylabel ( \"Measured Value\" ), ax . set_title ( f \"N={len(idx)}, Max= {current_max:.3f} \" ) ax . set_ylim ( - 0.5 , 0.3 ), ax . set_xticks ([]), ax . set_yticks ([]) ax . axhline ( current_max , color = \"green\" , label = \"Current Maximum\" ) ax . axvline ( np . max ( X [ max_improve_id ]), color = \"blue\" , label = \"Maximum Probability of Improvement\" ) next_idx = max_improve_id if np . random . uniform () > 0.5 else np . random . choice ( N , 1 ) idx = np . r_ [ idx , next_idx ] ax . legend () plt . tight_layout () plt . show () おわりに（データ駆動科学） データ駆動科学では、データに基づいて、新たな知見・事柄を発見することが求められる。 単に予測を行うだけでなく、それに基づいて次の「行動」を設計することが必要 これらは、ベイズ最適化の枠組みに乗ることが多い。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-4.html"},{"title":"特徴選択","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import numpy as np import matplotlib.pyplot as plt 主成分分析(PCA) In [2]: N = 20 seed = 0 In [3]: X = np . linspace ( 0 , 1 , N ) Y = X + np . random . RandomState ( N ) . normal ( loc = 0 , scale = 5e-2 , size = N ) data = np . vstack (( X , Y )) In [4]: def Rotate ( x , radian ): A = np . array ([ [ np . cos ( radian ), - np . sin ( radian )], [ np . sin ( radian ), np . cos ( radian )] ]) return np . dot ( A , data ) In [5]: fig = plt . figure ( figsize = ( 10 , 4 )) ax = fig . add_subplot ( 1 , 2 , 1 ) ax . scatter ( X , Y , color = \"black\" ), ax . set_title ( \"Original\" ) X_tra , Y_tra = Rotate ( data , radian =- 1 / 4 * np . pi ) ax = fig . add_subplot ( 1 , 2 , 2 ) ax . scatter ( X_tra , Y_tra , color = \"red\" ), ax . set_title ( \"Rotated\" ), ax . set_ylim ( - 1 / 2 * np . sqrt ( 2 ), 1 / 2 * np . sqrt ( 2 )) plt . tight_layout () plt . show () $2$ 次元空間で左上図のようなデータがあったとする。この時、このデータを表現するのに $(x,y)$ の二次元が必要だろうか？ データ全体を右に $1/4\\pi$ 回転させると、右上図のようなデータれるとなる。この場合、$y&#94;{\\prime}$ 軸方向はノイズとみなせ、$x&#94;{\\prime}$ 軸のみでデータを表現していると言える。 この例のように、$K$ 次元のデータであっても、で０他の偏りによって $M( こういった場合に、 「$M$ 方向の軸をどのように決めるか？」 、 「$M$ をどうやって決めるか？」 などが問題となる。 ※ 詳しくは 主成分分析(PCA) に記載。 線形判別分析(LDA) 入力ベクトル $\\mathbf{x}$ を $K$ クラスの一つ $C_k$ に割り当てる関数である識別（決定面が超平面となるとき、 線形識別(linear discriminant) ）を、 「次元の削減」 という観点から捉えることができる。 2クラス分類 $D$ 次元入力ベクトルを得て、それを以下の式で $1$ 次元に射影するとする。 $$y = \\mathbf{w}&#94;T\\mathbf{x}\\qquad (4.20)$$ ある閾値を設定し、$y\\geq-w_0$ の場合クラス $C_1$、そうでない場合クラス $C_2$ であるとすると、 標準的な線形分類器が得られる。 一般に、$D$ 次元から $1$ 次元へ射影することによって相当量の情報量の損失を発生させる。 重みベクトル $\\mathbf{w}$ の要素を調整することで、 クラスの分離を最大にする射影を選択したい。 $\\mathbf{w}$ 上へ射影された際のクラス分離度の最も簡単な測定法は、 射影されたクラスの平均の分離度（以下の式） を見ることである。 $$m_2-m_1 = \\mathbf{w}&#94;T\\left(\\mathbf{m}_2-\\mathbf{m}_1\\right) = \\mathbf{w}&#94;T\\left(\\frac{1}{N_2}\\sum_{n\\in C_2}\\mathbf{x}_n -\\frac{1}{N_1}\\sum_{n\\in C_1}\\mathbf{x}_n\\right)\\qquad (4.21)\\ \\&\\ (4.22)$$ 上の式は $\\mathbf{w}$ の値を大きくすればいくらでも大きな値にすることができるので、 $\\mathbf{w}$ が単位長である（$\\sum_i w_i&#94;2 = 1$）という制約を加える。 ラグランジュ乗数を用いてこれを解くと、$\\mathbf{w}\\propto(\\mathbf{m}_2-\\mathbf{m}_1)$ が得られる。 クラス分布の非対角な共分散が強い場合など、一般に、 各クラスの平均値だけを見ていても上手く判別する事ができない。 そこでフィッシャーが提案した方法が、 「射影されたクラス平均間の分離度を大きくすると同時に、各クラス内では小さな分散を与える関数を最大化する」 クラス $C_k$ から射影されたデータのクラス内分散は以下で与えられる。 $$s_k&#94;2 = \\sum_{n\\in C_k}(y_n-m_k)&#94;2\\qquad (4.2)$$ 全データ集合に対する総クラス内分散が $s_1&#94;2+s_2&#94;2$ であると定義する。 フィッシャーの判別基準は、 クラス間分離度 と クラス内分散 の比率で表される。 $$ \\begin{aligned} J(\\mathbf{w}) &= \\frac{(m_2-m_1)&#94;2}{s_1&#94;2 + s_2&#94;2} & (4.25)\\\\ &= \\frac{\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}}{\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}} & (4.27)\\\\ \\mathbf{S}_{\\mathrm{B}} &= (\\mathbf{m}_2-\\mathbf{m}_1)(\\mathbf{m}_2-\\mathbf{m}_1)&#94;T & (4.27)\\\\ \\mathbf{S}_{\\mathrm{W}} &= \\sum_{n\\in C_1}(\\mathbf{x}_n-\\mathbf{m}_1)(\\mathbf{x}_n-\\mathbf{m}_1)&#94;T + \\sum_{n\\in C_2}(\\mathbf{x}_n-\\mathbf{m}_2)(\\mathbf{x}_n-\\mathbf{m}_2)&#94;T& (4.27)\\\\ \\end{aligned} $$ $\\mathbf{S}_{\\mathrm{B}}$ を クラス間共分散行列(between-class covariance matrix) と呼ぶ。 $\\mathbf{S}_{\\mathrm{W}}$ を (総)クラス内共分散行列(within-class covariance matrix) と呼ぶ。 $J(\\mathbf{w})$ を $\\mathbf{w}$ に関して微分すると、以下の式が満たされる場合に $J(\\mathbf{w})$ が最大となる事がわかる。 $$ \\begin{aligned} \\frac{dJ(\\mathbf{w})}{d\\mathbf{w}} &= \\frac{\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}} + \\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right) - \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}} + \\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)}{\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)&#94;2}\\\\ \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}} + \\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right) &= \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}} + \\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)\\\\ \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}&= \\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\qquad (4.29) \\end{aligned} $$ $(4.27)$ から、 $\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}$ は常に $(\\mathbf{m}_2-\\mathbf{m}_1)$ と同じ方向を持つ。 $\\mathbf{w}$ の方向だけが重要で、 大きさは考慮する必要がないので、スカラーファクタ $\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{W}}\\mathbf{w}\\right)$ と $\\left(\\mathbf{w}&#94;T\\mathbf{S}_{\\mathrm{B}}\\mathbf{w}\\right)$ を無視できる。 $(4.29)$ の両辺に $\\mathbf{S}_{\\mathrm{W}}&#94;{-1}$ を左からかけて、 フィッシャーの線形判別(Fisher's linear discriminant) が得られる。 $$\\mathbf{w}\\propto\\mathbf{S}_{\\mathrm{W}}&#94;{-1}(\\mathbf{m}_2-\\mathbf{m}_1)\\qquad (4.30)$$ フィッシャーの線形判別(Fisher's linear discriminant) は、厳密には識別子ではなく、 むしろ $1$ 次元へ削減する際のデータの射影方向の選択を行なっている。 In [6]: from kerasy.ML.decomposition import LDA In [7]: N1 = 100 ; N2 = 100 cov = [[ 10 , 1 ],[ 1 , 3 ]] In [8]: x1 = np . random . RandomState ( seed ) . multivariate_normal ([ 0 , 7 ], cov , N1 ) x2 = np . random . RandomState ( seed + 1 ) . multivariate_normal ([ 8 , 6 ], cov , N2 ) x1min = np . min ( x1 ); x1max = np . max ( x1 ) x2min = np . min ( x2 ); x2max = np . max ( x2 ) m1 = np . mean ( x1 , axis = 0 ); m2 = np . mean ( x2 , axis = 0 ) m = ( m1 + m2 ) / 2 data = np . r_ [ x1 , x2 ] In [9]: X = np . linspace ( - 100 , 100 , 1000 ) In [10]: fig = plt . figure ( figsize = ( 12 , 6 )) for i , tf in enumerate ([ True , False ]): model = LDA () model . fit ( x1 , x2 , mean_only = tf ) w1 , w2 = model . w alpha = - w2 / w1 beta = m [ 1 ] - alpha * m [ 0 ] x_features = model . transform ( data ) axT = fig . add_subplot ( 2 , 2 , i + 1 ) axT . plot ( X , X * ( - w2 / w1 ) + beta , color = \"black\" , label = \"linear discriminant\" ) axT . scatter ( x1 [:, 0 ], x1 [:, 1 ], color = \"blue\" , label = \"class1\" ) axT . scatter ( x2 [:, 0 ], x2 [:, 1 ], color = \"red\" , label = \"class2\" ) axT . scatter ( m1 [ 0 ], m1 [ 1 ], color = \"green\" , marker = \"*\" , s = 200 ), axT . scatter ( m2 [ 0 ], m2 [ 1 ], color = \"green\" , marker = \"*\" , s = 200 , label = \"mean\" ) axT . set_xlim ( x1min , x1max ), axT . set_ylim ( x2min , x2max ) axT . set_xticks ([]), axT . set_yticks ([]), axT . legend (), axT . set_title ( \"Only Mean\" if tf else \"Fisher's linear discriminant\" ) axB = fig . add_subplot ( 2 , 2 , 3 + i ) axB . hist ( x_features [: N1 ], alpha = 0.3 , color = \"blue\" , label = \"class1\" ) axB . hist ( x_features [ N1 :], alpha = 0.3 , color = \"red\" , label = \"class2\" ) axB . set_xticks ([]), axB . set_yticks ([]), axB . legend () plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-3.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-3.html"},{"title":"生物統計論 第4回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section4.1 Expectation Maximization Algorithm The expectation maximization algorithm, or EM algorithm, is a general technique for finding maximum likelihood solutions for probabilistic models having latent variable. Consider a probabilistic model in which we collectively denote all of the observed variables by $\\mathbf{X}$ all of the hidden variables by $\\mathbf{Z}$ (assuming discrete, but discussion is identical if continuous) joint distribution by $p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)$ Goal is to maximize the likelihood function that is given by $$p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) = \\sum_{\\mathbf{Z}}p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)\\qquad (9.69)$$ Properties Guaranteed to terminate Likelihood always increases Solving M-step is often easy No need to traverse the data Separation of parameter dependency $\\log(pq)=\\log(p)+\\log(q)$ Sometimes solved exactly Often a few times faster than gradient descent (if stopping condition is not too stringent) Expectation values characterize the optimized model Lower Bound of Likelihood $\\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right)$ and $\\mathrm{KL}\\left(q\\|p\\right)$ We shall suppose that direct optimization of $p(\\mathbf{X}|\\boldsymbol{\\theta})$ is difficult the optimization of the complete-data likelihood function $p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)$ is significantly easier We introduce a distribution $q\\left(\\mathbf{Z}\\right)$ defined over the latent variables. For any choice of $q\\left(\\mathbf{Z}\\right)$, the following decomposition holds $$ \\begin{aligned} \\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) &= \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) + \\mathrm{KL}\\left(q\\|p\\right) &(9.70)\\\\ \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.71)\\\\ \\mathrm{KL}\\left(q\\|p\\right) &= -\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.72) \\end{aligned} $$ NOTE : $\\mathcal{L}(q,\\boldsymbol{\\theta})$ is a functional of the distribution $q(\\mathbf{Z})$, and a function of the parameters $\\boldsymbol{\\theta}$ $$ \\begin{aligned} \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) + \\mathrm{KL}\\left(q\\|p\\right) &=\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} -\\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\}\\\\ &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}\\right)}\\right\\}\\\\ &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right)\\\\ &= \\ln p\\left(\\mathbf{X}|\\boldsymbol{\\theta}\\right) \\end{aligned}$$ From $(9.72)$, we see that $\\mathrm{KL}(q\\|p)$ is the Kullback-Leibler divergence between $q(\\mathbf{Z})$ and the posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta})$ Kullback-Leibler divergence satisfies $\\mathrm{KL}(q\\|p)\\geq0$ with eqyality if, and only if, $q(\\mathbf{Z})=p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta})$. Therefore, $\\mathcal{L}(q,\\boldsymbol{\\theta})\\leq\\ln p(\\mathbf{X}|\\boldsymbol{\\theta})$, in other words that $\\mathcal{L}(q,\\boldsymbol{\\theta})$ is a lower bound on $\\ln p(\\mathbf{X}|\\boldsymbol{\\theta})$ E step In the E step, the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ is maximized with respect to $q(\\mathbf{Z})$ while holding $\\boldsymbol{\\theta}&#94;{\\text{old}}$ fixed. $\\ln p(\\mathbf{X}|\\boldsymbol{\\theta}&#94;{\\text{old}})$ does not depend on $q(\\mathbf{Z})$ the largest value of $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ will occur when the Kullback-Leibler divergence vanishes. ∴ When $q(\\mathbf{Z})$ is equal to the posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}})$, $\\mathrm{KL}(q\\|p)=0$ and the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ will be maximized. M step In the M step, the lower bound $\\mathcal{L}(q,\\boldsymbol{\\theta}&#94;{\\text{old}})$ is maximized with respect to $\\boldsymbol{\\theta}$ to give some new value $\\boldsymbol{\\theta}&#94;{\\text{new}}$ while holding $q(\\mathbf{Z})$ fixed. This will cause the lower bound $\\mathcal{L}$ to increase This will necessarily cause the corrresponding log likelihood function to increase. Because $q$ is held fixed during the M step, it will not equal the new posterior distribution $p(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}})$ $\\left(\\mathrm{KL}(q\\|p)\\neq0\\right)$ $\\mathcal{Q}(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}})$ $$ \\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)=\\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right) \\qquad (9.33)\\\\ $$ If we substitute $q(\\mathbf{Z}) = p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)$ into $(9.71)$, $$ \\begin{aligned} \\mathcal{L}\\left(q,\\boldsymbol{\\theta}\\right) &= \\sum_{\\mathbf{Z}}q(\\mathbf{Z})\\ln\\left\\{\\frac{p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right)}{q(\\mathbf{Z})}\\right\\} & (9.71)\\\\ &= \\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{X},\\mathbf{Z}|\\boldsymbol{\\theta}\\right) - \\sum_{\\mathbf{Z}}p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\ln p\\left(\\mathbf{Z}|\\mathbf{X},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)\\\\ &= \\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right) + \\text{const.} \\end{aligned} $$ ∴ \"Maximizing $\\mathcal{L}(q,\\boldsymbol{\\theta})$\" is equal to \"Maximizing $\\mathcal{Q}\\left(\\boldsymbol{\\theta},\\boldsymbol{\\theta}&#94;{\\text{old}}\\right)$\". In [2]: from kerasy.ML.MixedDistribution import MixedGaussian In [3]: # Train Data. data = np . concatenate ([ np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = 50 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 0 , 5 ], cov = np . eye ( 2 ), size = 50 ), np . random . RandomState ( 0 ) . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = 50 ), ]) X , Y = data . T K = 3 In [4]: # Back Ground Color xmin , ymin = np . min ( data , axis = 0 ) - 0.3 xmax , ymax = np . max ( data , axis = 0 ) + 0.3 Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] In [5]: model = MixedGaussian ( K = 3 , random_state = 1234 ) model . fit ( data , memo_span = 1 ) ll_hist = [ ll for _ , _ , _ , ll in model . history ] mu_hist = [ mu for _ , _ ,( mu , _ , _ ), _ in model . history ] In [6]: plt_model = MixedGaussian ( K = 3 ) plt_model . N , plt_model . M = data . shape L_old = min ( ll_hist ) - 300 for epoch , idx ,( mu , S , pi ), ll in model . history [: - 1 ]: fig = plt . figure ( figsize = ( 12 , 8 )) ll_old = ll_hist [ epoch ]; ll_new = ll_hist [ epoch + 1 ] mu_old = mu_hist [ epoch ]; mu_new = mu_hist [ epoch + 1 ] L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 dL_old = ll_old - L_old ; dL_new = L_new - ll_old ; dll_old = ll_new - ll_old ax1 = fig . add_subplot ( 2 , 2 , 1 ) plt_model . mu = mu ; plt_model . S = S ; plt_model . pi = pi gammas = plt_model . predict ( XYs ) Zs = np . sum ( gammas , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. ax1 . pcolor ( Xs , Ys , Zs , alpha =. 5 , cmap = \"jet\" ) ax1 . scatter ( X , Y , c = idx , cmap = \"prism\" ) ax1 . set_xlim ( xmin , xmax ), ax1 . set_ylim ( ymin , ymax ), ax1 . set_title ( f \"epochs: {epoch:>02}\" , fontsize = 18 ) ax2 = fig . add_subplot ( 2 , 2 , 2 ) ax2 . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linewidth = 3 ) ax2 . axhline ( L_old , color = \"black\" , label = \"$L(q,θold)$\" , linestyle = \":\" ) ax2 . arrow ( x = 0.3 , y = L_old , dx = 0 , dy = dL_old , head_width = dL_old / 6000 , head_length = dL_old * 0.1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax2 . set_title ( f \"E step (Epoch={epoch})\" , fontsize = 18 ), ax2 . legend (), ax2 . set_xticks ([]), ax2 . set_ylim ( - 600 , - 570 ) ax3 = fig . add_subplot ( 2 , 2 , 3 ) for k in range ( K ): xb , yb = mu_old [ k ]; xa , ya = mu_new [ k ] ax3 . plot (( xb , xa ),( yb , ya ), color = \"black\" ) ax3 . scatter ( xb , yb , color = \"black\" , s = 50 ) ax3 . scatter ( xa , ya , color = \"red\" , marker = \"*\" , s = 150 ) ax3 . set_xlim ( xmin , xmax ), ax3 . set_ylim ( ymin , ymax ), ax3 . set_title ( \"θ → θnew\" ) ax3 . grid () ax4 = fig . add_subplot ( 2 , 2 , 4 ) L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 ax4 . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linestyle = \"--\" ) ax4 . axhline ( ll_new , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θnew)$\" , linewidth = 3 ) ax4 . axhline ( L_new , color = \"black\" , label = \"$L(q,θnew)$\" , linestyle = \":\" ) ax4 . arrow ( x = 0.7 , y = ll_old , dx = 0 , dy = dll_old , head_width = dll_old / 6000 , head_length = dll_old * 0.1 , fc = 'k' , ec = 'k' , length_includes_head = True ) ax4 . arrow ( x = 0.3 , y = ll_old , dx = 0 , dy = dL_new , head_width = dL_new / 6000 , head_length = dL_new * 0.1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax4 . set_title ( f \"M step (Epoch={epoch})\" , fontsize = 18 ), ax4 . legend (), ax4 . set_xticks ([]), ax4 . set_ylim ( - 600 , - 570 ) plt . tight_layout () plt . savefig ( f \"img/img{epoch:>02}\" ) L_old = L_new fig_no = 0 L_old = min ( ll_hist ) - 300 for epoch in range ( len ( model . history ) - 1 ): ll_old = ll_hist [ epoch ]; ll_new = ll_hist [ epoch + 1 ] L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 dL_old = ll_old - L_old ; dL_new = L_new - ll_old ; dll_old = ll_new - ll_old # Estep fig = plt . figure ( figsize = ( 3 , 10 )) ax = fig . add_subplot ( 1 , 1 , 1 ) ax . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linewidth = 3 ) ax . axhline ( L_old , color = \"black\" , label = \"$L(q,θold)$\" , linestyle = \":\" ) ax . arrow ( x = 0.3 , y = L_old , dx = 0 , dy = dL_old , head_width = dL_old / 60 , head_length = dL_old * 2e-1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax . set_title ( f \"E step (Epoch={epoch})\" , fontsize = 18 ), ax . legend (), ax . set_xticks ([]), ax . set_ylim ( - 600 , - 570 ) plt . savefig ( f \"img/img{fig_no:>02}\" ); fig_no += 1 plt . clf () # Mstep fig = plt . figure ( figsize = ( 3 , 10 )) ax = fig . add_subplot ( 1 , 1 , 1 ) L_new = np . random . uniform ( low = 0.3 , high = 0.5 ) * ( ll_new - ll_old ) + ll_old # 真面目に計算していない。 ax . axhline ( ll_old , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θold)$\" , linestyle = \"--\" ) ax . axhline ( ll_new , color = \"black\" , label = \"$\\ln p(\\mathbf{X},θnew)$\" , linewidth = 3 ) ax . axhline ( L_new , color = \"black\" , label = \"$L(q,θnew)$\" , linestyle = \":\" ) ax . arrow ( x = 0.7 , y = ll_old , dx = 0 , dy = dll_old , head_width = dll_old / 60 , head_length = dll_old * 2e-1 , fc = 'k' , ec = 'k' , length_includes_head = True ) ax . arrow ( x = 0.3 , y = ll_old , dx = 0 , dy = dL_new , head_width = dL_new / 60 , head_length = dL_new * 2e-1 , fc = 'red' , ec = 'red' , length_includes_head = True ) ax . set_title ( f \"M step (Epoch={epoch})\" , fontsize = 18 ), ax . legend (), ax . set_xticks ([]), ax . set_ylim ( - 600 , - 570 ) plt . savefig ( f \"img/img{fig_no:>02}\" ); fig_no += 1 plt . clf () L_old = L_new Section4.2 Mixture Model Implementation Gaussian Mixture Distribution k-means clustering Section4.3 Linear Regression Least Squares polynomial function we observe a real-value input variable $x$ and we wish to use this observation to predict the value of a real-valued target variable $t$. In the most simplest approach based on curve fitting, we shall fit the data using a polynomial function of the form : $$y(x,\\mathbf{w}) = w_0+w_1x+w_2x&#94;2+\\cdots+w_Mx&#94;M=\\sum_{j=0}&#94;Mw_jx&#94;j\\qquad (1.1)$$ data we are given a training set comprising $N$ observation of $x$, written $\\mathbf{X}\\equiv(\\mathbf{x_1},\\ldots,\\mathbf{x}_N)&#94;T$ with corresponding observation of the values of $t$, denoted $\\mathbf{t}\\equiv(t_1\\ldots,t_N)&#94;T$ we can difine $M$, which is the order of the polynomial. The values of the coefficients($w_j$) will be determined by fitting the polynomial to the training data. This can be done by minimizing an error function that measures the misfit between the function $y(x,\\mathbf{w})$ and the training set data points. One simple choice of error function, which is widely used, is given by the sum of the squares of the errors $$E(\\mathbf{w}) = \\frac{1}{2}\\mathrm{RSS} = \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\{y(\\mathbf{x}_n,\\mathbf{w}) - t_n\\right\\}&#94;2\\qquad (1.2)$$ (the factor of $1/2$ is included for later convenience.) Trainig Aim: find the best $\\mathbf{w}&#94;{\\star}=\\underset{w\\in\\mathbb{R}}{\\mathrm{argmin}}\\left\\{\\mathrm{RSS}(\\mathbf{w})\\right\\}$ $\\mathbf{t} = \\left(\\begin{matrix}t_1\\\\\\vdots\\\\t_N\\end{matrix}\\right),\\quad\\mathbf{X} = \\left(\\begin{matrix}x_1&#94;0&x;_1&#94;1&\\cdots&x;_1&#94;M\\\\x_2&#94;0&x;_2&#94;1&\\cdots&x;_2&#94;M\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\x_N&#94;0&x;_N&#94;1&\\cdots&x;_N&#94;M\\end{matrix}\\right),\\quad\\mathbf{w}=\\left(\\begin{matrix}w_1\\\\\\vdots\\\\w_M\\end{matrix}\\right)$ $\\mathrm{RSS}(\\mathbf{w}) = \\left(\\mathbf{t} - \\mathbf{Xw}\\right)&#94;T\\left(\\mathbf{t} - \\mathbf{Xw}\\right)$ Solution: $$ \\begin{aligned} \\frac{\\partial E(\\mathbf{w})}{\\partial\\mathbf{w}} &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\|\\mathbf{t}-\\mathbf{Xw}\\|&#94;2\\\\ &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\|\\mathbf{t}\\|&#94;2 - 2\\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{t} + \\|\\mathbf{Xw}\\|&#94;2\\right)\\\\ &=\\frac{1}{2}\\frac{\\partial}{\\partial\\mathbf{w}}\\left(\\|\\mathbf{t}\\|&#94;2 - 2\\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{t} + \\mathbf{w}&#94;T\\mathbf{X}&#94;T\\mathbf{Xw}\\right)\\\\ &=\\frac{1}{2} \\left(-2\\mathbf{X}&#94;T\\mathbf{t} + \\left(\\mathbf{X}&#94;T\\mathbf{X} + \\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;T\\right)\\mathbf{w}\\right)\\\\ &= -\\mathbf{X}&#94;T\\mathbf{t}+\\mathbf{X}&#94;T\\mathbf{Xw}=\\mathbf{0}\\\\ \\therefore\\mathbf{w}&#94;{\\star} &= \\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{t} \\end{aligned}$$ ※ In the following programs, I use np.linalg.solve to calcurate $\\mathbf{w}&#94;{\\ast}$ equation program $$\\left(\\mathbf{X}&#94;T\\mathbf{X}\\right)\\mathbf{w}&#94;{\\star} = \\mathbf{X}&#94;T\\mathbf{t}$$ w = np.linalg.solve(X.T.dot(X), X.T.dot(t)) In [7]: N = 15 Ms = [ 2 , 4 , 8 , 16 ] seed = 0 In [8]: # Training data. x = np . random . RandomState ( seed ) . uniform ( low = 0 , high = 1 , size = N ) Noise = np . random . RandomState ( seed ) . normal ( loc = 0 , scale = 0.1 , size = N ) t = np . sin ( 2 * np . pi * x ) + Noise In [9]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Regularized Least Square $$ \\begin{aligned} E(\\mathbf{w}) &= E_{D}(\\mathbf{w}) + \\lambda E_W(\\mathbf{w}) & (3.24)\\\\ &= \\frac{1}{2}\\mathrm{RSS} + \\lambda\\frac{1}{2}\\mathbf{w}&#94;T\\mathbf{w}\\\\ &= \\frac{1}{2}\\sum_{n=1}&#94;N\\left\\{y(\\mathbf{x}_n,\\mathbf{w}) - t_n\\right\\}&#94;2+\\frac{1}{2}\\mathbf{w}&#94;T\\mathbf{w} & (3.27)\\\\ \\therefore\\mathbf{w}&#94;{\\star} &= \\left(\\lambda\\mathbf{I} + \\mathbf{X}&#94;T\\mathbf{X}\\right)&#94;{-1}\\mathbf{X}&#94;T\\mathbf{t} & (3.28) \\end{aligned} $$ In [10]: lambda_ = 1e-4 In [11]: fig = plt . figure ( figsize = ( 12 , 8 )) for i , M in enumerate ( Ms ): ax = fig . add_subplot ( 2 , 2 , i + 1 ) # Training. X = np . array ([ x ** m for m in range ( M + 1 )]) . T w = np . linalg . solve ( lambda_ * np . identity ( M + 1 ) + X . T . dot ( X ), X . T . dot ( t )) # For Validation plot. Xs = np . linspace ( 0 , 1 , 1000 ) t_true = np . sin ( 2 * np . pi * Xs ) t_pred = w . dot ( np . array ([ Xs ** m for m in range ( M + 1 )])) # RSS(Residual Sum of Squares) residual = t - w . dot ( np . array ([ x ** m for m in range ( M + 1 )])) RSS = residual . T . dot ( residual ) # Plot. ax . plot ( Xs , t_true , color = \"black\" , label = \"$t=\\sin(2\\pi x)$\" ) ax . plot ( Xs , t_pred , color = \"red\" , label = f \"prediction ($M= {M} $)\" ) ax . scatter ( x , t , edgecolors = 'blue' , facecolor = \"white\" , label = \"train data\" ) ax . set_title ( f \"Results (RSS=$ {RSS:.3f} $,M=$ {M} $,$\\lambda= {lambda_} $)\" ), ax . set_xlabel ( \"$x$\" ), ax . set_ylabel ( \"$t$\" ) ax . set_xlim ( 0 , 1 ), ax . set_ylim ( - 1.2 , 1.2 ) ax . legend () plt . tight_layout () plt . show () Section4.4 Bayesian Inference Maximal Likelihood Estimate $$ l(\\boldsymbol{\\theta}|D) = \\log L(\\boldsymbol{\\theta}|D) = \\log\\mathbb{P}(D|\\boldsymbol{\\theta})\\\\ \\hat{\\boldsymbol{\\theta}}_{\\text{ML}} = \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}l(\\boldsymbol{\\theta}|D) $$ ※ $l$: large → High probability of observing $D$ from the model $\\boldsymbol{\\theta}$ Maximum a Posteriori Estimate Maximum a posteriori estimate $$ \\begin{aligned} \\hat{\\boldsymbol{\\theta}_{\\text{MAP}}} &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}f(\\boldsymbol{\\theta}|D)\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}f(D|\\boldsymbol{\\theta})f(\\boldsymbol{\\theta})\\\\ &= \\underset{\\boldsymbol{\\theta}}{\\text{argmax}}\\left\\{l(\\boldsymbol{\\theta}|D) L \\log f(\\boldsymbol{\\theta})\\right\\}\\\\ \\end{aligned} $$ Posterior mean estimate $$ \\hat{\\boldsymbol{\\theta}_{\\text{PME}}} = \\int\\boldsymbol{\\theta}f(\\boldsymbol{\\theta}|D)d\\boldsymbol{\\theta} $$ Implementation of Gaussian Prior for Regression. In [12]: seed = 123 In [13]: from kerasy.ML.linear import BayesianLinearRegression from kerasy.utils.preprocessing import GaussianBaseTransformer from kerasy.utils.data_generator import generateSin , generateGausian In [14]: N = 25 ; D = 1 ; M = 25 xmin = 0 ; xmax = 1 In [15]: alpha = 1 beta = 25 In [16]: x_test = np . linspace ( xmin , xmax , 1000 ) y_test = np . sin ( 2 * np . pi * x_test ) x_train , y_train = generateSin ( size = N , xmin = xmin , xmax = xmax , seed = seed ) _ , y_noise = generateGausian ( size = N , x = x_train , loc = 0 , scale = 1 / beta , seed = seed ) y_train += y_noise In [17]: # transform mu = np . linspace ( xmin , xmax , M ); sigma = 0.1 phi = GaussianBaseTransformer ( mu = mu , sigma = sigma ) x_train_features = phi . transform ( x_train ) x_test_features = phi . transform ( x_test ) In [18]: random_idx = np . random . RandomState ( seed ) . choice ( N , N ) In [19]: fig = plt . figure ( figsize = ( 16 , 8 )) for i , n in enumerate ([ 1 , 2 , 4 , 25 ]): ax = fig . add_subplot ( 2 , 2 , i + 1 ) model = BayesianLinearRegression ( alpha = alpha , beta = beta ) model . fit ( x_train_features [ random_idx [: n ]], y_train [ random_idx [: n ]]) y_pred , y_std = model . predict ( x_test_features ) ax . plot ( x_test , y_test , color = \"black\" , label = \"$\\sin(2\\pi x)$\" ) ax . plot ( x_test , y_pred , color = \"red\" , label = \"predict($\\mu$)\" ) ax . fill_between ( x_test , y_pred - y_std , y_pred + y_std , color = \"pink\" , alpha = 0.5 ) ax . scatter ( x_train [ random_idx [: n ]], y_train [ random_idx [: n ]], s = 150 , edgecolors = 'black' , facecolor = \"white\" , label = \"train data\" ) ax . set_ylim ( - 1.5 , 1.5 ), ax . legend (), ax . set_title ( f \"Bayesian Linear Regression (N= {n} )\" ) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-4.html"},{"title":"レポート課題3(10/17出題)","text":"2zbM+abBKrWc3KT68xCAPQ==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report3.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report3.html"},{"title":"連続最適化(2)制約付き最適化","text":"講師： 佐藤一誠 参考書： 最適化手法 参考書： 機械学習のための連続最適化 講義概要 等式制約付き最適化問題 ラグランジュ未定乗数法 ラグランジュ双対問題 双対変数の最適化 不等式制約付き最適化問題 制約なし最適化問題への変換 双対問題 まとめ 制約付き最適化問題(constrained optimization problem) \\(\\mathcal{X}\\subset\\mathbb{R}&#94;d\\) 上に定義される関数 \\(f:\\mathcal{X}\\rightarrow\\mathbb{R}\\) の最小値を求める。 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ &h(\\mathbf{x})\\leq\\mathbf{0} \\end{aligned} $$ \"subject to\"は、 「…を条件として」 という意味。 \\(g_i,h_i\\) は互いに 一次独立(linearly independent) であると仮定。 実行可能解(feasible solution) ：全ての制約条件を満たす \\(\\mathbf{x}\\) 凸最適化問題(convex optimization problem) ：関数 \\(f\\) が凸、集合 \\(\\mathcal{X}\\) が凸、制約条件 \\(\\mathbf{g},\\mathbf{h}\\) が凸であれば、最適値が一意に定まる。 ※ 以下、凸最適化問題を考える。 等式制約付き最適化問題 等式制約付き最適化問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ \\end{aligned} $$ \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) + c_k\\|\\mathbf{g}(x)\\|&#94;2$$ \\(c_k\\) の値を徐々に増やしていく。 $$0 < c_1 < c_2 < \\cdots$$ ラグランジュ未定乗数法 詳しくは ラグランジュ未定乗数法 に記載されているので、ここでは具体例を紹介する。 問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{min : }}&3x&#94;2 + 2y&#94;2\\\\ \\text{subject to : }&x+y=1\\\\ \\end{aligned} $$ 解答 ラグランジュ関数は、 $$L(x,y,\\lambda) = 3x&#94;2 + 2y&#94;2 + \\lambda(x+y-1)$$ となるから、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x} &= 6x+\\lambda=0 &\\therefore x = -\\frac{1}{6}\\lambda\\\\ \\frac{\\partial L}{\\partial y} &= 4y+\\lambda=0 &\\therefore y = -\\frac{1}{4}\\lambda\\\\ \\frac{\\partial L}{\\partial \\lambda} &= x+y-1=0 &\\therefore \\lambda = -\\frac{12}{5}\\\\ \\end{aligned} $$ よって、 \\((x,y) = (0.4,0.6)\\) ラグランジュ双対問題 これも、詳しくは ラグランジュ双対問題 に記載されているので、ここでは具体例を紹介する。 問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{min : }}&3x&#94;2 + 2y&#94;2\\\\ \\text{subject to : }&x+y=1\\\\ \\end{aligned} $$ 解答 ラグランジュ関数は、 $$L(x,y,\\lambda) = 3x&#94;2 + 2y&#94;2 + \\lambda(x+y-1)$$ となるから、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial x} &= 6x+\\lambda=0 &\\therefore x = -\\frac{1}{6}\\lambda\\\\ \\frac{\\partial L}{\\partial y} &= 4y+\\lambda=0 &\\therefore y = -\\frac{1}{4}\\lambda \\end{aligned} $$ よって、これらを \\(L(x,y,\\lambda)\\) に代入して、 $$\\omega(\\lambda) = \\underset{x,y\\in\\mathbb{R}}{\\inf}L(x,y,\\lambda) = -\\frac{5}{24}\\lambda&#94;2-\\lambda$$ したがって、 \\(\\underset{\\lambda\\in\\mathbb{R}}{\\text{argmax}}\\omega(\\lambda) = -\\frac{12}{5}\\Longrightarrow(x,y) = (0.4,0.6)\\) 双対変数の最適化 上の問題では、双対変数 \\(\\lambda\\) の最適化問題を解析的に解けたが、解析的に解くことができない問題もある。その場合に使うのが 双対上昇法 や 乗数法 と呼ばれる 双対変数の勾配上昇 を行う手法である。 手法 数式 解説 双対上昇法 $$\\begin{aligned}\\mathbf{x}_{k+1} &= \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}L(\\mathbf{x},\\boldsymbol{\\lambda}_{k})\\\\\\boldsymbol{\\lambda}_{k+1} &= \\boldsymbol{\\lambda}_k + \\varepsilon_k\\nabla\\omega(\\mathbf{\\boldsymbol{\\lambda}}_k) \\\\&= \\boldsymbol{\\lambda}_k + \\varepsilon_k\\mathbf{g}(\\mathbf{x}_{k+1})\\end{aligned}$$ 適当な初期値から，ラグランジュ関数の最小化と双対変数の勾配上昇を交互に実行 乗数法 $$\\begin{aligned}\\mathbf{x}_{k+1} &= \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}L_c(\\mathbf{x},\\boldsymbol{\\lambda}_{k})\\\\\\boldsymbol{\\lambda}_{k+1} &= \\boldsymbol{\\lambda}_k + c\\nabla\\omega(\\mathbf{\\boldsymbol{\\lambda}}_k) \\\\&= \\boldsymbol{\\lambda}_k + c\\mathbf{g}(\\mathbf{x}_{k+1})\\end{aligned}$$ 適当な初期値から， 拡張ラグランジュ関数 の最小化と双対変数の勾配上昇を交互に実行 なお、 拡張ラグランジュ関数(augmented Lagrangian) は、以下で表される関数で、二次の項を加えることで凸性を増している。 $$L_c(\\mathbf{x},\\boldsymbol{\\lambda}) = f(\\mathbf{x}) + \\boldsymbol{\\lambda}&#94;T\\mathbf{g}(\\mathbf{x}) + \\frac{c}{2}\\|\\mathbf{g}(\\mathbf{x})\\|&#94;2$$ ※実装は レポート課題3 に記載。 不等式制約付き最適化問題 $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&h(\\mathbf{x})\\leq\\mathbf{0}\\\\ \\end{aligned} $$ 実行可能解 \\(\\mathbf{x}\\) において \\(h_i(\\mathbf{x}) = 0\\) の時、この制約を 有効制約(active constraint) と呼ぶ。 実行可能解 \\(\\mathbf{x}\\) においてそれ以外の時、この制約を 無効制約(inactive constraint) と呼ぶ。 制約なし最適化問題への変換 障壁法(barrier method) 初期値を \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の制約なし最適化問題を解く。 $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) - c_k\\log(-h(\\mathbf{x}))$$ \\(c_k\\) の値を徐々に減らしていく。 途中の解 \\(\\mathbf{x}_{k+1}\\) が常に \\(h(\\mathbf{x}_{k+1})\\leq0\\) を満たす （つまり、実行可能領域の内側にある） ことから、 内点法(interior-point method) ともよばれる。 \\(c_k\\) の決め方が難しい。 罰則法(penalty method) 初期値を \\(\\mathbf{x}_k\\) に設定して、勾配法や準ニュートン法などで以下の制約なし最適化問題を解く。 $$\\mathbf{x}_{k+1} = \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{argmin}}f(\\mathbf{x}) + c_k\\max(0,h(\\mathbf{x}))&#94;2$$ \\(c_k\\) の値を徐々に増やしていく。 途中の解 \\(\\mathbf{x}_{k+1}\\) が一般に \\(h(\\mathbf{x}_{k+1})>0\\) を満たす （つまり、実行可能領域の外側にある） ことから、 外点法(exterior-point method) ともよばれる。 \\(c_k\\) の決め方が難しい。 射影勾配法(projected gradient method) 勾配降下（ \\(\\tilde{\\mathbf{x}}_{k+1} = \\mathbf{x}_k-\\varepsilon_k\\nabla f(\\mathbf{x}_k)\\) ）と実行可能領域への射影（ \\(\\mathbf{x}_{k+1} = \\mathbf{P}_k\\tilde{\\mathbf{x}}_{k+1}\\) ）を繰り返す。 まとめると $$\\mathbf{x}_{k+1} = \\mathbf{P}_k\\left(\\mathbf{x}_k - \\varepsilon_k\\nabla f(\\mathbf{x}_k)\\right)$$ 射影が簡単に計算できる時、効率が良い。 双対問題 詳しくは ラグランジュ未定乗数法 に記載。 まとめ 制約付き最適化問題： $$ \\begin{aligned} \\underset{\\mathbf{x}\\in\\mathcal{X}}{\\text{minimization : }}&f(\\mathbf{x})\\\\ \\text{subject to : }&g(\\mathbf{x})=\\mathbf{0}\\\\ &h(\\mathbf{x})\\leq\\mathbf{0} \\end{aligned} $$ ラグランジュ関数： $$L\\left(\\mathbf{x},\\boldsymbol{\\lambda},\\boldsymbol{\\mu}\\right) = f(\\mathbf{x}) + \\boldsymbol{\\lambda}&#94;Tg(\\mathbf{x}) + \\boldsymbol{\\mu}&#94;Th(\\mathbf{x})$$ 双対問題： $$ \\begin{aligned} \\underset{\\boldsymbol{\\lambda,\\mu},\\ \\mathbf{x}\\in\\mathcal{X}}{\\text{maximization : }}&L\\left(\\mathbf{x},\\boldsymbol{\\lambda},\\boldsymbol{\\mu}\\right)\\\\ \\text{subject to : }&\\boldsymbol{\\mu}\\geq\\mathbf{0}\\\\ \\end{aligned} $$ KKT条件： $$ \\begin{aligned} \\begin{cases} \\nabla_{\\mathbf{x}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) = \\mathbf{0}\\\\ \\nabla_{\\boldsymbol{\\lambda}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) = \\mathbf{0} & \\boldsymbol{\\mu}&#94;{\\ast}\\geq\\mathbf{0}\\\\ \\nabla_{\\boldsymbol{\\mu}}L\\left(\\mathbf{x}&#94;{\\ast},\\boldsymbol{\\lambda}&#94;{\\ast},\\boldsymbol{\\mu}&#94;{\\ast}\\right) \\leq \\mathbf{0} & \\mu_i&#94;{\\ast}h_i(\\mathbf{x}&#94;{\\ast}) = 0,\\ \\forall i \\end{cases} \\end{aligned} $$ .prompt { /* This is for jupyter blog.*/ min-width: 0; /* This padding is tuned to match the padding on the CodeMirror editor. */ padding: 0em 0.4em 0em 0em; margin: 0px; font-family: monaco; } /*蛍光ペン(pink)*/ .marker-pink { color: #c45a5a; background: linear-gradient(transparent 70%, #ff66ff 60%); font-weight: bold; } /*蛍光ペン(blue) & hover info*/ .marker-info { color: #5C7DC4; background: linear-gradient(transparent 70%, #66FFCC 60%); font-weight: bold; position: relative; cursor: pointer; } .marker-info:hover:before { opacity: 1; z-index: 2; } .marker-info:before { content: attr(aria-label); opacity: 0; position: absolute; top: 30px; right: -90px; font-size: 14px; width: 300px; padding: 10px; color: #fff; background-color: #555; border-radius: 3px; pointer-events: none; } /* 枠囲み */ .frame { border: solid 1.0px #000000; padding: 0.5em 1em; margin: 2em 0; } /* 暗記用 question box */ span .qbox{ display: none; } span.qbox-wrapper:hover .qbox-default{ display: none; } span.qbox-wrapper:hover .qbox{ display: inline; } .qbox-wrapper{ font-weight: bold; padding: 5px 10px; border-radius: 5px; border: solid 2px #000000; margin: 5px } .qbox-wrapper:hover{ text-shadow: 0px 0px 6px rgba(255, 255, 255, 1); -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57); transition: all 0.4s ease 0s; } /* 画像吹き出し */ .balloon { display: table; width: 100%; } .balloon_img { display: table-cell; vertical-align: middle; width: 50%; padding-right: 10px; } .balloon_comment { border: #83274e solid 4px; position: relative; background: #fff; padding: 12px; border-radius: 13px; display: block } .balloon_comment::before { content: \"\"; position: absolute; border-right: 23px solid #83274e; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -23px; } .balloon_comment::after { content: \"\"; position: absolute; border-right: 24px solid #fff; border-bottom: 20px solid transparent; border-top: 20px solid transparent; top: 30%; left: -17px; } if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-3.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-3.html"},{"title":"RNA-seqデータ解析（バッチスクリプト版）","text":"9KHeSVPGQwjXe/l6aaSH5Q==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-12.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-12.html"},{"title":"RNA-seqデータ解析（対話モード版）","text":"Jj/rLt1uWx5fklkejfJYNw==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-11.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-11.html"},{"title":"ゲノム解析ツールの環境構築","text":"sY5p3H8lq5ed3Y716BrbhQ==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-10.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-10.html"},{"title":"逐次最小問題最適化法(SMO)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt 二次計画問題を解くアルゴリズム概観 アルゴリズム 説明 伝統的な二次計画法のアルゴリズム 計算コスト及びメモリ使用量の面で現実的には厳しい。 チャンキング(chunking) カーネル行列からラグランジュ乗数が $0$ となるデータに対応する行および列を取り除いても、ラグランジュ関数が不変であることを利用し、元々の二次計画問題は、より次元数の小さな問題を順番に解くことで、最終的には $0$ とならないラグランジュ乗数だけを残す、という問題に帰着する。 射影共役勾配法(projected conjugate gradient method) チャンキングを実装する手法 分解法(decomposition method) チャンキングと同様 サイズの小さな二次計画問題を繰り返し解く という手法だが、ここの部分問題の大きさが一定であるため、任意の大きさのデータに対応できる。 逐次最小問題最適化法(SMO;sequential minimal optimization) 分解法の計算コストを削減した手法。たった２つのラグランジュ乗数を含む部分問題を逐次解いていくことで最終的な解を得る。 逐次最小問題最適化法(SMO;sequential minimal optimization) ラグランジュ双対問題 を以下のように定義する。 $$ \\begin{aligned} \\tilde{L}(\\mathbf{a}) &=\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)& (7.10)\\\\ a_n & \\geq 0,\\quad n=1,\\ldots,N & (7.11)\\\\ \\sum_{n=1}&#94;Na_nt_n &= 0 & (7.12) \\end{aligned} $$ 逐次最小問題最適化法(SMO;sequential minimal optimization) は反復法である。 適当な初期値 $\\mathbf{a}&#94;{(0)}$ から出発して、更新 $\\mathbf{a}&#94;{(k)} \\rightarrow \\mathbf{a}&#94;{(k+1)}$ を繰り返す。 この際、 １度には2つの成分しか動かさない。 ここで、$a_p$ と $a_q$ だけ動かすことを考える。 （他の $a_n$ は定数とみなす） この時、制約条件より $$ a_pt_p + a_qt_q = 0-\\sum_{n\\neq p,q} a_nt_n = \\mathrm{const.}$$ が成立する。したがって、 $$ \\frac{\\partial a_q}{\\partial a_p} = -\\frac{t_p}{t_q} =-t_pt_q \\cdots (\\ast)$$ と解析的に偏微分を求めることが可能である。 目的関数 $\\tilde{L}$ の変化量 以下、$K_{ij} = k\\left(\\mathrm{x}_i,\\mathrm{x}_j\\right)$ とおく。ここで、 $$a_p\\mapsto a_p+\\Delta_p, \\quad a_q\\mapsto a_q+\\Delta_q$$ と更新した時、目的関数 $\\tilde{L}$ の変化量 $\\Delta\\tilde{L}$ は、 $$ \\begin{aligned} \\Delta\\tilde{L} &= \\Delta_p + \\Delta_q - \\Delta_pt_p\\sum_{n=1}&#94;Na_nt_nk(\\mathbf{x}_p,\\mathbf{x}_n) - \\Delta_qt_q\\sum_{n=1}&#94;Na_nt_nk(\\mathbf{x}_q,\\mathbf{x}_n)\\\\ &-\\frac{1}{2}\\left[\\Delta_p&#94;2k(\\mathbf{x}_p,\\mathbf{x}_p) + 2\\Delta_p\\Delta_qt_pt_qk(\\mathbf{x}_p,\\mathbf{x}_q) + \\Delta_q&#94;2k(\\mathbf{x}_q,\\mathbf{x}_q)\\right] \\end{aligned} $$ となる。 $(\\ast)$ より $\\Delta_q = -t_pt_q\\Delta_p$ である。 $t_p=t_q(\\Longleftrightarrow\\Delta_q=-\\Delta_p)$ の時と $t_p\\neq t_q$ の時に場合分けをし、それぞれ $\\Delta_p$ で変化量を偏微分して $0$ とおく。 結果は共に等しく、以下で表される。 $$ \\begin{aligned} \\Delta_p &= \\frac{1-t_pt_q + t_p\\left(\\sum_{n=1}&#94;Na_nt_nK_{qn} - \\sum_{n=1}&#94;Na_nt_nK_{pn}\\right)}{K_{pp} - 2K_{pq} + K_{qq}}\\\\ &= \\frac{1-t_pt_q + t_p\\left(y(\\mathbf{x_q}) - y(\\mathbf{x}_q)\\right)}{K_{pp} - 2K_{pq} + K_{qq}}\\\\ \\end{aligned} $$ クリッピング この時、 $t_pa_p+t_qa_q=c$ $a_p\\geq0$ $a_q\\geq0$ が成立していなければならないので、以下を満たすように $\\Delta_p$ の クリッピング を行う必要がある。 $t_p=t_q$ のときは $ 0 \\leq a_p + \\Delta_p \\leq c/t_p$ $t_p=-t_q$ のときは $ \\mathrm{max}\\{0,c/t_p\\}\\leq a_p+\\Delta_p$ 変数の選択方法 最後に、動かす $\\mu_p,\\mu_q$ の選択基準であるが、SMO法の発見者である $John C. Platt$ の論文に従うならば以下の様になる。 $KTT$条件を破る$a_p$を$1$つ目に選ぶ。 続いて、$\\left|y\\left(\\mathbf{x_q}\\right)-y\\left(\\mathbf{x_p}\\right)\\right|$ が最大となる$a_p$を次に選ぶ。 これは、$\\left|y\\left(\\mathbf{x_q}\\right)-y\\left(\\mathbf{x_p}\\right)\\right|$ が大きければそれだけステップ幅も大きくなるため収束が早くなるというヒューリスティックス（直感）である。 これを繰り返して、$\\tilde{L}$ が収束するまで反復を繰り返せば学習完了である。 実装例 kerasy.ML.svm.BaseSVM に記載。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-5.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-5.html"},{"title":"ラグランジュ双対問題","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) はじめに このノートは、 Qiita記事『ラグランジュ双対問題について解説』 を引用しています。 ラグランジュ双対関数 ラグランジアン 次の最小化問題を考える. $$ \\begin{aligned} \\min_{x\\in\\mathbb{R}&#94;n} &~ f_0(x)\\\\ \\mathrm{s.t.} &~ f_i(x)\\le 0,~ i=1,\\ldots,m\\\\ &~ h_i(x)=0, ~i=1,\\ldots, p \\end{aligned} $$ 実行可能領域は 空でない とする この最適化問題の 最適値 を \\(p&#94;\\star\\) と書く 凸性は特に仮定しない 主問題 という ラグランジアンは次のように定義される。 $$L(x, \\lambda, \\nu):=f_0(x)+\\sum_{i=1}&#94;m\\lambda_i f_i(x)+\\sum_{i=1}&#94;p\\nu_i h_i(x)$$ \\(\\lambda_i, \\nu_i\\) はラグランジュ未定乗数 ラグランジュ双対関数 ラグランジュ双対関数は次のように定義される. $$ \\begin{aligned} g(\\lambda,\\nu)&:=\\inf_{x\\in D} L(x, \\lambda, \\nu)\\\\ &=\\inf_{x\\in D} \\left(f_0(x)+\\sum_{i=1}&#94;m\\lambda_i f_i(x)+\\sum_{i=1}&#94;p\\nu_i h_i(x)\\right) \\end{aligned} $$ \\(D:=\\bigcap_{i=0}&#94;m \\mathrm{dom}(f_i) \\cap \\bigcap_{i=1}&#94;p \\mathrm{dom}(h_i)\\) 双対関数は, \\((\\lambda,\\nu)\\) のアフィン関数の各点でのinfになっているため, 必ずconcave(上に凸)となる (もとの問題が凸でなくても) 証明してみた: $$ \\begin{aligned} & g(t\\lambda_a+(1-t)\\lambda_b, t\\nu_a+(1-t)\\nu_b)\\\\ =&\\inf_{x\\in\\mathcal{D}}\\left(tL(x,\\lambda_a,\\nu_a)+(1-t)L(x,\\lambda_b,\\nu_b)\\right)\\\\ \\ge& t\\inf_{x\\in\\mathcal{D}}L(x,\\lambda_a,\\nu_a)+(1-t)L(x,\\lambda_b,\\nu_b)\\\\ =& tg(\\lambda_a,\\nu_a)+(1-t)g(\\lambda_b,\\nu_b) \\end{aligned} $$ 最適値の下限 任意の \\(\\lambda\\ge0, \\nu\\) に対して, 次が成り立つ. \\($g(\\lambda,\\nu)\\le p&#94;\\star\\) 証明: \\(\\tilde{x}\\) を実行可能解とする: \\(f_i(\\tilde{x})\\le 0, h_i(\\tilde{x}) = 0\\) \\(\\lambda\\ge 0\\) を仮定 このとき, \\(L(\\tilde{x},\\lambda,\\nu)\\) の値は, \\(f_0(\\tilde{x})\\) でおさえられる: $$ L(\\tilde{x},\\lambda,\\nu)=f_0(\\tilde{x})+\\underbrace{\\sum_{i=1}&#94;{m}\\lambda_if_i(\\tilde{x})}_{\\le0}+\\underbrace{\\sum_{i=1}&#94;{p}\\nu_ih_i(\\tilde{x})}_{=0}\\le f_0(\\tilde{x}) $$ ゆえに, \\(g(\\lambda, \\nu)\\) は \\(f_0(\\tilde{x})\\) でおさえられる: $$ \\therefore~g(\\lambda, \\nu)=\\inf_{x\\in\\mathcal{D}}L(x,\\lambda,\\nu)\\le L(\\tilde{x},\\lambda,\\nu)\\le f_0(\\tilde{x}) $$ 任意の \\(\\tilde{x}\\) に対して, \\(g(\\lambda, \\nu)\\le f_0(\\tilde{x})\\) が成り立つため, \\(g(\\lambda, \\nu)\\le p&#94;\\star\\) が成り立つ. 結論: 双対関数の値は, 主問題の最適値を超えない 線形近似による解釈 元の主問題と等価な次の最小化問題を考える. $$ \\min_{x}~f_0(x)+\\sum_{i=1}&#94;{m}I_-(f_i(x))+\\sum_{i=1}&#94;{p}I_0(h_i(x)) $$ ただし, \\(I_{-},I_{0}\\) は 指示関数 : $$ I_-(u):=\\begin{cases} 0&u\\le 0\\\\ \\infty& u>0 \\end{cases},~~~ I_0(u):=\\begin{cases} 0&u = 0\\\\ \\infty& u\\ne 0 \\end{cases} $$ 最小化するのが目的であるが, 指示関数は制約を満たさないと無限大になってしまう. この指示関数は, 制約違反に対する不満度 を表していると解釈できる. ここで, \\(I_-(u)\\) を \\(\\lambda_i u (\\lambda_i\\ge 0)\\) \\(I_0(u)\\) を \\(\\nu_iu\\) というように指示関数を近似する. $$ \\min_{x}~L(x,\\lambda,\\nu)=f_0(x)+\\sum_{i=1}&#94;{m}\\lambda_i f_i(x)+\\sum_{i=1}&#94;{p}\\nu_i h_i(x) $$ これは制約違反をソフトに近似したものと考えられる もちろん, 制約を違反するほど不満度は上昇するようになっている 不等式制約に関して, 違反しているとき \\(f_i(x)>0\\) であり, \\(\\lambda_if_i(x)\\ge0\\) 任意の \\(u\\) に関して, \\(\\lambda_iu \\le I_-(u)\\) と \\(\\nu_iu \\le I_0(u)\\) が成り立つため, 双対関数が元の主問題の下限を与えることがわかる 共役関数 \\(f\\) の共役関数 \\(f&#94;\\ast\\) は次で定義される. $$ f&#94;*(y)=\\sup_{x\\in\\mathrm{dom} f}(y&#94;\\top x-f(x)). $$ 共役関数と双対問題には密接な関係がある. ( フェンシェル双対定理 ) たとえば, 機械学習のよくある形 $$ \\min_{w\\in\\mathbb{R}&#94;d} f(Xw)+g(w) $$ の双対問題は, $$ \\max_{\\alpha\\in\\mathbb{R}&#94;n} -f&#94;\\ast(-\\alpha)-g&#94;\\ast(X&#94;\\top\\alpha) $$ というように共役関数を使って表現できる. そのため, 凸共役 を覚えておけば, 形式的に双対問題を導出できる. 証明は簡単で, ラグランジアン \\(L(w,z,\\alpha)=f(z)+g(w)+\\alpha&#94;\\top(z-Xw)\\) を考えて, 双対関数の定義にしたがって \\(w\\in\\mathbb{R}&#94;d,z\\in\\mathbb{R}&#94;n\\) に関して最小化するだけだ. ちなみに, このとき最適解 \\(w&#94;\\star,\\alpha&#94;\\star\\) に関して $$ w&#94;\\star \\in \\partial g&#94;\\ast(X&#94;\\top \\alpha&#94;\\star), \\quad \\alpha&#94;\\star \\in -\\partial f(Xw&#94;\\star) $$ が成立する (KKT条件). ラグランジュ双対問題 双対関数から双対問題へ. ラグランジュ双対問題 ここまでで, 双対関数が主問題の下限を与えることを示した. 自然な疑問は, 「ラグランジュ双対関数から得られる最も良い下限はどれくらいなのか?」ということだ. 最も良い下限は次の最大化問題を解くことで得られる. $$ \\begin{aligned} \\max_{\\lambda,\\nu}~&g(\\lambda,\\nu)\\\\ \\mathrm{s.t.} ~&\\lambda\\ge0 \\end{aligned} $$ $ これは, ラグランジュ双対問題 と呼ばれる 双対実行可能領域: \\((\\lambda,\\nu)\\) に関して, \\(\\lambda\\ge0\\) かつ \\(g(\\lambda,\\nu)>-\\infty\\) \\((\\lambda&#94;\\star,\\nu&#94;\\star)\\) : 双対問題の最適解 \\(d&#94;\\star\\) : 双対問題の最適値 双対問題は必ず凸最適化問題 目的関数が必ずconcaveで, 制約が凸であるため これは, 主問題が凸最適化でなくても成り立つ 弱双対性 $$ d&#94;\\star\\le p&#94;\\star $$ 主問題の凸性にかかわらず, 成り立つ この不等式は, \\(p&#94;\\star, d&#94;\\star\\) が発散しないときに成り立つ \\(p&#94;\\star - d&#94;\\star\\) を 双対ギャップ という よく最適化アルゴリズムの停止条件に使われる \\(p&#94;\\star\\) を求めるのことが難しいときに \\(d&#94;\\star\\) を求めることで, \\(p&#94;\\star\\) の下限を知ることができる 双対問題は必ず凸であるため, 多くの場合効率的に解ける 強双対性 $$ d&#94;\\star=p&#94;\\star $$ 主問題の最適値が双対問題の最適値と一致するという性質 強双対性は常には成り立たない もし主問題が凸, すなわち: $$ \\begin{aligned} \\min_{x\\in\\mathbb{R}&#94;n} &~ f_0(x)\\\\ \\mathrm{s.t.} &~ f_i(x)\\le 0, ~i=1,\\ldots,m\\\\ &~ Ax=b \\end{aligned} $$ で \\(f_0,\\ldots,f_m\\) が 凸なら, たいていは(いつもではない)強双対性が成り立つ. たとえば, SVMの最適化問題は凸であり, 強双対性が成り立つため, 主問題/双対問題のどちらを解いてもよい. スレーター条件 次を満たすような \\(x\\in\\mathrm{relint}(D)\\) が存在することをいう. $$ f_i(x)<0,~i=1,\\ldots,m,~~~Ax=b $$ $ 主問題が凸でスレーター条件を満たすとき, 強双対性が成り立つ スレーター条件は強双対性の十分条件である (必要十分ではない) もし, \\(f_1,\\ldots,f_k\\) がアフィンなら, より弱い条件が成り立てばよい: $$ f_i(x)\\le 0,~i=1,\\ldots,k,~~~f_i(x)<0,~i=k+1,\\ldots,m,~~~Ax=b $$ 言い換えれば, アフィンの不等式制約は等号を含んでもよい 補足: int(内部)とrelint(相対的内部) \\(\\mathrm{int}(S)\\) : Sに含まれる最大開集合 Sから境界上の点を取り除いたもの \\(\\mathrm{relint}(S)\\) : Sによって拘束される線形空間上で, Sから境界上の点を取り除いたもの. intとrelintの違いのイメージとしては, まっすぐな下敷きのような平面を考えたとき, intは下敷きの平面ごと取り除いてしまい空集合になるのに対して, relintは下敷きの縁を削って残った部分. Example1 \\(S=\\lbrace(x_1,x_2)\\mid 0\\le x_1\\le 1,x_2=0\\rbrace\\) $$ \\mathrm{int}(S)=\\emptyset, \\mathrm{relint}(S)=\\{(x_1,x_2)\\mid 0 < x_1 < 1,x_2=0\\}, (\\mathrm{aff}(S)=\\{(x_1,x_2)\\in\\mathbb{R}&#94;2\\mid x_2=0\\}) $$ Example2 \\(S= \\lbrace (x_1,x_2)\\mid 0\\le x_1\\le 1,0\\le x_2\\le 1\\rbrace\\) $$ \\mathrm{int}(S)=\\mathrm{relint}(S)=\\{(x_1,x_2)\\mid 0 < x_1 < 1,0<x_2<1\\}, (\\mathrm{aff}(S)=\\{(x_1,x_2)\\in\\mathbb{R}&#94;2\\}) $$ 最適性条件 特に主問題の凸性を仮定しない. 相補性条件 特に, 強双対性条件を満たすと仮定すると, $$ \\begin{aligned} f_0(x&#94;\\star)&=g(\\lambda&#94;\\star,\\nu&#94;\\star)\\\\ &=\\inf_{x\\in D} \\left(f_0(x)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star h_i(x)\\right)\\\\ &\\le f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star h_i(x&#94;\\star)\\\\ &\\le f_0(x&#94;\\star) \\end{aligned} $$ 1行目: 強双対性 2行目: 双対関数の定義 3行目: \\(\\inf\\) の定義 4行目: \\(\\lambda_i&#94;\\star\\ge0, f_i(x&#94;\\star)\\le0, ~i=1,\\ldots,m\\) と \\(h_i(x&#94;\\star)=0, ~i=1,\\ldots,p\\) 1,3行目と3,4行目を考慮すると, $$ \\sum_{i=1}&#94;m\\lambda_i&#94;\\star f_i(x&#94;\\star)=0. $$ 和の各項は非負であるため, $$ \\lambda_i&#94;\\star f_i(x&#94;\\star)=0,~~~i=1,\\ldots,m. $$ これを相補性条件という もし \\(\\lambda_i&#94;\\star>0\\) なら, \\(f_i(x&#94;\\star)=0\\) もし \\(f_i(x&#94;\\star)<0\\) なら, \\(\\lambda_i&#94;\\star=0\\) KKT条件 (Karush-Kuhn-Tucker条件) 強双対性を仮定すると, \\(x&#94;\\star\\) は \\(L(x,\\lambda&#94;\\star,\\nu&#94;\\star)\\) を最小化するため, \\(x&#94;\\star\\) における勾配は0である: $$ \\nabla f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star \\nabla f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star\\nabla h_i(x&#94;\\star)=0 $$ ゆえに, 最適解で成り立つ式を列挙すると: \\(f_i(x&#94;\\star)\\le 0,~i=1,\\ldots,m\\) \\(h_i(x&#94;\\star)= 0,~i=1,\\ldots,p\\) \\(\\lambda_i\\ge0,~i=1,\\ldots,m\\) \\(\\lambda_i f_i(x&#94;\\star)= 0,~i=1,\\ldots,m\\) \\(\\nabla f_0(x&#94;\\star)+\\sum_{i=1}&#94;m\\lambda_i&#94;\\star \\nabla f_i(x&#94;\\star)+\\sum_{i=1}&#94;p\\nu_i&#94;\\star\\nabla h_i(x&#94;\\star)=0\\) これがいわゆる KKT条件 である. (必要条件) まとめると, 強双対性を満たすなら, 最適解において主変数と双対変数はKKT条件を満たさなければならない. 主問題が凸であるとき, KKT条件は十分条件にもなる. つまり, ある点 \\(\\tilde{x},\\tilde{\\lambda}, \\tilde{\\nu}\\) がKKT条件を満たすなら, \\(\\tilde{x}=x&#94;\\star, \\tilde{\\lambda}=\\lambda&#94;\\star, \\tilde{\\nu}=\\nu&#94;\\star\\) . 十分条件の証明: $$ \\begin{aligned} g(\\tilde{\\lambda},\\tilde{\\nu})&=L(\\tilde{x},\\tilde{\\lambda},\\tilde{\\nu})\\\\ &= f_0(\\tilde{x})+\\sum_{i=1}&#94;m\\tilde{\\lambda}_i f_i(\\tilde{x})+\\sum_{i=1}&#94;p\\tilde{\\nu}_i h_i(\\tilde{x})\\\\ &= f_0(\\tilde{x}) \\end{aligned} $$ 1行目: \\(\\tilde{x}\\) がKKT条件の最後の条件を満たすため 主問題が凸であるため, \\(L(x,\\tilde{\\lambda},\\tilde{\\nu})\\) は \\(x\\) に関して凸である ( \\(\\because\\tilde{\\lambda}_i\\ge0\\) ) \\(\\therefore~L\\) を最小化する \\(x\\) は, 勾配が0である 2行目: ラグランジアンの定義 3行目: \\(\\tilde{x}\\) がKKT条件の2つ目と4つ目を満たすため この式は, 双対ギャップが0であることを意味するため, \\(\\tilde{x},\\tilde{\\lambda}, \\tilde{\\nu}\\) は最適解である. 結論: スレーター条件を満たすとき, KKT条件は最適性の必要十分条件となる if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-4.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-4.html"},{"title":"サポートベクターマシーン(SVM)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: seed = 0 サポートベクターマシーン(SVM) マージン最大化 に基づく線形識別器 カーネル関数と組み合わせることによって非線形な識別も可能 サンプル間の類似度にしか依存しない （→非ベクトルデータの分類にも適用可能 ） まとめ マージン最大化 という方針で誤差関数を定義する。 汎化性能を高めるために、 スラック変数 を導入して ソフトなマージン最大化に緩和 する ラグランジュ未定乗数法 を用いてラグランジュ関数を得る。 各パラメータについて微分する。 ラグランジュ関数に代入して 双対問題 を得る。 SMO法 などを用いて二次計画問題である双対問題を解く。 無効制約のデータ点は識別関数に影響しなくなる。 （SVMが疎になる。） マージン最大化 「個々のデータに関して確率計算をし、何らかの識別面を求める」 のではなく、 「汎化性能の最も高い識別面を直接考える」 そこで、 「マージン最大化」 という方針で識別面を最適化する。（正則化理論・VC理論により正当化されている。） 最も近いデータ $\\phi(\\mathbf{x}_n)$ までの距離（ マージン ）が最大となるような識別面を選ぶ。（ここでは、距離＝ユークリッド距離とする。） 識別面からちょうどマージンの分だけ離れた面上に乗る特徴ベクトル（一般に複数）を、(広義の) サポートベクトル (support vector) と呼ぶ。 学習法の定式化（2クラス分類） ※ 二クラスが線形分離可能であると仮定する。 線形識別関数が $y(\\mathbf{x}) = \\mathbf{w}&#94;T\\phi(\\mathbf{x})+b$ で表され、$y(\\mathbf{x})$ の正負でクラスを識別するとする。 $y(\\mathbf{x})>0$ の時 $t=1$ $y(\\mathbf{x})<0$ の時 $t=-1$ したがって、 $t_ny(\\mathbf{x}_n)>0$ が全てのデータ $(\\mathbf{x}_n,t_n)$ に対して成り立つ （∵特徴空間で線形分離可能） 学習の目的は「パラメータ $\\mathbf{w}$ と $b$ を決定すること」。 データと識別面の最小距離は $1 / \\|\\mathbf{w}\\|$ で表される。（理由は以下） ※ 記述を簡単にするために線形識別問題の場合で考えるが、非線形写像 $\\phi$ を通しても同様の議論が成り立つ。 点 $\\mathbf{x}_n$ から識別面に下ろした垂線の足を $\\mathbf{x}_{n\\perp}$ 点 $\\mathbf{x}_n$ から識別面までの符号付き距離を $d_n$ と定義すると、 $\\mathbf{w}$ が識別面の法ベクトルであるから、 $\\mathbf{x}_{n\\perp} = \\mathbf{x}_n - d_n\\frac{\\mathbf{w}}{\\|\\mathbf{w}\\|}$ と表せる。 $\\mathbf{x}_{n\\perp}$ は識別面上にあるので、$\\mathbf{w}&#94;T\\mathbf{x}_{n\\perp} + b = 0$ が成り立つ。 したがって、 $$\\mathbf{w}&#94;T\\left(\\mathbf{x}_n - d_n\\frac{\\mathbf{w}}{\\|\\mathbf{w}\\|}\\right) + b = 0\\qquad \\therefore d_n = \\frac{\\mathbf{w}&#94;T\\mathbf{x}_n + b}{\\|\\mathbf{w}\\|}$$ として距離 $d_n$ が定義できる。ここで、$(\\mathbf{w},b)\\rightarrow(k\\mathbf{w},kb)$ としても $d_n$ の値は不変なので、 $$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n + b \\right)= 1\\qquad (7.4)$$ とスケーリングしても一般性を失わない。 なお、 このスケーリング下では、全てのデータ $\\mathbf{x}_n$ に対して $$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n + b \\right) \\geq 1\\qquad (7.5)$$ が成り立つ。 ここまでをまとめると、 マージン最大 は、 『$t_n\\left(\\mathbf{w}&#94;T\\mathbf{x}_n+b\\right)\\geq1\\quad(i=1,\\ldots,n)$ という条件下で、$\\frac{1}{2}||\\mathbf{w}||&#94;2$ を最小化する問題』 であると言える。 この制約付き最適化問題を解くために、$(7.5)$ の各制約式ごとにラグランジュ乗数 $a_n\\geq0$ を導入すると、次のラグランジュ関数が得られる。 $$L(\\mathbf{w},b,\\mathbf{a}) = \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2 - \\sum_{n=1}&#94;{N}a_n\\left\\{t_n\\left(\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n) + b\\right) - 1\\right\\}\\qquad (7.7)$$ よって、$\\mathbf{w},b$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) =0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) & (7.8)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_nt_n = 0 \\quad\\therefore\\sum_{n=1}&#94;Na_n&#94;{\\ast}t_n = 0 & (7.9)\\\\ \\end{aligned} $$ が得られる。これらの結果を $(7.7)$ に代入して $\\mathbf{w},b$ を消去すると、元の問題は以下の 双対問題 に変換される。 $$ \\tilde{L}(\\mathbf{a}) =\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.10)$$ なお、$\\mathbf{a}$ は以下の制約を満たす。 $$ \\begin{aligned} a_n & \\geq 0,\\quad n=1,\\ldots,N & (7.11)\\\\ \\sum_{n=1}&#94;Na_nt_n &= 0 & (7.12) \\end{aligned} $$ また、カーネル関数 $k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ は、$k(\\mathbf{x},\\mathbf{x}&#94;{\\prime}) = \\phi(\\mathbf{x})&#94;T\\phi(\\mathbf{x})$ と定義される。 この双対問題は二次計画問題であり、 逐次最小問題最適化法(SMO;sequential minimal optimization) などで解くことができる。 なお、今回の場合、 制約条件が全て線形 であることから 実行可能域が凸領域 であることがわかるので、 任意の局所解が大局解になる。 一旦最適な $\\mathbf{a}$ が求まると、識別関数 $y(\\mathbf{x})$ は、 $$y(\\mathbf{x}) = \\mathbf{w}&#94;{\\ast T}\\phi(\\mathbf{x})+b = \\sum_{n=1}&#94;N a_nt_nk(\\mathbf{x},\\mathbf{x}_n) + b \\qquad (7.13)$$ として表すことができる。ここで、 KKT条件より $a_n=0\\Leftrightarrow t_ny(\\mathbf{x}_n)-1>0$ のデータは識別関数に影響しないので、計算から除外することができる。（SVMが疎になる理由） なお、バイアスパタメータ $b$ は、任意のサポートベクトル $\\mathbf{x}_n$ が $t_ny(\\mathbf{x}_n) = 1$ を満たすことから、 $$ \\begin{aligned} &t;_n\\left(\\sum_{m\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m) + b\\right) = 1 & (7.17)\\\\ &\\therefore b&#94;{\\ast}= \\frac{1}{N_{\\mathcal{S}}}\\sum_{n\\in\\mathcal{S}}\\left(t_n-\\sum_{n\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\right)&(7.18) \\end{aligned} $$ として求めることができる。（数値計算の誤差の影響を小さくするため、$(7.17)$ の両辺に $t_n$ をかけ、全てのサポートベクトルで平均をとった。 In [3]: from kerasy.ML.svm import hardSVC In [4]: n_cls1 = 20 ; n_cls2 = 20 N = n_cls1 + n_cls2 In [5]: train_x = np . concatenate ([ np . random . RandomState ( seed ) . normal ( loc = [ 0.5 , 0 ], scale = [ 0.2 , 0.4 ], size = ( n_cls1 , 2 )), np . random . RandomState ( seed ) . normal ( loc = [ - 0.5 , 0 ], scale = [ 0.2 , 0.4 ], size = ( n_cls2 , 2 )) ]) train_y = np . concatenate ([ np . ones ( shape = n_cls1 ), - np . ones ( shape = n_cls2 ) ]) In [6]: X , Y = np . meshgrid ( np . linspace ( - 1 , 1 , 100 ), np . linspace ( - 1 , 1 , 100 )) In [7]: kernels = [ \"linear\" , \"polynomial\" , \"gaussian\" , \"sigmoid\" , \"laplacian\" , \"inverse_multiquadric\" ] In [8]: n_fig = len ( kernels ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i , kernel in enumerate ( kernels ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) model = hardSVC ( kernel = kernel ) model . fit ( train_x , train_y , max_iter = 1500 , sparse_memorize = False ) Z = np . vectorize ( lambda x , y : model . predict ( np . array ([ x , y ]) . reshape ( 1 , - 1 )))( X , Y ) == 1 ax . pcolor ( X , Y , Z , alpha = 0.3 ) for i in range ( N ): alpha = 1 if i in model . isSV () else 0.3 color = \"red\" if train_y [ i ] == 1 else \"blue\" ax . plot ( train_x [ i , 0 ], train_x [ i , 1 ], marker = \"o\" , color = color , markersize = 10 , alpha = alpha ) ax . set_title ( f \" {kernel} kernel\" ) ax . set_xlim ( - 1 , 1 ), ax . set_ylim ( - 1 , 1 ) plt . tight_layout () plt . show () ソフトマージン ここまで、 「二クラスが線形分離可能である」 という仮定を置いていたが、実際の問題では クラスの分布が重なる場合 があり、そのような場合訓練データを完全に分離する解が汎化能力に優れるとは限らない（というより、過学習する。） そこで、各学習データ $(\\mathbf{x}_n,t_n)$ に対して、 スラック変数 (slack variable) $\\xi_n\\geq 0$ を導入して、 $$ t_ny(\\mathbf{x}_n) \\geq 1 \\Longrightarrow t_ny(\\mathbf{x}_n) \\geq 1 - \\xi_n \\qquad (7.20)$$ と条件を緩める。 （ハードマージンの制約のソフトマージンへの緩和） つまり、 $\\xi_n > 1$ となるデータは誤識別している事になる。 ここでの目標は 『マージンよりも内側（$\\xi_n>0$）のデータ $n$ に対してソフトにペナルティを与えつつマージンを最大化する』 ことである。したがって、次の目的関数を最小化する。 $$C\\sum_{n=1}&#94;N\\xi_n + \\frac{1}{2}\\|\\mathbf{x}_n\\| \\qquad (7.21)$$ なお、$C>0$ は スラック変数を用いて表されるペナルティとマージンの大きさの間の トレードオフを制御するパラメータ である。 したがって、この最小化問題のラグランジュ関数は、新たにラグランジュ乗数 $\\{\\mu_n\\}$ を導入して以下のようになる。 $$L(\\mathbf{w},b,\\boldsymbol{\\xi},\\mathbf{a},\\boldsymbol{\\mu}) = \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2 + C\\sum_{n=1}&#94;N\\xi_n - \\sum_{n=1}&#94;{N}a_n\\left\\{t_n\\left(\\mathbf{w}&#94;T\\phi(\\mathbf{x}_n) + b\\right) - 1 + \\xi_n\\right\\} - \\sum_{n=1}&#94;N\\mu_n\\xi_n\\qquad (7.22)$$ 先程同様 $\\mathbf{w},b,\\xi_n$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) =0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N a_nt_n\\phi(\\mathbf{x}_n) & (7.29)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_nt_n = 0 \\quad\\therefore\\sum_{n=1}&#94;Na_n&#94;{\\ast}t_n = 0 & (7.30)\\\\ \\frac{\\partial L}{\\partial \\xi_n} &= C-a_n-\\mu_n \\quad\\therefore a_n = C-\\mu_n & (7.31) \\end{aligned} $$ が得られる。これらの結果を $(7.22)$ に代入すると、以下の 双対形のラグランジュ関数 が得られる。 $$ \\tilde{L}(\\mathbf{a}) =\\sum_n&#94;Na_n - \\frac{1}{2}\\sum_{n=1}&#94;{N}\\sum_{m=1}&#94;Na_na_mt_nt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.32)$$ これは、先程の $(7.10)$ と同様の形である。なお、制約式は $$ \\begin{aligned} &a;_n \\geq 0,\\mu_n\\geq 0 \\quad n=1,\\ldots,N\\\\ &\\therefore 0\\leq a_n \\leq C & (7.33)\\\\ &\\sum_{n=1}&#94;Na_nt_n = 0 & (7.34) \\end{aligned} $$ である。 なお、バイアスパタメータ $b$ は、サポートベクトルは $a_n>0$ を満たすが、KKT条件より $a_n$ $\\mu_n$ $\\xi_n$ 説明 $a_n=0$ 識別関数に影響を及ぼさない。 $a_n $\\mu_n>0$ $\\xi_n=0$ ちょうどマージン境界上ある。 $a_n=C$ $\\mu_n=0$ $\\xi_n>0$ マージン内に侵入している。 となることから、$0 $$ \\begin{aligned} &t;_n\\left(\\sum_{m\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m) + b\\right) = 1 & (7.36)\\\\ &\\therefore b&#94;{\\ast}= \\frac{1}{N_{\\mathcal{M}}}\\sum_{n\\in\\mathcal{M}}\\left(t_n-\\sum_{n\\in\\mathcal{S}}a_mt_mk(\\mathbf{x}_n,\\mathbf{x}_m)\\right)&(7.37) \\end{aligned} $$ として求めることができる。 In [9]: from kerasy.ML.svm import SVC In [10]: train_x = np . concatenate ([ np . random . RandomState ( seed ) . normal ( loc = [ 0.2 , 0.2 ], scale = [ 0.2 , 0.4 ], size = ( n_cls1 , 2 )), np . random . RandomState ( seed ) . normal ( loc = [ - 0.2 , - 0.2 ], scale = [ 0.3 , 0.2 ], size = ( n_cls2 , 2 )) ]) train_y = np . concatenate ([ np . ones ( shape = n_cls1 ), - np . ones ( shape = n_cls2 ) ]) In [11]: params = [ ( 1e-2 , 1e-2 ),( 1e-2 , 1e0 ),( 1e-2 , 1e2 ), ( 1e1 , 1e-2 ),( 1e1 , 1e0 ),( 1e1 , 1e2 ), ( 1e4 , 1e-2 ),( 1e4 , 1e0 ),( 1e4 , 1e2 ), ] In [12]: n_fig = len ( params ) n_col = 3 n_row = n_fig // n_col if n_fig % n_col ==0 else n_fig//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i ,( C , sigma ) in enumerate ( params ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) model = SVC ( kernel = \"gaussian\" , C = C , sigma = sigma ) model . fit ( train_x , train_y , max_iter = 1500 , sparse_memorize = False ) Z = np . vectorize ( lambda x , y : model . predict ( np . array ([ x , y ]) . reshape ( 1 , - 1 )))( X , Y ) == 1 ax . pcolor ( X , Y , Z , alpha = 0.3 ) for i in range ( N ): alpha = 1 if i in model . isSV () else 0.3 color = \"red\" if train_y [ i ] == 1 else \"blue\" ax . plot ( train_x [ i , 0 ], train_x [ i , 1 ], marker = \"o\" , color = color , markersize = 10 , alpha = alpha ) ax . set_title ( f \"gaussian kernel (C= {C} , $\\sigma= {sigma} $)\" ) ax . set_xlim ( - 1 , 1 ), ax . set_ylim ( - 1 , 1 ) plt . tight_layout () plt . show () 多クラスSVM SVMは本来2クラス識別の為の分類器であるが、これを複数組み合わせるなどの方法によって $K>2$クラスの識別に利用する事が出来る。最もよく用いられる方法は、 one-versus-the-rest方式 と呼ばれる方法であり、「データ $\\mathbf{x}$ が クラス $k$ かそれ以外であるか を識別するSVM $y_k(\\mathbf{x})$ を $K$ クラスそれぞれについて構築し、$ y(\\mathbf{x}) = \\mathop{\\rm arg~max}\\limits_{k}y_k(\\mathbf{x})$ によって $\\mathbf{x}$ のクラスを決定する」 SVM回帰 単純な線形回帰問題においては、次の式で定義される正則化された誤差関数を最小化する。 $$\\frac{1}{2}\\sum_{n=1}&#94;N\\{y_n-t_n\\}&#94;2 + \\frac{\\lambda}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.50)$$ 疎な解を得るために、二条誤差関数を $\\epsilon$ 許容誤差関数($\\epsilon$-insentive error function) で置き換える。つまり、予測値 $y(\\mathbf{x})$ と観測値 $t$ の差が $\\epsilon(>0)$ 未満のときは、$\\epsilon$ 許容誤差関数の値は $0$ となる。$\\epsilon$ 許容誤差関数の簡単な例は、 「許容範囲外の値に関しては線形のコストを生じさせる」 ものである。 $$ \\begin{aligned} E_{\\epsilon}\\left(y(\\mathbf{x})-t\\right) = \\begin{cases} 0 & (\\text{ when }|y(\\mathbf{x} - t)| < \\epsilon)\\\\ |y(\\mathbf{x} - t)| - \\epsilon & (\\text{ otherwise }) \\end{cases}\\qquad (7.51) \\end{aligned} $$ In [13]: squareError = lambda x , y_true : 1 / 2 * ( x - y_true ) ** 2 # Sum of Squares Error function epsilonError = lambda x , y_true , epsilon = 1 : 0 if abs ( x - y_true ) < epsilon else abs ( x - y_true ) - epsilon In [14]: X = np . linspace ( - 2 , 2 , 1000 ) plt . plot ( X ,[ squareError ( x , y_true = 0 ) for x in X ], color = \"black\" , label = \"sum of squares error function\" , linestyle = \"--\" ) plt . plot ( X ,[ epsilonError ( x , y_true = 0 ) for x in X ], color = \"black\" , label = \"$\\epsilon$-insentive error function\" ) plt . scatter ( 0 , 0 , marker = \"x\" , color = \"red\" , label = \"y_true\" ) plt . title ( \"Error function comparison\" , fontsize = 16 ), plt . xlim ( - 2 , 2 ), plt . ylim ( -. 1 , 2 ) plt . xlabel ( \"$x$\" , fontsize = 16 ), plt . ylabel ( \"$E(x)$\" , fontsize = 16 ) plt . legend () plt . show () この $\\epsilon$ 許容誤差関数を用いると、結局次の正則化された誤差関数を最小化することになる。 $$C\\sum_{n=1}&#94;NE_{\\epsilon}\\left(y(\\mathbf{x}_n)-t_n\\right) + \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.52)$$ 分類問題と同様、この最適化問題をスラック変数 $\\xi_n,\\hat{\\xi}_n$ を導入して表現する。 $\\epsilon$ チューブの中に位置するという条件は $y_n-\\epsilon\\leq t_n \\leq y_n+\\epsilon$ と表せるので、チューブの外側にデータ点が存在することを許すような制約条件は以下のようにかける。 $$ \\begin{aligned} t_n&\\leq y(\\mathbf{x}_n) + \\epsilon + \\xi_n & (7.53)\\\\ t_n&\\geq y(\\mathbf{x}_n) - \\epsilon - \\xi_n & (7.54)\\\\ \\end{aligned} $$ よって、スラック変数を用いると、SVM回帰の誤差関数は次のようにかける。 $$C\\sum_{n=1}&#94;N\\left(\\xi_n + \\hat{\\xi}_n\\right) + \\frac{1}{2}\\|\\mathbf{w}\\|&#94;2\\qquad (7.55)$$ したがって、この最小化問題のラグランジュ関数は、ラグランジュ乗数 $a_n,\\hat{a}_n,\\mu_n,\\hat{\\mu}_n$ を導入して以下のようになる。（$y(\\mathbf{x}_n)= \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)+b$） $$ \\begin{aligned} L &=C\\sum_{n=1}&#94;N\\left(\\xi_n+\\hat{\\xi}_n\\right)+\\frac{1}{2}\\|\\mathbf{w}\\|&#94;2-\\sum_{n=1}&#94;N\\left(\\mu_n\\xi_n+\\hat{\\mu}_n\\hat{\\xi}_n\\right)\\\\ &-\\sum_{n=1}&#94;Na_n\\left(\\epsilon + \\xi_n + y_n - t_n \\right)-\\sum_{n=1}&#94;N\\hat{a}_n\\left(\\epsilon + \\hat{\\xi}_n - y_n + t_n\\right) \\qquad (7.56)\\\\ \\end{aligned} $$ これまで同様 $\\mathbf{w},b,\\xi_n,\\hat{\\xi}_n$ について微分して、 $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\mathbf{w}} &= \\mathbf{w}-\\sum_{n=1}&#94;Na_n\\phi(\\mathbf{x}_n)-\\sum_{n=1}&#94;N\\hat{a}_n\\phi(\\mathbf{x}_n)=0 \\quad \\therefore \\mathbf{w}&#94;{\\ast}=\\sum_{n=1}&#94;N \\left(a_n-\\hat{a}_n\\right)\\phi(\\mathbf{x}_n) & (7.57)\\\\ \\frac{\\partial L}{\\partial b} &= -\\sum_{n=1}&#94;N a_n + \\sum_{n=1}&#94;N\\hat{a}_n = 0 \\quad\\therefore\\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right) = 0 & (7.58)\\\\ \\frac{\\partial L}{\\partial \\xi_n} &= C-a_n-\\mu_n \\quad\\therefore a_n + \\mu_n = C & (7.59)\\\\ \\frac{\\partial L}{\\partial \\hat{\\xi}_n} &= C-\\hat{a}_n-\\hat{\\mu}_n \\quad\\therefore \\hat{a}_n + \\hat{\\mu}_n = C & (7.60)\\\\ \\end{aligned} $$ が得られる。これらの結果を $(7.56)$ に代入すると、以下の 双対形のラグランジュ関数 が得られる。 $$ \\begin{aligned} \\tilde{L}(\\mathbf{a},\\hat{\\mathbf{a}}) &= -\\frac{1}{2}\\sum_{n=1}&#94;N\\sum_{m=1}&#94;N\\left(a_n-\\hat{a}_n\\right)\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\\\ &- \\epsilon\\sum_{n=1}&#94;N\\left(a_n + \\hat{a}_n\\right) + \\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right)t_n \\end{aligned} \\qquad (7.61) $$ なお、制約式は $$ \\begin{aligned} 0 \\leq a_n &\\leq C & (7.62)\\\\ 0 \\leq \\hat{a}_n &\\leq C & (7.63) \\end{aligned} $$ である。したがって、新しい入力に対する予測値は $$y(\\mathbf{x}) = \\sum_{n=1}&#94;N\\left(a_n-\\hat{a}_n\\right)k(\\mathbf{x},\\mathbf{x}_n) + b\\qquad (7.64)$$ とカーネル関数のみを用いて計算できることがわかる。 なお、バイアスパタメータ $b$ は次のように計算できる。 $C>a_n>0$ が成り立つデータ点についてはKKT条件より $\\xi_n = 0 \\quad \\therefore \\epsilon+y_n-t_n=0$ が成り立つ。よって、 $$ \\begin{aligned} b &= t_n - \\epsilon - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\\\ &= t_n - \\epsilon - \\sum_{m=1}&#94;N\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.69) \\end{aligned} $$ $C>\\hat{a}_n>0$ が成り立つデータ点についてはKKT条件より $\\hat{\\xi}_n = 0 \\quad \\therefore \\epsilon+y_n-t_n=0$ が成り立つ。よって、 $$ \\begin{aligned} b &= t_n - \\epsilon - \\mathbf{w}&#94;T\\phi(\\mathbf{x}_n)\\\\ &= t_n - \\epsilon - \\sum_{m=1}&#94;N\\left(a_m-\\hat{a}_m\\right)k(\\mathbf{x}_n,\\mathbf{x}_m)\\qquad (7.69) \\end{aligned} $$ なお、このようにして得られた $b$ の値を全て平均した結果を用いると数値誤差の影響を小さくできる。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-3.html"},{"title":"ラグランジュ未定乗数法","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 条件なし最適化 ある関数 \\(f\\) が与えられた時、それが最小値を取る点を見つけ出す。 $$\\text{min : } f(\\mathbf{x})$$ したがって、微分をとって \\(0\\) になる点を見つければ良い。 $$\\frac{\\partial}{\\partial x}f(x) = 0\\Longrightarrow x&#94;{\\ast}$$ 等式制約付き最適化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g(\\mathbf{x})=0\\\\ \\end{aligned} $$ ラグランジュ乗数(Lagrangian multiplier) と呼ばれるパラメータ \\(\\lambda\\) を導入した ラグランジュ関数(Lagrangian function) $$L(\\mathbf{x},\\lambda) \\equiv f(\\mathbf{x})+\\lambda g(\\mathbf{x})\\qquad (E.4)$$ の \\(\\mathbf{x}\\) と \\(\\lambda\\) の両方に対する停留点（鞍点）を見つければ、制約付き問題の最適解が得られる。 理由 以下２つの理由より、 \\(\\nabla f\\) と \\(\\nabla g\\) は、 向きが逆の場合も含めて 平行なベクトルとなる。したがって、 あるパラメータ \\(\\lambda\\neq0\\) が存在して、 $$\\nabla f + \\lambda\\nabla g = 0\\qquad (E.3)$$ が成立しなければならない。これは、 \\(\\nabla_{\\mathbf{x}}L=0\\) と表されることがわかる。また、 \\(\\partial L/\\partial\\lambda = 0\\) より、制約式 \\(g(\\mathbf{x})=0\\) も導かれる。 1) \\(\\nabla g(\\mathbf{x})\\) が制約面 \\(g(\\mathbf{x})=0\\) に対して常に垂直 制約面 \\(g(\\mathbf{x})\\) 上の点 \\(\\mathbf{x}\\) と \\(\\mathbf{x}+\\boldsymbol{\\varepsilon}\\) を考える。 すると、 \\(\\mathbf{x}\\) の周りでの \\(g(\\mathbf{x})\\) のテイラー展開より、 $$g(\\mathbf{x} + \\boldsymbol{\\varepsilon}) \\sim g(\\mathbf{x}) + \\boldsymbol{\\varepsilon}&#94;T\\nabla g(\\mathbf{x})\\qquad (E.2)$$ いま、 \\(\\mathbf{x}\\) と \\(\\mathbf{x}+\\boldsymbol{\\varepsilon}\\) は共に制約面上に存在するので $$g(\\mathbf{x})=g(\\mathbf{x}+\\boldsymbol{\\varepsilon})=0$$ が成り立つ。ゆえに、 \\(\\|\\boldsymbol{\\varepsilon}\\|\\rightarrow0\\) の極限では \\(\\boldsymbol{\\varepsilon}&#94;T\\nabla g(\\mathbf{x})\\sim0\\) が成り立つ。 \\(\\boldsymbol{\\varepsilon}&#94;T\\) は制約面上の接線である。 より、ベクトル \\(\\nabla g(\\mathbf{x})\\) は制約面 \\(g(\\mathbf{x})=0\\) に対して垂直である。 2) \\(\\nabla f(\\mathbf{x}&#94;{\\ast})\\) も制約面に対して垂直 もし \\(\\nabla f(\\mathbf{x}&#94;{\\ast})\\) が制約面に対して垂直でないとすると、制約面にそって \\(f(\\mathbf{x})\\) の値がさらに大きくなるように点を動かすことができるはずである。 したがって、制約面上の点で \\(f(\\mathbf{x})\\) を最大化する点 \\(\\mathbf{x}&#94;{\\ast}\\) においては、ベクトル \\(\\nabla f(\\mathbf{x})\\) も制約面に対して垂直でなければならない。 不等式制約付き最適化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g(\\mathbf{x})\\leq0\\\\ \\end{aligned} $$ ここで、解 \\(\\mathbf{x}&#94;{\\ast}\\in\\Omega\\) には、 無効制約(inactive constraint) \\(\\overset{\\text{def}}{\\Longleftrightarrow}g(\\mathbf{x}&#94;{\\ast}) < 0\\) 有効制約(active constraint) \\(\\overset{\\text{def}}{\\Longleftrightarrow}g(\\mathbf{x}&#94;{\\ast}) = 0\\) の2つの可能性がある。 $$ \\Omega:= \\left\\{\\mathbf{x}\\in\\mathbb{R}&#94;D: g(\\mathbf{x})<0 \\right\\} $$ 無効制約の場合 無効制約 \\(\\left(g(\\mathbf{x})<0\\right)\\) の場合、関数 \\(g(\\mathbf{x})\\) は何も制約を課していないのと同様なので、停留条件は単に \\(\\nabla f(\\mathbf{x}) = 0\\) となる。 なお、これは上記の 等式制約におけるラグランジュ関数 \\((E.4)\\) において \\(\\lambda=0\\) とした場合の停留条件に等しい。 有効制約の場合 有効制約 \\(\\left(g(\\mathbf{x})=0\\right)\\) の場合、 等式制約におけるラグランジュ関数 \\((E.4)\\) において \\(\\lambda\\neq0\\) とした場合の停留条件に等しい。 ただし、 \\(-\\nabla f(\\mathbf{x}&#94;{\\ast})\\) は \\(g(\\mathbf{x})<0\\) の外側へと向かうはず だから、 あるパラメータ \\(\\lambda>0\\) が存在して、 $$\\nabla f(\\mathbf{x}) = -\\lambda\\nabla g (\\mathbf{x})$$ が成立しなければならない。 勾配 意味 最適化問題における問題における意味 \\(\\nabla f(\\mathbf{x})\\) \\(f\\) が大きくなる方向 目的とは別の方向 \\(\\nabla g(\\mathbf{x})\\) \\(g\\) が大きくなる方向 \\(g(\\mathbf{x})<0\\) の外側へと向かう方向 KKT条件 上記の無効制約・有効制約のどちらの場合にせよ、 \\(\\lambda g(\\mathbf{x})=0\\) が成立することがわかる。 したがって、 \\(g(\\mathbf{x})\\leq0\\) という制約の下で \\(f(\\mathbf{x})\\) を最小化するには、以下の Karush-Kuhn-Tucker(KKT)条件 のもとで、 \\(\\mathbf{x},\\lambda\\) に関して ラグランジュ関数 \\((E.4)\\) の停留点を求めれば良い。 $$ \\begin{aligned} \\begin{cases} \\text{Primal feasibility} &g(\\mathbf{x})\\leq0 & (E.9)\\\\ \\text{Dual feasibility} &\\lambda \\geq 0 & (E.10)\\\\ \\text{Complementary slackness} &\\lambda g(\\mathbf{x}) = 0 & (E.11) \\end{cases} \\end{aligned} $$ なお、当然ではあるが、「制約条件の符号の向き」と「目的関数の最大化・最小化」には以下の関係がある。（ \\(\\lambda\\geq0\\) ） 目的関数 \\(f(\\mathbf{x})\\) 制約条件 \\(g(\\mathbf{x})\\) ラグランジュ関数 \\(L(\\mathbf{x},\\lambda)\\) \\(\\min f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\leq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) + \\lambda g(\\mathbf{x})\\) \\(\\min f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\geq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) - \\lambda g(\\mathbf{x})\\) \\(\\max f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\leq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) - \\lambda g(\\mathbf{x})\\) \\(\\max f(\\mathbf{x})\\) \\(g(\\mathbf{x})\\geq0\\) \\(L(\\mathbf{x},\\lambda) = f(\\mathbf{x}) + \\lambda g(\\mathbf{x})\\) 一般化 $$ \\begin{aligned} \\text{min : } & f(\\mathbf{x})\\\\ \\text{subject to : } & g_j(\\mathbf{x})=0 & (j=1,\\ldots,J)\\\\ & h_k(\\mathbf{x})\\leq0 & (k=1,\\ldots,K)\\\\ \\end{aligned} $$ 以下のラグランジュ関数を最適化する。 $$L\\left(\\mathbf{x},\\{\\lambda_j\\},\\{\\mu_k\\}\\right) = f(\\mathbf{x}) + \\sum_{j=1}&#94;J\\lambda_jg_j(\\mathbf{x}) + \\sum_{k=1}&#94;K\\mu_kh_k(\\mathbf{x})\\qquad (E.12)$$ ここで、KKT条件は、以下となる。 $$ \\begin{aligned} \\begin{cases} \\text{Primal feasibility} &g_j(\\mathbf{x})=0,h_k(\\mathbf{x})\\leq0 \\\\ \\text{Dual feasibility} &\\mu_k \\geq 0\\\\ \\text{Complementary slackness} &\\mu_kh_k(\\mathbf{x}) = 0 \\end{cases} \\end{aligned} $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-2.html"},{"title":"カーネル法","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) In [1]: import numpy as np import matplotlib.pyplot as plt 講義の構成 パターン認識 カーネル法の紹介 最適化理論の復習 サポートベクターマシーン パターン認識 対象を識別するルールを訓練データより、自動的に取得する。 各対象を全データ共通次元のベクトルで表現すれば、識別関数 $f(\\mathbf{x})$ は、特徴空間上に定義される。 元の空間 （入力空間） を非線形に写像すれば、写像先 （特徴空間） で線形識別することで非線形識別が達成される。 $$\\phi:\\mathbf{X}\\rightarrow\\mathbb{R}&#94;m$$ どのように写像を定めるかは難しい問題。 カーネル法の紹介 上で紹介した写像を、 類似度関数（カーネル関数） に基づいて決める手法。（例：ガウシアンカーネル $K(\\mathbf{x},\\mathbf{x}&#94;{\\prime}) = \\exp\\left(-\\frac{\\|\\mathbf{x}-\\mathbf{x}&#94;{\\prime}\\|}{\\sigma}\\right)$） 類似度さえ定義できればどのような対象（例：生物学的ネットワーク上のタンパク質の分類）にでも適用できる。 複雑な問題になると非常に高い次元に写像する必要があるが、カーネル関数さえ求められれば写像 $\\phi$ を陽に求める必要はない （カーネルトリック） 。 $k(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ が有効なカーネル関数であるための必要十分条件は、任意の $\\{\\mathbf{x}_n\\}$ に対して、要素が $k(\\mathbf{x}_n,\\mathbf{x}_m)$ で与えられるグラム行列 $\\mathbf{K}$ が半正定値であること。 新しいカーネル関数を定義してそれが有効な関数かを確認するのは大変なので、次の性質を用いて新たな関数を定義することが多い。 新たなカーネル関数を構築するための方法 有効なカーネルとして $k_1(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ と $k_2(\\mathbf{x},\\mathbf{x}&#94;{\\prime})$ が与えられた時、次の関数もやはりカーネル関数として有効である。 $$\\begin{aligned} k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=c k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) & (6.13)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=f(\\mathbf{x}) k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) f\\left(\\mathbf{x}&#94;{\\prime}\\right) & (6.14)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=q\\left(k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.15)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=\\exp \\left(k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.16)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)+k_{2}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right)& (6.17)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{1}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) k_{2}\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) & (6.18)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{3}\\left(\\phi(\\mathbf{x}), \\phi\\left(\\mathbf{x}&#94;{\\prime}\\right)\\right) & (6.19)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=\\mathbf{x}&#94;{\\mathrm{T}} \\mathbf{A} \\mathbf{x}&#94;{\\prime}& (6.20) \\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{a}\\left(\\mathbf{x}_{a}, \\mathbf{x}_{a}&#94;{\\prime}\\right)+k_{b}\\left(\\mathbf{x}_{b}, \\mathbf{x}_{b}&#94;{\\prime}\\right) & (6.21)\\\\ k\\left(\\mathbf{x}, \\mathbf{x}&#94;{\\prime}\\right) &=k_{a}\\left(\\mathbf{x}_{a}, \\mathbf{x}_{a}&#94;{\\prime}\\right) k_{b}\\left(\\mathbf{x}_{b}, \\mathbf{x}_{b}&#94;{\\prime}\\right) & (6.22) \\end{aligned}$$ ※ ここで、それぞれの変数は以下の意味を持つ。 変数 説明 $c>0$ 定数 $f(\\cdot)$ 任意の関数 $q(\\cdot)$ 非負の係数を持つ多項式 $\\phi(\\mathbf{x})$ $\\mathbf{x}$ から $\\mathbb{R}&#94;{M}$ への関数 $k_3(\\cdot,\\cdot)$ $\\mathbb{R}&#94;{M}$ で定義された有効なカーネル $\\mathbf{A}$ 対象な半正定値行列 $\\mathbf{x}_a,\\mathbf{x}_b$ $\\mathbf{x}=(\\mathbf{x}_a,\\mathbf{x}_b)$ であるような変数（必ずしも互いに素である必要はない） $k_a,k_b$ それぞれの特徴空間において有効なカーネル関数 カーネル関数の例 $$k(x,x&#94;{\\prime}) = \\boldsymbol{\\phi}(x)&#94;T\\boldsymbol{\\phi}(x&#94;{\\prime}) = \\sum_{i=1}&#94;M\\phi_i(x)\\phi_i(x&#94;{\\prime})\\qquad (6.10)$$ # 多項式 ガウス シグモイド 基底関数 $$\\phi_j(x) = cx&#94;j$$ $$\\phi_j(x) = \\exp\\left\\{-\\frac{(x-\\mu_j)&#94;2}{2s&#94;2}\\right\\}\\qquad(3.4)$$ $$\\begin{aligned}\\phi_j(x) &= \\sigma\\left(\\frac{x-\\mu_j}{s}\\right) & (3.5)\\\\\\sigma(a) &=\\frac{1}{1+\\exp(-a)} & (3.6)\\end{aligned}$$ In [2]: # mapping function def polynomial ( x , d , c = 1 ): return c * x ** d def gaussian ( x , mu , s = 0.1 ): return np . exp ( - (( x - mu ) ** 2 ) / ( 2 * s ** 2 ) ) def logistic ( x , mu , s = 0.1 ): return 1 / ( 1 + np . exp ( - ( x - mu ) / s )) In [3]: # mapping function kernel = lambda phi , x_prime , X , key = None , ** params : np . array ([ sum ([ phi ( x_prime , ** { key : val }) * phi ( x , ** { key : val }) for val in params [ key ]]) for x in X ]) In [4]: params = [ ( polynomial , - 0.5 , \"d\" , np . linspace ( 1 , 11 , 11 )), ( gaussian , 0 , \"mu\" , np . linspace ( - 1 , 1 , 11 )), ( logistic , 0 , \"mu\" , np . linspace ( - 1 , 1 , 11 )), ] In [5]: X = np . linspace ( - 1 , 1 , 1000 ) In [6]: ncol = len ( params ) fig = plt . figure ( figsize = ( 12 , 6 )) for i , param in enumerate ( params ): phi , x_prime , key , vals = param ax_base = plt . subplot2grid (( 5 , ncol ),( 0 , i ), rowspan = 3 ) for val in vals : Y = phi ( X , ** { key : val }) ax_base . plot ( X , Y ) ax_base . set_title ( phi . __name__ ) ax_kernel = plt . subplot2grid (( 5 , ncol ),( 3 , i ), rowspan = 2 ) ax_kernel . plot ( X , kernel ( phi , x_prime , X , key , ** { key : vals })) ax_kernel . scatter ( x_prime , min ( ax_kernel . get_ylim ()), marker = \"x\" , color = \"black\" , label = \"$x&#94;{\\prime}$\" ) ax_kernel . set_xlabel ( \"$x$\" ), ax_kernel . set_title ( \"$k(x,x&#94;{\\prime})$\" ), ax_kernel . legend () plt . tight_layout () plt . show () 様々なカーネル 生物学的配列のカーネル Spectrum kernel (Leslie et al., 2002) Marginalized kernel (Tsuda et al., 2002) Profile kernel (Kuang et al., 2004) Local alignment kernel (Saigo et al., 2004) 木構造に関するカーネル Kernel for phylogenetic profiles (Vert, 2002) Kernel for natural language (Suzuki et al., 2003) Kernel for RNA sequences (Kin et al., 2002) ※ 詳しくは、 Kernel Methods in Computational Biology, MIT Press, 2004 を参照 最適化理論の復習 ラグランジュ未定乗数法 に記載。 サポートベクターマシーン マージン最大化 に基づく線形識別器 カーネル関数と組み合わせることによって非線形な識別も可能 サンプル間の類似度にしか依存しない （→非ベクトルデータの分類にも適用可能） 詳しくは サポートベクターマシン(SVM) に記載。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-3-1.html"},{"title":"生物統計論 第3回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section3.1 Multiple Test Correction \"The more inferences are made, the more likely erroneous inferences are to occur.\" (ex. Even if the type1 error rate is 1% for each data, 10 out of 1000 sample will be rejected on average.) Terminology FWER(Family-wise error rate) : the probability of making at least one type I error (FP) in the family. FDR(False discovery rate) : the expected type I error (FP) rate in rejected data. FDR(False discovery rate) Null hypotheses: $H_1,\\ldots,H_{g_j}$ Alternative hypotheses: $H_{g_j+1},\\ldots,H_g$ Procedure to reject hypotheses : $d_{\\alpha}: \\left(P_1,P_2,\\ldots,P_g\\right)\\rightarrow\\left\\{H_{i_1},\\ldots,H_{i_K}\\right\\}$ Expected ratio of FP in rejected hypotheses: $\\mathrm{FP}=\\sum_{k=1}&#94;K\\mathbb{I}(1\\leq i_k\\leq g_j),\\quad \\mathrm{TP}=K-\\mathrm{FP}$ $\\mathcal{Q} = \\begin{cases}0 & \\text{if }K=(\\mathrm{FP+TP})=0\\\\\\frac{\\mathrm{FP}}{\\mathrm{FP}+\\mathrm{TP}} & \\text{if }K>0\\end{cases}$ $$\\mathrm{FDR}(d_{\\alpha})=\\mathbb{E}\\left(\\mathcal{Q}|H_1,\\ldots,H_g\\right)$$ Methods to counteract this problem Bonferroni Correction Set $\\alpha\\left(=s_{\\alpha}\\leq S_h|H_0\\right)\\leftarrow 1/g\\cdot\\alpha_{\\mathrm{FWER}}$ ($g$: sample size) Therefore, we have: $$\\mathbb{P}\\left(\\{s_{\\alpha}\\leq S_1\\}\\cup\\cdots\\cup\\{s_{\\alpha}\\leq S_g\\}|H_0\\right)\\leq\\sum_{h=1}&#94;g\\mathbb{P}\\left(s_{\\alpha}\\leq S_h|H_0\\right) = g\\cdot\\left(\\frac{1}{g}\\alpha_{\\mathrm{FWER}}\\right) = \\alpha_{\\mathrm{FWER}}$$ Benjamini-Hochberg Procedure (B-H Procedure) If we assume data are distributed independently, we have: $$\\left(P_1,\\ldots,P_g\\right)\\sim\\mathrm{Unif}\\left(0,1\\right)&#94;{\\times g_j}\\times\\mathbb{P}\\left(P|H_{\\text{alternative}}\\right)&#94;{\\times\\left(g-g_j\\right)}$$ We sort the p-value as $p_1\\leq\\cdots\\leq p_g$ Then, $$ \\begin{aligned} d_{\\alpha_{\\mathrm{FDR}}}&#94;{\\mathrm{B-H}}(p_1,\\cdots,p_g) &:=\\mathrm{Reject}\\left\\{H_i|1\\leq i\\max\\left\\{n|p_n\\leq\\left(\\frac{n}{g}\\alpha_{\\mathrm{FDR}}\\right)\\right\\}\\right\\}\\\\ &\\Rightarrow \\mathrm{FDR}\\left(d_{\\alpha_{\\mathrm{FDR}}&#94;{\\mathrm{B-H}}}\\right)\\leq\\alpha_{\\mathrm{FDR}} \\end{aligned} $$ Example. $H_i$ $G_1$ $G_2$ $G_3$ $G_4$ $G_5$ $G_6$ $G_7$ $G_8$ $G_9$ $G_{10}$ $p_i$ $0.1$ $0.4$ $0.8$ $0.035$ $0.9$ $0.04$ $0.001$ $0.002$ $0.6$ $0.7$ In [2]: alpha_FDR = 0.1 g = 10 In [3]: idx = np . array ([ i + 1 for i in range ( g )]) p_value = data = np . array ([ 0.1 , 0.4 , 0.8 , 0.035 , 0.9 , 0.04 , 0.001 , 0.002 , 0.6 , 0.7 ]) q = np . array ([( i + 1 ) / g * alpha_FDR for i in range ( g )]) In [4]: p_value_rank = np . argsort ( p_value ) In [5]: for i in reversed ( range ( g )): if q [ i ] >= p_value [ p_value_rank [ i ]]: break In [6]: print ( f \"Reject: {[f'G {idx} ' for idx in idx[p_value_rank[:i+1]]]}\" ) Reject: ['G7', 'G8', 'G4', 'G6'] Quantile-Quantile plot In [7]: x = - np . log10 ( np . array ([( i + 1 ) / g for i in range ( g )])) y = - np . log10 ( p_value [ p_value_rank ]) In [8]: plt . plot ( x , y , color = \"red\" , label = \"observed\" ) plt . plot (( 0 , min ( x [ 0 ], y [ 0 ])),( 0 , min ( x [ 0 ], y [ 0 ])), color = \"black\" , label = \"$y=x$\" ) plt . title ( \"Quantile-Quantile plot\" ) plt . xlabel ( \"$-\\log_ {10} $ expected P-value\" ) plt . ylabel ( \"$-\\log_ {10} $ observed P-value\" ) plt . legend () plt . grid () plt . show () Section3.2 Probabilistic Models Hypothesis Testing Probabilistic Modeling Models data generation processes in uninteresting scenarios $H_0$ Models data generation processes under interesting biological scenario $H_1$ (possibly as well as $H_0$) Show inconsistency with $H_0$ Check fit of the model to the data Problems of Hypothesis Testing Approaches Difficult to model satisfactory, uninteresting scenarios Does not model interesting biological scenarios A rejected hypothesis does not necessarily tell anything interesting Still useful for many small parts of a full analysis probabilistic Modeling Strong regularity from the probability condition Can include various biological knowledge Adjustable to the quality, amount, randomness of the data Conditional probability makes it easy to integrate multiple models Once a satisfactory model is obtained, we can extract various information from expectation values Powerful general tools are available Maximal Likelihood EM algorithms Bayesian inference MCMC sampling etc... Section3.3 Likelihood Q. How to adjust parameters?? A. Maximize the Likelihood likelihood observed data: $\\mathbf{D} = \\left\\{x&#94;{(h)}|h=1,\\cdots,n\\right\\}$ parametrized model distribution: $\\mathbb{P}(x|\\theta)$ Likelihood: $L(\\theta|D) = \\mathbb{P}(D|\\theta) = \\prod_{h=1}&#94;n\\mathbb{P}\\left(x&#94;{(h)}|\\theta\\right)$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-3.html"},{"title":"レポート課題2(10/10出題)","text":"e+7fWEPPyubswB+RkgG+Zw==;;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report2.html"},{"title":"連続最適化(1)制約なし最適化","text":"講師： 佐藤一誠 参考書： 最適化手法 参考書： 機械学習のための連続最適化 In [1]: import numpy as np import matplotlib.pyplot as plt 講義概要 凸最適化問題 最急降下法 ニュートン法 準ニュートン法 凸最適化問題 凸関数 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、以下が成り立つような関数を 凸関数(convex function) と呼ぶ。 $$f\\left(\\left(1-\\theta\\right)x + \\theta x&#94;{\\prime}\\right)\\leq\\left(1-\\theta\\right)f(x) + \\theta f\\left(x&#94;{\\prime}\\right)$$ $f$ が一階微分可能の時、$f$ が凸関数になるための必要十分条件は、感覚的には接戦が常に関数の下に来ることで、 $$\\forall x,x&#94;{\\prime}\\in\\mathcal{X},\\quad f\\left(x&#94;{\\prime}\\right)\\geq f(x) + \\nabla f(x)&#94;T\\left(x&#94;{\\prime}-x\\right)$$ $f$ が二階微分可能の時、$f$ が凸関数になるための必要十分条件は、 ヘッセ行列(Hessian matrix) $\\nabla&#94;2f(x)$ が 半正定値(positive semi-definite) ↔︎$\\nabla&#94;2f(x)$ の 固有値(eigenvalue) が全て非負 任意の $x,x&#94;{\\prime}\\in\\mathcal{X}$、任意の $\\theta\\in[0,1]$ に対して、$(1-\\theta)x+\\theta x&#94;{\\prime}$ も $\\mathcal{X}$ に属するとき、$\\mathcal{X}$ を 凸集合(convex set) と呼ぶ。$x$ と $x&#94;{\\prime}$ を結ぶ線分上の全ての点が $\\mathcal{X}$ に属するということ。 最適化 最適化問題(optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 最適化アルゴリズム(optimization algorithm)： 収束する点列の生成アルゴリズム 最適性条件：最適化問題の最適解であるための必要条件 制約なし最適化問題(unconstrained optimization problem)： $\\mathcal{X}\\subset\\mathbb{R}&#94;d$ 上に定義される関数 $f:\\mathcal{X}\\rightarrow\\mathbb{R}$ の最小値 $\\underset{\\mathbf{x}\\in\\mathcal{X}}{\\min}f(\\mathbf{x})$ を求めよ。 $f$ を 目的関数(objective function) と呼ぶ。 目的関数は 微分可能(differentiable) と仮定する。 最適性条件：$\\mathbf{x}&#94;{\\star}$ が最適解のとき $$\\nabla f(\\mathbf{x}&#94;{\\star}) = 0$$ 凸最適化問題(convex optimization problem)： 関数 $f$ が凸で集合 $\\mathcal{X}$ も凸 最適解（の集合）が 一意に定まる。 最適解の必要十分条件： 勾配(gradient) がゼロ（凸でない場合は 必要条件 ） 最急降下法 最急降下法(steepest descent method) ※ 勾配法(gradient method)とも。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\quad (\\varepsilon_k>0\\text{ : step size})$$ 凸最適化問題の場合、 大域的最適解(global optimization solution) が求まる 非凸最適化問題の場合、 局所最適解(local optimization solution) しか求められず、様々な初期値から何回か学習して最適解を採用する、ことしかできない。 ステップ幅(step size)の選択 焼きなまし(annealing) ：「最初は大きく、徐々に小さく」。しかし、適切に実装することは容易でない。 正規化(normalization) ：$\\varepsilon_k = \\varepsilon_k&#94;{\\prime}/\\|\\nabla f(\\mathbf{x}_k)\\|$ 勾配が大きいとき安定するが、勾配が小さいときは不安定 厳密直線探索(exact line search) 目的関数の値を最小にするステップ幅を求める。 $$\\underset{\\varepsilon_k>0}{\\min}f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)$$ $f$ が 単峰関数(unimodal function) の場合は、 二分探索法(binary search) や 黄金分割探索(golden section search) などの探索によって最小値を探す。 一般に、一次元の非線形最小化問題を解く必要があるため、最適なステップ幅の探索に時間がかかる。 厳密直線探索を用いた最急降下法は、 一次収束(linear convergence) する。 $$\\text{Q-linear convergence: }\\|\\mathbf{x}_{k+1}-\\mathbf{x}&#94;{\\star}\\| c\\leq \\|\\mathbf{x}_k-\\mathbf{x}&#94;{\\star}\\|&#94;q,\\quad 0 In [2]: ITERATION = 10 N = 100 fsize = 4 In [3]: a = 10 ; b = 1 A = 2 * np . diag ([ a , b ]) func = lambda x , y : a * x ** 2 + b * y ** 2 In [4]: x1min =- 5 ; x1max = 5 ; x2min =- 5 ; x2max = 5 initialX = np . array ([ x1min + 1 , x2max - 2 ]) x1 = np . linspace ( x1min , x1max , N ) x2 = np . linspace ( x2min , x2max , N ) X1 , X2 = np . meshgrid ( x1 , x2 ) Z = func ( X1 , X2 ) In [5]: def find_step_size ( method , f , X , A , ** kwargs ): df = A . dot ( X ) if method == \"fixed\" : epsilon = 1e-1 elif method == \"exact line search\" : epsilon = np . sum ( np . square ( df )) / np . sum ( np . square ( df ) * A . diagonal ()) elif method == \"backtracking line search\" : epsilon = 1 alpha = kwargs [ \"alpha\" ]; beta = kwargs [ \"beta\" ] while True : newX = X - epsilon * df if f ( newX [ 0 ], newX [ 1 ]) - f ( X [ 0 ], X [ 1 ]) <= - alpha * epsilon * np . sum ( np . square ( df )): break epsilon = beta * epsilon return epsilon In [6]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [7]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 例：$f(x) = 1/2\\mathbf{x}&#94;T\\mathbf{Ax}$ $$ \\begin{aligned} \\frac{\\partial f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)}{\\partial\\varepsilon_k} &= \\frac{\\partial}{\\partial\\varepsilon_k}\\frac{1}{2}\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)&#94;T\\mathbf{A}\\left(\\mathbf{x}_k - \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\\\ &= \\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right) - \\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{Ax}_k\\\\ &=0\\\\ \\therefore \\varepsilon_k&#94;{\\star} &= \\frac{\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2}{\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\mathbf{A}\\nabla f\\left(\\mathbf{x}_k\\right)}\\qquad (\\nabla f\\left(\\mathbf{x}_k\\right) = \\mathbf{Ax}) \\end{aligned} $$ バックトラック直線探索(backtracking line search) $\\varepsilon_k=1$ に初期化 アルミホ基準(Armijo rule) ： $$f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right) - f\\left(\\mathbf{x}_k\\right)\\right) \\leq\\alpha\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2$$ が成り立つまで $\\varepsilon_k$ を $\\varepsilon_k\\leftarrow\\beta\\varepsilon_k$ と減衰させる。（$0<\\alpha, \\beta<1$） 目的関数の減少量の線形予測値の $\\alpha$ 倍の減少を保証している。 $f$ の真の減少量： $$g\\left(\\varepsilon_k\\right) = f\\left(\\mathbf{x}_k-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)\\right) - f\\left(\\mathbf{x}_k\\right)$$ $f$ の減少量の 線形予測値 $$\\begin{aligned}\\varepsilon_kg&#94;{\\prime}(0) &=\\varepsilon_k\\cdot\\left( -\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k-0\\cdot\\nabla f\\left(\\mathbf{x}_k\\right)\\right)\\right)\\\\&=-\\varepsilon_k\\nabla f\\left(\\mathbf{x}_k\\right)&#94;T\\nabla f\\left(\\mathbf{x}_k\\right)\\\\&=-\\varepsilon_k\\|\\nabla f\\left(\\mathbf{x}_k\\right)\\|&#94;2 \\end{aligned}$$ In [8]: methods = [ \"fixed\" , \"exact line search\" ] n_methods = len ( methods ) In [9]: fig = plt . figure ( figsize = ( fsize * n_methods , fsize * 2 )) for i , method in enumerate ( methods ): X = initialX ; pX = initialX objective_functions = [] ax_t = fig . add_subplot ( 2 , n_methods , i + 1 ) ax_t . contour ( X1 , X2 , Z , 30 ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"red\" , s = 100 , marker = \"*\" , label = \"initial\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) for it in range ( ITERATION ): epsilon = find_step_size ( method , func , X , A , alpha = 0.5 , beta = 0.8 ) df = A . dot ( X ) X = X - epsilon * df ax_t . plot (( X [ 0 ], pX [ 0 ]), ( X [ 1 ], pX [ 1 ]), color = \"black\" , linestyle = \":\" ) ax_t . scatter ( X [ 0 ], X [ 1 ], color = \"black\" , s = 100 , marker = \"*\" ) objective_functions . append ( func ( X [ 0 ], X [ 1 ])) pX = X ax_t . set_title ( method , fontsize = 18 ), ax_t . set_xlabel ( \"x1\" ), ax_t . set_ylabel ( \"x2\" ) ax_t . legend () sharey = ax_b if i != 0 else None ax_b = fig . add_subplot ( 2 , n_methods , n_methods + i + 1 , sharey = sharey ) ax_b . plot ( objective_functions , color = \"black\" ) ax_b . set_xlabel ( \"iteration\" ), ax_b . set_ylabel ( \"objective function\" ) plt . tight_layout () plt . show () 微分不可能な場合 目的関数 $f$ が 微分不可能(non-differentiable) の場合は、微分の概念を一般化した 劣微分 を用いる。 凸関数 $f$ の $\\mathbf{x}&#94;{\\prime}$ での 劣勾配(sub-gradient) とは、全ての $\\mathbf{x}\\in\\mathcal{X}$ に対して次式を満たす $\\mathbf{\\xi}$ $$f(\\mathbf{x})\\geq f\\left(\\mathbf{x}&#94;{\\prime}\\right) + \\mathbf{\\xi}&#94;T\\left(\\mathbf{x}-\\mathbf{x}&#94;{\\prime}\\right)$$ $f$ が微分可能な時、$\\mathbf{\\xi} = \\nabla f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ 上式を満たす $\\mathbf{\\xi}$ 全体を $\\partial f\\left(\\mathbf{x}&#94;{\\prime}\\right)$ で表し、 劣微分(sub-differential) と呼ぶ。 微分不可能な点では、劣微分のどれかの値を用いる。 ニュートン法 一般にニュートン法という名称は、方程式の解を求めるアルゴリズムを指すが、以下を表すことが多い。 適当に初期値 $\\mathbf{x}_0$ を定める。 $k=0,1,2,\\ldots$ に対して、収束するまで以下を繰り返す。 $$\\mathbf{x}_{k+1} = \\mathbf{x}_k - \\varepsilon_k\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ 勾配法では一階微分しか用いていないので、二階微分も用いることで反復回数を減らすことが狙い。実際 $k$ が十分大きい時、最適解 $\\mathbf{x}&#94;{\\star}$ の近傍で 二次収束(quadratic convergence) するが、逆行列を求める計算コストが大きい。 二次の テーラー展開(Taylor expansion) を用いて $f$ を現在の解 $\\mathbf{x}_k$ の周りで近似 $\\left(f(\\mathbf{x})\\approx f_k(\\mathbf{x})\\right)$ し、その二次近似を最小にする $\\mathbf{x}_k$ に更新する。 $$f_k(\\mathbf{x}) = f(\\mathbf{x}_k) + \\nabla f(\\mathbf{x}_k)&#94;T\\left(\\mathbf{x}-\\mathbf{x}_k\\right) + \\frac{1}{2}\\left(\\mathbf{x}-\\mathbf{x}_k\\right)&#94;T\\nabla&#94;2f(\\mathbf{x}_k)(\\mathbf{x}-\\mathbf{x}_k)$$ $f_k$ の勾配をゼロと置いた方程式 $$\\nabla f_k(\\mathbf{x}) = \\frac{\\partial f_k(\\mathbf{x})}{\\partial \\mathbf{x}}= \\nabla f(\\mathbf{x}_k) + \\nabla&#94;2f(\\mathbf{x}_k)\\left(\\mathbf{x}-\\mathbf{x}_k\\right) = \\mathbf{0}$$ を解けば、$f_k$ の最小解が以下のように求まる $$\\mathbf{x}&#94;{\\star} = \\mathbf{x}_k - \\left(\\nabla&#94;2 f\\left(\\mathbf{x}_k\\right)\\right)&#94;{-1}\\nabla f\\left(\\mathbf{x}_k\\right)$$ なお、ヘッセ行列が逆行列を持たない時は、 単位行列の定数倍を加えて対処する（正則化, regularization） らしい。 $$\\left(\\nabla&#94;2f\\left(\\mathbf{x}_k\\right) + \\mu\\mathbf{I}\\right)&#94;{-1},\\quad\\mu>0$$ 準ニュートン法 ニュートン法の近似。ニュートン法ではヘッセ行列の逆行列を求めるのに計算コストがかかるので、勾配ベクトル $\\nabla f(\\mathbf{x})$ を用いて近似計算する。 BFGSアルゴリズムを用いたヘッセ行列の更新式が有名 なお、 レポート課題 で詳しく記述しているが、BFGSアルゴリズムのヘッセ行列の更新式は以下で表される。 $$ \\mathbf{H}_{k+1} =\\mathbf{H}_k+\\frac{\\mathbf{t}_k\\mathbf{t}_k&#94;T}{\\mathbf{s}_k&#94;T\\mathbf{t}_k}-\\frac{\\mathbf{H}_k\\mathbf{s}_k\\mathbf{s}_k&#94;T\\mathbf{H}_k}{\\mathbf{s}_k&#94;T\\mathbf{H}_k\\mathbf{s}_k} $$ なお、この時 $$ \\begin{aligned} \\begin{cases} \\mathbf{s}_k &= \\mathbf{x}_{k+1} - \\mathbf{x}_k\\\\ \\mathbf{t}_k &= \\nabla f(\\mathbf{x}_{k+1}) - \\nabla f(\\mathbf{x}_k) \\end{cases} \\end{aligned} $$ まとめ 凸最適化問題 目的関数が凸関数で定義域が凸集合 最適解が一意に定まる 最急降下法 勾配を降下するように値を更新 ステップ幅の選択が重要 目的関数が微分不可能な場合は、劣勾配法や近接勾配法を用いる ニュートン法 二階微分の情報を利用する ヘッセ行列の近似を用いる準ニュートン法が実用的 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-2.html"},{"title":"Zuker Algorithm","text":"Free energy minimization of RNA seconary structure. In cells, RNAs are likely to form energetically stable secondary structure. The correctness of secondary structure should be evaluated based on the free energy, rather than the number of base-pairs ( Nussinov Algorithm ) We first describe a way to calculate the free energy of a particular RNA secondary structure. We describe the Zuker algorithm which calculates the RNA secondary structure with the minimum free energy (MFE). Free energy of RNA secondary structure The free energy of a secondary structure is approximated as the sum of the free energy of \"loops\". $$E = \\sum_iE_i$$ The free energy of individual loop is given by experimental data. (ex. $\\mathrm{C-G: }-3.4\\mathrm{kcal/mol}$, $\\mathrm{U-A: }-0.9\\mathrm{kcal/mol}$) Five types of \"loops\" hairpin loop stacking bulge loop internal loop multi-loop F1(i,j) F2(i,j,h,l) Fm=a+bk+cu a,b,c: constant k: the number of base-pairs in a multi-loop u: the number of single stranded nucleotides in a multi-loop Algorithm variable meaning $W(i,j)$ the minimum free energy of subsequence from $i$ to $j$. $V(i,j)$ the minimum free energy of subsequence from $i$ to $j$ when $i$ to $j$ forms a base-pair. $M(i,j)$ the minimum free energy of subsequence closed by two or more base pairs. $M1(i,j)$ the minimum free energy of subsequence closed by one or more base pairs. Recursion $$ \\begin{aligned} W(i,j) &= \\min \\begin{cases} W(i+1,j)\\\\W(i,j-1)\\\\V(i,j)\\\\\\min_{i\\leq k Initialization In [1]: from kerasy.Bio.structure import Zuker from kerasy.utils.bio import readMonoSeq In [2]: model = Zuker () In [3]: # 以下の形のパラメタファイルを受け取ります。 ! cat params.json { \"inf\": 1e3, \"type\": \"RNA\", \"Watson_Crick\": true, \"Wobble\": true, \"hairpin\": [Infinity, Infinity, 4.4, 4.6, 4.7, 4.4, 5.0, 4.5, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 5.9, 6.0, 6.1, 6.1, 6.2, 6.2, 6.3, 6.3, 6.4, 6.4, 6.5, 6.5, 6.5, 6.6, 6.6, 6.7, Infinity], \"internal\": [Infinity, 1.0, 1.0, 1.1, 2.0, 2.0, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9, 3.0, 3.1, 3.1, 3.2, 3.3, 3.3, 3.4, 3.4, 3.5, 3.5, 3.5, 3.6, 3.6, 3.7, 3.7, Infinity], \"buldge\": [1.0, 1.0, 1.0, 1.1, 2.0, 2.0, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9, 3.0, 3.1, 3.1, 3.2, 3.3, 3.3, 3.4, 3.4, 3.5, 3.5, 3.5, 3.6, 3.6, 3.7, 3.7, Infinity], \"a\": 6.0, \"b\": -1.0, \"c\": 0.1, \"stacking_cols\": [\"CG\", \"AU\", \"GU\"], \"stacking_score\": [[-3.0, -2.0, -2.0], [-2.0, -0.5, -0.5], [-2.0, -0.5, -0.5]] } In [4]: model . load_params ( \"params.json\" ) In [5]: model . params () | parameter |value | --------------------- |a | 6.0| |b | -1.0| |c | 0.1| |inf |1000.0| |type | RNA| |Watson_Crick| 1| |Wobble | 1| In [6]: model . stacking_cols Out[6]: array(['CG', 'AU', 'GU'], dtype=' In [7]: model . stacking_score Out[7]: array([[-3.e+00, -2.e+00, -2.e+00, 1.e+03], [-2.e+00, -5.e-01, -5.e-01, 1.e+03], [-2.e+00, -5.e-01, -5.e-01, 1.e+03], [ 1.e+03, 1.e+03, 1.e+03, 1.e+03]]) In [8]: # サンプル配列 sequence = readMonoSeq ( path = \"sample_seq4.fasta\" ) In [9]: print ( sequence ) ['CCACCUCGCCGCGAAGAUUGGAUGUAAUGUUCACUUAAGCCUAGGCGUUCGCAAAGAAAUACCUAUGGUAAUUUGACUAGCGGUAACAAUGAAAGAAAAGGUGUAGGCGAGGUGGG'] In [10]: # 最大ペアの配列 model . predict ( sequence [ 0 ]) Zuker Algorithm Score: -37.5 ================================================================= seq: CCACCUCGCCGCGAAGAUUGGAUGUAAUGUUCACUUAAGCCUAGGCGUUCGCAAAGAAAU : ((((((((((((((((..((((((...)))))))))..((((....((((((..(((((( seq: ACCUAUGGUAAUUUGACUAGCGGUAACAAUGAAAGAAAAGGUGUAGGCGAGGUGGG : (((...))))))))..)).))))..))...........)))))).)))))))))). ================================================================= In [11]: model . W Out[11]: array([[ 0. , 0. , 0. , ..., -34.5, -37.5, -37.5], [ 0. , 0. , 0. , ..., -34.5, -34.5, -34.5], [ 0. , 0. , 0. , ..., -32.5, -32.5, -32.5], ..., [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ]]) In [12]: model . M Out[12]: array([[1000. , 999. , 999. , ..., -35.4, -38.5, -38.4], [1000. , 1000. , 999. , ..., -35.5, -35.4, -35.3], [1000. , 1000. , 1000. , ..., -33.4, -33.3, -33.2], ..., [1000. , 1000. , 1000. , ..., 1000. , 999. , 999. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 999. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ]]) In [13]: model . V Out[13]: array([[1000. , 1000. , 1000. , ..., -31.5, -37.5, -34.5], [1000. , 1000. , 1000. , ..., -34.5, -31.5, -31.5], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], ..., [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ], [1000. , 1000. , 1000. , ..., 1000. , 1000. , 1000. ]]) if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-9.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-9.html"},{"title":"生物物理学 第3回","text":"講師： 樋口秀男 タンパク質の構造と安定性 タンパク質の定義 特定のアミノ酸（20種類）が重合した重合体である。 特定の立体構造をとる。 （これがないと ポリペプチド ） 機能 説明 分子認識 ミオグロビンは酸素を結合。抗体は抗原と結合。 触媒（酵素） 化学反応の反応速度は \\(10&#94;8\\) ~ \\(10&#94;{17}\\) 倍にも加速される。 制御 基質の結合や環境の変化に伴い構造を変化し、タンパク質の反応を制御する。 エネルギー変換 光を電位に換え、ATP分解を力に換える。 構造形成・維持 タンパク質重合体は細胞や細胞内器官の構造を支える。 タンパク質を構成するアミノ酸 d-グリセルアルデヒドの立体配置を基準として、この立体配置を崩さずにできる化合物をD-体、その鏡像異性体がL-体。 ※ タンパク質はL体 構造 名前 略（三文字） 略（一文字） アラニン Ala A アルギニン Arg R アスパラギン Asn N アスパラギン酸 Asp D システイン Cys C グルタミン酸 Glu E グルタミン Gln Q グリシン Gly G ヒスチジン His H イソロイシン Ile I ロイシン Leu L リシン Lys K メチオニン Met M フェニルアラニン Phe F プロリン Pro P セリン Ser S トレオニン Thr T トリプトファン Trp W チロシン Tyr Y バリン Val V # 上記の表は以下のコードを応用して作成した。 url = \"https://ja.wikipedia.org/wiki/タンパク質を構成するアミノ酸\" soup = BeautifulSoup ( requests . get ( url ) . content , 'lxml' ) for li in soup . findAll ( \"li\" , { \"class\" : \"gallerybox\" }): text = str ( li ) . replace ( ' \\n ' , '' ) src = re . findall ( r '<img.*src=\"(.+?)\".*>' , text )[ 0 ] name , l3 , l1 = re . findall ( r '<p>.*title=\"(.+?)\".*<br/>\\((.+?)\\xa0\\/\\xa0(.+?)\\)</p>' , text )[ 0 ] 理論的構造決定法 アミノ酸配列→量子力学→タンパク質の構造とエネルギー状態を決定 シュレディンガー方程式は水素原子のみ解析的に解くことができ、それ以外は近似を行う必要がある。 現在、高精度に計算（第一原理分子動力学法）できるのは1つの構造に対して100原子程度である。 水分子を考慮しなければ、タンパク質の構造や電子軌道を精度よく求めることはできない。 アミノ酸がポリペプチド結合した重合体から機能を持つ立体構造を創り構造を維持するためには、 立体構造が熱力学的に安定でなければならない。 → Gibbs自由エネルギー \\(G\\) を見る。 準安定なのは、 \\(G\\) が極小の時。 最も安定なのは、 \\(G\\) が最小の時。 まとめ 生体の機能を主に担っているのは、タンパク質である。（RNAも機能に重要である。） タンパク質は分子認識・触媒・制御・エネルギー変換・構造形成維持などの機能を有している。 アミノ酸配列から計算によってタンパク質構造を決定することに成功していない。（部分構造はできている。） 酵素機能を行うとき、酵素の多くの場所が構造変化を行う。 第7回目の講義(11/6)の小テスト 指定課題： 第1,2,3回の講義の中で、最も興味のある事柄について300~500字でまとめる。 この事柄と関連する内容を調べるなどして、自分の意見を300~500字で述べる。 図や式を使いわかりやすく説明すること。図や式は文字数に含めない。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-3.html"},{"title":"領域分割","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt import matplotlib.patches as patches # 円を描画 領域分割 色によるクラス分け（画像のみ） k-means法 mean-shift法 色によるクラス分け（画像のみ） 例えば、画素(RGB)や位置(x,y)の似たものをグループ分けする。 二値分類(FG/BG分類)で有名なのが クロマキー （ 青色・緑色 背景） k-means法 予めクラス数 $k$ を指定してクラスタリング。 $k$ 個の代表点をランダムにサンプリング（$k$ 個をデータの中からとってきても良いし、完全にランダムでばらまいても良い。） 全てのデータ点から一番近い代表点を $1$ つ探す。 $k$ 個のグループの重心を計算し、それを新たな代表点とする。 2,3を繰り返す。 In [2]: from kerasy.ML.KMeans import KMeans In [3]: def decomposeImg ( path , K ): imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== KMeans === x = rgb_img . reshape ( - 1 , 3 ) model = KMeans ( K = K , random_state = 0 ) model . fit ( x ) cls , mu = model . predict ( x ) mu = mu . astype ( int ) for k in range ( K ): x [ cls == k ] = mu [ k ] # KMeansed Image. ax_K = fig . add_subplot ( 1 , 2 , 2 ) ax_K . imshow ( x . reshape ( img_shape )) ax_K . set_title ( f \"K= {K} \" ), ax_K . set_xticks ([]), ax_K . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No.{i+1:<0{len(str(K))}}, rgb=({','.join(mu[k].astype(int).astype(str))})\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () In [4]: decomposeImg ( path = \"lenna.png\" , K = 8 ) mean-shift法 画像領域の分割や対象画像の追跡に用いられる手法。 $d$ 次元の特徴量（ex. $\\mathrm{R,G,B},x,y$）を持った $N$ 個のデータ点 $\\mathbf{x}_i$ が分布しているときに、この点群 $\\mathbf{x}_i$ を標本点として得られるような確率密度関数 $f(\\mathbf{x})$ を考え、その標本点から確率密度関数 $f(\\mathbf{x})$ の極大点を探索する手法。 点群が集中している場所は確率密度関数 $f(\\mathbf{x})$ の値が高く、まばらな場所は低くなる。 ある任意の観測点 $\\mathbf{y}_j$ から半径 $h$ の超球を考え、その範囲にある点群 $\\mathbf{x}_i$ の平均 $\\mathbf{x}_c$ を計算し、その位置に観測点 $\\mathbf{y}_{j+1}$ を移動する。 この操作を繰り返すと観測点は最大勾配の方向に移動し、やがて極大点に収束する。 このように、 「近傍の点群の平均(mean)位置に移動(shift)を繰り返し、極大点を求める方法」 から ミーンシフト法(mean-shift) と呼ばれる。 In [5]: fig , ax = plt . subplots ( figsize = ( 6 , 6 )) # Circle r = 0.7 c = patches . Circle ( xy = ( 0 , 0 ), radius = r , ec = 'black' , fill = False ) ax . add_patch ( c ) # Sample Data X , Y = np . random . RandomState ( 123 ) . uniform ( low =- 0.3 , high = 1 , size = ( 2 , 50 )) cls = np . sqrt ( X ** 2 + Y ** 2 ) < r ax . scatter ( X , Y , c = cls , cmap = \"Set1_r\" , alpha = 0.7 ) # Center ax . scatter ( 0 , 0 , color = \"black\" , s = 100 ) ax . text ( 0.05 , - 0.05 , \"$\\mathbf {y} _ {j} $\" , fontsize = 12 ) # Mean mux , muy = np . mean ( X [ cls ]), np . mean ( Y [ cls ]) ax . scatter ( mux , muy , color = \"black\" , marker = '*' , s = 100 ) ax . text ( mux + 0.05 , muy , \"$\\mathbf {x} _c(=\\mathbf {y} _{j+1})$\" , fontsize = 12 ) # Arrow ax . annotate ( '' , xy = ( mux , muy ), xytext = ( 0 , 0 ), arrowprops = dict ( width = 2 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'blue' , edgecolor = 'blue' ) ) # Radius ax . plot (( 0 , 0 ),( 0 , - r ), color = \"black\" ) ax . text ( 0.05 , - r / 2 , \"r\" , fontsize = 12 ) ax . set_xlim ( - 1 , 1 ) ax . set_ylim ( - 1 , 1 ) plt . show () カーネル密度関数を用いた確率密度関数の推定 $d$ 次元空間内の $N$ 個の点群 $\\mathbf{x}_i$ を考える。この点群をある確率分布に従う標本と考えたとき、$d$ 次元空間内の任意の点 $\\mathbf{x}$ における確率密度関数 $f(\\mathbf{x})$ は、以下の方法で推定される。 $$f(\\mathbf{x}) = \\frac{c_{kd}}{Nh&#94;{d}}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)$$ $c_{hd}$ は、確率密度関数 $f(\\mathbf{x})$ 全体の積分を $1$ にするための正規化係数。 $k(t)$ は、カーネル関数 $K(t)$ の プロファイル で、$K(t)=k(|t|&#94;2)$ 以下の２つのカーネルが代表的である。 ガウシアンカーネル(Gaussian) エパネックニコフカーネル(Epanechnikov) $$K(t) = \\exp\\left(-\\frac{\\mid t\\mid&#94;2}{2}\\right)$$ $$K(t) = \\begin{cases}1- \\mid t\\mid&#94;2 & (\\mid t\\mid\\leq1)\\\\0 & (\\text{otherwise})\\end{cases}$$ 確率密度関数の勾配 勾配法(gradient method) を用いて極大点を逐次的に求めるために、確率密度関数の勾配 $\\nabla f(\\mathbf{x})$ を求める。 $$ \\begin{aligned} \\nabla f(\\mathbf{x}) &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;Nk'\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|&#94;2\\right)\\left(\\mathbf{x}-\\mathbf{x}_i\\right)\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\sum_{i=1}&#94;N\\left(g_i\\mathbf{x}_i-g_i\\mathbf{x}\\right), \\quad g(t) = -k'(t),g'(t)=g\\left(\\left|\\frac{\\mathbf{x}-\\mathbf{x}_i}{h}\\right|\\right)&#94;2\\\\ &= \\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\} \\end{aligned} $$ 項 説明 $$\\frac{2c_{kd}}{Nh&#94;{d+2}}\\left\\{\\sum_{i=1}&#94;Ng_i\\right\\}$$ ガウシアンカーネルやエパネックニコフカーネルを用いた場合、正になる。 $$\\left\\{\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{x}\\right\\}$$ ミーンシフト と呼ばれる項で、観測点 $\\mathbf{x}$ の近傍のデータ点群 $\\mathbf{x}_i$ の加重平均位置と $\\mathbf{x}$ 自身の差分ベクトルを示す。 勾配法を用いた極大点探索（ミーンシフト法） 初期化：$\\mathbf{y}_0\\leftarrow\\mathbf{x}$ 更新（ミーンシフト） $$\\mathbf{y}_{j+1}\\leftarrow \\mathbf{y}_j + \\left(\\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}-\\mathbf{y}_j\\right) = \\frac{\\sum_{i=1}&#94;Ng_i\\mathbf{x}_i}{\\sum_{i=1}&#94;Ng_i}$$ $|\\mathbf{y}_{j+1}-\\mathbf{y}_j|<\\text{threshold}$ となるまで2を繰り返す。 収束した $\\mathbf{y}_{j+1}$ を極大点として出力する。 ※ 一般的な勾配法では、更新式 $\\mathbf{y}_{j+1}\\rightarrow\\mathbf{y}_i + \\alpha\\nabla f$ のステップ数 $\\alpha$ を与える必要があるが、ミーンシフト法では ベクトルの大きさは自動的に計算される ので、$\\alpha$ を与える必要がない（らしい…）。 ミーンシフト法を用いたクラスタリングへの応用 $d$ 次元空間中の $N$ 個の点群 $\\mathbf{x}_i$ が与えられた時に、密に分布する点群をクラスタとして分割する。 各点にミーンシフト法を適用し、収束位置 $\\mathbf{x}_i&#94;c$ を計算する。 任意の2個の点 $\\mathbf{x}_i,\\mathbf{x}_j$ について、その収束位置が閾値以下なら（$|\\mathbf{x}_i-\\mathbf{x}_j|<\\text{threshold}$）、この2点を同じ極大点として同じクラスタに入れる。 1,2より、全ての点群 $\\mathbf{x}_i$ を 同じ収束位置（極大点）に属するものごとにクラスタに識別する。 全ての点 $\\mathbf{x}_i$ でこの処理を行わなければならないが、並行化できる。 k-means手法とは異なり、クラスタの数を予め指定する必要がない。 ミーンシフト法を用いたカラー画像の領域分割 カラー画像の $N$ 個の各画素の位置 $\\mathbf{x}_i$ とその画素値 $\\mathbf{v}_i=\\left(R_i,G_i,B_i\\right)$ とし、画素位置-画素値を結合した5次元空間内の点 $\\mathbf{z}_i=(\\mathbf{x}_i,\\mathbf{v}_i)$ を考える。 「距離および色が近い画素が5次元空間内でクラスタを形成している」 とみて、ミーンシフト法で各画素をクラスタリングする。 画素位置に関するバンド幅 $h_s$、画素値に関するバンド幅 $h_r$ を与え、全ての $z_i$ にミーンシフトを行い、収束位置 $\\mathbf{z}&#94;c=(\\mathbf{x}&#94;c,\\mathbf{v}&#94;c)$ を計算する。 $\\mathbf{x}_i$ の画素値を、収束位置の画素の値 $(R&#94;c,G&#94;c,B&#94;c)$ に置き換えることによって、画像の平滑化ができる。 ミーンシフトは、以下の通り計算する。 $$f(\\mathbf{x}) = \\frac{c}{Nh_s&#94;2h_r&#94;3}\\sum_{i=1}&#94;Nk\\left(\\left|\\frac{\\mathbf{x}&#94;s-\\mathbf{x}&#94;s_i}{h_s}\\right|&#94;2\\right)k\\left(\\left|\\frac{\\mathbf{x}&#94;r-\\mathbf{x}&#94;r_i}{h_r}\\right|&#94;2\\right)$$ したがって、以下のとおりに位置を更新する。 $$\\mathbf{y}&#94;{s}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;s\\mathbf{x}_i&#94;s}{\\sum_{i=1}&#94;Ng_i&#94;s},\\quad\\mathbf{y}&#94;{r}_{j+1} = \\frac{\\sum_{i=1}&#94;Ng_{i}&#94;r\\mathbf{x}_i&#94;r}{\\sum_{i=1}&#94;Ng_i&#94;r}$$ $(h_s,h_r)$ のパラメータを大きくすると、より大きな領域に同色が統合され、大まかに分割される。 In [6]: from sklearn.cluster import MeanShift In [7]: import time s = time . time () imgsize = 4 fig = plt . figure ( figsize = ( imgsize * 2 , imgsize * 1 )) path = \"lenna.png\" bgr_img = cv2 . imread ( path ) rgb_img = cv2 . cvtColor ( bgr_img , cv2 . COLOR_BGR2RGB ) img_shape = rgb_img . shape # Original Image. ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( rgb_img ) ax_org . set_title ( f \"Original\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) #=== MeanShift === x = rgb_img . reshape ( - 1 , 3 ) model = MeanShift () model . fit ( x ) cls = model . predict ( x ) mu = model . cluster_centers_ . astype ( int ) K = max ( cls ) + 1 for k in range ( K ): x [ cls == k ] = mu [ k ] # MeanShifted Image. ax_Mean = fig . add_subplot ( 1 , 2 , 2 ) ax_Mean . imshow ( x . reshape ( img_shape )) ax_Mean . set_title ( f \"n_cluster= {K} \" ), ax_Mean . set_xticks ([]), ax_Mean . set_yticks ([]) n_col = 4 n_row = K // n_col if K % n_col ==0 else K//n_col+1 fig = plt . figure ( figsize = ( imgsize * n_col , imgsize * n_row )) for i , k in enumerate ( range ( K )): ax = fig . add_subplot ( n_row , n_col , i + 1 ) data = np . zeros ( shape = x . shape ) data [ cls == k ] = mu [ k ] ax . imshow ( data . astype ( int ) . reshape ( img_shape )) ax . set_title ( f \"Color No.{i+1:<0{len(str(K))}}, rgb=({','.join(mu[k].astype(int).astype(str))})\" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () e = time . time () print ( f \"Processing time: {int((e-s)//60):>02}m {(e-s)%60:.3f}s\" ) plt . show () Processing time: 31m 13.287s In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-2.html"},{"title":"領域処理のための特徴量","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 領域の特徴量 フーリエ変換 ガボールフィルタ(Gabor Filter) 同時生起確率 In [1]: import cv2 import numpy as np import matplotlib.pyplot as plt （２次元）フーリエ変換 画像は、フーリエ変換によって周波数領域における別の形で表現される。 フーリエ変換の結果は、画像に含まれるそれぞれの周波数成分を表している。 フーリエ変換後の各周波数成分の大きさを成分ごとに変えることにより、元の画像の性質を変えることができる。 （周波数フィルタリング(frequency filtering)） ローパスフィルタ(lowpass fileter) ：画像に含まれる空間周波数成分のうち、低周波数成分は残し、高周波数成分は除去するようなフィルタ。 ハイパスフィルタ(highpass filter) ：上の逆。高周波数成分は残し、低周波数成分を除去するようなフィルタ。 バンドパスフィルタ(bandpass filter) ：ある中間的な周波数の範囲を残すようなフィルタ。 高域強調フィルタ(high-emphasis filter) ：画像の低周波数成分はそのまま保ちつつ、高周波数成分を強調するフィルタ。 $1$ 次元フーリエ変換 簡単のため、まずは一次元フーリエ変換をみる。 名前 数式 説明 フーリエ変換 $$F(\\omega) = \\int_{-\\infty}&#94;{\\infty}f(t)e&#94;{-i\\omega t}dt$$ 数直線上の表現 （空間領域） から周波数による表現 （周波数領域） への変換 逆フーリエ変換 $$f(x) = \\int_{-\\infty}&#94;{\\infty}F(\\omega)e&#94;{i\\omega x}d\\omega$$ 周波数領域にある関数を元の空間領域に戻す変換 実装 二つの正弦波を重ねた波から、それぞれの成分を取り出すことができるか確かめる。なお、ここでは numpy.fft.fft を利用しています。 これは、 高速フーリエ変換(Fast Fourier Transform) と呼ばれる、 高速に「離散フーリエ変換」を行うアルゴリズム を実装したものです。 In [2]: N = 10000 dt = 0.01 time = np . arange ( 0 , N * dt , dt ) freq = np . linspace ( 0 , 1.0 / dt , N ) In [3]: def sin ( A , f , p ): \"\"\" @param A: Amplitude @param f: Frequency[Hz] @param p: phase \"\"\" func = lambda t : A * np . sin ( 2 * np . pi * f * t + p1 ) return func In [4]: # parameters f1 , f2 = 5 , 8 # frequency[Hz] A1 , A2 = 5 , 3 # Amplitude p1 , p2 = 0 , 1 / 2 * np . pi # phase In [5]: y1 = sin ( A1 , f1 , p1 )( time ) y2 = sin ( A2 , f2 , p2 )( time ) y = y1 + y2 # superposition In [6]: # Computes the discrete Fourier transform (DFT) of a sequence yf = np . fft . fft ( y ) / ( N / 2 ) # Fast Fourier transform. In [7]: fig = plt . figure ( figsize = ( 8 , 4 )) ax1 = fig . add_subplot ( 2 , 1 , 1 ) ax1 . set_ylabel ( \"amplitude\" ) ax1 . set_xlabel ( \"time\" ) ax1 . set_xlim ( 0 , 1 ) ax1 . plot ( time , y , label = \"y(y1+y2)\" , color = \"blue\" ) ax1 . plot ( time , y1 , label = f \"y1(A= {A1} ,f= {f1} )\" , alpha = 0.3 , color = \"green\" ) ax1 . plot ( time , y2 , label = f \"y2(A= {A2} ,f= {f2} )\" , alpha = 0.3 , color = \"red\" ) ax1 . axhline ( 0 , alpha = 0.3 , color = \"black\" ) ax1 . legend () ax2 = fig . add_subplot ( 2 , 1 , 2 ) ax2 . set_ylabel ( \"amplitude\" ) ax2 . set_xlabel ( \"frequency\" ) ax2 . set_xlim ( 0 , 10 ) ax2 . plot ( freq , abs ( yf ), color = \"blue\" ) plt . tight_layout () plt . show () 見事に、二つの周波数成分を取り出すことができました。 $2$ 次元フーリエ変換 ※ 一般に画像は2次元空間で定義されたある関数 $f(x,y)$ として表現することができる！ 名前 数式 フーリエ変換 $$F(u,v) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}f(x,y)\\exp\\left\\{-j2\\pi\\left(ux+vy\\right)\\right\\}dxdy$$ 逆フーリエ変換 $$f(x,y) = \\int_{-\\infty}&#94;{\\infty}\\int_{-\\infty}&#94;{\\infty}F(u,v)\\exp\\left\\{j2\\pi\\left(ux+vy\\right)\\right\\}dudv$$ ここで、以下の値に注目することがよくある。 名前 数式 説明 振幅スペクトル(amplitude spectrum) $$\\mid F(u,v)\\mid = \\sqrt{\\mathrm{Re}\\left\\{F(u,v)\\right\\}&#94;2 + \\mathrm{Im}\\left\\{F(u,v)\\right\\}&#94;2}$$ 絶対値 位相スペクトル(phase spectrum) $$\\arg\\left\\{F(u,v)\\right\\} = \\tan&#94;{-1}\\frac{\\mathrm{Im}\\left\\{F(u,v)\\right\\}}{\\mathrm{Re}\\left\\{F(u,v)\\right\\}}$$ 偏角 パワースペクトル(power spectrum) $$\\mid F(u,v)\\mid&#94;2$$ In [8]: img = cv2 . imread ( 'lenna.png' , 0 ) f = np . fft . fft2 ( img ) fshift = np . fft . fftshift ( f ) magnitude_spectrum = 20 * np . log ( np . abs ( fshift )) plt . subplot ( 121 ), plt . imshow ( img , cmap = 'gray' ) plt . title ( 'Input Image' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'x' ), plt . ylabel ( 'y' ) plt . subplot ( 122 ), plt . imshow ( magnitude_spectrum , cmap = 'gray' ) plt . title ( 'Magnitude Spectrum' ), plt . xticks ([]), plt . yticks ([]) plt . xlabel ( 'u' ), plt . ylabel ( 'v' ) plt . show () ガボールフィルタ(Gabor Filter) 正弦波とガウス関数の積で表される。（例：2次元ガボールフィルタ） $$g(x,y,\\lambda,\\phi) = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\exp\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 実数部： $$\\mathrm{Re}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\cos\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ 虚数部： $$\\mathrm{Im}\\left\\{g(x,y,\\lambda,\\phi)\\right\\} = \\exp\\left(-\\frac{x&#94;2+y&#94;2}{2\\sigma&#94;2}\\right)\\sin\\left(2\\pi\\lambda i\\left(x\\cos\\phi + y\\sin\\phi\\right)\\right)$$ フーリエ変換では、所望の周波数成分が領域のどこにあるのかわからないのに対し、ガボールフィルタは、 「領域のどの位置にどの方向の周波数が、どの強度であるか」 を知ることができる。 パラメータを操作して様々な方向と強度を持つフィルタ （フィルタバンク(filter bank)） を多数準備 し、特徴抽出を行う。また、ここで抽出された特徴量群は texton と呼ばれる。 入力された画像に対してガボールフィルタを畳み込んで（たたみ込み＝二次元の内積＝類似度を反映）、特徴量 $G(x,y,\\lambda,\\phi)$ を求める式は以下となる。 $$G(x,y,\\lambda,\\phi) = \\sum_u\\sum_vI(x,y)\\ast g(x-u, y-v, \\lambda, \\phi)$$ OpenCVの cv2.getGaborKerne を用いることで簡単にガボールフィルタを生成することができる、 引数 説明 ksize Size of the filter returned. sigma Standard deviation of the gaussian envelope. theta Orientation of the normal to the parallel stripes of a Gabor function. lambd Wavelength of the sinusoidal factor. gamma Spatial aspect ratio. psi Phase offset. In [9]: default_gabor = { \"ksize\" : ( 50 , 50 ), \"sigma\" : 4 , \"theta\" : 0 , \"lambd\" : 10 , \"gamma\" : 0.5 , \"psi\" : 0 , } In [10]: gabor = cv2 . getGaborKernel ( ** default_gabor ) plt . imshow ( gabor , cmap = \"gray\" ) plt . title ( \"default\" ) plt . show () In [11]: def argsGaborRelation ( key , vals ): global default_gabor defaul_val = default_gabor [ key ] N = len ( vals ) n_col = 4 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) for i , val in enumerate ( vals ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) ax . imshow ( gabor , cmap = \"gray\" ) ax . set_title ( f \" {key} = {val} \" ) ax . set_xticks ([]), ax . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [12]: argsGaborRelation ( key = \"ksize\" , vals = [( 30 , 30 ),( 20 , 40 ),( 40 , 20 ),( 50 , 50 )]) In [13]: argsGaborRelation ( key = \"sigma\" , vals = [ x for x in range ( 8 )]) In [14]: argsGaborRelation ( key = \"theta\" , vals = [ np . radians ( x ) for x in range ( 0 , 180 , 45 )]) In [15]: argsGaborRelation ( key = \"gamma\" , vals = [ x for x in range ( 4 )]) In [16]: argsGaborRelation ( key = \"psi\" , vals = [ np . radians ( x ) for x in range ( 0 , 360 , 45 )]) In [17]: img = cv2 . imread ( 'lenna.png' , 0 ) color_img = cv2 . imread ( 'lenna.png' ) In [18]: def argsGaborSuperposition ( key , vals ): global default_gabor , img defaul_val = default_gabor [ key ] N = len ( vals ) * 2 n_col = 8 n_row = N // n_col if N % n_col ==0 else N//n_col+1 fig = plt . figure ( figsize = ( 4 * n_col , 4 * n_row )) dests = 0 for i , val in enumerate ( vals ): default_gabor [ key ] = val gabor = cv2 . getGaborKernel ( ** default_gabor ) dest = cv2 . filter2D ( img , cv2 . CV_32F , gabor ) dests += dest ax_dst = fig . add_subplot ( n_row , n_col , 2 * i + 1 ) ax_dst . imshow ( np . power ( dest , 2 ), cmap = \"gray\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) ax_gab = fig . add_subplot ( n_row , n_col , 2 * i + 2 ) ax_gab . imshow ( gabor , cmap = \"gray\" ), ax_gab . set_xticks ([]), ax_gab . set_yticks ([]) # Superposition fig = plt . figure ( figsize = ( 8 , 16 )) ax_org = fig . add_subplot ( 1 , 2 , 1 ) ax_org . imshow ( cv2 . cvtColor ( color_img , cv2 . COLOR_BGR2RGB )) ax_org . set_title ( \"original image\" ), ax_org . set_xticks ([]), ax_org . set_yticks ([]) ax_dst = fig . add_subplot ( 1 , 2 , 2 ) ax_dst . imshow ( dests , cmap = \"gray\" ) ax_dst . set_title ( f \"Superposition of dst (key= {key} )\" ), ax_dst . set_xticks ([]), ax_dst . set_yticks ([]) plt . show () default_gabor [ key ] = defaul_val In [19]: argsGaborSuperposition ( key = \"theta\" , vals = [ np . radians ( x ) for x in np . linspace ( 0 , 180 , 8 )]) ※ 入力画像の８分割した全ての方向のエッジを重ね合わせると、元の画像をかなり高い精度で復元していることがわかる。 同時生起確率 テクスチャの統計的特徴量を求める。 離れた２つの場所にある画素対の値から、画素値の 一様性 ・ 方向性 ・ コントラスト などの性質を表す特徴量を求める。 ある画素 $i$ と、$i$ から離れた位置にある画素 $j$ の画素対を考え、画素 $i$ と画素 $j$ の相対的な位置を $\\delta=\\langle d,\\theta\\rangle$ とする。 それぞれの画素値を $L_i,L_j$ とし、画素値の対 $(L_i,L_j)$ が生じる出現頻度で、ある同時生起行列 $\\mathbf{H}_{\\delta}(L_i,L_j)$ を考える。ここで、出現頻度の総数で $\\mathbf{H}_{\\delta}(L_1,L_2)$ を正規化し、確率に変換した同時生起行列を $\\mathbf{P}_{\\delta}(L_i,L_j)$ とする。 確率に変換した同時生起行列を用いて計算する主な特徴量には次の $7$ 種類がある。（ここで、画素値のレベル数は $L$ である。）他にも様々な統計量を計算できるが、テクスチャの物理的な意味と直接には結びつかない数値もある。 $$ \\begin{aligned} \\mathrm{ENR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left\\{P_{\\delta}(L_i,L_j)\\right\\}&#94;2 & (\\text{energy})\\\\ \\mathrm{CNT} &= \\sum_{k=0}&#94;{L-1}k&#94;2P_{x-y}(k) & (\\text{contrast})\\\\ \\mathrm{CRR} &= \\frac{\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}L_iL_jP_{\\delta}(L_i,L_j) - \\mu_x\\mu_y}{\\delta_x\\delta_y} & (\\text{correlation})\\\\ \\mathrm{VAR} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\left(L_i-\\mu_x\\right)&#94;2P_{\\delta}(L_i,L_j) & (\\text{variance})\\\\ \\mathrm{EPY} &= -\\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\log\\left\\{P_{\\delta}(L_i,L_j)\\right\\} & (\\text{entropy})\\\\ \\mathrm{SEP} &= -\\sum_{k=0}&#94;{2L-2}P_{x+y}(k)\\log\\left\\{P_{x+y}(k)\\right\\} & (\\text{sum entropy})\\\\ \\mathrm{IDM} &= \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}\\frac{1}{1+(L_i-L_j)&#94;2}P_{\\delta}(L_i,L_j) & (\\text{inverse difference moment})\\\\ \\end{aligned} $$ ただし、 $$ \\mu_x = \\sum_{L_i=0}&#94;{L-1}L_iP_x(L_i), \\quad \\mu_y = \\sum_{L_j=0}&#94;{L-1}L_jP_y(L_j)\\\\ \\delta_x&#94;2 = \\sum_{L_i=0}&#94;{L-1}(L_i-\\mu_x)&#94;2P_x(L_i), \\quad \\delta_y&#94;2 = \\sum_{L_j=0}&#94;{L-1}(L_j-\\mu_y)&#94;2P_y(L_j)\\\\ P_x(L_i) = \\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j), \\quad P_y(L_j) = \\sum_{L_i=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\\\ P_{x-y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i-L_j|= k\\\\ P_{x+y}(k) = \\sum_{L_i=0}&#94;{L-1}\\sum_{L_j=0}&#94;{L-1}P_{\\delta}(L_i,L_j)\\quad |L_i+L_j|= k\\\\ $$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-2-1.html"},{"title":"主成分分析(PCA)","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 主成分分析(PCA) 次元削減・非可逆データ圧縮・特徴抽出・データの可視化などに使われる。 主部分空間(principal subspace) と呼ばれる低次元の線形空間の上への、データ点の直交射影として、以下の2つの定義方法がある。 「射影されたデータの分散が最大化されるような直交射影」 として定義。→ 分散最大化による定式化 「データ点と射影した点の間の2乗距離の平均値で定義される 射影コスト関数 の期待値を最小化するような線形射影」 として定義。（要はデータ点からの距離を最小化）→ 誤差最小化による定式化 Pythonによる実装 分散最大化による定式化 次元 $D$ のユークリッド空間内のデータ集合 $\\{\\mathbf{x}_n\\}(n=1,\\ldots,N)$ を考える。ここで、 「射影されたデータ点の分散を最大化しながら、データを次元 $M ことを考える。 1次元空間の上への射影（$M=1$） この空間の方向を $D$ 次元ベクトル $\\mathbf{u}_1$ として表す。ここで、興味があるのは $\\mathbf{u}_1$ の方向だけであるので、$\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ としても一般性を失わない。 したがって、各データ点 $\\mathbf{x}_n$ は スカラー値 $\\mathbf{u}_1&#94;T\\mathbf{x}_n$ の上に射影される。ここで、射影されたデータの平均・分散は以下のようになる。 統計量 平均値 $$\\mathbf{u}_1&#94;T\\bar{\\mathbf{x}}\\qquad\\bar{\\mathbf{x}} = \\frac{1}{N}\\sum_{n=1}&#94;N\\mathbf{x}_n\\qquad (12.1)$$ 分散 $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1\\qquad\\mathbf{S} = \\frac{1}{N}\\sum_{n=1}&#94;N\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\qquad (12.3)$$ ここで、 射影されたデータの分散を、$\\mathbf{u}_1$ に関して最大化 することを考える。 制約条件 $\\mathbf{u}_1&#94;T\\mathbf{u}_1 = 1$ をラグランジュ乗数 $\\lambda_1$ を利用して導入して $$\\mathbf{u}_1&#94;T\\mathbf{Su}_1 + \\lambda_1\\left(1-\\mathbf{u}&#94;T_1\\mathbf{u}_1\\right)\\qquad (12.4)$$ を最大化すれば良い。$\\mathbf{u}_1$ に関する微分を $0$ とおくことにより、停留条件は $$\\mathbf{Su}_1 = \\lambda_1\\mathbf{u}_1\\qquad (12.5)$$ となることがわかる。これは、 $\\mathbf{u}_1$ が $\\mathbf{S}$ の固有ベクトルであること を示している。左から $\\mathbf{u}&#94;T_1$ をかけると、 $$\\text{Variance} = \\mathbf{u}&#94;T_1\\mathbf{Su}_1 = \\lambda_1 \\qquad (12.6)$$ となる。よって、 分散は $\\mathbf{u}_1$ を、最大固有値 $\\lambda_1$ に属する固有ベクトルに選んだ時に最大になる ことがわかる。 $M$ 次元空間の上への射影（一般解） 演習12.1 帰納法を用いて、 射影されたデータの分散を最大化するようなM次元部分空間の上への線形写像が、データ共分散行列Sの上位M個の固有値に属するM本の固有ベクトルによって定義される ことを示す。 仮定 $M$ に対して上記が成り立つ。 データ空間に対する新しい方向ベクトル $\\mathbf{u}_{M+1}$ は、次を満たす。 $\\mathbf{u}_{M+1}$ は、$\\mathbf{u}_1,\\ldots,\\mathbf{u}_M$ と直交する。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0$） 単位長に規格化されている。（$\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{M+1}=1$） 制約条件を踏まえると、 $$L = \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\lambda_{M+1}\\left(1-\\mathbf{u}&#94;T_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_{M+1}&#94;T\\mathbf{u}_j$$ 両辺を $\\mathbf{u}_{M+1}$ で微分すると、 $$0 = \\frac{\\partial L}{\\partial \\mathbf{u}_{M+1}} = 2\\left(\\mathbf{Su}_{M+1} - \\lambda_{M+1}\\mathbf{u}_{M+1}\\right) + \\sum_{j=1}&#94;M\\lambda&#94;{\\prime}_j\\mathbf{u}_j\\cdots(\\ast)$$ これに左から $\\mathbf{u}&#94;T_{j}$ をかけると、 $$0 = \\lambda&#94;{\\prime}_j\\quad(\\because \\mathbf{u}_{M+1}&#94;T\\mathbf{u}_{j}=0)$$ となるので、これを $(\\ast)$ に代入して、 $$\\mathbf{Su}_{M+1} = \\lambda_{M+1}\\mathbf{u}_{M+1}$$ また、この時分散は $$\\begin{aligned} \\sum_{i=1}&#94;{M+1}\\mathbf{u}&#94;T_i\\mathbf{Su}_i &= \\sum_{i=1}&#94;{M}\\mathbf{u}&#94;T_i\\mathbf{Su}_i + \\mathbf{u}&#94;T_{M+1}\\mathbf{Su}_{M+1}\\\\ &= \\sum_{i=1}&#94;{M}\\lambda_i + \\lambda_{M+1} \\end{aligned}$$ ここで、仮定より $\\lambda_i$ は、データ共分散行列 $\\mathbf{S}$ の上位 $M$ 個の固有値なので、この分散を最大する $\\lambda_{M+1}$ は、$M+1$ 番目に大きい固有値となる。 誤差最小化による定式化 続いて、射影誤差の最小化に基づいた主成分分析の定式化を考える。 まず、$D$ 次元の基底ベクトル $\\{\\mathbf{u}_i\\}$ から成る完全正規直交系を導入する。（$\\mathbf{u}_i&#94;T\\mathbf{u}_i = \\delta_{ij}$） すると、各データ点はこれらの基底ベクトルの線形結合なので、以下の形で表すことができる。 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\alpha_{ni}\\mathbf{u}_i\\qquad (12.8)$$ なお、ここで式 $(12.8)$ は、各データ点 $\\{\\mathbf{x}_n\\}$ を、もともとの座標系から $\\{\\mathbf{u}_i\\}$ で表される新しい座標系への回転を表していると解釈できる （もともと $D$ 個の成分 $\\{x_{n1},\\ldots,x_{nD}\\}$ が、等価な集合 $\\{a_{n1},\\ldots,a_{nD}\\}$ に置き換えられている） 。 上式と $\\mathbf{u}_j$ との内積を取り、正規直交性を使うと、$\\alpha_{nj} = \\mathbf{x}_n&#94;T\\mathbf{u}_j$ を得るので、 $$\\mathbf{x}_n = \\sum_{i=1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right)\\mathbf{u}_i\\qquad (12.9)$$ $D$ 次元から $M$ 次元への近似 ここで、$M （$M$ 次元空間で完全に $\\mathbf{x}_n$ を表現するのは一般に不可能なので、近似する。） したがって、各データ点を $$\\tilde{\\mathbf{x}}_n = \\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\qquad (12.10)$$ $\\{z_{ni}\\}$ は特定のデータ点に依存。 $\\{b_i\\}$ は全てのデータ点に共通な定数。 と近似して表す。つまり、 $\\{\\mathbf{u}_i\\}$ と $\\{z_{ni}\\}$ と $\\{b_i\\}$ を調整することで、次元が減ることによってもたらされる歪みを最小化すること がここでの目的となる。 近似による歪み尺度 $J$ 近似による歪みの尺度として、元々のデータ点 $\\mathbf{x}_n$ とその近似 $\\tilde{\\mathbf{x}}_n$ の間の2乗距離をデータ集合に渡って平均したものを採用する。 $$\\begin{aligned} J &= \\frac{1}{N}\\sum_{n=1}&#94;N\\|\\mathbf{x}_n-\\tilde{\\mathbf{x}}_n\\|&#94;2\\qquad (12.11)\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\left\\|\\mathbf{x}_n-\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i+\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)\\right\\|&#94;2 \\end{aligned}$$ そこで、各変数についての微分を $0$ としてこれを最小化する変数を求める。 $\\{z_{ni}\\}$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial z_{ni}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\left\\|\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=M+1}&#94;Db_i\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial z_{ni}}\\left\\{\\sum_{i=1}&#94;Mz_{ni}&#94;2-2\\sum_{i=1}&#94;Mz_{ni}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=1}&#94;M2\\left\\{z_{ni}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore z_{ni}&#94;{\\star} &= \\mathbf{x}_n&#94;T\\mathbf{u}_i \\qquad (12.12) \\end{aligned} $$ $b_i$ に対する最小化 $$ \\begin{aligned} \\frac{\\partial J}{\\partial b_{i}} &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\left\\|\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right\\|&#94;2 -2\\left(\\mathbf{x}_n-\\sum_{i=1}&#94;Mz_{ni}\\mathbf{u}_i\\right)&#94;T\\left(\\sum_{i=M+1}&#94;Db_{i}\\mathbf{u}_i\\right) + C \\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\frac{\\partial}{\\partial b_{i}}\\left\\{\\sum_{i=M+1}&#94;Db_{i}&#94;2-2\\sum_{i=M+1}&#94;Db_{i}\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\}\\\\ &= \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D2\\left\\{b_{i}-\\mathbf{x}_n&#94;T\\mathbf{u}_i\\right\\} = 0\\\\ \\therefore b_{i}&#94;{\\star} &= \\bar{\\mathbf{x}}_n&#94;T\\mathbf{u}_i \\qquad (12.13) \\end{aligned} $$ $J$ の整頓 ここで、$(12.10)$ の $z_{ni},b_i$ を置き換えると、 $$ \\begin{aligned} \\mathbf{x}_n-\\tilde{\\mathbf{x}}_n &= \\mathbf{x}_n-\\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=1}&#94;D\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i - \\left(\\sum_{i=1}&#94;M\\mathbf{x}_n&#94;T\\mathbf{u}_i\\mathbf{u}_i + \\sum_{i=M+1}&#94;D\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\mathbf{u}_i\\right)\\\\ &= \\sum_{i=M+1}&#94;D\\left\\{\\left(\\mathbf{x}_n-\\bar{\\mathbf{x}}\\right)&#94;T\\mathbf{u}_i\\right\\}\\mathbf{u}_i\\qquad (12.14) \\end{aligned} $$ と表すことができる。この式から、 $\\tilde{\\mathbf{x}}_n$ から $\\mathbf{x}_n$ への変位を表すベクトルは、主部分空間に直交する空間にあることがわかる。 以上より、歪み尺度 $J$ に対する表現を、純粋に $\\{\\mathbf{u}_i\\}$ の関数として、以下のような形で得られることがわかる。 $$J = \\frac{1}{N}\\sum_{n=1}&#94;N\\sum_{i=M+1}&#94;D\\left(\\mathbf{x}_n&#94;T\\mathbf{u}_i-\\bar{\\mathbf{x}}&#94;T\\mathbf{u}_i\\right)&#94;2 = \\sum_{i=M+1}&#94;D\\mathbf{u}&#94;T_i\\mathbf{Su}_i\\qquad (12.15)$$ したがって、あとは$J$ を $\\{\\mathbf{u}_i\\}$ に対して最小化すれば良い。 $M=1,D=2$ の場合 $M=1,D=2$ の場合、 「規格化条件 $\\mathbf{u}&#94;T_2\\mathbf{u}_2 = 1$ の下で、方向 $\\mathbf{u}_2$ を、$J=\\mathbf{u}&#94;T_2\\mathbf{Su}_2$ が最小化されるように選ぶ」 問題となる。 つまり、ラグランジュ乗数を用いて、 $$\\tilde{J} =\\mathbf{u}&#94;T_2\\mathbf{Su}_2 + \\lambda_2\\left(1-\\mathbf{u}&#94;T_2\\mathbf{u}_2\\right)\\qquad (12.16)$$ を最小化する問題となる。 $\\mathbf{u}_i$ についての微分を $0$ とおくと、$\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を得る。つまり、$\\mathbf{u}_2$ は固有値 $\\lambda_2$ に属する $\\mathbf{S}$ の固有ベクトルであるので、 任意の固有ベクトルは、この歪み尺度の停留点を定義することとなる。 $(12.16)$ に $\\mathbf{Su}_2 = \\lambda_2\\mathbf{u}_2$ を代入すると、$J=\\lambda_2$ となる。ゆえに、 「$\\mathbf{u}_2$ を、2つある固有値のうち小さい方に対応した固有ベクトルを選ぶことにより、$J$ の最小値を得ることができる」 （↔︎ 主部分空間では大きい方 ） 任意の $D$ と任意の $M 任意の $D$ と任意の $M $$\\mathbf{Su}_i = \\lambda_i\\mathbf{u}_i\\qquad (12.17)$$ で与えられる共分散行列の固有ベクトルに選ぶことによって得られる。ここで $i=1,\\ldots,D$ であり、固有ベクトル $\\{\\mathbf{u}_i\\}$ は正規直交するように選ばれる。 また、対応する歪み尺度の値は、 $$J = \\sum_{i=M+1}&#94;D\\lambda_i\\qquad (12.18)$$ のように、 主部分空間に直交する固有ベクトルの固有値についての単なる和 で与えられる。したがって、$J$ の最小値は、小さい順から $D-M$ 個の固有値に対応する固有ベクトルを選ぶことによって得られ、つまり主部分空間を定義する固有ベクトルは大きい順から $M$ 個の固有値に対応する固有ベクトルになる。 実装 Wine Data Set (UCI Machine Learning Repository) のデータを利用し、13次元、178データ、3種類のワインの属性データから、2つの主成分を取って可視化を行います。 また、PCAは自作のモジュール （ kerasy.ML.decomposition.PCA ） を用います。 In [1]: # データ取得。 ! wget https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt --2019-10-07 13:20:45-- https://raw.githubusercontent.com/maskot1977/ipython_notebook/master/toydata/wine.txt Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.228.133 Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.228.133|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 12173 (12K) [text/plain] Saving to: `wine.txt' wine.txt 100%[===================>] 11.89K --.-KB/s in 0s 2019-10-07 13:20:45 (40.4 MB/s) - `wine.txt' saved [12173/12173] In [2]: from kerasy.ML.decomposition import PCA In [3]: import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib.colors import LinearSegmentedColormap In [4]: colors = [( 1 , 0 , 0 ), ( 0 , 0 , 1 ), ( 0 , 1 , 0 )] n_bin = len ( colors ) cmap_name = 'my_list' cm = LinearSegmentedColormap . from_list ( cmap_name , colors , N = n_bin ) In [5]: df = pd . read_csv ( \"wine.txt\" , sep = \" \\t \" , index_col = 0 ) In [6]: df . head ( 3 ) Out[6]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } class Alcohol Malic acid Ash Alcalinity of ash Magnesium Total phenols Flavanoids Nonflavanoid phenols Proanthocyanins Color intensity Hue OD280/OD315 of diluted wines Proline 0 1 14.23 1.71 2.43 15.6 127 2.80 3.06 0.28 2.29 5.64 1.04 3.92 1065 1 1 13.20 1.78 2.14 11.2 100 2.65 2.76 0.26 1.28 4.38 1.05 3.40 1050 2 1 13.16 2.36 2.67 18.6 101 2.80 3.24 0.30 2.81 5.68 1.03 3.17 1185 class カラムがワインの種類を表しているので、この列は主成分分析から取り除きます。 In [7]: cls = df . iloc [:, 0 ] . values In [8]: df_use = df . iloc [:, 1 :] また、 データの標準化 を行います。 In [9]: df_std = df_use . apply ( lambda x : ( x - x . mean ()) / x . std (), axis = 0 ) In [10]: data = np . array ( df_std ) データの準備ができたので、主成分分析を行います。 In [11]: pca = PCA () pca . fit ( data ) features = pca . transform ( data ) In [12]: plt . figure ( figsize = ( 6 , 6 )) plt . scatter ( features [:, 0 ], features [:, 1 ], c = cls , cmap = cm , edgecolors = 'black' ) plt . title ( \"Same fig with slide :)\" ) plt . xlabel ( \"PC1\" ) plt . ylabel ( \"PC2\" ) plt . grid () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-2.html"},{"title":"Nussinov Algorithm","text":"Nussinov Algorithmは、最もシンプルな二次構造予測アルゴリズムである。 「最大いくつの塩基対を作ることができるか」 を調べる。 動的計画法を用いて効率的に調べるために、以下のような Pseudoknot は無視している。様々な重要なRNAが、Pseudoknotの形をとることが確認されているが、相対的にこのような構造をとる確率は低いので、計算の効率を優先し、これらを無視する。 Algorithm ※「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 今回の実装では $j-i-1<3$ の時は、$i,j$ が塩基対を作れないものとしている。 ポイントはRecursionの最後の式で、 「$i$ から $k$ までの部分塩基配列」 と 「$k+1$ から $j$ までの部分塩基配列」 を足し合わせる操作を行う。 （Bifurcation） Initialization: $$\\begin{aligned} \\gamma(i,i)&=0&\\text{ for }i=1\\text{ to }L\\\\ \\gamma(i,i-1)&=0&\\text{ for }i=2\\text{ to }L \\end{aligned}$$ Recursion: $$ \\gamma(i,j) = \\max \\begin{cases} \\gamma(i+1,j)\\\\ \\gamma(i,j-1)\\\\ \\gamma(i+1,j-1)+\\delta(i,j)\\\\ \\max_{i\\leq k\\verb|<|j}\\left[\\gamma(i,k) + \\gamma(k+1,j)\\right] \\end{cases} $$ TraceBack 基本的なアルゴリズムは同じですが、 Bifurcationが起きた際にトレースバックポインターを複数用意する必要があることには注意が必要です。 bp = [] stack = [( 0 , N - 1 )] while ( stack ): i , j = stack . pop ( 0 ) delta = 1 if self . _is_bp ( sequence [ i ], sequence [ j ]) and ( j - i > 3 ) else 0 if ( i >= j ): continue elif gamma [ i + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( i + 1 , j )) elif gamma [ i ][ j - 1 ] == gamma [ i ][ j ]: stack . append (( i , j - 1 )) elif gamma [ i + 1 ][ j - 1 ] + delta == gamma [ i ][ j ]: bp . append (( i , j )); stack . append (( i + 1 , j - 1 )) else : # Bifurcation for k in range ( i , j ): if gamma [ i ][ k ] + gamma [ k + 1 ][ j ] == gamma [ i ][ j ]: stack . append (( k + 1 , j )) stack . append (( i , k )) break 自作のモジュール （kerasy.Bio.structure.Nussinov） を使って実装します。 In [1]: from kerasy.Bio.structure import Nussinov In [2]: model = Nussinov () In [3]: # 以下の形のパラメタファイルを受け取ります。 ! cat params.json { \"type\": \"DNA\", \"Watson_Crick\": true, \"Wobble\": true } In [4]: model . load_params ( \"params.json\" ) In [5]: model . params () | parameter |value| -------------------- |type | DNA| |Watson_Crick| 1| |Wobble | 1| In [6]: # サンプル配列 sequence = \"GCGGAAACGGGGTCA\" In [7]: # 最大ペアの配列 model . predict ( sequence , memorize = True , traceback = True ) Nussinov Algorithm Score: 3 ================================================================= seq: GCGGAAACGGGGTCA : ( (( ))) ================================================================= In [8]: gamma = model . gamma In [9]: # DP行列は以下のようになっています。 model . _printAsTerai ( gamma , sequence ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 1 2 2 2 2 2 3 3 C - 0 0 0 0 0 0 1 2 2 2 2 2 3 3 G - - 0 0 0 0 0 1 1 1 1 1 2 3 3 G - - - 0 0 0 0 1 1 1 1 1 2 3 3 A - - - - 0 0 0 0 0 0 0 1 2 2 2 A - - - - - 0 0 0 0 0 0 1 2 2 2 A - - - - - - 0 0 0 0 0 1 2 2 2 C - - - - - - - 0 0 0 0 1 1 1 1 G - - - - - - - - 0 0 0 0 0 1 1 G - - - - - - - - - 0 0 0 0 1 1 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 $i,j$ が塩基対を組むときの塩基対最大化 塩基 $i,j$ が塩基対を組むという制約がある場合を考えます。これは、「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を保持した $\\omega(i,j)$ と $\\gamma(i,j)$ を組み合わせることで効率的に求めることができます。 Algorithm 「$i$ から $j$ までの部分塩基配列で最大幾つの塩基対が作れるか」 を $\\gamma(i,j)$ が保持している。 「$i$ から $j$ までの部分塩基配列を除いた残りで最大幾つの塩基対が作れるか」 を $\\omega(i,j)$ が保持している。 Initialization: $$\\omega(i,L) = 0$$ Recursion: $$ \\omega(i,j) = \\max \\begin{cases} \\omega(i-1,j)\\\\ \\omega(i,j+1)\\\\ \\omega(i-1,j+1)+\\delta(i-1,j+1)\\\\ \\max_{1\\leq k\\verb|<|i}\\left[\\omega(k,j) + \\gamma(k,i-1)\\right]\\\\ \\max_{j\\verb|<| k\\leq L}\\left[\\omega(j+1,k) + \\gamma(i,k)\\right] \\end{cases} $$ In [10]: model . outside ( sequence , memorize = True ) In [11]: omega = model . omega In [12]: # DP行列は以下のようになっています。 model . _printAsTerai ( omega , sequence ) \\ G C G G A A A C G G G G T C A G 3 3 3 2 2 2 1 1 1 0 0 0 0 0 0 C - 3 3 3 3 3 2 1 1 1 1 1 1 0 0 G - - 3 3 3 3 2 2 2 2 2 1 1 0 0 G - - - 3 3 3 2 2 2 2 2 1 1 0 0 A - - - - 3 3 2 2 2 2 2 1 1 0 0 A - - - - - 3 3 2 2 2 2 2 1 0 0 A - - - - - - 3 2 2 2 2 2 1 0 0 C - - - - - - - 2 2 2 2 2 1 0 0 G - - - - - - - - 3 3 3 2 2 1 1 G - - - - - - - - - 3 3 3 3 2 2 G - - - - - - - - - - 3 3 3 2 2 G - - - - - - - - - - - 3 3 2 2 T - - - - - - - - - - - - 3 2 2 C - - - - - - - - - - - - - 2 2 A - - - - - - - - - - - - - - 3 $Z(i,j)$ の計算 variable definition $\\gamma\\left(i,j\\right)$ the maximum number of base-pairs for subsequence from $i$ to $j$. $\\omega\\left(i,j\\right)$ the maximum number of base-pairs excluding subsequence from $i$ to $j$. 上記の定義より、$\\gamma,\\omega$ を用いて $Z(i,j)$ が以下のように求まることがわかります。 $$Z(i,j) = \\begin{cases} \\gamma\\left(i+1,j-1\\right) + 1 + \\omega\\left(i,j\\right) & (\\text{if }i\\text{ and }j\\text{-th nucleotides can form a base-pair})\\\\ 0 & (\\text{otherwise}) \\end{cases}$$ In [13]: model . ConstrainedMaximize ( sequence , memorize = False ) \\ G C G G A A A C G G G G T C A G 0 0 0 0 0 0 0 2 0 0 0 0 0 3 0 C - 0 0 0 0 0 0 0 3 3 3 3 0 0 0 G - - 0 0 0 0 0 3 0 0 0 0 0 3 0 G - - - 0 0 0 0 3 0 0 0 0 0 3 0 A - - - - 0 0 0 0 0 0 0 0 3 0 0 A - - - - - 0 0 0 0 0 0 0 3 0 0 A - - - - - - 0 0 0 0 0 0 3 0 0 C - - - - - - - 0 0 0 0 3 0 0 0 G - - - - - - - - 0 0 0 0 0 2 0 G - - - - - - - - - 0 0 0 0 3 0 G - - - - - - - - - - 0 0 0 0 0 G - - - - - - - - - - - 0 0 0 0 T - - - - - - - - - - - - 0 0 0 C - - - - - - - - - - - - - 0 0 A - - - - - - - - - - - - - - 0 備忘録 Nussinov Algorithmでは、これまでの動的計画法とは異なり、 $i,j$ を斜め方向に舐める必要がありました。 そこで、その際に使用したコードを備忘録として残しておきます。 In [14]: import numpy as np In [15]: N = 4 In [16]: # Nussinov Algorithm (γ) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for ini_i in reversed ( range ( N )): diff = N - ini_i for i in reversed ( range ( ini_i )): arr [ i ][ i + diff ] = idx idx += 1 print ( arr ) [[0 3 5 6] [0 0 2 4] [0 0 0 1] [0 0 0 0]] In [17]: # Nussinov outsie (ω) idx = 1 arr = np . zeros ( shape = ( N , N ), dtype = int ) for j in reversed ( range ( N )): for i in range ( N - j ): arr [ i ][ j + i ] = idx idx += 1 print ( arr ) [[ 7 4 2 1] [ 0 8 5 3] [ 0 0 9 6] [ 0 0 0 10]] In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-8.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-8.html"},{"title":"Pair HMM の最尤推定","text":"Baum-Welch Pair HMMとは、二本の配列を受け取ってペアワイズアラインメントを出力するHMMで、 「アラインメントの確率的な解釈が可能になる」 （アラインメントのどの部分が信頼できるかを確率的に評価できる） という利点があります。 このPair HMMは、一般的なHMMと同様にBaum-Welchアルゴリズムによってパラメータを最尤推定していきます。 \\(\\xi\\) HMM 一般的なHMMでは、例えば 遷移確率 \\(A_{jk}\\) （状態 \\(j\\) から状態 \\(k\\) に遷移する確率） を最尤推定する際は、 直感的には 「状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「状態 \\(j\\) から遷移する回数」 で割れば最尤解が求まる。 実際の隠れ状態の遷移が確定していないので、 「 期待される 状態 \\(j\\) から状態 \\(k\\) に遷移する回数」 を、 「 期待される 状態 \\(j\\) から遷移する回数」 で割れば良い。 \\(\\mathbf{z}_{n-1}\\) で状態 \\(j\\) におり、 \\(\\mathbf{z}_n\\) で状態 \\(k\\) にいる確率 \\(\\xi\\left(z_{n-1,j},z_{nk}\\right)\\) は、forward-backward algorithmの \\(\\alpha,\\beta\\) を用いれば以下のように求めることができる。 $$\\xi_n\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ \\(\\xi\\) を用いて、最尤推定を行う。 $$A_{j k}= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\qquad (13.19)$$ という様に行いますが、Pair HMMは、 挿入・欠失を考えるため、 \\(n\\) で配列 \\(\\mathbf{X,Y}\\) のどの要素（ \\(\\mathbf{x}_u,\\mathbf{y}_v\\) ）を考えているのか一意に定まらない という点で普通のHMMとは異なります。 Pair HMM そこで、 「 \\(n\\) ではなく \\(u,v\\) に注目する」 ことで、 \\((13.43)\\) の式を以下のように書き換えます。 $$\\xi_{u,v}\\left(i,j\\right)=\\frac{f_i\\left(u,v\\right)A_{ij}\\phi_j\\left(\\diamond_1\\right)b_j\\left(\\diamond_2,\\diamond_3\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ ここで、分子に注目すると、各変数の意味が variable meaning \\(f_i\\left(u,v\\right)\\) The probability of ending up in state \\(i\\) after aligning the two sequences \\(\\mathbf{X,Y}\\) up to observation \\(u\\) and \\(v\\) respectively. \\(A_{ij}\\) the transition probability from state \\(i\\) to state \\(j\\) . \\(\\phi_j\\left(\\diamond_1\\right)\\) the emission probability of emitting \\(\\diamond_1\\) in state \\(j\\) . \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) the probability of being in state \\(j\\) , given the sequences \\(\\mathbf{X,Y}\\) are aligned from observation \\(\\diamond_2+1\\) and \\(\\diamond_3+1\\) to the end of the sequences respectively. であるので、 \\(\\diamond\\) は状態によって異なり、具体的に書き下すと以下のようになります。 state\\variable \\(\\phi_j\\left(\\diamond_1\\right)\\) \\(b_j\\left(\\diamond_2,\\diamond_3\\right)\\) \\(M\\) \\(e\\left(x_{u+1},y_{v+1}\\right)\\) \\(b_j\\left(u+1,v+1\\right)\\) \\(X\\) \\(e\\left(x_{u+1}\\right)\\) \\(b_j\\left(u+1,v\\right)\\) \\(Y\\) \\(e\\left(y_{v+1}\\right)\\) \\(b_j\\left(u,v+1\\right)\\) \\(\\gamma\\) 同様に \\(\\gamma\\) も考えると、 $$ \\gamma_n\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad(13.33)$$ から、 $$\\gamma_i\\left(u,v\\right)=\\frac{f_i\\left(u,v\\right)b_j\\left(u,v\\right)}{\\sum_{k=1}&#94;Kf_k\\left(u,v\\right)b_k\\left(u,v\\right)}$$ のように書き換えることになります。 Maximization step ここまでで \\(\\gamma,\\xi\\) が求まったので、M stepで各パラメータを更新します。なお、以下で \\(w\\) は全ての記号の組を表します。 $$w\\in\\left\\{(k_x,k_y)|k_x,k_y\\in\\left\\{A,T,G,C,\\epsilon \\right\\}\\right\\}\\setminus(\\epsilon,\\epsilon)$$ \\(\\pi_k\\) $$\\pi&#94;{\\star}_i = \\sum_w\\gamma_i&#94;w(0,0)$$ \\(A_{ij}\\) $$A&#94;{\\star}_{ij} = \\frac{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}{\\sum_w\\sum_{u=0}&#94;{\\tilde{U}}\\sum_{v=0}&#94;{\\tilde{V}}\\sum_{j}&#94;{K}\\xi_{u,v}&#94;{w}\\left(i,j\\right)}$$ final emitting state \\(\\tilde{U}\\) \\(\\tilde{V}\\) \\(M\\) \\(U-1\\) \\(V-1\\) \\(X\\) \\(U-1\\) \\(V\\) \\(Y\\) \\(U\\) \\(V-1\\) \\(\\phi_{i}(k)\\) $$\\phi_i\\left(k\\right) = \\frac{\\sum_w\\sum_{u=0}&#94;{U\\ast1}\\sum_{v=0}&#94;{V\\ast2}\\gamma_i&#94;w\\left(u,v\\right)}{\\sum_w\\sum_{u=0}&#94;U\\sum_{v=0}&#94;V\\gamma_i&#94;w\\left(u,v\\right)}$$ \\(\\ast1\\) ： \\(x_u=k_x\\) and state \\(i\\) equals the state \\(M\\) or \\(X\\) . (in the state \\(Y\\) , a gap is present in observation stream \\(x\\) therefore \\(k_x\\) is not present.) \\(\\ast2\\) ： \\(y_v=k_y\\) and state \\(j\\) equals the state \\(M\\) or \\(Y\\) . Reference Wahle, Johannes and Armin Buch. \"Alignment and word comparison with Pair Hidden Markov Models.\" (2013). pp.22-31 Martijn B. Wieling. \"Comparison of Dutch Dialects\" (2007) pp.36-50 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-7.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-7.html"},{"title":"生物統計論 第2回","text":"In [1]: import numpy as np import matplotlib.pyplot as plt Section2.1 Central Limit Theorem Law of Large Numbers Estimation is accurate with many samples. Foundation of repeated measurement. Regardless of true distribution. Assuming independence. Theorem Let $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ be an independent trials process, with finite expected value $\\mu = \\mathbb{E}\\left(\\mathbf{X}_i\\right)$ Let $\\bar{\\mathbf{X}}_n = \\frac{1}{n}\\left(\\mathbf{X}_1,\\mathbf{X}_2+\\cdots+\\mathbf{X}_n\\right)$ be a sample mean. Weak law : $$\\lim_{n\\rightarrow\\infty}P\\left(|\\bar{\\mathbf{X}}_n-\\mu|>\\varepsilon\\right) = 0 \\quad\\left(\\forall\\varepsilon>0\\right)$$ Strong law $$P\\left(\\lim_{n\\rightarrow\\infty}\\bar{\\mathbf{X}}_n = \\mu\\right) = 1$$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Chebyshev Inequality Let $\\mathbf{X}$ be a discrete random variable with expected value $\\mu=\\mathbb{E}\\left(\\mathbf{X}\\right)$ $$ P \\left(|\\mathbf{X}-\\mu|>\\varepsilon\\right)\\leq\\frac{\\mathbb{V}\\left(\\mathbf{X}\\right)}{\\varepsilon&#94;2}$$ Example In [2]: N = 1000 seed = 0 In [3]: trials = np . arange ( 1 , N + 1 ) In [4]: dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = N ) ave_dices = np . cumsum ( dices ) / trials In [5]: plt . axhline ( 3.5 , color = \"blue\" , label = \"Theoretical mean\" ) plt . plot ( trials , ave_dices , label = \"Observed average\" , color = \"green\" ) plt . ylim ( 1 , 6 ) plt . title ( \"Average dice roll by number of rolls\" ) plt . ylabel ( \"Average\" ) plt . xlabel ( \"Number of trials\" ) plt . grid () plt . legend () plt . show () If we keep rolling the dice over and over again, the sample average of dice roll will converge to the true average. Exception The law of large numbers assumes the existance of expected values . Therefore, it will not hold when there is no expected value. (ex. Cauchy distribution ) Cauchy distribution $$ \\begin{aligned} f(x;x_0,\\gamma) &= \\frac{1}{\\pi\\gamma\\left[1 + \\left(\\frac{x-x_0}{\\gamma}\\right)&#94;2\\right]} = \\frac{1}{\\pi}\\frac{\\gamma}{\\left(x-x_0\\right)&#94;2 + \\gamma&#94;2} & \\begin{cases}x_0: \\text{Location paramete}\\\\\\gamma: \\text{Scale parameter}\\end{cases}\\\\ f(x;0,1) &= \\frac{1}{\\pi\\left(1+x&#94;2\\right)} & (\\text{standard cauchy distribution}) \\end{aligned} $$ In [6]: N = 5000 K = 3 seed = 1 In [7]: trials = np . arange ( 1 , N + 1 ) In [8]: samples = np . random . RandomState ( seed ) . standard_cauchy ( size = ( K * N )) . reshape (( K , N )) ave_samples = np . cumsum ( samples , axis = 1 ) / trials In [9]: for k in range ( K ): plt . plot ( trials , ave_samples [ k ], label = f \"Observation {k+1}\" ) plt . ylabel ( \"$(\\mathbf {X} _1+\\cdots+\\mathbf {X} _n)/n$\" ) plt . xlabel ( \"n\" ) plt . legend () plt . grid () Central Limit Theorem Sample mean follows normal distribution. Foundation of many statistical tests. Regardless of true distribution. Assuming independence. Theorem Let $\\{\\mathbf{X}_1,\\ldots,\\mathbf{X}_n\\}$ be a random sample of size $n$, which is a sequence of independent and identically distributed random variables drawn from a distribution. expected value given by $\\mu$. finite variance given by $\\sigma&#94;2$. Let $S_n:=\\sum_{k=1}&#94;n\\mathbf{X}_k$ $$P\\left(\\frac{S_n-n\\mu}{\\sqrt{n}\\sigma}\\leq\\alpha\\right)\\rightarrow\\frac{1}{\\sqrt{2\\pi}}\\int_{-\\infty}&#94;{\\alpha}e&#94;{-\\frac{x&#94;2}{2}}dx\\quad(n\\rightarrow\\infty)$$ Therefore: $$ \\begin{aligned} S_n&\\sim\\mathcal{N}\\left(n\\mu, n\\sigma&#94;2\\right) & (n\\rightarrow\\infty)\\\\ \\bar{\\mathbf{X}}_n = \\left(\\mathbf{X}_1+\\cdots+\\mathbf{X}_n\\right)/n&\\sim\\mathcal{N}\\left(\\mu,\\sigma&#94;2/n\\right) & (n\\rightarrow\\infty) \\end{aligned} $$ Proof. We assume that $\\bar{\\mathbf{X}}_n$ have the \"finite\" variance $\\sigma&#94;2$ Since $\\mathbf{X}_1,\\mathbf{X}_2,\\ldots,\\mathbf{X}_n$ are independent and have the same distributions, we can apply Chebyshev Inequality . We obtain $$0\\leq P\\left(|\\bar{\\mathbf{X}}_n - \\mu|>\\varepsilon\\right)\\leq\\frac{1}{\\varepsilon&#94;2}\\mathbb{V}(\\bar{\\mathbf{X}}_n) = \\frac{1}{\\varepsilon&#94;2}\\frac{\\sigma&#94;2}{n}\\rightarrow0\\quad(n\\rightarrow\\infty)$$ Example In [10]: N = 10000 ns = [ 10 , 100 , 1000 , 10000 ] roll = 4 seed = 0 In [11]: fig = plt . figure ( figsize = ( 12 , 6 )) ax_all = plt . subplot2grid (( 2 , len ( ns )), ( 0 , 0 ), colspan = len ( ns )) for i , n in enumerate ( ns ): ax = plt . subplot2grid (( 2 , len ( ns )), ( 1 , i )) dices = np . random . RandomState ( seed ) . randint ( low = 1 , high = 6 + 1 , size = ( n , N )) rate_dice_eq_4 = np . count_nonzero ( dices == roll , axis = 1 ) / N freqs , bins , patches = ax . hist ( rate_dice_eq_4 , bins = 20 , density = True ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] ax_all . plot ( cent_bins , freqs , label = f \"n= {n} \" ) ax . set_title ( f \"n= {n} \" ) ax . set_xlabel ( f \"Probability of {roll} roll.\" ) ax . set_ylabel ( \"freq\" ) ax_all . set_title ( \"Central Limit Theorem\" ) ax_all . legend () plt . tight_layout () plt . show () Section2.2 ChIP-seq Peak Detection ChIP-sequencing, also known as ChIP-seq, is a method used to analyze protein interactions with DNA. ChIP-seq combines chromatin immunoprecipitation (ChIP) with massively parallel DNA sequencing to identify the binding sites of DNA-associated proteins. It can be used to map global binding sites precisely for any protein of interest. Previously, ChIP-on-chip was the most common technique utilized to study these protein–DNA relations. Peak calling Problem: How to identify transcription factor binding sites and histone modification enriched regions? Random Read Model Assume that read appears with equal probability in any region. Calcurate the p-value (the Probability of obtaining more or equally extreme value than observed value under the random model.) → Smaller is more significant. Setting the threshold (p-value) manually. We could calcurate the threshold ($n_{obs}$) → If the $n_{obs}$ exceeds this threshold, it is determined as the peak region. In [12]: from scipy.special import comb In [13]: g = 10000 # total DNA length n = 1000 # total number of reads l = 100 # bin size q = l / g n_bins = g / l lambda_ = n * q # mean read count seed = 0 xmax = 30 In [14]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) read_points = np . random . RandomState ( seed ) . randint ( 0 , g , size = n ) axL . scatter ( read_points , np . zeros ( shape = n ), s = 3 , label = \"read\" , color = \"black\" ) ledge = 0 read_counts = [] for edge in range ( l , g + 1 , l ): middl = ( ledge + edge ) / 2 count = np . count_nonzero ([( ledge <= read_points ) & ( read_points < edge )]) read_counts . append ( count ) if edge <= l * 10 : axL . axvline ( edge , color = \"red\" ) axL . text ( x = middl , y = 1e-3 , s = count , horizontalalignment = 'center' ) ledge = edge axL . set_xlim ( 0 , l * 10 ) axL . set_ylim ( - 1e-3 , 2e-3 ) axL . set_yticks ([]) axL . legend () Poisson = [ comb ( n , i , exact = True ) * ( q ** i ) * (( 1 - q ) ** ( n - i )) for i in range ( n )] axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axR . plot ([ read_counts . count ( i ) / n_bins for i in range ( n )], color = \"red\" , label = \"Observed\" ) axR . set_xlim ( 0 , xmax ) axR . set_xlabel ( \"Read count for each bin\" ) axR . set_ylabel ( \"Frequency\" ) axR . legend () plt . show () In [15]: n_obs = 15 p_values = np . cumsum ( Poisson [:: - 1 ])[:: - 1 ] # Calcurate p-value for each n_obs. thresh_p = 1e-2 bp = np . argmax ( p_values <= thresh_p ) In [16]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) axL . plot ( Poisson , color = \"black\" , label = \"Pois($\\lambda$)\" ) axL . fill_between ( np . arange ( n_obs , xmax ), y1 = Poisson [ n_obs : xmax ], y2 = 0 , facecolor = 'red' ) axL . annotate ( 'p-value \\n = $\\mathbb {P} (n_ {obs} \\leq N)$ \\n $=\\sum_{i=n_ {obs} }&#94;{\\infty}(\\lambda&#94;i/i!)\\cdot e&#94;{-\\lambda}$' , xy = ( 17 , 1e-2 ), xytext = ( 20 , 4e-2 ), fontsize = 12 , arrowprops = dict ( width = 1 , headwidth = 8 , headlength = 10 , connectionstyle = 'arc3' , facecolor = 'black' ) ) axL . set_xlim ( 0 , 30 ) axL . set_title ( \"Poisson distribution\" ) axL . set_xlabel ( \"N\" ) axL . set_ylabel ( \"Freq\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . plot ( p_values , color = \"black\" ) axR . scatter ( n_obs , p_values [ n_obs ], color = \"red\" , label = \"pvalue($n_ {obs} $=\" + f \" {n_obs} )\" ) axR . scatter ( bp , p_values [ bp ], color = \"blue\" , label = \"Boundary point\" ) axR . axhline ( thresh_p , color = \"blue\" , label = f \"threshold(p_value= {thresh_p} )\" ) axR . axvspan ( xmin = bp , xmax = xmax , color = \"blue\" , alpha = 0.3 ) axR . set_xlim ( 0 , xmax ) axR . set_title ( \"The relationship between p-value and $n_ {obs} $\" ) axR . set_xlabel ( \"$n_ {obs} $\" ) axR . set_ylabel ( \"p-value\" ) axR . legend () plt . show () In this case, we could say the threshold($n_{obs}$) = 19(=bp). ※ In ChIP-seq, we have to do \"Tag shift\" due to the DNA strand asymmetry. （→ more: MACS ） Section2.3 Hypothesis Testing Terminology In [17]: fig , ax = plt . subplots ( figsize = ( 6 , 4 )) X = np . arange ( 10 , 100 , 1 ) Y = 1 / X # Null distribution ax . plot ( X , Y , color = \"red\" ), ax . text ( x = 15 , y = 8e-2 , s = \"Null distribution \\n $f_S(s|H)$\" , fontsize = 15 ) # Thereshold: Sα ax . plot (( 50 , 50 ),( 0 , 7e-2 ), color = \"black\" ), ax . text ( x = 48 , y = 7.5e-2 , s = \"$S_ {α} $\" , fontsize = 12 ) # Reject & Accept ax . annotate ( '' , xy = ( 75 , 5e-2 ), xytext = ( 52 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 55 , y = 5.5e-2 , s = \"reject\" , fontsize = 12 ) # Reject ax . annotate ( '' , xy = ( 25 , 5e-2 ), xytext = ( 48 , 5e-2 ), arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = 'arc3' )), ax . text ( x = 35 , y = 5.5e-2 , s = \"accept\" , fontsize = 12 ) # Accept # Observation sample. ax . plot (( 70 , 70 ),( 0 , 1 / 70 ), color = \"black\" ), ax . scatter ( 70 , 1 / 70 , color = \"black\" ), ax . text ( x = 68 , y = 2e-2 , s = \"$S_ {obs} $\" , fontsize = 12 ) ax . set_xticks ([]), ax . set_yticks ([]) ax . set_xlabel ( \"S\" ), ax . set_ylabel ( \"freq\" ) ax . set_xlim ( min ( X ), max ( X )), ax . set_ylim ( min ( Y ), max ( Y )) plt . show () Null Hypothesis $H_0$ Alternative Hypothesis $H_1$ Test Static $S$ Null distribution Significance threshold Reject/Accept $H_0$ Null hypothesis is True Null hypothesis is False Do not reject Null hypothesis ($H_0$) Correct Type2 error (False negative) Reject Null hypothesis ($H_0$) Type1 error (False positive) Correct P-value distribute uniformly under $H_0$ Proof. p-value is the probability of obtaining more or equally extreme value than observed value under the null distribution. $$p = \\mathbb{P}\\left(S\\geq s|H_0\\right) = 1-\\mathbb{P}\\left(S By noting $F_0$ the cumulative distribution function of $S$ under $H_0$, we obtain: $$p = 1-F_0(s)$$ Thanks to the fact that the cdf is monotonic, increasing and (left-)continuous: $$\\mathbb{P}\\left(S\\geq s|H_0\\right) = \\mathbb{P}\\left(F_0\\left(S\\right)\\geq F_0\\left(s\\right)\\right) = 1-\\mathbb{P}\\left(F_0\\left(S\\right)< F_0\\left(s\\right)\\right)$$ Therefore, we have: $$\\mathbb{P}\\left(F_0\\left(S\\right) Which means that $F_0\\left(S\\right)$ is following a uniform distribution. And, as this means also that $1-F_0\\left(S\\right)$ is following a uniform distributed, then we can conclude that p-value are uniformly distributed under the null hypothesis. In [18]: from scipy.stats import norm In [19]: N = 10000 loc = 0 scale = 1 seed = 0 In [20]: obs = np . random . RandomState ( seed ) . normal ( loc = loc , scale = scale , size = N ) # observation sample \"s\". p_value = 1 - norm . cdf ( x = obs , loc = loc , scale = scale ) # p-value = 1 - F(s) In [21]: fig = plt . figure ( figsize = ( 12 , 4 )) axL = fig . add_subplot ( 1 , 2 , 1 ) freqs , bins , patches = axL . hist ( obs , bins = 50 , density = True , color = \"blue\" , alpha = 0.7 ) cent_bins = [ np . mean ( bins [ i : i + 2 ]) for i in range ( len ( bins ) - 1 )] axL . plot ( cent_bins , freqs , color = \"blue\" ) axL . set_title ( \"Histogram of observation sample s \\n under the null distribution (This time: Normal distribution)\" ), axL . set_xlabel ( \"observation s\" ), axL . set_ylabel ( \"Frequency\" ) axR = fig . add_subplot ( 1 , 2 , 2 ) axR . hist ( p_value , bins = 20 , edgecolor = \"black\" ) axR . set_title ( \"Histogram of p-value\" ), axR . set_xlabel ( \"p-value\" ), axR . set_ylabel ( \"Frequency\" ) plt . tight_layout () plt . show () ※ We could argue about the p-value under the null hypothesis, but we could not confirm whether null hypothesis is true or not. Section2.4 Hypothesis Test Example $\\chi&#94;2$-test Any statistical hypothesis test where the sampling distribution of the test statistic is a chi-squared distribution when the null hypothesis is true. Used to determine whether there is a significant difference between the expected frequencies and the observed frequencies in one or more categories. $\\chi&#94;2$-distribution $Y_i\\sim\\mathcal{N}\\left(0,1\\right), i=1,\\ldots,\\nu$: i.i.d. $X=Y_1&#94;2+\\cdots+Y_{\\nu}$ $\\rightarrow X\\sim\\chi&#94;2(\\nu), X\\in \\mathbb{R}_{\\geq0}$ $$ \\begin{aligned} f_X(x) &= \\frac{1}{2&#94;{\\nu/2}\\Gamma(\\nu/2)}x&#94;{\\nu/2-1}e&#94;{-x/2}\\\\ \\Gamma(z) &= \\int_{0}&#94;{\\infty}t&#94;{z-1}e&#94;{-t}dt(\\mathrm{Re}(z)>0)\\\\ \\mathbb{E}(X) &= \\nu\\\\ \\mathbb{V}(X) &= 2\\nu \\end{aligned} $$ In [22]: from scipy.stats import chi2 In [23]: K = 5 In [24]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( 0 , 8 , 1000 ) for k in range ( 1 , K + 1 ): plt . plot ( X , chi2 . pdf ( X , k ), label = f \"$k= {k} $\" ) plt . xlim ( 0 , 8 ), plt . ylim ( 0 , 1.0 ) plt . title ( \"$\\chi&#94;2$-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Pearson's chi-square test goodness of fit test # $C_1$ $C_2$ $\\cdots$ $C_k$ total Observation frequency $n_1$ $n_2$ $\\cdots$ $n_k$ $n$ Theoretical probability (under $H_0$) $p_1$ $p_2$ $\\cdots$ $p_k$ $1$ Theoretical frequency $m_1=np_1$ $m_2=np_2$ $\\cdots$ $m_k=np_k$ $n$ Null Hypothesis($H_0$): $P(C_i) = p_i\\quad(i=1,2,\\ldots,k)$ If null hypothesis is true, $U$ are distributed as $\\chi&#94;2(k-1)$. $$ U=\\sum_{i=1}&#94;k\\frac{(n_i-m_i)&#94;2}{m_i}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2(k-1) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ test for independence A\\B $B_1$ $B_2$ $\\cdots$ $B_b$ total $A_1$ $n_{11}$ $n_{12}$ $\\cdots$ $n_{1b}$ $n_{1\\cdot}$ $A_2$ $n_{21}$ $n_{22}$ $\\cdots$ $n_{2b}$ $n_{2\\cdot}$ $\\vdots$ $\\vdots$ $\\vdots$ $\\cdots$ $\\ddots$ $\\vdots$ $A_a$ $n_{a1}$ $n_{a2}$ $\\cdots$ $n_{ab}$ $n_a$ total $n_{\\cdot1}$ $n_{\\cdot2}$ $\\cdots$ $n_{\\cdot b}$ $n_{a\\cdot}$ $P(A_i) = p_i,P(B_j)=q_j,\\quad (1\\leq i\\leq a,1\\leq j\\leq b)$ Null Hypothesis($H_0$): $A$ and $B$ are independence. $$P(A_i\\cap B_j) = p_iq_j$$ If null hypothesis is true, we could presume: $\\bar{p_i}=n_{i\\cdot}/n$, $\\bar{q_j}=n_{\\cdot j}/n$. $m_{ij} = n\\bar{p_i}\\bar{q_j}$ (Theoretical frequency) $$ U=\\sum_{i=1}&#94;a\\sum_{j=1}&#94;b\\frac{(n_{ij}-m_{ij})&#94;2}{m_{ij}}\\\\ \\begin{cases} U&>\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Reject }H_0\\\\ U&\\leq\\chi_{\\alpha}&#94;2\\left((a-1)(b-1)\\right) &\\Rightarrow \\text{Accept }H_0 \\end{cases} $$ t-test One-sample test: Determine whether a sample of observations could have been generated by a process with a specific mean $\\mu$. Two-sample test: Compare the average values of the two data sets and determine if they came from the same population. t-distribution $$ \\begin{aligned} f_{t(\\nu)}(x) &= \\frac{\\Gamma\\left(\\frac{\\nu+1}{2}\\right)}{\\sqrt{\\nu\\pi}\\Gamma\\left(\\frac{\\nu}{2}\\right)}\\left(1+\\frac{x&#94;2}{\\nu}\\right)&#94;{-\\frac{\\nu+1}{2}}\\\\ \\mathbb{E}(X) &= 0(\\nu>1)\\\\ \\mathbb{V}(X) &= \\begin{cases}\\infty&(1<\\nu\\leq2)\\\\\\frac{\\nu}{\\nu-2}&(2<\\nu)\\end{cases} \\end{aligned} $$ In [25]: from scipy.stats import t as tdist In [26]: fig = plt . figure ( figsize = ( 6 , 4 )) X = np . linspace ( - 6 , 6 , 1000 ) nus = [ 1 , 2 , 5 , 1000 ] for nu in nus : plt . plot ( X , tdist . pdf ( X , nu ), label = f \"$ν= {nu} $\" ) plt . plot ( X , norm . pdf ( X , 0 , 1 ), linestyle = ':' , linewidth = 5 , label = \"Standard Normal Distribution\" ) plt . xlim ( - 6 , 6 ), plt . ylim ( 0 , 0.4 ) plt . title ( \"t-distribution\" ), plt . xlabel ( \"X\" ), plt . ylabel ( \"P(X)\" ) plt . legend () plt . show () Student's t-test One-sample test: $$ X_1,\\ldots,X_n\\sim\\mathcal{N}(\\mu,\\sigma)\\text{: i.i.d.}\\\\ \\bar{X} = \\frac{X_1,\\ldots,X_n}{n}, S = \\frac{\\left(X_1-\\bar{X}\\right)&#94;2 + \\cdots+\\left(X_n-\\bar{X}\\right)&#94;2}{n-1}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}-\\mu\\sqrt{n}\\right)}{S}\\sim t(n-1) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{X_{11}+\\cdots+X_{1m}}{m}\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{X_{21}+\\cdots+X_{2n}}{n}\\\\ S=\\frac{\\sum_{i=1}&#94;m\\left(X_{1i}-\\bar{X}_1\\right)&#94;2 + \\sum_{i=1}&#94;n\\left(X_{2i}-\\bar{X}_2\\right)&#94;2}{m+n-2}\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)\\sqrt{mn}}{S\\sqrt{m+n}}\\sim t(m+n-2) $$ Two-sample test (when we know two groups have equal variance) : $$ X_{11},\\ldots,X_{1m}\\sim\\mathcal{N}(\\mu,\\sigma_1)\\text{: i.i.d.}, \\bar{X}_1 = \\frac{\\sum_{i=1}&#94;mX_{1i}}{m}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{1i} - \\bar{X}_1\\right)&#94;2}{m-1}, A=S_1/m\\\\ X_{21},\\ldots,X_{2n}\\sim\\mathcal{N}(\\mu,\\sigma_2)\\text{: i.i.d.}, \\bar{X}_2 = \\frac{\\sum_{i=1}&#94;mX_{2i}}{n}, S_1 = \\frac{\\sum_{i=1}&#94;m\\left(X_{2i} - \\bar{X}_2\\right)&#94;2}{n-1}, B=S_2/n\\\\ \\rightarrow T=\\frac{\\left(\\bar{X}_1-\\bar{X}_2\\right)}{S\\sqrt{A+B}}\\approx t(\\nu), \\nu=\\frac{(A+B)&#94;2}{A&#94;2/(m-1)+B&#94;2/(n-1)} $$ In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-2.html"},{"title":"レポート課題1(10/3出題)","text":"CEY3c1naQIIfXbTBA3UN8w==;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;&#94; This content is encrypted. Password Decrypt (function () { var strip_padding = function (padded_content, padding_char) { /* * Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i-1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) { /* * Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding}); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var init_decryptor = function() { var decrypt_btn = document.getElementById('pec-decrypt-content'), password_input = document.getElementById('pec-content-password'), encrypted_content = document.getElementById('pec-encrypted-content'), decrypted_content = document.getElementById('pec-decrypted-content'), decrypt_form = document.getElementById('pec-decrypt-form'); decrypt_btn.addEventListener('click', function () { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; decrypt_form.parentNode.removeChild(decrypt_form); encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here } else { // ¯\\_(ツ)_/¯ password_input.value = ''; } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-report1.html"},{"title":"イントロダクション","text":"講義計画 確率と統計の基礎 ： 最先端の機械学習技術の数学的基盤 探索と最適化 ： 広大な探索空間から最適解を効率よく探索 機械学習 ： データの背後に潜む知識を発見 自然言語処理 ： 人工知能技術の応用例 # 日付 内容 担当 1 10/3 概要 杉山 2 10/10 最適化（連続1） 佐藤 3 10/17 最適化（連続2） 佐藤 4 10/24 最適化（探索） 本多 5 10/31 確率と統計 本多 6 11/14 確率と統計 本多 7 11/21 確率と統計 本多 8 11/28 機械学習（教師付き学習） 本多 9 12/5 機械学習（教師付き学習） 佐藤 10 12/12 自然言語処理 宮尾 11 12/19 自然言語処理 宮尾 12 12/26 自然言語処理 宮尾 13 1/9 機械学習（強化学習） 杉山 1 1/16 試験 佐藤 人工知能とは 1956年：\"The Dartmouth Summer Research Project on Artificial Intelligence\" にて Artificial Intelligence という言葉が提唱された。 Watoson Nature AlphaGo 人工知能関連分野の発展 人工知能研究 1960年頃(1次ブーム)：記号処理、論理推論 1980年頃(2次ブーム)：エキスパートシステム ニューラルネット研究 1960年頃(1次ブーム)：パーセプトロン（１層） 1990年頃(2次ブーム)：誤差逆伝播ほう（多層） 機械学習研究 1995年頃〜：統計・凸最適化 1995年頃〜：ベイズ推論 2010年頃〜：深層学習 3種類の機械学習 教師付き学習 ：人間が教師となり、コンピュータの学習を手伝う。 教師なし学習 ：コンピュータが人間の手を介さずに自発的に学習する。 強化学習 ：ロボットが人間の手を介さずに自発的に意思決定を行う。 まとめ 人工知能 ： 知的なコンピュータシステムを作る 数学・プログラミング・実世界応用をつなぐ架け橋 探索 ： 広大な探索空間を効率よく探索 機械学習 ： データの背後に潜む知識を発見","tags":"知能システム論","url":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html","loc":"https://iwasakishuto.github.io/University/3A/知能システム論-1.html"},{"title":"Pair HMM","text":"※実装時のパラメータ PairHMMによるアラインメントを実装していく。なお、 （ kerasy.Bio.alignment.PairHMM ） に定義してあります。 In [1]: from kerasy.Bio.alignment import PairHMM In [2]: # サンプル配列 seqX = \"CCAGAGCTGTGGCAGACAGTGGCT\" seqY = \"CCAGCTGTGCAGACACTGGCTT\" In [3]: model = PairHMM () In [4]: ! cat params.json { \"delta\": \"1/10\", \"epsilon\": \"1/5\", \"tau\": \"1/30\", \"px_e_y\": \"1/8\", \"px_ne_y\": \"1/24\", \"qx\": \"1/4\", \"qy\": \"1/4\" } In [5]: model . set_params ( path = \"params.json\" ) Pair HMM とその利点 HMMのために開発されたアルゴリズムを使える。（らしい←正解ラベルの無いアラインメントでBaum-Welchアルゴリズムをどのように使うのかは現在考察中です。） アラインメントの確率的な解釈が可能になる。 グローバルアラインメントを出力する Pair-HMM Mは $x$ と $y$ がマッチした状態。（$x_i$ と $y_j$ がアライン） Iは $x$ に挿入が起きている状態。（$x_i$ と $-$ がアライン） Dは $x$ に欠失が起きている状態。（$-$ と $y_j$ がアライン） （以下では上から $V&#94;M,V&#94;X,V&#94;Y$ と記述している。） Pair HMMのためのViterbiアルゴリズム 2本数の配列 $x,y$ を与えると確率最大のアラインメントを求めるアルゴリズム。 Initialization: $$ \\begin{cases} V&#94;M(0,0)=1, V&#94;M(i,0)=V&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ V&#94;X(0,0)=0, V&#94;X(1,0)=\\delta q_{x_1} V&#94;X(i,0)=\\varepsilon q_{x_i}V&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ V&#94;Y(0,0)=0, V&#94;Y(0,1)=\\delta q_{y_1} V&#94;Y(0,j)=\\varepsilon q_{y_j}V&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} V&#94;M(i,j) &= p_{x_iy_j}\\max\\begin{cases}(1-2\\delta-\\tau)V&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)V&#94;Y(i-1,j-1)\\end{cases}\\\\ V&#94;X(i,j) &= q_{x_i}\\max\\begin{cases}\\delta V&#94;M(i-1,j)\\\\\\varepsilon V&#94;X(i-1,j)\\end{cases}\\\\ V&#94;Y(i,j) &= q_{y_j}\\max\\begin{cases}\\delta V&#94;M(i,j-1)\\\\\\varepsilon V&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$v_e = \\tau\\max\\left(V&#94;M(n,m),V&#94;X(n,m),V&#94;Y(n,m)\\right)$$ In [6]: P_optimal = model . align ( seqX , seqY , return_score = True ) Pair HMM (Viterbi) Alignment score: 3.551370651291424e-30 |parameter| value | -------------------------------- |delta | 0.1| |epsilon | 0.2| |tau | 0.03333333333333333| |px_e_y | 0.125| |px_ne_y |0.041666666666666664| |qx | 0.25| |qy | 0.25| =============================================================== X: CCAGAGCTGTGGCAGACAGTGGC-T Y: CC--AGCTGT-GCAGACACTGGCTT =============================================================== In [7]: print ( f \"π*= {P_optimal} \" ) π*=3.551370651291424e-30 アラインメントの信頼性 配列 $x,y$ が与えられた時、アラインメント $\\pi$ が得られる条件付き確率を考えることができ、それが アラインメントの信頼度 を表していると考ることができる。 $$ P(\\pi|x,y) = \\frac{P(x,y,\\pi)}{P(x,y)}\\\\ P(x,y) = \\sum_{\\text{alignments }\\pi}P(x,y,\\pi) $$ ※ なお、ここで $P(x,y)$ は $x,y$ に関する全ての可能なアラインメントについて確率を足し合わせたもの であり、Forwardアルゴリズムで計算することができる。 Pair HMMのためのForwardアルゴリズム ※ Viterbiの $\\max$ を $\\text{sum}$ に変更しただけ。 Initialization: $$ \\begin{cases} F&#94;M(0,0)=1, F&#94;M(i,0)=F&#94;M(0,j)=0\\text{ for }i\\neq0,j\\neq0\\\\ F&#94;X(0,0)=0, F&#94;X(1,0)=\\delta q_{x_1} F&#94;X(i,0)=\\varepsilon q_{x_i}F&#94;X(i-1,0) \\text{ for }i=2,\\ldots,n\\\\ F&#94;Y(0,0)=0, F&#94;Y(0,1)=\\delta q_{y_1} F&#94;Y(0,j)=\\varepsilon q_{y_j}F&#94;Y(0,j-1) \\text{ for }j=2,\\ldots,m\\\\ \\end{cases} $$ Recursion: $i=1,\\ldots,n,\\quad j=1,\\ldots,m$ $$ \\begin{aligned} F&#94;M(i,j) &= p_{x_iy_j}\\text{sum}\\begin{cases}(1-2\\delta-\\tau)F&#94;M(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;X(i-1,j-1)\\\\(1-\\varepsilon-\\tau)F&#94;Y(i-1,j-1)\\end{cases}\\\\ F&#94;X(i,j) &= q_{x_i}\\text{sum}\\begin{cases}\\delta F&#94;M(i-1,j)\\\\\\varepsilon F&#94;X(i-1,j)\\end{cases}\\\\ F&#94;Y(i,j) &= q_{y_j}\\text{sum}\\begin{cases}\\delta F&#94;M(i,j-1)\\\\\\varepsilon F&#94;X(i,j-1)\\end{cases}\\\\ \\end{aligned} $$ Termination: $$F_e = \\tau\\ \\text{sum}\\left(F&#94;M(n,m),F&#94;X(n,m),F&#94;Y(n,m)\\right)$$ In [8]: F , P_all = model . forward ( seqX , seqY ) In [9]: print ( f \"𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)= {P_all} \" ) 𝐹&#94;𝐸(𝑛,𝑚)=𝑃(𝑥,𝑦)=Σalignments𝜋𝑃(𝑥,𝑦,𝜋)=2.0457988072916236e-28 In [10]: print ( f \"P(π*|x, y)={P_optimal/P_all}\" ) P(π*|x, y)=0.017359334840912267 $x_i$ と $y_j$ がアラインされる確率 次の式で表される。 $$ \\begin{aligned} P(x_i\\diamondsuit y_i|x,y) &= \\frac{\\sum_{\\pi\\in\\Omega_{ij}}P(x,y,\\pi)}{P(x,y)}\\\\ &= \\frac{F&#94;M(i,j)\\cdot B&#94;M(i,j)}{P(x,y)} \\end{aligned}$$ ※ $\\Omega_{ij}$：$x_i$ と $y_j$ がアラインされるアラインメントの集合 Pair HMMのためのBackwardアルゴリズム Needleman-Wunsh-Gotoh のBackwardアルゴリズムとの類似性に注目！ Initialization: $$ \\begin{cases} B&#94;M(n,m)=B&#94;X(n,m)=B&#94;Y(n,m)=\\tau\\\\ B&#94;X(i,m)=\\varepsilon q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;Y(i,m)=\\varepsilon q_{y_{j+1}}B&#94;X(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ B&#94;M(i,m)=\\delta q_{x_{i+1}}B&#94;X(i+1,m)\\text{ for }i=n-1,\\ldots,1\\\\ B&#94;M(n,j)=\\delta q_{y_{j+1}}B&#94;Y(n,j+1)\\text{ for }j=m-1,\\ldots,1\\\\ \\end{cases} $$ Recursion: $i=n-1,\\ldots,1,\\quad j=m-1,\\ldots,1$ $$ \\begin{aligned} B&#94;M(i,j) &= \\text{sum}\\begin{cases}(1-2\\delta-\\tau)p_{x_iy_j}B&#94;M(i+1,j+1)\\\\\\delta q_{x_{i+1}}B(i+1,j)\\\\\\delta q_{y_{j+1}}B&#94;Y(i,j+1)\\end{cases}\\\\ B&#94;X(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{x_{i+1}}B&#94;X(i+1,j)\\\\ B&#94;Y(i,j) &= (1-\\varepsilon-\\tau)p_{x_{i+1},y_{j+1}}B&#94;M(i+1,j+1) + \\varepsilon q_{y_{j+1}}B&#94;Y(i,j+1)\\\\ \\end{aligned} $$ In [11]: B = model . backward ( seqX , seqY ) In [12]: Pij = ( F * B ) / P_all In [13]: import seaborn as sns import matplotlib.pyplot as plt In [14]: sns . heatmap ( Pij ) plt . show () In [15]: # 可視化のために pandas を使用。 import pandas as pd r , c = Pij . shape pd . set_option ( 'display.max_rows' , r ) pd . set_option ( 'display.max_columns' , c ) In [16]: df = pd . DataFrame ( Pij ) In [17]: df Out[17]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 0 1.139605e+00 1.145169e-02 1.061625e-04 9.380071e-06 7.330898e-07 1.256616e-08 5.467340e-10 2.910714e-11 5.763005e-12 3.410212e-13 5.102192e-15 2.187247e-16 1.988821e-17 1.147484e-18 1.367416e-20 6.720910e-22 4.976161e-24 7.098501e-26 9.237930e-28 2.211060e-29 3.898762e-32 1.763484e-40 1 1.002452e-01 9.915333e-01 6.192125e-03 1.868999e-04 4.332564e-05 9.546525e-07 4.066396e-08 2.157028e-09 9.465879e-11 4.846141e-11 4.058759e-13 3.267685e-14 8.754145e-16 1.928520e-16 1.373420e-18 1.082830e-19 9.927246e-22 1.394016e-23 1.508549e-25 4.777080e-27 9.963503e-30 8.788027e-38 2 2.530997e-02 1.110298e-01 7.189425e-01 4.724160e-03 2.510915e-04 4.961792e-05 1.187062e-06 1.017255e-07 3.970235e-09 2.068131e-10 9.703401e-11 7.255597e-13 1.565563e-13 2.611280e-15 3.254769e-16 2.694314e-18 1.079695e-19 1.562036e-21 1.545424e-23 1.735256e-25 1.265060e-27 2.215960e-35 3 1.439692e-03 1.313691e-01 9.101842e-02 4.446381e-01 5.912097e-03 3.126913e-04 8.585244e-05 1.538885e-06 1.919091e-07 8.250641e-09 2.393023e-10 1.283784e-10 1.387610e-12 2.250638e-13 4.821068e-15 2.111543e-16 4.457287e-18 2.448800e-19 3.227733e-21 1.284984e-23 8.240296e-26 3.335362e-33 4 3.517101e-05 3.000139e-03 4.131934e-01 8.504087e-02 1.663724e-01 9.561056e-03 2.917045e-04 9.039141e-05 1.788740e-06 1.312414e-07 2.869640e-08 4.101759e-10 1.507867e-10 3.456004e-12 5.959996e-13 5.757530e-15 2.024716e-16 4.111221e-18 7.279991e-20 1.060049e-21 6.121304e-24 4.843531e-31 5 9.934762e-06 1.458875e-04 3.927027e-03 6.740773e-01 8.441291e-02 7.234362e-02 1.094905e-02 1.879103e-04 1.252776e-04 1.454564e-06 1.059818e-07 2.729047e-08 9.494833e-10 8.082013e-11 1.033243e-11 3.411004e-13 6.554134e-15 3.958672e-16 8.201302e-18 3.482706e-20 2.714352e-22 4.461969e-29 6 5.322130e-07 6.381400e-05 4.257593e-04 6.688387e-03 9.174344e-01 4.917686e-02 4.329939e-02 3.819221e-03 1.763480e-04 1.328334e-04 1.940120e-06 9.105133e-08 1.541103e-08 2.609538e-09 8.150731e-11 2.404569e-11 1.889654e-13 3.985572e-15 1.024288e-16 6.839760e-18 1.341414e-20 4.476503e-27 7 5.863612e-10 7.892422e-07 1.012986e-04 1.397365e-03 1.342858e-02 1.002812e+00 2.593641e-02 3.890025e-02 1.670263e-03 1.614886e-04 8.871868e-05 1.756325e-06 1.155298e-07 1.122902e-08 2.203971e-09 1.028948e-10 2.509711e-11 1.531285e-13 2.099939e-15 4.258022e-17 2.374690e-18 1.208869e-24 8 1.171184e-11 2.035729e-09 3.700419e-07 2.397639e-04 4.844063e-03 2.599346e-02 9.949710e-01 1.502418e-02 2.712144e-02 1.478651e-03 1.433184e-04 6.712671e-05 1.454730e-06 9.766789e-08 9.072910e-09 2.328874e-09 6.340026e-11 1.502027e-11 1.916941e-13 1.314758e-15 1.242412e-17 4.691715e-23 9 3.005919e-13 6.399055e-11 5.515662e-09 3.748097e-07 1.153167e-04 1.497122e-02 6.310820e-02 8.863944e-01 1.030851e-02 1.491223e-02 2.002265e-03 8.941933e-05 3.530505e-05 1.470719e-06 9.754840e-08 8.043302e-09 3.375435e-09 3.679377e-11 2.917845e-12 5.484419e-14 1.471719e-15 4.178025e-21 10 1.792807e-15 1.557812e-12 1.844985e-10 1.289502e-08 7.545128e-07 6.340240e-05 2.061627e-02 1.787166e-01 5.419262e-01 1.188051e-02 1.024380e-02 2.347055e-03 7.577232e-05 1.796622e-05 1.114937e-06 7.069534e-08 8.011504e-09 2.756012e-09 4.374664e-11 6.704524e-13 1.075503e-14 1.217530e-19 11 1.923711e-17 4.362099e-15 1.941124e-12 6.147024e-10 1.551641e-08 5.550653e-07 1.380449e-04 9.537258e-03 5.398937e-01 1.863598e-01 1.452105e-02 9.548898e-03 1.837989e-03 5.136835e-05 1.397535e-05 6.835406e-07 5.429499e-08 8.819330e-09 1.851138e-09 1.231506e-11 1.775772e-13 2.576473e-18 12 5.638842e-19 1.455168e-16 9.139939e-15 1.547158e-12 1.037887e-09 2.248539e-08 1.151600e-06 9.872926e-05 5.973776e-03 8.862574e-01 6.786997e-02 1.624026e-02 4.029496e-03 2.179139e-03 2.921118e-05 1.601828e-05 5.561847e-07 3.123249e-08 2.978327e-09 9.604760e-10 3.744283e-12 9.636167e-17 13 3.331427e-21 7.494769e-19 2.963338e-16 6.987305e-15 4.315679e-12 6.087761e-10 3.497465e-08 3.604967e-06 8.639915e-05 5.915526e-03 9.923696e-01 2.749764e-02 2.345296e-02 2.411435e-03 1.600356e-03 2.967960e-05 1.263876e-05 5.535990e-07 1.777340e-08 1.086922e-09 1.497803e-10 4.715717e-15 14 8.334075e-23 3.113616e-20 1.885485e-18 4.096232e-16 1.085250e-14 2.877122e-12 9.801182e-10 2.465783e-08 7.111413e-06 1.332057e-04 5.532024e-03 1.019408e+00 1.546140e-02 2.230611e-02 1.326417e-03 7.657518e-04 3.756285e-05 1.397395e-05 7.084890e-07 8.614586e-09 3.251784e-10 1.560898e-13 15 2.761536e-24 1.577325e-22 1.652226e-19 6.855680e-18 4.640406e-16 1.789313e-14 1.881340e-12 7.696555e-10 3.721167e-08 3.131924e-06 2.768933e-04 5.432195e-03 1.019385e+00 1.220031e-02 2.678270e-02 1.012065e-03 4.234835e-04 2.691482e-05 8.312535e-06 2.735984e-07 4.296980e-09 1.264609e-12 16 1.125679e-25 3.526855e-23 5.295754e-22 1.029758e-19 2.954167e-17 8.415539e-16 3.337555e-14 1.886064e-12 3.708635e-10 8.103999e-08 2.979865e-06 2.717052e-04 5.867388e-03 1.008690e+00 1.398136e-02 2.796359e-02 1.094449e-03 2.222028e-04 1.653854e-05 6.727102e-06 7.321521e-08 3.095212e-11 17 5.314132e-29 1.371847e-25 1.002377e-22 1.431441e-21 2.329882e-19 2.824449e-17 1.264033e-15 1.039492e-13 1.896385e-12 2.117496e-10 8.676212e-08 1.428983e-06 4.224040e-04 7.551663e-03 9.828098e-01 2.577489e-02 2.154489e-02 1.348560e-03 1.271999e-04 1.123527e-05 1.554246e-06 1.061734e-09 18 1.311292e-30 3.344026e-28 1.039987e-25 1.917693e-22 4.842995e-21 2.644625e-19 5.424283e-17 1.016892e-15 2.466777e-13 3.876336e-12 1.412328e-10 6.644843e-08 1.307534e-06 2.267450e-04 1.352321e-02 9.236001e-01 4.123399e-02 2.242045e-02 1.780378e-03 1.137684e-04 4.658387e-06 2.707169e-08 19 3.685034e-32 1.308860e-29 1.727006e-27 1.846830e-25 9.168694e-23 2.025241e-20 2.015727e-19 7.009128e-17 1.110761e-15 2.135974e-13 8.991483e-12 3.294862e-10 2.170110e-08 1.342768e-06 1.738901e-04 1.366663e-02 9.157034e-01 5.085192e-02 1.134612e-02 1.333942e-03 1.601513e-04 7.755075e-07 20 2.627187e-34 3.307561e-31 6.412082e-29 8.638204e-27 5.130913e-25 5.421429e-23 2.735844e-20 4.581117e-19 4.673008e-17 1.996269e-15 1.567873e-13 2.425635e-11 7.144030e-10 2.339911e-08 4.401237e-07 1.583398e-04 8.993801e-03 8.715290e-01 1.032744e-01 9.301698e-03 8.040002e-04 1.264439e-05 21 3.712503e-36 1.248259e-33 7.484327e-31 4.015876e-28 1.275117e-26 7.126689e-25 1.294296e-22 1.126902e-20 1.562753e-18 3.245370e-17 8.822502e-16 3.618329e-13 1.719160e-11 9.436607e-10 3.634534e-08 4.567520e-07 2.489897e-05 1.031566e-02 8.313752e-01 1.337435e-01 9.529909e-03 1.755113e-04 22 1.081603e-37 4.975375e-35 3.859345e-33 1.396911e-30 8.994506e-28 2.233130e-26 1.907603e-24 1.395483e-22 7.223861e-21 2.385762e-18 3.020013e-17 1.437842e-15 1.876938e-13 2.135337e-11 5.432165e-10 7.346489e-08 4.608162e-07 1.776497e-05 2.915009e-03 7.255898e-01 2.520881e-01 4.862597e-03 23 7.053935e-40 3.695478e-37 9.639089e-35 1.470014e-32 2.795455e-30 1.235666e-27 2.213410e-26 7.771768e-24 1.829949e-22 1.539068e-20 1.623359e-18 3.985091e-17 3.521057e-15 1.986472e-13 1.486597e-11 3.334896e-10 7.576041e-08 5.116867e-07 2.834710e-05 1.528768e-03 3.676275e-01 6.239253e-01 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-6.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-6.html"},{"title":"生物物理学 第2回","text":"講師： 樋口秀男 生命体（生物）の一般的定義 生物とは、以下の四つの条件を満たす物質システム 自己と外界との境界 エネルギーと物質の代謝 自己複製 恒常性 電子 分子 細胞数 整体の階層性 $10&#94;{28}$ $10&#94;{23}$ $10&#94;{13}$ ヒト 意識・運動・代謝 $10&#94;{24}$ $10&#94;{19}$ $10&#94;{9}$ 心臓 循環・拡散 $10&#94;{15}$ $10&#94;{10}$ $10&#94;{0}$ 心筋細胞 生理的なリズム単位 $10&#94;{5}$ $10&#94;{5}$ 筋節 ゆらぎを制した振動 $10&#94;{0}$ タンパク質 反応のゆらぎ $10&#94;{2}$ アミノ酸 タンパク質の性質の起源 $10&#94;{0}$ 電子 量子力学の支配領域 生命科学を覆う謎 生命誕生の謎（+生命の進化、分化の謎） タンパク質構造の決定と機能との関係の謎 細胞が超多種分子（タンパク質、脂質、小分子、イオン、…）の濃度・種類・機能の制御を行う謎 個体（臓器、器官等）の構造と機能構築の謎 生命誕生の謎 元素誕生は超新星の爆発→重金属ができる。 現宇宙の元素の割合と人体内の元素比が非常に似通っている。 RNAワールド プロテインワールド 原始地球上に存在したと仮定される、RNA からなる自己複製系のこと。また、これがかつて存在し、現生生物へと進化したという仮説。 まずアミノ酸ができ、重合してポリペプチド、さらにタンパク質が作り出され、これが触媒として働いて生命を作り出したという仮説。 生命誕生を示唆した実験事実 ミラーの放電によるアミノ酸合成(1953) $\\mathrm{CH_3,NH_3,H_2,H_2O}$ を含む気体に放電（落雷を模した）をする。 実験２週間後に以下の化合物 （アミノ酸） ができた。 グリシン アラニン グルタル酸 酢酸（脂肪酸） 塩基や糖（リボース）、核酸基、RNA、タンパク質なども化学合成可能。 生命基本物質の化学合成が成功した理由 地球には、エネルギーの高い（海底火山、紫外線、雷、高音）場所と低く安定な場所が共存していたので、分子は 高エネルギー環境で合成され、低エネルギー環境で安定化する ことができた。 $$A\\overset{k_1}{{\\longrightarrow}}B\\overset{k_2}{{\\longrightarrow}}C$$ In [1]: import numpy as np import matplotlib.pyplot as plt In [2]: def simulate ( ax , color , tp , A = 1 , B = 0 , C = 0 , dt = 1e-3 , k1 = 0.07 , k2 = 0.02 , K = 1 ): time = np . arange ( 0 , 100 , dt ) As = np . zeros ( shape = len ( time )) Bs = np . zeros ( shape = len ( time )) Cs = np . zeros ( shape = len ( time )) for i , t in enumerate ( time ): dA = ( - k1 * A ) * dt * K dB = ( k1 * A - k2 * B ) * dt * K dC = ( k2 * B ) * dt * K A += dA ; B += dB ; C += dC As [ i ] = A ; Bs [ i ] = B ; Cs [ i ] = C if t > tp : K = 1e-6 # 温度を下げ、反応速度が1e-6倍になったことをシミュレーション ax . plot ( time , As , color = color ) ax . plot ( time , Bs , color = color ) ax . plot ( time , Cs , color = color ) if tp < 100 : ax . vlines ( x = tp , ymin = 0 , ymax = 1 , linestyle = \":\" ) return ax In [3]: fig , ax = plt . subplots () ax = simulate ( ax = ax , color = \"red\" , tp = 20 ) ax = simulate ( ax = ax , color = \"black\" , tp = 100 ) ax . set_xlabel ( \"Time\" ) ax . set_ylabel ( \"RQ\" ) ax . set_title ( \"Simulation Result\" ) plt . show () 上記のシミュレーション結果から、$A,B$ 分子を得るためには、 途中で（温度が下がるなどの結果）反応速度が下がる必要がある ことがわかる。 生体分子が濃縮され、多次反応による分子合成速度が上がった。 地球は巨大で多様な反応槽であったため、合成確率が上がった。 考えられる生物 地球型炭素生物 地球環境のように水と二酸化炭素（あるいはメタン）が豊富な惑星であるなら、情報記憶（DNA）→伝令（mRNA）→機能（タンパク質、RNA）のような地球型の仕事を分担した炭素生物が生まれる可能性は高い。 炭素生物 vs ケイ素生物 常温常圧で安定な炭素ー炭素結合 とは違い、 ケイ素ーケイ素結合はパイ結合やシグマ結合による二重三重結合を作る傾向がほとんど無く、非常に不安定 である。 炭素ーケイ素結合は安定 なので、炭素生物の中にケイ素が含まれるだろう。したがって、ケイ素生物の存在する確率は非常に低い。 金属生物 常温において金属結合が安定であり、分子としての機能を持つことは困難であるため、生物の中心にはならないだろう。ただし、金属イオンや錯体として、炭素生物やケイ素生物に利用されることはありうる。 講義のまとめ 生命分子や細胞の種類は多く、構造や機能をどのように理解するかが、 生命科学全体の 課題である。 生命は 宇宙の元素を効率よく利用した。 地球上の 高↔︎低エネルギーを行き交い 、多様な環境や濃縮により高確率かつ安定的に生体分子が合成された。 これが生命の誕生の確率を大きくした。 初めにRNAが合成され、それを鋳型としてタンパク質が合成され、原子生命が誕生したと想像される。 系外惑星にも、炭素生命体が存在する可能性がある。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-2.html"},{"title":"ペアワイズアラインメント","text":"ペアワイズアラインメントとは 2本のDNAの塩基配列（タンパク質のアミノ酸配列）を比較する方法の一つ バイオインフォマティクスでは最も基本的な解析手法 なぜDNA配列の比較をするのか DNAの機能を知りたい （∵ DNAの配列が似ていると機能が似ている） DNAのどの部分が重要かを知りたい。 （∵ 「保存されている＝重要」だと考えられる） 生物の進化系統樹を知りたい 新型シーケンサーで読まれたDNAの由来を知りたい DNAの変異や新型シークエンサーの読み取りエラーでは 長さが異なる ことがあるので、 長さの変化を考慮し効率の良い動的計画法 を用いる アラインメントの種類 説明 例 グローバルアラインメント 2本の配列の 全体 をアラインメントする。 Needleman-Wunsch ローカルアラインメント 2本の配列の 似ている部分を検出 し、その部分をアランメントする Smith-Waterman 実装 各種アラインメントを実装していく。なお、全て Affine gap penalty を利用する。 In [1]: from kerasy.Bio.alignment import NeedlemanWunshGotoh , SmithWaterman , BackwardNeedlemanWunshGotoh In [2]: # サンプル配列 seqX = \"GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACGGAGCTGTGGCAGACCTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGCGAGGACTG\" seqY = \"CGCATGCGGAGTGAGGGGAGCAGTTGGGAACAGATGGTCCCGCCGAGGGACCGGTGGGCAGACGGGGCCAGCTGTGGCAGACACTGGCTTCTAACCACCGAACGTTCTTTCCGCTCCGC\" Needleman-Wunsch-Gotoh 自作のモジュール （ kerasy.Bio.alignment.NeedlemanWunshGotoh ） を使ってアラインメントをします。 In [3]: model = NeedlemanWunshGotoh () In [4]: model . align ( seqX , seqY ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== Smith-Waterman 自作のモジュール （ kerasy.Bio.alignment.SmithWaterman ） を使ってアラインメントをします。 In [5]: model = SmithWaterman () In [6]: model . align ( seqX , seqY ) Smith-Waterman Alignment score: 37.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== Aligned positions: X[0,111] Y[7,118] X: GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAAGGCGACG Y: GGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GGGCAGACG X: G----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCTCCGC Y: GGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCTCCGC =============================================================== 制約付きアラインメント $x_i$ と $y_j$ がアラインされるという制約下で最大のアラインメントスコアを求める。 全てのパターンを列挙すると $\\mathcal{O}(n&#94;2m&#94;2)$ の時間がかかるが、 後ろ向きアラインメント と組み合わせることで全てのパターンを $\\mathcal{O}(nm)$ で計算可能。 前向き：xiとyjがアラインされる時の、iまでとjまでの配列の最大アラインメントスコアを保持。 後ろ向き：xiとyjがアラインされる時の、i+1以降とj+1以降の配列の最大アラインメントスコアを保持。 Needleman-Wunsch-Gotohの逆向きアラインメントは （ kerasy.Bio.alignment.BackwardNeedlemanWunshGotoh ） に定義してあります。 In [7]: model_forward = NeedlemanWunshGotoh () model_backward = BackwardNeedlemanWunshGotoh () In [8]: model_forward . align ( seqX , seqY , memorize = True ) Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGG-AACAGATGGTC-CCGCCGAGGGACCGGT-GG X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTT-CTAACCACCGAACGT-TCTTTCCGCT X: CCGCGAGGACTG Y: CCGC-------- =============================================================== In [9]: model_backward . align ( seqX , seqY , memorize = True ) Backward Needleman-Wunsh-Gotoh Alignment score: 14.0 |parameter |value| ----------------------------- |match | 1| |mimatch | -1| |gap opening penalty | 5| |gap extension penalty| 1| =============================================================== X: -------GGAGTGAGGGGAGCAGTTGGGCTGAAGATGGTCAACGCCGAGGGAACGGTAAA Y: CGCATGCGGAGTGAGGGGAGCAGTTGGGAACA-GATGGTCC-CGCCGAGGGACCGGTGG- X: GGCGACGG----AGCTGTGGCAGAC-CTGGCTTCCTAACCACGTCCCGTGTTTTGCGGCT Y: GCAGACGGGGCCAGCTGTGGCAGACACTGGCTTC-TAACCACCGAACGTTCTTTCCG-CT X: CCGCGAGGACT Y: CCGC------- =============================================================== In [10]: k = 3 n = len ( seqX ) + 1 m = len ( seqY ) + 1 In [11]: M = model_forward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] bM = model_backward . DP . reshape (( k , n , m ))[ 0 , 1 :, 1 :] In [12]: A = M + bM In [13]: # 上の配列を見れば、seqX[0] と seqY[7] がアラインされている時に最大スコア14を取ることがわかるので、それを確かめる。 print ( A [ 0 , 7 ]) 14.0 In [14]: # 可視化のために pandas を使用。 import pandas as pd pd . set_option ( 'display.max_rows' , m ) pd . set_option ( 'display.max_columns' , n ) In [15]: df = pd . DataFrame ( A ) In [16]: df Out[16]: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 0 12.0 10.0 8.0 8.0 8.0 10.0 8.0 14.0 7.0 2.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -17.0 -20.0 -25.0 -26.0 -31.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -51.0 -54.0 -55.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -129.0 -132.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -150.0 -156.0 -156.0 -159.0 -160.0 -163.0 -164.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -181.0 -184.0 -187.0 -190.0 -193.0 -194.0 -197.0 -198.0 -201.0 -200.0 -203.0 -206.0 -209.0 -210.0 -211.0 -214.0 -217.0 -218.0 -221.0 -224.0 -225.0 -228.0 -229.0 -230.0 -235.0 -238.0 -241.0 -242.0 -243.0 -246.0 1 5.0 12.0 8.0 6.0 6.0 8.0 8.0 8.0 14.0 5.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -14.0 -17.0 -22.0 -25.0 -26.0 -33.0 -34.0 -35.0 -38.0 -39.0 -40.0 -41.0 -44.0 -49.0 -50.0 -53.0 -54.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -71.0 -72.0 -75.0 -76.0 -79.0 -76.0 -81.0 -80.0 -83.0 -84.0 -89.0 -92.0 -93.0 -94.0 -95.0 -98.0 -101.0 -100.0 -103.0 -106.0 -111.0 -112.0 -113.0 -118.0 -117.0 -118.0 -119.0 -122.0 -125.0 -128.0 -131.0 -132.0 -135.0 -140.0 -141.0 -144.0 -147.0 -148.0 -150.0 -157.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -171.0 -174.0 -179.0 -180.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -200.0 -203.0 -206.0 -211.0 -210.0 -211.0 -216.0 -217.0 -220.0 -223.0 -224.0 -227.0 -228.0 -229.0 -232.0 -237.0 -240.0 -243.0 -242.0 -243.0 2 2.0 3.0 10.0 8.0 6.0 6.0 6.0 6.0 6.0 14.0 3.0 0.0 -3.0 -4.0 -9.0 -12.0 -13.0 -16.0 -17.0 -24.0 -27.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -47.0 -48.0 -53.0 -54.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -125.0 -126.0 -131.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -150.0 -150.0 -157.0 -156.0 -159.0 -158.0 -163.0 -166.0 -169.0 -172.0 -171.0 -176.0 -177.0 -180.0 -183.0 -184.0 -187.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -200.0 -203.0 -204.0 -209.0 -210.0 -213.0 -214.0 -217.0 -220.0 -221.0 -224.0 -225.0 -228.0 -231.0 -234.0 -237.0 -238.0 -241.0 -242.0 3 -1.0 2.0 3.0 8.0 6.0 6.0 4.0 6.0 6.0 4.0 14.0 1.0 0.0 -5.0 -4.0 -9.0 -12.0 -13.0 -18.0 -17.0 -24.0 -29.0 -26.0 -31.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -44.0 -49.0 -48.0 -55.0 -56.0 -59.0 -60.0 -65.0 -64.0 -67.0 -68.0 -69.0 -70.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -89.0 -90.0 -91.0 -96.0 -95.0 -98.0 -101.0 -100.0 -105.0 -106.0 -111.0 -112.0 -113.0 -116.0 -117.0 -118.0 -121.0 -122.0 -127.0 -126.0 -133.0 -136.0 -137.0 -142.0 -143.0 -146.0 -150.0 -151.0 -150.0 -157.0 -156.0 -159.0 -160.0 -165.0 -166.0 -169.0 -172.0 -171.0 -176.0 -179.0 -182.0 -185.0 -186.0 -187.0 -192.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -209.0 -212.0 -213.0 -216.0 -217.0 -220.0 -223.0 -224.0 -225.0 -230.0 -233.0 -236.0 -239.0 -238.0 -241.0 4 -4.0 -3.0 0.0 1.0 8.0 4.0 4.0 2.0 4.0 4.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -11.0 -14.0 -15.0 -20.0 -19.0 -22.0 -27.0 -26.0 -29.0 -34.0 -35.0 -38.0 -41.0 -42.0 -41.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -60.0 -63.0 -64.0 -67.0 -66.0 -69.0 -68.0 -75.0 -76.0 -79.0 -76.0 -83.0 -80.0 -85.0 -84.0 -87.0 -92.0 -91.0 -94.0 -95.0 -100.0 -103.0 -100.0 -105.0 -106.0 -109.0 -112.0 -113.0 -116.0 -119.0 -118.0 -121.0 -124.0 -127.0 -128.0 -131.0 -136.0 -137.0 -142.0 -145.0 -148.0 -148.0 -153.0 -150.0 -155.0 -156.0 -159.0 -160.0 -165.0 -168.0 -169.0 -170.0 -171.0 -176.0 -177.0 -182.0 -185.0 -186.0 -189.0 -190.0 -193.0 -192.0 -197.0 -198.0 -201.0 -202.0 -205.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -220.0 -221.0 -224.0 -227.0 -228.0 -233.0 -234.0 -237.0 -238.0 5 -7.0 -4.0 -3.0 -2.0 -1.0 8.0 2.0 4.0 4.0 2.0 4.0 2.0 14.0 1.0 0.0 -3.0 -6.0 -9.0 -14.0 -15.0 -20.0 -21.0 -20.0 -25.0 -26.0 -29.0 -32.0 -33.0 -36.0 -39.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -59.0 -60.0 -61.0 -64.0 -65.0 -64.0 -67.0 -66.0 -73.0 -74.0 -77.0 -76.0 -81.0 -78.0 -83.0 -84.0 -85.0 -90.0 -91.0 -92.0 -95.0 -98.0 -101.0 -98.0 -103.0 -106.0 -107.0 -110.0 -111.0 -114.0 -117.0 -118.0 -121.0 -122.0 -127.0 -130.0 -131.0 -136.0 -137.0 -140.0 -144.0 -147.0 -146.0 -151.0 -150.0 -153.0 -156.0 -159.0 -160.0 -163.0 -166.0 -169.0 -170.0 -173.0 -176.0 -179.0 -182.0 -183.0 -184.0 -187.0 -190.0 -191.0 -190.0 -195.0 -198.0 -201.0 -200.0 -203.0 -206.0 -207.0 -210.0 -213.0 -214.0 -217.0 -218.0 -219.0 -224.0 -227.0 -230.0 -233.0 -232.0 -235.0 6 -10.0 -9.0 -6.0 -3.0 -4.0 -1.0 6.0 2.0 2.0 4.0 2.0 2.0 2.0 14.0 1.0 -2.0 -5.0 -8.0 -9.0 -14.0 -17.0 -18.0 -23.0 -20.0 -23.0 -28.0 -31.0 -34.0 -33.0 -34.0 -37.0 -38.0 -43.0 -44.0 -49.0 -52.0 -55.0 -56.0 -57.0 -58.0 -61.0 -64.0 -66.0 -62.0 -65.0 -66.0 -71.0 -74.0 -77.0 -76.0 -79.0 -76.0 -81.0 -84.0 -85.0 -88.0 -91.0 -94.0 -97.0 -96.0 -99.0 -98.0 -101.0 -104.0 -107.0 -110.0 -113.0 -114.0 -115.0 -116.0 -121.0 -124.0 -127.0 -130.0 -133.0 -136.0 -139.0 -141.0 -142.0 -147.0 -146.0 -149.0 -148.0 -153.0 -156.0 -159.0 -162.0 -163.0 -166.0 -167.0 -170.0 -173.0 -174.0 -177.0 -180.0 -183.0 -182.0 -187.0 -188.0 -191.0 -190.0 -193.0 -196.0 -199.0 -200.0 -203.0 -204.0 -207.0 -210.0 -211.0 -214.0 -215.0 -218.0 -221.0 -224.0 -227.0 -228.0 -231.0 -232.0 7 -13.0 -10.0 -9.0 -8.0 -5.0 -2.0 -1.0 6.0 2.0 0.0 4.0 0.0 2.0 1.0 14.0 3.0 0.0 -3.0 -8.0 -9.0 -14.0 -17.0 -18.0 -22.0 -18.0 -21.0 -26.0 -29.0 -32.0 -33.0 -34.0 -37.0 -38.0 -43.0 -46.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -59.0 -64.0 -64.0 -60.0 -63.0 -66.0 -69.0 -72.0 -75.0 -76.0 -77.0 -74.0 -79.0 -82.0 -83.0 -86.0 -89.0 -94.0 -95.0 -96.0 -97.0 -98.0 -99.0 -102.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -121.0 -124.0 -125.0 -130.0 -131.0 -134.0 -139.0 -139.0 -142.0 -145.0 -146.0 -147.0 -150.0 -153.0 -154.0 -157.0 -160.0 -163.0 -164.0 -167.0 -170.0 -173.0 -176.0 -177.0 -180.0 -181.0 -184.0 -185.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -200.0 -201.0 -204.0 -207.0 -208.0 -211.0 -212.0 -213.0 -218.0 -221.0 -224.0 -225.0 -226.0 -229.0 8 -16.0 -13.0 -12.0 -11.0 -10.0 -5.0 -4.0 -1.0 6.0 0.0 2.0 2.0 2.0 0.0 3.0 14.0 3.0 0.0 -5.0 -6.0 -11.0 -14.0 -15.0 -18.0 -21.0 -16.0 -21.0 -26.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -52.0 -55.0 -56.0 -59.0 -64.0 -62.0 -60.0 -61.0 -66.0 -69.0 -72.0 -75.0 -74.0 -75.0 -74.0 -79.0 -80.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -95.0 -96.0 -99.0 -102.0 -105.0 -108.0 -109.0 -112.0 -113.0 -118.0 -121.0 -122.0 -127.0 -128.0 -131.0 -135.0 -138.0 -137.0 -142.0 -143.0 -144.0 -147.0 -150.0 -151.0 -154.0 -157.0 -160.0 -161.0 -164.0 -167.0 -170.0 -173.0 -174.0 -177.0 -178.0 -179.0 -182.0 -183.0 -186.0 -189.0 -190.0 -191.0 -194.0 -197.0 -198.0 -201.0 -204.0 -205.0 -208.0 -209.0 -210.0 -215.0 -218.0 -221.0 -222.0 -223.0 -226.0 9 -19.0 -16.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 4.0 2.0 0.0 2.0 0.0 2.0 3.0 14.0 3.0 -2.0 -3.0 -8.0 -11.0 -12.0 -17.0 -16.0 -19.0 -16.0 -21.0 -26.0 -27.0 -28.0 -31.0 -32.0 -37.0 -40.0 -39.0 -44.0 -47.0 -48.0 -49.0 -52.0 -53.0 -58.0 -57.0 -62.0 -62.0 -58.0 -61.0 -66.0 -69.0 -72.0 -73.0 -72.0 -75.0 -74.0 -77.0 -80.0 -83.0 -88.0 -89.0 -90.0 -95.0 -94.0 -93.0 -96.0 -99.0 -102.0 -105.0 -106.0 -109.0 -110.0 -115.0 -118.0 -119.0 -124.0 -125.0 -128.0 -132.0 -133.0 -136.0 -137.0 -140.0 -141.0 -144.0 -147.0 -148.0 -151.0 -154.0 -157.0 -158.0 -161.0 -164.0 -167.0 -170.0 -171.0 -174.0 -175.0 -178.0 -177.0 -180.0 -183.0 -186.0 -187.0 -188.0 -191.0 -194.0 -195.0 -198.0 -201.0 -202.0 -205.0 -206.0 -207.0 -212.0 -215.0 -218.0 -219.0 -220.0 -223.0 10 -22.0 -19.0 -18.0 -17.0 -16.0 -11.0 -10.0 -7.0 -4.0 -3.0 4.0 0.0 0.0 0.0 0.0 2.0 3.0 14.0 1.0 0.0 -5.0 -8.0 -9.0 -14.0 -15.0 -14.0 -19.0 -16.0 -21.0 -24.0 -25.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -44.0 -45.0 -46.0 -49.0 -50.0 -55.0 -58.0 -55.0 -62.0 -60.0 -58.0 -61.0 -66.0 -69.0 -70.0 -71.0 -72.0 -77.0 -72.0 -77.0 -80.0 -83.0 -88.0 -87.0 -90.0 -93.0 -92.0 -93.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -112.0 -115.0 -116.0 -121.0 -122.0 -125.0 -129.0 -130.0 -131.0 -136.0 -135.0 -138.0 -141.0 -144.0 -145.0 -148.0 -151.0 -154.0 -155.0 -158.0 -161.0 -162.0 -167.0 -168.0 -169.0 -172.0 -175.0 -176.0 -175.0 -180.0 -183.0 -186.0 -185.0 -188.0 -191.0 -192.0 -195.0 -198.0 -199.0 -202.0 -203.0 -204.0 -209.0 -212.0 -213.0 -218.0 -217.0 -220.0 11 -22.0 -24.0 -21.0 -18.0 -19.0 -16.0 -12.0 -12.0 -9.0 -4.0 -5.0 2.0 -2.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -13.0 -14.0 -19.0 -16.0 -19.0 -22.0 -23.0 -28.0 -29.0 -34.0 -37.0 -38.0 -39.0 -42.0 -43.0 -46.0 -49.0 -52.0 -55.0 -58.0 -55.0 -60.0 -60.0 -58.0 -61.0 -66.0 -67.0 -68.0 -71.0 -74.0 -75.0 -72.0 -79.0 -82.0 -81.0 -86.0 -87.0 -88.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -120.0 -124.0 -127.0 -127.0 -128.0 -131.0 -134.0 -133.0 -138.0 -141.0 -142.0 -147.0 -148.0 -151.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -168.0 -167.0 -172.0 -173.0 -176.0 -175.0 -178.0 -181.0 -184.0 -185.0 -188.0 -189.0 -192.0 -195.0 -196.0 -199.0 -200.0 -203.0 -206.0 -209.0 -212.0 -211.0 -216.0 -217.0 12 -28.0 -22.0 -24.0 -23.0 -20.0 -17.0 -16.0 -12.0 -10.0 -9.0 -4.0 -4.0 2.0 -4.0 0.0 -2.0 -2.0 0.0 1.0 14.0 1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -11.0 -12.0 -17.0 -16.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -35.0 -36.0 -37.0 -40.0 -43.0 -44.0 -49.0 -52.0 -53.0 -56.0 -55.0 -58.0 -58.0 -56.0 -61.0 -64.0 -65.0 -66.0 -71.0 -72.0 -73.0 -70.0 -79.0 -80.0 -81.0 -84.0 -87.0 -86.0 -89.0 -90.0 -91.0 -94.0 -97.0 -100.0 -101.0 -106.0 -109.0 -110.0 -115.0 -116.0 -118.0 -124.0 -126.0 -127.0 -126.0 -131.0 -132.0 -135.0 -138.0 -139.0 -140.0 -145.0 -148.0 -149.0 -152.0 -155.0 -158.0 -159.0 -160.0 -165.0 -166.0 -167.0 -170.0 -171.0 -174.0 -177.0 -180.0 -179.0 -182.0 -183.0 -186.0 -189.0 -192.0 -193.0 -194.0 -197.0 -198.0 -203.0 -206.0 -209.0 -212.0 -209.0 -214.0 13 -29.0 -30.0 -22.0 -26.0 -25.0 -22.0 -17.0 -17.0 -12.0 -12.0 -10.0 -6.0 -4.0 0.0 -4.0 -2.0 -4.0 -3.0 -2.0 2.0 14.0 1.0 -2.0 -5.0 -6.0 -9.0 -12.0 -11.0 -12.0 -15.0 -14.0 -19.0 -22.0 -25.0 -28.0 -31.0 -34.0 -35.0 -34.0 -35.0 -38.0 -43.0 -44.0 -47.0 -50.0 -53.0 -54.0 -55.0 -58.0 -60.0 -54.0 -59.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -70.0 -77.0 -78.0 -81.0 -82.0 -85.0 -88.0 -89.0 -92.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -124.0 -127.0 -124.0 -129.0 -130.0 -135.0 -138.0 -141.0 -140.0 -145.0 -146.0 -147.0 -152.0 -155.0 -158.0 -157.0 -158.0 -163.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -178.0 -179.0 -182.0 -181.0 -186.0 -189.0 -190.0 -191.0 -192.0 -197.0 -198.0 -203.0 -204.0 -207.0 -210.0 -209.0 14 -33.0 -30.0 -29.0 -22.0 -27.0 -25.0 -21.0 -18.0 -15.0 -10.0 -12.0 -8.0 -8.0 -2.0 -1.0 -5.0 -3.0 -6.0 -2.0 -2.0 4.0 14.0 1.0 -2.0 -3.0 -6.0 -7.0 -10.0 -9.0 -10.0 -13.0 -14.0 -19.0 -20.0 -25.0 -26.0 -31.0 -32.0 -33.0 -34.0 -37.0 -40.0 -43.0 -44.0 -49.0 -48.0 -51.0 -52.0 -53.0 -56.0 -58.0 -54.0 -59.0 -62.0 -65.0 -66.0 -69.0 -72.0 -73.0 -70.0 -75.0 -76.0 -79.0 -82.0 -83.0 -86.0 -89.0 -90.0 -91.0 -92.0 -97.0 -100.0 -103.0 -106.0 -109.0 -112.0 -115.0 -118.0 -118.0 -123.0 -122.0 -125.0 -124.0 -129.0 -132.0 -135.0 -136.0 -139.0 -142.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -159.0 -158.0 -163.0 -164.0 -167.0 -166.0 -169.0 -170.0 -175.0 -176.0 -179.0 -180.0 -183.0 -186.0 -187.0 -190.0 -191.0 -194.0 -197.0 -200.0 -203.0 -204.0 -207.0 -208.0 15 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -7.0 -2.0 -1.0 6.0 14.0 3.0 0.0 -1.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -14.0 -19.0 -22.0 -23.0 -24.0 -29.0 -30.0 -31.0 -34.0 -35.0 -40.0 -41.0 -42.0 -47.0 -48.0 -49.0 -50.0 -51.0 -56.0 -57.0 -52.0 -57.0 -62.0 -63.0 -64.0 -67.0 -70.0 -73.0 -70.0 -73.0 -76.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -97.0 -100.0 -101.0 -106.0 -107.0 -110.0 -115.0 -117.0 -118.0 -121.0 -122.0 -123.0 -126.0 -129.0 -130.0 -133.0 -134.0 -137.0 -140.0 -143.0 -146.0 -149.0 -152.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -165.0 -168.0 -169.0 -168.0 -173.0 -176.0 -177.0 -178.0 -181.0 -184.0 -187.0 -188.0 -189.0 -194.0 -197.0 -200.0 -203.0 -202.0 -205.0 16 -37.0 -34.0 -33.0 -30.0 -29.0 -22.0 -25.0 -24.0 -21.0 -18.0 -13.0 -10.0 -10.0 -8.0 -9.0 -2.0 -1.0 -5.0 -3.0 -5.0 -2.0 1.0 8.0 14.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -13.0 -14.0 -17.0 -22.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -37.0 -40.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -49.0 -54.0 -55.0 -52.0 -57.0 -62.0 -63.0 -66.0 -67.0 -70.0 -71.0 -70.0 -71.0 -74.0 -79.0 -80.0 -83.0 -84.0 -85.0 -88.0 -91.0 -94.0 -95.0 -100.0 -101.0 -106.0 -109.0 -112.0 -114.0 -117.0 -118.0 -119.0 -120.0 -123.0 -124.0 -129.0 -132.0 -133.0 -132.0 -135.0 -140.0 -141.0 -146.0 -149.0 -150.0 -153.0 -154.0 -157.0 -158.0 -161.0 -162.0 -165.0 -168.0 -167.0 -168.0 -171.0 -174.0 -175.0 -176.0 -179.0 -184.0 -185.0 -188.0 -191.0 -192.0 -197.0 -200.0 -201.0 -202.0 17 -38.0 -37.0 -32.0 -33.0 -30.0 -29.0 -22.0 -25.0 -23.0 -19.0 -19.0 -11.0 -11.0 -8.0 -8.0 -9.0 -2.0 -3.0 -5.0 -3.0 -5.0 0.0 1.0 10.0 14.0 5.0 4.0 -1.0 -2.0 -3.0 -4.0 -7.0 -10.0 -13.0 -12.0 -17.0 -22.0 -21.0 -24.0 -25.0 -28.0 -31.0 -34.0 -35.0 -38.0 -37.0 -40.0 -43.0 -46.0 -47.0 -48.0 -47.0 -52.0 -53.0 -50.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -68.0 -69.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -97.0 -98.0 -103.0 -106.0 -108.0 -111.0 -114.0 -115.0 -116.0 -117.0 -120.0 -121.0 -126.0 -129.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -146.0 -147.0 -150.0 -151.0 -154.0 -155.0 -158.0 -159.0 -162.0 -163.0 -166.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -181.0 -182.0 -185.0 -188.0 -189.0 -194.0 -195.0 -198.0 -199.0 18 -39.0 -38.0 -37.0 -32.0 -35.0 -30.0 -27.0 -22.0 -23.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -5.0 -3.0 -3.0 2.0 3.0 10.0 14.0 7.0 6.0 1.0 0.0 -1.0 -4.0 -5.0 -10.0 -13.0 -12.0 -15.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -34.0 -33.0 -36.0 -35.0 -38.0 -41.0 -46.0 -45.0 -46.0 -45.0 -50.0 -51.0 -50.0 -55.0 -58.0 -61.0 -62.0 -63.0 -68.0 -67.0 -66.0 -67.0 -70.0 -75.0 -78.0 -79.0 -82.0 -83.0 -88.0 -91.0 -92.0 -96.0 -98.0 -101.0 -106.0 -106.0 -109.0 -112.0 -113.0 -114.0 -117.0 -118.0 -121.0 -124.0 -127.0 -130.0 -131.0 -134.0 -137.0 -140.0 -143.0 -144.0 -147.0 -148.0 -151.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -168.0 -171.0 -174.0 -175.0 -178.0 -179.0 -180.0 -185.0 -188.0 -189.0 -192.0 -193.0 -196.0 19 -40.0 -39.0 -38.0 -37.0 -32.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -7.0 -2.0 -3.0 -7.0 -2.0 -1.0 2.0 5.0 12.0 14.0 7.0 6.0 3.0 2.0 -1.0 -2.0 -7.0 -10.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -23.0 -28.0 -31.0 -32.0 -33.0 -34.0 -35.0 -38.0 -41.0 -44.0 -43.0 -44.0 -45.0 -50.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -65.0 -66.0 -65.0 -66.0 -67.0 -70.0 -75.0 -76.0 -79.0 -80.0 -85.0 -88.0 -89.0 -94.0 -94.0 -98.0 -103.0 -105.0 -104.0 -109.0 -110.0 -111.0 -114.0 -117.0 -116.0 -121.0 -124.0 -127.0 -128.0 -131.0 -134.0 -137.0 -140.0 -141.0 -142.0 -145.0 -148.0 -149.0 -150.0 -153.0 -156.0 -157.0 -158.0 -161.0 -164.0 -165.0 -168.0 -171.0 -172.0 -175.0 -176.0 -177.0 -182.0 -185.0 -188.0 -187.0 -190.0 -193.0 20 -45.0 -40.0 -39.0 -40.0 -39.0 -30.0 -33.0 -30.0 -27.0 -22.0 -24.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -7.0 0.0 -1.0 4.0 7.0 12.0 14.0 7.0 8.0 5.0 2.0 1.0 -4.0 -7.0 -8.0 -11.0 -12.0 -13.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -32.0 -31.0 -34.0 -35.0 -38.0 -39.0 -42.0 -41.0 -44.0 -45.0 -48.0 -49.0 -50.0 -55.0 -58.0 -57.0 -60.0 -63.0 -64.0 -65.0 -66.0 -67.0 -70.0 -73.0 -76.0 -77.0 -82.0 -85.0 -86.0 -91.0 -92.0 -94.0 -100.0 -102.0 -103.0 -104.0 -107.0 -108.0 -111.0 -114.0 -115.0 -116.0 -121.0 -124.0 -125.0 -128.0 -131.0 -134.0 -135.0 -138.0 -141.0 -140.0 -143.0 -146.0 -147.0 -150.0 -153.0 -154.0 -155.0 -158.0 -159.0 -162.0 -165.0 -168.0 -169.0 -170.0 -173.0 -174.0 -179.0 -182.0 -185.0 -188.0 -185.0 -190.0 21 -44.0 -45.0 -40.0 -39.0 -40.0 -37.0 -30.0 -33.0 -30.0 -27.0 -22.0 -25.0 -22.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -5.0 0.0 1.0 6.0 7.0 12.0 14.0 9.0 10.0 5.0 2.0 -1.0 -4.0 -7.0 -8.0 -11.0 -10.0 -11.0 -14.0 -19.0 -20.0 -23.0 -28.0 -29.0 -30.0 -31.0 -34.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -48.0 -51.0 -50.0 -55.0 -56.0 -59.0 -58.0 -61.0 -64.0 -65.0 -68.0 -67.0 -68.0 -73.0 -76.0 -77.0 -82.0 -85.0 -88.0 -91.0 -94.0 -94.0 -99.0 -100.0 -103.0 -102.0 -105.0 -106.0 -111.0 -114.0 -117.0 -116.0 -119.0 -122.0 -123.0 -128.0 -131.0 -134.0 -133.0 -136.0 -139.0 -138.0 -141.0 -146.0 -147.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -166.0 -167.0 -168.0 -173.0 -174.0 -179.0 -180.0 -183.0 -186.0 -185.0 22 -47.0 -44.0 -45.0 -42.0 -39.0 -40.0 -35.0 -30.0 -33.0 -28.0 -29.0 -20.0 -25.0 -20.0 -19.0 -18.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 3.0 8.0 9.0 14.0 14.0 9.0 8.0 3.0 0.0 -1.0 -6.0 -9.0 -8.0 -11.0 -10.0 -13.0 -16.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -42.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -55.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -67.0 -70.0 -75.0 -78.0 -77.0 -84.0 -85.0 -89.0 -93.0 -95.0 -94.0 -99.0 -100.0 -103.0 -102.0 -107.0 -106.0 -113.0 -116.0 -117.0 -116.0 -119.0 -124.0 -123.0 -130.0 -133.0 -134.0 -135.0 -136.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -151.0 -152.0 -155.0 -158.0 -157.0 -162.0 -163.0 -168.0 -167.0 -170.0 -175.0 -174.0 -181.0 -180.0 -183.0 -186.0 23 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -5.0 -3.0 2.0 5.0 10.0 11.0 14.0 14.0 7.0 8.0 1.0 -2.0 -1.0 -6.0 -9.0 -8.0 -11.0 -12.0 -13.0 -18.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -37.0 -36.0 -37.0 -44.0 -41.0 -44.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -70.0 -77.0 -80.0 -77.0 -86.0 -85.0 -89.0 -94.0 -95.0 -94.0 -99.0 -100.0 -103.0 -104.0 -109.0 -106.0 -113.0 -116.0 -119.0 -116.0 -121.0 -126.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -148.0 -151.0 -150.0 -151.0 -154.0 -155.0 -160.0 -159.0 -162.0 -165.0 -168.0 -167.0 -172.0 -177.0 -176.0 -183.0 -180.0 -183.0 24 -51.0 -50.0 -47.0 -44.0 -45.0 -42.0 -39.0 -38.0 -35.0 -30.0 -31.0 -28.0 -27.0 -20.0 -23.0 -20.0 -19.0 -16.0 -11.0 -12.0 -8.0 -8.0 -9.0 -2.0 -4.0 -1.0 2.0 5.0 10.0 11.0 14.0 14.0 5.0 8.0 -1.0 -4.0 -3.0 -6.0 -9.0 -8.0 -13.0 -14.0 -13.0 -20.0 -23.0 -20.0 -25.0 -28.0 -29.0 -30.0 -31.0 -36.0 -39.0 -36.0 -37.0 -44.0 -41.0 -46.0 -43.0 -50.0 -51.0 -50.0 -57.0 -58.0 -59.0 -58.0 -63.0 -64.0 -67.0 -68.0 -71.0 -72.0 -79.0 -82.0 -79.0 -86.0 -87.0 -89.0 -92.0 -93.0 -94.0 -97.0 -98.0 -103.0 -106.0 -109.0 -108.0 -113.0 -116.0 -117.0 -118.0 -123.0 -124.0 -125.0 -130.0 -131.0 -132.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -150.0 -153.0 -154.0 -157.0 -160.0 -159.0 -164.0 -165.0 -168.0 -169.0 -174.0 -177.0 -178.0 -181.0 -180.0 25 -54.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -41.0 -38.0 -33.0 -32.0 -31.0 -30.0 -25.0 -22.0 -25.0 -22.0 -21.0 -16.0 -13.0 -14.0 -8.0 -10.0 -9.0 -4.0 -4.0 -1.0 2.0 7.0 10.0 9.0 14.0 12.0 7.0 6.0 -1.0 -4.0 -3.0 -6.0 -7.0 -10.0 -13.0 -16.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -30.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -64.0 -65.0 -70.0 -73.0 -74.0 -79.0 -82.0 -81.0 -88.0 -89.0 -89.0 -94.0 -93.0 -94.0 -97.0 -100.0 -105.0 -108.0 -111.0 -108.0 -115.0 -116.0 -119.0 -120.0 -123.0 -124.0 -125.0 -132.0 -131.0 -134.0 -135.0 -138.0 -139.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -161.0 -164.0 -167.0 -170.0 -171.0 -176.0 -177.0 -178.0 -181.0 26 -57.0 -54.0 -52.0 -52.0 -49.0 -46.0 -45.0 -42.0 -39.0 -38.0 -33.0 -34.0 -31.0 -30.0 -25.0 -22.0 -23.0 -22.0 -23.0 -16.0 -15.0 -15.0 -8.0 -12.0 -10.0 -4.0 -2.0 1.0 2.0 5.0 8.0 7.0 14.0 10.0 5.0 6.0 -1.0 -4.0 -3.0 -6.0 -9.0 -10.0 -15.0 -18.0 -13.0 -22.0 -21.0 -20.0 -25.0 -28.0 -29.0 -32.0 -29.0 -34.0 -39.0 -36.0 -37.0 -42.0 -43.0 -48.0 -43.0 -50.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 -63.0 -66.0 -65.0 -72.0 -75.0 -74.0 -81.0 -82.0 -81.0 -89.0 -90.0 -89.0 -94.0 -93.0 -94.0 -99.0 -102.0 -105.0 -108.0 -111.0 -110.0 -115.0 -118.0 -121.0 -122.0 -125.0 -124.0 -125.0 -132.0 -133.0 -134.0 -135.0 -138.0 -141.0 -138.0 -143.0 -146.0 -149.0 -150.0 -153.0 -156.0 -157.0 -160.0 -161.0 -162.0 -167.0 -170.0 -173.0 -176.0 -175.0 -178.0 27 -60.0 -59.0 -56.0 -52.0 -54.0 -51.0 -48.0 -46.0 -44.0 -39.0 -39.0 -35.0 -35.0 -31.0 -31.0 -26.0 -24.0 -25.0 -22.0 -23.0 -18.0 -15.0 -15.0 -8.0 -12.0 -9.0 -6.0 -4.0 1.0 2.0 3.0 8.0 6.0 14.0 8.0 3.0 6.0 -1.0 -2.0 -3.0 -6.0 -9.0 -12.0 -13.0 -16.0 -13.0 -20.0 -21.0 -20.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -36.0 -37.0 -42.0 -43.0 -46.0 -43.0 -48.0 -49.0 -50.0 -55.0 -58.0 -59.0 -60.0 -61.0 -66.0 -67.0 -72.0 -75.0 -76.0 -81.0 -83.0 -83.0 -87.0 -92.0 -89.0 -94.0 -93.0 -96.0 -101.0 -104.0 -107.0 -108.0 -109.0 -110.0 -115.0 -118.0 -119.0 -122.0 -125.0 -126.0 -125.0 -132.0 -133.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -156.0 -159.0 -160.0 -163.0 -164.0 -169.0 -172.0 -175.0 -176.0 -175.0 28 -62.0 -62.0 -59.0 -57.0 -52.0 -54.0 -50.0 -49.0 -44.0 -43.0 -41.0 -37.0 -36.0 -33.0 -32.0 -31.0 -26.0 -26.0 -26.0 -24.0 -24.0 -19.0 -17.0 -13.0 -8.0 -10.0 -7.0 -7.0 -4.0 -1.0 0.0 2.0 6.0 6.0 14.0 8.0 1.0 6.0 -1.0 -2.0 -5.0 -8.0 -11.0 -14.0 -13.0 -16.0 -13.0 -20.0 -21.0 -22.0 -25.0 -26.0 -31.0 -32.0 -29.0 -34.0 -37.0 -38.0 -37.0 -42.0 -43.0 -48.0 -43.0 -48.0 -49.0 -50.0 -57.0 -58.0 -59.0 -62.0 -63.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -83.0 -84.0 -89.0 -92.0 -89.0 -94.0 -95.0 -96.0 -103.0 -106.0 -107.0 -108.0 -109.0 -112.0 -115.0 -120.0 -121.0 -122.0 -127.0 -126.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -143.0 -138.0 -143.0 -148.0 -149.0 -152.0 -153.0 -158.0 -159.0 -162.0 -165.0 -164.0 -171.0 -172.0 -175.0 -176.0 29 -65.0 -62.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -42.0 -43.0 -42.0 -37.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -25.0 -22.0 -19.0 -18.0 -13.0 -8.0 -8.0 -5.0 -6.0 -5.0 -2.0 -1.0 2.0 5.0 6.0 14.0 8.0 1.0 6.0 1.0 -2.0 -3.0 -8.0 -11.0 -12.0 -11.0 -14.0 -13.0 -18.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -35.0 -40.0 -37.0 -40.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -56.0 -59.0 -60.0 -65.0 -68.0 -67.0 -74.0 -75.0 -78.0 -83.0 -81.0 -84.0 -89.0 -90.0 -89.0 -94.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -111.0 -114.0 -117.0 -120.0 -121.0 -124.0 -125.0 -128.0 -127.0 -130.0 -133.0 -136.0 -135.0 -136.0 -141.0 -140.0 -143.0 -148.0 -151.0 -152.0 -155.0 -156.0 -157.0 -162.0 -165.0 -166.0 -169.0 -170.0 -173.0 30 -64.0 -65.0 -64.0 -61.0 -60.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -18.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 2.0 6.0 -1.0 -2.0 -5.0 -10.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -25.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -40.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -59.0 -62.0 -67.0 -68.0 -69.0 -74.0 -75.0 -80.0 -84.0 -81.0 -84.0 -89.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -104.0 -107.0 -108.0 -113.0 -116.0 -117.0 -120.0 -123.0 -124.0 -125.0 -128.0 -127.0 -130.0 -135.0 -138.0 -135.0 -136.0 -143.0 -140.0 -145.0 -148.0 -151.0 -154.0 -155.0 -156.0 -159.0 -164.0 -167.0 -166.0 -169.0 -170.0 31 -67.0 -64.0 -65.0 -64.0 -61.0 -58.0 -55.0 -52.0 -53.0 -50.0 -47.0 -42.0 -45.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -27.0 -22.0 -19.0 -17.0 -12.0 -8.0 -8.0 -5.0 -6.0 -5.0 -4.0 -1.0 2.0 3.0 8.0 14.0 8.0 4.0 4.0 -2.0 -4.0 -7.0 -11.0 -11.0 -12.0 -11.0 -14.0 -13.0 -20.0 -23.0 -22.0 -27.0 -24.0 -29.0 -30.0 -29.0 -32.0 -37.0 -38.0 -37.0 -42.0 -45.0 -46.0 -43.0 -46.0 -47.0 -50.0 -55.0 -58.0 -61.0 -62.0 -67.0 -68.0 -71.0 -75.0 -76.0 -81.0 -82.0 -81.0 -84.0 -87.0 -90.0 -91.0 -96.0 -97.0 -96.0 -101.0 -102.0 -107.0 -106.0 -113.0 -114.0 -115.0 -120.0 -121.0 -122.0 -123.0 -128.0 -127.0 -132.0 -135.0 -136.0 -135.0 -136.0 -141.0 -140.0 -145.0 -146.0 -149.0 -152.0 -155.0 -158.0 -159.0 -164.0 -167.0 -166.0 -169.0 32 -68.0 -67.0 -62.0 -65.0 -64.0 -61.0 -56.0 -55.0 -52.0 -51.0 -50.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -28.0 -25.0 -22.0 -19.0 -15.0 -10.0 -8.0 -8.0 -5.0 -6.0 -3.0 -4.0 -1.0 2.0 3.0 10.0 14.0 9.0 6.0 2.0 0.0 -3.0 -6.0 -9.0 -10.0 -11.0 -10.0 -16.0 -13.0 -19.0 -22.0 -21.0 -26.0 -24.0 -28.0 -31.0 -29.0 -32.0 -36.0 -39.0 -36.0 -43.0 -44.0 -45.0 -45.0 -46.0 -47.0 -52.0 -56.0 -57.0 -62.0 -64.0 -68.0 -70.0 -73.0 -74.0 -76.0 -80.0 -81.0 -80.0 -84.0 -86.0 -91.0 -93.0 -97.0 -96.0 -98.0 -101.0 -102.0 -108.0 -106.0 -114.0 -113.0 -114.0 -119.0 -120.0 -121.0 -122.0 -127.0 -129.0 -131.0 -134.0 -135.0 -137.0 -136.0 -142.0 -142.0 -145.0 -146.0 -148.0 -153.0 -154.0 -159.0 -159.0 -163.0 -166.0 -165.0 33 -71.0 -68.0 -65.0 -62.0 -65.0 -62.0 -59.0 -56.0 -53.0 -50.0 -51.0 -48.0 -45.0 -42.0 -43.0 -42.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -26.0 -24.0 -21.0 -18.0 -13.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -4.0 -1.0 2.0 5.0 12.0 14.0 7.0 4.0 1.0 -2.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -15.0 -15.0 -19.0 -22.0 -19.0 -24.0 -24.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -47.0 -53.0 -56.0 -59.0 -62.0 -65.0 -68.0 -71.0 -73.0 -74.0 -75.0 -78.0 -79.0 -80.0 -85.0 -88.0 -91.0 -94.0 -95.0 -98.0 -98.0 -102.0 -104.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -120.0 -121.0 -120.0 -125.0 -130.0 -131.0 -132.0 -135.0 -136.0 -138.0 -142.0 -142.0 -146.0 -146.0 -150.0 -153.0 -154.0 -159.0 -159.0 -163.0 -164.0 34 -72.0 -71.0 -68.0 -65.0 -62.0 -63.0 -60.0 -59.0 -56.0 -51.0 -50.0 -49.0 -48.0 -43.0 -42.0 -43.0 -40.0 -39.0 -36.0 -33.0 -32.0 -29.0 -26.0 -27.0 -25.0 -22.0 -19.0 -16.0 -11.0 -8.0 -8.0 -8.0 -5.0 -4.0 -3.0 -2.0 1.0 4.0 7.0 14.0 12.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -15.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -29.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -45.0 -46.0 -49.0 -55.0 -58.0 -61.0 -64.0 -67.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -82.0 -87.0 -90.0 -91.0 -94.0 -97.0 -98.0 -100.0 -104.0 -104.0 -106.0 -105.0 -114.0 -113.0 -114.0 -119.0 -122.0 -121.0 -120.0 -127.0 -130.0 -131.0 -132.0 -135.0 -138.0 -140.0 -142.0 -142.0 -146.0 -148.0 -152.0 -155.0 -154.0 -161.0 -159.0 -163.0 35 -73.0 -74.0 -69.0 -70.0 -66.0 -64.0 -61.0 -62.0 -59.0 -56.0 -53.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -42.0 -41.0 -38.0 -33.0 -34.0 -31.0 -28.0 -28.0 -25.0 -22.0 -19.0 -16.0 -13.0 -8.0 -10.0 -10.0 -7.0 -6.0 -5.0 -2.0 1.0 6.0 9.0 14.0 10.0 5.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -9.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -47.0 -48.0 -49.0 -57.0 -60.0 -63.0 -65.0 -69.0 -70.0 -72.0 -73.0 -76.0 -75.0 -78.0 -79.0 -84.0 -87.0 -92.0 -91.0 -96.0 -97.0 -98.0 -102.0 -106.0 -106.0 -106.0 -105.0 -114.0 -113.0 -114.0 -121.0 -122.0 -123.0 -120.0 -127.0 -130.0 -133.0 -132.0 -137.0 -138.0 -140.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -161.0 -159.0 36 -78.0 -73.0 -74.0 -71.0 -72.0 -66.0 -66.0 -61.0 -60.0 -59.0 -56.0 -55.0 -52.0 -51.0 -48.0 -45.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -30.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -10.0 -12.0 -9.0 -6.0 -3.0 -2.0 1.0 4.0 7.0 14.0 8.0 3.0 2.0 -1.0 -4.0 -3.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -26.0 -26.0 -26.0 -29.0 -31.0 -31.0 -34.0 -37.0 -36.0 -41.0 -42.0 -45.0 -47.0 -50.0 -51.0 -56.0 -61.0 -62.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -80.0 -81.0 -84.0 -86.0 -91.0 -93.0 -95.0 -98.0 -100.0 -102.0 -105.0 -106.0 -106.0 -105.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -120.0 -127.0 -128.0 -131.0 -134.0 -137.0 -136.0 -139.0 -142.0 -142.0 -148.0 -148.0 -154.0 -155.0 -154.0 -159.0 37 -79.0 -80.0 -73.0 -76.0 -73.0 -71.0 -66.0 -68.0 -63.0 -62.0 -60.0 -58.0 -57.0 -54.0 -53.0 -49.0 -47.0 -46.0 -45.0 -44.0 -39.0 -39.0 -37.0 -36.0 -34.0 -31.0 -28.0 -25.0 -22.0 -21.0 -18.0 -17.0 -12.0 -12.0 -14.0 -11.0 -8.0 -5.0 0.0 3.0 4.0 5.0 14.0 8.0 1.0 0.0 -1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -39.0 -44.0 -47.0 -47.0 -52.0 -53.0 -58.0 -62.0 -64.0 -64.0 -70.0 -71.0 -71.0 -73.0 -76.0 -75.0 -82.0 -83.0 -84.0 -86.0 -92.0 -93.0 -94.0 -99.0 -102.0 -101.0 -104.0 -106.0 -106.0 -105.0 -112.0 -115.0 -114.0 -119.0 -122.0 -125.0 -120.0 -125.0 -126.0 -131.0 -134.0 -135.0 -134.0 -137.0 -142.0 -142.0 -148.0 -147.0 -152.0 -153.0 -154.0 38 -81.0 -80.0 -78.0 -75.0 -77.0 -75.0 -69.0 -66.0 -68.0 -64.0 -64.0 -58.0 -59.0 -56.0 -55.0 -54.0 -49.0 -49.0 -47.0 -46.0 -44.0 -40.0 -39.0 -39.0 -37.0 -34.0 -30.0 -28.0 -25.0 -24.0 -21.0 -19.0 -19.0 -14.0 -14.0 -14.0 -11.0 -8.0 -3.0 0.0 3.0 2.0 5.0 14.0 6.0 -1.0 -1.0 1.0 -4.0 -5.0 -4.0 -7.0 -8.0 -11.0 -8.0 -17.0 -17.0 -19.0 -22.0 -19.0 -24.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -36.0 -41.0 -46.0 -47.0 -49.0 -54.0 -55.0 -60.0 -63.0 -64.0 -64.0 -72.0 -71.0 -71.0 -73.0 -76.0 -77.0 -84.0 -85.0 -84.0 -88.0 -92.0 -93.0 -96.0 -101.0 -104.0 -101.0 -104.0 -108.0 -106.0 -105.0 -114.0 -115.0 -116.0 -119.0 -122.0 -124.0 -122.0 -125.0 -128.0 -133.0 -134.0 -135.0 -134.0 -139.0 -142.0 -144.0 -148.0 -147.0 -152.0 -153.0 39 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -46.0 -45.0 -40.0 -37.0 -39.0 -35.0 -32.0 -28.0 -28.0 -27.0 -25.0 -23.0 -19.0 -21.0 -16.0 -14.0 -12.0 -11.0 -8.0 -5.0 -2.0 3.0 0.0 4.0 14.0 4.0 0.0 -1.0 2.0 -3.0 -5.0 -4.0 -7.0 -7.0 -11.0 -8.0 -16.0 -17.0 -18.0 -22.0 -19.0 -23.0 -26.0 -26.0 -29.0 -33.0 -31.0 -36.0 -37.0 -38.0 -41.0 -47.0 -49.0 -49.0 -56.0 -55.0 -60.0 -62.0 -65.0 -64.0 -71.0 -70.0 -71.0 -75.0 -78.0 -77.0 -83.0 -85.0 -86.0 -88.0 -93.0 -95.0 -98.0 -102.0 -105.0 -101.0 -106.0 -108.0 -106.0 -105.0 -114.0 -117.0 -118.0 -119.0 -122.0 -125.0 -122.0 -127.0 -130.0 -133.0 -136.0 -135.0 -134.0 -141.0 -144.0 -146.0 -150.0 -147.0 -152.0 40 -87.0 -86.0 -81.0 -80.0 -79.0 -76.0 -75.0 -74.0 -69.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -52.0 -49.0 -50.0 -47.0 -44.0 -45.0 -40.0 -36.0 -37.0 -36.0 -34.0 -28.0 -28.0 -29.0 -23.0 -25.0 -19.0 -22.0 -17.0 -16.0 -14.0 -11.0 -8.0 -6.0 -4.0 1.0 -1.0 4.0 14.0 2.0 -1.0 -2.0 2.0 -1.0 -4.0 -4.0 -7.0 -7.0 -10.0 -8.0 -16.0 -17.0 -16.0 -21.0 -19.0 -21.0 -24.0 -26.0 -29.0 -33.0 -31.0 -35.0 -36.0 -40.0 -43.0 -47.0 -50.0 -51.0 -56.0 -57.0 -61.0 -60.0 -67.0 -64.0 -69.0 -68.0 -73.0 -76.0 -79.0 -79.0 -83.0 -86.0 -86.0 -90.0 -93.0 -94.0 -97.0 -102.0 -103.0 -100.0 -106.0 -108.0 -108.0 -105.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -124.0 -129.0 -130.0 -133.0 -134.0 -137.0 -136.0 -143.0 -146.0 -146.0 -150.0 -147.0 41 -90.0 -87.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -66.0 -67.0 -64.0 -63.0 -58.0 -57.0 -56.0 -55.0 -54.0 -49.0 -52.0 -49.0 -44.0 -45.0 -42.0 -34.0 -35.0 -34.0 -33.0 -28.0 -29.0 -28.0 -23.0 -26.0 -19.0 -20.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -5.0 0.0 1.0 6.0 14.0 3.0 1.0 -1.0 2.0 1.0 -2.0 -3.0 -6.0 -5.0 -8.0 -8.0 -14.0 -15.0 -16.0 -21.0 -19.0 -19.0 -22.0 -25.0 -28.0 -31.0 -31.0 -35.0 -36.0 -41.0 -44.0 -45.0 -50.0 -51.0 -54.0 -58.0 -59.0 -60.0 -65.0 -64.0 -67.0 -70.0 -73.0 -74.0 -77.0 -79.0 -83.0 -84.0 -87.0 -90.0 -93.0 -96.0 -99.0 -100.0 -103.0 -100.0 -105.0 -106.0 -108.0 -107.0 -112.0 -113.0 -116.0 -119.0 -120.0 -123.0 -126.0 -127.0 -130.0 -131.0 -132.0 -137.0 -138.0 -143.0 -144.0 -145.0 -148.0 42 -93.0 -90.0 -89.0 -88.0 -85.0 -82.0 -81.0 -76.0 -75.0 -74.0 -71.0 -66.0 -67.0 -66.0 -63.0 -58.0 -57.0 -56.0 -57.0 -54.0 -51.0 -52.0 -49.0 -46.0 -46.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -28.0 -25.0 -28.0 -19.0 -20.0 -19.0 -16.0 -13.0 -12.0 -9.0 -8.0 -5.0 0.0 -1.0 8.0 14.0 3.0 1.0 1.0 4.0 3.0 -2.0 -3.0 -4.0 -5.0 -8.0 -8.0 -12.0 -13.0 -18.0 -19.0 -18.0 -19.0 -22.0 -25.0 -28.0 -29.0 -32.0 -33.0 -38.0 -41.0 -42.0 -47.0 -48.0 -51.0 -55.0 -56.0 -57.0 -60.0 -63.0 -64.0 -67.0 -70.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -98.0 -103.0 -106.0 -109.0 -107.0 -111.0 -113.0 -117.0 -118.0 -121.0 -124.0 -125.0 -128.0 -129.0 -130.0 -134.0 -138.0 -140.0 -142.0 -143.0 -145.0 43 -96.0 -93.0 -90.0 -91.0 -90.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -51.0 -48.0 -44.0 -41.0 -34.0 -35.0 -36.0 -33.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -20.0 -19.0 -16.0 -15.0 -12.0 -9.0 -10.0 -3.0 -2.0 1.0 8.0 14.0 1.0 3.0 3.0 6.0 3.0 -2.0 -1.0 -4.0 -5.0 -8.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -19.0 -22.0 -25.0 -26.0 -29.0 -30.0 -35.0 -38.0 -39.0 -44.0 -45.0 -48.0 -52.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -78.0 -81.0 -84.0 -87.0 -90.0 -91.0 -92.0 -97.0 -98.0 -99.0 -96.0 -103.0 -106.0 -109.0 -107.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 -125.0 -126.0 -127.0 -132.0 -135.0 -138.0 -141.0 -140.0 -143.0 44 -97.0 -96.0 -93.0 -90.0 -91.0 -88.0 -85.0 -84.0 -81.0 -76.0 -77.0 -74.0 -73.0 -66.0 -69.0 -66.0 -63.0 -58.0 -57.0 -58.0 -57.0 -54.0 -53.0 -52.0 -50.0 -47.0 -44.0 -41.0 -34.0 -35.0 -36.0 -31.0 -28.0 -29.0 -30.0 -27.0 -26.0 -19.0 -18.0 -17.0 -16.0 -15.0 -12.0 -9.0 -8.0 -3.0 -2.0 1.0 8.0 14.0 3.0 5.0 5.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -6.0 -5.0 -10.0 -13.0 -16.0 -17.0 -18.0 -19.0 -22.0 -23.0 -24.0 -29.0 -32.0 -35.0 -38.0 -41.0 -44.0 -47.0 -49.0 -50.0 -51.0 -54.0 -55.0 -56.0 -61.0 -64.0 -67.0 -70.0 -71.0 -74.0 -75.0 -78.0 -81.0 -82.0 -85.0 -90.0 -89.0 -90.0 -95.0 -98.0 -97.0 -96.0 -101.0 -106.0 -107.0 -107.0 -111.0 -112.0 -115.0 -118.0 -119.0 -122.0 -123.0 -126.0 -129.0 -132.0 -135.0 -136.0 -139.0 -140.0 45 -100.0 -97.0 -96.0 -93.0 -92.0 -89.0 -88.0 -85.0 -84.0 -79.0 -78.0 -77.0 -76.0 -71.0 -68.0 -71.0 -68.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -53.0 -51.0 -50.0 -47.0 -44.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -30.0 -32.0 -29.0 -24.0 -19.0 -16.0 -19.0 -16.0 -13.0 -14.0 -7.0 -6.0 -5.0 -2.0 1.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 0.0 1.0 -2.0 -3.0 -6.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -20.0 -21.0 -26.0 -29.0 -32.0 -35.0 -38.0 -41.0 -43.0 -46.0 -47.0 -52.0 -49.0 -54.0 -53.0 -58.0 -61.0 -64.0 -65.0 -68.0 -71.0 -72.0 -75.0 -78.0 -79.0 -82.0 -85.0 -88.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -105.0 -106.0 -109.0 -112.0 -115.0 -116.0 -117.0 -120.0 -123.0 -126.0 -129.0 -130.0 -135.0 -134.0 -137.0 46 -99.0 -100.0 -95.0 -96.0 -93.0 -92.0 -87.0 -88.0 -83.0 -82.0 -79.0 -78.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -58.0 -57.0 -60.0 -57.0 -56.0 -52.0 -49.0 -48.0 -45.0 -42.0 -39.0 -34.0 -37.0 -34.0 -33.0 -28.0 -31.0 -30.0 -27.0 -22.0 -17.0 -16.0 -19.0 -14.0 -13.0 -12.0 -5.0 -6.0 -3.0 -2.0 3.0 10.0 14.0 5.0 7.0 7.0 8.0 5.0 -2.0 1.0 -2.0 -3.0 -8.0 -3.0 -10.0 -11.0 -14.0 -17.0 -16.0 -17.0 -22.0 -23.0 -26.0 -31.0 -34.0 -37.0 -40.0 -43.0 -43.0 -46.0 -49.0 -52.0 -49.0 -54.0 -53.0 -60.0 -63.0 -66.0 -65.0 -70.0 -71.0 -72.0 -77.0 -80.0 -81.0 -82.0 -85.0 -90.0 -87.0 -90.0 -95.0 -96.0 -95.0 -96.0 -103.0 -104.0 -107.0 -106.0 -111.0 -114.0 -115.0 -116.0 -117.0 -122.0 -123.0 -128.0 -129.0 -130.0 -135.0 -134.0 47 -104.0 -99.0 -100.0 -97.0 -98.0 -93.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -78.0 -77.0 -74.0 -71.0 -68.0 -67.0 -68.0 -63.0 -60.0 -59.0 -60.0 -59.0 -55.0 -50.0 -47.0 -46.0 -45.0 -44.0 -41.0 -36.0 -37.0 -36.0 -35.0 -28.0 -31.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -10.0 -3.0 -4.0 -1.0 0.0 5.0 10.0 14.0 7.0 9.0 9.0 10.0 7.0 0.0 1.0 0.0 -5.0 -6.0 -3.0 -8.0 -9.0 -12.0 -15.0 -16.0 -19.0 -20.0 -25.0 -28.0 -29.0 -34.0 -35.0 -38.0 -42.0 -43.0 -44.0 -49.0 -50.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -67.0 -68.0 -71.0 -74.0 -77.0 -80.0 -83.0 -82.0 -87.0 -88.0 -87.0 -90.0 -93.0 -96.0 -95.0 -96.0 -101.0 -104.0 -105.0 -108.0 -111.0 -112.0 -115.0 -116.0 -117.0 -122.0 -125.0 -128.0 -129.0 -130.0 -133.0 48 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -87.0 -86.0 -81.0 -82.0 -81.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -62.0 -60.0 -53.0 -50.0 -47.0 -48.0 -45.0 -44.0 -41.0 -36.0 -39.0 -38.0 -35.0 -28.0 -33.0 -30.0 -27.0 -24.0 -17.0 -16.0 -17.0 -16.0 -13.0 -8.0 -3.0 -4.0 -3.0 2.0 5.0 10.0 14.0 5.0 11.0 9.0 10.0 7.0 2.0 3.0 -2.0 -3.0 -4.0 -3.0 -8.0 -9.0 -12.0 -13.0 -16.0 -17.0 -22.0 -25.0 -26.0 -31.0 -32.0 -35.0 -40.0 -40.0 -41.0 -44.0 -47.0 -48.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -68.0 -71.0 -74.0 -77.0 -80.0 -81.0 -84.0 -85.0 -86.0 -87.0 -90.0 -93.0 -96.0 -93.0 -96.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -113.0 -114.0 -119.0 -122.0 -125.0 -128.0 -127.0 -130.0 49 -106.0 -107.0 -104.0 -101.0 -102.0 -99.0 -96.0 -95.0 -92.0 -89.0 -86.0 -81.0 -82.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -58.0 -53.0 -50.0 -47.0 -48.0 -45.0 -42.0 -41.0 -38.0 -39.0 -40.0 -35.0 -28.0 -31.0 -28.0 -27.0 -24.0 -17.0 -16.0 -15.0 -16.0 -11.0 -8.0 -3.0 -4.0 -1.0 2.0 7.0 10.0 14.0 7.0 11.0 9.0 10.0 9.0 4.0 3.0 0.0 -3.0 -4.0 -5.0 -8.0 -9.0 -10.0 -13.0 -16.0 -19.0 -20.0 -25.0 -26.0 -31.0 -34.0 -36.0 -39.0 -38.0 -41.0 -42.0 -45.0 -48.0 -49.0 -54.0 -57.0 -58.0 -59.0 -60.0 -65.0 -66.0 -71.0 -74.0 -77.0 -78.0 -81.0 -82.0 -83.0 -84.0 -87.0 -90.0 -93.0 -94.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -109.0 -110.0 -113.0 -116.0 -117.0 -122.0 -125.0 -126.0 -127.0 50 -111.0 -106.0 -105.0 -104.0 -101.0 -102.0 -97.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -61.0 -56.0 -51.0 -48.0 -47.0 -48.0 -43.0 -42.0 -39.0 -38.0 -39.0 -38.0 -33.0 -28.0 -29.0 -28.0 -27.0 -22.0 -17.0 -16.0 -13.0 -14.0 -9.0 -6.0 -1.0 -2.0 -1.0 4.0 9.0 12.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -1.0 -4.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -22.0 -25.0 -28.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -40.0 -45.0 -48.0 -51.0 -54.0 -55.0 -58.0 -59.0 -62.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -79.0 -80.0 -81.0 -82.0 -85.0 -90.0 -91.0 -92.0 -95.0 -96.0 -99.0 -102.0 -103.0 -106.0 -107.0 -110.0 -113.0 -116.0 -119.0 -122.0 -123.0 -124.0 51 -112.0 -111.0 -104.0 -105.0 -104.0 -101.0 -100.0 -97.0 -94.0 -91.0 -90.0 -89.0 -84.0 -81.0 -80.0 -83.0 -78.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -65.0 -62.0 -59.0 -59.0 -54.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -39.0 -36.0 -31.0 -26.0 -29.0 -28.0 -25.0 -22.0 -17.0 -14.0 -13.0 -12.0 -7.0 -4.0 -1.0 -2.0 1.0 6.0 11.0 14.0 14.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -7.0 -10.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -30.0 -33.0 -34.0 -37.0 -36.0 -39.0 -42.0 -47.0 -50.0 -53.0 -54.0 -57.0 -58.0 -61.0 -64.0 -65.0 -66.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -91.0 -94.0 -95.0 -98.0 -101.0 -102.0 -105.0 -106.0 -109.0 -112.0 -115.0 -118.0 -121.0 -122.0 -123.0 52 -113.0 -112.0 -109.0 -104.0 -105.0 -104.0 -99.0 -100.0 -95.0 -92.0 -91.0 -90.0 -89.0 -82.0 -81.0 -80.0 -81.0 -76.0 -75.0 -74.0 -71.0 -68.0 -69.0 -66.0 -63.0 -61.0 -59.0 -57.0 -52.0 -49.0 -48.0 -47.0 -46.0 -43.0 -40.0 -39.0 -38.0 -37.0 -34.0 -29.0 -26.0 -29.0 -26.0 -25.0 -20.0 -15.0 -14.0 -11.0 -10.0 -5.0 -4.0 -1.0 0.0 3.0 8.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -5.0 -6.0 -9.0 -12.0 -17.0 -20.0 -23.0 -25.0 -29.0 -31.0 -30.0 -35.0 -34.0 -37.0 -36.0 -41.0 -42.0 -49.0 -52.0 -53.0 -56.0 -57.0 -60.0 -63.0 -64.0 -65.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -80.0 -81.0 -82.0 -87.0 -90.0 -93.0 -94.0 -97.0 -100.0 -101.0 -104.0 -105.0 -108.0 -111.0 -114.0 -115.0 -118.0 -121.0 -122.0 53 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -76.0 -75.0 -76.0 -71.0 -68.0 -71.0 -66.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -29.0 -26.0 -23.0 -18.0 -15.0 -12.0 -9.0 -8.0 -7.0 -4.0 1.0 2.0 5.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -4.0 -7.0 -6.0 -11.0 -14.0 -17.0 -22.0 -23.0 -25.0 -31.0 -31.0 -30.0 -35.0 -34.0 -37.0 -38.0 -43.0 -42.0 -49.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -66.0 -67.0 -68.0 -69.0 -74.0 -75.0 -76.0 -81.0 -82.0 -81.0 -82.0 -87.0 -92.0 -93.0 -96.0 -99.0 -100.0 -103.0 -104.0 -105.0 -110.0 -113.0 -116.0 -115.0 -118.0 -121.0 54 -117.0 -112.0 -113.0 -112.0 -111.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -69.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -39.0 -36.0 -33.0 -34.0 -29.0 -26.0 -29.0 -24.0 -23.0 -16.0 -15.0 -12.0 -9.0 -6.0 -7.0 -2.0 1.0 2.0 7.0 10.0 13.0 14.0 12.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -8.0 -13.0 -14.0 -19.0 -22.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -39.0 -40.0 -43.0 -42.0 -49.0 -54.0 -55.0 -58.0 -61.0 -64.0 -63.0 -66.0 -67.0 -70.0 -69.0 -74.0 -75.0 -76.0 -81.0 -84.0 -81.0 -82.0 -87.0 -90.0 -93.0 -96.0 -97.0 -98.0 -101.0 -102.0 -107.0 -110.0 -111.0 -116.0 -113.0 -118.0 55 -116.0 -117.0 -112.0 -113.0 -112.0 -109.0 -104.0 -105.0 -102.0 -99.0 -98.0 -93.0 -92.0 -91.0 -90.0 -87.0 -82.0 -81.0 -80.0 -79.0 -74.0 -75.0 -76.0 -71.0 -68.0 -68.0 -65.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -48.0 -47.0 -48.0 -43.0 -40.0 -37.0 -34.0 -33.0 -34.0 -29.0 -26.0 -27.0 -24.0 -21.0 -16.0 -15.0 -12.0 -7.0 -6.0 -5.0 -2.0 1.0 4.0 7.0 10.0 13.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 2.0 -3.0 -6.0 -7.0 -10.0 -15.0 -16.0 -21.0 -24.0 -23.0 -25.0 -32.0 -31.0 -30.0 -35.0 -34.0 -41.0 -42.0 -45.0 -42.0 -51.0 -52.0 -53.0 -58.0 -61.0 -64.0 -61.0 -66.0 -69.0 -70.0 -69.0 -74.0 -75.0 -78.0 -79.0 -84.0 -81.0 -84.0 -87.0 -92.0 -95.0 -96.0 -97.0 -98.0 -103.0 -102.0 -109.0 -110.0 -111.0 -116.0 -113.0 56 -121.0 -116.0 -117.0 -114.0 -113.0 -110.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -93.0 -94.0 -91.0 -90.0 -87.0 -82.0 -83.0 -80.0 -81.0 -76.0 -75.0 -76.0 -73.0 -68.0 -66.0 -63.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -45.0 -42.0 -39.0 -36.0 -33.0 -34.0 -31.0 -26.0 -27.0 -22.0 -19.0 -14.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 3.0 4.0 7.0 8.0 11.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 0.0 -3.0 -8.0 -9.0 -10.0 -17.0 -16.0 -21.0 -25.0 -24.0 -25.0 -32.0 -31.0 -30.0 -37.0 -36.0 -41.0 -42.0 -45.0 -44.0 -49.0 -52.0 -55.0 -58.0 -61.0 -64.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -77.0 -80.0 -79.0 -82.0 -83.0 -84.0 -89.0 -92.0 -93.0 -96.0 -97.0 -98.0 -103.0 -104.0 -109.0 -110.0 -111.0 -114.0 57 -124.0 -123.0 -118.0 -117.0 -116.0 -111.0 -112.0 -111.0 -106.0 -103.0 -104.0 -101.0 -98.0 -93.0 -94.0 -93.0 -92.0 -89.0 -82.0 -83.0 -82.0 -81.0 -78.0 -75.0 -74.0 -74.0 -70.0 -68.0 -63.0 -60.0 -63.0 -58.0 -59.0 -52.0 -55.0 -52.0 -49.0 -48.0 -43.0 -40.0 -41.0 -36.0 -33.0 -36.0 -31.0 -26.0 -27.0 -24.0 -21.0 -14.0 -11.0 -14.0 -11.0 -6.0 -3.0 -2.0 1.0 4.0 5.0 8.0 9.0 14.0 11.0 9.0 13.0 11.0 12.0 11.0 6.0 5.0 -2.0 -5.0 -8.0 -11.0 -12.0 -17.0 -17.0 -23.0 -23.0 -26.0 -25.0 -30.0 -29.0 -32.0 -37.0 -38.0 -41.0 -42.0 -47.0 -44.0 -51.0 -54.0 -55.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -69.0 -72.0 -79.0 -80.0 -79.0 -82.0 -83.0 -86.0 -91.0 -92.0 -93.0 -96.0 -99.0 -100.0 -105.0 -104.0 -111.0 -110.0 -111.0 58 -123.0 -126.0 -121.0 -118.0 -117.0 -116.0 -109.0 -112.0 -109.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -89.0 -84.0 -83.0 -82.0 -83.0 -78.0 -75.0 -73.0 -72.0 -71.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -55.0 -54.0 -51.0 -46.0 -41.0 -40.0 -43.0 -36.0 -33.0 -34.0 -29.0 -26.0 -25.0 -24.0 -21.0 -14.0 -11.0 -12.0 -9.0 -4.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 11.0 4.0 3.0 -2.0 -7.0 -10.0 -13.0 -14.0 -19.0 -17.0 -24.0 -23.0 -26.0 -25.0 -30.0 -29.0 -34.0 -39.0 -40.0 -41.0 -44.0 -47.0 -44.0 -53.0 -56.0 -57.0 -58.0 -63.0 -66.0 -61.0 -66.0 -71.0 -70.0 -71.0 -72.0 -79.0 -80.0 -81.0 -82.0 -85.0 -88.0 -91.0 -92.0 -93.0 -98.0 -99.0 -102.0 -105.0 -104.0 -111.0 -110.0 59 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -90.0 -87.0 -84.0 -83.0 -82.0 -83.0 -78.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -52.0 -49.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -32.0 -27.0 -24.0 -23.0 -22.0 -19.0 -14.0 -11.0 -10.0 -7.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 11.0 12.0 9.0 4.0 1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -17.0 -22.0 -23.0 -26.0 -25.0 -30.0 -31.0 -34.0 -37.0 -40.0 -43.0 -44.0 -47.0 -46.0 -53.0 -56.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -69.0 -72.0 -71.0 -72.0 -77.0 -80.0 -81.0 -84.0 -87.0 -88.0 -91.0 -92.0 -93.0 -98.0 -101.0 -104.0 -105.0 -104.0 -109.0 60 -129.0 -126.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -109.0 -110.0 -107.0 -106.0 -103.0 -102.0 -99.0 -96.0 -93.0 -92.0 -91.0 -88.0 -87.0 -84.0 -83.0 -82.0 -81.0 -77.0 -74.0 -71.0 -70.0 -69.0 -68.0 -65.0 -60.0 -61.0 -60.0 -57.0 -52.0 -53.0 -50.0 -47.0 -46.0 -41.0 -40.0 -41.0 -36.0 -33.0 -30.0 -27.0 -24.0 -23.0 -20.0 -19.0 -14.0 -11.0 -10.0 -5.0 -2.0 -1.0 -2.0 -1.0 4.0 5.0 6.0 9.0 14.0 11.0 10.0 13.0 13.0 10.0 9.0 2.0 -1.0 -4.0 -7.0 -10.0 -11.0 -15.0 -20.0 -17.0 -22.0 -23.0 -26.0 -27.0 -32.0 -31.0 -34.0 -37.0 -42.0 -43.0 -46.0 -49.0 -48.0 -55.0 -58.0 -59.0 -60.0 -63.0 -66.0 -61.0 -66.0 -71.0 -74.0 -71.0 -72.0 -79.0 -80.0 -83.0 -86.0 -87.0 -90.0 -91.0 -92.0 -95.0 -100.0 -101.0 -106.0 -105.0 -104.0 61 -132.0 -131.0 -128.0 -123.0 -126.0 -123.0 -120.0 -119.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -95.0 -92.0 -93.0 -90.0 -87.0 -86.0 -85.0 -84.0 -82.0 -79.0 -76.0 -71.0 -70.0 -71.0 -66.0 -67.0 -60.0 -63.0 -62.0 -59.0 -54.0 -53.0 -50.0 -49.0 -48.0 -43.0 -42.0 -41.0 -36.0 -35.0 -32.0 -29.0 -24.0 -23.0 -22.0 -19.0 -16.0 -13.0 -10.0 -7.0 -4.0 -3.0 -2.0 -3.0 4.0 3.0 4.0 7.0 12.0 9.0 8.0 11.0 14.0 8.0 7.0 0.0 -3.0 -6.0 -9.0 -12.0 -13.0 -15.0 -18.0 -17.0 -22.0 -21.0 -26.0 -29.0 -30.0 -33.0 -34.0 -39.0 -40.0 -43.0 -46.0 -47.0 -48.0 -55.0 -56.0 -57.0 -62.0 -61.0 -64.0 -61.0 -66.0 -69.0 -72.0 -71.0 -74.0 -77.0 -80.0 -83.0 -84.0 -87.0 -88.0 -91.0 -94.0 -97.0 -100.0 -99.0 -104.0 -105.0 62 -135.0 -132.0 -131.0 -130.0 -125.0 -124.0 -123.0 -120.0 -117.0 -116.0 -109.0 -112.0 -109.0 -108.0 -103.0 -104.0 -101.0 -98.0 -97.0 -92.0 -95.0 -92.0 -87.0 -88.0 -87.0 -83.0 -80.0 -77.0 -76.0 -73.0 -72.0 -71.0 -66.0 -67.0 -62.0 -63.0 -60.0 -59.0 -56.0 -53.0 -52.0 -49.0 -48.0 -45.0 -42.0 -41.0 -36.0 -33.0 -30.0 -29.0 -26.0 -25.0 -20.0 -17.0 -16.0 -11.0 -10.0 -7.0 -6.0 -5.0 -2.0 -5.0 2.0 3.0 4.0 7.0 12.0 7.0 6.0 9.0 14.0 6.0 5.0 0.0 -5.0 -6.0 -9.0 -14.0 -14.0 -15.0 -18.0 -17.0 -22.0 -23.0 -28.0 -29.0 -30.0 -33.0 -36.0 -39.0 -42.0 -45.0 -48.0 -49.0 -50.0 -57.0 -56.0 -57.0 -62.0 -61.0 -64.0 -63.0 -66.0 -69.0 -72.0 -71.0 -74.0 -79.0 -82.0 -83.0 -84.0 -87.0 -88.0 -93.0 -96.0 -99.0 -102.0 -99.0 -104.0 63 -136.0 -137.0 -132.0 -133.0 -132.0 -127.0 -124.0 -125.0 -122.0 -119.0 -118.0 -111.0 -114.0 -111.0 -110.0 -105.0 -106.0 -103.0 -100.0 -99.0 -92.0 -97.0 -94.0 -89.0 -90.0 -88.0 -85.0 -82.0 -79.0 -78.0 -73.0 -74.0 -73.0 -68.0 -69.0 -64.0 -65.0 -62.0 -57.0 -54.0 -53.0 -54.0 -49.0 -48.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -27.0 -26.0 -25.0 -22.0 -19.0 -16.0 -13.0 -12.0 -7.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 2.0 5.0 12.0 8.0 6.0 7.0 14.0 4.0 3.0 -2.0 -6.0 -8.0 -9.0 -14.0 -16.0 -15.0 -17.0 -17.0 -21.0 -25.0 -29.0 -31.0 -30.0 -33.0 -36.0 -38.0 -43.0 -46.0 -49.0 -49.0 -50.0 -56.0 -55.0 -57.0 -61.0 -61.0 -63.0 -63.0 -66.0 -69.0 -73.0 -71.0 -76.0 -78.0 -81.0 -82.0 -83.0 -88.0 -88.0 -94.0 -95.0 -98.0 -101.0 -99.0 64 -141.0 -138.0 -137.0 -134.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -113.0 -114.0 -113.0 -112.0 -107.0 -106.0 -105.0 -102.0 -101.0 -94.0 -98.0 -94.0 -89.0 -91.0 -88.0 -85.0 -82.0 -81.0 -80.0 -75.0 -76.0 -73.0 -68.0 -71.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -54.0 -51.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -32.0 -29.0 -28.0 -25.0 -20.0 -19.0 -18.0 -15.0 -14.0 -9.0 -10.0 -9.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 10.0 6.0 6.0 6.0 14.0 3.0 3.0 -3.0 -5.0 -9.0 -10.0 -14.0 -15.0 -15.0 -17.0 -19.0 -21.0 -26.0 -29.0 -30.0 -30.0 -32.0 -37.0 -38.0 -43.0 -46.0 -49.0 -51.0 -50.0 -56.0 -55.0 -57.0 -59.0 -62.0 -61.0 -63.0 -65.0 -68.0 -71.0 -71.0 -75.0 -76.0 -81.0 -82.0 -85.0 -88.0 -88.0 -94.0 -95.0 -98.0 -99.0 65 -144.0 -141.0 -140.0 -139.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -113.0 -110.0 -107.0 -108.0 -103.0 -104.0 -101.0 -94.0 -99.0 -96.0 -89.0 -89.0 -86.0 -85.0 -84.0 -83.0 -80.0 -75.0 -76.0 -75.0 -68.0 -69.0 -68.0 -65.0 -62.0 -61.0 -56.0 -57.0 -56.0 -51.0 -50.0 -45.0 -42.0 -39.0 -38.0 -35.0 -34.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -17.0 -16.0 -9.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 0.0 3.0 8.0 6.0 4.0 4.0 14.0 1.0 3.0 -3.0 -5.0 -10.0 -10.0 -14.0 -15.0 -15.0 -17.0 -21.0 -21.0 -26.0 -29.0 -30.0 -30.0 -34.0 -39.0 -40.0 -45.0 -48.0 -51.0 -51.0 -50.0 -56.0 -55.0 -57.0 -61.0 -64.0 -61.0 -63.0 -67.0 -68.0 -73.0 -71.0 -75.0 -78.0 -81.0 -82.0 -87.0 -90.0 -90.0 -96.0 -95.0 -98.0 66 -147.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -109.0 -108.0 -105.0 -104.0 -103.0 -94.0 -97.0 -97.0 -91.0 -91.0 -88.0 -87.0 -86.0 -83.0 -82.0 -77.0 -76.0 -77.0 -70.0 -69.0 -68.0 -65.0 -64.0 -63.0 -58.0 -59.0 -56.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -37.0 -34.0 -31.0 -26.0 -21.0 -22.0 -21.0 -20.0 -19.0 -18.0 -11.0 -14.0 -13.0 -8.0 -7.0 -4.0 -3.0 0.0 1.0 6.0 4.0 4.0 2.0 14.0 1.0 1.0 -5.0 -3.0 -10.0 -10.0 -12.0 -13.0 -16.0 -15.0 -22.0 -23.0 -26.0 -27.0 -28.0 -32.0 -34.0 -39.0 -42.0 -43.0 -46.0 -49.0 -50.0 -50.0 -54.0 -55.0 -58.0 -59.0 -62.0 -61.0 -63.0 -67.0 -68.0 -71.0 -71.0 -77.0 -78.0 -81.0 -84.0 -85.0 -88.0 -90.0 -94.0 -95.0 67 -150.0 -147.0 -146.0 -145.0 -144.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -127.0 -122.0 -123.0 -118.0 -117.0 -116.0 -113.0 -114.0 -109.0 -110.0 -107.0 -104.0 -103.0 -96.0 -97.0 -95.0 -91.0 -91.0 -90.0 -89.0 -86.0 -83.0 -82.0 -79.0 -76.0 -75.0 -72.0 -71.0 -68.0 -67.0 -64.0 -63.0 -60.0 -57.0 -56.0 -51.0 -48.0 -45.0 -44.0 -41.0 -40.0 -35.0 -32.0 -31.0 -26.0 -21.0 -22.0 -23.0 -22.0 -19.0 -18.0 -13.0 -14.0 -11.0 -8.0 -7.0 -6.0 -3.0 -2.0 1.0 4.0 2.0 4.0 1.0 14.0 3.0 0.0 -4.0 -1.0 -8.0 -9.0 -10.0 -13.0 -16.0 -15.0 -20.0 -23.0 -26.0 -27.0 -30.0 -33.0 -36.0 -39.0 -42.0 -41.0 -44.0 -47.0 -48.0 -49.0 -52.0 -55.0 -56.0 -57.0 -60.0 -63.0 -63.0 -67.0 -70.0 -71.0 -73.0 -75.0 -76.0 -81.0 -84.0 -87.0 -86.0 -89.0 -92.0 68 -153.0 -150.0 -149.0 -148.0 -147.0 -142.0 -141.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -124.0 -123.0 -118.0 -117.0 -116.0 -115.0 -112.0 -111.0 -110.0 -107.0 -106.0 -103.0 -96.0 -97.0 -95.0 -93.0 -91.0 -92.0 -89.0 -86.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -70.0 -67.0 -66.0 -65.0 -60.0 -59.0 -54.0 -51.0 -48.0 -47.0 -44.0 -43.0 -38.0 -35.0 -34.0 -29.0 -26.0 -21.0 -24.0 -25.0 -22.0 -21.0 -20.0 -13.0 -14.0 -11.0 -8.0 -8.0 -6.0 -5.0 -2.0 -1.0 2.0 2.0 2.0 3.0 14.0 2.0 1.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -27.0 -30.0 -33.0 -36.0 -37.0 -42.0 -39.0 -42.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -58.0 -61.0 -64.0 -67.0 -68.0 -69.0 -72.0 -73.0 -78.0 -81.0 -84.0 -87.0 -84.0 -89.0 69 -154.0 -155.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -140.0 -137.0 -136.0 -133.0 -132.0 -129.0 -126.0 -125.0 -120.0 -119.0 -118.0 -117.0 -112.0 -113.0 -112.0 -109.0 -106.0 -105.0 -98.0 -99.0 -97.0 -95.0 -91.0 -92.0 -91.0 -88.0 -87.0 -86.0 -81.0 -78.0 -75.0 -72.0 -71.0 -72.0 -67.0 -66.0 -65.0 -62.0 -57.0 -56.0 -53.0 -50.0 -45.0 -44.0 -43.0 -40.0 -37.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -24.0 -21.0 -22.0 -15.0 -16.0 -13.0 -8.0 -6.0 -8.0 -7.0 -2.0 -3.0 0.0 0.0 0.0 1.0 14.0 4.0 3.0 -2.0 1.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -20.0 -21.0 -22.0 -27.0 -30.0 -33.0 -34.0 -35.0 -40.0 -37.0 -40.0 -43.0 -46.0 -49.0 -50.0 -53.0 -54.0 -57.0 -56.0 -61.0 -64.0 -65.0 -66.0 -67.0 -72.0 -73.0 -78.0 -79.0 -82.0 -85.0 -84.0 70 -159.0 -156.0 -155.0 -150.0 -153.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -125.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -108.0 -103.0 -98.0 -98.0 -97.0 -97.0 -91.0 -94.0 -89.0 -90.0 -87.0 -86.0 -83.0 -80.0 -77.0 -72.0 -73.0 -72.0 -67.0 -68.0 -63.0 -62.0 -55.0 -56.0 -51.0 -50.0 -47.0 -46.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -21.0 -28.0 -25.0 -26.0 -22.0 -20.0 -15.0 -18.0 -14.0 -10.0 -6.0 -10.0 -9.0 -4.0 -5.0 0.0 -2.0 -2.0 1.0 14.0 6.0 5.0 0.0 1.0 -4.0 -7.0 -10.0 -13.0 -14.0 -17.0 -18.0 -21.0 -24.0 -25.0 -28.0 -31.0 -36.0 -35.0 -40.0 -37.0 -40.0 -41.0 -44.0 -47.0 -50.0 -51.0 -54.0 -55.0 -58.0 -61.0 -62.0 -65.0 -66.0 -69.0 -72.0 -75.0 -78.0 -79.0 -82.0 -83.0 71 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -120.0 -119.0 -112.0 -115.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -84.0 -81.0 -80.0 -77.0 -72.0 -75.0 -74.0 -67.0 -68.0 -63.0 -60.0 -53.0 -54.0 -53.0 -52.0 -47.0 -44.0 -43.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -30.0 -27.0 -26.0 -22.0 -18.0 -15.0 -18.0 -12.0 -10.0 -6.0 -12.0 -11.0 -4.0 -7.0 0.0 -2.0 0.0 1.0 14.0 8.0 5.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -14.0 -15.0 -18.0 -21.0 -24.0 -27.0 -30.0 -29.0 -34.0 -37.0 -38.0 -35.0 -38.0 -43.0 -46.0 -45.0 -48.0 -51.0 -52.0 -55.0 -56.0 -59.0 -62.0 -63.0 -64.0 -69.0 -72.0 -75.0 -76.0 -77.0 -80.0 72 -161.0 -160.0 -159.0 -156.0 -157.0 -150.0 -151.0 -150.0 -147.0 -142.0 -143.0 -138.0 -139.0 -134.0 -135.0 -130.0 -131.0 -128.0 -123.0 -122.0 -119.0 -118.0 -119.0 -112.0 -113.0 -112.0 -109.0 -106.0 -102.0 -98.0 -100.0 -97.0 -98.0 -91.0 -94.0 -91.0 -90.0 -85.0 -82.0 -79.0 -80.0 -77.0 -72.0 -75.0 -72.0 -67.0 -66.0 -63.0 -60.0 -53.0 -52.0 -53.0 -50.0 -47.0 -44.0 -41.0 -38.0 -35.0 -36.0 -33.0 -32.0 -21.0 -29.0 -27.0 -26.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -11.0 -4.0 -7.0 0.0 -2.0 2.0 3.0 14.0 10.0 7.0 2.0 -1.0 -4.0 -5.0 -8.0 -11.0 -12.0 -15.0 -18.0 -19.0 -22.0 -27.0 -28.0 -27.0 -32.0 -35.0 -36.0 -35.0 -36.0 -43.0 -44.0 -45.0 -46.0 -49.0 -52.0 -55.0 -54.0 -57.0 -60.0 -63.0 -66.0 -69.0 -72.0 -73.0 -74.0 -77.0 73 -162.0 -161.0 -158.0 -159.0 -156.0 -155.0 -150.0 -151.0 -148.0 -145.0 -142.0 -141.0 -138.0 -137.0 -134.0 -135.0 -130.0 -129.0 -128.0 -123.0 -122.0 -119.0 -118.0 -117.0 -112.0 -113.0 -110.0 -108.0 -105.0 -102.0 -98.0 -100.0 -97.0 -96.0 -91.0 -94.0 -91.0 -88.0 -83.0 -80.0 -79.0 -80.0 -75.0 -72.0 -73.0 -70.0 -67.0 -64.0 -61.0 -58.0 -53.0 -52.0 -51.0 -48.0 -45.0 -42.0 -41.0 -38.0 -35.0 -36.0 -33.0 -30.0 -21.0 -27.0 -27.0 -24.0 -22.0 -18.0 -15.0 -16.0 -12.0 -10.0 -6.0 -11.0 -9.0 -4.0 -7.0 0.0 -1.0 2.0 5.0 14.0 12.0 7.0 2.0 -1.0 -2.0 -3.0 -8.0 -9.0 -10.0 -15.0 -18.0 -21.0 -22.0 -25.0 -26.0 -27.0 -30.0 -33.0 -34.0 -37.0 -36.0 -41.0 -42.0 -43.0 -44.0 -49.0 -52.0 -53.0 -52.0 -55.0 -60.0 -61.0 -66.0 -67.0 -70.0 -71.0 -72.0 74 -165.0 -164.0 -159.0 -158.0 -161.0 -156.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -137.0 -136.0 -133.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -118.0 -117.0 -114.0 -113.0 -111.0 -108.0 -107.0 -102.0 -100.0 -100.0 -97.0 -98.0 -93.0 -94.0 -91.0 -86.0 -83.0 -80.0 -81.0 -78.0 -75.0 -74.0 -73.0 -70.0 -67.0 -64.0 -61.0 -56.0 -53.0 -54.0 -50.0 -47.0 -45.0 -44.0 -43.0 -38.0 -37.0 -36.0 -33.0 -28.0 -21.0 -27.0 -27.0 -26.0 -20.0 -18.0 -17.0 -18.0 -12.0 -12.0 -6.0 -12.0 -11.0 -6.0 -5.0 -2.0 -1.0 2.0 7.0 13.0 14.0 5.0 2.0 -1.0 0.0 -3.0 -6.0 -7.0 -12.0 -15.0 -18.0 -19.0 -22.0 -25.0 -24.0 -27.0 -30.0 -31.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 -57.0 -58.0 -63.0 -64.0 -67.0 -70.0 -69.0 75 -166.0 -167.0 -166.0 -159.0 -158.0 -159.0 -154.0 -153.0 -152.0 -149.0 -148.0 -143.0 -144.0 -139.0 -138.0 -137.0 -136.0 -131.0 -132.0 -127.0 -128.0 -123.0 -126.0 -121.0 -116.0 -117.0 -114.0 -114.0 -111.0 -110.0 -107.0 -102.0 -100.0 -98.0 -97.0 -99.0 -93.0 -92.0 -91.0 -86.0 -84.0 -82.0 -83.0 -79.0 -77.0 -75.0 -72.0 -69.0 -67.0 -64.0 -60.0 -56.0 -54.0 -54.0 -48.0 -45.0 -46.0 -46.0 -45.0 -39.0 -39.0 -36.0 -32.0 -29.0 -21.0 -28.0 -29.0 -26.0 -20.0 -19.0 -19.0 -18.0 -12.0 -14.0 -6.0 -13.0 -13.0 -8.0 -6.0 -4.0 0.0 2.0 5.0 13.0 14.0 3.0 0.0 -1.0 0.0 -3.0 -8.0 -7.0 -14.0 -17.0 -20.0 -21.0 -22.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -42.0 -41.0 -46.0 -47.0 -52.0 -51.0 -54.0 -59.0 -58.0 -63.0 -64.0 -67.0 -70.0 76 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -131.0 -130.0 -127.0 -126.0 -123.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -110.0 -105.0 -102.0 -100.0 -98.0 -97.0 -97.0 -93.0 -93.0 -90.0 -86.0 -84.0 -83.0 -84.0 -79.0 -78.0 -73.0 -70.0 -67.0 -66.0 -63.0 -60.0 -56.0 -54.0 -53.0 -48.0 -45.0 -46.0 -47.0 -44.0 -39.0 -38.0 -35.0 -30.0 -29.0 -21.0 -28.0 -28.0 -25.0 -20.0 -19.0 -20.0 -19.0 -12.0 -15.0 -6.0 -12.0 -12.0 -9.0 -4.0 -3.0 2.0 3.0 4.0 13.0 14.0 3.0 0.0 -3.0 0.0 -5.0 -10.0 -9.0 -16.0 -19.0 -22.0 -21.0 -24.0 -25.0 -24.0 -27.0 -30.0 -33.0 -34.0 -35.0 -36.0 -39.0 -44.0 -43.0 -46.0 -49.0 -52.0 -51.0 -56.0 -61.0 -60.0 -63.0 -64.0 -67.0 77 -172.0 -167.0 -166.0 -167.0 -166.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -113.0 -108.0 -105.0 -104.0 -100.0 -98.0 -97.0 -97.0 -91.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -81.0 -76.0 -73.0 -70.0 -67.0 -64.0 -64.0 -58.0 -56.0 -56.0 -51.0 -48.0 -45.0 -47.0 -47.0 -42.0 -39.0 -38.0 -33.0 -30.0 -29.0 -21.0 -28.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -14.0 -12.0 -7.0 -4.0 -3.0 4.0 1.0 2.0 13.0 14.0 3.0 0.0 -1.0 -2.0 -7.0 -10.0 -9.0 -16.0 -19.0 -20.0 -21.0 -24.0 -23.0 -24.0 -27.0 -28.0 -31.0 -34.0 -35.0 -36.0 -41.0 -44.0 -43.0 -46.0 -49.0 -50.0 -53.0 -58.0 -61.0 -62.0 -61.0 -64.0 78 -171.0 -172.0 -167.0 -166.0 -167.0 -164.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -149.0 -146.0 -143.0 -142.0 -139.0 -138.0 -135.0 -134.0 -129.0 -130.0 -125.0 -126.0 -125.0 -124.0 -121.0 -116.0 -115.0 -113.0 -112.0 -111.0 -108.0 -105.0 -104.0 -100.0 -98.0 -98.0 -95.0 -89.0 -91.0 -92.0 -86.0 -84.0 -85.0 -82.0 -79.0 -76.0 -73.0 -70.0 -65.0 -64.0 -62.0 -58.0 -56.0 -54.0 -51.0 -48.0 -45.0 -47.0 -45.0 -42.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -27.0 -20.0 -21.0 -20.0 -19.0 -14.0 -15.0 -6.0 -12.0 -10.0 -7.0 -2.0 -1.0 4.0 1.0 2.0 13.0 14.0 5.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -22.0 -23.0 -26.0 -25.0 -26.0 -31.0 -34.0 -33.0 -34.0 -39.0 -42.0 -43.0 -44.0 -49.0 -50.0 -55.0 -56.0 -59.0 -62.0 -61.0 79 -174.0 -173.0 -172.0 -167.0 -166.0 -167.0 -164.0 -161.0 -160.0 -157.0 -156.0 -151.0 -152.0 -149.0 -148.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -130.0 -123.0 -124.0 -125.0 -122.0 -120.0 -116.0 -115.0 -113.0 -112.0 -111.0 -106.0 -105.0 -104.0 -99.0 -96.0 -98.0 -95.0 -89.0 -91.0 -90.0 -86.0 -84.0 -83.0 -80.0 -77.0 -74.0 -71.0 -68.0 -65.0 -64.0 -60.0 -56.0 -54.0 -54.0 -51.0 -48.0 -45.0 -45.0 -43.0 -40.0 -37.0 -36.0 -33.0 -30.0 -29.0 -21.0 -26.0 -26.0 -25.0 -20.0 -21.0 -18.0 -19.0 -14.0 -13.0 -6.0 -10.0 -8.0 -5.0 -2.0 -1.0 4.0 1.0 4.0 13.0 14.0 7.0 2.0 1.0 -4.0 -7.0 -10.0 -9.0 -14.0 -17.0 -18.0 -19.0 -20.0 -23.0 -26.0 -25.0 -24.0 -29.0 -32.0 -33.0 -32.0 -37.0 -42.0 -43.0 -46.0 -49.0 -50.0 -55.0 -56.0 -59.0 -60.0 80 -177.0 -174.0 -175.0 -174.0 -167.0 -166.0 -167.0 -166.0 -161.0 -160.0 -159.0 -154.0 -153.0 -150.0 -149.0 -150.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -128.0 -123.0 -126.0 -123.0 -123.0 -118.0 -116.0 -117.0 -111.0 -114.0 -109.0 -106.0 -107.0 -104.0 -97.0 -96.0 -96.0 -96.0 -89.0 -91.0 -92.0 -86.0 -85.0 -83.0 -80.0 -77.0 -72.0 -69.0 -69.0 -67.0 -63.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -43.0 -43.0 -40.0 -39.0 -37.0 -33.0 -30.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -17.0 -16.0 -13.0 -8.0 -9.0 -8.0 -3.0 -4.0 -1.0 2.0 3.0 3.0 13.0 14.0 5.0 4.0 -1.0 -2.0 -7.0 -8.0 -7.0 -12.0 -15.0 -16.0 -17.0 -18.0 -23.0 -24.0 -23.0 -24.0 -29.0 -30.0 -33.0 -32.0 -37.0 -40.0 -43.0 -46.0 -47.0 -52.0 -53.0 -54.0 -57.0 81 -178.0 -177.0 -172.0 -175.0 -174.0 -167.0 -164.0 -167.0 -164.0 -159.0 -160.0 -157.0 -154.0 -153.0 -150.0 -149.0 -148.0 -145.0 -144.0 -139.0 -138.0 -135.0 -134.0 -133.0 -128.0 -123.0 -126.0 -122.0 -121.0 -118.0 -116.0 -116.0 -111.0 -112.0 -109.0 -106.0 -108.0 -102.0 -97.0 -94.0 -96.0 -96.0 -89.0 -91.0 -90.0 -84.0 -83.0 -81.0 -78.0 -75.0 -70.0 -69.0 -67.0 -65.0 -61.0 -58.0 -57.0 -54.0 -54.0 -53.0 -50.0 -47.0 -41.0 -41.0 -40.0 -39.0 -35.0 -31.0 -28.0 -29.0 -21.0 -26.0 -28.0 -25.0 -22.0 -21.0 -20.0 -15.0 -14.0 -13.0 -8.0 -7.0 -6.0 -3.0 -4.0 -1.0 2.0 4.0 5.0 13.0 14.0 5.0 2.0 -1.0 0.0 -5.0 -6.0 -5.0 -10.0 -13.0 -14.0 -17.0 -16.0 -21.0 -22.0 -23.0 -24.0 -29.0 -32.0 -33.0 -32.0 -35.0 -40.0 -41.0 -46.0 -47.0 -50.0 -51.0 -52.0 82 -179.0 -178.0 -175.0 -172.0 -175.0 -172.0 -167.0 -164.0 -165.0 -162.0 -159.0 -158.0 -157.0 -154.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -139.0 -138.0 -135.0 -132.0 -131.0 -128.0 -123.0 -125.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -109.0 -106.0 -107.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -92.0 -89.0 -82.0 -81.0 -81.0 -78.0 -73.0 -70.0 -71.0 -65.0 -64.0 -59.0 -58.0 -57.0 -54.0 -55.0 -53.0 -50.0 -45.0 -41.0 -42.0 -42.0 -38.0 -33.0 -31.0 -30.0 -31.0 -21.0 -28.0 -30.0 -27.0 -24.0 -23.0 -18.0 -17.0 -16.0 -15.0 -8.0 -9.0 -6.0 -5.0 -6.0 -3.0 2.0 2.0 5.0 14.0 12.0 5.0 2.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -11.0 -14.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -30.0 -31.0 -32.0 -37.0 -38.0 -43.0 -44.0 -47.0 -50.0 -49.0 83 -182.0 -179.0 -178.0 -175.0 -172.0 -173.0 -170.0 -167.0 -164.0 -163.0 -162.0 -157.0 -158.0 -155.0 -154.0 -153.0 -148.0 -145.0 -146.0 -143.0 -142.0 -139.0 -138.0 -133.0 -130.0 -131.0 -126.0 -122.0 -123.0 -120.0 -121.0 -118.0 -116.0 -116.0 -109.0 -112.0 -107.0 -104.0 -105.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -90.0 -87.0 -80.0 -79.0 -80.0 -77.0 -74.0 -71.0 -70.0 -63.0 -62.0 -59.0 -58.0 -57.0 -54.0 -53.0 -52.0 -49.0 -46.0 -41.0 -42.0 -41.0 -36.0 -33.0 -33.0 -32.0 -32.0 -21.0 -28.0 -28.0 -29.0 -26.0 -23.0 -20.0 -19.0 -18.0 -15.0 -10.0 -11.0 -6.0 -7.0 -6.0 -4.0 2.0 4.0 5.0 14.0 10.0 3.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -13.0 -16.0 -15.0 -16.0 -19.0 -22.0 -21.0 -26.0 -27.0 -32.0 -31.0 -34.0 -39.0 -38.0 -45.0 -46.0 -47.0 -50.0 84 -183.0 -182.0 -179.0 -178.0 -175.0 -174.0 -173.0 -172.0 -167.0 -162.0 -165.0 -162.0 -157.0 -156.0 -157.0 -156.0 -153.0 -146.0 -145.0 -146.0 -143.0 -140.0 -141.0 -138.0 -135.0 -130.0 -131.0 -125.0 -120.0 -123.0 -120.0 -119.0 -118.0 -115.0 -116.0 -109.0 -110.0 -105.0 -104.0 -103.0 -100.0 -97.0 -94.0 -97.0 -94.0 -89.0 -88.0 -85.0 -78.0 -77.0 -78.0 -77.0 -74.0 -71.0 -68.0 -63.0 -62.0 -59.0 -58.0 -55.0 -52.0 -51.0 -50.0 -47.0 -46.0 -41.0 -40.0 -39.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -26.0 -29.0 -29.0 -26.0 -21.0 -21.0 -19.0 -18.0 -13.0 -12.0 -13.0 -8.0 -9.0 -7.0 -4.0 0.0 2.0 5.0 14.0 10.0 1.0 0.0 1.0 0.0 -7.0 -4.0 -5.0 -10.0 -15.0 -16.0 -15.0 -18.0 -19.0 -24.0 -21.0 -26.0 -29.0 -32.0 -33.0 -36.0 -41.0 -40.0 -45.0 -46.0 -47.0 85 -182.0 -183.0 -180.0 -179.0 -178.0 -175.0 -174.0 -173.0 -170.0 -165.0 -162.0 -163.0 -162.0 -157.0 -156.0 -157.0 -154.0 -151.0 -146.0 -145.0 -146.0 -141.0 -140.0 -139.0 -136.0 -135.0 -130.0 -130.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -102.0 -103.0 -100.0 -97.0 -94.0 -97.0 -92.0 -89.0 -88.0 -83.0 -76.0 -77.0 -78.0 -75.0 -72.0 -69.0 -66.0 -63.0 -62.0 -59.0 -56.0 -55.0 -50.0 -51.0 -48.0 -47.0 -46.0 -39.0 -38.0 -37.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -26.0 -29.0 -29.0 -24.0 -22.0 -21.0 -21.0 -16.0 -15.0 -14.0 -15.0 -10.0 -10.0 -7.0 -3.0 -1.0 2.0 5.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -4.0 -5.0 -12.0 -13.0 -14.0 -15.0 -18.0 -21.0 -24.0 -21.0 -26.0 -29.0 -32.0 -35.0 -36.0 -41.0 -40.0 -43.0 -46.0 86 -185.0 -182.0 -181.0 -180.0 -179.0 -178.0 -173.0 -174.0 -171.0 -168.0 -165.0 -162.0 -163.0 -160.0 -157.0 -156.0 -155.0 -152.0 -151.0 -146.0 -145.0 -144.0 -141.0 -140.0 -137.0 -136.0 -133.0 -129.0 -128.0 -123.0 -120.0 -123.0 -118.0 -119.0 -116.0 -115.0 -114.0 -107.0 -106.0 -101.0 -102.0 -103.0 -98.0 -97.0 -94.0 -95.0 -92.0 -87.0 -86.0 -81.0 -76.0 -77.0 -76.0 -73.0 -70.0 -67.0 -66.0 -63.0 -62.0 -57.0 -56.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -37.0 -36.0 -37.0 -34.0 -33.0 -34.0 -31.0 -28.0 -21.0 -26.0 -27.0 -27.0 -26.0 -22.0 -21.0 -21.0 -16.0 -16.0 -16.0 -15.0 -10.0 -10.0 -7.0 -1.0 1.0 1.0 3.0 14.0 10.0 1.0 2.0 1.0 0.0 -5.0 -6.0 -5.0 -12.0 -13.0 -14.0 -15.0 -20.0 -23.0 -24.0 -21.0 -26.0 -31.0 -32.0 -37.0 -36.0 -41.0 -40.0 -43.0 87 -182.0 -186.0 -180.0 -183.0 -180.0 -181.0 -176.0 -173.0 -172.0 -169.0 -170.0 -165.0 -162.0 -163.0 -160.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -147.0 -146.0 -143.0 -140.0 -139.0 -136.0 -132.0 -127.0 -130.0 -123.0 -122.0 -123.0 -118.0 -121.0 -118.0 -115.0 -112.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -97.0 -92.0 -93.0 -90.0 -85.0 -84.0 -79.0 -76.0 -77.0 -74.0 -71.0 -68.0 -67.0 -66.0 -63.0 -62.0 -55.0 -54.0 -51.0 -50.0 -51.0 -48.0 -45.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -27.0 -27.0 -27.0 -22.0 -21.0 -21.0 -18.0 -16.0 -18.0 -14.0 -11.0 -9.0 -5.0 -1.0 1.0 1.0 3.0 14.0 10.0 3.0 2.0 1.0 2.0 -5.0 -6.0 -5.0 -10.0 -13.0 -12.0 -17.0 -20.0 -21.0 -22.0 -21.0 -28.0 -29.0 -34.0 -35.0 -36.0 -41.0 -40.0 88 -189.0 -182.0 -187.0 -180.0 -183.0 -178.0 -179.0 -176.0 -173.0 -170.0 -169.0 -168.0 -165.0 -160.0 -163.0 -160.0 -159.0 -156.0 -153.0 -150.0 -149.0 -146.0 -147.0 -144.0 -141.0 -140.0 -137.0 -135.0 -130.0 -127.0 -130.0 -123.0 -122.0 -121.0 -118.0 -121.0 -118.0 -113.0 -110.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -90.0 -92.0 -90.0 -83.0 -82.0 -79.0 -78.0 -75.0 -72.0 -71.0 -70.0 -67.0 -66.0 -63.0 -62.0 -53.0 -52.0 -51.0 -50.0 -51.0 -46.0 -43.0 -42.0 -37.0 -36.0 -37.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -25.0 -29.0 -27.0 -27.0 -22.0 -21.0 -22.0 -18.0 -16.0 -18.0 -15.0 -10.0 -7.0 -6.0 -1.0 1.0 3.0 2.0 14.0 10.0 1.0 2.0 1.0 3.0 -4.0 -6.0 -5.0 -9.0 -12.0 -14.0 -18.0 -19.0 -20.0 -22.0 -23.0 -29.0 -31.0 -33.0 -37.0 -36.0 -40.0 89 -188.0 -189.0 -182.0 -187.0 -180.0 -183.0 -176.0 -179.0 -176.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -163.0 -158.0 -157.0 -156.0 -153.0 -150.0 -147.0 -146.0 -145.0 -142.0 -141.0 -138.0 -136.0 -133.0 -130.0 -127.0 -128.0 -123.0 -122.0 -121.0 -118.0 -119.0 -116.0 -111.0 -108.0 -105.0 -106.0 -101.0 -102.0 -101.0 -98.0 -95.0 -88.0 -91.0 -88.0 -83.0 -82.0 -79.0 -78.0 -73.0 -70.0 -71.0 -70.0 -67.0 -64.0 -63.0 -60.0 -53.0 -50.0 -51.0 -50.0 -49.0 -44.0 -41.0 -42.0 -37.0 -36.0 -35.0 -34.0 -33.0 -32.0 -31.0 -28.0 -21.0 -27.0 -29.0 -27.0 -25.0 -22.0 -21.0 -22.0 -18.0 -15.0 -18.0 -13.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 4.0 14.0 10.0 2.0 2.0 1.0 3.0 -2.0 -5.0 -7.0 -7.0 -10.0 -15.0 -16.0 -17.0 -18.0 -23.0 -23.0 -29.0 -30.0 -31.0 -36.0 -35.0 90 -189.0 -188.0 -187.0 -182.0 -189.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -159.0 -154.0 -153.0 -152.0 -147.0 -146.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -119.0 -116.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -86.0 -89.0 -88.0 -85.0 -82.0 -77.0 -78.0 -71.0 -70.0 -71.0 -70.0 -67.0 -62.0 -63.0 -60.0 -53.0 -50.0 -51.0 -48.0 -49.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -33.0 -30.0 -21.0 -27.0 -27.0 -27.0 -25.0 -23.0 -21.0 -22.0 -18.0 -15.0 -16.0 -11.0 -8.0 -5.0 -6.0 -1.0 1.0 5.0 6.0 14.0 10.0 4.0 3.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -17.0 -18.0 -23.0 -25.0 -29.0 -30.0 -31.0 -34.0 91 -194.0 -189.0 -190.0 -187.0 -182.0 -187.0 -180.0 -183.0 -176.0 -177.0 -176.0 -171.0 -172.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -154.0 -151.0 -152.0 -147.0 -144.0 -145.0 -142.0 -139.0 -137.0 -134.0 -135.0 -132.0 -129.0 -128.0 -123.0 -124.0 -121.0 -116.0 -117.0 -114.0 -111.0 -110.0 -105.0 -108.0 -103.0 -102.0 -99.0 -96.0 -93.0 -86.0 -87.0 -88.0 -85.0 -82.0 -77.0 -76.0 -71.0 -70.0 -71.0 -68.0 -65.0 -62.0 -61.0 -58.0 -53.0 -50.0 -51.0 -48.0 -47.0 -44.0 -43.0 -42.0 -37.0 -38.0 -33.0 -34.0 -33.0 -32.0 -31.0 -30.0 -21.0 -27.0 -25.0 -28.0 -25.0 -23.0 -21.0 -22.0 -17.0 -13.0 -14.0 -9.0 -8.0 -5.0 -4.0 1.0 3.0 7.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -5.0 -6.0 -7.0 -8.0 -13.0 -16.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 -31.0 92 -193.0 -194.0 -187.0 -190.0 -187.0 -182.0 -185.0 -180.0 -183.0 -176.0 -179.0 -174.0 -171.0 -170.0 -167.0 -168.0 -163.0 -160.0 -161.0 -156.0 -157.0 -156.0 -151.0 -150.0 -147.0 -146.0 -145.0 -143.0 -138.0 -137.0 -134.0 -133.0 -134.0 -131.0 -130.0 -125.0 -126.0 -121.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -108.0 -105.0 -102.0 -99.0 -94.0 -91.0 -84.0 -87.0 -86.0 -83.0 -80.0 -77.0 -76.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -59.0 -58.0 -53.0 -50.0 -49.0 -46.0 -49.0 -44.0 -43.0 -44.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -30.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -21.0 -17.0 -13.0 -12.0 -9.0 -8.0 -3.0 -2.0 3.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 0.0 -7.0 -8.0 -7.0 -8.0 -13.0 -18.0 -19.0 -20.0 -23.0 -25.0 -29.0 -30.0 93 -196.0 -193.0 -192.0 -187.0 -190.0 -185.0 -182.0 -185.0 -180.0 -181.0 -176.0 -177.0 -174.0 -171.0 -170.0 -167.0 -166.0 -161.0 -160.0 -159.0 -156.0 -157.0 -156.0 -149.0 -148.0 -147.0 -147.0 -144.0 -141.0 -138.0 -137.0 -134.0 -133.0 -133.0 -131.0 -130.0 -127.0 -124.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -108.0 -103.0 -102.0 -97.0 -92.0 -89.0 -84.0 -87.0 -84.0 -81.0 -80.0 -79.0 -78.0 -71.0 -72.0 -71.0 -64.0 -61.0 -62.0 -59.0 -60.0 -53.0 -48.0 -49.0 -46.0 -49.0 -44.0 -43.0 -42.0 -39.0 -40.0 -35.0 -34.0 -33.0 -34.0 -33.0 -28.0 -21.0 -25.0 -25.0 -28.0 -25.0 -23.0 -20.0 -19.0 -15.0 -13.0 -12.0 -9.0 -6.0 -3.0 -2.0 5.0 5.0 9.0 8.0 14.0 10.0 4.0 1.0 0.0 3.0 -2.0 -9.0 -8.0 -7.0 -8.0 -15.0 -18.0 -21.0 -20.0 -23.0 -25.0 -29.0 94 -197.0 -196.0 -193.0 -192.0 -187.0 -190.0 -183.0 -182.0 -185.0 -178.0 -181.0 -174.0 -177.0 -172.0 -171.0 -170.0 -165.0 -164.0 -161.0 -158.0 -159.0 -156.0 -157.0 -154.0 -147.0 -148.0 -145.0 -146.0 -142.0 -141.0 -138.0 -137.0 -134.0 -131.0 -133.0 -131.0 -128.0 -127.0 -122.0 -119.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -106.0 -101.0 -100.0 -95.0 -90.0 -89.0 -84.0 -85.0 -82.0 -79.0 -80.0 -79.0 -78.0 -71.0 -72.0 -69.0 -62.0 -61.0 -62.0 -59.0 -60.0 -51.0 -48.0 -49.0 -46.0 -49.0 -44.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -36.0 -31.0 -28.0 -21.0 -25.0 -25.0 -26.0 -24.0 -24.0 -18.0 -17.0 -16.0 -13.0 -12.0 -9.0 -6.0 -3.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 4.0 0.0 1.0 1.0 -4.0 -7.0 -8.0 -7.0 -10.0 -15.0 -20.0 -21.0 -20.0 -23.0 -25.0 95 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -164.0 -159.0 -158.0 -160.0 -156.0 -155.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -141.0 -138.0 -137.0 -132.0 -131.0 -133.0 -129.0 -126.0 -127.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -110.0 -103.0 -104.0 -99.0 -98.0 -93.0 -90.0 -89.0 -84.0 -83.0 -80.0 -79.0 -80.0 -79.0 -78.0 -71.0 -70.0 -67.0 -62.0 -61.0 -62.0 -57.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -42.0 -39.0 -42.0 -35.0 -34.0 -35.0 -34.0 -31.0 -28.0 -21.0 -25.0 -25.0 -25.0 -24.0 -23.0 -16.0 -17.0 -16.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 4.0 9.0 8.0 14.0 10.0 2.0 1.0 -1.0 1.0 -4.0 -9.0 -8.0 -7.0 -12.0 -17.0 -22.0 -23.0 -20.0 -23.0 96 -201.0 -202.0 -197.0 -198.0 -193.0 -194.0 -187.0 -188.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -171.0 -168.0 -163.0 -162.0 -159.0 -156.0 -161.0 -156.0 -153.0 -154.0 -147.0 -146.0 -144.0 -144.0 -142.0 -139.0 -138.0 -137.0 -132.0 -131.0 -134.0 -129.0 -124.0 -125.0 -122.0 -121.0 -116.0 -115.0 -116.0 -109.0 -108.0 -103.0 -104.0 -99.0 -96.0 -93.0 -90.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -77.0 -76.0 -71.0 -68.0 -65.0 -62.0 -61.0 -62.0 -57.0 -56.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -42.0 -39.0 -40.0 -35.0 -34.0 -35.0 -32.0 -31.0 -28.0 -21.0 -25.0 -25.0 -23.0 -22.0 -21.0 -14.0 -17.0 -16.0 -11.0 -8.0 -7.0 -4.0 1.0 0.0 5.0 4.0 9.0 10.0 14.0 10.0 4.0 3.0 0.0 1.0 -6.0 -7.0 -10.0 -9.0 -12.0 -19.0 -20.0 -23.0 -20.0 97 -200.0 -201.0 -200.0 -197.0 -200.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -170.0 -163.0 -162.0 -159.0 -156.0 -159.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -144.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -132.0 -129.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -114.0 -109.0 -106.0 -101.0 -102.0 -97.0 -96.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -80.0 -75.0 -74.0 -69.0 -66.0 -65.0 -62.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -34.0 -35.0 -32.0 -33.0 -28.0 -21.0 -25.0 -24.0 -23.0 -22.0 -19.0 -14.0 -17.0 -14.0 -9.0 -6.0 -5.0 -2.0 1.0 0.0 5.0 4.0 9.0 12.0 14.0 10.0 6.0 3.0 0.0 -1.0 -4.0 -5.0 -10.0 -11.0 -14.0 -19.0 -18.0 -21.0 98 -205.0 -200.0 -201.0 -200.0 -197.0 -198.0 -193.0 -194.0 -187.0 -186.0 -183.0 -182.0 -183.0 -178.0 -179.0 -174.0 -175.0 -172.0 -169.0 -168.0 -163.0 -160.0 -159.0 -156.0 -157.0 -156.0 -153.0 -152.0 -146.0 -145.0 -144.0 -142.0 -140.0 -139.0 -136.0 -137.0 -132.0 -129.0 -130.0 -127.0 -122.0 -125.0 -122.0 -121.0 -116.0 -115.0 -112.0 -111.0 -106.0 -101.0 -102.0 -97.0 -94.0 -91.0 -88.0 -89.0 -84.0 -81.0 -80.0 -79.0 -78.0 -75.0 -72.0 -67.0 -68.0 -67.0 -62.0 -63.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -49.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -32.0 -33.0 -28.0 -21.0 -24.0 -22.0 -21.0 -20.0 -19.0 -14.0 -17.0 -12.0 -7.0 -4.0 -4.0 -4.0 0.0 -2.0 3.0 4.0 9.0 14.0 14.0 10.0 6.0 3.0 -2.0 -1.0 -6.0 -7.0 -10.0 -13.0 -16.0 -19.0 -18.0 99 -206.0 -205.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -192.0 -185.0 -186.0 -181.0 -182.0 -181.0 -178.0 -179.0 -174.0 -173.0 -172.0 -169.0 -168.0 -163.0 -160.0 -157.0 -156.0 -157.0 -154.0 -153.0 -151.0 -146.0 -145.0 -142.0 -142.0 -138.0 -139.0 -136.0 -135.0 -132.0 -129.0 -128.0 -127.0 -122.0 -123.0 -122.0 -119.0 -116.0 -113.0 -110.0 -109.0 -104.0 -99.0 -102.0 -95.0 -92.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -77.0 -76.0 -73.0 -70.0 -67.0 -68.0 -67.0 -62.0 -61.0 -60.0 -55.0 -58.0 -51.0 -48.0 -49.0 -46.0 -47.0 -42.0 -45.0 -44.0 -39.0 -40.0 -37.0 -32.0 -35.0 -34.0 -31.0 -28.0 -21.0 -24.0 -22.0 -19.0 -20.0 -19.0 -14.0 -15.0 -10.0 -5.0 -2.0 -4.0 -4.0 0.0 -2.0 3.0 6.0 9.0 14.0 14.0 10.0 6.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -15.0 -16.0 -19.0 100 -207.0 -206.0 -203.0 -198.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -185.0 -184.0 -181.0 -182.0 -181.0 -178.0 -179.0 -172.0 -175.0 -172.0 -169.0 -166.0 -163.0 -158.0 -157.0 -156.0 -157.0 -153.0 -152.0 -151.0 -146.0 -143.0 -142.0 -140.0 -138.0 -139.0 -136.0 -133.0 -132.0 -127.0 -128.0 -127.0 -120.0 -123.0 -120.0 -117.0 -114.0 -111.0 -108.0 -107.0 -102.0 -99.0 -100.0 -93.0 -90.0 -89.0 -88.0 -89.0 -84.0 -81.0 -80.0 -75.0 -74.0 -71.0 -70.0 -67.0 -68.0 -65.0 -60.0 -61.0 -60.0 -55.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -44.0 -39.0 -40.0 -37.0 -32.0 -36.0 -36.0 -30.0 -27.0 -21.0 -24.0 -20.0 -19.0 -20.0 -17.0 -12.0 -13.0 -8.0 -3.0 -2.0 -4.0 -5.0 0.0 0.0 3.0 6.0 7.0 14.0 14.0 10.0 4.0 1.0 -2.0 -5.0 -6.0 -7.0 -14.0 -15.0 -16.0 101 -208.0 -209.0 -206.0 -205.0 -198.0 -203.0 -198.0 -197.0 -196.0 -191.0 -192.0 -183.0 -184.0 -181.0 -182.0 -181.0 -178.0 -177.0 -172.0 -173.0 -172.0 -167.0 -166.0 -161.0 -158.0 -157.0 -156.0 -156.0 -151.0 -152.0 -151.0 -144.0 -143.0 -140.0 -140.0 -138.0 -139.0 -134.0 -133.0 -130.0 -127.0 -128.0 -125.0 -120.0 -121.0 -118.0 -115.0 -112.0 -109.0 -106.0 -105.0 -102.0 -97.0 -98.0 -91.0 -90.0 -89.0 -88.0 -89.0 -84.0 -79.0 -78.0 -73.0 -72.0 -71.0 -70.0 -65.0 -66.0 -65.0 -60.0 -63.0 -62.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -47.0 -42.0 -37.0 -40.0 -37.0 -32.0 -37.0 -35.0 -28.0 -27.0 -21.0 -22.0 -20.0 -19.0 -20.0 -15.0 -10.0 -11.0 -6.0 -3.0 -2.0 -4.0 -5.0 0.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 4.0 1.0 -2.0 -3.0 -8.0 -7.0 -12.0 -13.0 102 -213.0 -208.0 -207.0 -208.0 -207.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -177.0 -170.0 -173.0 -170.0 -167.0 -164.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -152.0 -149.0 -144.0 -141.0 -140.0 -140.0 -138.0 -137.0 -134.0 -131.0 -132.0 -127.0 -126.0 -127.0 -118.0 -119.0 -116.0 -113.0 -110.0 -107.0 -104.0 -105.0 -100.0 -95.0 -96.0 -91.0 -90.0 -89.0 -88.0 -87.0 -82.0 -77.0 -76.0 -71.0 -72.0 -71.0 -68.0 -63.0 -64.0 -65.0 -60.0 -63.0 -60.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -45.0 -40.0 -37.0 -40.0 -37.0 -32.0 -36.0 -33.0 -28.0 -27.0 -20.0 -22.0 -20.0 -19.0 -18.0 -13.0 -8.0 -9.0 -6.0 -3.0 -2.0 -4.0 -3.0 2.0 2.0 3.0 4.0 7.0 14.0 14.0 8.0 6.0 1.0 0.0 -3.0 -8.0 -5.0 -10.0 103 -210.0 -213.0 -208.0 -207.0 -208.0 -205.0 -198.0 -201.0 -198.0 -195.0 -194.0 -191.0 -190.0 -183.0 -184.0 -181.0 -182.0 -179.0 -176.0 -175.0 -170.0 -171.0 -170.0 -167.0 -162.0 -161.0 -158.0 -157.0 -155.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -140.0 -141.0 -138.0 -135.0 -132.0 -131.0 -132.0 -127.0 -126.0 -125.0 -118.0 -117.0 -116.0 -113.0 -112.0 -105.0 -104.0 -103.0 -100.0 -95.0 -94.0 -91.0 -92.0 -89.0 -86.0 -87.0 -84.0 -75.0 -74.0 -71.0 -72.0 -73.0 -68.0 -61.0 -64.0 -65.0 -60.0 -61.0 -58.0 -53.0 -56.0 -51.0 -48.0 -51.0 -48.0 -47.0 -42.0 -43.0 -40.0 -37.0 -40.0 -37.0 -32.0 -34.0 -31.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -16.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 -2.0 -3.0 4.0 2.0 2.0 2.0 5.0 14.0 14.0 6.0 6.0 -1.0 0.0 -3.0 -8.0 -5.0 104 -215.0 -210.0 -213.0 -210.0 -207.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -179.0 -176.0 -177.0 -170.0 -171.0 -170.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -156.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -141.0 -136.0 -137.0 -132.0 -131.0 -132.0 -129.0 -126.0 -123.0 -116.0 -115.0 -114.0 -111.0 -110.0 -105.0 -104.0 -101.0 -98.0 -93.0 -94.0 -91.0 -92.0 -89.0 -84.0 -85.0 -82.0 -75.0 -74.0 -71.0 -72.0 -71.0 -68.0 -61.0 -64.0 -67.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -47.0 -44.0 -45.0 -40.0 -37.0 -38.0 -37.0 -32.0 -32.0 -29.0 -26.0 -25.0 -20.0 -22.0 -20.0 -17.0 -14.0 -11.0 -6.0 -9.0 -6.0 -3.0 -2.0 0.0 -1.0 4.0 2.0 2.0 4.0 7.0 14.0 14.0 5.0 4.0 -1.0 0.0 -3.0 -6.0 105 -218.0 -215.0 -210.0 -213.0 -210.0 -205.0 -206.0 -203.0 -198.0 -199.0 -196.0 -195.0 -192.0 -191.0 -188.0 -183.0 -184.0 -181.0 -180.0 -177.0 -176.0 -175.0 -170.0 -171.0 -168.0 -165.0 -162.0 -159.0 -158.0 -158.0 -157.0 -154.0 -151.0 -150.0 -149.0 -144.0 -141.0 -138.0 -139.0 -134.0 -139.0 -132.0 -131.0 -134.0 -129.0 -128.0 -121.0 -116.0 -115.0 -116.0 -109.0 -112.0 -105.0 -104.0 -103.0 -96.0 -93.0 -94.0 -93.0 -92.0 -89.0 -84.0 -85.0 -80.0 -75.0 -74.0 -71.0 -72.0 -71.0 -70.0 -61.0 -64.0 -65.0 -60.0 -59.0 -58.0 -53.0 -54.0 -53.0 -48.0 -51.0 -50.0 -45.0 -44.0 -45.0 -40.0 -37.0 -38.0 -36.0 -31.0 -30.0 -27.0 -26.0 -25.0 -18.0 -22.0 -18.0 -15.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 -2.0 2.0 -1.0 4.0 2.0 4.0 6.0 5.0 14.0 12.0 5.0 4.0 -1.0 2.0 -3.0 106 -219.0 -220.0 -215.0 -210.0 -213.0 -212.0 -205.0 -208.0 -205.0 -200.0 -199.0 -198.0 -197.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -175.0 -170.0 -171.0 -170.0 -167.0 -164.0 -159.0 -160.0 -158.0 -157.0 -156.0 -151.0 -152.0 -151.0 -144.0 -141.0 -136.0 -137.0 -134.0 -139.0 -132.0 -131.0 -132.0 -129.0 -126.0 -121.0 -116.0 -115.0 -114.0 -109.0 -110.0 -105.0 -104.0 -101.0 -96.0 -93.0 -94.0 -93.0 -90.0 -91.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -64.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -47.0 -42.0 -37.0 -37.0 -36.0 -29.0 -30.0 -29.0 -26.0 -23.0 -16.0 -20.0 -16.0 -13.0 -12.0 -11.0 -8.0 -9.0 -6.0 -1.0 0.0 2.0 -1.0 6.0 2.0 6.0 6.0 5.0 14.0 10.0 5.0 4.0 -1.0 2.0 107 -220.0 -219.0 -218.0 -215.0 -210.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -197.0 -198.0 -195.0 -194.0 -193.0 -190.0 -185.0 -186.0 -181.0 -182.0 -177.0 -178.0 -173.0 -170.0 -171.0 -168.0 -166.0 -163.0 -159.0 -160.0 -158.0 -157.0 -154.0 -151.0 -152.0 -149.0 -142.0 -139.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -130.0 -127.0 -124.0 -119.0 -114.0 -113.0 -114.0 -109.0 -108.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -93.0 -88.0 -89.0 -82.0 -85.0 -80.0 -75.0 -74.0 -71.0 -70.0 -71.0 -72.0 -61.0 -62.0 -63.0 -62.0 -61.0 -60.0 -53.0 -56.0 -55.0 -50.0 -51.0 -50.0 -45.0 -46.0 -45.0 -42.0 -37.0 -35.0 -34.0 -29.0 -30.0 -29.0 -24.0 -23.0 -16.0 -19.0 -16.0 -15.0 -12.0 -11.0 -10.0 -11.0 -4.0 1.0 0.0 2.0 1.0 8.0 2.0 6.0 6.0 6.0 14.0 8.0 5.0 4.0 -1.0 108 -223.0 -220.0 -219.0 -218.0 -217.0 -210.0 -209.0 -212.0 -205.0 -206.0 -203.0 -202.0 -197.0 -196.0 -195.0 -194.0 -193.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -176.0 -173.0 -170.0 -171.0 -169.0 -166.0 -163.0 -159.0 -161.0 -160.0 -155.0 -154.0 -153.0 -152.0 -147.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -131.0 -128.0 -127.0 -122.0 -117.0 -112.0 -113.0 -114.0 -107.0 -106.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -91.0 -86.0 -87.0 -82.0 -85.0 -80.0 -75.0 -72.0 -71.0 -70.0 -71.0 -70.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -47.0 -48.0 -44.0 -41.0 -39.0 -35.0 -34.0 -29.0 -30.0 -27.0 -22.0 -21.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -9.0 -4.0 1.0 0.0 2.0 0.0 8.0 2.0 6.0 8.0 6.0 14.0 8.0 5.0 4.0 109 -222.0 -223.0 -218.0 -219.0 -218.0 -217.0 -210.0 -209.0 -210.0 -203.0 -206.0 -201.0 -202.0 -197.0 -196.0 -195.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -182.0 -179.0 -174.0 -173.0 -170.0 -170.0 -167.0 -166.0 -163.0 -159.0 -161.0 -158.0 -155.0 -154.0 -153.0 -150.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -137.0 -132.0 -129.0 -126.0 -125.0 -120.0 -115.0 -112.0 -113.0 -112.0 -105.0 -104.0 -103.0 -102.0 -101.0 -96.0 -93.0 -94.0 -89.0 -86.0 -87.0 -82.0 -83.0 -78.0 -75.0 -72.0 -71.0 -70.0 -71.0 -68.0 -61.0 -62.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -50.0 -49.0 -47.0 -44.0 -39.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -22.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -10.0 -7.0 -4.0 1.0 2.0 2.0 2.0 8.0 2.0 8.0 8.0 6.0 14.0 8.0 5.0 110 -227.0 -222.0 -223.0 -218.0 -219.0 -216.0 -215.0 -210.0 -209.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -196.0 -193.0 -190.0 -191.0 -186.0 -187.0 -184.0 -181.0 -180.0 -177.0 -174.0 -171.0 -169.0 -168.0 -167.0 -166.0 -163.0 -159.0 -159.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -142.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -127.0 -124.0 -123.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -102.0 -101.0 -96.0 -91.0 -92.0 -89.0 -86.0 -87.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -64.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -49.0 -47.0 -42.0 -37.0 -38.0 -37.0 -34.0 -29.0 -28.0 -27.0 -20.0 -19.0 -14.0 -17.0 -16.0 -15.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 4.0 4.0 2.0 8.0 4.0 8.0 8.0 4.0 14.0 8.0 111 -228.0 -229.0 -222.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -203.0 -206.0 -201.0 -202.0 -199.0 -196.0 -195.0 -192.0 -191.0 -186.0 -187.0 -186.0 -183.0 -178.0 -179.0 -174.0 -173.0 -171.0 -170.0 -167.0 -164.0 -165.0 -161.0 -161.0 -160.0 -157.0 -154.0 -149.0 -146.0 -145.0 -144.0 -137.0 -136.0 -137.0 -134.0 -135.0 -130.0 -129.0 -124.0 -121.0 -118.0 -115.0 -112.0 -111.0 -110.0 -103.0 -104.0 -103.0 -100.0 -99.0 -96.0 -89.0 -90.0 -89.0 -86.0 -87.0 -80.0 -79.0 -78.0 -77.0 -72.0 -71.0 -72.0 -69.0 -68.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -48.0 -45.0 -40.0 -35.0 -39.0 -39.0 -32.0 -27.0 -26.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -17.0 -12.0 -11.0 -8.0 -7.0 -4.0 1.0 6.0 4.0 2.0 8.0 4.0 8.0 8.0 6.0 14.0 112 -233.0 -228.0 -227.0 -224.0 -227.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -197.0 -192.0 -191.0 -188.0 -187.0 -184.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -170.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -157.0 -154.0 -151.0 -148.0 -145.0 -146.0 -139.0 -136.0 -135.0 -134.0 -133.0 -128.0 -127.0 -122.0 -121.0 -118.0 -113.0 -112.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -97.0 -94.0 -89.0 -90.0 -89.0 -86.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -55.0 -50.0 -51.0 -48.0 -46.0 -43.0 -40.0 -35.0 -40.0 -37.0 -32.0 -27.0 -24.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -15.0 -10.0 -11.0 -8.0 -5.0 -2.0 3.0 6.0 4.0 4.0 8.0 4.0 6.0 8.0 8.0 113 -234.0 -233.0 -228.0 -227.0 -224.0 -225.0 -218.0 -221.0 -216.0 -213.0 -214.0 -211.0 -210.0 -203.0 -204.0 -201.0 -202.0 -199.0 -194.0 -195.0 -192.0 -189.0 -188.0 -187.0 -182.0 -181.0 -178.0 -177.0 -173.0 -172.0 -173.0 -168.0 -169.0 -164.0 -163.0 -163.0 -161.0 -158.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -133.0 -134.0 -133.0 -128.0 -125.0 -122.0 -121.0 -118.0 -113.0 -110.0 -109.0 -110.0 -103.0 -104.0 -105.0 -98.0 -95.0 -92.0 -89.0 -90.0 -89.0 -86.0 -83.0 -80.0 -81.0 -78.0 -77.0 -72.0 -69.0 -72.0 -69.0 -66.0 -61.0 -60.0 -62.0 -66.0 -61.0 -58.0 -55.0 -56.0 -55.0 -52.0 -52.0 -47.0 -44.0 -43.0 -40.0 -35.0 -38.0 -35.0 -30.0 -25.0 -22.0 -25.0 -18.0 -19.0 -14.0 -19.0 -16.0 -13.0 -10.0 -11.0 -8.0 -3.0 0.0 3.0 6.0 4.0 4.0 8.0 6.0 6.0 8.0 114 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -199.0 -194.0 -197.0 -192.0 -189.0 -190.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -161.0 -158.0 -155.0 -152.0 -151.0 -150.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -131.0 -128.0 -125.0 -120.0 -119.0 -116.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -103.0 -98.0 -93.0 -92.0 -89.0 -90.0 -89.0 -84.0 -83.0 -80.0 -81.0 -78.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -62.0 -64.0 -61.0 -58.0 -55.0 -56.0 -54.0 -52.0 -50.0 -45.0 -42.0 -43.0 -40.0 -35.0 -36.0 -33.0 -30.0 -23.0 -22.0 -25.0 -18.0 -19.0 -14.0 -17.0 -14.0 -13.0 -10.0 -9.0 -6.0 -1.0 0.0 5.0 8.0 4.0 4.0 8.0 8.0 8.0 115 -238.0 -235.0 -234.0 -233.0 -230.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -213.0 -212.0 -211.0 -208.0 -203.0 -204.0 -201.0 -200.0 -197.0 -194.0 -195.0 -192.0 -189.0 -188.0 -185.0 -182.0 -179.0 -177.0 -178.0 -175.0 -174.0 -171.0 -168.0 -169.0 -164.0 -163.0 -162.0 -159.0 -156.0 -155.0 -152.0 -151.0 -148.0 -145.0 -144.0 -139.0 -136.0 -131.0 -132.0 -129.0 -128.0 -123.0 -120.0 -119.0 -114.0 -111.0 -110.0 -109.0 -110.0 -103.0 -104.0 -101.0 -96.0 -93.0 -92.0 -89.0 -90.0 -87.0 -84.0 -83.0 -80.0 -81.0 -76.0 -75.0 -72.0 -69.0 -70.0 -69.0 -66.0 -61.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -56.0 -52.0 -51.0 -48.0 -43.0 -42.0 -43.0 -40.0 -33.0 -34.0 -31.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -13.0 -8.0 -7.0 -4.0 -1.0 2.0 5.0 8.0 4.0 6.0 8.0 8.0 116 -241.0 -240.0 -235.0 -234.0 -235.0 -230.0 -229.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -210.0 -205.0 -206.0 -201.0 -200.0 -199.0 -194.0 -195.0 -194.0 -191.0 -190.0 -187.0 -184.0 -179.0 -177.0 -180.0 -175.0 -174.0 -171.0 -170.0 -171.0 -166.0 -165.0 -160.0 -159.0 -158.0 -155.0 -154.0 -151.0 -150.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -126.0 -125.0 -122.0 -119.0 -116.0 -111.0 -112.0 -109.0 -110.0 -103.0 -104.0 -101.0 -98.0 -95.0 -94.0 -89.0 -90.0 -87.0 -84.0 -85.0 -80.0 -81.0 -78.0 -77.0 -72.0 -71.0 -70.0 -71.0 -66.0 -63.0 -60.0 -63.0 -64.0 -61.0 -58.0 -55.0 -55.0 -50.0 -49.0 -46.0 -43.0 -42.0 -41.0 -38.0 -31.0 -32.0 -29.0 -28.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -14.0 -11.0 -6.0 -5.0 -4.0 1.0 2.0 5.0 8.0 4.0 8.0 8.0 117 -242.0 -243.0 -238.0 -235.0 -236.0 -233.0 -228.0 -231.0 -226.0 -225.0 -218.0 -221.0 -218.0 -215.0 -212.0 -213.0 -212.0 -205.0 -208.0 -203.0 -200.0 -201.0 -194.0 -193.0 -192.0 -191.0 -190.0 -188.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -169.0 -168.0 -163.0 -158.0 -159.0 -160.0 -153.0 -152.0 -151.0 -148.0 -145.0 -144.0 -141.0 -138.0 -131.0 -130.0 -131.0 -124.0 -123.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -108.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -87.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -66.0 -63.0 -57.0 -55.0 -55.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -38.0 -31.0 -30.0 -31.0 -30.0 -23.0 -22.0 -23.0 -18.0 -19.0 -14.0 -15.0 -12.0 -11.0 -4.0 -5.0 -4.0 3.0 0.0 5.0 10.0 6.0 10.0 118 -243.0 -242.0 -241.0 -238.0 -235.0 -236.0 -231.0 -228.0 -229.0 -224.0 -225.0 -218.0 -221.0 -216.0 -215.0 -212.0 -211.0 -210.0 -205.0 -206.0 -203.0 -200.0 -201.0 -194.0 -191.0 -192.0 -189.0 -189.0 -186.0 -185.0 -181.0 -177.0 -180.0 -177.0 -172.0 -171.0 -172.0 -167.0 -166.0 -163.0 -158.0 -159.0 -158.0 -153.0 -152.0 -149.0 -146.0 -143.0 -142.0 -139.0 -136.0 -131.0 -130.0 -129.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -114.0 -111.0 -106.0 -103.0 -102.0 -101.0 -100.0 -97.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -81.0 -80.0 -79.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -64.0 -62.0 -57.0 -54.0 -53.0 -48.0 -49.0 -48.0 -45.0 -42.0 -39.0 -36.0 -31.0 -30.0 -31.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -5.0 -2.0 3.0 0.0 5.0 10.0 8.0 119 -246.0 -243.0 -242.0 -241.0 -238.0 -235.0 -234.0 -231.0 -228.0 -227.0 -224.0 -223.0 -218.0 -219.0 -216.0 -215.0 -212.0 -209.0 -210.0 -205.0 -206.0 -203.0 -200.0 -199.0 -194.0 -191.0 -190.0 -188.0 -187.0 -186.0 -185.0 -181.0 -177.0 -178.0 -177.0 -172.0 -171.0 -170.0 -167.0 -164.0 -163.0 -158.0 -159.0 -156.0 -153.0 -152.0 -147.0 -144.0 -141.0 -140.0 -137.0 -136.0 -131.0 -128.0 -127.0 -122.0 -121.0 -120.0 -121.0 -118.0 -111.0 -112.0 -109.0 -104.0 -103.0 -102.0 -99.0 -98.0 -95.0 -94.0 -89.0 -92.0 -89.0 -84.0 -85.0 -80.0 -79.0 -80.0 -77.0 -72.0 -73.0 -72.0 -71.0 -66.0 -65.0 -60.0 -63.0 -63.0 -60.0 -57.0 -54.0 -51.0 -48.0 -49.0 -46.0 -43.0 -40.0 -37.0 -34.0 -31.0 -30.0 -29.0 -28.0 -23.0 -22.0 -21.0 -18.0 -19.0 -14.0 -13.0 -10.0 -9.0 -4.0 -3.0 -2.0 3.0 2.0 7.0 12.0 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-5.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-5.html"},{"title":"混合ガウス分布のEMアルゴリズム","text":"クラスタリング で省略した、混合ガウス分布のEMアルゴリズムの計算過程を記述します。 EMアルゴリズム 観測データ \\(\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) に対する対数尤度関数は、 \\((9.7)\\) から以下のように書けます。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ E step $$\\begin{aligned} p(z_{k}=1|\\mathbf{x}) &\\equiv \\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{p(\\mathbf{x})}\\qquad (\\because\\text{Bayes' theorem})\\\\ &\\propto p(z_{k}=1)p(\\mathbf{x}|z_{k}=1) \\\\ &=\\pi_k\\mathcal{N}(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ なので、総和が \\(1\\) になるように正規化を行えば 負担率 が以下のように求まります。 $$\\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) =\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13)$$ ※ なお、この時分母である \\(\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})\\) が \\(p(\\mathbf{x})\\) であることは有用です。 （ 生物データマイニング論 第1回 では、これを用いて可視化していました。） Maximization step ※ 対数尤度関数 \\((9.14)\\) を \\(\\ln L\\) と記述します。 \\(\\boldsymbol{\\mu}_k\\) 対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\mu}_k\\) で微分します。この時 正規分布は \\(e&#94;{\\text{hoge}}\\) という形をしており、微分しても形が変わらないので、 $$\\begin{aligned} \\frac{\\partial\\ln L}{\\partial\\boldsymbol{\\mu}_k} &= \\sum_{i=n}&#94;N \\frac{\\pi_k\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= \\boldsymbol{\\Sigma}_k&#94;{-1}\\sum_{n=1}&#94;N \\gamma_{nk}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\\\ &= 0\\\\ \\therefore\\boldsymbol{\\mu}_k&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.17)\\\\ \\end{aligned}$$ と最適解が求まりました。 \\(\\pi_k\\) パラメータ \\(\\pi_k\\) については、 \\(\\sum_{k=1}&#94;K \\pi_k = 1\\) という制約に注意する必要があります。ですが、 隠れマルコフモデルの最尤推定 で行なった能登同様に、ラグランジュの未定乗数 \\(\\lambda\\) を導入すればこの問題は解けます。 $$L_{\\lambda} = \\log L + \\lambda\\left(\\sum_{c=1}&#94;K \\pi_c - 1\\right)$$ の導関数が \\(0\\) となる条件を求める事になるので、 $$\\begin{aligned} \\frac{\\partial L_{\\lambda}}{\\partial\\pi_k} &= \\sum_{n=1}&#94;N \\frac{\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_k \\pi_k \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)} + \\lambda\\\\ &= \\sum_{n=1}&#94;N \\frac{\\gamma_{nk}}{\\pi_k} + \\lambda = 0 &\\therefore \\pi_k = -\\frac{1}{\\lambda}\\sum_{n=1}&#94;N \\gamma_{ic}\\\\ \\frac{\\partial L_{\\lambda}}{\\partial\\lambda} &= \\sum_{k=1}&#94;K \\pi_k - 1\\\\ &= \\left(-\\frac{1}{\\lambda}\\sum_{k=1}&#94;K\\sum_{n=1}&#94;N \\gamma_{nk}\\right) - 1 = 0 &\\therefore \\lambda = -n \\end{aligned}$$ より、 $$\\pi_k&#94;{\\star} = \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} \\qquad(9.22)$$ と最適解が求まりました。 \\(\\boldsymbol{\\Sigma}_k\\) \\(\\boldsymbol{\\mu}_k\\) と同様に、対数尤度 \\((9.14)\\) を \\(\\boldsymbol{\\Sigma}_k\\) で微分します。すると、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\log L = \\sum_{n=1}&#94;N\\frac{\\pi_k\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)}{\\sum_j \\pi_j \\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_j,\\boldsymbol{\\Sigma}_j)}$$ となります。ここで、 \\(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\) を計算すると、 $$\\begin{aligned} &\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\biggr)\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\left(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\right)\\\\ =&\\frac{1}{(2\\pi)&#94;{D/2}}\\biggl(-\\frac{1}{2}\\biggr)|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\quad (\\ast1)\\\\ &+\\frac{1}{(2\\pi)&#94;{D/2}}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}}\\frac{1}{2}\\exp\\left\\{-\\frac{1}{2}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;T\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)\\right\\}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\quad (\\ast2)\\\\ =&-\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)+\\frac{1}{2}\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k)\\\\ =&\\frac{1}{2}\\left\\{\\boldsymbol{\\Sigma}_k&#94;{-1}-\\boldsymbol{\\Sigma}_k&#94;{-1}(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)(\\mathbf{x}_n-\\boldsymbol{\\mu}_k)&#94;{T}\\boldsymbol{\\Sigma}_k&#94;{-1}\\right\\}\\mathcal{N}(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k) \\end{aligned}$$ したがって、 $$ \\boldsymbol{\\Sigma}_k&#94;{\\star}= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} \\qquad (9.19) $$ と最適解が求まりました。 ※ \\(\\ast1,\\ast2\\) の式変形は以下でより詳細に説明します。 が、その前にいくつか基本事項の定義を振り返ります。 行列式 $$\\det A=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)\\prod_{i=1}&#94;na_{i\\sigma(i)}=\\displaystyle\\sum_{\\sigma\\in S_n}\\mathrm{sgn}(\\sigma)a_{1\\sigma(1)}a_{2\\sigma(2)}\\cdots a_{n\\sigma(n)}$$ \\(\\sigma\\) は \\(1\\) から \\(n\\) の置換（順列）を表す。 \\(\\mathrm{sgn}(\\sigma)\\) は置換の符号を表す。なお、\b置換の符号は 互\b換の数 に注目しており、奇置換（互換の数が奇数個）なら \\(-1\\) 、偶置換なら \\(+1\\) \b\b 余韻子 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\(i\\) 行と \\(i\\) 列を \\(1\\) つずつ取り去って作られる小行列を \\(M_{ij}\\) とする。つまり、 $$ M_{ij} = \\small \\left[ \\begin{array}{ccc} a_{11} & \\cdots &a_{1\\hspace{1mm}j-1} & a_{1\\hspace{1mm}j+1} & \\cdots & a_{1n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{i-1 \\hspace{1mm} 1} & \\cdots &a_{i-1\\hspace{1mm}j-1} & a_{i-1\\hspace{1mm}j+1} & \\cdots & a_{i-1 \\hspace{1mm}n} \\\\ a_{i+1 \\hspace{1mm} 1} & \\cdots &a_{i+1\\hspace{1mm}j-1} & a_{i+1\\hspace{1mm}j+1} & \\cdots & a_{i+1 \\hspace{1mm}n} \\\\ \\vdots & &\\vdots & \\vdots & &\\vdots \\\\ a_{n1} &\\cdots &a_{n\\hspace{1mm}j-1} & a_{n\\hspace{1mm}j+1} &\\cdots &a_{nn} \\end{array} \\right] $$ です。ここで、 \\(\\Delta_{ij}=(-1)&#94;{i+j}|M_{ij}|\\) とすると、以下の 余因子展開 ができます。 \\(A\\) の行列式は \\(j\\) 列に関して、以下のように展開されます。 $$\\det A=\\Delta_{1j}a_{1j}+\\Delta_{2j}a_{2j}+\\cdots+\\Delta_{nj}a_{nj}$$ \\(A\\) の行列式は \\(i\\) 行に関して、以下のように展開されます。 $$\\det A=\\Delta_{i1}a_{i1}+\\Delta_{i2}a_{i2}+\\cdots+\\Delta_{in}a_{in}$$ \b 余韻子行列 \\(n\\) 次正方行列 \\(A := (a_{ij})\\) に対し、 \\((i, j)\\) 余因子を \\((j, i)\\) 成分に持つ行列 $$\\tilde{A} := \\begin{pmatrix}&\\Delta_{11}&\\Delta_{21}&\\cdots&\\Delta_{n1}\\\\&\\Delta_{21}&\\Delta_{22}&\\ldots&\\Delta_{n2}\\\\&\\vdots&\\vdots&\\ddots&\\vdots\\\\&\\Delta_{n1}&\\Delta_{n2}&\\cdots&\\Delta_{nn}\\end{pmatrix}$$ を 余韻子行列 と呼びます。ここで、余韻子展開を考えれば、余韻子行列に関して、 $$\\tilde{A}A=A\\tilde{A}=\\det(A)I_n$$ が成り立つことがわかります。 \\(\\ast1\\) の変形 以上を踏まえると、 \\(\\frac{\\partial\\det(A)}{\\partial a_{ij}} = \\Delta_{ij}\\) なので、 $$\\frac{\\partial|\\Sigma|}{\\partial\\Sigma} =\\tilde\\Sigma = |\\Sigma|\\Sigma&#94;{-1}$$ が成り立ち、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\frac{1}{|\\boldsymbol{\\Sigma}_k|&#94;{1/2}} =-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-\\frac{3}{2}}\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_k}\\boldsymbol{\\Sigma_k}=-\\frac{1}{2}|\\boldsymbol{\\Sigma}_k|&#94;{-1/2}\\boldsymbol{\\Sigma_k}&#94;{-1}$$ となることがわかります。 トレースと固有値の関係性 【命題】 トレースには、 \\(Tr(A) = \\sum_{k=1}&#94;{n}\\lambda_{k}\\) という関係がある。 トレース： \\(n\\times n\\) の正方行列 \\(A\\) に対して、\b対角成分の和 \\(\\sum_{k=1}&#94;{n}a_{kk}\\) を \\(A\\) のトレースと呼び、 \\(\\mathrm{Tr}(A),\\mathrm{tr}A\\) \b と表す。 【証明】 まず、固有方程式は、 $$\\phi(t) = |A-tI| = \\left|\\begin{array}{cccc} a_{11}-t & a_{12} & \\ldots & a_{1n} \\\\ a_{21} & a_{22}-t & \\ldots & a_{2n} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_{n1} & a_{n2} & \\ldots & a_{nn}-t \\end{array} \\right|$$ である。ここで、 \\(t\\) の係数に着目する。 \\(t&#94;n\\) の係数 これは、対角成分を全て掛け合わせた次の多項式 $$(a_{11}-t)(a_{22}-t)\\ldots(a_{nn}-t)$$ における \\(t&#94;n\\) の係数と等しくなる。よって、係数は「 \\((-1)&#94;n\\) 」 \\(t&#94;{n-1}\\) の係数 これも\b、先ほどの多項式の \\(t&#94;{n-1}\\) の係数と等しくなる。（ \\(\\because\\) 余韻子展開を考える。 \\(\\sigma\\) が全単射のため、１行（列）対角成分ではないものがあると、\b少なくともあと１つは体格成分でないものがあることがわかる。） 定数項 これは、\b余韻子展開を考えれば \\(|A|\\) そのもの。 よって、係数は「 \\((-1)&#94;{n-1}(a_{11}+a_{22}+\\ldots+a_{nn})\\) 」であり、これは対角和を用いて「 $(-1)&#94;{n-1}\\mathrm{Tr}(A) $ 」とも書ける。 一方先ほどの固有方程式は固有値を解に持つ。 つまり、 \\(A\\) の固有値を \\(\\lambda_1\\) 〜 \\(\\lambda_n\\) として、 $$\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)$$ とかける。（ \\((-1)&#94;n\\) によって、 \\(t&#94;n\\) の係数を合わせている。） この式を展開すると、 \\(t&#94;{n-1}\\) の係数が「 \\((-1)&#94;{n-1}(\\lambda_1+\\lambda_2+\\ldots+\\lambda_n)\\) 」であることから $$\\mathrm{Tr}(A) = \\lambda_1+\\lambda_2+\\ldots+\\lambda_n$$ ※ちなみに、 \\(\\phi(t)=(-1)&#94;n(t-\\lambda_1)(t-\\lambda_2)\\cdots(t-\\lambda_n)\\) の定数項を考えることで、 $$|A| = \\lambda_1\\lambda_2\\ldots\\lambda_n$$ であることもわかる。 トレースの循環性 \\(A\\) を \\(m \\times n\\) 、 \\(B\\) を \\(n \\times m\\) の行列とすると、 \\(AB\\) は \\(m \\times m\\) の行列であり、 $$ \\begin{aligned} \\mathrm{Tr}[AB]&= \\sum_{i=1}&#94;{m} (AB)_{ii} \\\\&= \\sum_{i=1}&#94;{m}\\sum_{j=1}&#94;{n} A_{ij}B_{ji} \\\\&= \\sum_{j=1}&#94;{n} \\sum_{i=1}&#94;{m} B_{ji} A_{ij} \\\\&= \\sum_{j=1}&#94;{n} (BA)_{jj} \\\\&= \\mathrm{Tr}[BA] \\end{aligned} $$ となる。これを応用すれば、以下の 循環性 が証明できる。 \\(A,B,C\\) をそれぞれ \\(m\\times n,n \\times l,l \\times m\\) の行列とするとき、 $$\\begin{aligned} \\mathrm{Tr}[ABC] =& \\mathrm{Tr}[BCA] \\\\=& \\mathrm{Tr}[CAB] \\end{aligned} $$ が成り立つ。（ \\(\\because\\) ２つの\b行列積をセットで考えれば明らか） 逆行列の微分 正則行列 \\(A\\) に対して、 \\(A&#94;{-1}A=I\\) が成立するので、\bこの等式の両辺を \\(A\\) で微分して、 $$\\begin{aligned} \\biggr(\\frac{\\partial }{\\partial A}A&#94;{-1}\\biggl)A + A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl) = 0\\\\ \\biggr(\\frac{\\partial A&#94;{-1}}{\\partial A}\\biggl) = -A&#94;{-1}\\biggr(\\frac{\\partial }{\\partial A}A\\biggl)A&#94;{-1} \\end{aligned}$$ シングルエントリ行列 \\((i,j)\\) 成分のみが \\(1\\) で、残りが全て \\(0\\) の行列 \\(\\mathbf{J}&#94;{ij}\\) を シングルエントリ行列 と呼ぶ。なお、\b以下の式が成り立つ。 $$\\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{ij}\\bigl)=\\mathbf{A}_{ji}$$ \b \\(2 \\times 2\\) の行列でこれを示す。 $$\\begin{aligned} \\mathrm{Tr}\\bigr(\\mathbf{AJ}&#94;{12}\\bigl)&=\\mathrm{Tr}\\biggr(\\begin{pmatrix}a_{11}&a_{12}\\\\a_{21}&a_{22}\\end{pmatrix}\\begin{pmatrix}0&1\\\\0&0\\end{pmatrix}\\biggl)\\\\ &=\\mathrm{Tr}\\begin{pmatrix}0&a_{11}\\\\0&a_{21}\\end{pmatrix}\\\\ &=a_{21}\\\\ &=\\mathbf{A}_{21} \\end{aligned}$$ \\(\\ast2\\) の変形 以上を踏まえれば、 $$\\begin{aligned} \\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu}) &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr((\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\biggl)\\\\ &=\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\frac{\\partial\\boldsymbol{\\Sigma}}{\\partial\\boldsymbol{\\Sigma}_{ij}}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=\\mathrm{Tr}\\biggr(-\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\biggl)\\\\ &=-\\mathrm{Tr}\\biggr(\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\mathbf{J}&#94;{ij}\\biggl)\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ji}\\\\ &=-\\left\\{\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}\\right\\}_{ij}\\\\ \\end{aligned}$$ よって、 $$\\frac{\\partial}{\\partial\\boldsymbol{\\Sigma}}(\\mathbf{x}-\\boldsymbol{\\mu})&#94;T\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})=-\\boldsymbol{\\Sigma}&#94;{-1}(\\mathbf{x}-\\boldsymbol{\\mu})(\\mathbf{x}-\\boldsymbol{\\mu})&#94;{T}\\boldsymbol{\\Sigma}&#94;{-1}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-2.html"},{"title":"クラスタリング","text":"講師： 津田宏治 資料： 生物データマイニング論(2019) 講義の方針 データ解析アルゴリズムは、生物学の研究に不可欠 R や python のパッケージとして、すぐダウンロードして使うことができる。 しかし、原理を知らずに使うと、アルゴリズムの出す結果を盲信することになり危険。 正しい理解：結果を疑えるようになること。 階層的クラスタリング クラスタリング データ点を クラスタ（互いに類似したグループ） に分割する。 距離尺度：ユークリッド距離、コサイン距離など。 階層的クラスタリング 最初は各点がクラスタとなる。 二つのクラスタを選んで合併していく。 Single Link ：二つのクラスタをまたぐ最近点の距離 chaining により、ゆるいクラスタができる （非推奨） Complete Link ：二つのクラスタをまたぐ最遠点の距離 最も固いクラスタができるが、細かく分け過ぎる傾向がある。 Average Link ：二つのクラスタをまたぐ点対の平均距離 最もバランスがとれており、通常はこれを用いる。 最後は一つのクラスタになる。 デンドログラム ：合併の過程を樹形図の形で表したもの。 K-Means 分割的クラスタリング の一手法。$K$ クラスにデータ点を分割する。 以下を繰り返す。 各データ点 $\\mathbf{x}$ を最も近い中心点 $\\mu_k$ に割り当てて、クラスタ $c_1,\\ldots,c_K$ を作成する。 割当を元に中心点を計算しなおす。 $$\\mu_k = \\sum_{j\\in C_i} \\mathbf{x}_j$$ 実装 In [1]: import numpy as np import matplotlib.pyplot as plt Data. In [2]: np . random . seed ( 0 ) In [3]: N = 30 ; K = 5 vmin = 0 ; vmax = 1 In [4]: # Training Data. data = np . random . uniform ( vmin , vmax , ( N , 2 )) x , y = data . T In [5]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [6]: # Background Color Xs , Ys = np . meshgrid ( np . linspace ( vmin , vmax , 100 ), np . linspace ( vmin , vmax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.KMeans.KMeans ） を使って学習させます。 In [7]: from kerasy.ML.KMeans import KMeans In [8]: model = KMeans ( K = K , random_state = 0 ) In [9]: model . fit ( data ) Visualization. In [10]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [11]: # For Visualization. plt_model = KMeans ( K = K ) In [12]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( idx , mu ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Plot Representative points(µk) of each class. mux , muy = mu . T ax . scatter ( mux , muy , marker = 'x' , c = \"red\" , s = 200 ) # Background. plt_model . mu = mu Z , _ = plt_model . predict ( XYs ) Zs = Z . reshape ( Xs . shape ) ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( vmin , vmax ) ax . set_ylim ( vmin , vmax ) ax . set_title ( f \"Iteration. {i:>02} \" ) plt . show () 混合ガウス分布 混合ガウス分布は、次のように混合係数 $\\pi_k$ でガウス分布を線形重ね合わせした形でかける。 $$p(\\mathbf{x}) = \\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\qquad (9.7)$$ ここで、 二値ベクトル（1-of-K符号化法） $\\mathbf{z}$ の周辺分布は、$0\\leq\\pi_k\\leq1$ と $\\sum_{k=1}&#94;K\\pi_k = 1 $ を満たす $\\pi_k$ を用いて、 $$p\\left(\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\pi_k&#94;{z_k}\\qquad (9.9)$$ と書ける。また、$\\mathbf{z}$ が与えられた時の $\\mathbf{x}$ の事後分布は当然ながら次のガウス分布である。 $$p\\left(\\mathbf{x}|\\mathbf{z}\\right) = \\prod_{k=1}&#94;K\\mathcal{N}\\left(\\mathbf{x}|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)&#94;{z_k}\\qquad(9.11)$$ EMアルゴリズム 観測データ $\\mathbf{X}=\\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}$ に対する対数尤度関数は、$(9.7)$ から以下のように書ける。 （※明示的にパラメータを記載しています。） $$\\ln p\\left(\\mathbf{X}|\\boldsymbol{\\pi,\\mu,\\Sigma}\\right) = \\sum_{n=1}&#94;N\\ln\\left\\{\\sum_{k=1}&#94;K\\pi_k\\mathcal{N}\\left(\\mathbf{x}_n|\\boldsymbol{\\mu}_k,\\boldsymbol{\\Sigma}_k\\right)\\right\\}\\qquad (9.14)$$ Expectation step M stepで必要となる $\\gamma(z_{nk})$ を求める。 この値は、$\\mathbf{x}$ が与えられた下での $\\mathbf{z}$ の条件付き確率であり、混合要素 $k$ が $\\mathbf{x}$ の観測を 「説明する」 度合いを表す 負担率(responsibility) として解釈することもできる。 $$ \\begin{aligned} \\gamma(z_{k})\\equiv p(z_{k}=1|\\mathbf{x}) &=\\frac{p(z_{k}=1)p(\\mathbf{x}|z_{k}=1)}{\\sum_{j=1}&#94;{K}p(z_{j}=1)p(\\mathbf{x}|z_{j}=1)}\\\\ &=\\frac{\\pi_{k}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{k}}}, \\mathbf{\\Sigma_{\\rm{k}}})}{\\sum_{j=1}&#94;{K}\\pi_{j}\\mathcal{N}(\\mathbf{x}|\\mathbf{\\mu_{\\rm{j}}}, \\mathbf{\\Sigma_{\\rm{j}}})}\\qquad (9.13) \\end{aligned} $$ Maximization step M stepでは、尤度関数を最大化するように各パラメータの値を更新する。 ※ 導出過程は 混合ガウス分布のEMアルゴリズム に載せています。 $$ \\begin{aligned} \\boldsymbol{\\mu}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\mathbf{x}_n}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.17)\\\\ \\boldsymbol{\\Sigma}_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)\\left(\\mathbf{x}_n-\\boldsymbol{\\mu}_k\\right)&#94;{\\mathrm{T}}}{\\sum_{n=1}&#94;N\\gamma(z_{nk})} & (9.19)\\\\ \\pi_k &= \\frac{\\sum_{n=1}&#94;N\\gamma(z_{nk})}{N} & (9.22) \\end{aligned} $$ 実装 Data. In [13]: np . random . seed ( 0 ) In [14]: N = 150 ; K = 3 In [15]: # Train Data. data = np . concatenate ([ np . random . multivariate_normal ( mean = [ 0 , 0 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 0 , 5 ], cov = np . eye ( 2 ), size = int ( N / 3 )), np . random . multivariate_normal ( mean = [ 3 , 2 ], cov = np . eye ( 2 ), size = int ( N / 3 )), ]) x , y = data . T In [16]: plt . scatter ( x , y ) plt . title ( \"Training Data.\" ) plt . show () In [17]: # Background Color xmin , ymin = np . min ( data , axis = 0 ) xmax , ymax = np . max ( data , axis = 0 ) Xs , Ys = np . meshgrid ( np . linspace ( xmin , xmax , 100 ), np . linspace ( ymin , ymax , 100 )) XYs = np . c_ [ Xs . ravel (), Ys . ravel ()] Training. 自作のモジュール （ kerasy.ML.MixedDistribution.MixedGaussian ） を使って学習させます。 In [18]: from kerasy.ML.MixedDistribution import MixedGaussian In [19]: model = MixedGaussian ( K = K , random_state = 1234 ) In [20]: model . fit ( data , span = 20 ) Visualization. In [21]: Nfig = len ( model . history ) col = 3 row = Nfig // col + 1 if Nfig % col != 0 else Nfig//col In [22]: # For Visualization. plt_model = MixedGaussian ( K = K ) plt_model . N , plt_model . M = data . shape In [23]: fig = plt . figure ( figsize = ( 6 * col , 4 * row )) for i ,( epoch , idx , mu , S , pi ) in enumerate ( model . history ): # Plot Training Data with respective class color. ax = fig . add_subplot ( row , col , i + 1 ) ax . scatter ( x , y , c = idx ) # Background. plt_model . mu = mu plt_model . S = S plt_model . pi = pi Z = plt_model . predict ( XYs ) Zs = np . sum ( Z , axis = 1 ) . reshape ( Xs . shape ) # Likelihood. ax . pcolor ( Xs , Ys , Zs , alpha = 0.2 ) ax . set_xlim ( xmin , xmax ) ax . set_ylim ( ymin , ymax ) ax . set_title ( f \" {epoch:>02} epochs.\" ) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物データマイニング論","url":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物データマイニング論-1-1.html"},{"title":"イントロダクション","text":"講師： 山崎俊彦 参考書： CG-ARTS協会発行「ディジタル画像処理」 参考書： R. Szeliski, Computer Vision Algorithms and Applications, Springer (PDF版はインターネット上で無料公開) 講義予定 前半（山崎担当） 画像の操作 画像の特徴抽出・内容理解・構造化 機械学習一般 後半（相澤担当） 画像を撮る：カメラの内部処理・センサ・レンズ・標本化 画像を表現する。色の知覚・表現 画像の基礎的な処理。周波数変換、線形・非線形フィルタリング # 日付 担当 内容 1 9/30(月) 山崎 画像・映像を中心とした現在の技術動向の紹介、低次・領域・局所画像特徴 2 10/7(月) 山崎 特徴選択、特徴表現 3 10/21(月) 山崎 機械学習概論、教師なし学習、クラスタリング 4 10/28(月) 山崎 機械学習 (NN, SVM, RF) 5 11/7(木) 山崎 深層学習 (Deep Neural Networks) 6 11/11(月) 山崎 動画像処理 (ブロックマッチング、背景差分、オプティカルフロー) 7 11/13(水) 山崎 3次元空間情報の取得と処理 8 11/18(月) 相澤 9 11/25(月) 相澤 10 12/9(月) 相澤 11 12/16(月) 相澤 12 12/23(月) 相澤 13 1/@@ テスト パターン認識一般 現在は、90%位が 学習ベース(data-driven) 。残りが解析的手法。最近はこのhybridも。 全体的な流れ 学習(training) 検証(validation)←パラメータ最適化 推論(test, inference) なぜ今 学習ベース なのか？ データの大規模化：インターネット上から大量に収集可。 計算機の進化：ムーアの法則による高速化。さらにはクラウド 労働力のクラウド化 画像特徴 低次特徴量 色ヒストグラム（RGB,HSV,L*a*b*）：単純計算すると \\(256&#94;3\\) 個binができるので、注意。 色共起ヒストグラム（Correlogram）：隣接ピクセルの色を踏まえたヒストグラム 円、コーナー直線の数・大きさ・長さ 物体の円度、曲率等 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-1.html"},{"title":"matplotlibチートシート","text":"In [1]: import numpy as np import matplotlib.pyplot as plt $N$ 枚の画像を plot Vsize , Hsize = () # 画像の横の長さと縦の長さ。 n_fig = \"画像の枚数\" n_col = \"横に並ぶ数\" n_row = n_fig // n_col + 1 if n_fig % n_col != 0 else n_fig // n_col # 行数を計算。 fig = plt . figure ( figsize = ( Vsize * n_col , Hsize * n_row )) for i , hoge in enumerate ( HOGEs ): ax = fig . add_subplot ( row , col , i + 1 ) \"\"\" 描きたいオブジェクトをプロット \"\"\" plt . tight_layout () plt . show () gifの画像の作成 上のようにやって全ての画像をまとめた一枚の画像を出力しても良いが、 n_fig = \"画像の枚数\" digit = len ( str ( N )) for i , hoge in enumerate ( HOGEs ): ax = fig . add_subplot ( row , col , i + 1 ) plt . figure ( figsize = \"サイズ\" ) \"\"\" 描きたいオブジェクトをプロット \"\"\" plt . savefig ( f \"img{i:>0{digit}}.png\" ) として連番の画像を作成し、それを以下のプログラムでgif画像にした方が見やすい場合もある from PIL import Image N = 30 digit = len ( str ( N )) images = [] for i in range ( N ): img = Image . open ( f \"{i:>0{digit}}.png\" ) images . append ( img ) images [ 0 ] . save ( 'out.gif' , save_all = True , append_images = images [ 1 :], loop = 0 , duration = 300 ) # loop=0: 無限ループ # duration: 一枚あたりの表示時間[ms] cmaps In [2]: cmaps = [ 'Accent' , 'Blues' , 'BrBG' , 'BuGn' , 'BuPu' , 'CMRmap' , 'Dark2' , 'GnBu' , 'Greens' , 'Greys' , 'OrRd' , 'Oranges' , 'PRGn' , 'Paired' , 'Pastel1' , 'Pastel2' , 'PiYG' , 'PuBu' , 'PuBuGn' , 'PuOr' , 'PuRd' , 'Purples' , 'RdBu' , 'RdGy' , 'RdPu' , 'RdYlBu' , 'RdYlGn' , 'Reds' , 'Set1' , 'Set2' , 'Set3' , 'Spectral' , 'Wistia' , 'YlGn' , 'YlGnBu' , 'YlOrBr' , 'YlOrRd' , 'afmhot' , 'autumn' , 'binary' , 'bone' , 'brg' , 'bwr' , 'cividis' , 'cool' , 'coolwarm' , 'copper' , 'cubehelix' , 'flag' , 'gist_earth' , 'gist_gray' , 'gist_heat' , 'gist_ncar' , 'gist_rainbow' , 'gist_stern' , 'gist_yarg' , 'gnuplot' , 'gnuplot2' , 'gray' , 'hot' , 'hsv' , 'inferno' , 'jet' , 'magma' , 'nipy_spectral' , 'ocean' , 'pink' , 'plasma' , 'prism' , 'rainbow' , 'seismic' , 'spring' , 'summer' , 'tab10' , 'tab20' , 'tab20b' , 'tab20c' , 'terrain' , 'viridis' , 'winter' ] In [3]: matrix = np . arange ( 100 ) . reshape ( 10 , 10 ) In [4]: Vsize , Hsize = ( 4 , 4 ) n_fig = len ( cmaps ) n_col = 4 n_row = n_fig // n_col + 1 if n_fig % n_col != 0 else n_fig//n_col In [5]: fig = plt . figure ( figsize = ( Vsize * n_col , Hsize * n_row )) for i , cmap in enumerate ( cmaps ): ax = fig . add_subplot ( n_row , n_col , i + 1 ) ax . matshow ( matrix , cmap = cmap ) ax . set_title ( f \"↓ {cmap} ↓\" , fontsize = 24 ), ax . set_xticks ([]), ax . set_yticks ([]) plt . tight_layout () plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"映像メディア工学","url":"https://iwasakishuto.github.io/University/3A/映像メディア工学-0.html","loc":"https://iwasakishuto.github.io/University/3A/映像メディア工学-0.html"},{"title":"生物物理学 第1回","text":"講師： 能瀬聡直 講義資料： 生物物理学 参考書： 神経科学 -脳の探求- 参考書： ニューロンの生物物理 講義概要 生物物理学とは 遺伝情報の流れ 蛋白質の構造と機能 細胞内タンパク質のダイナミックス 遺伝子操作技術 ゲノム科学とバイオインフォマティックス バイオイメージング、生体分子計測 脳・神経系の生物物理 講義日程 # 日付 担当 1 9/25 能瀬 2 10/2 樋口 3 10/9 樋口 4 10/16 樋口 5 10/23 樋口 6 10/30 樋口 7 11/6 樋口 8 11/20 能瀬 9 11/27 能瀬 10 12/4 樋口 11 12/11 能瀬 12 12/18 能瀬 13 1/8 能瀬 14 1/15 能瀬 生物物理学とは？ 物理の手法で生物を見る。 生体分子の機能や構造の研究。 対象は広範囲、ただし物理的理念を背景にもつ。 生体高分子の構造・機能、脳・神経機構など単なる記述中心の従来の生物学と異なり、論理的な思考法を用い、より普遍的な原理を見いだすことを目指している。 生物物理の代表的発見 DNA二重螺旋構造の発見（1953年、1962年ノーベル生理医学賞） 蛋白質の高次構造の解析（1960年、1962年ノーベル化学賞） 神経活動のイオン機構の解明（1953年、1963年ノーベル生理医学賞） 最近の技術革新 ヒトゲノム計画 ヒトの全遺伝子の設計図解読の終了（2000年） イメージング技術 蛍光蛋白質・レーザー顕微鏡（1990年代） 1分子観測・1分子操作 溶液中での蛋白質1分子の観察（1990年代） 神経回路の作動原理の解明に向けた従来の3つのアプローチ 解剖学(Anatomy) 神経の配線を明らかにする。 生理学(Physiology) 神経活動を測定・操作する。 理論 神経活動パターンから原理を抽出 Part1. Introduction 脳神経系における情報の流れ ニューロンの構成 脳とコンピューター 半導体 ↔︎ 半導体素子 ↔︎ 集積回路 ↔︎ コンピューター 分子 ↔︎ 神経細胞 グリア細胞 ↔︎ 神経回路 ↔︎ 脳 活動電位の特徴 全か無か： \\(\\mathrm{Na}\\) チャネル活性化に閾値がある。 一過性： \\(\\mathrm{Na}\\) チャネル不活性化 確実に伝播 一体、どのような構造を持った神経回路の中を、どのように信号が伝わることで特定の演算が創発されるのか。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物物理学","url":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物物理学-1.html"},{"title":"HMMをpythonで実装","text":"（kerasy.ML.HMM.HMM） の使い方 自作のモジュール （kerasy.ML.HMM.HMM） を使って実装をします。 In [1]: from kerasy.ML.HMM import HMM In [2]: model = HMM () In [3]: # 以下のようなパラメタファイルを読み込む。 ! cat params.json { \"M\": 4, \"K\": 4, \"basetypes\": [\"a\", \"c\", \"g\", \"u\"], \"pi\": [0.7, 0.1, 0.1, 0.1], \"A\": [[0.8, 0.1, 0.1, 0.0], [0.0, 0.8, 0.1, 0.1], [0.1, 0.0, 0.8, 0.1], [0.1, 0.0, 0.1, 0.8]], \"phi\": [[0.4, 0.1, 0.1, 0.4], [0.25, 0.25, 0.25, 0.25], [0.1, 0.4, 0.4, 0.1], [0.3, 0.2, 0.2, 0.3]] } In [4]: model . load_params ( \"params.json\" ) In [5]: # インスタンスに読み込まれた各種パラメータ model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 In [6]: # なお、この時以下のような辞書を同時に作成しています。 print ( model . base2int ) print ( model . int2base ) {'a': 0, 'c': 1, 'g': 2, 'u': 3} {0: 'a', 1: 'c', 2: 'g', 3: 'u'} In [7]: # また、パラメータはnumpyの行列の形で読み込まれています。 print ( type ( model . pi )) print ( type ( model . A )) print ( type ( model . phi )) In [8]: # 以下のようにすれば、学習したパラメタを同じ形式で出力することができます。 model . save_params ( \"out.json\" ) Viterbi algorithm HMMのViterbiアルゴリズムを実装して、尤もらしいサンプル配列の隠れ状態列を推定します。 In [9]: from kerasy.utils.bio import alignStr , readMonoSeq , readMultiSeq # ファイルの中身 cat seq1.fasta ``` sample-RNA gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc ``` In [10]: # ファイルの読み込み seq1 = readMonoSeq ( 'seq1.fasta' ) print ( f \"Input Sequence: \\n {alignStr(seq1[0])}\" ) Input Sequence: gagaguccuauacaaacuccaaaacacugagaccauacaaguaaaaccagucgagaaaau agucaacagcacccccguugcguauccugcggagaaugccucgcuaucuguccucacgau uggucuaaccgcucggcucaggcgugugggccugaaauccgggcagcaaacuacgguaag uuuucgcguaucaaaaauacauugaugaauguucgcuauuagccgggucgacguuuugau ggugacuaggagcgaaagugauuuuuuugugagcggugucauagcaggggaucaucugag gugaacuauggacgggucagucgcccucauuggguuuguuacucagauacgugacacacg uaaggucgcacggcaguagugauccacgagaaucggcacucuuacgagcaagucuauagc gacguggcuugcuauuaagacaguaauggacucggacagcuaguacgcgacuaaucauuu ucgcacgccaucacacuuucaacccaggagcuuacaguguuccaggggccaggcuugggg cagccucuguggaagugcgagggcugcgcuaguguacauuagccgacccucagacgugaa auaaagagaugcugcugguugcacagugagcaacguucacucggcaacccgucggauacc In [11]: # この時、文字列をリストに格納しています。 print ( type ( seq1 )) In [12]: pred1 = model . predict ( sequences = seq1 , asai = True ) In [13]: # 変数asaiは、隠れ状態がZero-based numberingかどうかを決めるものであり、特に意味はありません。（課題の形式に対応したものがasai=True.） print ( f \"Hidden Indexes: \\n {alignStr(pred1[0])}\" ) Hidden Indexesn [14]: # もちろんパラメタの更新は行われていません。 model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) a 0.4000 0.2500 0.1000 0.3000 c 0.1000 0.2500 0.4000 0.2000 g 0.1000 0.2500 0.4000 0.2000 u 0.4000 0.2500 0.1000 0.3000 Baum-Welch algorithm HMMのBaum-Welchアルゴリズムを実装して、モデルを学習させてます。 In [15]: model = HMM () model . load_params ( \"params2.json\" ) model . params () # 文字が \"acgu\"→\"ACGT\"に変わっただけです。 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.7000 0.1000 0.1000 0.1000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.8000 0.1000 0.1000 0.0000 z(2) 0.0000 0.8000 0.1000 0.1000 z(3) 0.1000 0.0000 0.8000 0.1000 z(4) 0.1000 0.0000 0.1000 0.8000 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.4000 0.2500 0.1000 0.3000 C 0.1000 0.2500 0.4000 0.2000 G 0.1000 0.2500 0.4000 0.2000 T 0.4000 0.2500 0.1000 0.3000 cat seq2.txt ``` >Vitis_vinifera_chr14.trna15-AlaAGC (28776087-28776159) Ala (AGC) 73 bp Sc: 68.12 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAGGTACGGGGATCGATA CCCCGCATCTCCA >Vitis_vinifera_chr13.trna5-ArgCCG (2691241-2691313) Arg (CCG) 73 bp Sc: 83.85 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAGGTCGTGGGTTCGAAT CCCACTGCGATCG >Vitis_vinifera_chr3.trna6-GlnCTG (5807449-5807520) Gln (CTG) 72 bp Sc: 71.93 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTAACCCGAGTTCAAATC TCGGTGGGACCT >Vitis_vinifera_chr14.trna19-LeuAAG (25640120-25640040) Leu (AAG) 81 bp Sc: 62.71 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTGTCCGAAAGGGCGTGG GTTCAAATCCCACTCTCCACA >Vitis_vinifera_chr18.trna9-MetCAT (2896034-2896118) Met (CAT) 85 bp Sc: 60.66 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCGAGTAATCCTGAGGTC GAGAGTTCGAGCCTCTCTCACCCCA >Vitis_vinifera_chr3.trna30-ProTGG (7498415-7498344) Pro (TGG) 72 bp Sc: 68.98 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGGTCCCGAGTTCGATTC TCGGAATGACCC >Vitis_vinifera_chr5.trna13-GluTTC (21745120-21745048) Glu (TTC) 73 bp Sc: 36.67 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTGGTCGTGGGTTCGAGC CCTATTGGTGGTT >Vitis_vinifera_chr5.trna3-TyrGTA (7422575-7422666) Tyr (GTA) 92 bp Sc: 33.68 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTGACCCAATAGATATCC TTAGGTCGTTAGTTTGAATCCAACAGGTCTAA >Vitis_vinifera_chr1.trna8-ValCAC (11396083-11396156) Val (CAC) 74 bp Sc: 66.86 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGAGGTCCCTAGTTCGAA CCCAGGCTCAGATA >Vitis_vinifera_chr14.trna2-SerTGA (4021381-4021462) Ser (TGA) 82 bp Sc: 80.82 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTGGGCTTCGCCCGCGCA GGTTCGAACCCTGCTGTCGACG ``` In [16]: seq2 = readMultiSeq ( 'seq2.txt' ) In [17]: for i , seq in enumerate ( seq2 ): print ( f \"No. {i:>02} \\n {alignStr(seq, width=45)}\" ) No.00 GGGGATGTAGCTCAGATGGTAGAGCGCTCGCTTAGCATGCGAGAG GTACGGGGATCGATACCCCGCATCTCCA No.01 GATCGCATAGCGGAGTGGATATCGCGTTAGACTCCGAATCTAAAG GTCGTGGGTTCGAATCCCACTGCGATCG No.02 GGTCCCATGGTCTAGTGGTCAGGACATTGGACTCTGAATCCAGTA ACCCGAGTTCAAATCTCGGTGGGACCT No.03 GTGGAGATGGCCGAGTTGGTCTAAGGCGCCAGATTAAGGTTCTTG TCCGAAAGGGCGTGGGTTCAAATCCCACTCTCCACA No.04 GGGGTGGTGGCGCAGTTGGCTAGCGCGTAGGTCTCATAGCTTCCG AGTAATCCTGAGGTCGAGAGTTCGAGCCTCTCTCACCCCA No.05 GGGCATTTGGTCTAGTGGTATGATTCTCGCTTTGGGTGCGAGAGG TCCCGAGTTCGATTCTCGGAATGACCC No.06 AGTCCCATAGCCTAGTTGGTCGAGCACAAGGTTTTCAATCTTGTG GTCGTGGGTTCGAGCCCTATTGGTGGTT No.07 CCGATCTTAACTCAATTGGTAGAGCAGAGGACCGTAGTGGGGTTG ACCCAATAGATATCCTTAGGTCGTTAGTTTGAATCCAACAGGTCT AA No.08 GTCTAGGTGGTATAGTTGGTTATCACGCTAGTCTCACACACTAGA GGTCCCTAGTTCGAACCCAGGCTCAGATA No.09 GTCGATATGTCCGAGTGGTTAAGGAGACAGACTTGAAATCTGTTG GGCTTCGCCCGCGCAGGTTCGAACCCTGCTGTCGACG In [18]: # 学習させる。 model . fit ( sequences = seq2 , epochs = 2000 , verbose = False ) In [19]: import matplotlib.pyplot as plt In [20]: def plotHistory ( model ): \"\"\" 学習の過程をプロットする関数 \"\"\" plt . plot ( model . history ) plt . title ( f \"Mean Log Likelihood Transition (eoochs= {model.epoch} )\" ) plt . xlabel ( \"epochs\" ) plt . ylabel ( \"Mean Log Likelihood\" ) plt . show () In [21]: plotHistory ( model ) In [22]: model . params () 【Parameter】 ===================================== *initial state z(1) z(2) z(3) z(4) 0.1024 0.0000 0.8976 0.0000 ------------------------------------- *transition probability matrix [States after transition] z(1) z(2) z(3) z(4) z(1) 0.2819 0.7181 0.0000 0.0000 z(2) 0.0000 0.5670 0.0000 0.4330 z(3) 0.0521 0.0000 0.3415 0.6064 z(4) 0.5158 0.0000 0.0000 0.4842 ------------------------------------- *emission probability z(1) z(2) z(3) z(4) A 0.3436 0.3099 0.1059 0.0055 C 0.2538 0.0592 0.0970 0.4297 G 0.4026 0.4418 0.7971 0.0345 T 0.0000 0.1891 0.0000 0.5304 ※ 隠れ状態ごとにかなり偏った遷移を行なう。 また、 遷移行列の対角成分がそこまで大きい値では無い。 → 特定の構造が、 ある程度の長さのゆとりを持って 繰り返されていると予想される。 In [23]: pred2 = model . predict ( sequences = seq2 , asai = True ) In [24]: for i , pred in enumerate ( pred2 ): print ( f \"No. {i:>02} Hidden Indexes: \\n {alignStr(pred, width=45)}\" ) No.00 Hidden Indexes: 333334122244412241241222224412444124122412222 2411222224412224441241244441 No.01 Hidden Indexes: 334411241241222412241241124412244441224441222 2412412244412244412441122441 No.02 Hidden Indexes: 334441241244412412441222412412244441224441241 244412244412244441241222444 No.03 Hidden Indexes: 341222241244122441244412222244122441222444441 244122222241222244412244412444441241 No.04 Hidden Indexes: 333341241241122441244124112412244412412444441 2241244441222441222244412244444441244441 No.05 Hidden Indexes: 333412441244412412412224444124444122224122222 444412244412444441222412444 No.06 Hidden Indexes: 334441241244412441244122411222244444124444122 2412412244412244441241241244 No.07 Hidden Indexes: 341244441244412441241222412222241241241222441 244412412241244441224124412444122444124122444 12 No.08 Hidden Indexes: 344412241241222441244124112441244412411244122 22444441244412244412244412241 No.09 Hidden Indexes: 344124122444122412441222222412244412224441241 2244412444112412244412244441122441241 補足：上記プログラムにバグがないかの確認 Baum-Welchアルゴリズムが正しく実装できていたか、極端な配列を学習させることで確認します。 In [25]: model = HMM () model . load_params ( \"params3.json\" ) model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 0.7000 0.1000 0.2000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.8000 0.1000 0.1000 z(2) 0.1000 0.8000 0.1000 z(3) 0.1000 0.1000 0.1000 ------------------------------ *emission probability z(1) z(2) z(3) A 0.4000 0.2500 0.1000 C 0.1000 0.2500 0.4000 G 0.1000 0.2500 0.4000 T 0.4000 0.2500 0.1000 In [26]: seq_extreme = readMonoSeq ( 'seq3.txt' ) In [27]: # かなり極端な配列の例で実装してみる。 print ( f \"Input Sequence: \\n {alignStr(seq_extreme[0])}\" ) Input Sequence: TCTTTTTCCTCCTCTCTCCTTTCCCTCTTTTCCCTTCTTCTCTCCCTTTTCCTTCTCTTC TCTCTTTTCTTCCCCTTTTCCTTTTCTCCTCCCTCCCTTTCTTCCCTCCTTCCTCCCCCC CTCCCCTTTCCTTCCTTTCTCCTTCTCCCCATATGGCCATTTACTTCAGCTGATAGACAC CGAGTAACAACAATAAAGCGTTAGGTGGACGAATGCTCTACTCTGACCTCTAGCTTGTGG GTTCGCGGCTTGCCGAACGCTGGCCTCTGCCCGTCGAACCAATAAATGTTTATCCAGGAC ACCCCGTTCTTTGGTGATATCCCTCGCTCGAGTTATAGCATTGAAACCTCCATATCCGGC GATAAGAGCTACGGACCGTATACTGGGCGCCGGTAATTGGTTGCACTCGCCCTCGGTCTT TTTCTTTTTGGTTTAGCAGAGCAAGGCGTGGAAAAGGAGAGAGGGAGAAAAGGGAAAGGG AAAAGAGGAGAAGAAAGAAAAAGGAAGGGGGGAAGAGGAGAGAAGGGAAGGGAAGGGGGA GAAAGAGGGAAAGAGGAGAAAAAAGGAGGGGGAAGAAGGAAGGGGGAAAGGGGGGGAAAG 上の配列は、以下の構造を持っていることがわかります。 index type 1~150 pyrimidine base 151~450 both 451~600 purine base In [28]: model . fit ( sequences = seq_extreme , epochs = 100 , verbose = False ) In [29]: plotHistory ( model ) In [30]: model . params () 【Parameter】 ============================== *initial state z(1) z(2) z(3) 1.0000 0.0000 0.0000 ------------------------------ *transition probability matrix [States after transition] z(1) z(2) z(3) z(1) 0.9933 0.0000 0.0067 z(2) 0.0000 1.0000 0.0000 z(3) 0.0000 0.0033 0.9967 ------------------------------ *emission probability z(1) z(2) z(3) A 0.0000 0.4851 0.2199 C 0.5034 0.0000 0.2627 G 0.0000 0.5149 0.2415 T 0.4966 0.0000 0.2760 In [31]: pred_extreme = model . predict ( sequences = seq_extreme ) In [32]: print ( f \"Hidden Indexes: \\n {alignStr(pred_extreme[0])}\" ) Hidden Indexesうまく傾向をつかんでいることから、学習アルゴリズムに大きな誤りはなさそうです。 In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-4.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-4.html"},{"title":"生物統計論 第1回","text":"講師： 木立尚孝 講義概要 09/27 (Fri) 10:25-12:10 10/04 (Fri) 10:25-12:10 10/11 (Fri) 10:25-12:10 10/18 (Fri) 10:25-12:10 10/25 (Fri) 10:25-12:10 11/08 (Fri) 10:25-12:10 11/15 (Fri) 10:25-11:30(Lecture) / 11:30-12:10: (Test) Section1.1 STATISTICAL ANALYSIS Genomic data has recently become available, so the analyzing methods still its infancy at the century scale. It is very important how much information can be extracted from genomic and other omic data. Data-driven Research Development of measurement, communication, computing technologies. data science, e-science Statistics, computer skill, artificial intelligence, machine learning. Statistical Analysis Subjects and measurements are often conclude the random events , such as noise. Aiming for finding the \"True\" distribution, and inferencing on that distribution. Power of Statistical Methods Amount of information we can extract \"Many and high\" / \"Few or low\" quality Event infinite number of data cannot answer all questions. ex) we couldn't answer \"what is the number of eyes on the next dice.\" Data dependency. Section1.2 PROBABILITY DEFINITIONS Probability: Mathematical Probability: The probability of an event consisting of n out of m possible equally likely occurrences, defined to be n / m Statistical Probability: Each event is random, but if you repeat it a lot, you can see the probability that each event occurs. Subjective Probability: A type of probability derived from an individual's personal judgment or own experience about whether a specific outcome is likely to occur. ※ Mathematical Probability is the most strict and basic. Probability space \\(\\left(\\Omega, E, P\\right)\\) $$\\begin{aligned}&\\Omega: \\text{Set, Samplemspace}\\\\&E: \\text{Events,}\\sigma\\text{-algebra}\\\\&P: \\text{Probability measure}\\end{aligned}$$ Sample Space The sets of elementary events. ex.) The number of eyes on the dice. All possible genomes. All possible gene expression profiles \\(\\omega_i\\in\\Omega\\) is the identifier of possible individual stochastic phenomena. \\(\\sigma\\) -algebra $$ \\begin{aligned} &\\varepsilon= \\left\\{E_1,E_2,\\cdots|E_i\\subseteq\\Omega:\\text{event}:\\sigma\\text{-algebra} \\right\\}\\\\ &\\Rightarrow \\varnothing,\\Omega,\\left(E_i\\setminus E_j\\right),\\left(\\bigcup_{i=1}&#94;{\\infty}E_i\\right),\\left(\\bigcap_{i=1}&#94;{\\infty}E_i\\right)\\in\\varepsilon \\end{aligned} $$ The sets of Events. Each event \\(E_i\\subseteq\\Omega\\) Include Empty set \\(\\varnothing\\) , universal set \\(\\Omega\\) Closure to variable \"Set Operation\". (ex. Union, intersection, complement) example) discrete set Real set Power set Borel set \\(\\mathcal{A}\\) Probability measure $$\\begin{aligned}&\\mathbb{P} : \\mathcal{E} \\rightarrow \\mathbb{R} \\\\& 0 \\leq \\mathbb{P}(E) \\leq 1, E \\in \\mathcal{E} \\\\&\\mathbb{P}(\\Omega)=1, \\mathbb{P}(\\varnothing)=0 \\\\&\\text { For } E_{1}, E_{2}, \\cdots \\in \\mathcal{E}, \\text{ s.t. } E_{i} \\cap E_{j}=\\varnothing, \\forall i \\neq j \\\\&\\mathbb{P}\\left(\\bigcup_{i=1}&#94;{\\infty} E_{i}\\right)=\\sum_{i=1}&#94;{\\infty} \\mathbb{P}\\left(E_{i}\\right)\\end{aligned}$$ Each event is assigned a value that indicates the likelihood or probability of occurrence. Random variable $$\\begin{aligned}X: &\\text{random variable}\\\\\\Leftrightarrow &X : \\Omega \\rightarrow \\mathbb{R} \\\\ &\\text { s.t. } X&#94;{-1}(A) \\in \\mathcal{E}, \\forall A \\in \\mathcal{A} \\\\&X&#94;{-1}(A) :=\\{\\omega \\in \\Omega \\mid X(\\omega) \\in A\\}\\end{aligned}$$ Section1.3 PROBABILITY TERMS AND PROPERTIES Probability distribution function \\(F_x\\) (cumulative distribution) Probability density function \\(f_x\\) $$F_x\\left(x+dx\\right)-F_x\\left(x\\right)=:f_x(x)dx$$ Conditional Probability Joint Probability distribution $$(X,Y): \\Omega\\rightarrow\\mathbb{R}&#94;2; (X,Y)(\\omega) = \\left(X(\\omega),Y(\\omega)\\right)\\\\\\left(X,Y\\right)&#94;{-1}(A) = \\left\\{\\omega\\in\\Omega|\\left(X(\\omega),Y(\\omega)\\right)\\in A\\right\\}$$ Independent random variables Expected Value Variance Covariance: $$\\begin{cases}X,Y: \\text{independent random variables}\\Rightarrow \\mathrm{Cov}(X,Y) = 0\\\\X,Y: \\text{independent random variables}\\not\\Leftarrow \\mathrm{Cov}(X,Y) = 0 \\end{cases}$$ Indicator Function: $$\\mathbb{I}_A(x)=\\begin{cases}1 & x\\in A\\\\0 & x\\notin A\\end{cases},A\\in\\mathcal{A}$$ Marginalization Section1.4 PROBABILITY DISTRIBUTIONS Look Here!! if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-1.html"},{"title":"生物統計論 第0回","text":"Section1.4 PROBABILITY DISTRIBUTIONS In [1]: import numpy as np import collections import matplotlib.pyplot as plt In [2]: N = 100000 Bernoulli Distribution In [3]: def BernoulliVar ( q , N , seed = None ): rng = np . random . RandomState ( seed ) if seed is not None else np . random return np . var ( rng . rand ( N ) < q ) In [4]: qs = np . linspace ( 0 , 1 , 1000 ) In [5]: probs = [ BernoulliVar ( q , N ) for q in qs ] In [6]: plt . title ( \"Bernoulli distribution\" ) plt . plot ( qs , probs , label = \"$Var(X)$\" ) plt . xlabel ( \"q\" ) plt . ylabel ( \"$Var(X)$\" ) plt . legend () plt . show () Binomial Distribution In [7]: def BinomialProb ( n , p , N , seed = None , color = None , ax = None ): if ax == None : fig , ax = plt . subplots () rng = np . random . RandomState ( seed ) if seed is not None else np . random counter = collections . Counter ( rng . binomial ( n , p , N )) count , freqs = zip ( * sorted ( counter . most_common ())) probs = [ freq / N for freq in freqs ] ax . plot ( count , probs , color = color , label = f \"p= {p} and n= {n} \" ) ax . scatter ( count , probs , color = color ) return ax In [8]: ax = BinomialProb ( 20 , 0.5 , N , seed = 0 , color = \"blue\" ) ax = BinomialProb ( 20 , 0.7 , N , seed = 0 , color = \"green\" , ax = ax ) ax = BinomialProb ( 40 , 0.5 , N , seed = 0 , color = \"red\" , ax = ax ) plt . legend () plt . show () Normal Distribution In [9]: from scipy import stats In [10]: def NormalProb ( mu , sigma ): X = np . arange ( mu - 3.5 * sigma , mu + 3.5 * sigma , sigma / 50 ) Y = stats . norm . pdf ( X , mu , sigma ) for i in np . arange ( - 3 , 4 , 1 ): idx = np . argmin ( abs ( X - ( mu + i * sigma ))) plt . plot ([ X [ idx ], X [ idx ]], [ 0 , Y [ idx ]], 'k-' ) plt . scatter ( X [ idx ], Y [ idx ], color = \"black\" ) plt . plot ( X , Y , color = \"black\" ) In [11]: NormalProb ( mu = 0 , sigma = 0.1 ) Multivariate Normal Distribution In [12]: from scipy.stats import multivariate_normal In [13]: x , y = np . mgrid [ - 3 : 3.5 : . 01 , - 3 : 3 : . 01 ] pos = np . dstack (( x , y )) rv = multivariate_normal ([ 0.5 , - 0.2 ], [[ 2.0 , 2.3 ], [ 0.3 , 0.8 ]]) plt . contourf ( x , y , rv . pdf ( pos )) plt . show () In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"生物統計論","url":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html","loc":"https://iwasakishuto.github.io/University/3A/生物統計論-0.html"},{"title":"HMMのスケーリング","text":"HMMを実装する際に課題となるのが、forward-algorithm で \\(\\alpha\\) を再帰的に求める際に、 \\(\\alpha\\left(\\mathbf{z}_{n-1}\\right)\\) に \\(p(\\mathbf{z}_n|\\mathbf{z}_{n-1})\\) と \\(p(\\mathbf{x}_n|\\mathbf{z}_n)\\) をかけるため、値が非常に小さくなり、計算機の ダイナミックレンジ を超えてしまうことです。 そこで、ここでは \\(\\alpha\\left(\\mathbf{z}_{n}\\right)\\) と \\(\\beta\\left(\\mathbf{z}_{n}\\right)\\) にスケーリングを施し、それらの値が \\(1\\) のオーダーに止まるようにする手法を説明します。 forward-backward \\(\\alpha,\\beta\\) forward-backward algorithm で用いられていた \\(\\alpha,\\beta\\) は以下のように定義されていました。 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ Scaling factors まず、スケーリングされた \\(\\alpha,\\beta\\) は以下のように表されます。スケーリングによって、 \\(\\alpha\\) は高々 \\(K\\) 個の変数上の確率分布 、 \\(\\beta\\) は2つの条件付き確率の比 になることがわかります。 $$ \\begin{aligned} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.55)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\frac{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)}=\\frac{\\beta\\left(\\mathbf{z}_{n}\\right)}{p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} & (13.61) \\end{aligned} $$ ここで、これらと \\(\\alpha,\\beta\\) を関連付けるためのスケーリング係数 \\(c\\) を導入します。 $$ c_{n}=p\\left(\\mathbf{x}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}\\right)\\qquad (13.56) $$ すると、 $$ \\begin{aligned} p\\left(\\mathbf{x}_1,\\ldots,\\mathbf{x}_n\\right) &= p\\left(\\mathbf{x}_n | \\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\cdots p\\left(\\mathbf{x}_3 | \\mathbf{x}_1,\\mathbf{x}_{2}\\right)p\\left(\\mathbf{x}_2 | \\mathbf{x}_1\\right)p(\\mathbf{x}_1)\\\\ &= c_n\\cdots c_3c_2c_1\\\\ &= \\prod_{m=1}&#94;{n} c_{m} \\end{aligned}\\qquad (13.58) $$ と展開することができるので、 $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)=\\left(\\prod_{m=1}&#94;{n} c_{m}\\right) \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) & (13.58)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right)&=p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)\\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) = \\left(\\prod_{m=n+1}&#94;{N} c_{m}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.60) \\end{aligned} $$ と対応関係がわかります。 \\(\\gamma,\\xi\\) 続いて、 \\(\\gamma,\\xi\\) と \\(\\widehat{\\alpha},\\widehat{\\beta}\\) の対応関係を求めます。 \\(\\alpha,\\beta\\) \\(\\alpha,\\beta\\) を用いると、以下のように表されていました。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} &(13.43) \\end{aligned}$$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) 先の対応関係を用いれば、 \\(\\widehat{\\alpha},\\widehat{\\beta}\\) を用いると、 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=\\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.64)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=\\left(c_{n}\\right)&#94;{-1} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) & (13.65) \\end{aligned} $$ と表されることがわかります。 Recursion 最後に、再帰式の対応関係も求めます。 \\(\\alpha,\\beta\\) $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ \\(\\widehat{\\alpha},\\widehat{\\beta}\\) $$ \\begin{aligned} c_{n} \\widehat{\\alpha}\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.58)\\\\ \\widehat{\\alpha}\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{z}_{1}| \\mathbf{x}_{1}\\right)=\\frac{p\\left(\\mathbf{z}_{1}\\right)p\\left(\\mathbf{x}_{1}| \\mathbf{z}_{1}\\right)}{p\\left(\\mathbf{x}_{1}\\right)} = \\frac{\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}}}{p\\left(\\mathbf{x}_{1}\\right)}\\\\ c_{n+1} \\widehat{\\beta}\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\widehat{\\beta}\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) &(13.62)\\\\ \\widehat{\\beta}\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)}{\\widehat{\\alpha}\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)}{p\\left(\\mathbf{z}_{n} | \\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}\\right)} = 1 & (13.30) \\end{aligned} $$ なお、ここで \\((13.58)\\) でどのようにして \\(c_n\\) を求めるかですが、 $$ \\begin{aligned} \\mathrm{R.H.S}\\ (13.58) &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\widehat{\\alpha}\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}}p\\left(\\mathbf{z}_{n-1}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right)\\\\ &= p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right)\\\\ &=p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) \\end{aligned} $$ となることから、 \\((13.58)\\) の右辺を \\(\\mathbf{z}_n\\) について周辺化すれば、 $$\\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{x}_{n},\\mathbf{z}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = p\\left(\\mathbf{x}_{n}|\\mathbf{x}_1,\\ldots,\\mathbf{x}_{n-1}\\right) = c_n$$ となるので、 \\(c_n\\) が求められることがわかります。 おまけ（尤度関数） 尤度関数はスケーリング係数 \\(c\\) を用いるだけで簡単に求められることがわかります。 $$p(\\mathbf{X})=\\prod_{n=1}&#94;{N} c_{n}\\qquad (13.63)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-3.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-3.html"},{"title":"HMMの最尤推定の計算過程","text":"ここでは、 HMMの最尤推定 で省略した計算過程について記述します。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) $$ \\begin{aligned} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})&=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10)\\\\ &=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\left[ \\prod_{n=2}&#94;{N}\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}} \\right] \\prod_{m=1}&#94;{N}\\prod_{i=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{i k}&#94;{x_{ni} z_{nk}}\\\\ \\therefore\\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta}) &=\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k\\left[\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk}\\right]\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;Kx_{ni}z_{nk}\\ln\\phi_{ik} \\end{aligned} $$ であるから、これを \\((13.12)\\) に代入して、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=&\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12)\\\\ =& \\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{k=1}&#94;Kz_{1k}\\ln\\pi_k+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;Kz_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;Kx_{ni}z_{nk}\\ln\\phi_{ik} \\end{aligned} $$ ここで、 \\(\\sum_{\\mathbf{Z}} = \\sum_{\\mathbf{z_1},\\mathbf{z_2},\\ldots,\\mathbf{z_N}}\\) なので、それぞれ 関係の無い部分を周辺化 でき、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\sum_{\\mathbf{z_1}} p\\left(\\mathbf{z_1} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{1k}\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\sum_{\\mathbf{z_{n-1},z_n}}p\\left(\\mathbf{z_{n-1},z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)z_{n-1,j}z_{nk}\\ln A_{jk}\\\\ &+\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;K\\sum_{\\mathbf{z_n}}p\\left(\\mathbf{z_n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)x_{ni}z_{nk}\\ln\\phi_{ik}\\\\ \\end{aligned}$$ となります。また、 \\(\\gamma,\\xi\\) の定義 を用いることで $$\\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=& \\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_1}} \\gamma\\left(\\mathbf{z}_1\\right)z_{1k}\\right)\\ln\\pi_k+\\sum_{n=2}&#94;N\\sum_{k=1}&#94;K\\sum_{j=1}&#94;K\\left(\\sum_{\\mathbf{z_{n-1},z_n}}\\xi\\left(\\mathbf{z_{n-1},z_{n}}\\right) z_{n-1,j}z_{nk}\\right)\\ln A_{jk}\\\\ &+\\sum_{m=1}&#94;N\\sum_{i=1}&#94;D\\sum_{k=1}&#94;K\\left(\\sum_{\\mathbf{z_n}}\\gamma\\left(\\mathbf{z}_n\\right)x_{ni}z_{nk}\\right)\\ln\\phi_{ik} \\end{aligned} $$ と書き直せます。この時、潜在変数が離散なので、 \\(\\gamma,\\xi\\) はそれぞれ和が \\(1\\) となる \\(K,\\left(K\\times K\\right)\\) 個の非負の数の集合を用いて以下のように記述できます。 $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ したがって、これらを用いて上記の式を書き直すと、 $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} \\end{aligned}\\qquad (13.17) $$ Maximization step ここでは、上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) 関数を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化する際の ラグランジュの未定乗数法 を書き下します。 \\(\\boldsymbol{\\pi}\\) $$ \\begin{aligned} L\\left(\\boldsymbol{\\pi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) &= \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k} + \\lambda_1\\left(\\sum_{k=1}&#94;K\\pi_k - 1\\right)\\\\ \\frac{\\partial L}{\\partial \\pi_k}&=\\frac{\\gamma\\left(z_{1 k}\\right)}{\\pi_k} + \\lambda_1 = 0\\quad \\therefore \\pi_k = -\\frac{\\gamma\\left(z_{1 k}\\right)}{\\lambda_1}\\\\ \\frac{\\partial L}{\\partial \\lambda_1}&=\\sum_{k=1}&#94;K\\pi_k - 1 = 0\\quad \\therefore\\lambda_1 = -\\sum_{k=1}&#94;K\\gamma\\left(z_{1 k}\\right)\\\\ \\therefore\\pi_k&#94;{\\star} &= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} \\end{aligned} $$ \\(\\boldsymbol{A}\\) $$\\begin{aligned} L\\left(\\boldsymbol{A},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} + \\sum_{j=1}&#94;K\\lambda_{2,j}\\left(\\sum_{k=1}&#94;K A_{jk} - 1\\right)\\\\ \\frac{\\partial L}{\\partial A_{jk}} &= \\sum_{n=2}&#94;{N}\\frac{\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{A_{jk}} + \\lambda_{2,j} = 0\\quad \\therefore A_{jk} = -\\frac{\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\lambda_{2,j}}\\\\ \\frac{\\partial L}{\\partial \\lambda_{2,j}} &= \\sum_{k=1}&#94;K A_{jk} - 1 = 0\\quad \\therefore \\lambda_{2,j} = -\\sum_{k=1}&#94;K\\sum_{n=2}&#94;N\\xi\\left(z_{n-1, j}, z_{n k}\\right)\\\\ \\therefore A_{jk}&#94;{\\star}&=\\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} \\end{aligned}$$ \\(\\boldsymbol{\\phi}\\) $$\\begin{aligned} L\\left(\\boldsymbol{\\phi},\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text { old }}\\right) & = \\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} + \\sum_{k=1}&#94;K\\lambda_{3,k}\\left( \\sum_{i=1}&#94;D\\phi_{ik} - 1\\right)\\\\ \\frac{\\partial L}{\\partial\\phi_{ik}} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\phi_{ik}} + \\lambda_{3,k}=0\\quad \\therefore \\phi_{ik} = -\\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\lambda_{3,k}}\\\\ \\frac{\\partial L}{\\partial\\lambda_{3,k}} &= \\sum_{i=1}&#94;D\\phi_{ik} - 1 = 0 \\quad \\therefore \\lambda_{3,k} = -\\sum_{i=1}&#94;D\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni} = -\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)\\\\ \\therefore \\phi_{ik}&#94;{\\star} &= \\frac{\\sum_{n=1}&#94;N\\gamma\\left(z_{n k}\\right)x_{ni}}{\\sum_{i=1}&#94;D\\gamma\\left(z_{n k}\\right)} \\end{aligned}$$ Expectation step $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14)\\\\ \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35)\\\\ \\end{aligned} $$ forward-algorithm \\((\\alpha)\\) $$\\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1}, \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\\\ & =p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha(\\mathbf{z}_{n-1})p(\\mathbf{z} | \\mathbf{z}_{n-1})\\\\ \\end{aligned}$$ backward-algorithm \\((\\beta)\\) $$\\begin{aligned} \\beta\\left(\\mathbf{z}_{n}\\right) & =p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N}, \\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{demarginalization})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}, \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} p\\left(\\mathbf{x}_{n+2}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) \\quad (\\because \\text{conditional independence})\\\\ & =\\sum_{\\mathbf{z}_{n+1}} \\beta(\\mathbf{z}_{n+1})p(\\mathbf{x}_{n+1}|\\mathbf{z}_{n+1})p(\\mathbf{z}_{n+1}|\\mathbf{z}_n)\\qquad (13.38) \\end{aligned}$$ \\(\\gamma,\\xi\\) $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$\\begin{aligned} \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}\\right) \\\\ &=\\frac{p(\\mathbf{X} | \\mathbf{z}_{n-1}, \\mathbf{z}_{n}) p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{Bayes' theorem})\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n-1} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n-1}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{x}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43) \\end{aligned}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-2.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-2.html"},{"title":"HMMの最尤推定","text":"※ かなり導出部分を省略しています。導出は適宜 HMMの最尤推定の計算過程 を参照してください。 隠れマルコフモデルは、一般に以下の式で表されます。 $$ p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})=p\\left(\\mathbf{z}_{1} | \\boldsymbol{\\pi}\\right)\\left[\\prod_{n=2}&#94;{N} p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}, \\mathbf{A}\\right)\\right] \\prod_{m=1}&#94;{N} p\\left(\\mathbf{x}_{m} | \\mathbf{z}_{m}, \\boldsymbol{\\phi}\\right)\\qquad (13.10) $$ \\(\\mathbf{X} = \\{\\mathbf{x}_1,\\ldots,\\mathbf{x}_N\\}\\) : \\(\\mathbf{Z} = \\{\\mathbf{z}_1,\\ldots,\\mathbf{z}_N\\}\\) \\(\\boldsymbol{\\theta}=\\{\\boldsymbol{\\pi}, \\mathbf{A}, \\boldsymbol{\\phi}\\}\\) ※ 一般に放出確率 \\(p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\boldsymbol{\\phi}\\right)\\) は、 二値のベクトル \\(\\mathbf{z}_n\\) の \\(K\\) 個の可能な状態に対応した \\(K\\) 個の要素を持つベクトルからなる任意の分布 $$ p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}, \\phi\\right)=\\prod_{k=1}&#94;{K} p\\left(\\mathbf{x}_{n} | \\phi_{k}\\right)&#94;{z_{n k}}\\qquad (13.9) $$ を考えることも可能ですが、今回は下記の離散多項分布を考えます。 Name Probability Conditional Distribution initial state \\(\\pi_{k} \\equiv p\\left(z_{1 k}=1\\right)\\) \\(p\\left(\\mathbf{z}_{1} \\mid \\boldsymbol{\\pi}\\right)=\\prod_{k=1}&#94;{K} \\pi_{k}&#94;{z_{1 k}}\\quad (13.8)\\) transition probability \\(A_{j k} \\equiv p\\left(z_{n k}=1\\mid z_{n-1, j}=1\\right)\\) \\(p\\left(\\mathbf{z}_{n} \\mid \\mathbf{z}_{n-1}, \\mathbf{A}\\right)=\\prod_{k=1}&#94;{K} \\prod_{j=1}&#94;{K} A_{j k}&#94;{z_{n-1, j} z_{n k}}\\quad (13.7)\\) emission probability \\(\\phi_{i k}\\equiv p\\left(x_{n i}=1 \\mid z_{n k}=1\\right)\\) \\(p(\\mathbf{x}_n \\mid \\mathbf{z}_n, \\boldsymbol{\\phi})=\\prod_{i=1}&#94;{D} \\prod_{k=1}&#94;{K} \\phi_{i k}&#94;{x_{ni} z_{nk}}\\quad (13.22)\\) 尤度関数 ここで、データ集合 \\(\\mathbf{X}\\) が観測された際に、上記の同時分布を潜在変数 \\(\\mathbf{Z}\\) について周辺化することで、尤度関数は以下のように記述されます。 $$ p(\\mathbf{X} | \\boldsymbol{\\theta})=\\sum_{\\mathbf{Z}} p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.11) $$ しかし、この尤度関数は \\(n\\) について分解できない（ \\(\\mathbf{z}_n\\) ）ごとに和を取れないので、 条件付き独立 の性質を活かして 尤度関数の対数の期待値 を最大化する Baum-Welch algorithm (EM algorithm) を用います。 Baum-Welch (EM) パラメータ \\(\\boldsymbol{\\theta}&#94;{\\text {old }}\\) を用いて \\(p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化する。 対数尤度関数の期待値 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を求める。 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)\\) を最大化するパラメータに更新する。 \\(\\boldsymbol{\\theta}\\rightarrow\\boldsymbol{\\theta}&#94;{\\text {old }}\\) 1に戻る。 $$ Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right)=\\sum_{\\mathbf{Z}} p\\left(\\mathbf{Z} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) \\ln p(\\mathbf{X}, \\mathbf{Z} | \\boldsymbol{\\theta})\\qquad (13.12) $$ ここで、表記を簡単にするために、 γ 、 ξ を導入します。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.13)\\\\ \\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n} | \\mathbf{X}, \\boldsymbol{\\theta}&#94;{\\text {old }}\\right) &(13.14) \\end{aligned} $$ なお、潜在変数が離散なので、以下のように記述し直せます。（ \\(\\pi_{k},A_{j k},\\phi_{j k}\\) と同様。） $$ \\begin{aligned} \\gamma\\left(z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n k} &(13.15)\\\\ \\xi\\left(z_{n-1, j}, z_{n k}\\right) &=\\sum_{\\mathbf{z}} \\gamma(\\mathbf{z}) z_{n-1, j} z_{n k} &(13.16)\\end{aligned} $$ これらを用いると、 \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) が以下のように書き下せます。 （計算過程） $$ \\begin{aligned} Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)=& \\sum_{k=1}&#94;{K} \\gamma\\left(z_{1 k}\\right) \\ln \\pi_{k}+\\sum_{n=2}&#94;{N} \\sum_{j=1}&#94;{K} \\sum_{k=1}&#94;{K} \\xi\\left(z_{n-1, j}, z_{n k}\\right) \\ln A_{j k} \\\\ &+\\sum_{n=1}&#94;{N} \\sum_{k=1}&#94;{K}\\gamma\\left(z_{n k}\\right) \\sum_{i=1}&#94;Dx_{ni} \\ln \\phi_{i k} \\end{aligned}\\qquad (13.17) $$ Maximization step ※ 実際の計算の順番からは前後しますが、先にM stepを説明します。 上記の \\(Q\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\theta}&#94;{\\mathrm{old}}\\right)\\) を各パラメータ \\(\\boldsymbol{\\theta}\\) に関して最大化するのは（別ブロックに別れているから）簡単で、それぞれ 適当なラグランジュ乗数を導入する ことで、以下のように求まります。 （計算過程） $$ \\begin{aligned} \\pi_{k}&= \\frac{\\gamma\\left(z_{1 k}\\right)}{\\sum_{j=1}&#94;{K} \\gamma\\left(z_{1 j}\\right)} & (13.18)\\\\ A_{j k}&= \\frac{\\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n k}\\right)}{\\sum_{l=1}&#94;{K} \\sum_{n=2}&#94;{N} \\xi\\left(z_{n-1, j}, z_{n l}\\right)} & (13.19)\\\\ \\phi_{i k}&=\\frac{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right) x_{n i}}{\\sum_{n=1}&#94;{N} \\gamma\\left(z_{n k}\\right)} & (13.23) \\end{aligned} $$ Expectation step M step で必要となる \\(\\gamma,\\xi\\) は、 条件付き独立性 を用いることで効率的に計算することができます。 $$ \\begin{aligned} \\gamma\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right)=\\frac{p\\left(\\mathbf{X} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\quad (\\because \\text{Bayes' theorem}) &(13.32)\\\\ &=\\frac{p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\quad (\\because \\text{conditional independence})\\\\ &= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} & (13.33) \\end{aligned} $$ $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{1}, \\ldots, \\mathbf{x}_{n}, \\mathbf{z}_{n}\\right) & (13.34)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) & \\equiv p\\left(\\mathbf{x}_{n+1}, \\ldots, \\mathbf{x}_{N} | \\mathbf{z}_{n}\\right) & (13.35) \\end{aligned} $$ 条件付き独立性を用いてそれぞれ変形すると、以下の再帰式を導くことができます。 （計算過程） $$ \\begin{aligned} \\alpha\\left(\\mathbf{z}_{n}\\right) &=p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) \\sum_{\\mathbf{z}_{n-1}} \\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) & (13.36)\\\\ \\alpha\\left(\\mathbf{z}_{1}\\right) &=p\\left(\\mathbf{x}_{1}, \\mathbf{z}_{1}\\right)=p\\left(\\mathbf{z}_{1}\\right) p\\left(\\mathbf{x}_{1} | \\mathbf{z}_{1}\\right)=\\prod_{k=1}&#94;{K}\\left\\{\\pi_{k} p\\left(\\mathbf{x}_{1} | \\boldsymbol{\\phi}_{k}\\right)\\right\\}&#94;{z_{1 k}} & (13.37)\\\\ \\beta\\left(\\mathbf{z}_{n}\\right) &=\\sum_{\\mathbf{z}_{n+1}} \\beta\\left(\\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{x}_{n+1} | \\mathbf{z}_{n+1}\\right) p\\left(\\mathbf{z}_{n+1} | \\mathbf{z}_{n}\\right) & (13.38)\\\\ \\beta\\left(\\mathbf{z}_{N}\\right) &= \\frac{\\gamma\\left(\\mathbf{z}_N\\right)p\\left(\\mathbf{X}\\right)}{\\alpha\\left(\\mathbf{z}_N\\right)} = \\frac{p\\left(\\mathbf{z}_{N} | \\mathbf{X}\\right)p(\\mathbf{X})}{p\\left(\\mathbf{X}, \\mathbf{z}_{N}\\right)} = 1 & (13.30) \\end{aligned} $$ ※ なお、ここで \\(\\alpha\\) の再起式を forward-algorithm 、 \\(\\beta\\) の再起式を backward-algorithm と呼ぶことがあります。 また、これらを用いて \\(\\xi\\) を記述することもでき、以下のように表せます。 （計算過程） $$\\xi\\left(\\mathbf{z}_{n-1}, \\mathbf{z}_{n}\\right)=\\frac{\\alpha\\left(\\mathbf{z}_{n-1}\\right) p\\left(\\mathbf{x}_{n} | \\mathbf{z}_{n}\\right) p\\left(\\mathbf{z}_{n} | \\mathbf{z}_{n-1}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})}\\qquad (13.43)$$ 以上でBaum-Welchに必要な計算式が求まりました。 おまけ（尤度関数） 尤度関数は、アルゴリズムの停止条件に用いられるなど、値を求めることが非常に有用です。 求める際は、 $$ \\gamma\\left(\\mathbf{z}_{n}\\right)= \\frac{\\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)}{p(\\mathbf{X})} \\qquad (13.33) $$ の両辺を \\(\\mathbf{z}_n\\) について周辺化すれば、左辺は $$\\sum_{\\mathbf{z}_{n}} \\gamma\\left(\\mathbf{z}_{n}\\right) = \\sum_{\\mathbf{z}_{n}}p\\left(\\mathbf{z}_{n} | \\mathbf{X}\\right) = 1$$ となることが明らかなので、以下のように求まります。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{n}} \\alpha\\left(\\mathbf{z}_{n}\\right) \\beta\\left(\\mathbf{z}_{n}\\right)\\qquad (13.41)$$ また、上記の式は任意の \\(n\\) について成立するので、 \\(n=N\\) の場合を考えれば \\(\\alpha\\) のみを用いて求めることができます。 $$p(\\mathbf{X})=\\sum_{\\mathbf{z}_{N}} \\alpha\\left(\\mathbf{z}_{N}\\right)\\qquad (13.42)$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-1.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-1.html"},{"title":"Numpyの行列計算チートシート","text":"はじめに 様々なアルゴリズムを実装する際に漸化式は出るけど実装時にうまくいかない。ということは良くあります。また、 Python を使って実装する場合、そのほとんどが行列の取り扱いです。 （柔軟であるが故にエラーを吐かずに動いてしまう…笑） そこで、まずは行列計算のチートシートを作成します。（随時加筆修正していきます。） 目次 基本事項 内積（行列積） 外積 In [1]: import numpy as np 基本事項 In [2]: N = 3 A = np . arange ( N ) B = np . arange ( N ) . reshape ( - 1 , N ) # np.expand_dims(A, axis=0), A[None,:] C = np . arange ( N ) . reshape ( N , - 1 ) # np.expand_dims(A, axis=1), A[:,None] D = np . arange ( N * N ) . reshape ( N , N ) In [3]: print ( f \"A = {A} \" ) print ( f \"B = {B} \" ) print ( f \"C = {C} \" ) print ( f \"D = {D} \" ) A = [0 1 2] B = [[0 1 2]] C = [[0] [1] [2]] D = [[0 1 2] [3 4 5] [6 7 8]] In [4]: print ( f \"A.shape = {A.shape} \" ) print ( f \"B.shape = {B.shape} \" ) print ( f \"C.shape = {C.shape} \" ) print ( f \"D.shape = {D.shape} \" ) A.shape = (3,) B.shape = (1, 3) C.shape = (3, 1) D.shape = (3, 3) In [5]: print ( f \"A.ndim = {A.ndim} \" ) print ( f \"B.ndim = {B.ndim} \" ) print ( f \"C.ndim = {C.ndim} \" ) print ( f \"D.ndim = {D.ndim} \" ) A.ndim = 1 B.ndim = 2 C.ndim = 2 D.ndim = 2 ndim ex. scalar $(0)$ 1 , 2 ,... vector $1$ A matrix $\\geq2$ B , C , D 内積（行列積） vector & scalar / matrix & scalar スカラーが絡むと、各要素とスカラーの積となる。 shape の変化はない。 どちらから掛けてもエラーは起こらない。 In [6]: print ( f \"np.dot(A,2) = {np.dot(A,2)}\" ) # vector & scalar print ( f \"np.dot(B,2) = {np.dot(B,2)}\" ) # matrix & scalar print ( f \"np.dot(C,2) = {np.dot(C,2)}\" ) # matrix & scalar print ( f \"np.dot(D,2) = {np.dot(D,2)}\" ) # matrix & scalar np.dot(A,2) = [0 2 4] np.dot(B,2) = [[0 2 4]] np.dot(C,2) = [[0] [2] [4]] np.dot(D,2) = [[ 0 2 4] [ 6 8 10] [12 14 16]] vector & vector 内積となる。 結果はスカラーとなる。 shape が異なると、エラーが起きる。 In [7]: print ( f \"np.dot(A,A) = {np.dot(A,A)}\" ) # vector & vector np.dot(A,A) = 5 In [8]: np . dot ( A , np . arange ( N - 1 )) # shape=(3,) & shape=(2,) ValueError : shapes (3,) and (2,) not aligned: 3 (dim 0) != 2 (dim 0) vector & matrix 行列積となる。 ベクトルは、位置によって変換のされ方が異なる。 左がベクトルの場合： np.dot((x,) (y,z)) = np.dot((1,x) (y,z)) 右がベクトルの場合： np.dot((y,z) (x,)) = np.dot((y,z) (x,1)) 行列積であるので、結果の shape は np.dot((x,y) (y,z)) = (x,z) となる。 上で y が異なるとエラーが生じる。 In [9]: print ( np . dot ( A , B )) # np.dot((3,)(1,3)) print ( np . dot ( A , C )) # np.dot((3,)(3,1)) print ( np . dot ( B , A )) # np.dot((1,3)(3,)) print ( np . dot ( C , A )) # np.dot((3,1)(3,)) ValueError : shapes (3,) and (1,3) not aligned: 3 (dim 0) != 3 (dim 0) [5] [5] ValueError : shapes (3,1) and (3,) not aligned: 1 (dim 1) != 3 (dim 0) matrix & matrix c = np.dot(a,b) a.shape=(a1,a2,...,aN,X) b.shape=(b1,b2,...,X,bM) c.shape=(a1,a2,...,aN,b1,b2,...,bM) c[i1,i2,...,iN,j1,j2,...,jM] == a[i1,i2,...,iM,:].dot(b[j1,j2,...,jM-1,:,jM]) In [10]: import itertools def checkNPdot ( shape1 , shape2 ): \"\"\" 計算可能なshapeの関係を列挙する。 \"\"\" a = np . arange ( np . prod ( shape1 )) b = np . arange ( np . prod ( shape2 )) for comb1 in itertools . permutations ( shape1 , len ( shape1 )): for comb2 in itertools . permutations ( shape2 , len ( shape2 )): try : print ( f \" {comb1} .dot( {comb2} ) = {(a.reshape(comb1).dot(b.reshape(comb2))).shape}\" ) except : pass 以下で具体的に見ていく！ np.dot(2D, 3D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,X,k) c.shape=(i,j,k) c[i,j,k] == a[i,:].dot(b[j,:,k]) In [11]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) c = np . dot ( a , b ) In [12]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3) b.shape = (2, 3, 4) np.dot(a,b).shape = (2, 2, 4) In [13]: I , J , K = c . shape In [14]: np . all ([ c [ i , j , k ] == a [ i ,:] . dot ( b [ j ,:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[14]: True np.dot(3D,2D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(X,k) c.shape=(i,j,k) c[i,j,k] == a[i,j,:].dot(b[:,k]) In [15]: a = np . arange ( 24 ) . reshape ( 4 , 2 , 3 ) b = np . arange ( 6 ) . reshape ( 3 , 2 ) c = np . dot ( a , b ) In [16]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (4, 2, 3) b.shape = (3, 2) np.dot(a,b).shape = (4, 2, 2) In [17]: I , J , K = c . shape In [18]: np . all ([ c [ i , j , k ] == a [ i , j ,:] . dot ( b [:, k ]) for i in range ( I ) for j in range ( J ) for k in range ( K )]) Out[18]: True np.dot(3D,3D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) In [19]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 60 ) . reshape ( 3 , 4 , 5 ) c = np . dot ( a , b ) In [20]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4) b.shape = (3, 4, 5) np.dot(a,b).shape = (2, 3, 3, 5) In [21]: I , J , K , L = c . shape In [22]: np . all ([ c [ i , j , k , l ] == a [ i , j ,:] . dot ( b [ k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[22]: True np.dot(2D,4D) c = np.dot(a,b) a.shape=(i,X) b.shape=(j,k,X,l) c.shape=(i,j,k,l) c[i,j,k,l] == a[i,:].dot(b[j,k,:,l]) In [23]: a = np . arange ( 6 ) . reshape ( 2 , 3 ) b = np . arange ( 120 ) . reshape ( 2 , 4 , 3 , 5 ) c = np . dot ( a , b ) In [24]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) # c[i,j,k,l] == a[i,j,:].dot(b[k,:,l]) a.shape = (2, 3) b.shape = (2, 4, 3, 5) np.dot(a,b).shape = (2, 2, 4, 5) In [25]: I , J , K , L = c . shape In [26]: np . all ([ c [ i , j , k , l ] == a [ i ,:] . dot ( b [ j , k ,:, l ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L )]) Out[26]: True np.dot(3D,4D) c = np.dot(a,b) a.shape=(i,j,X) b.shape=(k,l,X,m) c.shape=(i,j,k,l,m) c[i,j,k,l,m] == a[i,j,:].dot(b[k,l,:,m]) In [27]: a = np . arange ( 24 ) . reshape ( 2 , 3 , 4 ) b = np . arange ( 360 ) . reshape ( 3 , 5 , 4 , 6 ) c = np . dot ( a , b ) In [28]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4) b.shape = (3, 5, 4, 6) np.dot(a,b).shape = (2, 3, 3, 5, 6) In [29]: I , J , K , L , M = c . shape In [30]: np . all ([ c [ i , j , k , l , m ] == a [ i , j ,:] . dot ( b [ k , l ,:, m ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M )]) Out[30]: True np.dot(4D,4D) c = np.dot(a,b) a.shape=(i,j,k,X) b.shape=(l,m,X,n) c.shape=(i,j,k,l,m,n) c[i,j,k,l,m,n] == a[i,j,k,:].dot(b[l,m,:,n]) In [31]: a = np . arange ( 120 ) . reshape ( 2 , 3 , 4 , 5 ) b = np . arange ( 360 ) . reshape ( 3 , 4 , 5 , 6 ) c = np . dot ( a , b ) In [32]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) print ( f \"np.dot(a,b).shape = {c.shape} \" ) a.shape = (2, 3, 4, 5) b.shape = (3, 4, 5, 6) np.dot(a,b).shape = (2, 3, 4, 3, 4, 6) In [33]: I , J , K , L , M , N = c . shape In [34]: np . all ([ c [ i , j , k , l , m , n ] == a [ i , j , k ,:] . dot ( b [ l , m ,:, n ]) for i in range ( I ) for j in range ( J ) for k in range ( K ) for l in range ( L ) for m in range ( M ) for n in range ( N )]) Out[34]: True 外積 c = np.outer(a,b) c[i][j] = a.reshape(-1,)[i]*b.reshape(-1,)[j] In [35]: c = np . outer ( a , b ) In [36]: print ( f \"a.shape = {a.shape} \" ) print ( f \"b.shape = {b.shape} \" ) a.shape = (a1,a2,...,aN) b.shape = (b1,b2,...,bM) In [37]: Na = np . prod ( a . shape ) Nb = np . prod ( b . shape ) In [38]: print ( f \"Na = {Na} \" ) print ( f \"Nb = {Nb} \" ) Na = a1*a2*・・・*aN Nb = b1*b2*・・・*bM In [39]: print ( c . shape ) (Na, Nb) In [40]: np . all ([ c [ i ][ j ] == a . reshape ( - 1 ,)[ i ] * b . reshape ( - 1 ,)[ j ] for i in range ( Na ) for j in range ( Nb )]) Out[40]: True In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: 'center',\" + \" displayIndent: '0em',\" + \" showMathMenu: true,\" + \" tex2jax: { \" + \" inlineMath: [ ['$','$'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }\" + \" } \" + \"}); \"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"情報基礎実験(浅井)","url":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-0.html","loc":"https://iwasakishuto.github.io/University/3A/情報基礎実験(浅井)-0.html"},{"title":"分子生命科学Ⅲ 第1回","text":"講師： 饗場篤 参考文献： Neuroscience: Exploring the Brain, 3rd Edition 参考文献： Principles of Neurobiology 講義概要 この授業最大の目的は、 「将来僕らが脳を対象とすることになった時に敷居を低くする」 こと。 # タイトル 内容 日付 1 神経系の構造と機能 中枢神経系の構造・機能 末梢神経系の構造・機能 9/26,10/3 2 感覚神経系 感覚系の構成 体性感覚系 視覚系（末梢視覚系・平衡感覚系） 聴覚と平衡感覚（聴覚系・平衡感覚系） 化学感覚系（嗅覚系・味覚系） 10/10,17,24,31 3 運動系 脊髄による運動制御 脳による運動制御 11/14,21 4 脳と行動の化学的制御 11/28 5 摂食行動 12/12 6 脳のリズムと睡眠 脳波 睡眠 概日リズム 12/19 7 精神疾患 統合失調症 感情障害 不安障害 12/26 8 神経変性疾患 アルツハイマー病 パーキンソン病 ALS 1/9 神経系の構造と機能（１） 神経系の機能的構成 神経系は、 感覚系 、 統合系 、 運動系 の３つに分けることができる。 感覚系は、感覚器で何かを感じると、 陽イオン が神経細胞の末端に流れ込み、 活動電位 が上がり、電気的なシグナルとして 中枢神経系(CNS)特に、大脳皮質の感覚野 にこの入力を伝える。 運動系は、逆向きで、脳の運動野からのシグナルが 末梢神経系 に伝わる。 神経系の構成成分 ニューロン(神経細胞,neuron) グリア細胞(glial cells) 血管(blood vessels) ニューロン(neuron) 極性のある細胞で、 細胞体(cell body or soma) 、 樹状突起(dendrites) 、 軸索(axon) からなり、（ほとんどの場合） 活動電位(action potential) を発生する。 膝蓋腱反射(knee-jerk reflex) ニューロンがどのように神経回路に含まれているか、を示す良い例。 医師が膝蓋骨の下の腱を軽く叩くと、大腿四頭筋が伸ばされ、その信号が脊髄まで伝わる。この信号が脊髄で 運動ニューロン に直結しており、運動ニューロンが発火して少し離れた部分の筋肉を収縮させる。その反動で足が上がる。 グリア細胞(glia cells) グリア細胞はニューロン（ヒトでは \\(1\\) - \\(2\\times10&#94;{11}\\) 個）の \\(3\\) - \\(10\\) 倍（マウスだと同数程度）存在し、脳の体積の約半分を占める。 長い軸索と興奮性膜を特徴とするニューロンに対して、グリア細胞の突起は細胞体の周辺に留まり、活動電位を発生しない。 ニューロンの生存や発達、機能発言のための液性環境維持と代謝的支援、神経伝達の調節等を行なっている。 と、ニューロンの補助的な役割だと今までは考えられていたが、最近ではもっと積極的な意味があるのでは無いかと研究されている。 中枢神経系のグリア細胞が下の4種からなる。 アストロサイト(astrocyte)（アストログリア、星状膠細胞） オリゴデンドロサイト(oligodendrocyte)（オリゴデンドログリア、稀突起膠細胞） 上衣細胞(ependymal cell) ミクログリア(microglia)（小膠細胞） アストロサイト(astrocyte)の機能 血液脳関門 を形成してがんが脳に転移しないように防御したりしている。 神経伝達物質の最取り込み（神経伝達物質が出てすぐに取り込まないと、麻薬や覚せい剤のような影響が出てしまう。）。 オリゴデンドロサイト(oligodendrocyte) 中枢神経系 において、 髄鞘（ミエリン・myelin） を形成する。（ 末梢 では シュワン細胞 が髄鞘を形成する。） 上衣細胞(ependymal cells) ミクログリア(microglia) 上衣細胞は脳室と脊髄中心管を覆う一層の上皮性細胞で、脳を脳脊髄液から遮断する（脳脊髄液脳関門(cerebro-spinal fluid brain barrier)） ミクログリアは損傷に際して活性化する脳内の免疫性細胞で貪食能を持つ。アストログリア、オリゴデンドロサイト、上衣細胞が 外胚葉 由来なのに対し、ミクログリアは 中胚葉 由来である。 脳の構造 哺乳動物の脳は、ほぼ共通の構造を持っている。ヒトの特徴は、 連合野 が広いということである。 解剖学用語 解剖学用語 解剖学的切断面 神経系の構成 中枢神経系(CNS: central nervous system) 脳(brain) 大脳(cerebrum) 小脳(cerebellum) 脳幹(brain stem) 脊髄(spinal cord) 末梢神経系(PNS: peripheral nervous system) 体性神経系(somatic nervous system) 脳神経(cranial nerve) 脊髄神経(spinal nerve) 自律神経系(autonomic nervous system) 小脳(cerebellum) 脳幹（延髄・橋・中脳・間脳）の背後に位置する。 大脳や脊髄と広範な連絡を持つ運動制御中枢 言語や思考などの高次脳機能に関与 小脳の 同 側の身体の運動に関与 脳幹(brain stem) 間脳→中脳→橋→延髄からなり、上方で間脳に、下方で脊髄に連なる（狭義では間脳を含めない）。 大脳から脊髄・小脳への情報、逆に脊髄・小脳から大脳への情報を中継 呼吸、意識、体温調節等の生命維持機能を制御 （大脳・小脳の損傷では生存できるが、脳幹の損傷は通常早急な死に至る） 錐体交叉 脳の運動ニューロンの軸索が延髄の後ろで一旦交叉（ 錐体交叉 ）して反対側にいっているから、反対側の機能がうまく制限できなくなる。 一方で 小脳 は同側なので、そのようなことは起こらない。 脊髄(spinal cord) 脊髄は脊柱管にあり、延髄に続いて錐体交叉下端より始まり、脊髄円錐にて終わる。 皮膚・関節・筋肉から脳への情報、逆に脳からの情報を伝える主経路 末梢神経の脊髄神経で身体と通ずる。 脊髄に入る情報を運ぶ軸索は 後根(dorsal root) に含まれ、脊髄から出ていく情報を運ぶ軸索は 前根(ventral root) に含まれる。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" fonts: [['STIX', 'TeX']],\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"分子生命科学Ⅲ","url":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html","loc":"https://iwasakishuto.github.io/University/3A/分子生命科学Ⅲ-1.html"}]};